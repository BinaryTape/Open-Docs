import{_ as E,C as t,c,o as u,j as i,G as a,ag as h,a as e,w as n}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-form-based-auth.md","filePath":"ko/ktor/server-form-based-auth.md","lastUpdated":1755457140000}'),g={name:"ko/ktor/server-form-based-auth.md"};function y(m,s,F,v,f,b){const p=t("show-structure"),o=t("Links"),k=t("tldr"),l=t("code-block"),r=t("TabItem"),d=t("Tabs");return u(),c("div",null,[s[5]||(s[5]=i("h1",{id:"ktor-서버의-폼-기반-인증",tabindex:"-1"},[e("Ktor 서버의 폼 기반 인증 "),i("a",{class:"header-anchor",href:"#ktor-서버의-폼-기반-인증","aria-label":'Permalink to "Ktor 서버의 폼 기반 인증"'},"​")],-1)),a(p,{for:"chapter",depth:"2"}),a(k,null,{default:n(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"필수 의존성"),e(": "),i("code",null,"io.ktor:ktor-server-auth")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"코드 예시"),e(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-html-dsl"},"auth-form-html-dsl"),e(", "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session"},"auth-form-session")],-1)),i("p",null,[i("b",null,[a(o,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임이나 가상 머신 없이 서버를 실행할 수 있게 해줍니다."},{default:n(()=>s[0]||(s[0]=[e("네이티브 서버")])),_:1}),s[1]||(s[1]=e(" 지원"))]),s[2]||(s[2]=e(": ✅ "))])]),_:1}),s[6]||(s[6]=h('<p>폼 기반 인증은 <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms" target="_blank" rel="noreferrer">웹 폼</a>을 사용하여 자격 증명 정보를 수집하고 사용자를 인증합니다. Ktor에서 웹 폼을 만들려면, <a href="./server-html-dsl#html_response">HTML DSL</a>을 사용하거나 FreeMarker, Velocity 등과 같은 JVM <a href="./server-templating">템플릿 엔진</a> 중에서 선택할 수 있습니다.</p><blockquote><p>폼 기반 인증을 사용할 때 사용자 이름과 비밀번호가 일반 텍스트로 전달되므로, 민감한 정보를 보호하려면 <a href="./server-ssl">HTTPS/TLS</a>를 사용해야 합니다.</p></blockquote><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>form</code> 인증을 활성화하려면 빌드 스크립트에 <code>ktor-server-auth</code> 아티팩트를 포함해야 합니다.</p>',4)),a(d,{group:"languages"},{default:n(()=>[a(r,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),a(r,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),a(r,{title:"Maven","group-key":"maven"},{default:n(()=>[a(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[7]||(s[7]=h(`<h2 id="flow" tabindex="-1">폼 기반 인증 흐름 <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;폼 기반 인증 흐름 {id=&quot;flow&quot;}&quot;">​</a></h2><p>폼 기반 인증 흐름은 다음과 같습니다:</p><ol><li><p>인증되지 않은 클라이언트가 서버 애플리케이션의 특정 <a href="./server-routing">경로</a>로 요청을 보냅니다.</p></li><li><p>서버는 사용자 이름과 비밀번호를 요구하는 HTML 기반 웹 폼으로 구성된 HTML 페이지를 반환합니다.</p><blockquote><p>Ktor는 <a href="./server-html-dsl">Kotlin DSL</a>을 사용하여 폼을 만들거나, FreeMarker, Velocity 등과 같은 다양한 JVM 템플릿 엔진 중에서 선택할 수 있도록 합니다.</p></blockquote></li><li><p>사용자가 사용자 이름과 비밀번호를 제출하면, 클라이언트는 웹 폼 데이터(사용자 이름과 비밀번호 포함)를 담은 요청을 서버로 보냅니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">POST http:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//localhost:8080/login</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Type: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">application</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">www</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">form</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">urlencoded</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jetbrains&amp;password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foobar</span></span></code></pre></div><p>Ktor에서는 사용자 이름과 비밀번호를 가져오는 데 사용되는 <a href="#configure-provider">파라미터 이름을 지정</a>해야 합니다.</p></li><li><p>서버는 클라이언트가 보낸 자격 증명을 <a href="#configure-provider">검증</a>하고 요청된 콘텐츠로 응답합니다.</p></li></ol><h2 id="install" tabindex="-1">폼 인증 설치 <a class="header-anchor" href="#install" aria-label="Permalink to &quot;폼 인증 설치 {id=&quot;install&quot;}&quot;">​</a></h2><p><code>form</code> 인증 프로바이더를 설치하려면, <code>install</code> 블록 내에서 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/form.html" target="_blank" rel="noreferrer">form</a> 함수를 호출하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure form authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>선택적으로 특정 <a href="#authenticate-route">경로를 인증</a>하는 데 사용될 수 있는 <a href="./server-auth#provider-name">프로바이더 이름</a>을 지정할 수 있습니다.</p><h2 id="configure" tabindex="-1">폼 인증 설정 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;폼 인증 설정 {id=&quot;configure&quot;}&quot;">​</a></h2><h3 id="configure-provider" tabindex="-1">1단계: 폼 프로바이더 설정 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;1단계: 폼 프로바이더 설정 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p><code>form</code> 인증 프로바이더는 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-form-authentication-provider/-config/index.html" target="_blank" rel="noreferrer">FormAuthenticationProvider.Config</a> 클래스를 통해 설정을 노출합니다. 아래 예시에서는 다음 설정들이 지정됩니다:</p><ul><li><code>userParamName</code> 및 <code>passwordParamName</code> 프로퍼티는 사용자 이름과 비밀번호를 가져오는 데 사용되는 파라미터 이름을 지정합니다.</li><li><code>validate</code> 함수는 사용자 이름과 비밀번호를 검증합니다. <code>validate</code> 함수는 <code>UserPasswordCredential</code>을 확인하고 인증 성공 시 <code>UserIdPrincipal</code>을 반환하며, 인증 실패 시 <code>null</code>을 반환합니다.</li><li><code>challenge</code> 함수는 인증 실패 시 수행되는 동작을 지정합니다. 예를 들어, 로그인 페이지로 리디렉션하거나 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-unauthorized-response/index.html" target="_blank" rel="noreferrer">UnauthorizedResponse</a>를 보낼 수 있습니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userParamName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;username&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        passwordParamName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;password&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (credentials.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jetbrains&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> credentials.password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentials.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        challenge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpStatusCode.Unauthorized, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Credentials are not valid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><code>basic</code> 인증과 마찬가지로, 사용자 이름과 비밀번호 해시를 저장하는 인메모리 테이블에 저장된 사용자를 검증하기 위해 <a href="./server-basic-auth#validate-user-hash">UserHashedTableAuth</a>를 사용할 수도 있습니다.</p></blockquote><h3 id="authenticate-route" tabindex="-1">2단계: 특정 리소스 보호 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;2단계: 특정 리소스 보호 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p><code>form</code> 프로바이더를 설정한 후, 데이터가 전송될 <code>post</code> 경로를 정의해야 합니다. 그런 다음, 이 경로를 <strong><a href="./server-auth#authenticate-route">authenticate</a></strong> 함수 내에 추가하세요. 인증에 성공하면, <code>call.principal</code> 함수를 사용하여 경로 핸들러 내에서 인증된 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-id-principal/index.html" target="_blank" rel="noreferrer">UserIdPrincipal</a>을 검색하고 인증된 사용자의 이름을 얻을 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()?.name}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>로그인한 사용자의 ID를 저장하기 위해 <a href="./server-session-auth">세션 인증</a>을 사용할 수 있습니다. 예를 들어, 사용자가 웹 폼을 사용하여 처음 로그인할 때, 사용자 이름을 쿠키 세션에 저장하고 이후 요청에서는 <code>session</code> 프로바이더를 사용하여 이 사용자를 인증할 수 있습니다.</p>`,17))])}const q=E(g,[["render",y]]);export{_ as __pageData,q as default};
