import{_ as e,c as t,o as r,ag as a}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"Kotlin 2.1 互換性ガイド","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/compatibility-guide-21.md","filePath":"ja/kotlin/compatibility-guide-21.md","lastUpdated":1754307826000}'),n={name:"ja/kotlin/compatibility-guide-21.md"};function l(i,o,s,p,c,g){return r(),t("div",null,o[0]||(o[0]=[a('<h1 id="kotlin-2-1-互換性ガイド" tabindex="-1">Kotlin 2.1 互換性ガイド <a class="header-anchor" href="#kotlin-2-1-互換性ガイド" aria-label="Permalink to &quot;Kotlin 2.1 互換性ガイド&quot;">​</a></h1><p>「<a href="/ja/kotlin/kotlin-evolution-principles">言語を現代的に保つ (Keeping the Language Modern)</a>」と「<a href="/ja/kotlin/kotlin-evolution-principles">快適なアップデート (Comfortable Updates)</a>」は、Kotlin言語設計における基本的な原則です。前者は言語の進化を妨げる構文は削除すべきであると述べ、後者はコードの移行が可能な限りスムーズになるよう、この削除は事前に十分に通知されるべきであると述べています。</p><p>ほとんどの言語変更は、更新履歴やコンパイラ警告などの他のチャネルを通じてすでに発表されていますが、このドキュメントはそれらすべてをまとめ、Kotlin 2.0からKotlin 2.1への移行に関する完全なリファレンスを提供します。</p><h2 id="基本的な用語" tabindex="-1">基本的な用語 <a class="header-anchor" href="#基本的な用語" aria-label="Permalink to &quot;基本的な用語&quot;">​</a></h2><p>このドキュメントでは、いくつかの種類の互換性について説明します。</p><ul><li><em>ソース互換性 (source)</em>: ソース非互換な変更とは、以前は問題なく（エラーや警告なしに）コンパイルされていたコードが、コンパイルできなくなる変更を指します。</li><li><em>バイナリ互換性 (binary)</em>: 2つのバイナリ成果物がバイナリ互換であるとは、それらを入れ替えてもロードまたはリンケージエラーが発生しない場合を指します。</li><li><em>動作互換性 (behavioral)</em>: ある変更が動作非互換であるとは、同じプログラムがその変更を適用する前後で異なる動作を示す場合を指します。</li></ul><p>これらの定義は純粋なKotlinのみに与えられていることに注意してください。他の言語の視点（例えばJavaから見た）でのKotlinコードの互換性は、このドキュメントの範囲外です。</p><h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><h3 id="言語バージョン-1-4-および-1-5-の削除" tabindex="-1">言語バージョン 1.4 および 1.5 の削除 <a class="header-anchor" href="#言語バージョン-1-4-および-1-5-の削除" aria-label="Permalink to &quot;言語バージョン 1.4 および 1.5 の削除&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-60521" target="_blank" rel="noreferrer">KT-60521</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 2.1 では言語バージョン 2.1 が導入され、言語バージョン 1.4 および 1.5 のサポートが削除されます。言語バージョン 1.6 および 1.7 は非推奨になります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.0: 言語バージョン 1.4 に対して警告を報告</li><li>1.9.0: 言語バージョン 1.5 に対して警告を報告</li><li>2.1.0: 言語バージョン 1.6 および 1.7 に対して警告を報告。言語バージョン 1.4 および 1.5 の警告をエラーに昇格</li></ul></blockquote><h3 id="kotlin-nativeにおけるtypeof-関数の動作変更" tabindex="-1">Kotlin/NativeにおけるtypeOf()関数の動作変更 <a class="header-anchor" href="#kotlin-nativeにおけるtypeof-関数の動作変更" aria-label="Permalink to &quot;Kotlin/NativeにおけるtypeOf()関数の動作変更&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-70754" target="_blank" rel="noreferrer">KT-70754</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: 動作</p><p><strong>概要</strong>: Kotlin/Native の <code>typeOf()</code> 関数の動作が Kotlin/JVM と整合され、プラットフォーム間の一貫性が確保されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: Kotlin/Native における <code>typeOf()</code> 関数の動作を整合</li></ul></blockquote><h3 id="型パラメータの境界を介した型の公開を禁止" tabindex="-1">型パラメータの境界を介した型の公開を禁止 <a class="header-anchor" href="#型パラメータの境界を介した型の公開を禁止" aria-label="Permalink to &quot;型パラメータの境界を介した型の公開を禁止&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-69653" target="_blank" rel="noreferrer">KT-69653</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: 型パラメータの境界を介してより低い可視性の型を公開することが禁止され、型の可視性ルールにおける矛盾が解消されます。この変更により、型パラメータの境界がクラスと同じ可視性ルールに従うようになり、JVMでのIR検証エラーなどの問題が防止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: より低い可視性を持つ型パラメータの境界を介して型を公開する場合に警告を報告</li><li>2.2.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="抽象的なvarプロパティとvalプロパティを同じ名前で継承することを禁止" tabindex="-1">抽象的なvarプロパティとvalプロパティを同じ名前で継承することを禁止 <a class="header-anchor" href="#抽象的なvarプロパティとvalプロパティを同じ名前で継承することを禁止" aria-label="Permalink to &quot;抽象的なvarプロパティとvalプロパティを同じ名前で継承することを禁止&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-58659" target="_blank" rel="noreferrer">KT-58659</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: クラスがインターフェースから抽象 <code>var</code> プロパティを、そしてスーパークラスから同じ名前の <code>val</code> プロパティを継承する場合、コンパイルエラーが発生するようになりました。これにより、そのようなケースでセッターが不足していることによって引き起こされるランタイムクラッシュが解決されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: クラスがインターフェースから抽象 <code>var</code> プロパティを、そしてスーパークラスから同じ名前の <code>val</code> プロパティを継承する場合に警告を報告（またはプログレッシブモードではエラー）</li><li>2.2.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="初期化されていないenumエントリにアクセスする際にエラーを報告" tabindex="-1">初期化されていないEnumエントリにアクセスする際にエラーを報告 <a class="header-anchor" href="#初期化されていないenumエントリにアクセスする際にエラーを報告" aria-label="Permalink to &quot;初期化されていないEnumエントリにアクセスする際にエラーを報告&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-68451" target="_blank" rel="noreferrer">KT-68451</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: コンパイラは、enumクラスまたはエントリの初期化中に初期化されていないenumエントリにアクセスされた場合にエラーを報告するようになりました。これにより、メンバープロパティの初期化ルールとの動作が整合され、ランタイム例外が防止され、一貫したロジックが保証されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: 初期化されていないenumエントリにアクセスする際にエラーを報告</li></ul></blockquote><h3 id="k2におけるスマートキャスト伝播の変更" tabindex="-1">K2におけるスマートキャスト伝播の変更 <a class="header-anchor" href="#k2におけるスマートキャスト伝播の変更" aria-label="Permalink to &quot;K2におけるスマートキャスト伝播の変更&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-34" target="_blank" rel="noreferrer">KTLC-34</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: 動作</p><p><strong>概要</strong>: K2コンパイラは、<code>val x = y</code> のように型推論された変数に対する型情報の双方向伝播を導入することで、スマートキャスト伝播の動作を変更します。<code>val x: T = y</code> のような明示的に型指定された変数は型情報を伝播しなくなり、宣言された型への厳格な準拠が保証されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: 新しい動作を有効化</li></ul></blockquote><h3 id="javaサブクラスにおけるメンバー拡張プロパティのオーバーライドの処理を修正" tabindex="-1">Javaサブクラスにおけるメンバー拡張プロパティのオーバーライドの処理を修正 <a class="header-anchor" href="#javaサブクラスにおけるメンバー拡張プロパティのオーバーライドの処理を修正" aria-label="Permalink to &quot;Javaサブクラスにおけるメンバー拡張プロパティのオーバーライドの処理を修正&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-35" target="_blank" rel="noreferrer">KTLC-35</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: 動作</p><p><strong>概要</strong>: Javaサブクラスによってオーバーライドされたメンバー拡張プロパティのゲッターは、サブクラスのスコープで非表示になり、通常のKotlinプロパティの動作と整合されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: 新しい動作を有効化</li></ul></blockquote><h3 id="protected-valをオーバーライドするvarプロパティのゲッターとセッターの可視性の整合を修正" tabindex="-1">protected valをオーバーライドするvarプロパティのゲッターとセッターの可視性の整合を修正 <a class="header-anchor" href="#protected-valをオーバーライドするvarプロパティのゲッターとセッターの可視性の整合を修正" aria-label="Permalink to &quot;protected valをオーバーライドするvarプロパティのゲッターとセッターの可視性の整合を修正&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-36" target="_blank" rel="noreferrer">KTLC-36</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: バイナリ</p><p><strong>概要</strong>: <code>protected val</code> プロパティをオーバーライドする <code>var</code> プロパティのゲッターとセッターの可視性が一貫するようになり、両方ともオーバーライドされた <code>val</code> プロパティの可視性を継承します。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: K2においてゲッターとセッターの両方で一貫した可視性を強制。K1は影響を受けません。</li></ul></blockquote><h3 id="jspecify-null許容性不一致診断の重大度をエラーに引き上げ" tabindex="-1">JSpecify null許容性不一致診断の重大度をエラーに引き上げ <a class="header-anchor" href="#jspecify-null許容性不一致診断の重大度をエラーに引き上げ" aria-label="Permalink to &quot;JSpecify null許容性不一致診断の重大度をエラーに引き上げ&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-11" target="_blank" rel="noreferrer">KTLC-11</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: <code>org.jspecify.annotations</code> からの null 許容性（Nullability）の不一致（例: <code>@NonNull</code>, <code>@Nullable</code>, <code>@NullMarked</code>）が警告ではなくエラーとして扱われるようになり、Java相互運用性（interoperability）においてより厳格な型安全性が強制されます。これらの診断の重大度を調整するには、<code>-Xnullability-annotations</code> コンパイラオプションを使用します。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.0: 潜在的なnull許容性の不一致に対して警告を報告</li><li>1.8.20: <code>@Nullable</code>, <code>@NullnessUnspecified</code>, <code>@NullMarked</code>、および <code>org.jspecify.nullness</code> 内のレガシーアノテーション（JSpecify 0.2以前）を含む特定のJSpecifyアノテーションに警告を拡張</li><li>2.0.0: <code>@NonNull</code> アノテーションのサポートを追加</li><li>2.1.0: JSpecifyアノテーションのデフォルトモードを <code>strict</code> に変更し、警告をエラーに変換。デフォルトの動作を上書きするには、<code>-Xnullability-annotations=@org.jspecify.annotations:warning</code> または <code>-Xnullability-annotations=@org.jspecify.annotations:ignore</code> を使用</li></ul></blockquote><h3 id="あいまいなケースでのオーバーロード解決において、invoke呼び出しよりも拡張関数を優先するように変更" tabindex="-1">あいまいなケースでのオーバーロード解決において、invoke呼び出しよりも拡張関数を優先するように変更 <a class="header-anchor" href="#あいまいなケースでのオーバーロード解決において、invoke呼び出しよりも拡張関数を優先するように変更" aria-label="Permalink to &quot;あいまいなケースでのオーバーロード解決において、invoke呼び出しよりも拡張関数を優先するように変更&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-37" target="_blank" rel="noreferrer">KTLC-37</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: 動作</p><p><strong>概要</strong>: オーバーロード解決において、あいまいなケースではinvoke呼び出しよりも拡張関数が常に優先されるようになりました。これにより、ローカル関数とプロパティの解決ロジックにおける矛盾が解消されます。この変更は再コンパイル後にのみ適用され、プリコンパイルされたバイナリには影響しません。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: シグネチャが一致する拡張関数の <code>invoke</code> 呼び出しよりも拡張関数を常に優先するようにオーバーロード解決を変更。この変更は再コンパイル後にのみ適用され、プリコンパイルされたバイナリには影響しません。</li></ul></blockquote><h3 id="jdk関数インターフェースのsamコンストラクタにおけるラムダからのnull許容値の返却を禁止" tabindex="-1">JDK関数インターフェースのSAMコンストラクタにおけるラムダからのnull許容値の返却を禁止 <a class="header-anchor" href="#jdk関数インターフェースのsamコンストラクタにおけるラムダからのnull許容値の返却を禁止" aria-label="Permalink to &quot;JDK関数インターフェースのSAMコンストラクタにおけるラムダからのnull許容値の返却を禁止&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-42" target="_blank" rel="noreferrer">KTLC-42</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: JDK関数インターフェースのSAMコンストラクタにおけるラムダからnull許容値（nullable values）を返すことが、指定された型引数が非null許容である場合にコンパイルエラーを引き起こすようになりました。これにより、null許容性の不一致がランタイム例外につながる可能性のある問題が解決され、より厳格な型安全性が確保されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.0.0: JDK関数インターフェースのSAMコンストラクタにおけるnull許容戻り値に対して非推奨警告を報告</li><li>2.1.0: 新しい動作をデフォルトで有効化</li></ul></blockquote><h3 id="kotlin-nativeにおけるprivateメンバーとpublicメンバーの競合処理の修正" tabindex="-1">Kotlin/Nativeにおけるprivateメンバーとpublicメンバーの競合処理の修正 <a class="header-anchor" href="#kotlin-nativeにおけるprivateメンバーとpublicメンバーの競合処理の修正" aria-label="Permalink to &quot;Kotlin/Nativeにおけるprivateメンバーとpublicメンバーの競合処理の修正&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-43" target="_blank" rel="noreferrer">KTLC-43</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: 動作</p><p><strong>概要</strong>: Kotlin/Nativeでは、privateメンバーがスーパークラスのpublicメンバーをオーバーライドしたり競合したりしなくなり、Kotlin/JVMの動作と整合されます。これにより、オーバーライド解決の矛盾が解消され、個別のコンパイルによって引き起こされる予期せぬ動作が排除されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: Kotlin/Nativeにおけるprivate関数とプロパティは、スーパークラスのpublicメンバーをオーバーライドしたり影響を与えたりしなくなり、JVMの動作と整合される。</li></ul></blockquote><h3 id="publicインライン関数におけるprivate演算子関数へのアクセスを禁止" tabindex="-1">publicインライン関数におけるprivate演算子関数へのアクセスを禁止 <a class="header-anchor" href="#publicインライン関数におけるprivate演算子関数へのアクセスを禁止" aria-label="Permalink to &quot;publicインライン関数におけるprivate演算子関数へのアクセスを禁止&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-71" target="_blank" rel="noreferrer">KTLC-71</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: <code>getValue()</code>, <code>setValue()</code>, <code>provideDelegate()</code>, <code>hasNext()</code>, <code>next()</code> などのprivate演算子関数は、publicインライン関数内でアクセスできなくなりました。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.0.0: publicインライン関数内でprivate演算子関数にアクセスする場合に非推奨警告を報告</li><li>2.1.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="unsafevarianceアノテーションが付けられた不変パラメータへの無効な引数渡しを禁止" tabindex="-1">@UnsafeVarianceアノテーションが付けられた不変パラメータへの無効な引数渡しを禁止 <a class="header-anchor" href="#unsafevarianceアノテーションが付けられた不変パラメータへの無効な引数渡しを禁止" aria-label="Permalink to &quot;@UnsafeVarianceアノテーションが付けられた不変パラメータへの無効な引数渡しを禁止&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-72" target="_blank" rel="noreferrer">KTLC-72</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: コンパイラは型チェック中に <code>@UnsafeVariance</code> アノテーションを無視するようになり、不変型パラメータに対してより厳格な型安全性を強制します。これにより、<code>@UnsafeVariance</code> に依存して期待される型チェックをバイパスする無効な呼び出しが防止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: 新しい動作を有効化</li></ul></blockquote><h3 id="警告レベルのjava型のエラーレベルnull許容引数に対するnull許容性エラーを報告" tabindex="-1">警告レベルのJava型のエラーレベルnull許容引数に対するnull許容性エラーを報告 <a class="header-anchor" href="#警告レベルのjava型のエラーレベルnull許容引数に対するnull許容性エラーを報告" aria-label="Permalink to &quot;警告レベルのJava型のエラーレベルnull許容引数に対するnull許容性エラーを報告&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-100" target="_blank" rel="noreferrer">KTLC-100</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: コンパイラは、警告レベルのnull許容型がより厳格なエラーレベルのnull許容性を持つ型引数を含むJavaメソッドにおけるnull許容性の不一致を検出するようになりました。これにより、以前は無視されていた型引数のエラーが正しく報告されることが保証されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.0.0: より厳格な型引数を持つJavaメソッドにおけるnull許容性の不一致に対して非推奨警告を報告</li><li>2.1.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="アクセス不可能な型の暗黙的な使用を報告" tabindex="-1">アクセス不可能な型の暗黙的な使用を報告 <a class="header-anchor" href="#アクセス不可能な型の暗黙的な使用を報告" aria-label="Permalink to &quot;アクセス不可能な型の暗黙的な使用を報告&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-3" target="_blank" rel="noreferrer">KTLC-3</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: コンパイラは、関数リテラルや型引数におけるアクセス不可能な型の使用を報告するようになり、不完全な型情報によって引き起こされるコンパイル時およびランタイム時の失敗を防ぎます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.0.0: アクセス不可能な非ジェネリック型のパラメータまたはレシーバを持つ関数リテラル、およびアクセス不可能な型引数を持つ型に対して警告を報告。特定のシナリオでアクセス不可能なジェネリック型のパラメータまたはレシーバを持つ関数リテラル、およびアクセス不可能なジェネリック型引数を持つ型に対してエラーを報告</li><li>2.1.0: アクセス不可能な非ジェネリック型のパラメータおよびレシーバを持つ関数リテラルの警告をエラーに昇格</li><li>2.2.0: アクセス不可能な型引数を持つ型の警告をエラーに昇格</li></ul></blockquote><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><h3 id="charおよびstringのロケール依存大文字-小文字変換関数を非推奨化" tabindex="-1">CharおよびStringのロケール依存大文字/小文字変換関数を非推奨化 <a class="header-anchor" href="#charおよびstringのロケール依存大文字-小文字変換関数を非推奨化" aria-label="Permalink to &quot;CharおよびStringのロケール依存大文字/小文字変換関数を非推奨化&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-43023" target="_blank" rel="noreferrer">KT-43023</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: その他のKotlin標準ライブラリAPIの中でも、<code>Char</code> および <code>String</code> のロケール依存大文字/小文字変換関数（例: <code>Char.toUpperCase()</code> や <code>String.toLowerCase()</code>）は非推奨になりました。これらを <code>String.lowercase()</code> のようなロケール非依存の代替関数に置き換えるか、<code>String.lowercase(Locale.getDefault())</code> のようにロケール依存の動作のために明示的にロケールを指定してください。</p><p>Kotlin 2.1.0で非推奨になったKotlin標準ライブラリAPIの包括的なリストについては、<a href="https://youtrack.jetbrains.com/issue/KT-71628" target="_blank" rel="noreferrer">KT-71628</a>を参照してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.4.30: ロケール非依存の代替関数を実験的APIとして導入</li><li>1.5.0: ロケール依存大文字/小文字変換関数を警告付きで非推奨化</li><li>2.1.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="kotlin-stdlib-common-jarアーティファクトの削除" tabindex="-1">kotlin-stdlib-common JARアーティファクトの削除 <a class="header-anchor" href="#kotlin-stdlib-common-jarアーティファクトの削除" aria-label="Permalink to &quot;kotlin-stdlib-common JARアーティファクトの削除&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-62159" target="_blank" rel="noreferrer">KT-62159</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib</p><p><strong>互換性のない変更タイプ</strong>: バイナリ</p><p><strong>概要</strong>: 以前のマルチプラットフォーム宣言メタデータに使用されていた <code>kotlin-stdlib-common.jar</code> アーティファクトは非推奨となり、共通のマルチプラットフォーム宣言メタデータの標準フォーマットとして <code>.klib</code> ファイルに置き換えられます。この変更は、主要な <code>kotlin-stdlib.jar</code> や <code>kotlin-stdlib-all.jar</code> アーティファクトには影響しません。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: <code>kotlin-stdlib-common.jar</code> アーティファクトを非推奨化し削除</li></ul></blockquote><h3 id="appendln-を-appendline-に置き換えて非推奨化" tabindex="-1">appendln() を appendLine() に置き換えて非推奨化 <a class="header-anchor" href="#appendln-を-appendline-に置き換えて非推奨化" aria-label="Permalink to &quot;appendln() を appendLine() に置き換えて非推奨化&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-27" target="_blank" rel="noreferrer">KTLC-27</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: <code>StringBuilder.appendln()</code> は <code>StringBuilder.appendLine()</code> に置き換えられ、非推奨になりました。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.4.0: <code>appendln()</code> 関数は非推奨。使用時に警告を報告</li><li>2.1.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="kotlin-nativeにおけるフリーズ関連apiの非推奨化" tabindex="-1">Kotlin/Nativeにおけるフリーズ関連APIの非推奨化 <a class="header-anchor" href="#kotlin-nativeにおけるフリーズ関連apiの非推奨化" aria-label="Permalink to &quot;Kotlin/Nativeにおけるフリーズ関連APIの非推奨化&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-69545" target="_blank" rel="noreferrer">KT-69545</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: 以前は <code>@FreezingIsDeprecated</code> アノテーションが付けられていたKotlin/Nativeのフリーズ関連APIが非推奨になりました。これは、スレッド共有のためのオブジェクトのフリーズの必要性をなくす新しいメモリマネージャの導入と整合するものです。移行の詳細については、<a href="/ja/kotlin/native-migration-guide#update-your-code">Kotlin/Native移行ガイド</a>を参照してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.7.20: フリーズ関連APIを警告付きで非推奨化</li><li>2.1.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="map-entryの動作を構造変更時に即時失敗-fail-fast-するように変更" tabindex="-1">Map.Entryの動作を構造変更時に即時失敗 (fail-fast) するように変更 <a class="header-anchor" href="#map-entryの動作を構造変更時に即時失敗-fail-fast-するように変更" aria-label="Permalink to &quot;Map.Entryの動作を構造変更時に即時失敗 (fail-fast) するように変更&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-23" target="_blank" rel="noreferrer">KTLC-23</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib</p><p><strong>互換性のない変更タイプ</strong>: 動作</p><p><strong>概要</strong>: 関連するマップが構造的に変更された後に <code>Map.Entry</code> のキーと値のペアにアクセスすると、<code>ConcurrentModificationException</code> がスローされるようになりました。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: マップの構造変更が検出された場合に例外をスロー</li></ul></blockquote><h2 id="ツール" tabindex="-1">ツール <a class="header-anchor" href="#ツール" aria-label="Permalink to &quot;ツール&quot;">​</a></h2><h3 id="kotlincompilationoutput-resourcesdirproviderの非推奨化" tabindex="-1">KotlinCompilationOutput#resourcesDirProviderの非推奨化 <a class="header-anchor" href="#kotlincompilationoutput-resourcesdirproviderの非推奨化" aria-label="Permalink to &quot;KotlinCompilationOutput#resourcesDirProviderの非推奨化&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-69255" target="_blank" rel="noreferrer">KT-69255</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: <code>KotlinCompilationOutput#resourcesDirProvider</code> フィールドは非推奨になりました。代わりにGradleビルドスクリプトで <code>KotlinSourceSet.resources</code> を使用して追加のリソースディレクトリを追加してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: <code>KotlinCompilationOutput#resourcesDirProvider</code> は非推奨</li></ul></blockquote><h3 id="registerkotlinjvmcompiletask-taskname-modulename-関数の非推奨化" tabindex="-1">registerKotlinJvmCompileTask(taskName, moduleName) 関数の非推奨化 <a class="header-anchor" href="#registerkotlinjvmcompiletask-taskname-modulename-関数の非推奨化" aria-label="Permalink to &quot;registerKotlinJvmCompileTask(taskName, moduleName) 関数の非推奨化&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-69927" target="_blank" rel="noreferrer">KT-69927</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: <code>registerKotlinJvmCompileTask(taskName, moduleName)</code> 関数は非推奨になり、新しい <code>registerKotlinJvmCompileTask(taskName, compilerOptions, explicitApiMode)</code> 関数に置き換えられます。この新しい関数は <code>KotlinJvmCompilerOptions</code> を受け入れるようになりました。これにより、通常は拡張またはターゲットから取得した <code>compilerOptions</code> インスタンスを渡し、タスクのオプションの規約として値を使用できます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: <code>registerKotlinJvmCompileTask(taskName, moduleName)</code> 関数は非推奨</li></ul></blockquote><h3 id="registerkaptgeneratestubstask-taskname-関数の非推奨化" tabindex="-1">registerKaptGenerateStubsTask(taskName) 関数の非推奨化 <a class="header-anchor" href="#registerkaptgeneratestubstask-taskname-関数の非推奨化" aria-label="Permalink to &quot;registerKaptGenerateStubsTask(taskName) 関数の非推奨化&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-70383" target="_blank" rel="noreferrer">KT-70383</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: <code>registerKaptGenerateStubsTask(taskName)</code> 関数は非推奨になりました。代わりに新しい <code>registerKaptGenerateStubsTask(compileTask, kaptExtension, explicitApiMode)</code> 関数を使用してください。この新しいバージョンでは、関連する <code>KotlinJvmCompile</code> タスクから値を規約としてリンクできるため、両方のタスクが同じオプションセットを使用することが保証されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: <code>registerKaptGenerateStubsTask(taskName)</code> 関数は非推奨</li></ul></blockquote><h3 id="kotlintoplevelextensionおよびkotlintoplevelextensionconfigインターフェースの非推奨化" tabindex="-1">KotlinTopLevelExtensionおよびKotlinTopLevelExtensionConfigインターフェースの非推奨化 <a class="header-anchor" href="#kotlintoplevelextensionおよびkotlintoplevelextensionconfigインターフェースの非推奨化" aria-label="Permalink to &quot;KotlinTopLevelExtensionおよびKotlinTopLevelExtensionConfigインターフェースの非推奨化&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-71602" target="_blank" rel="noreferrer">KT-71602</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>互換性のない変更タイプ</strong>: 動作</p><p><strong>概要</strong>: <code>KotlinTopLevelExtension</code> および <code>KotlinTopLevelExtensionConfig</code> インターフェースは非推奨になり、新しい <code>KotlinTopLevelExtension</code> インターフェースに置き換えられます。このインターフェースは <code>KotlinTopLevelExtensionConfig</code>、<code>KotlinTopLevelExtension</code>、および <code>KotlinProjectExtension</code> を統合し、API階層を合理化し、JVMツールチェーンとコンパイラのプロパティへの公式なアクセスを提供します。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: <code>KotlinTopLevelExtension</code> および <code>KotlinTopLevelExtensionConfig</code> インターフェースは非推奨</li></ul></blockquote><h3 id="ビルドランタイム依存関係からkotlin-compiler-embeddableを削除" tabindex="-1">ビルドランタイム依存関係からkotlin-compiler-embeddableを削除 <a class="header-anchor" href="#ビルドランタイム依存関係からkotlin-compiler-embeddableを削除" aria-label="Permalink to &quot;ビルドランタイム依存関係からkotlin-compiler-embeddableを削除&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-61706" target="_blank" rel="noreferrer">KT-61706</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: <code>kotlin-compiler-embeddable</code> 依存関係はKotlin Gradleプラグイン（KGP）のランタイムから削除されます。必要なモジュールはKGPアーティファクトに直接含まれるようになり、Gradle Kotlinランタイムの8.2未満のバージョンとの互換性をサポートするために、Kotlin言語バージョンは2.0に制限されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: <code>kotlin-compiler-embeddable</code> の使用時に警告を報告</li><li>2.2.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="kotlin-gradleプラグインapiからコンパイラシンボルを非表示" tabindex="-1">Kotlin GradleプラグインAPIからコンパイラシンボルを非表示 <a class="header-anchor" href="#kotlin-gradleプラグインapiからコンパイラシンボルを非表示" aria-label="Permalink to &quot;Kotlin GradleプラグインAPIからコンパイラシンボルを非表示&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-70251" target="_blank" rel="noreferrer">KT-70251</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: <code>KotlinCompilerVersion</code> など、Kotlin Gradleプラグイン（KGP）にバンドルされているコンパイラモジュールシンボルは、ビルドスクリプトでの意図しないアクセスを防ぐためにパブリックAPIから非表示になります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: これらのシンボルへのアクセス時に警告を報告</li><li>2.2.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="複数の安定性設定ファイルのサポートを追加" tabindex="-1">複数の安定性設定ファイルのサポートを追加 <a class="header-anchor" href="#複数の安定性設定ファイルのサポートを追加" aria-label="Permalink to &quot;複数の安定性設定ファイルのサポートを追加&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-68345" target="_blank" rel="noreferrer">KT-68345</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Compose拡張の <code>stabilityConfigurationFile</code> プロパティは非推奨になり、複数の設定ファイルを指定できる新しい <code>stabilityConfigurationFiles</code> プロパティに置き換えられます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: <code>stabilityConfigurationFile</code> プロパティは非推奨</li></ul></blockquote><h3 id="非推奨のプラットフォームプラグインidの削除" tabindex="-1">非推奨のプラットフォームプラグインIDの削除 <a class="header-anchor" href="#非推奨のプラットフォームプラグインidの削除" aria-label="Permalink to &quot;非推奨のプラットフォームプラグインIDの削除&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-65565" target="_blank" rel="noreferrer">KT-65565</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>互換性のない変更タイプ</strong>: ソース</p><p><strong>概要</strong>: 以下のプラットフォームプラグインIDのサポートが削除されました:</p><ul><li><code>kotlin-platform-common</code></li><li><code>org.jetbrains.kotlin.platform.common</code></li></ul><p><strong>非推奨サイクル</strong>:</p><ul><li>1.3: プラットフォームプラグインIDは非推奨</li><li>2.1.0: プラットフォームプラグインIDはサポートされなくなります</li></ul></blockquote>',68)]))}const b=e(n,[["render",l]]);export{d as __pageData,b as default};
