import{_ as t,a,b as i}from"./chunks/waiting-for-changes.B2D0TX8R.js";import{_ as o,c as s,o as n,ag as r}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"개발 서버와 지속적인 컴파일","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/dev-server-continuous-compilation.md","filePath":"ko/kotlin/dev-server-continuous-compilation.md","lastUpdated":1754307826000}'),l={name:"ko/kotlin/dev-server-continuous-compilation.md"};function p(d,e,c,u,m,h){return n(),s("div",null,e[0]||(e[0]=[r('<h1 id="개발-서버와-지속적인-컴파일" tabindex="-1">개발 서버와 지속적인 컴파일 <a class="header-anchor" href="#개발-서버와-지속적인-컴파일" aria-label="Permalink to &quot;개발 서버와 지속적인 컴파일&quot;">​</a></h1><p>변경 사항을 확인할 때마다 Kotlin/JS 프로젝트를 수동으로 컴파일하고 실행하는 대신, <em>지속적인 컴파일</em> 모드를 사용할 수 있습니다. 일반 <code>run</code> 명령을 사용하는 대신, Gradle 래퍼를 <em>지속적인</em> 모드로 호출하세요:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --continuous</span></span></code></pre></div><p>IntelliJ IDEA에서 작업하는 경우, <em>실행 구성(run configuration)</em> 을 통해 동일한 플래그를 전달할 수 있습니다. IDE에서 Gradle <code>run</code> 작업을 처음 실행하면 IntelliJ IDEA가 자동으로 해당 실행 구성을 생성하며, 이를 편집할 수 있습니다:</p><p><img src="'+t+'" alt="IntelliJ IDEA에서 실행 구성 편집" width="700"></p><p><strong>실행/디버그 구성(Run/Debug Configurations)</strong> 대화상자를 통해 지속적인 모드를 활성화하는 것은 실행 구성의 인수에 <code>--continuous</code> 플래그를 추가하는 것만큼 쉽습니다:</p><p><img src="'+a+'" alt="IntelliJ IDEA에서 실행 구성에 지속적인 플래그 추가" width="700"></p><p>이 실행 구성을 실행하면 Gradle 프로세스가 프로그램 변경 사항을 계속 주시하고 있음을 알 수 있습니다:</p><p><img src="'+i+'" alt="변경 사항을 기다리는 Gradle" width="700"></p><p>변경 사항이 감지되면 프로그램은 자동으로 다시 컴파일됩니다. 브라우저에 페이지가 계속 열려 있다면, 개발 서버가 페이지의 자동 새로고침를 트리거하여 변경 사항이 표시됩니다. 이는 Kotlin Multiplatform Gradle 플러그인에 의해 관리되는 통합 <code>webpack-dev-server</code> 덕분입니다.</p>',10)]))}const v=o(l,[["render",p]]);export{g as __pageData,v as default};
