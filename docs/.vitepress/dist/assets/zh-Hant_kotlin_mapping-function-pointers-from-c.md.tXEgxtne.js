import{_ as e}from"./chunks/icon-1-done.ZX9lW-aj.js";import{_ as r}from"./chunks/icon-2-done.DCMUaFG5.js";import{_ as o}from"./chunks/icon-3.BwKvTetO.js";import{_ as d}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as E,C as h,c as g,o as c,j as s,G as t,ag as n,a,w as l}from"./chunks/framework.Bksy39di.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/mapping-function-pointers-from-c.md","filePath":"zh-Hant/kotlin/mapping-function-pointers-from-c.md","lastUpdated":1754307826000}'),y={name:"zh-Hant/kotlin/mapping-function-pointers-from-c.md"};function F(u,i,C,m,f,A){const k=h("tldr"),p=h("shortcut");return c(),g("div",null,[i[10]||(i[10]=s("h1",{id:"從-c-映射函式指標-–-教學",tabindex:"-1"},[a("從 C 映射函式指標 – 教學 "),s("a",{class:"header-anchor",href:"#從-c-映射函式指標-–-教學","aria-label":'Permalink to "從 C 映射函式指標 – 教學"'},"​")],-1)),t(k,null,{default:l(()=>i[0]||(i[0]=[s("p",null,[a("這是「"),s("strong",null,"映射 Kotlin 與 C"),a("」教學系列文章的第三部分。在繼續之前，請確保您已完成先前的步驟。")],-1),s("p",null,[s("img",{src:e,width:"20",alt:"First step"}),a(),s("a",{href:"/zh-Hant/kotlin/mapping-primitive-data-types-from-c"},"從 C 映射基本資料型別"),s("br"),s("img",{src:r,width:"20",alt:"Second step"}),a(),s("a",{href:"/zh-Hant/kotlin/mapping-struct-union-types-from-c"},"從 C 映射結構和聯集型別"),s("br"),s("img",{src:o,width:"20",alt:"Third step"}),a(),s("strong",null,"映射函式指標"),s("br"),s("img",{src:d,width:"20",alt:"Fourth step"}),a(),s("a",{href:"/zh-Hant/kotlin/mapping-strings-from-c"},"從 C 映射字串"),s("br")],-1)])),_:1}),i[11]||(i[11]=n(`<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>C 函式庫匯入功能目前為 <a href="/zh-Hant/kotlin/native-c-interop-stability">Beta 版</a>。cinterop 工具從 C 函式庫產生的所有 Kotlin 宣告都應帶有 <code>@ExperimentalForeignApi</code> 註解。 Kotlin/Native 隨附的原生平台函式庫（例如 Foundation、UIKit 和 POSIX）僅需針對部分 API 選擇啟用 (opt-in)。</p></div><p>讓我們探索哪些 C 函式指標可從 Kotlin 中可見，並檢視 Kotlin/Native 和 <a href="/zh-Hant/kotlin/gradle-configure-project#targeting-multiple-platforms">多平台</a> Gradle 建置中與 C 互通 (interop) 相關的進階使用案例。</p><p>在本教學中，您將會：</p><ul><li><a href="#pass-kotlin-function-as-a-c-function-pointer">學習如何將 Kotlin 函式作為 C 函式指標傳遞</a></li><li><a href="#use-the-c-function-pointer-from-kotlin">從 Kotlin 中使用 C 函式指標</a></li></ul><h2 id="從-c-映射函式指標型別" tabindex="-1">從 C 映射函式指標型別 <a class="header-anchor" href="#從-c-映射函式指標型別" aria-label="Permalink to &quot;從 C 映射函式指標型別&quot;">​</a></h2><p>為了理解 Kotlin 和 C 之間的映射，讓我們宣告兩個函式：一個接受函式指標作為參數，另一個則返回函式指標。</p><p>在本系列的<a href="/zh-Hant/kotlin/mapping-primitive-data-types-from-c">第一部分</a>中，您已經建立了一個包含必要檔案的 C 函式庫。針對此步驟，請在 <code>---</code> 分隔符號後更新 <code>interop.def</code> 檔案中的宣告：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyFun)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyFun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyFun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">supply_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFun;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>interop.def</code> 檔案提供了在 IDE 中編譯、執行或開啟應用程式所需的一切。</p><h2 id="檢查-c-函式庫產生的-kotlin-api" tabindex="-1">檢查 C 函式庫產生的 Kotlin API <a class="header-anchor" href="#檢查-c-函式庫產生的-kotlin-api" aria-label="Permalink to &quot;檢查 C 函式庫產生的 Kotlin API&quot;">​</a></h2><p>讓我們看看 C 函式指標如何映射到 Kotlin/Native，並更新您的專案：</p>`,11)),s("ol",null,[i[9]||(i[9]=n(`<li><p>在 <code>src/nativeMain/kotlin</code> 中，使用以下內容更新您<a href="/zh-Hant/kotlin/mapping-struct-union-types-from-c">先前教學</a>中的 <code>hello.kt</code> 檔案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.ExperimentalForeignApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    accept_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* fix me*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> useMe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> supply_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,1)),s("li",null,[s("p",null,[i[3]||(i[3]=a("使用 IntelliJ IDEA 的 ")),i[4]||(i[4]=s("a",{href:"https://www.jetbrains.com/help/rider/Navigation_and_Search__Go_to_Declaration.html",target:"_blank",rel:"noreferrer"},"Go to declaration",-1)),i[5]||(i[5]=a(" 命令 (")),t(p,null,{default:l(()=>i[1]||(i[1]=[a("Cmd + B")])),_:1}),i[6]||(i[6]=a("/")),t(p,null,{default:l(()=>i[2]||(i[2]=[a("Ctrl + B")])),_:1}),i[7]||(i[7]=a(") 導航至 C 函式生成的以下 API："))]),i[8]||(i[8]=n(`<div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Int): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.cinterop.CPointer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlinx.cinterop.CFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlin.Int) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlin.Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* from: interop.MyFun? */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> supply_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.cinterop.CPointer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlinx.cinterop.CFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlin.Int) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlin.Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* from: interop.MyFun? */</span></span></code></pre></div>`,1))])]),i[12]||(i[12]=n(`<p>如您所見，C 函式指標在 Kotlin 中使用 <code>CPointer&lt;CFunction&lt;...&gt;&gt;</code> 表示。<code>accept_fun()</code> 函式將一個可選的函式指標作為參數，而 <code>supply_fun()</code> 則返回一個函式指標。</p><p><code>CFunction&lt;(Int) -&gt; Int&gt;</code> 代表函式簽章，而 <code>CPointer&lt;CFunction&lt;...&gt;&gt;?</code> 則代表一個可空的函式指標。對於所有 <code>CPointer&lt;CFunction&lt;...&gt;&gt;</code> 型別，都有一個 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/invoke.html" target="_blank" rel="noreferrer"><code>.invoke()</code></a> 運算子擴充函式可用，允許您像呼叫常規 Kotlin 函式一樣呼叫函式指標。</p><h2 id="將-kotlin-函式作為-c-函式指標傳遞" tabindex="-1">將 Kotlin 函式作為 C 函式指標傳遞 <a class="header-anchor" href="#將-kotlin-函式作為-c-函式指標傳遞" aria-label="Permalink to &quot;將 Kotlin 函式作為 C 函式指標傳遞&quot;">​</a></h2><p>是時候嘗試從 Kotlin 程式碼中使用 C 函式了。呼叫 <code>accept_fun()</code> 函式並將 C 函式指標傳遞給 Kotlin lambda：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.staticCFunction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.ExperimentalForeignApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    accept_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">staticCFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此呼叫使用 Kotlin/Native 中的 <code>staticCFunction {}</code> 輔助函式將 Kotlin lambda 函式封裝為 C 函式指標。它只允許未綁定且非捕獲 (non-capturing) 的 lambda 函式。例如，它不能捕獲函式中的局部變數，只能捕獲全局可見的宣告。</p><p>請確保該函式不會拋出任何例外。從 <code>staticCFunction {}</code> 拋出例外會導致非確定性副作用。</p><h2 id="從-kotlin-使用-c-函式指標" tabindex="-1">從 Kotlin 使用 C 函式指標 <a class="header-anchor" href="#從-kotlin-使用-c-函式指標" aria-label="Permalink to &quot;從 Kotlin 使用 C 函式指標&quot;">​</a></h2><p>下一步是調用從 <code>supply_fun()</code> 呼叫返回的 C 函式指標：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.ExperimentalForeignApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.invoke</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFun2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functionFromC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> supply_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No function is returned&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    functionFromC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin 會將函式指標的返回型別轉換為可空的 <code>CPointer&lt;CFunction&lt;&gt;</code> 物件。您需要先明確檢查 <code>null</code>，這就是為什麼在上面的程式碼中使用了 <a href="/zh-Hant/kotlin/null-safety">Elvis 運算子</a>。cinterop 工具允許您像呼叫常規 Kotlin 函式一樣呼叫 C 函式指標：<code>functionFromC(42)</code>。</p><h2 id="更新-kotlin-程式碼" tabindex="-1">更新 Kotlin 程式碼 <a class="header-anchor" href="#更新-kotlin-程式碼" aria-label="Permalink to &quot;更新 Kotlin 程式碼&quot;">​</a></h2><p>現在您已經看過所有定義，請嘗試在您的專案中使用它們。<code>hello.kt</code> 檔案中的程式碼可能如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.ExperimentalForeignApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.invoke</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.staticCFunction</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cFunctionPointer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> staticCFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    accept_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cFunctionPointer)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> funFromC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> supply_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No function is returned&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    funFromC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>為了驗證一切運作正常，請在<a href="/zh-Hant/kotlin/native-get-started#build-and-run-the-application">您的 IDE 中</a>執行 <code>runDebugExecutableNative</code> Gradle 任務，或使用以下命令執行程式碼：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runDebugExecutableNative</span></span></code></pre></div><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在本系列的下一部分中，您將學習字串如何在 Kotlin 和 C 之間進行映射：</p><p><strong><a href="/zh-Hant/kotlin/mapping-strings-from-c">繼續至下一部分</a></strong></p><h3 id="另請參閱" tabindex="-1">另請參閱 <a class="header-anchor" href="#另請參閱" aria-label="Permalink to &quot;另請參閱&quot;">​</a></h3><p>在<a href="/zh-Hant/kotlin/native-c-interop">與 C 的互通性</a>文件中了解更多，該文件涵蓋了更進階的場景。</p>`,21))])}const I=E(y,[["render",F]]);export{x as __pageData,I as default};
