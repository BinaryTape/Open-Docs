import{_ as a,c as s,o as l,ag as e}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/compatibility.md","filePath":"ja/kotlin/compatibility.md","lastUpdated":1754307826000}'),t={name:"ja/kotlin/compatibility.md"};function n(p,i,h,r,o,k){return l(),s("div",null,i[0]||(i[0]=[e(`<ul><li><a href="#compatibility">互換性</a></li><li><a href="#public-api-types">公開APIの種類</a><ul><li><a href="#experimental-api">実験的API</a></li><li><a href="#flow-preview-api">FlowプレビューAPI</a></li><li><a href="#obsolete-api">非推奨API</a></li><li><a href="#internal-api">内部API</a></li><li><a href="#stable-api">安定版API</a></li><li><a href="#deprecation-cycle">非推奨化サイクル</a></li></ul></li><li><a href="#using-annotated-api">アノテーション付きAPIの使用</a><ul><li><a href="#programmatically">プログラムによる設定</a></li><li><a href="#gradle">Gradle</a></li><li><a href="#maven">Maven</a></li></ul></li></ul><h2 id="互換性" tabindex="-1">互換性 <a class="header-anchor" href="#互換性" aria-label="Permalink to &quot;互換性&quot;">​</a></h2><p>このドキュメントでは、<code>kotlinx.coroutines</code> ライブラリのバージョン1.0.0以降の互換性ポリシーと、互換性固有のアノテーションのセマンティクスについて説明します。</p><h2 id="公開apiの種類" tabindex="-1">公開APIの種類 <a class="header-anchor" href="#公開apiの種類" aria-label="Permalink to &quot;公開APIの種類&quot;">​</a></h2><p><code>kotlinx.coroutines</code> の公開APIには、安定版、実験版、非推奨版、内部版、廃止版の5種類があります。安定版を除くすべての公開APIには、対応するアノテーションが付与されています。</p><h3 id="実験的api" tabindex="-1">実験的API <a class="header-anchor" href="#実験的api" aria-label="Permalink to &quot;実験的API&quot;">​</a></h3><p>実験的APIには、<code>@ExperimentalCoroutinesApi</code> アノテーションが付与されています。 APIは、その設計に将来的にAPIのセマンティクスの変更や非推奨化につながる可能性のある未解決の疑問点がある場合、実験版としてマークされます。</p><p>デフォルトでは、ほとんどの新しいAPIは実験版としてマークされ、新たな問題が発生しなければ、次のメジャーリリースで安定版になります。 そうでない場合は、ABIの変更なしにセマンティクスが修正されるか、APIは非推奨化サイクルに入ります。</p><p>実験的APIを使用すると危険な場合：</p><ul><li><code>kotlinx.coroutines</code> に依存するライブラリを記述しており、安定版ライブラリAPIで実験的なコルーチンAPIを使用したい場合。 これは、ライブラリのエンドユーザーが <code>kotlinx.coroutines</code> のバージョンを更新し、実験的APIのセマンティクスがわずかに異なる場合に、望ましくない結果につながる可能性があります。</li><li>実験的APIを中心にアプリケーションのコアインフラストラクチャを構築したい場合。</li></ul><h3 id="flowプレビューapi" tabindex="-1">FlowプレビューAPI <a class="header-anchor" href="#flowプレビューapi" aria-label="Permalink to &quot;FlowプレビューAPI&quot;">​</a></h3><p>すべての <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html" target="_blank" rel="noreferrer">Flow</a> 関連APIには、<code>@FlowPreview</code> アノテーションが付与されています。 このアノテーションは、Flow APIがプレビュー状態であることを示します。 プレビュー機能については、バイナリ、ソース、セマンティクス互換性を含む、リリース間の互換性保証は提供されません。</p><p>プレビューAPIを使用すると危険な場合：</p><ul><li>ライブラリ/フレームワークを記述しており、安定版リリースまたは安定版APIで <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html" target="_blank" rel="noreferrer">Flow</a> APIを使用したい場合。</li><li>アプリケーションのコアインフラストラクチャで <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html" target="_blank" rel="noreferrer">Flow</a> を使用したい場合。</li><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html" target="_blank" rel="noreferrer">Flow</a> を「一度書いたら忘れられる」ソリューションとして使用したいが、<code>kotlinx.coroutines</code> の更新時に追加のメンテナンスコストをかけられない場合。</li></ul><h3 id="非推奨api" tabindex="-1">非推奨API <a class="header-anchor" href="#非推奨api" aria-label="Permalink to &quot;非推奨API&quot;">​</a></h3><p>非推奨APIには、<code>@ObsoleteCoroutinesApi</code> アノテーションが付与されています。 非推奨APIは実験的APIに似ていますが、すでに深刻な設計上の欠陥があることが知られており、その代替が検討されているものの、まだ実装されていません。</p><p>このAPIのセマンティクスは変更されませんが、代替が準備され次第、非推奨化サイクルに入ります。</p><h3 id="内部api" tabindex="-1">内部API <a class="header-anchor" href="#内部api" aria-label="Permalink to &quot;内部API&quot;">​</a></h3><p>内部APIは、<code>@InternalCoroutinesApi</code> アノテーションが付与されているか、<code>kotlinx.coroutines.internal</code> パッケージの一部です。 このAPIは安定性に関する保証がなく、将来のリリースで変更および/または削除される可能性があります。 内部APIの使用を避けられない場合は、<a href="https://github.com/Kotlin/kotlinx.coroutines/issues/new" target="_blank" rel="noreferrer">課題トラッカー</a> に報告してください。</p><h3 id="安定版api" tabindex="-1">安定版API <a class="header-anchor" href="#安定版api" aria-label="Permalink to &quot;安定版API&quot;">​</a></h3><p>安定版APIは、そのABIとドキュメント化されたセマンティクスを維持することが保証されています。もし、ある時点で修正不可能な設計上の欠陥が発見された場合でも、このAPIは非推奨化サイクルに入り、可能な限りバイナリ互換性を維持します。</p><h3 id="非推奨化サイクル" tabindex="-1">非推奨化サイクル <a class="header-anchor" href="#非推奨化サイクル" aria-label="Permalink to &quot;非推奨化サイクル&quot;">​</a></h3><p>APIが非推奨化されると、複数の段階を経て、各段階の間には少なくとも1つのメジャーリリースがあります。</p><ul><li>機能はコンパイル時の警告付きで非推奨化されます。ほとんどの場合、適切な代替（および対応する <code>replaceWith</code> 宣言）が提供され、IntelliJ IDEA の助けを借りて非推奨の使用箇所を自動的に移行できます。</li><li>非推奨レベルが <code>error</code> または <code>hidden</code> に引き上げられます。非推奨のAPIに対して新しいコードをコンパイルすることはできなくなりますが、ABIにはまだ存在します。</li><li>APIが完全に削除されます。我々はそうしないように最善を尽くし、APIを削除する計画はありませんが、セキュリティ上の脆弱性などの予期せぬ問題が発生した場合に備えて、この選択肢は残しています。</li></ul><h2 id="アノテーション付きapiの使用" tabindex="-1">アノテーション付きAPIの使用 <a class="header-anchor" href="#アノテーション付きapiの使用" aria-label="Permalink to &quot;アノテーション付きAPIの使用&quot;">​</a></h2><p>すべてのAPIアノテーションは <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-experimental/" target="_blank" rel="noreferrer">kotlin.Experimental</a> です。 これは、実験的または非推奨のAPIを使用するとコンパイル警告を生成するために行われます。 警告は、特定の呼び出しサイトに対してプログラムで無効にするか、モジュール全体でグローバルに無効にすることができます。</p><h3 id="プログラムによる設定" tabindex="-1">プログラムによる設定 <a class="header-anchor" href="#プログラムによる設定" aria-label="Permalink to &quot;プログラムによる設定&quot;">​</a></h3><p>特定の呼び出しサイトの場合、<code>OptIn</code> アノテーションを使用して警告を無効にできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalCoroutinesApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 実験的なコルーチンAPIに関する警告を無効にします</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> experimentalApiUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    someKotlinxCoroutinesExperimentalMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h3><p>Gradleプロジェクトの場合、<code>build.gradle</code> ファイルにコンパイラフラグを渡すことで警告を無効にできます。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">withType(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">all {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kotlinOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">freeCompilerArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="maven" tabindex="-1">Maven <a class="header-anchor" href="#maven" aria-label="Permalink to &quot;Maven&quot;">​</a></h3><p>Mavenプロジェクトの場合、<code>pom.xml</code> ファイルにコンパイラフラグを渡すことで警告を無効にできます。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;kotlin-maven-plugin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.jetbrains.kotlin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ... your configuration ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,35)]))}const c=a(t,[["render",n]]);export{E as __pageData,c as default};
