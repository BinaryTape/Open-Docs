import{_ as o,C as h,c as r,o as d,ag as l,j as s,G as n,a,w as t}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"kaptコンパイラープラグイン","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/kapt.md","filePath":"ja/kotlin/kapt.md","lastUpdated":1754307826000}'),c={name:"ja/kotlin/kapt.md"};function E(g,i,y,u,b,v){const e=h("tab"),p=h("tabs"),k=h("TopicTitle");return d(),r("div",null,[i[9]||(i[9]=l('<h1 id="kaptコンパイラープラグイン" tabindex="-1">kaptコンパイラープラグイン <a class="header-anchor" href="#kaptコンパイラープラグイン" aria-label="Permalink to &quot;kaptコンパイラープラグイン&quot;">​</a></h1><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>kaptはメンテナンスモードです。最新のKotlinおよびJavaリリースに対応するよう更新を続けていますが、 新機能の実装予定はありません。アノテーション処理には<a href="/ja/kotlin/ksp-overview">Kotlin Symbol Processing API (KSP)</a>を使用してください。 <a href="/ja/kotlin/ksp-overview#supported-libraries">KSPがサポートするライブラリのリストはこちらを参照してください</a>。</p></div><p>アノテーションプロセッサー（<a href="https://jcp.org/en/jsr/detail?id=269" target="_blank" rel="noreferrer">JSR 269</a>参照）は、Kotlinでは_kapt_コンパイラープラグインでサポートされています。</p><p>要するに、kaptはJavaベースのアノテーション処理を有効にすることで、<a href="https://google.github.io/dagger/" target="_blank" rel="noreferrer">Dagger</a>や <a href="https://developer.android.com/topic/libraries/data-binding/index.html" target="_blank" rel="noreferrer">Data Binding</a>といったライブラリを Kotlinプロジェクトで使用できるようにします。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>K2コンパイラーでkaptを使用中に問題が発生した場合は、 <a href="http://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>に報告し、<code>gradle.properties</code>ファイルでK2モードを無効にしてください。 <code>kotlin kapt.use.k2=false </code></p></div><h2 id="gradleでの使用" tabindex="-1">Gradleでの使用 <a class="header-anchor" href="#gradleでの使用" aria-label="Permalink to &quot;Gradleでの使用&quot;">​</a></h2><p>Gradleでkaptを使用するには、次の手順に従います。</p>',7)),s("ol",null,[s("li",null,[i[2]||(i[2]=s("p",null,[a("ビルドスクリプトファイル"),s("code",null,"build.gradle(.kts)"),a("に"),s("code",null,"kapt"),a(" Gradleプラグインを適用します。")],-1)),n(p,{group:"build-script"},{default:t(()=>[n(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>i[0]||(i[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kapt"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>i[1]||(i[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlin.kapt"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),s("li",null,[i[5]||(i[5]=s("p",null,[s("code",null,"dependencies {}"),a("ブロックで"),s("code",null,"kapt"),a("構成を使用して、それぞれの依存関係を追加します。")],-1)),n(p,{group:"build-script"},{default:t(()=>[n(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>i[3]||(i[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kapt"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"groupId:artifactId:version"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>i[4]||(i[4]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kapt "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'groupId:artifactId:version'")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i[6]||(i[6]=l('<li><p>以前にアノテーションプロセッサーの<a href="https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html#annotationProcessor_config" target="_blank" rel="noreferrer">Androidサポート</a>を 使用していた場合、<code>annotationProcessor</code>構成の使用を<code>kapt</code>に置き換えてください。 プロジェクトにJavaクラスが含まれている場合、<code>kapt</code>もそれらを処理します。</p><p><code>androidTest</code>または<code>test</code>ソースにアノテーションプロセッサーを使用する場合、それぞれの<code>kapt</code>構成は <code>kaptAndroidTest</code>と<code>kaptTest</code>と命名されます。<code>kaptAndroidTest</code>と<code>kaptTest</code>は<code>kapt</code>を拡張しているため、 <code>kapt</code>依存関係を提供すれば、プロダクションソースとテストの両方で利用可能になります。</p></li>',1))]),i[10]||(i[10]=l(`<h2 id="アノテーションプロセッサーの引数" tabindex="-1">アノテーションプロセッサーの引数 <a class="header-anchor" href="#アノテーションプロセッサーの引数" aria-label="Permalink to &quot;アノテーションプロセッサーの引数&quot;">​</a></h2><p>アノテーションプロセッサーに引数を渡すには、ビルドスクリプトファイル<code>build.gradle(.kts)</code>の<code>arguments {}</code>ブロックを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kapt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="gradleビルドキャッシュのサポート" tabindex="-1">Gradleビルドキャッシュのサポート <a class="header-anchor" href="#gradleビルドキャッシュのサポート" aria-label="Permalink to &quot;Gradleビルドキャッシュのサポート&quot;">​</a></h2><p>kaptのアノテーション処理タスクは、デフォルトで<a href="https://guides.gradle.org/using-build-cache/" target="_blank" rel="noreferrer">Gradleにキャッシュされます</a>。 しかし、アノテーションプロセッサーは任意のコードを実行できるため、タスクの入力を出力に確実に変換しない可能性や、 Gradleが追跡しないファイルにアクセスし、変更する可能性があります。 ビルドで使用されるアノテーションプロセッサーが適切にキャッシュできない場合、 ビルドスクリプトで<code>useBuildCache</code>プロパティを指定することにより、kaptのキャッシュを完全に無効にできます。 これにより、kaptタスクの誤ったキャッシュヒットを防ぐのに役立ちます。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    useBuildCache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kaptを使用するビルドの速度向上" tabindex="-1">kaptを使用するビルドの速度向上 <a class="header-anchor" href="#kaptを使用するビルドの速度向上" aria-label="Permalink to &quot;kaptを使用するビルドの速度向上&quot;">​</a></h2><h3 id="kaptタスクを並行して実行" tabindex="-1">kaptタスクを並行して実行 <a class="header-anchor" href="#kaptタスクを並行して実行" aria-label="Permalink to &quot;kaptタスクを並行して実行&quot;">​</a></h3><p>kaptを使用するビルドの速度を向上させるには、kaptタスクの<a href="https://guides.gradle.org/using-the-worker-api/" target="_blank" rel="noreferrer">Gradle Worker API</a>を有効にできます。 Worker APIを使用すると、Gradleは単一プロジェクト内の独立したアノテーション処理タスクを並行して実行できるため、 場合によっては実行時間を大幅に短縮します。</p><p>Kotlin Gradleプラグインの<a href="/ja/kotlin/gradle-configure-project#gradle-java-toolchains-support">カスタムJDKホーム</a>機能を使用する場合、 kaptタスクワーカーは<a href="https://docs.gradle.org/current/userguide/worker_api.html#changing_the_isolation_mode" target="_blank" rel="noreferrer">プロセス分離モード</a>のみを使用します。 <code>kapt.workers.isolation</code>プロパティは無視されることに注意してください。</p><p>kaptワーカプロセスに追加のJVM引数を提供したい場合は、<code>KaptWithoutKotlincTask</code>の入力<code>kaptProcessJvmArgs</code>を使用してください。</p>`,11)),n(p,{group:"build-script"},{default:t(()=>[n(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>i[7]||(i[7]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"internal"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KaptWithoutKotlincTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        kaptProcessJvmArgs."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"add"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx512m"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),n(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>i[8]||(i[8]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.internal.KaptWithoutKotlincTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        kaptProcessJvmArgs"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"add("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'-Xmx512m'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),n(k,{id:"アノテーションプロセッサーのクラスローダーのキャッシュ",level:"3",title:"アノテーションプロセッサーのクラスローダーのキャッシュ",labelRef:"experimental-general"}),i[11]||(i[11]=l(`<p>アノテーションプロセッサーのクラスローダーのキャッシュは、多数のGradleタスクを連続して実行する場合に、kaptのパフォーマンス向上に役立ちます。</p><p>この機能を有効にするには、<code>gradle.properties</code>ファイルで次のプロパティを使用します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span># Any positive value enables caching</span></span>
<span class="line"><span># Use the same value as the number of modules that use kapt</span></span>
<span class="line"><span>kapt.classloaders.cache.size=5</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Disable for caching to work</span></span>
<span class="line"><span>kapt.include.compile.classpath=false</span></span></code></pre></div><p>アノテーションプロセッサーのキャッシュで何らかの問題に遭遇した場合は、それらのキャッシュを無効にしてください。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Specify annotation processors&#39; full names to disable caching for them</span></span>
<span class="line"><span>kapt.classloaders.cache.disableForProcessors=[annotation processors full names]</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>この機能で問題が発生した場合は、 <a href="https://youtrack.jetbrains.com/issue/KT-28901" target="_blank" rel="noreferrer">YouTrack</a>でフィードバックをいただけると幸いです。</p></div><h3 id="アノテーションプロセッサーのパフォーマンス測定" tabindex="-1">アノテーションプロセッサーのパフォーマンス測定 <a class="header-anchor" href="#アノテーションプロセッサーのパフォーマンス測定" aria-label="Permalink to &quot;アノテーションプロセッサーのパフォーマンス測定&quot;">​</a></h3><p>アノテーションプロセッサーの実行に関するパフォーマンス統計を取得するには、<code>-Kapt-show-processor-timings</code>プラグインオプションを使用します。 出力例:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Kapt Annotation Processing performance report:</span></span>
<span class="line"><span>com.example.processor.TestingProcessor: total: 133 ms, init: 36 ms, 2 round(s): 97 ms, 0 ms</span></span>
<span class="line"><span>com.example.processor.AnotherProcessor: total: 100 ms, init: 6 ms, 1 round(s): 93 ms</span></span></code></pre></div><p>このレポートは、プラグインオプション<a href="https://github.com/JetBrains/kotlin/pull/4280" target="_blank" rel="noreferrer"><code>-Kapt-dump-processor-timings</code> (<code>org.jetbrains.kotlin.kapt3:dumpProcessorTimings</code>)</a>を使用してファイルにダンプできます。 次のコマンドはkaptを実行し、統計を<code>ap-perf-report.file</code>ファイルにダンプします。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -cp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $MY_CLASSPATH </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xplugin=kotlin-annotation-processing-SNAPSHOT.jar </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-P</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugin:org.jetbrains.kotlin.kapt3:aptMode=stubsAndApt,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugin:org.jetbrains.kotlin.kapt3:apclasspath=processor/build/libs/processor.jar,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugin:org.jetbrains.kotlin.kapt3:dumpProcessorTimings=ap-perf-report.file </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xplugin=$JAVA_HOME/lib/tools.jar </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-d </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cli-tests/out</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-no-jdk </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-no-reflect</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -no-stdlib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -verbose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sample/src/main/</span></span></code></pre></div><h3 id="アノテーションプロセッサーによって生成されたファイルの数を測定" tabindex="-1">アノテーションプロセッサーによって生成されたファイルの数を測定 <a class="header-anchor" href="#アノテーションプロセッサーによって生成されたファイルの数を測定" aria-label="Permalink to &quot;アノテーションプロセッサーによって生成されたファイルの数を測定&quot;">​</a></h3><p><code>kapt</code> Gradleプラグインは、各アノテーションプロセッサーについて生成されたファイルの数に関する統計を報告できます。</p><p>これにより、ビルドに不要なアノテーションプロセッサーが含まれていないかを追跡するのに役立ちます。 生成されたレポートを使用して、不要なアノテーションプロセッサーをトリガーするモジュールを見つけ、それらを回避するようにモジュールを更新できます。</p><p>統計レポートを有効にするには:</p><ol><li><p><code>build.gradle.kts)</code>で<code>showProcessorStats</code>プロパティの値を<code>true</code>に設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kapt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    showProcessorStats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>gradle.properties</code>で<code>kapt.verbose</code> Gradleプロパティを<code>true</code>に設定します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kapt.verbose=true</span></span></code></pre></div></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><a href="#use-in-cli">コマンドラインオプション<code>verbose</code></a>でも詳細出力を有効にできます。</p></div><p>統計は<code>info</code>レベルでログに表示されます。 <code>Annotation processor stats:</code>の行に続き、各アノテーションプロセッサーの実行時間の統計が表示されます。 これらの行の後に<code>Generated files report:</code>の行があり、各アノテーションプロセッサーによって生成されたファイルの数に関する統計が表示されます。例:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[INFO] Annotation processor stats:</span></span>
<span class="line"><span>[INFO] org.mapstruct.ap.MappingProcessor: total: 290 ms, init: 1 ms, 3 round(s): 289 ms, 0 ms, 0 ms</span></span>
<span class="line"><span>[INFO] Generated files report:</span></span>
<span class="line"><span>[INFO] org.mapstruct.ap.MappingProcessor: total sources: 2, sources per round: 2, 0, 0</span></span></code></pre></div><h2 id="kaptのコンパイル回避" tabindex="-1">kaptのコンパイル回避 <a class="header-anchor" href="#kaptのコンパイル回避" aria-label="Permalink to &quot;kaptのコンパイル回避&quot;">​</a></h2><p>kaptによるインクリメンタルビルドの時間を改善するため、Gradleの<a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_compile_avoidance" target="_blank" rel="noreferrer">コンパイル回避</a>を使用できます。 コンパイル回避が有効になっている場合、Gradleはプロジェクトを再構築する際にアノテーション処理をスキップできます。特に、アノテーション処理は次の場合にスキップされます。</p><ul><li>プロジェクトのソースファイルが変更されていない場合。</li><li>依存関係の変更が<a href="https://en.wikipedia.org/wiki/Application_binary_interface" target="_blank" rel="noreferrer">ABI</a>互換である場合。 たとえば、変更がメソッド本体のみである場合などです。</li></ul><p>ただし、コンパイルクラスパスで検出されたアノテーションプロセッサーにはコンパイル回避を使用できません。これは、 それらの_どのような変更_であってもアノテーション処理タスクの実行を必要とするためです。</p><p>コンパイル回避を使用してkaptを実行するには:</p><ul><li><p><a href="#use-in-gradle">アノテーションプロセッサーの依存関係を<code>kapt*</code>構成に手動で追加します</a>。</p></li><li><p><code>gradle.properties</code>ファイルで、コンパイルクラスパス内のアノテーションプロセッサーの検出をオフにします。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kapt.include.compile.classpath=false</span></span></code></pre></div></li></ul><h2 id="インクリメンタルアノテーション処理" tabindex="-1">インクリメンタルアノテーション処理 <a class="header-anchor" href="#インクリメンタルアノテーション処理" aria-label="Permalink to &quot;インクリメンタルアノテーション処理&quot;">​</a></h2><p>kaptはデフォルトでインクリメンタルアノテーション処理をサポートしています。 現在、アノテーション処理は、使用されているすべてのアノテーションプロセッサーがインクリメンタルである場合にのみインクリメンタルにできます。</p><p>インクリメンタルアノテーション処理を無効にするには、<code>gradle.properties</code>ファイルに次の行を追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kapt.incremental.apt=false</span></span></code></pre></div><p>インクリメンタルアノテーション処理には、<a href="/ja/kotlin/gradle-compilation-and-caches#incremental-compilation">インクリメンタルコンパイル</a>も有効になっている必要があることに注意してください。</p><h2 id="スーパー構成からアノテーションプロセッサーを継承" tabindex="-1">スーパー構成からアノテーションプロセッサーを継承 <a class="header-anchor" href="#スーパー構成からアノテーションプロセッサーを継承" aria-label="Permalink to &quot;スーパー構成からアノテーションプロセッサーを継承&quot;">​</a></h2><p>アノテーションプロセッサーの共通セットを別のGradle構成でスーパー構成として定義し、 サブプロジェクトの<code>kapt</code>固有の構成でさらに拡張することができます。</p><p>例として、<a href="https://dagger.dev/" target="_blank" rel="noreferrer">Dagger</a>を使用するサブプロジェクトの場合、<code>build.gradle(.kts)</code>ファイルで次の構成を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonAnnotationProcessors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configurations.creating</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configurations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kapt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extendsFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonAnnotationProcessors) }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.dagger:dagger:2.48.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    commonAnnotationProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.dagger:dagger-compiler:2.48.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この例では、<code>commonAnnotationProcessors</code> Gradle構成は、すべてのプロジェクトで使用したいアノテーション処理の共通スーパー構成です。 <a href="https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.Configuration.html#org.gradle.api.artifacts.Configuration:extendsFrom" target="_blank" rel="noreferrer"><code>extendsFrom()</code></a>メソッドを使用して、 <code>commonAnnotationProcessors</code>をスーパー構成として追加しています。 kaptは<code>commonAnnotationProcessors</code> Gradle構成がDaggerアノテーションプロセッサーへの依存関係を持っていることを認識します。 したがって、kaptはそのアノテーション処理の構成にDaggerアノテーションプロセッサーを含めます。</p><h2 id="javaコンパイラーオプション" tabindex="-1">Javaコンパイラーオプション <a class="header-anchor" href="#javaコンパイラーオプション" aria-label="Permalink to &quot;Javaコンパイラーオプション&quot;">​</a></h2><p>kaptはアノテーションプロセッサーを実行するためにJavaコンパイラーを使用します。 <code>javac</code>に任意のオプションを渡す方法は次のとおりです。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    javacOptions {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Increase the max count of errors from annotation processors.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Default is 100.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        option(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xmaxerrs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="存在しない型の修正" tabindex="-1">存在しない型の修正 <a class="header-anchor" href="#存在しない型の修正" aria-label="Permalink to &quot;存在しない型の修正&quot;">​</a></h2><p>一部のアノテーションプロセッサー（<code>AutoFactory</code>など）は、宣言シグネチャにおける正確な型に依存します。 デフォルトでは、kaptは未知の型（生成されたクラスの型を含む）をすべて<code>NonExistentClass</code>に置き換えますが、この動作を変更できます。 スタブでのエラー型推論を有効にするには、<code>build.gradle(.kts)</code>ファイルにオプションを追加します。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    correctErrorTypes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="mavenでの使用" tabindex="-1">Mavenでの使用 <a class="header-anchor" href="#mavenでの使用" aria-label="Permalink to &quot;Mavenでの使用&quot;">​</a></h2><p><code>compile</code>の前にkotlin-maven-pluginの<code>kapt</code>ゴールの実行を追加します。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;kapt&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;kapt&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- You can skip the &lt;goals&gt; element</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        if you enable extensions for the plugin --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;src/main/kotlin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;src/main/java&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPaths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            &lt;!-- Specify your annotation processors here --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.google.dagger&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;dagger-compiler&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2.9&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPaths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>アノテーション処理のレベルを設定するには、<code>&lt;configuration&gt;</code>ブロックで次のいずれかを<code>aptMode</code>として設定します。</p><ul><li><code>stubs</code> – アノテーション処理に必要なスタブのみを生成します。</li><li><code>apt</code> – アノテーション処理のみを実行します。</li><li><code>stubsAndApt</code> – (デフォルト) スタブを生成し、アノテーション処理を実行します。</li></ul><p>例:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">aptMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;stubs&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">aptMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="intellijビルドシステムでの使用" tabindex="-1">IntelliJビルドシステムでの使用 <a class="header-anchor" href="#intellijビルドシステムでの使用" aria-label="Permalink to &quot;IntelliJビルドシステムでの使用&quot;">​</a></h2><p>kaptはIntelliJ IDEA独自のビルドシステムではサポートされていません。 アノテーション処理を再実行したい場合はいつでも、「Mavenプロジェクト」ツールバーからビルドを実行してください。</p><h2 id="cliでの使用" tabindex="-1">CLIでの使用 <a class="header-anchor" href="#cliでの使用" aria-label="Permalink to &quot;CLIでの使用&quot;">​</a></h2><p>kaptコンパイラープラグインは、Kotlinコンパイラーのバイナリディストリビューションで利用可能です。</p><p><code>Xplugin</code> kotlincオプションを使用して、JARファイルへのパスを指定することでプラグインをアタッチできます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xplugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$KOTLIN_HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/lib/kotlin-annotation-processing.jar</span></span></code></pre></div><p>利用可能なオプションのリストは次のとおりです。</p><ul><li><code>sources</code> (<em>必須</em>): 生成されたファイルの出力パス。</li><li><code>classes</code> (<em>必須</em>): 生成されたクラスファイルとリソースの出力パス。</li><li><code>stubs</code> (<em>必須</em>): スタブファイルの出力パス。つまり、一時ディレクトリ。</li><li><code>incrementalData</code>: バイナリスタブの出力パス。</li><li><code>apclasspath</code> (<em>繰り返し可能</em>): アノテーションプロセッサーJARへのパス。持っているJARの数だけ<code>apclasspath</code>オプションを渡してください。</li><li><code>apoptions</code>: アノテーションプロセッサーオプションのbase64エンコードリスト。<a href="#ap-javac-options-encoding">AP/javacオプションのエンコーディング</a>で詳細を参照してください。</li><li><code>javacArguments</code>: <code>javac</code>に渡されるオプションのbase64エンコードリスト。<a href="#ap-javac-options-encoding">AP/javacオプションのエンコーディング</a>で詳細を参照してください。</li><li><code>processors</code>: アノテーションプロセッサーの完全修飾クラス名のカンマ区切りリスト。指定されている場合、kaptは<code>apclasspath</code>内のアノテーションプロセッサーを検索しようとしません。</li><li><code>verbose</code>: 詳細出力を有効にします。</li><li><code>aptMode</code> (<em>必須</em>) <ul><li><code>stubs</code> – アノテーション処理に必要なスタブのみを生成します。</li><li><code>apt</code> – アノテーション処理のみを実行します。</li><li><code>stubsAndApt</code> – スタブを生成し、アノテーション処理を実行します。</li></ul></li><li><code>correctErrorTypes</code>: 詳細については、<a href="#non-existent-type-correction">存在しない型の修正</a>を参照してください。デフォルトでは無効です。</li><li><code>dumpFileReadHistory</code>: アノテーション処理中に使用されたクラスのリストを各ファイルに対してダンプするための出力パス。</li></ul><p>プラグインオプションの形式は次のとおりです: <code>-P plugin:&lt;plugin id&gt;:&lt;key&gt;=&lt;value&gt;</code>。オプションは繰り返すことができます。</p><p>例:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:sources=build/kapt/sources</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:classes=build/kapt/classes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:stubs=build/kapt/stubs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/ap.jar</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/anotherAp.jar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:correctErrorTypes=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h2 id="kotlinソースの生成" tabindex="-1">Kotlinソースの生成 <a class="header-anchor" href="#kotlinソースの生成" aria-label="Permalink to &quot;Kotlinソースの生成&quot;">​</a></h2><p>kaptはKotlinソースを生成できます。生成されたKotlinソースファイルを<code>processingEnv.options[&quot;kapt.kotlin.generated&quot;]</code>で指定されたディレクトリに書き込むだけで、これらのファイルはメインソースと一緒にコンパイルされます。</p><p>kaptは生成されたKotlinファイルに対する複数ラウンドをサポートしていないことに注意してください。</p><h2 id="ap-javacオプションのエンコーディング" tabindex="-1">AP/Javacオプションのエンコーディング <a class="header-anchor" href="#ap-javacオプションのエンコーディング" aria-label="Permalink to &quot;AP/Javacオプションのエンコーディング&quot;">​</a></h2><p><code>apoptions</code>および<code>javacArguments</code> CLIオプションは、エンコードされたオプションのマップを受け入れます。 自分でオプションをエンコードする方法は次のとおりです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encodeList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ByteArrayOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjectOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.size)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((key, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options.entries) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="javaコンパイラーのアノテーションプロセッサーを保持する" tabindex="-1">Javaコンパイラーのアノテーションプロセッサーを保持する <a class="header-anchor" href="#javaコンパイラーのアノテーションプロセッサーを保持する" aria-label="Permalink to &quot;Javaコンパイラーのアノテーションプロセッサーを保持する&quot;">​</a></h2><p>デフォルトでは、kaptはすべてのアノテーションプロセッサーを実行し、<code>javac</code>によるアノテーション処理を無効にします。 しかし、<code>javac</code>のアノテーションプロセッサーの一部（例: <a href="https://projectlombok.org/" target="_blank" rel="noreferrer">Lombok</a>）が動作する必要があるかもしれません。</p><p>Gradleビルドファイルでは、<code>keepJavacAnnotationProcessors</code>オプションを使用します。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keepJavacAnnotationProcessors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Mavenを使用する場合、具体的なプラグイン設定を指定する必要があります。 <a href="/ja/kotlin/lombok#using-with-kapt">Lombokコンパイラープラグインの設定例</a>を参照してください。</p>`,70))])}const C=o(c,[["render",E]]);export{m as __pageData,C as default};
