import{_ as r,C as k,c as o,o as d,ag as e,G as t,w as n,j as i,a}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Kotlin 1.5.0 有哪些新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew15.md","filePath":"zh-Hant/kotlin/whatsnew15.md","lastUpdated":1754307826000}'),c={name:"zh-Hant/kotlin/whatsnew15.md"};function g(E,s,y,u,F,b){const l=k("YouTubeVideo"),h=k("tab"),p=k("tabs");return d(),o("div",null,[s[4]||(s[4]=e(`<h1 id="kotlin-1-5-0-有哪些新功能" tabindex="-1">Kotlin 1.5.0 有哪些新功能 <a class="header-anchor" href="#kotlin-1-5-0-有哪些新功能" aria-label="Permalink to &quot;Kotlin 1.5.0 有哪些新功能&quot;">​</a></h1><p><em><a href="/zh-Hant/kotlin/releases#release-details">發行日期：2021 年 5 月 5 日</a></em></p><p>Kotlin 1.5.0 引入了新的語言功能、穩定的基於 IR 的 JVM 編譯器後端、效能改進， 以及諸如穩定實驗性功能和棄用過時功能等演進性變更。</p><p>您也可以在 <a href="https://blog.jetbrains.com/kotlin/2021/04/kotlin-1-5-0-released/" target="_blank" rel="noreferrer">發行部落格文章</a> 中找到變更的概覽。</p><h2 id="語言功能" tabindex="-1">語言功能 <a class="header-anchor" href="#語言功能" aria-label="Permalink to &quot;語言功能&quot;">​</a></h2><p>Kotlin 1.5.0 帶來了在 <a href="/zh-Hant/kotlin/whatsnew1430#language-features">1.4.30 中預覽</a> 的新語言功能的穩定版本：</p><ul><li><a href="#jvm-records-support">JVM 紀錄支援</a></li><li><a href="#sealed-interfaces">密封介面</a> 和 <a href="#package-wide-sealed-class-hierarchies">密封類別改進</a></li><li><a href="#inline-classes">行內類別</a></li></ul><p>這些功能的詳細描述可在 <a href="https://blog.jetbrains.com/kotlin/2021/02/new-language-features-preview-in-kotlin-1-4-30/" target="_blank" rel="noreferrer">這篇部落格文章</a> 和 Kotlin 文件中對應的頁面中找到。</p><h3 id="jvm-紀錄支援" tabindex="-1">JVM 紀錄支援 <a class="header-anchor" href="#jvm-紀錄支援" aria-label="Permalink to &quot;JVM 紀錄支援&quot;">​</a></h3><p>Java 發展迅速，為確保 Kotlin 能與之互通，我們引入了對其最新功能之一的支援 – <a href="https://openjdk.java.net/jeps/395" target="_blank" rel="noreferrer">紀錄類別</a>。</p><p>Kotlin 對 JVM 紀錄的支援包括雙向互通性：</p><ul><li>在 Kotlin 程式碼中，您可以像使用具有屬性的典型類別一樣使用 Java 紀錄類別。</li><li>要在 Java 程式碼中將 Kotlin 類別用作紀錄，請將其設為 <code>data</code> 類別並使用 <code>@JvmRecord</code> 註解標記它。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRecord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="/zh-Hant/kotlin/jvm-records">進一步了解如何在 Kotlin 中使用 JVM 紀錄</a>。</p>`,14)),t(l,{src:"https://www.youtube.com/v/iyEWXyuuseU",title:"Kotlin 1.5.0 中的 JVM 紀錄支援"}),s[5]||(s[5]=e(`<h3 id="密封介面" tabindex="-1">密封介面 <a class="header-anchor" href="#密封介面" aria-label="Permalink to &quot;密封介面&quot;">​</a></h3><p>Kotlin 介面現在可以使用 <code>sealed</code> 修飾符，其作用於介面與作用於類別的方式相同：密封介面的所有 實作在編譯時都是已知的。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Polygon</span></span></code></pre></div><p>您可以依賴這個事實，例如，撰寫詳盡的 <code>when</code> 表達式。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> draw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(polygon: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (polygon) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rectangle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Triangle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // else is not needed - all possible implementations are covered</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此外，密封介面支援更靈活的受限制類別層次結構，因為一個類別可以直接繼承多個密封介面。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FilledRectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Fillable</span></span></code></pre></div><p><a href="/zh-Hant/kotlin/sealed-classes">進一步了解密封介面</a>。</p>`,8)),t(l,{src:"https://www.youtube.com/v/d_Mor21W_60",title:"密封介面和密封類別改進"}),s[6]||(s[6]=e(`<h3 id="封裝單元級別的密封類別層次結構" tabindex="-1">封裝單元級別的密封類別層次結構 <a class="header-anchor" href="#封裝單元級別的密封類別層次結構" aria-label="Permalink to &quot;封裝單元級別的密封類別層次結構&quot;">​</a></h3><p>密封類別現在可以在同一編譯單元和同一封裝中的所有檔案中擁有子類別。 以前，所有子類別都必須出現在同一個檔案中。</p><p>直接子類別可以是頂層的，也可以巢狀在任意數量的其他具名類別、具名介面或具名物件中。</p><p>密封類別的子類別必須具有適當限定的名稱 – 它們不能是區域或匿名物件。</p><p><a href="/zh-Hant/kotlin/sealed-classes#inheritance">進一步了解密封類別層次結構</a>。</p><h3 id="行內類別" tabindex="-1">行內類別 <a class="header-anchor" href="#行內類別" aria-label="Permalink to &quot;行內類別&quot;">​</a></h3><p>行內類別是 <a href="https://github.com/Kotlin/KEEP/blob/master/notes/value-classes.md" target="_blank" rel="noreferrer">基於值的</a> 類別的子集， 它們只持有值。您可以將它們用作某種類型值的包裝器，而不會產生 記憶體分配帶來的額外開銷。</p><p>行內類別可以使用在類別名稱前的 <code>value</code> 修飾符來宣告：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>JVM 後端也需要特殊的 <code>@JvmInline</code> 註解：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>inline</code> 修飾符現在已棄用並帶有警告。</p><p><a href="/zh-Hant/kotlin/inline-classes">進一步了解行內類別</a>。</p>`,13)),t(l,{src:"https://www.youtube.com/v/LpqvtgibbsQ",title:"從行內類別到值類別"}),s[7]||(s[7]=e('<h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin/JVM 獲得了許多改進，包括內部和面向用戶的。以下是其中最值得注意的：</p><ul><li><a href="#stable-jvm-ir-backend">穩定的 JVM IR 後端</a></li><li><a href="#new-default-jvm-target-1-8">新的預設 JVM 目標：1.8</a></li><li><a href="#sam-adapters-via-invokedynamic">透過 invokedynamic 的 SAM 配接器</a></li><li><a href="#lambdas-via-invokedynamic">透過 invokedynamic 的 Lambda 表達式</a></li><li><a href="#deprecation-of-jvmdefault-and-old-xjvm-default-modes">棄用 @JvmDefault 和舊版 Xjvm-default 模式</a></li><li><a href="#improvements-to-handling-nullability-annotations">處理可空性註解的改進</a></li></ul><h3 id="穩定的-jvm-ir-後端" tabindex="-1">穩定的 JVM IR 後端 <a class="header-anchor" href="#穩定的-jvm-ir-後端" aria-label="Permalink to &quot;穩定的 JVM IR 後端&quot;">​</a></h3><p>Kotlin/JVM 編譯器的 <a href="/zh-Hant/kotlin/whatsnew14#new-jvm-ir-backend">基於 IR 的後端</a> 現在已 <a href="/zh-Hant/kotlin/components-stability">穩定</a> 並預設啟用。</p><p>從 <a href="/zh-Hant/kotlin/whatsnew14">Kotlin 1.4.0</a> 開始，基於 IR 的後端的早期版本可供預覽，現在它已成為語言版本 <code>1.5</code> 的預設值。 對於較早的語言版本，舊後端仍預設使用。</p><p>您可以在 <a href="https://blog.jetbrains.com/kotlin/2021/02/the-jvm-backend-is-in-beta-let-s-make-it-stable-together/" target="_blank" rel="noreferrer">這篇部落格文章</a> 中找到有關 IR 後端優勢及其未來發展的更多詳細資訊。</p><p>如果您需要在 Kotlin 1.5.0 中使用舊後端，您可以將以下幾行新增到專案的配置檔中：</p><ul><li>在 Gradle 中：</li></ul>',9)),t(p,{group:"build-script"},{default:n(()=>[t(h,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dsl"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinJvmCompile"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions.useOldBackend "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(h,{title:"Groovy","group-key":"groovy"},{default:n(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," kotlinOptions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"useOldBackend "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[8]||(s[8]=e(`<ul><li>在 Maven 中：</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-Xuse-old-backend&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="新的預設-jvm-目標-1-8" tabindex="-1">新的預設 JVM 目標：1.8 <a class="header-anchor" href="#新的預設-jvm-目標-1-8" aria-label="Permalink to &quot;新的預設 JVM 目標：1.8&quot;">​</a></h3><p>Kotlin/JVM 編譯的預設目標版本現在是 <code>1.8</code>。<code>1.6</code> 目標已棄用。</p><p>如果您需要為 JVM 1.6 建置，您仍然可以切換到此目標。了解如何操作：</p><ul><li><a href="/zh-Hant/kotlin/gradle-compiler-options#attributes-specific-to-jvm">在 Gradle 中</a></li><li><a href="/zh-Hant/kotlin/maven#attributes-specific-to-jvm">在 Maven 中</a></li><li><a href="/zh-Hant/kotlin/compiler-reference#jvm-target-version">在命令列編譯器中</a></li></ul><h3 id="透過-invokedynamic-的-sam-配接器" tabindex="-1">透過 invokedynamic 的 SAM 配接器 <a class="header-anchor" href="#透過-invokedynamic-的-sam-配接器" aria-label="Permalink to &quot;透過 invokedynamic 的 SAM 配接器&quot;">​</a></h3><p>Kotlin 1.5.0 現在使用動態呼叫 (<code>invokedynamic</code>) 來編譯 SAM (單一抽象方法) 轉換：</p><ul><li>當 SAM 類型為 <a href="/zh-Hant/kotlin/java-interop#sam-conversions">Java 介面</a> 時，針對任何表達式</li><li>當 SAM 類型為 <a href="/zh-Hant/kotlin/fun-interfaces#sam-conversions">Kotlin 函數式介面</a> 時，針對 lambda 表達式</li></ul><p>新實作使用 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/invoke/LambdaMetafactory.html#metafactory-java.lang.invoke.MethodHandles.Lookup-java.lang.String-java.lang.invoke.MethodType-java.lang.invoke.MethodType-java.lang.invoke.MethodHandle-java.lang.invoke.MethodType-" target="_blank" rel="noreferrer"><code>LambdaMetafactory.metafactory()</code></a>， 且在編譯期間不再生成輔助包裝類別。這減少了應用程式 JAR 的大小， 從而提高了 JVM 啟動效能。</p><p>要回滾到基於匿名類別生成的舊實作方案，請新增編譯器選項 <code>-Xsam-conversions=class</code>。</p><p>了解如何在 <a href="/zh-Hant/kotlin/gradle-compiler-options">Gradle</a>、<a href="/zh-Hant/kotlin/maven#specify-compiler-options">Maven</a> 和 <a href="/zh-Hant/kotlin/compiler-reference#compiler-options">命令列編譯器</a> 中新增編譯器選項。</p><h3 id="透過-invokedynamic-的-lambda-表達式" tabindex="-1">透過 invokedynamic 的 Lambda 表達式 <a class="header-anchor" href="#透過-invokedynamic-的-lambda-表達式" aria-label="Permalink to &quot;透過 invokedynamic 的 Lambda 表達式&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>將純 Kotlin lambda 編譯為 invokedynamic 是 <a href="/zh-Hant/kotlin/components-stability">實驗性</a> 功能。它可能隨時被移除或更改。 需要選擇啟用（詳情如下），您應僅用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-45375" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋。</p></div><p>Kotlin 1.5.0 引入了將純 Kotlin lambda (未轉換為函數式介面實例的 lambda) 編譯為動態呼叫 (<code>invokedynamic</code>) 的實驗性支援。該實作透過使用 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/invoke/LambdaMetafactory.html#metafactory-java.lang.invoke.MethodHandles.Lookup-java.lang.String-java.lang.invoke.MethodType-java.lang.invoke.MethodType-java.lang.invoke.MethodHandle-java.lang.invoke.MethodType-" target="_blank" rel="noreferrer"><code>LambdaMetafactory.metafactory()</code></a> 來產生更輕量的二進位檔， 它有效地在執行期生成必要的類別。目前，與普通 lambda 編譯相比，它有三個限制：</p><ul><li>編譯為 invokedynamic 的 lambda 不可序列化。</li><li>對此類 lambda 呼叫 <code>toString()</code> 會產生可讀性較差的字串表示。</li><li>實驗性 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.jvm/reflect.html" target="_blank" rel="noreferrer"><code>reflect</code></a> API 不支援使用 <code>LambdaMetafactory</code> 建立的 lambda。</li></ul><p>要試用此功能，請新增 <code>-Xlambdas=indy</code> 編譯器選項。如果您能使用 <a href="https://youtrack.jetbrains.com/issue/KT-45375" target="_blank" rel="noreferrer">這個 YouTrack 票證</a> 分享您的回饋，我們將不勝感激。</p><p>了解如何在 <a href="/zh-Hant/kotlin/gradle-compiler-options">Gradle</a>、<a href="/zh-Hant/kotlin/maven#specify-compiler-options">Maven</a> 和 <a href="/zh-Hant/kotlin/compiler-reference#compiler-options">命令列編譯器</a> 中新增編譯器選項。</p><h3 id="棄用-jvmdefault-和舊版-xjvm-default-模式" tabindex="-1">棄用 @JvmDefault 和舊版 Xjvm-default 模式 <a class="header-anchor" href="#棄用-jvmdefault-和舊版-xjvm-default-模式" aria-label="Permalink to &quot;棄用 @JvmDefault 和舊版 Xjvm-default 模式&quot;">​</a></h3><p>在 Kotlin 1.4.0 之前，有 <code>@JvmDefault</code> 註解以及 <code>-Xjvm-default=enable</code> 和 <code>-Xjvm-default=compatibility</code> 模式。它們用於為 Kotlin 介面中的任何特定非抽象成員建立 JVM 預設方法。</p><p>在 Kotlin 1.4.0 中，我們 <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer">引入了新的 <code>Xjvm-default</code> 模式</a>， 它們為整個專案啟用預設方法生成。</p><p>在 Kotlin 1.5.0 中，我們正在棄用 <code>@JvmDefault</code> 和舊版 Xjvm-default 模式：<code>-Xjvm-default=enable</code> 和 <code>-Xjvm-default=compatibility</code>。</p><p><a href="/zh-Hant/kotlin/java-to-kotlin-interop#default-methods-in-interfaces">進一步了解 Java 互通性中的預設方法</a>。</p><h3 id="處理可空性註解的改進" tabindex="-1">處理可空性註解的改進 <a class="header-anchor" href="#處理可空性註解的改進" aria-label="Permalink to &quot;處理可空性註解的改進&quot;">​</a></h3><p>Kotlin 支援透過 <a href="/zh-Hant/kotlin/java-interop#nullability-annotations">可空性註解</a> 處理來自 Java 的類型可空性資訊。 Kotlin 1.5.0 為此功能引入了多項改進：</p><ul><li>它讀取在用作依賴項的已編譯 Java 函式庫中的類型引數上的可空性註解。</li><li>它支援帶有 <code>TYPE_USE</code> 目標的可空性註解，適用於： <ul><li>陣列</li><li>變長引數</li><li>欄位</li><li>類型參數及其邊界</li><li>基底類別和介面的類型引數</li></ul></li><li>如果可空性註解有多個適用於某個類型的目標，且其中一個目標是 <code>TYPE_USE</code>，則優先選擇 <code>TYPE_USE</code>。 例如，方法簽名 <code>@Nullable String[] f()</code> 變為 <code>fun f(): Array&lt;String?&gt;!</code>，如果 <code>@Nullable</code> 同時支援 <code>TYPE_USE</code> 和 <code>METHOD</code> 作為目標。</li></ul><p>對於這些新支援的案例，從 Kotlin 呼叫 Java 時使用錯誤的類型可空性會產生警告。 使用 <code>-Xtype-enhancement-improvements-strict-mode</code> 編譯器選項為這些案例啟用嚴格模式（帶錯誤報告）。</p><p><a href="/zh-Hant/kotlin/java-interop#null-safety-and-platform-types">進一步了解空安全和平台類型</a>。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native 現在效能更好且更穩定。值得注意的變更包括：</p><ul><li><a href="#performance-improvements">效能改進</a></li><li><a href="#deactivation-of-the-memory-leak-checker">記憶體洩漏檢查器停用</a></li></ul><h3 id="效能改進" tabindex="-1">效能改進 <a class="header-anchor" href="#效能改進" aria-label="Permalink to &quot;效能改進&quot;">​</a></h3><p>在 1.5.0 中，Kotlin/Native 獲得了一系列效能改進，加速了編譯和執行。</p><p><a href="https://blog.jetbrains.com/kotlin/2020/03/kotlin-1-3-70-released/#kotlin-native" target="_blank" rel="noreferrer">編譯器快取</a> 現在在 <code>linuxX64</code>（僅限 Linux 主機）和 <code>iosArm64</code> 目標的除錯模式中受支援。啟用編譯器快取後，除了首次編譯外， 大多數除錯編譯都完成得更快。測量顯示，在我們的測試專案中速度提高了約 200%。</p><p>要為新目標使用編譯器快取，請選擇啟用，將以下幾行新增到專案的 <code>gradle.properties</code> 中：</p><ul><li>對於 <code>linuxX64</code> : <code>kotlin.native.cacheKind.linuxX64=static</code></li><li>對於 <code>iosArm64</code>: <code>kotlin.native.cacheKind.iosArm64=static</code></li></ul><p>如果您在啟用編譯器快取後遇到任何問題，請向我們的問題追蹤器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 回報。</p><p>其他改進加速了 Kotlin/Native 程式碼的執行：</p><ul><li>簡單的屬性存取器被內聯。</li><li>字串文字上的 <code>trimIndent()</code> 在編譯期間被求值。</li></ul><h3 id="記憶體洩漏檢查器停用" tabindex="-1">記憶體洩漏檢查器停用 <a class="header-anchor" href="#記憶體洩漏檢查器停用" aria-label="Permalink to &quot;記憶體洩漏檢查器停用&quot;">​</a></h3><p>內建的 Kotlin/Native 記憶體洩漏檢查器已預設停用。</p><p>它最初是為內部使用而設計，只能在有限的案例中找到洩漏，而不是所有案例。 此外，後來發現它存在可能導致應用程式崩潰的問題。因此，我們決定關閉記憶體洩漏檢查器。</p><p>記憶體洩漏檢查器在某些情況下仍然有用，例如單元測試。對於這些情況，您可以透過新增以下程式碼行來啟用它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Platform.isMemoryLeakCheckerActive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><p>請注意，不建議在應用程式執行期啟用檢查器。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS 在 1.5.0 中獲得了演進性變更。我們正在繼續努力將 <a href="/zh-Hant/kotlin/js-ir-compiler">JS IR 編譯器後端</a> 推向穩定並發布其他更新：</p><ul><li><a href="#upgrade-to-webpack-5">升級 webpack 到版本 5</a></li><li><a href="#frameworks-and-libraries-for-the-ir-compiler">適用於 IR 編譯器的框架和函式庫</a></li></ul><h3 id="升級到-webpack-5" tabindex="-1">升級到 webpack 5 <a class="header-anchor" href="#升級到-webpack-5" aria-label="Permalink to &quot;升級到 webpack 5&quot;">​</a></h3><p>Kotlin/JS Gradle 外掛現在對瀏覽器目標使用 webpack 5 而不是 webpack 4。這是一個主要的 webpack 升級， 它帶來了不相容的變更。如果您使用自訂 webpack 配置，請務必查看 <a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/" target="_blank" rel="noreferrer">webpack 5 發行說明</a>。</p><p><a href="/zh-Hant/kotlin/js-project-setup#webpack-bundling">進一步了解如何使用 webpack 綑綁 Kotlin/JS 專案</a>。</p><h3 id="適用於-ir-編譯器的框架和函式庫" tabindex="-1">適用於 IR 編譯器的框架和函式庫 <a class="header-anchor" href="#適用於-ir-編譯器的框架和函式庫" aria-label="Permalink to &quot;適用於 IR 編譯器的框架和函式庫&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin/JS IR 編譯器處於 <a href="/zh-Hant/kotlin/components-stability">Alpha</a> 階段。它未來可能會發生不相容的變更並需要手動遷移。 我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋。</p></div><p>在開發基於 IR 的 Kotlin/JS 編譯器後端的同時，我們鼓勵並幫助函式庫作者以 <code>both</code> 模式建置其專案。 這意味著他們能夠為兩個 Kotlin/JS 編譯器產生構件，從而為新編譯器擴展生態系統。</p><p>許多知名框架和函式庫已經適用於 IR 後端：<a href="https://kvision.io/" target="_blank" rel="noreferrer">KVision</a>、<a href="https://www.fritz2.dev/" target="_blank" rel="noreferrer">fritz2</a>、 <a href="https://github.com/nacular/doodle" target="_blank" rel="noreferrer">doodle</a> 等等。如果您在專案中使用它們，您已經可以使用 IR 後端建置專案並查看其帶來的優勢。</p><p>如果您正在撰寫自己的函式庫，請 <a href="/zh-Hant/kotlin/js-ir-compiler#authoring-libraries-for-the-ir-compiler-with-backwards-compatibility">以 &#39;both&#39; 模式編譯</a>， 以便您的客戶也可以使用新編譯器。</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>在 Kotlin 1.5.0 中，<a href="#simplified-test-dependencies-usage-in-multiplatform-projects">為每個平台選擇測試依賴項已簡化</a>， 現在由 Gradle 外掛自動完成。</p><p><a href="#new-api-for-getting-a-char-category-now-available-in-multiplatform-code">取得字元類別的新 API 現已在多平台專案中可用</a>。</p><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><p>標準函式庫獲得了一系列變更和改進，從穩定實驗性部分到新增功能：</p><ul><li><a href="#stable-unsigned-integer-types">穩定無符號整數類型</a></li><li><a href="#stable-locale-agnostic-api-for-upper-lowercasing-text">穩定與語言環境無關的文字大小寫轉換 API</a></li><li><a href="#stable-char-to-integer-conversion-api">穩定字元到整數轉換 API</a></li><li><a href="#stable-path-api">穩定路徑 API</a></li><li><a href="#floored-division-and-the-mod-operator">向下取整除法和取模運算子</a></li><li><a href="#duration-api-changes">Duration API 變更</a></li><li><a href="#new-api-for-getting-a-char-category-now-available-in-multiplatform-code">取得字元類別的新 API 現已在多平台程式碼中可用</a></li><li><a href="#new-collections-function-firstnotnullof">新的集合函數 firstNotNullOf()</a></li><li><a href="#strict-version-of-string-toboolean">String?.toBoolean() 的嚴格版本</a></li></ul><p>您可以在 <a href="https://blog.jetbrains.com/kotlin/2021/04/kotlin-1-5-0-rc-released/" target="_blank" rel="noreferrer">這篇部落格文章</a> 中找到有關標準函式庫變更的更多詳細資訊。</p>`,63)),t(l,{src:"https://www.youtube.com/v/MyTkiT2I6-8",title:"新的標準函式庫功能"}),s[9]||(s[9]=e(`<h3 id="穩定無符號整數類型" tabindex="-1">穩定無符號整數類型 <a class="header-anchor" href="#穩定無符號整數類型" aria-label="Permalink to &quot;穩定無符號整數類型&quot;">​</a></h3><p><code>UInt</code>、<code>ULong</code>、<code>UByte</code>、<code>UShort</code> 無符號整數類型現在已 <a href="/zh-Hant/kotlin/components-stability">穩定</a>。 這些類型上的操作、範圍和進程也是如此。無符號陣列及其操作仍處於 Beta 階段。</p><p><a href="/zh-Hant/kotlin/unsigned-integer-types">進一步了解無符號整數類型</a>。</p><h3 id="穩定與語言環境無關的文字大小寫轉換-api" tabindex="-1">穩定與語言環境無關的文字大小寫轉換 API <a class="header-anchor" href="#穩定與語言環境無關的文字大小寫轉換-api" aria-label="Permalink to &quot;穩定與語言環境無關的文字大小寫轉換 API&quot;">​</a></h3><p>此版本帶來了新的與語言環境無關的文字大小寫轉換 API。它提供了 <code>toLowerCase()</code>、<code>toUpperCase()</code>、<code>capitalize()</code> 和 <code>decapitalize()</code> API 函數的替代方案， 這些函數是語言環境敏感的。新 API 可幫助您避免因不同的語言環境設定而導致的錯誤。</p><p>Kotlin 1.5.0 提供以下完全 <a href="/zh-Hant/kotlin/components-stability">穩定</a> 的替代方案：</p><ul><li><p>對於 <code>String</code> 函數：</p><table tabindex="0"><thead><tr><th><strong>舊版本</strong></th><th><strong>1.5.0 替代方案</strong></th></tr></thead><tbody><tr><td><code>String.toUpperCase()</code></td><td><code>String.uppercase()</code></td></tr><tr><td><code>String.toLowerCase()</code></td><td><code>String.lowercase()</code></td></tr><tr><td><code>String.capitalize()</code></td><td><code>String.replaceFirstChar { it.uppercase() }</code></td></tr><tr><td><code>String.decapitalize()</code></td><td><code>String.replaceFirstChar { it.lowercase() }</code></td></tr></tbody></table></li><li><p>對於 <code>Char</code> 函數：</p><table tabindex="0"><thead><tr><th><strong>舊版本</strong></th><th><strong>1.5.0 替代方案</strong></th></tr></thead><tbody><tr><td><code>Char.toUpperCase()</code></td><td><code>Char.uppercaseChar(): Char</code><br><code>Char.uppercase(): String</code></td></tr><tr><td><code>Char.toLowerCase()</code></td><td><code>Char.lowercaseChar(): Char</code><br><code>Char.lowercase(): String</code></td></tr><tr><td><code>Char.toTitleCase()</code></td><td><code>Char.titlecaseChar(): Char</code><br><code>Char.titlecase(): String</code></td></tr></tbody></table></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>對於 Kotlin/JVM，還有帶有明確 <code>Locale</code> 參數的多載 <code>uppercase()</code>、<code>lowercase()</code> 和 <code>titlecase()</code> 函數。</p></div><p>舊 API 函數被標記為棄用，並將在未來版本中移除。</p><p>有關文字處理函數的所有變更列表，請參閱 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/stdlib/locale-agnostic-case-conversions.md" target="_blank" rel="noreferrer">KEEP</a>。</p><h3 id="穩定字元到整數轉換-api" tabindex="-1">穩定字元到整數轉換 API <a class="header-anchor" href="#穩定字元到整數轉換-api" aria-label="Permalink to &quot;穩定字元到整數轉換 API&quot;">​</a></h3><p>從 Kotlin 1.5.0 開始，新的字元到程式碼和字元到數字轉換函數已 <a href="/zh-Hant/kotlin/components-stability">穩定</a>。 這些函數取代了目前的 API 函數，後者經常與類似的字串到 Int 轉換混淆。</p><p>新 API 消除了這種命名混淆，使程式碼行為更加透明和明確。</p><p>此版本引入了 <code>Char</code> 轉換，這些轉換分為以下幾組命名清晰的函數：</p><ul><li>獲取 <code>Char</code> 的整數程式碼並從給定程式碼構造 <code>Char</code> 的函數：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Char.code: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span></code></pre></div><ul><li>將 <code>Char</code> 轉換為它所代表數字的數值函數：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToIntOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?</span></span></code></pre></div><ul><li><code>Int</code> 的擴展函數，用於將它所代表的非負單一數字轉換為相應的 <code>Char</code> 表示：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span></span></code></pre></div><p>舊的轉換 API，包括 <code>Number.toChar()</code> 及其實現（除了 <code>Int.toChar()</code> 之外的所有）以及用於轉換為 數值類型的 <code>Char</code> 擴展，如 <code>Char.toInt()</code>，現在都已棄用。</p><p><a href="https://github.com/Kotlin/KEEP/blob/master/proposals/stdlib/char-int-conversions.md" target="_blank" rel="noreferrer">進一步了解 KEEP 中的字元到整數轉換 API</a>。</p><h3 id="穩定路徑-api" tabindex="-1">穩定路徑 API <a class="header-anchor" href="#穩定路徑-api" aria-label="Permalink to &quot;穩定路徑 API&quot;">​</a></h3><p>帶有 <code>java.nio.file.Path</code> 擴展的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io.path/java.nio.file.-path/" target="_blank" rel="noreferrer">實驗性路徑 API</a> 現在已 <a href="/zh-Hant/kotlin/components-stability">穩定</a>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用除法 (/) 運算子構造路徑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/base&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;subdirectory&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 列出目錄中的檔案</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinFiles: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listDirectoryEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*.kt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="/zh-Hant/kotlin/whatsnew1420#extensions-for-java-nio-file-path">進一步了解路徑 API</a>。</p><h3 id="向下取整除法和取模運算子" tabindex="-1">向下取整除法和取模運算子 <a class="header-anchor" href="#向下取整除法和取模運算子" aria-label="Permalink to &quot;向下取整除法和取模運算子&quot;">​</a></h3><p>標準函式庫中新增了模數算術運算：</p><ul><li><code>floorDiv()</code> 回傳 <a href="https://en.wikipedia.org/wiki/Floor_and_ceiling_functions" target="_blank" rel="noreferrer">向下取整除法</a> 的結果。它適用於整數類型。</li><li><code>mod()</code> 回傳向下取整除法的餘數（<em>模數</em>）。它適用於所有數值類型。</li></ul><p>這些運算與現有的 <a href="/zh-Hant/kotlin/numbers#operations-on-numbers">整數除法</a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/rem.html" target="_blank" rel="noreferrer">rem()</a> 函數（或 <code>%</code> 運算子）看起來非常相似，但它們在負數上的行為不同：</p><ul><li><code>a.floorDiv(b)</code> 與常規 <code>/</code> 的區別在於 <code>floorDiv</code> 將結果向下取整（朝向較小的整數）， 而 <code>/</code> 將結果截斷為更接近 0 的整數。</li><li><code>a.mod(b)</code> 是 <code>a</code> 與 <code>a.floorDiv(b) * b</code> 之間的差值。它要麼是零，要麼與 <code>b</code> 符號相同， 而 <code>a % b</code> 可以有不同的符號。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;向下取整除法 -5/3: \${(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floorDiv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;模數: \${(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;截斷除法 -5/3: \${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;餘數: \${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="duration-api-變更" tabindex="-1">Duration API 變更 <a class="header-anchor" href="#duration-api-變更" aria-label="Permalink to &quot;Duration API 變更&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Duration API 是 <a href="/zh-Hant/kotlin/components-stability">實驗性</a> 功能。它可能隨時被移除或更改。 僅用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋。</p></div><p>有一個實驗性的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/" target="_blank" rel="noreferrer">Duration</a> 類別，用於表示 不同時間單位中的持續時間量。在 1.5.0 中，Duration API 獲得了以下變更：</p><ul><li>內部值表示現在使用 <code>Long</code> 而不是 <code>Double</code> 以提供更好的精確度。</li><li>有一個用於轉換為特定時間單位（以 <code>Long</code> 表示）的新 API。它取代了操作 <code>Double</code> 值的舊 API，舊 API 現已棄用。例如，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/in-whole-minutes.html" target="_blank" rel="noreferrer"><code>Duration.inWholeMinutes</code></a> 回傳以 <code>Long</code> 表示的持續時間值，並取代 <code>Duration.inMinutes</code>。</li><li>有用於從數字構造 <code>Duration</code> 的新伴隨函數。例如，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/seconds.html" target="_blank" rel="noreferrer"><code>Duration.seconds(Int)</code></a> 創建一個表示整數秒數的 <code>Duration</code> 物件。舊的擴展屬性如 <code>Int.seconds</code> 現已棄用。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.Duration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.ExperimentalTime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ExperimentalTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">milliseconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;在 \${duration.inWholeMinutes} 分鐘中有 \${duration.inWholeSeconds} 秒&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="取得字元類別的新-api-現已在多平台程式碼中可用" tabindex="-1">取得字元類別的新 API 現已在多平台程式碼中可用 <a class="header-anchor" href="#取得字元類別的新-api-現已在多平台程式碼中可用" aria-label="Permalink to &quot;取得字元類別的新 API 現已在多平台程式碼中可用&quot;">​</a></h3><p>Kotlin 1.5.0 引入了新的 API，用於在多平台專案中根據 Unicode 獲取字元的類別。 現在許多函數在所有平台和通用程式碼中都可用。</p><p>用於檢查字元是否為字母或數字的函數：</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-digit.html" target="_blank" rel="noreferrer"><code>Char.isDigit()</code></a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-letter.html" target="_blank" rel="noreferrer"><code>Char.isLetter()</code></a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-letter-or-digit.html" target="_blank" rel="noreferrer"><code>Char.isLetterOrDigit()</code></a></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chars </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;+&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (letterOrDigitList, notLetterOrDigitList) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">partition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isLetterOrDigit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(letterOrDigitList) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [a, 1]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(notLetterOrDigitList) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [+]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>用於檢查字元大小寫的函數：</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-lower-case.html" target="_blank" rel="noreferrer"><code>Char.isLowerCase()</code></a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-upper-case.html" target="_blank" rel="noreferrer"><code>Char.isUpperCase()</code></a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-title-case.html" target="_blank" rel="noreferrer"><code>Char.isTitleCase()</code></a></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chars </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ǅ&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ǈ&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ǋ&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ǲ&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;+&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (titleCases, notTitleCases) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">partition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isTitleCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(titleCases) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ǅ, ǈ, ǋ, ǲ]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(notTitleCases) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, A, a, +]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其他一些函數：</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-defined.html" target="_blank" rel="noreferrer"><code>Char.isDefined()</code></a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-i-s-o-control.html" target="_blank" rel="noreferrer"><code>Char.isISOControl()</code></a></li></ul><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/category.html" target="_blank" rel="noreferrer"><code>Char.category</code></a> 屬性及其回傳類型 列舉類別 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-char-category/" target="_blank" rel="noreferrer"><code>CharCategory</code></a>， 它表示根據 Unicode 的字元一般類別，現在也可用於多平台專案。</p><p><a href="/zh-Hant/kotlin/characters">進一步了解字元</a>。</p><h3 id="新的集合函數-firstnotnullof" tabindex="-1">新的集合函數 firstNotNullOf() <a class="header-anchor" href="#新的集合函數-firstnotnullof" aria-label="Permalink to &quot;新的集合函數 firstNotNullOf()&quot;">​</a></h3><p>新的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/first-not-null-of.html" target="_blank" rel="noreferrer"><code>firstNotNullOf()</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/first-not-null-of-or-null.html" target="_blank" rel="noreferrer"><code>firstNotNullOfOrNull()</code></a> 函數將 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map-not-null.html" target="_blank" rel="noreferrer"><code>mapNotNull()</code></a> 與 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/first.html" target="_blank" rel="noreferrer"><code>first()</code></a> 或 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/first-or-null.html" target="_blank" rel="noreferrer"><code>firstOrNull()</code></a> 結合。 它們使用自訂選擇器函數映射原始集合並回傳第一個非空值。如果沒有此類值， <code>firstNotNullOf()</code> 會拋出例外，而 <code>firstNotNullOfOrNull()</code> 回傳 null。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstNotNullOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDoubleOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstNotNullOfOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toIntOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="string-toboolean-的嚴格版本" tabindex="-1">String?.toBoolean() 的嚴格版本 <a class="header-anchor" href="#string-toboolean-的嚴格版本" aria-label="Permalink to &quot;String?.toBoolean() 的嚴格版本&quot;">​</a></h3><p>兩個新函數引入了現有 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-boolean.html" target="_blank" rel="noreferrer">String?.toBoolean()</a> 的區分大小寫的嚴格版本：</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-boolean-strict.html" target="_blank" rel="noreferrer"><code>String.toBooleanStrict()</code></a> 除了文字 <code>true</code> 和 <code>false</code> 之外，對所有輸入都會拋出例外。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-boolean-strict-or-null.html" target="_blank" rel="noreferrer"><code>String.toBooleanStrictOrNull()</code></a> 除了文字 <code>true</code> 和 <code>false</code> 之外，對所有輸入都會回傳 null。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBooleanStrict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBooleanStrictOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // println(&quot;1&quot;.toBooleanStrict())</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Exception</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-test-函式庫" tabindex="-1">kotlin-test 函式庫 <a class="header-anchor" href="#kotlin-test-函式庫" aria-label="Permalink to &quot;kotlin-test 函式庫&quot;">​</a></h2><p><a href="https://kotlinlang.org/api/latest/kotlin.test/" target="_blank" rel="noreferrer">kotlin-test</a> 函式庫引入了一些新功能：</p><ul><li><a href="#simplified-test-dependencies-usage-in-multiplatform-projects">多平台專案中簡化測試依賴項的使用</a></li><li><a href="#automatic-selection-of-a-testing-framework-for-kotlin-jvm-source-sets">針對 Kotlin/JVM 原始碼集合自動選擇測試框架</a></li><li><a href="#assertion-function-updates">斷言函數更新</a></li></ul><h3 id="多平台專案中簡化測試依賴項的使用" tabindex="-1">多平台專案中簡化測試依賴項的使用 <a class="header-anchor" href="#多平台專案中簡化測試依賴項的使用" aria-label="Permalink to &quot;多平台專案中簡化測試依賴項的使用&quot;">​</a></h3><p>現在您可以使用 <code>kotlin-test</code> 依賴項在 <code>commonTest</code> 原始碼集合中新增測試依賴項， Gradle 外掛將為每個測試原始碼集合推斷相應的平台依賴項：</p><ul><li><code>kotlin-test-junit</code> 用於 JVM 原始碼集合，請參閱 <a href="#automatic-selection-of-a-testing-framework-for-kotlin-jvm-source-sets">針對 Kotlin/JVM 原始碼集合自動選擇測試框架</a></li><li><code>kotlin-test-js</code> 用於 Kotlin/JS 原始碼集合</li><li><code>kotlin-test-common</code> 和 <code>kotlin-test-annotations-common</code> 用於通用原始碼集合</li><li>對於 Kotlin/Native 原始碼集合沒有額外的構件</li></ul><p>此外，您可以在任何共享或平台特定原始碼集合中使用 <code>kotlin-test</code> 依賴項。</p><p>現有的帶有明確依賴項的 kotlin-test 設定將繼續在 Gradle 和 Maven 中工作。</p><p>進一步了解 <a href="/zh-Hant/kotlin/gradle-configure-project#set-dependencies-on-test-libraries">設定測試函式庫的依賴項</a>。</p><h3 id="針對-kotlin-jvm-原始碼集合自動選擇測試框架" tabindex="-1">針對 Kotlin/JVM 原始碼集合自動選擇測試框架 <a class="header-anchor" href="#針對-kotlin-jvm-原始碼集合自動選擇測試框架" aria-label="Permalink to &quot;針對 Kotlin/JVM 原始碼集合自動選擇測試框架&quot;">​</a></h3><p>Gradle 外掛現在會自動選擇並新增測試框架的依賴項。您只需在通用原始碼集合中新增 <code>kotlin-test</code> 依賴項即可。</p><p>Gradle 預設使用 JUnit 4。因此，<code>kotlin(&quot;test&quot;)</code> 依賴項解析為 JUnit 4 的變體， 即 <code>kotlin-test-junit</code>：</p>`,68)),t(p,{group:"build-script"},{default:n(()=>[t(h,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>s[2]||(s[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," commonTest "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"                implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"test"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 這會傳遞性地帶來 ")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"                                               // 對 JUnit 4 的依賴項")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(h,{title:"Groovy","group-key":"groovy"},{default:n(()=>s[3]||(s[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        commonTest {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependencies {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                implementation kotlin("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"test"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 這會傳遞性地帶來 ")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"                                              // 對 JUnit 4 的依賴項")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[10]||(s[10]=e(`<p>您可以透過在測試任務中呼叫 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/Test.html#useJUnitPlatform" target="_blank" rel="noreferrer"><code>useJUnitPlatform()</code></a> 或 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/Test.html#useTestNG" target="_blank" rel="noreferrer"><code>useTestNG()</code></a> 來選擇 JUnit 5 或 TestNG：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    test {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 啟用 TestNG 支援</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        useTestNG()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 或</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 啟用 JUnit Platform (又稱 JUnit 5) 支援</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        useJUnitPlatform()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以透過在專案的 <code>gradle.properties</code> 中新增 <code>kotlin.test.infer.jvm.variant=false</code> 行來禁用自動測試框架選擇。</p><p>進一步了解 <a href="/zh-Hant/kotlin/gradle-configure-project#set-dependencies-on-test-libraries">設定測試函式庫的依賴項</a>。</p><h3 id="斷言函數更新" tabindex="-1">斷言函數更新 <a class="header-anchor" href="#斷言函數更新" aria-label="Permalink to &quot;斷言函數更新&quot;">​</a></h3><p>此版本帶來了新的斷言函數並改進了現有函數。</p><p><code>kotlin-test</code> 函式庫現在具有以下功能：</p><ul><li><p><strong>檢查值的類型</strong></p><p>您可以使用新的 <code>assertIs&lt;T&gt;</code> 和 <code>assertIsNot&lt;T&gt;</code> 來檢查值的類型：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertIs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(s)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果斷言失敗，會拋出 AssertionError 並提及 s 的實際類型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 由於 assertIs 中的契約，現在可以列印 s.length</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${s.length}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>由於類型擦除，在此範例中，此斷言函數僅檢查 <code>value</code> 是否為 <code>List</code> 類型，而不檢查它是否為特定 <code>String</code> 元素類型的列表：<code>assertIs&lt;List&lt;String&gt;&gt;(value)</code>。</p></li><li><p><strong>比較陣列、序列和任意可迭代容器的內容</strong></p><p>有一組新的多載 <code>assertContentEquals()</code> 函數，用於比較不實作 <a href="/zh-Hant/kotlin/equality#structural-equality">結構等價</a> 的不同集合的內容：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expectedArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actualArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertContentEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expectedArray, actualArray)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>assertEquals() 和 assertNotEquals() 針對 Double 和 Float 數值的新多載</strong></p><p><code>assertEquals()</code> 函數有新的多載，可以比較兩個 <code>Double</code> 或 <code>Float</code> 數值並具有絕對精確度。精確度值指定為函數的第三個參數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PI)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 精確度參數</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tolerance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.000001</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x, tolerance)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>檢查集合和元素內容的新函數</strong></p><p>您現在可以使用 <code>assertContains()</code> 函數檢查集合或元素是否包含某物。 您可以將其與 Kotlin 集合以及具有 <code>contains()</code> 運算子的元素（例如 <code>IntRange</code>、<code>String</code> 等）一起使用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampleList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sample&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sample2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampleString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sample&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertContains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sampleList, sampleString)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 集合中的元素</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertContains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sampleString, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;amp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 字串中的子字串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>assertTrue()、assertFalse()、expect() 函數現在是行內函數</strong></p><p>從現在開始，您可以將這些函數用作行內函數，因此可以在 lambda 表達式內呼叫 <a href="/zh-Hant/kotlin/composing-suspending-functions">暫停函數</a>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deferred </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin is nice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertTrue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin substring should be present&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        deferred.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="kotlinx-函式庫" tabindex="-1">kotlinx 函式庫 <a class="header-anchor" href="#kotlinx-函式庫" aria-label="Permalink to &quot;kotlinx 函式庫&quot;">​</a></h2><p>隨著 Kotlin 1.5.0 的發布，我們也發布了 kotlinx 函式庫的新版本：</p><ul><li><code>kotlinx.coroutines</code> <a href="#coroutines-1-5-0-rc">1.5.0-RC</a></li><li><code>kotlinx.serialization</code> <a href="#serialization-1-2-1">1.2.1</a></li><li><code>kotlinx-datetime</code> <a href="#datetime-0-2-0">0.2.0</a></li></ul><h3 id="coroutines-1-5-0-rc" tabindex="-1">Coroutines 1.5.0-RC <a class="header-anchor" href="#coroutines-1-5-0-rc" aria-label="Permalink to &quot;Coroutines 1.5.0-RC&quot;">​</a></h3><p><code>kotlinx.coroutines</code> <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.5.0-RC" target="_blank" rel="noreferrer">1.5.0-RC</a> 帶來的更新包括：</p><ul><li><a href="/zh-Hant/kotlin/channels">新的通道 API</a></li><li>穩定的 <a href="/zh-Hant/kotlin/async-programming#reactive-extensions">響應式整合</a></li><li>以及更多</li></ul><p>從 Kotlin 1.5.0 開始，<a href="/zh-Hant/kotlin/whatsnew14#exclusion-of-the-deprecated-experimental-coroutines">實驗性協程</a> 已禁用，並且不再支援 <code>-Xcoroutines=experimental</code> 標誌。</p><p>在 <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.5.0-RC" target="_blank" rel="noreferrer">變更日誌</a> 和 <a href="https://blog.jetbrains.com/kotlin/2021/05/kotlin-coroutines-1-5-0-released/" target="_blank" rel="noreferrer"><code>kotlinx.coroutines</code> 1.5.0 發行部落格文章</a> 中了解更多資訊。</p>`,16)),t(l,{src:"https://www.youtube.com/v/EVLnWOcR0is",title:"kotlinx.coroutines 1.5.0"}),s[11]||(s[11]=e('<h3 id="serialization-1-2-1" tabindex="-1">Serialization 1.2.1 <a class="header-anchor" href="#serialization-1-2-1" aria-label="Permalink to &quot;Serialization 1.2.1&quot;">​</a></h3><p><code>kotlinx.serialization</code> <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.2.1" target="_blank" rel="noreferrer">1.2.1</a> 帶來的更新包括：</p><ul><li>JSON 序列化效能改進</li><li>JSON 序列化中支援多個名稱</li><li>從 <code>@Serializable</code> 類別生成實驗性 .proto 模式</li><li>以及更多</li></ul><p>在 <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.2.1" target="_blank" rel="noreferrer">變更日誌</a> 和 <a href="https://blog.jetbrains.com/kotlin/2021/05/kotlinx-serialization-1-2-released/" target="_blank" rel="noreferrer"><code>kotlinx.serialization</code> 1.2.1 發行部落格文章</a> 中了解更多資訊。</p>',4)),t(l,{src:"https://www.youtube.com/v/698I_AH8h6s",title:"kotlinx.serialization 1.2.1"}),s[12]||(s[12]=e('<h3 id="datetime-0-2-0" tabindex="-1">dateTime 0.2.0 <a class="header-anchor" href="#datetime-0-2-0" aria-label="Permalink to &quot;dateTime 0.2.0&quot;">​</a></h3><p><code>kotlinx-datetime</code> <a href="https://github.com/Kotlin/kotlinx-datetime/releases/tag/v0.2.0" target="_blank" rel="noreferrer">0.2.0</a> 帶來的更新包括：</p><ul><li><code>@Serializable</code> 日期時間物件</li><li><code>DateTimePeriod</code> 和 <code>DatePeriod</code> 的標準化 API</li><li>以及更多</li></ul><p>在 <a href="https://github.com/Kotlin/kotlinx-datetime/releases/tag/v0.2.0" target="_blank" rel="noreferrer">變更日誌</a> 和 <a href="https://blog.jetbrains.com/kotlin/2021/05/kotlinx-datetime-0-2-0-is-out/" target="_blank" rel="noreferrer"><code>kotlinx-datetime</code> 0.2.0 發行部落格文章</a> 中了解更多資訊。</p><h2 id="遷移到-kotlin-1-5-0" tabindex="-1">遷移到 Kotlin 1.5.0 <a class="header-anchor" href="#遷移到-kotlin-1-5-0" aria-label="Permalink to &quot;遷移到 Kotlin 1.5.0&quot;">​</a></h2><p>一旦 Kotlin 外掛 1.5.0 可用，IntelliJ IDEA 和 Android Studio 將建議更新該外掛。</p><p>要將現有專案遷移到 Kotlin 1.5.0，只需將 Kotlin 版本更改為 <code>1.5.0</code> 並重新匯入您的 Gradle 或 Maven 專案。 <a href="/zh-Hant/kotlin/releases#update-to-a-new-kotlin-version">了解如何更新到 Kotlin 1.5.0</a>。</p><p>要使用 Kotlin 1.5.0 啟動新專案，請更新 Kotlin 外掛並從 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong> 執行專案精靈。</p><p>新的命令列編譯器可在 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.5.0" target="_blank" rel="noreferrer">GitHub 發行頁面</a> 下載。</p><p>Kotlin 1.5.0 是一個 <a href="/zh-Hant/kotlin/kotlin-evolution-principles#language-and-tooling-releases">功能發行版</a>，因此可能會 帶來與語言不相容的變更。在 <a href="/zh-Hant/kotlin/compatibility-guide-15">Kotlin 1.5 相容性指南</a> 中找到此類變更的詳細列表。</p>',10))])}const v=r(c,[["render",g]]);export{f as __pageData,v as default};
