import{_ as i}from"./chunks/rendering-example.DjBbBMnn.js";import{_ as a,c as n,o as t,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"类型安全的 HTML DSL","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/typesafe-html-dsl.md","filePath":"kotlin/typesafe-html-dsl.md","lastUpdated":1754307826000}'),p={name:"kotlin/typesafe-html-dsl.md"};function h(e,s,k,r,o,d){return t(),n("div",null,s[0]||(s[0]=[l(`<h1 id="类型安全的-html-dsl" tabindex="-1">类型安全的 HTML DSL <a class="header-anchor" href="#类型安全的-html-dsl" aria-label="Permalink to &quot;类型安全的 HTML DSL&quot;">​</a></h1><p><a href="https://www.github.com/kotlin/kotlinx.html" target="_blank" rel="noreferrer">kotlinx.html 库</a> 提供了使用静态类型的 HTML 构建器生成 DOM 元素的能力（除了 JavaScript，它甚至可以在 JVM 目标平台使用！）。要使用此库，请在我们的 <code>build.gradle.kts</code> 文件中包含相应的仓库和依赖项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stdlib-js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlinx:kotlinx-html-js:0.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>一旦包含该依赖项，您就可以访问所提供的不同接口来生成 DOM。要渲染一个标题、一些文本和一个链接，例如，以下代码片段就足够了：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.browser.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.html.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.html.dom.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    document.body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.append.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome to Kotlin/JS!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Fancy joining this year&#39;s &quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://kotlinconf.com/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;KotlinConf&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;?&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当在浏览器中运行此示例时，DOM 将以直接了当的方式被组装。通过使用浏览器的开发者工具检测网站的元素，可以轻松证实这一点：</p><p><img src="`+i+'" alt="Rendering a website from kotlinx.html" width="700"></p><p>要了解更多关于 <code>kotlinx.html</code> 库的信息，请查阅 <a href="https://github.com/Kotlin/kotlinx.html/wiki/Getting-started" target="_blank" rel="noreferrer">GitHub Wiki</a>，您可以在其中找到更多关于如何 <a href="https://github.com/Kotlin/kotlinx.html/wiki/DOM-trees" target="_blank" rel="noreferrer">创建元素</a> 而不将其添加到 DOM、<a href="https://github.com/Kotlin/kotlinx.html/wiki/Events" target="_blank" rel="noreferrer">绑定到事件</a>（例如 <code>onClick</code>），以及如何将 <a href="https://github.com/Kotlin/kotlinx.html/wiki/Elements-CSS-classes" target="_blank" rel="noreferrer">CSS 类应用于</a> HTML 元素的示例，这只是其中的一小部分。</p>',8)]))}const y=a(p,[["render",h]]);export{c as __pageData,y as default};
