import{_ as p,C as t,c as o,o as r,G as s,ag as h,w as k,j as e,a as d}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/client-timeout.md","filePath":"ja/ktor/client-timeout.md","lastUpdated":1755457140000}'),c={name:"ja/ktor/client-timeout.md"};function u(g,i,E,m,y,F){const a=t("TopicTitle"),n=t("primary-label"),l=t("tldr");return r(),o("div",null,[s(a,{labelRef:"client-plugin",title:"タイムアウト"}),s(n,{ref:"client-plugin"},null,512),s(l,null,{default:k(()=>i[0]||(i[0]=[e("p",null,[e("b",null,"コード例"),d(": "),e("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-timeout"}," client-timeout ")],-1)])),_:1}),i[1]||(i[1]=h(`<p><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout" target="_blank" rel="noreferrer">HttpTimeout</a>プラグインを使用すると、以下のタイムアウトを設定できます。</p><ul><li><strong>リクエストタイムアウト</strong> — HTTP呼び出しの処理に必要な期間（リクエストの送信からレスポンスの受信まで）。</li><li><strong>コネクションタイムアウト</strong> — クライアントがサーバーとの接続を確立すべき期間。</li><li><strong>ソケットタイムアウト</strong> — サーバーとのデータ交換中に、2つのデータパケット間での最大非アクティブ時間。</li></ul><p>これらのタイムアウトは、すべてのリクエストに対して指定することも、特定のリクエストに対してのみ指定することもできます。</p><h2 id="add_dependencies" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係の追加 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>HttpTimeout</code>は<a href="./client-dependencies">ktor-client-core</a>アーティファクトのみを必要とし、特定の依存関係は必要ありません。</p><h2 id="install_plugin" tabindex="-1">HttpTimeoutのインストール <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;HttpTimeoutのインストール {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p><code>HttpTimeout</code>をインストールするには、<a href="./client-create-and-configure#configure-client">クライアント設定ブロック</a>内の<code>install</code>関数に渡します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpTimeout)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configure_plugin" tabindex="-1">タイムアウトの設定 <a class="header-anchor" href="#configure_plugin" aria-label="Permalink to &quot;タイムアウトの設定 {id=&quot;configure_plugin&quot;}&quot;">​</a></h2><p>タイムアウトを設定するには、対応するプロパティを使用できます。</p><ul><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout-config/request-timeout-millis.html" target="_blank" rel="noreferrer">requestTimeoutMillis</a>は、HTTP呼び出し全体（リクエストの送信からレスポンスの受信まで）のタイムアウトを指定します。</li><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout-config/connect-timeout-millis.html" target="_blank" rel="noreferrer">connectTimeoutMillis</a>は、サーバーとの接続確立のためのタイムアウトを指定します。</li><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout-config/socket-timeout-millis.html" target="_blank" rel="noreferrer">socketTimeoutMillis</a>は、サーバーとのデータ交換中に、2つのデータパケット間の最大非アクティブ時間のタイムアウトを指定します。</li></ul><p><code>install</code>ブロック内で、すべてのリクエストに対するタイムアウトを指定できます。以下のコードサンプルは、<code>requestTimeoutMillis</code>を使用してリクエストタイムアウトを設定する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpTimeout) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        requestTimeoutMillis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>特定のリクエストに対してのみタイムアウトを設定する必要がある場合は、<a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/timeout.html" target="_blank" rel="noreferrer">HttpRequestBuilder.timeout</a>プロパティを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://0.0.0.0:8080/path1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        requestTimeoutMillis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>特定のリクエストに指定されたタイムアウトは、<code>install</code>ブロックからのグローバルタイムアウトをオーバーライドすることに注意してください。</p><p>タイムアウトが発生した場合、Ktorは<code>HttpRequestTimeoutException</code>、<code>ConnectTimeoutException</code>、または<code>SocketTimeoutException</code>をスローします。</p><h2 id="limitations" tabindex="-1">制限事項 <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;制限事項 {id=&quot;limitations&quot;}&quot;">​</a></h2><p><code>HttpTimeout</code>には、特定の<a href="./client-engines">エンジン</a>にいくつかの制限があります。以下の表は、それらのエンジンがサポートするタイムアウトを示しています。</p><table tabindex="0"><thead><tr><th>エンジン</th><th>リクエストタイムアウト</th><th>コネクトタイムアウト</th><th>ソケットタイムアウト</th></tr></thead><tbody><tr><td><a href="./client-engines#darwin">Darwin</a></td><td>✅️</td><td>✖️</td><td>✅️</td></tr><tr><td><a href="./client-engines#js">JavaScript</a></td><td>✅</td><td>✖️</td><td>✖️</td></tr><tr><td><a href="./client-engines#curl">Curl</a></td><td>✅</td><td>✅️</td><td>✖️</td></tr><tr><td><a href="./client-testing">MockEngine</a></td><td>✅</td><td>✖️</td><td>✅</td></tr></tbody></table>`,20))])}const b=p(c,[["render",u]]);export{_ as __pageData,b as default};
