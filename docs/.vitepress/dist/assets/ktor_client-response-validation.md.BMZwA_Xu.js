import{_ as k,C as t,c as r,o,j as i,G as e,ag as d,a,w as n}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/client-response-validation.md","filePath":"ktor/client-response-validation.md","lastUpdated":1755457140000}'),c={name:"ktor/client-response-validation.md"};function E(g,s,y,u,x,F){const l=t("show-structure"),p=t("tldr"),h=t("link-summary");return o(),r("div",null,[s[2]||(s[2]=i("h1",{id:"响应验证",tabindex:"-1"},[a("响应验证 "),i("a",{class:"header-anchor",href:"#响应验证","aria-label":'Permalink to "响应验证"'},"​")],-1)),e(l,{for:"chapter",depth:"2"}),e(p,null,{default:n(()=>s[0]||(s[0]=[i("p",null,[i("b",null,"代码示例"),a(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-2xx-response"},"client-validate-2xx-response"),a(", "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-non-2xx-response"},"client-validate-non-2xx-response")],-1)])),_:1}),e(h,null,{default:n(()=>s[1]||(s[1]=[a(" 了解如何根据响应的状态码进行验证。 ")])),_:1}),s[3]||(s[3]=d(`<p>默认情况下，Ktor 不会根据其状态码验证<a href="./client-responses">响应</a>。 如果需要，您可以使用以下验证策略：</p><ul><li>使用 <code>expectSuccess</code> 属性来对非 2xx 响应抛出异常。</li><li>添加更严格的 2xx 响应验证。</li><li>自定义非 2xx 响应的验证。</li></ul><h2 id="default" tabindex="-1">启用默认验证 <a class="header-anchor" href="#default" aria-label="Permalink to &quot;启用默认验证 {id=&quot;default&quot;}&quot;">​</a></h2><p>Ktor 允许您通过将 <code>expectSuccess</code> 属性设置为 <code>true</code> 来启用默认验证。 这可以在<a href="./client-create-and-configure#configure-client">客户端配置</a>级别进行...</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    expectSuccess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>... 或者通过在<a href="./client-requests#parameters">请求</a>级别使用相同的属性。 在这种情况下，对于非 2xx 错误响应，将抛出以下异常：</p><ul><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-redirect-response-exception/index.html" target="_blank" rel="noreferrer">RedirectResponseException</a> 适用于 3xx 响应。</li><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-client-request-exception/index.html" target="_blank" rel="noreferrer">ClientRequestException</a> 适用于 4xx 响应。</li><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-server-response-exception/index.html" target="_blank" rel="noreferrer">ServerResponseException</a> 适用于 5xx 响应。</li></ul><h2 id="custom" tabindex="-1">自定义验证 <a class="header-anchor" href="#custom" aria-label="Permalink to &quot;自定义验证 {id=&quot;custom&quot;}&quot;">​</a></h2><p>您可以通过使用 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator" target="_blank" rel="noreferrer">HttpCallValidator</a> 插件来为 2xx 响应添加额外的验证或自定义默认验证。要安装 <code>HttpCallValidator</code>，请在<a href="./client-create-and-configure#configure-client">客户端配置块</a>内调用 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-response-validator.html" target="_blank" rel="noreferrer">HttpResponseValidator</a> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HttpResponseValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="2xx" tabindex="-1">验证 2xx 响应 <a class="header-anchor" href="#2xx" aria-label="Permalink to &quot;验证 2xx 响应 {id=&quot;2xx&quot;}&quot;">​</a></h3><p>如上所述，<a href="#default">默认验证</a>会为非 2xx 错误响应抛出异常。如果您需要添加更严格的验证并检查 2xx 响应，请使用 <code>HttpCallValidator</code> 中可用的 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator-config/validate-response.html" target="_blank" rel="noreferrer">validateResponse</a> 函数。</p><p>在下面的<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-2xx-response" target="_blank" rel="noreferrer">示例</a>中，客户端接收到 2xx 响应，其错误详情为 <a href="./client-serialization">JSON</a> 格式。 <code>validateResponse</code> 用于抛出 <code>CustomResponseException</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HttpResponseValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validateResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomResponseException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Code: \${error.code}, message: \${error.message}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="non-2xx" tabindex="-1">处理非 2xx 异常 <a class="header-anchor" href="#non-2xx" aria-label="Permalink to &quot;处理非 2xx 异常 {id=&quot;non-2xx&quot;}&quot;">​</a></h3><p>如果您需要自定义<a href="#default">默认验证</a>并以特定方式处理非 2xx 响应的异常，请使用 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator-config/handle-response-exception-with-request.html" target="_blank" rel="noreferrer">handleResponseExceptionWithRequest</a>。 在下面的<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-non-2xx-response" target="_blank" rel="noreferrer">示例</a>中，客户端为 404 响应抛出自定义的 <code>MissingPageException</code>，而不是默认的 <code>ClientRequestException</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    expectSuccess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HttpResponseValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        handleResponseExceptionWithRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { exception, request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientException </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? ClientRequestException ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@handleResponseExceptionWithRequest</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exceptionResponse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientException.response</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (exceptionResponse.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpStatusCode.NotFound) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exceptionResponseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exceptionResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyAsText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MissingPageException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exceptionResponse, exceptionResponseText)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,17))])}const m=k(c,[["render",E]]);export{f as __pageData,m as default};
