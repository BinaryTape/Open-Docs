import{_ as e,C as t,c as l,o as n,j as s,G as h,ag as p,a as o}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"ローカライズのテスト","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-localization-tests.md","filePath":"ja/kmp/compose-localization-tests.md","lastUpdated":1755516278000}'),r={name:"ja/kmp/compose-localization-tests.md"};function d(k,a,c,u,E,g){const i=t("show-structure");return n(),l("div",null,[a[0]||(a[0]=s("h1",{id:"ローカライズのテスト",tabindex:"-1"},[o("ローカライズのテスト "),s("a",{class:"header-anchor",href:"#ローカライズのテスト","aria-label":'Permalink to "ローカライズのテスト"'},"​")],-1)),h(i,{depth:"2"}),a[1]||(a[1]=p(`<p>ローカライズをテストするには、異なるロケールで正しい翻訳済み文字列が表示されることを確認し、 書式設定とレイアウトがロケールの要件に適応していることを検証します。</p><h2 id="異なるプラットフォームでのロケールのテスト" tabindex="-1">異なるプラットフォームでのロケールのテスト <a class="header-anchor" href="#異なるプラットフォームでのロケールのテスト" aria-label="Permalink to &quot;異なるプラットフォームでのロケールのテスト&quot;">​</a></h2><h3 id="android" tabindex="-1">Android <a class="header-anchor" href="#android" aria-label="Permalink to &quot;Android&quot;">​</a></h3><p>Androidでは、デバイスのシステムロケールを<strong>設定 | システム | 言語と入力 | 言語</strong>から変更できます。 自動テストの場合、<code>adb</code>シェルを使用してエミュレーター上で直接ロケールを変更できます。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">adb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setprop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> persist.sys.locale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [BCP-47 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">language</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span></span></code></pre></div><p>このコマンドはエミュレーターを再起動し、新しいロケールでアプリを再起動できるようにします。</p><p>または、Espressoのようなフレームワークを使用して、テスト実行前にプログラムでロケールを設定することもできます。 例えば、<code>LocaleTestRule()</code>を使用してテスト中にロケールの切り替えを自動化できます。</p><h3 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h3><p>iOSでは、デバイスのシステム言語と地域を<strong>設定 | 一般 | 言語と地域</strong>から変更できます。 XCUITestフレームワークを使用したUI自動テストの場合、起動引数を使用してロケールの変更をシミュレートします。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.launchArguments </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;-AppleLanguages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(es)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;-AppleLocale&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es_ES&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="デスクトップ" tabindex="-1">デスクトップ <a class="header-anchor" href="#デスクトップ" aria-label="Permalink to &quot;デスクトップ&quot;">​</a></h3><p>デスクトップでは、JVMのロケールは通常、オペレーティングシステムのロケールにデフォルト設定されます。 設定の場所はデスクトッププラットフォームによって異なります。</p><p>UIが初期化される前に、テスト設定またはアプリケーションのエントリポイントでJVMのデフォルトロケールをプログラムで設定できます。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">java.util.Locale.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(java.util.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Locale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es_ES&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h3 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h3><p>素早い確認のためには、ブラウザの設定で言語設定を変更できます。 自動テストの場合、SeleniumやPuppeteerのようなブラウザ自動化ツールでロケールの変更をシミュレートできます。</p><p>または、<code>window.navigator.languages</code>プロパティの読み取り専用制限を迂回して、 カスタムロケールを導入することもできます。詳細については、<a href="./compose-resource-environment"></a>チュートリアルで確認してください。</p><h2 id="主要なテストシナリオ" tabindex="-1">主要なテストシナリオ <a class="header-anchor" href="#主要なテストシナリオ" aria-label="Permalink to &quot;主要なテストシナリオ&quot;">​</a></h2><h3 id="カスタムロケール" tabindex="-1">カスタムロケール <a class="header-anchor" href="#カスタムロケール" aria-label="Permalink to &quot;カスタムロケール&quot;">​</a></h3><ul><li>ロケールをプログラムでオーバーライドします。</li><li>UI要素、書式設定された文字列、およびレイアウトが選択されたロケールに正しく適応することを確認します。 これには、該当する場合の右から左へのテキストの処理も含まれます。</li></ul><h3 id="デフォルトリソース" tabindex="-1">デフォルトリソース <a class="header-anchor" href="#デフォルトリソース" aria-label="Permalink to &quot;デフォルトリソース&quot;">​</a></h3><p>デフォルトリソースは、指定されたロケールで翻訳が利用できない場合に使用されます。 アプリケーションはこれらのデフォルトに正しくフォールバックする必要があります。</p><ul><li>上記で説明したプラットフォーム固有の方法を使用して、ロケールをサポートされていない値に設定します。</li><li>フォールバックメカニズムがデフォルトのリソースを正しくロードし、適切に表示することを確認します。</li></ul><h3 id="ロケール固有のケース" tabindex="-1">ロケール固有のケース <a class="header-anchor" href="#ロケール固有のケース" aria-label="Permalink to &quot;ロケール固有のケース&quot;">​</a></h3><p>一般的なローカライズの問題を避けるために、以下のロケール固有のケースを検討してください。</p><ul><li>日付の書式設定（<code>MM/dd/yyyy</code> vs. <code>dd/MM/yyyy</code>）や数値の書式設定など、 <a href="./compose-regional-format">ロケール固有の書式設定</a>をテストします。</li><li><a href="./compose-rtl">RTLおよびLTRの動作</a>を検証し、アラビア語やヘブライ語のような右から左への言語で、 文字列、レイアウト、および配置が適切に表示されることを確認します。</li></ul>`,26))])}const b=e(r,[["render",d]]);export{F as __pageData,b as default};
