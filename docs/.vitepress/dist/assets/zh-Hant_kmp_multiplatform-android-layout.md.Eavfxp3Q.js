import{_ as a,c as d,o as i,ag as e}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"Android 原始碼集佈局","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/multiplatform-android-layout.md","filePath":"zh-Hant/kmp/multiplatform-android-layout.md","lastUpdated":1755516278000}'),n={name:"zh-Hant/kmp/multiplatform-android-layout.md"};function s(o,t,r,l,h,c){return i(),d("div",null,t[0]||(t[0]=[e(`<h1 id="android-原始碼集佈局" tabindex="-1">Android 原始碼集佈局 <a class="header-anchor" href="#android-原始碼集佈局" aria-label="Permalink to &quot;Android 原始碼集佈局&quot;">​</a></h1><p>新的 Android 原始碼集佈局已在 Kotlin 1.8.0 中引入，並於 1.9.0 中成為預設設定。請遵循本指南，以了解已棄用佈局和新佈局之間的關鍵差異，以及如何遷移您的專案。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>您無需實作所有建議，只需實作適用於您特定專案的建議即可。</p></div><h2 id="檢查相容性" tabindex="-1">檢查相容性 <a class="header-anchor" href="#檢查相容性" aria-label="Permalink to &quot;檢查相容性&quot;">​</a></h2><p>新的佈局需要 Android Gradle 外掛程式 7.0 或更高版本，並支援 Android Studio 2022.3 及更高版本。請檢查您的 Android Gradle 外掛程式版本，並在必要時升級。</p><h2 id="重新命名-kotlin-原始碼集" tabindex="-1">重新命名 Kotlin 原始碼集 <a class="header-anchor" href="#重新命名-kotlin-原始碼集" aria-label="Permalink to &quot;重新命名 Kotlin 原始碼集&quot;">​</a></h2><p>如果適用，請依照此模式重新命名您專案中的原始碼集：</p><table tabindex="0"><thead><tr><th>舊版原始碼集佈局</th><th>新版原始碼集佈局</th></tr></thead><tbody><tr><td><code>targetName</code> + <code>AndroidSourceSet.name</code></td><td><code>targetName</code> + <code>AndroidVariantType</code></td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code> 對應到 <code>{KotlinSourceSet.name}</code> 如下：</p><table tabindex="0"><thead><tr><th></th><th>舊版原始碼集佈局</th><th>新版原始碼集佈局</th></tr></thead><tbody><tr><td>main</td><td>androidMain</td><td>androidMain</td></tr><tr><td>test</td><td>androidTest</td><td>android<b>Unit</b>Test</td></tr><tr><td>androidTest</td><td>android<b>Android</b>Test</td><td>android<b>Instrumented</b>Test</td></tr></tbody></table><h2 id="移動原始碼檔案" tabindex="-1">移動原始碼檔案 <a class="header-anchor" href="#移動原始碼檔案" aria-label="Permalink to &quot;移動原始碼檔案&quot;">​</a></h2><p>如果適用，請依照此模式將您的原始碼檔案移動到新的目錄：</p><table tabindex="0"><thead><tr><th>舊版原始碼集佈局</th><th>新版原始碼集佈局</th></tr></thead><tbody><tr><td>該佈局有額外的 <code>/kotlin</code> SourceDirectories</td><td><code>src/{KotlinSourceSet.name}/kotlin</code></td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code> 對應到 <code>{包含的原始碼目錄}</code> 如下：</p><table tabindex="0"><thead><tr><th></th><th>舊版原始碼集佈局</th><th>新版原始碼集佈局</th></tr></thead><tbody><tr><td>main</td><td>src/androidMain/kotlin<br>src/main/kotlin<br>src/main/java</td><td>src/androidMain/kotlin<br>src/main/kotlin<br>src/main/java</td></tr><tr><td>test</td><td>src/androidTest/kotlin<br>src/test/kotlin<br>src/test/java</td><td>src/android<b>Unit</b>Test/kotlin<br>src/test/kotlin<br>src/test/java</td></tr><tr><td>androidTest</td><td>src/android<b>Android</b>Test/kotlin<br>src/androidTest/java</td><td>src/android<b>Instrumented</b>Test/kotlin<br>src/androidTest/java, <b>src/androidTest/kotlin</b></td></tr></tbody></table><h2 id="移動-androidmanifest-xml-檔案" tabindex="-1">移動 AndroidManifest.xml 檔案 <a class="header-anchor" href="#移動-androidmanifest-xml-檔案" aria-label="Permalink to &quot;移動 AndroidManifest.xml 檔案&quot;">​</a></h2><p>如果您的專案中有 <code>AndroidManifest.xml</code> 檔案，請依照此模式將其移動到新的目錄：</p><table tabindex="0"><thead><tr><th>舊版原始碼集佈局</th><th>新版原始碼集佈局</th></tr></thead><tbody><tr><td>src/{<b>Android</b>SourceSet.name}/AndroidManifest.xml</td><td>src/{<b>Kotlin</b>SourceSet.name}/AndroidManifest.xml</td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code> 對應到 <code>{AndroidManifest.xml 位置}</code> 如下：</p><table tabindex="0"><thead><tr><th></th><th>舊版原始碼集佈局</th><th>新版原始碼集佈局</th></tr></thead><tbody><tr><td>main</td><td>src/main/AndroidManifest.xml</td><td>src/<b>android</b>Main/AndroidManifest.xml</td></tr><tr><td>debug</td><td>src/debug/AndroidManifest.xml</td><td>src/<b>android</b>Debug/AndroidManifest.xml</td></tr></tbody></table><h2 id="檢查-android-與通用測試之間的關聯" tabindex="-1">檢查 Android 與通用測試之間的關聯 <a class="header-anchor" href="#檢查-android-與通用測試之間的關聯" aria-label="Permalink to &quot;檢查 Android 與通用測試之間的關聯&quot;">​</a></h2><p>新的 Android 原始碼集佈局變更了 Android 儀器化測試（在新佈局中已重新命名為 <code>androidInstrumentedTest</code>）與通用測試之間的關聯。</p><p>以前，<code>androidAndroidTest</code> 與 <code>commonTest</code> 之間的 <code>dependsOn</code> 關聯是預設的。這表示：</p><ul><li><code>commonTest</code> 中的程式碼可在 <code>androidAndroidTest</code> 中使用。</li><li><code>commonTest</code> 中的 <code>expect</code> 宣告必須在 <code>androidAndroidTest</code> 中有對應的 <code>actual</code> 實作。</li><li>在 <code>commonTest</code> 中宣告的測試也作為 Android 儀器化測試執行。</li></ul><p>在新的 Android 原始碼集佈局中，<code>dependsOn</code> 關聯預設不自動新增。如果您偏好先前的行為，請在您的 <code>build.gradle.kts</code> 檔案中手動宣告以下關聯：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> androidInstrumentedTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonTest)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="調整-android-變體的實作" tabindex="-1">調整 Android 變體的實作 <a class="header-anchor" href="#調整-android-變體的實作" aria-label="Permalink to &quot;調整 Android 變體的實作&quot;">​</a></h2><p>以前，Kotlin Gradle 外掛程式會積極地建立對應於包含 <code>debug</code> 和 <code>release</code> 建置類型或自訂變體（例如 <code>demo</code> 和 <code>full</code>）的 Android 原始碼集。這使得原始碼集可以透過使用 <code>val androidDebug by getting { ... }</code> 這樣的表達式來存取。</p><p>新的 Android 原始碼集佈局利用 Android 的 <a href="https://developer.android.com/reference/tools/gradle-api/8.0/com/android/build/api/variant/AndroidComponentsExtension#onVariants(com.android.build.api.variant.VariantSelector,kotlin.Function1)" target="_blank" rel="noreferrer"><code>onVariants</code></a> 來建立原始碼集。這使得此類表達式失效，導致類似 <code>org.gradle.api.UnknownDomainObjectException: KotlinSourceSet with name &#39;androidDebug&#39; not found</code> 的錯誤。</p><p>為了解決這個問題，請在您的 <code>build.gradle.kts</code> 檔案中使用新的 <code>invokeWhenCreated()</code> API：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invokeWhenCreated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidFreeDebug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,31)]))}const b=a(n,[["render",s]]);export{k as __pageData,b as default};
