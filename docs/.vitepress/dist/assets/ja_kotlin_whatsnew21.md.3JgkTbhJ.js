import{_ as o,a as d,b as E}from"./chunks/wasm-debugger-improved.BQ6ItNQi.js";import{_ as g}from"./chunks/compiler-options-levels.DqXOqvYF.js";import{_ as c}from"./chunks/xcode-swift-export-run-script-phase.CN5rl4tW.js";import{_ as y,a as F}from"./chunks/wasm-custom-formatters-firefox.C2LVO8ja.js";import{_ as u,C as t,c as b,o as m,ag as e,j as s,G as n,a,w as l}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"Kotlin 2.1.0 の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew21.md","filePath":"ja/kotlin/whatsnew21.md","lastUpdated":1754307826000}'),C={name:"ja/kotlin/whatsnew21.md"},A={tabindex:"0"},f={style:{"text-align":"left"}};function v(B,i,D,q,K,x){const p=t("shortcut"),h=t("tab"),k=t("tabs"),r=t("list");return m(),b("div",null,[i[13]||(i[13]=e(`<h1 id="kotlin-2-1-0-の新機能" tabindex="-1">Kotlin 2.1.0 の新機能 <a class="header-anchor" href="#kotlin-2-1-0-の新機能" aria-label="Permalink to &quot;Kotlin 2.1.0 の新機能&quot;">​</a></h1><p><a href="/ja/kotlin/releases#release-details">リリース日: 2024年11月27日</a></p><p>Kotlin 2.1.0 がリリースされました！主なハイライトは以下の通りです。</p><ul><li><strong>プレビュー版の新言語機能</strong>: <a href="#guard-conditions-in-when-with-a-subject">when式でのガード条件（when with a subject）</a>、 <a href="#non-local-break-and-continue">非ローカルな <code>break</code> と <code>continue</code></a>、および<a href="#multi-dollar-string-interpolation">複数ドル記号による文字列補間</a>。</li><li><strong>K2 コンパイラの更新</strong>: <a href="#extra-compiler-checks">コンパイラチェックの柔軟性向上</a>と <a href="#improved-k2-kapt-implementation">kapt実装の改善</a>。</li><li><strong>Kotlin Multiplatform</strong>: <a href="#basic-support-for-swift-export">Swiftエクスポートの基本サポート</a>の導入、 <a href="#new-gradle-dsl-for-compiler-options-in-multiplatform-projects-promoted-to-stable">コンパイラオプションの安定版Gradle DSL</a>など。</li><li><strong>Kotlin/Native</strong>: <a href="#iosarm64-promoted-to-tier-1"><code>iosArm64</code>のサポート改善</a>およびその他の更新。</li><li><strong>Kotlin/Wasm</strong>: <a href="#support-for-incremental-compilation">インクリメンタルコンパイルのサポート</a>を含む複数の更新。</li><li><strong>Gradle サポート</strong>: <a href="#gradle-improvements">新しいバージョンのGradleおよびAndroid Gradleプラグインとの互換性向上</a>、 <a href="#new-api-for-kotlin-gradle-plugin-extensions">Kotlin GradleプラグインAPIの更新</a>。</li><li><strong>ドキュメント</strong>: <a href="#documentation-updates">Kotlinドキュメントの大幅な改善</a>。</li></ul><h2 id="ideサポート" tabindex="-1">IDEサポート <a class="header-anchor" href="#ideサポート" aria-label="Permalink to &quot;IDEサポート&quot;">​</a></h2><p>2.1.0 をサポートする Kotlin プラグインは、最新の IntelliJ IDEA および Android Studio にバンドルされています。 IDE 内の Kotlin プラグインを更新する必要はありません。 ビルドスクリプトで Kotlin バージョンを 2.1.0 に変更するだけです。</p><p>詳細については、<a href="/ja/kotlin/releases#update-to-a-new-kotlin-version">新しい Kotlin バージョンへの更新</a>を参照してください。</p><h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><p>K2 コンパイラを搭載した Kotlin 2.0.0 のリリース後、JetBrains チームは新機能で言語の改善に注力しています。 このリリースでは、いくつかの新しい言語設計の改善を発表できることを嬉しく思います。</p><p>これらの機能はプレビュー版として利用可能であり、ぜひお試しいただき、フィードバックを共有してください。</p><ul><li><a href="#guard-conditions-in-when-with-a-subject">when式でのガード条件（when with a subject）</a></li><li><a href="#non-local-break-and-continue">非ローカルな <code>break</code> と <code>continue</code></a></li><li><a href="#multi-dollar-string-interpolation">複数ドル記号による文字列補間: 文字列リテラル内の<code>$</code>の処理を改善</a></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>すべての機能は、K2 モードが有効になっている IntelliJ IDEA の最新バージョン 2024.3 で IDE サポートが提供されています。 詳細については、<a href="https://blog.jetbrains.com/idea/2024/11/intellij-idea-2024-3/" target="_blank" rel="noreferrer">IntelliJ IDEA 2024.3 のブログ記事</a>を参照してください。</p></div><p><a href="/ja/kotlin/kotlin-language-features-and-proposals">Kotlin の言語設計機能と提案の全リストを参照</a>。</p><p>このリリースでは、以下の言語更新も含まれています。</p><ul><li><a href="#support-for-requiring-opt-in-to-extend-apis"></a></li><li><a href="#improved-overload-resolution-for-functions-with-generic-types"></a></li><li><a href="#improved-exhaustiveness-checks-for-when-expressions-with-sealed-classes"></a></li></ul><h3 id="when式でのガード条件-when-with-a-subject" tabindex="-1">when式でのガード条件（when with a subject） <a class="header-anchor" href="#when式でのガード条件-when-with-a-subject" aria-label="Permalink to &quot;when式でのガード条件（when with a subject）&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/kotlin-evolution-principles#pre-stable-features">プレビュー版</a>であり、オプトインが必要です（詳細は下記を参照）。 <a href="https://youtrack.jetbrains.com/issue/KT-71140" target="_blank" rel="noreferrer">YouTrack</a>でフィードバックをいただけると幸いです。</p></div><p>2.1.0 から、<code>when</code> 式または <code>when</code> ステートメントでガード条件を使用できるようになりました。</p><p>ガード条件を使用すると、<code>when</code> 式のブランチに複数の条件を含めることができ、複雑な制御フローをより明示的かつ簡潔にし、コード構造をフラット化できます。</p><p>ブランチにガード条件を含めるには、主要な条件の後に <code>if</code> で区切って配置します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mouseHunter: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> feedCat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> breed: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> feedDog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> feedAnimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animal: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (animal) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Branch with only the primary condition. Calls \`feedDog()\` when \`animal\` is \`Dog\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Animal.Dog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">feedDog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Branch with both primary and guard conditions. Calls \`feedCat()\` when \`animal\` is \`Cat\` and is not \`mouseHunter\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Animal.Cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">animal.mouseHunter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">feedCat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Prints &quot;Unknown animal&quot; if none of the above conditions match</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Unknown animal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>1つの <code>when</code> 式で、ガード条件があるブランチとないブランチを組み合わせることができます。 ガード条件を持つブランチのコードは、主要な条件とガード条件の両方が <code>true</code> の場合にのみ実行されます。 主要な条件が一致しない場合、ガード条件は評価されません。 さらに、ガード条件は <code>else if</code> をサポートします。</p><p>プロジェクトでガード条件を有効にするには、コマンドラインで以下のコンパイラオプションを使用します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xwhen-guards</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.kt</span></span></code></pre></div><p>または、Gradle ビルドファイルの <code>compilerOptions {}</code> ブロックに追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xwhen-guards&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="非ローカルなbreakとcontinue" tabindex="-1">非ローカルなbreakとcontinue <a class="header-anchor" href="#非ローカルなbreakとcontinue" aria-label="Permalink to &quot;非ローカルなbreakとcontinue&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/kotlin-evolution-principles#pre-stable-features">プレビュー版</a>であり、オプトインが必要です（詳細は下記を参照）。 <a href="https://youtrack.jetbrains.com/issue/KT-1436" target="_blank" rel="noreferrer">YouTrack</a>でフィードバックをいただけると幸いです。</p></div><p>Kotlin 2.1.0 では、待望の機能である非ローカルな <code>break</code> および <code>continue</code> を使用できるプレビュー版が追加されました。 この機能により、インライン関数のスコープ内で使用できるツールセットが拡張され、プロジェクト内のボイラープレートコードが削減されます。</p><p>以前は、非ローカルな <code>return</code> のみを使用できました。 現在、Kotlin は <code>break</code> および <code>continue</code> <a href="/ja/kotlin/returns">ジャンプ式</a>の非ローカルな使用もサポートしています。 これは、ループを囲むインライン関数に引数として渡されるラムダ内でそれらを適用できることを意味します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elements: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elements) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> variable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nullableMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warning</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Element is null or invalid, continuing...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            continue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (variable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // If variable is zero, return true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>プロジェクトでこの機能を試すには、コマンドラインで <code>-Xnon-local-break-continue</code> コンパイラオプションを使用します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xnon-local-break-continue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.kt</span></span></code></pre></div><p>または、Gradle ビルドファイルの <code>compilerOptions {}</code> ブロックに追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xnon-local-break-continue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この機能は、将来の Kotlin リリースで安定版にする予定です。 非ローカルな <code>break</code> および <code>continue</code> の使用中に問題が発生した場合は、<a href="https://youtrack.jetbrains.com/issue/KT-1436" target="_blank" rel="noreferrer">課題トラッカー</a>にご報告ください。</p><h3 id="複数ドル記号による文字列補間" tabindex="-1">複数ドル記号による文字列補間 <a class="header-anchor" href="#複数ドル記号による文字列補間" aria-label="Permalink to &quot;複数ドル記号による文字列補間&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/kotlin-evolution-principles#pre-stable-features">プレビュー版</a>であり、オプトインが必要です（詳細は下記を参照）。 <a href="https://youtrack.jetbrains.com/issue/KT-2425" target="_blank" rel="noreferrer">YouTrack</a>でフィードバックをいただけると幸いです。</p></div><p>Kotlin 2.1.0 は、複数ドル記号による文字列補間のサポートを導入し、文字列リテラル内でのドル記号 (<code>$</code>) の処理方法を改善します。 この機能は、テンプレートエンジン、JSON スキーマ、その他のデータ形式など、複数のドル記号を必要とするコンテキストで役立ちます。</p><p>Kotlin の文字列補間では、1つのドル記号を使用します。 しかし、財務データやテンプレートシステムで一般的な文字列リテラルにドル記号を使用する場合、以前は<code>\${&#39;$&#39;}</code>のような回避策が必要でした。 複数ドル記号による補間機能が有効になると、いくつのドル記号で補間をトリガーするかを設定でき、より少ないドル記号は文字列リテラルとして扱われます。</p><p>以下は、<code>$</code> を使用してプレースホルダーを持つ JSON スキーマの複数行文字列を生成する例です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.jsonSchema : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$schema</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;: &quot;https://example.com/product.schema.json&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$dynamicAnchor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;: &quot;meta&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;title&quot;: &quot;\${simpleName ?: qualifiedName ?: &quot;unknown&quot;}&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;type&quot;: &quot;object&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span></code></pre></div><p>この例では、最初の <code>$</code> は、補間をトリガーするために <strong>2つのドル記号</strong> (<code>$</code>) が必要であることを意味します。 これにより、<code>$schema</code>、<code>$id</code>、<code>$dynamicAnchor</code> が補間マーカーとして解釈されるのを防ぎます。</p><p>このアプローチは、プレースホルダー構文にドル記号を使用するシステムと連携する場合に特に役立ちます。</p><p>この機能を有効にするには、コマンドラインで以下のコンパイラオプションを使用します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xmulti-dollar-interpolation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.kt</span></span></code></pre></div><p>または、Gradle ビルドファイルの <code>compilerOptions {}</code> ブロックを更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xmulti-dollar-interpolation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>コードが既に単一ドル記号による標準の文字列補間を使用している場合、変更は必要ありません。 文字列リテラルにドル記号が必要な場合はいつでも <code>$</code> を使用できます。</p><h3 id="apiを拡張するためのオプトイン必須化のサポート" tabindex="-1">APIを拡張するためのオプトイン必須化のサポート <a class="header-anchor" href="#apiを拡張するためのオプトイン必須化のサポート" aria-label="Permalink to &quot;APIを拡張するためのオプトイン必須化のサポート&quot;">​</a></h3><p>Kotlin 2.1.0 では、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-subclass-opt-in-required/" target="_blank" rel="noreferrer"><code>@SubclassOptInRequired</code></a> アノテーションが導入されました。これにより、ライブラリの作成者は、ユーザーが実験的なインターフェースを実装したり、実験的なクラスを拡張したりする前に、明示的なオプトインを要求できます。</p><p>この機能は、ライブラリのAPIが使用するには十分安定しているが、新しい抽象関数によって進化する可能性があり、継承に対して不安定になる場合に役立ちます。</p><p>API要素にオプトイン要件を追加するには、アノテーションクラスへの参照と共に <code>@SubclassOptInRequired</code> アノテーションを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RequiresOptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RequiresOptIn.Level.WARNING,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Interfaces in this library are experimental&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UnstableApi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@SubclassOptInRequired</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UnstableApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CoreLibraryApi</span></span></code></pre></div><p>この例では、<code>CoreLibraryApi</code> インターフェースは、ユーザーがそれを実装する前にオプトインすることを要求します。 ユーザーは次のようにオプトインできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UnstableApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CoreLibraryApi</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>@SubclassOptInRequired</code> アノテーションを使用してオプトインを要求する場合、その要件は<a href="/ja/kotlin/nested-classes">インナーまたはネストされたクラス</a>には伝播されません。</p></div><p>APIで <code>@SubclassOptInRequired</code> アノテーションを使用する実際の例については、<code>kotlinx.coroutines</code> ライブラリの <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-shared-flow/" target="_blank" rel="noreferrer"><code>SharedFlow</code></a> インターフェースを確認してください。</p><h3 id="ジェネリック型を持つ関数のオーバーロード解決の改善" tabindex="-1">ジェネリック型を持つ関数のオーバーロード解決の改善 <a class="header-anchor" href="#ジェネリック型を持つ関数のオーバーロード解決の改善" aria-label="Permalink to &quot;ジェネリック型を持つ関数のオーバーロード解決の改善&quot;">​</a></h3><p>以前は、関数に複数のオーバーロードがあり、そのうちのいくつかがジェネリック型の値パラメータを持ち、他が同じ位置に関数型を持つ場合、解決動作が一貫しないことがありました。</p><p>これにより、オーバーロードがメンバ関数であるか拡張関数であるかによって、異なる動作が生じました。 例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KeyValueStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lazyValue: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> V) {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KeyValueStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K, V</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">storeExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KeyValueStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K, V</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">storeExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lazyValue: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> V) {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kvs: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KeyValueStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Member functions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kvs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Resolves to 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kvs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Resolves to 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Extension functions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kvs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">storeExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Resolves to 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kvs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">storeExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Doesn&#39;t resolve</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この例では、<code>KeyValueStore</code> クラスには <code>store()</code> 関数の2つのオーバーロードがあり、一方はジェネリック型 <code>K</code> と <code>V</code> を持つ関数パラメータを持ち、もう一方はジェネリック型 <code>V</code> を返すラムダ関数を持っています。 同様に、拡張関数 <code>storeExtension()</code> にも2つのオーバーロードがあります。</p><p><code>store()</code> 関数がラムダ関数を使用する場合と使用しない場合で呼び出されたとき、コンパイラは正しいオーバーロードを正常に解決しました。 しかし、拡張関数 <code>storeExtension()</code> がラムダ関数と共に呼び出された場合、コンパイラは両方のオーバーロードが適用可能であると誤って判断したため、正しいオーバーロードを解決できませんでした。</p><p>この問題を解決するため、新しいヒューリスティックを導入しました。これにより、ジェネリック型を持つ関数パラメータが、別の引数からの情報に基づいてラムダ関数を受け入れられない場合、コンパイラは適用候補のオーバーロードを破棄できるようになります。 この変更により、メンバ関数と拡張関数の動作が一貫し、Kotlin 2.1.0 ではデフォルトで有効になっています。</p><h3 id="sealedクラスを持つwhen式の網羅性チェックの改善" tabindex="-1">sealedクラスを持つwhen式の網羅性チェックの改善 <a class="header-anchor" href="#sealedクラスを持つwhen式の網羅性チェックの改善" aria-label="Permalink to &quot;sealedクラスを持つwhen式の網羅性チェックの改善&quot;">​</a></h3><p>以前のバージョンの Kotlin では、<code>sealed class</code> 階層内のすべてのケースが網羅されている場合でも、コンパイラは sealed 型の上限を持つ型パラメータに対する <code>when</code> 式に <code>else</code> ブランチを要求していました。 この動作は Kotlin 2.1.0 で対処・改善され、網羅性チェックがより強力になり、冗長な <code>else</code> ブランチを削除できるようになり、<code>when</code> 式がよりクリーンで直感的になりました。</p><p>変更点を示す例を以下に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Result</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Error!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Success </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Requires no else branch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-k2コンパイラ" tabindex="-1">Kotlin K2コンパイラ <a class="header-anchor" href="#kotlin-k2コンパイラ" aria-label="Permalink to &quot;Kotlin K2コンパイラ&quot;">​</a></h2><p>Kotlin 2.1.0 では、K2 コンパイラは、<a href="#extra-compiler-checks">コンパイラチェック</a>や<a href="#global-warning-suppression">警告</a>を扱う際の<a href="#extra-compiler-checks">柔軟性を高め</a>、さらに <a href="#improved-k2-kapt-implementation">kapt プラグインのサポート</a>も改善されました。</p><h3 id="追加のコンパイラチェック" tabindex="-1">追加のコンパイラチェック <a class="header-anchor" href="#追加のコンパイラチェック" aria-label="Permalink to &quot;追加のコンパイラチェック&quot;">​</a></h3><p>Kotlin 2.1.0 では、K2 コンパイラで追加のチェックを有効にできるようになりました。 これらは、通常コンパイルには不可欠ではないが、以下のケースを検証したい場合に役立つ追加の宣言、式、および型チェックです。</p><table tabindex="0"><thead><tr><th style="text-align:left;">チェックタイプ</th><th style="text-align:left;">コメント</th></tr></thead><tbody><tr><td style="text-align:left;"><code>REDUNDANT_NULLABLE</code></td><td style="text-align:left;"><code>Boolean??</code> が <code>Boolean?</code> の代わりに使用されています</td></tr><tr><td style="text-align:left;"><code>PLATFORM_CLASS_MAPPED_TO_KOTLIN</code></td><td style="text-align:left;"><code>java.lang.String</code> が <code>kotlin.String</code> の代わりに使用されています</td></tr><tr><td style="text-align:left;"><code>ARRAY_EQUALITY_OPERATOR_CAN_BE_REPLACED_WITH_EQUALS</code></td><td style="text-align:left;"><code>arrayOf(&quot;&quot;) == arrayOf(&quot;&quot;)</code> が <code>arrayOf(&quot;&quot;).contentEquals(arrayOf(&quot;&quot;))</code> の代わりに使用されています</td></tr><tr><td style="text-align:left;"><code>REDUNDANT_CALL_OF_CONVERSION_METHOD</code></td><td style="text-align:left;"><code>42.toInt()</code> が <code>42</code> の代わりに使用されています</td></tr><tr><td style="text-align:left;"><code>USELESS_CALL_ON_NOT_NULL</code></td><td style="text-align:left;"><code>&quot;&quot;.orEmpty()</code> が <code>&quot;&quot;</code> の代わりに使用されています</td></tr><tr><td style="text-align:left;"><code>REDUNDANT_SINGLE_EXPRESSION_STRING_TEMPLATE</code></td><td style="text-align:left;"><code>&quot;$string&quot;</code> が <code>string</code> の代わりに使用されています</td></tr><tr><td style="text-align:left;"><code>UNUSED_ANONYMOUS_PARAMETER</code></td><td style="text-align:left;">ラムダ式でパラメータが渡されているが、使用されていません</td></tr><tr><td style="text-align:left;"><code>REDUNDANT_VISIBILITY_MODIFIER</code></td><td style="text-align:left;"><code>public class Klass</code> が <code>class Klass</code> の代わりに使用されています</td></tr><tr><td style="text-align:left;"><code>REDUNDANT_MODALITY_MODIFIER</code></td><td style="text-align:left;"><code>final class Klass</code> が <code>class Klass</code> の代わりに使用されています</td></tr><tr><td style="text-align:left;"><code>REDUNDANT_SETTER_PARAMETER_TYPE</code></td><td style="text-align:left;"><code>set(value: Int)</code> が <code>set(value)</code> の代わりに使用されています</td></tr><tr><td style="text-align:left;"><code>CAN_BE_VAL</code></td><td style="text-align:left;"><code>var local = 0</code> が定義されているが再割り当てされておらず、代わりに <code>val local = 42</code> が使用できます</td></tr><tr><td style="text-align:left;"><code>ASSIGNED_VALUE_IS_NEVER_READ</code></td><td style="text-align:left;"><code>val local = 42</code> が定義されているが、コード内でその後使用されていません</td></tr><tr><td style="text-align:left;"><code>UNUSED_VARIABLE</code></td><td style="text-align:left;"><code>val local = 0</code> が定義されているが、コード内で使用されていません</td></tr><tr><td style="text-align:left;"><code>REDUNDANT_RETURN_UNIT_TYPE</code></td><td style="text-align:left;"><code>fun foo(): Unit {}</code> が <code>fun foo() {}</code> の代わりに使用されています</td></tr><tr><td style="text-align:left;"><code>UNREACHABLE_CODE</code></td><td style="text-align:left;">コードステートメントが存在するが、実行されることはありません</td></tr></tbody></table><p>チェックが <code>true</code> の場合、問題を修正するための提案を含むコンパイラ警告が表示されます。</p><p>追加チェックはデフォルトで無効になっています。 これらを有効にするには、コマンドラインで <code>-Wextra</code> コンパイラオプションを使用するか、Gradle ビルドファイルの <code>compilerOptions {}</code> ブロックで <code>extraWarnings</code> を指定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extraWarnings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>コンパイラオプションの定義と使用方法の詳細については、<a href="/ja/kotlin/gradle-compiler-options">Kotlin Gradle プラグインのコンパイラオプション</a>を参照してください。</p><h3 id="グローバルな警告抑制" tabindex="-1">グローバルな警告抑制 <a class="header-anchor" href="#グローバルな警告抑制" aria-label="Permalink to &quot;グローバルな警告抑制&quot;">​</a></h3><p>2.1.0 では、Kotlin コンパイラは待望の機能である、警告をグローバルに抑制する機能を受け入れました。</p><p>コマンドラインで <code>-Xsuppress-warning=WARNING_NAME</code> 構文を使用するか、ビルドファイルの <code>compilerOptions {}</code> ブロックで <code>freeCompilerArgs</code> 属性を使用して、プロジェクト全体の特定の警告を抑制できるようになりました。</p><p>たとえば、プロジェクトで<a href="#extra-compiler-checks">追加のコンパイラチェック</a>が有効になっているが、そのうちの1つを抑制したい場合は、次のように使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extraWarnings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xsuppress-warning=CAN_BE_VAL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,83)),s("p",null,[i[2]||(i[2]=a("警告を抑制したいが、その名前がわからない場合は、要素を選択して電球アイコンをクリックします（または ")),n(p,null,{default:l(()=>i[0]||(i[0]=[a("Cmd + Enter")])),_:1}),i[3]||(i[3]=a(" / ")),n(p,null,{default:l(()=>i[1]||(i[1]=[a("Alt + Enter")])),_:1}),i[4]||(i[4]=a(" を使用します）。"))]),i[14]||(i[14]=s("p",null,[s("img",{src:o,alt:"警告名のインテンション",width:"500"})],-1)),i[15]||(i[15]=s("p",null,[a("新しいコンパイラオプションは現在"),s("a",{href:"/ja/kotlin/components-stability#stability-levels-explained"},"実験的"),a("です。 以下の詳細も注目に値します。")],-1)),i[16]||(i[16]=s("ul",null,[s("li",null,"エラーの抑制は許可されていません。"),s("li",null,"不明な警告名を渡すと、コンパイルエラーになります。"),s("li",null,"複数の警告を一度に指定できます。")],-1)),n(k,null,{default:l(()=>[n(h,{title:"コマンドライン"},{default:l(()=>i[5]||(i[5]=[s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlinc"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -Xsuppress-warning=NOTHING_TO_INLINE"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -Xsuppress-warning=NO_TAIL_CALLS_FOUND"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," main.kt")])])])],-1)])),_:1}),n(h,{title:"ビルドファイル"},{default:l(()=>i[6]||(i[6]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle.kts")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    compilerOptions"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        freeCompilerArgs."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"addAll"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            listOf"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'                "-Xsuppress-warning=NOTHING_TO_INLINE"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'                "-Xsuppress-warning=NO_TAIL_CALLS_FOUND"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        )")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[17]||(i[17]=e(`<h3 id="k2-kapt実装の改善" tabindex="-1">K2 kapt実装の改善 <a class="header-anchor" href="#k2-kapt実装の改善" aria-label="Permalink to &quot;K2 kapt実装の改善&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>K2 コンパイラ用 kapt プラグイン (K2 kapt) は<a href="/ja/kotlin/components-stability#stability-levels-explained">アルファ版</a>です。これはいつでも変更される可能性があります。 <a href="https://youtrack.jetbrains.com/issue/KT-71439/K2-kapt-feedback" target="_blank" rel="noreferrer">YouTrack</a>でフィードバックをいただけると幸いです。</p></div><p>現在、<a href="/ja/kotlin/kapt">kapt</a> プラグインを使用するプロジェクトは、デフォルトで K1 コンパイラを使用し、Kotlin 1.9 までのバージョンをサポートしています。</p><p>Kotlin 1.9.20 では、K2 コンパイラを搭載した kapt プラグイン (K2 kapt) の実験的実装を公開しました。 技術的およびパフォーマンスの問題を軽減するために、K2 kapt の内部実装を改善しました。</p><p>新しい K2 kapt 実装は新機能を導入していませんが、以前の K2 kapt 実装と比較してパフォーマンスが大幅に向上しました。 さらに、K2 kapt プラグインの動作は、K1 kapt の動作に非常に近くなりました。</p><p>新しい K2 kapt プラグイン実装を使用するには、以前の K2 kapt プラグインと同様に有効にします。 プロジェクトの <code>gradle.properties</code> ファイルに以下のオプションを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt.use.k2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>今後のリリースでは、K2 kapt 実装が K1 kapt の代わりにデフォルトで有効になるため、手動で有効にする必要がなくなります。</p><p>新しい実装が安定する前に、皆様からの<a href="https://youtrack.jetbrains.com/issue/KT-71439/K2-kapt-feedback" target="_blank" rel="noreferrer">フィードバック</a>を高く評価いたします。</p><h3 id="符号なし型と非プリミティブ型間のオーバーロード競合の解決" tabindex="-1">符号なし型と非プリミティブ型間のオーバーロード競合の解決 <a class="header-anchor" href="#符号なし型と非プリミティブ型間のオーバーロード競合の解決" aria-label="Permalink to &quot;符号なし型と非プリミティブ型間のオーバーロード競合の解決&quot;">​</a></h3><p>このリリースでは、以下の例のように、関数が符号なし型と非プリミティブ型に対してオーバーロードされた場合に、以前のバージョンで発生する可能性があったオーバーロード競合の解決に対処します。</p><h4 id="オーバーロードされた拡張関数" tabindex="-1">オーバーロードされた拡張関数 <a class="header-anchor" href="#オーバーロードされた拡張関数" aria-label="Permalink to &quot;オーバーロードされた拡張関数&quot;">​</a></h4><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doStuff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Any&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doStuff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UByte&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uByte: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UByte</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UByte.MIN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uByte.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doStuff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Overload resolution ambiguity before Kotlin 2.1.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以前のバージョンでは、<code>uByte.doStuff()</code> を呼び出すと、<code>Any</code> および <code>UByte</code> の両方の拡張が適用可能であったため、曖昧さが発生しました。</p><h4 id="オーバーロードされたトップレベル関数" tabindex="-1">オーバーロードされたトップレベル関数 <a class="header-anchor" href="#オーバーロードされたトップレベル関数" aria-label="Permalink to &quot;オーバーロードされたトップレベル関数&quot;">​</a></h4><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doStuff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Any&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doStuff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UByte&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uByte: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UByte</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UByte.MIN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    doStuff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uByte) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Overload resolution ambiguity before Kotlin 2.1.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>同様に、<code>doStuff(uByte)</code> の呼び出しも、コンパイラが <code>Any</code> バージョンと <code>UByte</code> バージョンのどちらを使用するかを決定できなかったため、曖昧でした。 2.1.0 では、コンパイラはこれらのケースを正しく処理し、より具体的な型（この場合は <code>UByte</code>）に優先順位を与えることで曖昧さを解決します。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>バージョン 2.1.0 から、コンパイラは Java 23 バイトコードを含むクラスを生成できるようになりました。</p><h3 id="jspecifyのnull許容性不一致診断の厳格化" tabindex="-1">JSpecifyのnull許容性不一致診断の厳格化 <a class="header-anchor" href="#jspecifyのnull許容性不一致診断の厳格化" aria-label="Permalink to &quot;JSpecifyのnull許容性不一致診断の厳格化&quot;">​</a></h3><p>Kotlin 2.1.0 は、<code>org.jspecify.annotations</code> からの null 許容性アノテーションの厳格な処理を強制し、Java 相互運用における型安全性を向上させます。</p><p>以下の null 許容性アノテーションが影響を受けます。</p><ul><li><code>org.jspecify.annotations.Nullable</code></li><li><code>org.jspecify.annotations.NonNull</code></li><li><code>org.jspecify.annotations.NullMarked</code></li><li><code>org.jspecify.nullness</code> のレガシーアノテーション (JSpecify 0.2 以前)</li></ul><p>Kotlin 2.1.0 から、null 許容性の不一致はデフォルトで警告からエラーに引き上げられます。 これにより、<code>@NonNull</code> や <code>@Nullable</code> などのアノテーションが型チェック中に強制され、実行時における予期せぬ null 許容性の問題を防止します。</p><p><code>@NullMarked</code> アノテーションは、そのスコープ内のすべてのメンバの null 許容性にも影響を与え、アノテーション付き Java コードを扱う際の動作をより予測可能にします。</p><p>新しいデフォルトの動作を示す例を以下に示します。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.jspecify.annotations.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SomeJavaClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NonNull</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Nullable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sjc: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SomeJavaClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Accesses a non-null result, which is allowed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sjc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().length</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Raises an error in the default strict mode because the result is nullable</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // To avoid the error, use ?.length instead</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sjc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これらのアノテーションの診断の厳格度を手動で制御できます。 そのためには、<code>-Xnullability-annotations</code> コンパイラオプションを使用してモードを選択します。</p><ul><li><code>ignore</code>: Null許容性の不一致を無視する。</li><li><code>warning</code>: Null許容性の不一致について警告を報告する。</li><li><code>strict</code>: Null許容性の不一致についてエラーを報告する（デフォルトモード）。</li></ul><p>詳細については、<a href="/ja/kotlin/java-interop#nullability-annotations">Null許容性アノテーション</a>を参照してください。</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>Kotlin 2.1.0 は、<a href="#basic-support-for-swift-export">Swift エクスポートの基本サポート</a>を導入し、<a href="#ability-to-publish-kotlin-libraries-from-any-host">Kotlin Multiplatform ライブラリの公開</a>を容易にします。 また、<a href="#new-gradle-dsl-for-compiler-options-in-multiplatform-projects-promoted-to-stable">コンパイラオプション設定用の新しい DSL</a> を安定させ、<a href="#preview-gradle-s-isolated-projects-in-kotlin-multiplatform">Isolated Projects 機能のプレビュー</a>を提供する Gradle 周りの改善にも焦点を当てています。</p><h3 id="マルチプラットフォームプロジェクトにおけるコンパイラオプション用gradle-dslの安定版への昇格" tabindex="-1">マルチプラットフォームプロジェクトにおけるコンパイラオプション用Gradle DSLの安定版への昇格 <a class="header-anchor" href="#マルチプラットフォームプロジェクトにおけるコンパイラオプション用gradle-dslの安定版への昇格" aria-label="Permalink to &quot;マルチプラットフォームプロジェクトにおけるコンパイラオプション用Gradle DSLの安定版への昇格&quot;">​</a></h3><p>Kotlin 2.0.0 では、<a href="/ja/kotlin/whatsnew20#new-gradle-dsl-for-compiler-options-in-multiplatform-projects">新しい実験的な Gradle DSL</a> を導入し、マルチプラットフォームプロジェクト全体でコンパイラオプションの設定を簡素化しました。 Kotlin 2.1.0 で、この DSL は安定版に昇格しました。</p><p>プロジェクト全体の構成には、3つのレイヤーがあります。最も高いのは拡張レベル、次にターゲットレベル、そして最も低いのはコンパイルユニット（通常はコンパイルタスク）です。</p><p><img src="`+g+`" alt="Kotlinコンパイラオプションのレベル" width="700"></p><p>異なるレベルと、それらの間でコンパイラオプションをどのように構成できるかについて詳しく知るには、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#compiler-options" target="_blank" rel="noreferrer">コンパイラオプション</a>を参照してください。</p><h3 id="kotlin-multiplatformにおけるgradleのisolated-projectsのプレビュー" tabindex="-1">Kotlin MultiplatformにおけるGradleのIsolated Projectsのプレビュー <a class="header-anchor" href="#kotlin-multiplatformにおけるgradleのisolated-projectsのプレビュー" aria-label="Permalink to &quot;Kotlin MultiplatformにおけるGradleのIsolated Projectsのプレビュー&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>であり、現在 Gradle ではプレアルファ版の状態です。 Gradle 8.10 でのみ、評価目的でのみ使用してください。この機能は、いつでも廃止または変更される可能性があります。 <a href="https://youtrack.jetbrains.com/issue/KT-57279/Support-Gradle-Project-Isolation-Feature-for-Kotlin-Multiplatform" target="_blank" rel="noreferrer">YouTrack</a>でフィードバックをいただけると幸いです。 オプトインが必要です（詳細は下記を参照）。</p></div><p>Kotlin 2.1.0 では、マルチプラットフォームプロジェクトで Gradle の <a href="https://docs.gradle.org/current/userguide/isolated_projects.html" target="_blank" rel="noreferrer">Isolated Projects</a> 機能をプレビューできます。</p><p>Gradle の Isolated Projects 機能は、個々の Gradle プロジェクトの設定を相互に「分離」することで、ビルドパフォーマンスを向上させます。 各プロジェクトのビルドロジックは、他のプロジェクトの変更可能な状態に直接アクセスすることを制限されており、それらを安全に並行して実行できます。 この機能をサポートするために、Kotlin Gradle プラグインのモデルにいくつかの変更を加えました。このプレビュー期間中の皆様の経験についてお聞かせいただきたいと考えています。</p><p>Kotlin Gradle プラグインの新しいモデルを有効にするには、2つの方法があります。</p><ul><li><p>オプション1: <strong>Isolated Projectsを有効にせずに互換性をテストする</strong> – Isolated Projects 機能を有効にせずに Kotlin Gradle プラグインの新しいモデルとの互換性をチェックするには、プロジェクトの <code>gradle.properties</code> ファイルに以下の Gradle プロパティを追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.kmp.isolated-projects.support=enable</span></span></code></pre></div></li><li><p>オプション2: <strong>Isolated Projectsを有効にしてテストする</strong> – Gradle で Isolated Projects 機能を有効にすると、Kotlin Gradle プラグインが自動的に新しいモデルを使用するように構成されます。 Isolated Projects 機能を有効にするには、<a href="https://docs.gradle.org/current/userguide/isolated_projects.html#how_do_i_use_it" target="_blank" rel="noreferrer">システムプロパティを設定します</a>。 この場合、Kotlin Gradle プラグイン用の Gradle プロパティをプロジェクトに追加する必要はありません。</p></li></ul><h3 id="swiftエクスポートの基本サポート" tabindex="-1">Swiftエクスポートの基本サポート <a class="header-anchor" href="#swiftエクスポートの基本サポート" aria-label="Permalink to &quot;Swiftエクスポートの基本サポート&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は現在、開発の初期段階にあります。これはいつでも廃止または変更される可能性があります。 オプトインが必要です（詳細は下記を参照）。評価目的でのみ使用してください。 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>でフィードバックをいただけると幸いです。</p></div><p>バージョン 2.1.0 は、Kotlin での Swift エクスポートサポートに向けた最初の一歩を踏み出し、Objective-C ヘッダーを使用せずに Kotlin ソースを Swift インターフェースに直接エクスポートできるようになります。 これにより、Apple ターゲット向けのマルチプラットフォーム開発が容易になるはずです。</p><p>現在の基本的なサポートには、以下の機能が含まれます。</p><ul><li>複数の Gradle モジュールを Kotlin から Swift に直接エクスポートする。</li><li><code>moduleName</code> プロパティを使用してカスタム Swift モジュール名を定義する。</li><li><code>flattenPackage</code> プロパティを使用してパッケージ構造の折りたたみルールを設定する。</li></ul><p>Swift エクスポートを設定するための出発点として、プロジェクトで以下のビルドファイルを使用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalSwiftExportDsl::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    swiftExport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Root module name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        moduleName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Shared&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Collapse rule</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Removes package prefix from generated Swift code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        flattenPackage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.example.sandbox&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Export external modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:subproject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Exported module name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            moduleName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Subproject&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Collapse exported dependency rule</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            flattenPackage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.subproject.library&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Swift エクスポートが既に設定されている<a href="https://github.com/Kotlin/swift-export-sample" target="_blank" rel="noreferrer">公開サンプル</a>をクローンすることもできます。</p><p>コンパイラは、必要なすべてのファイル（<code>swiftmodule</code> ファイル、静的 <code>a</code> ライブラリ、ヘッダーファイル、<code>modulemap</code> ファイルを含む）を自動的に生成し、アプリのビルドディレクトリにコピーします。これは Xcode からアクセスできます。</p><h4 id="swiftエクスポートを有効にする方法" tabindex="-1">Swiftエクスポートを有効にする方法 <a class="header-anchor" href="#swiftエクスポートを有効にする方法" aria-label="Permalink to &quot;Swiftエクスポートを有効にする方法&quot;">​</a></h4><p>この機能は現在、開発の初期段階にあることに留意してください。</p><p>Swift エクスポートは現在、iOS フレームワークを Xcode プロジェクトに接続するために<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-direct-integration.html" target="_blank" rel="noreferrer">直接統合</a>を使用するプロジェクトで動作します。 これは、Android Studio または <a href="https://kmp.jetbrains.com/" target="_blank" rel="noreferrer">Web ウィザード</a>で作成された Kotlin Multiplatform プロジェクトの標準的な構成です。</p><p>プロジェクトで Swift エクスポートを試すには：</p><ol><li><p>プロジェクトの <code>gradle.properties</code> ファイルに以下の Gradle オプションを追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.experimental.swift-export.enabled=true</span></span></code></pre></div></li><li><p>Xcode でプロジェクト設定を開きます。</p></li><li><p><strong>Build Phases</strong> タブで、<code>embedAndSignAppleFrameworkForXcode</code> タスクを含む <strong>Run Script</strong> フェーズを見つけます。</p></li><li><p>実行スクリプトフェーズで、スクリプトを <code>embedSwiftExportForXcode</code> タスクを使用するように調整します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Shared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:embedSwiftExportForXcode</span></span></code></pre></div><p><img src="`+c+`" alt="Swiftエクスポートスクリプトを追加" width="700"></p></li></ol><h4 id="swiftエクスポートに関するフィードバック" tabindex="-1">Swiftエクスポートに関するフィードバック <a class="header-anchor" href="#swiftエクスポートに関するフィードバック" aria-label="Permalink to &quot;Swiftエクスポートに関するフィードバック&quot;">​</a></h4><p>今後の Kotlin リリースでは、Swift エクスポートのサポートを拡大し、安定化する予定です。 この <a href="https://youtrack.jetbrains.com/issue/KT-64572" target="_blank" rel="noreferrer">YouTrack 課題</a>にフィードバックをお願いいたします。</p><h3 id="任意のホストからkotlinライブラリを公開する機能" tabindex="-1">任意のホストからKotlinライブラリを公開する機能 <a class="header-anchor" href="#任意のホストからkotlinライブラリを公開する機能" aria-label="Permalink to &quot;任意のホストからKotlinライブラリを公開する機能&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は現在<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 オプトインが必要です（詳細は下記を参照）。評価目的でのみ使用してください。 <a href="https://youtrack.jetbrains.com/issue/KT-71290" target="_blank" rel="noreferrer">YouTrack</a>でフィードバックをいただけると幸いです。</p></div><p>Kotlin コンパイラは、Kotlin ライブラリを公開するために <code>.klib</code> アーティファクトを生成します。 以前は、Mac マシンを必要とする Apple プラットフォームターゲットを除き、どのホストからでも必要なアーティファクトを取得できました。 これは、iOS、macOS、tvOS、watchOS ターゲットを対象とする Kotlin Multiplatform プロジェクトに特別な制約を課していました。</p><p>Kotlin 2.1.0 はこの制限を解除し、クロスコンパイルのサポートを追加します。 これにより、どのホストからでも <code>.klib</code> アーティファクトを生成できるようになり、Kotlin および Kotlin Multiplatform ライブラリの公開プロセスが大幅に簡素化されるはずです。</p><h4 id="任意のホストからライブラリを公開する方法" tabindex="-1">任意のホストからライブラリを公開する方法 <a class="header-anchor" href="#任意のホストからライブラリを公開する方法" aria-label="Permalink to &quot;任意のホストからライブラリを公開する方法&quot;">​</a></h4><p>プロジェクトでクロスコンパイルを試すには、<code>gradle.properties</code> ファイルに以下のバイナリオプションを追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.native.enableKlibsCrossCompilation=true</span></span></code></pre></div><p>この機能は現在実験的であり、いくつかの制限があります。Mac マシンは、以下の場合は引き続き必要です。</p><ul><li>ライブラリに <a href="/ja/kotlin/native-c-interop">cinterop の依存関係</a>がある場合。</li><li>プロジェクトで <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 統合</a>が設定されている場合。</li><li>Apple ターゲット向けの<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html" target="_blank" rel="noreferrer">最終バイナリ</a>をビルドまたはテストする必要がある場合。</li></ul><h4 id="任意のホストからライブラリを公開することに関するフィードバック" tabindex="-1">任意のホストからライブラリを公開することに関するフィードバック <a class="header-anchor" href="#任意のホストからライブラリを公開することに関するフィードバック" aria-label="Permalink to &quot;任意のホストからライブラリを公開することに関するフィードバック&quot;">​</a></h4><p>この機能を安定させ、将来の Kotlin リリースでライブラリの公開をさらに改善する予定です。 課題トラッカー<a href="https://youtrack.jetbrains.com/issue/KT-71290" target="_blank" rel="noreferrer">YouTrack</a>にフィードバックをお願いいたします。</p><p>詳細については、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-publish-lib-setup.html" target="_blank" rel="noreferrer">マルチプラットフォームライブラリの公開</a>を参照してください。</p><h3 id="非圧縮klibのサポート" tabindex="-1">非圧縮klibのサポート <a class="header-anchor" href="#非圧縮klibのサポート" aria-label="Permalink to &quot;非圧縮klibのサポート&quot;">​</a></h3><p>Kotlin 2.1.0 では、非圧縮 <code>.klib</code> ファイルアーティファクトの生成が可能になりました。 これにより、klib を最初に解凍することなく、直接依存関係を設定するオプションが得られます。</p><p>この変更は、Kotlin/Wasm、Kotlin/JS、および Kotlin/Native プロジェクトにおけるコンパイル時間とリンク時間を短縮し、パフォーマンスを向上させる可能性もあります。</p><p>たとえば、当社のベンチマークでは、1つのリンクタスクと10のコンパイルタスクを持つプロジェクト（9つの簡素化されたプロジェクトに依存する単一のネイティブ実行可能バイナリをビルドするプロジェクト）で、総ビルド時間が約3%向上することが示されています。 ただし、ビルド時間への実際の影響は、サブプロジェクトの数とそのそれぞれのサイズの両方に依存します。</p><h4 id="プロジェクトの設定方法" tabindex="-1">プロジェクトの設定方法 <a class="header-anchor" href="#プロジェクトの設定方法" aria-label="Permalink to &quot;プロジェクトの設定方法&quot;">​</a></h4><p>デフォルトでは、Kotlin のコンパイルおよびリンクタスクは、新しい非圧縮アーティファクトを使用するように構成されています。</p><p>klib の解決のためにカスタムビルドロジックを設定しており、新しい解凍済みアーティファクトを使用したい場合は、Gradle ビルドファイルで klib パッケージ解決の優先するバリアントを明示的に指定する必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.plugin.attributes.KlibPackaging</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resolvableConfiguration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configurations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolvable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resolvable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // For the new non-packed configuration:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    attributes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KlibPackaging.ATTRIBUTE, project.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KlibPackaging.NON_PACKED))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // For the previous packed configuration:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    attributes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KlibPackaging.ATTRIBUTE, project.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KlibPackaging.PACKED))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>非圧縮 <code>.klib</code> ファイルは、以前圧縮されていたものと同じパスのプロジェクトのビルドディレクトリに生成されます。 一方、圧縮された klib は現在 <code>build/libs</code> ディレクトリにあります。</p><p>属性が指定されていない場合、圧縮されたバリアントが使用されます。 利用可能な属性とバリアントのリストは、以下のコンソールコマンドで確認できます。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> outgoingVariants</span></span></code></pre></div><p>この機能に関するフィードバックを<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>でいただけると幸いです。</p><h3 id="古いandroidターゲットのさらなる非推奨化" tabindex="-1">古い<code>android</code>ターゲットのさらなる非推奨化 <a class="header-anchor" href="#古いandroidターゲットのさらなる非推奨化" aria-label="Permalink to &quot;古い\`android\`ターゲットのさらなる非推奨化&quot;">​</a></h3><p>Kotlin 2.1.0 では、古い <code>android</code> ターゲット名の非推奨警告がエラーに引き上げられました。</p><p>現在、Android を対象とする Kotlin Multiplatform プロジェクトでは、<code>androidTarget</code> オプションを使用することをお勧めします。 これは、Google からの今後の Android/KMP プラグインのために <code>android</code> 名を解放するために必要な一時的な解決策です。</p><p>新しいプラグインが利用可能になったら、さらなる移行手順を提供します。 Google からの新しい DSL は、Kotlin Multiplatform の Android ターゲットサポートの推奨オプションとなります。</p><p>詳細については、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html#rename-of-android-target-to-androidtarget" target="_blank" rel="noreferrer">Kotlin Multiplatform 互換性ガイド</a>を参照してください。</p><h3 id="同タイプの複数ターゲット宣言のサポート終了" tabindex="-1">同タイプの複数ターゲット宣言のサポート終了 <a class="header-anchor" href="#同タイプの複数ターゲット宣言のサポート終了" aria-label="Permalink to &quot;同タイプの複数ターゲット宣言のサポート終了&quot;">​</a></h3><p>Kotlin 2.1.0 以前は、マルチプラットフォームプロジェクトで同じタイプの複数のターゲットを宣言できました。 しかし、これによりターゲット間の区別が難しくなり、共有ソースセットを効果的にサポートすることが困難になりました。 ほとんどの場合、別々の Gradle プロジェクトを使用するなど、よりシンプルな設定の方がうまく機能します。 詳細なガイダンスと移行方法の例については、Kotlin Multiplatform 互換性ガイドの<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html#declaring-several-similar-targets" target="_blank" rel="noreferrer">複数の類似ターゲットの宣言</a>を参照してください。</p><p>Kotlin 1.9.20 では、マルチプラットフォームプロジェクトで同じタイプの複数のターゲットを宣言した場合に非推奨警告がトリガーされました。 Kotlin 2.1.0 では、この非推奨警告は Kotlin/JS ターゲットを除くすべてのターゲットでエラーとなりました。 Kotlin/JS ターゲットが免除される理由の詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-47038/KJS-MPP-Split-JS-target-into-JsBrowser-and-JsNode" target="_blank" rel="noreferrer">YouTrack</a>のこの課題を参照してください。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 2.1.0 には、<a href="#iosarm64-promoted-to-tier-1"><code>iosArm64</code> ターゲットサポートのアップグレード</a>、<a href="#changes-to-cinterop-caching">cinterop キャッシュプロセスの改善</a>、およびその他の更新が含まれています。</p><h3 id="iosarm64がtier-1に昇格" tabindex="-1">iosArm64がTier 1に昇格 <a class="header-anchor" href="#iosarm64がtier-1に昇格" aria-label="Permalink to &quot;iosArm64がTier 1に昇格&quot;">​</a></h3><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin Multiplatform</a> 開発にとって重要な <code>iosArm64</code> ターゲットが Tier 1 に昇格しました。 これは Kotlin/Native コンパイラで最高レベルのサポートです。</p><p>これは、ターゲットがコンパイルおよび実行可能であることを保証するために、CI パイプラインで定期的にテストされることを意味します。 また、ターゲットのコンパイラリリース間でソースおよびバイナリの互換性も提供します。</p><p>ターゲットのティアに関する詳細については、<a href="/ja/kotlin/native-target-support">Kotlin/Native ターゲットサポート</a>を参照してください。</p><h3 id="llvmの11-1-0から16-0-0へのアップデート" tabindex="-1">LLVMの11.1.0から16.0.0へのアップデート <a class="header-anchor" href="#llvmの11-1-0から16-0-0へのアップデート" aria-label="Permalink to &quot;LLVMの11.1.0から16.0.0へのアップデート&quot;">​</a></h3><p>Kotlin 2.1.0 では、LLVM をバージョン 11.1.0 から 16.0.0 に更新しました。 新バージョンには、バグ修正とセキュリティ更新が含まれています。 場合によっては、コンパイラの最適化とコンパイル速度の向上も提供されます。</p><p>プロジェクトに Linux ターゲットがある場合は、Kotlin/Native コンパイラがすべての Linux ターゲットでデフォルトで <code>lld</code> リンカを使用することに注意してください。</p><p>この更新によってコードに影響はないはずですが、何か問題が発生した場合は、<a href="http://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>にご報告ください。</p><h3 id="cinteropにおけるキャッシュの変更" tabindex="-1">cinteropにおけるキャッシュの変更 <a class="header-anchor" href="#cinteropにおけるキャッシュの変更" aria-label="Permalink to &quot;cinteropにおけるキャッシュの変更&quot;">​</a></h3><p>Kotlin 2.1.0 では、cinterop キャッシュプロセスに変更を加えます。 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/CacheableTask.html" target="_blank" rel="noreferrer"><code>CacheableTask</code></a> アノテーション型はなくなりました。 新しい推奨アプローチは、タスクの結果をキャッシュするために <a href="https://docs.gradle.org/current/kotlin-dsl/gradle/org.gradle.api.tasks/-task-outputs/cache-if.html" target="_blank" rel="noreferrer"><code>cacheIf</code></a> 出力タイプを使用することです。</p><p>これにより、<a href="/ja/kotlin/native-definition-file"><code>definition file</code></a>で指定されたヘッダーファイルへの変更を <code>UP-TO-DATE</code> チェックが検出できなかった問題を解決し、ビルドシステムがコードを再コンパイルすることを防ぎます。</p><h3 id="mimallocメモリ割り当て機能の非推奨化" tabindex="-1">mimallocメモリ割り当て機能の非推奨化 <a class="header-anchor" href="#mimallocメモリ割り当て機能の非推奨化" aria-label="Permalink to &quot;mimallocメモリ割り当て機能の非推奨化&quot;">​</a></h3><p>Kotlin 1.9.0 で新しいメモリ割り当て機能が導入され、Kotlin 1.9.20 でデフォルトで有効になりました。 新しいアロケータは、ガベージコレクションをより効率的にし、Kotlin/Native メモリマネージャのランタイムパフォーマンスを向上させるように設計されています。</p><p>新しいメモリ割り当て機能は、以前のデフォルトアロケータである <a href="https://github.com/microsoft/mimalloc" target="_blank" rel="noreferrer">mimalloc</a> に取って代わりました。 これで、Kotlin/Native コンパイラにおける mimalloc を非推奨にする時期が来ました。</p><p>ビルドスクリプトから <code>-Xallocator=mimalloc</code> コンパイラオプションを削除できるようになりました。 何か問題が発生した場合は、<a href="http://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>にご報告ください。</p><p>Kotlin のメモリ割り当て機能とガベージコレクションの詳細については、<a href="/ja/kotlin/native-memory-manager">Kotlin/Native メモリ管理</a>を参照してください。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>Kotlin/Wasm は、<a href="#support-for-incremental-compilation">インクリメンタルコンパイルのサポート</a>を含む複数の更新を受けました。</p><h3 id="インクリメンタルコンパイルのサポート" tabindex="-1">インクリメンタルコンパイルのサポート <a class="header-anchor" href="#インクリメンタルコンパイルのサポート" aria-label="Permalink to &quot;インクリメンタルコンパイルのサポート&quot;">​</a></h3><p>以前は、Kotlin コードに変更を加えるたびに、Kotlin/Wasm ツールチェーンはコードベース全体を再コンパイルする必要がありました。</p><p>2.1.0 から、Wasm ターゲットでインクリメンタルコンパイルがサポートされるようになりました。 開発タスクでは、コンパイラは前回のコンパイルからの変更に関連するファイルのみを再コンパイルするようになり、コンパイル時間を大幅に短縮します。</p><p>この変更により、現在のコンパイル速度は2倍になり、今後のリリースでさらに改善される予定です。</p><p>現在の設定では、Wasm ターゲットのインクリメンタルコンパイルはデフォルトで無効になっています。 インクリメンタルコンパイルを有効にするには、プロジェクトの <code>local.properties</code> または <code>gradle.properties</code> ファイルに以下の行を追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.incremental.wasm=true</span></span></code></pre></div><p>Kotlin/Wasm のインクリメンタルコンパイルを試して、<a href="https://youtrack.jetbrains.com/issue/KT-72158/Kotlin-Wasm-incremental-compilation-feedback" target="_blank" rel="noreferrer">フィードバック</a>を共有してください。 皆様の洞察は、この機能をより早く安定させ、デフォルトで有効にするのに役立ちます。</p><h3 id="ブラウザapiがkotlinx-browserスタンドアロンライブラリに移動" tabindex="-1">ブラウザAPIがkotlinx-browserスタンドアロンライブラリに移動 <a class="header-anchor" href="#ブラウザapiがkotlinx-browserスタンドアロンライブラリに移動" aria-label="Permalink to &quot;ブラウザAPIがkotlinx-browserスタンドアロンライブラリに移動&quot;">​</a></h3><p>以前は、Web API および関連ターゲットユーティリティの宣言は Kotlin/Wasm 標準ライブラリの一部でした。</p><p>このリリースでは、<code>org.w3c.*</code> の宣言が Kotlin/Wasm 標準ライブラリから新しい <a href="https://github.com/kotlin/kotlinx-browser" target="_blank" rel="noreferrer">kotlinx-browser ライブラリ</a>に移動されました。 このライブラリには、<code>org.khronos.webgl</code>、<code>kotlin.dom</code>、<code>kotlinx.browser</code> などの他の Web 関連パッケージも含まれています。</p><p>この分離によりモジュール性が提供され、Kotlin のリリースサイクルとは独立して Web 関連 API の更新が可能になります。 さらに、Kotlin/Wasm 標準ライブラリには、任意の JavaScript 環境で利用可能な宣言のみが含まれるようになりました。</p><p>移動されたパッケージからの宣言を使用するには、プロジェクトのビルド構成ファイルに <code>kotlinx-browser</code> の依存関係を追加する必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmJsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlinx:kotlinx-browser:0.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-wasmのデバッグ体験の改善" tabindex="-1">Kotlin/Wasmのデバッグ体験の改善 <a class="header-anchor" href="#kotlin-wasmのデバッグ体験の改善" aria-label="Permalink to &quot;Kotlin/Wasmのデバッグ体験の改善&quot;">​</a></h3><p>以前、Web ブラウザで Kotlin/Wasm コードをデバッグする際、デバッグインターフェースで変数値を低レベルで表現されることがあり、アプリケーションの現在の状態を追跡することが困難でした。</p><p><img src="`+d+'" alt="Kotlin/Wasm 旧デバッガー" width="700"></p><p>この体験を改善するため、変数ビューにカスタムフォーマッタが追加されました。 この実装は、Firefox や Chromium ベースのブラウザなど、主要なブラウザでサポートされている<a href="https://firefox-source-docs.mozilla.org/devtools-user/custom_formatters/index.html" target="_blank" rel="noreferrer">カスタムフォーマッタ API</a> を使用しています。</p><p>この変更により、変数値をよりユーザーフレンドリーで理解しやすい方法で表示および特定できるようになりました。</p><p><img src="'+E+`" alt="Kotlin/Wasm 改善されたデバッガー" width="700"></p><p>新しいデバッグ体験を試すには：</p><ol><li><p><code>wasmJs {}</code> コンパイラオプションに以下のコンパイラオプションを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xwasm-debugger-custom-formatters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>ブラウザでカスタムフォーマッタを有効にします。</p><ul><li><p>Chrome DevTools では、<strong>Settings | Preferences | Console</strong> から利用できます。</p><p><img src="`+y+'" alt="Chromeでカスタムフォーマッタを有効にする" width="700"></p></li><li><p>Firefox DevTools では、<strong>Settings | Advanced settings</strong> から利用できます。</p><p><img src="'+F+`" alt="Firefoxでカスタムフォーマッタを有効にする" width="700"></p></li></ul></li></ol><h3 id="kotlin-wasmバイナリサイズの縮小" tabindex="-1">Kotlin/Wasmバイナリサイズの縮小 <a class="header-anchor" href="#kotlin-wasmバイナリサイズの縮小" aria-label="Permalink to &quot;Kotlin/Wasmバイナリサイズの縮小&quot;">​</a></h3><p>プロダクションビルドによって生成される Wasm バイナリのサイズが最大 30% 削減され、パフォーマンスが向上する可能性があります。 これは、<code>--closed-world</code>、<code>--type-ssa</code>、および <code>--type-merging</code> Binaryen オプションが、すべての Kotlin/Wasm プロジェクトで安全に使用できると見なされ、デフォルトで有効になったためです。</p><h3 id="kotlin-wasmにおけるjavascript配列の相互運用性改善" tabindex="-1">Kotlin/WasmにおけるJavaScript配列の相互運用性改善 <a class="header-anchor" href="#kotlin-wasmにおけるjavascript配列の相互運用性改善" aria-label="Permalink to &quot;Kotlin/WasmにおけるJavaScript配列の相互運用性改善&quot;">​</a></h3><p>Kotlin/Wasm の標準ライブラリは JavaScript 配列用の <code>JsArray&lt;T&gt;</code> 型を提供していますが、<code>JsArray&lt;T&gt;</code> を Kotlin のネイティブな <code>Array</code> または <code>List</code> 型に変換する直接的なメソッドはありませんでした。</p><p>このギャップは、配列変換のためのカスタム関数を作成する必要があり、Kotlin コードと JavaScript コード間の相互運用性を複雑にしていました。</p><p>このリリースでは、<code>JsArray&lt;T&gt;</code> を <code>Array&lt;T&gt;</code> に自動的に変換し、その逆も行うアダプター関数が導入され、配列操作が簡素化されます。</p><p>ジェネリック型間の変換の例を示します: Kotlin の <code>List&lt;T&gt;</code> と <code>Array&lt;T&gt;</code> から JavaScript の <code>JsArray&lt;T&gt;</code> へ。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wasm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toJsString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Uses .toJsArray() to convert List or Array to JsArray</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsArray: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toJsArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Uses .toArray() and .toList() to convert it back to Kotlin types </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinArray: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinList: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>同様のメソッドは、型付き配列を対応する Kotlin の型に変換するためにも利用できます（例: <code>IntArray</code> と <code>Int32Array</code>）。詳細情報と実装については、<a href="https://github.com/Kotlin/kotlinx-browser/blob/dfbdceed314567983c98f1d66e8c2e10d99c5a55/src/wasmJsMain/kotlin/arrayCopy.kt" target="_blank" rel="noreferrer"><code>kotlinx-browser</code> リポジトリ</a>を参照してください。</p><p>型付き配列間の変換の例を示します: Kotlin の <code>IntArray</code> から JavaScript の <code>Int32Array</code> へ。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.khronos.webgl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> intArray: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> intArrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Uses .toInt32Array() to convert Kotlin IntArray to JavaScript Int32Array</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsInt32Array: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int32Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> intArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt32Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Uses toIntArray() to convert JavaScript Int32Array back to Kotlin IntArray</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinIntArray: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsInt32Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toIntArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="kotlin-wasmにおけるjavascript例外詳細へのアクセスサポート" tabindex="-1">Kotlin/WasmにおけるJavaScript例外詳細へのアクセスサポート <a class="header-anchor" href="#kotlin-wasmにおけるjavascript例外詳細へのアクセスサポート" aria-label="Permalink to &quot;Kotlin/WasmにおけるJavaScript例外詳細へのアクセスサポート&quot;">​</a></h3><p>以前、Kotlin/Wasm で JavaScript 例外が発生した場合、<code>JsException</code> 型は、元の JavaScript エラーの詳細を含まない汎用的なメッセージしか提供しませんでした。</p><p>Kotlin 2.1.0 から、特定のコンパイラオプションを有効にすることで、<code>JsException</code> に元のエラーメッセージとスタックトレースを含めるように設定できるようになりました。 これにより、JavaScript に起因する問題を診断するためのより多くのコンテキストが提供されます。</p><p>この動作は <code>WebAssembly.JSTag</code> API に依存しており、特定のブラウザでのみ利用可能です。</p><ul><li><strong>Chrome</strong>: バージョン 115 以降でサポート</li><li><strong>Firefox</strong>: バージョン 129 以降でサポート</li><li><strong>Safari</strong>: まだサポートされていません</li></ul><p>デフォルトで無効になっているこの機能を有効にするには、<code>build.gradle.kts</code> ファイルに以下のコンパイラオプションを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xwasm-attach-js-exception&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>新しい動作を示す例を以下に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsAny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(json: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;an invalid JSON&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thrown value is: \${e.thrownValue}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // SyntaxError: Unexpected token &#39;a&#39;, &quot;an invalid JSON&quot; is not valid JSON</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Message: \${e.message}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Message: Unexpected token &#39;a&#39;, &quot;an invalid JSON&quot; is not valid JSON</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Stacktrace:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Stacktrace:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Prints the full JavaScript stack trace </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>-Xwasm-attach-js-exception</code> オプションが有効な場合、<code>JsException</code> は JavaScript エラーからの特定の詳細を提供します。 このオプションがない場合、<code>JsException</code> は、JavaScript コードの実行中に例外がスローされたことを示す一般的なメッセージのみを含みます。</p><h3 id="デフォルトエクスポートの非推奨化" tabindex="-1">デフォルトエクスポートの非推奨化 <a class="header-anchor" href="#デフォルトエクスポートの非推奨化" aria-label="Permalink to &quot;デフォルトエクスポートの非推奨化&quot;">​</a></h3><p>名前付きエクスポートへの移行の一環として、以前は JavaScript で Kotlin/Wasm エクスポートにデフォルトインポートが使用された場合に、エラーがコンソールに表示されていました。</p><p>2.1.0 では、名前付きエクスポートを完全にサポートするために、デフォルトインポートが完全に削除されました。</p><p>Kotlin/Wasm ターゲット向けに JavaScript でコーディングする場合、デフォルトインポートの代わりに、対応する名前付きインポートを使用する必要があります。</p><p>この変更は、名前付きエクスポートへの移行に向けた非推奨化サイクルの最終段階を示します。</p><p><strong>バージョン 2.0.0:</strong> コンソールに警告メッセージが表示され、デフォルトエクスポートによるエンティティのエクスポートが非推奨であることを説明しました。</p><p><strong>バージョン 2.0.20:</strong> エラーが発生し、対応する名前付きインポートの使用が要求されました。</p><p><strong>バージョン 2.1.0:</strong> デフォルトインポートの使用は完全に削除されました。</p><h3 id="サブプロジェクト固有のnode-js設定" tabindex="-1">サブプロジェクト固有のNode.js設定 <a class="header-anchor" href="#サブプロジェクト固有のnode-js設定" aria-label="Permalink to &quot;サブプロジェクト固有のNode.js設定&quot;">​</a></h3><p>プロジェクトの Node.js 設定は、<code>rootProject</code> 用の <code>NodeJsRootPlugin</code> クラスのプロパティを定義することで構成できます。 2.1.0 では、新しいクラス <code>NodeJsPlugin</code> を使用して、これらの設定を各サブプロジェクトに対して構成できます。 サブプロジェクトに対して特定の Node.js バージョンを設定する方法を示す例を以下に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">project.plugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NodeJsPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NodeJsEnvSpec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;22.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>プロジェクト全体で新しいクラスを使用するには、<code>allprojects {}</code> ブロックに同じコードを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allprojects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    project.plugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NodeJsPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NodeJsEnvSpec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;your Node.js version&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Gradle コンベンションプラグインを使用して、特定のサブプロジェクトセットに設定を適用することもできます。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><h3 id="プロパティにおける非識別子文字のサポート" tabindex="-1">プロパティにおける非識別子文字のサポート <a class="header-anchor" href="#プロパティにおける非識別子文字のサポート" aria-label="Permalink to &quot;プロパティにおける非識別子文字のサポート&quot;">​</a></h3><p>Kotlin/JS では以前、バッククォートで囲まれたスペースを含む<a href="/ja/kotlin/coding-conventions#names-for-test-methods">テストメソッド名</a>を使用することができませんでした。</p><p>同様に、ハイフンやスペースなど、Kotlin 識別子で許可されていない文字を含む JavaScript オブジェクトプロパティにアクセスすることはできませんでした。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accept: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Invalid Kotlin identifier due to hyphen</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \`content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">length\`: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headers: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value provided by a JS library&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accept </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headers.accept</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Causes error due to the hyphen in property name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headers.\`content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">length\`</span></span></code></pre></div><p>この動作は、非識別子文字を使用してそのようなプロパティにアクセスできる JavaScript および TypeScript とは異なりました。</p><p>Kotlin 2.1.0 から、この機能はデフォルトで有効になっています。 Kotlin/JS では、バッククォート (\`\`) と <code>@JsName</code> アノテーションを使用して、非識別子文字を含む JavaScript プロパティと対話したり、テストメソッドに名前を付けたりできるようになりました。</p><p>さらに、<code>@JsName</code> および <code>@JsQualifier</code> アノテーションを使用して、Kotlin のプロパティ名を JavaScript の同等なものにマッピングできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \`property example\`: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bar&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsQualifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fooNamespace&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \`property example\`: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \`property example\`: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bar&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // In JavaScript, this is compiled into Bar.property_example_HASH</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Bar.\`property example\`)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // In JavaScript, this is compiled into fooNamespace[&quot;property example&quot;]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Foo.\`property example\`)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // In JavaScript, this is compiled into Baz[&quot;property example&quot;]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Baz.\`property example\`)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="es2015アロー関数の生成サポート" tabindex="-1">ES2015アロー関数の生成サポート <a class="header-anchor" href="#es2015アロー関数の生成サポート" aria-label="Permalink to &quot;ES2015アロー関数の生成サポート&quot;">​</a></h3><p>Kotlin 2.1.0 では、Kotlin/JS は、匿名関数の代わりに <code>(a, b) =&gt; expression</code> のような ES2015 アロー関数を生成するサポートを導入しました。</p><p>アロー関数を使用すると、特に実験的な <code>-Xir-generate-inline-anonymous-functions</code> モードを使用している場合に、プロジェクトのバンドルサイズを削減できます。 これにより、生成されるコードも最新の JS とより一致するようになります。</p><p>この機能は、ES2015 をターゲットとする場合にデフォルトで有効になります。 または、<code>-Xes-arrow-functions</code> コマンドライン引数を使用することで有効にできます。</p><p><a href="https://262.ecma-international.org/6.0/" target="_blank" rel="noreferrer">公式ドキュメントで ES2015 (ECMAScript 2015, ES6)</a>について詳しく学びましょう。</p><h2 id="gradleの改善" tabindex="-1">Gradleの改善 <a class="header-anchor" href="#gradleの改善" aria-label="Permalink to &quot;Gradleの改善&quot;">​</a></h2><p>Kotlin 2.1.0 は Gradle 7.6.3 から 8.6 までと完全に互換性があります。 Gradle バージョン 8.7 から 8.10 もサポートされていますが、1つの例外があります。 Kotlin Multiplatform Gradle プラグインを使用している場合、JVM ターゲットで <code>withJava()</code> 関数を呼び出すマルチプラットフォームプロジェクトで非推奨警告が表示される可能性があります。 この問題はできるだけ早く修正する予定です。</p><p>詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-66542" target="_blank" rel="noreferrer">YouTrack</a>の関連課題を参照してください。</p><p>最新の Gradle リリースまでの Gradle バージョンも使用できますが、その場合は非推奨警告が表示されたり、新しい Gradle 機能の一部が動作しない可能性があることに留意してください。</p><h3 id="最小サポートagpバージョンが7-3-1に引き上げ" tabindex="-1">最小サポートAGPバージョンが7.3.1に引き上げ <a class="header-anchor" href="#最小サポートagpバージョンが7-3-1に引き上げ" aria-label="Permalink to &quot;最小サポートAGPバージョンが7.3.1に引き上げ&quot;">​</a></h3><p>Kotlin 2.1.0 から、サポートされる Android Gradle プラグインの最小バージョンは 7.3.1 となります。</p><h3 id="最小サポートgradleバージョンが7-6-3に引き上げ" tabindex="-1">最小サポートGradleバージョンが7.6.3に引き上げ <a class="header-anchor" href="#最小サポートgradleバージョンが7-6-3に引き上げ" aria-label="Permalink to &quot;最小サポートGradleバージョンが7.6.3に引き上げ&quot;">​</a></h3><p>Kotlin 2.1.0 から、サポートされる Gradle の最小バージョンは 7.6.3 となります。</p><h3 id="kotlin-gradleプラグイン拡張の新api" tabindex="-1">Kotlin Gradleプラグイン拡張の新API <a class="header-anchor" href="#kotlin-gradleプラグイン拡張の新api" aria-label="Permalink to &quot;Kotlin Gradleプラグイン拡張の新API&quot;">​</a></h3><p>Kotlin 2.1.0 では、Kotlin Gradle プラグインを設定するための独自のプラグインをより簡単に作成できる新しい API が導入されました。 この変更により、<code>KotlinTopLevelExtension</code> および <code>KotlinTopLevelExtensionConfig</code> インターフェースが非推奨となり、プラグイン作成者向けに以下のインターフェースが導入されます。</p>`,192)),s("table",A,[i[12]||(i[12]=s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"left"}},"名前"),s("th",{style:{"text-align":"left"}},"説明")])],-1)),s("tbody",null,[s("tr",null,[i[9]||(i[9]=s("td",{style:{"text-align":"left"}},[s("code",null,"KotlinBaseExtension")],-1)),s("td",f,[i[8]||(i[8]=a("プロジェクト全体の共通 Kotlin JVM、Android、および Multiplatform プラグインオプションを設定するためのプラグイン DSL 拡張型。")),n(r,null,{default:l(()=>i[7]||(i[7]=[s("li",null,[s("code",null,"org.jetbrains.kotlin.jvm")],-1),s("li",null,[s("code",null,"org.jetbrains.kotlin.android")],-1),s("li",null,[s("code",null,"org.jetbrains.kotlin.multiplatform")],-1)])),_:1})])]),i[10]||(i[10]=s("tr",null,[s("td",{style:{"text-align":"left"}},[s("code",null,"KotlinJvmExtension")]),s("td",{style:{"text-align":"left"}},[a("プロジェクト全体の Kotlin "),s("strong",null,"JVM"),a(" プラグインオプションを設定するためのプラグイン DSL 拡張型。")])],-1)),i[11]||(i[11]=s("tr",null,[s("td",{style:{"text-align":"left"}},[s("code",null,"KotlinAndroidExtension")]),s("td",{style:{"text-align":"left"}},[a("プロジェクト全体の Kotlin "),s("strong",null,"Android"),a(" プラグインオプションを設定するためのプラグイン DSL 拡張型。")])],-1))])]),i[18]||(i[18]=e(`<p>たとえば、JVM と Android の両方のプロジェクトでコンパイラオプションを設定したい場合は、<code>KotlinBaseExtension</code> を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinBaseExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HasConfigurableKotlinCompilerOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compilerOptions) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KotlinJvmCompilerOptions) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                jvmTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JvmTarget.JVM_17)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これにより、JVM と Android の両方のプロジェクトで JVM ターゲットが 17 に設定されます。</p><p>JVM プロジェクトに特化してコンパイラオプションを設定するには、<code>KotlinJvmExtension</code> を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinJvmExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JvmTarget.JVM_17)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavenPublication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        groupId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        artifactId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;example-project&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0-SNAPSHOT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この例も同様に、JVM プロジェクトの JVM ターゲットを 17 に設定します。 また、プロジェクトの Maven 公開を設定し、その出力が Maven リポジトリに公開されるようにします。</p><p><code>KotlinAndroidExtension</code> も全く同様に使用できます。</p><h3 id="kotlin-gradleプラグインapiからコンパイラシンボルを隠蔽" tabindex="-1">Kotlin GradleプラグインAPIからコンパイラシンボルを隠蔽 <a class="header-anchor" href="#kotlin-gradleプラグインapiからコンパイラシンボルを隠蔽" aria-label="Permalink to &quot;Kotlin GradleプラグインAPIからコンパイラシンボルを隠蔽&quot;">​</a></h3><p>以前、KGP (Kotlin Gradle Plugin) は <code>org.jetbrains.kotlin:kotlin-compiler-embeddable</code> をランタイム依存関係に含んでおり、これにより内部コンパイラシンボルがビルドスクリプトのクラスパスで利用可能になっていました。 これらのシンボルは内部使用のみを目的としていました。</p><p>Kotlin 2.1.0 から、KGP は <code>org.jetbrains.kotlin:kotlin-compiler-embeddable</code> のクラスファイルのサブセットを JAR ファイルにバンドルし、徐々にそれらを削除していきます。 この変更は、互換性の問題を防止し、KGP のメンテナンスを簡素化することを目的としています。</p><p>もし、<code>kotlinter</code> のようなプラグインなど、ビルドロジックの他の部分が KGP にバンドルされているものとは異なるバージョンの <code>org.jetbrains.kotlin:kotlin-compiler-embeddable</code> に依存している場合、衝突やランタイム例外を引き起こす可能性があります。</p><p>このような問題を防止するため、KGP は現在、KGP と共に <code>org.jetbrains.kotlin:kotlin-compiler-embeddable</code> がビルドクラスパスに存在する場合に警告を表示します。</p><p>長期的な解決策として、<code>org.jetbrains.kotlin:kotlin-compiler-embeddable</code> クラスを使用するプラグイン作成者である場合、それらを隔離されたクラスローダーで実行することをお勧めします。 たとえば、<a href="https://docs.gradle.org/current/userguide/worker_api.html" target="_blank" rel="noreferrer">Gradle Workers API</a> をクラスローダーまたはプロセス分離で使用することで実現できます。</p><h4 id="gradle-workers-apiの使用" tabindex="-1">Gradle Workers APIの使用 <a class="header-anchor" href="#gradle-workers-apiの使用" aria-label="Permalink to &quot;Gradle Workers APIの使用&quot;">​</a></h4><p>この例は、Gradle プラグインを生成するプロジェクトで Kotlin コンパイラを安全に使用する方法を示しています。 まず、ビルドスクリプトにコンパイルのみの依存関係を追加します。 これにより、シンボルはコンパイル時のみ利用可能になります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compileOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-compiler-embeddable:2.2.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>次に、Kotlin コンパイラのバージョンを出力する Gradle 作業アクションを定義します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.workers.WorkAction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.workers.WorkParameters</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.config.KotlinCompilerVersion</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ActionUsingKotlinCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WorkAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WorkParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin compiler version: \${KotlinCompilerVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getVersion</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>次に、クラスローダー分離を使用してこのアクションをワーカーエグゼキュータに送信するタスクを作成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.api.DefaultTask</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.api.file.ConfigurableFileCollection</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.api.tasks.Classpath</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.api.tasks.TaskAction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.workers.WorkerExecutor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> javax.inject.Inject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TaskUsingKotlinCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefaultTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Inject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> executor: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WorkerExecutor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Classpath</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinCompiler: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ConfigurableFileCollection</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @TaskAction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> workQueue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">classLoaderIsolation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            classpath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlinCompiler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        workQueue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ActionUsingKotlinCompiler::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>最後に、Gradle プラグインで Kotlin コンパイラのクラスパスを構成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.api.Plugin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.api.Project</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myDependencyScope </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target.configurations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myDependencyScope&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target.dependencies.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myDependencyScope.name, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$KOTLIN_COMPILER_EMBEDDABLE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$KOTLIN_COMPILER_VERSION</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myResolvableConfiguration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target.configurations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myResolvable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            extendsFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myDependencyScope)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target.tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myTask&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TaskUsingKotlinCompiler::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            kotlinCompiler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myResolvableConfiguration)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KOTLIN_COMPILER_EMBEDDABLE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.kotlin:kotlin-compiler-embeddable&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KOTLIN_COMPILER_VERSION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2.2.10&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="composeコンパイラの更新" tabindex="-1">Composeコンパイラの更新 <a class="header-anchor" href="#composeコンパイラの更新" aria-label="Permalink to &quot;Composeコンパイラの更新&quot;">​</a></h2><h3 id="複数の安定性設定ファイルのサポート" tabindex="-1">複数の安定性設定ファイルのサポート <a class="header-anchor" href="#複数の安定性設定ファイルのサポート" aria-label="Permalink to &quot;複数の安定性設定ファイルのサポート&quot;">​</a></h3><p>Compose コンパイラは複数の安定性設定ファイルを解釈できますが、以前の Compose Compiler Gradle プラグインの <code>stabilityConfigurationFile</code> オプションでは、単一のファイルのみ指定可能でした。 Kotlin 2.1.0 では、この機能が再設計され、単一のモジュールに複数の安定性設定ファイルを使用できるようになりました。</p><ul><li><code>stabilityConfigurationFile</code> オプションは非推奨になりました。</li><li>新しいオプション <code>stabilityConfigurationFiles</code> があり、型は <code>ListProperty&lt;RegularFile&gt;</code> です。</li></ul><p>新しいオプションを使用して、複数のファイルを Compose コンパイラに渡す方法は以下の通りです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composeCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stabilityConfigurationFiles.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        project.layout.projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;configuration-file1.conf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        project.layout.projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;configuration-file2.conf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="一時停止可能なコンポジション" tabindex="-1">一時停止可能なコンポジション <a class="header-anchor" href="#一時停止可能なコンポジション" aria-label="Permalink to &quot;一時停止可能なコンポジション&quot;">​</a></h3><p>一時停止可能なコンポジションは、コンパイラがスキップ可能な関数を生成する方法を変更する、新しい実験的な機能です。 この機能を有効にすると、実行時にスキップポイントでコンポジションを中断できるため、長時間実行されるコンポジションプロセスを複数のフレームに分割できます。 一時停止可能なコンポジションは、遅延リストやその他のパフォーマンスを重視するコンポーネントで使用され、ブロッキング方式で実行するとフレーム落ちを引き起こす可能性のあるコンテンツをプリフェッチします。</p><p>一時停止可能なコンポジションを試すには、Compose コンパイラの Gradle 設定に以下の機能フラグを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composeCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    featureFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.PausableComposition</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>この機能のランタイムサポートは、<code>androidx.compose.runtime</code> の 1.8.0-alpha02 バージョンで追加されました。 古いランタイムバージョンで使用した場合、この機能フラグは効果がありません。</p></div><h3 id="openおよびオーバーライドされた-composable関数の変更" tabindex="-1">openおよびオーバーライドされた@Composable関数の変更 <a class="header-anchor" href="#openおよびオーバーライドされた-composable関数の変更" aria-label="Permalink to &quot;openおよびオーバーライドされた@Composable関数の変更&quot;">​</a></h3><p>仮想（オープン、抽象、およびオーバーライドされた）<code>@Composable</code> 関数は、再起動可能ではなくなりました。 再起動可能なグループのコード生成は、継承で<a href="https://issuetracker.google.com/329477544" target="_blank" rel="noreferrer">正しく動作しない</a>呼び出しを生成し、ランタイムクラッシュを引き起こしていました。</p><p>これは、仮想関数が再起動またはスキップされないことを意味します。状態が無効になった場合、ランタイムは代わりにその親コンポーザブルを再コンポジションします。 コードがリコンポジションに影響を受けやすい場合、ランタイムの動作に変化が見られる可能性があります。</p><h3 id="パフォーマンスの改善" tabindex="-1">パフォーマンスの改善 <a class="header-anchor" href="#パフォーマンスの改善" aria-label="Permalink to &quot;パフォーマンスの改善&quot;">​</a></h3><p>Compose コンパイラは以前、<code>@Composable</code> 型を変換するためにモジュールの IR の完全なコピーを作成していました。 Compose に関連しない要素をコピーする際のメモリ消費量の増加とは別に、この動作は<a href="https://issuetracker.google.com/365066530" target="_blank" rel="noreferrer">特定のケース</a>で下流のコンパイラプラグインを破壊することもありました。</p><p>このコピー操作は削除され、コンパイル時間が高速化される可能性があります。</p><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><h3 id="標準ライブラリapiの非推奨度の変更" tabindex="-1">標準ライブラリAPIの非推奨度の変更 <a class="header-anchor" href="#標準ライブラリapiの非推奨度の変更" aria-label="Permalink to &quot;標準ライブラリAPIの非推奨度の変更&quot;">​</a></h3><p>Kotlin 2.1.0 では、いくつかの標準ライブラリ API の非推奨度が警告からエラーに引き上げられます。 これらの API にコードが依存している場合、互換性を確保するために更新する必要があります。 最も注目すべき変更は以下の通りです。</p><ul><li><p><strong><code>Char</code>および<code>String</code>のロケール依存のケース変換関数が非推奨に:</strong> <code>Char.toLowerCase()</code>、<code>Char.toUpperCase()</code>、<code>String.toUpperCase()</code>、<code>String.toLowerCase()</code> などの関数が非推奨となり、使用するとエラーになります。 それらをロケールに依存しない関数の代替または他のケース変換メカニズムに置き換えてください。 デフォルトロケールを引き続き使用したい場合は、<code>String.toLowerCase()</code> のような呼び出しを、ロケールを明示的に指定して <code>String.lowercase(Locale.getDefault())</code> に置き換えてください。 ロケールに依存しない変換の場合は、デフォルトで不変ロケールを使用する <code>String.lowercase()</code> に置き換えてください。</p></li><li><p><strong>Kotlin/NativeのフリージングAPIが非推奨に:</strong> 以前 <code>@FreezingIsDeprecated</code> アノテーションでマークされていたフリージング関連の宣言を使用すると、エラーになります。 この変更は、Kotlin/Native におけるレガシーメモリマネージャからの移行を反映しており、スレッド間でオブジェクトを共有するためにオブジェクトのフリーズが必要でした。 新しいメモリモデルでフリージング関連 API から移行する方法については、<a href="/ja/kotlin/native-migration-guide#update-your-code">Kotlin/Native 移行ガイド</a>を参照してください。 詳細については、<a href="/ja/kotlin/whatsnew1720#freezing">フリージング非推奨化に関するお知らせ</a>を参照してください。</p></li><li><p><strong><code>appendln()</code>が<code>appendLine()</code>に代わって非推奨に:</strong> <code>StringBuilder.appendln()</code> および <code>Appendable.appendln()</code> 関数は非推奨となり、使用するとエラーになります。 それらを置き換えるには、代わりに <code>StringBuilder.appendLine()</code> または <code>Appendable.appendLine()</code> 関数を使用します。 <code>appendln()</code> 関数が非推奨となるのは、Kotlin/JVM 上で <code>line.separator</code> システムプロパティを使用するためで、これは OS ごとに異なるデフォルト値を持っています。 Kotlin/JVM では、このプロパティは Windows ではデフォルトで <code>\\r </code> (CR LF) に、他のシステムでは <code></code> (LF) になります。 一方、<code>appendLine()</code> 関数は行区切り文字として一貫して <code></code> (LF) を使用し、プラットフォーム間で一貫した動作を保証します。</p></li></ul><p>このリリースで影響を受ける API の完全なリストについては、<a href="https://youtrack.jetbrains.com/issue/KT-71628" target="_blank" rel="noreferrer">KT-71628</a> YouTrack 課題を参照してください。</p><h3 id="java-nio-file-pathの安定版ファイルツリー走査拡張" tabindex="-1">java.nio.file.Pathの安定版ファイルツリー走査拡張 <a class="header-anchor" href="#java-nio-file-pathの安定版ファイルツリー走査拡張" aria-label="Permalink to &quot;java.nio.file.Pathの安定版ファイルツリー走査拡張&quot;">​</a></h3><p>Kotlin 1.7.20 で、<code>java.nio.file.Path</code> クラスの実験的な<a href="/ja/kotlin/extensions#extension-functions">拡張関数</a>が導入され、ファイルツリーを走査できるようになりました。 Kotlin 2.1.0 では、以下のファイルツリー走査拡張が<a href="/ja/kotlin/components-stability#stability-levels-explained">安定版</a>になりました。</p><ul><li><code>walk()</code> は、指定されたパスをルートとするファイルツリーを遅延的に走査します。</li><li><code>fileVisitor()</code> を使用すると、<code>FileVisitor</code> を個別に作成できます。 <code>FileVisitor</code> は、走査中にディレクトリやファイルに対して実行されるアクションを指定します。</li><li><code>visitFileTree(fileVisitor: FileVisitor, ...)</code> は、ファイルツリーを走査し、遭遇した各エントリで指定された <code>FileVisitor</code> を呼び出します。内部的には <code>java.nio.file.Files.walkFileTree()</code> 関数を使用しています。</li><li><code>visitFileTree(..., builderAction: FileVisitorBuilder.() -&gt; Unit)</code> は、提供された <code>builderAction</code> で <code>FileVisitor</code> を作成し、<code>visitFileTree(fileVisitor, ...)</code> 関数を呼び出します。</li><li><code>sealed interface FileVisitorBuilder</code> を使用すると、カスタムの <code>FileVisitor</code> 実装を定義できます。</li><li><code>enum class PathWalkOption</code> は、<code>Path.walk()</code> 関数の走査オプションを提供します。</li></ul><p>以下の例は、これらのファイル走査 API を使用してカスタムの <code>FileVisitor</code> 動作を作成し、ファイルやディレクトリを訪れる際の特定のアクションを定義する方法を示しています。</p><p>例えば、<code>FileVisitor</code> を明示的に作成し、後で使用することができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cleanVisitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fileVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onPreVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { directory, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Placeholder: Add logic on visiting directories</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onVisitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Placeholder: Add logic on visiting files</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Placeholder: Add logic here for general setup before traversal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cleanVisitor)</span></span></code></pre></div><p>また、<code>builderAction</code> を使用して <code>FileVisitor</code> を作成し、走査のためにすぐに使用することもできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Defines the builderAction:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onPreVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { directory, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Some logic on visiting directories</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onVisitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Some logic on visiting files</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>さらに、<code>walk()</code> 関数を使用して、指定されたパスをルートとするファイルツリーを走査することもできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> traverseFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cleanVisitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fileVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onPreVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { directory, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (directory.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                directory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                FileVisitResult.SKIP_SUBTREE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Deletes files with the .class extension</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onVisitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (file.extension </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteExisting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Sets up the root directory and files</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTempDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Creates the src directory with A.kt and A.class files</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { srcDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        srcDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        srcDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A.kt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        srcDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A.class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Creates the build directory with a Project.jar file</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { buildDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Project.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Uses the walk() function:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> directoryStructure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PathWalkOption.INCLUDE_DIRECTORIES)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">relativeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rootDirectory).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(directoryStructure)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;[, build, build/Project.jar, src, src/A.class, src/A.kt]&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Traverses the file tree with cleanVisitor, applying the rootDirectory.visitFileTree(cleanVisitor) cleanup rules</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> directoryStructureAfterClean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PathWalkOption.INCLUDE_DIRECTORIES)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">relativeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rootDirectory).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(directoryStructureAfterClean)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;[, src, src/A.kt]&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="ドキュメントの更新" tabindex="-1">ドキュメントの更新 <a class="header-anchor" href="#ドキュメントの更新" aria-label="Permalink to &quot;ドキュメントの更新&quot;">​</a></h2><p>Kotlin のドキュメントにはいくつかの注目すべき変更が加えられました。</p><h3 id="言語の概念" tabindex="-1">言語の概念 <a class="header-anchor" href="#言語の概念" aria-label="Permalink to &quot;言語の概念&quot;">​</a></h3><ul><li>改善された<a href="/ja/kotlin/null-safety">Null安全性</a>ページ – コード内で <code>null</code> 値を安全に処理する方法を学びます。</li><li>改善された<a href="/ja/kotlin/object-declarations">オブジェクトの宣言と式</a>ページ – クラスを定義し、単一のステップでインスタンスを作成する方法を学びます。</li><li>改善された<a href="/ja/kotlin/control-flow#when-expressions-and-statements">When式とステートメント</a>セクション – <code>when</code> 条件式とその使用方法について学びます。</li><li>更新された<a href="/ja/kotlin/roadmap">Kotlinロードマップ</a>、<a href="/ja/kotlin/kotlin-evolution-principles">Kotlin進化の原則</a>、および<a href="/ja/kotlin/kotlin-language-features-and-proposals">Kotlin言語機能と提案</a>ページ – Kotlinの計画、進行中の開発、および指導原則について学びます。</li></ul><h3 id="composeコンパイラ" tabindex="-1">Composeコンパイラ <a class="header-anchor" href="#composeコンパイラ" aria-label="Permalink to &quot;Composeコンパイラ&quot;">​</a></h3><ul><li><a href="/ja/kotlin/compose-compiler-migration-guide">Composeコンパイラのドキュメント</a>がコンパイラとプラグインセクションに移動 – Composeコンパイラ、コンパイラオプション、および移行手順について学びます。</li></ul><h3 id="apiリファレンス" tabindex="-1">APIリファレンス <a class="header-anchor" href="#apiリファレンス" aria-label="Permalink to &quot;APIリファレンス&quot;">​</a></h3><ul><li>新しい<a href="https://kotlinlang.org/api/kotlin-gradle-plugin" target="_blank" rel="noreferrer">Kotlin GradleプラグインAPIリファレンス</a> – Kotlin GradleプラグインとComposeコンパイラGradleプラグインのAPIリファレンスを探索します。</li></ul><h3 id="マルチプラットフォーム開発" tabindex="-1">マルチプラットフォーム開発 <a class="header-anchor" href="#マルチプラットフォーム開発" aria-label="Permalink to &quot;マルチプラットフォーム開発&quot;">​</a></h3><ul><li>新しい<a href="https://kotlinlang.org/docs/api-guidelines-build-for-multiplatform.html" target="_blank" rel="noreferrer">マルチプラットフォーム用Kotlinライブラリのビルド</a>ページ – Kotlin Multiplatform 用に Kotlin ライブラリを設計する方法を学びます。</li><li>新しい<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin Multiplatformの紹介</a>ページ – Kotlin Multiplatform の主要な概念、依存関係、ライブラリなどについて学びます。</li><li>更新された<a href="/ja/kotlinmultiplatform.topic">Kotlin Multiplatformの概要</a>ページ – Kotlin Multiplatform の基本と一般的なユースケースをナビゲートします。</li><li>新しい<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-ios-integration-overview.html" target="_blank" rel="noreferrer">iOS統合</a>セクション – Kotlin Multiplatform 共有モジュールを iOS アプリに統合する方法を学びます。</li><li>新しい<a href="/ja/kotlin/native-definition-file">Kotlin/Nativeの定義ファイル</a>ページ – C および Objective-C ライブラリを使用するための定義ファイルの作成方法を学びます。</li><li><a href="/ja/kotlin/wasm-wasi">WASIを使ってみる</a> – WASI を使用してさまざまな WebAssembly 仮想マシンでシンプルな Kotlin/Wasm アプリケーションを実行する方法を学びます。</li></ul><h3 id="ツール" tabindex="-1">ツール <a class="header-anchor" href="#ツール" aria-label="Permalink to &quot;ツール&quot;">​</a></h3><ul><li><a href="/ja/kotlin/dokka-migration">新しいDokka移行ガイド</a> – Dokka Gradle プラグイン v2 への移行方法を学びます。</li></ul><h2 id="kotlin-2-1-0の互換性ガイド" tabindex="-1">Kotlin 2.1.0の互換性ガイド <a class="header-anchor" href="#kotlin-2-1-0の互換性ガイド" aria-label="Permalink to &quot;Kotlin 2.1.0の互換性ガイド&quot;">​</a></h2><p>Kotlin 2.1.0 は機能リリースであるため、以前のバージョンの言語で書かれたコードと互換性のない変更をもたらす可能性があります。 これらの変更の詳細なリストは、<a href="/ja/kotlin/compatibility-guide-21">Kotlin 2.1.0 の互換性ガイド</a>で確認できます。</p><h2 id="kotlin-2-1-0のインストール" tabindex="-1">Kotlin 2.1.0のインストール <a class="header-anchor" href="#kotlin-2-1-0のインストール" aria-label="Permalink to &quot;Kotlin 2.1.0のインストール&quot;">​</a></h2><p>IntelliJ IDEA 2023.3 および Android Studio Iguana (2023.2.1) Canary 15 以降、Kotlin プラグインは IDE にバンドルされたプラグインとして配布されます。これは、JetBrains Marketplace からプラグインをインストールできなくなったことを意味します。</p><p>新しい Kotlin バージョンに更新するには、ビルドスクリプトで Kotlin のバージョンを 2.1.0 に<a href="/ja/kotlin/releases#update-to-a-new-kotlin-version">変更</a>します。</p>`,71))])}const N=u(C,[["render",v]]);export{_ as __pageData,N as default};
