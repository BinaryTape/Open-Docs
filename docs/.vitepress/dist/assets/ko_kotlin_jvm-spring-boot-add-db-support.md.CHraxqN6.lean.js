import{_ as g}from"./chunks/icon-1-done.ZX9lW-aj.js";import{_ as o}from"./chunks/icon-2-done.DCMUaFG5.js";import{_ as y}from"./chunks/icon-3.BwKvTetO.js";import{_ as F}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as c,a as u,b as C,c as B}from"./chunks/retrieve-message-by-its-id.Bu3w1K2P.js";import{_ as m,C as h,c as A,o as D,j as s,G as n,ag as p,a,w as l}from"./chunks/framework.Bksy39di.js";const j=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/jvm-spring-boot-add-db-support.md","filePath":"ko/kotlin/jvm-spring-boot-add-db-support.md","lastUpdated":1754307826000}'),b={name:"ko/kotlin/jvm-spring-boot-add-db-support.md"};function v(q,i,f,M,S,T){const r=h("web-summary"),d=h("tldr"),k=h("code-block"),t=h("def"),e=h("deflist"),E=h("list");return D(),A("div",null,[i[31]||(i[31]=s("h1",{id:"spring-boot-프로젝트에-데이터베이스-지원-추가",tabindex:"-1"},[a("Spring Boot 프로젝트에 데이터베이스 지원 추가 "),s("a",{class:"header-anchor",href:"#spring-boot-프로젝트에-데이터베이스-지원-추가","aria-label":'Permalink to "Spring Boot 프로젝트에 데이터베이스 지원 추가"'},"​")],-1)),n(r,null,{default:l(()=>i[0]||(i[0]=[a("Kotlin으로 작성된 Spring Boot 프로젝트에 JDBC 템플릿을 사용하여 데이터베이스 지원을 추가합니다.")])),_:1}),n(d,null,{default:l(()=>i[1]||(i[1]=[s("p",null,[a("이 튜토리얼은 "),s("strong",null,"Spring Boot 및 Kotlin 시작하기"),a("의 세 번째 부분입니다. 계속 진행하기 전에 다음 이전 단계를 완료했는지 확인하세요:")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:g,width:"20",alt:"첫 번째 단계"}),a(),s("a",{href:"/ko/kotlin/jvm-create-project-with-spring-boot"},"Kotlin으로 Spring Boot 프로젝트 생성하기"),s("br"),s("img",{src:o,width:"20",alt:"두 번째 단계"}),a(),s("a",{href:"/ko/kotlin/jvm-spring-boot-add-data-class"},"Spring Boot 프로젝트에 데이터 클래스 추가하기"),s("br"),s("img",{src:y,width:"20",alt:"세 번째 단계"}),a(),s("strong",null,"Spring Boot 프로젝트에 데이터베이스 지원 추가하기"),s("br"),s("img",{src:F,width:"20",alt:"네 번째 단계"}),a(" 데이터베이스 접근을 위해 Spring Data CrudRepository 사용하기")],-1)])),_:1}),i[32]||(i[32]=p("",5)),n(e,{collapsible:"true"},{default:l(()=>[n(t,{title:"생성자 인수 및 의존성 주입 – (private val db: JdbcTemplate)"},{default:l(()=>[i[3]||(i[3]=s("p",null,[a("Kotlin의 클래스에는 주 생성자가 있습니다. 또한 하나 이상의 "),s("a",{href:"/ko/kotlin/classes#secondary-constructors"},"보조 생성자"),a("를 가질 수도 있습니다. "),s("i",null,"주 생성자"),a("는 클래스 헤더의 일부이며, 클래스 이름과 선택적 타입 파라미터 뒤에 옵니다. 이 경우 생성자는 "),s("code",null,"(val db: JdbcTemplate)"),a("입니다.")],-1)),i[4]||(i[4]=s("p",null,[s("code",null,"val db: JdbcTemplate"),a("는 생성자의 인수입니다:")],-1)),n(k,{lang:"kotlin"},{default:l(()=>i[2]||(i[2]=[a(" @Service class MessageService(private val db: JdbcTemplate) ")])),_:1})]),_:1}),n(t,{title:"후행 람다 및 SAM 변환"},{default:l(()=>[i[8]||(i[8]=s("p",null,[s("code",null,"findMessages()"),a(" 함수는 "),s("code",null,"JdbcTemplate"),a(" 클래스의 "),s("code",null,"query()"),a(" 함수를 호출합니다. "),s("code",null,"query()"),a(" 함수는 두 가지 인수를 받습니다: String 인스턴스로서의 SQL 쿼리와 각 행당 하나의 객체를 매핑할 콜백입니다:")],-1)),n(k,{lang:"sql"},{default:l(()=>i[5]||(i[5]=[a(' db.query("...", RowMapper { ... } ) ')])),_:1}),i[9]||(i[9]=s("br",null,null,-1)),i[10]||(i[10]=s("p",null,[s("code",null,"RowMapper"),a(" 인터페이스는 단 하나의 메서드만 선언하므로, 인터페이스 이름을 생략하고 람다 표현식을 통해 이를 구현할 수 있습니다. Kotlin 컴파일러는 함수 호출의 파라미터로 람다 표현식을 사용하기 때문에 람다 표현식이 변환되어야 할 인터페이스를 알고 있습니다. 이를 "),s("a",{href:"/ko/kotlin/java-interop#sam-conversions"},"Kotlin의 SAM 변환"),a("이라고 합니다:")],-1)),n(k,{lang:"sql"},{default:l(()=>i[6]||(i[6]=[a(' db.query("...", { ... } ) ')])),_:1}),i[11]||(i[11]=s("br",null,null,-1)),i[12]||(i[12]=s("p",null,[a("SAM 변환 후, 쿼리 함수는 첫 번째 위치에 String, 마지막 위치에 람다 표현식이라는 두 가지 인수를 갖게 됩니다. Kotlin 컨벤션에 따르면, 함수의 마지막 파라미터가 함수인 경우, 해당 인수로 전달되는 람다 표현식은 괄호 밖에 배치될 수 있습니다. 이러한 구문을 "),s("a",{href:"/ko/kotlin/lambdas#passing-trailing-lambdas"},"후행 람다"),a("라고도 합니다:")],-1)),n(k,{lang:"sql"},{default:l(()=>i[7]||(i[7]=[a(' db.query("...") { ... } ')])),_:1})]),_:1}),n(t,{title:"사용되지 않는 람다 인수를 위한 밑줄"},{default:l(()=>[i[14]||(i[14]=s("p",null,[a("여러 파라미터를 가진 람다의 경우, 사용하지 않는 파라미터의 이름을 밑줄 "),s("code",null,"_"),a(" 문자로 대체할 수 있습니다.")],-1)),i[15]||(i[15]=s("p",null,"따라서 쿼리 함수 호출의 최종 구문은 다음과 같습니다:",-1)),n(k,{lang:"kotlin"},{default:l(()=>i[13]||(i[13]=[a(' db.query("select * from messages") { response, _ -> Message(response.getString("id"), response.getString("text")) } ')])),_:1})]),_:1})]),_:1}),i[33]||(i[33]=p("",3)),n(e,{collapsible:"true"},{default:l(()=>[n(t,{title:"@PostMapping 애너테이션"},{default:l(()=>i[16]||(i[16]=[s("p",null,[a("HTTP POST 요청을 처리하는 메서드는 "),s("code",null,"@PostMapping"),a(" 애너테이션으로 주석 처리되어야 합니다. HTTP 본문 내용으로 전송된 JSON을 객체로 변환하려면, 메서드 인수에 "),s("code",null,"@RequestBody"),a(" 애너테이션을 사용해야 합니다. 애플리케이션의 클래스패스에 Jackson 라이브러리가 있기 때문에 변환이 자동으로 이루어집니다.")],-1)])),_:1}),n(t,{title:"ResponseEntity"},{default:l(()=>i[17]||(i[17]=[s("p",null,[s("code",null,"ResponseEntity"),a("는 상태 코드, 헤더, 본문을 포함하여 전체 HTTP 응답을 나타냅니다.")],-1),s("p",null,[s("code",null,"created()"),a(" 메서드를 사용하면 응답 상태 코드(201)를 구성하고 생성된 리소스의 컨텍스트 경로를 나타내는 location 헤더를 설정할 수 있습니다.")],-1)])),_:1})]),_:1}),i[34]||(i[34]=p("",6)),n(e,{collapsible:"true"},{default:l(()=>[n(t,{title:"엘비스 연산자 – ?:"},{default:l(()=>i[18]||(i[18]=[s("p",null,[a("코드 "),s("code",null,"message.id ?: UUID.randomUUID().toString()"),a("는 "),s("a",{href:"/ko/kotlin/null-safety#elvis-operator"},[a("엘비스 연산자 (null이 아닐 경우-그 외 경우 단축 구문) "),s("code",null,"?:")]),a("를 사용합니다. "),s("code",null,"?:"),a(" 왼쪽에 있는 표현식이 "),s("code",null,"null"),a("이 아니면 엘비스 연산자는 그 값을 반환하고, 그렇지 않으면 오른쪽에 있는 표현식을 반환합니다. 오른쪽 표현식은 왼쪽이 "),s("code",null,"null"),a("인 경우에만 평가된다는 점에 유의하세요.")],-1)])),_:1})]),_:1}),i[35]||(i[35]=p("",7)),i[36]||(i[36]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"요청을-실행하는-다른-방법",tabindex:"-1"},[a("요청을 실행하는 다른 방법 "),s("a",{class:"header-anchor",href:"#요청을-실행하는-다른-방법","aria-label":'Permalink to "요청을 실행하는 다른 방법 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[37]||(i[37]=p("",4)),s("ol",null,[s("li",null,[i[23]||(i[23]=p("",2)),n(e,{collapsible:"true"},{default:l(()=>[n(t,{title:"파라미터 목록에서의 vararg 인수 위치"},{default:l(()=>[i[20]||(i[20]=s("p",null,[s("code",null,"query()"),a(" 함수는 세 가지 인수를 받습니다:")],-1)),n(E,null,{default:l(()=>i[19]||(i[19]=[s("li",null,"실행할 매개변수가 필요한 SQL 쿼리 문자열",-1),s("li",null,[a("String 타입의 매개변수인 "),s("code",null,"id")],-1),s("li",null,[a("람다 표현식으로 구현된 "),s("code",null,"RowMapper"),a(" 인스턴스")],-1)])),_:1}),i[21]||(i[21]=s("p",null,[s("code",null,"query()"),a(" 함수의 두 번째 파라미터는 "),s("i",null,"가변 인수"),a(" ("),s("code",null,"vararg"),a(")로 선언됩니다. Kotlin에서는 가변 인수 파라미터의 위치가 파라미터 목록의 마지막일 필요는 없습니다.")],-1))]),_:1}),n(t,{title:"singleOrNull() 함수"},{default:l(()=>i[22]||(i[22]=[s("p",null,[s("a",{href:"https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/single-or-null.html"},[s("code",null,"singleOrNull()")]),a(" 함수는 단일 요소를 반환하거나, 배열이 비어 있거나 동일한 값을 가진 요소가 두 개 이상인 경우 "),s("code",null,"null"),a("을 반환합니다.")],-1)])),_:1})]),_:1}),i[24]||(i[24]=s("div",{class:"danger custom-block"},[s("p",{class:"custom-block-title"},"WARNING"),s("p",null,[a("ID로 메시지를 가져오는 데 사용되는 "),s("code",null,".query()"),a(" 함수는 스프링 프레임워크가 제공하는 "),s("a",{href:"/ko/kotlin/extensions#extension-functions"},"Kotlin 확장 함수"),a("입니다. 위 코드에서 보여지는 것처럼 추가적인 "),s("code",null,"import org.springframework.jdbc.core.query"),a(" 임포트가 필요합니다.")])],-1))]),s("li",null,[i[30]||(i[30]=p("",2)),n(e,{collapsible:"true"},{default:l(()=>[n(t,{title:"컨텍스트 경로에서 값 검색"},{default:l(()=>i[25]||(i[25]=[s("p",null,[a("새 함수를 "),s("code",null,'@GetMapping("/{id}")'),a("로 애너테이션 했으므로 Spring 프레임워크가 컨텍스트 경로에서 메시지 "),s("code",null,"id"),a("를 검색합니다. 함수 인수에 "),s("code",null,"@PathVariable"),a("을 애너테이션하여 프레임워크에 검색된 값을 함수 인수로 사용하도록 지시합니다. 새 함수는 "),s("code",null,"MessageService"),a("를 호출하여 ID별 개별 메시지를 검색합니다.")],-1)])),_:1}),n(t,{title:"널러블 수신자를 가진 확장 함수"},{default:l(()=>[i[27]||(i[27]=s("p",null,[a("확장은 널러블 수신자 타입으로 정의될 수 있습니다. 수신자가 "),s("code",null,"null"),a("이면 "),s("code",null,"this"),a("도 "),s("code",null,"null"),a("입니다. 따라서 널러블 수신자 타입을 가진 확장을 정의할 때는 함수 본문 내에서 "),s("code",null,"this == null"),a(" 검사를 수행하는 것이 좋습니다.")],-1)),i[28]||(i[28]=s("p",null,[a("위 "),s("code",null,"toResponseEntity()"),a(" 함수에서와 같이 널 안정성 호출 연산자("),s("code",null,"?."),a(")를 사용하여 널 검사를 수행할 수도 있습니다:")],-1)),n(k,{lang:"kotlin"},{default:l(()=>i[26]||(i[26]=[a(" this?.let { ResponseEntity.ok(it) } ")])),_:1})]),_:1}),n(t,{title:"ResponseEntity"},{default:l(()=>i[29]||(i[29]=[s("p",null,[s("code",null,"ResponseEntity"),a("는 상태 코드, 헤더, 본문을 포함하여 HTTP 응답을 나타냅니다. 이는 클라이언트에게 콘텐츠에 대한 더 많은 제어를 통해 사용자 지정 HTTP 응답을 다시 보낼 수 있게 하는 제네릭 래퍼입니다.")],-1)])),_:1})]),_:1})])]),i[38]||(i[38]=p("",11))])}const V=m(b,[["render",v]]);export{j as __pageData,V as default};
