import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"コレクション操作の概要","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/collection-operations.md","filePath":"ja/kotlin/collection-operations.md","lastUpdated":1754307826000}'),n={name:"ja/kotlin/collection-operations.md"};function e(h,s,k,p,r,o){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="コレクション操作の概要" tabindex="-1">コレクション操作の概要 <a class="header-anchor" href="#コレクション操作の概要" aria-label="Permalink to &quot;コレクション操作の概要&quot;">​</a></h1><p>Kotlin標準ライブラリは、コレクションに対する操作を実行するための多様な関数を提供しています。これには、要素の取得や追加といった単純な操作から、検索、ソート、フィルタリング、変換などのより複雑な操作までが含まれます。</p><h2 id="拡張関数とメンバー関数" tabindex="-1">拡張関数とメンバー関数 <a class="header-anchor" href="#拡張関数とメンバー関数" aria-label="Permalink to &quot;拡張関数とメンバー関数&quot;">​</a></h2><p>コレクション操作は、標準ライブラリで2つの方法で宣言されています。コレクションインターフェースの<a href="/ja/kotlin/classes#class-members">メンバー関数</a>と、<a href="/ja/kotlin/extensions#extension-functions">拡張関数</a>です。</p><p>メンバー関数は、コレクション型にとって不可欠な操作を定義します。例えば、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html" target="_blank" rel="noreferrer"><code>Collection</code></a>にはその空っぽさを確認するための<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/is-empty.html" target="_blank" rel="noreferrer"><code>isEmpty()</code></a>関数が含まれ、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html" target="_blank" rel="noreferrer"><code>List</code></a>には要素へのインデックスアクセスを行う<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/get.html" target="_blank" rel="noreferrer"><code>get()</code></a>などが含まれています。</p><p>コレクションインターフェースの独自の（自作の）実装を作成する場合、それらのメンバー関数を実装する必要があります。新しい実装の作成を容易にするために、標準ライブラリのコレクションインターフェースのスケルトン実装、すなわち <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-collection/index.html" target="_blank" rel="noreferrer"><code>AbstractCollection</code></a>、 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-list/index.html" target="_blank" rel="noreferrer"><code>AbstractList</code></a>、 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-set/index.html" target="_blank" rel="noreferrer"><code>AbstractSet</code></a>、 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-map/index.html" target="_blank" rel="noreferrer"><code>AbstractMap</code></a>、およびそれらの可変版を使用してください。</p><p>その他のコレクション操作は拡張関数として宣言されています。これらには、フィルタリング、変換、順序付け、およびその他のコレクション処理関数が含まれます。</p><h2 id="共通操作" tabindex="-1">共通操作 <a class="header-anchor" href="#共通操作" aria-label="Permalink to &quot;共通操作&quot;">​</a></h2><p>共通操作は、<a href="/ja/kotlin/collections-overview#collection-types">読み取り専用コレクションと可変コレクション</a>の両方で利用できます。共通操作は以下のグループに分類されます。</p><ul><li><a href="/ja/kotlin/collection-transformations">変換</a></li><li><a href="/ja/kotlin/collection-filtering">フィルタリング</a></li><li><a href="/ja/kotlin/collection-plus-minus"><code>plus</code> および <code>minus</code> 演算子</a></li><li><a href="/ja/kotlin/collection-grouping">グループ化</a></li><li><a href="/ja/kotlin/collection-parts">コレクションの一部の取得</a></li><li><a href="/ja/kotlin/collection-elements">単一要素の取得</a></li><li><a href="/ja/kotlin/collection-ordering">順序付け</a></li><li><a href="/ja/kotlin/collection-aggregate">集約操作</a></li></ul><p>これらのページで説明されている操作は、元のコレクションに影響を与えることなく結果を返します。例えば、フィルタリング操作は、フィルタリング述語に一致するすべての要素を含む_新しいコレクション_を生成します。このような操作の結果は、変数に格納するか、または他の関数に渡すなど、何らかの別の方法で使用する必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// nothing happens with \`numbers\`, result is lost</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;numbers are still </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$numbers</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> longerThan3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// result is stored in \`longerThan3\`</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;numbers longer than 3 chars are </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$longerThan3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>特定のコレクション操作では、_デスティネーション_オブジェクトを指定するオプションがあります。デスティネーションとは、関数が結果の項目を新しいオブジェクトで返す代わりに、それらを追加する可変コレクションです。デスティネーションを使用した操作を実行する場合、例えば<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter.html" target="_blank" rel="noreferrer"><code>filter()</code></a>の代わりに<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter-to.html" target="_blank" rel="noreferrer"><code>filterTo()</code></a>、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/associate.html" target="_blank" rel="noreferrer"><code>associate()</code></a>の代わりに<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/associate-to.html" target="_blank" rel="noreferrer"><code>associateTo()</code></a>のように、名前に<code>To</code>の接尾辞が付いた別個の関数があります。これらの関数は、デスティネーションコレクションを追加のパラメータとして取ります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filterResults </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//destination object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filterResults) { it.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterIndexedTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filterResults) { index, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filterResults) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// contains results of both operations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>便宜上、これらの関数はデスティネーションコレクションを返します。そのため、関数呼び出しの対応する引数内で直接作成できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // filter numbers right into a new hash set, </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // thus eliminating duplicates in the result</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HashSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) { it.length }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;distinct item lengths are </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>デスティネーションを持つ関数は、フィルタリング、関連付け、グループ化、フラット化、その他の操作で利用できます。デスティネーション操作の完全なリストについては、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index.html" target="_blank" rel="noreferrer">Kotlinコレクションリファレンス</a>を参照してください。</p><h2 id="書き込み操作" tabindex="-1">書き込み操作 <a class="header-anchor" href="#書き込み操作" aria-label="Permalink to &quot;書き込み操作&quot;">​</a></h2><p>可変コレクションの場合、コレクションの状態を変更する_書き込み操作_もあります。そのような操作には、要素の追加、削除、更新が含まれます。書き込み操作は、<a href="/ja/kotlin/collection-write">書き込み操作</a>および<a href="/ja/kotlin/list-operations#list-write-operations">List固有の操作</a>と<a href="/ja/kotlin/map-operations#map-write-operations">Map固有の操作</a>の対応するセクションにリストされています。</p><p>特定の操作については、同じ操作を実行するための関数のペアがあります。一方は操作をインプレースで適用し、もう一方は結果を別のコレクションとして返します。例えば、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sort.html" target="_blank" rel="noreferrer"><code>sort()</code></a>は可変コレクションをインプレースでソートするため、その状態が変更されます。<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sorted.html" target="_blank" rel="noreferrer"><code>sorted()</code></a>は、同じ要素をソートされた順序で含む新しいコレクションを作成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortedNumbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortedNumbers)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortedNumbers)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,21)]))}const g=i(n,[["render",e]]);export{d as __pageData,g as default};
