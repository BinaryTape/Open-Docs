import{_ as t}from"./chunks/kotlin-native-and-jvm-binaries.1l992XkT.js";import{_ as o,c as i,o as e,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"常見問題","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/faq.md","filePath":"zh-Hant/kmp/faq.md","lastUpdated":1755516278000}'),r={name:"zh-Hant/kmp/faq.md"};function p(m,a,n,s,f,d){return e(),i("div",null,a[0]||(a[0]=[l('<h1 id="常見問題" tabindex="-1">常見問題 <a class="header-anchor" href="#常見問題" aria-label="Permalink to &quot;常見問題&quot;">​</a></h1><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><h3 id="什麼是-kotlin-multiplatform" tabindex="-1">什麼是 Kotlin Multiplatform？ <a class="header-anchor" href="#什麼是-kotlin-multiplatform" aria-label="Permalink to &quot;什麼是 Kotlin Multiplatform？&quot;">​</a></h3><p><a href="https://www.jetbrains.com/kotlin-multiplatform/" target="_blank" rel="noreferrer">Kotlin Multiplatform</a> (KMP) 是 JetBrains 旗下的開源技術，用於靈活的跨平台開發。它讓您可以建立適用於各種平台的應用程式，並在它們之間高效重用程式碼，同時保留原生程式設計的優勢。透過 Kotlin Multiplatform，您可以開發適用於 Android、iOS、桌面、網頁、伺服器端及其他平台的應用程式。</p><h3 id="我可以使用-kotlin-multiplatform-共享-ui-嗎" tabindex="-1">我可以使用 Kotlin Multiplatform 共享 UI 嗎？ <a class="header-anchor" href="#我可以使用-kotlin-multiplatform-共享-ui-嗎" aria-label="Permalink to &quot;我可以使用 Kotlin Multiplatform 共享 UI 嗎？&quot;">​</a></h3><p>是的，您可以使用 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 分享 UI，這是 JetBrains 旗下的聲明式 UI 框架，基於 Kotlin 和 <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> 開發。此框架讓您可以建立適用於 iOS、Android、桌面和網頁等平台的共享 UI 元件，幫助您在不同裝置和平台之間保持使用者介面的一致性。</p><p>要了解更多資訊，請參閱 <a href="#compose-multiplatform">Compose Multiplatform</a> 章節。</p><h3 id="kotlin-multiplatform-支援哪些平台" tabindex="-1">Kotlin Multiplatform 支援哪些平台？ <a class="header-anchor" href="#kotlin-multiplatform-支援哪些平台" aria-label="Permalink to &quot;Kotlin Multiplatform 支援哪些平台？&quot;">​</a></h3><p>Kotlin Multiplatform 支援 Android、iOS、桌面、網頁、伺服器端及其他平台。了解更多關於 <a href="./supported-platforms">支援平台</a> 的資訊。</p><h3 id="我應該在哪個-ide-中開發我的跨平台應用程式" tabindex="-1">我應該在哪個 IDE 中開發我的跨平台應用程式？ <a class="header-anchor" href="#我應該在哪個-ide-中開發我的跨平台應用程式" aria-label="Permalink to &quot;我應該在哪個 IDE 中開發我的跨平台應用程式？&quot;">​</a></h3><p>我們建議使用 Android Studio IDE 來處理 Kotlin Multiplatform 專案。在 <a href="./recommended-ides">推薦的 IDE 和程式碼編輯器</a> 中閱讀更多關於可用替代方案的資訊。</p><h3 id="如何建立新的-kotlin-multiplatform-專案" tabindex="-1">如何建立新的 Kotlin Multiplatform 專案？ <a class="header-anchor" href="#如何建立新的-kotlin-multiplatform-專案" aria-label="Permalink to &quot;如何建立新的 Kotlin Multiplatform 專案？&quot;">​</a></h3><p><a href="./get-started">建立 Kotlin Multiplatform 應用程式</a> 教學課程提供了建立 Kotlin Multiplatform 專案的逐步說明。您可以決定要共享什麼 – 僅邏輯，或者同時共享邏輯和 UI。</p><h3 id="我有一個現有的-android-應用程式。如何將其遷移到-kotlin-multiplatform" tabindex="-1">我有一個現有的 Android 應用程式。如何將其遷移到 Kotlin Multiplatform？ <a class="header-anchor" href="#我有一個現有的-android-應用程式。如何將其遷移到-kotlin-multiplatform" aria-label="Permalink to &quot;我有一個現有的 Android 應用程式。如何將其遷移到 Kotlin Multiplatform？&quot;">​</a></h3><p><a href="./multiplatform-integrate-in-existing-app">讓您的 Android 應用程式在 iOS 上執行</a> 逐步教學課程解釋了如何讓您的 Android 應用程式在 iOS 上與原生 UI 一起執行。如果您還想與 Compose Multiplatform 共享 UI，請參閱 <a href="#i-have-an-existing-android-application-that-uses-jetpack-compose-what-should-i-do-to-migrate-it-to-other-platforms">相應的答案</a>。</p><h3 id="我可以在哪裡找到完整的範例來試玩" tabindex="-1">我可以在哪裡找到完整的範例來試玩？ <a class="header-anchor" href="#我可以在哪裡找到完整的範例來試玩" aria-label="Permalink to &quot;我可以在哪裡找到完整的範例來試玩？&quot;">​</a></h3><p>這裡有 <a href="./multiplatform-samples">真實範例列表</a>。</p><h3 id="我在哪裡可以找到真實的-kotlin-multiplatform-應用程式列表-哪些公司在生產環境中使用-kmp" tabindex="-1">我在哪裡可以找到真實的 Kotlin Multiplatform 應用程式列表？哪些公司在生產環境中使用 KMP？ <a class="header-anchor" href="#我在哪裡可以找到真實的-kotlin-multiplatform-應用程式列表-哪些公司在生產環境中使用-kmp" aria-label="Permalink to &quot;我在哪裡可以找到真實的 Kotlin Multiplatform 應用程式列表？哪些公司在生產環境中使用 KMP？&quot;">​</a></h3><p>查看我們的 <a href="./case-studies">案例研究列表</a>，以了解其他已在生產環境中採用 Kotlin Multiplatform 的公司經驗。</p><h3 id="哪些作業系統可以與-kotlin-multiplatform-協同工作" tabindex="-1">哪些作業系統可以與 Kotlin Multiplatform 協同工作？ <a class="header-anchor" href="#哪些作業系統可以與-kotlin-multiplatform-協同工作" aria-label="Permalink to &quot;哪些作業系統可以與 Kotlin Multiplatform 協同工作？&quot;">​</a></h3><p>如果您要處理共享程式碼或平台特定程式碼，除了 iOS 之外，您可以在 IDE 支援的任何作業系統上工作。</p><p>了解更多關於 <a href="./recommended-ides">推薦的 IDE</a> 資訊。</p><p>如果您想編寫 iOS 特定程式碼並在模擬器或真實裝置上執行 iOS 應用程式，請使用搭載 macOS 的 Mac。這是因為根據 Apple 的要求，iOS 模擬器只能在 macOS 上執行，而不能在其他作業系統（如 Microsoft Windows 或 Linux）上執行。</p><h3 id="如何在-kotlin-multiplatform-專案中編寫並行程式碼" tabindex="-1">如何在 Kotlin Multiplatform 專案中編寫並行程式碼？ <a class="header-anchor" href="#如何在-kotlin-multiplatform-專案中編寫並行程式碼" aria-label="Permalink to &quot;如何在 Kotlin Multiplatform 專案中編寫並行程式碼？&quot;">​</a></h3><p>您仍然可以在 Kotlin Multiplatform 專案中使用 coroutines 和 flows 編寫非同步程式碼。如何呼叫此程式碼取決於您從何處呼叫。從 Kotlin 程式碼呼叫 suspending functions 和 flows 已有廣泛文件記載，尤其是針對 Android。<a href="https://kotlinlang.org/docs/native-arc-integration.html#completion-handlers" target="_blank" rel="noreferrer">從 Swift 程式碼呼叫它們</a> 需要多一點工作，詳情請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-47610" target="_blank" rel="noreferrer">KT-47610</a>。</p><p>目前從 Swift 呼叫 suspending functions 和 flows 的最佳方法是使用 <a href="https://github.com/rickclephas/KMP-NativeCoroutines" target="_blank" rel="noreferrer">KMP-NativeCoroutines</a> 等外掛程式和函式庫，並結合 Swift 的 <code>async</code>/<code>await</code> 或 Combine 和 RxSwift 等函式庫。</p><p>要了解如何使用它們，請參閱 <a href="./multiplatform-upgrade-app">在 iOS 和 Android 之間共享更多邏輯</a>。</p><h3 id="什麼是-kotlin-native-它與-kotlin-multiplatform-有何關係" tabindex="-1">什麼是 Kotlin/Native，它與 Kotlin Multiplatform 有何關係？ <a class="header-anchor" href="#什麼是-kotlin-native-它與-kotlin-multiplatform-有何關係" aria-label="Permalink to &quot;什麼是 Kotlin/Native，它與 Kotlin Multiplatform 有何關係？&quot;">​</a></h3><p><a href="https://kotlinlang.org/docs/native-overview.html" target="_blank" rel="noreferrer">Kotlin/Native</a> 是一種將 Kotlin 程式碼編譯為原生二進位檔案的技術，這些檔案無需虛擬機器即可執行。它包含一個用於 Kotlin 編譯器的 <a href="https://llvm.org/" target="_blank" rel="noreferrer">基於 LLVM</a> 的後端，以及 Kotlin 標準函式庫的原生實作。</p><p>Kotlin/Native 主要設計用於允許為不適用或不可能使用虛擬機器的平台進行編譯，例如嵌入式裝置和 iOS。當您需要產生不需要額外執行時或虛擬機器的獨立程式時，它特別適用。</p><p>例如，在行動應用程式中，用 Kotlin 編寫的共享程式碼會透過 Kotlin/JVM 編譯為 Android 的 JVM 位元組碼，並透過 Kotlin/Native 編譯為 iOS 的原生二進位檔案。這使得與 Kotlin Multiplatform 的整合在兩個平台上都無縫銜接。</p><p><img src="'+t+'" alt="Kotlin/Native 和 Kotlin/JVM 二進位檔案" width="350"></p><h3 id="如何加快-kotlin-multiplatform-模組在原生平台-ios、macos、linux-上的編譯速度" tabindex="-1">如何加快 Kotlin Multiplatform 模組在原生平台（iOS、macOS、Linux）上的編譯速度？ <a class="header-anchor" href="#如何加快-kotlin-multiplatform-模組在原生平台-ios、macos、linux-上的編譯速度" aria-label="Permalink to &quot;如何加快 Kotlin Multiplatform 模組在原生平台（iOS、macOS、Linux）上的編譯速度？&quot;">​</a></h3><p>請參閱這些 <a href="https://kotlinlang.org/docs/native-improving-compilation-time.html" target="_blank" rel="noreferrer">改善 Kotlin/Native 編譯時間的技巧</a>。</p><h2 id="compose-multiplatform" tabindex="-1">Compose Multiplatform <a class="header-anchor" href="#compose-multiplatform" aria-label="Permalink to &quot;Compose Multiplatform&quot;">​</a></h2><h3 id="什麼是-compose-multiplatform" tabindex="-1">什麼是 Compose Multiplatform？ <a class="header-anchor" href="#什麼是-compose-multiplatform" aria-label="Permalink to &quot;什麼是 Compose Multiplatform？&quot;">​</a></h3><p><a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 是 JetBrains 開發的一個現代化聲明式、響應式 UI 框架，它提供了一種使用少量 Kotlin 程式碼構建使用者介面的簡單方法。它還允許您一次編寫 UI，並在任何支援的平台 – iOS、Android、桌面版 (Windows, macOS, Linux) 和網頁 – 上執行。</p><h3 id="它與適用於-android-的-jetpack-compose-有何關係" tabindex="-1">它與適用於 Android 的 Jetpack Compose 有何關係？ <a class="header-anchor" href="#它與適用於-android-的-jetpack-compose-有何關係" aria-label="Permalink to &quot;它與適用於 Android 的 Jetpack Compose 有何關係？&quot;">​</a></h3><p>Compose Multiplatform 與 Google 開發的 Android UI 框架 <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> 共享其大部分 API。事實上，當您使用 Compose Multiplatform 以 Android 為目標時，您的應用程式僅在 Jetpack Compose 上執行。Compose Multiplatform 所針對的其他平台可能在底層實作細節上與 Android 上的 Jetpack Compose 不同，但它們仍然為您提供相同的 API。</p><p>有關詳細資訊，請參閱 <a href="./compose-multiplatform-and-jetpack-compose">框架相互關係概覽</a>。</p><h3 id="我可以在哪些平台之間共享我的-ui" tabindex="-1">我可以在哪些平台之間共享我的 UI？ <a class="header-anchor" href="#我可以在哪些平台之間共享我的-ui" aria-label="Permalink to &quot;我可以在哪些平台之間共享我的 UI？&quot;">​</a></h3><p>我們希望您能夠選擇在任何熱門平台組合之間共享 UI – Android、iOS、桌面 (Linux, macOS, Windows) 和網頁 (基於 Wasm)。Compose Multiplatform 目前僅對 Android、iOS 和桌面平台穩定。有關更多詳細資訊，請參閱 <a href="./supported-platforms">支援平台</a>。</p><h3 id="我可以在生產環境中使用-compose-multiplatform-嗎" tabindex="-1">我可以在生產環境中使用 Compose Multiplatform 嗎？ <a class="header-anchor" href="#我可以在生產環境中使用-compose-multiplatform-嗎" aria-label="Permalink to &quot;我可以在生產環境中使用 Compose Multiplatform 嗎？&quot;">​</a></h3><p>Compose Multiplatform 的 Android、iOS 和桌面目標已穩定。您可以在生產環境中使用它們。</p><p>基於 WebAssembly 的 Compose Multiplatform 網頁版本處於 Alpha 階段，這表示它正在積極開發中。您可以謹慎使用，並預期可能會有遷移問題。它的 UI 與 Compose Multiplatform 針對 iOS、Android 和桌面平台的 UI 相同。</p><h3 id="如何建立新的-compose-multiplatform-專案" tabindex="-1">如何建立新的 Compose Multiplatform 專案？ <a class="header-anchor" href="#如何建立新的-compose-multiplatform-專案" aria-label="Permalink to &quot;如何建立新的 Compose Multiplatform 專案？&quot;">​</a></h3><p><a href="./compose-multiplatform-create-first-app">使用共享邏輯和 UI 建立 Compose Multiplatform 應用程式</a> 教學課程提供了建立適用於 Android、iOS 和桌面平台的 Compose Multiplatform 專案的逐步說明。您也可以觀看 Kotlin 開發者倡導者 Sebastian Aigner 在 YouTube 上建立的 <a href="https://www.youtube.com/watch?v=5_W5YKPShZ4" target="_blank" rel="noreferrer">影片教學</a>。</p><h3 id="我應該使用哪個-ide-來建構使用-compose-multiplatform-的應用程式" tabindex="-1">我應該使用哪個 IDE 來建構使用 Compose Multiplatform 的應用程式？ <a class="header-anchor" href="#我應該使用哪個-ide-來建構使用-compose-multiplatform-的應用程式" aria-label="Permalink to &quot;我應該使用哪個 IDE 來建構使用 Compose Multiplatform 的應用程式？&quot;">​</a></h3><p>我們建議使用 Android Studio IDE。有關更多詳細資訊，請參閱 <a href="./recommended-ides">推薦的 IDE 和程式碼編輯器</a>。</p><h3 id="我可以試玩範例應用程式嗎-在哪裡可以找到它" tabindex="-1">我可以試玩範例應用程式嗎？在哪裡可以找到它？ <a class="header-anchor" href="#我可以試玩範例應用程式嗎-在哪裡可以找到它" aria-label="Permalink to &quot;我可以試玩範例應用程式嗎？在哪裡可以找到它？&quot;">​</a></h3><p>您可以試用我們的 <a href="./multiplatform-samples">範例</a>。</p><h3 id="compose-multiplatform-附帶小工具嗎" tabindex="-1">Compose Multiplatform 附帶小工具嗎？ <a class="header-anchor" href="#compose-multiplatform-附帶小工具嗎" aria-label="Permalink to &quot;Compose Multiplatform 附帶小工具嗎？&quot;">​</a></h3><p>是的，Compose Multiplatform 提供對 <a href="https://m3.material.io/" target="_blank" rel="noreferrer">Material 3</a> 小工具的完整支援。</p><h3 id="我可以在多大程度上自訂-material-小工具的外觀" tabindex="-1">我可以在多大程度上自訂 Material 小工具的外觀？ <a class="header-anchor" href="#我可以在多大程度上自訂-material-小工具的外觀" aria-label="Permalink to &quot;我可以在多大程度上自訂 Material 小工具的外觀？&quot;">​</a></h3><p>您可以使用 Material 的主題功能來自訂顏色、字體和間距。如果您想建立獨特的設計，您可以建立自訂小工具和佈局。</p><h3 id="我可以在現有的-kotlin-multiplatform-應用程式中共享-ui-嗎" tabindex="-1">我可以在現有的 Kotlin Multiplatform 應用程式中共享 UI 嗎？ <a class="header-anchor" href="#我可以在現有的-kotlin-multiplatform-應用程式中共享-ui-嗎" aria-label="Permalink to &quot;我可以在現有的 Kotlin Multiplatform 應用程式中共享 UI 嗎？&quot;">​</a></h3><p>如果您的應用程式使用原生 API 作為其 UI（這是最常見的情況），您可以逐步將部分重寫為 Compose Multiplatform，因為它為此提供了互通性。您可以用一個特殊的互通視圖替換原生 UI，該視圖封裝了用 Compose 編寫的通用 UI。</p><h3 id="我有一個現有的-android-應用程式-它使用-jetpack-compose。我應該如何將其遷移到其他平台" tabindex="-1">我有一個現有的 Android 應用程式，它使用 Jetpack Compose。我應該如何將其遷移到其他平台？ <a class="header-anchor" href="#我有一個現有的-android-應用程式-它使用-jetpack-compose。我應該如何將其遷移到其他平台" aria-label="Permalink to &quot;我有一個現有的 Android 應用程式，它使用 Jetpack Compose。我應該如何將其遷移到其他平台？&quot;">​</a></h3><p>應用程式的遷移包含兩部分：遷移 UI 和遷移邏輯。遷移的複雜度取決於您的應用程式複雜度和您使用的 Android 特定函式庫數量。您可以在不改變的情況下將大部分螢幕遷移到 Compose Multiplatform。所有 Jetpack Compose 小工具都受支援。然而，有些 API 僅在 Android 目標中有效 – 它們可能是 Android 特定的，或者尚未被移植到其他平台。例如，資源處理是 Android 特定的，因此您需要遷移到 <a href="./compose-multiplatform-resources">Compose Multiplatform 資源函式庫</a> 或使用社群解決方案。Android <a href="https://developer.android.com/jetpack/androidx/releases/navigation" target="_blank" rel="noreferrer">導航函式庫</a> 也是 Android 特定的，但有 <a href="./compose-navigation-routing">社群替代方案</a> 可用。有關僅適用於 Android 的元件的更多資訊，請參閱目前的 <a href="./compose-android-only-components">Android 專用 API 列表</a>。</p><p>您需要將 <a href="./multiplatform-integrate-in-existing-app">業務邏輯遷移到 Kotlin Multiplatform</a>。當您嘗試將程式碼移至共享模組時，使用 Android 依賴項的部分將停止編譯，您需要重寫它們。</p><ul><li>您可以重寫使用 Android 專用依賴項的程式碼，改用多平台函式庫。某些函式庫可能已支援 Kotlin Multiplatform，因此無需更改。您可以查看 <a href="https://github.com/terrakok/kmp-awesome" target="_blank" rel="noreferrer">KMP-awesome</a> 函式庫列表。</li><li>或者，您可以將通用程式碼與平台特定邏輯分離，並 <a href="./multiplatform-connect-to-apis">提供通用介面</a>，這些介面會根據平台以不同方式實作。在 Android 上，實作可以使用您現有的功能；而在其他平台（如 iOS）上，您需要為通用介面提供新的實作。</li></ul><h3 id="我可以將-compose-畫面整合到現有的-ios-應用程式中嗎" tabindex="-1">我可以將 Compose 畫面整合到現有的 iOS 應用程式中嗎？ <a class="header-anchor" href="#我可以將-compose-畫面整合到現有的-ios-應用程式中嗎" aria-label="Permalink to &quot;我可以將 Compose 畫面整合到現有的 iOS 應用程式中嗎？&quot;">​</a></h3><p>是的。Compose Multiplatform 支援不同的整合情境。有關與 iOS UI 框架整合的更多資訊，請參閱 <a href="./compose-swiftui-integration">與 SwiftUI 整合</a> 和 <a href="./compose-uikit-integration">與 UIKit 整合</a>。</p><h3 id="我可以將-uikit-或-swiftui-元件整合到-compose-畫面中嗎" tabindex="-1">我可以將 UIKit 或 SwiftUI 元件整合到 Compose 畫面中嗎？ <a class="header-anchor" href="#我可以將-uikit-或-swiftui-元件整合到-compose-畫面中嗎" aria-label="Permalink to &quot;我可以將 UIKit 或 SwiftUI 元件整合到 Compose 畫面中嗎？&quot;">​</a></h3><p>是的，您可以。請參閱 <a href="./compose-swiftui-integration">與 SwiftUI 整合</a> 和 <a href="./compose-uikit-integration">與 UIKit 整合</a>。</p><h3 id="當我的行動作業系統更新並更改系統元件的視覺樣式或行為時會發生什麼" tabindex="-1">當我的行動作業系統更新並更改系統元件的視覺樣式或行為時會發生什麼？ <a class="header-anchor" href="#當我的行動作業系統更新並更改系統元件的視覺樣式或行為時會發生什麼" aria-label="Permalink to &quot;當我的行動作業系統更新並更改系統元件的視覺樣式或行為時會發生什麼？&quot;">​</a></h3><p>作業系統更新後，您的 UI 將保持不變，因為所有元件都是繪製在畫布上的。如果您在螢幕中嵌入原生 iOS 元件，更新可能會影響其外觀。</p><h2 id="未來計劃" tabindex="-1">未來計劃 <a class="header-anchor" href="#未來計劃" aria-label="Permalink to &quot;未來計劃&quot;">​</a></h2><h3 id="kotlin-multiplatform-的發展計劃是什麼" tabindex="-1">Kotlin Multiplatform 的發展計劃是什麼？ <a class="header-anchor" href="#kotlin-multiplatform-的發展計劃是什麼" aria-label="Permalink to &quot;Kotlin Multiplatform 的發展計劃是什麼？&quot;">​</a></h3><p>我們 JetBrains 正在大力投入，旨在為多平台開發提供最佳體驗，並消除多平台使用者現有的痛點。我們計劃改進核心 Kotlin Multiplatform 技術、與 Apple 生態系統的整合、工具，以及我們的 Compose Multiplatform UI 框架。查看我們的 <a href="https://blog.jetbrains.com/kotlin/2024/10/kotlin-multiplatform-development-roadmap-for-2025/" target="_blank" rel="noreferrer">發展藍圖</a>。</p><h3 id="compose-multiplatform-何時會變得穩定" tabindex="-1">Compose Multiplatform 何時會變得穩定？ <a class="header-anchor" href="#compose-multiplatform-何時會變得穩定" aria-label="Permalink to &quot;Compose Multiplatform 何時會變得穩定？&quot;">​</a></h3><p>Compose Multiplatform 對於 Android、iOS 和桌面平台已穩定，而網頁平台支援則處於 Alpha 階段。我們正朝著網頁平台的穩定版本努力，確切日期將另行公佈。</p><p>有關穩定狀態的更多資訊，請參閱 <a href="./supported-platforms">支援平台</a>。</p><h3 id="kotlin-和-compose-multiplatform-中網頁目標的未來支援如何" tabindex="-1">Kotlin 和 Compose Multiplatform 中網頁目標的未來支援如何？ <a class="header-anchor" href="#kotlin-和-compose-multiplatform-中網頁目標的未來支援如何" aria-label="Permalink to &quot;Kotlin 和 Compose Multiplatform 中網頁目標的未來支援如何？&quot;">​</a></h3><p>我們目前正將資源集中於 WebAssembly (Wasm)，它展現了巨大的潛力。您可以試用我們新的 <a href="https://kotlinlang.org/docs/wasm-overview.html" target="_blank" rel="noreferrer">Kotlin/Wasm 後端</a> 和由 Wasm 驅動的 <a href="https://kotl.in/wasm-compose-example" target="_blank" rel="noreferrer">Compose Multiplatform for Web</a>。</p><p>至於 JS 目標，Kotlin/JS 後端已經達到穩定狀態。在 Compose Multiplatform 中，由於資源限制，我們已將重點從 JS Canvas 轉移到 Wasm，我們相信這更有前景。</p><p>我們還提供 Compose HTML，以前稱為 Compose Multiplatform for web。它是一個額外的函式庫，專為在 Kotlin/JS 中處理 DOM 而設計，不適用於跨平台共享 UI。</p><h3 id="有沒有改善多平台開發工具的計劃" tabindex="-1">有沒有改善多平台開發工具的計劃？ <a class="header-anchor" href="#有沒有改善多平台開發工具的計劃" aria-label="Permalink to &quot;有沒有改善多平台開發工具的計劃？&quot;">​</a></h3><p>是的，我們非常清楚多平台工具目前面臨的挑戰，並正在積極努力在多個領域進行改進。</p><h3 id="您會提供-swift-互通性嗎" tabindex="-1">您會提供 Swift 互通性嗎？ <a class="header-anchor" href="#您會提供-swift-互通性嗎" aria-label="Permalink to &quot;您會提供 Swift 互通性嗎？&quot;">​</a></h3><p>是的。我們目前正在研究提供與 Swift 直接互通性的各種方法，重點是將 Kotlin 程式碼匯出到 Swift。</p>',81)]))}const k=o(r,[["render",p]]);export{c as __pageData,k as default};
