import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Kotlin 1.8.0の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew18.md","filePath":"ja/kotlin/whatsnew18.md","lastUpdated":1754307826000}'),n={name:"ja/kotlin/whatsnew18.md"};function l(o,i,r,d,p,h){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="kotlin-1-8-0の新機能" tabindex="-1">Kotlin 1.8.0の新機能 <a class="header-anchor" href="#kotlin-1-8-0の新機能" aria-label="Permalink to &quot;Kotlin 1.8.0の新機能&quot;">​</a></h1><p><em><a href="/ja/kotlin/releases#release-details">リリース日: 2022年12月28日</a></em></p><p>Kotlin 1.8.0がリリースされました。主なハイライトは以下のとおりです。</p><ul><li><a href="#recursive-copying-or-deletion-of-directories">JVM向け新規実験的関数: ディレクトリ内容の再帰的コピーまたは削除</a></li><li><a href="#improved-kotlin-reflect-performance">kotlin-reflectのパフォーマンス向上</a></li><li><a href="#a-new-compiler-option-for-disabling-optimizations">デバッグ体験を向上させる新しい<code>-Xdebug</code>コンパイラオプション</a></li><li><a href="#updated-jvm-compilation-target"><code>kotlin-stdlib-jdk7</code>と<code>kotlin-stdlib-jdk8</code>を<code>kotlin-stdlib</code>に統合</a></li><li><a href="#improved-objective-c-swift-interoperability">Objective-C/Swift相互運用性の向上</a></li><li><a href="#gradle">Gradle 7.3との互換性</a></li></ul><h2 id="ideサポート" tabindex="-1">IDEサポート <a class="header-anchor" href="#ideサポート" aria-label="Permalink to &quot;IDEサポート&quot;">​</a></h2><p>Kotlin 1.8.0をサポートするKotlinプラグインは、以下のIDEで利用できます。</p><table tabindex="0"><thead><tr><th>IDE</th><th>サポートされるバージョン</th></tr></thead><tbody><tr><td>IntelliJ IDEA</td><td>2021.3, 2022.1, 2022.2</td></tr><tr><td>Android Studio</td><td>Electric Eel (221), Flamingo (222)</td></tr></tbody></table><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>IntelliJ IDEA 2022.3では、IDEプラグインを更新することなく、プロジェクトをKotlin 1.8.0に更新できます。 IntelliJ IDEA 2022.3で既存のプロジェクトをKotlin 1.8.0に移行するには、Kotlinのバージョンを<code>1.8.0</code>に変更し、 GradleまたはMavenプロジェクトを再インポートします。</p></div><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>バージョン1.8.0から、コンパイラはJVM 19に対応するバイトコードバージョンのクラスを生成できるようになりました。 新しい言語バージョンには、以下の機能も含まれています。</p><ul><li><a href="#ability-to-not-generate-type-use-and-type-parameter-annotation-targets">JVMアノテーションターゲットの生成を無効にするコンパイラオプション</a></li><li><a href="#a-new-compiler-option-for-disabling-optimizations">最適化を無効にする新しい<code>-Xdebug</code>コンパイラオプション</a></li><li><a href="#removal-of-the-old-backend">旧バックエンドの削除</a></li><li><a href="#support-for-lombok-s-builder-annotation">Lombokの<code>@Builder</code>アノテーションのサポート</a></li></ul><h3 id="type-useおよびtype-parameterアノテーションターゲットを生成しない機能" tabindex="-1">TYPE_USEおよびTYPE_PARAMETERアノテーションターゲットを生成しない機能 <a class="header-anchor" href="#type-useおよびtype-parameterアノテーションターゲットを生成しない機能" aria-label="Permalink to &quot;TYPE_USEおよびTYPE_PARAMETERアノテーションターゲットを生成しない機能&quot;">​</a></h3><p>KotlinアノテーションがKotlinターゲットの中に<code>TYPE</code>を持つ場合、そのアノテーションはJavaアノテーションターゲットのリストで <code>java.lang.annotation.ElementType.TYPE_USE</code>にマップされます。これは、<code>TYPE_PARAMETER</code> Kotlinターゲットが <code>java.lang.annotation.ElementType.TYPE_PARAMETER</code> Javaターゲットにマップされるのと同じです。 これは、APIレベルが26未満のAndroidクライアントにとって問題となります。これらのターゲットはAPIに存在しないためです。</p><p>Kotlin 1.8.0から、新しいコンパイラオプション<code>-Xno-new-java-annotation-targets</code>を使用することで、 <code>TYPE_USE</code>および<code>TYPE_PARAMETER</code>アノテーションターゲットの生成を回避できます。</p><h3 id="最適化を無効にする新しいコンパイラオプション" tabindex="-1">最適化を無効にする新しいコンパイラオプション <a class="header-anchor" href="#最適化を無効にする新しいコンパイラオプション" aria-label="Permalink to &quot;最適化を無効にする新しいコンパイラオプション&quot;">​</a></h3><p>Kotlin 1.8.0では、デバッグ体験を向上させるために最適化を無効にする新しい<code>-Xdebug</code>コンパイラオプションが追加されました。 現時点では、このオプションはコルーチンの「was optimized out」機能を無効にします。 将来的には、さらなる最適化が追加された後も、このオプションはそれらを無効にします。</p><p>「was optimized out」機能は、中断関数を使用する際に変数を最適化します。しかし、最適化された変数では値が見えないため、 コードのデバッグが困難になります。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><strong>本番環境ではこのオプションを絶対に使用しないでください</strong>: <code>-Xdebug</code>によるこの機能の無効化は、 <a href="https://youtrack.jetbrains.com/issue/KT-48678/Coroutine-debugger-disable-was-optimised-out-compiler-feature#focus=Comments-27-6015585.0-0" target="_blank" rel="noreferrer">メモリリークを引き起こす可能性があります</a>。</p></div><h3 id="旧バックエンドの削除" tabindex="-1">旧バックエンドの削除 <a class="header-anchor" href="#旧バックエンドの削除" aria-label="Permalink to &quot;旧バックエンドの削除&quot;">​</a></h3><p>Kotlin 1.5.0で、IRベースのバックエンドが<a href="/ja/kotlin/components-stability">Stable</a>になったことを<a href="/ja/kotlin/whatsnew15#stable-jvm-ir-backend">発表しました</a>。 これは、Kotlin 1.4.*の旧バックエンドが非推奨になったことを意味しました。 Kotlin 1.8.0では、旧バックエンドを完全に削除しました。 これにより、コンパイラオプション<code>-Xuse-old-backend</code>とGradleの<code>useOldBackend</code>オプションも削除されました。</p><h3 id="lombokの-builderアノテーションのサポート" tabindex="-1">Lombokの@Builderアノテーションのサポート <a class="header-anchor" href="#lombokの-builderアノテーションのサポート" aria-label="Permalink to &quot;Lombokの@Builderアノテーションのサポート&quot;">​</a></h3><p>コミュニティからの<a href="https://youtrack.jetbrains.com/issue/KT-46959" target="_blank" rel="noreferrer">Kotlin Lombok: Support generated builders (@Builder)</a> YouTrackイシューへの多くの投票により、<a href="https://projectlombok.org/features/Builder" target="_blank" rel="noreferrer">@Builderアノテーション</a>をサポートせざるを得なくなりました。</p><p><code>@SuperBuilder</code>や<code>@Tolerate</code>アノテーションのサポートはまだ計画していませんが、 <a href="https://youtrack.jetbrains.com/issue/KT-53563/Kotlin-Lombok-Support-SuperBuilder" target="_blank" rel="noreferrer">@SuperBuilder</a>と <a href="https://youtrack.jetbrains.com/issue/KT-53564/Kotlin-Lombok-Support-Tolerate" target="_blank" rel="noreferrer">@Tolerate</a>のイシューに十分な投票があれば再検討します。</p><p><a href="/ja/kotlin/lombok#gradle">Lombokコンパイラプラグインの設定方法を学ぶ</a>。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.8.0には、Objective-CとSwiftの相互運用性への変更、Xcode 14.1のサポート、 およびCocoaPods Gradleプラグインの改善が含まれています。</p><ul><li><a href="#support-for-xcode-14-1">Xcode 14.1のサポート</a></li><li><a href="#improved-objective-c-swift-interoperability">Objective-C/Swift相互運用性の向上</a></li><li><a href="#dynamic-frameworks-by-default-in-the-cocoapods-gradle-plugin">CocoaPods Gradleプラグインにおける動的フレームワークのデフォルト化</a></li></ul><h3 id="xcode-14-1のサポート" tabindex="-1">Xcode 14.1のサポート <a class="header-anchor" href="#xcode-14-1のサポート" aria-label="Permalink to &quot;Xcode 14.1のサポート&quot;">​</a></h3><p>Kotlin/Nativeコンパイラが最新の安定版Xcodeバージョン14.1をサポートするようになりました。互換性の向上には、以下の変更が含まれます。</p><ul><li>watchOSターゲット用に、Apple watchOSのARM64プラットフォームをサポートする新しい<code>watchosDeviceArm64</code>プリセットが追加されました。</li><li>Kotlin CocoaPods Gradleプラグインは、デフォルトでAppleフレームワークのビットコード埋め込みを行わなくなりました。</li><li>プラットフォームライブラリが更新され、AppleターゲットのObjective-Cフレームワークの変更が反映されました。</li></ul><h3 id="objective-c-swift相互運用性の向上" tabindex="-1">Objective-C/Swift相互運用性の向上 <a class="header-anchor" href="#objective-c-swift相互運用性の向上" aria-label="Permalink to &quot;Objective-C/Swift相互運用性の向上&quot;">​</a></h3><p>KotlinとObjective-C/Swiftの相互運用性を高めるために、3つの新しいアノテーションが追加されました。</p><ul><li><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-obj-c-name/" target="_blank" rel="noreferrer"><code>@ObjCName</code></a>は、Kotlin宣言の名前を変更する代わりに、 SwiftまたはObjective-Cでより慣用的な名前を指定できます。</p><p>このアノテーションは、Kotlinコンパイラに対し、このクラス、プロパティ、パラメータ、または関数にカスタムのObjective-CおよびSwift名を使用するよう指示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ObjCName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(swiftName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MySwiftArray&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyKotlinArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @ObjCName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ObjCName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;of&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) element: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage with the ObjCName annotations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">let array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySwiftArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">let index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(of: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;element&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-hidden-from-obj-c/" target="_blank" rel="noreferrer"><code>@HiddenFromObjC</code></a>は、 Kotlin宣言をObjective-Cから隠すことができます。</p><p>このアノテーションは、Kotlinコンパイラに対し、関数またはプロパティをObjective-C、ひいてはSwiftにエクスポートしないよう指示します。 これにより、KotlinコードをObjective-C/Swiftにより親しみやすくできます。</p></li><li><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-should-refine-in-swift/" target="_blank" rel="noreferrer"><code>@ShouldRefineInSwift</code></a>は、 Kotlin宣言をSwiftで書かれたラッパーに置き換える場合に役立ちます。</p><p>このアノテーションは、Kotlinコンパイラに対し、生成されたObjective-C APIで関数またはプロパティを<code>swift_private</code>としてマークするよう指示します。 このような宣言には<code>__</code>プレフィックスが付与され、Swiftコードからは見えなくなります。</p><p>これらの宣言は、SwiftコードでSwiftに親しみやすいAPIを作成するために引き続き使用できますが、 例えばXcodeの自動補完では提案されません。</p><p>SwiftでObjective-C宣言を洗練する方法の詳細については、 <a href="https://developer.apple.com/documentation/swift/improving-objective-c-api-declarations-for-swift" target="_blank" rel="noreferrer">公式Appleドキュメント</a>を参照してください。</p></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>新しいアノテーションは<a href="/ja/kotlin/opt-in-requirements">オプトイン</a>が必要です。</p></div><p>Kotlinチームは、これらのアノテーションを実装してくれた<a href="https://github.com/rickclephas" target="_blank" rel="noreferrer">Rick Clephas</a>に非常に感謝しています。</p><h3 id="cocoapods-gradleプラグインにおける動的フレームワークのデフォルト化" tabindex="-1">CocoaPods Gradleプラグインにおける動的フレームワークのデフォルト化 <a class="header-anchor" href="#cocoapods-gradleプラグインにおける動的フレームワークのデフォルト化" aria-label="Permalink to &quot;CocoaPods Gradleプラグインにおける動的フレームワークのデフォルト化&quot;">​</a></h3><p>Kotlin 1.8.0から、CocoaPods Gradleプラグインによって登録されるKotlinフレームワークは、デフォルトで動的にリンクされるようになりました。 以前の静的実装は、Kotlin Gradleプラグインの動作と一貫性がありませんでした。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyFramework&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            isStatic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Now dynamic by default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>静的リンクタイプの既存プロジェクトがあり、Kotlin 1.8.0にアップグレードした場合（またはリンクタイプを明示的に変更した場合）、 プロジェクトの実行でエラーが発生する可能性があります。これを解決するには、Xcodeプロジェクトを閉じ、 Podfileディレクトリで<code>pod install</code>を実行してください。</p><p>詳細については、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-dsl-reference.html" target="_blank" rel="noreferrer">CocoaPods GradleプラグインDSLリファレンス</a>を参照してください。</p><h2 id="kotlin-multiplatform-新しいandroidソースセットレイアウト" tabindex="-1">Kotlin Multiplatform: 新しいAndroidソースセットレイアウト <a class="header-anchor" href="#kotlin-multiplatform-新しいandroidソースセットレイアウト" aria-label="Permalink to &quot;Kotlin Multiplatform: 新しいAndroidソースセットレイアウト&quot;">​</a></h2><p>Kotlin 1.8.0では、以前のディレクトリ命名スキームに代わる新しいAndroidソースセットレイアウトが導入されました。 以前のスキームは、複数の点で混乱を招いていました。</p><p>現在のレイアウトで作成される2つの<code>androidTest</code>ディレクトリの例を考えてみましょう。 1つは<code>KotlinSourceSets</code>用で、もう1つは<code>AndroidSourceSets</code>用です。</p><ul><li>これらは異なるセマンティクスを持ちます。Kotlinの<code>androidTest</code>は<code>unitTest</code>タイプに属し、 Androidの<code>androidTest</code>は<code>integrationTest</code>タイプに属します。</li><li><code>src/androidTest/kotlin</code>が<code>UnitTest</code>を持ち、<code>src/androidTest/java</code>が<code>InstrumentedTest</code>を持つため、 混乱を招く<code>SourceDirectories</code>レイアウトが作成されます。</li><li><code>KotlinSourceSets</code>と<code>AndroidSourceSets</code>はどちらもGradle設定に類似した命名スキームを使用するため、 両方の<code>androidTest</code>ソースセットの結果として得られる設定は、 <code>androidTestImplementation</code>、<code>androidTestApi</code>、<code>androidTestRuntimeOnly</code>、<code>androidTestCompileOnly</code>と同じになります。</li></ul><p>これらの既存の問題に対処するために、新しいAndroidソースセットレイアウトが導入されました。 2つのレイアウト間の主な違いをいくつか示します。</p><h4 id="kotlinsourceset命名スキーム" tabindex="-1">KotlinSourceSet命名スキーム <a class="header-anchor" href="#kotlinsourceset命名スキーム" aria-label="Permalink to &quot;KotlinSourceSet命名スキーム&quot;">​</a></h4><table tabindex="0"><thead><tr><th>現在のソースセットレイアウト</th><th>新しいソースセットレイアウト</th></tr></thead><tbody><tr><td><code>targetName</code> + <code>AndroidSourceSet.name</code></td><td><code>targetName</code> + <code>AndroidVariantType</code></td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code>は<code>{KotlinSourceSet.name}</code>に以下のようにマップされます。</p><table tabindex="0"><thead><tr><th></th><th>現在のソースセットレイアウト</th><th>新しいソースセットレイアウト</th></tr></thead><tbody><tr><td>main</td><td>androidMain</td><td>androidMain</td></tr><tr><td>test</td><td>androidTest</td><td>android<strong>Unit</strong>Test</td></tr><tr><td>androidTest</td><td>android<strong>Android</strong>Test</td><td>android<strong>Instrumented</strong>Test</td></tr></tbody></table><h4 id="sourcedirectories" tabindex="-1">SourceDirectories <a class="header-anchor" href="#sourcedirectories" aria-label="Permalink to &quot;SourceDirectories&quot;">​</a></h4><table tabindex="0"><thead><tr><th>現在のソースセットレイアウト</th><th>新しいソースセットレイアウト</th></tr></thead><tbody><tr><td>レイアウトは追加の<code>/kotlin</code> SourceDirectoriesを追加します</td><td><code>src/{AndroidSourceSet.name}/kotlin</code>、<code>src/{KotlinSourceSet.name}/kotlin</code></td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code>は<code>{SourceDirectories included}</code>に以下のようにマップされます。</p><table tabindex="0"><thead><tr><th></th><th>現在のソースセットレイアウト</th><th>新しいソースセットレイアウト</th></tr></thead><tbody><tr><td>main</td><td>src/androidMain/kotlin, src/main/kotlin, src/main/java</td><td>src/androidMain/kotlin, src/main/kotlin, src/main/java</td></tr><tr><td>test</td><td>src/androidTest/kotlin, src/test/kotlin, src/test/java</td><td>src/android<strong>Unit</strong>Test/kotlin, src/test/kotlin, src/test/java</td></tr><tr><td>androidTest</td><td>src/android<strong>Android</strong>Test/kotlin, src/androidTest/java</td><td>src/android<strong>Instrumented</strong>Test/kotlin, src/androidTest/java, <strong>src/androidTest/kotlin</strong></td></tr></tbody></table><h4 id="androidmanifest-xmlファイルの場所" tabindex="-1"><code>AndroidManifest.xml</code>ファイルの場所 <a class="header-anchor" href="#androidmanifest-xmlファイルの場所" aria-label="Permalink to &quot;\`AndroidManifest.xml\`ファイルの場所&quot;">​</a></h4><table tabindex="0"><thead><tr><th>現在のソースセットレイアウト</th><th>新しいソースセットレイアウト</th></tr></thead><tbody><tr><td>src/{<strong>Android</strong>SourceSet.name}/AndroidManifest.xml</td><td>src/{<strong>Kotlin</strong>SourceSet.name}/AndroidManifest.xml</td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code>は<code>{AndroidManifest.xml location}</code>に以下のようにマップされます。</p><table tabindex="0"><thead><tr><th></th><th>現在のソースセットレイアウト</th><th>新しいソースセットレイアウト</th></tr></thead><tbody><tr><td>main</td><td>src/main/AndroidManifest.xml</td><td>src/<strong>android</strong>Main/AndroidManifest.xml</td></tr><tr><td>debug</td><td>src/debug/AndroidManifest.xml</td><td>src/<strong>android</strong>Debug/AndroidManifest.xml</td></tr></tbody></table><h4 id="androidと共通テストの関係" tabindex="-1">Androidと共通テストの関係 <a class="header-anchor" href="#androidと共通テストの関係" aria-label="Permalink to &quot;Androidと共通テストの関係&quot;">​</a></h4><p>新しいAndroidソースセットレイアウトは、Android計装テスト（新しいレイアウトでは<code>androidInstrumentedTest</code>に改名）と 共通テストの関係を変更します。</p><p>以前は、<code>androidAndroidTest</code>と<code>commonTest</code>の間にデフォルトの<code>dependsOn</code>関係がありました。 実際には、これは以下のことを意味していました。</p><ul><li><code>commonTest</code>のコードは<code>androidAndroidTest</code>で利用可能でした。</li><li><code>commonTest</code>の<code>expect</code>宣言には、<code>androidAndroidTest</code>に対応する<code>actual</code>実装が必要でした。</li><li><code>commonTest</code>で宣言されたテストも、Android計装テストとして実行されました。</li></ul><p>新しいAndroidソースセットレイアウトでは、<code>dependsOn</code>関係はデフォルトでは追加されません。 以前の動作を希望する場合は、<code>build.gradle.kts</code>ファイルでこの関係を手動で宣言してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> androidInstrumentedTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonTest)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="androidフレーバーのサポート" tabindex="-1">Androidフレーバーのサポート <a class="header-anchor" href="#androidフレーバーのサポート" aria-label="Permalink to &quot;Androidフレーバーのサポート&quot;">​</a></h4><p>以前は、Kotlin Gradleプラグインは、<code>debug</code>および<code>release</code>ビルドタイプ、または<code>demo</code>や<code>full</code>などのカスタムフレーバーに対応するAndroidソースセットを eagerly に作成していました。 これにより、<code>val androidDebug by getting { ... }</code>のような構成でアクセスできるようになりました。</p><p>新しいAndroidソースセットレイアウトでは、これらのソースセットは<code>afterEvaluate</code>フェーズで作成されます。 そのため、このような式は無効となり、<code>org.gradle.api.UnknownDomainObjectException: KotlinSourceSet with name &#39;androidDebug&#39; not found</code> のようなエラーが発生します。</p><p>これを回避するには、<code>build.gradle.kts</code>ファイルで新しい<code>invokeWhenCreated()</code> APIを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invokeWhenCreated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidFreeDebug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="設定とセットアップ" tabindex="-1">設定とセットアップ <a class="header-anchor" href="#設定とセットアップ" aria-label="Permalink to &quot;設定とセットアップ&quot;">​</a></h3><p>この新しいレイアウトは、将来のリリースでデフォルトになります。以下のGradleオプションで現在有効にできます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.androidSourceSetLayoutVersion=2</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>この新しいレイアウトには、Android Gradleプラグイン7.0以降が必要であり、Android Studio 2022.3以降でサポートされています。</p></div><p>以前のAndroidスタイルディレクトリの使用は非推奨となりました。 Kotlin 1.8.0は非推奨化サイクルの始まりを示し、現在のレイアウトに対する警告が導入されます。 以下のGradleプロパティを使用すると、この警告を抑制できます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.androidSourceSetLayoutVersion1.nowarn=true</span></span></code></pre></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin 1.8.0は、JS IRコンパイラバックエンドを安定化させ、JavaScript関連のGradleビルドスクリプトに新機能をもたらします。</p><ul><li><a href="#stable-js-ir-compiler-backend">安定版JS IRコンパイラバックエンド</a></li><li><a href="#new-settings-for-reporting-that-yarn-lock-has-been-updated"><code>yarn.lock</code>が更新されたことを報告する新しい設定</a></li><li><a href="#add-test-targets-for-browsers-via-gradle-properties">Gradleプロパティを介してブラウザのテストターゲットを追加する</a></li><li><a href="#new-approach-to-adding-css-support-to-your-project">プロジェクトにCSSサポートを追加する新しいアプローチ</a></li></ul><h3 id="安定版js-irコンパイラバックエンド" tabindex="-1">安定版JS IRコンパイラバックエンド <a class="header-anchor" href="#安定版js-irコンパイラバックエンド" aria-label="Permalink to &quot;安定版JS IRコンパイラバックエンド&quot;">​</a></h3><p>このリリースから、<a href="/ja/kotlin/js-ir-compiler">Kotlin/JS中間表現（IRベース）コンパイラ</a>バックエンドが安定版になりました。 3つのバックエンドのインフラストラクチャを統一するのに時間がかかりましたが、 現在ではすべてがKotlinコードに同じIRを使用しています。</p><p>JS IRコンパイラバックエンドが安定版になった結果、古いバックエンドは今後非推奨となります。</p><p>増分コンパイルは、安定版JS IRコンパイラとともにデフォルトで有効になっています。</p><p>古いコンパイラをまだ使用している場合は、<a href="/ja/kotlin/js-ir-migration">移行ガイド</a>を参考に、プロジェクトを新しいバックエンドに切り替えてください。</p><h3 id="yarn-lockが更新されたことを報告する新しい設定" tabindex="-1"><code>yarn.lock</code>が更新されたことを報告する新しい設定 <a class="header-anchor" href="#yarn-lockが更新されたことを報告する新しい設定" aria-label="Permalink to &quot;\`yarn.lock\`が更新されたことを報告する新しい設定&quot;">​</a></h3><p><code>yarn</code>パッケージマネージャーを使用している場合、<code>yarn.lock</code>ファイルが更新された際に通知を受け取れる3つの新しい特別なGradle設定があります。 これらの設定は、CIビルドプロセス中に<code>yarn.lock</code>がサイレントに変更された場合に通知を受け取りたいときに使用できます。</p><p>これら3つの新しいGradleプロパティは以下のとおりです。</p><ul><li><code>YarnLockMismatchReport</code>: <code>yarn.lock</code>ファイルへの変更を報告する方法を指定します。以下のいずれかの値を使用できます。 <ul><li><code>FAIL</code>: 対応するGradleタスクを失敗させます。これがデフォルトです。</li><li><code>WARNING</code>: 変更に関する情報を警告ログに書き込みます。</li><li><code>NONE</code>: 報告を無効にします。</li></ul></li><li><code>reportNewYarnLock</code>: 最近作成された<code>yarn.lock</code>ファイルを明示的に報告します。 デフォルトではこのオプションは無効になっています。新しい<code>yarn.lock</code>ファイルは最初の起動時に生成されるのが一般的であるためです。 このオプションを使用して、ファイルがリポジトリにコミットされていることを確認できます。</li><li><code>yarnLockAutoReplace</code>: Gradleタスクが実行されるたびに<code>yarn.lock</code>を自動的に置き換えます。</li></ul><p>これらのオプションを使用するには、<code>build.gradle.kts</code>ファイルを次のように更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.targets.js.yarn.YarnLockMismatchReport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rootProject.plugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootProject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YarnRootExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().yarnLockMismatchReport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        YarnLockMismatchReport.WARNING </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NONE | FAIL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootProject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YarnRootExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().reportNewYarnLock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootProject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YarnRootExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().yarnLockAutoReplace </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="gradleプロパティを介してブラウザのテストターゲットを追加する" tabindex="-1">Gradleプロパティを介してブラウザのテストターゲットを追加する <a class="header-anchor" href="#gradleプロパティを介してブラウザのテストターゲットを追加する" aria-label="Permalink to &quot;Gradleプロパティを介してブラウザのテストターゲットを追加する&quot;">​</a></h3><p>Kotlin 1.8.0から、Gradleプロパティファイルでさまざまなブラウザのテストターゲットを直接設定できるようになりました。 これにより、すべてのターゲットを<code>build.gradle.kts</code>に記述する必要がなくなり、ビルドスクリプトファイルのサイズが縮小されます。</p><p>このプロパティを使用して、すべてのモジュールに対してブラウザのリストを定義し、 特定のモジュールのビルドスクリプトで特定のブラウザを追加できます。</p><p>たとえば、Gradleプロパティファイルの次の行は、すべてのモジュールでFirefoxとSafariでテストを実行します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.js.browser.karma.browsers=firefox,safari</span></span></code></pre></div><p>プロパティに<a href="https://github.com/JetBrains/kotlin/blob/master/libraries/tools/kotlin-gradle-plugin/src/common/kotlin/org/jetbrains/kotlin/gradle/targets/js/testing/karma/KotlinKarma.kt#L106" target="_blank" rel="noreferrer">利用可能な値の完全なリストはGitHub</a>で参照してください。</p><p>Kotlinチームは、この機能を実装してくれた<a href="https://github.com/mpetuska" target="_blank" rel="noreferrer">Martynas Petuška</a>に深く感謝しています。</p><h3 id="プロジェクトにcssサポートを追加する新しいアプローチ" tabindex="-1">プロジェクトにCSSサポートを追加する新しいアプローチ <a class="header-anchor" href="#プロジェクトにcssサポートを追加する新しいアプローチ" aria-label="Permalink to &quot;プロジェクトにCSSサポートを追加する新しいアプローチ&quot;">​</a></h3><p>このリリースでは、プロジェクトにCSSサポートを追加する新しいアプローチを提供します。 これにより多くのプロジェクトに影響が出ると予想されるため、以下に説明するようにGradleビルドスクリプトファイルを更新することを忘れないでください。</p><p>Kotlin 1.8.0より前は、<code>cssSupport.enabled</code>プロパティを使用してCSSサポートを追加していました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    commonWebpackConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cssSupport.enabled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>現在では、<code>cssSupport {}</code>ブロック内の<code>enabled.set()</code>メソッドを使用する必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    commonWebpackConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cssSupport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            enabled.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.8.0は、Gradleバージョン7.2および7.3を<strong>完全に</strong>サポートしています。 最新のGradleリリースまでのGradleバージョンも使用できますが、その場合、非推奨の警告や一部の新しいGradle機能が動作しない可能性があることに注意してください。</p><p>このバージョンでは多くの変更が加えられています。</p><ul><li><a href="#exposing-kotlin-compiler-options-as-gradle-lazy-properties">KotlinコンパイラオプションのGradle遅延プロパティとしての公開</a></li><li><a href="#bumping-the-minimum-supported-versions">サポートされる最小バージョンの引き上げ</a></li><li><a href="#ability-to-disable-the-kotlin-daemon-fallback-strategy">Kotlinデーモンフォールバック戦略の無効化機能</a></li><li><a href="#usage-of-the-latest-kotlin-stdlib-version-in-transitive-dependencies">推移的依存関係における最新のkotlin-stdlibバージョンの使用</a></li><li><a href="#obligatory-check-for-jvm-targets-of-related-kotlin-and-java-compile-tasks">関連するKotlinとJavaコンパイルタスクのJVMターゲット互換性一致に対する強制的なチェック</a></li><li><a href="#resolution-of-kotlin-gradle-plugins-transitive-dependencies">Kotlin Gradleプラグインの推移的依存関係の解決</a></li><li><a href="#deprecations-and-removals">非推奨と削除</a></li></ul><h3 id="kotlinコンパイラオプションのgradle遅延プロパティとしての公開" tabindex="-1">KotlinコンパイラオプションのGradle遅延プロパティとしての公開 <a class="header-anchor" href="#kotlinコンパイラオプションのgradle遅延プロパティとしての公開" aria-label="Permalink to &quot;KotlinコンパイラオプションのGradle遅延プロパティとしての公開&quot;">​</a></h3><p>利用可能なKotlinコンパイラオプションを<a href="https://docs.gradle.org/current/userguide/lazy_configuration.html" target="_blank" rel="noreferrer">Gradle遅延プロパティ</a> として公開し、Kotlinタスクにさらに統合するために、多くの変更が加えられました。</p><ul><li><p>コンパイルタスクには、既存の<code>kotlinOptions</code>に似ていますが、 戻り値の型としてGradle Properties APIの<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/provider/Property.html" target="_blank" rel="noreferrer"><code>Property</code></a> を使用する新しい<code>compilerOptions</code>入力があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compileKotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        useK2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Kotlinツールタスク<code>KotlinJsDce</code>と<code>KotlinNativeLink</code>には、既存の<code>kotlinOptions</code>入力に似た新しい<code>toolOptions</code>入力があります。</p></li><li><p>新しい入力は<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/Nested.html" target="_blank" rel="noreferrer"><code>@Nested</code> Gradleアノテーション</a>を持ちます。 入力内のすべてのプロパティには、<a href="https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:up_to_date_checks" target="_blank" rel="noreferrer"><code>@Input</code>や<code>@Internal</code></a> などの関連するGradleアノテーションがあります。</p></li><li><p>Kotlin GradleプラグインAPIアーティファクトには、2つの新しいインターフェースがあります。</p><ul><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask</code>: <code>compilerOptions</code>入力と<code>compileOptions()</code>メソッドを持ちます。 すべてのKotlinコンパイルタスクがこのインターフェースを実装します。</li><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinToolTask</code>: <code>toolOptions</code>入力と<code>toolOptions()</code>メソッドを持ちます。 すべてのKotlinツールタスク（<code>KotlinJsDce</code>、<code>KotlinNativeLink</code>、<code>KotlinNativeLinkArtifactTask</code>）がこのインターフェースを実装します。</li></ul></li><li><p>一部の<code>compilerOptions</code>は、<code>String</code>型ではなく新しい型を使用します。</p><ul><li><a href="https://github.com/JetBrains/kotlin/blob/1.8.0/libraries/tools/kotlin-gradle-compiler-types/src/generated/kotlin/org/jetbrains/kotlin/gradle/dsl/JvmTarget.kt" target="_blank" rel="noreferrer"><code>JvmTarget</code></a></li><li><a href="https://github.com/JetBrains/kotlin/blob/1.8.0/libraries/tools/kotlin-gradle-compiler-types/src/generated/kotlin/org/jetbrains/kotlin/gradle/dsl/KotlinVersion.kt" target="_blank" rel="noreferrer"><code>KotlinVersion</code></a> （<code>apiVersion</code>および<code>languageVersion</code>入力用）</li><li><a href="https://github.com/JetBrains/kotlin/blob/1.8.0/libraries/tools/kotlin-gradle-compiler-types/src/generated/kotlin/org/jetbrains/kotlin/gradle/dsl/JsMainFunctionExecutionMode.kt" target="_blank" rel="noreferrer"><code>JsMainFunctionExecutionMode</code></a></li><li><a href="https://github.com/JetBrains/kotlin/blob/1.8.0/libraries/tools/kotlin-gradle-compiler-types/src/generated/kotlin/org/jetbrains/kotlin/gradle/dsl/JsModuleKind.kt" target="_blank" rel="noreferrer"><code>JsModuleKind</code></a></li><li><a href="https://github.com/JetBrains/kotlin/blob/1.8.0/libraries/tools/kotlin-gradle-compiler-types/src/generated/kotlin/org/jetbrains/kotlin/gradle/dsl/JsSourceMapEmbedMode.kt" target="_blank" rel="noreferrer"><code>JsSourceMapEmbedMode</code></a></li></ul><p>例：<code>kotlinOptions.jvmTarget = &quot;11&quot;</code>の代わりに<code>compilerOptions.jvmTarget.set(JvmTarget.JVM_11)</code>を使用できます。</p><p><code>kotlinOptions</code>の型は変更されておらず、内部的には<code>compilerOptions</code>の型に変換されます。</p></li><li><p>Kotlin GradleプラグインAPIは以前のリリースとバイナリ互換です。 ただし、<code>kotlin-gradle-plugin</code>アーティファクトにはソースおよびABI破壊的変更がいくつかあります。 これらの変更のほとんどは、一部の内部型への追加のジェネリックパラメータに関係します。 重要な変更の1つは、<code>KotlinNativeLink</code>タスクが<code>AbstractKotlinNativeCompile</code>タスクを継承しなくなったことです。</p></li><li><p><code>KotlinJsCompilerOptions.outputFile</code>および関連する<code>KotlinJsOptions.outputFile</code>オプションは非推奨になりました。 代わりに<code>Kotlin2JsCompile.outputFileProperty</code>タスク入力を使用してください。</p></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin Gradleプラグインは、引き続き<code>KotlinJvmOptions</code> DSLをAndroid拡張機能に追加します。 <code>kotlin android { kotlinOptions { jvmTarget = &quot;11&quot; } } </code> これは、<code>compilerOptions</code> DSLがモジュールレベルに追加される際に、<a href="https://youtrack.jetbrains.com/issue/KT-15370/Gradle-DSL-add-module-level-kotlin-options" target="_blank" rel="noreferrer">この課題</a>の範囲で変更される予定です。</p></div><h4 id="制限事項" tabindex="-1">制限事項 <a class="header-anchor" href="#制限事項" aria-label="Permalink to &quot;制限事項&quot;">​</a></h4><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>kotlinOptions</code>タスク入力および<code>kotlinOptions{...}</code>タスクDSLはサポートモードであり、 将来のリリースで非推奨になる予定です。改善は<code>compilerOptions</code>および<code>toolOptions</code>のみに行われます。</p></div><p><code>kotlinOptions</code>に対する任意のセッターまたはゲッター呼び出しは、<code>compilerOptions</code>内の関連プロパティに委譲されます。 これにより、以下の制限が生じます。</p><ul><li><code>compilerOptions</code>と<code>kotlinOptions</code>は、タスク実行フェーズで変更できません（以下の段落の例外を参照）。</li><li><code>freeCompilerArgs</code>は不変の<code>List&lt;String&gt;</code>を返すため、例えば<code>kotlinOptions.freeCompilerArgs.remove(&quot;something&quot;)</code>は失敗します。</li></ul><p><code>kotlin-dsl</code>やJetpack Composeが有効なAndroid Gradleプラグイン（AGP）を含むいくつかのプラグインは、 タスク実行フェーズで<code>freeCompilerArgs</code>属性を変更しようとします。 Kotlin 1.8.0では、それらのための回避策が追加されました。 この回避策により、任意のビルドスクリプトまたはプラグインが実行フェーズで<code>kotlinOptions.freeCompilerArgs</code>を変更できますが、 ビルドログに警告が出力されます。この警告を無効にするには、新しいGradleプロパティ <code>kotlin.options.suppressFreeCompilerArgsModificationWarning=true</code>を使用します。 Gradleは、<a href="https://github.com/gradle/gradle/issues/22091" target="_blank" rel="noreferrer"><code>kotlin-dsl</code>プラグイン</a>および <a href="https://issuetracker.google.com/u/1/issues/247544167" target="_blank" rel="noreferrer">Jetpack Composeが有効なAGP</a>の修正を追加する予定です。</p><h3 id="サポートされる最小バージョンの引き上げ" tabindex="-1">サポートされる最小バージョンの引き上げ <a class="header-anchor" href="#サポートされる最小バージョンの引き上げ" aria-label="Permalink to &quot;サポートされる最小バージョンの引き上げ&quot;">​</a></h3><p>Kotlin 1.8.0から、サポートされる最小Gradleバージョンは6.8.3、サポートされる最小Android Gradleプラグインバージョンは4.1.3です。</p><p><a href="/ja/kotlin/gradle-configure-project#apply-the-plugin">Kotlin Gradleプラグインと利用可能なGradleバージョンの互換性については、ドキュメント</a>を参照してください。</p><h3 id="kotlinデーモンフォールバック戦略の無効化機能" tabindex="-1">Kotlinデーモンフォールバック戦略の無効化機能 <a class="header-anchor" href="#kotlinデーモンフォールバック戦略の無効化機能" aria-label="Permalink to &quot;Kotlinデーモンフォールバック戦略の無効化機能&quot;">​</a></h3><p>新しいGradleプロパティ<code>kotlin.daemon.useFallbackStrategy</code>が追加され、そのデフォルト値は<code>true</code>です。 値が<code>false</code>の場合、デーモンの起動または通信に問題があるとビルドが失敗します。 また、Kotlinコンパイルタスクに新しい<code>useDaemonFallbackStrategy</code>プロパティがあり、 両方を使用する場合はGradleプロパティよりも優先されます。 コンパイルを実行するためのメモリが不足している場合、その旨のメッセージがログに表示されます。</p><p>Kotlinコンパイラのフォールバック戦略は、デーモンが何らかの理由で失敗した場合に、Kotlinデーモンの外部でコンパイルを実行することです。 Gradleデーモンがオンの場合、コンパイラは「In process」戦略を使用します。 Gradleデーモンがオフの場合、コンパイラは「Out of process」戦略を使用します。 これらの<a href="/ja/kotlin/gradle-compilation-and-caches#defining-kotlin-compiler-execution-strategy">実行戦略の詳細については、ドキュメント</a>を参照してください。 別の戦略へのサイレントフォールバックは、多くのシステムリソースを消費したり、 非決定的なビルドにつながったりする可能性があることに注意してください。 詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-48843/Add-ability-to-disable-Kotlin-daemon-fallback-strategy" target="_blank" rel="noreferrer">このYouTrack課題</a>を参照してください。</p><h3 id="推移的依存関係における最新のkotlin-stdlibバージョンの使用" tabindex="-1">推移的依存関係における最新のkotlin-stdlibバージョンの使用 <a class="header-anchor" href="#推移的依存関係における最新のkotlin-stdlibバージョンの使用" aria-label="Permalink to &quot;推移的依存関係における最新のkotlin-stdlibバージョンの使用&quot;">​</a></h3><p>依存関係でKotlinバージョン1.8.0以降を明示的に記述した場合（例：<code>implementation(&quot;org.jetbrains.kotlin:kotlin-stdlib:1.8.0&quot;)</code>）、 Kotlin Gradleプラグインは、推移的<code>kotlin-stdlib-jdk7</code>および<code>kotlin-stdlib-jdk8</code>依存関係に対してそのKotlinバージョンを使用します。 これは、異なるstdlibバージョンからのクラスの重複を避けるためです （<a href="#updated-jvm-compilation-target"><code>kotlin-stdlib-jdk7</code>と<code>kotlin-stdlib-jdk8</code>を<code>kotlin-stdlib</code>に統合</a>の詳細を参照）。 この動作は、<code>kotlin.stdlib.jdk.variants.version.alignment</code> Gradleプロパティで無効にできます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.stdlib.jdk.variants.version.alignment=false</span></span></code></pre></div><p>バージョンアラインメントで問題が発生した場合は、Kotlin <a href="https://docs.gradle.org/current/userguide/platforms.html#sub:bom_import" target="_blank" rel="noreferrer">BOM</a> を介してすべてのバージョンをアラインするために、ビルドスクリプトで<code>kotlin-bom</code>へのプラットフォーム依存関係を宣言してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-bom:1.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>その他のケースと提案されている解決策については、<a href="/ja/kotlin/gradle-configure-project#other-ways-to-align-versions">ドキュメント</a>を参照してください。</p><h3 id="関連するkotlinとjavaコンパイルタスクのjvmターゲット互換性一致に対する強制的なチェック" tabindex="-1">関連するKotlinとJavaコンパイルタスクのJVMターゲット互換性一致に対する強制的なチェック <a class="header-anchor" href="#関連するkotlinとjavaコンパイルタスクのjvmターゲット互換性一致に対する強制的なチェック" aria-label="Permalink to &quot;関連するKotlinとJavaコンパイルタスクのJVMターゲット互換性一致に対する強制的なチェック&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>このセクションは、ソースファイルがKotlinのみでJavaを使用していないJVMプロジェクトにも適用されます。</p></div><p><a href="https://youtrack.jetbrains.com/issue/KT-54993/Raise-kotlin.jvm.target.validation.mode-check-default-level-to-error-when-build-is-running-on-Gradle-8" target="_blank" rel="noreferrer">このリリースから</a>、 Gradle 8.0以降（このバージョンのGradleはまだリリースされていません）のプロジェクトでは、 <a href="/ja/kotlin/gradle-configure-project#check-for-jvm-target-compatibility-of-related-compile-tasks"><code>kotlin.jvm.target.validation.mode</code>プロパティ</a>のデフォルト値が<code>error</code>になり、 JVMターゲットに互換性がない場合にプラグインはビルドを失敗させます。</p><p>デフォルト値が<code>warning</code>から<code>error</code>に移行するのは、Gradle 8.0へのスムーズな移行のための準備ステップです。 <strong>このプロパティを<code>error</code>に設定し</strong>、<a href="/ja/kotlin/gradle-configure-project#gradle-java-toolchains-support">ツールチェーンを設定</a>するか、 JVMバージョンを手動でアラインすることを推奨します。</p><p><a href="/ja/kotlin/gradle-configure-project#what-can-go-wrong-if-targets-are-incompatible">ターゲットの互換性をチェックしない場合に何が問題になる可能性があるか</a>については、 詳細を参照してください。</p><h3 id="kotlin-gradleプラグインの推移的依存関係の解決" tabindex="-1">Kotlin Gradleプラグインの推移的依存関係の解決 <a class="header-anchor" href="#kotlin-gradleプラグインの推移的依存関係の解決" aria-label="Permalink to &quot;Kotlin Gradleプラグインの推移的依存関係の解決&quot;">​</a></h3><p>Kotlin 1.7.0では、<a href="/ja/kotlin/whatsnew17#support-for-gradle-plugin-variants">Gradleプラグインバリアントのサポート</a>を導入しました。 これらのプラグインバリアントにより、ビルドクラスパスには、一部の依存関係（通常は<code>kotlin-gradle-plugin-api</code>）の異なるバージョンに依存する <a href="https://plugins.gradle.org/u/kotlin" target="_blank" rel="noreferrer">Kotlin Gradleプラグイン</a>の異なるバージョンが含まれる可能性があります。 これは解決の問題につながる可能性があり、<code>kotlin-dsl</code>プラグインを例として、以下の回避策を提案したいと思います。</p><p>Gradle 7.6の<code>kotlin-dsl</code>プラグインは、<code>org.jetbrains.kotlin.plugin.sam.with.receiver:1.7.10</code>プラグインに依存し、 このプラグインは<code>kotlin-gradle-plugin-api:1.7.10</code>に依存します。 <code>org.jetbrains.kotlin.gradle.jvm:1.8.0</code>プラグインを追加すると、 この<code>kotlin-gradle-plugin-api:1.7.10</code>の推移的依存関係が、 バージョン（<code>1.8.0</code>と<code>1.7.10</code>）とバリアント属性の<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/attributes/plugin/GradlePluginApiVersion.html" target="_blank" rel="noreferrer"><code>org.gradle.plugin.api-version</code></a>値との不一致により、 依存関係解決エラーを引き起こす可能性があります。 回避策として、バージョンをアラインするためにこの<a href="https://docs.gradle.org/current/userguide/dependency_constraints.html#sec:adding-constraints-transitive-deps" target="_blank" rel="noreferrer">制約</a>を追加してください。 この回避策は、<a href="https://youtrack.jetbrains.com/issue/KT-54691/Kotlin-Gradle-Plugin-libraries-alignment-platform" target="_blank" rel="noreferrer">Kotlin Gradleプラグインライブラリのアラインメントプラットフォーム</a> （計画中）が実装されるまで必要になる場合があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    constraints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-sam-with-receiver:1.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この制約により、ビルドクラスパスの推移的依存関係で<code>org.jetbrains.kotlin:kotlin-sam-with-receiver:1.8.0</code>バージョンが強制的に使用されます。 同様の<a href="https://github.com/gradle/gradle/issues/22510#issuecomment-1292259298" target="_blank" rel="noreferrer">Gradle課題トラッカーのケース</a>については、 詳細を参照してください。</p><h3 id="非推奨と削除" tabindex="-1">非推奨と削除 <a class="header-anchor" href="#非推奨と削除" aria-label="Permalink to &quot;非推奨と削除&quot;">​</a></h3><p>Kotlin 1.8.0では、以下のプロパティとメソッドの非推奨化サイクルが継続されます。</p><ul><li><a href="/ja/kotlin/whatsnew17#changes-in-compile-tasks">Kotlin 1.7.0のノート</a>で、<code>KotlinCompile</code>タスクには非推奨のKotlinプロパティ<code>classpath</code>がまだ残っており、 将来のリリースで削除される予定であると述べました。今回、<code>KotlinCompile</code>タスクの<code>classpath</code>プロパティの非推奨レベルを<code>error</code>に変更しました。 すべてのコンパイルタスクは、コンパイルに必要なライブラリのリストに<code>libraries</code>入力を使用します。</li><li><a href="/ja/kotlin/kapt">kapt</a>をGradle Workers API経由で実行できる<code>kapt.use.worker.api</code>プロパティを削除しました。 デフォルトでは、Kotlin 1.3.70以降、<a href="/ja/kotlin/kapt#run-kapt-tasks-in-parallel">kaptはGradleワーカーを使用しています</a>ので、 この方法を使い続けることを推奨します。</li><li>Kotlin 1.7.0では、<a href="/ja/kotlin/whatsnew17#deprecation-of-the-kotlin-compiler-execution-strategy-system-property"><code>kotlin.compiler.execution.strategy</code>システムプロパティの非推奨化サイクルの開始</a>を 発表しました。このリリースでは、このプロパティを削除しました。 <a href="/ja/kotlin/gradle-compilation-and-caches#defining-kotlin-compiler-execution-strategy">Kotlinコンパイラの実行戦略を他の方法で定義する方法</a>については、詳細を参照してください。</li></ul><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><p>Kotlin 1.8.0:</p><ul><li><a href="#updated-jvm-compilation-target">JVMコンパイルターゲットを更新します</a>。</li><li>多くの関数を安定化させます – <a href="#timeunit-conversion-between-java-and-kotlin">JavaとKotlin間のTimeUnit変換</a>、 <a href="#cbrt"><code>cbrt()</code></a>、<a href="#java-optionals-extension-functions">Java <code>Optional</code>拡張関数</a>。</li><li><a href="#comparable-and-subtractable-timemarks">比較可能で減算可能な<code>TimeMarks</code>のプレビュー</a>を提供します。</li><li><a href="#recursive-copying-or-deletion-of-directories"><code>java.nio.file.path</code>向けの実験的拡張関数</a>を含みます。</li><li><a href="#improved-kotlin-reflect-performance">kotlin-reflectのパフォーマンス向上</a>を実現します。</li></ul><h3 id="更新されたjvmコンパイルターゲット" tabindex="-1">更新されたJVMコンパイルターゲット <a class="header-anchor" href="#更新されたjvmコンパイルターゲット" aria-label="Permalink to &quot;更新されたJVMコンパイルターゲット&quot;">​</a></h3><p>Kotlin 1.8.0では、標準ライブラリ（<code>kotlin-stdlib</code>、<code>kotlin-reflect</code>、<code>kotlin-script-*</code>）はJVMターゲット1.8でコンパイルされます。 以前は、標準ライブラリはJVMターゲット1.6でコンパイルされていました。</p><p>Kotlin 1.8.0は、JVMターゲット1.6および1.7をサポートしなくなりました。 結果として、これらのアーティファクトの内容が<code>kotlin-stdlib</code>に統合されたため、 ビルドスクリプトで<code>kotlin-stdlib-jdk7</code>と<code>kotlin-stdlib-jdk8</code>を個別に宣言する必要がなくなりました。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>kotlin-stdlib-jdk7</code>と<code>kotlin-stdlib-jdk8</code>をビルドスクリプトで明示的に依存関係として宣言している場合は、 それらを<code>kotlin-stdlib</code>に置き換える必要があります。</p></div><p>異なるバージョンのstdlibアーティファクトを混在させると、クラスの重複やクラスの欠落につながる可能性があることに注意してください。 これを避けるために、Kotlin Gradleプラグインが<a href="#usage-of-the-latest-kotlin-stdlib-version-in-transitive-dependencies">stdlibバージョンのアラインメント</a>に役立ちます。</p><h3 id="cbrt" tabindex="-1">cbrt() <a class="header-anchor" href="#cbrt" aria-label="Permalink to &quot;cbrt()&quot;">​</a></h3><p><code>double</code>または<code>float</code>の実数立方根を計算できる<code>cbrt()</code>関数がStableになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 27</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> negNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The cube root of \${num.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()} is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            cbrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The cube root of \${negNum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()} is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            cbrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(negNum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="timeunitのjavaとkotlin間の変換" tabindex="-1">TimeUnitのJavaとKotlin間の変換 <a class="header-anchor" href="#timeunitのjavaとkotlin間の変換" aria-label="Permalink to &quot;TimeUnitのJavaとKotlin間の変換&quot;">​</a></h3><p><code>kotlin.time</code>の<code>toTimeUnit()</code>および<code>toDurationUnit()</code>関数がStableになりました。 Kotlin 1.6.0で実験的として導入されたこれらの関数は、KotlinとJava間の相互運用性を向上させます。 これで、Javaの<code>java.util.concurrent.TimeUnit</code>とKotlinの<code>kotlin.time.DurationUnit</code>の間で簡単に変換できます。 これらの関数はJVMでのみサポートされています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// For use from Java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timeout: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, unit: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duration: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(unit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDurationUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="比較可能で減算可能なtimemarks" tabindex="-1">比較可能で減算可能なTimeMarks <a class="header-anchor" href="#比較可能で減算可能なtimemarks" aria-label="Permalink to &quot;比較可能で減算可能なTimeMarks&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>TimeMarks</code>の新しい機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">Experimental</a>であり、 使用するには<code>@OptIn(ExperimentalTime::class)</code>または<code>@ExperimentalTime</code>でオプトインする必要があります。</p></div><p>Kotlin 1.8.0より前では、複数の<code>TimeMarks</code>と<strong>現在</strong>との時間差を計算したい場合、 一度に1つの<code>TimeMark</code>でしか<code>elapsedNow()</code>を呼び出すことができませんでした。 これにより、2つの<code>elapsedNow()</code>関数呼び出しが正確に同時に実行できないため、結果を比較することが困難でした。</p><p>これを解決するため、Kotlin 1.8.0では、同じ時間ソースからの<code>TimeMarks</code>を減算および比較できるようになりました。 これにより、<strong>現在</strong>を表す新しい<code>TimeMark</code>インスタンスを作成し、そこから他の<code>TimeMarks</code>を減算できます。 こうすることで、これらの計算から収集される結果は、互いに相対的であることが保証されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeSource.Monotonic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Sleep 0.5 seconds</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Before 1.8.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elapsedNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elapsedNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Difference between elapsed1 and elapsed2 can vary depending </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // on how much time passes between the two elapsedNow() calls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Measurement 1.\${n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}: elapsed1=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;elapsed2=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, diff=\${elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elapsed2}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Since 1.8.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Now the elapsed times are calculated relative to mark3, </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // which is a fixed value</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Measurement 2.\${n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}: elapsed1=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;elapsed2=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, diff=\${elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elapsed2}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // It&#39;s also possible to compare time marks with each other</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // This is true, as mark2 was captured later than mark1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mark2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この新しい機能は、異なるフレームを表す複数の<code>TimeMarks</code>間の差を計算したり比較したりしたいアニメーション計算において特に有用です。</p><h3 id="ディレクトリの再帰的なコピーまたは削除" tabindex="-1">ディレクトリの再帰的なコピーまたは削除 <a class="header-anchor" href="#ディレクトリの再帰的なコピーまたは削除" aria-label="Permalink to &quot;ディレクトリの再帰的なコピーまたは削除&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>java.nio.file.path</code>のこれらの新しい関数は<a href="/ja/kotlin/components-stability#stability-levels-explained">Experimental</a>です。 これらを使用するには、<code>@OptIn(kotlin.io.path.ExperimentalPathApi::class)</code>または<code>@kotlin.io.path.ExperimentalPathApi</code>でオプトインする必要があります。 あるいは、コンパイラオプション<code>-opt-in=kotlin.io.path.ExperimentalPathApi</code>を使用することもできます。</p></div><p><code>java.nio.file.Path</code>に2つの新しい拡張関数<code>copyToRecursively()</code>と<code>deleteRecursively()</code>が導入されました。 これにより、再帰的に以下の操作を行うことができます。</p><ul><li>ディレクトリとその内容を別の宛先にコピーする。</li><li>ディレクトリとその内容を削除する。</li></ul><p>これらの関数は、バックアッププロセスの一部として非常に役立ちます。</p><h4 id="エラー処理" tabindex="-1">エラー処理 <a class="header-anchor" href="#エラー処理" aria-label="Permalink to &quot;エラー処理&quot;">​</a></h4><p><code>copyToRecursively()</code>を使用すると、コピー中に例外が発生した場合の動作を、 <code>onError</code>ラムダ関数をオーバーロードすることで定義できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sourceRoot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(destinationRoot, followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    onError </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { source, target, exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exception, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Failed to copy </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        OnErrorResult.TERMINATE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span></code></pre></div><p><code>deleteRecursively()</code>を使用する場合、ファイルやフォルダの削除中に例外が発生すると、そのファイルやフォルダはスキップされます。 削除が完了すると、<code>deleteRecursively()</code>は発生したすべての例外を抑制された例外として含む<code>IOException</code>をスローします。</p><h4 id="ファイルの上書き" tabindex="-1">ファイルの上書き <a class="header-anchor" href="#ファイルの上書き" aria-label="Permalink to &quot;ファイルの上書き&quot;">​</a></h4><p><code>copyToRecursively()</code>は、宛先ディレクトリにファイルが既に存在する場合、例外を発生させます。 ファイルを上書きしたい場合は、<code>overwrite</code>を引数に持ち、それを<code>true</code>に設定するオーバーロードを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setUpEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projectDirectory: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fixtureName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fixturesRoot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(COMMON_FIXTURE_NAME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projectDirectory, followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fixturesRoot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fixtureName)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projectDirectory, followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            overwrite </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// patches the common fixture</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="カスタムコピーアクション" tabindex="-1">カスタムコピーアクション <a class="header-anchor" href="#カスタムコピーアクション" aria-label="Permalink to &quot;カスタムコピーアクション&quot;">​</a></h4><p>独自のカスタムコピーロジックを定義するには、<code>copyAction</code>を追加の引数に持つオーバーロードを使用します。 <code>copyAction</code>を使用すると、たとえば、好みの動作を持つラムダ関数を提供できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sourceRoot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(destinationRoot, followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { source, target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (source.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CopyActionResult.SKIP_SUBTREE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToIgnoringExistingDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CopyActionResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これらの拡張関数の詳細については、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io.path/java.nio.file.-path/copy-to-recursively.html" target="_blank" rel="noreferrer">APIリファレンス</a>を参照してください。</p><h3 id="java-optional拡張関数" tabindex="-1">Java Optional拡張関数 <a class="header-anchor" href="#java-optional拡張関数" aria-label="Permalink to &quot;Java Optional拡張関数&quot;">​</a></h3><p><a href="/ja/kotlin/whatsnew17#new-experimental-extension-functions-for-java-optionals">Kotlin 1.7.0</a>で導入された拡張関数がStableになりました。 これらの関数は、JavaのOptionalクラスを扱うのを簡素化します。 これらはJVM上で<code>Optional</code>オブジェクトをアンラップして変換するために使用でき、 Java APIをより簡潔に扱うことができます。詳細については、<a href="/ja/kotlin/whatsnew17#new-experimental-extension-functions-for-java-optionals">Kotlin 1.7.0の新機能</a>を参照してください。</p><h3 id="kotlin-reflectのパフォーマンス向上" tabindex="-1">kotlin-reflectのパフォーマンス向上 <a class="header-anchor" href="#kotlin-reflectのパフォーマンス向上" aria-label="Permalink to &quot;kotlin-reflectのパフォーマンス向上&quot;">​</a></h3><p><code>kotlin-reflect</code>がJVMターゲット1.8でコンパイルされるようになったことを利用し、内部キャッシュメカニズムをJavaの<code>ClassValue</code>に移行しました。 以前は<code>KClass</code>のみをキャッシュしていましたが、現在は<code>KType</code>と<code>KDeclarationContainer</code>もキャッシュしています。 これらの変更により、<code>typeOf()</code>呼び出し時のパフォーマンスが大幅に向上しました。</p><h2 id="ドキュメントの更新" tabindex="-1">ドキュメントの更新 <a class="header-anchor" href="#ドキュメントの更新" aria-label="Permalink to &quot;ドキュメントの更新&quot;">​</a></h2><p>Kotlinのドキュメントにいくつかの注目すべき変更が加えられました。</p><h3 id="改訂されたページと新規ページ" tabindex="-1">改訂されたページと新規ページ <a class="header-anchor" href="#改訂されたページと新規ページ" aria-label="Permalink to &quot;改訂されたページと新規ページ&quot;">​</a></h3><ul><li><a href="/ja/kotlin/gradle">Gradleの概要</a> – GradleビルドシステムでKotlinプロジェクトを設定およびビルドする方法、 利用可能なコンパイラオプション、Kotlin Gradleプラグインでのコンパイルとキャッシュについて学びます。</li><li><a href="/ja/kotlin/java-to-kotlin-nullability-guide">JavaとKotlinのNull可能性</a> – JavaとKotlinの、 nullの可能性がある変数を扱うアプローチの違いを確認します。</li><li><a href="/ja/kotlin/lincheck-guide">Lincheckガイド</a> – JVM上の並行アルゴリズムをテストするためのLincheckフレームワークのセットアップと使用方法を学びます。</li></ul><h3 id="新規および更新されたチュートリアル" tabindex="-1">新規および更新されたチュートリアル <a class="header-anchor" href="#新規および更新されたチュートリアル" aria-label="Permalink to &quot;新規および更新されたチュートリアル&quot;">​</a></h3><ul><li><a href="/ja/kotlin/get-started-with-jvm-gradle-project">GradleとKotlin/JVMを始める</a> – IntelliJ IDEAとGradleを使用してコンソールアプリケーションを作成します。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-ktor-sqldelight.html" target="_blank" rel="noreferrer">KtorとSQLDelightを使用したマルチプラットフォームアプリの作成</a> – Kotlin Multiplatform Mobileを使用してiOSとAndroid向けのモバイルアプリケーションを作成します。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-create-first-app.html" target="_blank" rel="noreferrer">Kotlin Multiplatformを始める</a> – Kotlinを使用したクロスプラットフォームモバイル開発について学び、AndroidとiOSの両方で動作するアプリを作成します。</li></ul><h2 id="kotlin-1-8-0のインストール" tabindex="-1">Kotlin 1.8.0のインストール <a class="header-anchor" href="#kotlin-1-8-0のインストール" aria-label="Permalink to &quot;Kotlin 1.8.0のインストール&quot;">​</a></h2><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2021.3、2022.1、および2022.2は、Kotlinプラグインをバージョン1.8.0に更新することを自動的に提案します。 IntelliJ IDEA 2022.3には、今後のマイナーアップデートでKotlinプラグインのバージョン1.8.0がバンドルされる予定です。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>IntelliJ IDEA 2022.3で既存のプロジェクトをKotlin 1.8.0に移行するには、Kotlinのバージョンを<code>1.8.0</code>に変更し、 GradleまたはMavenプロジェクトを再インポートします。</p></div><p>Android Studio Electric Eel (221)およびFlamingo (222)については、Kotlinプラグインのバージョン1.8.0が今後のAndroid Studioのアップデートで提供されます。 新しいコマンドラインコンパイラは、<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.8.0" target="_blank" rel="noreferrer">GitHubのリリースページ</a>からダウンロードできます。</p><h2 id="kotlin-1-8-0の互換性ガイド" tabindex="-1">Kotlin 1.8.0の互換性ガイド <a class="header-anchor" href="#kotlin-1-8-0の互換性ガイド" aria-label="Permalink to &quot;Kotlin 1.8.0の互換性ガイド&quot;">​</a></h2><p>Kotlin 1.8.0は<a href="/ja/kotlin/kotlin-evolution-principles#language-and-tooling-releases">機能リリース</a>であるため、 以前の言語バージョンで書かれたコードと互換性のない変更をもたらす可能性があります。 これらの変更の詳細なリストは、<a href="/ja/kotlin/compatibility-guide-18">Kotlin 1.8.0の互換性ガイド</a>で確認してください。</p>`,191)]))}const g=s(n,[["render",l]]);export{c as __pageData,g as default};
