import{_ as t,a,b as n,c as i}from"./chunks/teamcity-idearunner.C9zA26A4.js";import{_ as r,c as l,o,ag as m}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Kotlin 和 TeamCity 持续集成","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/kotlin-and-ci.md","filePath":"kotlin/kotlin-and-ci.md","lastUpdated":1754307826000}'),d={name:"kotlin/kotlin-and-ci.md"};function p(s,e,h,c,u,_){return o(),l("div",null,e[0]||(e[0]=[m('<h1 id="kotlin-和-teamcity-持续集成" tabindex="-1">Kotlin 和 TeamCity 持续集成 <a class="header-anchor" href="#kotlin-和-teamcity-持续集成" aria-label="Permalink to &quot;Kotlin 和 TeamCity 持续集成&quot;">​</a></h1><p>在本页面中，你将学习如何设置 <a href="https://www.jetbrains.com/teamcity/" target="_blank" rel="noreferrer">TeamCity</a> 以构建你的 Kotlin 项目。关于 TeamCity 的更多信息和基础知识，请查阅其<a href="https://www.jetbrains.com/teamcity/documentation/" target="_blank" rel="noreferrer">文档页面</a>，该页面包含安装、基本配置等信息。</p><p>Kotlin 可与多种构建工具配合使用，因此如果你正在使用 Ant、Maven 或 Gradle 等标准工具，设置 Kotlin 项目的过程与集成这些工具的任何其他语言或库并无不同。当使用 IntelliJ IDEA 的内部构建系统时，会存在一些细微的要求和差异，而此系统也受 TeamCity 支持。</p><h2 id="gradle、maven-和-ant" tabindex="-1">Gradle、Maven 和 Ant <a class="header-anchor" href="#gradle、maven-和-ant" aria-label="Permalink to &quot;Gradle、Maven 和 Ant&quot;">​</a></h2><p>如果使用 Ant、Maven 或 Gradle，设置过程非常简单。只需定义“构建步骤”（Build Step）即可。例如，如果使用 Gradle，只需定义所需的参数，例如“步骤名称”（Step Name）和针对“Runner 类型”（Runner Type）需要执行的 Gradle tasks。</p><img src="'+t+'" alt="Gradle Build Step" width="700"><p>由于 Kotlin 所需的所有依赖项都已在 Gradle 文件中定义，因此无需为 Kotlin 的正确运行进行其他特定配置。</p><p>如果使用 Ant 或 Maven，配置方式相同。唯一的区别是“Runner 类型”（Runner Type）将分别是 Ant 或 Maven。</p><h2 id="intellij-idea-构建系统" tabindex="-1">IntelliJ IDEA 构建系统 <a class="header-anchor" href="#intellij-idea-构建系统" aria-label="Permalink to &quot;IntelliJ IDEA 构建系统&quot;">​</a></h2><p>如果将 IntelliJ IDEA 构建系统与 TeamCity 结合使用，请确保 IntelliJ IDEA 使用的 Kotlin 版本与 TeamCity 运行的版本一致。你可能需要下载特定版本的 Kotlin plugin 并将其安装在 TeamCity 上。</p><p>幸运的是，已有一个可用的 meta-runner，可以处理大部分手动工作。如果你不熟悉 TeamCity meta-runner 的概念，请查阅<a href="https://www.jetbrains.com/help/teamcity/working-with-meta-runner.html" target="_blank" rel="noreferrer">文档</a>。它们是一种非常简单且强大的方式，无需编写 plugins 即可引入自定义 Runners。</p><h3 id="下载并安装-meta-runner" tabindex="-1">下载并安装 meta-runner <a class="header-anchor" href="#下载并安装-meta-runner" aria-label="Permalink to &quot;下载并安装 meta-runner&quot;">​</a></h3><p>Kotlin 的 meta-runner 可在 <a href="https://github.com/jonnyzzz/Kotlin.TeamCity" target="_blank" rel="noreferrer">GitHub</a> 上获取。下载该 meta-runner 并从 TeamCity 用户界面导入。</p><img src="'+a+'" alt="Meta-runner" width="700"><h3 id="设置-kotlin-编译器获取步骤" tabindex="-1">设置 Kotlin 编译器获取步骤 <a class="header-anchor" href="#设置-kotlin-编译器获取步骤" aria-label="Permalink to &quot;设置 Kotlin 编译器获取步骤&quot;">​</a></h3><p>基本上，此步骤仅限于定义“步骤名称”（Step Name）和你所需的 Kotlin 版本。可以使用 Tags。</p><img src="'+n+'" alt="Setup Kotlin Compiler" width="700"><p>Runner 将根据 IntelliJ IDEA 项目中的路径设置，将属性 <code>system.path.macro.KOTLIN.BUNDLED</code> 的值设置为正确的值。然而，此值需要在 TeamCity 中定义（并且可以设置为任何值）。因此，你需要将其定义为一个系统变量。</p><h3 id="设置-kotlin-编译步骤" tabindex="-1">设置 Kotlin 编译步骤 <a class="header-anchor" href="#设置-kotlin-编译步骤" aria-label="Permalink to &quot;设置 Kotlin 编译步骤&quot;">​</a></h3><p>最后一步是定义项目的实际编译，它使用标准的 IntelliJ IDEA Runner 类型。</p><img src="'+i+'" alt="IntelliJ IDEA Runner" width="700"><p>这样，我们的项目现在应该能够构建并生成相应的构件了。</p><h2 id="其他-ci-服务器" tabindex="-1">其他 CI 服务器 <a class="header-anchor" href="#其他-ci-服务器" aria-label="Permalink to &quot;其他 CI 服务器&quot;">​</a></h2><p>如果你使用的是不同于 TeamCity 的持续集成工具，只要它支持任何构建工具或调用命令行工具，那么将 Kotlin 编译并自动化作为 CI 过程的一部分应该都是可行的。</p>',24)]))}const T=r(d,[["render",p]]);export{f as __pageData,T as default};
