import{_ as t,c as e,o,ag as a}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"핵심 개념","description":"","frontmatter":{},"headers":[],"relativePath":"ko/koog/key-concepts.md","filePath":"ko/koog/key-concepts.md","lastUpdated":1754431054000}'),n={name:"ko/koog/key-concepts.md"};function l(i,r,s,g,p,h){return o(),e("div",null,r[0]||(r[0]=[a('<h1 id="핵심-개념" tabindex="-1">핵심 개념 <a class="header-anchor" href="#핵심-개념" aria-label="Permalink to &quot;핵심 개념&quot;">​</a></h1><h2 id="에이전트" tabindex="-1">에이전트 <a class="header-anchor" href="#에이전트" aria-label="Permalink to &quot;에이전트&quot;">​</a></h2><ul><li><p><strong>에이전트</strong>: 도구와 상호작용하고, 복잡한 워크플로를 처리하며, 사용자와 통신할 수 있는 AI 개체.</p></li><li><p><strong>LLM (대규모 언어 모델)</strong>: 에이전트 기능을 구동하는 기반 AI 모델.</p></li><li><p><strong>메시지</strong>: 에이전트 시스템에서 사용자, 어시스턴트 또는 시스템으로부터 전달되는 데이터를 나타내는 통신 단위.</p></li><li><p><strong>프롬프트</strong>: 사용자, 어시스턴트 및 시스템의 메시지로 구성되어 LLM에 제공되는 대화 기록.</p></li><li><p><strong>시스템 프롬프트</strong>: 에이전트의 동작을 안내하고, 역할을 정의하며, 작업에 필요한 핵심 정보를 제공하기 위해 에이전트에게 주어지는 지침.</p></li><li><p><strong>컨텍스트</strong>: 대화 기록 및 도구에 접근하여 LLM 상호작용이 발생하는 환경.</p></li><li><p><strong>LLM 세션</strong>: 대화 기록, 사용 가능한 도구 및 요청을 생성하는 메서드를 포함하는 LLM과 상호작용하는 구조화된 방식.</p></li></ul><h2 id="에이전트-워크플로" tabindex="-1">에이전트 워크플로 <a class="header-anchor" href="#에이전트-워크플로" aria-label="Permalink to &quot;에이전트 워크플로&quot;">​</a></h2><ul><li><strong>전략</strong>: 순차적인 서브그래프로 구성된 에이전트의 정의된 워크플로. 전략은 에이전트가 입력을 처리하고, 도구와 상호작용하며, 출력을 생성하는 방식을 정의합니다. 전략 그래프는 노드 간의 전환을 나타내는 엣지로 연결된 노드로 구성됩니다.</li></ul><h3 id="전략-그래프" tabindex="-1">전략 그래프 <a class="header-anchor" href="#전략-그래프" aria-label="Permalink to &quot;전략 그래프&quot;">​</a></h3><ul><li><p><strong>그래프</strong>: 에이전트 전략 워크플로를 정의하는 엣지로 연결된 노드 구조.</p></li><li><p><strong>노드</strong>: 특정 작업 또는 변환을 나타내는 에이전트 전략 워크플로의 기본적인 구성 요소.</p></li><li><p><strong>엣지</strong>: 에이전트 그래프에서 노드 간의 연결로, 작업 흐름을 정의하며, 각 엣지를 따라야 할 시기를 지정하는 조건을 종종 포함합니다.</p></li><li><p><strong>조건</strong>: 특정 엣지를 따라야 할 시기를 결정하는 규칙.</p></li><li><p><strong>서브그래프</strong>: 자체 도구 집합, 컨텍스트 및 책임을 가진 에이전트 전략 내의 자체 포함 처리 단위. 서브그래프 작업에 대한 정보는 서브그래프 내에 캡슐화되거나 AgentMemory 기능을 사용하여 서브그래프 간에 전송될 수 있습니다.</p></li></ul><h2 id="도구" tabindex="-1">도구 <a class="header-anchor" href="#도구" aria-label="Permalink to &quot;도구&quot;">​</a></h2><ul><li><p><strong>도구</strong>: 에이전트가 특정 작업을 수행하거나 외부 시스템에 접근하는 데 사용할 수 있는 함수. 에이전트는 사용 가능한 도구와 그 인수는 알고 있지만, 구현 세부 정보는 모릅니다.</p></li><li><p><strong>도구 호출</strong>: LLM이 제공된 인수를 사용하여 특정 도구를 실행하도록 요청하는 것. 함수 호출과 유사하게 작동합니다.</p></li><li><p><strong>도구 디스크립터</strong>: 도구의 이름, 설명 및 매개변수를 포함하는 도구 메타데이터.</p></li><li><p><strong>도구 레지스트리</strong>: 에이전트가 사용할 수 있는 도구 목록. 이 레지스트리는 에이전트에게 사용 가능한 도구에 대해 알려줍니다.</p></li><li><p><strong>도구 결과</strong>: 도구를 실행하여 생성된 출력. 예를 들어, 도구가 메서드인 경우, 결과는 해당 반환 값이 됩니다.</p></li></ul><h2 id="기록-압축" tabindex="-1">기록 압축 <a class="header-anchor" href="#기록-압축" aria-label="Permalink to &quot;기록 압축&quot;">​</a></h2><ul><li><strong>기록 압축</strong>: 다양한 압축 전략을 적용하여 토큰 사용량을 관리하기 위해 대화 기록의 크기를 줄이는 과정. 자세한 내용은 <a href="./history-compression">기록 압축</a>을 참조하세요.</li></ul><h2 id="기능" tabindex="-1">기능 <a class="header-anchor" href="#기능" aria-label="Permalink to &quot;기능&quot;">​</a></h2><ul><li><strong>기능</strong>: AI 에이전트의 기능을 확장하고 향상시키는 구성 요소.</li></ul><h3 id="eventhandler-기능" tabindex="-1">EventHandler 기능 <a class="header-anchor" href="#eventhandler-기능" aria-label="Permalink to &quot;EventHandler 기능&quot;">​</a></h3><ul><li><strong>이벤트 핸들러</strong>: 다양한 에이전트 이벤트를 모니터링하고 응답할 수 있도록 하여 워크플로 전반에 걸쳐 에이전트 수명 주기 추적, 오류 처리 및 도구 호출 처리를 위한 훅(hook)을 제공하는 기능.</li></ul><h3 id="agentmemory-기능" tabindex="-1">AgentMemory 기능 <a class="header-anchor" href="#agentmemory-기능" aria-label="Permalink to &quot;AgentMemory 기능&quot;">​</a></h3><ul><li><p><strong>AgentMemory</strong>: AI 에이전트가 대화 전반에 걸쳐 정보를 저장, 검색 및 사용할 수 있도록 하는 기능. 자세한 내용은 <a href="./agent-memory">AgentMemory</a>를 참조하세요.</p></li><li><p><strong>개념</strong>: AgentMemory 기능 내에서 키워드, 설명 및 사실 유형을 포함하는 관련 메타데이터가 있는 정보 범주. 개념은 에이전트가 기억하고 회상할 수 있는 AgentMemory 시스템의 기본적인 구성 요소입니다. 자세한 내용은 <a href="./agent-memory">AgentMemory</a>를 참조하세요.</p></li><li><p><strong>사실</strong>: AgentMemory 시스템에 저장되는 개별 정보 조각. 사실은 개념과 연관되어 있으며, 단일 값 또는 다중 값을 가질 수 있습니다. 자세한 내용은 <a href="./agent-memory">AgentMemory</a>를 참조하세요.</p></li><li><p><strong>메모리 범위</strong>: 사실이 관련 있는 컨텍스트. 자세한 내용은 <a href="./agent-memory">AgentMemory</a>를 참조하세요.</p></li></ul>',17)]))}const c=t(n,[["render",l]]);export{m as __pageData,c as default};
