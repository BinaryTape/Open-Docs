import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"적응형 레이아웃","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-adaptive-layouts.md","filePath":"ko/kmp/compose-adaptive-layouts.md","lastUpdated":1755516278000}'),p={name:"ko/kmp/compose-adaptive-layouts.md"};function l(t,s,h,k,o,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="적응형-레이아웃" tabindex="-1">적응형 레이아웃 <a class="header-anchor" href="#적응형-레이아웃" aria-label="Permalink to &quot;적응형 레이아웃&quot;">​</a></h1><p>모든 유형의 기기에서 일관된 사용자 경험을 제공하려면 앱의 UI를 다양한 디스플레이 크기, 방향 및 입력 모드에 맞게 조정하세요.</p><h2 id="적응형-레이아웃-설계하기" tabindex="-1">적응형 레이아웃 설계하기 <a class="header-anchor" href="#적응형-레이아웃-설계하기" aria-label="Permalink to &quot;적응형 레이아웃 설계하기&quot;">​</a></h2><p>적응형 레이아웃을 설계할 때 다음 주요 가이드라인을 따르세요:</p><ul><li><a href="https://developer.android.com/develop/ui/compose/layouts/adaptive/canonical-layouts" target="_blank" rel="noreferrer">정규 레이아웃</a> 패턴(예: 목록-상세, 피드, 지원 창)을 선호하세요.</li><li>패딩, 타이포그래피 및 기타 디자인 요소에 공유 스타일을 재사용하여 일관성을 유지하세요. 플랫폼별 가이드라인을 따르면서 기기 전반에 걸쳐 탐색 패턴을 일관성 있게 유지하세요.</li><li>유연성과 모듈성을 위해 복잡한 레이아웃을 재사용 가능한 컴포저블로 분할하세요.</li><li>화면 밀도와 방향에 맞춰 조정하세요.</li></ul><h2 id="창-크기-클래스-사용하기" tabindex="-1">창 크기 클래스 사용하기 <a class="header-anchor" href="#창-크기-클래스-사용하기" aria-label="Permalink to &quot;창 크기 클래스 사용하기&quot;">​</a></h2><p>창 크기 클래스는 미리 정의된 임계값(중단점이라고도 함)으로, 다양한 화면 크기를 분류하여 적응형 레이아웃을 설계, 개발 및 테스트하는 데 도움을 줍니다.</p><p>창 크기 클래스는 앱에 사용 가능한 디스플레이 영역을 너비와 높이 모두에 대해 컴팩트, 미디엄, 확장이라는 세 가지 범주로 분류합니다. 레이아웃을 변경할 때는 모든 창 크기, 특히 다양한 중단점 임계값에서 레이아웃 동작을 테스트하세요.</p><p><code>WindowSizeClass</code> 클래스를 사용하려면 모듈의 <code>build.gradle.kts</code> 파일에 있는 공통 소스 세트에 <code>material3.adaptive</code> 종속성을 추가하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3.adaptive:adaptive:1.2.0-alpha05&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>WindowSizeClass</code> API를 사용하면 사용 가능한 디스플레이 공간에 따라 앱의 레이아웃을 변경할 수 있습니다. 예를 들어, 창 높이에 따라 상단 앱 바의 가시성을 관리할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    windowSizeClass: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WindowSizeClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> currentWindowAdaptiveInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().windowSizeClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Determines whether the top app bar should be displayed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showTopAppBar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowSizeClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isHeightAtLeastBreakpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WindowSizeClass.HEIGHT_DP_MEDIUM_LOWER_BOUND)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Uses bar visibility to define UI </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MyScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        showTopAppBar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showTopAppBar,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p><a href="https://developer.android.com/develop/ui/compose/layouts/adaptive" target="_blank" rel="noreferrer">Jetpack Compose 문서</a>에서 적응형 레이아웃에 대해 자세히 알아보세요.</p>`,14)]))}const E=a(p,[["render",l]]);export{c as __pageData,E as default};
