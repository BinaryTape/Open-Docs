import{_ as r,a as k,b as h}from"./chunks/variable-optimised-out.gsL8I0ER.js";import{_ as d,a as g,b as c,c as E,d as u,e as y}from"./chunks/flow-debug-4.C9ixceil.js";import{_ as F,C as o,c as m,o as b,ag as a,j as i,a as l,G as t,w as n}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"使用 IntelliJ IDEA 调试 Kotlin Flow – 教程","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/debug-flow-with-idea.md","filePath":"kotlin/debug-flow-with-idea.md","lastUpdated":1754307826000}'),f={name:"kotlin/debug-flow-with-idea.md"};function C(_,s,B,w,x,D){const e=o("tab"),p=o("tabs");return b(),m("div",null,[s[6]||(s[6]=a('<h1 id="使用-intellij-idea-调试-kotlin-flow-–-教程" tabindex="-1">使用 IntelliJ IDEA 调试 Kotlin Flow – 教程 <a class="header-anchor" href="#使用-intellij-idea-调试-kotlin-flow-–-教程" aria-label="Permalink to &quot;使用 IntelliJ IDEA 调试 Kotlin Flow – 教程&quot;">​</a></h1><p>本教程演示了如何创建 Kotlin Flow 并使用 IntelliJ IDEA 进行调试。</p><p>本教程假定你已对 <a href="/kotlin/coroutines-guide">协程</a> 和 <a href="/kotlin/flow#flows">Kotlin Flow</a> 概念有所了解。</p><h2 id="创建-kotlin-flow" tabindex="-1">创建 Kotlin Flow <a class="header-anchor" href="#创建-kotlin-flow" aria-label="Permalink to &quot;创建 Kotlin Flow&quot;">​</a></h2><p>创建一个具有慢速发射器和慢速收集器的 Kotlin <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flow.html" target="_blank" rel="noreferrer">Flow</a>：</p>',5)),i("ol",null,[s[4]||(s[4]=i("li",null,[i("p",null,[l("在 IntelliJ IDEA 中打开一个 Kotlin 项目。如果你没有项目，可以"),i("a",{href:"/kotlin/jvm-get-started#create-a-project"},"创建一个"),l("。")])],-1)),i("li",null,[s[2]||(s[2]=i("p",null,[l("要在 Gradle 项目中使用 "),i("code",null,"kotlinx.coroutines"),l(" 库，请将以下依赖项添加到 "),i("code",null,"build.gradle(.kts)"),l("：")],-1)),t(p,{group:"build-script"},{default:n(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2'")]),l(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[3]||(s[3]=i("p",null,[l("对于其他构建系统，请参阅 "),i("a",{href:"https://github.com/Kotlin/kotlinx.coroutines#using-in-your-projects",target:"_blank",rel:"noreferrer"},[i("code",null,"kotlinx.coroutines"),l(" README")]),l(" 中的说明。")],-1))]),s[5]||(s[5]=a(`<li><p>打开 <code>src/main/kotlin</code> 目录中的 <code>Main.kt</code> 文件。</p><p><code>src</code> 目录包含 Kotlin 源文件和资源。<code>Main.kt</code> 文件包含将打印 <code>Hello World!</code> 的示例代码。</p></li><li><p>创建返回一个包含三个数字的 Flow 的 <code>simple()</code> 函数：</p><ul><li>使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html" target="_blank" rel="noreferrer"><code>delay()</code></a> 函数来模拟 CPU 密集型的阻塞代码。它将协程挂起 100 毫秒，而不阻塞线程。</li><li>在 <code>for</code> 循环中使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow-collector/emit.html" target="_blank" rel="noreferrer"><code>emit()</code></a> 函数生成值。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.flow.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.system.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>更改 <code>main()</code> 函数中的代码：</p><ul><li>使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html" target="_blank" rel="noreferrer"><code>runBlocking()</code></a> 代码块来包裹一个协程。</li><li>使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html" target="_blank" rel="noreferrer"><code>collect()</code></a> 函数收集发射的值。</li><li>使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html" target="_blank" rel="noreferrer"><code>delay()</code></a> 函数来模拟 CPU 密集型代码。它将协程挂起 300 毫秒，而不阻塞线程。</li><li>使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html" target="_blank" rel="noreferrer"><code>println()</code></a> 函数打印从 Flow 收集到的值。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>点击 <strong>Build Project</strong> 构建代码。</p><p><img src="`+r+'" alt="Build an application"></p></li>',4))]),s[7]||(s[7]=a('<h2 id="调试协程" tabindex="-1">调试协程 <a class="header-anchor" href="#调试协程" aria-label="Permalink to &quot;调试协程&quot;">​</a></h2><ol><li><p>在调用 <code>emit()</code> 函数的行设置断点：</p><p><img src="'+d+'" alt="Build a console application"></p></li><li><p>点击屏幕顶部运行配置旁边的 <strong>Debug</strong>，以调试模式运行代码。</p><p><img src="'+k+'" alt="Build a console application"></p><p><strong>Debug</strong> 工具窗口出现：</p><ul><li><strong>Frames</strong> 标签页包含调用栈。</li><li><strong>Variables</strong> 标签页包含当前上下文中的变量。它告诉我们 Flow 正在发射第一个值。</li><li><strong>Coroutines</strong> 标签页包含有关正在运行或已挂起的协程的信息。</li></ul><p><img src="'+g+'" alt="Debug the coroutine"></p></li><li><p>通过点击 <strong>Debug</strong> 工具窗口中的 <strong>Resume Program</strong> 恢复调试会话。程序在同一断点处停止。</p><p><img src="'+c+'" alt="Debug the coroutine"></p><p>现在 Flow 发射第二个值。</p><p><img src="'+E+'" alt="Debug the coroutine"></p></li></ol><h3 id="被优化掉的变量" tabindex="-1">被优化掉的变量 <a class="header-anchor" href="#被优化掉的变量" aria-label="Permalink to &quot;被优化掉的变量&quot;">​</a></h3><p>如果你使用 <code>suspend</code> 函数，在调试器中，你可能会在变量名称旁边看到“was optimized out”文本：</p><p><img src="'+h+`" alt="Variable &quot;a&quot; was optimized out"></p><p>此文本表示变量的生命周期已缩短，且该变量不再存在。 调试带有被优化掉的变量的代码很困难，因为你无法看到它们的值。 你可以使用 <code>-Xdebug</code> 编译器选项禁用此行为。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><strong>切勿在生产环境中使用此标志</strong>：<code>-Xdebug</code> 可能<a href="https://youtrack.jetbrains.com/issue/KT-48678/Coroutine-debugger-disable-was-optimised-out-compiler-feature#focus=Comments-27-6015585.0-0" target="_blank" rel="noreferrer">导致内存泄漏</a>。</p></div><h2 id="添加并发运行的协程" tabindex="-1">添加并发运行的协程 <a class="header-anchor" href="#添加并发运行的协程" aria-label="Permalink to &quot;添加并发运行的协程&quot;">​</a></h2><ol><li><p>打开 <code>src/main/kotlin</code> 目录中的 <code>Main.kt</code> 文件。</p></li><li><p>增强代码以并发运行发射器和收集器：</p><ul><li>添加对 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/buffer.html" target="_blank" rel="noreferrer"><code>buffer()</code></a> 函数的调用，以并发运行发射器和收集器。<code>buffer()</code> 会存储发射的值，并在一个单独的协程中运行 Flow 收集器。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>点击 <strong>Build Project</strong> 构建代码。</p></li></ol><h2 id="调试带有两个协程的-kotlin-flow" tabindex="-1">调试带有两个协程的 Kotlin Flow <a class="header-anchor" href="#调试带有两个协程的-kotlin-flow" aria-label="Permalink to &quot;调试带有两个协程的 Kotlin Flow&quot;">​</a></h2><ol><li><p>在 <code>println(value)</code> 处设置一个新断点。</p></li><li><p>点击屏幕顶部运行配置旁边的 <strong>Debug</strong>，以调试模式运行代码。</p><p><img src="`+u+'" alt="Build a console application"></p><p><strong>Debug</strong> 工具窗口出现。</p><p>在 <strong>Coroutines</strong> 标签页中，你可以看到有两个协程正在并发运行。由于 <code>buffer()</code> 函数，Flow 收集器和发射器在单独的协程中运行。 <code>buffer()</code> 函数会缓冲从 Flow 发射的值。 发射器协程处于 <strong>RUNNING</strong>（运行中）状态，而收集器协程处于 <strong>SUSPENDED</strong>（已挂起）状态。</p></li><li><p>通过点击 <strong>Debug</strong> 工具窗口中的 <strong>Resume Program</strong> 恢复调试会话。</p><p><img src="'+y+'" alt="Debugging coroutines"></p><p>现在收集器协程处于 <strong>RUNNING</strong>（运行中）状态，而发射器协程处于 <strong>SUSPENDED</strong>（已挂起）状态。</p><p>你可以深入探查每个协程来调试你的代码。</p></li></ol>',11))])}const T=F(f,[["render",C]]);export{I as __pageData,T as default};
