import{_ as E,C as l,c as y,o as m,j as t,G as i,ag as r,a as o,w as n}from"./chunks/framework.Bksy39di.js";const K=JSON.parse('{"title":"添加客户端依赖项","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/client-dependencies.md","filePath":"ktor/client-dependencies.md","lastUpdated":1755457140000}'),v={name:"ktor/client-dependencies.md"};function _(f,e,b,F,q,A){const h=l("show-structure"),c=l("link-summary"),d=l("control"),s=l("code-block"),a=l("TabItem"),g=l("note"),p=l("Tabs"),k=l("list"),u=l("chapter");return m(),y("div",null,[e[10]||(e[10]=t("h1",{id:"添加客户端依赖项",tabindex:"-1"},[o("添加客户端依赖项 "),t("a",{class:"header-anchor",href:"#添加客户端依赖项","aria-label":'Permalink to "添加客户端依赖项"'},"​")],-1)),i(h,{for:"chapter",depth:"2"}),i(c,null,{default:n(()=>e[0]||(e[0]=[o("了解如何向现有项目添加客户端依赖项。")])),_:1}),e[11]||(e[11]=r('<p>要在你的项目中集成 Ktor HTTP 客户端，你需要<a href="#repositories">配置仓库</a>并添加以下依赖项：</p><ul><li><p><strong><a href="#client-dependency">ktor-client-core</a></strong></p><p><code>ktor-client-core</code> 包含核心 Ktor 客户端功能。</p></li><li><p><strong><a href="#engine-dependency">引擎依赖项</a></strong></p><p>引擎用于处理网络请求。 请注意，<a href="./client-supported-platforms">特定平台</a>可能需要一个特定的引擎来处理网络请求。</p></li><li><p>（可选）<strong><a href="#logging-dependency">日志记录依赖项</a></strong></p><p>提供日志框架以启用结构化和灵活的日志记录功能。</p></li><li><p>（可选）<strong><a href="#plugin-dependency">插件依赖项</a></strong></p><p>插件用于通过特定功能扩展客户端。</p></li></ul><p> 在添加 Ktor 依赖项之前，你需要为该项目配置仓库： </p>',3)),i(k,null,{default:n(()=>[t("li",null,[t("p",null,[i(d,null,{default:n(()=>e[1]||(e[1]=[o("生产版本")])),_:1})]),e[3]||(e[3]=t("p",null," Ktor 的生产版本在 Maven 中央仓库中可用。 你可以在构建脚本中按如下方式声明此仓库： ",-1)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:`                    repositories {
                        mavenCentral()
                    }`})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:`                    repositories {
                        mavenCentral()
                    }`})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(g,null,{default:n(()=>e[2]||(e[2]=[t("p",null,[o(" 你无需在 "),t("path",null,"pom.xml"),o(" 文件中添加 Maven 中央仓库，因为你的项目会从 "),t("a",{href:"https://maven.apache.org/guides/introduction/introduction-to-the-pom.html#super-pom"},"Super POM"),o(" 继承中央仓库。 ")],-1)])),_:1})]),_:1})]),_:1})]),t("li",null,[t("p",null,[i(d,null,{default:n(()=>e[4]||(e[4]=[o("抢先体验计划 (EAP)")])),_:1})]),e[5]||(e[5]=t("p",null,[o(" 要获取 Ktor 的 "),t("a",{href:"https://ktor.io/eap/"},"EAP"),o(" 版本，你需要引用 "),t("a",{href:"https://maven.pkg.jetbrains.space/public/p/ktor/eap/io/ktor/"},"Space 仓库"),o("： ")],-1)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:`                    repositories {
                        maven {
                            url = uri("https://maven.pkg.jetbrains.space/public/p/ktor/eap")
                        }
                    }`})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:`                    repositories {
                        maven {
                            url "https://maven.pkg.jetbrains.space/public/p/ktor/eap"
                        }
                    }`})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`                    <repositories>
                        <repository>
                            <id>ktor-eap</id>
                            <url>https://maven.pkg.jetbrains.space/public/p/ktor/eap</url>
                        </repository>
                    </repositories>`})]),_:1})]),_:1}),e[6]||(e[6]=t("p",null,[o(" 请注意，Ktor EAP 可能需要 "),t("a",{href:"https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev"},"Kotlin 开发仓库"),o("： ")],-1)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:`                    repositories {
                        maven {
                            url = uri("https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev")
                        }
                    }`})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:`                    repositories {
                        maven {
                            url "https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev"
                        }
                    }`})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`                    <repositories>
                        <repository>
                            <id>ktor-eap</id>
                            <url>https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev</url>
                        </repository>
                    </repositories>`})]),_:1})]),_:1})])]),_:1}),e[12]||(e[12]=r('<h2 id="add-ktor-dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add-ktor-dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add-ktor-dependencies&quot;}&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>对于<a href="./client-supported-platforms">不同的平台</a>，Ktor 提供带 <code>-jvm</code> 或 <code>-js</code> 等后缀的平台特有的构件，例如 <code>ktor-client-core-jvm</code>。请注意，Gradle 会自动解析适用于给定平台的构件，而 Maven 不支持此能力。这意味着对于 Maven，你需要手动添加平台特有的后缀。</p></div><h3 id="client-dependency" tabindex="-1">客户端依赖项 <a class="header-anchor" href="#client-dependency" aria-label="Permalink to &quot;客户端依赖项 {id=&quot;client-dependency&quot;}&quot;">​</a></h3><p>主要的客户端功能在 <code>ktor-client-core</code> 构件中可用。根据你的构建系统，你可以按以下方式添加它：</p>',4)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-core:$ktor_version")'})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-core:$ktor_version"'})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-core-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),e[13]||(e[13]=r(`<p>你可以将 <code>$ktor_version</code> 替换为所需的 Ktor 版本，例如 <code>3.2.3</code>。</p><h4 id="client-dependency-multiplatform" tabindex="-1">多平台 <a class="header-anchor" href="#client-dependency-multiplatform" aria-label="Permalink to &quot;多平台 {id=&quot;client-dependency-multiplatform&quot;}&quot;">​</a></h4><p>对于多平台项目，你可以在 <code>gradle/libs.versions.toml</code> 文件中定义 Ktor 版本和 <code>ktor-client-core</code> 构件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[versions]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ktor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;3.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[libraries]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.kotlin:kotlin-test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ktor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">okhttp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;io.ktor:ktor-client-okhttp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ktor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>然后，将 <code>ktor-client-core</code> 作为依赖项添加到 <code>commonMain</code> 源代码集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.ktor.client.core)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="engine-dependency" tabindex="-1">引擎依赖项 <a class="header-anchor" href="#engine-dependency" aria-label="Permalink to &quot;引擎依赖项 {id=&quot;engine-dependency&quot;}&quot;">​</a></h3><p><a href="./client-engines">引擎</a>负责处理网络请求。针对各种平台，有不同的客户端引擎可用，例如 Apache、CIO、Android、iOS 等。例如，你可以按如下方式添加 <code>CIO</code> 引擎依赖项：</p>`,8)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-cio:$ktor_version")'})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-cio:$ktor_version"'})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-cio-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),e[14]||(e[14]=r(`<h4 id="engine-dependency-multiplatform" tabindex="-1">多平台 <a class="header-anchor" href="#engine-dependency-multiplatform" aria-label="Permalink to &quot;多平台 {id=&quot;engine-dependency-multiplatform&quot;}&quot;">​</a></h4><p>对于多平台项目，你需要为所需的引擎向相应的源代码集添加依赖项。</p><p>例如，要为 Android 添加 <code>OkHttp</code> 引擎依赖项，你可以首先在 <code>gradle/libs.versions.toml</code> 文件中定义 Ktor 版本和 <code>ktor-client-okhttp</code> 构件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[versions]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ktor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;3.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[libraries]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.kotlin:kotlin-test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ktor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">darwin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;io.ktor:ktor-client-darwin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ktor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>然后，将 <code>ktor-client-okhttp</code> 作为依赖项添加到 <code>androidMain</code> 源代码集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    androidMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.ktor.client.okhttp)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有关特定引擎所需依赖项的完整列表，请参见<a href="./client-engines#dependencies">添加引擎依赖项</a>。</p><h3 id="日志记录依赖项" tabindex="-1">日志记录依赖项 <a class="header-anchor" href="#日志记录依赖项" aria-label="Permalink to &quot;日志记录依赖项&quot;">​</a></h3><p> 在 <a href="#jvm">JVM</a> 上，Ktor 使用 Java 简单日志门面 (<a href="http://www.slf4j.org/">SLF4J</a>) 作为日志记录的抽象层。SLF4J 将日志 API 与底层日志实现解耦， 使你能够集成最适合你应用程序需求的日志框架。 常见的选择包括 <a href="https://logback.qos.ch/">Logback</a> 或 <a href="https://logging.apache.org/log4j">Log4j</a>。如果没有提供框架，SLF4J 将默认为空操作 (NOP) 实现， 这本质上禁用了日志记录。 </p><p> 要启用日志记录，请包含带有所需 SLF4J 实现的构件，例如 <a href="https://logback.qos.ch/">Logback</a>： </p>`,10)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:'              implementation("ch.qos.logback:logback-classic:$logback_version")'})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:'              implementation "ch.qos.logback:logback-classic:$logback_version"'})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`              <dependency>
                  <groupId>ch.qos.logback</groupId>
                  <artifactId>logback-classic</artifactId>
                  <version>\${logback_version}</version>
              </dependency>`})]),_:1})]),_:1}),e[15]||(e[15]=r('<p>有关 Ktor 客户端中日志记录的更多信息，请参见 <a href="./client-logging">Ktor 客户端中的日志记录</a>。</p><h3 id="plugin-dependency" tabindex="-1">插件依赖项 <a class="header-anchor" href="#plugin-dependency" aria-label="Permalink to &quot;插件依赖项 {id=&quot;plugin-dependency&quot;}&quot;">​</a></h3><p>Ktor 允许你使用默认不提供的额外客户端功能（<a href="./client-plugins">插件</a>），例如授权和序列化。其中一些插件以独立的构件提供。你可以从所需插件的主题中了解你需要哪些依赖项。</p><blockquote><p>对于多平台项目，插件依赖项应添加到 <code>commonMain</code> 源代码集。请注意，某些插件可能对特定平台有<a href="./client-engines#limitations">限制</a>。</p></blockquote><h2 id="确保-ktor-版本一致性" tabindex="-1">确保 Ktor 版本一致性 <a class="header-anchor" href="#确保-ktor-版本一致性" aria-label="Permalink to &quot;确保 Ktor 版本一致性&quot;">​</a></h2>',5)),i(u,{title:"使用 Ktor BOM 依赖项"},{default:n(()=>[e[7]||(e[7]=t("p",null,"Ktor BOM 允许你确保所有 Ktor 模块使用相同的一致版本，而无需为每个依赖项单独指定版本。",-1)),e[8]||(e[8]=t("p",null,"要添加 Ktor BOM 依赖项，请在你的构建脚本中按如下方式声明它：",-1)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:'            implementation(platform("io.ktor:ktor-bom:$ktor_version"))'})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:'            implementation platform "io.ktor:ktor-bom:$ktor_version"'})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`            <dependencyManagement>
              <dependencies>
                  <dependency>
                      <groupId>io.ktor</groupId>
                      <artifactId>ktor-bom</artifactId>
                      <version>3.2.3</version>
                      <type>pom</type>
                      <scope>import</scope>
                  </dependency>
              </dependencies>
          </dependencyManagement>`})]),_:1})]),_:1})]),_:1}),e[16]||(e[16]=t("p",null," 你还可以通过使用已发布的版本目录来集中管理 Ktor 依赖项声明。 这种方法提供以下好处： ",-1)),i(k,{id:"published-version-catalog-benefits"},{default:n(()=>e[9]||(e[9]=[t("li",null," 消除了手动在你自己的目录中声明 Ktor 版本的需要。 ",-1),t("li",null," 在单个命名空间下公开每个 Ktor 模块。 ",-1)])),_:1}),e[17]||(e[17]=t("p",null,[o(" 要声明该目录，请在 "),t("path",null,"settings.gradle.kts"),o(" 文件中创建一个你所选名称的版本目录： ")],-1)),i(s,{lang:"kotlin",code:`    dependencyResolutionManagement {
        versionCatalogs {
            create("ktorLibs") {
                from("io.ktor:ktor-version-catalog:3.2.3")
            }
        }
    }`}),e[18]||(e[18]=t("p",null,[o(" 然后，你可以在模块的 "),t("path",null,"build.gradle.kts"),o(" 文件中通过引用目录名称来添加依赖项： ")],-1)),i(s,{lang:"kotlin",code:`    dependencies {
        implementation(ktorLibs.client.core)
        // ...
    }`})])}const T=E(v,[["render",_]]);export{K as __pageData,T as default};
