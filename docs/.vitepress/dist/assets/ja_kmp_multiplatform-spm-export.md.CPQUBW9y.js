import{_ as d,a as o,b as E}from"./chunks/multiplatform-spm-url._IA5Tg3X.js";import{_ as c,C as n,c as g,o as y,j as s,G as l,ag as e,a,w as t}from"./chunks/framework.Bksy39di.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-spm-export.md","filePath":"ja/kmp/multiplatform-spm-export.md","lastUpdated":1755516278000}'),F={name:"ja/kmp/multiplatform-spm-export.md"};function u(m,i,C,f,b,w){const p=n("tldr"),h=n("list"),k=n("def"),r=n("deflist");return y(),g("div",null,[i[5]||(i[5]=s("h1",{id:"swiftパッケージのエクスポート設定",tabindex:"-1"},[a("Swiftパッケージのエクスポート設定 "),s("a",{class:"header-anchor",href:"#swiftパッケージのエクスポート設定","aria-label":'Permalink to "Swiftパッケージのエクスポート設定"'},"​")],-1)),l(p,null,{default:t(()=>i[0]||(i[0]=[a(" これはリモート統合メソッドです。以下の場合に利用できます："),s("br",null,null,-1),s("ul",null,[s("li",null,"最終アプリケーションのコードベースを共通コードベースから分離したい場合。"),s("li",null,"ローカルマシンで既にiOSをターゲットとするKotlin Multiplatformプロジェクトをセットアップ済みの場合。"),s("li",null,[a("iOSプロジェクトの依存関係の処理にSwiftパッケージマネージャーを使用している場合。"),s("br")])],-1),s("p",null,[s("a",{href:"./multiplatform-ios-integration-overview"},"最適な統合方法を選択してください")],-1)])),_:1}),i[6]||(i[6]=e('<p>Appleターゲット向けのKotlin/Native出力を、Swift Package Manager (SPM) の依存関係として利用できるように設定できます。</p><p>iOSターゲットを持つKotlin Multiplatformプロジェクトを考えてみましょう。このiOSバイナリを、ネイティブSwiftプロジェクトで作業するiOS開発者向けの依存関係として利用可能にしたい場合があります。Kotlin Multiplatformツールを利用することで、彼らのXcodeプロジェクトとシームレスに統合できるアーティファクトを提供できます。</p><p>このチュートリアルでは、Kotlin Gradleプラグインを使用して<a href="./multiplatform-build-native-binaries#build-xcframeworks">XCFrameworks</a>をビルドすることで、これを行う方法を示します。</p><h2 id="リモート統合の設定" tabindex="-1">リモート統合の設定 <a class="header-anchor" href="#リモート統合の設定" aria-label="Permalink to &quot;リモート統合の設定&quot;">​</a></h2><p>フレームワークを利用可能にするには、2つのファイルをアップロードする必要があります。</p><ul><li>XCFrameworkを含むZIPアーカイブ。これを、直接アクセス可能な便利なファイルストレージ（例えば、アーカイブを添付したGitHubリリースを作成する、Amazon S3やMavenを使用するなど）にアップロードする必要があります。 ワークフローに最も統合しやすいオプションを選択してください。</li><li>パッケージを記述する<code>Package.swift</code>ファイル。これを別のGitリポジトリにプッシュする必要があります。</li></ul>',6)),i[7]||(i[7]=s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"プロジェクト構成オプション",tabindex:"-1"},[a("プロジェクト構成オプション "),s("a",{class:"header-anchor",href:"#プロジェクト構成オプション","aria-label":'Permalink to "プロジェクト構成オプション {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[8]||(i[8]=e(`<p>このチュートリアルでは、XCFrameworkをバイナリとしてお好みのファイルストレージに保存し、<code>Package.swift</code>ファイルを別のGitリポジトリに保存します。</p><p>ただし、プロジェクトを異なる方法で構成することもできます。Gitリポジトリを整理するための以下のオプションを検討してください。</p><ul><li><p><code>Package.swift</code>ファイルとXCFrameworkにパッケージ化されるべきコードを別々のGitリポジトリに保存します。これにより、ファイルが記述するプロジェクトとは別にSwiftマニフェストのバージョン管理を行うことができます。これは推奨されるアプローチであり、拡張が可能で、一般的に保守が容易です。</p></li><li><p><code>Package.swift</code>ファイルをKotlin Multiplatformコードの隣に配置します。これはより簡単なアプローチですが、この場合、Swiftパッケージとコードが同じバージョン管理を使用することに注意してください。SPMはパッケージのバージョン管理にGitタグを使用しますが、これはプロジェクトで使用されるタグと競合する可能性があります。</p></li><li><p><code>Package.swift</code>ファイルをコンシューマプロジェクトのリポジトリ内に保存します。これはバージョン管理とメンテナンスの問題を回避するのに役立ちます。ただし、このアプローチはコンシューマプロジェクトのマルチリポジトリSPM設定とさらなる自動化で問題を引き起こす可能性があります。</p><ul><li>マルチパッケージプロジェクトでは、（プロジェクト内の依存関係の競合を避けるため）1つのコンシューマパッケージのみが外部モジュールに依存できます。したがって、Kotlin Multiplatformモジュールに依存するすべてのロジックは、特定のコンシューマパッケージにカプセル化されるべきです。</li><li>自動化されたCIプロセスを使用してKotlin Multiplatformプロジェクトを公開する場合、このプロセスには更新された<code>Package.swift</code>ファイルをコンシューマリポジトリに公開することを含む必要があります。これはコンシューマリポジトリの更新の競合につながる可能性があり、CIにおけるそのようなフェーズは維持が困難になる可能性があります。</li></ul></li></ul><h3 id="マルチプラットフォームプロジェクトの設定" tabindex="-1">マルチプラットフォームプロジェクトの設定 <a class="header-anchor" href="#マルチプラットフォームプロジェクトの設定" aria-label="Permalink to &quot;マルチプラットフォームプロジェクトの設定&quot;">​</a></h3><p>以下の例では、Kotlin Multiplatformプロジェクトの共有コードは、<code>shared</code>モジュールにローカルに保存されています。プロジェクトの構造が異なる場合は、コードおよびパスの例で&quot;shared&quot;をモジュール名に置き換えてください。</p><p>XCFrameworkの公開を設定するには：</p><ol><li><p><code>shared/build.gradle.kts</code>構成ファイルをiOSターゲットリスト内の<code>XCFramework</code>呼び出しで更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFramework</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Other Kotlin Multiplatform targets</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Name of the module to be imported in the consumer project</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcframeworkName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Shared&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XCFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xcframeworkName)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        it.binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcframeworkName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Specify CFBundleIdentifier to uniquely identify the framework</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            binaryOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bundleId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.example.\${xcframeworkName}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            xcf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            isStatic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>フレームワークを作成するためのGradleタスクを実行します。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :shared:assembleSharedXCFramework</span></span></code></pre></div><p>結果のフレームワークは、プロジェクトディレクトリ内の<code>shared/build/XCFrameworks/release/Shared.xcframework</code>フォルダーとして作成されます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>In case you work with a Compose Multiplatform project, use the following Gradle task: <code>shell ./gradlew :composeApp:assembleSharedXCFramework </code> You can then find the resulting framework in the <code>composeApp/build/XCFrameworks/release/Shared.xcframework</code> folder.</p></div></li></ol><h3 id="xcframeworkとswiftパッケージマニフェストの準備" tabindex="-1">XCFrameworkとSwiftパッケージマニフェストの準備 <a class="header-anchor" href="#xcframeworkとswiftパッケージマニフェストの準備" aria-label="Permalink to &quot;XCFrameworkとSwiftパッケージマニフェストの準備&quot;">​</a></h3>`,8)),s("ol",null,[i[3]||(i[3]=s("li",null,[s("p",null,[s("code",null,"Shared.xcframework"),a("フォルダーをZIPファイルに圧縮し、結果のアーカイブのチェックサムを計算します。例えば、次のようになります。")]),s("p",null,[s("code",null,"swift package compute-checksum Shared.xcframework.zip")])],-1)),s("li",null,[i[2]||(i[2]=s("p",null,"ZIPファイルをお好みのファイルストレージにアップロードします。ファイルは直接リンクでアクセスできる必要があります。例えば、GitHubのリリース機能を使用して行う方法は次のとおりです。",-1)),l(r,{collapsible:"true"},{default:t(()=>[l(k,{title:"GitHubリリースへのアップロード"},{default:t(()=>[l(h,{type:"decimal"},{default:t(()=>i[1]||(i[1]=[s("li",null,[s("a",{href:"https://github.com"},"GitHub"),a("にアクセスし、アカウントにログインします。")],-1),s("li",null,"リリースを作成したいリポジトリに移動します。",-1),s("li",null,[a("右側の"),s("b",null,"Releases"),a("セクションで、"),s("b",null,"Create a new release"),a("リンクをクリックします。")],-1),s("li",null,"リリース情報を入力し、新しいタグを追加または作成し、リリースタイトルを指定し、説明を記述します。",-1),s("li",null,[s("p",null,[a("下部の"),s("b",null,"Attach binaries by dropping them here or selecting them"),a("フィールドから、XCFrameworkを含むZIPファイルをアップロードします。")]),s("img",{src:d,alt:"Fill in the release information",width:"700"})],-1),s("li",null,[s("b",null,"Publish release"),a("をクリックします。")],-1),s("li",null,[s("p",null,[a("リリースの"),s("b",null,"Assets"),a("セクションで、ZIPファイルを右クリックし、ブラウザで"),s("b",null,"Copy link address"),a("または同様のオプションを選択します。")]),s("img",{src:o,alt:"Copy the link to the uploaded file",width:"500"})],-1)])),_:1})]),_:1})]),_:1})]),i[4]||(i[4]=e(`<li><p>[推奨] リンクが機能し、ファイルがダウンロードできることを確認します。ターミナルで、次のコマンドを実行します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>curl &lt;downloadable link to the uploaded XCFramework ZIP file&gt;</span></span></code></pre></div></li><li><p>任意のディレクトリを選択し、以下のコードで<code>Package.swift</code>ファイルをローカルに作成します。</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// swift-tools-version:5.3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PackageDescription</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> package</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   platforms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">iOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.v14),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   products</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">binaryTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;link to the uploaded XCFramework ZIP file&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         checksum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;checksum calculated for the ZIP file&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p><code>url</code>フィールドに、XCFrameworkを含むZIPアーカイブへのリンクを指定します。</p></li><li><p>[推奨] 結果のマニフェストを検証するには、<code>Package.swift</code>ファイルがあるディレクトリで次のシェルコマンドを実行します。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show-dependencies</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --format</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> json</span></span></code></pre></div><p>マニフェストが正しい場合、出力は発見されたエラーを記述するか、成功したダウンロードおよびパース結果を表示します。</p></li><li><p><code>Package.swift</code>ファイルをリモートリポジトリにプッシュします。パッケージのセマンティックバージョンを含むGitタグを作成し、プッシュしてください。</p></li>`,5))]),i[9]||(i[9]=e('<h3 id="パッケージ依存関係の追加" tabindex="-1">パッケージ依存関係の追加 <a class="header-anchor" href="#パッケージ依存関係の追加" aria-label="Permalink to &quot;パッケージ依存関係の追加&quot;">​</a></h3><p>両方のファイルがアクセス可能になったので、作成したパッケージへの依存関係を既存のクライアントiOSプロジェクトに追加するか、新しいプロジェクトを作成できます。パッケージ依存関係を追加するには：</p><ol><li><p>Xcodeで、<strong>File | Add Package Dependencies</strong>を選択します。</p></li><li><p>検索フィールドに、<code>Package.swift</code>ファイルを含むGitリポジトリのURLを入力します。</p><p><img src="'+E+`" alt="Specify repo with the package file"></p></li><li><p><strong>Add package</strong>ボタンをクリックし、パッケージのプロダクトと対応するターゲットを選択します。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you&#39;re making a Swift package, the dialog is different. In this case, click the <strong>Copy package</strong> button. This puts a <code>.package</code> line in your clipboard. Paste this line into the <a href="https://developer.apple.com/documentation/packagedescription/package/dependency" target="_blank" rel="noreferrer">Package.Dependency</a> block of your own <code>Package.swift</code> file and add the necessary product to the appropriate <code>Target.Dependency</code> block.</p></div></li></ol><h3 id="セットアップの確認" tabindex="-1">セットアップの確認 <a class="header-anchor" href="#セットアップの確認" aria-label="Permalink to &quot;セットアップの確認&quot;">​</a></h3><p>すべてが正しく設定されていることを確認するには、Xcodeでインポートをテストします。</p><ol><li><p>プロジェクトで、例えば<code>ContentView.swift</code>のようなUIビューファイルに移動します。</p></li><li><p>コードを以下のスニペットに置き換えます。</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwiftUI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;globe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">imageScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.large)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.tint)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world! </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(Shared.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Platform_iosKt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getPlatform</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">().</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#Preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ここでは、<code>Shared</code> XCFrameworkをインポートし、それを使用して<code>Text</code>フィールドでプラットフォーム名を取得しています。</p></li><li><p>プレビューが新しいテキストで更新されることを確認します。</p></li></ol><h2 id="複数のモジュールをxcframeworkとしてエクスポートする" tabindex="-1">複数のモジュールをXCFrameworkとしてエクスポートする <a class="header-anchor" href="#複数のモジュールをxcframeworkとしてエクスポートする" aria-label="Permalink to &quot;複数のモジュールをXCFrameworkとしてエクスポートする&quot;">​</a></h2><p>複数のKotlin MultiplatformモジュールのコードをiOSバイナリとして利用可能にするには、これらのモジュールを単一のアンブレラモジュールに結合します。その後、このアンブレラモジュールのXCFrameworkをビルドおよびエクスポートします。</p><p>例えば、<code>network</code>と<code>database</code>モジュールがあり、これらを<code>together</code>モジュールに結合します。</p><ol><li><p><code>together/build.gradle.kts</code>ファイルで、依存関係とフレームワークの構成を指定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frameworkName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;together&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XCFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(frameworkName)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { iosTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Same as in the example above,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // with added export calls for dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        iosTarget.binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.network)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.database)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frameworkName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            xcf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Dependencies set as &quot;api&quot; (as opposed to &quot;implementation&quot;) to export underlying modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.network)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.database)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>含まれる各モジュールには、例えば次のようにiOSターゲットが構成されている必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>together</code>フォルダー内に空のKotlinファイルを作成します。例えば、<code>together/src/commonMain/kotlin/Together.kt</code>です。これはワークアラウンドであり、現在Gradleスクリプトはエクスポートされるモジュールにソースコードが含まれていない場合、フレームワークをアセンブルできません。</p></li><li><p>フレームワークをアセンブルするGradleタスクを実行します。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :together:assembleTogetherReleaseXCFramework</span></span></code></pre></div></li><li><p><a href="#prepare-the-xcframework-and-the-swift-package-manifest">前のセクション</a>の手順に従って<code>together.xcframework</code>を準備します。つまり、アーカイブし、チェックサムを計算し、アーカイブされたXCFrameworkをファイルストレージにアップロードし、<code>Package.swift</code>ファイルを作成してプッシュします。</p></li></ol><p>これで、依存関係をXcodeプロジェクトにインポートできます。<code>import together</code>ディレクティブを追加すると、Swiftコードで<code>network</code>モジュールと<code>database</code>モジュールの両方からのクラスをインポートできるようになります。</p>`,11))])}const v=c(F,[["render",u]]);export{S as __pageData,v as default};
