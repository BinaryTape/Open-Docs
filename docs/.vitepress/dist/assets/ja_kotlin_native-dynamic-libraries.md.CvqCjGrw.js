import{_ as p,C as h,c as d,o as r,ag as n,j as i,G as l,a as s,w as t}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"Kotlin/Nativeを動的ライブラリとして使用する – チュートリアル","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/native-dynamic-libraries.md","filePath":"ja/kotlin/native-dynamic-libraries.md","lastUpdated":1754307826000}'),E={name:"ja/kotlin/native-dynamic-libraries.md"};function o(g,a,c,y,F,b){const e=h("tab"),k=h("tabs");return r(),d("div",null,[a[6]||(a[6]=n('<h1 id="kotlin-nativeを動的ライブラリとして使用する-–-チュートリアル" tabindex="-1">Kotlin/Nativeを動的ライブラリとして使用する – チュートリアル <a class="header-anchor" href="#kotlin-nativeを動的ライブラリとして使用する-–-チュートリアル" aria-label="Permalink to &quot;Kotlin/Nativeを動的ライブラリとして使用する – チュートリアル&quot;">​</a></h1><p>Kotlinコードを既存のプログラムから利用するために、動的ライブラリを作成できます。これにより、JVM、Python、Androidなど、多くのプラットフォームや言語間でコードを共有できるようになります。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>iOSやその他のAppleターゲット向けには、フレームワークの生成を推奨します。<a href="/ja/kotlin/apple-framework">Kotlin/NativeをAppleフレームワークとして使用する</a>チュートリアルを参照してください。</p></div><p>既存のネイティブアプリケーションやライブラリからKotlin/Nativeコードを利用できます。そのためには、Kotlinコードを<code>.so</code>、<code>.dylib</code>、または<code>.dll</code>形式の動的ライブラリにコンパイルする必要があります。</p><p>このチュートリアルでは、以下の内容を行います。</p><ul><li><a href="#create-a-kotlin-library">Kotlinコードを動的ライブラリにコンパイルする</a></li><li><a href="#generated-header-file">生成されたCヘッダーを調べる</a></li><li><a href="#use-generated-headers-from-c">CからKotlin動的ライブラリを使用する</a></li><li><a href="#compile-and-run-the-project">プロジェクトをコンパイルして実行する</a></li></ul><p>Kotlinライブラリを生成するには、コマンドラインを直接使用するか、スクリプトファイル（<code>.sh</code>や<code>.bat</code>ファイルなど）を使用できます。しかし、このアプローチは何百ものファイルやライブラリを持つ大規模なプロジェクトにはスケールしません。ビルドシステムを使用すると、Kotlin/Nativeコンパイラのバイナリやライブラリ、および推移的依存関係のダウンロードとキャッシュ、さらにコンパイラの実行とテストにより、プロセスが簡素化されます。Kotlin/Nativeは、<a href="/ja/kotlin/gradle-configure-project#targeting-multiple-platforms">Kotlin Multiplatformプラグイン</a>を通じて<a href="https://gradle.org" target="_blank" rel="noreferrer">Gradle</a>ビルドシステムを利用できます。</p><p>Kotlin/Nativeの高度なC相互運用関連の利用法と、Gradleによる<a href="/ja/kotlin/gradle-configure-project#targeting-multiple-platforms">Kotlin Multiplatform</a>ビルドについて見ていきましょう。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Macを使用しており、macOSまたはその他のAppleターゲット向けアプリケーションを作成および実行したい場合は、まず<a href="https://developer.apple.com/download/" target="_blank" rel="noreferrer">Xcode Command Line Tools</a>をインストールし、起動して、ライセンス条項に同意する必要があります。</p></div><h2 id="kotlinライブラリを作成する" tabindex="-1">Kotlinライブラリを作成する <a class="header-anchor" href="#kotlinライブラリを作成する" aria-label="Permalink to &quot;Kotlinライブラリを作成する&quot;">​</a></h2><p>Kotlin/Nativeコンパイラは、Kotlinコードから動的ライブラリを生成できます。動的ライブラリには、コンパイルされたコードをCから呼び出すために使用する<code>.h</code>ヘッダーファイルが付属していることがよくあります。</p><p>Kotlinライブラリを作成し、Cプログラムから利用してみましょう。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>新しいKotlin/Nativeプロジェクトを作成し、IntelliJ IDEAで開くための詳細な最初のステップと手順については、<a href="/ja/kotlin/native-get-started#using-gradle">Kotlin/Native入門</a>チュートリアルを参照してください。</p></div>',13)),i("ol",null,[a[4]||(a[4]=n(`<li><p><code>src/nativeMain/kotlin</code>ディレクトリに移動し、以下のライブラリコンテンツを含む<code>lib.kt</code>ファイルを作成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> field</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> memberFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ULong</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42UL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> forIntegers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> forFloats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, d: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;That is &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$str</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; from C&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A global String&quot;</span></span></code></pre></div></li>`,1)),i("li",null,[a[2]||(a[2]=i("p",null,[i("code",null,"build.gradle(.kts)"),s(" Gradleビルドファイルを次のように更新します。")],-1)),l(k,{group:"build-script"},{default:t(()=>[l(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"repositories"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    mavenCentral"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    macosArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {    "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// macOS on Apple Silicon")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // macosX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // macOS on x86_64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxArm64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // Linux on ARM64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // Linux on x86_64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // mingwX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        binaries"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            sharedLib"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "native"'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"       // macOS and Linux ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'                // baseName = "libnative"'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"wrapper"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "8.14"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Wrapper.DistributionType.ALL")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.multiplatform'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"repositories {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mavenCentral()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    macosArm64("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {    "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// Apple Silicon macOS")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // macosX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // macOS on x86_64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxArm64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // Linux on ARM64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // Linux on x86_64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // mingwX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            sharedLib {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "native"'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"       // macOS and Linux ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'                // baseName = "libnative"'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"wrapper {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "8.14"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "ALL"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[3]||(a[3]=i("ul",null,[i("li",null,[i("code",null,"binaries {}"),s("ブロックは、プロジェクトが動的ライブラリまたは共有ライブラリを生成するように設定します。")]),i("li",null,[i("code",null,"libnative"),s("は、ライブラリ名として、生成されるヘッダーファイル名のプレフィックスとして使用されます。また、ヘッダーファイル内のすべての宣言にプレフィックスを付けます。")])],-1))]),a[5]||(a[5]=n('<li><p>IDEで<code>linkDebugSharedNative</code> Gradleタスクを実行するか、ターミナルで次のコンソールコマンドを使用してライブラリをビルドします。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkDebugSharedNative</span></span></code></pre></div></li>',1))]),a[7]||(a[7]=n(`<p>ビルドにより、ライブラリが<code>build/bin/native/debugShared</code>ディレクトリに以下のファイルとともに生成されます。</p><ul><li>macOS: <code>libnative_api.h</code>および<code>libnative.dylib</code></li><li>Linux: <code>libnative_api.h</code>および<code>libnative.so</code></li><li>Windows: <code>libnative_api.h</code>、<code>libnative.def</code>、および<code>libnative.dll</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>linkNative</code> Gradleタスクを使用して、ライブラリの<code>debug</code>版と<code>release</code>版の両方を生成することもできます。</p></div><p>Kotlin/Nativeコンパイラは、すべてのプラットフォームに対して同じルールを使用して<code>.h</code>ファイルを生成します。KotlinライブラリのC APIを確認してみましょう。</p><h2 id="生成されたヘッダーファイル" tabindex="-1">生成されたヘッダーファイル <a class="header-anchor" href="#生成されたヘッダーファイル" aria-label="Permalink to &quot;生成されたヘッダーファイル&quot;">​</a></h2><p>Kotlin/Nativeの宣言がどのようにC関数にマッピングされるかを見ていきましょう。</p><p><code>build/bin/native/debugShared</code>ディレクトリで、<code>libnative_api.h</code>ヘッダーファイルを開きます。最初の部分には、標準のC/C++ヘッダーとフッターが含まれています。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifndef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KONAN_LIBNATIVE_H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KONAN_LIBNATIVE_H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __cplusplus</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// The rest of the generated code</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __cplusplus</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* extern &quot;C&quot; */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* KONAN_LIBNATIVE_H */</span></span></code></pre></div><p>これに続いて、<code>libnative_api.h</code>には共通の型定義を含むブロックが含まれています。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __cplusplus</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            libnative_KBoolean;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> _Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           libnative_KBoolean;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     libnative_KChar;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> signed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        libnative_KByte;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              libnative_KShort;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                libnative_KInt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          libnative_KLong;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      libnative_KUByte;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     libnative_KUShort;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       libnative_KUInt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_KULong;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              libnative_KFloat;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             libnative_KDouble;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __attribute__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__vector_size__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))) libnative_KVector128;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              libnative_KNativePtr;</span></span></code></pre></div><p>Kotlinは、作成された<code>libnative_api.h</code>ファイル内のすべての宣言に<code>libnative_</code>プレフィックスを使用します。以下に、型マッピングの完全なリストを示します。</p><table tabindex="0"><thead><tr><th>Kotlinの定義</th><th>Cの型</th></tr></thead><tbody><tr><td><code>libnative_KBoolean</code></td><td><code>bool</code> or <code>_Bool</code></td></tr><tr><td><code>libnative_KChar</code></td><td><code>unsigned short</code></td></tr><tr><td><code>libnative_KByte</code></td><td><code>signed char</code></td></tr><tr><td><code>libnative_KShort</code></td><td><code>short</code></td></tr><tr><td><code>libnative_KInt</code></td><td><code>int</code></td></tr><tr><td><code>libnative_KLong</code></td><td><code>long long</code></td></tr><tr><td><code>libnative_KUByte</code></td><td><code>unsigned char</code></td></tr><tr><td><code>libnative_KUShort</code></td><td><code>unsigned short</code></td></tr><tr><td><code>libnative_KUInt</code></td><td><code>unsigned int</code></td></tr><tr><td><code>libnative_KULong</code></td><td><code>unsigned long long</code></td></tr><tr><td><code>libnative_KFloat</code></td><td><code>float</code></td></tr><tr><td><code>libnative_KDouble</code></td><td><code>double</code></td></tr><tr><td><code>libnative_KVector128</code></td><td><code>float __attribute__ ((__vector_size__ (16))</code></td></tr><tr><td><code>libnative_KNativePtr</code></td><td><code>void*</code></td></tr></tbody></table><p><code>libnative_api.h</code>ファイルの定義セクションは、Kotlinのプリミティブ型がCのプリミティブ型にどのようにマッピングされるかを示しています。Kotlin/Nativeコンパイラは、すべてのライブラリに対してこれらのエントリを自動的に生成します。逆のマッピングについては、<a href="/ja/kotlin/mapping-primitive-data-types-from-c">Cからのプリミティブデータ型のマッピング</a>チュートリアルで説明されています。</p><p>自動生成された型定義の後には、ライブラリで使用されている個別の型定義が見つかります。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_KType;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_KType libnative_KType;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// Automatically generated type definitions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  libnative_KNativePtr pinned;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} libnative_kref_example_Object;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  libnative_KNativePtr pinned;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} libnative_kref_example_Clazz;</span></span></code></pre></div><p>C言語では、<code>typedef struct { ... } TYPE_NAME</code>構文が構造体を宣言します。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>このパターンの詳細については、<a href="https://stackoverflow.com/questions/1675351/typedef-struct-vs-struct-definitions" target="_blank" rel="noreferrer">StackOverflowのこのスレッド</a>を参照してください。</p></div><p>これらの定義からわかるように、Kotlinの型は同じパターンでマッピングされます。<code>Object</code>は<code>libnative_kref_example_Object</code>に、<code>Clazz</code>は<code>libnative_kref_example_Clazz</code>にマッピングされます。すべての構造体は、ポインタを持つ<code>pinned</code>フィールドのみを含んでいます。<code>libnative_KNativePtr</code>フィールドの型は、ファイルの冒頭で<code>void*</code>として定義されています。</p><p>C言語は名前空間をサポートしていないため、Kotlin/Nativeコンパイラは、既存のネイティブプロジェクト内の他のシンボルとの衝突を避けるために長い名前を生成します。</p><h3 id="サービスランタイム関数" tabindex="-1">サービスランタイム関数 <a class="header-anchor" href="#サービスランタイム関数" aria-label="Permalink to &quot;サービスランタイム関数&quot;">​</a></h3><p><code>libnative_ExportedSymbols</code>構造体は、Kotlin/Nativeとあなたのライブラリが提供するすべての関数を定義します。これは、パッケージを模倣するためにネストされた匿名構造体を多用しています。<code>libnative_</code>プレフィックスはライブラリ名に由来します。</p><p><code>libnative_ExportedSymbols</code>には、ヘッダーファイルにいくつかのヘルパー関数が含まれています。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* Service functions. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DisposeStablePointer)(libnative_KNativePtr ptr);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DisposeString)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string);</span></span></code></pre></div><p>これらの関数はKotlin/Nativeオブジェクトを扱います。<code>DisposeStablePointer</code>はKotlinオブジェクトへの参照を解放するために呼び出され、<code>DisposeString</code>はC言語で<code>char*</code>型を持つKotlin文字列を解放するために呼び出されます。</p><p><code>libnative_api.h</code>ファイルの次の部分には、ランタイム関数の構造体宣言が含まれています。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">IsInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KNativePtr ref, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_KType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">IsInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KNativePtr ref, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_KType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KByte);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Byte);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KShort);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Short);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KInt);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Int);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KLong);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Long);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KFloat);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Float);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KDouble);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Double);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KChar);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Char);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KBoolean);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Boolean);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_UByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableUByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KUByte);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KUByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfUByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_UByte);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_UShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableUShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KUShort);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KUShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfUShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_UShort);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_UInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableUInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KUInt);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KUInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfUInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_UInt);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_ULong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableULong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KULong);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KULong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfULong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_ULong);</span></span></code></pre></div><p><code>IsInstance</code>関数を使用して、Kotlinオブジェクト（その<code>.pinned</code>ポインタで参照される）がある型のインスタンスであるかどうかを確認できます。生成される操作の実際のセットは、実際の使用状況によって異なります。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin/Nativeには独自のガベージコレクタがありますが、CからアクセスされるKotlinオブジェクトは管理しません。ただし、Kotlin/Nativeは<a href="/ja/kotlin/native-objc-interop">Swift/Objective-Cとの相互運用</a>を提供しており、ガベージコレクタは<a href="/ja/kotlin/native-arc-integration">Swift/Objective-C ARCと統合されています</a>。</p></div><h3 id="あなたのライブラリ関数" tabindex="-1">あなたのライブラリ関数 <a class="header-anchor" href="#あなたのライブラリ関数" aria-label="Permalink to &quot;あなたのライブラリ関数&quot;">​</a></h3><p>ライブラリで使用されている個別の構造体宣言を見てみましょう。<code>libnative_kref_example</code>フィールドは、<code>libnative_kref.</code>プレフィックスを付けてKotlinコードのパッケージ構造を模倣しています。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* User functions. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          libnative_KType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_type)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          libnative_kref_example_Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_instance)();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get_field)(libnative_kref_example_Object thiz);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } Object;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          libnative_KType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_type)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          libnative_kref_example_Clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Clazz)();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          libnative_KULong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">memberFunction)(libnative_kref_example_Clazz thiz, libnative_KInt p);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } Clazz;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get_globalString)();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">forFloats)(libnative_KFloat f, libnative_KDouble d);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">forIntegers)(libnative_KByte b, libnative_KShort s, libnative_KUInt i, libnative_KLong l);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strings)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } example;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } root;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } kotlin;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} libnative_ExportedSymbols;</span></span></code></pre></div><p>このコードは匿名構造体宣言を使用しています。ここでは、<code>struct { ... } foo</code>は、名前のない匿名構造体型の外側の構造体内にフィールドを宣言しています。</p><p>C言語もオブジェクトをサポートしていないため、関数ポインタを使用してオブジェクトのセマンティクスを模倣します。関数ポインタは<code>RETURN_TYPE (* FIELD_NAME)(PARAMETERS)</code>として宣言されます。</p><p><code>libnative_kref_example_Clazz</code>フィールドは、Kotlinの<code>Clazz</code>を表します。<code>libnative_KULong</code>は<code>memberFunction</code>フィールドでアクセス可能です。唯一の違いは、<code>memberFunction</code>が最初のパラメータとして<code>thiz</code>参照を受け入れることです。C言語はオブジェクトをサポートしないため、<code>thiz</code>ポインタが明示的に渡されます。</p><p><code>Clazz</code>フィールド（別名<code>libnative_kref_example_Clazz_Clazz</code>）にはコンストラクタがあり、これは<code>Clazz</code>のインスタンスを作成するコンストラクタ関数として機能します。</p><p>Kotlinの<code>object Object</code>は<code>libnative_kref_example_Object</code>としてアクセス可能です。<code>_instance</code>関数は、オブジェクトの唯一のインスタンスを取得します。</p><p>プロパティは関数に変換されます。<code>get_</code>と<code>set_</code>プレフィックスは、それぞれゲッター関数とセッター関数を命名します。たとえば、Kotlinの読み取り専用プロパティ<code>globalString</code>は、Cでは<code>get_globalString</code>関数に変換されます。</p><p>グローバル関数<code>forFloats</code>、<code>forIntegers</code>、および<code>strings</code>は、<code>libnative_kref_example</code>匿名構造体内の関数ポインタに変換されます。</p><h3 id="エントリポイント" tabindex="-1">エントリポイント <a class="header-anchor" href="#エントリポイント" aria-label="Permalink to &quot;エントリポイント&quot;">​</a></h3><p>APIがどのように作成されるかがわかったところで、<code>libnative_ExportedSymbols</code>構造体の初期化が開始点となります。では、<code>libnative_api.h</code>の最後の部分を見ていきましょう。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_ExportedSymbols</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> libnative_symbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>libnative_symbols</code>関数は、ネイティブコードからKotlin/Nativeライブラリへのゲートウェイを開くことを可能にします。これはライブラリにアクセスするためのエントリポイントです。ライブラリ名が関数名のプレフィックスとして使用されます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>返される<code>libnative_ExportedSymbols*</code>ポインタをスレッドごとにホストする必要がある場合があります。</p></div><h2 id="cから生成されたヘッダーを使用する" tabindex="-1">Cから生成されたヘッダーを使用する <a class="header-anchor" href="#cから生成されたヘッダーを使用する" aria-label="Permalink to &quot;Cから生成されたヘッダーを使用する&quot;">​</a></h2><p>Cから生成されたヘッダーを使用するのは簡単です。ライブラリディレクトリに、次のコードを含む<code>main.c</code>ファイルを作成します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;libnative_api.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;stdio.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Obtain reference for calling Kotlin/Native functions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  libnative_ExportedSymbols</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> libnative_symbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lib-&gt;kotlin.root.example.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forIntegers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lib-&gt;kotlin.root.example.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forFloats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Use C and Kotlin/Native strings</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello from Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib-&gt;kotlin.root.example.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;in: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">out:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lib-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisposeString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Create Kotlin object instance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  libnative_kref_example_Clazz newInstance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib-&gt;kotlin.root.example.Clazz.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib-&gt;kotlin.root.example.Clazz.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memberFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newInstance, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lib-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisposeStablePointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newInstance.pinned);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DemoClazz returned </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%ld</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="プロジェクトをコンパイルして実行する" tabindex="-1">プロジェクトをコンパイルして実行する <a class="header-anchor" href="#プロジェクトをコンパイルして実行する" aria-label="Permalink to &quot;プロジェクトをコンパイルして実行する&quot;">​</a></h2><h3 id="macosの場合" tabindex="-1">macOSの場合 <a class="header-anchor" href="#macosの場合" aria-label="Permalink to &quot;macOSの場合&quot;">​</a></h3><p>Cコードをコンパイルし、動的ライブラリとリンクするには、ライブラリディレクトリに移動して次のコマンドを実行します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clang</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libnative.dylib</span></span></code></pre></div><p>コンパイラは<code>a.out</code>という実行可能ファイルを生成します。これを実行して、CライブラリからKotlinコードを実行します。</p><h3 id="linuxの場合" tabindex="-1">Linuxの場合 <a class="header-anchor" href="#linuxの場合" aria-label="Permalink to &quot;Linuxの場合&quot;">​</a></h3><p>Cコードをコンパイルし、動的ライブラリとリンクするには、ライブラリディレクトリに移動して次のコマンドを実行します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libnative.so</span></span></code></pre></div><p>コンパイラは<code>a.out</code>という実行可能ファイルを生成します。これを実行して、CライブラリからKotlinコードを実行します。Linuxでは、アプリケーションが現在のフォルダから<code>libnative.so</code>ライブラリをロードすることを認識させるために、<code>.</code>を<code>LD_LIBRARY_PATH</code>に含める必要があります。</p><h3 id="windowsの場合" tabindex="-1">Windowsの場合 <a class="header-anchor" href="#windowsの場合" aria-label="Permalink to &quot;Windowsの場合&quot;">​</a></h3><p>まず、x64_64ターゲットをサポートするMicrosoft Visual C++コンパイラをインストールする必要があります。</p><p>これを行う最も簡単な方法は、WindowsマシンにMicrosoft Visual Studioをインストールすることです。インストール中に、C++で作業するために必要なコンポーネルの例として、<strong>C++によるデスクトップ開発</strong>を選択します。</p><p>Windowsでは、静的ライブラリラッパーを生成するか、<a href="https://learn.microsoft.com/en-gb/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya" target="_blank" rel="noreferrer">LoadLibrary</a>または類似のWin32API関数を手動で利用するかによって、動的ライブラリを含めることができます。</p><p>最初のオプションを使用して、<code>libnative.dll</code>の静的ラッパーライブラリを生成してみましょう。</p><ol><li><p>ツールチェーンから<code>lib.exe</code>を呼び出し、コードからのDLL使用を自動化する静的ライブラリラッパー<code>libnative.lib</code>を生成します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /def:libnative.def</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /out:libnative.lib</span></span></code></pre></div></li><li><p><code>main.c</code>を実行可能ファイルにコンパイルします。生成された<code>libnative.lib</code>をビルドコマンドに含めて開始します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cl.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libnative.lib</span></span></code></pre></div><p>このコマンドは、実行可能な<code>main.exe</code>ファイルを生成します。</p></li></ol><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li><a href="/ja/kotlin/native-objc-interop">Swift/Objective-Cとの相互運用についてさらに学ぶ</a></li><li><a href="/ja/kotlin/apple-framework">Kotlin/NativeをAppleフレームワークとして使用するチュートリアルを確認する</a></li></ul>`,63))])}const u=p(E,[["render",o]]);export{_ as __pageData,u as default};
