import{_ as d,C as o,c as n,o as c,j as a,G as t,ag as s,a as r}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"改善編譯時間的提示","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/native-improving-compilation-time.md","filePath":"zh-Hant/kotlin/native-improving-compilation-time.md","lastUpdated":1754307826000}'),p={name:"zh-Hant/kotlin/native-improving-compilation-time.md"};function h(u,e,m,b,k,g){const l=o("show-structure"),i=o("TopicTitle");return c(),n("div",null,[e[0]||(e[0]=a("h1",{id:"改善編譯時間的提示",tabindex:"-1"},[r("改善編譯時間的提示 "),a("a",{class:"header-anchor",href:"#改善編譯時間的提示","aria-label":'Permalink to "改善編譯時間的提示"'},"​")],-1)),t(l,{depth:"1"}),e[1]||(e[1]=s('<p>Kotlin/Native 編譯器不斷接收更新，以提升其效能。藉由最新的 Kotlin/Native 編譯器和正確配置的建置環境，您可以顯著改善使用 Kotlin/Native 目標的專案之編譯時間。</p><p>請繼續閱讀我們關於如何加速 Kotlin/Native 編譯過程的提示。</p><h2 id="一般建議" tabindex="-1">一般建議 <a class="header-anchor" href="#一般建議" aria-label="Permalink to &quot;一般建議&quot;">​</a></h2><h3 id="使用最新版本的-kotlin" tabindex="-1">使用最新版本的 Kotlin <a class="header-anchor" href="#使用最新版本的-kotlin" aria-label="Permalink to &quot;使用最新版本的 Kotlin&quot;">​</a></h3><p>這樣，您將始終獲得最新的效能改進。最新的 Kotlin 版本為 2.2.10。</p><h3 id="避免建立龐大的類別" tabindex="-1">避免建立龐大的類別 <a class="header-anchor" href="#避免建立龐大的類別" aria-label="Permalink to &quot;避免建立龐大的類別&quot;">​</a></h3><p>盡量避免建立在編譯和執行載入時需要很長時間的龐大類別。</p><h3 id="在建置之間保留已下載和快取的元件" tabindex="-1">在建置之間保留已下載和快取的元件 <a class="header-anchor" href="#在建置之間保留已下載和快取的元件" aria-label="Permalink to &quot;在建置之間保留已下載和快取的元件&quot;">​</a></h3><p>在編譯專案時，Kotlin/Native 會下載所需的元件，並將其部分工作結果快取到 <code>$USER_HOME/.konan</code> 目錄。編譯器使用此目錄進行後續編譯，使其花費較少時間完成。</p><p>在容器（例如 Docker）或持續整合系統中建置時，編譯器可能必須為每次建置從頭建立 <code>~/.konan</code> 目錄。為避免此步驟，請配置您的環境以在建置之間保留 <code>~/.konan</code>。例如，使用 <code>kotlin.data.dir</code> Gradle 屬性重新定義其位置。</p><p>或者，您可以使用 <code>-Xkonan-data-dir</code> 編譯器選項，透過 <code>cinterop</code> 和 <code>konanc</code> 工具配置您自訂的目錄路徑。</p><h2 id="gradle-配置" tabindex="-1">Gradle 配置 <a class="header-anchor" href="#gradle-配置" aria-label="Permalink to &quot;Gradle 配置&quot;">​</a></h2><p>由於需要下載依賴項、建置快取並執行額外步驟，使用 Gradle 的首次編譯通常比後續編譯花費更多時間。您應至少建置您的專案兩次，以獲得實際編譯時間的準確讀數。</p><p>以下是關於如何配置 Gradle 以獲得更好編譯效能的一些建議。</p><h3 id="增加-gradle-堆積大小" tabindex="-1">增加 Gradle 堆積大小 <a class="header-anchor" href="#增加-gradle-堆積大小" aria-label="Permalink to &quot;增加 Gradle 堆積大小&quot;">​</a></h3><p>要增加 <a href="https://docs.gradle.org/current/userguide/performance.html#adjust_the_daemons_heap_size" target="_blank" rel="noreferrer">Gradle 堆積大小</a>，請將 <code>org.gradle.jvmargs=-Xmx3g</code> 加入您的 <code>gradle.properties</code> 檔案中。</p><p>如果您使用 <a href="https://docs.gradle.org/current/userguide/performance.html#parallel_execution" target="_blank" rel="noreferrer">平行建置</a>，您可能需要使用 <code>org.gradle.workers.max</code> 屬性或 <code>--max-workers</code> 命令列選項來選擇合適的工作者數量。預設值為 CPU 處理器數量。</p><h3 id="僅建置必要的二進位檔" tabindex="-1">僅建置必要的二進位檔 <a class="header-anchor" href="#僅建置必要的二進位檔" aria-label="Permalink to &quot;僅建置必要的二進位檔&quot;">​</a></h3><p>除非您確實需要，否則不要執行會建置整個專案的 Gradle 任務，例如 <code>build</code> 或 <code>assemble</code>。這些任務會多次建置相同的程式碼，從而增加編譯時間。在典型情況下，例如從 IntelliJ IDEA 執行測試或從 Xcode 啟動應用程式時，Kotlin 工具會避免執行不必要的任務。</p><p>如果您有非典型情況或建置配置，您可能需要自行選擇任務：</p><ul><li><p><code>linkDebug*</code>。在開發期間執行您的程式碼時，您通常只需要一個二進位檔，因此執行對應的 <code>linkDebug*</code> 任務應該就足夠了。</p></li><li><p><code>embedAndSignAppleFrameworkForXcode</code>。由於 iOS 模擬器和裝置具有不同的處理器架構，因此將 Kotlin/Native 二進位檔作為通用 (fat) 框架發布是一種常見方法。</p><p>然而，在本地開發期間，僅為您使用的平台建置 <code>.framework</code> 檔案會更快。要建置特定平台框架，請使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-direct-integration.html#connect-the-framework-to-your-project" target="_blank" rel="noreferrer">embedAndSignAppleFrameworkForXcode</a> 任務。</p></li></ul><h3 id="僅為必要的目標建置" tabindex="-1">僅為必要的目標建置 <a class="header-anchor" href="#僅為必要的目標建置" aria-label="Permalink to &quot;僅為必要的目標建置&quot;">​</a></h3><p>與上述建議類似，不要一次為所有原生平台建置二進位檔。例如，編譯 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html#build-xcframeworks" target="_blank" rel="noreferrer">XCFramework</a>（使用 <code>*XCFramework</code> 任務）會為所有目標建置相同的程式碼，這會比為單一目標建置花費成比例更多的時間。</p><p>如果您的設定確實需要 XCFramework，您可以減少目標數量。例如，如果您不在基於 Intel 的 Mac 上的 iOS 模擬器上執行此專案，則不需要 <code>iosX64</code>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>針對不同目標的二進位檔是透過 <code>linkDebug*$Target</code> 和 <code>linkRelease*$Target</code> Gradle 任務建置的。您可以透過執行帶有 <code>--scan</code> 選項的 Gradle 建置來在建置日誌或 <a href="https://docs.gradle.org/current/userguide/build_scans.html" target="_blank" rel="noreferrer">Gradle 建置掃描</a>中查找已執行的任務。</p></div><h3 id="不要建置不必要的發行二進位檔" tabindex="-1">不要建置不必要的發行二進位檔 <a class="header-anchor" href="#不要建置不必要的發行二進位檔" aria-label="Permalink to &quot;不要建置不必要的發行二進位檔&quot;">​</a></h3><p>Kotlin/Native 支援兩種建置模式：<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html#declare-binaries" target="_blank" rel="noreferrer">偵錯和發行</a>。發行模式經過高度最佳化，這會花費大量時間：編譯發行二進位檔所花費的時間比偵錯二進位檔高一個數量級。</p><p>除了實際發行之外，在典型的開發週期中，所有這些最佳化可能是不必要的。如果您在開發過程中使用了名稱中包含 <code>Release</code> 的任務，請考慮將其替換為 <code>Debug</code>。同樣地，您可以執行 <code>assembleSharedDebugXCFramework</code>，而不是執行 <code>assembleXCFramework</code>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>發行二進位檔是透過 <code>linkRelease*</code> Gradle 任務建置的。您可以透過執行帶有 <code>--scan</code> 選項的 Gradle 建置，在建置日誌或 <a href="https://docs.gradle.org/current/userguide/build_scans.html" target="_blank" rel="noreferrer">Gradle 建置掃描</a>中檢查它們。</p></div><h3 id="不要停用-gradle-守護程式" tabindex="-1">不要停用 Gradle 守護程式 <a class="header-anchor" href="#不要停用-gradle-守護程式" aria-label="Permalink to &quot;不要停用 Gradle 守護程式&quot;">​</a></h3><p>如果沒有充分理由，不要停用 <a href="https://docs.gradle.org/current/userguide/gradle_daemon.html" target="_blank" rel="noreferrer">Gradle 守護程式</a>。預設情況下，<a href="https://blog.jetbrains.com/kotlin/2020/03/kotlin-1-3-70-released/#kotlin-native" target="_blank" rel="noreferrer">Kotlin/Native 從 Gradle 守護程式運行</a>。當它啟用時，會使用相同的 JVM 程序，並且無需為每次編譯預熱它。</p><h3 id="不要使用傳遞式匯出" tabindex="-1">不要使用傳遞式匯出 <a class="header-anchor" href="#不要使用傳遞式匯出" aria-label="Permalink to &quot;不要使用傳遞式匯出&quot;">​</a></h3><p>使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html#export-dependencies-to-binaries" target="_blank" rel="noreferrer"><code>transitiveExport = true</code></a> 在許多情況下會停用死碼消除，因此編譯器必須處理大量未使用的程式碼。這會增加編譯時間。相反地，請明確使用 <code>export</code> 方法來匯出所需的專案和依賴項。</p><h3 id="不要過度匯出模組" tabindex="-1">不要過度匯出模組 <a class="header-anchor" href="#不要過度匯出模組" aria-label="Permalink to &quot;不要過度匯出模組&quot;">​</a></h3><p>盡量避免不必要的 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html#export-dependencies-to-binaries" target="_blank" rel="noreferrer">模組匯出</a>。每個匯出的模組都會對編譯時間和二進位檔大小產生負面影響。</p><h3 id="使用-gradle-建置快取" tabindex="-1">使用 Gradle 建置快取 <a class="header-anchor" href="#使用-gradle-建置快取" aria-label="Permalink to &quot;使用 Gradle 建置快取&quot;">​</a></h3><p>啟用 Gradle <a href="https://docs.gradle.org/current/userguide/build_cache.html" target="_blank" rel="noreferrer">建置快取</a>功能：</p><ul><li><strong>本地建置快取</strong>。對於本地快取，請將 <code>org.gradle.caching=true</code> 加入您的 <code>gradle.properties</code> 檔案中，或在命令列中執行帶有 <code>--build-cache</code> 選項的建置。</li><li><strong>遠端建置快取</strong>。了解如何為持續整合環境 <a href="https://docs.gradle.org/current/userguide/build_cache.html#sec:build_cache_configure_remote" target="_blank" rel="noreferrer">配置遠端建置快取</a>。</li></ul><h3 id="使用-gradle-配置快取" tabindex="-1">使用 Gradle 配置快取 <a class="header-anchor" href="#使用-gradle-配置快取" aria-label="Permalink to &quot;使用 Gradle 配置快取&quot;">​</a></h3><p>要使用 Gradle <a href="https://docs.gradle.org/current/userguide/configuration_cache.html" target="_blank" rel="noreferrer">配置快取</a>，請將 <code>org.gradle.configuration-cache=true</code> 加入您的 <code>gradle.properties</code> 檔案中。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>配置快取還支援平行執行 <code>link*</code> 任務，這可能會嚴重負載機器，特別是在 CPU 核心數量很多的情況下。此問題將在 <a href="https://youtrack.jetbrains.com/issue/KT-70915" target="_blank" rel="noreferrer">KT-70915</a> 中修復。</p></div><h3 id="啟用先前已禁用的功能" tabindex="-1">啟用先前已禁用的功能 <a class="header-anchor" href="#啟用先前已禁用的功能" aria-label="Permalink to &quot;啟用先前已禁用的功能&quot;">​</a></h3><p>有 Kotlin/Native 屬性可以停用 Gradle 守護程式和編譯器快取：</p><ul><li><code>kotlin.native.disableCompilerDaemon=true</code></li><li><code>kotlin.native.cacheKind=none</code></li><li><code>kotlin.native.cacheKind.$target=none</code>，其中 <code>$target</code> 是 Kotlin/Native 編譯目標，例如 <code>iosSimulatorArm64</code>。</li></ul><p>如果您之前遇到這些功能的問題，並將這些行加入您的 <code>gradle.properties</code> 檔案或 Gradle 參數中，請移除它們並檢查建置是否成功完成。這些屬性可能是在之前為了解決已修復的問題而添加的。</p><h3 id="嘗試-klib-構件的增量編譯" tabindex="-1">嘗試 klib 構件的增量編譯 <a class="header-anchor" href="#嘗試-klib-構件的增量編譯" aria-label="Permalink to &quot;嘗試 klib 構件的增量編譯&quot;">​</a></h3><p>透過增量編譯，如果專案模組產生的 <code>klib</code> 構件只有一部分發生變化，那麼只有 <code>klib</code> 的一部分會被進一步重新編譯為二進位檔。</p><p>此功能為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。要啟用它，請將 <code>kotlin.incremental.native=true</code> 選項加入您的 <code>gradle.properties</code> 檔案中。如果您遇到任何問題，請在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中建立一個議題。</p><h2 id="windows-配置" tabindex="-1">Windows 配置 <a class="header-anchor" href="#windows-配置" aria-label="Permalink to &quot;Windows 配置&quot;">​</a></h2><p>Windows 安全性可能會減慢 Kotlin/Native 編譯器的速度。您可以透過將預設位於 <code>%\\USERPROFILE%</code> 的 <code>.konan</code> 目錄加入 Windows 安全性排除項來避免此問題。了解如何<a href="https://support.microsoft.com/en-us/windows/add-an-exclusion-to-windows-security-811816c0-4dfd-af4a-47e4-c301afe13b26" target="_blank" rel="noreferrer">將排除項加入 Windows 安全性</a>。</p>',50)),t(i,{id:"llvm-配置",level:"2",title:"LLVM 配置",labelRef:"advanced"}),e[2]||(e[2]=a("p",null,[r("如果上述提示未能改善編譯時間，請考慮"),a("a",{href:"/zh-Hant/kotlin/native-llvm-passes"},"自訂 LLVM 後端"),r("。")],-1))])}const v=d(p,[["render",h]]);export{_ as __pageData,v as default};
