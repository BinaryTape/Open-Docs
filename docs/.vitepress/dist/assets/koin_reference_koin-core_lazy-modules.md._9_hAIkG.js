import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"惰性模块与后台加载","description":"","frontmatter":{"title":"惰性模块与后台加载"},"headers":[],"relativePath":"koin/reference/koin-core/lazy-modules.md","filePath":"koin/reference/koin-core/lazy-modules.md","lastUpdated":1748365453000}'),e={name:"koin/reference/koin-core/lazy-modules.md"};function t(p,s,h,k,d,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="惰性模块与后台加载" tabindex="-1">惰性模块与后台加载 <a class="header-anchor" href="#惰性模块与后台加载" aria-label="Permalink to &quot;惰性模块与后台加载&quot;">​</a></h1><p>本节将介绍如何使用惰性加载方式组织你的模块。</p><h2 id="定义惰性模块-实验性" tabindex="-1">定义惰性模块 [实验性] <a class="header-anchor" href="#定义惰性模块-实验性" aria-label="Permalink to &quot;定义惰性模块 [实验性]&quot;">​</a></h2><p>你现在可以声明惰性 Koin 模块，以避免触发任何资源的预分配，并在 Koin 启动时在后台加载它们。</p><ul><li><code>lazyModule</code> - 声明 Koin 模块的惰性 Kotlin 版本</li><li><code>Module.includes</code> - 允许包含惰性模块</li></ul><p>一个好的例子总能更好地帮助理解：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Some lazy modules</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lazyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// include m2 lazy module</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lazyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m2)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><pre><code>\`LazyModule\` 在通过以下 API 加载之前，不会触发任何资源。
</code></pre></div><h2 id="使用-kotlin-协程进行后台加载-实验性" tabindex="-1">使用 Kotlin 协程进行后台加载 [实验性] <a class="header-anchor" href="#使用-kotlin-协程进行后台加载-实验性" aria-label="Permalink to &quot;使用 Kotlin 协程进行后台加载 [实验性]&quot;">​</a></h2><p>声明一些惰性模块后，你可以从 Koin 配置中在后台加载它们，并进行更多操作。</p><ul><li><code>KoinApplication.lazyModules</code> - 使用协程在后台加载惰性模块，遵循平台默认的调度器 (Dispatchers)</li><li><code>Koin.waitAllStartJobs</code> - 等待启动任务完成</li><li><code>Koin.runOnKoinStarted</code> - 在启动完成后运行代码块</li></ul><p>一个好的例子总能更好地帮助理解：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // load lazy Modules in background</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KoinPlatform.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// wait for loading jobs to finish</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">waitAllStartJobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or run code after loading is done</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runOnKoinStarted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { koin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // run after background load complete</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><pre><code>\`lazyModules\` 函数允许你指定一个调度器 (dispatcher)：\`lazyModules(modules, dispatcher = Dispatcher.IO)\`
</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><pre><code>协程引擎的默认调度器是 \`Dispatchers.Default\`
</code></pre></div><h3 id="限制-混合使用模块与惰性模块" tabindex="-1">限制 - 混合使用模块与惰性模块 <a class="header-anchor" href="#限制-混合使用模块与惰性模块" aria-label="Permalink to &quot;限制 - 混合使用模块与惰性模块&quot;">​</a></h3><p>目前我们建议在启动时避免混合使用模块和惰性模块。避免让 <code>mainModule</code> 依赖于 <code>lazyReporter</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this@TestApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mainModule)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lazyReporter)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>目前 Koin 不会检查你的模块是否依赖于惰性模块</p></div>`,19)]))}const E=i(e,[["render",t]]);export{c as __pageData,E as default};
