import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"ブラウザとDOM API","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/browser-api-dom.md","filePath":"ja/kotlin/browser-api-dom.md","lastUpdated":1754307826000}'),n={name:"ja/kotlin/browser-api-dom.md"};function l(p,s,h,k,d,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="ブラウザとdom-api" tabindex="-1">ブラウザとDOM API <a class="header-anchor" href="#ブラウザとdom-api" aria-label="Permalink to &quot;ブラウザとDOM API&quot;">​</a></h1><p>Kotlin/JS標準ライブラリは、<code>kotlinx.browser</code>パッケージを使用してブラウザ固有の機能にアクセスできます。このパッケージには、<code>document</code>や<code>window</code>のような典型的なトップレベルオブジェクトが含まれています。標準ライブラリは、これらのオブジェクトによって公開される機能に対して、可能な限り型安全なラッパーを提供します。代替手段として、Kotlinの型システムにうまくマッピングできない関数とのやり取りには、<code>dynamic</code>型が使用されます。</p><h2 id="domとのやり取り" tabindex="-1">DOMとのやり取り <a class="header-anchor" href="#domとのやり取り" aria-label="Permalink to &quot;DOMとのやり取り&quot;">​</a></h2><p>ドキュメントオブジェクトモデル (DOM) とのやり取りには、<code>document</code>変数を使用できます。たとえば、このオブジェクトを通してウェブサイトの背景色を設定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.bgColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;FFAA12&quot;</span></span></code></pre></div><p><code>document</code>オブジェクトは、ID、名前、クラス名、タグ名などによって特定の要素を取得する方法も提供します。返されるすべての要素は<code>Element?</code>型です。それらのプロパティにアクセスするには、適切な型にキャストする必要があります。たとえば、電子メールの<code>&lt;input&gt;</code>フィールドを含むHTMLページがあると仮定します。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/javascript&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tutorial.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>スクリプトは<code>body</code>タグの最後に含まれていることに注意してください。これにより、スクリプトがロードされる前にDOMが完全に利用可能であることが保証されます。</p><p>この設定で、DOMの要素にアクセスできます。<code>input</code>フィールドのプロパティにアクセスするには、<code>getElementById</code>を呼び出して<code>HTMLInputElement</code>にキャストします。その後、<code>value</code>などのプロパティに安全にアクセスできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HTMLInputElement</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">email.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hadi@jetbrains.com&quot;</span></span></code></pre></div><p>この<code>input</code>要素を参照するのと同じように、ページ上の他の要素にアクセスし、それらを適切な型にキャストできます。</p><p>DOMで要素を簡潔に作成し、構造化する方法については、<a href="/ja/kotlin/typesafe-html-dsl">型安全なHTML DSL</a>を参照してください。</p>`,12)]))}const c=i(n,[["render",l]]);export{r as __pageData,c as default};
