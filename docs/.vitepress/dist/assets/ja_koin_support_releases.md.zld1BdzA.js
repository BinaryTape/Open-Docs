import{_ as e,c as s,o as a,ag as o}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"リリースとAPIアップグレードガイド","description":"","frontmatter":{"title":"リリースとAPIアップグレードガイド","custom_edit_url":null},"headers":[],"relativePath":"ja/koin/support/releases.md","filePath":"ja/koin/support/releases.md","lastUpdated":1750001831000}'),l={name:"ja/koin/support/releases.md"};function n(d,i,t,p,c,k){return a(),s("div",null,i[0]||(i[0]=[o(`<h1 id="リリースとapiアップグレードガイド" tabindex="-1">リリースとAPIアップグレードガイド <a class="header-anchor" href="#リリースとapiアップグレードガイド" aria-label="Permalink to &quot;リリースとAPIアップグレードガイド&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>このページでは、Koinの主要なリリースごとに包括的な概要を提供し、フレームワークの進化を詳しく説明することで、アップグレードの計画と互換性の維持に役立てることができます。</p></div><p>各バージョンについて、ドキュメントは以下のセクションで構成されています。</p><ul><li><code>Kotlin</code>: リリースで使用されるKotlinのバージョンを指定し、言語の互換性を明確にし、最新のKotlin機能を利用できるようにします。</li><li><code>New</code>: 機能性と開発者エクスペリエンスを向上させるために新しく導入された機能と改善点を強調します。</li><li><code>Experimental</code>: 実験的としてマークされたAPIと機能を一覧表示します。これらは現在活発に開発中であり、コミュニティからのフィードバックに基づいて変更される可能性があります。</li><li><code>Deprecated</code>: 非推奨とマークされたAPIと機能を特定し、推奨される代替案に関するガイダンスとともに、将来の削除に備えるのに役立ちます。</li><li><code>Breaking</code>: 後方互換性を損なう可能性のある変更点を詳しく説明し、移行中に必要な調整を把握できるようにします。</li></ul><p>この構造化されたアプローチは、各リリースにおける段階的な変更を明確にするだけでなく、Koinプロジェクトにおける透明性、安定性、継続的な改善への私たちのコミットメントを強化します。</p><p>詳細については、<a href="/ja/koinapi-stability">API安定性契約</a>を参照してください。</p><h2 id="_4-1-1" tabindex="-1">4.1.1 <a class="header-anchor" href="#_4-1-1" aria-label="Permalink to &quot;4.1.1&quot;">​</a></h2><h3 id="new-🎉" tabindex="-1">New 🎉 <a class="header-anchor" href="#new-🎉" aria-label="Permalink to &quot;New 🎉&quot;">​</a></h3><p><code>koin-ktor</code></p><ul><li>統合 - Ktor 3.2のデフォルトDIエンジンを統合するための<code>KtorDIExtension</code>を提供</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setupDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DbConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { database }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomerRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> database: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomerRepository</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">customerDataModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    koinModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomerRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) bind CustomerRepository::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_4-1-0" tabindex="-1">4.1.0 <a class="header-anchor" href="#_4-1-0" aria-label="Permalink to &quot;4.1.0&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin <code>2.1.20</code> を使用</p></div><h3 id="new-🎉-1" tabindex="-1">New 🎉 <a class="header-anchor" href="#new-🎉-1" aria-label="Permalink to &quot;New 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li>設定 - 設定をラップするのに役立つ<code>KoinConfiguration</code> API</li><li>スコープ - スコープのカテゴリに対する専用のスコープ型クオリファイアの新しい<em>スコープアーキタイプ</em>を導入します。インスタンスの解決は、スコープカテゴリ（別名アーキタイプ）に対して行えるようになりました。</li><li>機能オプション - Koin内の新しい機能の挙動を機能フラグとして設定するのに役立つ「機能オプション」。Koin設定の<code>options</code>ブロックでオプションを有効化できます。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // activate a new feature</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        viewModelScopeFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>コア - <code>ResolutionExtension</code>がKoinを外部システムやリソースで解決するのに役立つ新しい<code>CoreResolver</code>を導入します（これはKtor DIの接続に役立ちます）。</li></ul><p><code>koin-android</code></p><ul><li>アップグレードされたライブラリ（<code>androidx.appcompat:appcompat:1.7.0</code>、<code>androidx.activity:activity-ktx:1.10.1</code>）は、最小SDKレベルを14から21に引き上げる必要があります。</li><li>DSL - Activity/Fragment内でスコープを宣言するための新しいKoinモジュールDSL拡張機能<code>activityScope</code>、<code>activityRetainedScope</code>、<code>fragmentScope</code>を追加しました。</li><li>スコープ関数 - また、<code>activityScope()</code>、<code>activityRetainedScope()</code>、<code>fragmentScope()</code> API関数がスコープアーキタイプをトリガーするようになりました。</li></ul><p><code>koin-androidx-compose</code></p><ul><li>Koin Compose MultiplatformおよびCompose 1.8 &amp; Lifecycle 2.9すべてに準拠</li></ul><p><code>koin-compose</code></p><ul><li>Compose 1.8 &amp; Lifecycle 2.9に準拠</li><li>新関数 - Android Studio &amp; IntelliJでの並行プレビューのレンダリングに役立つ<code>KoinApplicationPreview</code></li></ul><p><code>koin-compose-viewmodel</code></p><ul><li>親Activityをホストとして設定できるように<code>koinActivityViewModel</code>を追加</li></ul><p><code>koin-ktor</code></p><ul><li>マルチプラットフォーム - このモジュールは現在Kotlin KMP形式でコンパイルされています。マルチプラットフォームプロジェクトから<code>koin-ktor</code>をターゲットにできます。</li><li>マージ - 以前のkoin-ktor3モジュールはkoin-ktorにマージされました。</li><li>拡張機能 - <code>Application.koinModule { }</code>および<code>Application.koinModules()</code>を導入し、Ktorモジュールに直接結合されたKoinモジュールを宣言できるようにします。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">customerDataModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    koinModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomerRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) bind CustomerRepository::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>スコープ - <code>Module.requestScope</code> - Ktorリクエストスコープ内で定義を宣言することを可能にします（<code>scope&lt;RequestScope&gt;</code>を手動で宣言するのを避けます）。 注入されたスコープは、コンストラクタで<code>ApplicationCall</code>を注入することも可能です。</li></ul><p><code>koin-core-coroutines</code></p><ul><li>モジュールDSL - モジュール設定を単一の構造にまとめるのに役立つ新しい<code>ModuleConfiguration</code>を導入し、後でより適切に検証できるようにします。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Simple.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lm1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lazyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Simple.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>設定DSL - Koinの設定で<code>ModuleConfiguration</code>を使用してモジュールをロードできるようになりました。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or even</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(conf)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>koin-test-coroutines</code></p><ul><li>新しいコルーチン関連のテストAPIを導入するために、新しい<code>koin-test-coroutines</code> Koinモジュールを追加しました。</li><li>拡張機能 - <code>Verify</code> APIを拡張し、<code>moduleConfiguration</code>を使用してKoin設定をチェックし、モジュールと遅延モジュールの混合設定を検証できるようにします。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// if you want Android types (koin-android-test)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(extraTypes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> androidTypes)</span></span></code></pre></div><p><code>koin-core-annotations</code></p><ul><li>アノテーション - <code>@InjectedParam</code>または<code>@Provided</code>を使用して、プロパティを注入されたパラメータまたは動的に提供されたものとしてタグ付けします。現在のところ<code>Verify</code> APIで使用されていますが、将来的にはより軽量なDSL宣言に役立つ可能性があります。</li></ul><h3 id="experimental-🚧" tabindex="-1">Experimental 🚧 <a class="header-anchor" href="#experimental-🚧" aria-label="Permalink to &quot;Experimental 🚧&quot;">​</a></h3><p><code>koin-core</code></p><ul><li>Wasm - Kotlin 2.1.20 UUID生成の使用</li></ul><p><code>koin-core-viewmodel</code></p><ul><li>DSL - ViewModelスコープアーキタイプにスコープ指定されたコンポーネントを宣言するためのモジュールDSL拡張機能<code>viewModelScope</code>を追加</li><li>スコープ関数 - ViewModel用のスコープを作成する関数<code>viewModelScope()</code>を追加しました（ViewModelクラスに紐付けられます）。このAPIは現在<code>ViewModelScopeAutoCloseable</code>を使用して<code>AutoCloseable</code> APIを使用し、スコープを宣言して閉じることができます。ViewModelスコープを手動で閉じる必要がなくなりました。</li><li>クラス - <code>ScopeViewModel</code>クラスを更新し、すぐに使用できるViewModelスコープクラスのサポートを提供します（スコープの作成と閉じを処理）。</li><li>機能オプション - ViewModelのスコープによるコンストラクタViewModelインジェクションには、Koinオプション<code>viewModelScopeFactory</code>の有効化が必要です。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // activate a new ViewModel scope creation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        viewModelScopeFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will inject Session from MyScopeViewModel&#39;s scope</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopeViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    viewModelOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopeViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    viewModelScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        scopedOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>koin-compose</code></p><ul><li>Compose関数 - マルチプラットフォームComposeエントリポイントを提案するために、新しい<code>KoinMultiplatformApplication</code>関数を追加しました。</li></ul><p><code>koin-core-viewmodel-navigation</code></p><ul><li>ナビゲーション拡張機能 - ナビゲーションの<code>NavbackEntry</code>からViewModelインスタンスを再利用するために<code>sharedViewModel</code>を追加</li></ul><p><code>koin-test</code></p><ul><li>アノテーション - Koin設定検証APIの<code>Verify</code>は、nullable、lazy、およびリストパラメータのチェックに役立つようになりました。単に<code>@InjectedParam</code>または<code>@Provided</code>を使用して、プロパティを注入されたパラメータまたは動的に提供されたものとしてタグ付けします。これにより、<code>Verify</code> APIでの複雑な宣言を回避できます。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// now detected in Verify</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentBParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@InjectedParam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentBProvided</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Provided</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="deprecation-⚠️" tabindex="-1">Deprecation ⚠️ <a class="header-anchor" href="#deprecation-⚠️" aria-label="Permalink to &quot;Deprecation ⚠️&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>ScopeViewModel</code>は非推奨となり、代わりに<code>koin-core-viewmodel</code>の<code>ScopeViewModel</code>クラスを使用するようになりました。</li></ul><p><code>koin-compose</code></p><ul><li>Koinコンテキストが現在のデフォルトコンテキストで適切に準備されるため、ComposeコンテキストAPIは不要になりました。以下は非推奨であり、削除できます：<code>KoinContext</code></li></ul><p><code>koin-androidx-compose</code></p><ul><li>Koinコンテキストが現在のデフォルトコンテキストで適切に準備されるため、Jetpack ComposeコンテキストAPIは不要になりました。以下は非推奨であり、削除できます：<code>KoinAndroidContext</code></li></ul><p><code>koin-androidx-compose-navigation</code></p><ul><li>ライフサイクルライブラリの更新により、関数<code>koinNavViewModel</code>は不要となり、<code>koinViewModel</code>に置き換えられます。</li></ul><p><code>koin-core-viewmodel-navigation</code></p><ul><li>ライフサイクルライブラリの更新により、関数<code>koinNavViewModel</code>は不要となり、<code>koinViewModel</code>に置き換えられます。</li></ul><p><code>koin-ktor</code></p><ul><li>拡張機能 - <code>Application.koin</code>は非推奨となり、<code>Application.koinModules</code>および<code>Application.koinModule</code>が推奨されます。</li></ul><h3 id="breaking-💥" tabindex="-1">Breaking 💥 <a class="header-anchor" href="#breaking-💥" aria-label="Permalink to &quot;Breaking 💥&quot;">​</a></h3><p><code>koin-android</code></p><ul><li>すべての古いState ViewModel APIは削除されました。 <ul><li><code>stateViewModel()</code>、<code>getStateViewModel()</code> は、代わりに<code>viewModel()</code>を使用してください。</li><li><code>getSharedStateViewModel()</code>、<code>sharedStateViewModel()</code> は、代わりに<code>viewModel()</code>または共有インスタンスには<code>activityViewModel()</code>を使用してください。</li></ul></li></ul><p><code>koin-compose</code></p><ul><li>古いCompose API関数は削除されました。 <ul><li>関数<code>inject()</code>は<code>koinInject()</code>に置き換えられ削除されました。</li><li>関数<code>getViewModel()</code>は<code>koinViewModel()</code>に置き換えられ削除されました。</li><li>関数<code>rememberKoinInject()</code>は<code>koinInject()</code>に移動されました。</li></ul></li><li>関数<code>rememberKoinApplication</code>は<code>@KoinInternalAPI</code>としてマークされました。</li></ul><h2 id="_4-0-4" tabindex="-1">4.0.4 <a class="header-anchor" href="#_4-0-4" aria-label="Permalink to &quot;4.0.4&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin <code>2.0.21</code> を使用</p></div><p>使用されているすべてのライブラリバージョンは <a href="https://github.com/InsertKoinIO/koin/blob/main/projects/gradle/libs.versions.toml" target="_blank" rel="noreferrer">libs.versions.toml</a> にあります。</p><h3 id="new-🎉-2" tabindex="-1">New 🎉 <a class="header-anchor" href="#new-🎉-2" aria-label="Permalink to &quot;New 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li><code>KoinPlatformTools.generateId()</code> - この新しいKotlinバージョンにより、新しい<code>kotlin.uuid.uuid</code> APIの恩恵を受けることができます。<code>KoinPlatformTools.generateId()</code> Koin関数は、この新しいAPIを使用してプラットフォーム間で実際のUUIDを生成するようになりました。</li></ul><p><code>koin-viewmodel</code></p><ul><li>Koin 4.0では、Google/Jetbrains KMP APIを共通化するViewModel DSL &amp; APIが導入されました。コードベース全体での重複を避けるため、ViewModel APIは現在<code>koin-core-viewmodel</code>および<code>koin-core-viewmodel-navigation</code>プロジェクトに配置されています。</li><li>ViewModel DSLのインポートは<code>org.koin.core.module.dsl.*</code>です。</li></ul><p>指定されたプロジェクトにおける以下のAPIは、現在安定版です。</p><p><code>koin-core-coroutines</code> - すべてのAPIが現在安定版です</p><ul><li>すべての<code>lazyModules</code></li><li><code>awaitAllStartJobs</code>、<code>onKoinStarted</code>、<code>isAllStartedJobsDone</code></li><li><code>waitAllStartJobs</code>、<code>runOnKoinStarted</code></li><li><code>KoinApplication.coroutinesEngine</code></li><li><code>Module.includes(lazy)</code></li><li><code>lazyModule()</code></li><li><code>KoinPlatformCoroutinesTools</code></li></ul><h3 id="experimental-🚧-1" tabindex="-1">Experimental 🚧 <a class="header-anchor" href="#experimental-🚧-1" aria-label="Permalink to &quot;Experimental 🚧&quot;">​</a></h3><p><code>koin-test</code></p><ul><li><code>ParameterTypeInjection</code> - <code>Verify</code> APIのための動的なパラメータインジェクションを設計するのに役立つ新しいAPI</li></ul><p><code>koin-androidx-startup</code></p><ul><li><code>koin-androidx-startup</code> - <code>AndroidX Startup</code>を使用してKoinを開始する新しい機能で、<code>androidx.startup.Initializer</code> APIを使用します。<code>koin-androidx-startup</code>内のすべてのAPIは実験的です。</li></ul><p><code>koin-compose</code></p><ul><li><code>rememberKoinModules</code> - @Composableコンポーネントに基づいてKoinモジュールをロード/アンロード</li><li><code>rememberKoinScope</code> - @Composableコンポーネントに基づいてKoinスコープをロード/アンロード</li><li><code>KoinScope</code> - すべての下層のComposable子孫のためにKoinスコープをロード</li></ul><h3 id="deprecation-⚠️-1" tabindex="-1">Deprecation ⚠️ <a class="header-anchor" href="#deprecation-⚠️-1" aria-label="Permalink to &quot;Deprecation ⚠️&quot;">​</a></h3><p>以下のAPIは非推奨となり、もはや使用すべきではありません。</p><ul><li><p><code>koin-test</code></p><ul><li><code>checkModules</code>のすべてのAPI。<code>Verify</code> APIに移行してください。</li></ul></li><li><p><code>koin-android</code></p><ul><li><code>koin-core</code>の新しい一元化されたDSLを優先するViewModel DSL</li><li>すべての状態ViewModel APIはエラーレベルで非推奨です。 <ul><li><code>stateViewModel()</code>、<code>getStateViewModel()</code> は、代わりに<code>viewModel()</code>を使用してください。</li><li><code>getSharedStateViewModel()</code>、<code>sharedStateViewModel()</code> は、代わりに<code>viewModel()</code>または共有インスタンスには<code>activityViewModel()</code>を使用してください。</li></ul></li></ul></li></ul><p><code>koin-compose</code></p><ul><li><p>古いCompose API関数はエラーレベルで非推奨です。</p><ul><li>関数<code>inject()</code>は<code>koinInject()</code>を優先して非推奨（エラーレベル）となりました。</li><li>関数<code>getViewModel()</code>は<code>koinViewModel()</code>を優先して非推奨（エラーレベル）となりました。</li><li>関数<code>rememberKoinInject()</code>は<code>koinInject()</code>を優先して非推奨（エラーレベル）となりました。</li></ul></li><li><p><code>koin-compose-viewmodel</code></p><ul><li><code>koin-core</code>の新しい一元化されたDSLを優先するViewModel DSL</li><li>関数<code>koinNavViewModel</code>は非推奨となり、<code>koinViewModel</code>が推奨されます。</li></ul></li></ul><h3 id="breaking-💥-1" tabindex="-1">Breaking 💥 <a class="header-anchor" href="#breaking-💥-1" aria-label="Permalink to &quot;Breaking 💥&quot;">​</a></h3><p>以下のAPIは、前回のマイルストーンでの非推奨化により削除されました。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>@KoinReflectAPI</code>でアノテーションされたすべてのAPIは削除されました。</p></div><p><code>koin-core</code></p><ul><li><code>ApplicationAlreadyStartedException</code> は <code>KoinApplicationAlreadyStartedException</code> に名称変更されました。</li><li><code>KoinScopeComponent.closeScope()</code> は内部的に使用されなくなったため削除されました。</li><li>内部の<code>ResolutionContext</code> が <code>InstanceContext</code> を置き換えるために移動されました。</li><li><code>KoinPlatformTimeTools</code>、<code>Timer</code>、<code>measureDuration</code> は削除され、代わりにKotlin Time APIを使用するようになりました。</li><li><code>KoinContextHandler</code> は <code>GlobalContext</code> を優先して削除されました。</li></ul><p><code>koin-android</code></p><ul><li>関数<code>fun Fragment.createScope()</code> は削除されました。</li><li>ViewModelファクトリに関するすべてのAPI（主に内部的なもの）は、新しい内部構造のために再構築されました。</li></ul><p><code>koin-compose</code></p><ul><li>内部的に使用されなくなったため、<code>StableParametersDefinition</code> は削除されました。</li><li>すべてのLazy ViewModel API（古い<code>viewModel()</code>）は削除されました。</li><li>内部的に使用されなくなったため、<code>rememberStableParametersDefinition()</code> は削除されました。</li></ul><h2 id="_3-5-6" tabindex="-1">3.5.6 <a class="header-anchor" href="#_3-5-6" aria-label="Permalink to &quot;3.5.6&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin <code>1.9.22</code> を使用</p></div><p>使用されているすべてのライブラリバージョンは <a href="https://github.com/InsertKoinIO/koin/blob/3.5.6/projects/gradle/libs.versions.toml" target="_blank" rel="noreferrer">libs.versions.toml</a> にあります。</p><h3 id="new-🎉-3" tabindex="-1">New 🎉 <a class="header-anchor" href="#new-🎉-3" aria-label="Permalink to &quot;New 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li><code>KoinContext</code> に以下の機能が追加されました。 <ul><li><code>fun loadKoinModules(module: Module, createEagerInstances: Boolean = false)</code></li><li><code>fun loadKoinModules(modules: List&lt;Module&gt;, createEagerInstances: Boolean = false)</code></li></ul></li><li><code>koinApplication()</code> 関数は現在、複数の形式で使用可能です。 <ul><li><code>koinApplication(createEagerInstances: Boolean = true, appDeclaration: KoinAppDeclaration? = null)</code></li><li><code>koinApplication(appDeclaration: KoinAppDeclaration?)</code></li><li><code>koinApplication(createEagerInstances: Boolean)</code></li></ul></li><li>宣言スタイルを開くのに役立つ<code>KoinAppDeclaration</code></li><li>JS向けAPI Timeを使用するための<code>KoinPlatformTimeTools</code></li><li>iOS - Touchlab Lockable APIを使用するための<code>synchronized</code> API</li></ul><p><code>koin-androidx-compose</code></p><ul><li>Android環境から現在のKoinコンテキストにバインドするための新しい<code>KoinAndroidContext</code></li></ul><p><code>koin-compose</code></p><ul><li>現在のデフォルトコンテキストで新しい<code>KoinContext</code> コンテキストを起動</li></ul><p><code>koin-ktor</code></p><ul><li>現在、Ktorインスタンスに隔離されたコンテキストを使用します（デフォルトコンテキストの代わりに<code>Application.getKoin()</code>を使用）。</li><li>Koinプラグインに新しいモニタリング機能が導入されました。</li><li>Ktorリクエストにスコープインスタンスを許可する<code>RequestScope</code></li></ul><h3 id="experimental-🚧-2" tabindex="-1">Experimental 🚧 <a class="header-anchor" href="#experimental-🚧-2" aria-label="Permalink to &quot;Experimental 🚧&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>ViewModelScope</code> はViewModelスコープ向けの実験的なAPIを導入します。</li></ul><p><code>koin-core-coroutines</code> - バックグラウンドでモジュールをロードするための新しいAPIを導入</p><h3 id="deprecation-⚠️-2" tabindex="-1">Deprecation ⚠️ <a class="header-anchor" href="#deprecation-⚠️-2" aria-label="Permalink to &quot;Deprecation ⚠️&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>getLazyViewModelForClass()</code> APIは非常に複雑であり、デフォルトのグローバルコンテキストを呼び出します。Android/Fragment APIにこだわることをお勧めします。</li><li><code>resolveViewModelCompat()</code> は <code>resolveViewModel()</code> を優先して非推奨となりました。</li></ul><p><code>koin-compose</code></p><ul><li>関数<code>get()</code> と <code>inject()</code> は <code>koinInject()</code> を優先して非推奨となりました。</li><li>関数<code>getViewModel()</code> は <code>koinViewModel()</code> を優先して非推奨となりました。</li><li>関数<code>rememberKoinInject()</code> は <code>koinInject()</code> を優先して非推奨となりました。</li></ul><h3 id="breaking-💥-2" tabindex="-1">Breaking 💥 <a class="header-anchor" href="#breaking-💥-2" aria-label="Permalink to &quot;Breaking 💥&quot;">​</a></h3><p><code>koin-core</code></p><ul><li><code>Koin.loadModules(modules: List&lt;Module&gt;, allowOverride: Boolean = true, createEagerInstances : Boolean = false)</code> は <code>Koin.loadModules(modules: List&lt;Module&gt;, allowOverride: Boolean = true)</code> を置き換えます。</li><li>プロパティ<code>KoinExtension.koin</code> は関数<code>KoinExtension.onRegister()</code> に移動されました。</li><li>iOS - <code>internal fun globalContextByMemoryModel(): KoinContext</code> は <code>MutableGlobalContext</code> を使用するようになりました。</li></ul><p><code>koin-compose</code></p><ul><li>関数<code>KoinApplication(moduleList: () -&gt; List&lt;Module&gt;, content: @Composable () -&gt; Unit)</code> は <code>KoinContext</code> および <code>KoinAndroidContext</code> を優先して削除されました。</li></ul><h2 id="_3-4-3" tabindex="-1">3.4.3 <a class="header-anchor" href="#_3-4-3" aria-label="Permalink to &quot;3.4.3&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin <code>1.8.21</code> を使用</p></div><h3 id="new-🎉-4" tabindex="-1">New 🎉 <a class="header-anchor" href="#new-🎉-4" aria-label="Permalink to &quot;New 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li>Koinのエクステンションエンジンを記述するのに役立つ新しいExtensionManager API - <code>ExtensionManager</code> + <code>KoinExtension</code></li><li><code>parameterArrayOf</code> と <code>parameterSetOf</code> を用いたParameters APIの更新</li></ul><p><code>koin-test</code></p><ul><li><code>Verification</code> API - モジュールに対して<code>verify</code>を実行するのに役立ちます。</li></ul><p><code>koin-android</code></p><ul><li>ViewModelインジェクションのための内部実装</li><li><code>AndroidScopeComponent.onCloseScope()</code> 関数コールバックを追加</li></ul><p><code>koin-android-test</code></p><ul><li><code>Verification</code> API - モジュールに対して<code>androidVerify()</code>を実行するのに役立ちます。</li></ul><p><code>koin-androidx-compose</code></p><ul><li>新しい<code>get()</code></li><li>新しい<code>getViewModel()</code></li><li>新しいスコープ<code>KoinActivityScope</code>、<code>KoinFragmentScope</code></li></ul><p><code>koin-androidx-compose-navigation</code> - ナビゲーション用の新しいモジュール</p><ul><li>新しい<code>koinNavViewModel()</code></li></ul><p><code>koin-compose</code> - Compose向けの新しいマルチプラットフォームAPI</p><ul><li><code>koinInject</code>、<code>rememberKoinInject</code></li><li><code>KoinApplication</code></li></ul><h3 id="experimental-🚧-3" tabindex="-1">Experimental 🚧 <a class="header-anchor" href="#experimental-🚧-3" aria-label="Permalink to &quot;Experimental 🚧&quot;">​</a></h3><p><code>koin-compose</code> - Compose向けの新しい実験的なマルチプラットフォームAPI</p><ul><li><code>rememberKoinModules</code></li><li><code>KoinScope</code>、<code>rememberKoinScope</code></li></ul><h3 id="deprecation-⚠️-3" tabindex="-1">Deprecation ⚠️ <a class="header-anchor" href="#deprecation-⚠️-3" aria-label="Permalink to &quot;Deprecation ⚠️&quot;">​</a></h3><p><code>koin-compose</code></p><ul><li><code>get()</code> 関数は、Lazy関数を避けつつ<code>inject()</code> の使用を置き換えるもの</li><li><code>getViewModel()</code> 関数は、Lazy関数を避けつつ<code>viewModel()</code> 関数を置き換えるもの</li></ul><h3 id="breaking-💥-3" tabindex="-1">Breaking 💥 <a class="header-anchor" href="#breaking-💥-3" aria-label="Permalink to &quot;Breaking 💥&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>LifecycleScopeDelegate</code> は削除されました。</li></ul><p><code>koin-androidx-compose</code></p><ul><li><code>getStateViewModel</code> は <code>koinViewModel</code> を優先して削除されました。</li></ul>`,157)]))}const E=e(l,[["render",n]]);export{r as __pageData,E as default};
