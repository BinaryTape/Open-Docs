import{_ as r,C as h,c as o,o as d,ag as l,j as s,G as t,a,w as n}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"kapt 編譯器外掛程式","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/kapt.md","filePath":"zh-Hant/kotlin/kapt.md","lastUpdated":1754307826000}'),c={name:"zh-Hant/kotlin/kapt.md"};function E(g,i,y,u,b,v){const e=h("tab"),p=h("tabs"),k=h("TopicTitle");return d(),o("div",null,[i[9]||(i[9]=l('<h1 id="kapt-編譯器外掛程式" tabindex="-1">kapt 編譯器外掛程式 <a class="header-anchor" href="#kapt-編譯器外掛程式" aria-label="Permalink to &quot;kapt 編譯器外掛程式&quot;">​</a></h1><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>kapt 處於維護模式。我們將其與最新的 Kotlin 和 Java 版本保持同步，但沒有計劃實施新功能。請使用 <a href="/zh-Hant/kotlin/ksp-overview">Kotlin 符號處理 API (KSP)</a> 進行註解處理。 <a href="/zh-Hant/kotlin/ksp-overview#supported-libraries">請參閱 KSP 支援的函式庫列表</a>。</p></div><p>Kotlin 透過 <em>kapt</em> 編譯器外掛程式支援註解處理器（請參閱 <a href="https://jcp.org/en/jsr/detail?id=269" target="_blank" rel="noreferrer">JSR 269</a>）。</p><p>簡而言之，kapt 透過啟用基於 Java 的註解處理，協助您在 Kotlin 專案中使用 <a href="https://google.github.io/dagger/" target="_blank" rel="noreferrer">Dagger</a> 和 <a href="https://developer.android.com/topic/libraries/data-binding/index.html" target="_blank" rel="noreferrer">資料繫結 (Data Binding)</a> 等函式庫。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您在使用 kapt 搭配 K2 編譯器時遇到任何問題，請向我們的 <a href="http://kotl.in/issue" target="_blank" rel="noreferrer">問題追蹤器</a> 回報，並在您的 <code>gradle.properties</code> 檔案中停用 K2 模式： <code>kotlin kapt.use.k2=false </code></p></div><h2 id="在-gradle-中使用" tabindex="-1">在 Gradle 中使用 <a class="header-anchor" href="#在-gradle-中使用" aria-label="Permalink to &quot;在 Gradle 中使用&quot;">​</a></h2><p>要在 Gradle 中使用 kapt，請依照以下步驟操作：</p>',7)),s("ol",null,[s("li",null,[i[2]||(i[2]=s("p",null,[a("在您的建置指令碼檔案 "),s("code",null,"build.gradle(.kts)"),a(" 中應用 "),s("code",null,"kapt"),a(" Gradle 外掛程式：")],-1)),t(p,{group:"build-script"},{default:n(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>i[0]||(i[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kapt"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>i[1]||(i[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlin.kapt"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),s("li",null,[i[5]||(i[5]=s("p",null,[a("在 "),s("code",null,"dependencies {}"),a(" 區塊中使用 "),s("code",null,"kapt"),a(" 配置新增相應的依賴項：")],-1)),t(p,{group:"build-script"},{default:n(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>i[3]||(i[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kapt"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"groupId:artifactId:version"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>i[4]||(i[4]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kapt "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'groupId:artifactId:version'")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i[6]||(i[6]=l('<li><p>如果您之前曾使用 <a href="https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html#annotationProcessor_config" target="_blank" rel="noreferrer">Android 支援</a> 進行註解處理器，請將 <code>annotationProcessor</code> 配置的用法替換為 <code>kapt</code>。如果您的專案包含 Java 類別，<code>kapt</code> 也會處理它們。</p><p>如果您將註解處理器用於您的 <code>androidTest</code> 或 <code>test</code> 來源，則相應的 <code>kapt</code> 配置名稱為 <code>kaptAndroidTest</code> 和 <code>kaptTest</code>。請注意，<code>kaptAndroidTest</code> 和 <code>kaptTest</code> 繼承自 <code>kapt</code>，因此您可以提供 <code>kapt</code> 依賴項，它將同時適用於生產來源和測試。</p></li>',1))]),i[10]||(i[10]=l(`<h2 id="註解處理器引數" tabindex="-1">註解處理器引數 <a class="header-anchor" href="#註解處理器引數" aria-label="Permalink to &quot;註解處理器引數&quot;">​</a></h2><p>在您的建置指令碼檔案 <code>build.gradle(.kts)</code> 中使用 <code>arguments {}</code> 區塊將引數傳遞給註解處理器：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kapt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="gradle-建置快取支援" tabindex="-1">Gradle 建置快取支援 <a class="header-anchor" href="#gradle-建置快取支援" aria-label="Permalink to &quot;Gradle 建置快取支援&quot;">​</a></h2><p>kapt 註解處理任務預設情況下在 <a href="https://guides.gradle.org/using-build-cache/" target="_blank" rel="noreferrer">Gradle 中進行快取</a>。 然而，註解處理器可以執行任意程式碼，這可能無法可靠地將任務輸入轉換為輸出，或者可能存取和修改 Gradle 未追蹤的檔案。 如果建置中使用的註解處理器無法正確快取，您可以透過在建置指令碼中指定 <code>useBuildCache</code> 屬性來完全停用 kapt 的快取。 這有助於防止 kapt 任務的誤報快取命中：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    useBuildCache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="提升使用-kapt-的建置速度" tabindex="-1">提升使用 kapt 的建置速度 <a class="header-anchor" href="#提升使用-kapt-的建置速度" aria-label="Permalink to &quot;提升使用 kapt 的建置速度&quot;">​</a></h2><h3 id="平行執行-kapt-任務" tabindex="-1">平行執行 kapt 任務 <a class="header-anchor" href="#平行執行-kapt-任務" aria-label="Permalink to &quot;平行執行 kapt 任務&quot;">​</a></h3><p>為了提升使用 kapt 的建置速度，您可以為 kapt 任務啟用 <a href="https://guides.gradle.org/using-the-worker-api/" target="_blank" rel="noreferrer">Gradle Worker API</a>。使用 Worker API 讓 Gradle 能夠平行執行單一專案中獨立的註解處理任務，這在某些情況下能顯著縮短執行時間。</p><p>當您在 Kotlin Gradle 外掛程式中使用 <a href="/zh-Hant/kotlin/gradle-configure-project#gradle-java-toolchains-support">自訂 JDK 主目錄</a> 功能時，kapt 任務 Worker 僅使用 <a href="https://docs.gradle.org/current/userguide/worker_api.html#changing_the_isolation_mode" target="_blank" rel="noreferrer">程序隔離模式</a>。請注意，<code>kapt.workers.isolation</code> 屬性會被忽略。</p><p>如果您想為 kapt Worker 程序提供額外的 JVM 引數，請使用 <code>KaptWithoutKotlincTask</code> 的輸入 <code>kaptProcessJvmArgs</code>：</p>`,11)),t(p,{group:"build-script"},{default:n(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>i[7]||(i[7]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"internal"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KaptWithoutKotlincTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        kaptProcessJvmArgs."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"add"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx512m"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>i[8]||(i[8]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.internal.KaptWithoutKotlincTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        kaptProcessJvmArgs"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"add("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'-Xmx512m'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),t(k,{id:"註解處理器類別載入器的快取",level:"3",title:"註解處理器類別載入器的快取",labelRef:"experimental-general"}),i[11]||(i[11]=l(`<p>實驗性功能</p><p>註解處理器類別載入器的快取有助於 kapt 在您連續執行多個 Gradle 任務時更快地執行。</p><p>要啟用此功能，請在您的 <code>gradle.properties</code> 檔案中使用以下屬性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span># Any positive value enables caching</span></span>
<span class="line"><span># Use the same value as the number of modules that use kapt</span></span>
<span class="line"><span>kapt.classloaders.cache.size=5</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Disable for caching to work</span></span>
<span class="line"><span>kapt.include.compile.classpath=false</span></span></code></pre></div><p>如果您在註解處理器的快取方面遇到任何問題，請停用它們的快取：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Specify annotation processors&#39; full names to disable caching for them</span></span>
<span class="line"><span>kapt.classloaders.cache.disableForProcessors=[annotation processors full names]</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您遇到此功能的任何問題，我們將感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-28901" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋。</p></div><h3 id="測量註解處理器的效能" tabindex="-1">測量註解處理器的效能 <a class="header-anchor" href="#測量註解處理器的效能" aria-label="Permalink to &quot;測量註解處理器的效能&quot;">​</a></h3><p>要獲取註解處理器執行的效能統計資料，請使用 <code>-Kapt-show-processor-timings</code> 外掛程式選項。 範例輸出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Kapt Annotation Processing performance report:</span></span>
<span class="line"><span>com.example.processor.TestingProcessor: total: 133 ms, init: 36 ms, 2 round(s): 97 ms, 0 ms</span></span>
<span class="line"><span>com.example.processor.AnotherProcessor: total: 100 ms, init: 6 ms, 1 round(s): 93 ms</span></span></code></pre></div><p>您可以使用外掛程式選項 <a href="https://github.com/JetBrains/kotlin/pull/4280" target="_blank" rel="noreferrer"><code>-Kapt-dump-processor-timings</code> (<code>org.jetbrains.kotlin.kapt3:dumpProcessorTimings</code>)</a> 將此報告傾印到檔案中。 以下命令將執行 kapt 並將統計資料傾印到 <code>ap-perf-report.file</code> 檔案中：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -cp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $MY_CLASSPATH </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xplugin=kotlin-annotation-processing-SNAPSHOT.jar </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-P</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugin:org.jetbrains.kotlin.kapt3:aptMode=stubsAndApt,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugin:org.jetbrains.kotlin.kapt3:apclasspath=processor/build/libs/processor.jar,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugin:org.jetbrains.kotlin.kapt3:dumpProcessorTimings=ap-perf-report.file </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xplugin=$JAVA_HOME/lib/tools.jar </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-d </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cli-tests/out</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-no-jdk </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-no-reflect</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -no-stdlib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -verbose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sample/src/main/</span></span></code></pre></div><h3 id="測量使用註解處理器生成的檔案數量" tabindex="-1">測量使用註解處理器生成的檔案數量 <a class="header-anchor" href="#測量使用註解處理器生成的檔案數量" aria-label="Permalink to &quot;測量使用註解處理器生成的檔案數量&quot;">​</a></h3><p><code>kapt</code> Gradle 外掛程式可以報告每個註解處理器生成的檔案數量的統計資料。</p><p>這有助於追蹤建置中是否包含任何未使用的註解處理器。您可以使用生成的報告來查找觸發不必要註解處理器的模組，並更新這些模組以避免這種情況。</p><p>要啟用統計報告：</p><ol><li><p>在您的 <code>build.gradle(.kts)</code> 中將 <code>showProcessorStats</code> 屬性值設定為 <code>true</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kapt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    showProcessorStats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>在您的 <code>gradle.properties</code> 中將 <code>kapt.verbose</code> Gradle 屬性設定為 <code>true</code>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kapt.verbose=true</span></span></code></pre></div></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您也可以透過 <a href="#use-in-cli">命令列選項 <code>verbose</code></a> 啟用詳細輸出。</p></div><p>統計資料會以 <code>info</code> 等級顯示在日誌中。您會看到 <code>Annotation processor stats:</code> 行，其後是每個註解處理器執行時間的統計資料。這些行之後是 <code>Generated files report:</code> 行，其後是每個註解處理器生成的檔案數量的統計資料。例如：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[INFO] Annotation processor stats:</span></span>
<span class="line"><span>[INFO] org.mapstruct.ap.MappingProcessor: total: 290 ms, init: 1 ms, 3 round(s): 289 ms, 0 ms, 0 ms</span></span>
<span class="line"><span>[INFO] Generated files report:</span></span>
<span class="line"><span>[INFO] org.mapstruct.ap.MappingProcessor: total sources: 2, sources per round: 2, 0, 0</span></span></code></pre></div><h2 id="kapt-的編譯避免" tabindex="-1">kapt 的編譯避免 <a class="header-anchor" href="#kapt-的編譯避免" aria-label="Permalink to &quot;kapt 的編譯避免&quot;">​</a></h2><p>為了改進使用 kapt 的增量建置時間，它可以使用 Gradle <a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_compile_avoidance" target="_blank" rel="noreferrer">編譯避免</a>。啟用編譯避免後，Gradle 可以在重建專案時跳過註解處理。特別是，在以下情況下會跳過註解處理：</p><ul><li>專案的原始檔未更改。</li><li>依賴項中的更改是 <a href="https://en.wikipedia.org/wiki/Application_binary_interface" target="_blank" rel="noreferrer">ABI</a> 相容的。例如，僅方法主體有更改。</li></ul><p>然而，編譯避免不能用於在編譯類別路徑中發現的註解處理器，因為它們的 <em>任何更改</em> 都需要執行註解處理任務。</p><p>要使用編譯避免來執行 kapt：</p><ul><li><p><a href="#use-in-gradle">手動將註解處理器依賴項新增到 <code>kapt*</code> 配置中</a>。</p></li><li><p>在 <code>gradle.properties</code> 檔案中關閉編譯類別路徑中註解處理器的發現：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kapt.include.compile.classpath=false</span></span></code></pre></div></li></ul><h2 id="增量註解處理" tabindex="-1">增量註解處理 <a class="header-anchor" href="#增量註解處理" aria-label="Permalink to &quot;增量註解處理&quot;">​</a></h2><p>kapt 預設支援增量註解處理。目前，註解處理只有在所有正在使用的註解處理器都是增量時才能增量。</p><p>要停用增量註解處理，請將此行新增到您的 <code>gradle.properties</code> 檔案中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kapt.incremental.apt=false</span></span></code></pre></div><p>請注意，增量註解處理也需要啟用 <a href="/zh-Hant/kotlin/gradle-compilation-and-caches#incremental-compilation">增量編譯</a>。</p><h2 id="從超配置繼承註解處理器" tabindex="-1">從超配置繼承註解處理器 <a class="header-anchor" href="#從超配置繼承註解處理器" aria-label="Permalink to &quot;從超配置繼承註解處理器&quot;">​</a></h2><p>您可以將一組常見的註解處理器定義為單獨的 Gradle 配置中的超配置，並在您的子專案的 kapt 特定配置中進一步擴展它。</p><p>例如，對於使用 <a href="https://dagger.dev/" target="_blank" rel="noreferrer">Dagger</a> 的子專案，在您的 <code>build.gradle(.kts)</code> 檔案中，請使用以下配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonAnnotationProcessors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configurations.creating</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configurations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kapt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extendsFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonAnnotationProcessors) }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.dagger:dagger:2.48.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    commonAnnotationProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.dagger:dagger-compiler:2.48.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此範例中，<code>commonAnnotationProcessors</code> Gradle 配置是您希望用於所有專案的註解處理的通用超配置。您使用 <a href="https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.Configuration.html#org.gradle.api.artifacts.Configuration:extendsFrom" target="_blank" rel="noreferrer"><code>extendsFrom()</code></a> 方法將 <code>commonAnnotationProcessors</code> 新增為超配置。kapt 看到 <code>commonAnnotationProcessors</code> Gradle 配置對 Dagger 註解處理器有依賴項。因此，kapt 在其註解處理配置中包含了 Dagger 註解處理器。</p><h2 id="java-編譯器選項" tabindex="-1">Java 編譯器選項 <a class="header-anchor" href="#java-編譯器選項" aria-label="Permalink to &quot;Java 編譯器選項&quot;">​</a></h2><p>kapt 使用 Java 編譯器來執行註解處理器。 以下是如何將任意選項傳遞給 javac：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    javacOptions {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 增加來自註解處理器的最大錯誤數量。預設值為 100。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        option(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xmaxerrs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="不存在的類型校正" tabindex="-1">不存在的類型校正 <a class="header-anchor" href="#不存在的類型校正" aria-label="Permalink to &quot;不存在的類型校正&quot;">​</a></h2><p>一些註解處理器（例如 <code>AutoFactory</code>）依賴於宣告簽章中的精確類型。預設情況下，kapt 會將每個未知類型（包括生成類別的類型）替換為 <code>NonExistentClass</code>，但您可以更改此行為。將該選項新增到 <code>build.gradle(.kts)</code> 檔案中以在 Stub 中啟用錯誤類型推斷：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    correctErrorTypes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="在-maven-中使用" tabindex="-1">在 Maven 中使用 <a class="header-anchor" href="#在-maven-中使用" aria-label="Permalink to &quot;在 Maven 中使用&quot;">​</a></h2><p>在 <code>compile</code> 之前，新增 kotlin-maven-plugin 中 <code>kapt</code> 目標的執行：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;kapt&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;kapt&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 如果您為外掛程式啟用擴展，則可以跳過 &lt;goals&gt; 元素 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;src/main/kotlin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;src/main/java&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPaths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            &lt;!-- 在此處指定您的註解處理器 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.google.dagger&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;dagger-compiler&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2.9&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPaths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>要配置註解處理的等級，請在 <code>&lt;configuration&gt;</code> 區塊中設定以下任一 <code>aptMode</code>：</p><ul><li><code>stubs</code> – 僅生成註解處理所需的 Stub。</li><li><code>apt</code> – 僅執行註解處理。</li><li><code>stubsAndApt</code> – (預設) 生成 Stub 並執行註解處理。</li></ul><p>例如：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">aptMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;stubs&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">aptMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="在-intellij-建置系統中使用" tabindex="-1">在 IntelliJ 建置系統中使用 <a class="header-anchor" href="#在-intellij-建置系統中使用" aria-label="Permalink to &quot;在 IntelliJ 建置系統中使用&quot;">​</a></h2><p>IntelliJ IDEA 自身的建置系統不支援 kapt。每當您想重新執行註解處理時，請從「Maven Projects」工具列啟動建置。</p><h2 id="在命令列介面中使用" tabindex="-1">在命令列介面中使用 <a class="header-anchor" href="#在命令列介面中使用" aria-label="Permalink to &quot;在命令列介面中使用&quot;">​</a></h2><p>kapt 編譯器外掛程式在 Kotlin 編譯器的二進位發行版中可用。</p><p>您可以透過使用 <code>Xplugin</code> kotlinc 選項提供其 JAR 檔案的路徑來附加外掛程式：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xplugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$KOTLIN_HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/lib/kotlin-annotation-processing.jar</span></span></code></pre></div><p>以下是可用選項的列表：</p><ul><li><code>sources</code> (<em>必填</em>): 生成檔案的輸出路徑。</li><li><code>classes</code> (<em>必填</em>): 生成類別檔案和資源的輸出路徑。</li><li><code>stubs</code> (<em>必填</em>): Stub 檔案的輸出路徑。換句話說，一些暫存目錄。</li><li><code>incrementalData</code>: 二進位 Stub 的輸出路徑。</li><li><code>apclasspath</code> (<em>可重複</em>): 註解處理器 JAR 的路徑。根據您擁有的 JAR 數量，傳遞相同數量的 <code>apclasspath</code> 選項。</li><li><code>apoptions</code>: 註解處理器選項的 Base64 編碼列表。有關詳細資訊，請參閱 <a href="#ap-javac-options-encoding">AP/javac 選項編碼</a>。</li><li><code>javacArguments</code>: 傳遞給 javac 的選項的 Base64 編碼列表。有關詳細資訊，請參閱 <a href="#ap-javac-options-encoding">AP/javac 選項編碼</a>。</li><li><code>processors</code>: 以逗號分隔的註解處理器合格類別名稱列表。如果指定，kapt 不會嘗試在 <code>apclasspath</code> 中查找註解處理器。</li><li><code>verbose</code>: 啟用詳細輸出。</li><li><code>aptMode</code> (<em>必填</em>) <ul><li><code>stubs</code> – 僅生成註解處理所需的 Stub。</li><li><code>apt</code> – 僅執行註解處理。</li><li><code>stubsAndApt</code> – 生成 Stub 並執行註解處理。</li></ul></li><li><code>correctErrorTypes</code>: 有關詳細資訊，請參閱 <a href="#non-existent-type-correction">不存在的類型校正</a>。預設情況下停用。</li><li><code>dumpFileReadHistory</code>: 每個檔案的輸出路徑，用於傾印在註解處理期間使用的類別列表。</li></ul><p>外掛程式選項格式為：<code>-P plugin:&lt;plugin id&gt;:&lt;key&gt;=&lt;value&gt;</code>。選項可以重複。</p><p>範例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:sources=build/kapt/sources</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:classes=build/kapt/classes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:stubs=build/kapt/stubs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/ap.jar</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/anotherAp.jar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:correctErrorTypes=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h2 id="生成-kotlin-來源" tabindex="-1">生成 Kotlin 來源 <a class="header-anchor" href="#生成-kotlin-來源" aria-label="Permalink to &quot;生成 Kotlin 來源&quot;">​</a></h2><p>kapt 可以生成 Kotlin 來源。只需將生成的 Kotlin 來源檔案寫入由 <code>processingEnv.options[&quot;kapt.kotlin.generated&quot;]</code> 指定的目錄，這些檔案將與主要來源一起編譯。</p><p>請注意，kapt 不支援對生成的 Kotlin 檔案進行多輪處理。</p><h2 id="ap-javac-選項編碼" tabindex="-1">AP/Javac 選項編碼 <a class="header-anchor" href="#ap-javac-選項編碼" aria-label="Permalink to &quot;AP/Javac 選項編碼&quot;">​</a></h2><p><code>apoptions</code> 和 <code>javacArguments</code> 命令列介面選項接受選項的編碼映射。 以下是如何自行編碼選項：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encodeList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ByteArrayOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjectOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.size)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((key, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options.entries) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="保留-java-編譯器的註解處理器" tabindex="-1">保留 Java 編譯器的註解處理器 <a class="header-anchor" href="#保留-java-編譯器的註解處理器" aria-label="Permalink to &quot;保留 Java 編譯器的註解處理器&quot;">​</a></h2><p>預設情況下，kapt 執行所有註解處理器並停用 javac 的註解處理。然而，您可能需要一些 javac 的註解處理器正常運作（例如 <a href="https://projectlombok.org/" target="_blank" rel="noreferrer">Lombok</a>）。</p><p>在 Gradle 建置檔案中，使用選項 <code>keepJavacAnnotationProcessors</code>：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keepJavacAnnotationProcessors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果您使用 Maven，則需要指定具體的外掛程式設定。請參閱 <a href="/zh-Hant/kotlin/lombok#using-with-kapt">Lombok 編譯器外掛程式設定的範例</a>。</p>`,71))])}const C=r(c,[["render",E]]);export{m as __pageData,C as default};
