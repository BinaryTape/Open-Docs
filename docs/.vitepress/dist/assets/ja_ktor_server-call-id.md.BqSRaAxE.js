import{_ as y,C as t,c as v,o as m,G as i,ag as o,j as a,w as l,a as e}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-call-id.md","filePath":"ja/ktor/server-call-id.md","lastUpdated":1755457140000}'),b={name:"ja/ktor/server-call-id.md"};function C(I,s,f,F,D,q){const h=t("TopicTitle"),k=t("show-structure"),c=t("primary-label"),r=t("Links"),g=t("tldr"),u=t("link-summary"),n=t("code-block"),p=t("TabItem"),d=t("Tabs"),E=t("list");return m(),v("div",null,[i(h,{labelRef:"server-plugin",title:"Ktorサーバーでのリクエストトレース"}),i(k,{for:"chapter",depth:"2"}),i(c,{ref:"server-plugin"},null,512),i(g,null,{default:l(()=>[s[3]||(s[3]=a("p",null,[a("b",null,"必要な依存関係"),e(": "),a("code",null,"io.ktor:ktor-server-call-id")],-1)),s[4]||(s[4]=a("p",null,[a("b",null,"コード例"),e(": "),a("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/call-id"}," call-id ")],-1)),a("p",null,[a("b",null,[i(r,{href:"/ktor/server-native",summary:"KtorはKotlin/Nativeをサポートしており、追加のランタイムや仮想マシンなしでサーバーを実行できます。"},{default:l(()=>s[0]||(s[0]=[e("ネイティブサーバー")])),_:1}),s[1]||(s[1]=e("のサポート"))]),s[2]||(s[2]=e(": ✅ "))])]),_:1}),i(u,null,{default:l(()=>s[5]||(s[5]=[e(" CallIdサーバープラグインを使用すると、一意のコールIDを使用してクライアントリクエストをトレースできます。 ")])),_:1}),s[18]||(s[18]=o('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-call-id/io.ktor.server.plugins.callid/-call-id.html" target="_blank" rel="noreferrer">CallId</a>プラグインを使用すると、一意のリクエストIDまたはコールIDを使用して、クライアントリクエストをエンドツーエンドでトレースできます。通常、KtorでコールIDを扱う方法は次のようになります。</p><ol><li>まず、特定の要求のコールIDを以下のいずれかの方法で取得する必要があります。 <ul><li>リバースプロキシ（Nginxなど）やクラウドプロバイダー（<a href="./heroku">Heroku</a>など）が、特定のヘッダー（例: <code>X-Request-Id</code>）にコールIDを追加する場合があります。この場合、KtorではコールIDを<a href="#retrieve">取得</a>できます。</li><li>それ以外の場合、リクエストにコールIDが含まれていない場合は、KtorサーバーでコールIDを<a href="#generate">生成</a>できます。</li></ul></li><li>次に、Ktorは取得または生成されたコールIDを、事前定義された辞書を使用して<a href="#verify">検証</a>します。コールIDを検証するための独自の条件を提供することもできます。</li><li>最後に、特定のヘッダー（例: <code>X-Request-Id</code>）でコールIDをクライアントに<a href="#send">送信</a>できます。</li></ol><p><code>CallId</code>を<a href="./server-call-logging">CallLogging</a>と組み合わせて使用​​すると、コールIDをMDCコンテキストに<a href="#put-call-id-mdc">配置</a>し、各リクエストのコールIDを表示するようにロガーを構成することで、コールのトラブルシューティングに役立ちます。</p><blockquote><p>クライアント側では、Ktorはクライアントリクエストをトレースするための<a href="./client-call-id">CallId</a>プラグインを提供します。</p></blockquote><h2 id="add_dependencies" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係の追加 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>CallId</code>を使用するには、ビルドスクリプトに<code>ktor-server-call-id</code>アーティファクトを含める必要があります。 </p>',6)),i(d,{group:"languages"},{default:l(()=>[i(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:l(()=>[i(n,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-call-id:$ktor_version")'})]),_:1}),i(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:l(()=>[i(n,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-call-id:$ktor_version"'})]),_:1}),i(p,{title:"Maven","group-key":"maven"},{default:l(()=>[i(n,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-call-id-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[19]||(s[19]=a("h2",{id:"install_plugin",tabindex:"-1"},[e("CallIdのインストール "),a("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "CallIdのインストール {id="install_plugin"}"'},"​")],-1)),a("p",null,[s[7]||(s[7]=e(" アプリケーションに")),s[8]||(s[8]=a("code",null,"CallId",-1)),s[9]||(s[9]=e("プラグインを")),s[10]||(s[10]=a("a",{href:"#install"},"インストール",-1)),s[11]||(s[11]=e("するには、指定された")),i(r,{href:"/ktor/server-modules",summary:"モジュールを使用すると、ルートをグループ化してアプリケーションを構造化できます。"},{default:l(()=>s[6]||(s[6]=[e("モジュール")])),_:1}),s[12]||(s[12]=e("内の")),s[13]||(s[13]=a("code",null,"install",-1)),s[14]||(s[14]=e("関数に渡します。以下のコードスニペットは、")),s[15]||(s[15]=a("code",null,"CallId",-1)),s[16]||(s[16]=e("をインストールする方法を示しています... "))]),i(E,null,{default:l(()=>s[17]||(s[17]=[a("li",null,[e(" ... "),a("code",null,"embeddedServer"),e("関数呼び出し内で。 ")],-1),a("li",null,[e(" ... "),a("code",null,"Application"),e("クラスの拡張関数である、明示的に定義された"),a("code",null,"module"),e("内で。 ")],-1)])),_:1}),i(d,null,{default:l(()=>[i(p,{title:"embeddedServer"},{default:l(()=>[i(n,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.callid.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(CallId)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),i(p,{title:"module"},{default:l(()=>[i(n,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.callid.*
            // ...
            fun Application.module() {
                install(CallId)
                // ...
            }`})]),_:1})]),_:1}),s[20]||(s[20]=o(`<h2 id="configure" tabindex="-1">CallIdの構成 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;CallIdの構成 {id=&quot;configure&quot;}&quot;">​</a></h2><h3 id="retrieve" tabindex="-1">コールIDの取得 <a class="header-anchor" href="#retrieve" aria-label="Permalink to &quot;コールIDの取得 {id=&quot;retrieve&quot;}&quot;">​</a></h3><p><code>CallId</code>は、コールIDを取得するためのいくつかの方法を提供します。</p><ul><li>指定されたヘッダーからコールIDを取得するには、<code>retrieveFromHeader</code>関数を使用します。例:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    retrieveFromHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>header</code>関数を使用して、同じヘッダーでコールIDを<a href="#send">取得および送信</a>することもできます。</p><ul><li>必要に応じて、<code>ApplicationCall</code>からコールIDを取得できます。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    retrieve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>取得されたすべてのコールIDは、デフォルトの辞書を使用して<a href="#verify">検証</a>されることに注意してください。</p><h3 id="generate" tabindex="-1">コールIDの生成 <a class="header-anchor" href="#generate" aria-label="Permalink to &quot;コールIDの生成 {id=&quot;generate&quot;}&quot;">​</a></h3><p>受信リクエストにコールIDが含まれていない場合は、<code>generate</code>関数を使用して生成できます。</p><ul><li>以下の例は、事前定義された辞書から特定の長さのコールIDを生成する方法を示しています。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abcde12345&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>以下の例では、<code>generate</code>関数はコールIDを生成するためのブロックを受け入れます。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> atomic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;generated-call-id-\${counter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAndIncrement</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="verify" tabindex="-1">コールIDの検証 <a class="header-anchor" href="#verify" aria-label="Permalink to &quot;コールIDの検証 {id=&quot;verify&quot;}&quot;">​</a></h3><p><a href="#retrieve">取得</a>または<a href="#generate">生成</a>されたすべてのコールIDは、以下に示すデフォルトの辞書を使用して検証されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CALL_ID_DEFAULT_DICTIONARY: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abcdefghijklmnopqrstuvwxyz0123456789+/=-&quot;</span></span></code></pre></div><p>これは、大文字を含むコールIDは検証に合格しないことを意味します。必要に応じて、<code>verify</code>関数を使用してより緩いルールを適用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { callId: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        callId.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>完全な例はこちらにあります: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/call-id" target="_blank" rel="noreferrer">call-id</a>。</p><h3 id="send" tabindex="-1">コールIDをクライアントに送信する <a class="header-anchor" href="#send" aria-label="Permalink to &quot;コールIDをクライアントに送信する {id=&quot;send&quot;}&quot;">​</a></h3><p>コールIDを<a href="#retrieve">取得</a>/<a href="#generate">生成</a>した後、クライアントに送信できます。</p><ul><li><code>header</code>関数は、コールIDを<a href="#retrieve">取得</a>し、同じヘッダーで送信するために使用できます。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>完全な例はこちらにあります: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/call-id" target="_blank" rel="noreferrer">call-id</a>。</p><ul><li><code>replyToHeader</code>関数は、指定されたヘッダーにコールIDを送信します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    replyToHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>必要に応じて、<code>ApplicationCall</code>を使用して、<a href="./server-responses">レスポンス</a>でコールIDを送信できます。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, callId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId, callId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="put-call-id-mdc" tabindex="-1">MDCにコールIDを設定する <a class="header-anchor" href="#put-call-id-mdc" aria-label="Permalink to &quot;MDCにコールIDを設定する {id=&quot;put-call-id-mdc&quot;}&quot;">​</a></h2><p><code>CallId</code>を<a href="./server-call-logging">CallLogging</a>と組み合わせて使用​​すると、コールIDをMDCコンテキストに設定し、各リクエストのコールIDを表示するようにロガーを構成することで、コールのトラブルシューティングに役立ちます。これを行うには、<code>CallLogging</code>設定ブロック内で<code>callIdMdc</code>関数を呼び出し、MDCコンテキストに設定するキーを指定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callIdMdc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;call-id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このキーは、ログにコールIDを表示するために<a href="./server-logging#configure-logger">ロガー設定</a>に渡すことができます。たとえば、<code>logback.xml</code>ファイルは次のようになります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span></span>
<span class="line"><span>    &lt;encoder&gt;</span></span>
<span class="line"><span>        &lt;pattern&gt;%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %X{call-id} %-5level %logger{36} - %msg%n&lt;/pattern&gt;</span></span>
<span class="line"><span>    &lt;/encoder&gt;</span></span>
<span class="line"><span>&lt;/appender&gt;</span></span></code></pre></div><p>完全な例はこちらにあります: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/call-id" target="_blank" rel="noreferrer">call-id</a>。</p>`,36))])}const x=y(b,[["render",C]]);export{B as __pageData,x as default};
