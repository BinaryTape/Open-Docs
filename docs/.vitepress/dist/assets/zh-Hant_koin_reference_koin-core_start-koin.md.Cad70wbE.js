import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"啟動 Koin","description":"","frontmatter":{"title":"啟動 Koin"},"headers":[],"relativePath":"zh-Hant/koin/reference/koin-core/start-koin.md","filePath":"zh-Hant/koin/reference/koin-core/start-koin.md","lastUpdated":1750001831000}'),l={name:"zh-Hant/koin/reference/koin-core/start-koin.md"};function t(p,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="啟動-koin" tabindex="-1">啟動 Koin <a class="header-anchor" href="#啟動-koin" aria-label="Permalink to &quot;啟動 Koin&quot;">​</a></h1><p>Koin 是一個 DSL、一個輕量級容器和一個實用型 API。一旦您在 Koin 模組中宣告了您的定義，您就可以準備啟動 Koin 容器了。</p><h3 id="startkoin-函數" tabindex="-1"><code>startKoin</code> 函數 <a class="header-anchor" href="#startkoin-函數" aria-label="Permalink to &quot;\`startKoin\` 函數&quot;">​</a></h3><p><code>startKoin</code> 函數是啟動 Koin 容器的主要進入點。它需要一個 <em>Koin 模組清單</em> 才能執行。 模組載入後，定義即可由 Koin 容器解析。</p><p>.啟動 Koin</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start a KoinApplication in Global context</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // declare used modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coffeeAppModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>一旦呼叫 <code>startKoin</code>，Koin 將讀取您的所有模組與定義。Koin 隨後就可以處理任何 <code>get()</code> 或 <code>by inject()</code> 呼叫以檢索所需的實例。</p><p>您的 Koin 容器可以有數個選項：</p><ul><li><code>logger</code> - 啟用日誌記錄 - 請參閱 <a href="/zh-Hant/koin#logging">日誌記錄</a> 區塊</li><li><code>properties()</code>、<code>fileProperties()</code> 或 <code>environmentProperties()</code> 載入來自環境、koin.properties 檔案、額外屬性等的屬性 ... - 請參閱 <a href="/zh-Hant/koin#loading-properties">載入屬性</a> 區塊</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>startKoin</code> 無法呼叫超過一次。如果您需要從多個位置載入模組，請使用 <code>loadKoinModules</code> 函數。</p></div><h3 id="擴展您的-koin-啟動-有助於-kmp-及其他重複利用" tabindex="-1">擴展您的 Koin 啟動（有助於 KMP 及其他重複利用...） <a class="header-anchor" href="#擴展您的-koin-啟動-有助於-kmp-及其他重複利用" aria-label="Permalink to &quot;擴展您的 Koin 啟動（有助於 KMP 及其他重複利用...）&quot;">​</a></h3><p>Koin 現在支援 KoinConfiguration 的可重複使用和可擴展配置物件。您可以提取共享配置，以便跨平台（Android、iOS、JVM 等）使用或根據不同環境進行調整。這可以透過 <code>includes()</code> 函數完成。下面，我們可以輕鬆地重複使用一個通用配置，並將其擴展以添加一些 Android 環境設定：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KoinAppDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//can include external configuration extension</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        initKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            androidContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this@MainApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            androidLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="啟動背後-koin-實例的內部運作" tabindex="-1">啟動背後 - Koin 實例的內部運作 <a class="header-anchor" href="#啟動背後-koin-實例的內部運作" aria-label="Permalink to &quot;啟動背後 - Koin 實例的內部運作&quot;">​</a></h3><p>當我們啟動 Koin 時，我們會建立一個 <code>KoinApplication</code> 實例，它代表 Koin 容器的配置實例。一旦啟動，它將根據您的模組和選項產生一個 <code>Koin</code> 實例。 這個 <code>Koin</code> 實例隨後由 <code>GlobalContext</code> 持有，以便供任何 <code>KoinComponent</code> 類別使用。</p><p><code>GlobalContext</code> 是 Koin 的預設 JVM 上下文策略。它由 <code>startKoin</code> 呼叫並註冊到 <code>GlobalContext</code>。這將使我們能夠從 Koin 多平台的角度註冊不同類型的上下文。</p><h3 id="在-startkoin-之後載入模組" tabindex="-1">在 <code>startKoin</code> 之後載入模組 <a class="header-anchor" href="#在-startkoin-之後載入模組" aria-label="Permalink to &quot;在 \`startKoin\` 之後載入模組&quot;">​</a></h3><p>您無法呼叫 <code>startKoin</code> 函數超過一次。但您可以直接使用 <code>loadKoinModules()</code> 函數。</p><p>這個函數對於想要使用 Koin 的 SDK 開發者來說很有趣，因為他們不需要使用 <code>startKoin()</code> 函數，只需在其函式庫啟動時使用 <code>loadKoinModules</code> 即可。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadKoinModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(module1,module2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.)</span></span></code></pre></div><h3 id="卸載模組" tabindex="-1">卸載模組 <a class="header-anchor" href="#卸載模組" aria-label="Permalink to &quot;卸載模組&quot;">​</a></h3><p>也可以卸載一批定義，然後使用指定的函數釋放它們的實例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unloadKoinModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(module1,module2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.)</span></span></code></pre></div><h3 id="停止-koin-關閉所有資源" tabindex="-1">停止 Koin - 關閉所有資源 <a class="header-anchor" href="#停止-koin-關閉所有資源" aria-label="Permalink to &quot;停止 Koin - 關閉所有資源&quot;">​</a></h3><p>您可以關閉所有 Koin 資源並捨棄實例與定義。為此，您可以從任何地方使用 <code>stopKoin()</code> 函數來停止 Koin <code>GlobalContext</code>。 否則在 <code>KoinApplication</code> 實例上，只需呼叫 <code>close()</code>。</p><h2 id="日誌記錄" tabindex="-1">日誌記錄 <a class="header-anchor" href="#日誌記錄" aria-label="Permalink to &quot;日誌記錄&quot;">​</a></h2><p>Koin 具有一個簡單的日誌記錄 API，用於記錄任何 Koin 活動（分配、查詢等）。日誌記錄 API 由以下類別表示：</p><p>.Koin 日誌記錄器</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> level: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Level.INFO) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(level: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.DEBUG, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.INFO, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.WARNING, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.ERROR, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Koin 根據目標平台提供了一些日誌記錄的實作：</p><ul><li><code>PrintLogger</code> - 直接日誌記錄到控制台（包含在 <code>koin-core</code> 中）</li><li><code>EmptyLogger</code> - 不記錄任何內容（包含在 <code>koin-core</code> 中）</li><li><code>SLF4JLogger</code> - 使用 SLF4J 記錄。由 Ktor 和 Spark 使用（<code>koin-logger-slf4j</code> 專案）</li><li><code>AndroidLogger</code> - 日誌記錄到 Android 日誌記錄器（包含在 <code>koin-android</code> 中）</li></ul><h3 id="在啟動時設定日誌記錄" tabindex="-1">在啟動時設定日誌記錄 <a class="header-anchor" href="#在啟動時設定日誌記錄" aria-label="Permalink to &quot;在啟動時設定日誌記錄&quot;">​</a></h3><p>預設情況下，Koin 使用 <code>EmptyLogger</code>。您可以直接使用 <code>PrintLogger</code> 如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LEVEL.INFO)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="載入屬性" tabindex="-1">載入屬性 <a class="header-anchor" href="#載入屬性" aria-label="Permalink to &quot;載入屬性&quot;">​</a></h2><p>您可以在啟動時載入數種屬性：</p><ul><li>環境屬性 - 載入 <em>系統</em> 屬性</li><li>koin.properties 檔案 - 從 <code>/src/main/resources/koin.properties</code> 檔案載入屬性</li><li>「額外」啟動屬性 - 傳遞給 <code>startKoin</code> 函數的值對映</li></ul><h3 id="從模組讀取屬性" tabindex="-1">從模組讀取屬性 <a class="header-anchor" href="#從模組讀取屬性" aria-label="Permalink to &quot;從模組讀取屬性&quot;">​</a></h3><p>確保在 Koin 啟動時載入屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Load properties from the default location</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // (i.e. \`/src/main/resources/koin.properties\`)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fileProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 Koin 模組中，您可以透過其鍵獲取屬性：</p><p>.在 /src/main/resources/koin.properties 檔案中</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Key - value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//service_url</span></span></code></pre></div><p>只需使用 <code>getProperty</code> 函數載入它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // use the &quot;server_url&quot; key to retrieve its value</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;server_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="koin-選項-功能旗標-4-1-0" tabindex="-1">Koin 選項 - 功能旗標 (4.1.0) <a class="header-anchor" href="#koin-選項-功能旗標-4-1-0" aria-label="Permalink to &quot;Koin 選項 - 功能旗標 (4.1.0)&quot;">​</a></h2><p>您的 Koin 應用程式現在可以透過專用的 <code>options</code> 區塊啟用一些實驗性功能，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // activate ViewModel Scope factory feature</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        viewModelScopeFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,48)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
