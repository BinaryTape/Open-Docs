import{_ as t,C as n,c as e,o as l,j as i,G as h,ag as p,a as k}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"プロキシ","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/client-proxy.md","filePath":"ja/ktor/client-proxy.md","lastUpdated":1755457140000}'),r={name:"ja/ktor/client-proxy.md"};function d(o,s,E,c,g,y){const a=n("show-structure");return l(),e("div",null,[s[0]||(s[0]=i("h1",{id:"プロキシ",tabindex:"-1"},[k("プロキシ "),i("a",{class:"header-anchor",href:"#プロキシ","aria-label":'Permalink to "プロキシ"'},"​")],-1)),h(a,{for:"chapter",depth:"2"}),s[1]||(s[1]=p(`<p>Ktor HTTPクライアントでは、マルチプラットフォームプロジェクトでプロキシ設定を行うことができます。サポートされているプロキシのタイプは、<a href="https://en.wikipedia.org/wiki/Proxy_server#Web_proxy_servers" target="_blank" rel="noreferrer">HTTP</a> と <a href="https://en.wikipedia.org/wiki/SOCKS" target="_blank" rel="noreferrer">SOCKS</a> の2種類です。</p><h3 id="supported_engines" tabindex="-1">サポートされているエンジン <a class="header-anchor" href="#supported_engines" aria-label="Permalink to &quot;サポートされているエンジン {id=&quot;supported_engines&quot;}&quot;">​</a></h3><p>以下の表は、特定の<a href="./client-engines">エンジン</a>でサポートされているプロキシの種類を示しています。</p><table tabindex="0"><thead><tr><th>エンジン</th><th>HTTPプロキシ</th><th>SOCKSプロキシ</th></tr></thead><tbody><tr><td>Apache</td><td>✅</td><td>✖️</td></tr><tr><td>Java</td><td>✅</td><td>✖️</td></tr><tr><td>Jetty</td><td>✖️</td><td>✖️</td></tr><tr><td>CIO</td><td>✅</td><td>✖️</td></tr><tr><td>Android</td><td>✅</td><td>✅</td></tr><tr><td>OkHttp</td><td>✅</td><td>✅</td></tr><tr><td>JavaScript</td><td>✖️</td><td>✖️</td></tr><tr><td>Darwin</td><td>✅</td><td>✖️</td></tr><tr><td>Curl</td><td>✅</td><td>✅</td></tr></tbody></table><blockquote><p>なお、現在、DarwinエンジンではHTTPプロキシによるHTTPSリクエストはサポートされていません。</p></blockquote><h2 id="add_dependencies" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係の追加 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>クライアントでプロキシを設定するために、特定の依存関係を追加する必要はありません。必要な依存関係は以下の通りです。</p><ul><li><a href="./client-dependencies#client-dependency">ktor-client-core</a>;</li><li><a href="./client-dependencies#engine-dependency">エンジンの依存関係</a>。</li></ul><h2 id="configure_proxy" tabindex="-1">プロキシの設定 <a class="header-anchor" href="#configure_proxy" aria-label="Permalink to &quot;プロキシの設定 {id=&quot;configure_proxy&quot;}&quot;">​</a></h2><p>プロキシ設定を行うには、<a href="./client-create-and-configure#configure-client">クライアント設定ブロック</a>内で<code>engine</code>関数を呼び出し、<code>proxy</code>プロパティを使用します。このプロパティは、<a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.engine/-proxy-builder/index.html" target="_blank" rel="noreferrer">ProxyBuilder</a>ファクトリを使用して作成できる<code>ProxyConfig</code>インスタンスを受け入れます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Create proxy configuration</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="http_proxy" tabindex="-1">HTTPプロキシ <a class="header-anchor" href="#http_proxy" aria-label="Permalink to &quot;HTTPプロキシ {id=&quot;http_proxy&quot;}&quot;">​</a></h3><p>以下の例は、<code>ProxyBuilder</code>を使用してHTTPプロキシを設定する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProxyBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://sample-proxy-server:3128/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>JVMでは、<code>ProxyConfig</code>は<a href="https://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Proxy.html" target="_blank" rel="noreferrer">Proxy</a>クラスにマッピングされるため、次のようにプロキシを設定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Proxy.Type.HTTP, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sample-proxy-server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="socks_proxy" tabindex="-1">SOCKSプロキシ <a class="header-anchor" href="#socks_proxy" aria-label="Permalink to &quot;SOCKSプロキシ {id=&quot;socks_proxy&quot;}&quot;">​</a></h3><p>以下の例は、<code>ProxyBuilder</code>を使用してSOCKSプロキシを設定する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProxyBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">socks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sample-proxy-server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>HTTPプロキシと同様に、JVMでは<code>Proxy</code>を使用してプロキシ設定を行うことができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Proxy.Type.SOCKS, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sample-proxy-server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="proxy_auth" tabindex="-1">プロキシの認証と認可 <a class="header-anchor" href="#proxy_auth" aria-label="Permalink to &quot;プロキシの認証と認可 {id=&quot;proxy_auth&quot;}&quot;">​</a></h2><p>プロキシの認証と認可はエンジン固有であり、手動で処理する必要があります。例えば、基本認証を使用してKtorクライアントをHTTPプロキシサーバーに認証するには、<a href="./client-default-request">各リクエスト</a>に<code>Proxy-Authorization</code>ヘッダーを次のように追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    defaultRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jetbrains:foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.ProxyAuthorization, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Basic </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$credentials</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>JVM上のSOCKSプロキシにKtorクライアントを認証するには、<code>java.net.socks.username</code>と<code>java.net.socks.password</code>の<a href="https://docs.oracle.com/javase/7/docs/api/java/net/doc-files/net-properties.html" target="_blank" rel="noreferrer">システムプロパティ</a>を使用できます。</p>`,25))])}const C=t(r,[["render",d]]);export{F as __pageData,C as default};
