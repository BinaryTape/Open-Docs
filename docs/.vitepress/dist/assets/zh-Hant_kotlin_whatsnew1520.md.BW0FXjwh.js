import{_ as k,C as e,c as o,o as d,j as i,G as t,ag as h,a as s,w as n}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"Kotlin 1.5.20 的新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew1520.md","filePath":"zh-Hant/kotlin/whatsnew1520.md","lastUpdated":1754307826000}'),c={name:"zh-Hant/kotlin/whatsnew1520.md"};function g(E,a,y,u,b,m){const p=e("YouTubeVideo"),l=e("tab"),r=e("tabs");return d(),o("div",null,[a[2]||(a[2]=i("h1",{id:"kotlin-1-5-20-的新功能",tabindex:"-1"},[s("Kotlin 1.5.20 的新功能 "),i("a",{class:"header-anchor",href:"#kotlin-1-5-20-的新功能","aria-label":'Permalink to "Kotlin 1.5.20 的新功能"'},"​")],-1)),a[3]||(a[3]=i("p",null,[i("em",null,[i("a",{href:"/zh-Hant/kotlin/releases#release-details"},"發布日期：2021 年 6 月 24 日")])],-1)),a[4]||(a[4]=i("p",null,"Kotlin 1.5.20 修正了在 1.5.0 新功能中發現的問題，同時也包含各種工具改進。",-1)),a[5]||(a[5]=i("p",null,[s("您可以在"),i("a",{href:"https://blog.jetbrains.com/kotlin/2021/06/kotlin-1-5-20-released/",target:"_blank",rel:"noreferrer"},"發布部落格文章"),s("和這段影片中找到變更的概覽：")],-1)),t(p,{src:"https://www.youtube.com/v/SV8CgSXQe44",title:"Kotlin 1.5.20"}),a[6]||(a[6]=h(`<h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.5.20 在 JVM 平台上有以下更新：</p><ul><li><a href="#string-concatenation-via-invokedynamic">透過 invokedynamic 進行字串串接</a></li><li><a href="#support-for-jspecify-nullness-annotations">支援 JSpecify nullability 註解</a></li><li><a href="#support-for-calling-java-s-lombok-generated-methods-within-modules-that-have-kotlin-and-java-code">支援在包含 Kotlin 和 Java 程式碼的模組中呼叫 Java 的 Lombok 產生方法</a></li></ul><h3 id="透過-invokedynamic-進行字串串接" tabindex="-1">透過 invokedynamic 進行字串串接 <a class="header-anchor" href="#透過-invokedynamic-進行字串串接" aria-label="Permalink to &quot;透過 invokedynamic 進行字串串接&quot;">​</a></h3><p>Kotlin 1.5.20 在 JVM 9+ 目標上將字串串接編譯為<a href="https://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html#invokedynamic" target="_blank" rel="noreferrer">動態呼叫</a> (<code>invokedynamic</code>)，從而與現代 Java 版本保持一致。 更精確地說，它使用 <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/StringConcatFactory.html#makeConcatWithConstants-java.lang.invoke.MethodHandles.Lookup-java.lang.String-java.lang.invoke.MethodType-java.lang.String-java.lang.Object...-" target="_blank" rel="noreferrer"><code>StringConcatFactory.makeConcatWithConstants()</code></a> 進行字串串接。</p><p>若要切換回先前版本中使用的透過 <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/StringBuilder.html#append-java.lang.String-" target="_blank" rel="noreferrer"><code>StringBuilder.append()</code></a> 進行的串接，請新增編譯器選項 <code>-Xstring-concat=inline</code>。</p><p>瞭解如何在 <a href="/zh-Hant/kotlin/gradle-compiler-options">Gradle</a>、<a href="/zh-Hant/kotlin/maven#specify-compiler-options">Maven</a> 和<a href="/zh-Hant/kotlin/compiler-reference#compiler-options">命令列編譯器</a>中新增編譯器選項。</p><h3 id="支援-jspecify-nullability-註解" tabindex="-1">支援 JSpecify nullability 註解 <a class="header-anchor" href="#支援-jspecify-nullability-註解" aria-label="Permalink to &quot;支援 JSpecify nullability 註解&quot;">​</a></h3><p>Kotlin 編譯器可以讀取各種類型的<a href="/zh-Hant/kotlin/java-interop#nullability-annotations">nullability 註解</a>，以將 nullability 資訊從 Java 傳遞給 Kotlin。1.5.20 版本引入了對 <a href="https://jspecify.dev/" target="_blank" rel="noreferrer">JSpecify 專案</a>的支援，該專案包含了一組標準統一的 Java nullability 註解。</p><p>透過 JSpecify，您可以提供更詳細的 nullability 資訊，幫助 Kotlin 維護與 Java 的 null 安全互通。您可以為宣告、套件或模組範圍設定預設 nullability，指定參數化 nullability 等。您可以在 <a href="https://jspecify.dev/docs/user-guide" target="_blank" rel="noreferrer">JSpecify 使用者指南</a>中找到更多詳細資訊。</p><p>以下是 Kotlin 如何處理 JSpecify 註解的範例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaClass.java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.jspecify.nullness.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NullMarked</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JavaClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notNullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @Nullable String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Test.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JavaClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  notNullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().length </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  nullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().length    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Warning: receiver nullability mismatch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 1.5.20 中，所有根據 JSpecify 提供的 nullability 資訊判斷的 nullability 不符都將報告為警告。使用 <code>-Xjspecify-annotations=strict</code> 和 <code>-Xtype-enhancement-improvements-strict-mode</code> 編譯器選項可以在使用 JSpecify 時啟用嚴格模式（帶錯誤報告）。請注意，JSpecify 專案仍在積極開發中。其 API 和實作可能隨時發生重大變更。</p><p><a href="/zh-Hant/kotlin/java-interop#null-safety-and-platform-types">深入瞭解 null 安全和平台類型</a>。</p><h3 id="支援在包含-kotlin-和-java-程式碼的模組中呼叫-java-的-lombok-產生方法" tabindex="-1">支援在包含 Kotlin 和 Java 程式碼的模組中呼叫 Java 的 Lombok 產生方法 <a class="header-anchor" href="#支援在包含-kotlin-和-java-程式碼的模組中呼叫-java-的-lombok-產生方法" aria-label="Permalink to &quot;支援在包含 Kotlin 和 Java 程式碼的模組中呼叫 Java 的 Lombok 產生方法&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Lombok 編譯器外掛程式是<a href="/zh-Hant/kotlin/components-stability">實驗性功能</a>。 它可能隨時被移除或變更。僅供評估用途。 若您有任何回饋，請透過 <a href="https://youtrack.jetbrains.com/issue/KT-7112" target="_blank" rel="noreferrer">YouTrack</a> 告知我們。</p></div><p>Kotlin 1.5.20 引入了一個實驗性的 <a href="/zh-Hant/kotlin/lombok">Lombok 編譯器外掛程式</a>。這個外掛程式使得在包含 Kotlin 和 Java 程式碼的模組中產生和使用 Java 的 <a href="https://projectlombok.org/" target="_blank" rel="noreferrer">Lombok</a> 宣告成為可能。Lombok 註解僅在 Java 原始碼中有效，若在 Kotlin 程式碼中使用則會被忽略。</p><p>此外掛程式支援以下註解：</p><ul><li><code>@Getter</code>、<code>@Setter</code></li><li><code>@NoArgsConstructor</code>、<code>@RequiredArgsConstructor</code> 和 <code>@AllArgsConstructor</code></li><li><code>@Data</code></li><li><code>@With</code></li><li><code>@Value</code></li></ul><p>我們正在持續開發此外掛程式。要了解詳細的目前狀態，請造訪 <a href="https://github.com/JetBrains/kotlin/tree/master/plugins/lombok" target="_blank" rel="noreferrer">Lombok 編譯器外掛程式的 README</a>。</p><p>目前，我們沒有支援 <code>@Builder</code> 註解的計畫。但是，如果您在 <a href="https://youtrack.jetbrains.com/issue/KT-46959" target="_blank" rel="noreferrer">YouTrack</a> 中投票支持 <code>@Builder</code>，我們可以考慮。</p><p><a href="/zh-Hant/kotlin/lombok#gradle">瞭解如何設定 Lombok 編譯器外掛程式</a>。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native 1.5.20 提供新功能和工具改進的預覽：</p><ul><li><a href="#opt-in-export-of-kdoc-comments-to-generated-objective-c-headers">KDoc 註解選擇性匯出到產生後的 Objective-C 標頭檔</a></li><li><a href="#compiler-bug-fixes">編譯器錯誤修正</a></li><li><a href="#improved-performance-of-array-copyinto-inside-one-array">改善 Array.copyInto() 在同一陣列內部的效能</a></li></ul><h3 id="kdoc-註解選擇性匯出到產生後的-objective-c-標頭檔" tabindex="-1">KDoc 註解選擇性匯出到產生後的 Objective-C 標頭檔 <a class="header-anchor" href="#kdoc-註解選擇性匯出到產生後的-objective-c-標頭檔" aria-label="Permalink to &quot;KDoc 註解選擇性匯出到產生後的 Objective-C 標頭檔&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>將 KDoc 註解匯出到產生後的 Objective-C 標頭檔的功能是<a href="/zh-Hant/kotlin/components-stability">實驗性功能</a>。 它可能隨時被移除或變更。 需要選擇加入（詳情請見下文），且您僅應將其用於評估目的。 若您有任何回饋，請透過 <a href="https://youtrack.jetbrains.com/issue/KT-38600" target="_blank" rel="noreferrer">YouTrack</a> 告知我們。</p></div><p>您現在可以設定 Kotlin/Native 編譯器，將 Kotlin 程式碼中的<a href="/zh-Hant/kotlin/kotlin-doc">文件註解 (KDoc)</a> 匯出到從其產生的 Objective-C 框架，使其對框架的取用者可見。</p><p>例如，以下帶有 KDoc 的 Kotlin 程式碼：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Prints the sum of the arguments.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Properly handles the case when the sum doesn&#39;t fit in 32-bit integer.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)</span></span></code></pre></div><p>產生以下 Objective-C 標頭檔：</p><div class="language-objc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objc</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Prints the sum of the arguments.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Properly handles the case when the sum doesn&#39;t fit in 32-bit integer.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)printSumA:(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)a b:(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)b </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__attribute__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;printSum(a:b:)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span></span></code></pre></div><p>這也適用於 Swift。</p><p>要嘗試將 KDoc 註解匯出到 Objective-C 標頭檔的功能，請使用 <code>-Xexport-kdoc</code> 編譯器選項。將以下行新增到您想要匯出註解的 Gradle 專案的 <code>build.gradle(.kts)</code> 中：</p>`,35)),t(r,{group:"build-script"},{default:n(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    targets."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"mpp"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinNativeTarget"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilations."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"get"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"main"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},").kotlinOptions.freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "-Xexport-kdoc"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:n(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    targets"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilations"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"get("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"main"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlinOptions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "-Xexport-kdoc"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[7]||(a[7]=h(`<p>如果您能透過此 <a href="https://youtrack.jetbrains.com/issue/KT-38600" target="_blank" rel="noreferrer">YouTrack 問題單</a> 與我們分享您的回饋，我們將不勝感激。</p><h3 id="編譯器錯誤修正" tabindex="-1">編譯器錯誤修正 <a class="header-anchor" href="#編譯器錯誤修正" aria-label="Permalink to &quot;編譯器錯誤修正&quot;">​</a></h3><p>Kotlin/Native 編譯器在 1.5.20 中獲得了多項錯誤修正。您可以在<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.5.20" target="_blank" rel="noreferrer">變更日誌</a>中找到完整清單。</p><p>有一個重要的錯誤修正會影響相容性：在之前的版本中，包含不正確 UTF <a href="https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates" target="_blank" rel="noreferrer">代理對</a>的字串常數在編譯期間會遺失其值。現在這些值已得到保留。應用程式開發人員可以安全地更新到 1.5.20 – 不會造成任何問題。然而，使用 1.5.20 編譯的函式庫與早期編譯器版本不相容。請參閱<a href="https://youtrack.jetbrains.com/issue/KT-33175" target="_blank" rel="noreferrer">此 YouTrack 問題</a>以了解詳細資訊。</p><h3 id="改善-array-copyinto-在同一陣列內部的效能" tabindex="-1">改善 Array.copyInto() 在同一陣列內部的效能 <a class="header-anchor" href="#改善-array-copyinto-在同一陣列內部的效能" aria-label="Permalink to &quot;改善 Array.copyInto() 在同一陣列內部的效能&quot;">​</a></h3><p>我們改進了 <code>Array.copyInto()</code> 在其來源和目的地為同一陣列時的工作方式。現在，由於此用例的記憶體管理最佳化，此類操作的完成速度提高了多達 20 倍（取決於複製的物件數量）。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>隨著 1.5.20 的發布，我們正在發布一份指南，將協助您將專案遷移到適用於 Kotlin/JS 的新<a href="/zh-Hant/kotlin/js-ir-compiler">基於 IR 的後端</a>。</p><h3 id="js-ir-後端遷移指南" tabindex="-1">JS IR 後端遷移指南 <a class="header-anchor" href="#js-ir-後端遷移指南" aria-label="Permalink to &quot;JS IR 後端遷移指南&quot;">​</a></h3><p>新的 <a href="/zh-Hant/kotlin/js-ir-migration">JS IR 後端遷移指南</a>指出了您在遷移過程中可能遇到的問題並提供了解決方案。如果您發現任何指南中未涵蓋的問題，請向我們的<a href="http://kotl.in/issue" target="_blank" rel="noreferrer">問題追蹤器</a>報告。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.5.20 引入了以下功能，可以改善 Gradle 體驗：</p><ul><li><a href="#caching-for-annotation-processors-classloaders-in-kapt">kapt 中註解處理器類別載入器的快取</a></li><li><a href="#deprecation-of-the-kotlin-parallel-tasks-in-project-build-property">kotlin.parallel.tasks.in.project 建置屬性的棄用</a></li></ul><h3 id="kapt-中註解處理器類別載入器的快取" tabindex="-1">kapt 中註解處理器類別載入器的快取 <a class="header-anchor" href="#kapt-中註解處理器類別載入器的快取" aria-label="Permalink to &quot;kapt 中註解處理器類別載入器的快取&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>kapt 中註解處理器類別載入器的快取是<a href="/zh-Hant/kotlin/components-stability">實驗性功能</a>。 它可能隨時被移除或變更。僅供評估用途。 若您有任何回饋，請透過 <a href="https://youtrack.jetbrains.com/issue/KT-28901" target="_blank" rel="noreferrer">YouTrack</a> 告知我們。</p></div><p>現在有一個新的實驗性功能，可以在 <a href="/zh-Hant/kotlin/kapt">kapt</a> 中快取註解處理器的類別載入器。此功能可以提高 kapt 在連續 Gradle 執行時的速度。</p><p>若要啟用此功能，請在您的 <code>gradle.properties</code> 檔案中使用以下屬性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># positive value will enable caching</span></span>
<span class="line"><span># use the same value as the number of modules that use kapt</span></span>
<span class="line"><span>kapt.classloaders.cache.size=5</span></span>
<span class="line"><span></span></span>
<span class="line"><span># disable for caching to work</span></span>
<span class="line"><span>kapt.include.compile.classpath=false</span></span></code></pre></div><p>深入瞭解 <a href="/zh-Hant/kotlin/kapt">kapt</a>。</p><h3 id="kotlin-parallel-tasks-in-project-建置屬性的棄用" tabindex="-1">kotlin.parallel.tasks.in.project 建置屬性的棄用 <a class="header-anchor" href="#kotlin-parallel-tasks-in-project-建置屬性的棄用" aria-label="Permalink to &quot;kotlin.parallel.tasks.in.project 建置屬性的棄用&quot;">​</a></h3><p>在此版本中，Kotlin 平行編譯由 <a href="https://docs.gradle.org/current/userguide/performance.html#parallel_execution" target="_blank" rel="noreferrer">Gradle 平行執行旗標 <code>--parallel</code></a> 控制。使用此旗標，Gradle 可以並行執行任務，從而提高編譯任務的速度並更有效率地利用資源。</p><p>您不再需要使用 <code>kotlin.parallel.tasks.in.project</code> 屬性。此屬性已被棄用，並將在下一個主要版本中移除。</p><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><p>Kotlin 1.5.20 變更了數個處理字元函式的平台特定實作，從而實現了跨平台的統一：</p><ul><li><a href="#support-for-all-unicode-digits-in-char-digittoint-in-kotlin-native-and-kotlin-js">Kotlin/Native 和 Kotlin/JS 中 Char.digitToInt() 支援所有 Unicode 數字</a>。</li><li><a href="#unification-of-char-islowercase-isuppercase-imlementations-across-platforms">Char.isLowerCase()/isUpperCase() 實作在跨平台上的統一</a>。</li></ul><h3 id="kotlin-native-和-kotlin-js-中-char-digittoint-支援所有-unicode-數字" tabindex="-1">Kotlin/Native 和 Kotlin/JS 中 Char.digitToInt() 支援所有 Unicode 數字 <a class="header-anchor" href="#kotlin-native-和-kotlin-js-中-char-digittoint-支援所有-unicode-數字" aria-label="Permalink to &quot;Kotlin/Native 和 Kotlin/JS 中 Char.digitToInt() 支援所有 Unicode 數字&quot;">​</a></h3><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/digit-to-int.html" target="_blank" rel="noreferrer"><code>Char.digitToInt()</code></a> 回傳字元所代表的十進位數字值。在 1.5.20 之前，此函式僅在 Kotlin/JVM 上支援所有 Unicode 數字字元：Native 和 JS 平台上的實作僅支援 ASCII 數字。</p><p>從現在起，無論是 Kotlin/Native 還是 Kotlin/JS，您都可以對任何 Unicode 數字字元呼叫 <code>Char.digitToInt()</code> 並取得其數值表示。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ten </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0661&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0039&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ARABIC-INDIC DIGIT ONE + DIGIT NINE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ten)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="char-islowercase-isuppercase-實作在跨平台上的統一" tabindex="-1">Char.isLowerCase()/isUpperCase() 實作在跨平台上的統一 <a class="header-anchor" href="#char-islowercase-isuppercase-實作在跨平台上的統一" aria-label="Permalink to &quot;Char.isLowerCase()/isUpperCase() 實作在跨平台上的統一&quot;">​</a></h3><p>函式 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-upper-case.html" target="_blank" rel="noreferrer"><code>Char.isUpperCase()</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-lower-case.html" target="_blank" rel="noreferrer"><code>Char.isLowerCase()</code></a> 根據字元的大小寫回傳布林值。對於 Kotlin/JVM，實作會檢查 <code>General_Category</code> 和 <code>Other_Uppercase</code>/<code>Other_Lowercase</code> 這兩個 <a href="https://en.wikipedia.org/wiki/Unicode_character_property" target="_blank" rel="noreferrer">Unicode 屬性</a>。</p><p>在 1.5.20 之前，其他平台的實作方式不同，僅考慮一般類別。 在 1.5.20 中，實作在跨平台統一，並使用這兩個屬性來判斷字元的大小寫：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> latinCapitalA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // has &quot;Lu&quot; general category</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> circledLatinCapitalA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Ⓐ&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // has &quot;Other_Uppercase&quot; property</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(latinCapitalA.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> circledLatinCapitalA.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,33))])}const f=k(c,[["render",g]]);export{F as __pageData,f as default};
