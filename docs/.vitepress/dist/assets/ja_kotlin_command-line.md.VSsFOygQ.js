import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Kotlinコマンドラインコンパイラ","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/command-line.md","filePath":"ja/kotlin/command-line.md","lastUpdated":1754307826000}'),e={name:"ja/kotlin/command-line.md"};function n(h,s,p,k,o,r){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="kotlinコマンドラインコンパイラ" tabindex="-1">Kotlinコマンドラインコンパイラ <a class="header-anchor" href="#kotlinコマンドラインコンパイラ" aria-label="Permalink to &quot;Kotlinコマンドラインコンパイラ&quot;">​</a></h1><p>Kotlinの各リリースには、スタンドアロンバージョンのコンパイラが同梱されています。最新バージョンは手動で、またはパッケージマネージャー経由でダウンロードできます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>コマンドラインコンパイラのインストールは、Kotlinを使用するために必須の手順ではありません。 一般的なアプローチとしては、<a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a>や<a href="https://developer.android.com/studio" target="_blank" rel="noreferrer">Android Studio</a>など、公式Kotlinサポートが付属するIDEまたはコードエディターを使用してKotlinアプリケーションを記述します。 これらは、Kotlinのフルサポートをすぐに利用できる状態で提供します。 <a href="/ja/kotlin/getting-started">IDEでKotlinを始める方法</a>をご覧ください。</p></div><h2 id="コンパイラのインストール" tabindex="-1">コンパイラのインストール <a class="header-anchor" href="#コンパイラのインストール" aria-label="Permalink to &quot;コンパイラのインストール&quot;">​</a></h2><h3 id="手動インストール" tabindex="-1">手動インストール <a class="header-anchor" href="#手動インストール" aria-label="Permalink to &quot;手動インストール&quot;">​</a></h3><p>Kotlinコンパイラを手動でインストールするには：</p><ol><li><a href="https://github.com/JetBrains/kotlin/releases/tag/v2.2.10" target="_blank" rel="noreferrer">GitHub Releases</a>から最新バージョン（<code>kotlin-compiler-2.2.10.zip</code>）をダウンロードします。</li><li>ダウンロードしたスタンドアロンコンパイラを任意のディレクトリに解凍し、必要に応じて<code>bin</code>ディレクトリをシステムパスに追加します。 <code>bin</code>ディレクトリには、Windows、macOS、LinuxでKotlinをコンパイルおよび実行するために必要なスクリプトが含まれています。</li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>WindowsでKotlinコマンドラインコンパイラを使用したい場合は、手動でインストールすることをお勧めします。</p></div><h3 id="sdkman" tabindex="-1">SDKMAN! <a class="header-anchor" href="#sdkman" aria-label="Permalink to &quot;SDKMAN!&quot;">​</a></h3><p>macOS、Linux、Cygwin、FreeBSD、SolarisなどのUNIX系システムにKotlinをインストールする簡単な方法は、<a href="https://sdkman.io" target="_blank" rel="noreferrer">SDKMAN!</a>を使用することです。これはBashおよびZSHシェルでも動作します。<a href="https://sdkman.io/install" target="_blank" rel="noreferrer">SDKMAN!のインストール方法</a>をご覧ください。</p><p>SDKMAN!経由でKotlinコンパイラをインストールするには、ターミナルで次のコマンドを実行します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sdk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlin</span></span></code></pre></div><h3 id="homebrew" tabindex="-1">Homebrew <a class="header-anchor" href="#homebrew" aria-label="Permalink to &quot;Homebrew&quot;">​</a></h3><p>または、macOSでは<a href="https://brew.sh/" target="_blank" rel="noreferrer">Homebrew</a>経由でコンパイラをインストールできます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlin</span></span></code></pre></div><h3 id="snapパッケージ" tabindex="-1">Snapパッケージ <a class="header-anchor" href="#snapパッケージ" aria-label="Permalink to &quot;Snapパッケージ&quot;">​</a></h3><p>Ubuntu 16.04以降で<a href="https://snapcraft.io/" target="_blank" rel="noreferrer">Snap</a>を使用している場合、コマンドラインからコンパイラをインストールできます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --classic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlin</span></span></code></pre></div><h2 id="アプリケーションの作成と実行" tabindex="-1">アプリケーションの作成と実行 <a class="header-anchor" href="#アプリケーションの作成と実行" aria-label="Permalink to &quot;アプリケーションの作成と実行&quot;">​</a></h2><ol><li><p><code>&quot;Hello, World!&quot;</code>を表示するシンプルなコンソールJVMアプリケーションをKotlinで作成します。 コードエディターで、<code>hello.kt</code>という新しいファイルを作成し、以下のコードを記述します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Kotlinコンパイラを使用してアプリケーションをコンパイルします。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -include-runtime</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div><ul><li><code>-d</code>オプションは、生成されるクラスファイルの出力パスを指定します。これはディレクトリまたは**.jar**ファイルのいずれかです。</li><li><code>-include-runtime</code>オプションは、Kotlinランタイムライブラリを含めることで、結果の**.jar**ファイルを自己完結型で実行可能にします。</li></ul><p>利用可能なすべてのオプションを見るには、次を実行します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -help</span></span></code></pre></div></li><li><p>アプリケーションを実行します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Nativeアプリケーションをコンパイルするには、<a href="/ja/kotlin/native-get-started#using-the-command-line-compiler">Kotlin/Nativeコンパイラ</a>を使用します。</p></div><h2 id="ライブラリのコンパイル" tabindex="-1">ライブラリのコンパイル <a class="header-anchor" href="#ライブラリのコンパイル" aria-label="Permalink to &quot;ライブラリのコンパイル&quot;">​</a></h2><p>他のKotlinアプリケーションで使用されるライブラリを開発している場合、Kotlinランタイムを含めずに**.jar**ファイルをビルドできます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div><p>このようにコンパイルされたバイナリはKotlinランタイムに依存するため、コンパイルされたライブラリが使用される際には常にクラスパスに存在することを確認する必要があります。</p><p><code>kotlin</code>スクリプトを使用して、Kotlinコンパイラによって生成されたバイナリを実行することもできます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -classpath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HelloKt</span></span></code></pre></div><p><code>HelloKt</code>は、Kotlinコンパイラが<code>hello.kt</code>というファイルに対して生成するメインクラス名です。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Nativeライブラリをコンパイルするには、<a href="/ja/kotlin/native-libraries#kotlin-compiler-specifics">Kotlin/Nativeコンパイラ</a>を使用します。</p></div><h2 id="replの実行" tabindex="-1">REPLの実行 <a class="header-anchor" href="#replの実行" aria-label="Permalink to &quot;REPLの実行&quot;">​</a></h2><p>対話型シェルを利用するには、コンパイラを<a href="/ja/kotlin/compiler-reference#xrepl"><code>-Xrepl</code>コンパイラオプション</a>とともに実行します。このシェルでは、任意の有効なKotlinコードを入力して結果を確認できます。</p><h2 id="スクリプトの実行" tabindex="-1">スクリプトの実行 <a class="header-anchor" href="#スクリプトの実行" aria-label="Permalink to &quot;スクリプトの実行&quot;">​</a></h2><p>Kotlinをスクリプト言語として使用できます。 Kotlinスクリプトは、トップレベルの実行可能コードを含むKotlinソースファイル（<code>.kts</code>）です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.io.File</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get the passed in path, i.e. &quot;-d some/path&quot; or use the current path.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> folders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">folders?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { folder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folder) }</span></span></code></pre></div><p>スクリプトを実行するには、対応するスクリプトファイルを指定して、<code>-script</code>オプションをコンパイラに渡します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -script</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_folders.kts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">path_to_folder_to_inspec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Kotlinは、外部プロパティの追加、静的または動的依存関係の提供など、スクリプトのカスタマイズに対する実験的なサポートを提供します。 カスタマイズは、_スクリプト定義_と呼ばれる、適切なサポートコードを持つアノテーション付きKotlinクラスによって定義されます。 スクリプトのファイル名拡張子は、適切な定義を選択するために使用されます。<a href="/ja/kotlin/custom-script-deps-tutorial">Kotlinカスタムスクリプト</a>の詳細をご覧ください。</p><p>適切に準備されたスクリプト定義は、適切なjarがコンパイルクラスパスに含まれている場合に自動的に検出され、適用されます。または、<code>-script-templates</code>オプションをコンパイラに渡すことで、手動で定義を指定することもできます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -script-templates</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.example.CustomScriptDefinition</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -script</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> custom.script1.kts</span></span></code></pre></div><p>追加の詳細については、<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/scripting-support.md" target="_blank" rel="noreferrer">KEEP-75</a>を参照してください。</p>`,40)]))}const g=i(e,[["render",n]]);export{c as __pageData,g as default};
