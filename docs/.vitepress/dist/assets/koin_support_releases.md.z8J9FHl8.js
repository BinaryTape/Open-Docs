import{_ as e,c as s,o as a,ag as o}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"版本发布与 API 升级指南","description":"","frontmatter":{"title":"版本发布与 API 升级指南","custom_edit_url":null},"headers":[],"relativePath":"koin/support/releases.md","filePath":"koin/support/releases.md","lastUpdated":1750001831000}'),l={name:"koin/support/releases.md"};function n(d,i,t,p,c,k){return a(),s("div",null,i[0]||(i[0]=[o(`<h1 id="版本发布与-api-升级指南" tabindex="-1">版本发布与 API 升级指南 <a class="header-anchor" href="#版本发布与-api-升级指南" aria-label="Permalink to &quot;版本发布与 API 升级指南&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>本页面全面概述了 Koin 的每次主要版本发布，详细阐述了我们框架的演进，以帮助您规划升级并保持兼容性。</p></div><p>对于每个版本，文档结构如下：</p><ul><li><code>Kotlin</code>: 指定该版本使用的 Kotlin 版本，确保语言兼容性清晰，并使您能够利用最新的 Kotlin 特性。</li><li><code>New</code>: 突出新引入的功能和改进，这些改进增强了功能性并提升了开发者体验。</li><li><code>Experimental</code>: 列出标记为实验性的 API 和功能。这些功能正在积极开发中，并可能根据社区反馈进行更改。</li><li><code>Deprecated</code>: 识别已标记为废弃的 API 和功能，并提供关于推荐替代方案的指导，帮助您为未来的移除做准备。</li><li><code>Breaking</code>: 详细说明任何可能破坏向后兼容性的更改，确保您在迁移过程中了解必要的调整。</li></ul><p>这种结构化方法不仅阐明了每个版本中的增量变化，也强化了我们在 Koin 项目中对透明度、稳定性与持续改进的承诺。</p><p>更多详情请参阅 <a href="/koinapi-stability">API 稳定性契约</a>。</p><h2 id="_4-1-1" tabindex="-1">4.1.1 <a class="header-anchor" href="#_4-1-1" aria-label="Permalink to &quot;4.1.1&quot;">​</a></h2><h3 id="新增-🎉" tabindex="-1">新增 🎉 <a class="header-anchor" href="#新增-🎉" aria-label="Permalink to &quot;新增 🎉&quot;">​</a></h3><p><code>koin-ktor</code></p><ul><li>集成 - 提供 <code>KtorDIExtension</code> 以集成 Ktor 3.2 默认 DI 引擎</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setupDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DbConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { database }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomerRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> database: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomerRepository</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">customerDataModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    koinModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomerRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) bind CustomerRepository::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_4-1-0" tabindex="-1">4.1.0 <a class="header-anchor" href="#_4-1-0" aria-label="Permalink to &quot;4.1.0&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>使用 Kotlin <code>2.1.20</code></p></div><h3 id="新增-🎉-1" tabindex="-1">新增 🎉 <a class="header-anchor" href="#新增-🎉-1" aria-label="Permalink to &quot;新增 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li>配置 - <code>KoinConfiguration</code> API 旨在帮助封装配置</li><li>作用域 - 引入了一种新的<strong>作用域原型 (Scope Archetype)</strong>，用于针对作用域类别的专用作用域类型限定符。实例解析现在可以针对作用域类别（即原型）进行。</li><li>特性选项 - “特性选项 (Feature Option)”旨在帮助在 Koin 内部进行特性标记新特性行为。您可以通过 Koin 配置中的 <code>options</code> 块激活一个选项：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // activate a new feature</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        viewModelScopeFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>核心 - 引入新的 <code>CoreResolver</code>，它允许 <code>ResolutionExtension</code> 帮助 Koin 在外部系统或资源中解析（它用于帮助连接 Ktor DI）</li></ul><p><code>koin-android</code></p><ul><li>升级后的库（<code>androidx.appcompat:appcompat:1.7.0</code>、<code>androidx.activity:activity-ktx:1.10.1</code>）要求将最低 SDK 级别从 14 提高到 21</li><li>DSL - 添加了新的 Koin 模块 DSL 扩展 <code>activityScope</code>、<code>activityRetainedScope</code> 和 <code>fragmentScope</code>，以在 Activity/Fragment 中声明作用域</li><li>作用域函数 - <code>activityScope()</code>、<code>activityRetainedScope()</code> 和 <code>fragmentScope()</code> API 函数现在也触发作用域原型</li></ul><p><code>koin-androidx-compose</code></p><ul><li>与 Koin Compose 多平台以及所有 Compose 1.8 &amp; Lifecycle 2.9 对齐</li></ul><p><code>koin-compose</code></p><ul><li>与 Compose 1.8 &amp; Lifecycle 2.9 对齐</li><li>新增函数 - <code>KoinApplicationPreview</code> 帮助在 Android Studio 和 IntelliJ 中渲染并行预览</li></ul><p><code>koin-compose-viewmodel</code></p><ul><li>添加了 <code>koinActivityViewModel</code>，允许将父 Activity 设置为主机</li></ul><p><code>koin-ktor</code></p><ul><li>多平台 - 该模块现在以 Kotlin KMP 格式编译。您可以从多平台项目中使用 <code>koin-ktor</code>。</li><li>合并 - 先前的 <code>koin-ktor3</code> 模块已合并到 <code>koin-ktor</code> 中。</li><li>扩展 - 引入了 <code>Application.koinModule { }</code> 和 <code>Application.koinModules()</code>，允许您直接将 Koin 模块声明到 Ktor 模块中</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">customerDataModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    koinModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomerRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) bind CustomerRepository::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>作用域 - <code>Module.requestScope</code> - 允许在 Ktor 请求作用域内声明定义（避免手动声明 <code>scope&lt;RequestScope&gt;</code>） 注入的作用域也允许在构造函数中注入 <code>ApplicationCall</code>。</li></ul><p><code>koin-core-coroutines</code></p><ul><li>模块 DSL - 引入新的 <code>ModuleConfiguration</code>，以帮助将模块配置集中到一个结构中，便于后续更好地验证。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Simple.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lm1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lazyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Simple.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>配置 DSL - Koin 配置现在可以使用 <code>ModuleConfiguration</code> 来加载模块：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or even</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(conf)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>koin-test-coroutines</code></p><ul><li>新增 <code>koin-test-coroutines</code> Koin 模块，以引入与协程相关的新测试 API。</li><li>扩展 - 扩展 Verify API，让您可以使用 <code>moduleConfiguration</code> 检查 Koin 配置，然后验证模块/惰性模块 (Lazy Modules) 的混合配置：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// if you want Android types (koin-android-test)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(extraTypes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> androidTypes)</span></span></code></pre></div><p><code>koin-core-annotations</code></p><ul><li>注解 - <code>@InjectedParam</code> 或 <code>@Provided</code> 用于标记一个属性，使其被视为注入参数或动态提供。目前用于 <code>Verify</code> API，但未来可能用于更轻量级的 DSL 声明。</li></ul><h3 id="实验性-🚧" tabindex="-1">实验性 🚧 <a class="header-anchor" href="#实验性-🚧" aria-label="Permalink to &quot;实验性 🚧&quot;">​</a></h3><p><code>koin-core</code></p><ul><li>Wasm - 使用 Kotlin 2.1.20 UUID 生成</li></ul><p><code>koin-core-viewmodel</code></p><ul><li>DSL - 添加了模块 DSL 扩展 <code>viewModelScope</code>，以声明作用域为 ViewModel 作用域原型 (ViewModel scope archetype) 的组件。</li><li>作用域函数 - 添加了函数 <code>viewModelScope()</code>，为 ViewModel 创建作用域（绑定到 ViewModel 类）。此 API 现在使用 <code>ViewModelScopeAutoCloseable</code> 来利用 <code>AutoCloseable</code> API 帮助声明和关闭作用域。不再需要手动关闭 ViewModel 作用域</li><li>类 - 更新了 <code>ScopeViewModel</code> 类，以支持即用型 ViewModel 作用域类（处理作用域创建和关闭）</li><li>特性选项 - 使用 ViewModel 作用域的构造函数 ViewModel 注入，需要激活 Koin 选项 <code>viewModelScopeFactory</code>：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // activate a new ViewModel scope creation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        viewModelScopeFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will inject Session from MyScopeViewModel&#39;s scope</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopeViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    viewModelOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopeViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    viewModelScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        scopedOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>koin-compose</code></p><ul><li>Compose 函数 - 添加了新的 <code>KoinMultiplatformApplication</code> 函数，尝试提出一个多平台 Compose 入口点</li></ul><p><code>koin-core-viewmodel-navigation</code></p><ul><li>导航扩展 - 添加了 <code>sharedViewModel</code>，以从导航的 <code>NavbackEntry</code> 重用 ViewModel 实例</li></ul><p><code>koin-test</code></p><ul><li>注解 - Koin 配置验证 API <code>Verify</code> 现在帮助您检查可空、惰性 (lazy) 和列表参数。只需使用 <code>@InjectedParam</code> 或 <code>@Provided</code> 标记一个属性，使其被视为注入参数或动态提供。这避免了 Verify API 中的复杂声明。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// now detected in Verify</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentBParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@InjectedParam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentBProvided</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Provided</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="废弃-⚠️" tabindex="-1">废弃 ⚠️ <a class="header-anchor" href="#废弃-⚠️" aria-label="Permalink to &quot;废弃 ⚠️&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>ScopeViewModel</code> 现已废弃，请改用 <code>koin-core-viewmodel</code> 中的 <code>ScopeViewModel</code> 类。</li></ul><p><code>koin-compose</code></p><ul><li>Compose 上下文 API 不再需要，因为 Koin 上下文已在当前默认上下文中正确准备。以下 API 已废弃，可以移除：<code>KoinContext</code></li></ul><p><code>koin-androidx-compose</code></p><ul><li>Jetpack Compose 上下文 API 不再需要，因为 Koin 上下文已在当前默认上下文中正确准备。以下 API 已废弃，可以移除：<code>KoinAndroidContext</code></li></ul><p><code>koin-androidx-compose-navigation</code></p><ul><li>由于生命周期库更新，函数 <code>koinNavViewModel</code> 不再需要，可替换为 <code>koinViewModel</code></li></ul><p><code>koin-core-viewmodel-navigation</code></p><ul><li>由于生命周期库更新，函数 <code>koinNavViewModel</code> 不再需要，可替换为 <code>koinViewModel</code></li></ul><p><code>koin-ktor</code></p><ul><li>扩展 - <code>Application.koin</code> 现已废弃，请改用 <code>Application.koinModules</code> 和 <code>Application.koinModule</code></li></ul><h3 id="破坏性变更-💥" tabindex="-1">破坏性变更 💥 <a class="header-anchor" href="#破坏性变更-💥" aria-label="Permalink to &quot;破坏性变更 💥&quot;">​</a></h3><p><code>koin-android</code></p><ul><li>所有旧的状态 ViewModel API 现已移除： <ul><li><code>stateViewModel()</code>、<code>getStateViewModel()</code>，请改用 <code>viewModel()</code></li><li><code>getSharedStateViewModel()</code>、<code>sharedStateViewModel()</code>，请改用 <code>viewModel()</code> 或 <code>activityViewModel()</code> 获取共享实例</li></ul></li></ul><p><code>koin-compose</code></p><ul><li>旧的 Compose API 函数已移除： <ul><li>函数 <code>inject()</code> 已被移除，倾向于 <code>koinInject()</code></li><li>函数 <code>getViewModel()</code> 已被移除，倾向于 <code>koinViewModel()</code></li><li>函数 <code>rememberKoinInject()</code> 已移至 <code>koinInject()</code></li></ul></li><li>函数 <code>rememberKoinApplication</code> 已被标记为 <code>@KoinInternalAPI</code></li></ul><h2 id="_4-0-4" tabindex="-1">4.0.4 <a class="header-anchor" href="#_4-0-4" aria-label="Permalink to &quot;4.0.4&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>使用 Kotlin <code>2.0.21</code></p></div><p>所有使用的库版本都位于 <a href="https://github.com/InsertKoinIO/koin/blob/main/projects/gradle/libs.versions.toml" target="_blank" rel="noreferrer">libs.versions.toml</a> 中。</p><h3 id="新增-🎉-2" tabindex="-1">新增 🎉 <a class="header-anchor" href="#新增-🎉-2" aria-label="Permalink to &quot;新增 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li><code>KoinPlatformTools.generateId()</code> - 借助此新版本的 Kotlin，我们受益于新的 <code>kotlin.uuid.uuid</code> API。<code>KoinPlatformTools.generateId()</code> Koin 函数现在使用此新 API 在跨平台上生成真实的 UUID。</li></ul><p><code>koin-viewmodel</code></p><ul><li>Koin 4.0 引入了新的 ViewModel DSL 和 API，这些 API 统一了 Google/Jetbrains KMP API。为了避免代码库中的重复，ViewModel API 现在位于 <code>koin-core-viewmodel</code> 和 <code>koin-core-viewmodel-navigation</code> 项目中。</li><li>ViewModel DSL 的导入是 <code>org.koin.core.module.dsl.*</code></li></ul><p>以下给定项目中的 API 现已稳定。</p><p><code>koin-core-coroutines</code> - 所有 API 现已稳定</p><ul><li>所有 <code>lazyModules</code></li><li><code>awaitAllStartJobs</code>、<code>onKoinStarted</code>、<code>isAllStartedJobsDone</code></li><li><code>waitAllStartJobs</code>、<code>runOnKoinStarted</code></li><li><code>KoinApplication.coroutinesEngine</code></li><li><code>Module.includes(lazy)</code></li><li><code>lazyModule()</code></li><li><code>KoinPlatformCoroutinesTools</code></li></ul><h3 id="实验性-🚧-1" tabindex="-1">实验性 🚧 <a class="header-anchor" href="#实验性-🚧-1" aria-label="Permalink to &quot;实验性 🚧&quot;">​</a></h3><p><code>koin-test</code></p><ul><li><code>ParameterTypeInjection</code> - 新 API，用于帮助设计 <code>Verify</code> API 的动态参数注入</li></ul><p><code>koin-androidx-startup</code></p><ul><li><code>koin-androidx-startup</code> - 使用 <code>AndroidX Startup</code>（通过 <code>androidx.startup.Initializer</code> API）启动 Koin 的新能力。<code>koin-androidx-startup</code> 中的所有 API 都是实验性的。</li></ul><p><code>koin-compose</code></p><ul><li><code>rememberKoinModules</code> - 根据 <code>@Composable</code> 组件加载/卸载 Koin 模块</li><li><code>rememberKoinScope</code> - 根据 <code>@Composable</code> 组件加载/卸载 Koin Scope</li><li><code>KoinScope</code> - 为所有底层 Composable 子组件加载 Koin 作用域</li></ul><h3 id="废弃-⚠️-1" tabindex="-1">废弃 ⚠️ <a class="header-anchor" href="#废弃-⚠️-1" aria-label="Permalink to &quot;废弃 ⚠️&quot;">​</a></h3><p>以下 API 已被废弃，不应再使用：</p><ul><li><p><code>koin-test</code></p><ul><li>所有 <code>checkModules</code> 的 API。请迁移到 <code>Verify</code> API。</li></ul></li><li><p><code>koin-android</code></p><ul><li>ViewModel DSL，倾向于 <code>koin-core</code> 中新的集中式 DSL</li><li>所有状态 ViewModel API 在错误级别上已废弃： <ul><li><code>stateViewModel()</code>、<code>getStateViewModel()</code>，请改用 <code>viewModel()</code></li><li><code>getSharedStateViewModel()</code>、<code>sharedStateViewModel()</code>，请改用 <code>viewModel()</code> 或 <code>activityViewModel()</code> 获取共享实例</li></ul></li></ul></li></ul><p><code>koin-compose</code></p><ul><li><p>旧的 Compose API 函数在错误级别上已废弃：</p><ul><li>函数 <code>inject()</code> 已废弃（错误级别），倾向于 <code>koinInject()</code></li><li>函数 <code>getViewModel()</code> 已废弃（错误级别），倾向于 <code>koinViewModel()</code></li><li>函数 <code>rememberKoinInject()</code> 已废弃（错误级别），倾向于 <code>koinInject()</code></li></ul></li><li><p><code>koin-compose-viewmodel</code></p><ul><li>ViewModel DSL，倾向于 <code>koin-core</code> 中新的集中式 DSL</li><li>函数 <code>koinNavViewModel</code> 现已废弃，倾向于 <code>koinViewModel</code></li></ul></li></ul><h3 id="破坏性变更-💥-1" tabindex="-1">破坏性变更 💥 <a class="header-anchor" href="#破坏性变更-💥-1" aria-label="Permalink to &quot;破坏性变更 💥&quot;">​</a></h3><p>以下 API 因上一个里程碑中的废弃已被移除：</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>所有使用 <code>@KoinReflectAPI</code> 注解的 API 都已被移除</p></div><p><code>koin-core</code></p><ul><li><code>ApplicationAlreadyStartedException</code> 已重命名为 <code>KoinApplicationAlreadyStartedException</code></li><li><code>KoinScopeComponent.closeScope()</code> 已移除，因为它在内部不再使用</li><li>内部 <code>ResolutionContext</code> 已移至替换 <code>InstanceContext</code></li><li><code>KoinPlatformTimeTools</code>、<code>Timer</code>、<code>measureDuration</code> 已移除，转而使用 Kotlin Time API</li><li><code>KoinContextHandler</code> 已移除，倾向于 <code>GlobalContext</code></li></ul><p><code>koin-android</code></p><ul><li>函数 <code>fun Fragment.createScope()</code> 已移除</li><li>所有围绕 ViewModel 工厂的 API（主要是内部）都为新的内部机制进行了重构</li></ul><p><code>koin-compose</code></p><ul><li>移除 <code>StableParametersDefinition</code>，因为它在内部不再使用</li><li>移除所有 Lazy ViewModel API - 旧的 <code>viewModel()</code></li><li>移除 <code>rememberStableParametersDefinition()</code>，因为它在内部不再使用</li></ul><h2 id="_3-5-6" tabindex="-1">3.5.6 <a class="header-anchor" href="#_3-5-6" aria-label="Permalink to &quot;3.5.6&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>使用 Kotlin <code>1.9.22</code></p></div><p>所有使用的库版本都位于 <a href="https://github.com/InsertKoinIO/koin/blob/3.5.6/projects/gradle/libs.versions.toml" target="_blank" rel="noreferrer">libs.versions.toml</a> 中。</p><h3 id="新增-🎉-3" tabindex="-1">新增 🎉 <a class="header-anchor" href="#新增-🎉-3" aria-label="Permalink to &quot;新增 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li><code>KoinContext</code> 现在包含以下内容： <ul><li><code>fun loadKoinModules(module: Module, createEagerInstances: Boolean = false)</code></li><li><code>fun loadKoinModules(modules: List&lt;Module&gt;, createEagerInstances: Boolean = false)</code></li></ul></li><li><code>koinApplication()</code> 函数现在支持多种格式： <ul><li><code>koinApplication(createEagerInstances: Boolean = true, appDeclaration: KoinAppDeclaration? = null)</code></li><li><code>koinApplication(appDeclaration: KoinAppDeclaration?)</code></li><li><code>koinApplication(createEagerInstances: Boolean)</code></li></ul></li><li><code>KoinAppDeclaration</code> 用于帮助开放声明样式</li><li><code>KoinPlatformTimeTools</code> 用于 JS 的 API Time</li><li>iOS - <code>synchronized</code> API 用于 Touchlab Lockable API</li></ul><p><code>koin-androidx-compose</code></p><ul><li>新的 <code>KoinAndroidContext</code>，用于从 Android 环境绑定到当前的 Koin 上下文</li></ul><p><code>koin-compose</code></p><ul><li>新的 <code>KoinContext</code> 上下文启动器，带当前的默认上下文</li></ul><p><code>koin-ktor</code></p><ul><li>现在为 Ktor 实例使用隔离的上下文（使用 <code>Application.getKoin()</code> 而非默认上下文）</li><li>Koin 插件引入了新的监控功能</li><li><code>RequestScope</code> 允许 Ktor 请求的作用域实例</li></ul><h3 id="实验性-🚧-2" tabindex="-1">实验性 🚧 <a class="header-anchor" href="#实验性-🚧-2" aria-label="Permalink to &quot;实验性 🚧&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>ViewModelScope</code> 引入了 ViewModel 作用域的实验性 API</li></ul><p><code>koin-core-coroutines</code> - 引入新 API 以在后台加载模块</p><h3 id="废弃-⚠️-2" tabindex="-1">废弃 ⚠️ <a class="header-anchor" href="#废弃-⚠️-2" aria-label="Permalink to &quot;废弃 ⚠️&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>getLazyViewModelForClass()</code> API 非常复杂，并会调用默认的全局上下文。建议坚持使用 Android/Fragment API</li><li><code>resolveViewModelCompat()</code> 已废弃，倾向于 <code>resolveViewModel()</code></li></ul><p><code>koin-compose</code></p><ul><li>函数 <code>get()</code> 和 <code>inject()</code> 已废弃，倾向于 <code>koinInject()</code></li><li>函数 <code>getViewModel()</code> 已废弃，倾向于 <code>koinViewModel()</code></li><li>函数 <code>rememberKoinInject()</code> 已废弃，倾向于 <code>koinInject()</code></li></ul><h3 id="破坏性变更-💥-2" tabindex="-1">破坏性变更 💥 <a class="header-anchor" href="#破坏性变更-💥-2" aria-label="Permalink to &quot;破坏性变更 💥&quot;">​</a></h3><p><code>koin-core</code></p><ul><li><code>Koin.loadModules(modules: List&lt;Module&gt;, allowOverride: Boolean = true, createEagerInstances : Boolean = false)</code> 替换了 <code>Koin.loadModules(modules: List&lt;Module&gt;, allowOverride: Boolean = true)</code></li><li>属性 <code>KoinExtension.koin</code> 已移至函数 <code>KoinExtension.onRegister()</code></li><li>iOS - <code>internal fun globalContextByMemoryModel(): KoinContext</code> 用于使用 <code>MutableGlobalContext</code></li></ul><p><code>koin-compose</code></p><ul><li>函数 <code>KoinApplication(moduleList: () -&gt; List&lt;Module&gt;, content: @Composable () -&gt; Unit)</code> 已移除，倾向于 <code>KoinContext</code> 和 <code>KoinAndroidContext</code></li></ul><h2 id="_3-4-3" tabindex="-1">3.4.3 <a class="header-anchor" href="#_3-4-3" aria-label="Permalink to &quot;3.4.3&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>使用 Kotlin <code>1.8.21</code></p></div><h3 id="新增-🎉-4" tabindex="-1">新增 🎉 <a class="header-anchor" href="#新增-🎉-4" aria-label="Permalink to &quot;新增 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li>新的 ExtensionManager API，用于帮助为 Koin 编写扩展引擎 - <code>ExtensionManager</code> + <code>KoinExtension</code></li><li>Parameters API 更新，新增 <code>parameterArrayOf</code> 和 <code>parameterSetOf</code></li></ul><p><code>koin-test</code></p><ul><li><code>Verification</code> API - 帮助在模块上运行 <code>verify</code>。</li></ul><p><code>koin-android</code></p><ul><li>ViewModel 注入的内部机制</li><li>添加 <code>AndroidScopeComponent.onCloseScope()</code> 函数回调</li></ul><p><code>koin-android-test</code></p><ul><li><code>Verification</code> API - 帮助在模块上运行 <code>androidVerify()</code>。</li></ul><p><code>koin-androidx-compose</code></p><ul><li>新增 <code>get()</code></li><li>新增 <code>getViewModel()</code></li><li>新增 Scopes <code>KoinActivityScope</code>、<code>KoinFragmentScope</code></li></ul><p><code>koin-androidx-compose-navigation</code> - 用于导航的新模块</p><ul><li>新增 <code>koinNavViewModel()</code></li></ul><p><code>koin-compose</code> - 用于 Compose 的新多平台 API</p><ul><li><code>koinInject</code>、<code>rememberKoinInject</code></li><li><code>KoinApplication</code></li></ul><h3 id="实验性-🚧-3" tabindex="-1">实验性 🚧 <a class="header-anchor" href="#实验性-🚧-3" aria-label="Permalink to &quot;实验性 🚧&quot;">​</a></h3><p><code>koin-compose</code> - 用于 Compose 的新实验性多平台 API</p><ul><li><code>rememberKoinModules</code></li><li><code>KoinScope</code>、<code>rememberKoinScope</code></li></ul><h3 id="废弃-⚠️-3" tabindex="-1">废弃 ⚠️ <a class="header-anchor" href="#废弃-⚠️-3" aria-label="Permalink to &quot;废弃 ⚠️&quot;">​</a></h3><p><code>koin-compose</code></p><ul><li>函数 <code>get()</code> 替换 <code>inject()</code> 的用法，避免 Lazy 函数</li><li>函数 <code>getViewModel()</code> 替换 <code>viewModel()</code> 函数的用法，避免 Lazy 函数</li></ul><h3 id="破坏性变更-💥-3" tabindex="-1">破坏性变更 💥 <a class="header-anchor" href="#破坏性变更-💥-3" aria-label="Permalink to &quot;破坏性变更 💥&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>LifecycleScopeDelegate</code> 现已移除</li></ul><p><code>koin-androidx-compose</code></p><ul><li>移除 <code>getStateViewModel</code>，倾向于 <code>koinViewModel</code></li></ul>`,157)]))}const E=e(l,[["render",n]]);export{r as __pageData,E as default};
