import{_ as a,c as i,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"追蹤","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/koog/tracing.md","filePath":"zh-Hant/koog/tracing.md","lastUpdated":1755146406000}'),e={name:"zh-Hant/koog/tracing.md"};function l(h,s,p,d,k,r){return t(),i("div",null,s[0]||(s[0]=[n(`<h1 id="追蹤" tabindex="-1">追蹤 <a class="header-anchor" href="#追蹤" aria-label="Permalink to &quot;追蹤&quot;">​</a></h1><p>此頁面包含有關追蹤 (Tracing) 功能的詳細資訊，該功能為 AI 代理程式提供了全面的追蹤能力。</p><h2 id="功能概述" tabindex="-1">功能概述 <a class="header-anchor" href="#功能概述" aria-label="Permalink to &quot;功能概述&quot;">​</a></h2><p>追蹤功能是一個強大的監控與偵錯工具，它能擷取關於代理程式執行的詳細資訊，包括：</p><ul><li>策略執行</li><li>LLM 呼叫</li><li>工具調用</li><li>代理程式圖中的節點執行</li></ul><p>此功能透過攔截代理程式管線中的關鍵事件，並將其轉發給可設定的訊息處理器。這些處理器可以將追蹤資訊輸出到各種目的地，例如紀錄檔或檔案系統中的其他類型檔案，使開發者能夠深入瞭解代理程式的行為並有效地排解問題。</p><h3 id="事件流程" tabindex="-1">事件流程 <a class="header-anchor" href="#事件流程" aria-label="Permalink to &quot;事件流程&quot;">​</a></h3><ol><li>追蹤功能攔截代理程式管線中的事件。</li><li>事件會根據設定的訊息篩選器進行篩選。</li><li>篩選後的事件會傳遞給已註冊的訊息處理器。</li><li>訊息處理器會格式化並將事件輸出到各自的目的地。</li></ol><h2 id="設定與初始化" tabindex="-1">設定與初始化 <a class="header-anchor" href="#設定與初始化" aria-label="Permalink to &quot;設定與初始化&quot;">​</a></h2><h3 id="基本設定" tabindex="-1">基本設定 <a class="header-anchor" href="#基本設定" aria-label="Permalink to &quot;基本設定&quot;">​</a></h3><p>若要使用追蹤功能，您需要：</p><ol><li>擁有一或多個訊息處理器（您可以使用現有的或建立自己的）。</li><li>在您的代理程式中安裝 <code>Tracing</code>。</li><li>設定訊息篩選器（可選）。</li><li>將訊息處理器添加到該功能中。</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定義將用作追蹤訊息目的地的紀錄器/檔案</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KotlinLogging.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputPath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/trace.log&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 建立一個代理程式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 配置訊息處理器以處理追蹤事件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TraceFeatureMessageLogWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logger))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         TraceFeatureMessageFileWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            outputPath,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buffered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 可選地篩選訊息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 僅追蹤 LLM 呼叫和工具呼叫</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AfterLLMCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolCallEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="訊息篩選" tabindex="-1">訊息篩選 <a class="header-anchor" href="#訊息篩選" aria-label="Permalink to &quot;訊息篩選&quot;">​</a></h3><p>您可以處理所有現有事件，或根據特定準則選擇其中一些。訊息篩選器可讓您控制哪些事件被處理。這對於專注於代理程式執行的特定方面非常有用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 僅篩選與 LLM 相關的事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeforeLLMCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AfterLLMCallEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 僅篩選與工具相關的事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolCallResultEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolValidationErrorEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolCallFailureEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 僅篩選節點執行事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AIAgentNodeExecutionStartEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AIAgentNodeExecutionEndEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="大量追蹤資料" tabindex="-1">大量追蹤資料 <a class="header-anchor" href="#大量追蹤資料" aria-label="Permalink to &quot;大量追蹤資料&quot;">​</a></h3><p>對於具有複雜策略或長時間執行的代理程式，追蹤事件的數量可能會非常龐大。考慮使用以下方法來管理事件量：</p><ul><li>使用特定的訊息篩選器來減少事件數量。</li><li>實作帶有緩衝或取樣功能的自訂訊息處理器。</li><li>使用紀錄檔輪替來防止紀錄檔過大。</li></ul><h3 id="依賴關係圖" tabindex="-1">依賴關係圖 <a class="header-anchor" href="#依賴關係圖" aria-label="Permalink to &quot;依賴關係圖&quot;">​</a></h3><p>追蹤功能具有以下依賴項：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Tracing</span></span>
<span class="line"><span>├── AIAgentPipeline (for intercepting events)</span></span>
<span class="line"><span>├── TraceFeatureConfig</span></span>
<span class="line"><span>│   └── FeatureConfig</span></span>
<span class="line"><span>├── Message Processors</span></span>
<span class="line"><span>│   ├── TraceFeatureMessageLogWriter</span></span>
<span class="line"><span>│   │   └── FeatureMessageLogWriter</span></span>
<span class="line"><span>│   ├── TraceFeatureMessageFileWriter</span></span>
<span class="line"><span>│   │   └── FeatureMessageFileWriter</span></span>
<span class="line"><span>│   └── TraceFeatureMessageRemoteWriter</span></span>
<span class="line"><span>│       └── FeatureMessageRemoteWriter</span></span>
<span class="line"><span>└── Event Types (from ai.koog.agents.core.feature.model)</span></span>
<span class="line"><span>    ├── AIAgentStartedEvent</span></span>
<span class="line"><span>    ├── AIAgentFinishedEvent</span></span>
<span class="line"><span>    ├── AIAgentRunErrorEvent</span></span>
<span class="line"><span>    ├── AIAgentStrategyStartEvent</span></span>
<span class="line"><span>    ├── AIAgentStrategyFinishedEvent</span></span>
<span class="line"><span>    ├── AIAgentNodeExecutionStartEvent</span></span>
<span class="line"><span>    ├── AIAgentNodeExecutionEndEvent</span></span>
<span class="line"><span>    ├── LLMCallStartEvent</span></span>
<span class="line"><span>    ├── LLMCallWithToolsStartEvent</span></span>
<span class="line"><span>    ├── LLMCallEndEvent</span></span>
<span class="line"><span>    ├── LLMCallWithToolsEndEvent</span></span>
<span class="line"><span>    ├── ToolCallEvent</span></span>
<span class="line"><span>    ├── ToolValidationErrorEvent</span></span>
<span class="line"><span>    ├── ToolCallFailureEvent</span></span>
<span class="line"><span>    └── ToolCallResultEvent</span></span></code></pre></div><h2 id="範例與快速入門" tabindex="-1">範例與快速入門 <a class="header-anchor" href="#範例與快速入門" aria-label="Permalink to &quot;範例與快速入門&quot;">​</a></h2><h3 id="基本追蹤到紀錄器" tabindex="-1">基本追蹤到紀錄器 <a class="header-anchor" href="#基本追蹤到紀錄器" aria-label="Permalink to &quot;基本追蹤到紀錄器&quot;">​</a></h3><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 建立一個紀錄器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KotlinLogging.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 建立帶有追蹤功能的代理程式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TraceFeatureMessageLogWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logger))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 執行代理程式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, agent!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="錯誤處理與邊緣情況" tabindex="-1">錯誤處理與邊緣情況 <a class="header-anchor" href="#錯誤處理與邊緣情況" aria-label="Permalink to &quot;錯誤處理與邊緣情況&quot;">​</a></h2><h3 id="無訊息處理器" tabindex="-1">無訊息處理器 <a class="header-anchor" href="#無訊息處理器" aria-label="Permalink to &quot;無訊息處理器&quot;">​</a></h3><p>如果沒有訊息處理器添加到追蹤功能中，將會記錄一則警告：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Tracing Feature. No feature out stream providers are defined. Trace streaming has no target.</span></span></code></pre></div><p>該功能仍將攔截事件，但它們不會被處理或輸出到任何地方。</p><h3 id="資源管理" tabindex="-1">資源管理 <a class="header-anchor" href="#資源管理" aria-label="Permalink to &quot;資源管理&quot;">​</a></h3><p>訊息處理器可能會佔用需要適當釋放的資源（例如檔案控制代碼）。使用 <code>use</code> 擴充函數以確保適當的清理：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 建立一個代理程式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> writer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TraceFeatureMessageFileWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        outputPath,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buffered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 執行代理程式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 當區塊退出時，寫入器將自動關閉</span></span></code></pre></div><h3 id="將特定事件追蹤到檔案" tabindex="-1">將特定事件追蹤到檔案 <a class="header-anchor" href="#將特定事件追蹤到檔案" aria-label="Permalink to &quot;將特定事件追蹤到檔案&quot;">​</a></h3><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 僅追蹤 LLM 呼叫</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeforeLLMCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AfterLLMCallEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="將特定事件追蹤到遠端端點" tabindex="-1">將特定事件追蹤到遠端端點 <a class="header-anchor" href="#將特定事件追蹤到遠端端點" aria-label="Permalink to &quot;將特定事件追蹤到遠端端點&quot;">​</a></h3><p>當您需要透過網路傳送事件資料時，可以使用追蹤到遠端端點。一旦啟動，追蹤到遠端端點會在指定的埠號啟動一個輕量型伺服器，並透過 Kotlin 伺服器傳送事件 (SSE) 傳送事件。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 建立一個代理程式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connectionConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgentFeatureServerConnectionConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> host, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> writer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TraceFeatureMessageRemoteWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connectionConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connectionConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 執行代理程式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 當區塊退出時，寫入器將自動關閉</span></span></code></pre></div><p>在客戶端，您可以使用 <code>FeatureMessageRemoteClient</code> 來接收事件並將其反序列化。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgentFeatureClientConnectionConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> host, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port, protocol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> URLProtocol.HTTP)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agentEvents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefinedFeatureEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientJob </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    FeatureMessageRemoteClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(connectionConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientConfig, scope </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> collectEventsJob </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            client.receivedMessages.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consumeAsFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 從伺服器收集事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                agentEvents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefinedFeatureEvent)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 在代理程式完成時停止收集事件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AIAgentFinishedEvent) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    cancel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        collectEventsJob.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">healthCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clientJob).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="api-文件" tabindex="-1">API 文件 <a class="header-anchor" href="#api-文件" aria-label="Permalink to &quot;API 文件&quot;">​</a></h2><p>追蹤功能遵循模組化架構，包含以下關鍵元件：</p><ol><li><a href="https://api.koog.ai/agents/agents-features/agents-features-trace/ai.koog.agents.features.tracing.feature/-tracing/index.html" target="_blank" rel="noreferrer">Tracing</a>：主要功能類別，用於攔截代理程式管線中的事件。</li><li><a href="https://api.koog.ai/agents/agents-features/agents-features-trace/ai.koog.agents.features.tracing.feature/-trace-feature-config/index.html" target="_blank" rel="noreferrer">TraceFeatureConfig</a>：用於自訂功能行為的設定類別。</li><li>訊息處理器：處理並輸出追蹤事件的元件： <ul><li><a href="https://api.koog.ai/agents/agents-features/agents-features-trace/ai.koog.agents.features.tracing.writer/-trace-feature-message-log-writer/index.html" target="_blank" rel="noreferrer">TraceFeatureMessageLogWriter</a>：將追蹤事件寫入紀錄器。</li><li><a href="https://api.koog.ai/agents/agents-features/agents-features-trace/ai.koog.agents.features.tracing.writer/-trace-feature-message-file-writer/index.html" target="_blank" rel="noreferrer">TraceFeatureMessageFileWriter</a>：將追蹤事件寫入檔案。</li><li><a href="https://api.koog.ai/agents/agents-features/agents-features-trace/ai.koog.agents.features.tracing.writer/-trace-feature-message-remote-writer/index.html" target="_blank" rel="noreferrer">TraceFeatureMessageRemoteWriter</a>：將追蹤事件傳送到遠端伺服器。</li></ul></li></ol><h2 id="常見問題與疑難排解" tabindex="-1">常見問題與疑難排解 <a class="header-anchor" href="#常見問題與疑難排解" aria-label="Permalink to &quot;常見問題與疑難排解&quot;">​</a></h2><p>以下部分包含與追蹤功能相關的常見問題和解答。</p><h3 id="如何僅追蹤代理程式執行的特定部分" tabindex="-1">如何僅追蹤代理程式執行的特定部分？ <a class="header-anchor" href="#如何僅追蹤代理程式執行的特定部分" aria-label="Permalink to &quot;如何僅追蹤代理程式執行的特定部分？&quot;">​</a></h3><p>使用 <code>messageFilter</code> 屬性來篩選事件。例如，若要僅追蹤節點執行：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 僅追蹤 LLM 呼叫</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeforeLLMCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AfterLLMCallEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="我可以使用多個訊息處理器嗎" tabindex="-1">我可以使用多個訊息處理器嗎？ <a class="header-anchor" href="#我可以使用多個訊息處理器嗎" aria-label="Permalink to &quot;我可以使用多個訊息處理器嗎？&quot;">​</a></h3><p>可以，您可以添加多個訊息處理器以同時追蹤到不同的目的地：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TraceFeatureMessageLogWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logger))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TraceFeatureMessageFileWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(outputPath, syncOpener))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TraceFeatureMessageRemoteWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(connectionConfig))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="如何建立自訂訊息處理器" tabindex="-1">如何建立自訂訊息處理器？ <a class="header-anchor" href="#如何建立自訂訊息處理器" aria-label="Permalink to &quot;如何建立自訂訊息處理器？&quot;">​</a></h3><p>實作 <code>FeatureMessageProcessor</code> 介面：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomTraceProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FeatureMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 處理器的目前開放狀態</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _isOpen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MutableStateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isOpen: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _isOpen.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asStateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FeatureMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 自訂處理邏輯</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (message) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AIAgentNodeExecutionStartEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 處理節點開始事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AfterLLMCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 處理 LLM 呼叫結束事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 處理其他事件類型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 關閉已建立的連接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用您的自訂處理器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomTraceProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關訊息處理器可以處理的現有事件類型的更多資訊，請參閱<a href="#predefined-event-types">預定義事件類型</a>。</p><h2 id="預定義事件類型" tabindex="-1">預定義事件類型 <a class="header-anchor" href="#預定義事件類型" aria-label="Permalink to &quot;預定義事件類型&quot;">​</a></h2><p>Koog 提供了可用於自訂訊息處理器的預定義事件類型。預定義事件可根據其相關實體分為多個類別：</p><ul><li><a href="#agent-events">代理程式事件</a></li><li><a href="#strategy-events">策略事件</a></li><li><a href="#node-events">節點事件</a></li><li><a href="#llm-call-events">LLM 呼叫事件</a></li><li><a href="#tool-call-events">工具呼叫事件</a></li></ul><h3 id="代理程式事件" tabindex="-1">代理程式事件 <a class="header-anchor" href="#代理程式事件" aria-label="Permalink to &quot;代理程式事件&quot;">​</a></h3><h4 id="aiagentstartedevent" tabindex="-1">AIAgentStartedEvent <a class="header-anchor" href="#aiagentstartedevent" aria-label="Permalink to &quot;AIAgentStartedEvent&quot;">​</a></h4><p>表示代理程式執行的開始。包含以下欄位：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料類型</th><th>必填</th><th>預設值</th><th>說明</th></tr></thead><tbody><tr><td><code>strategyName</code></td><td>String</td><td>是</td><td></td><td>代理程式應遵循的策略名稱。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>否</td><td><code>AIAgentStartedEvent</code></td><td>事件的識別碼。通常是事件類別的 <code>simpleName</code>。</td></tr></tbody></table><h4 id="aiagentfinishedevent" tabindex="-1">AIAgentFinishedEvent <a class="header-anchor" href="#aiagentfinishedevent" aria-label="Permalink to &quot;AIAgentFinishedEvent&quot;">​</a></h4><p>表示代理程式執行的結束。包含以下欄位：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料類型</th><th>必填</th><th>預設值</th><th>說明</th></tr></thead><tbody><tr><td><code>strategyName</code></td><td>String</td><td>是</td><td></td><td>代理程式遵循的策略名稱。</td></tr><tr><td><code>result</code></td><td>String</td><td>是</td><td></td><td>代理程式執行的結果。如果沒有結果，可以為 <code>null</code>。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>否</td><td><code>AIAgentFinishedEvent</code></td><td>事件的識別碼。通常是事件類別的 <code>simpleName</code>。</td></tr></tbody></table><h4 id="aiagentrunerrorevent" tabindex="-1">AIAgentRunErrorEvent <a class="header-anchor" href="#aiagentrunerrorevent" aria-label="Permalink to &quot;AIAgentRunErrorEvent&quot;">​</a></h4><p>表示代理程式執行期間發生錯誤。包含以下欄位：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料類型</th><th>必填</th><th>預設值</th><th>說明</th></tr></thead><tbody><tr><td><code>strategyName</code></td><td>String</td><td>是</td><td></td><td>代理程式遵循的策略名稱。</td></tr><tr><td><code>error</code></td><td>AIAgentError</td><td>是</td><td></td><td>代理程式執行期間發生的特定錯誤。有關更多資訊，請參閱 <a href="#aiagenterror">AIAgentError</a>。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>否</td><td><code>AIAgentRunErrorEvent</code></td><td>事件的識別碼。通常是事件類別的 <code>simpleName</code>。</td></tr></tbody></table><p><a id="aiagenterror"></a><code>AIAgentError</code> 類別提供了關於代理程式執行期間發生錯誤的更多詳細訊息。包含以下欄位：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料類型</th><th>必填</th><th>預設值</th><th>說明</th></tr></thead><tbody><tr><td><code>message</code></td><td>String</td><td>是</td><td></td><td>提供關於特定錯誤的更多詳細訊息。</td></tr><tr><td><code>stackTrace</code></td><td>String</td><td>是</td><td></td><td>直到最後執行程式碼的堆疊記錄集合。</td></tr><tr><td><code>cause</code></td><td>String</td><td>否</td><td>null</td><td>錯誤的原因，如果可用。</td></tr></tbody></table><h3 id="策略事件" tabindex="-1">策略事件 <a class="header-anchor" href="#策略事件" aria-label="Permalink to &quot;策略事件&quot;">​</a></h3><h4 id="aiagentstrategystartevent" tabindex="-1">AIAgentStrategyStartEvent <a class="header-anchor" href="#aiagentstrategystartevent" aria-label="Permalink to &quot;AIAgentStrategyStartEvent&quot;">​</a></h4><p>表示策略執行的開始。包含以下欄位：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料類型</th><th>必填</th><th>預設值</th><th>說明</th></tr></thead><tbody><tr><td><code>strategyName</code></td><td>String</td><td>是</td><td></td><td>策略的名稱。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>否</td><td><code>AIAgentStrategyStartEvent</code></td><td>事件的識別碼。通常是事件類別的 <code>simpleName</code>。</td></tr></tbody></table><h4 id="aiagentstrategyfinishedevent" tabindex="-1">AIAgentStrategyFinishedEvent <a class="header-anchor" href="#aiagentstrategyfinishedevent" aria-label="Permalink to &quot;AIAgentStrategyFinishedEvent&quot;">​</a></h4><p>表示策略執行的結束。包含以下欄位：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料類型</th><th>必填</th><th>預設值</th><th>說明</th></tr></thead><tbody><tr><td><code>strategyName</code></td><td>String</td><td>是</td><td></td><td>策略的名稱。</td></tr><tr><td><code>result</code></td><td>String</td><td>是</td><td></td><td>執行的結果。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>否</td><td><code>AIAgentStrategyFinishedEvent</code></td><td>事件的識別碼。通常是事件類別的 <code>simpleName</code>。</td></tr></tbody></table><h3 id="節點事件" tabindex="-1">節點事件 <a class="header-anchor" href="#節點事件" aria-label="Permalink to &quot;節點事件&quot;">​</a></h3><h4 id="aiagentnodeexecutionstartevent" tabindex="-1">AIAgentNodeExecutionStartEvent <a class="header-anchor" href="#aiagentnodeexecutionstartevent" aria-label="Permalink to &quot;AIAgentNodeExecutionStartEvent&quot;">​</a></h4><p>表示節點執行的開始。包含以下欄位：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料類型</th><th>必填</th><th>預設值</th><th>說明</th></tr></thead><tbody><tr><td><code>nodeName</code></td><td>String</td><td>是</td><td></td><td>開始執行的節點名稱。</td></tr><tr><td><code>input</code></td><td>String</td><td>是</td><td></td><td>節點的輸入值。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>否</td><td><code>AIAgentNodeExecutionStartEvent</code></td><td>事件的識別碼。通常是事件類別的 <code>simpleName</code>。</td></tr></tbody></table><h4 id="aiagentnodeexecutionendevent" tabindex="-1">AIAgentNodeExecutionEndEvent <a class="header-anchor" href="#aiagentnodeexecutionendevent" aria-label="Permalink to &quot;AIAgentNodeExecutionEndEvent&quot;">​</a></h4><p>表示節點執行的結束。包含以下欄位：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料類型</th><th>必填</th><th>預設值</th><th>說明</th></tr></thead><tbody><tr><td><code>nodeName</code></td><td>String</td><td>是</td><td></td><td>結束執行的節點名稱。</td></tr><tr><td><code>input</code></td><td>String</td><td>是</td><td></td><td>節點的輸入值。</td></tr><tr><td><code>output</code></td><td>String</td><td>是</td><td></td><td>節點產生的輸出值。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>否</td><td><code>AIAgentNodeExecutionEndEvent</code></td><td>事件的識別碼。通常是事件類別的 <code>simpleName</code>。</td></tr></tbody></table><h3 id="llm-呼叫事件" tabindex="-1">LLM 呼叫事件 <a class="header-anchor" href="#llm-呼叫事件" aria-label="Permalink to &quot;LLM 呼叫事件&quot;">​</a></h3><h4 id="llmcallstartevent" tabindex="-1">LLMCallStartEvent <a class="header-anchor" href="#llmcallstartevent" aria-label="Permalink to &quot;LLMCallStartEvent&quot;">​</a></h4><p>表示 LLM 呼叫的開始。包含以下欄位：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料類型</th><th>必填</th><th>預設值</th><th>說明</th></tr></thead><tbody><tr><td><code>prompt</code></td><td>Prompt</td><td>是</td><td></td><td>發送到模型的提示。有關更多資訊，請參閱 <a href="#prompt">Prompt</a>。</td></tr><tr><td><code>tools</code></td><td>List&lt;String&gt;</td><td>是</td><td></td><td>模型可以呼叫的工具列表。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>否</td><td><code>LLMCallStartEvent</code></td><td>事件的識別碼。通常是事件類別的 <code>simpleName</code>。</td></tr></tbody></table><p><a id="prompt"></a><code>Prompt</code> 類別表示提示的資料結構，由訊息列表、唯一識別碼以及用於語言模型設定的可選參數組成。包含以下欄位：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料類型</th><th>必填</th><th>預設值</th><th>說明</th></tr></thead><tbody><tr><td><code>messages</code></td><td>List&lt;Message&gt;</td><td>是</td><td></td><td>提示包含的訊息列表。</td></tr><tr><td><code>id</code></td><td>String</td><td>是</td><td></td><td>提示的唯一識別碼。</td></tr><tr><td><code>params</code></td><td>LLMParams</td><td>否</td><td>LLMParams()</td><td>控制 LLM 生成內容方式的設定。</td></tr></tbody></table><h4 id="llmcallendevent" tabindex="-1">LLMCallEndEvent <a class="header-anchor" href="#llmcallendevent" aria-label="Permalink to &quot;LLMCallEndEvent&quot;">​</a></h4><p>表示 LLM 呼叫的結束。包含以下欄位：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料類型</th><th>必填</th><th>預設值</th><th>說明</th></tr></thead><tbody><tr><td><code>responses</code></td><td>List&lt;Message.Response&gt;</td><td>是</td><td></td><td>模型返回的一或多個回應。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>否</td><td><code>LLMCallEndEvent</code></td><td>事件的識別碼。通常是事件類別的 <code>simpleName</code>。</td></tr></tbody></table><h3 id="工具呼叫事件" tabindex="-1">工具呼叫事件 <a class="header-anchor" href="#工具呼叫事件" aria-label="Permalink to &quot;工具呼叫事件&quot;">​</a></h3><h4 id="toolcallevent" tabindex="-1">ToolCallEvent <a class="header-anchor" href="#toolcallevent" aria-label="Permalink to &quot;ToolCallEvent&quot;">​</a></h4><p>表示模型呼叫工具的事件。包含以下欄位：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料類型</th><th>必填</th><th>預設值</th><th>說明</th></tr></thead><tbody><tr><td><code>toolName</code></td><td>String</td><td>是</td><td></td><td>工具的名稱。</td></tr><tr><td><code>toolArgs</code></td><td>Tool.Args</td><td>是</td><td></td><td>提供給工具的參數。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>否</td><td><code>ToolCallEvent</code></td><td>事件的識別碼。通常是事件類別的 <code>simpleName</code>。</td></tr></tbody></table><h4 id="toolvalidationerrorevent" tabindex="-1">ToolValidationErrorEvent <a class="header-anchor" href="#toolvalidationerrorevent" aria-label="Permalink to &quot;ToolValidationErrorEvent&quot;">​</a></h4><p>表示工具呼叫期間發生驗證錯誤。包含以下欄位：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料類型</th><th>必填</th><th>預設值</th><th>說明</th></tr></thead><tbody><tr><td><code>toolName</code></td><td>String</td><td>是</td><td></td><td>驗證失敗的工具名稱。</td></tr><tr><td><code>toolArgs</code></td><td>Tool.Args</td><td>是</td><td></td><td>提供給工具的參數。</td></tr><tr><td><code>errorMessage</code></td><td>String</td><td>是</td><td></td><td>驗證錯誤訊息。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>否</td><td><code>ToolValidationErrorEvent</code></td><td>事件的識別碼。通常是事件類別的 <code>simpleName</code>。</td></tr></tbody></table><h4 id="toolcallfailureevent" tabindex="-1">ToolCallFailureEvent <a class="header-anchor" href="#toolcallfailureevent" aria-label="Permalink to &quot;ToolCallFailureEvent&quot;">​</a></h4><p>表示呼叫工具失敗。包含以下欄位：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料類型</th><th>必填</th><th>預設值</th><th>說明</th></tr></thead><tbody><tr><td><code>toolName</code></td><td>String</td><td>是</td><td></td><td>工具的名稱。</td></tr><tr><td><code>toolArgs</code></td><td>Tool.Args</td><td>是</td><td></td><td>提供給工具的參數。</td></tr><tr><td><code>error</code></td><td>AIAgentError</td><td>是</td><td></td><td>嘗試呼叫工具時發生的特定錯誤。有關更多資訊，請參閱 <a href="#aiagenterror">AIAgentError</a>。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>否</td><td><code>ToolCallFailureEvent</code></td><td>事件的識別碼。通常是事件類別的 <code>simpleName</code>。</td></tr></tbody></table><h4 id="toolcallresultevent" tabindex="-1">ToolCallResultEvent <a class="header-anchor" href="#toolcallresultevent" aria-label="Permalink to &quot;ToolCallResultEvent&quot;">​</a></h4><p>表示成功的工具呼叫並返回結果。包含以下欄位：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料類型</th><th>必填</th><th>預設值</th><th>說明</th></tr></thead><tbody><tr><td><code>toolName</code></td><td>String</td><td>是</td><td></td><td>工具的名稱。</td></tr><tr><td><code>toolArgs</code></td><td>Tool.Args</td><td>是</td><td></td><td>提供給工具的參數。</td></tr><tr><td><code>result</code></td><td>ToolResult</td><td>是</td><td></td><td>工具呼叫的結果。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>否</td><td><code>ToolCallResultEvent</code></td><td>事件的識別碼。通常是事件類別的 <code>simpleName</code>。</td></tr></tbody></table>`,106)]))}const g=a(e,[["render",l]]);export{o as __pageData,g as default};
