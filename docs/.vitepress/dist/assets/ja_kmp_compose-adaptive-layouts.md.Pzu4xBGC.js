import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"アダプティブレイアウト","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-adaptive-layouts.md","filePath":"ja/kmp/compose-adaptive-layouts.md","lastUpdated":1755516278000}'),p={name:"ja/kmp/compose-adaptive-layouts.md"};function l(t,s,h,k,o,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="アダプティブレイアウト" tabindex="-1">アダプティブレイアウト <a class="header-anchor" href="#アダプティブレイアウト" aria-label="Permalink to &quot;アダプティブレイアウト&quot;">​</a></h1><p>すべての種類のデバイスで一貫したユーザーエクスペリエンスを提供するために、アプリのUIを異なる表示サイズ、向き、入力モードに適応させます。</p><h2 id="アダプティブレイアウトの設計" tabindex="-1">アダプティブレイアウトの設計 <a class="header-anchor" href="#アダプティブレイアウトの設計" aria-label="Permalink to &quot;アダプティブレイアウトの設計&quot;">​</a></h2><p>アダプティブレイアウトを設計する際は、以下の主要なガイドラインに従ってください。</p><ul><li>リスト-詳細、フィード、サポーティングペインといった<a href="https://developer.android.com/develop/ui/compose/layouts/adaptive/canonical-layouts" target="_blank" rel="noreferrer">カノニカルレイアウト</a>のパターンを優先します。</li><li>パディング、タイポグラフィ、その他のデザイン要素に共通のスタイルを再利用することで一貫性を保ちます。プラットフォーム固有のガイドラインに従いつつ、デバイス間でナビゲーションパターンの一貫性を維持します。</li><li>複雑なレイアウトを再利用可能なComposableに分割し、柔軟性とモジュール性を高めます。</li><li>画面密度と向きを調整します。</li></ul><h2 id="ウィンドウサイズクラスの使用" tabindex="-1">ウィンドウサイズクラスの使用 <a class="header-anchor" href="#ウィンドウサイズクラスの使用" aria-label="Permalink to &quot;ウィンドウサイズクラスの使用&quot;">​</a></h2><p>ウィンドウサイズクラスは、アダプティブレイアウトの設計、開発、テストを支援するために、異なる画面サイズを分類する事前定義されたしきい値であり、ブレークポイントとも呼ばれます。</p><p>ウィンドウサイズクラスは、アプリが利用できる表示領域を、幅と高さの両方でコンパクト、ミディアム、展開の3つのカテゴリに分類します。レイアウトを変更する際は、特に異なるブレークポイントのしきい値で、すべてのウィンドウサイズでのレイアウト動作をテストしてください。</p><p><code>WindowSizeClass</code> クラスを使用するには、モジュールの <code>build.gradle.kts</code> ファイルにある共通ソースセットに <code>material3.adaptive</code> の依存関係を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3.adaptive:adaptive:1.2.0-alpha05&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>WindowSizeClass</code> API を使用すると、利用可能な表示スペースに基づいてアプリのレイアウトを変更できます。たとえば、ウィンドウの高さに応じてトップアプリバーの可視性を管理できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    windowSizeClass: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WindowSizeClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> currentWindowAdaptiveInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().windowSizeClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // トップアプリバーを表示するかどうかを決定します</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showTopAppBar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowSizeClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isHeightAtLeastBreakpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WindowSizeClass.HEIGHT_DP_MEDIUM_LOWER_BOUND)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // バーの可視性を使用してUIを定義します</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MyScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        showTopAppBar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showTopAppBar,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="次にすること" tabindex="-1">次にすること <a class="header-anchor" href="#次にすること" aria-label="Permalink to &quot;次にすること&quot;">​</a></h2><p>アダプティブレイアウトについては、<a href="https://developer.android.com/develop/ui/compose/layouts/adaptive" target="_blank" rel="noreferrer">Jetpack Compose ドキュメント</a>で詳細を確認してください。</p>`,14)]))}const E=a(p,[["render",l]]);export{c as __pageData,E as default};
