import{_ as s,a,b as e,c as l}from"./chunks/compose-swingpanel-overlapping.BiVO7k80.js";import{_ as t,c as n,o,ag as p}from"./chunks/framework.Bksy39di.js";const y=JSON.parse('{"title":"Compose Multiplatform 1.6.0 有什麼新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/whats-new-compose-160.md","filePath":"zh-Hant/kmp/whats-new-compose-160.md","lastUpdated":1755516278000}'),r={name:"zh-Hant/kmp/whats-new-compose-160.md"};function h(k,i,d,c,E,g){return o(),n("div",null,i[0]||(i[0]=[p(`<h1 id="compose-multiplatform-1-6-0-有什麼新功能" tabindex="-1">Compose Multiplatform 1.6.0 有什麼新功能 <a class="header-anchor" href="#compose-multiplatform-1-6-0-有什麼新功能" aria-label="Permalink to &quot;Compose Multiplatform 1.6.0 有什麼新功能&quot;">​</a></h1><p>以下是 Compose Multiplatform 1.6.0 版本的重點：</p><ul><li><a href="#breaking-changes">破壞性變更</a></li><li><a href="#improved-resources-api-all-platforms">新增與改進的 Resources API</a></li><li><a href="#accessibility-support">iOS 輔助功能的基本支援</a></li><li><a href="#ui-testing-api-experimental-all-platforms">所有平台適用的 UI 測試 API</a></li><li><a href="#separate-platform-views-for-popups-dialogs-and-dropdowns-ios-desktop">彈出視窗、對話框和下拉選單的分離平台視圖</a>。</li><li><a href="#changes-from-jetpack-compose-and-material-3-all-platforms">來自 Jetpack Compose 和 Material 3 的合併變更</a></li><li><a href="#kotlin-wasm-artifacts-available-in-stable-versions-of-the-framework">穩定版本中可用的 Kotlin/Wasm 元件</a></li><li><a href="#known-issues-missing-dependencies">已知問題：遺失的依賴項</a></li></ul><h2 id="依賴項" tabindex="-1">依賴項 <a class="header-anchor" href="#依賴項" aria-label="Permalink to &quot;依賴項&quot;">​</a></h2><p>此版本的 Compose Multiplatform 基於以下 Jetpack Compose 函式庫：</p><ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-compiler#1.5.8" target="_blank" rel="noreferrer">Compiler 1.5.8</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.6.1" target="_blank" rel="noreferrer">Runtime 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.6.1" target="_blank" rel="noreferrer">UI 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.6.1" target="_blank" rel="noreferrer">Foundation 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.6.1" target="_blank" rel="noreferrer">Material 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.2.0" target="_blank" rel="noreferrer">Material3 1.2.0</a></li></ul><h2 id="破壞性變更" tabindex="-1">破壞性變更 <a class="header-anchor" href="#破壞性變更" aria-label="Permalink to &quot;破壞性變更&quot;">​</a></h2><h3 id="預設情況下-設定-lineheight-的文字會裁切填補" tabindex="-1">預設情況下，設定 <code>lineHeight</code> 的文字會裁切填補 <a class="header-anchor" href="#預設情況下-設定-lineheight-的文字會裁切填補" aria-label="Permalink to &quot;預設情況下，設定 \`lineHeight\` 的文字會裁切填補&quot;">​</a></h3><p>隨著對 <a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/LineHeightStyle.Trim" target="_blank" rel="noreferrer">LineHeightStyle.Trim</a> 的支援， Compose Multiplatform 在文字填補裁切方式上與 Android 保持一致。 詳情請參閱 <a href="https://github.com/JetBrains/compose-multiplatform-core/pull/897" target="_blank" rel="noreferrer">拉取請求</a>。</p><p>這與 <code>compose.material</code> 來自 <a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.6.0-alpha01" target="_blank" rel="noreferrer">1.6.0-alpha01 版本</a> 的變更一致：</p><ul><li><code>includeFontPadding</code> 參數在 Android 上預設為 <code>false</code>。 有關此變更的更深入理解，請參閱 <a href="https://github.com/JetBrains/compose-multiplatform/issues/2477#issuecomment-1825716543" target="_blank" rel="noreferrer">關於在 Compose Multiplatform 中不實作此標誌的討論</a>。</li><li>預設的行高樣式已變更為 <code>Trim.None</code> 和 <code>Alignment.Center</code>。Compose Multiplatform 現在支援 <code>LineHeightStyle.Trim</code> 並將 <code>Trim.None</code> 作為預設值實作。</li><li>已將明確的 <code>lineHeight</code> 添加到 <code>Typography</code> 的 <code>TextStyle</code> 中，這導致了 <a href="#using-fontsize-in-materialtheme-requires-lineheight">下一個破壞性變更</a>。</li></ul><h3 id="在-materialtheme-中使用-fontsize-需要-lineheight" tabindex="-1">在 MaterialTheme 中使用 <code>fontSize</code> 需要 <code>lineHeight</code> <a class="header-anchor" href="#在-materialtheme-中使用-fontsize-需要-lineheight" aria-label="Permalink to &quot;在 MaterialTheme 中使用 \`fontSize\` 需要 \`lineHeight\`&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>這僅影響 <code>material</code> 元件。<code>material3</code> 已有此限制。</p></div><p>如果您在 <code>MaterialTheme</code> 中為 <code>Text</code> 元件設定 <code>fontSize</code> 屬性但未包含 <code>lineHeight</code>，則實際行高將不會修改以符合字體。現在，您必須在每次設定相應 <code>fontSize</code> 時明確指定 <code>lineHeight</code> 屬性。</p><p>Jetpack Compose 現在<a href="https://issuetracker.google.com/issues/321872412" target="_blank" rel="noreferrer">建議</a>不要直接設定字體大小：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>為了支援非標準文字大小，我們鼓勵用戶遵循 Material 設計系統並使用不同的 <a href="https://m2.material.io/design/typography/the-type-system.html#type-scale" target="_blank" rel="noreferrer">排版比例</a>， 而不是直接更改字體大小。或者，用戶可以像這樣覆蓋行高： <code>style = LocalTextStyle.current.copy(lineHeight = TextUnit.Unspecified)</code>，或者完全建立自訂的 <code>Typography</code>。</p></div><h3 id="資源組織的新方法" tabindex="-1">資源組織的新方法 <a class="header-anchor" href="#資源組織的新方法" aria-label="Permalink to &quot;資源組織的新方法&quot;">​</a></h3><p>如果您在 Compose Multiplatform 1.6.0 的預覽版本中使用了資源 API，請熟悉 <a href="./compose-multiplatform-resources">目前版本的說明文件</a>：1.6.0-beta01 更改了資源檔案在專案資料夾中的儲存方式，以便專案程式碼可以存取它們。</p><h2 id="跨平台" tabindex="-1">跨平台 <a class="header-anchor" href="#跨平台" aria-label="Permalink to &quot;跨平台&quot;">​</a></h2><h3 id="改進的資源-api-所有平台" tabindex="-1">改進的資源 API (所有平台) <a class="header-anchor" href="#改進的資源-api-所有平台" aria-label="Permalink to &quot;改進的資源 API (所有平台)&quot;">​</a></h3><p>新的實驗性 API 新增了對字串和字體的支援，並允許您更方便地在通用 Kotlin 中共用和存取資源：</p><ul><li>資源可以根據它們設計的特定設定或約束進行組織，支援： <ul><li>語系</li><li>圖像解析度</li><li>深色和淺色主題</li></ul></li><li>Compose Multiplatform 現在為每個專案生成一個 <code>Res</code> 物件，以提供直接的資源存取。</li></ul><p>如需更深入地了解資源限定符，以及對新資源 API 的更深入概述， 請參閱 <a href="./compose-multiplatform-resources">圖像和資源</a>。</p><h3 id="ui-測試-api-實驗性-所有平台" tabindex="-1">UI 測試 API (實驗性，所有平台) <a class="header-anchor" href="#ui-測試-api-實驗性-所有平台" aria-label="Permalink to &quot;UI 測試 API (實驗性，所有平台)&quot;">​</a></h3><p>Compose Multiplatform 的 UI 測試實驗性 API，先前已適用於桌面和 Android， 現在支援所有平台。您可以編寫和執行通用測試，以驗證應用程式 UI 在框架支援的平台上的行為。此 API 使用與 Jetpack Compose 相同的查找器、斷言、動作和匹配器。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>僅桌面專案支援基於 JUnit 的測試。</p></div><p>有關設定說明和測試範例，請參閱 <a href="./compose-test">測試 Compose Multiplatform UI</a>。</p><h3 id="來自-jetpack-compose-和-material-3-的變更-所有平台" tabindex="-1">來自 Jetpack Compose 和 Material 3 的變更 (所有平台) <a class="header-anchor" href="#來自-jetpack-compose-和-material-3-的變更-所有平台" aria-label="Permalink to &quot;來自 Jetpack Compose 和 Material 3 的變更 (所有平台)&quot;">​</a></h3><h4 id="jetpack-compose-1-6-1" tabindex="-1">Jetpack Compose 1.6.1 <a class="header-anchor" href="#jetpack-compose-1-6-1" aria-label="Permalink to &quot;Jetpack Compose 1.6.1&quot;">​</a></h4><p>合併最新版本的 Jetpack Compose 對所有平台的效能產生正面影響。有關詳細資訊， 請參閱 <a href="https://android-developers.googleblog.com/2024/01/whats-new-in-jetpack-compose-january-24-release.html" target="_blank" rel="noreferrer">Android 開發者部落格上的公告</a>。</p><p>此版本的其他值得注意的功能：</p><ul><li>預設字體填補的變更僅對 Android 目標生效。但是，請務必考慮到此變更的<a href="#using-fontsize-in-materialtheme-requires-lineheight">副作用</a>。</li><li>鼠標選擇已在 Compose Multiplatform 中支援其他目標。在 1.6.0 中，這也包括 Android。</li></ul><p>Jetpack Compose 功能尚未移植到 Compose Multiplatform：</p><ul><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4218" target="_blank" rel="noreferrer">BasicTextField2</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4305" target="_blank" rel="noreferrer">支援非線性字體縮放</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4236" target="_blank" rel="noreferrer">MultiParagraph.fillBoundingBoxes</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4235" target="_blank" rel="noreferrer">多平台拖放</a>。目前僅在 Android 上有效。 在桌面上，您可以使用現有的 API：<code>Modifier.onExternalDrag</code>。</li></ul><p>JetBrains 團隊正在努力在即將推出的 Compose Multiplatform 版本中採用這些功能。</p><h4 id="compose-material-3-1-2-0" tabindex="-1">Compose Material 3 1.2.0 <a class="header-anchor" href="#compose-material-3-1-2-0" aria-label="Permalink to &quot;Compose Material 3 1.2.0&quot;">​</a></h4><p>發行亮點：</p><ul><li>一個新的實驗性元件 <code>Segmented Button</code>，具有單選和多選功能。</li><li>擴展的顏色集，提供更多表面選項，以便更輕鬆地強調 UI 中的資訊。 <ul><li>實作說明：<code>ColorScheme</code> 物件現在是不可變的。如果您目前的程式碼直接修改 <code>ColorScheme</code> 中的顏色， 您現在需要使用 <a href="https://developer.android.com/reference/kotlin/androidx/compose/material3/ColorScheme#copy(androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color)" target="_blank" rel="noreferrer">copy</a> 方法來更改顏色。</li><li>現在有多個表面顏色和表面容器選項，而不是單一的表面值，以實現更靈活的色彩管理。</li></ul></li></ul><p>有關 Material 3 變更的更多詳細資訊，請參閱 <a href="https://material.io/blog/material-3-compose-1-2" target="_blank" rel="noreferrer">Material Design 部落格上的發行文章</a>。</p><h3 id="彈出視窗、對話框和下拉選單的分離平台視圖-ios、桌面" tabindex="-1">彈出視窗、對話框和下拉選單的分離平台視圖 (iOS、桌面) <a class="header-anchor" href="#彈出視窗、對話框和下拉選單的分離平台視圖-ios、桌面" aria-label="Permalink to &quot;彈出視窗、對話框和下拉選單的分離平台視圖 (iOS、桌面)&quot;">​</a></h3><p>有時，彈出元素（例如，工具提示和下拉選單）不應受初始可組合畫布或應用程式視窗的限制，這很重要。如果可組合視圖未佔據整個螢幕但需要產生警示對話框，這就變得特別相關。在 1.6.0 中，有一種可靠的方法可以實現這一點。</p><p>請注意，彈出視窗和對話框仍無法在其自身邊界之外繪製任何東西（例如，最頂層容器的陰影）。</p><h4 id="ios-穩定版" tabindex="-1">iOS (穩定版) <a class="header-anchor" href="#ios-穩定版" aria-label="Permalink to &quot;iOS (穩定版)&quot;">​</a></h4><p>在 iOS 上，此功能預設啟用。 要切換回舊行為，請將 <code>platformLayers</code> 參數設定為 <code>false</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        platformLayers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // your Compose code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="桌面-實驗性" tabindex="-1">桌面 (實驗性) <a class="header-anchor" href="#桌面-實驗性" aria-label="Permalink to &quot;桌面 (實驗性)&quot;">​</a></h4><p>要在桌面上使用此功能，請設定 <code>compose.layers.type</code> 系統屬性。支援的值：</p><ul><li><code>WINDOW</code>，用於將 <code>Popup</code> 和 <code>Dialog</code> 元件建立為單獨的無裝飾視窗。</li><li><code>COMPONENT</code>，用於將 <code>Popup</code> 或 <code>Dialog</code> 建立為同一視窗中的獨立 Swing 元件。它僅適用於離屏渲染， 且 <code>compose.swing.render.on.graphics</code> 設定為 <code>true</code>（請參閱 1.5.0 Compose Multiplatform 發行說明中的<a href="https://blog.jetbrains.com/kotlin/2023/08/compose-multiplatform-1-5-0-release/#enhanced-swing-interop" target="_blank" rel="noreferrer">增強型 Swing 互操作性</a>部分）。請注意，離屏渲染僅適用於 <code>ComposePanel</code> 元件，不適用於全視窗應用程式。</li></ul><p>使用 <code>COMPONENT</code> 屬性的程式碼範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalComposeUiApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SwingUtilities.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invokeLater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose.swing.render.on.graphics&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose.layers.type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;COMPONENT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.defaultCloseOperation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WindowConstants.EXIT_ON_CLOSE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentPane </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JLayeredPane</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentPane.layout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> composePanel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposePanel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    composePanel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBounds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    composePanel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ComposeContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    composePanel.windowContainer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentPane  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use the full window for dialogs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentPane.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(composePanel)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.contentPane.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contentPane)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.isVisible </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposeContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.Green)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Dialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onDismissRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.Yellow))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>Dialog</code>（黃色）被完整繪製，無論父 <code>ComposePanel</code>（綠色）的邊界如何：</p><p><img src="`+s+`" alt="Dialog outside the bounds of the parent panel" width="700"></p><h3 id="支援文字裝飾線條樣式-ios、桌面、網頁" tabindex="-1">支援文字裝飾線條樣式 (iOS、桌面、網頁) <a class="header-anchor" href="#支援文字裝飾線條樣式-ios、桌面、網頁" aria-label="Permalink to &quot;支援文字裝飾線條樣式 (iOS、桌面、網頁)&quot;">​</a></h3><p>Compose Multiplatform 現在允許使用 <code>PlatformTextStyle</code> 類別設定文字的底線樣式。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此類別在通用原始碼集中不可用，需要在平台特定程式碼中使用。</p></div><p>設定點狀底線樣式的範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;Hello, Compose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  style </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    textDecoration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TextDecoration.Underline,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    platformStyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlatformTextStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      textDecorationLineStyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TextDecorationLineStyle.Dotted</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>您可以使用實線、雙寬實線、點狀、虛線和波浪線樣式。請參閱 <a href="https://github.com/JetBrains/compose-multiplatform-core/blob/jb-main/compose/ui/ui-text/src/skikoMain/kotlin/androidx/compose/ui/text/TextDecorationLineStyle.kt#L21" target="_blank" rel="noreferrer">原始碼</a> 中所有可用的選項。</p><h3 id="存取系統上安裝的字體-ios、桌面、網頁" tabindex="-1">存取系統上安裝的字體 (iOS、桌面、網頁) <a class="header-anchor" href="#存取系統上安裝的字體-ios、桌面、網頁" aria-label="Permalink to &quot;存取系統上安裝的字體 (iOS、桌面、網頁)&quot;">​</a></h3><p>您現在可以從您的 Compose Multiplatform 應用程式存取系統上安裝的字體：使用 <code>SystemFont</code> 類別載入具有適當字體樣式和字體粗細的字體：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.ui.text.platform.SystemFont</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Menlo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, weight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 700</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Times New Roman&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, FontWeight.Bold))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Webdings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>在桌面上，您可以僅透過指定字體系列名稱來使用 <code>FontFamily</code> 函數載入所有可能的字體樣式（請參閱 <a href="https://github.com/JetBrains/compose-multiplatform-core/blob/release/1.6.0/compose/desktop/desktop/samples/src/jvmMain/kotlin/androidx/compose/desktop/examples/fonts/Fonts.jvm.kt" target="_blank" rel="noreferrer">程式碼範例</a> 以獲取詳盡的範例）：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Menlo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="輔助功能支援" tabindex="-1">輔助功能支援 <a class="header-anchor" href="#輔助功能支援" aria-label="Permalink to &quot;輔助功能支援&quot;">​</a></h3><p>適用於 iOS 的 Compose Multiplatform 現在允許身心障礙人士以與原生 iOS UI 相同程度的便利性與 Compose UI 互動：</p><ul><li>螢幕閱讀器和 VoiceOver 可以存取 Compose UI 的內容。</li><li>Compose UI 支援與原生 UI 相同的導航和互動手勢。</li></ul><p>這也意味著您可以將 Compose Multiplatform 語義資料提供給輔助功能服務和 XCTest 框架。</p><p>有關實作和自訂 API 的詳細資訊，請參閱 <a href="./compose-ios-accessibility">iOS 輔助功能支援</a>。</p><h3 id="變更可組合視圖的不透明度" tabindex="-1">變更可組合視圖的不透明度 <a class="header-anchor" href="#變更可組合視圖的不透明度" aria-label="Permalink to &quot;變更可組合視圖的不透明度&quot;">​</a></h3><p><code>ComposeUIViewController</code> 類別現在多了一個設定選項，可以將視圖背景的不透明度變更為透明。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>透明背景會對效能產生負面影響，因為它會導致額外的混合步驟。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.opaque </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>透明背景可以幫助您實現的範例：</p><p><img src="`+a+`" alt="Compose opaque = false demo" width="700"></p><h3 id="透過雙擊和三擊在-selectioncontainer-中選取文字" tabindex="-1">透過雙擊和三擊在 SelectionContainer 中選取文字 <a class="header-anchor" href="#透過雙擊和三擊在-selectioncontainer-中選取文字" aria-label="Permalink to &quot;透過雙擊和三擊在 SelectionContainer 中選取文字&quot;">​</a></h3><p>先前，適用於 iOS 的 Compose Multiplatform 僅允許使用者在文字輸入欄位中透過多點觸控來選取文字。 現在，雙擊和三擊手勢也適用於選取 <code>SelectionContainer</code> 中 <code>Text</code> 元件顯示的文字。</p><h3 id="與-uiviewcontroller-的互操作" tabindex="-1">與 UIViewController 的互操作 <a class="header-anchor" href="#與-uiviewcontroller-的互操作" aria-label="Permalink to &quot;與 UIViewController 的互操作&quot;">​</a></h3><p>一些未實作為 <code>UIView</code> 的原生 API，例如 <code>UITabBarController</code> 或 <code>UINavigationController</code>， 無法使用<a href="./compose-uikit-integration">現有的互操作機制</a>嵌入到 Compose Multiplatform UI 中。</p><p>現在，Compose Multiplatform 實作了 <code>UIKitViewController</code> 函數，允許您將原生 iOS 視圖控制器嵌入到您的 Compose UI 中。</p><h3 id="文字欄位中透過長按-單擊實現原生游標行為" tabindex="-1">文字欄位中透過長按/單擊實現原生游標行為 <a class="header-anchor" href="#文字欄位中透過長按-單擊實現原生游標行為" aria-label="Permalink to &quot;文字欄位中透過長按/單擊實現原生游標行為&quot;">​</a></h3><p>Compose Multiplatform 現在更接近原生 iOS 中文字欄位游標的行為：</p><ul><li>單擊文字欄位後游標的位置將更精確地確定。</li><li>在文字欄位中長按並拖曳會移動游標，而不是像 Android 上那樣進入選取模式。</li></ul><h2 id="桌面" tabindex="-1">桌面 <a class="header-anchor" href="#桌面" aria-label="Permalink to &quot;桌面&quot;">​</a></h2><h3 id="實驗性支援改進的互操作混合" tabindex="-1">實驗性支援改進的互操作混合 <a class="header-anchor" href="#實驗性支援改進的互操作混合" aria-label="Permalink to &quot;實驗性支援改進的互操作混合&quot;">​</a></h3><p>過去，使用 <code>SwingPanel</code> 包裝器實作的互操作視圖始終是矩形的，並且始終 位於前景，在任何 Compose Multiplatform 元件之上。這使得任何彈出元素 （下拉選單、浮動通知）的使用都充滿挑戰。透過新的實作，此問題已解決， 您現在可以依賴 Swing 處理以下使用情境：</p><ul><li><p>裁剪。您不再受矩形形狀的限制：裁剪和陰影修飾符現在可以正確地與 SwingPanel 一起使用。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Flag necessary to enable the experimental blending </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose.interop.blending&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SwingPanel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RoundedCornerShape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>您可以在左側看到在沒有此功能的情況下 <code>JButton</code> 被裁剪的方式，以及在右側看到實驗性混合：</p><p><img src="`+e+'" alt="Correct clipping with SwingPanel"></p></li><li><p>重疊。可以在 <code>SwingPanel</code> 之上繪製任何 Compose Multiplatform 內容並像往常一樣與其互動。 在這裡，「Snackbar」位於帶有可點擊「<strong>OK</strong>」按鈕的 Swing 面板之上：</p><p><img src="'+l+`" alt="Correct overlapping with SwingPanel"></p></li></ul><p>請參閱 <a href="https://github.com/JetBrains/compose-multiplatform-core/pull/915" target="_blank" rel="noreferrer">拉取請求的說明</a> 中已知限制和更多詳細資訊。</p><h2 id="網頁" tabindex="-1">網頁 <a class="header-anchor" href="#網頁" aria-label="Permalink to &quot;網頁&quot;">​</a></h2><h3 id="kotlin-wasm-元件在框架穩定版本中可用" tabindex="-1">Kotlin/Wasm 元件在框架穩定版本中可用 <a class="header-anchor" href="#kotlin-wasm-元件在框架穩定版本中可用" aria-label="Permalink to &quot;Kotlin/Wasm 元件在框架穩定版本中可用&quot;">​</a></h3><p>Compose Multiplatform 的穩定版本現在支援 Kotlin/Wasm 目標。在您切換到 1.6.0 後，您不需要 在您的依賴項列表中指定特定的 <code>dev-wasm</code> 版本的 <code>compose-ui</code> 函式庫。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>要建構一個帶有 Wasm 目標的 Compose Multiplatform 專案，您需要安裝 Kotlin 1.9.22 及更高版本。</p></div><h2 id="已知問題-遺失的依賴項" tabindex="-1">已知問題：遺失的依賴項 <a class="header-anchor" href="#已知問題-遺失的依賴項" aria-label="Permalink to &quot;已知問題：遺失的依賴項&quot;">​</a></h2><p>在預設專案設定下可能會遺失幾個函式庫：</p><ul><li><p><code>org.jetbrains.compose.annotation-internal:annotation</code> 或 <code>org.jetbrains.compose.collection-internal:collection</code></p><p>如果某個函式庫依賴於與 1.6.0 不二進位兼容的 Compose Multiplatform 1.6.0-beta02，則它們可能遺失。 要找出是哪個函式庫，請執行以下命令（將 <code>shared</code> 替換為您的主模組名稱）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shared:dependencies</span></span></code></pre></div><p>將該函式庫降級到依賴 Compose Multiplatform 1.5.12 的版本，或者要求函式庫作者將其升級到 Compose Multiplatform 1.6.0。</p></li><li><p><code>androidx.annotation:annotation:...</code> 或 <code>androidx.collection:collection:...</code></p><p>Compose Multiplatform 1.6.0 依賴於僅在 Google Maven 儲存庫中可用的 <a href="https://developer.android.com/jetpack/androidx/releases/collection" target="_blank" rel="noreferrer">collection</a> 和 <a href="https://developer.android.com/jetpack/androidx/releases/annotation" target="_blank" rel="noreferrer">annotation</a> 函式庫。</p><p>要使此儲存庫可用於您的專案，請將以下行添加到模組的 <code>build.gradle.kts</code> 檔案中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    google</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul>`,95)]))}const C=t(r,[["render",h]]);export{y as __pageData,C as default};
