import{_ as h,C as r,c,o as g,j as i,G as s,ag as k,a as e,w as t}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-websocket-serialization.md","filePath":"ktor/server-websocket-serialization.md","lastUpdated":1755457140000}'),u={name:"ktor/server-websocket-serialization.md"};function E(y,a,v,b,_,C){const d=r("show-structure"),p=r("tldr"),o=r("code-block"),n=r("TabItem"),l=r("Tabs");return g(),c("div",null,[a[7]||(a[7]=i("h1",{id:"ktor-服务器中的-websockets-序列化",tabindex:"-1"},[e("Ktor 服务器中的 WebSockets 序列化 "),i("a",{class:"header-anchor",href:"#ktor-服务器中的-websockets-序列化","aria-label":'Permalink to "Ktor 服务器中的 WebSockets 序列化"'},"​")],-1)),s(d,{for:"chapter",depth:"2"}),s(p,null,{default:t(()=>a[0]||(a[0]=[i("p",null,[i("b",null,"代码示例"),e(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/server-websockets-serialization"}," server-websockets-serialization ")],-1)])),_:1}),a[8]||(a[8]=k('<p>与 <a href="./server-serialization">ContentNegotiation</a> 插件类似，WebSockets 允许你以特定格式序列化/反序列化文本帧。Ktor 开箱即用地支持以下格式：JSON、XML、CBOR 和 ProtoBuf。</p><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>在使用 <code>kotlinx.serialization</code> 转换器之前，你需要按照 <a href="https://github.com/Kotlin/kotlinx.serialization#setup" target="_blank" rel="noreferrer">Setup</a> 部分的描述添加 Kotlin 序列化插件。</p><h4 id="add_json_dependency" tabindex="-1">JSON <a class="header-anchor" href="#add_json_dependency" aria-label="Permalink to &quot;JSON {id=&quot;add_json_dependency&quot;}&quot;">​</a></h4><p>要序列化/反序列化 JSON 数据，你可以选择以下库之一：<code>kotlinx.serialization</code>、<code>Gson</code> 或 <code>Jackson</code>。</p>',5)),s(l,{group:"json-libraries"},{default:t(()=>[s(n,{title:"kotlinx.serialization","group-key":"kotlinx"},{default:t(()=>[a[1]||(a[1]=i("p",null,[e("在构建脚本中添加 "),i("code",null,"ktor-serialization-kotlinx-json"),e(" 构件：")],-1)),s(l,{group:"languages"},{default:t(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[s(o,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-json:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[s(o,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:t(()=>[s(o,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-json-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1}),s(n,{title:"Gson","group-key":"gson"},{default:t(()=>[a[2]||(a[2]=i("p",null,[e("在构建脚本中添加 "),i("code",null,"ktor-serialization-gson"),e(" 构件：")],-1)),s(l,{group:"languages"},{default:t(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[s(o,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-gson:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[s(o,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-gson:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:t(()=>[s(o,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-gson-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1}),s(n,{title:"Jackson","group-key":"jackson"},{default:t(()=>[a[3]||(a[3]=i("p",null,[e("在构建脚本中添加 "),i("code",null,"ktor-serialization-jackson"),e(" 构件：")],-1)),s(l,{group:"languages"},{default:t(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[s(o,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-jackson:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[s(o,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-jackson:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:t(()=>[s(o,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-jackson-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1})]),_:1}),a[9]||(a[9]=i("h4",{id:"add_xml_dependency",tabindex:"-1"},[e("XML "),i("a",{class:"header-anchor",href:"#add_xml_dependency","aria-label":'Permalink to "XML {id="add_xml_dependency"}"'},"​")],-1)),a[10]||(a[10]=i("p",null,[e("要序列化/反序列化 XML，请在构建脚本中添加 "),i("code",null,"ktor-serialization-kotlinx-xml"),e("：")],-1)),s(l,{group:"languages"},{default:t(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[s(o,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-xml:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[s(o,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-xml:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:t(()=>[s(o,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-xml-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),a[11]||(a[11]=k('<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>请注意，XML 序列化<a href="https://github.com/pdvrieze/xmlutil/issues/83" target="_blank" rel="noreferrer">不支持 <code>jsNode</code> 目标</a>。</p></div><h4 id="add_cbor_dependency" tabindex="-1">CBOR <a class="header-anchor" href="#add_cbor_dependency" aria-label="Permalink to &quot;CBOR {id=&quot;add_cbor_dependency&quot;}&quot;">​</a></h4><p>要序列化/反序列化 CBOR，请在构建脚本中添加 <code>ktor-serialization-kotlinx-cbor</code>：</p>',3)),s(l,{group:"languages"},{default:t(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[s(o,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[s(o,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:t(()=>[s(o,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-cbor-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),a[12]||(a[12]=i("h4",{id:"add_protobuf_dependency",tabindex:"-1"},[e("ProtoBuf "),i("a",{class:"header-anchor",href:"#add_protobuf_dependency","aria-label":'Permalink to "ProtoBuf {id="add_protobuf_dependency"}"'},"​")],-1)),a[13]||(a[13]=i("p",null,[e("要序列化/反序列化 ProtoBuf，请在构建脚本中添加 "),i("code",null,"ktor-serialization-kotlinx-protobuf"),e("：")],-1)),s(l,{group:"languages"},{default:t(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[s(o,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[s(o,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:t(()=>[s(o,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-protobuf-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),a[14]||(a[14]=i("h2",{id:"configure_serializer",tabindex:"-1"},[e("配置序列化器 "),i("a",{class:"header-anchor",href:"#configure_serializer","aria-label":'Permalink to "配置序列化器 {id="configure_serializer"}"'},"​")],-1)),a[15]||(a[15]=i("h3",{id:"register_json",tabindex:"-1"},[e("JSON 序列化器 "),i("a",{class:"header-anchor",href:"#register_json","aria-label":'Permalink to "JSON 序列化器 {id="register_json"}"'},"​")],-1)),s(l,{group:"json-libraries"},{default:t(()=>[s(n,{title:"kotlinx.serialization","group-key":"kotlinx"},{default:t(()=>a[4]||(a[4]=[i("p",null,[e("要在 WebSockets "),i("a",{href:"./server-websockets#configure"},"配置"),e("中注册 JSON 序列化器，请创建带有 "),i("code",null,"Json"),e(" 参数的 "),i("code",null,"KotlinxWebsocketSerializationConverter"),e(" 实例，并将此实例赋值给 "),i("code",null,"contentConverter"),e(" 属性：")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.kotlinx."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," kotlinx.serialization.json."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),e(`
`),i("span",{class:"line"}),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(WebSockets) {")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    contentConverter "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," KotlinxWebsocketSerializationConverter"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Json)")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(n,{title:"Gson","group-key":"gson"},{default:t(()=>a[5]||(a[5]=[i("p",null,[e("要注册 "),i("code",null,"Gson"),e(" 序列化器，请将 "),i("code",null,"GsonWebsocketContentConverter"),e(" 赋值给 "),i("code",null,"contentConverter"),e(" 属性：")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.gson."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),e(`
`),i("span",{class:"line"}),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(WebSockets) {")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    contentConverter "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," GsonWebsocketContentConverter"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(n,{title:"Jackson","group-key":"jackson"},{default:t(()=>a[6]||(a[6]=[i("p",null,[e("要注册 "),i("code",null,"Jackson"),e(" 序列化器，请将 "),i("code",null,"JacksonWebsocketContentConverter"),e(" 赋值给 "),i("code",null,"contentConverter"),e(" 属性：")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.jackson."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),e(`
`),i("span",{class:"line"}),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(WebSockets) {")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    contentConverter "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," JacksonWebsocketContentConverter"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[16]||(a[16]=k(`<h3 id="register_xml" tabindex="-1">XML 序列化器 <a class="header-anchor" href="#register_xml" aria-label="Permalink to &quot;XML 序列化器 {id=&quot;register_xml&quot;}&quot;">​</a></h3><p>要在 WebSockets <a href="./server-websockets#configure">配置</a>中注册 XML 序列化器，请创建带有 <code>XML</code> 参数的 <code>KotlinxWebsocketSerializationConverter</code> 实例，并将此实例赋值给 <code>contentConverter</code> 属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nl.adaptivity.xmlutil.serialization.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebSockets) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentConverter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KotlinxWebsocketSerializationConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(XML)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="register_cbor" tabindex="-1">CBOR 序列化器 <a class="header-anchor" href="#register_cbor" aria-label="Permalink to &quot;CBOR 序列化器 {id=&quot;register_cbor&quot;}&quot;">​</a></h3><p>要在 WebSockets <a href="./server-websockets#configure">配置</a>中注册 CBOR 序列化器，请创建带有 <code>Cbor</code> 参数的 <code>KotlinxWebsocketSerializationConverter</code> 实例，并将此实例赋值给 <code>contentConverter</code> 属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.cbor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebSockets) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentConverter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KotlinxWebsocketSerializationConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Cbor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="register_protobuf" tabindex="-1">ProtoBuf 序列化器 <a class="header-anchor" href="#register_protobuf" aria-label="Permalink to &quot;ProtoBuf 序列化器 {id=&quot;register_protobuf&quot;}&quot;">​</a></h3><p>要在 WebSockets <a href="./server-websockets#configure">配置</a>中注册 ProtoBuf 序列化器，请创建带有 <code>ProtoBuf</code> 参数的 <code>KotlinxWebsocketSerializationConverter</code> 实例，并将此实例赋值给 <code>contentConverter</code> 属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.protobuf.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebSockets) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentConverter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KotlinxWebsocketSerializationConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ProtoBuf)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="receive_send_data" tabindex="-1">接收和发送数据 <a class="header-anchor" href="#receive_send_data" aria-label="Permalink to &quot;接收和发送数据 {id=&quot;receive_send_data&quot;}&quot;">​</a></h2><h3 id="create_data_class" tabindex="-1">创建数据类 <a class="header-anchor" href="#create_data_class" aria-label="Permalink to &quot;创建数据类 {id=&quot;create_data_class&quot;}&quot;">​</a></h3><p>要将帧序列化为对象或从对象反序列化帧，你需要创建一个数据类，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果你使用 <code>kotlinx.serialization</code>，请确保此数据类具有 <code>@Serializable</code> 注解：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="receive_data" tabindex="-1">接收数据 <a class="header-anchor" href="#receive_data" aria-label="Permalink to &quot;接收数据 {id=&quot;receive_data&quot;}&quot;">​</a></h3><p>要接收并转换文本帧的内容，请调用接受数据类作为形参的 <code>receiveDeserialized</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">webSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/customer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> receiveDeserialized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;服务器已接收到 ID 为 \${customer.id} 的客户。&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要从 <a href="./server-websockets#api-overview">传入</a> 通道接收反序列化帧，请使用 <a href="https://api.ktor.io/ktor-shared/ktor-serialization/io.ktor.serialization/-websocket-content-converter/deserialize.html" target="_blank" rel="noreferrer">WebsocketContentConverter.deserialize</a> 函数。<code>WebsocketContentConverter</code> 可通过 <code>WebSocketServerSession.converter</code> 属性获取。</p><h3 id="send_data" tabindex="-1">发送数据 <a class="header-anchor" href="#send_data" aria-label="Permalink to &quot;发送数据 {id=&quot;send_data&quot;}&quot;">​</a></h3><p>要使用 <a href="#configure_serializer">指定格式</a> 在文本帧中传递数据对象，你可以使用 <code>sendSerialized</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">webSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/customer/1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sendSerialized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jane&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Smith&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>你可以在此处找到完整示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/server-websockets-serialization" target="_blank" rel="noreferrer">server-websockets-serialization</a>。</p></blockquote>`,23))])}const f=h(u,[["render",E]]);export{F as __pageData,f as default};
