import{_ as o,c as i,o as l,ag as a}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"关键字和操作符","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/keyword-reference.md","filePath":"kotlin/keyword-reference.md","lastUpdated":1754307826000}'),t={name:"kotlin/keyword-reference.md"};function n(r,e,c,d,s,f){return l(),i("div",null,e[0]||(e[0]=[a('<h1 id="关键字和操作符" tabindex="-1">关键字和操作符 <a class="header-anchor" href="#关键字和操作符" aria-label="Permalink to &quot;关键字和操作符&quot;">​</a></h1><h2 id="硬关键字" tabindex="-1">硬关键字 <a class="header-anchor" href="#硬关键字" aria-label="Permalink to &quot;硬关键字&quot;">​</a></h2><p>以下标记始终被解释为关键字，不能用作标识符：</p><ul><li><code>as</code><ul><li>用于<a href="/kotlin/typecasts#unsafe-cast-operator">类型转换</a>。</li><li>为<a href="/kotlin/packages#imports">导入指定别名</a>。</li></ul></li><li><code>as?</code> 用于<a href="/kotlin/typecasts#safe-nullable-cast-operator">安全类型转换</a>。</li><li><code>break</code> <a href="/kotlin/returns">终止循环的执行</a>。</li><li><code>class</code> <a href="/kotlin/classes">声明一个类</a>。</li><li><code>continue</code> <a href="/kotlin/returns">继续执行最内层循环的下一个步骤</a>。</li><li><code>do</code> 开始一个 <a href="/kotlin/control-flow#while-loops">do/while 循环</a>（带后置条件的循环）。</li><li><code>else</code> 定义当条件为 false 时执行的 <a href="/kotlin/control-flow#if-expression">if 表达式</a>分支。</li><li><code>false</code> 指定 <a href="/kotlin/booleans">Boolean 类型</a>的 &#39;false&#39; 值。</li><li><code>for</code> 开始一个 <a href="/kotlin/control-flow#for-loops">for 循环</a>。</li><li><code>fun</code> <a href="/kotlin/functions">声明一个函数</a>。</li><li><code>if</code> 开始一个 <a href="/kotlin/control-flow#if-expression">if 表达式</a>。</li><li><code>in</code><ul><li>指定 <a href="/kotlin/control-flow#for-loops">for 循环</a>中要迭代的对象。</li><li>用作中缀操作符，以<a href="/kotlin/operator-overloading#in-operator">检测</a>某个值是否属于<a href="/kotlin/ranges">区间</a>、集合或<a href="/kotlin/operator-overloading#in-operator">定义了 &#39;contains&#39; 方法</a>的其他实体。</li><li>在 <a href="/kotlin/control-flow#when-expressions-and-statements">when 表达式</a>中用于相同目的。</li><li>将类型形参标记为<a href="/kotlin/generics#declaration-site-variance">逆变</a>。</li></ul></li><li><code>!in</code><ul><li>用作操作符以检测某个值是否不属于<a href="/kotlin/ranges">区间</a>、集合或<a href="/kotlin/operator-overloading#in-operator">定义了 &#39;contains&#39; 方法</a>的其他实体。</li><li>在 <a href="/kotlin/control-flow#when-expressions-and-statements">when 表达式</a>中用于相同目的。</li></ul></li><li><code>interface</code> <a href="/kotlin/interfaces">声明一个接口</a>。</li><li><code>is</code><ul><li><a href="/kotlin/typecasts#is-and-is-operators">检测某个值是否具有特定类型</a>。</li><li>在 <a href="/kotlin/control-flow#when-expressions-and-statements">when 表达式</a>中用于相同目的。</li></ul></li><li><code>!is</code><ul><li><a href="/kotlin/typecasts#is-and-is-operators">检测某个值是否不具有特定类型</a>。</li><li>在 <a href="/kotlin/control-flow#when-expressions-and-statements">when 表达式</a>中用于相同目的。</li></ul></li><li><code>null</code> 是一个常量，表示不指向任何对象的对象引用。</li><li><code>object</code> <a href="/kotlin/object-declarations">同时声明一个类及其实例</a>。</li><li><code>package</code> 指定<a href="/kotlin/packages">当前文件的包</a>。</li><li><code>return</code> <a href="/kotlin/returns">从最内层的函数或匿名函数返回</a>。</li><li><code>super</code><ul><li><a href="/kotlin/inheritance#calling-the-superclass-implementation">引用方法的超类实现或属性</a>。</li><li><a href="/kotlin/classes#inheritance">从次构造函数调用超类构造函数</a>。</li></ul></li><li><code>this</code><ul><li>引用<a href="/kotlin/this-expressions">当前的接收者</a>。</li><li><a href="/kotlin/classes#constructors">从次构造函数调用同一类的另一个构造函数</a>。</li></ul></li><li><code>throw</code> <a href="/kotlin/exceptions">抛出一个异常</a>。</li><li><code>true</code> 指定 <a href="/kotlin/booleans">Boolean 类型</a>的 &#39;true&#39; 值。</li><li><code>try</code> <a href="/kotlin/exceptions">开始一个异常处理代码块</a>。</li><li><code>typealias</code> <a href="/kotlin/type-aliases">声明一个类型别名</a>。</li><li><code>typeof</code> 保留供将来使用。</li><li><code>val</code> 声明一个只读<a href="/kotlin/properties">属性</a>或<a href="/kotlin/basic-syntax#variables">局部变量</a>。</li><li><code>var</code> 声明一个可变<a href="/kotlin/properties">属性</a>或<a href="/kotlin/basic-syntax#variables">局部变量</a>。</li><li><code>when</code> 开始一个 <a href="/kotlin/control-flow#when-expressions-and-statements">when 表达式</a>（执行给定的分支之一）。</li><li><code>while</code> 开始一个 <a href="/kotlin/control-flow#while-loops">while 循环</a>（带前置条件的循环）。</li></ul><h2 id="软关键字" tabindex="-1">软关键字 <a class="header-anchor" href="#软关键字" aria-label="Permalink to &quot;软关键字&quot;">​</a></h2><p>以下标记在适用的上下文中充当关键字，在其他上下文中可用作标识符：</p><ul><li><code>by</code><ul><li><a href="/kotlin/delegation">将接口的实现委托给另一个对象</a>。</li><li><a href="/kotlin/delegated-properties">将属性访问器的实现委托给另一个对象</a>。</li></ul></li><li><code>catch</code> 开始一个<a href="/kotlin/exceptions">处理特定异常类型</a>的代码块。</li><li><code>constructor</code> <a href="/kotlin/classes#constructors">声明一个主构造函数或次构造函数</a>。</li><li><code>delegate</code> 用作<a href="/kotlin/annotations#annotation-use-site-targets">注解使用点目标</a>。</li><li><code>dynamic</code> 在 Kotlin/JS 代码中引用一个<a href="/kotlin/dynamic-type">动态类型</a>。</li><li><code>field</code> 用作<a href="/kotlin/annotations#annotation-use-site-targets">注解使用点目标</a>。</li><li><code>file</code> 用作<a href="/kotlin/annotations#annotation-use-site-targets">注解使用点目标</a>。</li><li><code>finally</code> 开始一个<a href="/kotlin/exceptions">当 try 代码块退出时总是执行</a>的代码块。</li><li><code>get</code><ul><li>声明<a href="/kotlin/properties#getters-and-setters">属性的 getter</a>。</li><li>用作<a href="/kotlin/annotations#annotation-use-site-targets">注解使用点目标</a>。</li></ul></li><li><code>import</code> <a href="/kotlin/packages">将声明从另一个包导入到当前文件</a>。</li><li><code>init</code> 开始一个<a href="/kotlin/classes#constructors">初始化代码块</a>。</li><li><code>param</code> 用作<a href="/kotlin/annotations#annotation-use-site-targets">注解使用点目标</a>。</li><li><code>property</code> 用作<a href="/kotlin/annotations#annotation-use-site-targets">注解使用点目标</a>。</li><li><code>receiver</code> 用作<a href="/kotlin/annotations#annotation-use-site-targets">注解使用点目标</a>。</li><li><code>set</code><ul><li>声明<a href="/kotlin/properties#getters-and-setters">属性的 setter</a>。</li><li>用作<a href="/kotlin/annotations#annotation-use-site-targets">注解使用点目标</a>。</li></ul></li><li><code>setparam</code> 用作<a href="/kotlin/annotations#annotation-use-site-targets">注解使用点目标</a>。</li><li><code>value</code> 与 <code>class</code> 关键字一起声明一个<a href="/kotlin/inline-classes">内联类</a>。</li><li><code>where</code> 指定<a href="/kotlin/generics#upper-bounds">泛型类型形参的约束</a>。</li></ul><h2 id="修饰符关键字" tabindex="-1">修饰符关键字 <a class="header-anchor" href="#修饰符关键字" aria-label="Permalink to &quot;修饰符关键字&quot;">​</a></h2><p>以下标记在声明的修饰符列表中充当关键字，在其他上下文中可用作标识符：</p><ul><li><code>abstract</code> 将类或成员标记为<a href="/kotlin/classes#abstract-classes">抽象</a>。</li><li><code>actual</code> 在<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">多平台项目</a>中表示平台特有的实现。</li><li><code>annotation</code> <a href="/kotlin/annotations">声明一个注解类</a>。</li><li><code>companion</code> <a href="/kotlin/object-declarations#companion-objects">声明一个伴生对象</a>。</li><li><code>const</code> 将属性标记为<a href="/kotlin/properties#compile-time-constants">编译期常量</a>。</li><li><code>crossinline</code> 禁止<a href="/kotlin/inline-functions#returns">内联函数接收的 lambda 中出现非局部返回</a>。</li><li><code>data</code> 指示编译器<a href="/kotlin/data-classes">为类生成规范成员</a>。</li><li><code>enum</code> <a href="/kotlin/enum-classes">声明一个枚举</a>。</li><li><code>expect</code> 将声明标记为<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">平台特有的</a>，期望在平台模块中实现。</li><li><code>external</code> 将声明标记为在 Kotlin 外部实现（可通过 <a href="/kotlin/java-interop#using-jni-with-kotlin">JNI</a> 或在 <a href="/kotlin/js-interop#external-modifier">JavaScript</a> 中访问）。</li><li><code>final</code> 禁止<a href="/kotlin/inheritance#overriding-methods">覆盖成员</a>。</li><li><code>infix</code> 允许使用<a href="/kotlin/functions#infix-notation">中缀表示法</a>调用函数。</li><li><code>inline</code> 指示编译器在调用点<a href="/kotlin/inline-functions">内联函数及其传递的 lambda</a>。</li><li><code>inner</code> 允许从<a href="/kotlin/nested-classes">嵌套类</a>引用外部类实例。</li><li><code>internal</code> 将声明标记为<a href="/kotlin/visibility-modifiers">在当前模块中可见</a>。</li><li><code>lateinit</code> 允许在<a href="/kotlin/properties#late-initialized-properties-and-variables">构造函数外部初始化非空的属性</a>。</li><li><code>noinline</code> 关闭<a href="/kotlin/inline-functions#noinline">内联函数接收的 lambda 的内联</a>。</li><li><code>open</code> 允许<a href="/kotlin/classes#inheritance">子类化类或覆盖成员</a>。</li><li><code>operator</code> 将函数标记为<a href="/kotlin/operator-overloading">重载操作符或实现约定</a>。</li><li><code>out</code> 将类型形参标记为<a href="/kotlin/generics#declaration-site-variance">协变</a>。</li><li><code>override</code> 将成员标记为<a href="/kotlin/inheritance#overriding-methods">超类成员的覆盖</a>。</li><li><code>private</code> 将声明标记为<a href="/kotlin/visibility-modifiers">在当前类或文件中可见</a>。</li><li><code>protected</code> 将声明标记为<a href="/kotlin/visibility-modifiers">在当前类及其子类中可见</a>。</li><li><code>public</code> 将声明标记为<a href="/kotlin/visibility-modifiers">在任何地方可见</a>。</li><li><code>reified</code> 将内联函数的类型形参标记为<a href="/kotlin/inline-functions#reified-type-parameters">在运行时可访问</a>。</li><li><code>sealed</code> <a href="/kotlin/sealed-classes">声明一个密封类</a>（一个子类化受限的类）。</li><li><code>suspend</code> 将函数或 lambda 标记为挂起（可用作<a href="/kotlin/coroutines-overview">协程</a>）。</li><li><code>tailrec</code> 将函数标记为<a href="/kotlin/functions#tail-recursive-functions">尾递归</a>（允许编译器用迭代替换递归）。</li><li><code>vararg</code> 允许<a href="/kotlin/functions#variable-number-of-arguments-varargs">为形参传递可变数量的实参</a>。</li></ul><h2 id="特殊标识符" tabindex="-1">特殊标识符 <a class="header-anchor" href="#特殊标识符" aria-label="Permalink to &quot;特殊标识符&quot;">​</a></h2><p>以下标识符由编译器在特定上下文中定义，在其他上下文中可用作常规标识符：</p><ul><li><code>field</code> 在属性访问器内部用于引用<a href="/kotlin/properties#backing-fields">属性的幕后字段</a>。</li><li><code>it</code> 在 lambda 内部用于<a href="/kotlin/lambdas#it-implicit-name-of-a-single-parameter">隐式引用其形参</a>。</li></ul><h2 id="操作符和特殊符号" tabindex="-1">操作符和特殊符号 <a class="header-anchor" href="#操作符和特殊符号" aria-label="Permalink to &quot;操作符和特殊符号&quot;">​</a></h2><p>Kotlin 支持以下操作符和特殊符号：</p><ul><li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> - 数学操作符 <ul><li><code>*</code> 也用于<a href="/kotlin/functions#variable-number-of-arguments-varargs">将数组传递给 vararg 形参</a>。</li></ul></li><li><code>=</code><ul><li>赋值操作符。</li><li>用于为<a href="/kotlin/functions#parameters-with-default-values">形参指定默认值</a>。</li></ul></li><li><code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code> - <a href="/kotlin/operator-overloading#augmented-assignments">复合赋值操作符</a>。</li><li><code>++</code>, <code>--</code> - <a href="/kotlin/operator-overloading#increments-and-decrements">增量和减量操作符</a>。</li><li><code>&amp;&amp;</code>, <code>||</code>, <code>!</code> - 逻辑“与”、“或”、“非”操作符（对于位操作，请使用<a href="/kotlin/numbers#operations-on-numbers">对应的中缀函数</a>）。</li><li><code>==</code>, <code>!=</code> - <a href="/kotlin/operator-overloading#equality-and-inequality-operators">相等性操作符</a>（对于非原生类型，转换为对 <code>equals()</code> 的调用）。</li><li><code>===</code>, <code>!==</code> - <a href="/kotlin/equality#referential-equality">引用相等性操作符</a>。</li><li><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> - <a href="/kotlin/operator-overloading#comparison-operators">比较操作符</a>（对于非原生类型，转换为对 <code>compareTo()</code> 的调用）。</li><li><code>[</code>, <code>]</code> - <a href="/kotlin/operator-overloading#indexed-access-operator">索引访问操作符</a>（转换为对 <code>get</code> 和 <code>set</code> 的调用）。</li><li><code>!!</code> <a href="/kotlin/null-safety#not-null-assertion-operator">断言表达式为非空的</a>。</li><li><code>?.</code> 执行<a href="/kotlin/null-safety#safe-call-operator">安全调用</a>（如果接收者非空，则调用方法或访问属性）。</li><li><code>?:</code> 如果左侧值为 null，则取右侧值（<a href="/kotlin/null-safety#elvis-operator">Elvis 操作符</a>）。</li><li><code>::</code> 创建<a href="/kotlin/reflection#function-references">成员引用</a>或<a href="/kotlin/reflection#class-references">类引用</a>。</li><li><code>..</code>, <code>..&lt;</code> 创建<a href="/kotlin/ranges">区间</a>。</li><li><code>:</code> 在声明中将名称与类型分离。</li><li><code>?</code> 将类型标记为<a href="/kotlin/null-safety#nullable-types-and-non-nullable-types">可空的</a>。</li><li><code>-&gt;</code><ul><li>分隔 <a href="/kotlin/lambdas#lambda-expression-syntax">lambda 表达式</a>的形参和代码块。</li><li>在<a href="/kotlin/lambdas#function-types">函数类型</a>中分隔形参和返回类型声明。</li><li>分隔 <a href="/kotlin/control-flow#when-expressions-and-statements">when 表达式</a>分支的条件和代码块。</li></ul></li><li><code>@</code><ul><li>引入一个<a href="/kotlin/annotations#usage">注解</a>。</li><li>引入或引用<a href="/kotlin/returns#break-and-continue-labels">循环标签</a>。</li><li>引入或引用<a href="/kotlin/returns#return-to-labels">lambda 标签</a>。</li><li>引用<a href="/kotlin/this-expressions#qualified-this">外部作用域的 &#39;this&#39; 表达式</a>。</li><li>引用<a href="/kotlin/inheritance#calling-the-superclass-implementation">外部超类</a>。</li></ul></li><li><code>;</code> 在同一行分隔多个语句。 在<a href="/kotlin/strings#string-templates">字符串模板</a>中引用变量或表达式。</li><li><code>_</code><ul><li>在 <a href="/kotlin/lambdas#underscore-for-unused-variables">lambda 表达式</a>中替换未使用的形参。</li><li>在<a href="/kotlin/destructuring-declarations#underscore-for-unused-variables">解构声明</a>中替换未使用的形参。</li></ul></li></ul><p>关于操作符优先级，请参见 Kotlin 语法中的<a href="https://kotlinlang.org/docs/reference/grammar.html#expressions" target="_blank" rel="noreferrer">此参考</a>。</p>',17)]))}const k=o(t,[["render",n]]);export{u as __pageData,k as default};
