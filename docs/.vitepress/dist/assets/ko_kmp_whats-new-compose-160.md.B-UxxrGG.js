import{_ as s,a,b as e,c as l}from"./chunks/compose-swingpanel-overlapping.BiVO7k80.js";import{_ as t,c as n,o,ag as p}from"./chunks/framework.Bksy39di.js";const y=JSON.parse('{"title":"Compose Multiplatform 1.6.0의 새로운 기능","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/whats-new-compose-160.md","filePath":"ko/kmp/whats-new-compose-160.md","lastUpdated":1755516278000}'),r={name:"ko/kmp/whats-new-compose-160.md"};function h(k,i,d,c,E,g){return o(),n("div",null,i[0]||(i[0]=[p(`<h1 id="compose-multiplatform-1-6-0의-새로운-기능" tabindex="-1">Compose Multiplatform 1.6.0의 새로운 기능 <a class="header-anchor" href="#compose-multiplatform-1-6-0의-새로운-기능" aria-label="Permalink to &quot;Compose Multiplatform 1.6.0의 새로운 기능&quot;">​</a></h1><p>Compose Multiplatform 1.6.0 릴리스의 주요 내용은 다음과 같습니다.</p><ul><li><a href="#breaking-changes">주요 변경 사항</a></li><li><a href="#improved-resources-api-all-platforms">새롭게 개선된 리소스 API</a></li><li><a href="#accessibility-support">iOS 접근성 기능의 기본 지원</a></li><li><a href="#ui-testing-api-experimental-all-platforms">모든 플랫폼을 위한 UI 테스트 API</a></li><li><a href="#separate-platform-views-for-popups-dialogs-and-dropdowns-ios-desktop">팝업, 대화 상자, 드롭다운을 위한 별도의 플랫폼 뷰</a></li><li><a href="#changes-from-jetpack-compose-and-material-3-all-platforms">Jetpack Compose 및 Material 3에서 병합된 변경 사항</a></li><li><a href="#kotlin-wasm-artifacts-available-in-stable-versions-of-the-framework">안정화 버전의 Kotlin/Wasm 아티팩트</a></li><li><a href="#known-issues-missing-dependencies">알려진 문제: 누락된 종속성</a></li></ul><h2 id="종속성" tabindex="-1">종속성 <a class="header-anchor" href="#종속성" aria-label="Permalink to &quot;종속성&quot;">​</a></h2><p>Compose Multiplatform의 이 버전은 다음 Jetpack Compose 라이브러리를 기반으로 합니다.</p><ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-compiler#1.5.8" target="_blank" rel="noreferrer">Compiler 1.5.8</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.6.1" target="_blank" rel="noreferrer">Runtime 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.6.1" target="_blank" rel="noreferrer">UI 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.6.1" target="_blank" rel="noreferrer">Foundation 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.6.1" target="_blank" rel="noreferrer">Material 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.2.0" target="_blank" rel="noreferrer">Material3 1.2.0</a></li></ul><h2 id="주요-변경-사항" tabindex="-1">주요 변경 사항 <a class="header-anchor" href="#주요-변경-사항" aria-label="Permalink to &quot;주요 변경 사항&quot;">​</a></h2><h3 id="lineheight가-설정된-텍스트의-패딩이-기본적으로-잘림" tabindex="-1">lineHeight가 설정된 텍스트의 패딩이 기본적으로 잘림 <a class="header-anchor" href="#lineheight가-설정된-텍스트의-패딩이-기본적으로-잘림" aria-label="Permalink to &quot;lineHeight가 설정된 텍스트의 패딩이 기본적으로 잘림&quot;">​</a></h3><p><a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/LineHeightStyle.Trim" target="_blank" rel="noreferrer">LineHeightStyle.Trim</a> 지원이 추가되면서, Compose Multiplatform는 텍스트 패딩이 잘리는 방식에 있어 Android와 정렬됩니다. 자세한 내용은 <a href="https://github.com/JetBrains/compose-multiplatform-core/pull/897" target="_blank" rel="noreferrer">풀 리퀘스트</a>를 참조하세요.</p><p>이것은 <a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.6.0-alpha01" target="_blank" rel="noreferrer">1.6.0-alpha01 릴리스</a>의 <code>compose.material</code> 변경 사항과 일치합니다.</p><ul><li><code>includeFontPadding</code> 매개변수가 Android에서 기본적으로 <code>false</code>가 되었습니다. 이 변경 사항에 대한 더 깊은 이해는 <a href="https://github.com/JetBrains/compose-multiplatform/issues/2477#issuecomment-1825716543" target="_blank" rel="noreferrer">Compose Multiplatform에서 이 플래그를 구현하지 않는 것에 대한 논의</a>를 참조하세요.</li><li>기본 줄 높이 스타일이 <code>Trim.None</code> 및 <code>Alignment.Center</code>로 변경되었습니다. Compose Multiplatform는 이제 <code>LineHeightStyle.Trim</code>을 지원하며 <code>Trim.None</code>을 기본값으로 구현합니다.</li><li><code>Typography</code>의 <code>TextStyle</code>에 명시적인 <code>lineHeight</code>가 추가되어 <a href="#using-fontsize-in-materialtheme-requires-lineheight">다음 주요 변경 사항</a>으로 이어졌습니다.</li></ul><h3 id="materialtheme에서-fontsize를-사용하려면-lineheight가-필요" tabindex="-1">MaterialTheme에서 fontSize를 사용하려면 lineHeight가 필요 <a class="header-anchor" href="#materialtheme에서-fontsize를-사용하려면-lineheight가-필요" aria-label="Permalink to &quot;MaterialTheme에서 fontSize를 사용하려면 lineHeight가 필요&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>이는 <code>material</code> 컴포넌트에만 영향을 미칩니다. <code>material3</code>는 이미 이 제한 사항이 있었습니다.</p></div><p><code>MaterialTheme</code>에서 <code>Text</code> 컴포넌트에 <code>fontSize</code> 속성을 설정했지만 <code>lineHeight</code>를 포함하지 않으면 실제 줄 높이가 글꼴에 맞게 수정되지 않습니다. 이제 해당 <code>fontSize</code>를 설정할 때마다 <code>lineHeight</code> 속성을 명시적으로 지정해야 합니다.</p><p>Jetpack Compose는 이제 글꼴 크기를 직접 설정하지 않을 것을 <a href="https://issuetracker.google.com/issues/321872412" target="_blank" rel="noreferrer">권장</a>합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>비표준 텍스트 크기를 지원하기 위해, Material Design 시스템을 따르고 글꼴 크기를 직접 변경하는 대신 다른 <a href="https://m2.material.io/design/typography/the-type-system.html#type-scale" target="_blank" rel="noreferrer">타입 스케일</a>을 사용할 것을 권장합니다. 또는 다음과 같이 줄 높이를 덮어쓸 수 있습니다: <code>style = LocalTextStyle.current.copy(lineHeight = TextUnit.Unspecified)</code>, 또는 사용자 정의 <code>Typography</code>를 완전히 생성할 수 있습니다.</p></div><h3 id="리소스-구성에-대한-새로운-접근-방식" tabindex="-1">리소스 구성에 대한 새로운 접근 방식 <a class="header-anchor" href="#리소스-구성에-대한-새로운-접근-방식" aria-label="Permalink to &quot;리소스 구성에 대한 새로운 접근 방식&quot;">​</a></h3><p>Compose Multiplatform 1.6.0의 프리뷰 버전에서 리소스 API를 사용해왔다면, <a href="./compose-multiplatform-resources">현재 버전 문서</a>를 숙지하십시오. 1.6.0-beta01은 리소스 파일이 프로젝트 코드에서 사용 가능하도록 프로젝트 폴더에 저장되는 방식을 변경했습니다.</p><h2 id="플랫폼-전반" tabindex="-1">플랫폼 전반 <a class="header-anchor" href="#플랫폼-전반" aria-label="Permalink to &quot;플랫폼 전반&quot;">​</a></h2><h3 id="개선된-리소스-api-모든-플랫폼" tabindex="-1">개선된 리소스 API (모든 플랫폼) <a class="header-anchor" href="#개선된-리소스-api-모든-플랫폼" aria-label="Permalink to &quot;개선된 리소스 API (모든 플랫폼)&quot;">​</a></h3><p>새로운 실험적 API는 문자열과 글꼴에 대한 지원을 추가하며, 공통 Kotlin에서 리소스를 더욱 편안하게 공유하고 접근할 수 있게 합니다.</p><ul><li>리소스는 특정 설정이나 제약 조건에 따라 구성될 수 있으며, 다음을 지원합니다. <ul><li>로케일</li><li>이미지 해상도</li><li>다크 및 라이트 테마</li></ul></li><li>Compose Multiplatform는 이제 각 프로젝트에 <code>Res</code> 객체를 생성하여 리소스에 직접적인 접근을 제공합니다.</li></ul><p>리소스 한정자 및 새로운 리소스 API에 대한 더 자세한 개요는 <a href="./compose-multiplatform-resources">이미지 및 리소스</a>를 참조하세요.</p><h3 id="ui-테스트-api-실험적-모든-플랫폼" tabindex="-1">UI 테스트 API (실험적, 모든 플랫폼) <a class="header-anchor" href="#ui-테스트-api-실험적-모든-플랫폼" aria-label="Permalink to &quot;UI 테스트 API (실험적, 모든 플랫폼)&quot;">​</a></h3><p>데스크톱 및 Android에서 이미 사용 가능했던 Compose Multiplatform용 UI 테스트 실험적 API가 이제 모든 플랫폼을 지원합니다. 프레임워크가 지원하는 모든 플랫폼에서 애플리케이션 UI의 동작을 검증하는 공통 테스트를 작성하고 실행할 수 있습니다. 이 API는 Jetpack Compose와 동일한 <code>finder</code>, <code>assertion</code>, <code>action</code>, <code>matcher</code>를 사용합니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JUnit 기반 테스트는 데스크톱 프로젝트에서만 지원됩니다.</p></div><p>설정 지침 및 테스트 예시는 <a href="./compose-test">Compose Multiplatform UI 테스트하기</a>를 참조하세요.</p><h3 id="jetpack-compose-및-material-3의-변경-사항-모든-플랫폼" tabindex="-1">Jetpack Compose 및 Material 3의 변경 사항 (모든 플랫폼) <a class="header-anchor" href="#jetpack-compose-및-material-3의-변경-사항-모든-플랫폼" aria-label="Permalink to &quot;Jetpack Compose 및 Material 3의 변경 사항 (모든 플랫폼)&quot;">​</a></h3><h4 id="jetpack-compose-1-6-1" tabindex="-1">Jetpack Compose 1.6.1 <a class="header-anchor" href="#jetpack-compose-1-6-1" aria-label="Permalink to &quot;Jetpack Compose 1.6.1&quot;">​</a></h4><p>Jetpack Compose의 최신 릴리스 병합은 모든 플랫폼에서 성능에 긍정적인 영향을 미칩니다. 자세한 내용은 <a href="https://android-developers.googleblog.com/2024/01/whats-new-in-jetpack-compose-january-24-release.html" target="_blank" rel="noreferrer">Android Developers 블로그의 공지</a>를 참조하세요.</p><p>이 릴리스의 다른 주목할 만한 기능:</p><ul><li>기본 글꼴 패딩 변경은 Android 타겟에만 적용되었습니다. 그러나 이 변경의 <a href="#using-fontsize-in-materialtheme-requires-lineheight">부작용</a>을 고려해야 합니다.</li><li>마우스 선택은 Compose Multiplatform에서 다른 타겟에 대해 이미 지원되었습니다. 1.6.0부터는 Android도 포함됩니다.</li></ul><p>아직 Compose Multiplatform에 포팅되지 않은 Jetpack Compose 기능:</p><ul><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4218" target="_blank" rel="noreferrer">BasicTextField2</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4305" target="_blank" rel="noreferrer">비선형 글꼴 스케일링 지원</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4236" target="_blank" rel="noreferrer">MultiParagraph.fillBoundingBoxes</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4235" target="_blank" rel="noreferrer">멀티플랫폼 드래그 앤 드롭</a>. 현재 Android에서만 작동합니다. 데스크톱에서는 기존 API인 <code>Modifier.onExternalDrag</code>를 사용할 수 있습니다.</li></ul><p>JetBrains 팀은 Compose Multiplatform의 향후 버전에서 이러한 기능을 채택하기 위해 노력하고 있습니다.</p><h4 id="compose-material-3-1-2-0" tabindex="-1">Compose Material 3 1.2.0 <a class="header-anchor" href="#compose-material-3-1-2-0" aria-label="Permalink to &quot;Compose Material 3 1.2.0&quot;">​</a></h4><p>릴리스 하이라이트:</p><ul><li>단일 및 다중 선택을 지원하는 새로운 실험적 컴포넌트 <code>Segmented Button</code>.</li><li>UI에서 정보를 강조하기 쉽게 만들어주는 더 많은 표면 옵션이 있는 확장된 색상 세트. <ul><li>구현 참고 사항: <code>ColorScheme</code> 객체는 이제 불변(immutable)입니다. 코드가 현재 <code>ColorScheme</code>의 색상을 직접 수정하고 있다면, 이제 <a href="https://developer.android.com/reference/kotlin/androidx/compose/material3/ColorScheme#copy(androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color)" target="_blank" rel="noreferrer">copy</a> 메서드를 사용하여 색상을 변경해야 합니다.</li><li>단일 표면 값 대신, 이제 더 유연한 색상 관리를 위해 여러 표면 색상 및 표면 컨테이너 옵션이 있습니다.</li></ul></li></ul><p>Material 3의 변경 사항에 대한 자세한 내용은 <a href="https://material.io/blog/material-3-compose-1-2" target="_blank" rel="noreferrer">Material Design 블로그의 릴리스 게시물</a>을 참조하세요.</p><h3 id="팝업-대화-상자-드롭다운을-위한-별도의-플랫폼-뷰-ios-데스크톱" tabindex="-1">팝업, 대화 상자, 드롭다운을 위한 별도의 플랫폼 뷰 (iOS, 데스크톱) <a class="header-anchor" href="#팝업-대화-상자-드롭다운을-위한-별도의-플랫폼-뷰-ios-데스크톱" aria-label="Permalink to &quot;팝업, 대화 상자, 드롭다운을 위한 별도의 플랫폼 뷰 (iOS, 데스크톱)&quot;">​</a></h3><p>때로는 팝업 요소(예: 툴팁 및 드롭다운 메뉴)가 초기 컴포저블 캔버스나 앱 창에 의해 제한되지 않는 것이 중요합니다. 이는 컴포저블 뷰가 전체 화면을 차지하지 않지만 경고 대화 상자를 띄워야 할 때 특히 중요해집니다. 1.6.0에서는 이를 안정적으로 달성할 수 있는 방법이 있습니다.</p><p>팝업 및 대화 상자는 여전히 자체 경계 밖으로 아무것도 그릴 수 없습니다(예: 최상위 컨테이너의 그림자).</p><h4 id="ios-안정화" tabindex="-1">iOS (안정화) <a class="header-anchor" href="#ios-안정화" aria-label="Permalink to &quot;iOS (안정화)&quot;">​</a></h4><p>iOS에서는 이 기능이 기본적으로 활성화되어 있습니다. 이전 동작으로 되돌리려면 <code>platformLayers</code> 매개변수를 <code>false</code>로 설정하십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        platformLayers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // your Compose code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="데스크톱-실험적" tabindex="-1">데스크톱 (실험적) <a class="header-anchor" href="#데스크톱-실험적" aria-label="Permalink to &quot;데스크톱 (실험적)&quot;">​</a></h4><p>데스크톱에서 이 기능을 사용하려면 <code>compose.layers.type</code> 시스템 속성을 설정하십시오. 지원되는 값:</p><ul><li><code>WINDOW</code>: <code>Popup</code> 및 <code>Dialog</code> 컴포넌트를 별도의 데코레이션 없는 창으로 생성합니다.</li><li><code>COMPONENT</code>: <code>Popup</code> 또는 <code>Dialog</code>를 동일한 창 내의 별도 Swing 컴포넌트로 생성합니다. 이는 오프스크린 렌더링(<code>compose.swing.render.on.graphics</code>를 <code>true</code>로 설정, 1.5.0 Compose Multiplatform 릴리스 노트의 <a href="https://blog.jetbrains.com/kotlin/2023/08/compose-multiplatform-1-5-0-release/#enhanced-swing-interop" target="_blank" rel="noreferrer">향상된 Swing 상호 운용</a> 섹션 참조)에서만 작동합니다. 오프스크린 렌더링은 <code>ComposePanel</code> 컴포넌트에서만 작동하며 전체 창 애플리케이션에서는 작동하지 않습니다.</li></ul><p><code>COMPONENT</code> 속성을 사용하는 코드 예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalComposeUiApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SwingUtilities.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invokeLater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose.swing.render.on.graphics&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose.layers.type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;COMPONENT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.defaultCloseOperation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WindowConstants.EXIT_ON_CLOSE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentPane </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JLayeredPane</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentPane.layout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> composePanel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposePanel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    composePanel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBounds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    composePanel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ComposeContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    composePanel.windowContainer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentPane  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use the full window for dialogs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentPane.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(composePanel)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.contentPane.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contentPane)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.isVisible </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposeContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.Green)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Dialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onDismissRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.Yellow))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>Dialog</code>(노란색)는 상위 <code>ComposePanel</code>(녹색)의 경계와 관계없이 완전히 그려집니다.</p><p><img src="`+s+`" alt="Dialog outside the bounds of the parent panel" width="700"></p><h3 id="텍스트-장식-선-스타일-지원-ios-데스크톱-웹" tabindex="-1">텍스트 장식 선 스타일 지원 (iOS, 데스크톱, 웹) <a class="header-anchor" href="#텍스트-장식-선-스타일-지원-ios-데스크톱-웹" aria-label="Permalink to &quot;텍스트 장식 선 스타일 지원 (iOS, 데스크톱, 웹)&quot;">​</a></h3><p>Compose Multiplatform는 이제 <code>PlatformTextStyle</code> 클래스를 사용하여 텍스트에 밑줄 스타일을 설정할 수 있습니다.</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>이 클래스는 공통 소스 세트에서 사용할 수 없으며 플랫폼별 코드에서 사용해야 합니다.</p></div><p>점선 밑줄 스타일을 설정하는 예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;Hello, Compose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  style </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    textDecoration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TextDecoration.Underline,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    platformStyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlatformTextStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      textDecorationLineStyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TextDecorationLineStyle.Dotted</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>실선, 이중 폭 실선, 점선, 파선, 물결선 스타일을 사용할 수 있습니다. 사용 가능한 모든 옵션은 <a href="https://github.com/JetBrains/compose-multiplatform-core/blob/jb-main/compose/ui/ui-text/src/skikoMain/kotlin/androidx/compose/ui/text/TextDecorationLineStyle.kt#L21" target="_blank" rel="noreferrer">소스 코드</a>에서 확인하십시오.</p><h3 id="시스템에-설치된-글꼴-접근-ios-데스크톱-웹" tabindex="-1">시스템에 설치된 글꼴 접근 (iOS, 데스크톱, 웹) <a class="header-anchor" href="#시스템에-설치된-글꼴-접근-ios-데스크톱-웹" aria-label="Permalink to &quot;시스템에 설치된 글꼴 접근 (iOS, 데스크톱, 웹)&quot;">​</a></h3><p>이제 Compose Multiplatform 앱에서 시스템에 설치된 글꼴에 접근할 수 있습니다. <code>SystemFont</code> 클래스를 사용하여 적절한 글꼴 스타일과 글꼴 두께로 글꼴을 로드하십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.ui.text.platform.SystemFont</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Menlo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, weight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 700</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Times New Roman&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, FontWeight.Bold))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Webdings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>데스크톱에서는 <code>FontFamily</code> 함수를 사용하여 글꼴 패밀리 이름만 지정하여 가능한 모든 글꼴 스타일을 로드할 수 있습니다. (자세한 예시는 <a href="https://github.com/JetBrains/compose-multiplatform-core/blob/release/1.6.0/compose/desktop/desktop/samples/src/jvmMain/kotlin/androidx/compose/desktop/examples/fonts/Fonts.jvm.kt" target="_blank" rel="noreferrer">코드 샘플</a> 참조).</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Menlo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="접근성-지원" tabindex="-1">접근성 지원 <a class="header-anchor" href="#접근성-지원" aria-label="Permalink to &quot;접근성 지원&quot;">​</a></h3><p>iOS용 Compose Multiplatform는 이제 장애가 있는 사용자가 네이티브 iOS UI와 동일한 수준의 편안함으로 Compose UI와 상호 작용할 수 있도록 합니다.</p><ul><li>화면 리더 및 VoiceOver가 Compose UI의 콘텐츠에 접근할 수 있습니다.</li><li>Compose UI는 탐색 및 상호 작용을 위해 네이티브 UI와 동일한 제스처를 지원합니다.</li></ul><p>이는 Compose Multiplatform의 시맨틱 데이터를 Accessibility Services 및 XCTest 프레임워크에 제공할 수 있음을 의미하기도 합니다.</p><p>구현 및 사용자 정의 API에 대한 자세한 내용은 <a href="./compose-ios-accessibility">iOS 접근성 기능 지원</a>을 참조하세요.</p><h3 id="컴포저블-뷰의-불투명도-변경" tabindex="-1">컴포저블 뷰의 불투명도 변경 <a class="header-anchor" href="#컴포저블-뷰의-불투명도-변경" aria-label="Permalink to &quot;컴포저블 뷰의 불투명도 변경&quot;">​</a></h3><p><code>ComposeUIViewController</code> 클래스에는 이제 뷰 배경의 불투명도를 투명하게 변경하는 구성 옵션이 하나 더 있습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>투명 배경은 추가적인 블렌딩 단계를 유발하므로 성능에 부정적인 영향을 미칩니다.</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.opaque </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>투명 배경이 달성하는 데 도움이 될 수 있는 예시:</p><p><img src="`+a+`" alt="Compose opaque = false demo" width="700"></p><h3 id="selectioncontainer에서-두-번-및-세-번-탭하여-텍스트-선택" tabindex="-1">SelectionContainer에서 두 번 및 세 번 탭하여 텍스트 선택 <a class="header-anchor" href="#selectioncontainer에서-두-번-및-세-번-탭하여-텍스트-선택" aria-label="Permalink to &quot;SelectionContainer에서 두 번 및 세 번 탭하여 텍스트 선택&quot;">​</a></h3><p>이전에는 iOS용 Compose Multiplatform에서 텍스트 입력 필드 내에서만 여러 번 탭하여 텍스트를 선택할 수 있었습니다. 이제 <code>SelectionContainer</code> 내의 <code>Text</code> 컴포넌트에 표시된 텍스트를 선택하기 위해 두 번 및 세 번 탭 제스처도 작동합니다.</p><h3 id="uiviewcontroller와의-상호-운용" tabindex="-1">UIViewController와의 상호 운용 <a class="header-anchor" href="#uiviewcontroller와의-상호-운용" aria-label="Permalink to &quot;UIViewController와의 상호 운용&quot;">​</a></h3><p><code>UITabBarController</code> 또는 <code>UINavigationController</code>와 같이 <code>UIView</code>로 구현되지 않은 일부 네이티브 API는 <a href="./compose-uikit-integration">기존 상호 운용 메커니즘</a>을 사용하여 Compose Multiplatform UI에 포함될 수 없었습니다.</p><p>이제 Compose Multiplatform는 <code>UIKitViewController</code> 함수를 구현하여 네이티브 iOS 뷰 컨트롤러를 Compose UI에 포함할 수 있도록 합니다.</p><h3 id="텍스트-필드에서-길게-한-번-탭하여-네이티브와-유사한-캐럿-동작" tabindex="-1">텍스트 필드에서 길게/한 번 탭하여 네이티브와 유사한 캐럿 동작 <a class="header-anchor" href="#텍스트-필드에서-길게-한-번-탭하여-네이티브와-유사한-캐럿-동작" aria-label="Permalink to &quot;텍스트 필드에서 길게/한 번 탭하여 네이티브와 유사한 캐럿 동작&quot;">​</a></h3><p>Compose Multiplatform는 이제 텍스트 필드에서 캐럿의 네이티브 iOS 동작에 더 가까워졌습니다.</p><ul><li>텍스트 필드에서 한 번 탭한 후 캐럿의 위치가 더 정밀하게 결정됩니다.</li><li>텍스트 필드에서 길게 탭하고 드래그하면 Android에서처럼 선택 모드로 진입하는 것이 아니라 커서가 이동합니다.</li></ul><h2 id="데스크톱" tabindex="-1">데스크톱 <a class="header-anchor" href="#데스크톱" aria-label="Permalink to &quot;데스크톱&quot;">​</a></h2><h3 id="개선된-상호-운용-블렌딩의-실험적-지원" tabindex="-1">개선된 상호 운용 블렌딩의 실험적 지원 <a class="header-anchor" href="#개선된-상호-운용-블렌딩의-실험적-지원" aria-label="Permalink to &quot;개선된 상호 운용 블렌딩의 실험적 지원&quot;">​</a></h3><p>과거에는 <code>SwingPanel</code> 래퍼를 사용하여 구현된 상호 운용 뷰는 항상 직사각형이었고, 항상 전경에 있으며 모든 Compose Multiplatform 컴포넌트 위에 있었습니다. 이로 인해 모든 팝업 요소 (드롭다운 메뉴, 토스트 알림)를 사용하기 어려웠습니다. 새로운 구현으로 이 문제가 해결되었으며, 이제 다음과 같은 사용 사례에서 Swing에 의존할 수 있습니다.</p><ul><li><p>클리핑. 직사각형 모양에 국한되지 않습니다. 클립 및 그림자 모디파이어가 이제 SwingPanel과 함께 올바르게 작동합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Flag necessary to enable the experimental blending </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose.interop.blending&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SwingPanel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RoundedCornerShape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ul><p>이 기능 없이 <code>JButton</code>이 클리핑되는 방식은 왼쪽에, 실험적 블렌딩을 적용한 방식은 오른쪽에 표시됩니다.</p><p><img src="`+e+'" alt="Correct clipping with SwingPanel"></p><ul><li>겹치기. <code>SwingPanel</code> 위에 Compose Multiplatform 콘텐츠를 그려 넣고 평소처럼 상호 작용할 수 있습니다. 여기서 &quot;Snackbar&quot;는 클릭 가능한 <strong>OK</strong> 버튼이 있는 Swing 패널 위에 있습니다.</li></ul><p><img src="'+l+`" alt="Correct overlapping with SwingPanel"></p><p>알려진 제한 사항 및 추가 세부 정보는 <a href="https://github.com/JetBrains/compose-multiplatform-core/pull/915" target="_blank" rel="noreferrer">풀 리퀘스트 설명</a>을 참조하세요.</p><h2 id="웹" tabindex="-1">웹 <a class="header-anchor" href="#웹" aria-label="Permalink to &quot;웹&quot;">​</a></h2><h3 id="프레임워크-안정화-버전에서-kotlin-wasm-아티팩트-사용-가능" tabindex="-1">프레임워크 안정화 버전에서 Kotlin/Wasm 아티팩트 사용 가능 <a class="header-anchor" href="#프레임워크-안정화-버전에서-kotlin-wasm-아티팩트-사용-가능" aria-label="Permalink to &quot;프레임워크 안정화 버전에서 Kotlin/Wasm 아티팩트 사용 가능&quot;">​</a></h3><p>Compose Multiplatform의 안정화 버전은 이제 Kotlin/Wasm 타겟을 지원합니다. 1.6.0으로 전환한 후에는 더 이상 종속성 목록에서 특정 <code>dev-wasm</code> 버전의 <code>compose-ui</code> 라이브러리를 지정할 필요가 없습니다.</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Wasm 타겟으로 Compose Multiplatform 프로젝트를 빌드하려면 Kotlin 1.9.22 이상이 필요합니다.</p></div><h2 id="알려진-문제-누락된-종속성" tabindex="-1">알려진 문제: 누락된 종속성 <a class="header-anchor" href="#알려진-문제-누락된-종속성" aria-label="Permalink to &quot;알려진 문제: 누락된 종속성&quot;">​</a></h2><p>기본 프로젝트 구성에서 누락될 수 있는 라이브러리가 몇 가지 있습니다.</p><ul><li><p><code>org.jetbrains.compose.annotation-internal:annotation</code> 또는 <code>org.jetbrains.compose.collection-internal:collection</code></p><p>이들은 라이브러리가 Compose Multiplatform 1.6.0-beta02에 의존하는 경우 누락될 수 있으며, 1.6.0과 바이너리 호환되지 않습니다. 어떤 라이브러리인지 파악하려면 다음 명령을 실행하십시오(<code>shared</code>를 메인 모듈 이름으로 바꾸십시오).</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shared:dependencies</span></span></code></pre></div><p>라이브러리를 Compose Multiplatform 1.5.12에 의존하는 버전으로 다운그레이드하거나, 라이브러리 작성자에게 Compose Multiplatform 1.6.0으로 업그레이드해달라고 요청하십시오.</p></li><li><p><code>androidx.annotation:annotation:...</code> 또는 <code>androidx.collection:collection:...</code></p><p>Compose Multiplatform 1.6.0은 <a href="https://developer.android.com/jetpack/androidx/releases/collection" target="_blank" rel="noreferrer">collection</a> 및 <a href="https://developer.android.com/jetpack/androidx/releases/annotation" target="_blank" rel="noreferrer">annotation</a> 라이브러리에 의존하며, 이들은 Google Maven 저장소에서만 사용할 수 있습니다.</p><p>이 저장소를 프로젝트에서 사용할 수 있도록 하려면 모듈의 <code>build.gradle.kts</code> 파일에 다음 줄을 추가하십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    google</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul>`,99)]))}const C=t(r,[["render",h]]);export{y as __pageData,C as default};
