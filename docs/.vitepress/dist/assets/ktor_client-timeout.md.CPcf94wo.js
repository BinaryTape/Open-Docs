import{_ as p,C as t,c as o,o as r,G as s,ag as h,w as k,j as e,a as d}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/client-timeout.md","filePath":"ktor/client-timeout.md","lastUpdated":1755457140000}'),c={name:"ktor/client-timeout.md"};function u(g,i,E,m,y,F){const a=t("TopicTitle"),n=t("primary-label"),l=t("tldr");return r(),o("div",null,[s(a,{labelRef:"client-plugin",title:"超时"}),s(n,{ref:"client-plugin"},null,512),s(l,null,{default:k(()=>i[0]||(i[0]=[e("p",null,[e("b",null,"代码示例"),d(": "),e("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-timeout"}," client-timeout ")],-1)])),_:1}),i[1]||(i[1]=h(`<p><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout" target="_blank" rel="noreferrer">HttpTimeout</a> 插件允许您配置以下超时：</p><ul><li><strong>请求超时</strong> — 处理 HTTP 调用所需的时间段：从发送请求到接收响应。</li><li><strong>连接超时</strong> — 客户端应与服务器建立连接的时间段。</li><li><strong>Socket 超时</strong> — 在与服务器交换数据时，两个数据包之间最长的不活动时间。</li></ul><p>您可以为所有请求或仅为特定请求指定这些超时。</p><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>HttpTimeout</code> 只需要 <a href="./client-dependencies">ktor-client-core</a> 构件，不需要任何特定的依赖项。</p><h2 id="install_plugin" tabindex="-1">安装 HttpTimeout <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;安装 HttpTimeout {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p>要安装 <code>HttpTimeout</code>，请将其传递给 <a href="./client-create-and-configure#configure-client">客户端配置块</a> 内的 <code>install</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpTimeout)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configure_plugin" tabindex="-1">配置超时 <a class="header-anchor" href="#configure_plugin" aria-label="Permalink to &quot;配置超时 {id=&quot;configure_plugin&quot;}&quot;">​</a></h2><p>要配置超时，您可以使用相应的属性：</p><ul><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout-config/request-timeout-millis.html" target="_blank" rel="noreferrer">requestTimeoutMillis</a> 指定整个 HTTP 调用的超时时间，从发送请求到接收响应。</li><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout-config/connect-timeout-millis.html" target="_blank" rel="noreferrer">connectTimeoutMillis</a> 指定与服务器建立连接的超时时间。</li><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout-config/socket-timeout-millis.html" target="_blank" rel="noreferrer">socketTimeoutMillis</a> 指定在与服务器交换数据时，两个数据包之间最长的不活动时间。</li></ul><p>您可以在 <code>install</code> 块内为所有请求指定超时。下方的代码示例展示了如何使用 <code>requestTimeoutMillis</code> 设置请求超时：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpTimeout) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        requestTimeoutMillis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果您需要仅为特定请求设置超时，请使用 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/timeout.html" target="_blank" rel="noreferrer">HttpRequestBuilder.timeout</a> 属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://0.0.0.0:8080/path1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        requestTimeoutMillis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>请注意，为特定请求指定的超时会覆盖 <code>install</code> 块中的全局超时。</p><p>在发生超时时，Ktor 会抛出 <code>HttpRequestTimeoutException</code>、<code>ConnectTimeoutException</code> 或 <code>SocketTimeoutException</code>。</p><h2 id="limitations" tabindex="-1">限制 <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;限制 {id=&quot;limitations&quot;}&quot;">​</a></h2><p><code>HttpTimeout</code> 对特定的<a href="./client-engines">引擎</a>有一些限制。下方的表格显示了这些引擎支持哪些超时：</p><table tabindex="0"><thead><tr><th>引擎</th><th>请求超时</th><th>连接超时</th><th>Socket 超时</th></tr></thead><tbody><tr><td><a href="./client-engines#darwin">Darwin</a></td><td>✅️</td><td>✖️</td><td>✅️</td></tr><tr><td><a href="./client-engines#js">JavaScript</a></td><td>✅</td><td>✖️</td><td>✖️</td></tr><tr><td><a href="./client-engines#curl">Curl</a></td><td>✅</td><td>✅️</td><td>✖️</td></tr><tr><td><a href="./client-testing">MockEngine</a></td><td>✅</td><td>✖️</td><td>✅</td></tr></tbody></table>`,20))])}const b=p(c,[["render",u]]);export{_ as __pageData,b as default};
