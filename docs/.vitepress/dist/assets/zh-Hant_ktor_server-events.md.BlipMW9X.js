import{_ as l,C as a,c as h,o as k,j as s,G as n,ag as r,a as t,w as o}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/server-events.md","filePath":"zh-Hant/ktor/server-events.md","lastUpdated":1755457140000}'),d={name:"zh-Hant/ktor/server-events.md"};function E(c,i,g,y,u,F){const e=a("show-structure"),p=a("tldr");return k(),h("div",null,[i[1]||(i[1]=s("h1",{id:"應用程式監控",tabindex:"-1"},[t("應用程式監控 "),s("a",{class:"header-anchor",href:"#應用程式監控","aria-label":'Permalink to "應用程式監控"'},"​")],-1)),n(e,{for:"chapter",depth:"2"}),n(p,null,{default:o(()=>i[0]||(i[0]=[s("p",null,[s("b",null,"Code example"),t(": "),s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/events"}," events ")],-1)])),_:1}),i[2]||(i[2]=r(`<p>Ktor 提供了使用事件監控伺服器應用程式的功能。 您可以處理與應用程式生命週期相關的預定義事件（應用程式啟動、停止等），或使用自訂事件來處理特定情況。您也可以使用 <a href="./server-custom-plugins#handle-app-events">MonitoringEvent</a> 掛鉤來處理自訂外掛程式的事件。</p><h2 id="event-definition" tabindex="-1">事件定義 <a class="header-anchor" href="#event-definition" aria-label="Permalink to &quot;事件定義 {id=&quot;event-definition&quot;}&quot;">​</a></h2><p>每個事件都由 <a href="https://api.ktor.io/ktor-shared/ktor-events/io.ktor.events/-event-definition/index.html" target="_blank" rel="noreferrer">EventDefinition</a> 類別實例表示。此類別具有一個 <code>T</code> 類型參數，用於指定傳遞給事件的值類型。此值可以在 <a href="#handle-events-application">事件處理器</a> 中作為 Lambda 參數存取。例如，大多數 <a href="#predefined-events">預定義事件</a> 都接受 <code>Application</code> 作為參數，允許您在事件處理器內部存取應用程式屬性。</p><p>對於 <a href="#custom-events">自訂事件</a>，您可以傳遞此事件所需的類型參數。 下面的程式碼片段展示了如何建立一個接受 <code>ApplicationCall</code> 實例的自訂 <code>NotFoundEvent</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NotFoundEvent: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EventDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApplicationCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><a href="#custom-events">自訂事件</a> 部分展示了當伺服器對資源返回 <code>404 Not Found</code> 狀態碼時，如何在自訂外掛程式中引發此事件。</p><h3 id="predefined-events" tabindex="-1">預定義應用程式事件 <a class="header-anchor" href="#predefined-events" aria-label="Permalink to &quot;預定義應用程式事件 {id=&quot;predefined-events&quot;}&quot;">​</a></h3><p>Ktor 提供了以下與應用程式生命週期相關的預定義事件：</p><ul><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-starting.html" target="_blank" rel="noreferrer">ApplicationStarting</a></li><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-started.html" target="_blank" rel="noreferrer">ApplicationStarted</a></li><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-server-ready.html" target="_blank" rel="noreferrer">ServerReady</a></li><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-stop-preparing.html" target="_blank" rel="noreferrer">ApplicationStopPreparing</a></li><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-stopping.html" target="_blank" rel="noreferrer">ApplicationStopping</a></li><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-stopped.html" target="_blank" rel="noreferrer">ApplicationStopped</a></li></ul><p>例如，您可以訂閱 <code>ApplicationStopped</code> 事件以釋放應用程式資源。</p><h2 id="handle-events-application" tabindex="-1">在應用程式中處理事件 <a class="header-anchor" href="#handle-events-application" aria-label="Permalink to &quot;在應用程式中處理事件 {id=&quot;handle-events-application&quot;}&quot;">​</a></h2><p>要處理指定 <code>Application</code> 實例的事件，請使用 <code>monitor</code> 屬性。 此屬性提供對 <a href="https://api.ktor.io/ktor-shared/ktor-events/io.ktor.events/-events/index.html" target="_blank" rel="noreferrer">Events</a> 實例的存取，該實例公開了以下函數，允許您處理應用程式事件：</p><ul><li><code>subscribe</code>: 訂閱由 <a href="#event-definition">EventDefinition</a> 指定的事件。</li><li><code>unsubscribe</code>: 取消訂閱由 <a href="#event-definition">EventDefinition</a> 指定的事件。</li><li><code>raise</code>: 以指定的值引發由 <a href="#event-definition">EventDefinition</a> 指定的事件。 <blockquote><p><a href="#custom-events">自訂事件</a> 部分展示了如何引發自訂事件。</p></blockquote></li></ul><p><code>subscribe</code> / <code>unsubscribe</code> 函數接受帶有 <code>T</code> 值的 <code>EventDefinition</code> 實例作為 Lambda 參數。 以下範例展示了如何訂閱 <code>ApplicationStarted</code> 事件並在事件處理器中 <a href="./server-logging">記錄</a> 訊息：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStarted) { application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.environment.log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server is started&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此範例中，您可以看到如何處理 <code>ApplicationStopped</code> 事件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStopped) { application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.environment.log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server is stopped&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Release resources and unsubscribe from events</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStarted) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStopped) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關完整範例，請參閱 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/events" target="_blank" rel="noreferrer">events</a>。</p><h2 id="handle-events-plugin" tabindex="-1">在自訂外掛程式中處理事件 <a class="header-anchor" href="#handle-events-plugin" aria-label="Permalink to &quot;在自訂外掛程式中處理事件 {id=&quot;handle-events-plugin&quot;}&quot;">​</a></h2><p>您可以使用 <code>MonitoringEvent</code> 掛鉤在 <a href="./server-custom-plugins#handle-app-events">自訂外掛程式</a> 中處理事件。 以下範例展示了如何建立 <code>ApplicationMonitoringPlugin</code> 外掛程式並處理 <code>ApplicationStarted</code> 和 <code>ApplicationStopped</code> 事件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.events.EventDefinition</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.http.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.hooks.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ApplicationMonitoringPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApplicationPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ApplicationMonitoringPlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MonitoringEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStarted)) { application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server is started&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MonitoringEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStopped)) { application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server is stopped&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Release resources and unsubscribe from events</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStarted) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStopped) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以在此處找到完整範例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/events" target="_blank" rel="noreferrer">events</a>。</p><h2 id="custom-events" tabindex="-1">自訂事件 <a class="header-anchor" href="#custom-events" aria-label="Permalink to &quot;自訂事件 {id=&quot;custom-events&quot;}&quot;">​</a></h2><p>在本節中，我們將探討如何建立一個在伺服器對資源返回 <code>404 Not Found</code> 狀態碼時引發的自訂事件。</p><ol><li><p>首先，您需要建立 <a href="#event-definition">事件定義</a>。 下面的程式碼片段展示了如何建立一個接受 <code>ApplicationCall</code> 作為參數的自訂 <code>NotFoundEvent</code> 事件。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NotFoundEvent: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EventDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApplicationCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li><li><p>要引發事件，請呼叫 <code>Events.raise</code> 函數。以下範例展示了如何處理 <code>ResponseSent</code> <a href="./server-custom-plugins#other">掛鉤</a>，以便在呼叫的狀態碼為 <code>404</code> 時引發新建立的事件。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.events.EventDefinition</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.http.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.hooks.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ApplicationMonitoringPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApplicationPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ApplicationMonitoringPlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ResponseSent) { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (call.response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpStatusCode.NotFound) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this@createApplicationPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.application.monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">raise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NotFoundEvent, call)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>要在 Application 中處理建立的事件，請 <a href="./server-plugins#install">安裝</a> 外掛程式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationMonitoringPlugin)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>然後，使用 <code>Events.subscribe</code> 訂閱事件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationMonitoringPlugin)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NotFoundEvent) { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No page was found for the URI: \${call.request.uri}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>有關完整範例，請參閱 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/events" target="_blank" rel="noreferrer">events</a>。</p>`,26))])}const C=l(d,[["render",E]]);export{b as __pageData,C as default};
