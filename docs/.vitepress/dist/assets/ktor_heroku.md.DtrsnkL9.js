import{_ as l,C as a,c as r,o,j as e,G as i,ag as h,a as t,w as k}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"Heroku","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/heroku.md","filePath":"ktor/heroku.md","lastUpdated":1755457140000}'),d={name:"ktor/heroku.md"};function c(u,s,g,y,m,E){const p=a("show-structure"),n=a("link-summary");return o(),r("div",null,[s[1]||(s[1]=e("h1",{id:"heroku",tabindex:"-1"},[t("Heroku "),e("a",{class:"header-anchor",href:"#heroku","aria-label":'Permalink to "Heroku"'},"​")],-1)),i(p,{for:"chapter",depth:"2"}),i(n,null,{default:k(()=>s[0]||(s[0]=[t("了解如何准备 Ktor 应用程序并将其部署到 Heroku。")])),_:1}),s[2]||(s[2]=h('<p>在本教程中，我们将向你展示如何准备 Ktor 应用程序并将其部署到 Heroku。</p><h2 id="prerequisites" tabindex="-1">必备条件 <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;必备条件 {id=&quot;prerequisites&quot;}&quot;">​</a></h2><p>在开始本教程之前，请确保满足以下必备条件：</p><ul><li>你有一个 Heroku 账户。</li><li><a href="https://devcenter.heroku.com/articles/heroku-cli" target="_blank" rel="noreferrer">Heroku CLI</a> 已安装在你的机器上。</li></ul><h2 id="create-sample-app" tabindex="-1">创建一个示例应用程序 <a class="header-anchor" href="#create-sample-app" aria-label="Permalink to &quot;创建一个示例应用程序 {id=&quot;create-sample-app&quot;}&quot;">​</a></h2><p>按照<a href="./server-create-a-new-project">创建、打开并运行新的 Ktor 项目</a>中所述创建一个示例应用程序。</p><blockquote><p>请注意，Ktor 提供了两种<a href="./server-create-and-configure">创建和配置服务器</a>的方式：在代码中或使用配置文件。部署时唯一的区别在于如何<a href="#port">指定</a>用于监听传入请求的端口。</p></blockquote><h2 id="prepare-app" tabindex="-1">准备应用程序 <a class="header-anchor" href="#prepare-app" aria-label="Permalink to &quot;准备应用程序 {id=&quot;prepare-app&quot;}&quot;">​</a></h2><h3 id="port" tabindex="-1">步骤 1：配置端口 <a class="header-anchor" href="#port" aria-label="Permalink to &quot;步骤 1：配置端口 {id=&quot;port&quot;}&quot;">​</a></h3><p>首先，你需要指定用于监听传入请求的端口。由于 Heroku 使用 <code>PORT</code> 环境变量，你需要将应用程序配置为使用此变量的值。根据<a href="./server-create-and-configure">配置 Ktor 服务器</a>的方式，执行以下操作之一：</p><ul><li>如果服务器配置在代码中指定，你可以使用 <code>System.getenv</code> 获取环境变量的值。打开 <code>src/main/kotlin/com/example</code> 文件夹中的 <code>Application.kt</code> 文件，并更改 <code>embeddedServer</code> 函数的 <code>port</code> 形参值，如下所示：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   embeddedServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Netty, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PORT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // ...</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wait </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ```</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   如果你的服务器配置在 `application.conf` 文件中指定，你可以使用 `${ENV}` 语法将环境变量赋值给 `port` 形参。打开 `src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resources` 中的 `application.conf` 文件并进行如下更新：</span></span></code></pre></div><p>ktor { deployment { port = 8080 port = ${?PORT} } }</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>### 步骤 2：添加一个 stage 任务 {id=&quot;stage&quot;}</span></span>\n<span class="line"><span>打开 `build.gradle.kts` 文件并添加一个自定义 `stage` 任务，Heroku 使用该任务来生成一个可执行文件，以便在 Heroku 平台上运行：</span></span>\n<span class="line"><span>```kotlin</span></span>\n<span class="line"><span>tasks {</span></span>\n<span class="line"><span> create(&quot;stage&quot;).dependsOn(&quot;installDist&quot;)</span></span>\n<span class="line"><span>}</span></span></code></pre></div><p>请注意，<code>installDist</code> 任务来自 Gradle <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">application 插件</a>，该插件已添加到示例项目中。</p><h3 id="procfile" tabindex="-1">步骤 3：创建一个 Procfile <a class="header-anchor" href="#procfile" aria-label="Permalink to &quot;步骤 3：创建一个 Procfile {id=&quot;procfile&quot;}&quot;">​</a></h3><p>在项目根目录中创建一个 <a href="https://devcenter.heroku.com/articles/procfile" target="_blank" rel="noreferrer">Procfile</a> 并添加以下内容：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>web: ./build/install/ktor-get-started-sample/bin/ktor-get-started-sample</span></span></code></pre></div><p>此文件指定了由 <code>stage</code> 任务生成的应用程序可执行文件的路径，并允许 Heroku 启动应用程序。 你可能需要将 <code>ktor-get-started-sample</code> 替换为你的项目名称。</p><h2 id="deploy-app" tabindex="-1">部署应用程序 <a class="header-anchor" href="#deploy-app" aria-label="Permalink to &quot;部署应用程序 {id=&quot;deploy-app&quot;}&quot;">​</a></h2><p>要使用 Git 将应用程序部署到 Heroku，请打开终端并按照以下步骤操作：</p><ol><li>在本地提交<a href="#prepare-app">上一节</a>中所做的更改：</li></ol><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Prepare app for deploying&quot;</span></span></code></pre></div><ol start="2"><li>登录到 Heroku CLI：</li></ol><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">heroku</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span></code></pre></div><ol start="3"><li>使用 <code>heroku create</code> 命令创建一个 Heroku 应用程序。 你需要将 <code>ktor-sample-heroku</code> 替换为你的应用程序名称：</li></ol><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">heroku</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ktor-sample-heroku</span></span></code></pre></div><p>此命令执行两项操作：</p><ul><li>创建一个新的 Heroku 应用程序，可在 <a href="https://dashboard.heroku.com/apps/" target="_blank" rel="noreferrer">web 控制台</a>上查看。</li><li>将名为 <code>heroku</code> 的新 Git 远程添加到本地版本库。</li></ul><ol start="4"><li>要部署应用程序，将更改推送到 <code>heroku main</code>...</li></ol><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> heroku</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><p>... 并等待 Heroku 构建并发布应用程序：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>...</span></span>\n<span class="line"><span>remote: https://ktor-sample-heroku.herokuapp.com/ deployed to Heroku</span></span>\n<span class="line"><span>remote:</span></span>\n<span class="line"><span>remote: Verifying deploy... done.</span></span></code></pre></div>',33))])}const v=l(d,[["render",c]]);export{F as __pageData,v as default};
