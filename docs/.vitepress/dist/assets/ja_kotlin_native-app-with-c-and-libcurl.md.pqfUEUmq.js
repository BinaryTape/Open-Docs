import{_ as e,a as h}from"./chunks/native-output.D4sfb-sK.js";import{_ as k,C as r,c as d,o as E,ag as n,j as i,a,G as t,w as p}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"C interopとlibcurlを使ってアプリを作成する – チュートリアル","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/native-app-with-c-and-libcurl.md","filePath":"ja/kotlin/native-app-with-c-and-libcurl.md","lastUpdated":1754307826000}'),o={name:"ja/kotlin/native-app-with-c-and-libcurl.md"};function g(c,s,y,u,F,m){const l=r("shortcut");return E(),d("div",null,[s[12]||(s[12]=n('<h1 id="c-interopとlibcurlを使ってアプリを作成する-–-チュートリアル" tabindex="-1">C interopとlibcurlを使ってアプリを作成する – チュートリアル <a class="header-anchor" href="#c-interopとlibcurlを使ってアプリを作成する-–-チュートリアル" aria-label="Permalink to &quot;C interopとlibcurlを使ってアプリを作成する – チュートリアル&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Cライブラリのインポートは<a href="/ja/kotlin/native-c-interop-stability">ベータ版</a>です。cinteropツールによってCライブラリから生成されるすべてのKotlin宣言には、<code>@ExperimentalForeignApi</code>アノテーションが付加されます。 Kotlin/Nativeに同梱されているネイティブプラットフォームライブラリ（Foundation、UIKit、POSIXなど）は、一部のAPIのみオプトインが必要です。</p></div><p>このチュートリアルでは、IntelliJ IDEA を使用してコマンドラインアプリケーションを作成する方法を説明します。Kotlin/Native と libcurl ライブラリを使用して、特定のプラットフォームでネイティブに実行できるシンプルな HTTP クライアントを作成する方法を学びます。</p><p>出力されるのは、macOS および Linux で実行し、簡単な HTTP GET リクエストを実行できる実行可能なコマンドラインアプリです。</p><p>Kotlin ライブラリは、コマンドラインを使って直接、またはスクリプトファイル（<code>.sh</code>や<code>.bat</code>ファイルなど）で生成できます。しかし、このアプローチは、何百ものファイルやライブラリを持つ大規模なプロジェクトにはうまくスケールしません。ビルドシステムを使用すると、Kotlin/Native コンパイラバイナリとライブラリを推移的な依存関係とともにダウンロードしてキャッシュするだけでなく、コンパイラとテストの実行も行うことで、プロセスが簡素化されます。Kotlin/Native は、<a href="/ja/kotlin/gradle-configure-project#targeting-multiple-platforms">Kotlin Multiplatform プラグイン</a>を通じて <a href="https://gradle.org" target="_blank" rel="noreferrer">Gradle</a> ビルドシステムを使用できます。</p><h2 id="開始する前に" tabindex="-1">開始する前に <a class="header-anchor" href="#開始する前に" aria-label="Permalink to &quot;開始する前に&quot;">​</a></h2><ol><li><p><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> の最新バージョンをダウンロードしてインストールします。</p></li><li><p>IntelliJ IDEA で <strong>File</strong> | <strong>New</strong> | <strong>Project from Version Control</strong> を選択し、以下の URL を使用して <a href="https://github.com/Kotlin/kmp-native-wizard" target="_blank" rel="noreferrer">プロジェクトテンプレート</a> をクローンします。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/kmp-native-wizard</span></span></code></pre></div></li><li><p>プロジェクト構造を確認します。</p><p><img src="'+h+`" alt="Native application project structure" width="700"></p><p>このテンプレートには、すぐに開始するために必要なファイルとフォルダーを含むプロジェクトが含まれています。Kotlin/Native で書かれたアプリケーションは、コードにプラットフォーム固有の要件がない場合、さまざまなプラットフォームをターゲットにできることを理解しておくことが重要です。コードは <code>nativeMain</code> ディレクトリに配置され、対応する <code>nativeTest</code> があります。このチュートリアルでは、フォルダー構造をそのままにしておきます。</p></li><li><p>プロジェクト設定を含むビルドスクリプトである <code>build.gradle.kts</code> ファイルを開きます。ビルドファイル内の以下の点に特に注意してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;os.name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;os.arch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;aarch64&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isMingwX64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostOs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Windows&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nativeTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mac OS X&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> macosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mac OS X&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> macosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Linux&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linuxArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Linux&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        isMingwX64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mingwX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GradleException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Host OS is not supported in Kotlin/Native.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nativeTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                entryPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>ターゲットは macOS、Linux、Windows 用に <code>macosArm64</code>、<code>macosX64</code>、<code>linuxArm64</code>、<code>linuxX64</code>、<code>mingwX64</code> を使用して定義されます。<a href="/ja/kotlin/native-target-support">サポートされているプラットフォーム</a>の完全なリストを参照してください。</li><li><code>binaries {}</code> ブロックは、バイナリがどのように生成されるか、およびアプリケーションのエントリポイントを定義します。これらはデフォルト値のままにしておくことができます。</li><li>C 相互運用は、ビルドの追加ステップとして構成されます。デフォルトでは、C からのすべてのシンボルは <code>interop</code> パッケージにインポートされます。<code>.kt</code> ファイルでパッケージ全体をインポートすることもできます。<a href="/ja/kotlin/gradle-configure-project#targeting-multiple-platforms">設定方法</a>の詳細については、こちらをご覧ください。</li></ul></li></ol><h2 id="定義ファイルの作成" tabindex="-1">定義ファイルの作成 <a class="header-anchor" href="#定義ファイルの作成" aria-label="Permalink to &quot;定義ファイルの作成&quot;">​</a></h2><p>ネイティブアプリケーションを記述する際には、HTTP リクエストの実行、ディスクからの読み書きなど、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/" target="_blank" rel="noreferrer">Kotlin 標準ライブラリ</a>に含まれていない特定の機能へのアクセスが必要になることがよくあります。</p><p>Kotlin/Native は、標準Cライブラリの利用を支援し、必要なほぼすべての機能のエコシステム全体を開放します。Kotlin/Native には、すでに一連のプレビルドされた<a href="/ja/kotlin/native-platform-libs">プラットフォームライブラリ</a>が同梱されており、標準ライブラリにいくつかの追加の共通機能を提供します。</p><p>相互運用における理想的なシナリオは、C 関数を Kotlin 関数を呼び出すかのように、同じシグネチャと規約に従って呼び出すことです。ここで cinterop ツールが役立ちます。これは、C ライブラリを受け取り、対応する Kotlin バインディングを生成して、ライブラリが Kotlin コードであるかのように使用できるようにします。</p><p>これらのバインディングを生成するには、各ライブラリに定義ファイルが必要です。通常、ライブラリと同じ名前になります。これは、ライブラリがどのように使用されるべきかを正確に記述するプロパティファイルです。</p><p>このアプリでは、HTTP 呼び出しを行うために libcurl ライブラリが必要になります。その定義ファイルを作成するには：</p><ol><li><p><code>src</code> フォルダーを選択し、<strong>File | New | Directory</strong> で新しいディレクトリを作成します。</p></li><li><p>新しいディレクトリに <strong>nativeInterop/cinterop</strong> と名前を付けます。これはヘッダーファイルの場所のデフォルトの規約ですが、別の場所を使用する場合は <code>build.gradle.kts</code> ファイルで上書きできます。</p></li><li><p>この新しいサブフォルダーを選択し、<strong>File | New | File</strong> で新しい <code>libcurl.def</code> ファイルを作成します。</p></li><li><p>ファイルを以下のコードで更新します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">curl.h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headerFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curl</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">compilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">linkerOpts.osx = -L/opt/local/lib -L/usr/local/opt/curl/lib -lcurl</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">linkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -lcurl</span></span></code></pre></div><ul><li><p><code>headers</code> は、Kotlin スタブを生成するヘッダーファイルのリストです。ここに複数のファイルを追加でき、それぞれをスペースで区切ります。このケースでは、<code>curl.h</code> のみです。参照されるファイルは指定されたパス（このケースでは <code>/usr/include/curl</code>）で利用可能である必要があります。</p></li><li><p><code>headerFilter</code> は、何が正確に含まれるかを示します。C では、あるファイルが別のファイルを <code>#include</code> ディレクティブで参照すると、すべてのヘッダーも含まれます。場合によってはこれは必要なく、<a href="https://en.wikipedia.org/wiki/Glob_(programming)" target="_blank" rel="noreferrer">グロブパターン</a>を使用してこのパラメータを追加することで調整できます。</p><p>外部の依存関係（システム <code>stdint.h</code> ヘッダーなど）を相互運用ライブラリにフェッチしたくない場合は、<code>headerFilter</code> を使用できます。また、ライブラリサイズの最適化や、システムと提供されている Kotlin/Native コンパイル環境間の潜在的な競合の修正にも役立つ場合があります。</p></li><li><p>特定のプラットフォームの動作を変更する必要がある場合は、<code>compilerOpts.osx</code> や <code>compilerOpts.linux</code> のような形式を使用して、プラットフォーム固有の値をオプションに提供できます。このケースでは、macOS（<code>.osx</code> サフィックス）と Linux（<code>.linux</code> サフィックス）です。サフィックスのないパラメータ（例: <code>linkerOpts=</code>）も可能で、すべてのプラットフォームに適用されます。</p></li></ul><p>利用可能なオプションの完全なリストについては、<a href="/ja/kotlin/native-definition-file#properties">定義ファイル</a>を参照してください。</p></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>サンプルを動作させるには、システムに <code>curl</code> ライブラリのバイナリが必要です。macOS と Linux では通常含まれています。Windows では、<a href="https://curl.se/download.html" target="_blank" rel="noreferrer">ソース</a>からビルドできます（Microsoft Visual Studio または Windows SDK コマンドラインツールが必要です）。詳細については、<a href="https://jonnyzzz.com/blog/2018/10/29/kn-libcurl-windows/" target="_blank" rel="noreferrer">関連ブログ記事</a>を参照してください。あるいは、<a href="https://www.msys2.org/" target="_blank" rel="noreferrer">MinGW/MSYS2</a> <code>curl</code> バイナリを検討してもよいでしょう。</p></div><h2 id="ビルドプロセスに相互運用を追加する" tabindex="-1">ビルドプロセスに相互運用を追加する <a class="header-anchor" href="#ビルドプロセスに相互運用を追加する" aria-label="Permalink to &quot;ビルドプロセスに相互運用を追加する&quot;">​</a></h2><p>ヘッダーファイルを使用するには、ビルドプロセスの一部として生成されていることを確認してください。そのためには、<code>build.gradle.kts</code> ファイルに以下の <code>compilations {}</code> ブロックを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nativeTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cinterops</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libcurl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> creating</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            entryPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>まず、<code>cinterops</code> が追加され、次に定義ファイルのエントリが追加されます。デフォルトでは、ファイルの名前が使用されます。追加のパラメータでこれをオーバーライドできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cinterops</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libcurl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        definitionFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/nativeInterop/cinterop/libcurl.def&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        packageName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.jetbrains.handson.http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOpts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-I/path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        includeDirs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="アプリケーションコードを記述する" tabindex="-1">アプリケーションコードを記述する <a class="header-anchor" href="#アプリケーションコードを記述する" aria-label="Permalink to &quot;アプリケーションコードを記述する&quot;">​</a></h2><p>ライブラリとそれに対応する Kotlin スタブができたので、アプリケーションからそれらを使用できます。このチュートリアルでは、<a href="https://curl.se/libcurl/c/simple.html" target="_blank" rel="noreferrer">simple.c</a> の例を Kotlin に変換します。</p><p><code>src/nativeMain/kotlin/</code> フォルダー内の <code>Main.kt</code> ファイルを以下のコードで更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> libcurl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curl_easy_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (curl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        curl_easy_setopt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl, CURLOPT_URL, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        curl_easy_setopt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl, CURLOPT_FOLLOWLOCATION, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curl_easy_perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CURLE_OK) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;curl_easy_perform() failed \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl_easy_strerror</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(res)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toKString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        curl_easy_cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ご覧のとおり、Kotlin 版では明示的な変数宣言は省略されていますが、それ以外はC版とほとんど同じです。libcurl ライブラリで期待されるすべての呼び出しは、Kotlin の同等物でも利用可能です。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>これは行ごとの直訳です。より Kotlin らしい慣用的な方法で記述することもできます。</p></div><h2 id="アプリケーションをコンパイルして実行する" tabindex="-1">アプリケーションをコンパイルして実行する <a class="header-anchor" href="#アプリケーションをコンパイルして実行する" aria-label="Permalink to &quot;アプリケーションをコンパイルして実行する&quot;">​</a></h2>`,27)),i("ol",null,[s[11]||(s[11]=n('<li><p>アプリケーションをコンパイルします。そのためには、タスクリストから <code>runDebugExecutableNative</code> Gradle タスクを実行するか、ターミナルで以下のコマンドを使用します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runDebugExecutableNative</span></span></code></pre></div><p>この場合、cinterop ツールによって生成された部分はビルドに暗黙的に含まれます。</p></li>',1)),i("li",null,[i("p",null,[s[2]||(s[2]=a("コンパイル中にエラーがなければ、")),s[3]||(s[3]=i("code",null,"main()",-1)),s[4]||(s[4]=a(" 関数の横のガターにある緑色の ")),s[5]||(s[5]=i("strong",null,"Run",-1)),s[6]||(s[6]=a(" アイコンをクリックするか、")),t(l,null,{default:p(()=>s[0]||(s[0]=[a("Shift + Cmd + R")])),_:1}),s[7]||(s[7]=a("/")),t(l,null,{default:p(()=>s[1]||(s[1]=[a("Shift + F10")])),_:1}),s[8]||(s[8]=a(" ショートカットを使用します。"))]),s[9]||(s[9]=i("p",null,[a("IntelliJ IDEA は "),i("strong",null,"Run"),a(" タブを開き、出力として "),i("a",{href:"https://example.com/",target:"_blank",rel:"noreferrer"},"example.com"),a(" の内容を表示します。")],-1)),s[10]||(s[10]=i("p",null,[i("img",{src:e,alt:"Application output with HTML-code",width:"700"})],-1))])]),s[13]||(s[13]=n('<p><code>curl_easy_perform</code> の呼び出しが結果を標準出力にプリントするため、実際の出力を見ることができます。<code>curl_easy_setopt</code> を使用してこれを非表示にすることもできます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>プロジェクトの完全なコードは、弊社の <a href="https://github.com/Kotlin/kotlin-hands-on-intro-kotlin-native" target="_blank" rel="noreferrer">GitHub リポジトリ</a>で入手できます。</p></div><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p><a href="/ja/kotlin/native-c-interop">Kotlin の C との相互運用</a>についてさらに学びましょう。</p>',4))])}const A=k(o,[["render",g]]);export{v as __pageData,A as default};
