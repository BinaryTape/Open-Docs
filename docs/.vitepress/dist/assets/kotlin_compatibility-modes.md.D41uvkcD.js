import{_ as t,c as o,o as a,ag as i}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"兼容模式","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/compatibility-modes.md","filePath":"kotlin/compatibility-modes.md","lastUpdated":1754307826000}'),l={name:"kotlin/compatibility-modes.md"};function n(r,e,s,c,d,p){return a(),o("div",null,e[0]||(e[0]=[i('<h1 id="兼容模式" tabindex="-1">兼容模式 <a class="header-anchor" href="#兼容模式" aria-label="Permalink to &quot;兼容模式&quot;">​</a></h1><p>当大型团队迁移到新版本时，可能会在某个时间点出现“不一致状态”——即部分开发者已更新而其他开发者尚未更新。为了防止前者编写和提交其他人可能无法编译的代码，我们提供了以下命令行开关（也可在 IDE 以及 <a href="/kotlin/gradle-compiler-options">Gradle</a>/<a href="/kotlin/maven#specify-compiler-options">Maven</a> 中使用）：</p><ul><li><code>-language-version X.Y</code> - Kotlin 语言版本 X.Y 的兼容模式，报告所有稍后推出的语言特性相关的错误。</li><li><code>-api-version X.Y</code> - Kotlin API 版本 X.Y 的兼容模式，报告所有使用 Kotlin 标准库中较新 API 的代码错误（包括编译器生成的代码）。</li></ul><p>当前，除了最新稳定版之外，我们还支持至少三个之前的语言和 API 版本的开发。</p>',4)]))}const f=t(l,[["render",n]]);export{m as __pageData,f as default};
