import{_ as y,C as t,c as v,o as m,G as i,ag as o,j as a,w as l,a as e}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-call-id.md","filePath":"ktor/server-call-id.md","lastUpdated":1755457140000}'),b={name:"ktor/server-call-id.md"};function C(I,s,f,F,D,q){const h=t("TopicTitle"),k=t("show-structure"),c=t("primary-label"),r=t("Links"),g=t("tldr"),u=t("link-summary"),n=t("code-block"),p=t("TabItem"),d=t("Tabs"),E=t("list");return m(),v("div",null,[i(h,{labelRef:"server-plugin",title:"在 Ktor 服务器中跟踪请求"}),i(k,{for:"chapter",depth:"2"}),i(c,{ref:"server-plugin"},null,512),i(g,null,{default:l(()=>[s[3]||(s[3]=a("p",null,[a("b",null,"所需依赖项"),e(": "),a("code",null,"io.ktor:ktor-server-call-id")],-1)),s[4]||(s[4]=a("p",null,[a("b",null,"代码示例"),e(": "),a("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/call-id"}," call-id ")],-1)),a("p",null,[a("b",null,[i(r,{href:"/ktor/server-native",summary:"Ktor 支持 Kotlin/Native，并允许您无需额外运行时或虚拟机即可运行服务器。"},{default:l(()=>s[0]||(s[0]=[e("原生服务器")])),_:1}),s[1]||(s[1]=e("支持"))]),s[2]||(s[2]=e(": ✅ "))])]),_:1}),i(u,null,{default:l(()=>s[5]||(s[5]=[e(" CallId 服务器插件允许您使用唯一的调用 ID 跟踪客户端请求。 ")])),_:1}),s[18]||(s[18]=o('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-call-id/io.ktor.server.plugins.callid/-call-id.html" target="_blank" rel="noreferrer">CallId</a> 插件允许您使用唯一的请求 ID 或调用 ID 端到端地跟踪客户端请求。通常，在 Ktor 中使用调用 ID 的流程如下：</p><ol><li>首先，您需要通过以下方式之一为特定请求获取一个调用 ID： <ul><li>反向代理（例如 Nginx）或云服务提供商（例如 <a href="./heroku">Heroku</a>）可能会在特定请求头中添加调用 ID，例如 <code>X-Request-Id</code>。在这种情况下，Ktor 允许您<a href="#retrieve">检索</a>调用 ID。</li><li>否则，如果请求未包含调用 ID，您可以在 Ktor 服务器上<a href="#generate">生成</a>它。</li></ul></li><li>接下来，Ktor 使用预定义字典<a href="#verify">验证</a>检索/生成的调用 ID。您也可以提供自己的条件来验证调用 ID。</li><li>最后，您可以将调用 ID 在特定请求头中<a href="#send">发送</a>给客户端，例如 <code>X-Request-Id</code>。</li></ol><p>将 <code>CallId</code> 与 <a href="./server-call-logging">CallLogging</a> 结合使用，有助于您通过将调用 ID <a href="#put-call-id-mdc">放入 MDC 上下文</a>并配置日志记录器以显示每个请求的调用 ID 来排查调用问题。</p><blockquote><p>在客户端，Ktor 提供了 <a href="./client-call-id">CallId</a> 插件来跟踪客户端请求。</p></blockquote><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p> 要使用 <code>CallId</code>，您需要在构建脚本中包含 <code>ktor-server-call-id</code> 构件： </p>',6)),i(d,{group:"languages"},{default:l(()=>[i(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:l(()=>[i(n,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-call-id:$ktor_version")'})]),_:1}),i(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:l(()=>[i(n,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-call-id:$ktor_version"'})]),_:1}),i(p,{title:"Maven","group-key":"maven"},{default:l(()=>[i(n,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-call-id-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[19]||(s[19]=a("h2",{id:"install_plugin",tabindex:"-1"},[e("安装 CallId "),a("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "安装 CallId {id="install_plugin"}"'},"​")],-1)),a("p",null,[s[7]||(s[7]=e(" 要将 ")),s[8]||(s[8]=a("a",{href:"#install"},"安装",-1)),s[9]||(s[9]=e()),s[10]||(s[10]=a("code",null,"CallId",-1)),s[11]||(s[11]=e(" 插件到应用程序， 请在指定的 ")),i(r,{href:"/ktor/server-modules",summary:"模块允许您通过分组路由来构建应用程序。"},{default:l(()=>s[6]||(s[6]=[e("模块")])),_:1}),s[12]||(s[12]=e(" 中将其传递给 ")),s[13]||(s[13]=a("code",null,"install",-1)),s[14]||(s[14]=e(" 函数。 以下代码片段展示了如何安装 ")),s[15]||(s[15]=a("code",null,"CallId",-1)),s[16]||(s[16]=e(" ... "))]),i(E,null,{default:l(()=>s[17]||(s[17]=[a("li",null,[e(" ... 在 "),a("code",null,"embeddedServer"),e(" 函数调用内部。 ")],-1),a("li",null,[e(" ... 在显式定义的 "),a("code",null,"module"),e(" 内部，它是 "),a("code",null,"Application"),e(" 类的一个扩展函数。 ")],-1)])),_:1}),i(d,null,{default:l(()=>[i(p,{title:"embeddedServer"},{default:l(()=>[i(n,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.callid.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(CallId)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),i(p,{title:"module"},{default:l(()=>[i(n,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.callid.*
            // ...
            fun Application.module() {
                install(CallId)
                // ...
            }`})]),_:1})]),_:1}),s[20]||(s[20]=o(`<h2 id="configure" tabindex="-1">配置 CallId <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置 CallId {id=&quot;configure&quot;}&quot;">​</a></h2><h3 id="retrieve" tabindex="-1">检索调用 ID <a class="header-anchor" href="#retrieve" aria-label="Permalink to &quot;检索调用 ID {id=&quot;retrieve&quot;}&quot;">​</a></h3><p><code>CallId</code> 提供了几种检索调用 ID 的方法：</p><ul><li><p>要从指定请求头中检索调用 ID，请使用 <code>retrieveFromHeader</code> 函数，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    retrieveFromHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您还可以使用 <code>header</code> 函数在同一个请求头中<a href="#send">检索并发送调用 ID</a>。</p></li><li><p>如果需要，您可以从 <code>ApplicationCall</code> 中检索调用 ID：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    retrieve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>请注意，所有检索到的调用 ID 都将使用默认字典进行<a href="#verify">验证</a>。</p><h3 id="generate" tabindex="-1">生成调用 ID <a class="header-anchor" href="#generate" aria-label="Permalink to &quot;生成调用 ID {id=&quot;generate&quot;}&quot;">​</a></h3><p>如果传入请求不包含调用 ID，您可以使用 <code>generate</code> 函数生成它：</p><ul><li>以下示例展示了如何从预定义字典中生成具有特定长度的调用 ID：<div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abcde12345&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li>在以下示例中，<code>generate</code> 函数接受一个用于生成调用 ID 的代码块：<div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> atomic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;generated-call-id-\${counter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAndIncrement</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h3 id="verify" tabindex="-1">验证调用 ID <a class="header-anchor" href="#verify" aria-label="Permalink to &quot;验证调用 ID {id=&quot;verify&quot;}&quot;">​</a></h3><p>所有<a href="#retrieve">检索</a>/<a href="#generate">生成</a>的调用 ID 都将使用默认字典进行验证，其内容如下：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CALL_ID_DEFAULT_DICTIONARY: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abcdefghijklmnopqrstuvwxyz0123456789+/=-&quot;</span></span></code></pre></div><p>这意味着包含大写字母的调用 ID 将无法通过验证。如果需要，您可以通过使用 <code>verify</code> 函数来应用更宽松的规则：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { callId: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        callId.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以在此处找到完整示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/call-id" target="_blank" rel="noreferrer">call-id</a>。</p><h3 id="send" tabindex="-1">将调用 ID 发送给客户端 <a class="header-anchor" href="#send" aria-label="Permalink to &quot;将调用 ID 发送给客户端 {id=&quot;send&quot;}&quot;">​</a></h3><p>在<a href="#retrieve">检索</a>/<a href="#generate">生成</a>调用 ID 后，您可以将其发送给客户端：</p><ul><li><p>使用 <code>header</code> 函数可以在同一个请求头中<a href="#retrieve">检索并发送调用 ID</a>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以在此处找到完整示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/call-id" target="_blank" rel="noreferrer">call-id</a>。</p></li><li><p><code>replyToHeader</code> 函数将在指定请求头中发送调用 ID：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    replyToHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>如果需要，您可以使用 <code>ApplicationCall</code> 在<a href="./server-responses">响应</a>中发送调用 ID：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, callId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId, callId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="put-call-id-mdc" tabindex="-1">将调用 ID 放入 MDC <a class="header-anchor" href="#put-call-id-mdc" aria-label="Permalink to &quot;将调用 ID 放入 MDC {id=&quot;put-call-id-mdc&quot;}&quot;">​</a></h2><p>将 <code>CallId</code> 与 <a href="./server-call-logging">CallLogging</a> 结合使用，有助于您通过将调用 ID 放入 MDC 上下文并配置日志记录器以显示每个请求的调用 ID 来排查调用问题。为此，请在 <code>CallLogging</code> 配置代码块内部调用 <code>callIdMdc</code> 函数，并指定要放入 MDC 上下文中的所需键：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callIdMdc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;call-id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此键可以传递给<a href="./server-logging#configure-logger">日志记录器配置</a>以在日志中显示调用 ID。例如，<code>logback.xml</code> 文件可能如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span></span>
<span class="line"><span>    &lt;encoder&gt;</span></span>
<span class="line"><span>        &lt;pattern&gt;%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %X{call-id} %-5level %logger{36} - %msg%n&lt;/pattern&gt;</span></span>
<span class="line"><span>    &lt;/encoder&gt;</span></span>
<span class="line"><span>&lt;/appender&gt;</span></span></code></pre></div><p>您可以在此处找到完整示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/call-id" target="_blank" rel="noreferrer">call-id</a>。</p>`,23))])}const x=y(b,[["render",C]]);export{B as __pageData,x as default};
