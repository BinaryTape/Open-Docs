import{_ as l,C as a,c as h,o as k,j as s,G as n,ag as r,a as t,w as o}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-events.md","filePath":"ja/ktor/server-events.md","lastUpdated":1755457140000}'),d={name:"ja/ktor/server-events.md"};function E(c,i,g,y,u,F){const e=a("show-structure"),p=a("tldr");return k(),h("div",null,[i[1]||(i[1]=s("h1",{id:"アプリケーション監視",tabindex:"-1"},[t("アプリケーション監視 "),s("a",{class:"header-anchor",href:"#アプリケーション監視","aria-label":'Permalink to "アプリケーション監視"'},"​")],-1)),n(e,{for:"chapter",depth:"2"}),n(p,null,{default:o(()=>i[0]||(i[0]=[s("p",null,[s("b",null,"コード例"),t(": "),s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/events"}," events ")],-1)])),_:1}),i[2]||(i[2]=r(`<p>Ktorは、イベントを使用することでサーバーアプリケーションを監視する機能を提供します。 アプリケーションのライフサイクル（アプリケーションの開始、停止など）に関連する事前定義されたイベントを処理したり、特定のケースを処理するためにカスタムイベントを使用したりできます。また、<a href="./server-custom-plugins#handle-app-events">MonitoringEvent</a>フックを使用して、カスタムプラグインのイベントを処理することもできます。</p><h2 id="event-definition" tabindex="-1">イベント定義 <a class="header-anchor" href="#event-definition" aria-label="Permalink to &quot;イベント定義 {id=&quot;event-definition&quot;}&quot;">​</a></h2><p>各イベントは、<a href="https://api.ktor.io/ktor-shared/ktor-events/io.ktor.events/-event-definition/index.html" target="_blank" rel="noreferrer">EventDefinition</a>クラスのインスタンスによって表現されます。 このクラスには、イベントに渡される値の型を指定する<code>T</code>型パラメータがあります。この値は、ラムダ引数として<a href="#handle-events-application">イベントハンドラー</a>内でアクセスできます。たとえば、ほとんどの<a href="#predefined-events">事前定義されたイベント</a>は<code>Application</code>をパラメータとして受け入れるため、イベントハンドラー内でアプリケーションのプロパティにアクセスできます。</p><p><a href="#custom-events">カスタムイベント</a>の場合、このイベントに必要な型パラメータを渡すことができます。 以下のコードスニペットは、<code>ApplicationCall</code>インスタンスを受け入れるカスタム<code>NotFoundEvent</code>を作成する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NotFoundEvent: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EventDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApplicationCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><a href="#custom-events">カスタムイベント</a>セクションでは、サーバーがリソースに対して<code>404 Not Found</code>ステータスコードを返したときに、カスタムプラグインでこのイベントを発生させる方法を示しています。</p><h3 id="predefined-events" tabindex="-1">事前定義されたアプリケーションイベント <a class="header-anchor" href="#predefined-events" aria-label="Permalink to &quot;事前定義されたアプリケーションイベント {id=&quot;predefined-events&quot;}&quot;">​</a></h3><p>Ktorは、アプリケーションのライフサイクルに関連する以下の事前定義されたイベントを提供します。</p><ul><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-starting.html" target="_blank" rel="noreferrer">ApplicationStarting</a></li><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-started.html" target="_blank" rel="noreferrer">ApplicationStarted</a></li><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-server-ready.html" target="_blank" rel="noreferrer">ServerReady</a></li><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-stop-preparing.html" target="_blank" rel="noreferrer">ApplicationStopPreparing</a></li><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-stopping.html" target="_blank" rel="noreferrer">ApplicationStopping</a></li><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-stopped.html" target="_blank" rel="noreferrer">ApplicationStopped</a></li></ul><p>たとえば、<code>ApplicationStopped</code>イベントを購読して、アプリケーションリソースを解放できます。</p><h2 id="handle-events-application" tabindex="-1">アプリケーションでイベントを処理する <a class="header-anchor" href="#handle-events-application" aria-label="Permalink to &quot;アプリケーションでイベントを処理する {id=&quot;handle-events-application&quot;}&quot;">​</a></h2><p>指定された<code>Application</code>インスタンスのイベントを処理するには、<code>monitor</code>プロパティを使用します。 このプロパティは、アプリケーションイベントを処理できる以下の関数を公開する<a href="https://api.ktor.io/ktor-shared/ktor-events/io.ktor.events/-events/index.html" target="_blank" rel="noreferrer">Events</a>インスタンスへのアクセスを提供します。</p><ul><li><code>subscribe</code>: <a href="#event-definition">EventDefinition</a>で指定されたイベントを購読します。</li><li><code>unsubscribe</code>: <a href="#event-definition">EventDefinition</a>で指定されたイベントの購読を解除します。</li><li><code>raise</code>: 指定された値で<a href="#event-definition">EventDefinition</a>で指定されたイベントを発生させます。 <blockquote><p><a href="#custom-events">カスタムイベント</a>セクションでは、カスタムイベントを発生させる方法を示します。</p></blockquote></li></ul><p><code>subscribe</code> / <code>unsubscribe</code>関数は、<code>T</code>値を持つ<code>EventDefinition</code>インスタンスをラムダ引数として受け入れます。 以下の例は、<code>ApplicationStarted</code>イベントを購読し、イベントハンドラーでメッセージを<a href="./server-logging">ログ</a>する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStarted) { application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.environment.log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server is started&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この例では、<code>ApplicationStopped</code>イベントを処理する方法を確認できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStopped) { application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.environment.log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server is stopped&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Release resources and unsubscribe from events</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStarted) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStopped) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>完全な例については、<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/events" target="_blank" rel="noreferrer">events</a>を参照してください。</p><h2 id="handle-events-plugin" tabindex="-1">カスタムプラグインでイベントを処理する <a class="header-anchor" href="#handle-events-plugin" aria-label="Permalink to &quot;カスタムプラグインでイベントを処理する {id=&quot;handle-events-plugin&quot;}&quot;">​</a></h2><p><code>MonitoringEvent</code>フックを使用して、<a href="./server-custom-plugins#handle-app-events">カスタムプラグイン</a>でイベントを処理できます。 以下の例は、<code>ApplicationMonitoringPlugin</code>プラグインを作成し、<code>ApplicationStarted</code>および<code>ApplicationStopped</code>イベントを処理する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.events.EventDefinition</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.http.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.hooks.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ApplicationMonitoringPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApplicationPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ApplicationMonitoringPlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MonitoringEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStarted)) { application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server is started&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MonitoringEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStopped)) { application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server is stopped&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Release resources and unsubscribe from events</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStarted) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStopped) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>完全な例はこちらから確認できます: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/events" target="_blank" rel="noreferrer">events</a>。</p><h2 id="custom-events" tabindex="-1">カスタムイベント <a class="header-anchor" href="#custom-events" aria-label="Permalink to &quot;カスタムイベント {id=&quot;custom-events&quot;}&quot;">​</a></h2><p>このセクションでは、サーバーがリソースに対して<code>404 Not Found</code>ステータスコードを返したときに発生するカスタムイベントを作成する方法を見ていきます。</p><ol><li><p>まず、<a href="#event-definition">イベント定義</a>を作成する必要があります。 以下のコードスニペットは、<code>ApplicationCall</code>をパラメータとして受け入れるカスタム<code>NotFoundEvent</code>イベントを作成する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NotFoundEvent: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EventDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApplicationCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li><li><p>イベントを発生させるには、<code>Events.raise</code>関数を呼び出します。以下のサンプルは、<code>ResponseSent</code> <a href="./server-custom-plugins#other">フック</a>を処理して、呼び出しのステータスコードが<code>404</code>の場合に新しく作成されたイベントを発生させる方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.events.EventDefinition</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.http.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.hooks.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ApplicationMonitoringPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApplicationPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ApplicationMonitoringPlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ResponseSent) { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (call.response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpStatusCode.NotFound) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this@createApplicationPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.application.monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">raise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NotFoundEvent, call)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>アプリケーションで作成されたイベントを処理するには、プラグインを<a href="./server-plugins#install">インストール</a>します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationMonitoringPlugin)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>次に、<code>Events.subscribe</code>を使用してイベントを購読します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationMonitoringPlugin)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NotFoundEvent) { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No page was found for the URI: \${call.request.uri}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>完全な例については、<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/events" target="_blank" rel="noreferrer">events</a>を参照してください。</p>`,26))])}const C=l(d,[["render",E]]);export{b as __pageData,C as default};
