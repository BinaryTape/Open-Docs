import{_ as u,C as l,c as b,o as y,G as a,j as i,ag as m,w as t,a as e}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-pebble.md","filePath":"ko/ktor/server-pebble.md","lastUpdated":1755457140000}'),c={name:"ko/ktor/server-pebble.md"};function v(F,s,f,C,B,P){const o=l("TopicTitle"),h=l("show-structure"),d=l("primary-label"),r=l("Links"),E=l("tldr"),n=l("code-block"),p=l("TabItem"),k=l("Tabs"),g=l("list");return y(),b("div",null,[a(o,{labelRef:"server-plugin",title:"Pebble"}),a(h,{for:"chapter",depth:"2"}),a(d,{ref:"server-plugin"},null,512),a(E,null,{default:t(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"필수 종속성"),e(": "),i("code",null,"io.ktor:ktor-server-pebble")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"코드 예시"),e(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/pebble"}," pebble ")],-1)),i("p",null,[i("b",null,[a(r,{href:"/ktor/server-native",summary:"Ktor supports Kotlin/Native and allows you to run a server without an additional runtime or virtual machine."},{default:t(()=>s[0]||(s[0]=[e("네이티브 서버")])),_:1}),s[1]||(s[1]=e(" 지원"))]),s[2]||(s[2]=e(": ✖️ "))])]),_:1}),s[17]||(s[17]=i("p",null,[e("Ktor는 "),i("a",{href:"https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-pebble/io.ktor.server.pebble/-pebble",target:"_blank",rel:"noreferrer"},"Pebble"),e(" 플러그인을 설치하여 애플리케이션 내에서 "),i("a",{href:"https://pebbletemplates.io/",target:"_blank",rel:"noreferrer"},"Pebble 템플릿"),e("을 뷰로 사용할 수 있도록 합니다.")],-1)),s[18]||(s[18]=i("h2",{id:"add_dependencies",tabindex:"-1"},[e("종속성 추가 "),i("a",{class:"header-anchor",href:"#add_dependencies","aria-label":'Permalink to "종속성 추가 {id="add_dependencies"}"'},"​")],-1)),s[19]||(s[19]=i("p",null,[i("code",null,"Pebble"),e("을(를) 사용하려면 빌드 스크립트에 "),i("code",null,"ktor-server-pebble"),e(" 아티팩트를 포함해야 합니다: ")],-1)),a(k,{group:"languages"},{default:t(()=>[a(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[a(n,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-pebble:$ktor_version")'})]),_:1}),a(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[a(n,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-pebble:$ktor_version"'})]),_:1}),a(p,{title:"Maven","group-key":"maven"},{default:t(()=>[a(n,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-pebble-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[20]||(s[20]=i("h2",{id:"install_plugin",tabindex:"-1"},[e("Pebble 설치 "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "Pebble 설치 {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[6]||(s[6]=e(" 애플리케이션에 ")),s[7]||(s[7]=i("code",null,"Pebble",-1)),s[8]||(s[8]=e(" 플러그인을 ")),s[9]||(s[9]=i("a",{href:"#install"},"설치하려면",-1)),s[10]||(s[10]=e(", 지정된 ")),a(r,{href:"/ktor/server-modules",summary:"Modules allow you to structure your application by grouping routes."},{default:t(()=>s[5]||(s[5]=[e("모듈")])),_:1}),s[11]||(s[11]=e("의 ")),s[12]||(s[12]=i("code",null,"install",-1)),s[13]||(s[13]=e(" 함수에 전달합니다. 아래 코드 스니펫은 ")),s[14]||(s[14]=i("code",null,"Pebble",-1)),s[15]||(s[15]=e("을(를) 설치하는 방법을 보여줍니다... "))]),a(g,null,{default:t(()=>s[16]||(s[16]=[i("li",null,[e(" ... "),i("code",null,"embeddedServer"),e(" 함수 호출 내에서. ")],-1),i("li",null,[e(" ... "),i("code",null,"Application"),e(" 클래스의 확장 함수인 명시적으로 정의된 "),i("code",null,"module"),e(" 내에서. ")],-1)])),_:1}),a(k,null,{default:t(()=>[a(p,{title:"embeddedServer"},{default:t(()=>[a(n,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.pebble.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(Pebble)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),a(p,{title:"module"},{default:t(()=>[a(n,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.pebble.*
            // ...
            fun Application.module() {
                install(Pebble)
                // ...
            }`})]),_:1})]),_:1}),s[21]||(s[21]=m(`<p><code>install</code> 블록 내에서 Pebble 템플릿 로드를 위해 <a href="https://pebbletemplates.io/com/mitchellbosecke/pebble/PebbleEngine/Builder/" target="_blank" rel="noreferrer">PebbleEngine.Builder</a>를 <a href="#configure">구성</a>할 수 있습니다.</p><h2 id="configure" tabindex="-1">Pebble 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;Pebble 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><h3 id="template_loading" tabindex="-1">템플릿 로드 구성 <a class="header-anchor" href="#template_loading" aria-label="Permalink to &quot;템플릿 로드 구성 {id=&quot;template_loading&quot;}&quot;">​</a></h3><p>템플릿을 로드하려면 <a href="https://pebbletemplates.io/com/mitchellbosecke/pebble/PebbleEngine/Builder/" target="_blank" rel="noreferrer">PebbleEngine.Builder</a>를 사용하여 템플릿을 로드하는 방법을 구성해야 합니다. 예를 들어, 아래 코드 스니펫은 Ktor가 현재 클래스패스를 기준으로 <code>templates</code> 패키지에서 템플릿을 찾아보도록 활성화합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.pebble.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Pebble) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        loader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClasspathLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            prefix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;templates&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="use_template" tabindex="-1">응답으로 템플릿 전송 <a class="header-anchor" href="#use_template" aria-label="Permalink to &quot;응답으로 템플릿 전송 {id=&quot;use_template&quot;}&quot;">​</a></h3><p><code>resources/templates</code>에 <code>index.html</code> 템플릿이 있다고 가정해 봅시다:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, {{user.name}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>사용자 데이터 모델은 다음과 같습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>지정된 <a href="./server-routing">라우트</a>에 템플릿을 사용하려면 다음과 같이 <code>PebbleContent</code>를 <code>call.respond</code> 메서드에 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampleUser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PebbleContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to sampleUser)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,12))])}const q=u(c,[["render",v]]);export{A as __pageData,q as default};
