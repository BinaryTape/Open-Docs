import{_ as h,a as e}from"./chunks/native-output.D4sfb-sK.js";import{_ as k,C as r,c as d,o as E,ag as n,j as i,a,G as t,w as p}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"使用 C 互操作和 libcurl 创建应用 – 教程","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/native-app-with-c-and-libcurl.md","filePath":"kotlin/native-app-with-c-and-libcurl.md","lastUpdated":1754307826000}'),o={name:"kotlin/native-app-with-c-and-libcurl.md"};function g(c,s,y,u,F,m){const l=r("shortcut");return E(),d("div",null,[s[12]||(s[12]=n('<h1 id="使用-c-互操作和-libcurl-创建应用-–-教程" tabindex="-1">使用 C 互操作和 libcurl 创建应用 – 教程 <a class="header-anchor" href="#使用-c-互操作和-libcurl-创建应用-–-教程" aria-label="Permalink to &quot;使用 C 互操作和 libcurl 创建应用 – 教程&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>C 库的导入处于 <a href="/kotlin/native-c-interop-stability">Beta</a> 阶段。所有通过 cinterop 工具从 C 库生成的 Kotlin 声明都应带有 <code>@ExperimentalForeignApi</code> 注解。 Kotlin/Native 附带的 原生 平台 库（例如 Foundation、UIKit 和 POSIX）仅需对部分 API 进行 opt-in。</p></div><p>本教程演示了如何使用 IntelliJ IDEA 创建命令行应用程序。你将学习如何使用 Kotlin/Native 和 libcurl 库创建可在指定平台上 原生 运行的简单 HTTP 客户端。</p><p>输出将是一个可执行的命令行应用，你可以在 macOS 和 Linux 上运行它并进行简单的 HTTP GET 请求。</p><p>你可以使用命令行生成 Kotlin 库，无论是直接生成还是通过脚本文件（例如 <code>.sh</code> 或 <code>.bat</code> 文件）生成。然而，对于拥有数百个文件和库的更大项目，这种方法的可伸缩性不佳。使用 构建 系统简化了该过程，它通过下载和缓存 Kotlin/Native 编译器二进制文件和具有传递性 依赖项 的库，以及运行编译器和测试来实现。Kotlin/Native 可以通过 <a href="/kotlin/gradle-configure-project#targeting-multiple-platforms">Kotlin Multiplatform plugin</a> 使用 <a href="https://gradle.org" target="_blank" rel="noreferrer">Gradle</a> 构建 系统。</p><h2 id="开始之前" tabindex="-1">开始之前 <a class="header-anchor" href="#开始之前" aria-label="Permalink to &quot;开始之前&quot;">​</a></h2><ol><li><p>下载并安装最新版本的 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a>。</p></li><li><p>通过在 IntelliJ IDEA 中选择 <strong>File</strong> | <strong>New</strong> | <strong>Project from Version Control</strong> 并使用此 URL，克隆 <a href="https://github.com/Kotlin/kmp-native-wizard" target="_blank" rel="noreferrer">项目 模板</a>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/kmp-native-wizard</span></span></code></pre></div></li><li><p>探查 项目 结构：</p><p><img src="'+e+`" alt="原生 应用程序 项目 结构" width="700"></p><p>模板包含一个 项目，其中包含你入门所需的文件和文件夹。理解用 Kotlin/Native 编写的 应用程序 如果没有平台特有的 要求，则可以面向不同的平台是很重要的。你的代码位于 <code>nativeMain</code> 目录中，并有相应的 <code>nativeTest</code>。对于本教程，请保持文件夹结构不变。</p></li><li><p>打开 <code>build.gradle.kts</code> 文件，它是包含 项目 设置的 构建 脚本。请特别注意 构建 文件中的以下内容：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;os.name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;os.arch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;aarch64&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isMingwX64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostOs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Windows&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nativeTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mac OS X&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> macosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mac OS X&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> macosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Linux&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linuxArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Linux&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        isMingwX64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mingwX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GradleException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Host OS is not supported in Kotlin/Native.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nativeTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                entryPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>目标 使用 <code>macosArm64</code>、<code>macosX64</code>、<code>linuxArm64</code>、<code>linuxX64</code> 和 <code>mingwX64</code> 定义，分别对应 macOS、Linux 和 Windows。关于 <a href="/kotlin/native-target-support">支持的平台</a> 的完整列表，请参见。</li><li><code>binaries {}</code> 代码块 定义了二进制文件的生成方式和 应用程序 的入口点。这些可以保留为默认值。</li><li>C 互操作 被配置为 构建 过程中的一个额外步骤。默认情况下，所有来自 C 的符号都会导入到 <code>interop</code> 包中。你可能需要在 <code>.kt</code> 文件中导入整个包。关于 <a href="/kotlin/gradle-configure-project#targeting-multiple-platforms">如何配置</a> 它，请参阅更多信息。</li></ul></li></ol><h2 id="创建-定义-文件" tabindex="-1">创建 定义 文件 <a class="header-anchor" href="#创建-定义-文件" aria-label="Permalink to &quot;创建 定义 文件&quot;">​</a></h2><p>在编写 原生 应用程序 时，你通常需要访问 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/" target="_blank" rel="noreferrer">Kotlin 标准库</a> 中未包含的某些 功能性，例如进行 HTTP 请求、从磁盘读写等。</p><p>Kotlin/Native 有助于使用标准 C 库，这打开了一个包含几乎你所需所有 功能性 的完整生态系统。Kotlin/Native 已经附带了一组预 构建 的 <a href="/kotlin/native-platform-libs">平台库</a>，它们为标准库提供了一些额外的 公共 功能性。</p><p>理想的 互操作 场景是调用 C 函数，就像调用 Kotlin 函数一样，遵循相同的签名和约定。这就是 cinterop 工具派上用场的时候。它接受一个 C 库并生成相应的 Kotlin 绑定，以便该库可以像 Kotlin 代码一样使用。</p><p>为了生成这些绑定，每个库都需要一个 定义 文件，通常与库同名。这是一个属性文件，精确描述了库应如何被使用。</p><p>在此 应用 中，你将需要 libcurl 库来发出一些 HTTP 调用。要创建其 定义 文件：</p><ol><li><p>选择 <code>src</code> 文件夹，然后通过 <strong>File | New | Directory</strong> 创建一个新目录。</p></li><li><p>将新目录命名为 <strong>nativeInterop/cinterop</strong>。这是头文件位置的默认约定，但如果你使用不同的位置，可以在 <code>build.gradle.kts</code> 文件中 覆盖 它。</p></li><li><p>选择此新子文件夹，然后通过 <strong>File | New | File</strong> 创建一个新文件 <code>libcurl.def</code>。</p></li><li><p>使用以下代码更新你的文件：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">curl.h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headerFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curl</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">compilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">linkerOpts.osx = -L/opt/local/lib -L/usr/local/opt/curl/lib -lcurl</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">linkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -lcurl</span></span></code></pre></div><ul><li><p><code>headers</code> 是用于生成 Kotlin 存根的头文件列表。你可以在此处添加多个文件，用空格分隔。在本例中，它只有 <code>curl.h</code>。引用的文件需要位于指定的路径上（在本例中，是 <code>/usr/include/curl</code>）。</p></li><li><p><code>headerFilter</code> 显示了具体包含哪些内容。在 C 语言中，当一个文件使用 <code>#include</code> 指令引用另一个文件时，所有头文件也会被包含进来。有时这并非必要，你可以 <a href="https://en.wikipedia.org/wiki/Glob_(programming)" target="_blank" rel="noreferrer">使用 glob 模式</a> 添加此 参数 以进行调整。</p><p>如果你不想将外部 依赖项（例如系统 <code>stdint.h</code> 头文件）引入 互操作 库中，可以使用 <code>headerFilter</code>。此外，它可能有助于优化库大小，并修复系统与提供的 Kotlin/Native 编译环境之间的潜在冲突。</p></li><li><p>如果需要修改特定平台的行为，你可以使用 <code>compilerOpts.osx</code> 或 <code>compilerOpts.linux</code> 等格式，为选项提供平台特有的 值。在本例中，它们是 macOS（<code>.osx</code> 后缀）和 Linux（<code>.linux</code> 后缀）。不带后缀的 形参 也是可能的（例如 <code>linkerOpts=</code>），并应用于所有平台。</p></li></ul><p>关于可用选项的完整列表，请参见 <a href="/kotlin/native-definition-file#properties">定义 文件</a>。</p></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>你的系统需要有 <code>curl</code> 库的二进制文件才能使示例正常工作。在 macOS 和 Linux 上，它们通常已包含在内。在 Windows 上，你可以从 <a href="https://curl.se/download.html" target="_blank" rel="noreferrer">源代码</a> 构建 它（你需要 Microsoft Visual Studio 或 Windows SDK 命令行工具）。关于更多详细信息，请参见 <a href="https://jonnyzzz.com/blog/2018/10/29/kn-libcurl-windows/" target="_blank" rel="noreferrer">相关博客文章</a>。或者，你也可以考虑使用 <a href="https://www.msys2.org/" target="_blank" rel="noreferrer">MinGW/MSYS2</a> 的 <code>curl</code> 二进制文件。</p></div><h2 id="将-互操作-添加到-构建-过程" tabindex="-1">将 互操作 添加到 构建 过程 <a class="header-anchor" href="#将-互操作-添加到-构建-过程" aria-label="Permalink to &quot;将 互操作 添加到 构建 过程&quot;">​</a></h2><p>要使用头文件，请确保它们作为 构建 过程的一部分生成。为此，将以下 <code>compilations {}</code> 代码块 添加到 <code>build.gradle.kts</code> 文件中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nativeTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cinterops</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libcurl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> creating</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            entryPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>首先，添加 <code>cinterops</code>，然后是 定义 文件的条目。默认情况下，使用文件的名称。你可以通过额外的 形参 覆盖 此项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cinterops</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libcurl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        definitionFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/nativeInterop/cinterop/libcurl.def&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        packageName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.jetbrains.handson.http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOpts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-I/path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        includeDirs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="编写-应用程序-代码" tabindex="-1">编写 应用程序 代码 <a class="header-anchor" href="#编写-应用程序-代码" aria-label="Permalink to &quot;编写 应用程序 代码&quot;">​</a></h2><p>现在你已经有了库和相应的 Kotlin 存根，你可以在 应用程序 中使用它们。对于本教程，将 <a href="https://curl.se/libcurl/c/simple.html" target="_blank" rel="noreferrer">simple.c</a> 示例转换为 Kotlin。</p><p>在 <code>src/nativeMain/kotlin/</code> 文件夹中，使用以下代码更新你的 <code>Main.kt</code> 文件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> libcurl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curl_easy_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (curl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        curl_easy_setopt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl, CURLOPT_URL, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        curl_easy_setopt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl, CURLOPT_FOLLOWLOCATION, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curl_easy_perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CURLE_OK) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;curl_easy_perform() failed \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl_easy_strerror</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(res)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toKString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        curl_easy_cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如你所见，Kotlin 版本中消除了 显式 变量 声明，但其他一切与 C 版本基本相同。libcurl 库中你期望的所有调用在等效的 Kotlin 中都可用。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这是一个逐行的字面翻译。你也可以用更具 Kotlin 惯用风格的方式编写此代码。</p></div><h2 id="编译并运行-应用程序" tabindex="-1">编译并运行 应用程序 <a class="header-anchor" href="#编译并运行-应用程序" aria-label="Permalink to &quot;编译并运行 应用程序&quot;">​</a></h2>`,27)),i("ol",null,[s[11]||(s[11]=n('<li><p>编译 应用程序。为此，从 任务 列表中运行 <code>runDebugExecutableNative</code> Gradle 任务，或在终端中使用以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runDebugExecutableNative</span></span></code></pre></div><p>在这种情况下，cinterop 工具生成的部分被隐式包含在 构建 中。</p></li>',1)),i("li",null,[i("p",null,[s[2]||(s[2]=a("如果编译过程中没有错误，点击 ")),s[3]||(s[3]=i("code",null,"main()",-1)),s[4]||(s[4]=a(" 函数旁边的绿色 ")),s[5]||(s[5]=i("strong",null,"Run",-1)),s[6]||(s[6]=a(" 图标，或使用快捷键 ")),t(l,null,{default:p(()=>s[0]||(s[0]=[a("Shift + Cmd + R")])),_:1}),s[7]||(s[7]=a("/")),t(l,null,{default:p(()=>s[1]||(s[1]=[a("Shift + F10")])),_:1}),s[8]||(s[8]=a("。"))]),s[9]||(s[9]=i("p",null,[a("IntelliJ IDEA 将打开 "),i("strong",null,"Run"),a(" 选项卡并显示输出 — "),i("a",{href:"https://example.com/",target:"_blank",rel:"noreferrer"},"example.com"),a(" 的内容：")],-1)),s[10]||(s[10]=i("p",null,[i("img",{src:h,alt:"带 HTML 代码的 应用程序 输出",width:"700"})],-1))])]),s[13]||(s[13]=n('<p>你可以看到实际的输出，因为调用 <code>curl_easy_perform</code> 会将结果打印到标准输出。你可以使用 <code>curl_easy_setopt</code> 隐藏此内容。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>你可以在我们的 <a href="https://github.com/Kotlin/kotlin-hands-on-intro-kotlin-native" target="_blank" rel="noreferrer">GitHub 版本库</a> 中获取完整的 项目 代码。</p></div><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><p>关于 <a href="/kotlin/native-c-interop">Kotlin 与 C 的互操作性</a>，请参阅更多信息。</p>',4))])}const A=k(o,[["render",g]]);export{v as __pageData,A as default};
