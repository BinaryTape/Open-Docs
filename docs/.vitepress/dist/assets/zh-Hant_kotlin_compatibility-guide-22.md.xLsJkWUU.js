import{_ as e,c as t,o as r,ag as a}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlin 2.2 相容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/compatibility-guide-22.md","filePath":"zh-Hant/kotlin/compatibility-guide-22.md","lastUpdated":1754307826000}'),n={name:"zh-Hant/kotlin/compatibility-guide-22.md"};function l(i,o,s,p,c,d){return r(),t("div",null,o[0]||(o[0]=[a('<h1 id="kotlin-2-2-相容性指南" tabindex="-1">Kotlin 2.2 相容性指南 <a class="header-anchor" href="#kotlin-2-2-相容性指南" aria-label="Permalink to &quot;Kotlin 2.2 相容性指南&quot;">​</a></h1><p><em><a href="/zh-Hant/kotlin/kotlin-evolution-principles">保持語言現代化</a></em> 和 <em><a href="/zh-Hant/kotlin/kotlin-evolution-principles">舒適的更新</a></em> 是 Kotlin 語言設計的根本原則。前者指出應移除阻礙語言演進的建構，後者則要求在移除前充分溝通，以使程式碼遷移盡可能順暢。</p><p>儘管大多數語言變更已透過其他管道（例如更新變更日誌或編譯器警告）發布，但本文件將它們全部總結，為從 Kotlin 2.1 遷移到 Kotlin 2.2 提供完整的參考。</p><h2 id="基本術語" tabindex="-1">基本術語 <a class="header-anchor" href="#基本術語" aria-label="Permalink to &quot;基本術語&quot;">​</a></h2><p>在本文件中，我們介紹了幾種相容性：</p><ul><li><em>原始碼</em>：原始碼不相容變更會阻止原本可以正常編譯（沒有錯誤或警告）的程式碼再次編譯。</li><li><em>二進位</em>：如果兩個二進位成品在互換時不會導致載入或連結錯誤，則稱它們為二進位相容。</li><li><em>行為</em>：如果同一程式在套用變更前後表現出不同的行為，則稱該變更為行為不相容。</li></ul><p>請記住，這些定義僅適用於純 Kotlin。從其他語言角度（例如 Java）來看的 Kotlin 程式碼相容性不在本文件範圍內。</p><h2 id="語言" tabindex="-1">語言 <a class="header-anchor" href="#語言" aria-label="Permalink to &quot;語言&quot;">​</a></h2><h3 id="預設為帶註解的-lambda-啟用-invokedynamic" tabindex="-1">預設為帶註解的 Lambda 啟用 invokedynamic <a class="header-anchor" href="#預設為帶註解的-lambda-啟用-invokedynamic" aria-label="Permalink to &quot;預設為帶註解的 Lambda 啟用 invokedynamic&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-278" target="_blank" rel="noreferrer">KTLC-278</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：行為</p><p><strong>簡要總結</strong>：帶註解的 Lambda 運算式現在預設透過 <code>LambdaMetafactory</code> 使用 <code>invokedynamic</code>，使其行為與 Java Lambda 運算式保持一致。這會影響依賴於從生成的 Lambda 類別中檢索註解的基於反射的程式碼。要恢復舊行為，請使用 <code>-Xindy-allow-annotated-lambdas=false</code> 編譯器選項。</p><p><strong>棄用週期</strong>：</p><ul><li>2.2.0：預設啟用帶註解 Lambda 運算式的 <code>invokedynamic</code></li></ul></blockquote><h3 id="禁止在-k2-中對展開型別包含變數的型別別名進行建構函數呼叫和繼承" tabindex="-1">禁止在 K2 中對展開型別包含變數的型別別名進行建構函數呼叫和繼承 <a class="header-anchor" href="#禁止在-k2-中對展開型別包含變數的型別別名進行建構函數呼叫和繼承" aria-label="Permalink to &quot;禁止在 K2 中對展開型別包含變數的型別別名進行建構函數呼叫和繼承&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-4" target="_blank" rel="noreferrer">KTLC-4</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：K2 編譯器不再支援使用展開為帶有變數修飾符（例如 <code>out</code>）的型別別名進行建構函數呼叫和繼承。這解決了原始型別不被允許使用，但透過型別別名卻允許相同用法的不一致問題。若要遷移，請在需要時明確使用原始型別。</p><p><strong>棄用週期</strong>：</p><ul><li>2.0.0：報告對展開為帶有變數修飾符的型別別名進行建構函數呼叫或超型別使用時的警告</li><li>2.2.0：將警告升級為錯誤</li></ul></blockquote><h3 id="禁止從-kotlin-的-getter-產生合成屬性" tabindex="-1">禁止從 Kotlin 的 getter 產生合成屬性 <a class="header-anchor" href="#禁止從-kotlin-的-getter-產生合成屬性" aria-label="Permalink to &quot;禁止從 Kotlin 的 getter 產生合成屬性&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-272" target="_blank" rel="noreferrer">KTLC-272</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：Kotlin 中定義的 getter 不再允許使用合成屬性。這會影響 Java 類別繼承 Kotlin 類別以及處理諸如 <code>java.util.LinkedHashSet</code> 等映射型別的情況。若要遷移，請將屬性存取替換為直接呼叫對應的 getter 函數。</p><p><strong>棄用週期</strong>：</p><ul><li>2.0.0：報告從 Kotlin getter 建立的合成屬性存取警告</li><li>2.2.0：將警告升級為錯誤</li></ul></blockquote><h3 id="變更-jvm-介面函數的預設方法產生方式" tabindex="-1">變更 JVM 介面函數的預設方法產生方式 <a class="header-anchor" href="#變更-jvm-介面函數的預設方法產生方式" aria-label="Permalink to &quot;變更 JVM 介面函數的預設方法產生方式&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-269" target="_blank" rel="noreferrer">KTLC-269</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：二進位</p><p><strong>簡要總結</strong>：在介面中宣告的函數現在編譯為 JVM 預設方法，除非另有配置。這可能導致 Java 程式碼在不相關的超型別定義衝突實作時出現編譯錯誤。此行為由穩定的 <code>-jvm-default</code> 編譯器選項控制，該選項取代了現在已棄用的 <code>-Xjvm-default</code> 選項。若要恢復之前的行為（預設實作僅在 <code>DefaultImpls</code> 類別和子類別中產生），請使用 <code>-jvm-default=disable</code>。</p><p><strong>棄用週期</strong>：</p><ul><li>2.2.0：<code>-jvm-default</code> 編譯器選項預設設定為 <code>enable</code></li></ul></blockquote><h3 id="禁止在註解屬性上使用欄位目標註解" tabindex="-1">禁止在註解屬性上使用欄位目標註解 <a class="header-anchor" href="#禁止在註解屬性上使用欄位目標註解" aria-label="Permalink to &quot;禁止在註解屬性上使用欄位目標註解&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-7" target="_blank" rel="noreferrer">KTLC-7</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：欄位目標註解不再允許用於註解屬性。儘管這些註解沒有可觀察到的效果，但此變更可能會影響依賴於它們的客製化 IR 外掛程式。若要遷移，請從屬性中移除欄位目標註解。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：<code>@JvmField</code> 註解在註解屬性上被棄用並發出警告</li><li>2.1.20：報告對註解屬性上所有欄位目標註解的警告</li><li>2.2.0：將警告升級為錯誤</li></ul></blockquote><h3 id="禁止在型別別名中使用實體化型別參數" tabindex="-1">禁止在型別別名中使用實體化型別參數 <a class="header-anchor" href="#禁止在型別別名中使用實體化型別參數" aria-label="Permalink to &quot;禁止在型別別名中使用實體化型別參數&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-5" target="_blank" rel="noreferrer">KTLC-5</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：型別別名中的型別參數不再允許使用 <code>reified</code> 修飾符。實體化型別參數僅在內聯函數中有效，因此在型別別名中使用它們沒有任何效果。若要遷移，請從 <code>typealias</code> 宣告中移除 <code>reified</code> 修飾符。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：報告型別別名中實體化型別參數的警告</li><li>2.2.0：將警告升級為錯誤</li></ul></blockquote><h3 id="針對-number-和-comparable-正確檢查內聯值類別的型別" tabindex="-1">針對 <code>Number</code> 和 <code>Comparable</code> 正確檢查內聯值類別的型別 <a class="header-anchor" href="#針對-number-和-comparable-正確檢查內聯值類別的型別" aria-label="Permalink to &quot;針對 `Number` 和 `Comparable` 正確檢查內聯值類別的型別&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-21" target="_blank" rel="noreferrer">KTLC-21</a></p><p><strong>組件</strong>：Kotlin/JVM</p><p><strong>不相容變更類型</strong>：行為</p><p><strong>簡要總結</strong>：內聯值類別在 <code>is</code> 和 <code>as</code> 檢查中不再被視為 <code>java.lang.Number</code> 或 <code>java.lang.Comparable</code> 的實作者。這些檢查以前在套用於裝箱的內聯類別時會返回不正確的結果。現在，此最佳化僅適用於基本型別及其包裝類。</p><p><strong>棄用週期</strong>：</p><ul><li>2.2.0：啟用新行為</li></ul></blockquote><h3 id="禁止從間接依賴項中存取不可存取的泛型型別" tabindex="-1">禁止從間接依賴項中存取不可存取的泛型型別 <a class="header-anchor" href="#禁止從間接依賴項中存取不可存取的泛型型別" aria-label="Permalink to &quot;禁止從間接依賴項中存取不可存取的泛型型別&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-3" target="_blank" rel="noreferrer">KTLC-3</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：K2 編譯器現在在使用編譯器不可見的間接依賴項中的型別時會報告錯誤。這會影響諸如 Lambda 參數或泛型型別引數等情況，其中由於缺少依賴項而無法使用引用的型別。</p><p><strong>棄用週期</strong>：</p><ul><li>2.0.0：報告 Lambda 運算式中不可存取的泛型型別和所選用的不可存取泛型型別引數的錯誤；報告 Lambda 運算式中不可存取的非泛型型別和運算式和超型別中不可存取型別引數的警告</li><li>2.1.0：將 Lambda 運算式中不可存取的非泛型型別的警告升級為錯誤</li><li>2.2.0：將運算式型別中不可存取型別引數的警告升級為錯誤</li></ul></blockquote><h3 id="強制執行型別參數邊界的可見性檢查" tabindex="-1">強制執行型別參數邊界的可見性檢查 <a class="header-anchor" href="#強制執行型別參數邊界的可見性檢查" aria-label="Permalink to &quot;強制執行型別參數邊界的可見性檢查&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-274" target="_blank" rel="noreferrer">KTLC-274</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：函數和屬性不再可以使用比宣告本身具有更嚴格可見性的型別參數邊界。這會阻止間接暴露不可存取型別，之前編譯時沒有錯誤，但在某些情況下會導致執行時失敗或 IR 驗證錯誤。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：當型別參數具有從宣告的可見性範圍不可見的邊界時報告警告</li><li>2.2.0：將警告升級為錯誤</li></ul></blockquote><h3 id="在非私有內聯函數中暴露私有型別時報告錯誤" tabindex="-1">在非私有內聯函數中暴露私有型別時報告錯誤 <a class="header-anchor" href="#在非私有內聯函數中暴露私有型別時報告錯誤" aria-label="Permalink to &quot;在非私有內聯函數中暴露私有型別時報告錯誤&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-70916" target="_blank" rel="noreferrer">KT-70916</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：不再允許從非私有內聯函數存取私有型別、函數或屬性。若要遷移，請避免引用私有實體，或者將函數設定為私有，或者移除 <code>inline</code> 修飾符。請注意，移除 <code>inline</code> 會破壞二進位相容性。</p><p><strong>棄用週期</strong>：</p><ul><li>2.2.0：在從非私有內聯函數存取私有型別或成員時報告錯誤</li></ul></blockquote><h3 id="禁止在用作參數預設值的-lambda-中進行非局部返回" tabindex="-1">禁止在用作參數預設值的 Lambda 中進行非局部返回 <a class="header-anchor" href="#禁止在用作參數預設值的-lambda-中進行非局部返回" aria-label="Permalink to &quot;禁止在用作參數預設值的 Lambda 中進行非局部返回&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-286" target="_blank" rel="noreferrer">KTLC-286</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：不再允許在用作參數預設值的 Lambda 運算式中使用非局部返回語句。這種模式之前可以編譯，但會導致執行時崩潰。若要遷移，請重寫 Lambda 運算式以避免非局部返回，或將邏輯移至預設值之外。</p><p><strong>棄用週期</strong>：</p><ul><li>2.2.0：報告在用作參數預設值的 Lambda 運算式中進行非局部返回的錯誤</li></ul></blockquote><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><h3 id="棄用-kotlin-native-throws" tabindex="-1">棄用 <code>kotlin.native.Throws</code> <a class="header-anchor" href="#棄用-kotlin-native-throws" aria-label="Permalink to &quot;棄用 `kotlin.native.Throws`&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-72137" target="_blank" rel="noreferrer">KT-72137</a></p><p><strong>組件</strong>：Kotlin/Native</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：<code>kotlin.native.Throws</code> 已棄用；請改用通用的 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-throws/" target="_blank" rel="noreferrer"><code>kotlin.Throws</code></a> 註解。</p><p><strong>棄用週期</strong>：</p><ul><li>1.9.0：使用 <code>kotlin.native.Throws</code> 時報告警告</li><li>2.2.0：將警告升級為錯誤</li></ul></blockquote><h3 id="棄用-abstractdoubletimesource" tabindex="-1">棄用 <code>AbstractDoubleTimeSource</code> <a class="header-anchor" href="#棄用-abstractdoubletimesource" aria-label="Permalink to &quot;棄用 `AbstractDoubleTimeSource`&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-72137" target="_blank" rel="noreferrer">KT-72137</a></p><p><strong>組件</strong>：kotlin-stdlib</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：<code>AbstractDoubleTimeSource</code> 已棄用；請改用 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.time/-abstract-long-time-source/" target="_blank" rel="noreferrer"><code>AbstractLongTimeSource</code></a>。</p><p><strong>棄用週期</strong>：</p><ul><li>1.8.20：使用 <code>AbstractDoubleTimeSource</code> 時報告警告</li><li>2.2.0：將警告升級為錯誤</li></ul></blockquote><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="更正-kotlincompiletool-中的-setsource-函數以替換原始碼" tabindex="-1">更正 <code>KotlinCompileTool</code> 中的 <code>setSource()</code> 函數以替換原始碼 <a class="header-anchor" href="#更正-kotlincompiletool-中的-setsource-函數以替換原始碼" aria-label="Permalink to &quot;更正 `KotlinCompileTool` 中的 `setSource()` 函數以替換原始碼&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-59632" target="_blank" rel="noreferrer">KT-59632</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：行為</p><p><strong>簡要總結</strong>：<a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-kotlin-compile-tool/#" target="_blank" rel="noreferrer"><code>KotlinCompileTool</code></a> 介面中的 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-kotlin-compile-tool/set-source.html#" target="_blank" rel="noreferrer"><code>setSource()</code></a> 函數現在會替換已配置的原始碼，而不是將其新增到現有原始碼。如果您想在不替換現有原始碼的情況下新增原始碼，請使用 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-kotlin-compile-tool/source.html#" target="_blank" rel="noreferrer"><code>source()</code></a> 函數。</p><p><strong>棄用週期</strong>：</p><ul><li>2.2.0：啟用新行為</li></ul></blockquote><h3 id="棄用-kotlincompilationoutput-resourcesdirprovider-屬性" tabindex="-1">棄用 <code>KotlinCompilationOutput#resourcesDirProvider</code> 屬性 <a class="header-anchor" href="#棄用-kotlincompilationoutput-resourcesdirprovider-屬性" aria-label="Permalink to &quot;棄用 `KotlinCompilationOutput#resourcesDirProvider` 屬性&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-70620" target="_blank" rel="noreferrer">KT-70620</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：<code>KotlinCompilationOutput#resourcesDirProvider</code> 屬性已棄用。請改用 Gradle 建構指令碼中的 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.plugin/-kotlin-source-set/resources.html" target="_blank" rel="noreferrer"><code>KotlinSourceSet.resources</code></a> 來新增額外的資源目錄。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：<code>KotlinCompilationOutput#resourcesDirProvider</code> 被棄用並發出警告</li><li>2.2.0：將警告升級為錯誤</li></ul></blockquote><h3 id="棄用-basekapt-annotationprocessoroptionproviders-屬性" tabindex="-1">棄用 <code>BaseKapt.annotationProcessorOptionProviders</code> 屬性 <a class="header-anchor" href="#棄用-basekapt-annotationprocessoroptionproviders-屬性" aria-label="Permalink to &quot;棄用 `BaseKapt.annotationProcessorOptionProviders` 屬性&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-58009" target="_blank" rel="noreferrer">KT-58009</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：<a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-base-kapt/annotation-processor-option-providers.html#" target="_blank" rel="noreferrer"><code>BaseKapt.annotationProcessorOptionProviders</code></a> 屬性已棄用，取而代之的是 <code>BaseKapt.annotationProcessorOptionsProviders</code>，後者接受 <code>ListProperty&lt;CommandLineArgumentProvider&gt;</code> 而不是 <code>MutableList&lt;Any&gt;</code>。這明確定義了預期的元素型別，並防止由於新增不正確的元素（例如巢狀列表）而導致的執行時失敗。如果您目前的程式碼將列表作為單個元素新增，請將 <code>add()</code> 函數替換為 <code>addAll()</code> 函數。</p><p><strong>棄用週期</strong>：</p><ul><li>2.2.0：在 API 中強制執行新類型</li></ul></blockquote><h3 id="棄用-kotlin-android-extensions-外掛程式" tabindex="-1">棄用 <code>kotlin-android-extensions</code> 外掛程式 <a class="header-anchor" href="#棄用-kotlin-android-extensions-外掛程式" aria-label="Permalink to &quot;棄用 `kotlin-android-extensions` 外掛程式&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-72341/" target="_blank" rel="noreferrer">KT-72341</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：<code>kotlin-android-extensions</code> 外掛程式已棄用。請針對 <code>Parcelable</code> 實作生成器使用單獨的外掛程式 <a href="https://plugins.gradle.org/plugin/org.jetbrains.kotlin.plugin.parcelize" target="_blank" rel="noreferrer"><code>kotlin-parcelize</code></a>，並針對合成視圖使用 Android Jetpack 的 <a href="https://developer.android.com/topic/libraries/view-binding" target="_blank" rel="noreferrer">視圖綁定</a>。</p><p><strong>棄用週期</strong>：</p><ul><li>1.4.20：外掛程式已棄用</li><li>2.1.20：引入配置錯誤，不執行外掛程式碼</li><li>2.2.0：外掛程式碼已移除</li></ul></blockquote><h3 id="棄用-kotlinoptions-dsl" tabindex="-1">棄用 <code>kotlinOptions</code> DSL <a class="header-anchor" href="#棄用-kotlinoptions-dsl" aria-label="Permalink to &quot;棄用 `kotlinOptions` DSL&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-54110" target="_blank" rel="noreferrer">KT-54110</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：透過 <code>kotlinOptions</code> DSL 和相關的 <code>KotlinCompile&lt;KotlinOptions&gt;</code> 任務介面配置編譯器選項的功能已棄用，取而代之的是新的 <code>compilerOptions</code> DSL。作為此次棄用的一部分，<code>kotlinOptions</code> 介面中的所有屬性現在也都被單獨標記為已棄用。若要遷移，請使用 <code>compilerOptions</code> DSL 配置編譯器選項。有關遷移指南，請參閱<a href="/zh-Hant/kotlin/gradle-compiler-options#migrate-from-kotlinoptions-to-compileroptions">從 <code>kotlinOptions {}</code> 遷移到 <code>compilerOptions {}</code></a>。</p><p><strong>棄用週期</strong>：</p><ul><li>2.0.0：報告 <code>kotlinOptions</code> DSL 的警告</li><li>2.2.0：將警告升級為錯誤並棄用 <code>kotlinOptions</code> 中的所有屬性</li></ul></blockquote><h3 id="移除-kotlin-incremental-useclasspathsnapshot-屬性" tabindex="-1">移除 <code>kotlin.incremental.useClasspathSnapshot</code> 屬性 <a class="header-anchor" href="#移除-kotlin-incremental-useclasspathsnapshot-屬性" aria-label="Permalink to &quot;移除 `kotlin.incremental.useClasspathSnapshot` 屬性&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-62963" target="_blank" rel="noreferrer">KT-62963</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：<code>kotlin.incremental.useClasspathSnapshot</code> Gradle 屬性已移除。此屬性控制著已棄用的基於 JVM 歷史的增量編譯模式，該模式已被 Kotlin 1.8.20 以來預設啟用的基於類別路徑的方法所取代。</p><p><strong>棄用週期</strong>：</p><ul><li>2.0.20：棄用 <code>kotlin.incremental.useClasspathSnapshot</code> 屬性並發出警告</li><li>2.2.0：移除該屬性</li></ul></blockquote><h3 id="kotlin-指令碼棄用" tabindex="-1">Kotlin 指令碼棄用 <a class="header-anchor" href="#kotlin-指令碼棄用" aria-label="Permalink to &quot;Kotlin 指令碼棄用&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-71685" target="_blank" rel="noreferrer">KT-71685</a>、<a href="https://youtrack.jetbrains.com/issue/KT-75632/" target="_blank" rel="noreferrer">KT-75632</a>、<a href="https://youtrack.jetbrains.com/issue/KT-76196/" target="_blank" rel="noreferrer">KT-76196</a>。</p><p><strong>組件</strong>：指令碼</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：Kotlin 2.2.0 棄用以下支援：</p><ul><li>REPL：要繼續透過 <code>kotlinc</code> 使用 REPL，請使用 <code>-Xrepl</code> 編譯器選項選擇啟用。</li><li>JSR-223：由於 <a href="https://jcp.org/en/jsr/detail?id=223" target="_blank" rel="noreferrer">JSR</a> 處於 <strong>Withdrawn (已撤回)</strong> 狀態。JSR-223 實作繼續適用於語言版本 1.9，但未來沒有計畫遷移到 K2 編譯器。</li><li><code>KotlinScriptMojo</code> Maven 外掛程式。如果您繼續使用它，將會看到編譯器警告。</li></ul><p>更多資訊請參閱我們的<a href="https://blog.jetbrains.com/kotlin/2024/11/state-of-kotlin-scripting-2024/" target="_blank" rel="noreferrer">部落格文章</a>。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：棄用 <code>kotlinc</code> 中 REPL 的使用並發出警告</li><li>2.2.0：要透過 <code>kotlinc</code> 使用 REPL，請使用 <code>-Xrepl</code> 編譯器選項選擇啟用；棄用 JSR-223，可透過切換到語言版本 1.9 恢復支援；棄用 <code>KotlinScriptMojo</code> Maven 外掛程式</li></ul></blockquote><h3 id="棄用消歧義分類器屬性" tabindex="-1">棄用消歧義分類器屬性 <a class="header-anchor" href="#棄用消歧義分類器屬性" aria-label="Permalink to &quot;棄用消歧義分類器屬性&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-58231" target="_blank" rel="noreferrer">KT-58231</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：用於控制 Kotlin Gradle 外掛程式如何消除原始碼集名稱和 IDE 匯入歧義的選項已過時。因此，<code>KotlinTarget</code> 介面中的以下屬性現在已棄用：</p><ul><li><code>useDisambiguationClassifierAsSourceSetNamePrefix</code></li><li><code>overrideDisambiguationClassifierOnIdeImport</code></li></ul><p><strong>棄用週期</strong>：</p><ul><li>2.0.0：使用 Gradle 屬性時報告警告</li><li>2.1.0：將此警告升級為錯誤</li><li>2.2.0：移除 Gradle 屬性</li></ul></blockquote><h3 id="棄用共通化參數" tabindex="-1">棄用共通化參數 <a class="header-anchor" href="#棄用共通化參數" aria-label="Permalink to &quot;棄用共通化參數&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-75161" target="_blank" rel="noreferrer">KT-75161</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：Kotlin Gradle 外掛程式中的實驗性共通化模式參數已棄用。這些參數可能產生無效的編譯成品，然後這些成品會被快取。若要刪除受影響的成品：</p><ol><li><p>從您的 <code>gradle.properties</code> 檔案中移除以下選項：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.enableOptimisticNumberCommonization</span></span>\n<span class="line"><span>kotlin.mpp.enablePlatformIntegerCommonization</span></span></code></pre></div></li><li><p>清除 <code>~/.konan/*/klib/commonized</code> 目錄中的共通化快取，或執行以下指令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cleanNativeDistributionCommonization</span></span></code></pre></div></li></ol><p><strong>棄用週期</strong>：</p><ul><li>2.2.0：棄用共通化參數並發出錯誤</li><li>2.2.20：移除共通化參數</li></ul></blockquote><h3 id="棄用對傳統中繼資料編譯的支援" tabindex="-1">棄用對傳統中繼資料編譯的支援 <a class="header-anchor" href="#棄用對傳統中繼資料編譯的支援" aria-label="Permalink to &quot;棄用對傳統中繼資料編譯的支援&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-61817" target="_blank" rel="noreferrer">KT-61817</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：用於設定分層結構並在通用原始碼集和中間原始碼集之間建立中間原始碼集的選項已過時。以下編譯器選項已移除：</p><ul><li><code>isCompatibilityMetadataVariantEnabled</code></li><li><code>withGranularMetadata</code></li><li><code>isKotlinGranularMetadataEnabled</code></li></ul><p><strong>棄用週期</strong>：</p><ul><li>2.2.0：從 Kotlin Gradle 外掛程式中移除編譯器選項</li></ul></blockquote><h3 id="棄用-kotlincompilation-source-api" tabindex="-1">棄用 <code>KotlinCompilation.source</code> API <a class="header-anchor" href="#棄用-kotlincompilation-source-api" aria-label="Permalink to &quot;棄用 `KotlinCompilation.source` API&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-64991" target="_blank" rel="noreferrer">KT-64991</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：允許將 Kotlin 原始碼集直接新增到 Kotlin 編譯的 <code>KotlinCompilation.source</code> API 存取已被棄用。</p><p><strong>棄用週期</strong>：</p><ul><li>1.9.0：使用 <code>KotlinCompilation.source</code> 時報告警告</li><li>1.9.20：將此警告升級為錯誤</li><li>2.2.0：從 Kotlin Gradle 外掛程式中移除 <code>KotlinCompilation.source</code>；嘗試使用它會導致建構指令碼編譯期間的「unresolved reference (未解析的引用)」錯誤</li></ul></blockquote><h3 id="棄用目標預設-api" tabindex="-1">棄用目標預設 API <a class="header-anchor" href="#棄用目標預設-api" aria-label="Permalink to &quot;棄用目標預設 API&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-71698" target="_blank" rel="noreferrer">KT-71698</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：Kotlin Multiplatform 目標的目標預設已過時；<code>jvm()</code> 或 <code>iosSimulatorArm64()</code> 等目標 DSL 函數現在涵蓋相同的用例。所有與預設相關的 API 均已棄用：</p><ul><li><code>org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension</code> 中的 <code>presets</code> 屬性</li><li><code>org.jetbrains.kotlin.gradle.plugin.KotlinTargetPreset</code> 介面及其所有繼承者</li><li><code>fromPreset</code> 的多載</li></ul><p><strong>棄用週期</strong>：</p><ul><li>1.9.20：報告任何預設相關 API 使用的警告</li><li>2.0.0：將此警告升級為錯誤</li><li>2.2.0：從 Kotlin Gradle 外掛程式的公共 API 中移除預設相關 API；仍在使用它的原始碼會因「unresolved reference (未解析的引用)」錯誤而失敗，而二進位檔（例如 Gradle 外掛程式）則可能因連結錯誤而失敗，除非針對最新版本的 Kotlin Gradle 外掛程式重新編譯</li></ul></blockquote><h3 id="棄用-apple-目標捷徑" tabindex="-1">棄用 Apple 目標捷徑 <a class="header-anchor" href="#棄用-apple-目標捷徑" aria-label="Permalink to &quot;棄用 Apple 目標捷徑&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-70615" target="_blank" rel="noreferrer">KT-70615</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：Kotlin Multiplatform DSL 中的 <code>ios()</code>、<code>watchos()</code> 和 <code>tvos()</code> 目標捷徑已棄用。這些捷徑旨在為 Apple 目標部分建立原始碼集層次結構。Kotlin Multiplatform Gradle 外掛程式現在提供了一個內建的層次結構範本。您可以指定目標列表，然後外掛程式會自動為其設定中間原始碼集，而不是使用捷徑。</p><p><strong>棄用週期</strong>：</p><ul><li>1.9.20：使用目標捷徑時報告警告；預設情況下啟用預設層次結構範本</li><li>2.1.0：使用目標捷徑時報告錯誤</li><li>2.2.0：從 Kotlin Multiplatform Gradle 外掛程式中移除目標捷徑 DSL</li></ul></blockquote><h3 id="棄用-publishalllibraryvariants-函數" tabindex="-1">棄用 <code>publishAllLibraryVariants()</code> 函數 <a class="header-anchor" href="#棄用-publishalllibraryvariants-函數" aria-label="Permalink to &quot;棄用 `publishAllLibraryVariants()` 函數&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-60623" target="_blank" rel="noreferrer">KT-60623</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：<code>publishAllLibraryVariants()</code> 函數已棄用。它旨在發布 Android 目標的所有建構變體。現在不建議使用此方法，因為它可能導致變體解析問題，尤其是在使用多個 Flavor 和建構類型時。請改用指定建構變體的 <code>publishLibraryVariants()</code> 函數。</p><p><strong>棄用週期</strong>：</p><ul><li>2.2.0：<code>publishAllLibraryVariants()</code> 已棄用</li></ul></blockquote><h3 id="棄用-android-目標" tabindex="-1">棄用 <code>android</code> 目標 <a class="header-anchor" href="#棄用-android-目標" aria-label="Permalink to &quot;棄用 `android` 目標&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-71608" target="_blank" rel="noreferrer">KT-71608</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：<code>android</code> 目標名稱在目前的 Kotlin DSL 中已棄用。請改用 <code>androidTarget</code>。</p><p><strong>棄用週期</strong>：</p><ul><li>1.9.0：在 Kotlin Multiplatform 專案中使用 <code>android</code> 名稱時引入棄用警告</li><li>2.1.0：將此警告升級為錯誤</li><li>2.2.0：從 Kotlin Multiplatform Gradle 外掛程式中移除 <code>android</code> 目標 DSL</li></ul></blockquote><h3 id="棄用-cinteropprocess-中的-konanversion" tabindex="-1">棄用 <code>CInteropProcess</code> 中的 <code>konanVersion</code> <a class="header-anchor" href="#棄用-cinteropprocess-中的-konanversion" aria-label="Permalink to &quot;棄用 `CInteropProcess` 中的 `konanVersion`&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-71069" target="_blank" rel="noreferrer">KT-71069</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：<code>CInteropProcess</code> 任務中的 <code>konanVersion</code> 屬性已棄用。請改用 <code>CInteropProcess.kotlinNativeVersion</code>。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：使用 <code>konanVersion</code> 屬性時報告警告</li><li>2.2.0：將此警告升級為錯誤</li><li>2.3.0：從 Kotlin Gradle 外掛程式中移除 <code>konanVersion</code> 屬性</li></ul></blockquote><h3 id="棄用-cinteropprocess-中的-destinationdir" tabindex="-1">棄用 <code>CInteropProcess</code> 中的 <code>destinationDir</code> <a class="header-anchor" href="#棄用-cinteropprocess-中的-destinationdir" aria-label="Permalink to &quot;棄用 `CInteropProcess` 中的 `destinationDir`&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-71068" target="_blank" rel="noreferrer">KT-71068</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：<code>CInteropProcess</code> 任務中的 <code>destinationDir</code> 屬性已棄用。請改用 <code>CInteropProcess.destinationDirectory.set()</code> 函數。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：使用 <code>destinationDir</code> 屬性時報告警告</li><li>2.2.0：將此警告升級為錯誤</li><li>2.3.0：從 Kotlin Gradle 外掛程式中移除 <code>destinationDir</code> 屬性</li></ul></blockquote><h3 id="棄用-kotlinartifacts-api" tabindex="-1">棄用 <code>kotlinArtifacts</code> API <a class="header-anchor" href="#棄用-kotlinartifacts-api" aria-label="Permalink to &quot;棄用 `kotlinArtifacts` API&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-74953" target="_blank" rel="noreferrer">KT-74953</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要總結</strong>：實驗性的 <code>kotlinArtifacts</code> API 已棄用。請使用 Kotlin Gradle 外掛程式中現有的 DSL 來<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html" target="_blank" rel="noreferrer">建構最終的原生二進位檔</a>。如果這不足以進行遷移，請在<a href="https://youtrack.jetbrains.com/issue/KT-74953" target="_blank" rel="noreferrer">此 YT 問題</a>中留言。</p><p><strong>棄用週期</strong>：</p><ul><li>2.2.0：使用 <code>kotlinArtifacts</code> API 時報告警告</li><li>2.3.0：將此警告升級為錯誤</li></ul></blockquote>',72)]))}const h=e(n,[["render",l]]);export{u as __pageData,h as default};
