import{_ as t,a as e,b as l,c as n}from"./chunks/wasm-composeapp-browser.n73x6mgF.js";import{_ as p,a as r}from"./chunks/wasm-custom-formatters-firefox.C2LVO8ja.js";import{_ as o,a as h,b as k,c as d,d as c,e as g}from"./chunks/wasm-debug-scope.e8jm_6Gj.js";import{_ as m}from"./chunks/slack.7XnOPcJK.js";import{_ as E,c as u,o as b,ag as i,j as a,a as y}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"偵錯 Kotlin/Wasm 程式碼","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/wasm-debugging.md","filePath":"zh-Hant/kotlin/wasm-debugging.md","lastUpdated":1754307826000}'),f={name:"zh-Hant/kotlin/wasm-debugging.md"};function _(v,s,F,w,C,D){return b(),u("div",null,s[0]||(s[0]=[i('<h1 id="偵錯-kotlin-wasm-程式碼" tabindex="-1">偵錯 Kotlin/Wasm 程式碼 <a class="header-anchor" href="#偵錯-kotlin-wasm-程式碼" aria-label="Permalink to &quot;偵錯 Kotlin/Wasm 程式碼&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasm 處於 <a href="/zh-Hant/kotlin/components-stability">Alpha</a> 階段。它隨時可能更改。</p></div><p>本教學示範如何使用瀏覽器偵錯以 Kotlin/Wasm 建置的 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 應用程式。</p><h2 id="開始之前" tabindex="-1">開始之前 <a class="header-anchor" href="#開始之前" aria-label="Permalink to &quot;開始之前&quot;">​</a></h2><p>使用 Kotlin Multiplatform wizard 建立專案：</p><ol><li><p>開啟 <a href="https://kmp.jetbrains.com/#newProject" target="_blank" rel="noreferrer">Kotlin Multiplatform wizard</a>。</p></li><li><p>在 <strong>New Project</strong> 標籤頁中，依偏好變更專案名稱與 ID。在本教學中，我們將名稱設定為「WasmDemo」，ID 設定為「wasm.project.demo」。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>這些是專案目錄的名稱和 ID。您也可以保留它們不變。</p></div></li><li><p>選取 <strong>Web</strong> 選項。請確保沒有選取其他選項。</p></li><li><p>按一下 <strong>Download</strong> 按鈕並解壓縮產生的壓縮檔。</p><p><img src="'+t+'" alt="Kotlin Multiplatform 專案建立精靈" width="450"></p></li></ol><h2 id="在-intellij-idea-中開啟專案" tabindex="-1">在 IntelliJ IDEA 中開啟專案 <a class="header-anchor" href="#在-intellij-idea-中開啟專案" aria-label="Permalink to &quot;在 IntelliJ IDEA 中開啟專案&quot;">​</a></h2><ol><li>下載並安裝最新版 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a>。</li><li>在 IntelliJ IDEA 的歡迎畫面中，按一下 <strong>Open</strong> 或在選單列中選取 <strong>File | Open</strong>。</li><li>導覽至解壓縮後的「WasmDemo」資料夾，然後按一下 <strong>Open</strong>。</li></ol><h2 id="執行應用程式" tabindex="-1">執行應用程式 <a class="header-anchor" href="#執行應用程式" aria-label="Permalink to &quot;執行應用程式&quot;">​</a></h2><ol><li><p>在 IntelliJ IDEA 中，透過選取 <strong>View</strong> | <strong>Tool Windows</strong> | <strong>Gradle</strong> 開啟 <strong>Gradle</strong> 工具視窗。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您需要至少 Java 11 作為您的 Gradle JVM，以便任務成功載入。</p></div></li><li><p>在 <strong>composeApp</strong> | <strong>Tasks</strong> | <strong>kotlin browser</strong> 中，選取並執行 <strong>wasmJsBrowserDevelopmentRun</strong> 任務。</p><p><img src="'+e+'" alt="執行 Gradle 任務" width="450"></p><p>或者，您可以在 <code>WasmDemo</code> 根目錄下的終端機中執行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmJsBrowserDevelopmentRun</span></span></code></pre></div></li><li><p>應用程式啟動後，在您的瀏覽器中開啟以下 URL：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http://localhost:8080/</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>連接埠號碼可能不同，因為 8080 連接埠可能不可用。您可以在 Gradle 建置控制台中找到實際的連接埠號碼。</p></div><p>您會看到一個「Click me!」按鈕。點擊它：</p><p><img src="'+l+'" alt="點擊我" width="550"></p><p>現在您會看到 Compose Multiplatform 標誌：</p><p><img src="'+n+'" alt="瀏覽器中的 Compose 應用程式" width="550"></p></li></ol><h2 id="在瀏覽器中偵錯" tabindex="-1">在瀏覽器中偵錯 <a class="header-anchor" href="#在瀏覽器中偵錯" aria-label="Permalink to &quot;在瀏覽器中偵錯&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>目前，偵錯僅在您的瀏覽器中可用。未來，您將能夠在 <a href="https://youtrack.jetbrains.com/issue/KT-64683/Kotlin-Wasm-debugging-in-IntelliJ-IDEA" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 中偵錯您的程式碼。</p></div><p>您可以直接在瀏覽器中偵錯此 Compose Multiplatform 應用程式，無需額外配置。</p><p>然而，對於其他專案，您可能需要在 Gradle 建置檔案中配置額外設定。有關如何配置瀏覽器以進行偵錯的更多資訊，請展開下一節。</p>',14),a("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"配置您的瀏覽器以進行偵錯",tabindex:"-1"},[y("配置您的瀏覽器以進行偵錯 "),a("a",{class:"header-anchor",href:"#配置您的瀏覽器以進行偵錯","aria-label":'Permalink to "配置您的瀏覽器以進行偵錯 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i(`<h4 id="啟用專案原始碼的存取" tabindex="-1">啟用專案原始碼的存取 <a class="header-anchor" href="#啟用專案原始碼的存取" aria-label="Permalink to &quot;啟用專案原始碼的存取&quot;">​</a></h4><p>預設情況下，瀏覽器無法存取偵錯所需的部分專案原始碼。為了提供存取權，您可以配置 Webpack DevServer 來提供這些原始碼。在 <code>ComposeApp</code> 目錄中，將以下程式碼片段新增到您的 <code>build.gradle.kts</code> 檔案中。</p><p>將此匯入作為頂層宣告新增：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpackConfig</span></span></code></pre></div><p>將此程式碼片段新增到 <code>commonWebpackConfig{}</code> 區塊內，該區塊位於 <code>kotlin{}</code> 中的 <code>wasmJs{}</code> 目標 DSL 和 <code>browser{}</code> 平台 DSL 中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">devServer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (devServer ?: KotlinWebpackConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DevServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    static </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (static ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Serve sources to debug inside browser</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.rootDir.path)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.projectDir.path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>結果程式碼區塊如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalWasmDsl::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        moduleName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composeApp&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            commonWebpackConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                outputFileName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composeApp.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                devServer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (devServer ?: KotlinWebpackConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DevServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    static </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (static ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // Serve sources to debug inside browser</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.rootDir.path)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.projectDir.path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>目前，您無法偵錯函式庫原始碼。<a href="https://youtrack.jetbrains.com/issue/KT-64685" target="_blank" rel="noreferrer">我們將在未來支援此功能</a>。</p></div><h4 id="使用自訂格式化程式" tabindex="-1">使用自訂格式化程式 <a class="header-anchor" href="#使用自訂格式化程式" aria-label="Permalink to &quot;使用自訂格式化程式&quot;">​</a></h4><p>自訂格式化程式有助於在偵錯 Kotlin/Wasm 程式碼時，以更使用者友善且易於理解的方式顯示和定位變數值。</p><p>自訂格式化程式在開發版本中預設啟用，因此您不需要額外的 Gradle 配置。</p><p>此功能在 Firefox 和基於 Chromium 的瀏覽器中受到支援，因為它使用了 <a href="https://firefox-source-docs.mozilla.org/devtools-user/custom_formatters/index.html" target="_blank" rel="noreferrer">自訂格式化程式 API</a>。</p><p>若要使用此功能，請確保在您瀏覽器的開發人員工具中啟用自訂格式化程式：</p><ul><li><p>在 Chrome DevTools 中，於 <strong>Settings | Preferences | Console</strong> 尋找自訂格式化程式的核取方塊：</p><p><img src="`+p+'" alt="在 Chrome 中啟用自訂格式化程式" width="400"></p></li><li><p>在 Firefox DevTools 中，於 <strong>Settings | Advanced settings</strong> 尋找自訂格式化程式的核取方塊：</p><p><img src="'+r+`" alt="在 Firefox 中啟用自訂格式化程式" width="400"></p></li></ul><p>自訂格式化程式適用於 Kotlin/Wasm 開發版本。如果您對生產版本有特定要求，您需要相應地調整您的 Gradle 配置。將以下編譯器選項新增到 <code>wasmJs {}</code> 區塊中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xwasm-debugger-custom-formatters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>啟用自訂格式化程式後，您可以繼續進行偵錯教學。</p><h3 id="偵錯您的-kotlin-wasm-應用程式" tabindex="-1">偵錯您的 Kotlin/Wasm 應用程式 <a class="header-anchor" href="#偵錯您的-kotlin-wasm-應用程式" aria-label="Permalink to &quot;偵錯您的 Kotlin/Wasm 應用程式&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>本教學使用 Chrome 瀏覽器，但您應該能夠使用其他瀏覽器遵循這些步驟。如需更多資訊，請參閱 <a href="/zh-Hant/kotlin/wasm-troubleshooting#browser-versions">Browser versions</a>。</p></div><ol><li><p>在應用程式的瀏覽器視窗中，按右鍵並選取 <strong>Inspect</strong> 動作以存取開發人員工具。或者，您可以使用 <strong>F12</strong> 快捷鍵或選取 <strong>View | Developer | Developer Tools</strong>。</p></li><li><p>切換到 <strong>Sources</strong> 標籤頁並選取要偵錯的 Kotlin 檔案。在本教學中，我們將使用 <code>Greeting.kt</code> 檔案。</p></li><li><p>按一下行號以在您要檢查的程式碼上設定中斷點。只有數字顏色較深的行可以設定中斷點。</p><p><img src="`+o+'" alt="設定中斷點" width="700"></p></li><li><p>按一下 <strong>Click me!</strong> 按鈕與應用程式互動。此動作會觸發程式碼執行，當執行到達中斷點時，偵錯程式會暫停。</p></li><li><p>在偵錯窗格中，使用偵錯控制按鈕檢查中斷點處的變數和程式碼執行：</p><ul><li><img src="'+h+'" alt="逐步執行" width="30" type="joined"> 逐步執行以更深入地調查函式。</li><li><img src="'+k+'" alt="跳過" width="30" type="joined"> 跳過以執行目前行並在下一行暫停。</li><li><img src="'+d+'" alt="跳出" width="30" type="joined"> 跳出以執行程式碼直到其退出目前函式。</li></ul><p><img src="'+c+'" alt="偵錯控制" width="450"></p></li><li><p>檢查 <strong>Call stack</strong> 和 <strong>Scope</strong> 窗格以追蹤函式呼叫序列並確定任何錯誤的位置。</p><p><img src="'+g+'" alt="檢查呼叫堆疊" width="450"></p><p>為了更好地視覺化變數值，請參閱 <a href="#configure-your-browser-for-debugging">配置您的瀏覽器以進行偵錯</a> 區段中的 <em>使用自訂格式化程式</em>。</p></li><li><p>更改您的程式碼並再次<a href="#run-the-application">執行應用程式</a>以驗證一切是否按預期運作。</p></li><li><p>按一下有中斷點的行號以移除中斷點。</p></li></ol><h2 id="提供回饋" tabindex="-1">提供回饋 <a class="header-anchor" href="#提供回饋" aria-label="Permalink to &quot;提供回饋&quot;">​</a></h2><p>我們非常感謝您對偵錯體驗提出的任何回饋！</p><ul><li><img src="'+m+'" alt="Slack" width="25" type="joined"> Slack: <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">取得 Slack 邀請</a> 並在我們的 <a href="https://kotlinlang.slack.com/archives/CDFP59223" target="_blank" rel="noreferrer">#webassembly</a> 頻道中直接向開發人員提供您的回饋。</li><li>在 <a href="https://youtrack.jetbrains.com/issue/KT-56492" target="_blank" rel="noreferrer">YouTrack</a> 中提供您的回饋。</li></ul><h2 id="接下來是什麼" tabindex="-1">接下來是什麼？ <a class="header-anchor" href="#接下來是什麼" aria-label="Permalink to &quot;接下來是什麼？&quot;">​</a></h2><ul><li>在此 <a href="https://www.youtube.com/watch?v=t3FUWfJWrjU&amp;t=2703s" target="_blank" rel="noreferrer">YouTube 影片</a> 中查看 Kotlin/Wasm 偵錯的實際操作。</li><li>嘗試我們 <code>kotlin-wasm-examples</code> 儲存庫中的 Kotlin/Wasm 範例： <ul><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-imageviewer" target="_blank" rel="noreferrer">Compose image viewer</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-jetsnack" target="_blank" rel="noreferrer">Jetsnack application</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/nodejs-example" target="_blank" rel="noreferrer">Node.js example</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/wasi-example" target="_blank" rel="noreferrer">WASI example</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-example" target="_blank" rel="noreferrer">Compose example</a></li></ul></li></ul>',26)]))}const K=E(f,[["render",_]]);export{I as __pageData,K as default};
