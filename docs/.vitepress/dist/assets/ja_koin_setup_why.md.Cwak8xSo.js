import{_ as s,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"Koinを選ぶ理由","description":"","frontmatter":{"title":"Koinを選ぶ理由"},"headers":[],"relativePath":"ja/koin/setup/why.md","filePath":"ja/koin/setup/why.md","lastUpdated":1748365453000}'),t={name:"ja/koin/setup/why.md"};function p(e,i,h,o,k,r){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="koinを選ぶ理由" tabindex="-1">Koinを選ぶ理由 <a class="header-anchor" href="#koinを選ぶ理由" aria-label="Permalink to &quot;Koinを選ぶ理由&quot;">​</a></h1><p>Koinは、あらゆるKotlinアプリケーション（マルチプラットフォーム、Android、バックエンドなど）に依存性注入を組み込むための、簡単で効率的な方法を提供します。</p><p>Koinの目標は次のとおりです。</p><ul><li>スマートなAPIで依存性注入のインフラストラクチャを簡素化する</li><li>読みやすく、使いやすいKotlin DSLにより、あらゆる種類のアプリケーションを作成できるようにする</li><li>AndroidエコシステムからKtorのようなバックエンドのニーズまで、さまざまな種類の統合を提供する</li><li>アノテーションとともに使用できるようにする</li></ul><h2 id="koinの概要" tabindex="-1">Koinの概要 <a class="header-anchor" href="#koinの概要" aria-label="Permalink to &quot;Koinの概要&quot;">​</a></h2><h3 id="kotlin開発を簡単かつ生産的にする" tabindex="-1">Kotlin開発を簡単かつ生産的にする <a class="header-anchor" href="#kotlin開発を簡単かつ生産的にする" aria-label="Permalink to &quot;Kotlin開発を簡単かつ生産的にする&quot;">​</a></h3><p>Koinは、ツールではなくアプリケーションに集中できるように設計された、スマートなKotlin依存性注入ライブラリです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPresenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repository : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// just declare it </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyPresenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Koinは、Kotlin関連技術をアプリケーションに構築、統合し、ビジネスを簡単にスケールさせるためのシンプルなツールとAPIを提供します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Just start Koin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="android対応" tabindex="-1">Android対応 <a class="header-anchor" href="#android対応" aria-label="Permalink to &quot;Android対応&quot;">​</a></h3><p>Kotlin言語のおかげで、KoinはAndroidプラットフォームを拡張し、元のプラットフォームの一部として新機能を提供します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Koinは、<code>by inject()</code>や<code>by viewModel()</code>を使用するだけで、Androidコンポーネント内のどこからでも依存性を取得できる、簡単で強力なAPIを提供します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AppCompatActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myPresenter : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyPresenter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlinマルチプラットフォームを強化する" tabindex="-1">Kotlinマルチプラットフォームを強化する <a class="header-anchor" href="#kotlinマルチプラットフォームを強化する" aria-label="Permalink to &quot;Kotlinマルチプラットフォームを強化する&quot;">​</a></h3><p>モバイルプラットフォーム間でコードを共有することは、Kotlinマルチプラットフォームの主要なユースケースの1つです。Kotlin Multiplatform Mobileを使用すると、クロスプラットフォームのモバイルアプリケーションを構築し、AndroidとiOS間で共通コードを共有できます。</p><p>Koinはマルチプラットフォーム対応の依存性注入を提供し、ネイティブモバイルアプリケーション、およびウェブ/バックエンドアプリケーション全体でコンポーネントを構築するのに役立ちます。</p><h3 id="パフォーマンスと生産性" tabindex="-1">パフォーマンスと生産性 <a class="header-anchor" href="#パフォーマンスと生産性" aria-label="Permalink to &quot;パフォーマンスと生産性&quot;">​</a></h3><p>Koinは、使用法と実行において簡単明瞭に設計された、純粋なKotlinフレームワークです。使いやすく、コンパイル時間に影響を与えず、追加のプラグイン設定も必要ありません。</p><h2 id="koin-依存性注入フレームワーク" tabindex="-1">Koin: 依存性注入フレームワーク <a class="header-anchor" href="#koin-依存性注入フレームワーク" aria-label="Permalink to &quot;Koin: 依存性注入フレームワーク&quot;">​</a></h2><p>KoinはKotlin向けの一般的な依存性注入（DI）フレームワークであり、最小限のボイラープレートコードでアプリケーションの依存性を管理するための、近代的で軽量なソリューションを提供します。</p><h3 id="依存性注入-vs-サービスロケーター" tabindex="-1">依存性注入 vs. サービスロケーター <a class="header-anchor" href="#依存性注入-vs-サービスロケーター" aria-label="Permalink to &quot;依存性注入 vs. サービスロケーター&quot;">​</a></h3><p>Koinはサービスロケーターパターンに似ているように見えるかもしれませんが、それを明確に区別する重要な違いがあります。</p><ul><li><p><strong>サービスロケーター</strong>: サービスロケーターは、本質的に利用可能なサービスのレジストリであり、必要に応じてサービスのインスタンスを要求できます。これは、これらのインスタンスの作成と管理を担当し、多くの場合、静的でグローバルなレジストリを使用します。</p></li><li><p><strong>依存性注入</strong>: 対照的に、Koinは純粋な依存性注入フレームワークです。Koinを使用すると、モジュール内で依存性を宣言し、Koinがオブジェクトの作成とワイヤリングを処理します。独自のスコープを持つ複数の独立したモジュールの作成を可能にし、依存性管理をよりモジュール化し、潜在的な競合を回避します。</p></li></ul><h3 id="koinのアプローチ-柔軟性とベストプラクティスの融合" tabindex="-1">Koinのアプローチ：柔軟性とベストプラクティスの融合 <a class="header-anchor" href="#koinのアプローチ-柔軟性とベストプラクティスの融合" aria-label="Permalink to &quot;Koinのアプローチ：柔軟性とベストプラクティスの融合&quot;">​</a></h3><p>KoinはDIとサービスロケーターパターンの両方をサポートしており、開発者に柔軟性を提供します。しかし、特に依存性がコンストラクタパラメータとして渡されるコンストラクタインジェクションなど、DIの使用を強く推奨しています。このアプローチは、より良いテスト容易性を促進し、コードを理解しやすくします。</p><p>Koinの設計思想は、シンプルさとセットアップの容易さを中心としつつ、必要に応じて複雑な設定も可能にすることです。Koinを使用することで、開発者は依存性を効果的に管理でき、ほとんどのシナリオではDIが推奨され、好ましいアプローチとなります。</p><h3 id="透明性と設計概要" tabindex="-1">透明性と設計概要 <a class="header-anchor" href="#透明性と設計概要" aria-label="Permalink to &quot;透明性と設計概要&quot;">​</a></h3><p>Koinは、依存性注入（DI）とサービスロケーター（SL）パターンの両方をサポートする、汎用的な制御の反転（IoC）コンテナとして設計されています。Koinがどのように動作するかを明確に理解し、効果的に使用するためのガイドとして、次の側面を探ってみましょう。</p><h4 id="koinがdiとslのバランスをどのように取るか" tabindex="-1">KoinがDIとSLのバランスをどのように取るか <a class="header-anchor" href="#koinがdiとslのバランスをどのように取るか" aria-label="Permalink to &quot;KoinがDIとSLのバランスをどのように取るか&quot;">​</a></h4><p>KoinはDIとSLの両方の要素を組み合わせており、これがフレームワークの使用方法に影響を与える可能性があります。</p><ol><li><p><strong>グローバルコンテキストの使用</strong>: デフォルトでは、Koinはサービスロケーターのように機能するグローバルにアクセス可能なコンポーネントを提供します。これにより、<code>KoinComponent</code>や<code>inject</code>関数を使用して中央レジストリから依存性を取得できます。</p></li><li><p><strong>独立したコンポーネント</strong>: Koinは依存性注入、特にコンストラクタインジェクションの使用を奨励していますが、独立したコンポーネントも許可しています。この柔軟性により、最も理にかなっている場所でDIを使用するようにアプリケーションを設定しつつ、特定のケースではSLを活用することができます。</p></li><li><p><strong>AndroidコンポーネントにおけるSL</strong>: Android開発では、Koinはセットアップを容易にするために、<code>Application</code>や<code>Activity</code>などのコンポーネント内でSLを内部的に使用することがよくあります。この点から、Koinは依存性をより構造化された方法で管理するために、DI、特にコンストラクタインジェクションを推奨しています。ただし、これは強制ではなく、開発者は必要に応じてSLを使用する柔軟性を持っています。</p></li></ol><h4 id="なぜこれがあなたにとって重要なのか" tabindex="-1">なぜこれがあなたにとって重要なのか <a class="header-anchor" href="#なぜこれがあなたにとって重要なのか" aria-label="Permalink to &quot;なぜこれがあなたにとって重要なのか&quot;">​</a></h4><p>DIとSLの区別を理解することは、アプリケーションの依存性を効果的に管理するのに役立ちます。</p><ul><li><p><strong>依存性注入</strong>: テスト容易性と保守性における利点から、Koinによって奨励されています。コンストラクタインジェクションは、依存性を明示的にし、コードの明確さを高めるため、推奨される方法です。</p></li><li><p><strong>サービスロケーター</strong>: Koinは利便性のために、特にAndroidコンポーネントでSLをサポートしていますが、SLのみに依存すると、密結合やテスト容易性の低下につながる可能性があります。Koinの設計はバランスの取れたアプローチを提供しており、実用的な場合にはSLを使用できますが、DIをベストプラクティスとして推奨しています。</p></li></ul><h4 id="koinを最大限に活用する" tabindex="-1">Koinを最大限に活用する <a class="header-anchor" href="#koinを最大限に活用する" aria-label="Permalink to &quot;Koinを最大限に活用する&quot;">​</a></h4><p>Koinを効果的に使用するには：</p><ul><li><p><strong>ベストプラクティスに従う</strong>: 依存性管理のベストプラクティスに合わせるため、可能な限りコンストラクタインジェクションを使用してください。このアプローチはテスト容易性と保守性を向上させます。</p></li><li><p><strong>Koinの柔軟性を活用する</strong>: セットアップを簡素化するシナリオではKoinのSLサポートを利用しますが、コアアプリケーションの依存性管理にはDIに依存することを目指してください。</p></li><li><p><strong>ドキュメントと例を参照する</strong>: プロジェクトのニーズに基づいてDIとSLを適切に設定し、使用する方法を理解するために、Koinのドキュメントと例を確認してください。</p></li><li><p><strong>依存性管理を視覚化する</strong>: 図や例は、Koinがどのように依存性を解決し、さまざまなコンテキスト内でそれらを管理するかを説明するのに役立ちます。これらの視覚的な補助は、Koinの内部動作をより明確に理解するのに役立ちます。</p></li></ul><blockquote><p>このガイダンスを提供することで、Koinの機能と設計上の選択肢を効果的に活用できるようにし、依存性管理のベストプラクティスを遵守しつつ、その潜在能力を最大限に引き出せるよう支援することを目指します。</p></blockquote>`,40)]))}const c=s(t,[["render",p]]);export{E as __pageData,c as default};
