import{_ as t,C as e,c as l,o as p,ag as a,j as h,a as s,G as o,w as k}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Composeにおけるナビゲーション","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-navigation.md","filePath":"ja/kmp/compose-navigation.md","lastUpdated":1755516278000}'),r={name:"ja/kmp/compose-navigation.md"};function d(g,i,E,c,y,v){const n=e("shortcut");return p(),l("div",null,[i[3]||(i[3]=a(`<h1 id="composeにおけるナビゲーション" tabindex="-1">Composeにおけるナビゲーション <a class="header-anchor" href="#composeにおけるナビゲーション" aria-label="Permalink to &quot;Composeにおけるナビゲーション&quot;">​</a></h1><p><a href="https://developer.android.com/guide/navigation" target="_blank" rel="noreferrer">AndroidのNavigationライブラリ</a>は、Jetpack Composeにおけるナビゲーションをサポートしています。 Compose Multiplatformチームは、AndroidX Navigationライブラリへのマルチプラットフォームサポートに貢献しています。</p><p>アプリ内のコンテンツ間の実際のナビゲーションとは別に、このライブラリは基本的なナビゲーションの問題を解決します。</p><ul><li>型安全な方法でデスティネーション間でのデータ受け渡しを行う。</li><li>明確でアクセスしやすいナビゲーション履歴を保持することで、ユーザーのアプリ内での操作経路を簡単に追跡できるようにする。</li><li>通常のワークフロー外から、ユーザーをアプリ内の特定の場所にナビゲートできるようにするディープリンクのメカニズムをサポートする。</li><li>ナビゲーション時の統一されたアニメーションとトランジションをサポートし、少ない追加作業で戻るジェスチャーのような一般的なパターンを可能にする。</li></ul><p>基本に十分に慣れている場合は、<a href="./compose-navigation-routing">Navigationとルーティング</a>に進み、クロスプラットフォームプロジェクトでNavigationライブラリを活用する方法を学びましょう。 そうでない場合は、引き続きライブラリが扱う基本的な概念について読み進めてください。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Navigationライブラリのマルチプラットフォーム版への変更は、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose.html" target="_blank" rel="noreferrer">What&#39;s new</a>で追跡するか、特定のEAPリリースを<a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/CHANGELOG">Compose Multiplatform changelog</a>で確認できます。</p></div><h2 id="compose-navigationの基本概念" tabindex="-1">Compose Navigationの基本概念 <a class="header-anchor" href="#compose-navigationの基本概念" aria-label="Permalink to &quot;Compose Navigationの基本概念&quot;">​</a></h2><p>Navigationライブラリは、ナビゲーションのユースケースを以下の概念にマッピングして使用します。</p><ul><li>_ナビゲーショングラフ_は、アプリ内のすべての可能なデスティネーションとそれらの間の接続を記述します。ナビゲーショングラフは、アプリ内のサブフローに対応するためにネストできます。</li><li>_デスティネーション_は、ナビゲーショングラフ内のナビゲート可能なノードです。これは、コンポーザブル、ネストされたナビゲーショングラフ、またはダイアログになり得ます。ユーザーがデスティネーションにナビゲートすると、アプリはそのコンテンツを表示します。</li><li>_ルート_は、デスティネーションを識別し、それにナビゲートするために必要な引数を定義しますが、UIを記述することはありません。このようにして、データは表現から分離され、UIの実装の各部分をアプリ全体の構造から独立させることができます。これにより、例えば、プロジェクト内のコンポーザブルのテストや再配置が容易になります。</li></ul><p>これらの概念を念頭に置いて、Navigationライブラリはナビゲーションアーキテクチャを導くための基本的なルールを実装しています。</p><ul><li>アプリは、ユーザーのパスをデスティネーションのスタック、つまり_バックスタック_として表現します。 デフォルトでは、ユーザーが新しいデスティネーションにナビゲートされるたびに、そのデスティネーションがスタックの最上部に追加されます。 バックスタックを使用すると、ナビゲーションをより簡単に行うことができます。直接前後にナビゲートする代わりに、現在のデスティネーションをスタックの最上部からポップし、自動的に前のデスティネーションに戻ることができます。</li><li>各デスティネーションには、一連の_ディープリンク_を関連付けることができます。これは、アプリがオペレーティングシステムからリンクを受け取ったときにそのデスティネーションに誘導するURIパターンです。</li></ul><h2 id="基本的なナビゲーションの例" tabindex="-1">基本的なナビゲーションの例 <a class="header-anchor" href="#基本的なナビゲーションの例" aria-label="Permalink to &quot;基本的なナビゲーションの例&quot;">​</a></h2><p>Navigationライブラリを使用するには、<code>commonMain</code>ソースセットに以下の依存関係を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.androidx.navigation:navigation-compose:2.9.0-beta05&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Compose Multiplatform 1.8.2 は Navigationライブラリバージョン 2.9.0-beta05 を必要とします。</p></div><p>ナビゲーションを設定するために必要な手順には、理にかなった順序があります。</p><ol><li>ルートを定義します。 各デスティネーションに対応する引数を保持するために、<a href="https://kotlinlang.org/docs/serialization.html" target="_blank" rel="noreferrer">シリアライズ可能</a>なオブジェクトまたはデータクラスを作成します。</li><li><code>NavController</code>を作成します。これは、すべてのコンポーザブルがアクセスできる十分な上位のコンポーザブル階層にあるナビゲーションインターフェースになります。 <code>NavController</code>はアプリのバックスタックを保持し、ナビゲーショングラフ内のデスティネーション間を遷移するためのメソッドを提供します。</li><li>いずれかのルートを開始デスティネーションとして選択して、ナビゲーショングラフを設計します。 これを行うには、ナビゲーショングラフ（すべてのナビゲート可能なデスティネーションを記述するもの）を保持する<code>NavHost</code>コンポーザブルを作成します。</li></ol><p>以下は、アプリ内ナビゲーションの基盤となる基本的な例です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creates routes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Profile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FriendsList</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creates the NavController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberNavController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creates the NavHost with the navigation graph consisting of supplied destinations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navController, startDestination </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Profile) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProfileScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FriendsList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FriendsListScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // You can add more destinations similarly</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="navigationライブラリの主要クラス" tabindex="-1">Navigationライブラリの主要クラス <a class="header-anchor" href="#navigationライブラリの主要クラス" aria-label="Permalink to &quot;Navigationライブラリの主要クラス&quot;">​</a></h3><p>Navigationライブラリは、以下のコアタイプを提供します。</p><ul><li><code>NavController</code>。 デスティネーション間の遷移、ディープリンクの処理、バックスタックの管理など、コアナビゲーション機能のAPIを提供します。 </li><li><code>NavHost</code>。ナビゲーショングラフに基づいて、現在のデスティネーションのコンテンツを表示するコンポーザブルです。 各<code>NavHost</code>には必須の<code>startDestination</code>パラメータがあります。これは、ユーザーがアプリを起動したときに最初に表示されるべき画面に対応するデスティネーションです。</li><li><code>NavGraph</code>。 アプリ内のすべての可能なデスティネーションとそれらの間の接続を記述します。 ナビゲーショングラフは通常、<code>NavHost</code>宣言などで、<code>NavGraph</code>を返すビルダーラムダとして定義されます。</li></ul><p>コアタイプの機能に加えて、Navigationコンポーネントは、アニメーションとトランジション、ディープリンクのサポート、型安全性、<code>ViewModel</code>サポート、およびアプリナビゲーションを扱うためのその他の品質向上機能を提供します。</p><h2 id="ナビゲーションのユースケース" tabindex="-1">ナビゲーションのユースケース <a class="header-anchor" href="#ナビゲーションのユースケース" aria-label="Permalink to &quot;ナビゲーションのユースケース&quot;">​</a></h2><h3 id="デスティネーションに移動する" tabindex="-1">デスティネーションに移動する <a class="header-anchor" href="#デスティネーションに移動する" aria-label="Permalink to &quot;デスティネーションに移動する&quot;">​</a></h3><p>デスティネーションにナビゲートするには、<code>NavController.navigate()</code>関数を呼び出します。上記の例を続けると:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { navController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">navigate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Profile) }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Go to profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="デスティネーションに引数を渡す" tabindex="-1">デスティネーションに引数を渡す <a class="header-anchor" href="#デスティネーションに引数を渡す" aria-label="Permalink to &quot;デスティネーションに引数を渡す&quot;">​</a></h3><p>ナビゲーショングラフを設計する際、例えば、ルートをパラメータを持つデータクラスとして定義できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>デスティネーションに引数を渡すには、デスティネーションにナビゲートする際に、対応するクラスコンストラクタに引数を渡します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { navController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">navigate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Go to profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>その後、デスティネーションでデータを取得します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { backStackEntry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> profile: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Profile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> backStackEntry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Use \`profile.name\` wherever a user&#39;s name is needed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="ナビゲート時に複雑なデータを取得する" tabindex="-1">ナビゲート時に複雑なデータを取得する <a class="header-anchor" href="#ナビゲート時に複雑なデータを取得する" aria-label="Permalink to &quot;ナビゲート時に複雑なデータを取得する&quot;">​</a></h3><p>デスティネーション間をナビゲートする際は、必要最小限の情報のみを渡すことを検討してください。 ファイルや、アプリ全体の状態を反映する複雑なオブジェクトは、データレイヤーに保存すべきです。ユーザーがデスティネーションに到達したら、UIは真実の唯一のソースから実際のデータをロードする必要があります。</p><p>例:</p><ul><li>ユーザープロファイル全体を渡す<strong>のではなく</strong>、デスティネーションでプロファイルを取得するためのユーザーIDを渡して<strong>ください</strong>。</li><li>画像オブジェクトを渡す<strong>のではなく</strong>、デスティネーションでソースから画像をロードできるURIまたはファイル名を渡して<strong>ください</strong>。</li><li>アプリケーションの状態やViewModelを渡す<strong>のではなく</strong>、デスティネーション画面が機能するために必要な情報のみを渡して<strong>ください</strong>。</li></ul><p>このアプローチは、設定変更時のデータ損失や、参照されるオブジェクトが更新または変更された際の不整合を防ぐのに役立ちます。</p><p>アプリでデータレイヤーを適切に実装するためのガイダンスについては、<a href="https://developer.android.com/topic/architecture/data-layer" target="_blank" rel="noreferrer">Androidのデータレイヤーに関する記事</a>を参照してください。</p><h3 id="バックスタックの管理" tabindex="-1">バックスタックの管理 <a class="header-anchor" href="#バックスタックの管理" aria-label="Permalink to &quot;バックスタックの管理&quot;">​</a></h3><p>バックスタックは<code>NavController</code>クラスによって制御されます。他のスタックと同様に、<code>NavController</code>は新しいアイテムをスタックの最上部にプッシュし、最上部からポップします。</p><ul><li>アプリ起動時、バックスタックに最初に表示されるエントリは、NavHostで定義された開始デスティネーションです。</li><li>各<code>NavController.navigate()</code>呼び出しは、デフォルトで指定されたデスティネーションをスタックの最上部にプッシュします。</li><li>戻るジェスチャー、戻るボタン、または<code>NavController.popBackStack()</code>メソッドを使用すると、現在のデスティネーションがスタックからポップされ、ユーザーは前のデスティネーションに戻ります。ユーザーがディープリンクをたどって現在のデスティネーションに到達した場合、スタックをポップすると前のアプリに戻ります。あるいは、<code>NavController.navigateUp()</code>関数は、<code>NavController</code>のコンテキスト内でユーザーをアプリ内でのみナビゲートします。</li></ul><p>Navigationライブラリは、バックスタックの処理に関してある程度の柔軟性を可能にします。以下を行うことができます。</p><ul><li>バックスタック内の特定のデスティネーションを指定し、そこにナビゲートして、そのデスティネーションの上にある（後に来た）スタック上のすべてをポップする。</li><li>デスティネーションXにナビゲートすると同時に、デスティネーションYまでのバックスタックをポップする（<code>.navigate()</code>呼び出しに<code>popUpTo()</code>引数を追加することで）。</li><li>空のバックスタックをポップする処理を行う（これにより、ユーザーは空の画面に移動することになります）。</li><li>アプリの異なる部分に対して複数のバックスタックを保持する。例えば、ボトムナビゲーションを持つアプリの場合、各タブに対して個別のネストされたグラフを保持し、タブ切り替え時にナビゲーション状態を保存および復元できます。あるいは、各タブに個別のNavHostを作成することもできます。これは設定が少し複雑になりますが、場合によっては追跡が容易になる可能性があります。</li></ul><p>詳細とユースケースについては、<a href="https://developer.android.com/guide/navigation/backstack" target="_blank" rel="noreferrer">Jetpack Composeのバックスタックに関するドキュメント</a>を参照してください。</p><h3 id="ディープリンク" tabindex="-1">ディープリンク <a class="header-anchor" href="#ディープリンク" aria-label="Permalink to &quot;ディープリンク&quot;">​</a></h3><p>Navigationライブラリを使用すると、特定のURI、アクション、またはMIMEタイプをデスティネーションに関連付けることができます。この関連付けは_ディープリンク_と呼ばれます。</p><p>デフォルトでは、ディープリンクは外部アプリに公開されません。各ターゲット配布に対して、オペレーティングシステムに適切なURIスキームを登録する必要があります。</p><p>ディープリンクの作成、登録、および処理の詳細については、<a href="./compose-navigation-deep-links">ディープリンク</a>を参照してください。</p><h3 id="戻るジェスチャー" tabindex="-1">戻るジェスチャー <a class="header-anchor" href="#戻るジェスチャー" aria-label="Permalink to &quot;戻るジェスチャー&quot;">​</a></h3>`,51)),h("p",null,[i[1]||(i[1]=s("マルチプラットフォームNavigationライブラリは、各プラットフォームでの戻るジェスチャーを前の画面へのナビゲーションに変換します（例えば、iOSでは単純なスワイプ操作、デスクトップでは")),o(n,null,{default:k(()=>i[0]||(i[0]=[s("Esc")])),_:1}),i[2]||(i[2]=s("キー）。"))]),i[4]||(i[4]=a(`<p>デフォルトでは、iOSで戻るジェスチャーは、別の画面へのスワイプ遷移のネイティブのようなアニメーションをトリガーします。<code>enterTransition</code>または<code>exitTransition</code>引数でNavHostアニメーションをカスタマイズした場合、デフォルトのアニメーションはトリガーされません。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    navController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navController,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    startDestination </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Profile,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Explicitly specifying transitions turns off default animations</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // in favor of the selected ones </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    enterTransition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slideInHorizontally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    exitTransition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slideOutVertically</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span></code></pre></div><p>Androidでは、<a href="https://developer.android.com/guide/navigation/custom-back/predictive-back-gesture#opt-predictive" target="_blank" rel="noreferrer">マニフェストファイル</a>で戻るジェスチャーハンドラを有効または無効にできます。</p><p>iOSでは、このハンドラはデフォルトで有効になっています。 無効にするには、ViewControllerの設定でこのフラグを設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { enableBackGesture </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="代替ナビゲーションソリューション" tabindex="-1">代替ナビゲーションソリューション <a class="header-anchor" href="#代替ナビゲーションソリューション" aria-label="Permalink to &quot;代替ナビゲーションソリューション&quot;">​</a></h2><p>Composeベースのナビゲーション実装が適切でない場合、評価すべきサードパーティの代替ソリューションがあります。</p><table tabindex="0"><thead><tr><th>名称</th><th>説明</th></tr></thead><tbody><tr><td><a href="https://voyager.adriel.cafe" target="_blank" rel="noreferrer">Voyager</a></td><td>ナビゲーションへの実用的なアプローチ</td></tr><tr><td><a href="https://arkivanov.github.io/Decompose/" target="_blank" rel="noreferrer">Decompose</a></td><td>完全なライフサイクルと潜在的な依存性注入をすべてカバーする、ナビゲーションへの高度なアプローチ</td></tr><tr><td><a href="https://slackhq.github.io/circuit/" target="_blank" rel="noreferrer">Circuit</a></td><td>ナビゲーションと高度な状態管理を備えたKotlinアプリケーション向けのCompose主導アーキテクチャ。</td></tr><tr><td><a href="https://bumble-tech.github.io/appyx/" target="_blank" rel="noreferrer">Appyx</a></td><td>ジェスチャーコントロールを備えたモデル駆動型ナビゲーション</td></tr><tr><td><a href="https://tlaster.github.io/PreCompose/" target="_blank" rel="noreferrer">PreCompose</a></td><td>Jetpack Lifecycle, ViewModel, LiveData, Navigationにインスパイアされたナビゲーションおよびビューモデル</td></tr></tbody></table><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>Composeナビゲーションは、Android Developerポータルで詳細に解説されています。 時折、このドキュメントではAndroid専用の例が使用されていますが、基本的なガイダンスとナビゲーションの原則はMultiplatformでも同じです。</p><ul><li><a href="https://developer.android.com/develop/ui/compose/navigation" target="_blank" rel="noreferrer">Composeでのナビゲーションの概要</a>。</li><li><a href="https://developer.android.com/guide/navigation" target="_blank" rel="noreferrer">Jetpack Navigationの開始ページ</a>（ナビゲーショングラフ、それらの移動、その他のナビゲーションユースケースに関するサブページを含む）。</li></ul>`,11))])}const b=t(r,[["render",d]]);export{m as __pageData,b as default};
