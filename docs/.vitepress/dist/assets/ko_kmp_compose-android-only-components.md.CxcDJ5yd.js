import{_ as o,c as r,o as a,ag as t}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"안드로이드 전용 구성 요소","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-android-only-components.md","filePath":"ko/kmp/compose-android-only-components.md","lastUpdated":1755516278000}'),i={name:"ko/kmp/compose-android-only-components.md"};function d(n,e,c,l,p,s){return a(),r("div",null,e[0]||(e[0]=[t('<h1 id="안드로이드-전용-구성-요소" tabindex="-1">안드로이드 전용 구성 요소 <a class="header-anchor" href="#안드로이드-전용-구성-요소" aria-label="Permalink to &quot;안드로이드 전용 구성 요소&quot;">​</a></h1><p>Compose Multiplatform은 <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a>를 기반으로 합니다. Compose Multiplatform의 대부분 기능은 모든 플랫폼에서 사용할 수 있습니다. 하지만 안드로이드 타겟에서만 사용할 수 있는 일부 API와 라이브러리가 있습니다. 이는 안드로이드 전용이거나, 아직 다른 플랫폼으로 포팅되지 않았기 때문입니다. 이 페이지에서는 Compose Multiplatform API의 이러한 부분을 요약하여 설명합니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>가끔 <a href="https://developer.android.com/jetpack/compose/documentation" target="_blank" rel="noreferrer">Jetpack Compose 문서</a>나 커뮤니티에서 작성한 글에서 안드로이드 타겟에서만 사용할 수 있는 API를 발견할 수 있습니다. 이를 <code>commonMain</code> 코드에서 사용하려고 하면 IDE에서 해당 API를 사용할 수 없다고 알려줄 것입니다.</p></div><h2 id="안드로이드-전용-api" tabindex="-1">안드로이드 전용 API <a class="header-anchor" href="#안드로이드-전용-api" aria-label="Permalink to &quot;안드로이드 전용 API&quot;">​</a></h2><p>안드로이드 전용 API는 안드로이드에 특화되어 있으며 다른 플랫폼에서는 사용할 수 없습니다. 이는 다른 플랫폼이 안드로이드에서 사용하는 특정 개념을 필요로 하지 않기 때문입니다. 해당 API는 일반적으로 <code>android.*</code> 패키지의 클래스를 사용하거나 안드로이드 전용 동작을 구성합니다. 다음은 안드로이드 전용 API의 일부 예시입니다:</p><ul><li><a href="https://developer.android.com/reference/android/content/Context" target="_blank" rel="noreferrer"><code>android.context.Context</code></a> 클래스</li><li><a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/platform/package-summary#LocalContext()" target="_blank" rel="noreferrer"><code>LocalContext</code></a> 및 <a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/platform/package-summary#LocalConfiguration()" target="_blank" rel="noreferrer"><code>LocalConfiguration</code></a> 변수</li><li><a href="https://developer.android.com/reference/android/graphics/BitmapFactory" target="_blank" rel="noreferrer"><code>android.graphics.BitmapFactory</code></a> 및 <a href="https://developer.android.com/reference/android/graphics/Bitmap" target="_blank" rel="noreferrer"><code>android.graphics.Bitmap</code></a> 클래스</li><li><a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/ImageBitmap#(androidx.compose.ui.graphics.ImageBitmap).asAndroidBitmap()" target="_blank" rel="noreferrer"><code>ImageBitmap.asAndroidBitmap()</code></a> 함수</li><li><a href="https://developer.android.com/reference/android/app/Activity" target="_blank" rel="noreferrer"><code>android.app.Activity</code></a> 클래스</li><li><a href="https://developer.android.com/reference/kotlin/androidx/activity/ComponentActivity#(androidx.activity.ComponentActivity).setContent(androidx.compose.runtime.CompositionContext,kotlin.Function0)" target="_blank" rel="noreferrer"><code>android.app.Activity.setContent()</code></a> 함수</li><li><a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/platform/ComposeView" target="_blank" rel="noreferrer"><code>ComposeView</code></a> 클래스</li><li><a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/platform/package-summary#LocalView()" target="_blank" rel="noreferrer"><code>LocalView</code></a> 변수</li><li><a href="https://github.com/androidx/androidx/blob/41cb7d5c422180edd89efde4076f9dc724d3a313/compose/ui/ui/src/androidMain/kotlin/androidx/compose/ui/input/pointer/PointerInteropFilter.android.kt" target="_blank" rel="noreferrer"><code>Modifier.pointerInteropFilter()</code></a> 함수</li><li><a href="https://developer.android.com/jetpack/compose/libraries#hilt" target="_blank" rel="noreferrer">Hilt</a> 의존성 주입 라이브러리</li></ul><p>일반적으로 이러한 API 부분을 공통화할 강력한 이유가 없으므로 <code>androidMain</code>에서만 유지하는 것이 가장 좋습니다.</p><h2 id="시그니처에-안드로이드-클래스가-포함된-api" tabindex="-1">시그니처에 안드로이드 클래스가 포함된 API <a class="header-anchor" href="#시그니처에-안드로이드-클래스가-포함된-api" aria-label="Permalink to &quot;시그니처에 안드로이드 클래스가 포함된 API&quot;">​</a></h2><p>Compose Multiplatform API 중 시그니처에 <code>android.*</code> 또는 <code>androidx.*</code> (단, <code>androidx.compose.*</code> 제외)를 사용하지만, 해당 동작이 다른 플랫폼에도 적용 가능한 부분이 있습니다:</p><ul><li><a href="https://developer.android.com/jetpack/compose/resources" target="_blank" rel="noreferrer">리소스 관리</a>: <code>stringResource</code>, <code>animatedVectorResource</code>, <code>Font</code> 및 리소스 관리를 위한 <code>*.R</code> 클래스. 자세한 내용은 <a href="./compose-multiplatform-resources">이미지 및 리소스</a>를 참조하세요.</li><li><a href="https://developer.android.com/jetpack/compose/navigation" target="_blank" rel="noreferrer">내비게이션</a>. 자세한 내용은 <a href="./compose-navigation-routing">내비게이션 및 라우팅</a>을 참조하세요.</li><li><a href="https://developer.android.com/jetpack/compose/libraries#viewmodel" target="_blank" rel="noreferrer"><code>ViewModel</code></a> 클래스.</li><li><a href="https://developer.android.com/jetpack/compose/libraries#paging" target="_blank" rel="noreferrer">페이징</a> 라이브러리.</li><li><a href="https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout" target="_blank" rel="noreferrer"><code>ConstraintLayout</code></a> 레이아웃.</li><li><a href="https://developer.android.com/jetpack/compose/libraries#maps" target="_blank" rel="noreferrer">지도</a> 라이브러리.</li><li><a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/tooling/preview/package-summary" target="_blank" rel="noreferrer">미리보기</a> 도구 및 <a href="https://plugins.jetbrains.com/plugin/16541-compose-multiplatform-ide-support" target="_blank" rel="noreferrer">데스크톱</a> 애플리케이션 미리보기용 플러그인.</li><li><a href="https://developer.android.com/reference/android/webkit/WebView" target="_blank" rel="noreferrer"><code>WebView</code></a> 클래스.</li><li>Compose Multiplatform으로 아직 포팅되지 않은 다른 Jetpack Compose 라이브러리.</li></ul><p>복잡성과 수요에 따라 향후 <code>commonMain</code>으로 포팅될 수 있습니다.</p><p>권한, 장치(블루투스, GPS, 카메라) 및 IO(네트워크, 파일, 데이터베이스)와 같이 애플리케이션 개발 시 자주 사용되는 API는 Compose Multiplatform의 범위를 벗어납니다.</p><h2 id="시그니처에-안드로이드-클래스가-없는-api" tabindex="-1">시그니처에 안드로이드 클래스가 없는 API <a class="header-anchor" href="#시그니처에-안드로이드-클래스가-없는-api" aria-label="Permalink to &quot;시그니처에 안드로이드 클래스가 없는 API&quot;">​</a></h2><p>일부 API 부분은 시그니처에 <code>android.*</code> 또는 <code>androidx.*</code> 클래스가 포함되어 있지 않고 다른 플랫폼에도 적용 가능하더라도, 안드로이드 타겟에서만 사용할 수 있습니다. 그 이유는 대개 구현에 많은 플랫폼별 특성이 사용되어 다른 플랫폼을 위한 다른 구현을 작성하는 데 시간이 걸리기 때문입니다.</p><p>일반적으로 이러한 API 부분은 안드로이드 타겟용 Jetpack Compose에 도입된 후 Compose Multiplatform으로 포팅됩니다.</p><p>Compose Multiplatform 1.8.2에서 다음 API 부분은 <code>commonMain</code>에서 <strong>사용할 수 없습니다</strong>:</p><ul><li><a href="https://github.com/androidx/androidx/blob/0e8dd4edd03f6e802303e5325ad11e89292c26c3/compose/foundation/foundation-layout/src/androidMain/kotlin/androidx/compose/foundation/layout/WindowInsetsConnection.android.kt" target="_blank" rel="noreferrer"><code>Modifier.imeNestedScroll()</code></a> 함수</li><li><a href="https://github.com/androidx/androidx/blob/0e8dd4edd03f6e802303e5325ad11e89292c26c3/compose/foundation/foundation/src/androidMain/kotlin/androidx/compose/foundation/SystemGestureExclusion.kt" target="_blank" rel="noreferrer"><code>Modifier.systemGestureExclusion()</code></a> 함수</li><li><a href="https://github.com/androidx/androidx/blob/41cb7d5c422180edd89efde4076f9dc724d3a313/compose/foundation/foundation/src/androidMain/kotlin/androidx/compose/foundation/Magnifier.kt" target="_blank" rel="noreferrer"><code>Modifier.magnifier()</code></a> 함수</li><li><a href="https://github.com/androidx/androidx/blob/41cb7d5c422180edd89efde4076f9dc724d3a313/compose/foundation/foundation/src/androidMain/kotlin/androidx/compose/foundation/OverscrollConfiguration.kt" target="_blank" rel="noreferrer"><code>LocalOverscrollConfiguration</code></a> 변수</li><li><a href="https://developer.android.com/jetpack/compose/resources#animated-vector-drawables" target="_blank" rel="noreferrer"><code>AnimatedImageVector.animatedVectorResource</code> API</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3-adaptive" target="_blank" rel="noreferrer">material3-adaptive</a> 라이브러리</li><li><a href="https://developer.android.com/reference/kotlin/androidx/compose/material3/windowsizeclass/package-summary" target="_blank" rel="noreferrer">material3-window-size-class</a> 라이브러리</li></ul><h2 id="안드로이드-api-포팅-요청" tabindex="-1">안드로이드 API 포팅 요청 <a class="header-anchor" href="#안드로이드-api-포팅-요청" aria-label="Permalink to &quot;안드로이드 API 포팅 요청&quot;">​</a></h2><p>안드로이드에서 포팅할 수 있는 각 API에 대해 Compose Multiplatform YouTrack에 <a href="https://youtrack.jetbrains.com/issues/CMP" target="_blank" rel="noreferrer">열린 이슈</a>가 있습니다. API를 안드로이드에서 포팅하고 공통화할 수 있다고 판단되지만, 기존 이슈가 없다면 <a href="https://youtrack.jetbrains.com/newIssue?project=CMP" target="_blank" rel="noreferrer">하나 생성하세요</a>.</p>',19)]))}const h=o(i,[["render",d]]);export{f as __pageData,h as default};
