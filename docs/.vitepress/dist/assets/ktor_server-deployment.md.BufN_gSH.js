import{_ as n,C as t,c as s,o as p,j as a,G as r,ag as c,a as o,w as d}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-deployment.md","filePath":"ktor/server-deployment.md","lastUpdated":1755457140000}'),h={name:"ktor/server-deployment.md"};function u(f,e,g,v,k,m){const l=t("show-structure"),i=t("tldr");return p(),s("div",null,[e[1]||(e[1]=a("h1",{id:"部署",tabindex:"-1"},[o("部署 "),a("a",{class:"header-anchor",href:"#部署","aria-label":'Permalink to "部署"'},"​")],-1)),r(l,{for:"chapter",depth:"2"}),r(i,null,{default:d(()=>e[0]||(e[0]=[a("p",null,[a("b",null,"代码示例"),o(": "),a("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/deployment-ktor-plugin"}," deployment-ktor-plugin ")],-1)])),_:1}),e[2]||(e[2]=c('<p>在本主题中，我们将概述如何部署 Ktor 应用程序。</p><blockquote><p>为了简化服务器 Ktor 应用程序的部署过程，你可以使用 <a href="https://github.com/ktorio/ktor-build-plugins" target="_blank" rel="noreferrer">Ktor</a> 的 Gradle 插件，该插件提供以下能力：</p><ul><li>构建 fat JAR。</li><li>将你的应用程序 Docker 化。</li></ul></blockquote><h2 id="ktor-specifics" tabindex="-1">Ktor 部署特有之处 <a class="header-anchor" href="#ktor-specifics" aria-label="Permalink to &quot;Ktor 部署特有之处 {id=&quot;ktor-specifics&quot;}&quot;">​</a></h2><p>服务器 Ktor 应用程序的部署过程取决于以下特有之处：</p><ul><li>你是计划将应用程序部署为自包含包，还是部署在 servlet 容器内。</li><li>你使用哪种方法来创建和配置服务器。</li></ul><h3 id="self-contained-vs-servlet" tabindex="-1">自包含应用与 Servlet 容器对比 <a class="header-anchor" href="#self-contained-vs-servlet" aria-label="Permalink to &quot;自包含应用与 Servlet 容器对比 {id=&quot;self-contained-vs-servlet&quot;}&quot;">​</a></h3><p>Ktor 允许你直接在应用程序中创建并启动带有所需网络<a href="./server-engines">引擎</a>（例如 Netty、Jetty 或 Tomcat）的服务器。在这种情况下，引擎是你应用程序的一部分。你的应用程序控制引擎设置、连接和 SSL 选项。要部署你的应用程序，你可以将其<a href="#packaging">打包</a>为 fat JAR 或可执行 JVM 应用程序。</p><p>与上述方法相反，servlet 容器应控制应用程序生命周期和连接设置。Ktor 提供了一个特殊的 <code>ServletApplicationEngine</code> 引擎，它将应用程序的控制权委托给 servlet 容器。要在 servlet 容器内进行部署，你需要生成一个 <a href="./server-war">WAR 归档</a>。</p><h3 id="code-vs-config" tabindex="-1">配置：代码与配置文件对比 <a class="header-anchor" href="#code-vs-config" aria-label="Permalink to &quot;配置：代码与配置文件对比 {id=&quot;code-vs-config&quot;}&quot;">​</a></h3><p>配置用于部署的自包含 Ktor 应用程序可能取决于<a href="./server-create-and-configure">创建和配置服务器</a>所用的方法：在代码中配置，或者通过使用<a href="./server-configuration-file">配置文件</a>配置。例如，<a href="#publishing">托管服务提供商</a>可能要求指定用于监听传入请求的端口。在这种情况下，你需要在代码中或在 <code>application.conf</code>/<code>application.yaml</code> 中<a href="./server-configuration-file">配置</a>端口。</p><h2 id="packaging" tabindex="-1">打包 <a class="header-anchor" href="#packaging" aria-label="Permalink to &quot;打包 {id=&quot;packaging&quot;}&quot;">​</a></h2><p>在部署应用程序之前，你需要通过以下方式之一对其进行打包：</p><ul><li><p><strong>Fat JAR</strong></p><p>fat JAR 是一个包含所有代码依赖项的可执行 JAR。你可以将其部署到任何支持 fat JAR 的<a href="#publishing">云服务</a>。如果你需要为 GraalVM 生成原生二进制文件，也需要 fat JAR。要创建 fat JAR，你可以使用 <a href="./server-fatjar">Ktor</a> 的 Gradle 插件或 <a href="./maven-assembly-plugin">Assembly</a> 的 Maven 插件。</p></li><li><p><strong>可执行 JVM 应用程序</strong></p><p>可执行 JVM 应用程序是包含代码依赖项和生成的启动脚本的打包应用程序。对于 Gradle，你可以使用 <a href="./server-packaging">Application</a> 插件来生成应用程序。</p></li><li><p><strong>WAR</strong></p><p><a href="./server-war">WAR 归档</a>允许你将应用程序部署在 servlet 容器内，例如 Tomcat 或 Jetty。</p></li><li><p><strong>GraalVM</strong></p><p>Ktor 服务器应用程序可以利用 <a href="./graalvm">GraalVM</a> 以拥有针对不同平台的原生镜像。</p></li></ul><h2 id="containerizing" tabindex="-1">容器化 <a class="header-anchor" href="#containerizing" aria-label="Permalink to &quot;容器化 {id=&quot;containerizing&quot;}&quot;">​</a></h2><p>在打包应用程序（例如，打包为可执行 JVM 应用程序或 fat JAR）后，你可以使用此应用程序准备一个 <a href="./docker">Docker 镜像</a>。此镜像可用于在 Kubernetes、Swarm 或所需的云服务容器实例上运行你的应用程序。</p><h2 id="publishing" tabindex="-1">发布 <a class="header-anchor" href="#publishing" aria-label="Permalink to &quot;发布 {id=&quot;publishing&quot;}&quot;">​</a></h2><p>下面的教程展示了如何将 Ktor 应用程序部署到特定的云服务提供商：</p><ul><li><a href="./google-app-engine">Google App Engine</a></li><li><a href="./heroku">Heroku</a></li><li><a href="./elastic-beanstalk">AWS Elastic Beanstalk</a></li></ul><h2 id="ssl" tabindex="-1">SSL <a class="header-anchor" href="#ssl" aria-label="Permalink to &quot;SSL {id=&quot;ssl&quot;}&quot;">​</a></h2><p>如果你的 Ktor 服务器位于反向代理（例如 Nginx 或 Apache）之后，或者在 servlet 容器（Tomcat 或 Jetty）内部运行，则 SSL 设置由反向代理或 servlet 容器管理。如果需要，你可以通过使用 Java KeyStore 来配置 Ktor <a href="./server-ssl">直接提供 SSL</a>。</p><blockquote><p>请注意，当 Ktor 应用程序部署在 servlet 容器内时，SSL 设置不生效。</p></blockquote>',21))])}const S=n(h,[["render",u]]);export{q as __pageData,S as default};
