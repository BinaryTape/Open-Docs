import{_ as u,C as t,c as v,o as y,G as a,ag as k,j as i,w as e,a as n}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-data-conversion.md","filePath":"ko/ktor/server-data-conversion.md","lastUpdated":1755457140000}'),m={name:"ko/ktor/server-data-conversion.md"};function F(C,s,D,b,f,A){const d=t("TopicTitle"),h=t("primary-label"),p=t("Links"),E=t("tldr"),g=t("link-summary"),l=t("code-block"),o=t("TabItem"),r=t("Tabs"),c=t("list");return y(),v("div",null,[a(d,{labelRef:"server-plugin",title:"데이터 변환"}),a(h,{ref:"server-plugin"},null,512),a(E,null,{default:e(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"코드 예제"),n(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/data-conversion"}," data-conversion ")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"필수 의존성"),n(": "),i("code",null,"io.ktor:ktor-server-data-conversion")],-1)),i("p",null,[i("b",null,[a(p,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임이나 가상 머신 없이 서버를 실행할 수 있게 합니다."},{default:e(()=>s[0]||(s[0]=[n("네이티브 서버")])),_:1}),s[1]||(s[1]=n(" 지원"))]),s[2]||(s[2]=n(": ✅ "))])]),_:1}),a(g,null,{default:e(()=>s[5]||(s[5]=[n(" Ktor 서버용 DataConversion 플러그인은 값 목록을 직렬화하고 역직렬화하기 위한 사용자 지정 컨버터를 추가할 수 있도록 합니다. ")])),_:1}),s[18]||(s[18]=k('<p><a href="https://api.ktor.io/ktor-utils/io.ktor.util.converters/-data-conversion/index.html" target="_blank" rel="noreferrer">DataConversion</a> 플러그인은 값 목록을 직렬화하고 역직렬화할 수 있도록 합니다. 기본적으로 Ktor는 <a href="https://api.ktor.io/ktor-utils/io.ktor.util.converters/-default-conversion-service/index.html" target="_blank" rel="noreferrer">DefaultConversionService</a>를 통해 기본 타입(primitive type)과 열거형(enum)을 처리합니다. <code>DataConversion</code> 플러그인을 설치하고 구성하여 이 서비스를 확장하여 추가 타입을 처리할 수 있습니다.</p><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>DataConversion</code>을(를) 사용하려면 빌드 스크립트에 <code>ktor-server-data-conversion</code> 아티팩트를 포함해야 합니다: </p>',3)),a(r,{group:"languages"},{default:e(()=>[a(o,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[a(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-data-conversion:$ktor_version")'})]),_:1}),a(o,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[a(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-data-conversion:$ktor_version"'})]),_:1}),a(o,{title:"Maven","group-key":"maven"},{default:e(()=>[a(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-data-conversion-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[19]||(s[19]=i("h2",{id:"install_plugin",tabindex:"-1"},[n("DataConversion 설치 "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "DataConversion 설치 {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[7]||(s[7]=n(" 애플리케이션에 ")),s[8]||(s[8]=i("code",null,"DataConversion",-1)),s[9]||(s[9]=n(" 플러그인을 ")),s[10]||(s[10]=i("a",{href:"#install"},"설치",-1)),s[11]||(s[11]=n("하려면, 지정된 ")),a(p,{href:"/ktor/server-modules",summary:"모듈은 라우트(route)를 그룹화하여 애플리케이션을 구조화할 수 있게 합니다."},{default:e(()=>s[6]||(s[6]=[n("모듈")])),_:1}),s[12]||(s[12]=n("의 ")),s[13]||(s[13]=i("code",null,"install",-1)),s[14]||(s[14]=n(" 함수에 전달하세요. 아래 코드 스니펫은 ")),s[15]||(s[15]=i("code",null,"DataConversion",-1)),s[16]||(s[16]=n("을(를) 설치하는 방법을 보여줍니다... "))]),a(c,null,{default:e(()=>s[17]||(s[17]=[i("li",null,[n(" ... "),i("code",null,"embeddedServer"),n(" 함수 호출 내에서. ")],-1),i("li",null,[n(" ... "),i("code",null,"Application"),n(" 클래스의 확장 함수인 명시적으로 정의된 "),i("code",null,"module"),n(" 내에서. ")],-1)])),_:1}),a(r,null,{default:e(()=>[a(o,{title:"embeddedServer"},{default:e(()=>[a(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.dataconversion.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(DataConversion)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),a(o,{title:"module"},{default:e(()=>[a(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.dataconversion.*
            // ...
            fun Application.module() {
                install(DataConversion)
                // ...
            }`})]),_:1})]),_:1}),s[20]||(s[20]=k(`<h2 id="add-converters" tabindex="-1">컨버터 추가 <a class="header-anchor" href="#add-converters" aria-label="Permalink to &quot;컨버터 추가 {id=&quot;add-converters&quot;}&quot;">​</a></h2><p><code>DataConversion</code> 구성 내에서 타입 변환을 정의할 수 있습니다. 지정된 타입에 대해 <code>convert&lt;T&gt;</code> 메서드를 제공하고 사용 가능한 함수를 사용하여 값 목록을 직렬화하고 역직렬화하세요:</p><ul><li>값 목록을 역직렬화하려면 <code>decode()</code> 함수를 사용하세요. 이 함수는 URL에 반복되는 값을 나타내는 문자열 목록을 받고 디코딩된 값을 반환합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { values </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (values: List&lt;String&gt;) -&gt; Any?</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //deserialize values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>값을 직렬화하려면 <code>encode()</code> 함수를 사용하세요. 이 함수는 임의의 값을 받고 그것을 나타내는 문자열 목록을 반환합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (value: Any?) -&gt; List&lt;String&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     //serialize value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h2 id="서비스-접근" tabindex="-1">서비스 접근 <a class="header-anchor" href="#서비스-접근" aria-label="Permalink to &quot;서비스 접근&quot;">​</a></h2><p id="service"></p><p>현재 컨텍스트에서 <code>DataConversion</code> 서비스에 접근할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataConversion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> application.conversionService</span></span></code></pre></div><p>그런 다음 컨버터 서비스를 사용하여 콜백 함수를 호출할 수 있습니다:</p><ul><li><code>fromValues(values: List&lt;String&gt;, type: TypeInfo)</code> 콜백 함수는 <code>values</code>를 문자열 목록으로, 그리고 값을 변환할 <code>TypeInfo</code>를 인자로 받아 디코딩된 값을 반환합니다.</li><li><code>toValues(value: Any?)</code> 콜백 함수는 임의의 값을 인자로 받아 그것을 나타내는 문자열 목록을 반환합니다.</li></ul><h2 id="예제" tabindex="-1">예제 <a class="header-anchor" href="#예제" aria-label="Permalink to &quot;예제&quot;">​</a></h2><p>다음 예제에서는 <code>LocalDate</code> 타입에 대한 컨버터가 정의되어 값을 직렬화하고 역직렬화하도록 구성됩니다. <code>encode</code> 함수가 호출되면 서비스는 <code>SimpleDateFormat</code>을 사용하여 값을 변환하고 형식이 지정된 값이 포함된 목록을 반환합니다. <code>decode</code> 함수가 호출되면 서비스는 날짜를 <code>LocalDate</code>로 형식화하고 반환합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DataConversion) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        convert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LocalDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: DelegatingConversionService</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formatter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateTimeFormatterBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChronoField.YEAR, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SignStyle.NEVER)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChronoField.MONTH_OF_YEAR, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChronoField.DAY_OF_MONTH, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFormatter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Locale.ROOT)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { values </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (values: List&lt;String&gt;) -&gt; Any?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(formatter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (value: Any?) -&gt; List&lt;String&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SimpleDateFormat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>변환 서비스는 인코딩된 값과 디코딩된 값을 검색하기 위해 수동으로 호출될 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> application.conversionService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(call.parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decodedDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> application.conversionService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedDate, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LocalDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;())</span></span></code></pre></div><p>전체 예제는 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/data-conversion" target="_blank" rel="noreferrer">data-conversion</a>를(을) 참조하세요.</p>`,18))])}const T=u(m,[["render",F]]);export{B as __pageData,T as default};
