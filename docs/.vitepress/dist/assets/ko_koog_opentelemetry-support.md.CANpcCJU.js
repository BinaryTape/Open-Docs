import{_ as e,c as t,o as i,ag as a}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"OpenTelemetry 지원","description":"","frontmatter":{},"headers":[],"relativePath":"ko/koog/opentelemetry-support.md","filePath":"ko/koog/opentelemetry-support.md","lastUpdated":1755146406000}'),l={name:"ko/koog/opentelemetry-support.md"};function n(p,s,h,r,d,k){return i(),t("div",null,s[0]||(s[0]=[a(`<h1 id="opentelemetry-지원" tabindex="-1">OpenTelemetry 지원 <a class="header-anchor" href="#opentelemetry-지원" aria-label="Permalink to &quot;OpenTelemetry 지원&quot;">​</a></h1><p>이 페이지는 AI 에이전트의 추적 및 모니터링을 위한 Koog 에이전트 프레임워크의 OpenTelemetry 지원에 대한 세부 정보를 제공합니다.</p><h2 id="개요" tabindex="-1">개요 <a class="header-anchor" href="#개요" aria-label="Permalink to &quot;개요&quot;">​</a></h2><p>OpenTelemetry는 애플리케이션에서 텔레메트리 데이터(추적)를 생성, 수집 및 내보내기 위한 도구를 제공하는 관측 가능성 프레임워크입니다. Koog OpenTelemetry 기능을 사용하면 AI 에이전트에 계측(instrument)을 적용하여 텔레메트리 데이터를 수집할 수 있으며, 이는 다음을 돕습니다:</p><ul><li>에이전트 성능 및 동작 모니터링</li><li>복잡한 에이전트 워크플로우에서 문제 디버깅</li><li>에이전트 실행 흐름 시각화</li><li>LLM 호출 및 도구 사용 추적</li><li>에이전트 동작 패턴 분석</li></ul><h2 id="주요-opentelemetry-개념" tabindex="-1">주요 OpenTelemetry 개념 <a class="header-anchor" href="#주요-opentelemetry-개념" aria-label="Permalink to &quot;주요 OpenTelemetry 개념&quot;">​</a></h2><ul><li><strong>스팬(Span)</strong>: 스팬은 분산 추적 내의 개별 작업 단위 또는 연산을 나타냅니다. 이는 에이전트 실행, 함수 호출, LLM 호출 또는 도구 호출과 같은 애플리케이션 내의 특정 활동의 시작과 끝을 나타냅니다.</li><li><strong>속성(Attribute)</strong>: 속성은 스팬과 같은 텔레메트리 관련 항목에 대한 메타데이터를 제공합니다. 속성은 키-값 쌍으로 표현됩니다.</li><li><strong>이벤트(Event)</strong>: 이벤트는 스팬의 수명 동안 특정 시점(스팬 관련 이벤트)에 발생한 잠재적으로 주목할 만한 일을 나타냅니다.</li><li><strong>익스포터(Exporter)</strong>: 익스포터는 수집된 텔레메트리 데이터를 다양한 백엔드 또는 대상으로 전송하는 역할을 하는 구성 요소입니다.</li><li><strong>컬렉터(Collector)</strong>: 컬렉터는 텔레메트리 데이터를 수신, 처리 및 내보냅니다. 이들은 애플리케이션과 관측 가능성 백엔드 사이의 중간자 역할을 합니다.</li><li><strong>샘플러(Sampler)</strong>: 샘플러는 샘플링 전략에 따라 추적을 기록할지 여부를 결정합니다. 이들은 텔레메트리 데이터의 양을 관리하는 데 사용됩니다.</li><li><strong>리소스(Resource)</strong>: 리소스는 텔레메트리 데이터를 생성하는 엔티티를 나타냅니다. 이들은 리소스에 대한 정보를 제공하는 키-값 쌍인 리소스 속성으로 식별됩니다.</li></ul><p>Koog의 OpenTelemetry 기능은 다음을 포함하여 다양한 에이전트 이벤트에 대한 스팬을 자동으로 생성합니다:</p><ul><li>에이전트 실행 시작 및 종료</li><li>노드 실행</li><li>LLM 호출</li><li>도구 호출</li></ul><h2 id="설치" tabindex="-1">설치 <a class="header-anchor" href="#설치" aria-label="Permalink to &quot;설치&quot;">​</a></h2><p>Koog와 함께 OpenTelemetry를 사용하려면 OpenTelemetry 기능을 에이전트에 추가하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apiKey),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Chat.GPT4o,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    systemPrompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You are a helpful assistant.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    installFeatures </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Configuration options go here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="구성" tabindex="-1">구성 <a class="header-anchor" href="#구성" aria-label="Permalink to &quot;구성&quot;">​</a></h2><h3 id="기본-구성" tabindex="-1">기본 구성 <a class="header-anchor" href="#기본-구성" aria-label="Permalink to &quot;기본 구성&quot;">​</a></h3><p>다음은 에이전트에서 OpenTelemetry 기능을 구성할 때 설정할 수 있는 사용 가능한 속성 전체 목록입니다:</p><table tabindex="0"><thead><tr><th style="text-align:left;">이름</th><th style="text-align:left;">데이터 유형</th><th style="text-align:left;">기본값</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:left;"><code>serviceName</code></td><td style="text-align:left;"><code>String</code></td><td style="text-align:left;"><code>ai.koog</code></td><td style="text-align:left;">계측되는 서비스의 이름입니다.</td></tr><tr><td style="text-align:left;"><code>serviceVersion</code></td><td style="text-align:left;"><code>String</code></td><td style="text-align:left;">현재 Koog 라이브러리 버전</td><td style="text-align:left;">계측되는 서비스의 버전입니다.</td></tr><tr><td style="text-align:left;"><code>isVerbose</code></td><td style="text-align:left;"><code>Boolean</code></td><td style="text-align:left;"><code>false</code></td><td style="text-align:left;">OpenTelemetry 구성 디버깅을 위한 상세 로깅을 활성화할지 여부입니다.</td></tr><tr><td style="text-align:left;"><code>sdk</code></td><td style="text-align:left;"><code>OpenTelemetrySdk</code></td><td style="text-align:left;"></td><td style="text-align:left;">텔레메트리 수집에 사용할 OpenTelemetry SDK 인스턴스입니다.</td></tr><tr><td style="text-align:left;"><code>tracer</code></td><td style="text-align:left;"><code>Tracer</code></td><td style="text-align:left;"></td><td style="text-align:left;">스팬 생성을 위해 사용되는 OpenTelemetry 트레이서 인스턴스입니다.</td></tr></tbody></table><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>sdk</code> 및 <code>tracer</code> 속성은 접근 가능한 공개 속성이지만, 아래에 나열된 공개 메서드를 통해서만 설정할 수 있습니다.</p></div><p><code>OpenTelemetryConfig</code> 클래스에는 다양한 구성 항목과 관련된 작업을 나타내는 메서드도 포함되어 있습니다. 다음은 기본 구성 항목 집합으로 OpenTelemetry 기능을 설치하는 예시입니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set your service configuration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setServiceInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-agent-service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add the Logging exporter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>사용 가능한 메서드에 대한 참조는 아래 섹션을 참조하세요.</p><h4 id="setserviceinfo" tabindex="-1">setServiceInfo <a class="header-anchor" href="#setserviceinfo" aria-label="Permalink to &quot;setServiceInfo&quot;">​</a></h4><p>이름과 버전을 포함한 서비스 정보를 설정합니다. 다음 인수를 사용합니다:</p><table tabindex="0"><thead><tr><th style="text-align:left;">이름</th><th style="text-align:left;">데이터 유형</th><th style="text-align:left;">필수</th><th style="text-align:left;">기본값</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:left;"><code>serviceName</code></td><td style="text-align:left;">String</td><td style="text-align:left;">예</td><td style="text-align:left;"></td><td style="text-align:left;">계측되는 서비스의 이름입니다.</td></tr><tr><td style="text-align:left;"><code>serviceVersion</code></td><td style="text-align:left;">String</td><td style="text-align:left;">예</td><td style="text-align:left;"></td><td style="text-align:left;">계측되는 서비스의 버전입니다.</td></tr></tbody></table><h4 id="addspanexporter" tabindex="-1">addSpanExporter <a class="header-anchor" href="#addspanexporter" aria-label="Permalink to &quot;addSpanExporter&quot;">​</a></h4><p>외부 시스템으로 텔레메트리 데이터를 전송할 스팬 익스포터를 추가합니다. 다음 인수를 사용합니다:</p><table tabindex="0"><thead><tr><th style="text-align:left;">이름</th><th style="text-align:left;">데이터 유형</th><th style="text-align:left;">필수</th><th style="text-align:left;">기본값</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:left;"><code>exporter</code></td><td style="text-align:left;"><code>SpanExporter</code></td><td style="text-align:left;">예</td><td style="text-align:left;"></td><td style="text-align:left;">사용자 정의 스팬 익스포터 목록에 추가될 <code>SpanExporter</code> 인스턴스입니다.</td></tr></tbody></table><h4 id="addspanprocessor" tabindex="-1">addSpanProcessor <a class="header-anchor" href="#addspanprocessor" aria-label="Permalink to &quot;addSpanProcessor&quot;">​</a></h4><p>스팬이 내보내지기 전에 처리할 스팬 프로세서를 추가합니다. 다음 인수를 사용합니다:</p><table tabindex="0"><thead><tr><th style="text-align:left;">이름</th><th style="text-align:left;">데이터 유형</th><th style="text-align:left;">필수</th><th style="text-align:left;">기본값</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:left;"><code>processor</code></td><td style="text-align:left;"><code>SpanProcessor</code></td><td style="text-align:left;">예</td><td style="text-align:left;"></td><td style="text-align:left;">내보내기 전에 텔레메트리 데이터를 처리하는 사용자 정의 로직을 포함하는 스팬 프로세서입니다.</td></tr></tbody></table><h4 id="addresourceattributes" tabindex="-1">addResourceAttributes <a class="header-anchor" href="#addresourceattributes" aria-label="Permalink to &quot;addResourceAttributes&quot;">​</a></h4><p>서비스에 대한 추가 컨텍스트를 제공하기 위해 리소스 속성을 추가합니다. 다음 인수를 사용합니다:</p><table tabindex="0"><thead><tr><th style="text-align:left;">이름</th><th style="text-align:left;">데이터 유형</th><th style="text-align:left;">필수</th><th style="text-align:left;">기본값</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:left;"><code>attributes</code></td><td style="text-align:left;"><code>Map&lt;AttributeKey&lt;T&gt;, T&gt;</code></td><td style="text-align:left;">예</td><td style="text-align:left;"></td><td style="text-align:left;">서비스에 대한 추가 세부 정보를 제공하는 키-값 쌍입니다.</td></tr></tbody></table><h4 id="setsampler" tabindex="-1">setSampler <a class="header-anchor" href="#setsampler" aria-label="Permalink to &quot;setSampler&quot;">​</a></h4><p>어떤 스팬을 수집할지 제어하기 위한 샘플링 전략을 설정합니다. 다음 인수를 사용합니다:</p><table tabindex="0"><thead><tr><th style="text-align:left;">이름</th><th style="text-align:left;">데이터 유형</th><th style="text-align:left;">필수</th><th style="text-align:left;">기본값</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:left;"><code>sampler</code></td><td style="text-align:left;"><code>Sampler</code></td><td style="text-align:left;">예</td><td style="text-align:left;"></td><td style="text-align:left;">OpenTelemetry 구성을 위해 설정할 샘플러 인스턴스입니다.</td></tr></tbody></table><h4 id="setverbose" tabindex="-1">setVerbose <a class="header-anchor" href="#setverbose" aria-label="Permalink to &quot;setVerbose&quot;">​</a></h4><p>OpenTelemetry 구성 디버깅을 위한 상세 로깅을 활성화 또는 비활성화합니다. 다음 인수를 사용합니다:</p><table tabindex="0"><thead><tr><th style="text-align:left;">이름</th><th style="text-align:left;">데이터 유형</th><th style="text-align:left;">필수</th><th style="text-align:left;">기본값</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:left;"><code>verbose</code></td><td style="text-align:left;"><code>Boolean</code></td><td style="text-align:left;">예</td><td style="text-align:left;"><code>false</code></td><td style="text-align:left;">true인 경우 애플리케이션은 더 상세한 텔레메트리 데이터를 수집합니다.</td></tr></tbody></table><h3 id="고급-구성" tabindex="-1">고급 구성 <a class="header-anchor" href="#고급-구성" aria-label="Permalink to &quot;고급 구성&quot;">​</a></h3><p>더 고급 구성을 위해서는 다음 구성 옵션을 사용자 정의할 수도 있습니다:</p><ul><li>샘플러(Sampler): 수집된 데이터의 빈도와 양을 조정하기 위한 샘플링 전략을 구성합니다.</li><li>리소스 속성(Resource attributes): 텔레메트리 데이터를 생성하는 프로세스에 대한 추가 정보를 추가합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set your service configuration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setServiceInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-agent-service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add the Logging exporter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set the sampler </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setSampler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sampler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">traceIdRatioBased</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add resource attributes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addResourceAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        AttributeKey.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom.attribute&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom-value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="샘플러" tabindex="-1">샘플러 <a class="header-anchor" href="#샘플러" aria-label="Permalink to &quot;샘플러&quot;">​</a></h4><p>샘플러를 정의하려면 <code>opentelemetry-java</code> SDK의 <code>Sampler</code> 클래스(<code>io.opentelemetry.sdk.trace.samplers.Sampler</code>)에 해당하는 메서드를 사용하여 원하는 샘플링 전략을 나타내세요.</p><p>기본 샘플링 전략은 다음과 같습니다:</p><ul><li><code>Sampler.alwaysOn()</code>: 모든 스팬(추적)이 샘플링되는 기본 샘플링 전략입니다.</li></ul><p>사용 가능한 샘플러 및 샘플링 전략에 대한 자세한 내용은 OpenTelemetry <a href="https://opentelemetry.io/docs/languages/java/sdk/#sampler" target="_blank" rel="noreferrer">Sampler</a> 문서를 참조하세요.</p><h4 id="리소스-속성" tabindex="-1">리소스 속성 <a class="header-anchor" href="#리소스-속성" aria-label="Permalink to &quot;리소스 속성&quot;">​</a></h4><p>리소스 속성은 텔레메트리 데이터를 생성하는 프로세스에 대한 추가 정보를 나타냅니다. Koog는 기본적으로 설정되는 리소스 속성 집합을 포함합니다:</p><ul><li><code>service.name</code></li><li><code>service.version</code></li><li><code>service.instance.time</code></li><li><code>os.type</code></li><li><code>os.version</code></li><li><code>os.arch</code></li></ul><p><code>service.name</code> 속성의 기본값은 <code>ai.koog</code>이며, <code>service.version</code>의 기본값은 현재 사용 중인 Koog 라이브러리 버전입니다.</p><p>기본 리소스 속성 외에도 사용자 정의 속성을 추가할 수 있습니다. Koog의 OpenTelemetry 구성에 사용자 정의 속성을 추가하려면 키와 값을 인수로 받는 OpenTelemetry 구성의 <code>addResourceAttributes()</code> 메서드를 사용하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addResourceAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AttributeKey.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom.attribute&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom-value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="스팬-유형-및-속성" tabindex="-1">스팬 유형 및 속성 <a class="header-anchor" href="#스팬-유형-및-속성" aria-label="Permalink to &quot;스팬 유형 및 속성&quot;">​</a></h2><p>OpenTelemetry 기능은 에이전트의 다양한 작업을 추적하기 위해 자동으로 여러 유형의 스팬을 생성합니다:</p><ul><li><strong>CreateAgentSpan</strong>: 에이전트를 실행할 때 생성되며, 에이전트가 종료되거나 프로세스가 종료될 때 닫힙니다.</li><li><strong>InvokeAgentSpan</strong>: 에이전트 호출.</li><li><strong>NodeExecuteSpan</strong>: 에이전트 전략에서 노드의 실행. 이는 Koog 고유의 사용자 정의 스팬입니다.</li><li><strong>InferenceSpan</strong>: LLM 호출.</li><li><strong>ExecuteToolSpan</strong>: 도구 호출.</li></ul><p>스팬은 중첩된 계층 구조로 구성됩니다. 다음은 스팬 구조의 예시입니다:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CreateAgentSpan</span></span>
<span class="line"><span>    InvokeAgentSpan</span></span>
<span class="line"><span>        NodeExecuteSpan</span></span>
<span class="line"><span>            InferenceSpan</span></span>
<span class="line"><span>        NodeExecuteSpan</span></span>
<span class="line"><span>            ExecuteToolSpan</span></span>
<span class="line"><span>        NodeExecuteSpan</span></span>
<span class="line"><span>            InferenceSpan</span></span></code></pre></div><h3 id="스팬-속성" tabindex="-1">스팬 속성 <a class="header-anchor" href="#스팬-속성" aria-label="Permalink to &quot;스팬 속성&quot;">​</a></h3><p>스팬 속성은 스팬과 관련된 메타데이터를 제공합니다. 각 스팬은 고유한 속성 집합을 가지며, 일부 스팬은 속성을 반복할 수도 있습니다.</p><p>Koog는 OpenTelemetry의 <a href="https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-spans/" target="_blank" rel="noreferrer">생성형 AI 이벤트에 대한 시맨틱 컨벤션</a>을 따르는 사전 정의된 속성 목록을 지원합니다. 예를 들어, 이 컨벤션은 일반적으로 스팬의 필수 속성인 <code>gen_ai.conversation.id</code>라는 속성을 정의합니다. Koog에서 이 속성의 값은 에이전트 실행의 고유 식별자이며, <code>agent.run()</code> 메서드를 호출할 때 자동으로 설정됩니다.</p><p>또한 Koog는 Koog 고유의 사용자 정의 속성을 포함합니다. 대부분의 속성은 <code>koog.</code> 접두사로 식별할 수 있습니다. 사용 가능한 사용자 정의 속성은 다음과 같습니다:</p><ul><li><code>koog.agent.strategy.name</code>: 에이전트 전략의 이름. 전략은 에이전트의 목적을 설명하는 Koog 관련 엔티티입니다. <code>InvokeAgentSpan</code> 스팬에서 사용됩니다.</li><li><code>koog.node.name</code>: 실행 중인 노드의 이름. <code>NodeExecuteSpan</code> 스팬에서 사용됩니다.</li></ul><h3 id="이벤트" tabindex="-1">이벤트 <a class="header-anchor" href="#이벤트" aria-label="Permalink to &quot;이벤트&quot;">​</a></h3><p>스팬에는 _이벤트_가 첨부될 수도 있습니다. 이벤트는 관련 있는 일이 발생한 특정 시점을 설명합니다. 예를 들어, LLM 호출이 시작되거나 종료될 때. 이벤트는 속성을 가지며, 추가적으로 이벤트 _본문 필드_를 포함합니다.</p><p>OpenTelemetry의 <a href="https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-events/" target="_blank" rel="noreferrer">생성형 AI 이벤트에 대한 시맨틱 컨벤션</a>에 따라 다음 이벤트 유형이 지원됩니다:</p><ul><li><strong>SystemMessageEvent</strong>: 모델에 전달된 시스템 지시사항.</li><li><strong>UserMessageEvent</strong>: 모델에 전달된 사용자 메시지.</li><li><strong>AssistantMessageEvent</strong>: 모델에 전달된 어시스턴트 메시지.</li><li><strong>ToolMessageEvent</strong>: 모델에 전달된 도구 또는 함수 호출의 응답.</li><li><strong>ChoiceEvent</strong>: 모델의 응답 메시지.</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>optentelemetry-java</code> SDK는 이벤트를 추가할 때 이벤트 본문 필드 매개변수를 지원하지 않습니다. 따라서 Koog의 OpenTelemetry 지원에서는 이벤트 본문 필드가 키가 <code>body</code>이고 값 유형이 문자열인 별도의 속성으로 처리됩니다. 이 문자열에는 일반적으로 JSON과 같은 객체인 이벤트 본문 필드의 내용 또는 페이로드가 포함됩니다. 이벤트 본문 필드의 예시는 <a href="https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-events/#examples" target="_blank" rel="noreferrer">OpenTelemetry 문서</a>를 참조하세요. <code>opentelemetry-java</code>의 이벤트 본문 필드 지원 상태는 관련 <a href="https://github.com/open-telemetry/semantic-conventions/issues/1870" target="_blank" rel="noreferrer">GitHub 이슈</a>를 참조하세요.</p></div><h2 id="익스포터" tabindex="-1">익스포터 <a class="header-anchor" href="#익스포터" aria-label="Permalink to &quot;익스포터&quot;">​</a></h2><p>익스포터는 수집된 텔레메트리 데이터를 OpenTelemetry 컬렉터 또는 다른 유형의 대상이나 백엔드 구현으로 전송합니다. 익스포터를 추가하려면 OpenTelemetry 기능을 설치할 때 <code>addSpanExporter()</code> 메서드를 사용하세요. 이 메서드는 다음 인수를 사용합니다:</p><table tabindex="0"><thead><tr><th style="text-align:left;">이름</th><th style="text-align:left;">데이터 유형</th><th style="text-align:left;">필수</th><th style="text-align:left;">기본값</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:left;"><code>exporter</code></td><td style="text-align:left;">SpanExporter</td><td style="text-align:left;">예</td><td style="text-align:left;"></td><td style="text-align:left;">사용자 정의 스팬 익스포터 목록에 추가될 <code>SpanExporter</code> 인스턴스입니다.</td></tr></tbody></table><p>아래 섹션에서는 <code>opentelemetry-java</code> SDK에서 가장 일반적으로 사용되는 익스포터 중 일부에 대한 정보를 제공합니다.</p><h3 id="로깅-익스포터" tabindex="-1">로깅 익스포터 <a class="header-anchor" href="#로깅-익스포터" aria-label="Permalink to &quot;로깅 익스포터&quot;">​</a></h3><p>콘솔에 추적 정보를 출력하는 로깅 익스포터입니다. <code>LoggingSpanExporter</code> (<code>io.opentelemetry.exporter.logging.LoggingSpanExporter</code>)는 <code>opentelemetry-java</code> SDK의 일부입니다.</p><p>이러한 유형의 내보내기는 개발 및 디버깅 목적으로 유용합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add the logging exporter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add more exporters as needed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="opentelemetry-http-익스포터" tabindex="-1">OpenTelemetry HTTP 익스포터 <a class="header-anchor" href="#opentelemetry-http-익스포터" aria-label="Permalink to &quot;OpenTelemetry HTTP 익스포터&quot;">​</a></h3><p>OpenTelemetry HTTP 익스포터(<code>OtlpHttpSpanExporter</code>)는 <code>opentelemetry-java</code> SDK(<code>io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter</code>)의 일부이며, HTTP를 통해 스팬 데이터를 백엔드로 전송합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Add OpenTelemetry HTTP exporter </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      OtlpHttpSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Set the maximum time to wait for the collector to process an exported batch of spans </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Set the OpenTelemetry endpoint to connect to</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:3000/api/public/otel/v1/traces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Add the authorization header</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Authorization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Basic </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$AUTH_STRING</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="opentelemetry-grpc-익스포터" tabindex="-1">OpenTelemetry gRPC 익스포터 <a class="header-anchor" href="#opentelemetry-grpc-익스포터" aria-label="Permalink to &quot;OpenTelemetry gRPC 익스포터&quot;">​</a></h3><p>OpenTelemetry gRPC 익스포터(<code>OtlpGrpcSpanExporter</code>)는 <code>opentelemetry-java</code> SDK(<code>io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporter</code>)의 일부입니다. gRPC를 통해 텔레메트리 데이터를 백엔드로 내보내며, 데이터를 수신하는 백엔드, 컬렉터 또는 엔드포인트의 호스트와 포트를 정의할 수 있습니다. 기본 포트는 <code>4317</code>입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Add OpenTelemetry gRPC exporter </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      OtlpGrpcSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Set the host and the port</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:4317&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="jaeger와-통합" tabindex="-1">Jaeger와 통합 <a class="header-anchor" href="#jaeger와-통합" aria-label="Permalink to &quot;Jaeger와 통합&quot;">​</a></h2><p>Jaeger는 OpenTelemetry와 연동되는 인기 있는 분산 추적 시스템입니다. Koog 리포지토리의 <code>examples</code> 내 <code>opentelemetry</code> 디렉터리에는 Jaeger 및 Koog 에이전트와 함께 OpenTelemetry를 사용하는 예시가 포함되어 있습니다.</p><h3 id="전제-조건" tabindex="-1">전제 조건 <a class="header-anchor" href="#전제-조건" aria-label="Permalink to &quot;전제 조건&quot;">​</a></h3><p>Koog 및 Jaeger로 OpenTelemetry를 테스트하려면 제공된 <code>docker-compose.yaml</code> 파일을 사용하여 다음 명령을 실행하여 Jaeger OpenTelemetry 올인원 프로세스를 시작하세요:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><p>제공된 Docker Compose YAML 파일에는 다음 내용이 포함되어 있습니다:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># docker-compose.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  jaeger-all-in-one</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jaegertracing/all-in-one:1.39</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jaeger-all-in-one</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">COLLECTOR_OTLP_ENABLED=true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4317:4317&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;16686:16686&quot;</span></span></code></pre></div><p>Jaeger UI에 접근하여 추적을 보려면 <code>http://localhost:16686</code>을 여세요.</p><h3 id="예시" tabindex="-1">예시 <a class="header-anchor" href="#예시" aria-label="Permalink to &quot;예시&quot;">​</a></h3><p>Jaeger에서 사용할 텔레메트리 데이터를 내보내기 위해 이 예시에서는 <code>opentelemetry-java</code> SDK의 <code>LoggingSpanExporter</code> (<code>io.opentelemetry.exporter.logging.LoggingSpanExporter</code>) 및 <code>OtlpGrpcSpanExporter</code> (<code>io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporter</code>)를 사용합니다.</p><p>다음은 전체 코드 샘플입니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(openAIApiKey),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Reasoning.GPT4oMini,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            systemPrompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You are a code assistant. Provide concise code examples.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Add a console logger for local debugging</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Send traces to OpenTelemetry collector</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    OtlpGrpcSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:4317&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OpenTelemetry 추적을 사용하여 에이전트를 실행 중입니다...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tell me a joke about programming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;에이전트 실행이 결과: &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;와 함께 완료되었습니다.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">추적을 보려면 http://localhost:16686에서 Jaeger UI를 확인하세요&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="문제-해결" tabindex="-1">문제 해결 <a class="header-anchor" href="#문제-해결" aria-label="Permalink to &quot;문제 해결&quot;">​</a></h2><h3 id="일반적인-문제" tabindex="-1">일반적인 문제 <a class="header-anchor" href="#일반적인-문제" aria-label="Permalink to &quot;일반적인 문제&quot;">​</a></h3><ol><li><p><strong>Jaeger 또는 Langfuse에 추적이 나타나지 않음</strong></p><ul><li>서비스가 실행 중이고 OpenTelemetry 포트(4317)에 접근 가능한지 확인하십시오.</li><li>OpenTelemetry 익스포터가 올바른 엔드포인트로 구성되었는지 확인하십시오.</li><li>추적을 내보내기 위해 에이전트 실행 후 몇 초 정도 기다려야 합니다.</li></ul></li><li><p><strong>스팬 누락 또는 불완전한 추적</strong></p><ul><li>에이전트 실행이 성공적으로 완료되는지 확인하십시오.</li><li>에이전트 실행 후 너무 빨리 애플리케이션을 닫지 않도록 하십시오.</li><li>스팬이 내보내질 시간을 허용하도록 에이전트 실행 후 지연을 추가하십시오.</li></ul></li><li><p><strong>과도한 수의 스팬</strong></p><ul><li><code>sampler</code> 속성을 구성하여 다른 샘플링 전략을 사용하는 것을 고려하십시오.</li><li>예를 들어, 추적의 10%만 샘플링하려면 <code>Sampler.traceIdRatioBased(0.1)</code>을 사용하십시오.</li></ul></li></ol>`,97)]))}const E=e(l,[["render",n]]);export{g as __pageData,E as default};
