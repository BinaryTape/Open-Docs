import{d as r,e as d,f as g,g as c,h as E,_ as y,a as u,b as F,i as m,j as C,k as b,l as f,m as v,n as A,o as D,p as B,c as S}from"./chunks/android-iphone-password-error.w1wD0Z9I.js";import{_}from"./chunks/xcode-run-script-phase-1.BlwrlSQM.js";import{_ as q,a as O,b as w}from"./chunks/disable-sandboxing-in-xcode-project-settings.Hr8r5yJK.js";import{_ as I,C as n,c as x,o as P,j as i,G as t,ag as l,a,w as e}from"./chunks/framework.Bksy39di.js";const J=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/multiplatform-integrate-in-existing-app.md","filePath":"ko/kmp/multiplatform-integrate-in-existing-app.md","lastUpdated":1755516278000}'),U={name:"ko/kmp/multiplatform-integrate-in-existing-app.md"};function j(M,s,T,L,V,K){const p=n("secondary-label"),h=n("Links"),k=n("tldr"),o=n("shortcut");return P(),x("div",null,[s[12]||(s[12]=i("h1",{id:"안드로이드-애플리케이션을-ios에서-동작하게-만들기-–-튜토리얼",tabindex:"-1"},[a("안드로이드 애플리케이션을 iOS에서 동작하게 만들기 – 튜토리얼 "),i("a",{class:"header-anchor",href:"#안드로이드-애플리케이션을-ios에서-동작하게-만들기-–-튜토리얼","aria-label":'Permalink to "안드로이드 애플리케이션을 iOS에서 동작하게 만들기 – 튜토리얼"'},"​")],-1)),t(p,{ref:"IntelliJ IDEA"},null,512),t(p,{ref:"Android Studio"},null,512),t(k,null,{default:e(()=>[i("p",null,[s[1]||(s[1]=a("이 튜토리얼은 Android Studio를 사용하지만, IntelliJ IDEA에서도 따라 할 수 있습니다. ")),t(h,{href:"/kmp/quickstart",summary:"undefined"},{default:e(()=>s[0]||(s[0]=[a("제대로 설정하면")])),_:1}),s[2]||(s[2]=a(", 두 IDE 모두 동일한 핵심 기능과 Kotlin Multiplatform 지원을 공유합니다."))])]),_:1}),s[13]||(s[13]=l('<p>이 튜토리얼은 기존 안드로이드 애플리케이션을 안드로이드와 iOS 모두에서 작동하도록 크로스 플랫폼으로 만드는 방법을 보여줍니다. 동일한 장소에서 안드로이드와 iOS용 코드를 동시에 작성할 수 있게 됩니다.</p><p>이 튜토리얼은 사용자 이름과 비밀번호를 입력하는 단일 화면을 가진 <a href="https://github.com/Kotlin/kmp-integration-sample" target="_blank" rel="noreferrer">샘플 안드로이드 애플리케이션</a>을 사용합니다. 자격 증명은 유효성을 검사하고 인메모리 데이터베이스에 저장됩니다.</p><p>애플리케이션이 iOS와 안드로이드 모두에서 작동하도록 하려면, 먼저 코드의 일부를 공유 모듈로 이동하여 코드를 크로스 플랫폼으로 만듭니다. 그 다음 안드로이드 애플리케이션에서 크로스 플랫폼 코드를 사용하고, 동일한 코드를 새로운 iOS 애플리케이션에서 사용합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin Multiplatform에 익숙하지 않다면, 먼저 <a href="./quickstart">처음부터 크로스 플랫폼 애플리케이션을 만드는 방법</a>을 알아보세요.</p></div><h2 id="개발-환경-준비하기" tabindex="-1">개발 환경 준비하기 <a class="header-anchor" href="#개발-환경-준비하기" aria-label="Permalink to &quot;개발 환경 준비하기&quot;">​</a></h2><ol><li>퀵스타트에서 <a href="./quickstart#set-up-the-environment">Kotlin Multiplatform 개발 환경 설정</a> 지침을 완료합니다.</li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>이 튜토리얼의 특정 단계(예: iOS 애플리케이션 실행)를 완료하려면 macOS가 설치된 Mac이 필요합니다. 이는 Apple의 요구 사항 때문입니다.</p></div><ol start="2"><li>Android Studio에서 버전 관리로부터 새 프로젝트를 생성합니다:</li></ol><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/kmp-integration-sample</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>master</code> 브랜치에는 프로젝트의 초기 상태(간단한 안드로이드 애플리케이션)가 포함되어 있습니다. iOS 애플리케이션 및 공유 모듈이 포함된 최종 상태를 보려면 <code>final</code> 브랜치로 전환하세요.</p></div><ol start="3"><li><strong>Project</strong> 뷰로 전환합니다:</li></ol><p><img src="'+r+'" alt="Project view" width="513"></p><h2 id="코드-크로스-플랫폼으로-만들기" tabindex="-1">코드 크로스 플랫폼으로 만들기 <a class="header-anchor" href="#코드-크로스-플랫폼으로-만들기" aria-label="Permalink to &quot;코드 크로스 플랫폼으로 만들기&quot;">​</a></h2><p>코드를 크로스 플랫폼으로 만들기 위해 다음 단계를 따릅니다:</p><ol><li><a href="#decide-what-code-to-make-cross-platform">크로스 플랫폼으로 만들 코드 결정</a></li><li><a href="#create-a-shared-module-for-cross-platform-code">크로스 플랫폼 코드를 위한 공유 모듈 생성</a></li><li><a href="#add-code-to-the-shared-module">코드 공유 테스트</a></li><li><a href="#add-a-dependency-on-the-shared-module-to-your-android-application">안드로이드 애플리케이션에 공유 모듈 종속성 추가</a></li><li><a href="#make-the-business-logic-cross-platform">비즈니스 로직 크로스 플랫폼으로 만들기</a></li><li><a href="#run-your-cross-platform-application-on-android">안드로이드에서 크로스 플랫폼 애플리케이션 실행</a></li></ol><h3 id="크로스-플랫폼으로-만들-코드-결정" tabindex="-1">크로스 플랫폼으로 만들 코드 결정 <a class="header-anchor" href="#크로스-플랫폼으로-만들-코드-결정" aria-label="Permalink to &quot;크로스 플랫폼으로 만들 코드 결정&quot;">​</a></h3><p>안드로이드 애플리케이션의 어떤 코드를 iOS와 공유하는 것이 더 좋고 어떤 코드를 네이티브로 유지할지 결정합니다. 간단한 규칙은 다음과 같습니다: 가능한 한 많이 재사용하려는 것을 공유하세요. 비즈니스 로직은 종종 안드로이드와 iOS 모두에서 동일하므로, 재사용하기에 좋은 후보입니다.</p><p>샘플 안드로이드 애플리케이션에서 비즈니스 로직은 <code>com.jetbrains.simplelogin.androidapp.data</code> 패키지에 저장되어 있습니다. 미래의 iOS 애플리케이션도 동일한 로직을 사용할 것이므로, 이를 크로스 플랫폼으로 만들어야 합니다.</p><p><img src="'+d+'" alt="Business logic to share" width="366"></p><h3 id="크로스-플랫폼-코드를-위한-공유-모듈-생성" tabindex="-1">크로스 플랫폼 코드를 위한 공유 모듈 생성 <a class="header-anchor" href="#크로스-플랫폼-코드를-위한-공유-모듈-생성" aria-label="Permalink to &quot;크로스 플랫폼 코드를 위한 공유 모듈 생성&quot;">​</a></h3><p>iOS와 안드로이드 모두에서 사용되는 크로스 플랫폼 코드는 공유 모듈에 저장됩니다. Android Studio와 IntelliJ IDEA 모두 Kotlin Multiplatform용 공유 모듈을 생성하기 위한 마법사를 제공합니다.</p><p>기존 안드로이드 애플리케이션과 미래의 iOS 애플리케이션 모두에 연결할 공유 모듈을 생성합니다:</p><ol><li><p>Android Studio에서 메인 메뉴에서 <strong>File</strong> | <strong>New</strong> | <strong>New Module</strong>을 선택합니다.</p></li><li><p>템플릿 목록에서 <strong>Kotlin Multiplatform Shared Module</strong>을 선택합니다. 라이브러리 이름은 <code>shared</code>로 두고 패키지 이름을 입력합니다:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>com.jetbrains.simplelogin.shared</span></span></code></pre></div></li><li><p><strong>Finish</strong>를 클릭합니다. 마법사가 공유 모듈을 생성하고, 빌드 스크립트를 그에 따라 변경하며, Gradle 동기화를 시작합니다.</p></li><li><p>설정이 완료되면, <code>shared</code> 디렉터리에 다음과 같은 파일 구조가 표시됩니다:</p></li></ol><p><img src="'+g+`" alt="Final file structure inside the shared directory" width="341"></p><ol start="5"><li><code>shared/build.gradle.kts</code> 파일의 <code>kotlin.androidLibrary.minSdk</code> 속성이 <code>app/build.gradle.kts</code> 파일의 동일한 속성 값과 일치하는지 확인합니다.</li></ol><h3 id="공유-모듈에-코드-추가하기" tabindex="-1">공유 모듈에 코드 추가하기 <a class="header-anchor" href="#공유-모듈에-코드-추가하기" aria-label="Permalink to &quot;공유 모듈에 코드 추가하기&quot;">​</a></h3><p>이제 공유 모듈이 생겼으니, <code>commonMain/kotlin/com.jetbrains.simplelogin.shared</code> 디렉터리에 공유할 공통 코드를 추가합니다:</p><ol><li><p>다음 코드로 새 <code>Greeting</code> 클래스를 생성합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, \${platform.name}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>생성된 파일의 코드를 다음으로 바꿉니다:</p><ul><li><p><code>commonMain/Platform.kt</code>에서:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div></li><li><p><code>androidMain/Platform.android.kt</code>에서:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android.os.Build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Android \${Build.VERSION.SDK_INT}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li><li><p><code>iosMain/Platform.ios.kt</code>에서:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.UIKit.UIDevice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.systemVersion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ul></li></ol><p>결과 프로젝트의 레이아웃을 더 잘 이해하고 싶다면, <a href="./multiplatform-discover-project">Kotlin Multiplatform 프로젝트 구조의 기본</a>을 참조하세요.</p><h3 id="안드로이드-애플리케이션에-공유-모듈-종속성-추가" tabindex="-1">안드로이드 애플리케이션에 공유 모듈 종속성 추가 <a class="header-anchor" href="#안드로이드-애플리케이션에-공유-모듈-종속성-추가" aria-label="Permalink to &quot;안드로이드 애플리케이션에 공유 모듈 종속성 추가&quot;">​</a></h3><p>안드로이드 애플리케이션에서 크로스 플랫폼 코드를 사용하려면, 공유 모듈을 연결하고, 비즈니스 로직 코드를 그곳으로 이동하며, 이 코드를 크로스 플랫폼으로 만드세요.</p><ol><li><p><code>app/build.gradle.kts</code> 파일에 공유 모듈 종속성을 추가합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>IDE에서 제안하거나 <strong>File</strong> | <strong>Sync Project with Gradle Files</strong> 메뉴 항목을 사용하여 Gradle 파일을 동기화합니다.</p></li><li><p><code>app/src/main/java/</code> 디렉터리에서 <code>com.jetbrains.simplelogin.androidapp.ui.login</code> 패키지에 있는 <code>LoginActivity.kt</code> 파일을 엽니다.</p></li><li><p>공유 모듈이 애플리케이션에 성공적으로 연결되었는지 확인하기 위해, <code>onCreate()</code> 메서드에 <code>Log.i()</code> 호출을 추가하여 <code>greet()</code> 함수 결과를 로그로 덤프합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Login Activity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from shared module: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>누락된 클래스를 임포트하기 위해 IDE의 제안을 따릅니다.</p></li><li><p>도구 모음에서 <code>app</code> 드롭다운을 클릭한 다음 디버그 아이콘을 클릭합니다:</p></li></ol><p><img src="`+c+'" alt="App from list to debug" width="300"></p><ol start="7"><li><strong>Logcat</strong> 도구 창에서 로그에서 &quot;Hello&quot;를 검색하면 공유 모듈의 인사를 찾을 수 있습니다:</li></ol><p><img src="'+E+'" alt="Greeting from the shared module" width="700"></p><h3 id="비즈니스-로직-크로스-플랫폼으로-만들기" tabindex="-1">비즈니스 로직 크로스 플랫폼으로 만들기 <a class="header-anchor" href="#비즈니스-로직-크로스-플랫폼으로-만들기" aria-label="Permalink to &quot;비즈니스 로직 크로스 플랫폼으로 만들기&quot;">​</a></h3><p>이제 비즈니스 로직 코드를 Kotlin Multiplatform 공유 모듈로 추출하고 플랫폼 독립적으로 만들 수 있습니다. 이는 안드로이드와 iOS 모두에서 코드를 재사용하는 데 필요합니다.</p><ol><li>비즈니스 로직 코드 <code>com.jetbrains.simplelogin.androidapp.data</code>를 <code>app</code> 디렉터리에서 <code>shared/src/commonMain</code> 디렉터리의 <code>com.jetbrains.simplelogin.shared</code> 패키지로 이동합니다.</li></ol><p><img src="'+y+'" alt="Drag and drop the package with the business logic code" width="300"></p><ol start="2"><li>Android Studio가 무엇을 할 것인지 물으면, 패키지 이동을 선택한 다음 리팩터링을 승인합니다.</li></ol><p><img src="'+u+'" alt="Refactor the business logic package" width="300"></p><ol start="3"><li>플랫폼 종속 코드에 대한 모든 경고를 무시하고 <strong>Refactor Anyway</strong>를 클릭합니다.</li></ol><p><img src="'+F+'" alt="Warnings about platform-dependent code" width="450"></p><ol start="4"><li>안드로이드 관련 코드를 크로스 플랫폼 Kotlin 코드로 바꾸거나 <a href="./multiplatform-connect-to-apis">expect 및 actual 선언</a>을 사용하여 안드로이드 관련 API에 연결함으로써 제거합니다. 자세한 내용은 다음 섹션을 참조하세요:</li></ol>',44)),s[14]||(s[14]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"안드로이드-관련-코드를-크로스-플랫폼-코드로-바꾸기",tabindex:"-1"},[a("안드로이드 관련 코드를 크로스 플랫폼 코드로 바꾸기 "),i("a",{class:"header-anchor",href:"#안드로이드-관련-코드를-크로스-플랫폼-코드로-바꾸기","aria-label":'Permalink to "안드로이드 관련 코드를 크로스 플랫폼 코드로 바꾸기 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[15]||(s[15]=l(`<p>코드가 안드로이드와 iOS 모두에서 잘 작동하도록 하려면, 이동된 <code>data</code> 디렉터리에서 가능한 한 모든 JVM 종속성을 Kotlin 종속성으로 바꿉니다.</p><ol><li><p><code>LoginDataValidator</code> 클래스에서 <code>android.utils</code> 패키지의 <code>Patterns</code> 클래스를 이메일 유효성 검사 패턴과 일치하는 Kotlin 정규 표현식으로 바꿉니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Before</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isEmailValid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Patterns.EMAIL_ADDRESS.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(email).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// After</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isEmailValid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emailRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(email)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emailRegex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[a-zA-Z0-9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">_</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+]{1,256}&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;[a-zA-Z0-9][a-zA-Z0-9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-]{0,64}&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;(&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;[a-zA-Z0-9][a-zA-Z0-9</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-]{0,25}&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;)+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>Patterns</code> 클래스에 대한 임포트 지시문을 제거합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android.util.Patterns</span></span></code></pre></div></li><li><p><code>LoginDataSource</code> 클래스에서 <code>login()</code> 함수의 <code>IOException</code>을 <code>RuntimeException</code>으로 바꿉니다. <code>IOException</code>은 Kotlin/JVM에서 사용할 수 없습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Before</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IOException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Error logging in&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e))</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// After</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Error logging in&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e))</span></span></code></pre></div></li><li><p><code>IOException</code>에 대한 임포트 지시문도 제거합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.io.IOException</span></span></code></pre></div></li></ol>`,2)),s[16]||(s[16]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"크로스-플랫폼-코드에서-플랫폼-특정-api에-연결하기",tabindex:"-1"},[a("크로스 플랫폼 코드에서 플랫폼 특정 API에 연결하기 "),i("a",{class:"header-anchor",href:"#크로스-플랫폼-코드에서-플랫폼-특정-api에-연결하기","aria-label":'Permalink to "크로스 플랫폼 코드에서 플랫폼 특정 API에 연결하기 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[17]||(s[17]=l(`<p><code>LoginDataSource</code> 클래스에서 <code>fakeUser</code>에 대한 범용 고유 식별자(UUID)는 iOS에서 사용할 수 없는 <code>java.util.UUID</code> 클래스를 사용하여 생성됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fakeUser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggedInUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(java.util.UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jane Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Kotlin 표준 라이브러리가 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.uuid/-uuid/" target="_blank" rel="noreferrer">UUID 생성을 위한 실험적 클래스</a>를 제공하지만, 이 경우 플랫폼 특정 기능을 사용하여 이를 연습해 봅시다.</p><p>공유 코드에 <code>randomUUID()</code> 함수에 대한 <code>expect</code> 선언을 제공하고 각 플랫폼(안드로이드 및 iOS)에 대한 <code>actual</code> 구현을 해당 소스 세트에 제공합니다. <a href="./multiplatform-connect-to-apis">플랫폼 특정 API 연결</a>에 대해 더 자세히 알아볼 수 있습니다.</p><ol><li><p><code>login()</code> 함수의 <code>java.util.UUID.randomUUID()</code> 호출을 각 플랫폼에 대해 구현할 <code>randomUUID()</code> 호출로 변경합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fakeUser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggedInUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jane Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p><code>shared/src/commonMain</code> 디렉터리의 <code>com.jetbrains.simplelogin.shared</code> 패키지에 <code>Utils.kt</code> 파일을 생성하고 <code>expect</code> 선언을 제공합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span></code></pre></div></li><li><p><code>shared/src/androidMain</code> 디렉터리의 <code>com.jetbrains.simplelogin.shared</code> 패키지에 <code>Utils.android.kt</code> 파일을 생성하고 안드로이드에서 <code>randomUUID()</code>에 대한 <code>actual</code> 구현을 제공합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.util.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li><li><p><code>shared/src/iosMain</code> 디렉터리의 <code>com.jetbrains.simplelogin.shared</code>에 <code>Utils.ios.kt</code> 파일을 생성하고 iOS에서 <code>randomUUID()</code>에 대한 <code>actual</code> 구현을 제공합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.Foundation.NSUUID</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NSUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UUIDString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li><li><p><code>shared/src/commonMain</code> 디렉터리의 <code>LoginDataSource.kt</code> 파일에서 <code>randomUUID</code> 함수를 임포트합니다:</p></li></ol><pre><code>  \`\`\`kotlin
  import com.jetbrains.simplelogin.shared.randomUUID
  \`\`\`
</code></pre><p>이제 Kotlin은 안드로이드와 iOS에 대해 플랫폼 특정 UUID 구현을 사용할 것입니다.</p><h3 id="안드로이드에서-크로스-플랫폼-애플리케이션-실행" tabindex="-1">안드로이드에서 크로스 플랫폼 애플리케이션 실행 <a class="header-anchor" href="#안드로이드에서-크로스-플랫폼-애플리케이션-실행" aria-label="Permalink to &quot;안드로이드에서 크로스 플랫폼 애플리케이션 실행&quot;">​</a></h3><p>크로스 플랫폼 안드로이드 애플리케이션을 실행하여 이전과 같이 작동하는지 확인합니다.</p><p><img src="`+m+'" alt="Android login application" width="300"></p><h2 id="크로스-플랫폼-애플리케이션을-ios에서-작동하게-만들기" tabindex="-1">크로스 플랫폼 애플리케이션을 iOS에서 작동하게 만들기 <a class="header-anchor" href="#크로스-플랫폼-애플리케이션을-ios에서-작동하게-만들기" aria-label="Permalink to &quot;크로스 플랫폼 애플리케이션을 iOS에서 작동하게 만들기&quot;">​</a></h2><p>안드로이드 애플리케이션을 크로스 플랫폼으로 만든 후, iOS 애플리케이션을 생성하고 공유된 비즈니스 로직을 재사용할 수 있습니다.</p><ol><li><a href="#create-an-ios-project-in-xcode">Xcode에서 iOS 프로젝트 생성</a></li><li><a href="#configure-the-ios-project-to-use-a-kmp-framework">KMP 프레임워크를 사용하도록 iOS 프로젝트 구성</a></li><li><a href="#set-up-an-ios-run-configuration-in-android-studio">Android Studio에서 iOS 실행 구성 설정</a></li><li><a href="#use-the-shared-module-in-the-ios-project">iOS 프로젝트에서 공유 모듈 사용</a></li></ol><h3 id="xcode에서-ios-프로젝트-생성" tabindex="-1">Xcode에서 iOS 프로젝트 생성 <a class="header-anchor" href="#xcode에서-ios-프로젝트-생성" aria-label="Permalink to &quot;Xcode에서 iOS 프로젝트 생성&quot;">​</a></h3><ol><li>Xcode에서 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>를 클릭합니다.</li><li>iOS 앱 템플릿을 선택하고 <strong>Next</strong>를 클릭합니다.</li></ol><p><img src="'+C+'" alt="iOS project template" width="700"></p><ol start="3"><li>제품 이름으로 &quot;simpleLoginIOS&quot;를 지정하고 <strong>Next</strong>를 클릭합니다.</li></ol><p><img src="'+b+'" alt="iOS project settings" width="700"></p><ol start="4"><li>프로젝트 위치로 크로스 플랫폼 애플리케이션이 저장된 디렉터리(예: <code>kmp-integration-sample</code>)를 선택합니다.</li></ol><p>Android Studio에서 다음과 같은 구조를 얻게 됩니다:</p><p><img src="'+f+'" alt="iOS project in Android Studio" width="194"></p><p>크로스 플랫폼 프로젝트의 다른 최상위 디렉터리와 일관성을 위해 <code>simpleLoginIOS</code> 디렉터리 이름을 <code>iosApp</code>으로 변경할 수 있습니다. 이렇게 하려면 Xcode를 닫은 다음 <code>simpleLoginIOS</code> 디렉터리 이름을 <code>iosApp</code>으로 변경합니다. Xcode가 열려 있는 상태에서 폴더 이름을 변경하면 경고가 표시되고 프로젝트가 손상될 수 있습니다.</p><p><img src="'+v+'" alt="Renamed iOS project directory in Android Studio" width="194"></p><h3 id="kmp-프레임워크를-사용하도록-ios-프로젝트-구성" tabindex="-1">KMP 프레임워크를 사용하도록 iOS 프로젝트 구성 <a class="header-anchor" href="#kmp-프레임워크를-사용하도록-ios-프로젝트-구성" aria-label="Permalink to &quot;KMP 프레임워크를 사용하도록 iOS 프로젝트 구성&quot;">​</a></h3><p>iOS 앱과 Kotlin Multiplatform이 빌드한 프레임워크 간의 통합을 직접 설정할 수 있습니다. 이 방법의 대안은 <a href="./multiplatform-ios-integration-overview">iOS 통합 방법 개요</a>에 설명되어 있지만, 이 튜토리얼의 범위를 벗어납니다.</p><ol><li><p>Android Studio에서 <code>iosApp/simpleLoginIOS.xcodeproj</code> 디렉터리를 마우스 오른쪽 버튼으로 클릭하고 <strong>Open In</strong> | <strong>Open In Associated Application</strong>을 선택하여 Xcode에서 iOS 프로젝트를 엽니다.</p></li><li><p>Xcode에서 <strong>Project</strong> 내비게이터의 프로젝트 이름을 두 번 클릭하여 iOS 프로젝트 설정을 엽니다.</p></li><li><p>왼쪽의 <strong>Targets</strong> 섹션에서 <strong>simpleLoginIOS</strong>를 선택한 다음 <strong>Build Phases</strong> 탭을 클릭합니다.</p></li><li><p><strong>+</strong> 아이콘을 클릭하고 <strong>New Run Script Phase</strong>를 선택합니다.</p><p><img src="'+_+`" alt="Add a run script phase" width="700"></p></li><li><p>스크립트 실행 필드에 다음 스크립트를 붙여넣습니다:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd &quot;$SRCROOT/..&quot;</span></span>
<span class="line"><span>./gradlew :shared:embedAndSignAppleFrameworkForXcode</span></span></code></pre></div></li></ol><p><img src="`+q+'" alt="Add the script" width="700"></p><ol start="5"><li><strong>Based on dependency analysis</strong> 옵션을 비활성화합니다.</li></ol><p>이렇게 하면 Xcode가 빌드할 때마다 스크립트를 실행하고 누락된 출력 종속성에 대해 매번 경고하지 않습니다.</p><ol start="6"><li><strong>Run Script</strong> 단계를 <strong>Compile Sources</strong> 단계보다 위로 이동합니다:</li></ol><p><img src="'+O+'" alt="Move the Run Script phase" width="700"></p><ol start="7"><li><strong>Build Settings</strong> 탭에서 <strong>Build Options</strong> 아래의 <strong>User Script Sandboxing</strong> 옵션을 비활성화합니다:</li></ol><p><img src="'+w+'" alt="User Script Sandboxing" width="700"></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>기본 <code>Debug</code> 또는 <code>Release</code>와 다른 사용자 지정 빌드 구성을 사용하는 경우, <strong>Build Settings</strong> 탭에서 <strong>User-Defined</strong> 아래에 <code>KOTLIN_FRAMEWORK_BUILD_TYPE</code> 설정을 추가하고 <code>Debug</code> 또는 <code>Release</code>로 설정합니다.</p></div><ol start="8"><li><p>Xcode에서 프로젝트를 빌드합니다 (메인 메뉴에서 <strong>Product</strong> | <strong>Build</strong>). 모든 것이 올바르게 구성되었다면, 프로젝트는 성공적으로 빌드되어야 합니다 (&quot;build phase will be run during every build&quot; 경고는 무시해도 됩니다).</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><strong>User Script Sandboxing</strong> 옵션을 비활성화하기 전에 프로젝트를 빌드했다면 빌드가 실패할 수 있습니다: Gradle 데몬 프로세스가 샌드박스 처리되어 다시 시작해야 할 수 있습니다. 프로젝트 디렉터리(예시에서는 <code>kmp-integration-sample</code>)에서 다음 명령을 실행하여 프로젝트를 다시 빌드하기 전에 중지하세요: <code>shell ./gradlew --stop </code></p></div></li></ol><h3 id="android-studio에서-ios-실행-구성-설정" tabindex="-1">Android Studio에서 iOS 실행 구성 설정 <a class="header-anchor" href="#android-studio에서-ios-실행-구성-설정" aria-label="Permalink to &quot;Android Studio에서 iOS 실행 구성 설정&quot;">​</a></h3><p>Xcode가 올바르게 설정되었는지 확인한 후, Android Studio로 돌아갑니다:</p><ol><li>메인 메뉴에서 <strong>File | Sync Project with Gradle Files</strong>를 선택합니다. Android Studio는 자동으로 <strong>simpleLoginIOS</strong>라는 실행 구성을 생성합니다.</li></ol><p>Android Studio는 자동으로 <strong>simpleLoginIOS</strong>라는 실행 구성을 생성하고 <code>iosApp</code> 디렉터리를 링크된 Xcode 프로젝트로 표시합니다.</p><ol start="2"><li>실행 구성 목록에서 <strong>simpleLoginIOS</strong>를 선택합니다. iOS 에뮬레이터를 선택한 다음 <strong>Run</strong>을 클릭하여 iOS 앱이 올바르게 실행되는지 확인합니다.</li></ol><p><img src="'+A+`" alt="The iOS run configuration in the list of run configurations" width="400"></p><h3 id="ios-프로젝트에서-공유-모듈-사용" tabindex="-1">iOS 프로젝트에서 공유 모듈 사용 <a class="header-anchor" href="#ios-프로젝트에서-공유-모듈-사용" aria-label="Permalink to &quot;iOS 프로젝트에서 공유 모듈 사용&quot;">​</a></h3><p><code>shared</code> 모듈의 <code>build.gradle.kts</code> 파일은 각 iOS 타겟에 대해 <code>binaries.framework.baseName</code> 속성을 <code>sharedKit</code>으로 정의합니다. 이것은 Kotlin Multiplatform이 iOS 앱이 소비할 프레임워크의 이름입니다.</p><p>통합을 테스트하려면 Swift 코드에서 공통 코드 호출을 추가합니다:</p><ol><li>Android Studio에서 <code>iosApp/simpleloginIOS/ContentView.swift</code> 파일을 열고 프레임워크를 임포트합니다:</li></ol><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sharedKit</span></span></code></pre></div><ol start="2"><li>제대로 연결되었는지 확인하기 위해, <code>ContentView</code> 구조를 크로스 플랫폼 앱의 공유 모듈에서 <code>greet()</code> 함수를 사용하도록 변경합니다:</li></ol><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li>Android Studio iOS 실행 구성을 사용하여 앱을 실행하여 결과를 확인합니다:</li></ol><p><img src="`+D+`" alt="Greeting from the shared module" width="300"></p><ol start="4"><li><code>ContentView.swift</code> 파일의 코드를 다시 업데이트하여 공유 모듈의 비즈니스 로직을 사용하여 애플리케이션 UI를 렌더링합니다:</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><ol start="5"><li><p><code>simpleLoginIOSApp.swift</code> 파일에서 <code>sharedKit</code> 모듈을 임포트하고 <code>ContentView()</code> 함수의 인수를 지정합니다:</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwiftUI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sharedKit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleLoginIOSApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scene {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        WindowGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loginRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LoginRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LoginDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loginValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LoginDataValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>iOS 실행 구성을 다시 실행하여 iOS 앱이 로그인 양식을 표시하는지 확인합니다.</p></li><li><p>사용자 이름으로 &quot;Jane&quot;을, 비밀번호로 &quot;password&quot;를 입력합니다.</p></li><li><p><a href="#configure-the-ios-project-to-use-a-kmp-framework">이전에 통합을 설정했듯이</a>, iOS 앱은 공통 코드를 사용하여 입력을 검증합니다:</p></li></ol><p><img src="`+B+'" alt="Simple login application" width="300"></p><h2 id="결과를-즐기세요-–-로직을-한-번만-업데이트하세요" tabindex="-1">결과를 즐기세요 – 로직을 한 번만 업데이트하세요 <a class="header-anchor" href="#결과를-즐기세요-–-로직을-한-번만-업데이트하세요" aria-label="Permalink to &quot;결과를 즐기세요 – 로직을 한 번만 업데이트하세요&quot;">​</a></h2><p>이제 애플리케이션은 크로스 플랫폼입니다. <code>shared</code> 모듈의 비즈니스 로직을 업데이트하고 안드로이드와 iOS 모두에서 결과를 볼 수 있습니다.</p>',56)),i("ol",null,[i("li",null,[s[4]||(s[4]=a('사용자 비밀번호에 대한 유효성 검사 로직을 변경합니다: "password"는 유효한 옵션이 되어서는 안 됩니다. 이렇게 하려면 ')),s[5]||(s[5]=i("code",null,"LoginDataValidator",-1)),s[6]||(s[6]=a(" 클래스의 ")),s[7]||(s[7]=i("code",null,"checkPassword()",-1)),s[8]||(s[8]=a(" 함수를 업데이트합니다 (빨리 찾으려면 ")),t(o,null,{default:e(()=>s[3]||(s[3]=[a("Shift")])),_:1}),s[9]||(s[9]=a(" 키를 두 번 누른 다음 클래스 이름을 붙여넣고 ")),s[10]||(s[10]=i("strong",null,"Classes",-1)),s[11]||(s[11]=a(" 탭으로 전환하세요):"))])]),s[18]||(s[18]=l(`<div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared.data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoginDataValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            password.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Password must be &gt;5 characters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            password.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lowercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;password&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Password shouldn&#39;t be </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">password</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.Success</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>Android Studio에서 iOS와 안드로이드 애플리케이션을 모두 실행하여 변경 사항을 확인합니다:</li></ol><p><img src="`+S+'" alt="Android and iOS applications password error" width="600"></p><p>이 튜토리얼의 <a href="https://github.com/Kotlin/kmp-integration-sample/tree/final" target="_blank" rel="noreferrer">최종 코드</a>를 검토할 수 있습니다.</p><h2 id="무엇을-더-공유할-수-있을까요" tabindex="-1">무엇을 더 공유할 수 있을까요? <a class="header-anchor" href="#무엇을-더-공유할-수-있을까요" aria-label="Permalink to &quot;무엇을 더 공유할 수 있을까요?&quot;">​</a></h2><p>애플리케이션의 비즈니스 로직을 공유했지만, 애플리케이션의 다른 레이어도 공유할 수 있습니다. 예를 들어, <code>ViewModel</code> 클래스 코드는 <a href="https://github.com/Kotlin/kmp-integration-sample/blob/final/app/src/main/java/com/jetbrains/simplelogin/androidapp/ui/login/LoginViewModel.kt" target="_blank" rel="noreferrer">안드로이드</a>와 <a href="https://github.com/Kotlin/kmp-integration-sample/blob/final/iosApp/SimpleLoginIOS/ContentView.swift#L84" target="_blank" rel="noreferrer">iOS 애플리케이션</a>에서 거의 동일하며, 모바일 애플리케이션이 동일한 프레젠테이션 레이어를 가져야 한다면 공유할 수 있습니다.</p><h2 id="다음-단계는" tabindex="-1">다음 단계는? <a class="header-anchor" href="#다음-단계는" aria-label="Permalink to &quot;다음 단계는?&quot;">​</a></h2><p>안드로이드 애플리케이션을 크로스 플랫폼으로 만든 후, 다음으로 진행할 수 있습니다:</p><ul><li><a href="./multiplatform-add-dependencies">멀티플랫폼 라이브러리 종속성 추가</a></li><li><a href="./multiplatform-android-dependencies">안드로이드 종속성 추가</a></li><li><a href="./multiplatform-ios-dependencies">iOS 종속성 추가</a></li></ul><p>Compose Multiplatform을 사용하여 모든 플랫폼에서 통합된 UI를 만들 수 있습니다:</p><ul><li><a href="./compose-multiplatform-and-jetpack-compose">Compose Multiplatform 및 Jetpack Compose에 대해 알아보기</a></li><li><a href="./compose-multiplatform-resources">Compose Multiplatform에 사용 가능한 리소스 탐색</a></li><li><a href="./compose-multiplatform-create-first-app">공유 로직과 UI로 앱 생성</a></li></ul><p>커뮤니티 리소스도 확인할 수 있습니다:</p><ul><li><a href="https://www.youtube.com/watch?v=vb-Pt8SdfEE&amp;t=1s" target="_blank" rel="noreferrer">비디오: 안드로이드 프로젝트를 Kotlin Multiplatform로 마이그레이션하는 방법</a></li><li><a href="https://www.youtube.com/watch?v=X6ckI1JWjqo" target="_blank" rel="noreferrer">비디오: Kotlin JVM 코드를 Kotlin Multiplatform용으로 준비하는 3가지 방법</a></li></ul>',13))])}const $=I(U,[["render",j]]);export{J as __pageData,$ as default};
