import{_ as t,c as l,o as r,ag as e}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlinと取り組む Google Summer of Code 2023","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/gsoc-2023.md","filePath":"ja/kotlin/gsoc-2023.md","lastUpdated":1754307826000}'),i={name:"ja/kotlin/gsoc-2023.md"};function a(n,o,p,s,g,d){return r(),l("div",null,o[0]||(o[0]=[e('<h1 id="kotlinと取り組む-google-summer-of-code-2023" tabindex="-1">Kotlinと取り組む Google Summer of Code 2023 <a class="header-anchor" href="#kotlinと取り組む-google-summer-of-code-2023" aria-label="Permalink to &quot;Kotlinと取り組む Google Summer of Code 2023&quot;">​</a></h1><p>この記事には、Google Summer of Code with Kotlin 2023 の<a href="#project-ideas">プロジェクトのアイデアのリスト</a>が含まれています。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Google Summer of Code 2023 は既に終了しました。 GSoC 2024 に参加したい場合は、<a href="/ja/kotlin/gsoc-2024#project-ideas">こちらのプロジェクトアイデアのリスト</a>をご確認ください。</p></div><h2 id="プロジェクトのアイデア" tabindex="-1">プロジェクトのアイデア <a class="header-anchor" href="#プロジェクトのアイデア" aria-label="Permalink to &quot;プロジェクトのアイデア&quot;">​</a></h2><h3 id="kotlin-multiplatform-protobufs-難易度-高-350時間" tabindex="-1">Kotlin Multiplatform protobufs [難易度：高, 350時間] <a class="header-anchor" href="#kotlin-multiplatform-protobufs-難易度-高-350時間" aria-label="Permalink to &quot;Kotlin Multiplatform protobufs [難易度：高, 350時間]&quot;">​</a></h3><p><strong>概要</strong></p><p>protoc に対し、Kotlin/Native (iOS) ランタイムと Objective-C 相互運用を用いた Kotlin/Common プロトのサポートを追加します。</p><p><strong>動機</strong></p><p>protobufs には多くのプラットフォーム実装がありますが、Kotlin Multiplatform プロジェクトでそれらを使用する方法がありません。</p><p><strong>期待される成果</strong></p><p>Kotlin Multiplatform Protobuf のサポートを設計および構築し、最終的には以下に貢献します。</p><ul><li><a href="https://github.com/protocolbuffers/protobuf" target="_blank" rel="noreferrer">GitHub – protocolbuffers/protobuf: Protocol Buffers – Google&#39;s data interchange format</a></li><li><a href="https://github.com/google/protobuf-gradle-plugin" target="_blank" rel="noreferrer">GitHub – google/protobuf-gradle-plugin</a></li><li><a href="https://plugins.gradle.org/plugin/org.jetbrains.kotlin.multiplatform" target="_blank" rel="noreferrer">Kotlin Multiplatform Gradle Plugin</a></li></ul><p><strong>必要なスキル（推奨）</strong></p><ul><li>Kotlin</li><li>Objective-C</li><li>C++</li></ul><h3 id="kotlin-compiler-error-messages-難易度-高-350時間" tabindex="-1">Kotlin Compiler error messages [難易度：高, 350時間] <a class="header-anchor" href="#kotlin-compiler-error-messages-難易度-高-350時間" aria-label="Permalink to &quot;Kotlin Compiler error messages [難易度：高, 350時間]&quot;">​</a></h3><p><strong>概要</strong></p><p>K2 Kotlin コンパイラに改善されたコンパイラエラーメッセージを追加します。具体的には、Rust のように、より実用的で詳細な情報を提供します。</p><p><strong>動機</strong></p><p>Rust コンパイラのエラーメッセージは、あらゆるコンパイラの中で群を抜いて最も役立つと評価されることがよくあります。 Kotlin K2 コンパイラは、Kotlin におけるより良いコンパイラエラーのための優れた基盤を提供しますが、この可能性はやや未開拓です。</p><p><strong>期待される成果</strong></p><p>StackOverflow やその他のデータソースを使用して、ユーザーにとって大きな価値のある一般的なコンパイラエラーを特定します。 それらのエラーメッセージを改善するために、コンパイラに貢献します。</p><p><strong>必要なスキル（推奨）</strong></p><ul><li>Kotlin</li><li>Compiler architecture</li></ul><h3 id="kotlin-multiplatform-libraries-難易度-低または中-175または350時間" tabindex="-1">Kotlin Multiplatform libraries [難易度：低または中, 175または350時間] <a class="header-anchor" href="#kotlin-multiplatform-libraries-難易度-低または中-175または350時間" aria-label="Permalink to &quot;Kotlin Multiplatform libraries [難易度：低または中, 175または350時間]&quot;">​</a></h3><p><strong>概要</strong></p><p>一般的に必要とされる Kotlin Multiplatform ライブラリを作成し、（Maven Central に）提供します。 例えば、圧縮、暗号化など。</p><p><strong>動機</strong></p><p>Kotlin Multiplatform はまだ比較的新しく、プラットフォームに依存しない（Kotlin/Common）か、またはプラットフォーム固有の実装（<code>expect</code>/<code>actual</code>）を持つ、いくつかの追加ライブラリが必要とされています。</p><p><strong>期待される成果</strong></p><p>JVM/Android および Kotlin/Native (iOS) を他のターゲット（Kotlin/JS）よりも優先して、少なくとも1つの Kotlin Multiplatform ライブラリを設計し提供します。</p><p><strong>必要なスキル（推奨）</strong></p><ul><li>Kotlin</li><li>Objective-C</li></ul><h3 id="groovy-to-kotlin-gradle-dsl-converter-難易度-中-350時間" tabindex="-1">Groovy to Kotlin Gradle DSL Converter [難易度：中, 350時間] <a class="header-anchor" href="#groovy-to-kotlin-gradle-dsl-converter-難易度-中-350時間" aria-label="Permalink to &quot;Groovy to Kotlin Gradle DSL Converter [難易度：中, 350時間]&quot;">​</a></h3><p><strong>概要</strong></p><p>このプロジェクトは、Gradle スクリプトに主な焦点を当てた Groovy から Kotlin へのコンバーターの作成を目指します。 まず、ユーザーが Groovy スタイルの依存関係宣言を Kotlin スクリプトに貼り付けた際に IDE が自動的に変換するといった、基本的なユースケースから着手します。 その後、より複雑なコード構造やファイル全体の変換に対応していきます。</p><p><strong>動機</strong></p><p>Kotlin Gradle DSL は人気を集めており、まもなく Gradle でプロジェクトを構築する際のデフォルトの選択肢になるほどです。 しかし、Gradle に関する多くのドキュメントやリソースは依然として Groovy に言及しており、Groovy のサンプルを <code>build.gradle.kts</code> に貼り付ける際には手動での編集が必要です。 さらに、Gradle 周りの多くの新機能はまず Kotlin で提供されるようになり、結果としてユーザーは Groovy DSL から Kotlin DSL へと移行することになるでしょう。 したがって、ビルド設定の自動コード変換は、この移行を大幅に容易にし、多くの時間を節約することになるでしょう。</p><p><strong>期待される成果</strong></p><p>Gradle DSL に主な焦点を置いた、Groovy コードを Kotlin に変換できる IntelliJ IDEA 用プラグイン。</p><p><strong>必要なスキル（推奨）</strong></p><ul><li>Gradle の基本的な知識</li><li>パーサーとコンパイラの一般的な動作に関する基本的な知識</li><li>Kotlin の基本的な知識</li></ul><h3 id="eclipse-gradle-kts-editing-難易度-中-350時間" tabindex="-1">Eclipse Gradle KTS editing [難易度：中, 350時間] <a class="header-anchor" href="#eclipse-gradle-kts-editing-難易度-中-350時間" aria-label="Permalink to &quot;Eclipse Gradle KTS editing [難易度：中, 350時間]&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><a href="https://kotlinfoundation.org/news/gsoc-2023-eclipse-gradle-kotlin/" target="_blank" rel="noreferrer">このプロジェクトに関するブログ投稿を読む</a></p></div><p><strong>概要</strong></p><p>Eclipse で Gradle Kotlin スクリプト (KTS) の編集体験を向上させます。</p><p><strong>動機</strong></p><p>IntelliJ IDEA および Android Studio には KTS Gradle ビルドスクリプトの編集に対する優れたサポートがありますが、Eclipse のサポートは不足しています。 定義への Ctrl+クリック、コード補完、コードエラーのハイライト表示はすべて改善の余地があります。</p><p><strong>期待される成果</strong></p><p>KTS の編集における開発者体験を向上させる Gradle Eclipse プラグインへの貢献。</p><p><strong>必要なスキル（推奨）</strong></p><ul><li>Kotlin</li><li>Gradle</li><li>Eclipse プラットフォームとプラグイン</li></ul><h3 id="improve-support-for-parameter-forwarding-in-the-kotlin-plugin-for-intellij-idea-難易度-中-350時間" tabindex="-1">Improve support for parameter forwarding in the Kotlin Plugin for IntelliJ IDEA [難易度：中, 350時間] <a class="header-anchor" href="#improve-support-for-parameter-forwarding-in-the-kotlin-plugin-for-intellij-idea-難易度-中-350時間" aria-label="Permalink to &quot;Improve support for parameter forwarding in the Kotlin Plugin for IntelliJ IDEA [難易度：中, 350時間]&quot;">​</a></h3><p><strong>概要と動機</strong></p><p><a href="https://github.com/JetBrains/intellij-community/tree/master/plugins/kotlin" target="_blank" rel="noreferrer">Kotlin プラグイン</a>は、IntelliJ IDEA および Android Studio で Kotlin 言語のサポートを提供します。 このプロジェクトの範囲内で、あなたはプラグインのパラメータ転送 (parameter forwarding) のサポートを改善します。</p><p>継承よりもコンポジションを優先することは、広く知られた原則です。 IntelliJ IDEA は、継承を使用するコードの記述に対して優れたサポート（IDE が提案する補完やクイックフィックスなど）を提供していますが、継承の代わりにコンポジションを使用するコードのサポートはまだ実装されていません。</p><p>コンポジションを多用するコードを扱う上での主な問題は、パラメータ転送です。 特に：</p><ul><li>現在デフォルトのパラメータ値を使用している他の関数に引数として転送できるパラメータ宣言の補完を IDE が提案しません。</li><li>IDE は転送されたパラメータのチェーンをリネームしません。</li><li>IDE は、必要なすべての引数を転送可能なパラメータで埋めるクイックフィックスを提供しません。</li></ul><p>このようなサポートが非常に評価される顕著な例の1つは Jetpack Compose です。 Android のモダンな UI 構築ツールキットである Jetpack Compose は、関数コンポジションとパラメータ転送を多用しています。 <code>@Composable</code> 関数は多くのパラメータを持つため、それらを扱うのがすぐに面倒になります。 例えば、<code>androidx.compose.material.TextField</code> には 19 のパラメータがあります。</p><p><strong>期待される成果</strong></p><ul><li>IntelliJ IDEA におけるパラメータおよび引数の補完候補の改善。</li><li>必要なすべての引数を、同じ名前と型を持つパラメータで埋めることを提案する IDE クイックフィックスの実装。</li><li><strong>リネーム</strong>リファクタリングで、転送されたパラメータのチェーンがリネームされること。</li><li>パラメータ転送や多くのパラメータを持つ関数に関する、その他すべての IDE の改善。</li></ul><p><strong>必要なスキル（推奨）</strong></p><ul><li>Kotlin および Java の知識</li><li>大規模なコードベースをナビゲートする能力</li></ul><h3 id="enhance-the-kotlinx-benchmark-library-api-and-user-experience-難易度-低-175時間" tabindex="-1">Enhance the kotlinx-benchmark library API and user experience [難易度：低, 175時間] <a class="header-anchor" href="#enhance-the-kotlinx-benchmark-library-api-and-user-experience-難易度-低-175時間" aria-label="Permalink to &quot;Enhance the kotlinx-benchmark library API and user experience [難易度：低, 175時間]&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><a href="https://kotlinfoundation.org/news/gsoc-2023-kotlinx-benchmark/" target="_blank" rel="noreferrer">このプロジェクトに関するブログ投稿を読む</a></p></div><p><strong>概要</strong></p><p><code>kotlinx-benchmark</code> は、Kotlin で書かれたマルチプラットフォームコードのベンチマークを行うためのオープンソースライブラリです。 このライブラリには最低限の骨格はありますが、きめ細かなベンチマーク設定（時間単位、モードなど）、JVM と Kotlin/Native ベンチマーク間の機能パリティ、コマンドライン API、最新の Gradle サポートといった QoL (Quality-of-Life) 機能が不足しています。 ドキュメント、統合テスト、およびサンプルも遅れています。</p><p><strong>動機</strong></p><p>このライブラリは既に実装されていますが、正しく使用するのが難しい場合があり、一部のユーザーを混乱させています。 このライブラリのユーザーエクスペリエンスを改善することは、Kotlin コミュニティに大いに役立つでしょう。</p><p><strong>期待される成果</strong></p><ul><li>ライブラリに明確なドキュメントと使用例が提供されていること。</li><li>ライブラリ API がシンプルで使いやすいこと。</li><li>Kotlin/JVM コードのベンチマークのオプションが、他のプラットフォーム上のコードのベンチマークにも利用できること。</li></ul><p><strong>必要なスキル（推奨）</strong></p><ul><li>Kotlin</li><li>Gradle internals</li></ul><h3 id="parallel-stacks-for-kotlin-coroutines-in-the-debugger-難易度-高-350時間" tabindex="-1">Parallel stacks for Kotlin Coroutines in the debugger [難易度：高, 350時間] <a class="header-anchor" href="#parallel-stacks-for-kotlin-coroutines-in-the-debugger-難易度-高-350時間" aria-label="Permalink to &quot;Parallel stacks for Kotlin Coroutines in the debugger [難易度：高, 350時間]&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><a href="https://kotlinfoundation.org/news/gsoc-2023-parallel-stacks/" target="_blank" rel="noreferrer">このプロジェクトに関するブログ投稿を読む</a></p></div><p><strong>概要</strong></p><p>Kotlin コルーチンのデバッグ体験を向上させるため、<a href="https://www.jetbrains.com/help/rider/Debugging_Multithreaded_Applications.html#parallel-stacks" target="_blank" rel="noreferrer">Parallel Stacks</a> ビューを実装します。</p><p><strong>動機</strong></p><p>現在、IntelliJ IDEA におけるコルーチンのデバッグサポートは非常に限られています。 Kotlin デバッガーには、ユーザーがすべてのコルーチンとその状態を表示できる<a href="/ja/kotlin/debug-coroutines-with-idea#debug-coroutines"><strong>コルーチンパネル</strong></a>がありますが、多くのコルーチンを含むアプリケーションをデバッグする際にはあまり役立ちません。 JetBrains Rider には、スレッドとそのスタックトレースをグラフビューで検査できる<a href="https://www.jetbrains.com/help/rider/Debugging_Multithreaded_Applications.html#parallel-stacks" target="_blank" rel="noreferrer">Parallel Stacks</a> 機能があり、これはコルーチンを検査するのに最適な方法となるでしょう。</p><p><strong>期待される成果</strong></p><p>Kotlin コルーチンデバッガー API を使用して、デバッガーにコルーチンのパラレルスタックビューを追加する IntelliJ IDEA プラグインを開発します。 コルーチンのグラフ表現を改善する方法を見つけます。</p><p><strong>必要なスキル（推奨）</strong></p><ul><li>Kotlin</li><li>Kotlin コルーチン</li><li>IntelliJ IDEA プラグイン開発</li></ul>',82)]))}const h=t(i,[["render",a]]);export{u as __pageData,h as default};
