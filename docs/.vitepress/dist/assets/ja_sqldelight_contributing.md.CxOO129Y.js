import{_ as a,c as s,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"貢献する","description":"","frontmatter":{},"headers":[],"relativePath":"ja/sqldelight/contributing.md","filePath":"ja/sqldelight/contributing.md","lastUpdated":1748435462000}'),l={name:"ja/sqldelight/contributing.md"};function p(i,e,o,r,c,d){return n(),s("div",null,e[0]||(e[0]=[t(`<h1 id="貢献する" tabindex="-1">貢献する <a class="header-anchor" href="#貢献する" aria-label="Permalink to &quot;貢献する&quot;">​</a></h1><p>このプロジェクトにコードを貢献したい場合は、GitHubを通じてリポジトリをフォークし、プルリクエストを送信することで行うことができます。</p><p>コードを提出する際は、可能な限りコードの可読性を保つため、既存の規約とスタイルに従うよう最大限努力してください。</p><p>あなたのコードがプロジェクトに受け入れられる前に、<a href="https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&amp;ndplr=1" target="_blank" rel="noreferrer">個人コントリビューターライセンス契約 (CLA)</a> にも署名する必要があります。</p><h2 id="sqldelight" tabindex="-1">SQLDelight <a class="header-anchor" href="#sqldelight" aria-label="Permalink to &quot;SQLDelight&quot;">​</a></h2><p>貢献を始めたい場合は、SQLDelightのどの部分に貢献したいかに応じて、以下の特定のガイドを参照してください。まだ不明な点がある場合は、調査中のIssueにコメントで詰まっている箇所を記入していただければ、そこで返信いたします。または、行おうとしていることについてIssueを作成し、議論を開始してください。</p><h3 id="ideプラグイン" tabindex="-1">IDEプラグイン <a class="header-anchor" href="#ideプラグイン" aria-label="Permalink to &quot;IDEプラグイン&quot;">​</a></h3><p>IDEのバグを修正したり、IDEを拡張したい場合、コード変更は<code>sqldelight-idea-plugin</code>モジュールで行われる可能性が高いです。変更は<code>./gradlew runIde</code>タスクを使用してテストでき、<code>./gradlew runIde --debug-jvm</code>を使用してライブデバッグを行うことができます。</p><p>IDEでバグに遭遇しているものの、サンプルプロジェクトで再現できない場合は、IDEをライブデバッグすることができます。これには、IntelliJの2番目のインストールが必要です。これを行うには、<a href="https://www.jetbrains.com/toolbox-app/" target="_blank" rel="noreferrer">Toolbox</a>を使用して、IDEリストの一番下までスクロールし、異なるバージョンのIntelliJを選択します。</p><p>デバッガを使用したいIDEで、SQLDelightのリポジトリをチェックアウトし、新しい<code>Remote</code>実行構成を作成します。これにより、「リモートJVMのコマンドライン引数」が自動的に入力されます。例えば、<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</code>のようになります。その値をコピーし、デバッグしたいIDEを開きます。<code>Help -&gt; Edit Custom VM Options</code>を選択し、コピーした行を開かれたファイルの最後に貼り付けます。デバッグしたいIDEを再起動し、起動したら構成を作成したIDEを開き、作成したリモート構成を使用してデバッガをアタッチします。</p><p>IDEプラグインとその機能の構築に関する詳細については、<a href="https://jetbrains.org/intellij/sdk/docs/reference_guide/custom_language_support.html" target="_blank" rel="noreferrer">Jetbrains公式ドキュメント</a>を参照するか、<a href="https://blog.jetbrains.com/platform/2019/10/introducing-jetbrains-platform-slack-for-plugin-developers/" target="_blank" rel="noreferrer">Jetbrains Platform Slack</a>に参加してください。</p><h3 id="ドライバー" tabindex="-1">ドライバー <a class="header-anchor" href="#ドライバー" aria-label="Permalink to &quot;ドライバー&quot;">​</a></h3><p>独自のドライバーを作成したい場合、SQLDelightリポジトリの外部で<code>runtime</code>アーティファクトを使用して作成できます。ドライバーをテストするには、<code>driver-test</code>に依存し、<code>DriverTest</code>と<code>TransactionTest</code>を拡張して、SQLDelightが期待するように動作することを確認できます。</p><h4 id="非同期ドライバー" tabindex="-1">非同期ドライバー <a class="header-anchor" href="#非同期ドライバー" aria-label="Permalink to &quot;非同期ドライバー&quot;">​</a></h4><p>非同期呼び出しを行うドライバーは、<code>runtime-async</code>アーティファクトを使用することで実装できます。</p><h3 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h3><p>Gradleの問題に遭遇している場合は、<code>sqldelight-gradle-plugin/src/test</code>に、他のフォルダーと同様に、問題を再現するテストフィクスチャを作成することから始めてください。修正方法が分からなくても、この失敗するテストを含むPRを開いてください！テストケースは大変ありがたいです。 統合テストは、SQLite/MySQL/PostgreSQLなどを実行し、それぞれの実行環境とSQLDelightを使用してSQLクエリを実行するGradleプロジェクト全体をセットアップする方法を示しています。SQLDelightでランタイムの問題に遭遇している場合は、これらの既存の統合テストにテストを追加することを検討してください。</p><h3 id="コンパイラ" tabindex="-1">コンパイラ <a class="header-anchor" href="#コンパイラ" aria-label="Permalink to &quot;コンパイラ&quot;">​</a></h3><p>SQLDelightのコンパイラには多くの層があります。コード生成（codegen）に厳密に興味がある（SQLのパースには興味がない）場合は、<code>sqldelight-compiler</code>モジュールで貢献することになります。パーサーに興味がある場合は、<a href="https://github.com/alecstrong/sql-psi" target="_blank" rel="noreferrer">sql-psi</a>に貢献する必要があります。SQLDelightはKotlinコードの生成に<a href="https://github.com/square/kotlinpoet" target="_blank" rel="noreferrer">kotlinpoet</a>を使用しているため、Kotlin型を参照するためにそのAPIを必ず使用し、インポートが正しく機能するようにしてください。コード生成を何らかの方法で変更した場合は、プルリクエストを開く前に<code>./gradlew build</code>を実行してください。これにより、<code>sqldelight-compiler:integration-tests</code>の統合テストが更新されます。統合テスト（つまり、実行環境でSQLクエリを実行するテスト）を記述したい場合は、<code>sqldelight-compiler:integration-tests</code>にテストを追加してください。</p><hr><h2 id="sql-psi" tabindex="-1">SQL PSI <a class="header-anchor" href="#sql-psi" aria-label="Permalink to &quot;SQL PSI&quot;">​</a></h2><p>次のセクションでは、パーサーとPSIレイヤーへの貢献方法を説明しますが、その前に<a href="https://www.alecstrong.com/posts/multiple-dialects/" target="_blank" rel="noreferrer">multiple dialects</a>に関するブログ記事を読み、<a href="https://github.com/AlecStrong/sql-psi" target="_blank" rel="noreferrer">sql-psi</a>のさまざまな構成要素を理解しておく必要があります。SQLDelightと同様に、問題に遭遇したものの修正方法が分からない場合や、支援が必要な場合は、GitHub Issueにコメントするか、新しいIssueを作成して議論を開始してください。</p><p>SQL-PSIの変更については、対応する<code>core/src/test/fixtures_*</code>フォルダーにテストフィクスチャを追加する必要があります。<code>fixtures</code>フォルダー（サフィックスなし）はすべてのダイアレクトで実行されます。sql-psiに変更がマージされた後、SQLDelightでも変更を行う必要がある場合は、SQLDelightの<code>sql-psi-dev</code>ブランチをチェックアウトし、そのブランチをターゲットとしてPRを作成してください。sql-psiのスナップショットリリースを使用するため、sql-psiの変更がマージされてからおよそ10分後にはSQLDelightの変更をビルドできます。</p><h3 id="文法" tabindex="-1">文法 <a class="header-anchor" href="#文法" aria-label="Permalink to &quot;文法&quot;">​</a></h3><p>文法に新しいルールを追加する場合は、まずそれが既存の文法に追加する新しいルールなのか、それともANSI SQL（<a href="https://github.com/AlecStrong/sql-psi/blob/master/core/src/main/kotlin/com/alecstrong/sql/psi/core/sql.bnf" target="_blank" rel="noreferrer">sql.bnf</a>にある）からオーバーライドしたいルールなのかを判断してください。 どちらの場合でも、新しい文法でそのルールを定義する必要がありますが、ANSI SQLルールをオーバーライドする場合は、それをオーバーライドリストに追加し、ルールにオーバーライド属性を設定してください。</p><div class="language-bnf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bnf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>overrides ::= my_rule</span></span>
<span class="line"><span></span></span>
<span class="line"><span>my_rule ::= SOME_TOKEN {</span></span>
<span class="line"><span>  override = true</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>ルールの定義は、ANSI-SQLのルールを正確にコピー/ペーストすることから始めるべきです。ANSI-SQLのルールを参照するには、それを<code>{}</code>で囲む必要があるため、オーバーライドするルール内のすべての外部ルールを<code>{}</code>で囲む必要があります。</p><div class="language-bnf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bnf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>my_rule ::= internal_rule {external_rule} {</span></span>
<span class="line"><span>  override = true</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>internal_rule ::= SOME_TOKEN</span></span></code></pre></div><p>1つの注意点として、ANSI-SQLの<code>expr</code>ルールを参照する場合は、特別でオーバーライドできないため、<code>&lt;&lt;expr &#39;-1&#39;&gt;&gt;</code>のように記述する必要があります。</p><p>ANSI SQLから使用したいトークンは、手動でインポートする必要もあります。</p><div class="language-bnf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bnf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  parserImports = [</span></span>
<span class="line"><span>    &quot;static com.alecstrong.sql.psi.core.psi.SqlTypes.DELETE&quot;</span></span>
<span class="line"><span>    &quot;static com.alecstrong.sql.psi.core.psi.SqlTypes.FROM&quot;</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>overrides ::= delete</span></span>
<span class="line"><span></span></span>
<span class="line"><span>delete ::= DELETE FROM {table_name} {</span></span>
<span class="line"><span>  override = true</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>ダイアレクトは独自のトークンを追加できませんが、&quot;&quot;で囲むことで正確なテキストを要求できます。</p><div class="language-bnf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bnf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>my_rule ::= &quot;SOME_TOKEN&quot;</span></span></code></pre></div><p>オーバーライドするルールは、元のルールの型に準拠するコードを生成する必要があるため、元のルールに対して既存の型を<code>implement</code>および<code>extend</code>するようにしてください。</p><div class="language-bnf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bnf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>my_rule ::= internal_rule {external_rule} {</span></span>
<span class="line"><span>  extends = &quot;com.alecstrong.sql.psi.core.psi.impl.SqlMyRuleImpl&quot;</span></span>
<span class="line"><span>  implements = &quot;com.alecstrong.sql.psi.core.psi.SqlMyRule&quot;</span></span>
<span class="line"><span>  overrides = true</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>文法におけるルールオーバーライドの例については、PostgreSQLに<code>RETURNING</code>構文を追加する<a href="https://github.com/AlecStrong/sql-psi/pull/163/files" target="_blank" rel="noreferrer">このPR</a>を確認してください。</p><h3 id="ルール動作" tabindex="-1">ルール動作 <a class="header-anchor" href="#ルール動作" aria-label="Permalink to &quot;ルール動作&quot;">​</a></h3><p>多くの場合、PSIレイヤーの動作を変更したいことがあります（例えば、コンパイルを失敗させたい状況でエラーをスローするなど）。これを行うには、ルールに<code>extends</code>の代わりに<code>mixin</code>を使用させます。これは、新しいロジックを含む自分で記述するクラスです。</p><div class="language-bnf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bnf</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>my_rule ::= interal_rule {external_rule} {</span></span>
<span class="line"><span>  mixin = &quot;com.alecstrong.sql.psi.MyRuleMixin&quot;</span></span>
<span class="line"><span>  implements = &quot;com.alecstrong.sql.psi.core.psi.SqlMyRule&quot;</span></span>
<span class="line"><span>  overrides = true</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>そして、そのクラスが元のANSI SQL型とSQL-PSIの基底クラス<code>SqlCompositeElementImpl</code>を実装していることを確認します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>class MyRule(</span></span>
<span class="line"><span>  node: ASTNode</span></span>
<span class="line"><span>) : SqlCompositeElementImpl(node),</span></span>
<span class="line"><span>    SqlMyRule {</span></span>
<span class="line"><span>  fun annotate(annotationHolder: SqlAnnotationHolder) {</span></span>
<span class="line"><span>    if (internal_rule.text == &quot;bad_text&quot;) {</span></span>
<span class="line"><span>      annotationHolder.createErrorAnnotation(&quot;Invalid text value&quot;, internal_rule)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>例えば、<a href="https://github.com/AlecStrong/sql-psi/blob/f1137ff82dd0aa77f741a09d88855fbf9b751c00/core/src/main/kotlin/com/alecstrong/sql/psi/core/psi/mixins/DropIndexMixin.kt" target="_blank" rel="noreferrer">DropIndexMixin</a>は、削除されるインデックスがスキーマに存在することを確認します。</p><hr><p>このドキュメントでカバーされていない貢献に関する質問がある場合は、SqlDelightでIssueを開くか、改善に取り組めるようにPRを開いてください！</p>`,44)]))}const g=a(l,[["render",p]]);export{u as __pageData,g as default};
