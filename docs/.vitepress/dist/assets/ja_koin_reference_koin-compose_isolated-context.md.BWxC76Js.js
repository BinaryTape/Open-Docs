import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"Composeアプリケーションでの孤立したコンテキスト","description":"","frontmatter":{"title":"Composeアプリケーションでの孤立したコンテキスト"},"headers":[],"relativePath":"ja/koin/reference/koin-compose/isolated-context.md","filePath":"ja/koin/reference/koin-compose/isolated-context.md","lastUpdated":1748365453000}'),t={name:"ja/koin/reference/koin-compose/isolated-context.md"};function o(p,s,l,h,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="composeアプリケーションでの孤立したコンテキスト" tabindex="-1">Composeアプリケーションでの孤立したコンテキスト <a class="header-anchor" href="#composeアプリケーションでの孤立したコンテキスト" aria-label="Permalink to &quot;Composeアプリケーションでの孤立したコンテキスト&quot;">​</a></h1><p>Composeアプリケーションでは、SDKやホワイトラベルアプリケーションを扱う際に、ユーザーのKoin定義と混ざらないように、<a href="/ja/koin/reference/koin-core/context-isolation">孤立したコンテキスト</a>と同じように作業できます。</p><h2 id="孤立したコンテキストの定義" tabindex="-1">孤立したコンテキストの定義 <a class="header-anchor" href="#孤立したコンテキストの定義" aria-label="Permalink to &quot;孤立したコンテキストの定義&quot;">​</a></h2><p>まず、孤立したKoinインスタンスをメモリに保存するために、孤立したコンテキストホルダーを宣言しましょう。これは、このようなシンプルなObjectクラスで実現できます。<code>MyIsolatedKoinContext</code>クラスがKoinインスタンスを保持します：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyIsolatedKoinContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koinApp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> koinApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用するモジュールを宣言</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sdkAppModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>MyIsolatedKoinContext</code>クラスは、初期化の必要性に合わせて調整してください。</p></div><h2 id="composeでの孤立したコンテキストのセットアップ" tabindex="-1">Composeでの孤立したコンテキストのセットアップ <a class="header-anchor" href="#composeでの孤立したコンテキストのセットアップ" aria-label="Permalink to &quot;Composeでの孤立したコンテキストのセットアップ&quot;">​</a></h2><p>孤立したKoinコンテキストを定義したので、Composeでそれを使用し、すべてのAPIをオーバーライドするようにセットアップできます。ルートのCompose関数で<code>KoinIsolatedContext</code>を使用するだけです。これにより、Koinコンテキストがすべての子コンポーザブルに伝播されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 現在のKoinインスタンスをComposeコンテキストに設定</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    KoinIsolatedContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyIsolatedKoinContext.koinApp) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        MyScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>KoinIsolatedContext</code>の使用後、すべてのKoin Compose APIがあなたのKoin孤立コンテキストを使用します。</p></div>`,10)]))}const E=i(t,[["render",o]]);export{r as __pageData,E as default};
