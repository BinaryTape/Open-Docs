import{_ as e,c as t,o as r,ag as n}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"Kotlin 1.3 の互換性ガイド","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/compatibility-guide-13.md","filePath":"ja/kotlin/compatibility-guide-13.md","lastUpdated":1754307826000}'),a={name:"ja/kotlin/compatibility-guide-13.md"};function l(s,o,i,c,p,g){return r(),t("div",null,o[0]||(o[0]=[n('<h1 id="kotlin-1-3-の互換性ガイド" tabindex="-1">Kotlin 1.3 の互換性ガイド <a class="header-anchor" href="#kotlin-1-3-の互換性ガイド" aria-label="Permalink to &quot;Kotlin 1.3 の互換性ガイド&quot;">​</a></h1><p><em><a href="/ja/kotlin/kotlin-evolution-principles">言語のモダンさを維持する</a></em> と <em><a href="/ja/kotlin/kotlin-evolution-principles">快適なアップデート</a></em> は、Kotlin言語設計における基本的な原則です。前者は、言語の進化を妨げる構成要素は削除されるべきだと述べており、後者は、コードの移行を可能な限りスムーズにするために、この削除が事前に十分に伝えられるべきだと述べています。</p><p>言語の変更点のほとんどは、アップデートの変更ログやコンパイラの警告など、他のチャネルを通じてすでに発表されていますが、このドキュメントはそれらすべてを要約し、Kotlin 1.2 から Kotlin 1.3 への移行に関する完全なリファレンスを提供します。</p><h2 id="基本的な用語" tabindex="-1">基本的な用語 <a class="header-anchor" href="#基本的な用語" aria-label="Permalink to &quot;基本的な用語&quot;">​</a></h2><p>このドキュメントでは、いくつかの種類の互換性について説明します。</p><ul><li><em>ソース互換性</em>: ソース非互換の変更とは、これまで問題なく（エラーや警告なしに）コンパイルできていたコードが、コンパイルできなくなる変更です。</li><li><em>バイナリ互換性</em>: 2つのバイナリ成果物がバイナリ互換であるとは、それらを交換してもロードエラーやリンクエラーが発生しない場合を指します。</li><li><em>振る舞い互換性</em>: ある変更が振る舞い非互換であるとは、同じプログラムが変更適用前後で異なる振る舞いを示す場合を指します。</li></ul><p>これらの定義は純粋なKotlinのみに与えられていることに注意してください。他の言語（例：Java）から見たKotlinコードの互換性は、このドキュメントの範囲外です。</p><h2 id="非互換の変更" tabindex="-1">非互換の変更 <a class="header-anchor" href="#非互換の変更" aria-label="Permalink to &quot;非互換の変更&quot;">​</a></h2><h3 id="コンストラクター引数の評価順序と-clinit-呼び出し" tabindex="-1">コンストラクター引数の評価順序と <code>&lt;clinit&gt;</code> 呼び出し <a class="header-anchor" href="#コンストラクター引数の評価順序と-clinit-呼び出し" aria-label="Permalink to &quot;コンストラクター引数の評価順序と `&lt;clinit&gt;` 呼び出し&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-19532" target="_blank" rel="noreferrer">KT-19532</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 振る舞い</p><p><strong>Short summary</strong>: クラスの初期化に関する評価順序が1.3で変更されます</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.3未満: 以前の振る舞い（詳細はIssueを参照）</li><li>1.3以上: 振る舞いが変更されました <code>-Xnormalize-constructor-calls=disable</code> を使用して、一時的に1.3以前の振る舞いに戻すことができます。このフラグのサポートは次期メジャーリリースで削除される予定です。</li></ul></blockquote><h3 id="アノテーションコンストラクターパラメーターに対するゲッターターゲットアノテーションの欠落" tabindex="-1">アノテーションコンストラクターパラメーターに対するゲッターターゲットアノテーションの欠落 <a class="header-anchor" href="#アノテーションコンストラクターパラメーターに対するゲッターターゲットアノテーションの欠落" aria-label="Permalink to &quot;アノテーションコンストラクターパラメーターに対するゲッターターゲットアノテーションの欠落&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-25287" target="_blank" rel="noreferrer">KT-25287</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 振る舞い</p><p><strong>Short summary</strong>: アノテーションのコンストラクターパラメーターに対するゲッターターゲットアノテーションは、1.3で適切にクラスファイルに書き込まれるようになります</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.3未満: アノテーションのコンストラクターパラメーターに対するゲッターターゲットアノテーションは適用されません</li><li>1.3以上: アノテーションのコンストラクターパラメーターに対するゲッターターゲットアノテーションは適切に適用され、生成されたコードに書き込まれます</li></ul></blockquote><h3 id="クラスコンストラクターの-get-アノテーションにおけるエラーの欠落" tabindex="-1">クラスコンストラクターの <code>@get:</code> アノテーションにおけるエラーの欠落 <a class="header-anchor" href="#クラスコンストラクターの-get-アノテーションにおけるエラーの欠落" aria-label="Permalink to &quot;クラスコンストラクターの `@get:` アノテーションにおけるエラーの欠落&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-19628" target="_blank" rel="noreferrer">KT-19628</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: ゲッターターゲットアノテーションのエラーは1.3で適切に報告されるようになります</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.2未満: ゲッターターゲットアノテーションのコンパイルエラーは報告されず、不正なコードが問題なくコンパイルされていました。</li><li>1.2.x: エラーはツールのみによって報告され、コンパイラはそのようなコードを警告なしに引き続きコンパイルしていました。</li><li>1.3以上: コンパイラによってもエラーが報告され、不正なコードは拒否されるようになります。</li></ul></blockquote><h3 id="notnull-でアノテーションされたjava型へのアクセスにおけるnull許容性アサーション" tabindex="-1"><code>@NotNull</code> でアノテーションされたJava型へのアクセスにおけるNull許容性アサーション <a class="header-anchor" href="#notnull-でアノテーションされたjava型へのアクセスにおけるnull許容性アサーション" aria-label="Permalink to &quot;`@NotNull` でアノテーションされたJava型へのアクセスにおけるNull許容性アサーション&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-20830" target="_blank" rel="noreferrer">KT-20830</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 振る舞い</p><p><strong>Short summary</strong>: 非nullアノテーションが付与されたJava型に対するnull許容性アサーションがより積極的に生成されるようになり、<code>null</code> を渡すコードがより早く失敗するようになります。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.3未満: 型推論が関与する場合、コンパイラはそのようなアサーションを見落とす可能性があり、バイナリに対するコンパイル中に潜在的な <code>null</code> 伝播を許していました（詳細はIssueを参照）。</li><li>1.3以上: コンパイラは見落とされていたアサーションを生成するようになります。これにより、これまで（誤って）<code>null</code>を渡していたコードがより早く失敗する可能性があります。 <code>-XXLanguage:-StrictJavaNullabilityAssertions</code> を使用して、一時的に1.3以前の振る舞いに戻すことができます。このフラグのサポートは次期メジャーリリースで削除される予定です。</li></ul></blockquote><h3 id="enumメンバーに対する不健全なスマートキャスト" tabindex="-1">enumメンバーに対する不健全なスマートキャスト <a class="header-anchor" href="#enumメンバーに対する不健全なスマートキャスト" aria-label="Permalink to &quot;enumメンバーに対する不健全なスマートキャスト&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-20772" target="_blank" rel="noreferrer">KT-20772</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: 単一のenumエントリのメンバーに対するスマートキャストは、そのenumエントリにのみ正しく適用されるようになります</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.3未満: 単一のenumエントリのメンバーに対するスマートキャストが、他のenumエントリの同じメンバーに対する不健全なスマートキャストを引き起こす可能性がありました。</li><li>1.3以上: スマートキャストは単一のenumエントリのメンバーにのみ適切に適用されるようになります。 <code>-XXLanguage:-SoundSmartcastForEnumEntries</code> は一時的に以前の振る舞いに戻します。このフラグのサポートは次期メジャーリリースで削除される予定です。</li></ul></blockquote><h3 id="ゲッターでの-val-バッキングフィールドの再割り当て" tabindex="-1">ゲッターでの <code>val</code> バッキングフィールドの再割り当て <a class="header-anchor" href="#ゲッターでの-val-バッキングフィールドの再割り当て" aria-label="Permalink to &quot;ゲッターでの `val` バッキングフィールドの再割り当て&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-16681" target="_blank" rel="noreferrer">KT-16681</a></p><p><strong>Components</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: <code>val</code>プロパティのバッキングフィールドをゲッター内で再割り当てすることが禁止されます</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.2未満: Kotlinコンパイラは、<code>val</code>のバッキングフィールドをゲッター内で変更することを許可していました。これはKotlinのセマンティクスに違反するだけでなく、<code>final</code>フィールドを再割り当てする不正なJVMバイトコードを生成していました。</li><li>1.2.X: <code>val</code>のバッキングフィールドを再割り当てするコードに対しては、非推奨の警告が報告されます。</li><li>1.3以上: 非推奨の警告がエラーに格上げされます。</li></ul></blockquote><h3 id="for-ループで反復される前に配列がキャプチャされること" tabindex="-1">for-ループで反復される前に配列がキャプチャされること <a class="header-anchor" href="#for-ループで反復される前に配列がキャプチャされること" aria-label="Permalink to &quot;for-ループで反復される前に配列がキャプチャされること&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-21354" target="_blank" rel="noreferrer">KT-21354</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: forループの範囲内の式が、ループ本体で更新されるローカル変数である場合、この変更はループの実行に影響を与えます。これは、範囲、文字シーケンス、コレクションなどの他のコンテナを反復処理する場合と一貫性がありません。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.2未満: 記述されたコードパターンは問題なくコンパイルされますが、ローカル変数の更新がループの実行に影響を与えます。</li><li>1.2.X: forループの範囲式が、ループ本体で割り当てられる配列型のローカル変数である場合、非推奨の警告が報告されます。</li><li>1.3: そのようなケースでの振る舞いを他のコンテナと一貫性のあるものに変更します。</li></ul></blockquote><h3 id="enumエントリ内のネストされた分類子" tabindex="-1">enumエントリ内のネストされた分類子 <a class="header-anchor" href="#enumエントリ内のネストされた分類子" aria-label="Permalink to &quot;enumエントリ内のネストされた分類子&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-16310" target="_blank" rel="noreferrer">KT-16310</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.3以降、enumエントリ内のネストされた分類子（クラス、オブジェクト、インターフェース、アノテーションクラス、enumクラス）は禁止されます</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.2未満: enumエントリ内のネストされた分類子は問題なくコンパイルされますが、実行時に例外で失敗する可能性があります。</li><li>1.2.X: ネストされた分類子に対して非推奨の警告が報告されます。</li><li>1.3以上: 非推奨の警告がエラーに格上げされます。</li></ul></blockquote><h3 id="データクラスによる-copy-のオーバーライド" tabindex="-1">データクラスによる <code>copy</code> のオーバーライド <a class="header-anchor" href="#データクラスによる-copy-のオーバーライド" aria-label="Permalink to &quot;データクラスによる `copy` のオーバーライド&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-19618" target="_blank" rel="noreferrer">KT-19618</a></p><p><strong>Components</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.3以降、データクラスが <code>copy()</code> をオーバーライドすることは禁止されます</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.2未満: <code>copy()</code> をオーバーライドするデータクラスは問題なくコンパイルされますが、実行時に失敗したり、奇妙な振る舞いをしたりする可能性があります。</li><li>1.2.X: <code>copy()</code> をオーバーライドするデータクラスに対して非推奨の警告が報告されます。</li><li>1.3以上: 非推奨の警告がエラーに格上げされます。</li></ul></blockquote><h3 id="throwable-を継承し、外側のクラスからジェネリックパラメータをキャプチャするインナークラス" tabindex="-1"><code>Throwable</code> を継承し、外側のクラスからジェネリックパラメータをキャプチャするインナークラス <a class="header-anchor" href="#throwable-を継承し、外側のクラスからジェネリックパラメータをキャプチャするインナークラス" aria-label="Permalink to &quot;`Throwable` を継承し、外側のクラスからジェネリックパラメータをキャプチャするインナークラス&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-17981" target="_blank" rel="noreferrer">KT-17981</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.3以降、インナークラスが <code>Throwable</code> を継承することは許可されません</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.2未満: <code>Throwable</code> を継承するインナークラスは問題なくコンパイルされていました。もしそのようなインナークラスがジェネリックパラメータをキャプチャすると、実行時に失敗する奇妙なコードパターンにつながる可能性がありました。</li><li>1.2.X: <code>Throwable</code> を継承するインナークラスに対して非推奨の警告が報告されます。</li><li>1.3以上: 非推奨の警告がエラーに格上げされます。</li></ul></blockquote><h3 id="コンパニオンオブジェクトを含む複雑なクラス階層に関する可視性ルール" tabindex="-1">コンパニオンオブジェクトを含む複雑なクラス階層に関する可視性ルール <a class="header-anchor" href="#コンパニオンオブジェクトを含む複雑なクラス階層に関する可視性ルール" aria-label="Permalink to &quot;コンパニオンオブジェクトを含む複雑なクラス階層に関する可視性ルール&quot;">​</a></h3><blockquote><p><strong>Issues</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-21515" target="_blank" rel="noreferrer">KT-21515</a>, <a href="https://youtrack.jetbrains.com/issue/KT-25333" target="_blank" rel="noreferrer">KT-25333</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.3以降、コンパニオンオブジェクトとネストされた分類子を含む複雑なクラス階層において、短い名前による可視性ルールがより厳格になります。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.2未満: 以前の可視性ルール（詳細はIssueを参照）</li><li>1.2.X: アクセスできなくなる短い名前に対して非推奨の警告が報告されます。ツールは完全な名前を追加することによる自動移行を提案します。</li><li>1.3以上: 非推奨の警告がエラーに格上げされます。問題のあるコードには、完全な修飾子または明示的なインポートを追加する必要があります。</li></ul></blockquote><h3 id="非定数の-vararg-アノテーションパラメータ" tabindex="-1">非定数の <code>vararg</code> アノテーションパラメータ <a class="header-anchor" href="#非定数の-vararg-アノテーションパラメータ" aria-label="Permalink to &quot;非定数の `vararg` アノテーションパラメータ&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-23153" target="_blank" rel="noreferrer">KT-23153</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.3以降、非定数値をvarargアノテーションパラメータとして設定することは禁止されます</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.2未満: コンパイラはvarargアノテーションパラメータに非定数値を渡すことを許可していましたが、バイトコード生成時にその値を実際には破棄し、非自明な振る舞いにつながっていました。</li><li>1.2.X: そのようなコードパターンに対して非推奨の警告が報告されます。</li><li>1.3以上: 非推奨の警告がエラーに格上げされます。</li></ul></blockquote><h3 id="ローカルアノテーションクラス" tabindex="-1">ローカルアノテーションクラス <a class="header-anchor" href="#ローカルアノテーションクラス" aria-label="Permalink to &quot;ローカルアノテーションクラス&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-23277" target="_blank" rel="noreferrer">KT-23277</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.3以降、ローカルアノテーションクラスはサポートされません</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.2未満: コンパイラはローカルアノテーションクラスを問題なくコンパイルしていました。</li><li>1.2.X: ローカルアノテーションクラスに対して非推奨の警告が報告されます。</li><li>1.3以上: 非推奨の警告がエラーに格上げされます。</li></ul></blockquote><h3 id="ローカル委譲プロパティに対するスマートキャスト" tabindex="-1">ローカル委譲プロパティに対するスマートキャスト <a class="header-anchor" href="#ローカル委譲プロパティに対するスマートキャスト" aria-label="Permalink to &quot;ローカル委譲プロパティに対するスマートキャスト&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-22517" target="_blank" rel="noreferrer">KT-22517</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.3以降、ローカル委譲プロパティに対するスマートキャストは許可されません</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.2未満: コンパイラはローカル委譲プロパティのスマートキャストを許可しており、これは不正な振る舞いをするデリゲートの場合に不健全なスマートキャストにつながる可能性がありました。</li><li>1.2.X: ローカル委譲プロパティに対するスマートキャストは非推奨として報告されます（コンパイラが警告を発します）。</li><li>1.3以上: 非推奨の警告がエラーに格上げされます。</li></ul></blockquote><h3 id="mod-演算子規約" tabindex="-1">mod 演算子規約 <a class="header-anchor" href="#mod-演算子規約" aria-label="Permalink to &quot;mod 演算子規約&quot;">​</a></h3><blockquote><p><strong>Issues</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-24197" target="_blank" rel="noreferrer">KT-24197</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.3以降、<code>mod</code>演算子の宣言、およびそのような宣言に解決される呼び出しは禁止されます</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.1.X, 1.2.X: <code>operator mod</code>の宣言、およびそれに解決される呼び出しに対して警告が報告されます。</li><li>1.3.X: 警告はエラーに格上げされますが、<code>operator mod</code>宣言への解決は引き続き許可されます。</li><li>1.4.X: <code>operator mod</code>への呼び出しはもはや解決されなくなります。</li></ul></blockquote><h3 id="単一要素を名前付き形式で-vararg-に渡すこと" tabindex="-1">単一要素を名前付き形式で <code>vararg</code> に渡すこと <a class="header-anchor" href="#単一要素を名前付き形式で-vararg-に渡すこと" aria-label="Permalink to &quot;単一要素を名前付き形式で `vararg` に渡すこと&quot;">​</a></h3><blockquote><p><strong>Issues</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-20588" target="_blank" rel="noreferrer">KT-20588</a>, <a href="https://youtrack.jetbrains.com/issue/KT-20589" target="_blank" rel="noreferrer">KT-20589</a>. See also <a href="https://youtrack.jetbrains.com/issue/KT-20171" target="_blank" rel="noreferrer">KT-20171</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.3では、単一要素をvarargに割り当てることは非推奨となり、連続したスプレッドと配列構築に置き換える必要があります。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.2未満: 名前付き形式で単一の値をvararg要素に割り当てることは問題なくコンパイルされ、<em>単一</em>要素を配列に割り当てるものとして扱われるため、配列をvarargに割り当てる際に非自明な振る舞いを引き起こしていました。</li><li>1.2.X: そのような割り当てに対して非推奨の警告が報告され、ユーザーは連続したスプレッドと配列構築に切り替えることを推奨されます。</li><li>1.3.X: 警告がエラーに格上げされます。</li><li>1.4以上: 単一要素をvarargに割り当てるセマンティクスを変更し、配列の割り当てを配列のスプレッドの割り当てと同等にします。</li></ul></blockquote><h3 id="ターゲット-expression-を持つアノテーションのリテンション" tabindex="-1">ターゲット <code>EXPRESSION</code> を持つアノテーションのリテンション <a class="header-anchor" href="#ターゲット-expression-を持つアノテーションのリテンション" aria-label="Permalink to &quot;ターゲット `EXPRESSION` を持つアノテーションのリテンション&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-13762" target="_blank" rel="noreferrer">KT-13762</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.3以降、<code>EXPRESSION</code>ターゲットを持つアノテーションには<code>SOURCE</code>リテンションのみが許可されます</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.2未満: ターゲット<code>EXPRESSION</code>で<code>SOURCE</code>以外のリテンションを持つアノテーションは許可されていましたが、使用箇所では黙って無視されていました。</li><li>1.2.X: そのようなアノテーションの宣言に対して非推奨の警告が報告されます。</li><li>1.3以上: 警告がエラーに格上げされます。</li></ul></blockquote><h3 id="ターゲット-parameter-を持つアノテーションはパラメータの型に適用されるべきではない" tabindex="-1">ターゲット <code>PARAMETER</code> を持つアノテーションはパラメータの型に適用されるべきではない <a class="header-anchor" href="#ターゲット-parameter-を持つアノテーションはパラメータの型に適用されるべきではない" aria-label="Permalink to &quot;ターゲット `PARAMETER` を持つアノテーションはパラメータの型に適用されるべきではない&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-9580" target="_blank" rel="noreferrer">KT-9580</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.3以降、<code>PARAMETER</code>ターゲットを持つアノテーションがパラメーターの型に適用された場合、誤ったアノテーションターゲットに関するエラーが適切に報告されるようになります</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.2未満: 上述のコードパターンは問題なくコンパイルされ、アノテーションは黙って無視され、バイトコードには存在しませんでした。</li><li>1.2.X: そのような使用法に対して非推奨の警告が報告されます。</li><li>1.3以上: 警告がエラーに格上げされます。</li></ul></blockquote><h3 id="array-copyofrange-は、返される配列を拡張する代わりに、インデックスが範囲外の場合に例外をスローする" tabindex="-1"><code>Array.copyOfRange</code> は、返される配列を拡張する代わりに、インデックスが範囲外の場合に例外をスローする <a class="header-anchor" href="#array-copyofrange-は、返される配列を拡張する代わりに、インデックスが範囲外の場合に例外をスローする" aria-label="Permalink to &quot;`Array.copyOfRange` は、返される配列を拡張する代わりに、インデックスが範囲外の場合に例外をスローする&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-19489" target="_blank" rel="noreferrer">KT-19489</a></p><p><strong>Component</strong>: kotlin-stdlib (JVM)</p><p><strong>Incompatible change type</strong>: 振る舞い</p><p><strong>Short summary</strong>: Kotlin 1.3以降、<code>Array.copyOfRange</code>の<code>toIndex</code>引数（コピーされる範囲の排他的終端を表す）が配列サイズよりも大きくないことを確認し、大きい場合は<code>IllegalArgumentException</code>をスローするようになります。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.3未満: <code>Array.copyOfRange</code>の呼び出しにおける<code>toIndex</code>が配列サイズよりも大きい場合、範囲内の不足している要素は<code>null</code>で埋められ、Kotlinの型システムの健全性を損なっていました。</li><li>1.3以上: <code>toIndex</code>が配列の範囲内にあることを確認し、そうでない場合は例外をスローします。</li></ul></blockquote><h3 id="int-min-value-および-long-min-value-をステップとする整数および長整数型進行は禁止され、インスタンス化できなくなる" tabindex="-1"><code>Int.MIN_VALUE</code> および <code>Long.MIN_VALUE</code> をステップとする整数および長整数型進行は禁止され、インスタンス化できなくなる <a class="header-anchor" href="#int-min-value-および-long-min-value-をステップとする整数および長整数型進行は禁止され、インスタンス化できなくなる" aria-label="Permalink to &quot;`Int.MIN_VALUE` および `Long.MIN_VALUE` をステップとする整数および長整数型進行は禁止され、インスタンス化できなくなる&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-17176" target="_blank" rel="noreferrer">KT-17176</a></p><p><strong>Component</strong>: kotlin-stdlib (JVM)</p><p><strong>Incompatible change type</strong>: 振る舞い</p><p><strong>Short summary</strong>: Kotlin 1.3以降、整数進行のステップ値がその整数型（<code>Long</code>または<code>Int</code>）の最小負値となることを禁止し、<code>IntProgression.fromClosedRange(0, 1, step = Int.MIN_VALUE)</code>を呼び出すと<code>IllegalArgumentException</code>がスローされるようになります。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.3未満: <code>Int.MIN_VALUE</code>のステップで<code>IntProgression</code>を作成することが可能で、これは<code>[0, -2147483648]</code>という2つの値を生成し、非自明な振る舞いでした。</li><li>1.3以上: ステップがその整数型の最小負値である場合、<code>IllegalArgumentException</code>をスローします。</li></ul></blockquote><h3 id="非常に長いシーケンスに対する操作でのインデックスオーバーフローのチェック" tabindex="-1">非常に長いシーケンスに対する操作でのインデックスオーバーフローのチェック <a class="header-anchor" href="#非常に長いシーケンスに対する操作でのインデックスオーバーフローのチェック" aria-label="Permalink to &quot;非常に長いシーケンスに対する操作でのインデックスオーバーフローのチェック&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-16097" target="_blank" rel="noreferrer">KT-16097</a></p><p><strong>Component</strong>: kotlin-stdlib (JVM)</p><p><strong>Incompatible change type</strong>: 振る舞い</p><p><strong>Short summary</strong>: Kotlin 1.3以降、<code>index</code>、<code>count</code>、および類似のメソッドが非常に長いシーケンスでオーバーフローしないことを確認します。影響を受けるメソッドの完全なリストについてはIssueを参照してください。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.3未満: 非常に長いシーケンスでそのようなメソッドを呼び出すと、整数オーバーフローにより負の結果が生じる可能性がありました。</li><li>1.3以上: そのようなメソッドでのオーバーフローを検出し、すぐに例外をスローします。</li></ul></blockquote><h3 id="空のマッチ正規表現による-split-結果のプラットフォーム間での統一" tabindex="-1">空のマッチ正規表現による <code>split</code> 結果のプラットフォーム間での統一 <a class="header-anchor" href="#空のマッチ正規表現による-split-結果のプラットフォーム間での統一" aria-label="Permalink to &quot;空のマッチ正規表現による `split` 結果のプラットフォーム間での統一&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-21049" target="_blank" rel="noreferrer">KT-21049</a></p><p><strong>Component</strong>: kotlin-stdlib (JVM)</p><p><strong>Incompatible change type</strong>: 振る舞い</p><p><strong>Short summary</strong>: Kotlin 1.3以降、空のマッチ正規表現による<code>split</code>メソッドの振る舞いをすべてのプラットフォームで統一します</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.3未満: 記述された呼び出しの振る舞いは、JS、JRE 6、JRE 7とJRE 8+を比較すると異なっていました。</li><li>1.3以上: プラットフォーム間で振る舞いを統一します。</li></ul></blockquote><h3 id="コンパイラ配布物内の非推奨成果物の提供終了" tabindex="-1">コンパイラ配布物内の非推奨成果物の提供終了 <a class="header-anchor" href="#コンパイラ配布物内の非推奨成果物の提供終了" aria-label="Permalink to &quot;コンパイラ配布物内の非推奨成果物の提供終了&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-23799" target="_blank" rel="noreferrer">KT-23799</a></p><p><strong>Component</strong>: その他</p><p><strong>Incompatible change type</strong>: バイナリ</p><p><strong>Short summary</strong>: Kotlin 1.3では、以下の非推奨のバイナリ成果物のサポートを終了します。</p><ul><li><code>kotlin-runtime</code>: 代わりに<code>kotlin-stdlib</code>を使用してください。</li><li><code>kotlin-stdlib-jre7/8</code>: 代わりに<code>kotlin-stdlib-jdk7/8</code>を使用してください。</li><li>コンパイラ配布物内の<code>kotlin-jslib</code>: 代わりに<code>kotlin-stdlib-js</code>を使用してください。</li></ul><p><strong>Deprecation cycle</strong>:</p><ul><li>1.2.X: これらの成果物は非推奨としてマークされており、コンパイラはそれらの成果物の使用に対して警告を報告していました。</li><li>1.3以上: これらの成果物のサポートは終了されます。</li></ul></blockquote><h3 id="stdlib内アノテーション" tabindex="-1">stdlib内アノテーション <a class="header-anchor" href="#stdlib内アノテーション" aria-label="Permalink to &quot;stdlib内アノテーション&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-21784" target="_blank" rel="noreferrer">KT-21784</a></p><p><strong>Component</strong>: kotlin-stdlib (JVM)</p><p><strong>Incompatible change type</strong>: バイナリ</p><p><strong>Short summary</strong>: Kotlin 1.3では、<code>org.jetbrains.annotations</code>パッケージのアノテーションがstdlibから削除され、コンパイラに同梱される別の成果物である<code>annotations-13.0.jar</code>と<code>mutability-annotations-compat.jar</code>に移動されます。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.3未満: アノテーションはstdlib成果物と共に提供されていました。</li><li>1.3以上: アノテーションは別の成果物で提供されます。</li></ul></blockquote>',56)]))}const h=e(a,[["render",l]]);export{d as __pageData,h as default};
