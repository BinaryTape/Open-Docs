import{_ as c,a as p,b as r}from"./chunks/tutorial_persistence_database_tool_window.CIMhXNzI.js";import{_ as h,C as t,c as k,o as u,j as e,G as i,ag as g,a as s,w as o}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/db-persistence.md","filePath":"ja/ktor/db-persistence.md","lastUpdated":1755457140000}'),b={name:"ja/ktor/db-persistence.md"};function m(v,a,E,y,q,C){const d=t("show-structure"),l=t("tldr"),n=t("link-summary");return u(),k("div",null,[a[2]||(a[2]=e("h1",{id:"exposed-を使用したデータベース永続化",tabindex:"-1"},[s("Exposed を使用したデータベース永続化 "),e("a",{class:"header-anchor",href:"#exposed-を使用したデータベース永続化","aria-label":'Permalink to "Exposed を使用したデータベース永続化"'},"​")],-1)),i(d,{for:"chapter",depth:"2"}),i(l,null,{default:o(()=>a[0]||(a[0]=[e("p",null,[e("b",null,"コード例"),s(": "),e("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/tutorial-website-interactive-persistence"}," tutorial-website-interactive-persistence ")],-1),e("p",null,[e("b",null,"使用ライブラリ"),s(": "),e("a",{href:"https://github.com/JetBrains/Exposed"},"Exposed"),s(", "),e("a",{href:"https://github.com/h2database/h2database"},"h2database")],-1)])),_:1}),i(n,null,{default:o(()=>a[1]||(a[1]=[s("Exposed ORM フレームワークを使用して、ウェブサイトに永続化を追加する方法を学びます。")])),_:1}),a[3]||(a[3]=g(`<p>このチュートリアルシリーズでは、Ktor でシンプルなブログアプリケーションを作成する方法を説明します。</p><ul><li>最初のチュートリアルでは、画像や HTML ページなどの静的コンテンツをホストする方法を説明しました。</li><li>2番目のチュートリアルでは、FreeMarker テンプレートエンジンを使用してアプリケーションにインタラクティブ性を追加しました。</li><li><strong>このチュートリアル</strong>では、Exposed フレームワークを使用してウェブサイトに永続化を追加します。記事を保存するために H2 ローカルデータベースを使用します。</li><li><a href="./db-connection-pooling-caching">次のチュートリアル</a>では、HikariCP と Ehcache ライブラリをそれぞれ使用して、データベース接続プーリングとキャッシュを実装する方法を説明します。</li></ul><h2 id="add-dependencies" tabindex="-1">依存関係を追加する <a class="header-anchor" href="#add-dependencies" aria-label="Permalink to &quot;依存関係を追加する {id=&quot;add-dependencies&quot;}&quot;">​</a></h2><p>まず、Exposed および H2 ライブラリの依存関係を追加する必要があります。<code>gradle.properties</code> ファイルを開き、ライブラリのバージョンを指定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exposed_version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.53</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h2_version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">232</span></span></code></pre></div><p>次に、<code>build.gradle.kts</code> を開き、以下の依存関係を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p><code>build.gradle.kts</code> ファイルの右上にある <strong>Load Gradle Changes</strong> アイコンをクリックして、新しく追加された依存関係をインストールします。</p><h2 id="model" tabindex="-1">モデルを更新する <a class="header-anchor" href="#model" aria-label="Permalink to &quot;モデルを更新する {id=&quot;model&quot;}&quot;">​</a></h2><p>Exposed は、データベーステーブルとして <code>org.jetbrains.exposed.sql.Table</code> クラスを使用します。<code>Article</code> モデルを更新するには、<code>models/Article.kt</code> ファイルを開き、既存のコードを以下で置き換えます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p><code>id</code>、<code>title</code>、<code>body</code> カラムには、記事に関する情報が保存されます。<code>id</code> カラムは主キーとして機能します。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>Articles</code> オブジェクトのプロパティの<a href="https://www.jetbrains.com/help/idea/viewing-reference-information.html#type-info" target="_blank" rel="noreferrer">型を調べると</a>、必要な型引数を持つ <code>Column</code> 型であることがわかります。<code>id</code> は <code>Column&lt;Int&gt;</code> 型、<code>title</code> と <code>body</code> はどちらも <code>Column&lt;String&gt;</code> 型です。</p></div><h2 id="connect_db" tabindex="-1">データベースに接続する <a class="header-anchor" href="#connect_db" aria-label="Permalink to &quot;データベースに接続する {id=&quot;connect_db&quot;}&quot;">​</a></h2><p><a href="https://en.wikipedia.org/wiki/Data_access_object" target="_blank" rel="noreferrer">データアクセスオブジェクト</a> (DAO) は、特定のデータベースの詳細を公開することなく、データベースへのインターフェースを提供するパターンです。後で <code>DAOFacade</code> インターフェースを定義し、データベースへの特定の要求を抽象化します。</p><p>Exposed を使用したすべてのデータベースアクセスは、データベースへの接続を取得することから始まります。そのためには、JDBC URL とドライバクラス名を <code>Database.connect</code> 関数に渡します。<code>com.example</code> 内に <code>dao</code> パッケージを作成し、新しい <code>DatabaseSingleton.kt</code> ファイルを追加します。次に、このコードを挿入します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><blockquote><p><code>driverClassName</code> と <code>jdbcURL</code> がここにハードコードされていることに注意してください。Ktor を使用すると、このような設定を<a href="./server-configuration-file">カスタム設定グループ</a>に抽出できます。</p></blockquote><h3 id="create_table" tabindex="-1">テーブルの作成 <a class="header-anchor" href="#create_table" aria-label="Permalink to &quot;テーブルの作成 {id=&quot;create_table&quot;}&quot;">​</a></h3><p>接続を取得した後、すべての SQL ステートメントはトランザクション内に配置する必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> database </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Database.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jdbcURL, driverClassName)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    transaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(database) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Statements here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このコードサンプルでは、デフォルトのデータベースが <code>transaction</code> 関数に明示的に渡されています。データベースが1つしかない場合は、省略できます。この場合、Exposed はトランザクションに最後に接続されたデータベースを自動的に使用します。</p><blockquote><p><code>Database.connect</code> 関数は、トランザクションを呼び出すまで実際のデータベース接続を確立しません。これは、将来の接続のための記述子を作成するだけであることに注意してください。</p></blockquote><p><code>Articles</code> テーブルがすでに宣言されているため、<code>init</code> 関数の最後に <code>transaction</code> 呼び出しにラップされた <code>SchemaUtils.create(Articles)</code> を呼び出して、データベースにこのテーブルがまだ存在しない場合に作成するように指示できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> database </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Database.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jdbcURL, driverClassName)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    transaction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(database) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SchemaUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Articles)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="queries" tabindex="-1">クエリの実行 <a class="header-anchor" href="#queries" aria-label="Permalink to &quot;クエリの実行 {id=&quot;queries&quot;}&quot;">​</a></h3><p>便宜上、<code>DatabaseSingleton</code> オブジェクト内にユーティリティ関数 <code>dbQuery</code> を作成しましょう。これは、データベースへの将来のすべての要求に使用されます。ブロッキング方式でアクセスするためにトランザクションを使用する代わりに、コルーチンを活用し、各クエリを独自のコルーチンで開始しましょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p>結果として得られる <code>DatabaseSingleton.kt</code> ファイルは次のようになります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h3 id="startup" tabindex="-1">起動時にデータベース設定をロードする <a class="header-anchor" href="#startup" aria-label="Permalink to &quot;起動時にデータベース設定をロードする {id=&quot;startup&quot;}&quot;">​</a></h3><p>最後に、作成した設定をアプリケーションの起動時にロードする必要があります。<code>Application.kt</code> を開き、<code>Application.module</code> ボディから <code>DatabaseSingleton.init</code> を呼び出します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h2 id="persistence_logic" tabindex="-1">永続化ロジックの実装 <a class="header-anchor" href="#persistence_logic" aria-label="Permalink to &quot;永続化ロジックの実装 {id=&quot;persistence_logic&quot;}&quot;">​</a></h2><p>次に、記事の更新に必要な操作を抽象化するインターフェースを作成しましょう。<code>dao</code> パッケージ内に <code>DAOFacade.kt</code> ファイルを作成し、以下のコードで埋めます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p>すべての記事を一覧表示し、ID で記事を表示し、新しい記事を追加、編集、または削除する必要があります。これらの関数はすべて内部でデータベースクエリを実行するため、中断関数として定義されています。</p><p><code>DAOFacade</code> インターフェースを実装するには、その名前の上にキャレットを置き、このインターフェースの横にある黄色の電球アイコンをクリックして、<strong>Implement interface</strong> を選択します。表示されるダイアログで、デフォルト設定のまま <strong>OK</strong> をクリックします。</p><p><strong>Implement Members</strong> ダイアログで、すべての関数を選択し、<strong>OK</strong> をクリックします。</p><p><img src="`+c+'" alt="Implement Members" width="451"></p><p>IntelliJ IDEA は <code>dao</code> パッケージ内に <code>DAOFacadeImpl.kt</code> ファイルを作成します。Exposed DSL を使用してすべての関数を実装しましょう。</p><h3 id="get_all" tabindex="-1">すべての記事を取得する <a class="header-anchor" href="#get_all" aria-label="Permalink to &quot;すべての記事を取得する {id=&quot;get_all&quot;}&quot;">​</a></h3><p>まず、すべてのエントリを返す関数から始めましょう。要求は <code>dbQuery</code> 呼び出しにラップされています。データベースからすべてのデータを取得するために <code>Table.selectAll</code> 拡張関数を呼び出します。<code>Articles</code> オブジェクトは <code>Table</code> のサブクラスであるため、Exposed DSL メソッドを使用して操作します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p><code>Table.selectAll</code> は <code>Query</code> のインスタンスを返します。<code>Article</code> インスタンスのリストを取得するには、各行のデータを手動で抽出し、データクラスに変換する必要があります。これは、<code>ResultRow</code> から <code>Article</code> を構築するヘルパー関数 <code>resultRowToArticle</code> を使用して実現します。</p><p><code>ResultRow</code> は、簡潔な <code>get</code> 演算子を使用して、指定された <code>Column</code> に格納されているデータを取得する方法を提供し、配列やマップと同様にブラケット構文を使用できるようにします。</p><blockquote><p><code>Articles.id</code> の型は <code>Column&lt;Int&gt;</code> であり、これは <code>Expression</code> インターフェースを実装しています。そのため、任意のカラムを式として渡すことができます。</p></blockquote><h3 id="get_article" tabindex="-1">記事を取得する <a class="header-anchor" href="#get_article" aria-label="Permalink to &quot;記事を取得する {id=&quot;get_article&quot;}&quot;">​</a></h3><p>次に、1つの記事を返す関数を実装しましょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p><code>select</code> 関数は拡張ラムダを引数として受け取ります。このラムダ内の暗黙的なレシーバーは <code>SqlExpressionBuilder</code> 型です。この型を明示的に使用することはありませんが、クエリを構築するために使用するカラム上の多くの便利な操作を定義します。比較（<code>eq</code>、<code>less</code>、<code>greater</code>）、算術演算（<code>plus</code>、<code>times</code>）、指定された値のリストに値が含まれるか含まれないかのチェック（<code>inList</code>、<code>notInList</code>）、値が null か null でないかのチェックなど、多くの操作を使用できます。</p><p><code>select</code> は <code>Query</code> 値のリストを返します。前と同様に、それらを記事に変換します。この場合、1つの記事であるべきなので、それを結果として返します。</p><h3 id="add_article" tabindex="-1">新しい記事を追加する <a class="header-anchor" href="#add_article" aria-label="Permalink to &quot;新しい記事を追加する {id=&quot;add_article&quot;}&quot;">​</a></h3><p>テーブルに新しい記事を挿入するには、ラムダ引数を受け取る <code>Table.insert</code> 関数を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p>このラムダ内では、どのカラムにどの値を設定するかを指定します。<code>it</code> 引数は <code>InsertStatement</code> 型であり、これに対してカラムと値を引数として取る <code>set</code> 演算子を呼び出すことができます。</p><h3 id="edit_article" tabindex="-1">記事を編集する <a class="header-anchor" href="#edit_article" aria-label="Permalink to &quot;記事を編集する {id=&quot;edit_article&quot;}&quot;">​</a></h3><p>既存の article を更新するには、<code>Table.update</code> が使用されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h3 id="delete_article" tabindex="-1">記事を削除する <a class="header-anchor" href="#delete_article" aria-label="Permalink to &quot;記事を削除する {id=&quot;delete_article&quot;}&quot;">​</a></h3><p>最後に、データベースから記事を削除するには <code>Table.deleteWhere</code> を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h3 id="init-dao-facade" tabindex="-1">DAOFacade を初期化する <a class="header-anchor" href="#init-dao-facade" aria-label="Permalink to &quot;DAOFacade を初期化する {id=&quot;init-dao-facade&quot;}&quot;">​</a></h3><p><code>DAOFacade</code> のインスタンスを作成し、アプリケーションが開始される前にデータベースに挿入されるサンプル記事を追加しましょう。 <code>DAOFacadeImpl.kt</code> の最後に以下のコードを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h2 id="update_routes" tabindex="-1">ルートを更新する <a class="header-anchor" href="#update_routes" aria-label="Permalink to &quot;ルートを更新する {id=&quot;update_routes&quot;}&quot;">​</a></h2><p>これで、ルートハンドラ内で実装されたデータベース操作を使用する準備ができました。 <code>plugins/Routing.kt</code> ファイルを開きます。 すべての記事を表示するには、<code>get</code> ハンドラ内で <code>dao.allArticles</code> を呼び出します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p>新しい記事を投稿するには、<code>post</code> 内で <code>dao.addNewArticle</code> 関数を呼び出します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p>記事の表示と編集のために記事を取得するには、<code>get(&quot;{id}&quot;)</code> および <code>get(&quot;{id}/edit&quot;)</code> 内で <code>dao.article</code> を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p>最後に、<code>post(&quot;{id}&quot;)</code> ハンドラに移動し、<code>dao.editArticle</code> を使用して記事を更新し、<code>dao.deleteArticle</code> を使用して記事を削除します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><blockquote><p>このチュートリアルの結果のプロジェクトは、こちらで確認できます: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/tutorial-website-interactive-persistence" target="_blank" rel="noreferrer">tutorial-website-interactive-persistence</a>。</p></blockquote><h2 id="run_app" tabindex="-1">アプリケーションを実行する <a class="header-anchor" href="#run_app" aria-label="Permalink to &quot;アプリケーションを実行する {id=&quot;run_app&quot;}&quot;">​</a></h2><p>ジャーナルアプリケーションが期待通りに動作しているか確認しましょう。<code>Application.kt</code> の <code>fun main(...)</code> の横にある <strong>Run</strong> ボタンを押して、アプリケーションを実行できます。</p><p><img src="'+p+'" alt="Run Server" width="706"></p><p>IntelliJ IDEA がアプリケーションを起動し、数秒後にはアプリが実行中であることの確認が表示されるはずです。</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[main] INFO  Application - Responding at http://0.0.0.0:8080</span></span></code></pre></div><p>ブラウザで <a href="http://localhost:8080/" target="_blank" rel="noreferrer"><code>http://localhost:8080/</code></a> を開き、記事の作成、編集、削除を試してみてください。記事は <code>build/db.mv.db</code> ファイルに保存されます。IntelliJ IDEA では、<a href="https://www.jetbrains.com/help/idea/database-tool-window.html" target="_blank" rel="noreferrer">データベースツールウィンドウ</a>でこのファイルの内容を確認できます。</p><p><img src="'+r+'" alt="Database tool window" width="706"></p>',82))])}const A=h(b,[["render",m]]);export{f as __pageData,A as default};
