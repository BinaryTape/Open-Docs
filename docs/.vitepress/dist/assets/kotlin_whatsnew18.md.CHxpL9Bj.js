import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Kotlin 1.8.0 新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/whatsnew18.md","filePath":"kotlin/whatsnew18.md","lastUpdated":1754307826000}'),n={name:"kotlin/whatsnew18.md"};function l(o,i,r,d,p,h){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="kotlin-1-8-0-新特性" tabindex="-1">Kotlin 1.8.0 新特性 <a class="header-anchor" href="#kotlin-1-8-0-新特性" aria-label="Permalink to &quot;Kotlin 1.8.0 新特性&quot;">​</a></h1><p><em><a href="/kotlin/releases#release-details">发布日期：2022 年 12 月 28 日</a></em></p><p>Kotlin 1.8.0 版本已发布，以下是其一些重要亮点：</p><ul><li><a href="#recursive-copying-or-deletion-of-directories">JVM 新增实验性的函数：递归复制或删除目录内容</a></li><li><a href="#improved-kotlin-reflect-performance">改进的 kotlin-reflect 性能</a></li><li><a href="#a-new-compiler-option-for-disabling-optimizations">新增 -Xdebug 编译器选项，以提供更好的调试体验</a></li><li><a href="#updated-jvm-compilation-target"><code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code> 合并到 <code>kotlin-stdlib</code> 中</a></li><li><a href="#improved-objective-c-swift-interoperability">改进的 Objective-C/Swift 互操作性</a></li><li><a href="#gradle">兼容 Gradle 7.3</a></li></ul><h2 id="ide-支持" tabindex="-1">IDE 支持 <a class="header-anchor" href="#ide-支持" aria-label="Permalink to &quot;IDE 支持&quot;">​</a></h2><p>支持 Kotlin 1.8.0 的 Kotlin 插件适用于：</p><table tabindex="0"><thead><tr><th>IDE</th><th>支持版本</th></tr></thead><tbody><tr><td>IntelliJ IDEA</td><td>2021.3, 2022.1, 2022.2</td></tr><tr><td>Android Studio</td><td>Electric Eel (221), Flamingo (222)</td></tr></tbody></table><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>你可以在 IntelliJ IDEA 2022.3 中将你的项目更新到 Kotlin 1.8.0，而无需更新 IDE 插件。 要在 IntelliJ IDEA 2022.3 中将现有项目迁移到 Kotlin 1.8.0，请将 Kotlin 版本更改为 <code>1.8.0</code>，然后重新导入你的 Gradle 或 Maven 项目。</p></div><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>从 1.8.0 版本开始，编译器可以生成字节码版本与 JVM 19 对应的类。新语言版本还包括：</p><ul><li><a href="#ability-to-not-generate-type-use-and-type-parameter-annotation-targets">一个用于关闭 JVM 注解目标生成的编译器选项</a></li><li><a href="#a-new-compiler-option-for-disabling-optimizations">一个新的 -Xdebug 编译器选项，用于禁用优化</a></li><li><a href="#removal-of-the-old-backend">旧后端已移除</a></li><li><a href="#support-for-lombok-s-builder-annotation">支持 Lombok 的 @Builder 注解</a></li></ul><h3 id="禁止生成-type-use-和-type-parameter-注解目标的能力" tabindex="-1">禁止生成 TYPE_USE 和 TYPE_PARAMETER 注解目标的能力 <a class="header-anchor" href="#禁止生成-type-use-和-type-parameter-注解目标的能力" aria-label="Permalink to &quot;禁止生成 TYPE_USE 和 TYPE_PARAMETER 注解目标的能力&quot;">​</a></h3><p>如果一个 Kotlin 注解在其 Kotlin 目标中包含 <code>TYPE</code>，则该注解会映射到其 Java 注解目标列表中的 <code>java.lang.annotation.ElementType.TYPE_USE</code>。这就像 <code>TYPE_PARAMETER</code> Kotlin 目标映射到 <code>java.lang.annotation.ElementType.TYPE_PARAMETER</code> Java 目标一样。对于 API 级别低于 26 的 Android 客户端来说，这是一个问题，因为这些 API 中没有这些目标。</p><p>从 Kotlin 1.8.0 开始，你可以使用新的编译器选项 <code>-Xno-new-java-annotation-targets</code> 来避免生成 <code>TYPE_USE</code> 和 <code>TYPE_PARAMETER</code> 注解目标。</p><h3 id="用于禁用优化的新编译器选项" tabindex="-1">用于禁用优化的新编译器选项 <a class="header-anchor" href="#用于禁用优化的新编译器选项" aria-label="Permalink to &quot;用于禁用优化的新编译器选项&quot;">​</a></h3><p>Kotlin 1.8.0 新增了一个 <code>-Xdebug</code> 编译器选项，该选项会禁用优化，以提供更好的调试体验。目前，该选项禁用了协程的“已优化移除”特性。未来，当我们增加更多优化时，此选项也将禁用它们。</p><p>“已优化移除”特性会在你使用挂起函数时优化变量。但是，调试含有优化变量的代码很困难，因为你无法看到它们的值。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><strong>切勿在生产环境中使用此选项</strong>：通过 <code>-Xdebug</code> 禁用此特性可能<a href="https://youtrack.jetbrains.com/issue/KT-48678/Coroutine-debugger-disable-was-optimised-out-compiler-feature#focus=Comments-27-6015585.0-0" target="_blank" rel="noreferrer">导致内存泄漏</a>。</p></div><h3 id="旧后端已移除" tabindex="-1">旧后端已移除 <a class="header-anchor" href="#旧后端已移除" aria-label="Permalink to &quot;旧后端已移除&quot;">​</a></h3><p>在 Kotlin 1.5.0 中，我们<a href="/kotlin/whatsnew15#stable-jvm-ir-backend">宣布</a>基于 IR 的后端已变得<a href="/kotlin/components-stability">稳定</a>。这意味着 Kotlin 1.4.* 中的旧后端已弃用。在 Kotlin 1.8.0 中，我们已完全移除了旧后端。因此，我们也移除了编译器选项 <code>-Xuse-old-backend</code> 和 Gradle 选项 <code>useOldBackend</code>。</p><h3 id="支持-lombok-的-builder-注解" tabindex="-1">支持 Lombok 的 @Builder 注解 <a class="header-anchor" href="#支持-lombok-的-builder-注解" aria-label="Permalink to &quot;支持 Lombok 的 @Builder 注解&quot;">​</a></h3><p>社区为 <a href="https://youtrack.jetbrains.com/issue/KT-46959" target="_blank" rel="noreferrer">Kotlin Lombok: 支持生成的构建器 (@Builder)</a> YouTrack 问题投了非常多的票，因此我们不得不支持 <a href="https://projectlombok.org/features/Builder" target="_blank" rel="noreferrer">@Builder 注解</a>。</p><p>我们目前还没有支持 <code>@SuperBuilder</code> 或 <code>@Tolerate</code> 注解的计划，但如果足够多的人为 <a href="https://youtrack.jetbrains.com/issue/KT-53563/Kotlin-Lombok-Support-SuperBuilder" target="_blank" rel="noreferrer">@SuperBuilder</a> 和 <a href="https://youtrack.jetbrains.com/issue/KT-53564/Kotlin-Lombok-Support-Tolerate" target="_blank" rel="noreferrer">@Tolerate</a> 问题投票，我们将会重新考虑。</p><p><a href="/kotlin/lombok#gradle">了解如何配置 Lombok 编译器插件</a>。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.8.0 包含了 Objective-C 和 Swift 互操作性的变更、对 Xcode 14.1 的支持以及 CocoaPods Gradle 插件的改进：</p><ul><li><a href="#support-for-xcode-14-1">支持 Xcode 14.1</a></li><li><a href="#improved-objective-c-swift-interoperability">改进的 Objective-C/Swift 互操作性</a></li><li><a href="#dynamic-frameworks-by-default-in-the-cocoapods-gradle-plugin">CocoaPods Gradle 插件中默认使用动态 framework</a></li></ul><h3 id="支持-xcode-14-1" tabindex="-1">支持 Xcode 14.1 <a class="header-anchor" href="#支持-xcode-14-1" aria-label="Permalink to &quot;支持 Xcode 14.1&quot;">​</a></h3><p>Kotlin/Native 编译器现在支持最新的稳定版 Xcode 14.1。兼容性改进包括以下变更：</p><ul><li>新增了 <code>watchosDeviceArm64</code> 预设，用于支持 ARM64 平台上的 Apple watchOS 的 watchOS 目标。</li><li>Kotlin CocoaPods Gradle 插件默认不再为 Apple frameworks 嵌入 bitcode。</li><li>平台库已更新，以反映 Apple 目标 Objective-C frameworks 的变更。</li></ul><h3 id="改进的-objective-c-swift-互操作性" tabindex="-1">改进的 Objective-C/Swift 互操作性 <a class="header-anchor" href="#改进的-objective-c-swift-互操作性" aria-label="Permalink to &quot;改进的 Objective-C/Swift 互操作性&quot;">​</a></h3><p>为了让 Kotlin 与 Objective-C 和 Swift 更好地互操作，新增了三个注解：</p><ul><li><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-obj-c-name/" target="_blank" rel="noreferrer"><code>@ObjCName</code></a> 允许你在 Swift 或 Objective-C 中指定更符合习惯的名称，而不是重命名 Kotlin 声明。</p><p>此注解指示 Kotlin 编译器为此类、属性、形参或函数使用自定义的 Objective-C 和 Swift 名称：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ObjCName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(swiftName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MySwiftArray&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyKotlinArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @ObjCName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ObjCName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;of&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) element: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage with the ObjCName annotations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">let array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySwiftArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">let index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(of: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;element&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-hidden-from-obj-c/" target="_blank" rel="noreferrer"><code>@HiddenFromObjC</code></a> 允许你从 Objective-C 中隐藏 Kotlin 声明。</p><p>此注解指示 Kotlin 编译器不要将函数或属性导出到 Objective-C，进而也不要导出到 Swift。这可以使你的 Kotlin 代码对 Objective-C/Swift 更友好。</p></li><li><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-should-refine-in-swift/" target="_blank" rel="noreferrer"><code>@ShouldRefineInSwift</code></a> 对于用 Swift 编写的包装器替换 Kotlin 声明很有用。</p><p>此注解指示 Kotlin 编译器在生成的 Objective-C API 中将函数或属性标记为 <code>swift_private</code>。此类声明会获得 <code>__</code> 前缀，这使得它们对 Swift 代码不可见。</p><p>你仍然可以在 Swift 代码中使用这些声明来创建 Swift 友好的 API，但它们不会被 Xcode 的自动补全功能建议（例如）。</p><p>有关在 Swift 中优化 Objective-C 声明的更多信息，请参阅 <a href="https://developer.apple.com/documentation/swift/improving-objective-c-api-declarations-for-swift" target="_blank" rel="noreferrer">Apple 官方文档</a>。</p></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>新注解需要<a href="/kotlin/opt-in-requirements">选择启用</a>。</p></div><p>Kotlin 团队非常感谢 <a href="https://github.com/rickclephas" target="_blank" rel="noreferrer">Rick Clephas</a> 实现了这些注解。</p><h3 id="cocoapods-gradle-插件中默认使用动态-framework" tabindex="-1">CocoaPods Gradle 插件中默认使用动态 framework <a class="header-anchor" href="#cocoapods-gradle-插件中默认使用动态-framework" aria-label="Permalink to &quot;CocoaPods Gradle 插件中默认使用动态 framework&quot;">​</a></h3><p>从 Kotlin 1.8.0 开始，CocoaPods Gradle 插件注册的 Kotlin frameworks 默认动态链接。之前的静态实现与 Kotlin Gradle 插件的行为不一致。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyFramework&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            isStatic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 现在默认是动态的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果你有一个使用静态链接类型的现有项目，并且你升级到 Kotlin 1.8.0（或显式更改链接类型），你可能会遇到项目执行错误。要解决此问题，请关闭你的 Xcode 项目并在 Podfile 目录中运行 <code>pod install</code>。</p><p>有关更多信息，请参阅 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-dsl-reference.html" target="_blank" rel="noreferrer">CocoaPods Gradle 插件 DSL 参考</a>。</p><h2 id="kotlin-多平台-新的-android-源代码集布局" tabindex="-1">Kotlin 多平台：新的 Android 源代码集布局 <a class="header-anchor" href="#kotlin-多平台-新的-android-源代码集布局" aria-label="Permalink to &quot;Kotlin 多平台：新的 Android 源代码集布局&quot;">​</a></h2><p>Kotlin 1.8.0 引入了新的 Android 源代码集布局，它取代了之前目录的命名方案，之前的方案在多个方面都令人困惑。</p><p>考虑一个在当前布局中创建了两个 <code>androidTest</code> 目录的例子。一个是用于 <code>KotlinSourceSets</code>，另一个用于 <code>AndroidSourceSets</code>：</p><ul><li>它们具有不同的语义：Kotlin 的 <code>androidTest</code> 属于 <code>unitTest</code> 类型，而 Android 的则属于 <code>integrationTest</code> 类型。</li><li>它们创建了一个令人困惑的 <code>SourceDirectories</code> 布局，因为 <code>src/androidTest/kotlin</code> 包含 <code>UnitTest</code> 而 <code>src/androidTest/java</code> 包含 <code>InstrumentedTest</code>。</li><li><code>KotlinSourceSets</code> 和 <code>AndroidSourceSets</code> 都使用相似的 Gradle 配置命名方案，因此 Kotlin 和 Android 源代码集的 <code>androidTest</code> 最终配置相同：<code>androidTestImplementation</code>、<code>androidTestApi</code>、<code>androidTestRuntimeOnly</code> 和 <code>androidTestCompileOnly</code>。</li></ul><p>为了解决这些以及其他现有问题，我们引入了新的 Android 源代码集布局。以下是两种布局之间的一些主要区别：</p><h4 id="kotlinsourceset-命名方案" tabindex="-1">KotlinSourceSet 命名方案 <a class="header-anchor" href="#kotlinsourceset-命名方案" aria-label="Permalink to &quot;KotlinSourceSet 命名方案&quot;">​</a></h4><table tabindex="0"><thead><tr><th>当前源代码集布局</th><th>新源代码集布局</th></tr></thead><tbody><tr><td><code>targetName</code> + <code>AndroidSourceSet.name</code></td><td><code>targetName</code> + <code>AndroidVariantType</code></td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code> 映射到 <code>{KotlinSourceSet.name}</code> 如下：</p><table tabindex="0"><thead><tr><th></th><th>当前源代码集布局</th><th>新源代码集布局</th></tr></thead><tbody><tr><td>main</td><td>androidMain</td><td>androidMain</td></tr><tr><td>test</td><td>androidTest</td><td>android<b>Unit</b>Test</td></tr><tr><td>androidTest</td><td>android<b>Android</b>Test</td><td>android<b>Instrumented</b>Test</td></tr></tbody></table><h4 id="sourcedirectories" tabindex="-1">SourceDirectories <a class="header-anchor" href="#sourcedirectories" aria-label="Permalink to &quot;SourceDirectories&quot;">​</a></h4><table tabindex="0"><thead><tr><th>当前源代码集布局</th><th>新源代码集布局</th></tr></thead><tbody><tr><td>布局会添加额外的 <code>/kotlin</code> SourceDirectories</td><td><code>src/{AndroidSourceSet.name}/kotlin</code>, <code>src/{KotlinSourceSet.name}/kotlin</code></td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code> 映射到 <code>{包含的 SourceDirectories}</code> 如下：</p><table tabindex="0"><thead><tr><th></th><th>当前源代码集布局</th><th>新源代码集布局</th></tr></thead><tbody><tr><td>main</td><td>src/androidMain/kotlin, src/main/kotlin, src/main/java</td><td>src/androidMain/kotlin, src/main/kotlin, src/main/java</td></tr><tr><td>test</td><td>src/androidTest/kotlin, src/test/kotlin, src/test/java</td><td>src/android<b>Unit</b>Test/kotlin, src/test/kotlin, src/test/java</td></tr><tr><td>androidTest</td><td>src/android<b>Android</b>Test/kotlin, src/androidTest/java</td><td>src/android<b>Instrumented</b>Test/kotlin, src/androidTest/java, <b>src/androidTest/kotlin</b></td></tr></tbody></table><h4 id="androidmanifest-xml-文件的位置" tabindex="-1">AndroidManifest.xml 文件的位置 <a class="header-anchor" href="#androidmanifest-xml-文件的位置" aria-label="Permalink to &quot;AndroidManifest.xml 文件的位置&quot;">​</a></h4><table tabindex="0"><thead><tr><th>当前源代码集布局</th><th>新源代码集布局</th></tr></thead><tbody><tr><td>src/{<b>Android</b>SourceSet.name}/AndroidManifest.xml</td><td>src/{<b>Kotlin</b>SourceSet.name}/AndroidManifest.xml</td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code> 映射到 <code>{AndroidManifest.xml 位置}</code> 如下：</p><table tabindex="0"><thead><tr><th></th><th>当前源代码集布局</th><th>新源代码集布局</th></tr></thead><tbody><tr><td>main</td><td>src/main/AndroidManifest.xml</td><td>src/<b>android</b>Main/AndroidManifest.xml</td></tr><tr><td>debug</td><td>src/debug/AndroidManifest.xml</td><td>src/<b>android</b>Debug/AndroidManifest.xml</td></tr></tbody></table><h4 id="android-与公共测试之间的关系" tabindex="-1">Android 与公共测试之间的关系 <a class="header-anchor" href="#android-与公共测试之间的关系" aria-label="Permalink to &quot;Android 与公共测试之间的关系&quot;">​</a></h4><p>新的 Android 源代码集布局改变了 Android 仪表化测试（在新布局中重命名为 <code>androidInstrumentedTest</code>）与公共测试之间的关系。</p><p>以前，<code>androidAndroidTest</code> 和 <code>commonTest</code> 之间存在默认的 <code>dependsOn</code> 关系。实际上，这意味着以下几点：</p><ul><li><code>commonTest</code> 中的代码在 <code>androidAndroidTest</code> 中可用。</li><li><code>commonTest</code> 中的 <code>expect</code> 声明必须在 <code>androidAndroidTest</code> 中有对应的 <code>actual</code> 实现。</li><li>在 <code>commonTest</code> 中声明的测试也会作为 Android 仪表化测试运行。</li></ul><p>在新的 Android 源代码集布局中，默认不添加 <code>dependsOn</code> 关系。如果你更喜欢之前的行为，请在你的 <code>build.gradle.kts</code> 文件中手动声明此关系：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> androidInstrumentedTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonTest)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="支持-android-flavor" tabindex="-1">支持 Android flavor <a class="header-anchor" href="#支持-android-flavor" aria-label="Permalink to &quot;支持 Android flavor&quot;">​</a></h4><p>以前，Kotlin Gradle 插件会急切地创建与带有 <code>debug</code> 和 <code>release</code> 构建类型或 <code>demo</code> 和 <code>full</code> 等自定义 flavor 的 Android 源代码集对应的源代码集。这使得它们可以通过诸如 <code>val androidDebug by getting { ... }</code> 这样的结构访问。</p><p>在新的 Android 源代码集布局中，这些源代码集是在 <code>afterEvaluate</code> 阶段创建的。这使得此类表达式无效，导致诸如 <code>org.gradle.api.UnknownDomainObjectException: KotlinSourceSet with name &#39;androidDebug&#39; not found</code> 的错误。</p><p>为解决此问题，请在你的 <code>build.gradle.kts</code> 文件中使用新的 <code>invokeWhenCreated()</code> API：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invokeWhenCreated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidFreeDebug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="配置与设置" tabindex="-1">配置与设置 <a class="header-anchor" href="#配置与设置" aria-label="Permalink to &quot;配置与设置&quot;">​</a></h3><p>新布局将在未来的版本中成为默认设置。你现在可以通过以下 Gradle 选项启用它：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.androidSourceSetLayoutVersion=2</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>新布局需要 Android Gradle plugin 7.0 或更高版本，并在 Android Studio 2022.3 及更高版本中受支持。</p></div><p>现在不鼓励使用以前的 Android 风格目录。Kotlin 1.8.0 标志着弃用周期的开始，它为当前布局引入了一个警告。你可以通过以下 Gradle 属性抑制该警告：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.androidSourceSetLayoutVersion1.nowarn=true</span></span></code></pre></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin 1.8.0 稳定了 JS IR 编译器后端，并为 JavaScript 相关的 Gradle 构建脚本带来了新特性：</p><ul><li><a href="#stable-js-ir-compiler-backend">稳定的 JS IR 编译器后端</a></li><li><a href="#new-settings-for-reporting-that-yarn-lock-has-been-updated">关于 yarn.lock 已更新的报告新设置</a></li><li><a href="#add-test-targets-for-browsers-via-gradle-properties">通过 Gradle 属性添加浏览器的测试目标</a></li><li><a href="#new-approach-to-adding-css-support-to-your-project">为项目添加 CSS 支持的新方法</a></li></ul><h3 id="稳定的-js-ir-编译器后端" tabindex="-1">稳定的 JS IR 编译器后端 <a class="header-anchor" href="#稳定的-js-ir-编译器后端" aria-label="Permalink to &quot;稳定的 JS IR 编译器后端&quot;">​</a></h3><p>从本次发布开始，<a href="/kotlin/js-ir-compiler">Kotlin/JS 中间表示（基于 IR）编译器</a>后端已稳定。统一所有三个后端的 infra 结构花了一段时间，但它们现在都使用相同的 IR 处理 Kotlin 代码。</p><p>由于 JS IR 编译器后端已稳定，旧的后端从现在起已弃用。</p><p>增量编译默认与稳定的 JS IR 编译器一同启用。</p><p>如果你仍在使用旧编译器，请借助我们的<a href="/kotlin/js-ir-migration">迁移指南</a>将项目切换到新后端。</p><h3 id="关于-yarn-lock-已更新的报告新设置" tabindex="-1">关于 yarn.lock 已更新的报告新设置 <a class="header-anchor" href="#关于-yarn-lock-已更新的报告新设置" aria-label="Permalink to &quot;关于 yarn.lock 已更新的报告新设置&quot;">​</a></h3><p>如果你使用 <code>yarn</code> 包管理器，有三个新的特殊 Gradle 设置可以在 <code>yarn.lock</code> 文件更新时通知你。当你希望在 CI 构建过程中 <code>yarn.lock</code> 被静默更改时收到通知，可以使用这些设置。</p><p>这三个新的 Gradle 属性是：</p><ul><li><code>YarnLockMismatchReport</code>，它指定 <code>yarn.lock</code> 文件的更改如何报告。你可以使用以下值之一： <ul><li><code>FAIL</code> 会使相应的 Gradle 任务失败。这是默认值。</li><li><code>WARNING</code> 会将更改信息写入警告日志。</li><li><code>NONE</code> 禁用报告。</li></ul></li><li><code>reportNewYarnLock</code>，它显式报告最近创建的 <code>yarn.lock</code> 文件。默认情况下，此选项是禁用的：在首次启动时生成新的 <code>yarn.lock</code> 文件是一种常见做法。你可以使用此选项来确保该文件已提交到你的版本库。</li><li><code>yarnLockAutoReplace</code>，它在每次运行 Gradle 任务时自动替换 <code>yarn.lock</code>。</li></ul><p>要使用这些选项，请按如下方式更新你的构建脚本文件 <code>build.gradle.kts</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.targets.js.yarn.YarnLockMismatchReport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rootProject.plugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootProject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YarnRootExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().yarnLockMismatchReport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        YarnLockMismatchReport.WARNING </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NONE | FAIL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootProject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YarnRootExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().reportNewYarnLock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootProject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YarnRootExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().yarnLockAutoReplace </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="通过-gradle-属性添加浏览器的测试目标" tabindex="-1">通过 Gradle 属性添加浏览器的测试目标 <a class="header-anchor" href="#通过-gradle-属性添加浏览器的测试目标" aria-label="Permalink to &quot;通过 Gradle 属性添加浏览器的测试目标&quot;">​</a></h3><p>从 Kotlin 1.8.0 开始，你可以直接在 Gradle 属性文件中为不同浏览器设置测试目标。这样做可以缩小构建脚本文件的大小，因为你不再需要在 <code>build.gradle.kts</code> 中编写所有目标。</p><p>你可以使用此属性为所有模块定义浏览器列表，然后在特定模块的构建脚本中添加特定浏览器。</p><p>例如，你的 Gradle 属性文件中的以下行将为所有模块在 Firefox 和 Safari 中运行测试：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.js.browser.karma.browsers=firefox,safari</span></span></code></pre></div><p>请参阅 <a href="https://github.com/JetBrains/kotlin/blob/master/libraries/tools/kotlin-gradle-plugin/src/common/kotlin/org/jetbrains/kotlin/gradle/targets/js/testing/karma/KotlinKarma.kt#L106" target="_blank" rel="noreferrer">GitHub 上该属性可用值的完整列表</a>。</p><p>Kotlin 团队非常感谢 <a href="https://github.com/mpetuska" target="_blank" rel="noreferrer">Martynas Petuška</a> 实现了此特性。</p><h3 id="为项目添加-css-支持的新方法" tabindex="-1">为项目添加 CSS 支持的新方法 <a class="header-anchor" href="#为项目添加-css-支持的新方法" aria-label="Permalink to &quot;为项目添加 CSS 支持的新方法&quot;">​</a></h3><p>本次发布提供了一种为项目添加 CSS 支持的新方法。我们认为这会影响许多项目，因此请务必按照以下说明更新你的 Gradle 构建脚本文件。</p><p>在 Kotlin 1.8.0 之前，使用 <code>cssSupport.enabled</code> 属性来添加 CSS 支持：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    commonWebpackConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cssSupport.enabled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>现在你应该在 <code>cssSupport {}</code> 代码块中使用 <code>enabled.set()</code> 方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    commonWebpackConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cssSupport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            enabled.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.8.0 <strong>完全</strong>支持 Gradle 7.2 和 7.3 版本。你也可以使用直到最新 Gradle 版本的 Gradle，但如果你这样做，请记住你可能会遇到弃用警告或某些新的 Gradle 特性可能无法正常工作。</p><p>此版本带来了许多变更：</p><ul><li><a href="#exposing-kotlin-compiler-options-as-gradle-lazy-properties">将 Kotlin 编译器选项作为 Gradle 惰性属性公开</a></li><li><a href="#bumping-the-minimum-supported-versions">提升最低支持版本</a></li><li><a href="#ability-to-disable-the-kotlin-daemon-fallback-strategy">禁用 Kotlin daemon 回退策略的能力</a></li><li><a href="#usage-of-the-latest-kotlin-stdlib-version-in-transitive-dependencies">在传递性依赖项中使用最新 kotlin-stdlib 版本</a></li><li><a href="#obligatory-check-for-jvm-targets-of-related-kotlin-and-java-compile-tasks">强制检查相关 Kotlin 和 Java 编译任务的 JVM 目标兼容性</a></li><li><a href="#resolution-of-kotlin-gradle-plugins-transitive-dependencies">Kotlin Gradle 插件传递性依赖项的解析</a></li><li><a href="#deprecations-and-removals">弃用与移除</a></li></ul><h3 id="将-kotlin-编译器选项作为-gradle-惰性属性公开" tabindex="-1">将 Kotlin 编译器选项作为 Gradle 惰性属性公开 <a class="header-anchor" href="#将-kotlin-编译器选项作为-gradle-惰性属性公开" aria-label="Permalink to &quot;将 Kotlin 编译器选项作为 Gradle 惰性属性公开&quot;">​</a></h3><p>为了将可用的 Kotlin 编译器选项作为 <a href="https://docs.gradle.org/current/userguide/lazy_configuration.html" target="_blank" rel="noreferrer">Gradle 惰性属性</a>公开，并更好地将其集成到 Kotlin 任务中，我们进行了许多变更：</p><ul><li><p>编译任务新增了 <code>compilerOptions</code> 输入，它与现有的 <code>kotlinOptions</code> 类似，但使用 Gradle Properties API 中的 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/provider/Property.html" target="_blank" rel="noreferrer"><code>Property</code></a> 作为返回类型：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compileKotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        useK2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Kotlin 工具任务 <code>KotlinJsDce</code> 和 <code>KotlinNativeLink</code> 新增了 <code>toolOptions</code> 输入，它与现有的 <code>kotlinOptions</code> 输入类似。</p></li><li><p>新输入具有 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/Nested.html" target="_blank" rel="noreferrer"><code>@Nested</code> Gradle 注解</a>。输入中的每个属性都具有相关的 Gradle 注解，例如 <a href="https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:up_to_date_checks" target="_blank" rel="noreferrer"><code>@Input</code> 或 <code>@Internal</code></a>。</p></li><li><p>Kotlin Gradle 插件 API artifact 具有两个新接口：</p><ul><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask</code>，它具有 <code>compilerOptions</code> 输入和 <code>compileOptions()</code> 方法。所有 Kotlin 编译任务都实现了此接口。</li><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinToolTask</code>，它具有 <code>toolOptions</code> 输入和 <code>toolOptions()</code> 方法。所有 Kotlin 工具任务 —— <code>KotlinJsDce</code>、<code>KotlinNativeLink</code> 和 <code>KotlinNativeLinkArtifactTask</code> —— 都实现了此接口。</li></ul></li><li><p>一些 <code>compilerOptions</code> 使用新类型而非 <code>String</code> 类型：</p><ul><li><a href="https://github.com/JetBrains/kotlin/blob/1.8.0/libraries/tools/kotlin-gradle-compiler-types/src/generated/kotlin/org/jetbrains/kotlin/gradle/dsl/JvmTarget.kt" target="_blank" rel="noreferrer"><code>JvmTarget</code></a></li><li><a href="https://github.com/JetBrains/kotlin/blob/1.8.0/libraries/tools/kotlin-gradle-compiler-types/src/generated/kotlin/org/jetbrains/kotlin/gradle/dsl/KotlinVersion.kt" target="_blank" rel="noreferrer"><code>KotlinVersion</code></a> (用于 <code>apiVersion</code> 和 <code>languageVersion</code> 输入)</li><li><a href="https://github.com/JetBrains/kotlin/blob/1.8.0/libraries/tools/kotlin-gradle-compiler-types/src/generated/kotlin/org/jetbrains/kotlin/gradle/dsl/JsMainFunctionExecutionMode.kt" target="_blank" rel="noreferrer"><code>JsMainFunctionExecutionMode</code></a></li><li><a href="https://github.com/JetBrains/kotlin/blob/1.8.0/libraries/tools/kotlin-gradle-compiler-types/src/generated/kotlin/org/jetbrains/kotlin/gradle/dsl/JsModuleKind.kt" target="_blank" rel="noreferrer"><code>JsModuleKind</code></a></li><li><a href="https://github.com/JetBrains/kotlin/blob/1.8.0/libraries/tools/kotlin-gradle-compiler-types/src/generated/kotlin/org/jetbrains/kotlin/gradle/dsl/JsSourceMapEmbedMode.kt" target="_blank" rel="noreferrer"><code>JsSourceMapEmbedMode</code></a></li></ul><p>例如，你可以使用 <code>compilerOptions.jvmTarget.set(JvmTarget.JVM_11)</code> 而不是 <code>kotlinOptions.jvmTarget = &quot;11&quot;</code>。</p><p><code>kotlinOptions</code> 类型没有改变，它们在内部转换为 <code>compilerOptions</code> 类型。</p></li><li><p>Kotlin Gradle 插件 API 与之前的版本二进制兼容。然而，<code>kotlin-gradle-plugin</code> artifact 中存在一些源代码和 ABI 不兼容的变更。这些变更大多涉及某些内部类型的额外泛型形参。一个重要的变更是 <code>KotlinNativeLink</code> 任务不再继承 <code>AbstractKotlinNativeCompile</code> 任务。</p></li><li><p><code>KotlinJsCompilerOptions.outputFile</code> 和相关的 <code>KotlinJsOptions.outputFile</code> 选项已弃用。请改用 <code>Kotlin2JsCompile.outputFileProperty</code> 任务输入。</p></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin Gradle 插件仍然将 <code>KotlinJvmOptions</code> DSL 添加到 Android 扩展中： <code>kotlin android { kotlinOptions { jvmTarget = &quot;11&quot; } } </code> 这将在 <a href="https://youtrack.jetbrains.com/issue/KT-15370/Gradle-DSL-add-module-level-kotlin-options" target="_blank" rel="noreferrer">此问题</a> 的范围内进行更改，届时 <code>compilerOptions</code> DSL 将添加到模块级别。</p></div><h4 id="限制" tabindex="-1">限制 <a class="header-anchor" href="#限制" aria-label="Permalink to &quot;限制&quot;">​</a></h4><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>kotlinOptions</code> 任务输入和 <code>kotlinOptions{...}</code> 任务 DSL 处于支持模式，并将在未来的版本中弃用。改进将仅针对 <code>compilerOptions</code> 和 <code>toolOptions</code> 进行。</p></div><p>在 <code>kotlinOptions</code> 上调用任何 setter 或 getter 都会委托给 <code>compilerOptions</code> 中的相关属性。这引入了以下限制：</p><ul><li><code>compilerOptions</code> 和 <code>kotlinOptions</code> 不能在任务执行阶段更改（请参阅下段中的一个例外）。</li><li><code>freeCompilerArgs</code> 返回一个不可变的 <code>List&lt;String&gt;</code>，这意味着，例如，<code>kotlinOptions.freeCompilerArgs.remove(&quot;something&quot;)</code> 将会失败。</li></ul><p>包括 <code>kotlin-dsl</code> 和启用了 <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> 的 Android Gradle 插件 (AGP) 在内的几个插件，试图在任务执行阶段修改 <code>freeCompilerArgs</code> 属性。我们在 Kotlin 1.8.0 中为它们添加了一个解决方案。此解决方案允许任何构建脚本或插件在执行阶段修改 <code>kotlinOptions.freeCompilerArgs</code>，但会在构建日志中产生一个警告。要禁用此警告，请使用新的 Gradle 属性 <code>kotlin.options.suppressFreeCompilerArgsModificationWarning=true</code>。Gradle 将为 <a href="https://github.com/gradle/gradle/issues/22091" target="_blank" rel="noreferrer"><code>kotlin-dsl</code> 插件</a> 和<a href="https://issuetracker.google.com/u/1/issues/247544167" target="_blank" rel="noreferrer">启用了 Jetpack Compose 的 AGP</a> 添加修复。</p><h3 id="提升最低支持版本" tabindex="-1">提升最低支持版本 <a class="header-anchor" href="#提升最低支持版本" aria-label="Permalink to &quot;提升最低支持版本&quot;">​</a></h3><p>从 Kotlin 1.8.0 开始，最低支持的 Gradle 版本是 6.8.3，最低支持的 Android Gradle 插件版本是 4.1.3。</p><p>请参阅<a href="/kotlin/gradle-configure-project#apply-the-plugin">我们文档中 Kotlin Gradle 插件与可用 Gradle 版本的兼容性</a>。</p><h3 id="禁用-kotlin-daemon-回退策略的能力" tabindex="-1">禁用 Kotlin daemon 回退策略的能力 <a class="header-anchor" href="#禁用-kotlin-daemon-回退策略的能力" aria-label="Permalink to &quot;禁用 Kotlin daemon 回退策略的能力&quot;">​</a></h3><p>新增了一个 Gradle 属性 <code>kotlin.daemon.useFallbackStrategy</code>，其默认值为 <code>true</code>。当值为 <code>false</code> 时，构建会在 daemon 启动或通信出现问题时失败。Kotlin 编译任务中还有一个新的 <code>useDaemonFallbackStrategy</code> 属性，如果你同时使用这两个属性，它将优先于 Gradle 属性。如果内存不足以运行编译，你可以在日志中看到相关消息。</p><p>如果 daemon 出现故障，Kotlin 编译器的回退策略是在 Kotlin daemon 之外运行编译。如果 Gradle daemon 处于开启状态，编译器将使用“进程内”策略。如果 Gradle daemon 处于关闭状态，编译器将使用“进程外”策略。请在<a href="/kotlin/gradle-compilation-and-caches#defining-kotlin-compiler-execution-strategy">文档</a>中了解更多关于这些执行策略的信息。请注意，静默回退到另一种策略可能会消耗大量系统资源或导致非确定性构建；请参阅此 <a href="https://youtrack.jetbrains.com/issue/KT-48843/Add-ability-to-disable-Kotlin-daemon-fallback-strategy" target="_blank" rel="noreferrer">YouTrack issue</a> 了解更多详细信息。</p><h3 id="在传递性依赖项中使用最新-kotlin-stdlib-版本" tabindex="-1">在传递性依赖项中使用最新 kotlin-stdlib 版本 <a class="header-anchor" href="#在传递性依赖项中使用最新-kotlin-stdlib-版本" aria-label="Permalink to &quot;在传递性依赖项中使用最新 kotlin-stdlib 版本&quot;">​</a></h3><p>如果你在依赖项中显式地写入 Kotlin 1.8.0 或更高版本，例如：<code>implementation(&quot;org.jetbrains.kotlin:kotlin-stdlib:1.8.0&quot;)</code>，那么 Kotlin Gradle 插件将为传递性 <code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code> 依赖项使用该 Kotlin 版本。这样做是为了避免来自不同 stdlib 版本的类重复（了解更多关于将 <code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code> <a href="#updated-jvm-compilation-target">合并到 <code>kotlin-stdlib</code></a> 的信息）。你可以通过 <code>kotlin.stdlib.jdk.variants.version.alignment</code> Gradle 属性禁用此行为：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.stdlib.jdk.variants.version.alignment=false</span></span></code></pre></div><p>如果版本对齐出现问题，可以通过在构建脚本中声明对 <code>kotlin-bom</code> 的平台依赖项，从而通过 Kotlin <a href="https://docs.gradle.org/current/userguide/platforms.html#sub:bom_import" target="_blank" rel="noreferrer">BOM</a> 对齐所有版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-bom:1.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>在<a href="/kotlin/gradle-configure-project#other-ways-to-align-versions">文档</a>中了解其他情况和我们建议的解决方案。</p><h3 id="强制检查相关-kotlin-和-java-编译任务的-jvm-目标兼容性" tabindex="-1">强制检查相关 Kotlin 和 Java 编译任务的 JVM 目标兼容性 <a class="header-anchor" href="#强制检查相关-kotlin-和-java-编译任务的-jvm-目标兼容性" aria-label="Permalink to &quot;强制检查相关 Kotlin 和 Java 编译任务的 JVM 目标兼容性&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>即使你的源文件仅为 Kotlin 且不使用 Java，本节也适用于你的 JVM 项目。</p></div><p><a href="https://youtrack.jetbrains.com/issue/KT-54993/Raise-kotlin.jvm.target.validation.mode-check-default-level-to-error-when-build-is-running-on-Gradle-8" target="_blank" rel="noreferrer">从本次发布开始</a>，对于 Gradle 8.0+（此版本 Gradle 尚未发布）上的项目，<a href="/kotlin/gradle-configure-project#check-for-jvm-target-compatibility-of-related-compile-tasks"><code>kotlin.jvm.target.validation.mode</code> 属性</a>的默认值为 <code>error</code>，并且在 JVM 目标不兼容的情况下，插件将使构建失败。</p><p>将默认值从 <code>warning</code> 更改为 <code>error</code> 是平滑迁移到 Gradle 8.0 的准备步骤。<strong>我们鼓励你将此属性设置为 <code>error</code></strong> 并<a href="/kotlin/gradle-configure-project#gradle-java-toolchains-support">配置工具链</a>或手动对齐 JVM 版本。</p><p>了解更多关于<a href="/kotlin/gradle-configure-project#what-can-go-wrong-if-targets-are-incompatible">如果不检查目标兼容性可能出现的问题</a>。</p><h3 id="kotlin-gradle-插件传递性依赖项的解析" tabindex="-1">Kotlin Gradle 插件传递性依赖项的解析 <a class="header-anchor" href="#kotlin-gradle-插件传递性依赖项的解析" aria-label="Permalink to &quot;Kotlin Gradle 插件传递性依赖项的解析&quot;">​</a></h3><p>在 Kotlin 1.7.0 中，我们引入了<a href="/kotlin/whatsnew17#support-for-gradle-plugin-variants">对 Gradle 插件变体的支持</a>。由于这些插件变体，构建 classpath 可能包含不同版本的 <a href="https://plugins.gradle.org/u/kotlin" target="_blank" rel="noreferrer">Kotlin Gradle 插件</a>，它们依赖于某个依赖项的不同版本，通常是 <code>kotlin-gradle-plugin-api</code>。这可能导致解析问题，我们希望提出以下解决方案，以 <code>kotlin-dsl</code> 插件为例。</p><p>Gradle 7.6 中的 <code>kotlin-dsl</code> 插件依赖于 <code>org.jetbrains.kotlin.plugin.sam.with.receiver:1.7.10</code> 插件，而后者依赖于 <code>kotlin-gradle-plugin-api:1.7.10</code>。如果你添加 <code>org.jetbrains.kotlin.gradle.jvm:1.8.0</code> 插件，这个 <code>kotlin-gradle-plugin-api:1.7.10</code> 传递性依赖项可能会因为版本（<code>1.8.0</code> 和 <code>1.7.10</code>）与变体属性的 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/attributes/plugin/GradlePluginApiVersion.html" target="_blank" rel="noreferrer"><code>org.gradle.plugin.api-version</code></a> 值不匹配而导致依赖项解析错误。作为解决方案，添加此<a href="https://docs.gradle.org/current/userguide/dependency_constraints.html#sec:adding-constraints-transitive-deps" target="_blank" rel="noreferrer">约束</a>以对齐版本。此解决方案可能在实现 <a href="https://youtrack.jetbrains.com/issue/KT-54691/Kotlin-Gradle-Plugin-libraries-alignment-platform" target="_blank" rel="noreferrer">Kotlin Gradle 插件库对齐平台</a> 之前都是必要的，该平台正在计划中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    constraints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-sam-with-receiver:1.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此约束强制 <code>org.jetbrains.kotlin:kotlin-sam-with-receiver:1.8.0</code> 版本用于构建 classpath 中的传递性依赖项。在 <a href="https://github.com/gradle/gradle/issues/22510#issuecomment-1292259298" target="_blank" rel="noreferrer">Gradle issue tracker</a> 中了解一个类似的<a href="https://github.com/gradle/gradle/issues/22510#issuecomment-1292259298" target="_blank" rel="noreferrer">情况</a>。</p><h3 id="弃用与移除" tabindex="-1">弃用与移除 <a class="header-anchor" href="#弃用与移除" aria-label="Permalink to &quot;弃用与移除&quot;">​</a></h3><p>在 Kotlin 1.8.0 中，以下属性和方法的弃用周期仍在继续：</p><ul><li><a href="/kotlin/whatsnew17#changes-in-compile-tasks">Kotlin 1.7.0 的更新说明</a>中提到 <code>KotlinCompile</code> 任务仍然包含已弃用的 Kotlin 属性 <code>classpath</code>，该属性将在未来的版本中移除。现在，我们已将 <code>KotlinCompile</code> 任务的 <code>classpath</code> 属性的弃用级别更改为 <code>error</code>。所有编译任务都使用 <code>libraries</code> 输入来获取编译所需的库列表。</li><li>我们移除了 <code>kapt.use.worker.api</code> 属性，该属性允许通过 Gradle Workers API 运行 <a href="/kotlin/kapt">kapt</a>。默认情况下，<a href="/kotlin/kapt#run-kapt-tasks-in-parallel">kapt 从 Kotlin 1.3.70 开始一直使用 Gradle workers</a>，我们建议坚持使用此方法。</li><li>在 Kotlin 1.7.0 中，我们<a href="/kotlin/whatsnew17#deprecation-of-the-kotlin-compiler-execution-strategy-system-property">宣布启动 <code>kotlin.compiler.execution.strategy</code> 属性的弃用周期</a>。在此版本中，我们移除了此属性。了解如何以其他方式<a href="/kotlin/gradle-compilation-and-caches#defining-kotlin-compiler-execution-strategy">定义 Kotlin 编译器执行策略</a>。</li></ul><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><p>Kotlin 1.8.0：</p><ul><li>更新 <a href="#updated-jvm-compilation-target">JVM 编译目标</a>。</li><li>稳定了许多函数 —— <a href="#timeunit-conversion-between-java-and-kotlin">Java 和 Kotlin 之间的 TimeUnit 转换</a>、<a href="#cbrt"><code>cbrt()</code></a>、<a href="#java-optionals-extension-functions">Java <code>Optionals</code> 扩展函数</a>。</li><li>提供了<a href="#comparable-and-subtractable-timemarks">可比较和可减的 <code>TimeMarks</code> 预览</a>。</li><li>包含了 <a href="#recursive-copying-or-deletion-of-directories"><code>java.nio.file.path</code> 的实验性扩展函数</a>。</li><li>展示了<a href="#improved-kotlin-reflect-performance">改进的 kotlin-reflect 性能</a>。</li></ul><h3 id="更新的-jvm-编译目标" tabindex="-1">更新的 JVM 编译目标 <a class="header-anchor" href="#更新的-jvm-编译目标" aria-label="Permalink to &quot;更新的 JVM 编译目标&quot;">​</a></h3><p>在 Kotlin 1.8.0 中，标准库（<code>kotlin-stdlib</code>、<code>kotlin-reflect</code> 和 <code>kotlin-script-*</code>）使用 JVM 目标 1.8 进行编译。以前，标准库使用 JVM 目标 1.6 进行编译。</p><p>Kotlin 1.8.0 不再支持 JVM 目标 1.6 和 1.7。因此，你不再需要在构建脚本中单独声明 <code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code>，因为这些 artifacts 的内容已合并到 <code>kotlin-stdlib</code> 中。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果你在构建脚本中显式声明了 <code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code> 作为依赖项，那么你应该用 <code>kotlin-stdlib</code> 替换它们。</p></div><p>请注意，混合不同版本的 stdlib artifacts 可能会导致类重复或类缺失。为避免这种情况，Kotlin Gradle 插件可以帮助你<a href="#usage-of-the-latest-kotlin-stdlib-version-in-transitive-dependencies">对齐 stdlib 版本</a>。</p><h3 id="cbrt" tabindex="-1">cbrt() <a class="header-anchor" href="#cbrt" aria-label="Permalink to &quot;cbrt()&quot;">​</a></h3><p><code>cbrt()</code> 函数现在已稳定，它允许你计算 <code>double</code> 或 <code>float</code> 的实数立方根。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 27</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> negNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The cube root of \${num.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()} is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            cbrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The cube root of \${negNum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()} is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            cbrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(negNum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="java-和-kotlin-之间的-timeunit-转换" tabindex="-1">Java 和 Kotlin 之间的 TimeUnit 转换 <a class="header-anchor" href="#java-和-kotlin-之间的-timeunit-转换" aria-label="Permalink to &quot;Java 和 Kotlin 之间的 TimeUnit 转换&quot;">​</a></h3><p><code>kotlin.time</code> 中的 <code>toTimeUnit()</code> 和 <code>toDurationUnit()</code> 函数现在已稳定。这些函数在 Kotlin 1.6.0 中作为实验性引入，它们改进了 Kotlin 和 Java 之间的互操作性。你现在可以轻松地在 Java <code>java.util.concurrent.TimeUnit</code> 和 Kotlin <code>kotlin.time.DurationUnit</code> 之间进行转换。这些函数仅在 JVM 上受支持。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 供 Java 使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timeout: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, unit: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duration: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(unit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDurationUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="可比较和可减的-timemarks" tabindex="-1">可比较和可减的 TimeMarks <a class="header-anchor" href="#可比较和可减的-timemarks" aria-label="Permalink to &quot;可比较和可减的 TimeMarks&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>TimeMarks</code> 的新功能是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>，要使用它，你需要通过使用 <code>@OptIn(ExperimentalTime::class)</code> 或 <code>@ExperimentalTime</code> 来选择启用。</p></div><p>在 Kotlin 1.8.0 之前，如果你想计算多个 <code>TimeMarks</code> 和<strong>当前时刻</strong>之间的时间差，你只能一次在一个 <code>TimeMark</code> 上调用 <code>elapsedNow()</code>。这使得比较结果变得困难，因为两次 <code>elapsedNow()</code> 函数调用无法在完全相同的时间执行。</p><p>为了解决这个问题，在 Kotlin 1.8.0 中，你可以从相同的时间源中减去和比较 <code>TimeMarks</code>。现在你可以创建一个新的 <code>TimeMark</code> 实例来表示<strong>当前时刻</strong>，并从中减去其他 <code>TimeMarks</code>。这样，你从这些计算中收集到的结果保证是相互关联的。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeSource.Monotonic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 暂停 0.5 秒</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1.8.0 之前</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elapsedNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elapsedNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // elapsed1 和 elapsed2 之间的差异可能会有所不同</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 这取决于两次 elapsedNow() 调用之间的时间流逝</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Measurement 1.\${n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}: elapsed1=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;elapsed2=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, diff=\${elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elapsed2}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1.8.0 之后</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 现在，经过的时间是相对于 mark3 计算的，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // mark3 是一个固定值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Measurement 2.\${n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}: elapsed1=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;elapsed2=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, diff=\${elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elapsed2}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 也可以相互比较时间标记</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这是正确的，因为 mark2 比 mark1 更晚捕获</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mark2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这项新功能在动画计算中特别有用，你可以在其中计算或比较代表不同帧的多个 <code>TimeMarks</code> 之间的时间差。</p><h3 id="递归复制或删除目录" tabindex="-1">递归复制或删除目录 <a class="header-anchor" href="#递归复制或删除目录" aria-label="Permalink to &quot;递归复制或删除目录&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>这些 <code>java.nio.file.path</code> 的新函数是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。要使用它们，你需要通过 <code>@OptIn(kotlin.io.path.ExperimentalPathApi::class)</code> 或 <code>@kotlin.io.path.ExperimentalPathApi</code> 来选择启用。或者，你可以使用编译器选项 <code>-opt-in=kotlin.io.path.ExperimentalPathApi</code>。</p></div><p>我们为 <code>java.nio.file.Path</code> 引入了两个新的扩展函数：<code>copyToRecursively()</code> 和 <code>deleteRecursively()</code>，它们允许你递归地：</p><ul><li>将目录及其内容复制到另一个目标位置。</li><li>删除目录及其内容。</li></ul><p>这些函数作为备份过程的一部分可能非常有用。</p><h4 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h4><p>使用 <code>copyToRecursively()</code>，你可以通过重载 <code>onError</code> lambda 表达式来定义在复制时发生异常应如何处理：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sourceRoot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(destinationRoot, followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    onError </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { source, target, exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exception, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;从 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 复制到 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 失败&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        OnErrorResult.TERMINATE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span></code></pre></div><p>当你使用 <code>deleteRecursively()</code> 时，如果在删除文件或文件夹时发生异常，则会跳过该文件或文件夹。一旦删除完成，<code>deleteRecursively()</code> 会抛出 <code>IOException</code>，其中包含所有作为抑制异常发生的异常。</p><h4 id="文件覆盖" tabindex="-1">文件覆盖 <a class="header-anchor" href="#文件覆盖" aria-label="Permalink to &quot;文件覆盖&quot;">​</a></h4><p>如果 <code>copyToRecursively()</code> 发现目标目录中已存在文件，则会发生异常。如果你想覆盖文件，请使用带有 <code>overwrite</code> 形参的重载，并将其设置为 <code>true</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setUpEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projectDirectory: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fixtureName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fixturesRoot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(COMMON_FIXTURE_NAME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projectDirectory, followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fixturesRoot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fixtureName)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projectDirectory, followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            overwrite </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修补公共 fixture</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="自定义复制操作" tabindex="-1">自定义复制操作 <a class="header-anchor" href="#自定义复制操作" aria-label="Permalink to &quot;自定义复制操作&quot;">​</a></h4><p>要定义你自己的自定义复制逻辑，请使用带有 <code>copyAction</code> 作为附加形参的重载。通过使用 <code>copyAction</code>，你可以提供一个 lambda 表达式，例如，包含你偏好的操作：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sourceRoot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(destinationRoot, followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { source, target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (source.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CopyActionResult.SKIP_SUBTREE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToIgnoringExistingDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CopyActionResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有关这些扩展函数的更多信息，请参阅<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io.path/java.nio.file.-path/copy-to-recursively.html" target="_blank" rel="noreferrer">我们的 API 参考</a>。</p><h3 id="java-optionals-扩展函数" tabindex="-1">Java Optionals 扩展函数 <a class="header-anchor" href="#java-optionals-扩展函数" aria-label="Permalink to &quot;Java Optionals 扩展函数&quot;">​</a></h3><p>在 <a href="/kotlin/whatsnew17#new-experimental-extension-functions-for-java-optionals">Kotlin 1.7.0 中引入</a>的扩展函数现在已稳定。这些函数简化了在 Java 中使用 Optional 类的工作。它们可用于解包和转换 JVM 上的 <code>Optional</code> 对象，并使 Java API 的使用更加简洁。有关更多信息，请参阅 <a href="/kotlin/whatsnew17#new-experimental-extension-functions-for-java-optionals">Kotlin 1.7.0 新特性</a>。</p><h3 id="改进的-kotlin-reflect-性能" tabindex="-1">改进的 kotlin-reflect 性能 <a class="header-anchor" href="#改进的-kotlin-reflect-性能" aria-label="Permalink to &quot;改进的 kotlin-reflect 性能&quot;">​</a></h3><p>利用 <code>kotlin-reflect</code> 现在使用 JVM 目标 1.8 编译这一事实，我们将内部缓存机制迁移到 Java 的 <code>ClassValue</code>。以前我们只缓存 <code>KClass</code>，但现在我们也缓存 <code>KType</code> 和 <code>KDeclarationContainer</code>。这些变更显著提高了调用 <code>typeOf()</code> 时的性能。</p><h2 id="文档更新" tabindex="-1">文档更新 <a class="header-anchor" href="#文档更新" aria-label="Permalink to &quot;文档更新&quot;">​</a></h2><p>Kotlin 文档收到了一些显著的变更：</p><h3 id="改版和新页面" tabindex="-1">改版和新页面 <a class="header-anchor" href="#改版和新页面" aria-label="Permalink to &quot;改版和新页面&quot;">​</a></h3><ul><li><a href="/kotlin/gradle">Gradle 概览</a> —— 了解如何使用 Gradle 构建系统配置和构建 Kotlin 项目，以及 Kotlin Gradle 插件中可用的编译器选项、编译和缓存。</li><li><a href="/kotlin/java-to-kotlin-nullability-guide">Java 和 Kotlin 中的可空性</a> —— 了解 Java 和 Kotlin 在处理可能可空变量方面的不同方法。</li><li><a href="/kotlin/lincheck-guide">Lincheck 指南</a> —— 了解如何设置和使用 Lincheck 框架来测试 JVM 上的并发算法。</li></ul><h3 id="新增与更新的教程" tabindex="-1">新增与更新的教程 <a class="header-anchor" href="#新增与更新的教程" aria-label="Permalink to &quot;新增与更新的教程&quot;">​</a></h3><ul><li><a href="/kotlin/get-started-with-jvm-gradle-project">Gradle 和 Kotlin/JVM 入门</a> —— 使用 IntelliJ IDEA 和 Gradle 创建控制台应用程序。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-ktor-sqldelight.html" target="_blank" rel="noreferrer">使用 Ktor 和 SQLDelight 创建多平台应用</a> —— 使用 Kotlin Multiplatform Mobile 为 iOS 和 Android 创建移动应用程序。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-create-first-app.html" target="_blank" rel="noreferrer">Kotlin 多平台入门</a> —— 了解使用 Kotlin 进行跨平台移动开发，并创建一个同时适用于 Android 和 iOS 的应用。</li></ul><h2 id="安装-kotlin-1-8-0" tabindex="-1">安装 Kotlin 1.8.0 <a class="header-anchor" href="#安装-kotlin-1-8-0" aria-label="Permalink to &quot;安装 Kotlin 1.8.0&quot;">​</a></h2><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2021.3、2022.1 和 2022.2 会自动建议将 Kotlin 插件更新到 1.8.0 版本。IntelliJ IDEA 2022.3 将在即将发布的次要更新中捆绑 1.8.0 版本的 Kotlin 插件。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>要在 IntelliJ IDEA 2022.3 中将现有项目迁移到 Kotlin 1.8.0，请将 Kotlin 版本更改为 <code>1.8.0</code>，然后重新导入你的 Gradle 或 Maven 项目。</p></div><p>对于 Android Studio Electric Eel (221) 和 Flamingo (222)，1.8.0 版本的 Kotlin 插件将随即将发布的 Android Studio 更新一同提供。新的命令行编译器可在 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.8.0" target="_blank" rel="noreferrer">GitHub 发布页面</a> 下载。</p><h2 id="kotlin-1-8-0-兼容性指南" tabindex="-1">Kotlin 1.8.0 兼容性指南 <a class="header-anchor" href="#kotlin-1-8-0-兼容性指南" aria-label="Permalink to &quot;Kotlin 1.8.0 兼容性指南&quot;">​</a></h2><p>Kotlin 1.8.0 是一个<a href="/kotlin/kotlin-evolution-principles#language-and-tooling-releases">特性版本</a>，因此可能会带来与你为早期语言版本编写的代码不兼容的变更。在 <a href="/kotlin/compatibility-guide-18">Kotlin 1.8.0 兼容性指南</a> 中找到这些变更的详细列表。</p>`,191)]))}const g=s(n,[["render",l]]);export{c as __pageData,g as default};
