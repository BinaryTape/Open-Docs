import{_ as t,C as n,c as e,o as l,j as i,G as h,ag as p,a as k}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"프록시","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-proxy.md","filePath":"ko/ktor/client-proxy.md","lastUpdated":1755457140000}'),r={name:"ko/ktor/client-proxy.md"};function d(o,s,E,c,g,y){const a=n("show-structure");return l(),e("div",null,[s[0]||(s[0]=i("h1",{id:"프록시",tabindex:"-1"},[k("프록시 "),i("a",{class:"header-anchor",href:"#프록시","aria-label":'Permalink to "프록시"'},"​")],-1)),h(a,{for:"chapter",depth:"2"}),s[1]||(s[1]=p(`<p>Ktor HTTP 클라이언트를 사용하면 멀티플랫폼 프로젝트에서 프록시 설정을 구성할 수 있습니다. 지원되는 프록시 유형은 <a href="https://en.wikipedia.org/wiki/Proxy_server#Web_proxy_servers" target="_blank" rel="noreferrer">HTTP</a> 및 <a href="https://en.wikipedia.org/wiki/SOCKS" target="_blank" rel="noreferrer">SOCKS</a> 두 가지입니다.</p><h3 id="supported_engines" tabindex="-1">지원되는 엔진 <a class="header-anchor" href="#supported_engines" aria-label="Permalink to &quot;지원되는 엔진 {id=&quot;supported_engines&quot;}&quot;">​</a></h3><p>아래 표는 특정 <a href="./client-engines">엔진들</a>에 대한 지원되는 프록시 유형을 보여줍니다.</p><table tabindex="0"><thead><tr><th>엔진</th><th>HTTP 프록시</th><th>SOCKS 프록시</th></tr></thead><tbody><tr><td>Apache</td><td>✅</td><td>✖️</td></tr><tr><td>Java</td><td>✅</td><td>✖️</td></tr><tr><td>Jetty</td><td>✖️</td><td>✖️</td></tr><tr><td>CIO</td><td>✅</td><td>✖️</td></tr><tr><td>Android</td><td>✅</td><td>✅</td></tr><tr><td>OkHttp</td><td>✅</td><td>✅</td></tr><tr><td>JavaScript</td><td>✖️</td><td>✖️</td></tr><tr><td>Darwin</td><td>✅</td><td>✖️</td></tr><tr><td>Curl</td><td>✅</td><td>✅</td></tr></tbody></table><blockquote><p>참고: 현재 Darwin 엔진의 HTTP 프록시로는 HTTPS 요청이 지원되지 않습니다.</p></blockquote><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>클라이언트에서 프록시를 구성하기 위해 특정 의존성을 추가할 필요는 없습니다. 필요한 의존성은 다음과 같습니다:</p><ul><li><a href="./client-dependencies#client-dependency">ktor-client-core</a>;</li><li><a href="./client-dependencies#engine-dependency">엔진 의존성</a>.</li></ul><h2 id="configure_proxy" tabindex="-1">프록시 구성 <a class="header-anchor" href="#configure_proxy" aria-label="Permalink to &quot;프록시 구성 {id=&quot;configure_proxy&quot;}&quot;">​</a></h2><p>프록시 설정을 구성하려면 <a href="./client-create-and-configure#configure-client">클라이언트 구성 블록</a> 내에서 <code>engine</code> 함수를 호출한 다음 <code>proxy</code> 속성을 사용합니다. 이 속성은 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.engine/-proxy-builder/index.html" target="_blank" rel="noreferrer">ProxyBuilder</a> 팩토리를 사용하여 생성할 수 있는 <code>ProxyConfig</code> 인스턴스를 허용합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 프록시 구성 생성</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="http_proxy" tabindex="-1">HTTP 프록시 <a class="header-anchor" href="#http_proxy" aria-label="Permalink to &quot;HTTP 프록시 {id=&quot;http_proxy&quot;}&quot;">​</a></h3><p>아래 예시는 <code>ProxyBuilder</code>를 사용하여 HTTP 프록시를 구성하는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProxyBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://sample-proxy-server:3128/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>JVM에서 <code>ProxyConfig</code>는 <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Proxy.html" target="_blank" rel="noreferrer">Proxy</a> 클래스에 매핑되므로 다음과 같이 프록시를 구성할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Proxy.Type.HTTP, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sample-proxy-server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="socks_proxy" tabindex="-1">SOCKS 프록시 <a class="header-anchor" href="#socks_proxy" aria-label="Permalink to &quot;SOCKS 프록시 {id=&quot;socks_proxy&quot;}&quot;">​</a></h3><p>아래 예시는 <code>ProxyBuilder</code>를 사용하여 SOCKS 프록시를 구성하는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProxyBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">socks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sample-proxy-server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>HTTP 프록시와 마찬가지로, JVM에서는 <code>Proxy</code>를 사용하여 프록시 설정을 구성할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Proxy.Type.SOCKS, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sample-proxy-server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="proxy_auth" tabindex="-1">프록시 인증 및 권한 부여 <a class="header-anchor" href="#proxy_auth" aria-label="Permalink to &quot;프록시 인증 및 권한 부여 {id=&quot;proxy_auth&quot;}&quot;">​</a></h2><p>프록시 인증 및 권한 부여는 엔진별로 다르며 수동으로 처리해야 합니다. 예를 들어, Ktor 클라이언트를 HTTP 프록시 서버에 기본 인증으로 인증하려면 <a href="./client-default-request">각 요청</a>에 <code>Proxy-Authorization</code> 헤더를 다음과 같이 추가하십시오:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    defaultRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jetbrains:foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.ProxyAuthorization, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Basic </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$credentials</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>JVM에서 Ktor 클라이언트를 SOCKS 프록시에 인증하려면 <code>java.net.socks.username</code> 및 <code>java.net.socks.password</code> <a href="https://docs.oracle.com/javase/7/docs/api/java/net/doc-files/net-properties.html" target="_blank" rel="noreferrer">시스템 속성</a>을 사용할 수 있습니다.</p>`,25))])}const C=t(r,[["render",d]]);export{F as __pageData,C as default};
