import{_ as h,C as o,c,o as g,j as i,G as e,ag as p,a,w as t}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/client-multiplatform.md","filePath":"ktor/client-multiplatform.md","lastUpdated":1755457140000}'),m={name:"ktor/client-multiplatform.md"};function u(y,n,E,_,f,v){const d=o("tldr"),k=o("link-summary"),s=o("code-block"),l=o("TabItem"),r=o("Tabs");return g(),c("div",null,[n[6]||(n[6]=i("h1",{id:"多平台",tabindex:"-1"},[a("多平台 "),i("a",{class:"header-anchor",href:"#多平台","aria-label":'Permalink to "多平台"'},"​")],-1)),e(d,null,{default:t(()=>n[0]||(n[0]=[i("p",null,[a(" 代码示例："),i("a",{href:"https://github.com/ktorio/ktor-samples/tree/main/client-mpp"},"client-mpp")],-1)])),_:1}),e(k,null,{default:t(()=>n[1]||(n[1]=[a(" Ktor 客户端可用于多平台项目，并支持 Android、JavaScript 和 Native 平台。 ")])),_:1}),n[7]||(n[7]=p('<p><a href="./client-create-and-configure">Ktor HTTP 客户端</a>可用于<a href="https://kotlinlang.org/docs/multiplatform.html" target="_blank" rel="noreferrer">多平台项目</a>，并支持以下平台：</p><ul><li>JVM</li><li><a href="https://kotlinlang.org/docs/android-overview.html" target="_blank" rel="noreferrer">Android</a></li><li><a href="https://kotlinlang.org/docs/js-overview.html" target="_blank" rel="noreferrer">JavaScript</a></li><li><a href="https://kotlinlang.org/docs/native-overview.html" target="_blank" rel="noreferrer">Native</a></li></ul><h2 id="add-dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add-dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add-dependencies&quot;}&quot;">​</a></h2><p>要在你的项目中使用 Ktor HTTP 客户端，你需要添加至少两个依赖项：一个客户端依赖项和一个<a href="./client-engines">引擎</a>依赖项。对于多平台项目，你需要按以下方式添加这些依赖项：</p>',4)),i("ol",null,[i("li",null,[n[2]||(n[2]=i("p",null,[a("要在公共代码中使用 Ktor 客户端，请在 "),i("code",null,"build.gradle"),a(" 或 "),i("code",null,"build.gradle.kts"),a(" 文件中将 "),i("code",null,"ktor-client-core"),a(" 依赖项添加到 "),i("code",null,"commonMain"),a(" 源代码集：")],-1)),e(r,{group:"languages"},{default:t(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[e(s,{lang:"Kotlin",code:`               val commonMain by getting {
                   dependencies {
                       implementation("io.ktor:ktor-client-core:$ktor_version")
                   }
               }`})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[e(s,{lang:"Groovy",code:`               commonMain {
                   dependencies {
                       implementation "io.ktor:ktor-client-core:$ktor_version"
                   }
               }`})]),_:1})]),_:1})]),i("li",null,[n[3]||(n[3]=i("p",null,[a("将所需平台的"),i("a",{href:"./client-engines#dependencies"},"引擎依赖项"),a("添加到对应的源代码集。对于 Android，你可以将 "),i("a",{href:"./client-engines#android"},"Android"),a(" 引擎依赖项添加到 "),i("code",null,"androidMain"),a(" 源代码集：")],-1)),e(r,{group:"languages"},{default:t(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[e(s,{lang:"Kotlin",code:`               val androidMain by getting {
                   dependencies {
                       implementation("io.ktor:ktor-client-android:$ktor_version")
                   }
               }`})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[e(s,{lang:"Groovy",code:`               androidMain {
                   dependencies {
                       implementation "io.ktor:ktor-client-android:$ktor_version"
                   }
               }`})]),_:1})]),_:1}),n[4]||(n[4]=i("p",null,[a("对于 iOS，你需要将 "),i("a",{href:"./client-engines#darwin"},"Darwin"),a(" 引擎依赖项添加到 "),i("code",null,"iosMain"),a("：")],-1)),e(r,{group:"languages"},{default:t(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[e(s,{lang:"Kotlin",code:`               val iosMain by getting {
                   dependencies {
                       implementation("io.ktor:ktor-client-darwin:$ktor_version")
                   }
               }`})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[e(s,{lang:"Groovy",code:`               iosMain {
                   dependencies {
                       implementation "io.ktor:ktor-client-darwin:$ktor_version"
                   }
               }`})]),_:1})]),_:1}),n[5]||(n[5]=i("p",null,[a("要了解支持哪些引擎适用于每个平台，请参见"),i("a",{href:"./client-engines#dependencies"},"添加引擎依赖项"),a("。")],-1))])]),n[8]||(n[8]=p(`<h2 id="create-client" tabindex="-1">创建客户端 <a class="header-anchor" href="#create-client" aria-label="Permalink to &quot;创建客户端 {id=&quot;create-client&quot;}&quot;">​</a></h2><p>要在多平台项目中创建客户端，请在项目的<a href="https://kotlinlang.org/docs/mpp-discover-project.html#source-sets" target="_blank" rel="noreferrer">公共代码</a>中调用 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client/-http-client/index.html" target="_blank" rel="noreferrer">HttpClient</a> 构造函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>在此代码片段中，<code>HttpClient</code> 构造函数不接受引擎作为实参：客户端将根据在<a href="#add-dependencies">构建脚本中添加</a>的 artifact 为所需平台选择一个引擎。</p><p>如果你需要调整针对特定平台的引擎配置，请将对应的引擎类作为实参传递给 <code>HttpClient</code> 构造函数，并使用 <code>engine</code> 方法配置引擎，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.android.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.net.Proxy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.net.InetSocketAddress</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Android) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: AndroidEngineConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connectTimeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        socketTimeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Proxy.Type.HTTP, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以从<a href="./client-engines">客户端引擎</a>中了解如何配置所有引擎类型。</p><h2 id="code-example" tabindex="-1">代码示例 <a class="header-anchor" href="#code-example" aria-label="Permalink to &quot;代码示例 {id=&quot;code-example&quot;}&quot;">​</a></h2><p><a href="https://github.com/ktorio/ktor-samples/tree/main/client-mpp" target="_blank" rel="noreferrer">mpp/client-mpp</a> 项目展示了如何在多平台应用程序中使用 Ktor 客户端。此应用程序可在以下平台运行：<code>Android</code>、<code>iOS</code>、<code>JavaScript</code> 和 <code>macosX64</code>。</p>`,9))])}const b=h(m,[["render",u]]);export{C as __pageData,b as default};
