import{_ as e,c as r,o as a,ag as t}from"./chunks/framework.Bksy39di.js";const h=JSON.parse('{"title":"Kotlin との Google Summer of Code 2025","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/gsoc-2025.md","filePath":"ja/kotlin/gsoc-2025.md","lastUpdated":1754307826000}'),i={name:"ja/kotlin/gsoc-2025.md"};function o(n,l,s,p,d,g){return a(),r("div",null,l[0]||(l[0]=[t('<h1 id="kotlin-との-google-summer-of-code-2025" tabindex="-1">Kotlin との Google Summer of Code 2025 <a class="header-anchor" href="#kotlin-との-google-summer-of-code-2025" aria-label="Permalink to &quot;Kotlin との Google Summer of Code 2025&quot;">​</a></h1><p>この記事では、Google Summer of Code with Kotlin 2025 向けの<a href="#project-ideas">プロジェクトのアイデア一覧</a>と、<a href="#kotlin-contributor-guidelines-for-google-summer-of-code-gsoc">コントリビューター向けガイドライン</a>を掲載しています。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin リソース: * <a href="https://github.com/jetbrains/kotlin" target="_blank" rel="noreferrer">Kotlin GitHub リポジトリ</a> * <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">Kotlin Slack</a> と <a href="https://slack-chats.kotlinlang.org/c/gsoc" target="_blank" rel="noreferrer">#gsoc</a> Slack チャンネル ご質問がある場合は、gsoc@kotlinfoundation.org 宛に<a href="mailto:gsoc@kotlinfoundation.org" target="_blank" rel="noreferrer">お問い合わせください</a>。</p></div><h2 id="google-summer-of-code-gsoc-向け-kotlin-コントリビューターガイドライン" tabindex="-1">Google Summer of Code (GSoC) 向け Kotlin コントリビューターガイドライン <a class="header-anchor" href="#google-summer-of-code-gsoc-向け-kotlin-コントリビューターガイドライン" aria-label="Permalink to &quot;Google Summer of Code (GSoC) 向け Kotlin コントリビューターガイドライン&quot;">​</a></h2><h3 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h3><ol><li><p><a href="https://developers.google.com/open-source/gsoc/faq" target="_blank" rel="noreferrer">GSoC FAQ</a>と<a href="https://summerofcode.withgoogle.com/" target="_blank" rel="noreferrer">プログラム発表</a>をご確認ください。</p></li><li><p>Kotlin 言語に慣れてください:</p><ul><li>公式<a href="https://kotlinlang.org/" target="_blank" rel="noreferrer">Kotlin ウェブサイト</a>が手始めに最適です。</li><li>言語をより深く理解するために、公式<a href="/ja/kotlin/getting-started">ドキュメント</a>を読んでください。</li><li><a href="https://lp.jetbrains.com/academy/learn-kotlin/" target="_blank" rel="noreferrer">JetBrains Academy</a>の Kotlin コース、または Android チームの<a href="https://developer.android.com/courses/" target="_blank" rel="noreferrer">トレーニングオプション</a>をご覧ください。</li><li>最新のニュースや開発状況を把握するために、<a href="https://twitter.com/kotlin" target="_blank" rel="noreferrer">Kotlin X</a>または<a href="https://bsky.app/profile/kotlinlang.org" target="_blank" rel="noreferrer">Kotlin Bluesky</a>アカウントをフォローしてください。</li><li>チュートリアル、ヒント、最新の更新情報については、<a href="https://www.youtube.com/@Kotlin" target="_blank" rel="noreferrer">Kotlin YouTube チャンネル</a>をご確認ください。</li></ul></li><li><p>Kotlin オープンソースコミュニティについて知りましょう:</p><ul><li>全般的な<a href="/ja/kotlin/contribute">Kotlin 貢献ガイドライン</a>を確認してください。</li><li>他の開発者と交流し、質問の助けを得るために、<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">Kotlin Slack チャンネルに参加してください</a>。</li><li>質問したり、GSoC チームからサポートを受けたりするために、<a href="https://slack-chats.kotlinlang.org/c/gsoc" target="_blank" rel="noreferrer">#gsoc チャンネルに参加してください</a>。</li></ul></li></ol><h3 id="応募方法" tabindex="-1">応募方法 <a class="header-anchor" href="#応募方法" aria-label="Permalink to &quot;応募方法&quot;">​</a></h3><ol><li><a href="#project-ideas">プロジェクトのアイデア</a>を確認し、取り組みたいものを選択してください。</li><li>Kotlin に慣れていない場合は、<a href="/ja/kotlin/getting-started">Kotlin ウェブサイトの入門情報</a>を読んでください。</li><li><a href="https://google.github.io/gsocguides/student/writing-a-proposal" target="_blank" rel="noreferrer">GSoC コントリビューター向けガイドライン</a>を参照してください。</li><li><a href="https://summerofcode.withgoogle.com/" target="_blank" rel="noreferrer">GSoC ウェブサイト</a>から応募してください。 <ul><li>提案されたプロジェクトに関連する動作するコードサンプルを作成することをお勧めします。また、特に自信のあるコードサンプルがあれば、それも提示してください。</li><li>Kotlin に興味を持った理由と、Kotlin での経験を記述してください。</li><li>オープンソースプロジェクトに参加している場合は、貢献履歴を参照してください。</li><li>GitHub、X (旧 Twitter) アカウント、ブログ、または技術的・科学的出版物のポートフォリオがある場合は、それらも参照してください。</li><li>試験や休暇など、他の予定による GSoC のスケジュールとの競合があれば申告してください。</li></ul></li></ol><p>ありがとうございます！皆様からのご応募を心よりお待ちしております！</p><h2 id="プロジェクトのアイデア" tabindex="-1">プロジェクトのアイデア <a class="header-anchor" href="#プロジェクトのアイデア" aria-label="Permalink to &quot;プロジェクトのアイデア&quot;">​</a></h2><h3 id="build-server-protocol-kotlin-サポートの追加-難易度-高-350時間" tabindex="-1">Build Server Protocol: Kotlin サポートの追加 [難易度: 高, 350時間] <a class="header-anchor" href="#build-server-protocol-kotlin-サポートの追加-難易度-高-350時間" aria-label="Permalink to &quot;Build Server Protocol: Kotlin サポートの追加 [難易度: 高, 350時間]&quot;">​</a></h3><p>Kotlin チームは、Gradle や Maven のビルドシステムだけでなく、他のあらゆるビルドシステムに対しても公式の Kotlin サポートを拡大し、最小限の労力で JetBrains IDE でネイティブにサポートしたいと考えています。一方で、JetBrains 以外の IDE でも基本的な Kotlin サポートを提供したいと考えており、そのようなサポートの一環として、Kotlin をサポートするあらゆるビルドシステムから Kotlin 固有の情報を取得できるようにすることが挙げられます。</p><p>これらの要件に対する解決策となるのが、ビルドシステムと IDE の間に抽象化レイヤーを提供する<a href="https://build-server-protocol.github.io" target="_blank" rel="noreferrer">Build Server Protocol</a> (BSP) です。</p><p>このプロジェクトの目標は、BSP プロトコルを使用してユーザープロジェクトから IntelliJ IDEA に必要なすべての情報を取得し、プロジェクト内の Kotlin コードを操作できるようにするプロトタイプを実装することです。このプロトタイプの範囲を限定するため、ユーザープロジェクトは Gradle を使用して自動的にビルドされます。</p><p><strong>望ましいスキル</strong></p><ul><li>Kotlin の知識</li><li>Gradle プラグインの記述方法の理解</li><li><em>ボーナス</em>: IntelliJ IDEA 用プラグインの記述方法の理解</li></ul><p><strong>メンター候補</strong></p><p>Yahor Berdnikau、Bálint Hegyi、Reinhold Degenfellner</p><p><strong>応募者への課題</strong></p><ul><li><p><strong>課題 #1</strong>。 このプロジェクトに興味を持った理由は何ですか？</p></li><li><p><strong>課題 #2</strong>。 練習課題: 特定のタスクを公開する Gradle プラグインを作成してください。このタスクは、Kotlin Gradle Plugin が存在する場合に、すべての Kotlin ソースの構造を取得し、それらを出力する必要があります。テストを含めると、さらに良いでしょう。</p></li></ul><h3 id="firebase-の-vertex-ai-を使用した-gemini-向け-kotlin-multiplatform-での-android-および-ios-ターゲットのサポート-難易度-中-175時間" tabindex="-1">Firebase の Vertex AI を使用した Gemini 向け Kotlin Multiplatform での Android および iOS ターゲットのサポート [難易度: 中, 175時間] <a class="header-anchor" href="#firebase-の-vertex-ai-を使用した-gemini-向け-kotlin-multiplatform-での-android-および-ios-ターゲットのサポート-難易度-中-175時間" aria-label="Permalink to &quot;Firebase の Vertex AI を使用した Gemini 向け Kotlin Multiplatform での Android および iOS ターゲットのサポート [難易度: 中, 175時間]&quot;">​</a></h3><p>このプロジェクトは、Firebase の Vertex AI を使用した Gemini を、少なくとも Android と iOS でサポートするオープンソースの Kotlin Multiplatform (KMP) ライブラリを作成することを目的としています。既存のサービス向けに KMP ライブラリを作成する上でのベストプラクティスを実演し、適切な本番環境での実装（例えば、適切な API キー管理、ユーザー管理 API キーのサポート、クライアントのスロットリングなど）に焦点を当てます。</p><p><strong>期待される成果物</strong></p><ul><li>既存の Google サービスをサポートする新しい Kotlin Multiplatform ライブラリ</li><li>サンプルコードとドキュメント</li></ul><p><strong>望ましいスキル</strong></p><ul><li>Kotlin</li><li>Kotlin Multiplatform</li><li>モバイル開発 (Android および iOS)</li></ul><p><strong>メンター候補</strong></p><p>Matt Dyor、および Google チーム</p><h3 id="bazel-での-kotlin-multiplatform-サポートの追加-難易度-高-350時間" tabindex="-1">Bazel での Kotlin Multiplatform サポートの追加 [難易度: 高, 350時間] <a class="header-anchor" href="#bazel-での-kotlin-multiplatform-サポートの追加-難易度-高-350時間" aria-label="Permalink to &quot;Bazel での Kotlin Multiplatform サポートの追加 [難易度: 高, 350時間]&quot;">​</a></h3><p>Bazel の Kotlin サポートは進化していますが、適切な Kotlin Multiplatform (KMP) の統合は依然として課題です。このプロジェクトは、依存関係解決の問題に対処し、<code>rules_kotlin</code> および <code>rules_jvm_external</code> の互換性を強化し、クロスプラットフォームビルドを可能にすることで、<a href="https://github.com/bazelbuild/rules_kotlin/issues/567" target="_blank" rel="noreferrer">Bazel の KMP サポート</a>を改善することを目的としています。</p><p>主な改善点は、プラットフォーム固有の依存関係の処理 (expect/actual メカニズム)、Gradle メタデータサポートの改善、および Bazel での KMP の開発者エクスペリエンスをよりスムーズにすることに焦点を当てます。</p><p><strong>期待される成果物</strong></p><ul><li>Bazel における Kotlin Multiplatform の依存関係解決の強化</li><li><code>rules_kotlin</code> および <code>rules_jvm_external</code> との統合の改善</li><li>シームレスなマルチプラットフォーム開発のための、Bazel での動作する KMP ビルド設定</li></ul><p><strong>望ましいスキル</strong></p><ul><li>Kotlin Multiplatform および Gradle</li><li>Bazel ビルドシステム</li><li>依存関係解決戦略</li></ul><p><strong>メンター候補</strong></p><p>Shauvik Roy Choudhary、および Uber チーム</p><h3 id="kotlin-言語サーバー-lsp-難易度-高-350時間" tabindex="-1">Kotlin 言語サーバー (LSP) [難易度: 高, 350時間] <a class="header-anchor" href="#kotlin-言語サーバー-lsp-難易度-高-350時間" aria-label="Permalink to &quot;Kotlin 言語サーバー (LSP) [難易度: 高, 350時間]&quot;">​</a></h3><p>Language Server Protocol (LSP) は、自動補完、定義への移動、リファクタリングなど、さまざまなエディターや IDE 間でコードインテリジェンス機能を有効にする、広く採用されている標準です。現在、公式の Kotlin LSP サーバーは存在しませんが、コミュニティではその需要が非常に高まっています。公開で維持され、コミュニティ主導の実装は、コード移行、AI 搭載コード支援、さまざまな開発環境へのシームレスな統合など、幅広いユースケースをサポートできます。</p><p>このプロジェクトは、主要な LSP 機能との互換性を確保し、開発環境全体での Kotlin のアクセシビリティを広げる、Kotlin LSP の実装を開発することを目的としています。</p><p><strong>期待される成果物</strong></p><ul><li>Kotlin LSP の実装を開発</li></ul><p><strong>望ましいスキル</strong></p><ul><li>Kotlin</li><li>Language Server Protocol (LSP)</li><li>IDE 向けのプラグインまたは拡張機能開発</li></ul><p><strong>メンター候補</strong></p><p>Shauvik Roy Choudhary、および Uber チーム</p><h3 id="新しい-api-を備えた-gradle-用-maven-central-公開プラグイン-難易度-中-175時間" tabindex="-1">新しい API を備えた Gradle 用 Maven Central 公開プラグイン [難易度: 中, 175時間] <a class="header-anchor" href="#新しい-api-を備えた-gradle-用-maven-central-公開プラグイン-難易度-中-175時間" aria-label="Permalink to &quot;新しい API を備えた Gradle 用 Maven Central 公開プラグイン [難易度: 中, 175時間]&quot;">​</a></h3><p><a href="https://central.sonatype.com/" target="_blank" rel="noreferrer">Maven Central</a> は、JVM に焦点を当てたライブラリやプロジェクトを公開するための、最も人気のある Maven リポジトリの 1 つです。これは Apache Maven や Gradle ベースのオープンソースプロジェクトで活発に使用されており、Sonatype Nexus v2 に基づいていますが、新しいバージョンへの移行を待っています。現在、オープンソースプロジェクトの新しい Maven Central インスタンスへの移行が進行中であり、これは非常に異なる API 実装を持ち、ビルドツールプラグインでの特別なサポートが必要です。新しい Maven Central 公開 API と互換性のある Gradle プラグインを開発することは、Gradle を使用してビルドするライブラリ作者が新しいプロセスでスムーズな経験をするのに役立ちます。</p><p>現在、Gradle には、例えば<a href="https://docs.gradle.org/current/userguide/publishing_maven.html" target="_blank" rel="noreferrer">Maven Publish Plugin</a>や、すでに新しい API の採用を試みている<a href="https://github.com/GradleUp/nmcp" target="_blank" rel="noreferrer">New Maven Central Publishing</a>など、Maven Central 公開プラグインが複数実装されています。応募またはコミュニティボンディングのフェーズ中に、潜在的な貢献者はこれらの実装をレビューし、既存のプラグインの更新を提案するか、新しいプラグインを構築するか、フォークするかを決定する必要があります。成果物には、既存の Maven Central 公開プラグインの新しいバージョン、または Gradle 用の新しいプラグインが含まれます。実装は Kotlin または Java で行われ、適切なテストカバレッジとドキュメントを持つことを想定しています。追加の成果物として、プラグインの使用を簡素化するための Kotlin DSL 拡張機能や、<a href="https://declarative.gradle.org/" target="_blank" rel="noreferrer">Declarative Gradle</a> 拡張機能が含まれる場合があります。</p><p><strong>期待される成果物</strong></p><ul><li>更新された Maven Central 公開プラグイン、または新しいプラグイン</li></ul><p><strong>望ましいスキル</strong></p><ul><li>Kotlin</li><li>Gradle</li><li>Maven リポジトリ</li></ul><p><strong>メンター候補</strong></p><p>Oleg Nenashev、および Gradle チーム</p><h3 id="主要な-gradle-プラグインにおける-configuration-cache-とロック競合の改善-難易度-易〜高-90時間〜350時間" tabindex="-1">主要な Gradle プラグインにおける Configuration Cache とロック競合の改善 [難易度: 易〜高, 90時間〜350時間] <a class="header-anchor" href="#主要な-gradle-プラグインにおける-configuration-cache-とロック競合の改善-難易度-易〜高-90時間〜350時間" aria-label="Permalink to &quot;主要な Gradle プラグインにおける Configuration Cache とロック競合の改善 [難易度: 易〜高, 90時間〜350時間]&quot;">​</a></h3><p>Gradle は、Configuration Cache を大幅に拡張し、特に Android Studio および IntelliJ IDEA の同期パフォーマンスを向上させる新機能である<a href="https://docs.gradle.org/current/userguide/isolated_projects.html" target="_blank" rel="noreferrer">Isolated Projects</a>に取り組んでいます。開発者エクスペリエンスの観点から、これは Gradle で最も期待されている機能の 1 つです。</p><p>Isolated Projects の問題点の 1 つは、Gradle コアにおけるロック競合であり、プラグインが並列実行の妨げとなる場合があります。特に Java、Kotlin、Android、および Kotlin Multiplatform エコシステム向けの主要な Gradle Build Tool プラグインにおいて、ロック競合を削減したいと考えています。貢献者は、自身の興味と希望するプロジェクト規模に基づいて成果物を自由に選択できます。</p><p>潜在的な成果物には以下が含まれますが、これらに限定されません:</p><ul><li><a href="https://github.com/gradle/configuration-cache-report" target="_blank" rel="noreferrer">Configuration Cache Report</a> ツールを Gradle Profiler に組み込む（または「そのための GitHub Action を実装する」）</li><li>さまざまなプロジェクトで Gradle およびいくつかの人気のある Gradle プラグインをプロファイリングし、GHA でテストスイートの自動化を行う</li><li>Configuration Cache の有無にかかわらず、ロック競合を削減できる潜在的な領域とプラグインを特定する</li><li>可能であれば、対象プラグインにおける<a href="https://github.com/gradle/gradle/issues/13490" target="_blank" rel="noreferrer">Configuration Cache 互換性</a>の他の領域にも貢献する</li><li>発見された改善点の一部を実装する</li></ul><p><strong>期待される成果物</strong></p><ul><li>Gradle 用 Kotlin DSL の拡張性機能を実装し、一般的なプロジェクト統合のサポートを改善する</li></ul><p><strong>望ましいスキル</strong></p><ul><li>Kotlin</li><li>Gradle</li><li>Java</li><li>パフォーマンス分析</li><li>プロファイリング</li></ul><p><strong>メンター候補</strong></p><p>Oleg Nenashev、Laura Kassovic</p><h3 id="jenkins-プラグイン開発用-gradle-コンベンションプラグイン-難易度-易〜高-90時間〜350時間" tabindex="-1">Jenkins プラグイン開発用 Gradle コンベンションプラグイン [難易度: 易〜高, 90時間〜350時間] <a class="header-anchor" href="#jenkins-プラグイン開発用-gradle-コンベンションプラグイン-難易度-易〜高-90時間〜350時間" aria-label="Permalink to &quot;Jenkins プラグイン開発用 Gradle コンベンションプラグイン [難易度: 易〜高, 90時間〜350時間]&quot;">​</a></h3><p>Gradle で実装された Jenkins プラグインは 50 以上あります。<a href="https://github.com/jenkinsci/gradle-jpi-plugin" target="_blank" rel="noreferrer">Gradle JPI plugin</a> がありますが、これは Jenkins のホスティング要件に完全に準拠しておらず、更新が必要です。このプロジェクトのアイデアでは、Jenkins 向けの Gradle 開発者フローを回復し、Apache Maven フロー（<a href="https://github.com/jenkinsci/plugin-pom" target="_blank" rel="noreferrer">Parent POM</a>、<a href="https://github.com/jenkinsci/plugin-compat-tester" target="_blank" rel="noreferrer">Plugin Compatibility Tester</a>、<a href="https://github.com/jenkinsci/bom" target="_blank" rel="noreferrer">Jenkins Bill of Materials</a> など）と機能的に同等にし、Gradle で Jenkins プラグインを開発する人々の開発者エクスペリエンスを向上させることを目指します。</p><p>貢献者は、自身の興味と希望するプロジェクト規模に基づいて成果物を自由に選択できます。</p><p>潜在的な成果物には以下が含まれますが、これらに限定されません:</p><ul><li>Gradle JPI プラグインを刷新し、ホスティングのベストプラクティスに準拠させる</li><li>Gradle JPI プラグインのコードベースを Groovy から Kotlin に移行する</li><li>Jenkins プラグイン Parent POM の主要機能をカバーする新しい Jenkins プラグイン用コンベンションプラグインを、Kotlin および Kotlin DSL で実装する。これには、プラグインのビルドだけでなく、Jenkins のベストプラクティスに従ったテストと静的解析も含まれます。</li><li>更新されたプラグインやコンベンションプラグインを、最も人気のある Gradle プラグイン (Gradle プラグイン自体を含む) に採用する</li><li>Gradle プラグインを Plugin Compatibility Tester および Bill of Materials に統合する</li><li>Jenkins プラグイン向けに更新された Gradle 開発フローを文書化する</li></ul><p><strong>期待される成果物</strong></p><ul><li>更新された Gradle JPI プラグイン、および/または Jenkins 用の新しいコンベンションプラグイン。Jenkins Update Center および Gradle Plugin Portal で公開されます。</li></ul><p><strong>望ましいスキル</strong></p><ul><li>Kotlin DSL</li><li>Kotlin</li><li>Gradle</li><li>Jenkins</li><li>Java</li></ul><p><strong>メンター候補</strong></p><p>Oleg Nenashev、Stefan Wolf</p><h3 id="kotlin-dsl-および-declarative-gradle-ドキュメントサンプルテストフレームワーク-難易度-易〜中-90時間〜175時間" tabindex="-1">Kotlin DSL および Declarative Gradle ドキュメントサンプルテストフレームワーク [難易度: 易〜中, 90時間〜175時間] <a class="header-anchor" href="#kotlin-dsl-および-declarative-gradle-ドキュメントサンプルテストフレームワーク-難易度-易〜中-90時間〜175時間" aria-label="Permalink to &quot;Kotlin DSL および Declarative Gradle ドキュメントサンプルテストフレームワーク [難易度: 易〜中, 90時間〜175時間]&quot;">​</a></h3><p>Gradle を含む多くのプロジェクトでは、多数の Kotlin DSL サンプルとコードスニペットが存在します（例については Gradle Docs を参照）。これらのスニペットは簡潔さのために不完全なコードを表すことが多いため、複数のバージョンに対してそれらをテストすることは特定の課題を提起します。私たちは、GitHub Actions または TeamCity 上の単体テストフレームワーク (Kotest または JUnit 5) 内でこれらのサンプルの検証を簡素化するテストフレームワークを構築したいと考えています。将来的には、<a href="https://declarative.gradle.org/" target="_blank" rel="noreferrer">Declarative Gradle</a> サンプルについても同様のことに興味があります。</p><p><strong>期待される成果物</strong></p><ul><li>Gradle 用 Kotlin DSL の拡張性機能を実装し、一般的なプロジェクト統合のサポートを改善する</li></ul><p><strong>望ましいスキル</strong></p><ul><li>Kotlin</li><li>Gradle</li><li>Java</li><li>静的解析</li></ul><p><strong>メンター候補</strong></p><p>Oleg Nenashev、Laura Kassovic</p><h3 id="intellij-platform-gradle-プラグイン-–-gradle-レポート作成と並列検証-難易度-中-175時間" tabindex="-1">IntelliJ Platform Gradle プラグイン – Gradle レポート作成と並列検証 [難易度: 中, 175時間] <a class="header-anchor" href="#intellij-platform-gradle-プラグイン-–-gradle-レポート作成と並列検証-難易度-中-175時間" aria-label="Permalink to &quot;IntelliJ Platform Gradle プラグイン – Gradle レポート作成と並列検証 [難易度: 中, 175時間]&quot;">​</a></h3><p><a href="https://github.com/JetBrains/intellij-platform-gradle-plugin" target="_blank" rel="noreferrer">IntelliJ Platform Gradle プラグイン</a>は、Gradle ビルドシステム用のプラグインであり、IntelliJ ベースの IDE 用プラグインのビルド、テスト、検証、および公開のための環境設定を簡素化します。このプラグインは、IntelliJ Platform で導入される絶え間ない変更に対応しながら、ビルド、テスト、検証のステップを管理します。</p><p>IntelliJ Platform Gradle プラグインは、JetBrains、サードパーティ開発者、および外部企業によって、JetBrains ツールとのワークフローを統合するために使用されています。</p><p><strong>期待される成果物</strong></p><ul><li>詳細で構成可能な検証タスクレポートを提供するために、Gradle Reporting を導入する。</li><li>Gradle Worker API を活用して、複数の IntelliJ Platform バージョンに対して <code>verifyPlugin</code> タスクの並列実行を可能にし、タスク実行時間を短縮する。</li><li>プラグイン開発ワークフローをさらに改善するための追加の Gradle 強化策を検討する。</li></ul><p><strong>望ましいスキル</strong></p><ul><li>Kotlin</li><li>Gradle</li><li>IntelliJ Platform</li></ul><p><strong>メンター候補</strong></p><p>Jakub Chrzanowski、JetBrains</p><h3 id="より多くの-kotlin-openrewrite-レシピを追加する-難易度-中-175時間" tabindex="-1">より多くの Kotlin OpenRewrite レシピを追加する [難易度: 中, 175時間] <a class="header-anchor" href="#より多くの-kotlin-openrewrite-レシピを追加する-難易度-中-175時間" aria-label="Permalink to &quot;より多くの Kotlin OpenRewrite レシピを追加する [難易度: 中, 175時間]&quot;">​</a></h3><p>OpenRewrite は、コード移行とリファクタリングを構造化された方法で自動化するための強力なフレームワークです。OpenRewrite は Java に対する強力なサポートを持っていますが、Kotlin エコシステムは、開発者がコードベースをシームレスに移行するのを助ける、より包括的な OpenRewrite レシピセットから恩恵を受けるでしょう。</p><p>このプロジェクトは、Java ベースの AutoValue クラスをイディオム的な Kotlin データクラスに移行する、ベストプラクティスに従って Kotlin コードを現代化する、Kotlin バージョン間でのよりシームレスな移行を可能にするなど、より多くの自動変換を追加することで、Kotlin OpenRewrite レシピコレクションを拡大することを目的としています。これらのレシピは、Kotlin 開発者が最小限の手作業で、クリーンで最新かつイディオム的なコードベースを維持するのに役立ちます。</p><p><strong>期待される成果物</strong></p><ul><li>Kotlin コード移行のための新しい OpenRewrite レシピの開発</li></ul><p><strong>望ましいスキル</strong></p><ul><li>Kotlin</li><li>OpenRewrite フレームワーク</li><li>Java から Kotlin への移行戦略</li></ul><p><strong>メンター候補</strong></p><p>Shauvik Roy Choudhary、および Uber チーム</p><h3 id="bazel-の-rules-jvm-external-への-bom-サポートの追加-難易度-高-350時間" tabindex="-1">Bazel の <code>rules_jvm_external</code> への BOM サポートの追加 [難易度: 高, 350時間] <a class="header-anchor" href="#bazel-の-rules-jvm-external-への-bom-サポートの追加-難易度-高-350時間" aria-label="Permalink to &quot;Bazel の `rules_jvm_external` への BOM サポートの追加 [難易度: 高, 350時間]&quot;">​</a></h3><p>Bazel の <code>rules_jvm_external</code> は、外部 Java 依存関係を宣言するための構造化された方法を提供しますが、現在、Bill of Materials (BOM) ファイルに対する適切なサポートを欠いています。BOM ファイルは、開発者が個々のバージョンを指定する必要なく、Maven および Gradle で依存関係を一貫した方法で管理するために広く使用されています。このプロジェクトは、BOM サポートを追加することで <code>rules_jvm_external</code> を強化し、開発者が Bazel 内で BOM ベースの依存関係解決を使用できるようにすることを目的としています。このプロジェクトには、既存のオープンソース活動に貢献するか、<code>rules_jvm_external</code> に直接 BOM サポートを実装するかのいずれかが含まれる可能性があり、広く使用されている依存関係管理アプローチとの互換性を確保します。</p><p><strong>期待される成果物</strong></p><ul><li>Bazel の <code>rules_jvm_external</code> における BOM サポートの実装</li><li>Bazel ユーザーの依存関係解決と使いやすさの改善</li><li>Bazel での BOM サポートの使用に関するドキュメントと例</li></ul><p><strong>望ましいスキル</strong></p><ul><li>Starlark (Bazel のスクリプト言語)</li><li>Bazel ビルドシステム</li><li>依存関係解決戦略</li></ul><p><strong>メンター候補</strong></p><p>Shauvik Roy Choudhary、および Uber チーム</p><h3 id="kotlin-用-gradle-コード品質プラグイン向けのクリーンで実用的なレポート-難易度-易〜中-90時間〜175時間" tabindex="-1">Kotlin 用 Gradle コード品質プラグイン向けのクリーンで実用的なレポート [難易度: 易〜中, 90時間〜175時間] <a class="header-anchor" href="#kotlin-用-gradle-コード品質プラグイン向けのクリーンで実用的なレポート-難易度-易〜中-90時間〜175時間" aria-label="Permalink to &quot;Kotlin 用 Gradle コード品質プラグイン向けのクリーンで実用的なレポート [難易度: 易〜中, 90時間〜175時間]&quot;">​</a></h3><p>Gradle は最近、Gradle およびサードパーティプラグインが問題や警告を統一された方法で伝播できるようにする新しい<a href="https://docs.gradle.org/current/userguide/reporting_problems.html" target="_blank" rel="noreferrer">Problems API</a>を導入しました。この API は、クリーンで実用的なエラーレポートを提供し、コンソール出力、専用の HTML レポート、接続された可観測性ツールへのより深い洞察をもたらします。IntelliJ IDEA や Android Studio などの IDE も、Gradle の API 統合ツールを介して詳細にアクセスし、コードエディターで直接警告を表示できます。Java コンパイル、依存関係解決エラー、非推奨警告など、いくつかのコア機能とプラグインはすでに Problems API を採用しています。私たちは Kotlin 用のコード品質プラグインにもこの API を採用してもらいたいと考えており、これにより、Gradle を使用する 100,000 人以上の Kotlin 開発者の開発者エクスペリエンスが大幅に向上するでしょう。</p><p>このプロジェクトでは、貢献者に Ktlint、Detekt、Diktat、ArchUnit、または Kotlin 用 Checkstyle など、いくつかの Kotlin コード品質プラグインを選択し、それらを Problems API と統合することを提案します。また、Kotlin DSL で定義された Gradle ビルドに対して同様の分析を統合することにも取り組むことができます。</p><p><strong>期待される成果物</strong></p><ul><li>上記のプラグインに Problems API 統合を実装する</li></ul><p><strong>望ましいスキル</strong></p><ul><li>Kotlin</li><li>Gradle</li></ul><p><strong>メンター候補</strong></p><p>Oleg Nenashev、Balint Hegyi、Reinhold Degenfellner</p>',120)]))}const c=e(i,[["render",o]]);export{h as __pageData,c as default};
