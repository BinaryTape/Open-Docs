import{_ as a,a as e,b as s,c as i}from"./chunks/wasm-composeapp-browser.n73x6mgF.js";import{_ as o,a as l,b as r}from"./chunks/wasm-composeapp-github-clickme.W2UAtuJ-.js";import{_ as p}from"./chunks/join-slack-channel.C908i2w7.js";import{_ as n,c as m,o as c,ag as h}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"Kotlin/Wasm 및 Compose Multiplatform 시작하기","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/wasm-get-started.md","filePath":"ko/kotlin/wasm-get-started.md","lastUpdated":1754307826000}'),d={name:"ko/kotlin/wasm-get-started.md"};function g(u,t,b,k,f,w){return c(),m("div",null,t[0]||(t[0]=[h('<h1 id="kotlin-wasm-및-compose-multiplatform-시작하기" tabindex="-1">Kotlin/Wasm 및 Compose Multiplatform 시작하기 <a class="header-anchor" href="#kotlin-wasm-및-compose-multiplatform-시작하기" aria-label="Permalink to &quot;Kotlin/Wasm 및 Compose Multiplatform 시작하기&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasm은 <a href="/ko/kotlin/components-stability">알파(Alpha) 단계</a>입니다. 언제든지 변경될 수 있습니다. <a href="https://slack-chats.kotlinlang.org/c/webassembly" target="_blank" rel="noreferrer">Kotlin/Wasm 커뮤니티에 참여하세요.</a></p></div><p>이 튜토리얼에서는 <a href="/ko/kotlin/wasm-overview">Kotlin/Wasm</a>을 사용하여 IntelliJ IDEA에서 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 앱을 실행하고, <a href="https://pages.github.com/" target="_blank" rel="noreferrer">GitHub Pages</a>에 사이트로 게시할 아티팩트를 생성하는 방법을 보여줍니다.</p><h2 id="시작하기-전에" tabindex="-1">시작하기 전에 <a class="header-anchor" href="#시작하기-전에" aria-label="Permalink to &quot;시작하기 전에&quot;">​</a></h2><p>Kotlin Multiplatform 위자드를 사용하여 프로젝트를 생성합니다.</p><ol><li><p><a href="https://kmp.jetbrains.com/#newProject" target="_blank" rel="noreferrer">Kotlin Multiplatform 위자드</a>를 엽니다.</p></li><li><p><strong>새 프로젝트(New Project)</strong> 탭에서 프로젝트 이름과 ID를 원하는 대로 변경합니다. 이 튜토리얼에서는 이름을 &quot;WasmDemo&quot;, ID를 &quot;wasm.project.demo&quot;로 설정합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>이것은 프로젝트 디렉터리의 이름과 ID입니다. 그대로 두셔도 됩니다.</p></div></li><li><p><strong>Web</strong> 옵션을 선택합니다. 다른 옵션은 선택되지 않았는지 확인하세요.</p></li><li><p><strong>Download</strong> 버튼을 클릭하고 생성된 아카이브의 압축을 해제합니다.</p><p><img src="'+a+'" alt="Kotlin Multiplatform wizard" width="400"></p></li></ol><h2 id="intellij-idea에서-프로젝트-열기" tabindex="-1">IntelliJ IDEA에서 프로젝트 열기 <a class="header-anchor" href="#intellij-idea에서-프로젝트-열기" aria-label="Permalink to &quot;IntelliJ IDEA에서 프로젝트 열기&quot;">​</a></h2><ol><li>최신 버전의 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a>를 다운로드하여 설치합니다.</li><li>IntelliJ IDEA 시작 화면에서 **열기(Open)**를 클릭하거나 메뉴 바에서 **파일(File) | 열기(Open)**를 선택합니다.</li><li>압축이 해제된 &quot;WasmDemo&quot; 폴더로 이동한 다음 **열기(Open)**를 클릭합니다.</li></ol><h2 id="애플리케이션-실행" tabindex="-1">애플리케이션 실행 <a class="header-anchor" href="#애플리케이션-실행" aria-label="Permalink to &quot;애플리케이션 실행&quot;">​</a></h2><ol><li><p>IntelliJ IDEA에서 <strong>보기(View)</strong> | <strong>도구 창(Tool Windows)</strong> | <strong>Gradle</strong>을 선택하여 <strong>Gradle</strong> 도구 창을 엽니다.</p><p>프로젝트가 로드되면 Gradle 도구 창에서 Gradle 작업을 찾을 수 있습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>작업이 성공적으로 로드되려면 Gradle JVM으로 Java 11 이상이 필요합니다.</p></div></li><li><p><strong>wasmdemo</strong> | <strong>작업(Tasks)</strong> | <strong>kotlin browser</strong>에서 <strong>wasmJsBrowserDevelopmentRun</strong> 작업을 선택하고 실행합니다.</p><p><img src="'+e+'" alt="Run the Gradle task" width="400"></p><p>또는 <code>WasmDemo</code> 루트 디렉터리에서 터미널에 다음 명령을 실행할 수 있습니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmJsBrowserDevelopmentRun</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span></span></code></pre></div></li><li><p>애플리케이션이 시작되면 브라우저에서 다음 URL을 엽니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http://localhost:8080/</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>8080 포트를 사용할 수 없을 수 있으므로 포트 번호가 다를 수 있습니다. 실제 포트 번호는 Gradle 빌드 콘솔에 출력됩니다.</p></div><p>&quot;Click me!&quot; 버튼이 표시됩니다. 클릭하세요.</p><p><img src="'+s+'" alt="Click me" width="650"></p><p>이제 Compose Multiplatform 로고가 표시됩니다.</p><p><img src="'+i+'" alt="Compose app in browser" width="650"></p></li></ol><h2 id="아티팩트-생성" tabindex="-1">아티팩트 생성 <a class="header-anchor" href="#아티팩트-생성" aria-label="Permalink to &quot;아티팩트 생성&quot;">​</a></h2><p><strong>wasmdemo</strong> | <strong>작업(Tasks)</strong> | <strong>kotlin browser</strong>에서 <strong>wasmJsBrowserDistribution</strong> 작업을 선택하고 실행합니다.</p><p><img src="'+o+'" alt="Run the Gradle task" width="400"></p><p>또는 <code>WasmDemo</code> 루트 디렉터리에서 터미널에 다음 명령을 실행할 수 있습니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmJsBrowserDistribution</span></span></code></pre></div><p>애플리케이션 작업이 완료되면 생성된 아티팩트를 <code>composeApp/build/dist/wasmJs/productionExecutable</code> 디렉터리에서 찾을 수 있습니다.</p><p><img src="'+l+'" alt="Artifacts directory" width="400"></p><h2 id="github-pages에-게시" tabindex="-1">GitHub Pages에 게시 <a class="header-anchor" href="#github-pages에-게시" aria-label="Permalink to &quot;GitHub Pages에 게시&quot;">​</a></h2><ol><li><p><code>productionExecutable</code> 디렉터리의 모든 내용을 사이트를 만들고자 하는 저장소에 복사합니다.</p></li><li><p><a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-your-site" target="_blank" rel="noreferrer">사이트 생성</a>을 위한 GitHub의 지침을 따르세요.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>변경 사항을 GitHub에 푸시한 후 사이트에 게시되기까지 최대 10분이 소요될 수 있습니다.</p></div></li><li><p>브라우저에서 GitHub Pages 도메인으로 이동합니다.</p><p><img src="'+r+'" alt="Navigate to GitHub pages" width="650"></p><p>축하합니다! GitHub Pages에 아티팩트를 게시했습니다.</p></li></ol><h2 id="다음-단계는-무엇인가요" tabindex="-1">다음 단계는 무엇인가요? <a class="header-anchor" href="#다음-단계는-무엇인가요" aria-label="Permalink to &quot;다음 단계는 무엇인가요?&quot;">​</a></h2><ul><li><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-multiplatform-create-first-app.html" target="_blank" rel="noreferrer">Compose Multiplatform을 사용하여 iOS와 Android 간에 UI를 공유하는 방법 알아보기</a></p></li><li><p>더 많은 Kotlin/Wasm 예제를 사용해 보세요:</p><ul><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-imageviewer" target="_blank" rel="noreferrer">Compose 이미지 뷰어</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-jetsnack" target="_blank" rel="noreferrer">Jetsnack 애플리케이션</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/nodejs-example" target="_blank" rel="noreferrer">Node.js 예제</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/wasi-example" target="_blank" rel="noreferrer">WASI 예제</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-example" target="_blank" rel="noreferrer">Compose 예제</a></li></ul></li><li><p>Kotlin Slack의 Kotlin/Wasm 커뮤니티에 참여하세요:</p><p><a href="https://slack-chats.kotlinlang.org/c/webassembly"><img src="'+p+'" width="500" alt="Kotlin/Wasm 커뮤니티에 참여하세요" style=""></a></p></li></ul>',21)]))}const I=n(d,[["render",g]]);export{q as __pageData,I as default};
