import{_ as y,C as t,c as v,o as m,G as a,ag as d,j as i,w as l,a as e}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-call-id.md","filePath":"ko/ktor/server-call-id.md","lastUpdated":1755457140000}'),b={name:"ko/ktor/server-call-id.md"};function C(I,s,f,F,D,q){const h=t("TopicTitle"),k=t("show-structure"),c=t("primary-label"),r=t("Links"),g=t("tldr"),u=t("link-summary"),n=t("code-block"),p=t("TabItem"),o=t("Tabs"),E=t("list");return m(),v("div",null,[a(h,{labelRef:"server-plugin",title:"Ktor 서버에서 요청 추적하기"}),a(k,{for:"chapter",depth:"2"}),a(c,{ref:"server-plugin"},null,512),a(g,null,{default:l(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"필수 의존성"),e(": "),i("code",null,"io.ktor:ktor-server-call-id")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"코드 예시"),e(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/call-id"}," call-id ")],-1)),i("p",null,[i("b",null,[a(r,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임이나 가상 머신 없이 서버를 실행할 수 있습니다."},{default:l(()=>s[0]||(s[0]=[e("네이티브 서버")])),_:1}),s[1]||(s[1]=e(" 지원"))]),s[2]||(s[2]=e(": ✅ "))])]),_:1}),a(u,null,{default:l(()=>s[5]||(s[5]=[e(" CallId 서버 플러그인을 사용하면 고유한 호출 ID를 사용하여 클라이언트 요청을 추적할 수 있습니다. ")])),_:1}),s[18]||(s[18]=d('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-call-id/io.ktor.server.plugins.callid/-call-id.html" target="_blank" rel="noreferrer">CallId</a> 플러그인을 사용하면 고유한 요청 ID 또는 호출 ID를 사용하여 클라이언트 요청을 처음부터 끝까지 추적할 수 있습니다. 일반적으로 Ktor에서 호출 ID를 사용하는 방법은 다음과 같습니다:</p><ol><li>첫째, 다음 방법 중 하나로 특정 요청에 대한 호출 ID를 얻어야 합니다: <ul><li>역방향 프록시(예: Nginx) 또는 클라우드 제공업체(예: <a href="./heroku">Heroku</a>)가 <code>X-Request-Id</code>와 같은 특정 헤더에 호출 ID를 추가할 수 있습니다. 이 경우 Ktor는 호출 ID를 <a href="#retrieve">검색</a>할 수 있도록 합니다.</li><li>그렇지 않고 요청에 호출 ID가 포함되어 있지 않으면 Ktor 서버에서 호출 ID를 <a href="#generate">생성</a>할 수 있습니다.</li></ul></li><li>다음으로, Ktor는 미리 정의된 사전을 사용하여 검색/생성된 호출 ID를 <a href="#verify">확인</a>합니다. 호출 ID를 확인하기 위해 사용자 지정 조건을 제공할 수도 있습니다.</li><li>마지막으로, <code>X-Request-Id</code>와 같은 특정 헤더에 호출 ID를 클라이언트에 <a href="#send">전송</a>할 수 있습니다.</li></ol><p><a href="./server-call-logging">CallLogging</a>과 함께 <code>CallId</code>을 사용하면 MDC 컨텍스트에 <a href="#put-call-id-mdc">호출 ID를 추가하고</a> 각 요청에 대한 호출 ID를 표시하도록 로거를 구성하여 호출 문제를 해결하는 데 도움이 됩니다.</p><blockquote><p>클라이언트 측에서 Ktor는 클라이언트 요청 추적을 위해 <a href="./client-call-id">CallId</a> 플러그인을 제공합니다.</p></blockquote><h2 id="add_dependencies" tabindex="-1">종속성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;종속성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>CallId</code>을(를) 사용하려면 빌드 스크립트에 <code>ktor-server-call-id</code> 아티팩트를 포함해야 합니다: </p>',6)),a(o,{group:"languages"},{default:l(()=>[a(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:l(()=>[a(n,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-call-id:$ktor_version")'})]),_:1}),a(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:l(()=>[a(n,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-call-id:$ktor_version"'})]),_:1}),a(p,{title:"Maven","group-key":"maven"},{default:l(()=>[a(n,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-call-id-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[19]||(s[19]=i("h2",{id:"install_plugin",tabindex:"-1"},[e("CallId 설치 "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "CallId 설치 {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[7]||(s[7]=e(" 애플리케이션에 ")),s[8]||(s[8]=i("code",null,"CallId",-1)),s[9]||(s[9]=e(" 플러그인을 ")),s[10]||(s[10]=i("a",{href:"#install"},"설치",-1)),s[11]||(s[11]=e("하려면 지정된 ")),a(r,{href:"/ktor/server-modules",summary:"모듈을 사용하면 경로를 그룹화하여 애플리케이션을 구성할 수 있습니다."},{default:l(()=>s[6]||(s[6]=[e("모듈")])),_:1}),s[12]||(s[12]=e("의 ")),s[13]||(s[13]=i("code",null,"install",-1)),s[14]||(s[14]=e(" 함수에 전달하세요. 아래 코드 스니펫은 ")),s[15]||(s[15]=i("code",null,"CallId",-1)),s[16]||(s[16]=e("을(를) 설치하는 방법을 보여줍니다... "))]),a(E,null,{default:l(()=>s[17]||(s[17]=[i("li",null,[e(" ... "),i("code",null,"embeddedServer"),e(" 함수 호출 내. ")],-1),i("li",null,[e(" ... 명시적으로 정의된 "),i("code",null,"module"),e(" 내. "),i("code",null,"module"),e("은 "),i("code",null,"Application"),e(" 클래스의 확장 함수입니다. ")],-1)])),_:1}),a(o,null,{default:l(()=>[a(p,{title:"embeddedServer"},{default:l(()=>[a(n,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.callid.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(CallId)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),a(p,{title:"module"},{default:l(()=>[a(n,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.callid.*
            // ...
            fun Application.module() {
                install(CallId)
                // ...
            }`})]),_:1})]),_:1}),s[20]||(s[20]=d(`<h2 id="configure" tabindex="-1">CallId 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;CallId 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><h3 id="retrieve" tabindex="-1">호출 ID 검색 <a class="header-anchor" href="#retrieve" aria-label="Permalink to &quot;호출 ID 검색 {id=&quot;retrieve&quot;}&quot;">​</a></h3><p><code>CallId</code>은(는) 호출 ID를 검색하는 여러 가지 방법을 제공합니다:</p><ul><li>지정된 헤더에서 호출 ID를 검색하려면 <code>retrieveFromHeader</code> 함수를 사용합니다. 예를 들어 다음과 같습니다:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    retrieveFromHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>header</code> 함수를 사용하여 동일한 헤더에서 호출 ID를 <a href="#send">검색하고 전송</a>할 수도 있습니다.</p><ul><li>필요한 경우 <code>ApplicationCall</code>에서 호출 ID를 검색할 수 있습니다:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    retrieve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>검색된 모든 호출 ID는 기본 사전을 사용하여 <a href="#verify">확인</a>됩니다.</p><h3 id="generate" tabindex="-1">호출 ID 생성 <a class="header-anchor" href="#generate" aria-label="Permalink to &quot;호출 ID 생성 {id=&quot;generate&quot;}&quot;">​</a></h3><p>수신 요청에 호출 ID가 포함되어 있지 않으면 <code>generate</code> 함수를 사용하여 생성할 수 있습니다:</p><ul><li>아래 예시는 미리 정의된 사전에서 특정 길이의 호출 ID를 생성하는 방법을 보여줍니다:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abcde12345&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>아래 예시에서 <code>generate</code> 함수는 호출 ID를 생성하기 위한 블록을 받습니다:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> atomic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;generated-call-id-\${counter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAndIncrement</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="verify" tabindex="-1">호출 ID 확인 <a class="header-anchor" href="#verify" aria-label="Permalink to &quot;호출 ID 확인 {id=&quot;verify&quot;}&quot;">​</a></h3><p>모든 <a href="#retrieve">검색</a>/<a href="#generate">생성</a>된 호출 ID는 다음과 같은 기본 사전을 사용하여 확인됩니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CALL_ID_DEFAULT_DICTIONARY: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abcdefghijklmnopqrstuvwxyz0123456789+/=-&quot;</span></span></code></pre></div><p>이는 대문자를 포함하는 호출 ID는 확인을 통과하지 못함을 의미합니다. 필요한 경우 <code>verify</code> 함수를 사용하여 덜 엄격한 규칙을 적용할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { callId: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        callId.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>전체 예시는 여기에서 찾을 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/call-id" target="_blank" rel="noreferrer">call-id</a>.</p><h3 id="send" tabindex="-1">호출 ID를 클라이언트에 전송 <a class="header-anchor" href="#send" aria-label="Permalink to &quot;호출 ID를 클라이언트에 전송 {id=&quot;send&quot;}&quot;">​</a></h3><p>호출 ID를 <a href="#retrieve">검색</a>/<a href="#generate">생성</a>한 후 클라이언트에 전송할 수 있습니다:</p><ul><li><code>header</code> 함수를 사용하여 호출 ID를 <a href="#retrieve">검색</a>하고 동일한 헤더에 전송할 수 있습니다:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>전체 예시는 여기에서 찾을 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/call-id" target="_blank" rel="noreferrer">call-id</a>.</p><ul><li><code>replyToHeader</code> 함수는 지정된 헤더에 호출 ID를 전송합니다:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    replyToHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>필요한 경우 <code>ApplicationCall</code>을 사용하여 <a href="./server-responses">응답</a>에 호출 ID를 전송할 수 있습니다:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, callId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId, callId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="put-call-id-mdc" tabindex="-1">MDC에 호출 ID 추가 <a class="header-anchor" href="#put-call-id-mdc" aria-label="Permalink to &quot;MDC에 호출 ID 추가 {id=&quot;put-call-id-mdc&quot;}&quot;">​</a></h2><p><a href="./server-call-logging">CallLogging</a>과 함께 <code>CallId</code>을(를) 사용하면 MDC 컨텍스트에 호출 ID를 추가하고 각 요청에 대한 호출 ID를 표시하도록 로거를 구성하여 호출 문제를 해결하는 데 도움이 됩니다. 이를 위해 <code>CallLogging</code> 구성 블록 내에서 <code>callIdMdc</code> 함수를 호출하고 MDC 컨텍스트에 추가할 원하는 키를 지정합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    callIdMdc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;call-id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 키는 로그에 호출 ID를 표시하도록 <a href="./server-logging#configure-logger">로거 구성</a>에 전달될 수 있습니다. 예를 들어, <code>logback.xml</code> 파일은 다음과 같을 수 있습니다:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span></span>
<span class="line"><span>    &lt;encoder&gt;</span></span>
<span class="line"><span>        &lt;pattern&gt;%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %X{call-id} %-5level %logger{36} - %msg%n&lt;/pattern&gt;</span></span>
<span class="line"><span>    &lt;/encoder&gt;</span></span>
<span class="line"><span>&lt;/appender&gt;</span></span></code></pre></div><p>전체 예시는 여기에서 찾을 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/call-id" target="_blank" rel="noreferrer">call-id</a>.</p>`,36))])}const x=y(b,[["render",C]]);export{B as __pageData,x as default};
