import{_ as r,C as o,c as e,o as i,j as d,G as a,ag as l,a as s}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"Kotlin 元件的穩定性 (1.4 版本前","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/components-stability-pre-1.4.md","filePath":"zh-Hant/kotlin/components-stability-pre-1.4.md","lastUpdated":1754307826000}'),p={name:"zh-Hant/kotlin/components-stability-pre-1.4.md"};function g(F,t,c,M,S,h){const n=o("no-index");return i(),e("div",null,[t[0]||(t[0]=d("h1",{id:"kotlin-元件的穩定性-1-4-版本前",tabindex:"-1"},[s("Kotlin 元件的穩定性 (1.4 版本前 "),d("a",{class:"header-anchor",href:"#kotlin-元件的穩定性-1-4-版本前","aria-label":'Permalink to "Kotlin 元件的穩定性 (1.4 版本前"'},"​")],-1)),t[1]||(t[1]=d("p",null,"[//]: # (title: Kotlin 元件的穩定性 (1.4 版本前))",-1)),a(n),t[2]||(t[2]=l('<p>元件的穩定性模式可能有所不同，取決於其演進速度：</p><a name="moving-fast"></a><ul><li><p><strong>快速演進 (MF)</strong>：即使在 <a href="/zh-Hant/kotlin/kotlin-evolution-principles#language-and-tooling-releases">增量發佈版本</a> 之間也不應期望有相容性，任何功能都可能在沒有警告的情況下被新增、移除或更改。</p></li><li><p><strong>增量發佈版本中的新增功能 (AIR)</strong>：可以在增量發佈版本中新增內容，應避免移除或更改行為，如有必要應在之前的增量發佈版本中宣佈。</p></li><li><p><strong>穩定增量發佈版本 (SIR)</strong>：增量發佈版本完全相容，只會進行最佳化和錯誤修正。任何更改都可以在 <a href="/zh-Hant/kotlin/kotlin-evolution-principles#language-and-tooling-releases">語言發佈版本</a> 中進行。</p></li></ul><a name="fully-stable"></a><ul><li><strong>完全穩定 (FS)</strong>：增量發佈版本完全相容，只會進行最佳化和錯誤修正。功能發佈版本向下相容。</li></ul><p>對於同一個元件，源代碼（Source）和二進位（Binary）相容性可能會有不同的模式，例如，源代碼可以在二進位格式穩定之前達到完全穩定，反之亦然。</p><p><a href="/zh-Hant/kotlin/kotlin-evolution-principles">Kotlin 演進策略</a> 的條款僅完全適用於已達到完全穩定 (FS) 的元件。從那時起，不相容的更改必須經由語言委員會批准。</p><table tabindex="0"><thead><tr><th><strong>元件</strong></th><th><strong>進入狀態版本</strong></th><th><strong>源代碼模式</strong></th><th><strong>二進位模式</strong></th></tr></thead><tbody><tr><td>Kotlin/JVM</td><td>1.0</td><td>FS</td><td>FS</td></tr><tr><td>kotlin-stdlib (JVM)</td><td>1.0</td><td>FS</td><td>FS</td></tr><tr><td>KDoc syntax</td><td>1.0</td><td>FS</td><td>N/A</td></tr><tr><td>Coroutines</td><td>1.3</td><td>FS</td><td>FS</td></tr><tr><td>kotlin-reflect (JVM)</td><td>1.0</td><td>SIR</td><td>SIR</td></tr><tr><td>Kotlin/JS</td><td>1.1</td><td>AIR</td><td>MF</td></tr><tr><td>Kotlin/Native</td><td>1.3</td><td>AIR</td><td>MF</td></tr><tr><td>Kotlin Scripts (*.kts)</td><td>1.2</td><td>AIR</td><td>MF</td></tr><tr><td>dokka</td><td>0.1</td><td>MF</td><td>N/A</td></tr><tr><td>Kotlin Scripting APIs</td><td>1.2</td><td>MF</td><td>MF</td></tr><tr><td>Compiler Plugin API</td><td>1.0</td><td>MF</td><td>MF</td></tr><tr><td>Serialization</td><td>1.3</td><td>MF</td><td>MF</td></tr><tr><td>Multiplatform Projects</td><td>1.2</td><td>MF</td><td>MF</td></tr><tr><td>Inline classes</td><td>1.3</td><td>MF</td><td>MF</td></tr><tr><td>Unsigned arithmetics</td><td>1.3</td><td>MF</td><td>MF</td></tr><tr><td><strong>所有其他實驗性功能，預設為</strong></td><td>N/A</td><td><strong>MF</strong></td><td><strong>MF</strong></td></tr></tbody></table>',8))])}const u=r(p,[["render",g]]);export{_ as __pageData,u as default};
