import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"Kotlin 1.2 的新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew12.md","filePath":"zh-Hant/kotlin/whatsnew12.md","lastUpdated":1754307826000}'),h={name:"zh-Hant/kotlin/whatsnew12.md"};function t(e,s,k,p,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="kotlin-1-2-的新功能" tabindex="-1">Kotlin 1.2 的新功能 <a class="header-anchor" href="#kotlin-1-2-的新功能" aria-label="Permalink to &quot;Kotlin 1.2 的新功能&quot;">​</a></h1><p>發布日期：2017 年 11 月 28 日</p><h2 id="目錄" tabindex="-1">目錄 <a class="header-anchor" href="#目錄" aria-label="Permalink to &quot;目錄&quot;">​</a></h2><ul><li><a href="#multiplatform-projects-experimental">多平台專案</a></li><li><a href="#other-language-features">其他語言功能</a></li><li><a href="#standard-library">標準函式庫</a></li><li><a href="#jvm-backend">JVM 後端</a></li><li><a href="#javascript-backend">JavaScript 後端</a></li></ul><h2 id="多平台專案-實驗性" tabindex="-1">多平台專案 (實驗性) <a class="header-anchor" href="#多平台專案-實驗性" aria-label="Permalink to &quot;多平台專案 (實驗性)&quot;">​</a></h2><p>多平台專案是 Kotlin 1.2 中一項新的<strong>實驗性</strong>功能，它允許您在 Kotlin 支援的目標平台（JVM、JavaScript，以及未來支援的 Native）之間重複使用程式碼。在多平台專案中，您有三種模組：</p><ul><li><em>common</em> 模組包含不特定於任何平台的程式碼，以及不具平台相關 API 實作的宣告。</li><li><em>platform</em> 模組包含 common 模組中特定平台的平台相關宣告實作，以及其他平台相關程式碼。</li><li>一般模組則針對特定平台，它可以是平台模組的依賴項，或依賴於平台模組。</li></ul><p>當您為特定平台編譯多平台專案時，將會生成 common 和平台特定部分的程式碼。</p><p>多平台專案支援的一個關鍵功能是能夠透過 <em>expected</em> 和 <em>actual</em> 宣告來表達 common 程式碼對平台特定部分的依賴性。<em>expected</em> 宣告指定了一個 API（類別、介面、註解、頂層宣告等）。<em>actual</em> 宣告則是該 API 的平台相關實作，或是指向外部函式庫中該 API 現有實作的類型別名。以下是一個範例：</p><p>在 common 程式碼中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// expected platform-specific API:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(world: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // usage of the expected API:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(greeting)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(spec: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 JVM 平台程式碼中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(world: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, on the JVM platform!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// using existing platform-specific implementation:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.net.URL</span></span></code></pre></div><p>請參閱 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">多平台程式設計文件</a> 以了解更多詳細資訊和建立多平台專案的步驟。</p><h2 id="其他語言功能" tabindex="-1">其他語言功能 <a class="header-anchor" href="#其他語言功能" aria-label="Permalink to &quot;其他語言功能&quot;">​</a></h2><h3 id="註解中的陣列字面值" tabindex="-1">註解中的陣列字面值 <a class="header-anchor" href="#註解中的陣列字面值" aria-label="Permalink to &quot;註解中的陣列字面值&quot;">​</a></h3><p>從 Kotlin 1.2 開始，註解的陣列引數可以使用新的陣列字面值語法傳遞，而不是使用 <code>arrayOf</code> 函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@CacheConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cacheNames </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;books&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BookRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>陣列字面值語法僅限用於註解引數。</p><h3 id="lateinit-頂層屬性和局部變數" tabindex="-1"><code>lateinit</code> 頂層屬性和局部變數 <a class="header-anchor" href="#lateinit-頂層屬性和局部變數" aria-label="Permalink to &quot;\`lateinit\` 頂層屬性和局部變數&quot;">​</a></h3><p><code>lateinit</code> 修飾符現在可以用於頂層屬性和局部變數。後者可用於，例如，當作為建構函式引數傳遞給一個物件的 lambda 引用了必須稍後定義的另一個物件時：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // A cycle of three nodes:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    lateinit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> third: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { third })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { second })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    third </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { first })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nodes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(first) { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Values in the cycle: \${nodes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> { it.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">() }}, ...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="檢查-lateinit-var-是否已初始化" tabindex="-1">檢查 <code>lateinit var</code> 是否已初始化 <a class="header-anchor" href="#檢查-lateinit-var-是否已初始化" aria-label="Permalink to &quot;檢查 \`lateinit var\` 是否已初始化&quot;">​</a></h3><p>您現在可以使用屬性引用上的 <code>isInitialized</code> 來檢查 <code>lateinit var</code> 是否已初始化：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    lateinit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lateinitVar: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initializationLogic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isInitialized before assignment: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lateinitVar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isInitialized)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        lateinitVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;value&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isInitialized after assignment: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lateinitVar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isInitialized)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initializationLogic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="具有預設函式參數的內聯函式" tabindex="-1">具有預設函式參數的內聯函式 <a class="header-anchor" href="#具有預設函式參數的內聯函式" aria-label="Permalink to &quot;具有預設函式參數的內聯函式&quot;">​</a></h3><p>內聯函式現在允許為其內聯的函式參數設定預設值：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Iterable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transform: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it) }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultStrings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customStrings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;defaultStrings = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$defaultStrings</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customStrings = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$customStrings</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="顯式轉換的資訊用於類型推斷" tabindex="-1">顯式轉換的資訊用於類型推斷 <a class="header-anchor" href="#顯式轉換的資訊用於類型推斷" aria-label="Permalink to &quot;顯式轉換的資訊用於類型推斷&quot;">​</a></h3><p>Kotlin 編譯器現在可以在類型推斷中使用類型轉換的資訊。如果您呼叫一個返回類型參數 <code>T</code> 的泛型方法，並將返回值轉換為特定類型 <code>Foo</code>，編譯器現在會理解該呼叫的 <code>T</code> 需要綁定到 <code>Foo</code> 類型。</p><p>這對於 Android 開發者尤其重要，因為編譯器現在可以正確分析 Android API level 26 中泛型 <code>findViewById</code> 的呼叫：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findViewById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(R.id.button) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Button</span></span></code></pre></div><h3 id="智慧型轉換改進" tabindex="-1">智慧型轉換改進 <a class="header-anchor" href="#智慧型轉換改進" aria-label="Permalink to &quot;智慧型轉換改進&quot;">​</a></h3><p>當變數從安全呼叫表達式賦值並檢查是否為 null 時，智慧型轉換現在也會應用於安全呼叫接收者：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> countFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstChar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? CharSequence)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (firstChar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstChar } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// s: Any is smart cast to CharSequence</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? Iterable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (firstItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstItem } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// s: Any is smart cast to Iterable&lt;*&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abacaba&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> countInString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> countFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;called on </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;$string\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$countInString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> countInList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> countFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;called on </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$countInList</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此外，現在也允許在 lambda 中對僅在 lambda 之前修改的局部變數進行智慧型轉換：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (flag) x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Yahoo!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.length) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x is smart cast to String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="支援-foo-作為-this-foo-的簡寫" tabindex="-1">支援 <code>::foo</code> 作為 <code>this::foo</code> 的簡寫 <a class="header-anchor" href="#支援-foo-作為-this-foo-的簡寫" aria-label="Permalink to &quot;支援 \`::foo\` 作為 \`this::foo\` 的簡寫&quot;">​</a></h3><p>現在可以省略顯式接收者來編寫綁定到 <code>this</code> 成員的可呼叫引用，即 <code>::foo</code> 而不是 <code>this::foo</code>。這也使得在 lambda 中引用外部接收者的成員時，可呼叫引用使用起來更方便。</p><h3 id="破壞性變更-try-區塊後的健全智慧型轉換" tabindex="-1">破壞性變更：<code>try</code> 區塊後的健全智慧型轉換 <a class="header-anchor" href="#破壞性變更-try-區塊後的健全智慧型轉換" aria-label="Permalink to &quot;破壞性變更：\`try\` 區塊後的健全智慧型轉換&quot;">​</a></h3><p>此前，Kotlin 會使用 <code>try</code> 區塊內部的賦值來進行區塊後的智慧型轉換，這可能會破壞類型安全和 null 安全，並導致執行時期失敗。此版本修復了這個問題，使智慧型轉換更為嚴格，但也因此破壞了一些依賴於此類智慧型轉換的程式碼。</p><p>要切換回舊的智慧型轉換行為，請將回溯旗標 <code>-Xlegacy-smart-cast-after-try</code> 作為編譯器引數傳遞。該旗標將在 Kotlin 1.3 中棄用。</p><h3 id="棄用-資料類別覆寫-copy" tabindex="-1">棄用：資料類別覆寫 <code>copy</code> <a class="header-anchor" href="#棄用-資料類別覆寫-copy" aria-label="Permalink to &quot;棄用：資料類別覆寫 \`copy\`&quot;">​</a></h3><p>當資料類別繼承自已經擁有相同簽章的 <code>copy</code> 函式的類型時，為該資料類別生成的 <code>copy</code> 實作會使用父類型的預設值，導致反直覺的行為；如果父類型中沒有預設參數，則可能在執行時期失敗。</p><p>在 Kotlin 1.2 中，導致 <code>copy</code> 衝突的繼承已棄用並發出警告，並將在 Kotlin 1.3 中成為錯誤。</p><h3 id="棄用-列舉條目中的巢狀類型" tabindex="-1">棄用：列舉條目中的巢狀類型 <a class="header-anchor" href="#棄用-列舉條目中的巢狀類型" aria-label="Permalink to &quot;棄用：列舉條目中的巢狀類型&quot;">​</a></h3><p>由於初始化邏輯中的問題，在列舉條目內部定義不是 <code>inner class</code> 的巢狀類型已被棄用。這在 Kotlin 1.2 中會發出警告，並將在 Kotlin 1.3 中成為錯誤。</p><h3 id="棄用-vararg-的單一具名引數" tabindex="-1">棄用：<code>vararg</code> 的單一具名引數 <a class="header-anchor" href="#棄用-vararg-的單一具名引數" aria-label="Permalink to &quot;棄用：\`vararg\` 的單一具名引數&quot;">​</a></h3><p>為了與註解中的陣列字面值保持一致，以具名形式 (<code>foo(items = i)</code>) 為 <code>vararg</code> 參數傳遞單一項目已棄用。請使用展開運算子及相應的陣列工廠函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>在此類情況下，存在一項優化可消除冗餘的陣列創建，從而防止性能下降。單引數形式在 Kotlin 1.2 中會產生警告，並將在 Kotlin 1.3 中移除。</p><h3 id="棄用-繼承-throwable-的泛型類別的內部類別" tabindex="-1">棄用：繼承 <code>Throwable</code> 的泛型類別的內部類別 <a class="header-anchor" href="#棄用-繼承-throwable-的泛型類別的內部類別" aria-label="Permalink to &quot;棄用：繼承 \`Throwable\` 的泛型類別的內部類別&quot;">​</a></h3><p>繼承自 <code>Throwable</code> 的泛型類型的內部類別可能會在拋出-捕獲情境中違反類型安全，因此已被棄用；這在 Kotlin 1.2 中會發出警告，並在 Kotlin 1.3 中成為錯誤。</p><h3 id="棄用-變異唯讀屬性的支援欄位" tabindex="-1">棄用：變異唯讀屬性的支援欄位 <a class="header-anchor" href="#棄用-變異唯讀屬性的支援欄位" aria-label="Permalink to &quot;棄用：變異唯讀屬性的支援欄位&quot;">​</a></h3><p>透過在自訂 getter 中賦值 <code>field = ...</code> 來變異唯讀屬性的支援欄位已棄用；這在 Kotlin 1.2 中會發出警告，並在 Kotlin 1.3 中成為錯誤。</p><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><h3 id="kotlin-標準函式庫-artifacts-和拆分套件" tabindex="-1">Kotlin 標準函式庫 Artifacts 和拆分套件 <a class="header-anchor" href="#kotlin-標準函式庫-artifacts-和拆分套件" aria-label="Permalink to &quot;Kotlin 標準函式庫 Artifacts 和拆分套件&quot;">​</a></h3><p>Kotlin 標準函式庫現在完全相容於 Java 9 模組系統，該系統禁止拆分套件（即多個 jar 檔案在同一個套件中宣告類別）。為了支援這一點，引入了新的 Artifacts <code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code>，它們取代了舊的 <code>kotlin-stdlib-jre7</code> 和 <code>kotlin-stdlib-jre8</code>。</p><p>從 Kotlin 的角度來看，新 Artifacts 中的宣告在相同的套件名稱下可見，但對於 Java 來說則具有不同的套件名稱。因此，切換到新的 Artifacts 不需要對您的原始碼進行任何更改。</p><p>為確保與新模組系統的相容性而進行的另一項變更是，從 <code>kotlin-reflect</code> 函式庫中移除了 <code>kotlin.reflect</code> 套件中已棄用的宣告。如果您正在使用它們，則需要切換到使用 <code>kotlin.reflect.full</code> 套件中的宣告，該套件自 Kotlin 1.1 起就已支援。</p><h3 id="windowed、chunked、zipwithnext" tabindex="-1"><code>windowed</code>、<code>chunked</code>、<code>zipWithNext</code> <a class="header-anchor" href="#windowed、chunked、zipwithnext" aria-label="Permalink to &quot;\`windowed\`、\`chunked\`、\`zipWithNext\`&quot;">​</a></h3><p><code>Iterable&lt;T&gt;</code>、<code>Sequence&lt;T&gt;</code> 和 <code>CharSequence</code> 的新擴展函式涵蓋了諸如緩衝或批次處理 (<code>chunked</code>)、滑動視窗和計算滑動平均值 (<code>windowed</code>)，以及處理連續項目對 (<code>zipWithNext</code>) 等使用情境：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chunkedIntoLists </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> points3d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { (x, y, z) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Triple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, z) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">windowed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slidingAverage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">windowed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">average</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pairwiseDifferences </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zipWithNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;items: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chunked into lists: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$chunkedIntoLists</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3D points: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$points3d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;windowed by 4: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$windowed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sliding average by 4: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$slidingAverage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pairwise differences: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$pairwiseDifferences</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="fill、replaceall、shuffle-shuffled" tabindex="-1"><code>fill</code>、<code>replaceAll</code>、<code>shuffle</code>/<code>shuffled</code> <a class="header-anchor" href="#fill、replaceall、shuffle-shuffled" aria-label="Permalink to &quot;\`fill\`、\`replaceAll\`、\`shuffle\`/\`shuffled\`&quot;">​</a></h3><p>為操作列表添加了一組擴展函式：用於 <code>MutableList</code> 的 <code>fill</code>、<code>replaceAll</code> 和 <code>shuffle</code>，以及用於唯讀 <code>List</code> 的 <code>shuffled</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toMutableList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shuffle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shuffled items: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Items doubled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Items filled with 5: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-stdlib-中的數學運算" tabindex="-1"><code>kotlin-stdlib</code> 中的數學運算 <a class="header-anchor" href="#kotlin-stdlib-中的數學運算" aria-label="Permalink to &quot;\`kotlin-stdlib\` 中的數學運算&quot;">​</a></h3><p>為回應長期以來的請求，Kotlin 1.2 新增了 <code>kotlin.math</code> API，用於 JVM 和 JS 共通的數學運算，並包含以下內容：</p><ul><li>常數：<code>PI</code> 和 <code>E</code></li><li>三角函式：<code>cos</code>、<code>sin</code>、<code>tan</code> 及其反函式：<code>acos</code>、<code>asin</code>、<code>atan</code>、<code>atan2</code></li><li>雙曲函式：<code>cosh</code>、<code>sinh</code>、<code>tanh</code> 及其反函式：<code>acosh</code>、<code>asinh</code>、<code>atanh</code></li><li>指數運算：<code>pow</code>（一個擴展函式）、<code>sqrt</code>、<code>hypot</code>、<code>exp</code>、<code>expm1</code></li><li>對數：<code>log</code>、<code>log2</code>、<code>log10</code>、<code>ln</code>、<code>ln1p</code></li><li>四捨五入： <ul><li><code>ceil</code>、<code>floor</code>、<code>truncate</code>、<code>round</code>（半捨入到偶數）函式</li><li><code>roundToInt</code>、<code>roundToLong</code>（半捨入到整數）擴展函式</li></ul></li><li>符號和絕對值： <ul><li><code>abs</code> 和 <code>sign</code> 函式</li><li><code>absoluteValue</code> 和 <code>sign</code> 擴展屬性</li><li><code>withSign</code> 擴展函式</li></ul></li><li>兩個值的 <code>max</code> 和 <code>min</code></li><li>二進位表示： <ul><li><code>ulp</code> 擴展屬性</li><li><code>nextUp</code>、<code>nextDown</code>、<code>nextTowards</code> 擴展函式</li><li><code>toBits</code>、<code>toRawBits</code>、<code>Double.fromBits</code>（這些位於 <code>kotlin</code> 套件中）</li></ul></li></ul><p>相同的一組函式（但不含常數）也可用於 <code>Float</code> 引數。</p><h3 id="biginteger-和-bigdecimal-的運算子和轉換" tabindex="-1"><code>BigInteger</code> 和 <code>BigDecimal</code> 的運算子和轉換 <a class="header-anchor" href="#biginteger-和-bigdecimal-的運算子和轉換" aria-label="Permalink to &quot;\`BigInteger\` 和 \`BigDecimal\` 的運算子和轉換&quot;">​</a></h3><p>Kotlin 1.2 引入了一組函式，用於操作 <code>BigInteger</code> 和 <code>BigDecimal</code> 以及從其他數值類型創建它們。這些函式包括：</p><ul><li><code>Int</code> 和 <code>Long</code> 的 <code>toBigInteger</code></li><li><code>Int</code>、<code>Long</code>、<code>Float</code>、<code>Double</code> 和 <code>BigInteger</code> 的 <code>toBigDecimal</code></li><li>算術和位元運算子函式： <ul><li>二元運算子 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code> 和中綴函式 <code>and</code>、<code>or</code>、<code>xor</code>、<code>shl</code>、<code>shr</code></li><li>一元運算子 <code>-</code>、<code>++</code>、<code>--</code>，以及函式 <code>inv</code></li></ul></li></ul><h3 id="浮點數到位元轉換" tabindex="-1">浮點數到位元轉換 <a class="header-anchor" href="#浮點數到位元轉換" aria-label="Permalink to &quot;浮點數到位元轉換&quot;">​</a></h3><p>新增了用於 <code>Double</code> 和 <code>Float</code> 與其位元表示之間相互轉換的函式：</p><ul><li><code>toBits</code> 和 <code>toRawBits</code>，<code>Double</code> 返回 <code>Long</code>，<code>Float</code> 返回 <code>Int</code></li><li><code>Double.fromBits</code> 和 <code>Float.fromBits</code>，用於從位元表示創建浮點數</li></ul><h3 id="regex-現在可序列化" tabindex="-1"><code>Regex</code> 現在可序列化 <a class="header-anchor" href="#regex-現在可序列化" aria-label="Permalink to &quot;\`Regex\` 現在可序列化&quot;">​</a></h3><p><code>kotlin.text.Regex</code> 類別現在已實作 <code>Serializable</code> 介面，可以在可序列化層次結構中使用。</p><h3 id="closeable-use-在可用時呼叫-throwable-addsuppressed" tabindex="-1"><code>Closeable.use</code> 在可用時呼叫 <code>Throwable.addSuppressed</code> <a class="header-anchor" href="#closeable-use-在可用時呼叫-throwable-addsuppressed" aria-label="Permalink to &quot;\`Closeable.use\` 在可用時呼叫 \`Throwable.addSuppressed\`&quot;">​</a></h3><p><code>Closeable.use</code> 函式在某些其他例外發生後關閉資源時拋出例外情況時，會呼叫 <code>Throwable.addSuppressed</code>。</p><p>要啟用此行為，您需要在依賴項中包含 <code>kotlin-stdlib-jdk7</code>。</p><h2 id="jvm-後端" tabindex="-1">JVM 後端 <a class="header-anchor" href="#jvm-後端" aria-label="Permalink to &quot;JVM 後端&quot;">​</a></h2><h3 id="建構函式呼叫正規化" tabindex="-1">建構函式呼叫正規化 <a class="header-anchor" href="#建構函式呼叫正規化" aria-label="Permalink to &quot;建構函式呼叫正規化&quot;">​</a></h3><p>從 1.0 版本以來，Kotlin 就支援具有複雜控制流程的表達式，例如 <code>try-catch</code> 表達式和內聯函式呼叫。根據 Java 虛擬機器規範，此類程式碼是有效的。不幸的是，當此類表達式出現在建構函式呼叫的引數中時，一些位元組碼處理工具無法很好地處理這些程式碼。</p><p>為了解決這些位元組碼處理工具用戶的問題，我們新增了一個命令列編譯器選項 (<code>-Xnormalize-constructor-calls=MODE</code>)，它指示編譯器為此類建構生成更像 Java 的位元組碼。這裡的 <code>MODE</code> 是以下之一：</p><ul><li><code>disable</code> (預設值) – 以 Kotlin 1.0 和 1.1 相同的方式生成位元組碼。</li><li><code>enable</code> – 為建構函式呼叫生成類似 Java 的位元組碼。這可能會改變類別載入和初始化的順序。</li><li><code>preserve-class-initialization</code> – 為建構函式呼叫生成類似 Java 的位元組碼，確保保留類別初始化順序。這可能會影響您應用程式的整體效能；僅當您在多個類別之間共享某些複雜狀態並在類別初始化時更新時才使用它。</li></ul><p>「手動」的解決方法是將帶有控制流程的子表達式的值儲存在變數中，而不是直接在呼叫引數內部進行評估。這與 <code>-Xnormalize-constructor-calls=enable</code> 類似。</p><h3 id="java-預設方法呼叫" tabindex="-1">Java 預設方法呼叫 <a class="header-anchor" href="#java-預設方法呼叫" aria-label="Permalink to &quot;Java 預設方法呼叫&quot;">​</a></h3><p>在 Kotlin 1.2 之前，介面成員在針對 JVM 1.6 時覆寫 Java 預設方法，會對 <code>super</code> 呼叫產生警告：<code>Super calls to Java default methods are deprecated in JVM target 1.6. Recompile with &#39;-jvm-target 1.8&#39;</code>。在 Kotlin 1.2 中，這將直接變成<strong>錯誤</strong>，因此任何此類程式碼都必須使用 JVM target 1.8 進行編譯。</p><h3 id="破壞性變更-平台類型-x-equals-null-行為的一致性" tabindex="-1">破壞性變更：平台類型 <code>x.equals(null)</code> 行為的一致性 <a class="header-anchor" href="#破壞性變更-平台類型-x-equals-null-行為的一致性" aria-label="Permalink to &quot;破壞性變更：平台類型 \`x.equals(null)\` 行為的一致性&quot;">​</a></h3><p>在映射到 Java 原始類型（<code>Int!</code>、<code>Boolean!</code>、<code>Short!</code>、<code>Long!</code>、<code>Float!</code>、<code>Double!</code>、<code>Char!</code>）的平台類型上呼叫 <code>x.equals(null)</code>，當 <code>x</code> 為 null 時錯誤地返回 <code>true</code>。從 Kotlin 1.2 開始，在平台類型的 null 值上呼叫 <code>x.equals(...)</code> 將會<strong>拋出 NPE</strong>（但 <code>x == ...</code> 不會）。</p><p>要返回到 1.2 之前的行為，請將旗標 <code>-Xno-exception-on-explicit-equals-for-boxed-null</code> 傳遞給編譯器。</p><h3 id="破壞性變更-修復透過內聯擴展接收者導致平台-null-逸出問題" tabindex="-1">破壞性變更：修復透過內聯擴展接收者導致平台 null 逸出問題 <a class="header-anchor" href="#破壞性變更-修復透過內聯擴展接收者導致平台-null-逸出問題" aria-label="Permalink to &quot;破壞性變更：修復透過內聯擴展接收者導致平台 null 逸出問題&quot;">​</a></h3><p>當在平台類型的 null 值上呼叫內聯擴展函式時，並未檢查接收者是否為 null，因此允許 null 值逸出到其他程式碼中。Kotlin 1.2 在呼叫點強制執行此檢查，如果接收者為 null 則拋出例外。</p><p>要切換到舊行為，請將回溯旗標 <code>-Xno-receiver-assertions</code> 傳遞給編譯器。</p><h2 id="javascript-後端" tabindex="-1">JavaScript 後端 <a class="header-anchor" href="#javascript-後端" aria-label="Permalink to &quot;JavaScript 後端&quot;">​</a></h2><h3 id="預設啟用-typedarrays-支援" tabindex="-1">預設啟用 TypedArrays 支援 <a class="header-anchor" href="#預設啟用-typedarrays-支援" aria-label="Permalink to &quot;預設啟用 TypedArrays 支援&quot;">​</a></h3><p>JS 類型化陣列支援（將 Kotlin 原始陣列，例如 <code>IntArray</code>、<code>DoubleArray</code>，轉換為 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays" target="_blank" rel="noreferrer">JavaScript 類型化陣列</a>），此功能此前為可選加入，現已預設啟用。</p><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="將警告視為錯誤" tabindex="-1">將警告視為錯誤 <a class="header-anchor" href="#將警告視為錯誤" aria-label="Permalink to &quot;將警告視為錯誤&quot;">​</a></h3><p>編譯器現在提供一個選項，可將所有警告視為錯誤。請在命令列使用 <code>-Werror</code>，或使用以下 Gradle 片段：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compileKotlin {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kotlinOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">allWarningsAsErrors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,102)]))}const g=i(h,[["render",t]]);export{o as __pageData,g as default};
