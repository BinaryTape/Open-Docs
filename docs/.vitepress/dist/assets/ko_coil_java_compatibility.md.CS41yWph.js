import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"자바 호환성","description":"","frontmatter":{},"headers":[],"relativePath":"ko/coil/java_compatibility.md","filePath":"ko/coil/java_compatibility.md","lastUpdated":1753369988000}'),n={name:"ko/coil/java_compatibility.md"};function l(h,s,p,k,r,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="자바-호환성" tabindex="-1">자바 호환성 <a class="header-anchor" href="#자바-호환성" aria-label="Permalink to &quot;자바 호환성&quot;">​</a></h1><p>코일의 API는 코틀린 우선(Kotlin-first)으로 설계되었습니다. 코일은 인라인 람다(inlined lambdas), 리시버 파라미터(receiver params), 기본 인자(default arguments), 확장 함수(extension functions)와 같이 자바에서 사용할 수 없는 코틀린 언어 기능을 활용합니다.</p><p>중요한 점은 <code>suspend</code> 함수는 자바에서 구현될 수 없다는 것입니다. 이는 사용자 지정 <a href="https://coil-kt.github.io/coil/api/coil-core/coil3.transform/-transformation" target="_blank" rel="noreferrer">Transformation</a>, <a href="https://coil-kt.github.io/coil/api/coil-core/coil3.size/-size-resolver" target="_blank" rel="noreferrer">Size Resolver</a>, <a href="./image_pipeline#fetchers">Fetcher</a>, <a href="./image_pipeline#decoders">Decoder</a>는 코틀린으로 구현되어야 <strong>합니다</strong>.</p><p>이러한 제약에도 불구하고, 코일 API의 대부분은 자바와 호환됩니다. 다음을 사용하여 싱글톤 <code>ImageLoader</code>를 얻을 수 있습니다:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImageLoader imageLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SingletonImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context);</span></span></code></pre></div><p><code>ImageRequest</code>를 큐에 넣는(enqueue) 구문은 자바와 코틀린에서 거의 동일합니다:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImageRequest request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImageViewTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(imageView))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span></code></pre></div><p>::: Note <code>ImageView.load</code>는 자바에서 사용할 수 없습니다. 대신 <code>ImageRequest.Builder</code> API를 사용하세요.</p><p>::: <code>suspend</code> 함수는 자바에서 쉽게 호출할 수 없습니다. 따라서 이미지를 동기적으로 얻으려면 다음과 같이 자바에서 호출할 수 있는 <code>ImageLoader.executeBlocking</code> 확장 함수를 사용해야 합니다:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImageRequest request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1920</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Drawable drawable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageLoaders.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(imageLoader, request).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asDrawable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.resources);</span></span></code></pre></div><p>::: Note <code>ImageLoaders.executeBlocking</code>은 <code>suspend</code>하는 대신 현재 스레드를 차단합니다. 메인 스레드에서 이것을 호출하지 마십시오. :::</p>`,11)]))}const g=i(n,[["render",l]]);export{o as __pageData,g as default};
