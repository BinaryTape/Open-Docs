import{_ as r,a as d,b as g,c,d as E,e as u,f as y,g as F,h as m,i as C,j as b,k as A,l as f,m as v,n as D,o as S,p as B}from"./chunks/android-iphone-password-error.w1wD0Z9I.js";import{_}from"./chunks/xcode-run-script-phase-1.BlwrlSQM.js";import{_ as O,a as w,b as I}from"./chunks/disable-sandboxing-in-xcode-project-settings.Hr8r5yJK.js";import{_ as x,C as n,c as P,o as U,j as i,G as l,ag as t,a as s,w as e}from"./chunks/framework.Bksy39di.js";const J=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/multiplatform-integrate-in-existing-app.md","filePath":"zh-Hant/kmp/multiplatform-integrate-in-existing-app.md","lastUpdated":1755516278000}'),q={name:"zh-Hant/kmp/multiplatform-integrate-in-existing-app.md"};function j(M,a,T,L,V,K){const p=n("secondary-label"),h=n("Links"),k=n("tldr"),o=n("shortcut");return U(),P("div",null,[a[14]||(a[14]=i("h1",{id:"讓你的-android-應用程式在-ios-上執行-–-教程",tabindex:"-1"},[s("讓你的 Android 應用程式在 iOS 上執行 – 教程 "),i("a",{class:"header-anchor",href:"#讓你的-android-應用程式在-ios-上執行-–-教程","aria-label":'Permalink to "讓你的 Android 應用程式在 iOS 上執行 – 教程"'},"​")],-1)),l(p,{ref:"IntelliJ IDEA"},null,512),l(p,{ref:"Android Studio"},null,512),l(k,null,{default:e(()=>[i("p",null,[a[1]||(a[1]=s("本教程使用 Android Studio，但你也可以在 IntelliJ IDEA 中跟隨操作。若 ")),l(h,{href:"/kmp/quickstart",summary:"undefined"},{default:e(()=>a[0]||(a[0]=[s("設定妥當")])),_:1}),a[2]||(a[2]=s("， 兩款 IDE 共享相同的核心功能和 Kotlin Multiplatform 支援。"))])]),_:1}),a[15]||(a[15]=t('<p>本教程展示如何讓現有的 Android 應用程式跨平台，使其既能在 Android 又能在 iOS 上執行。 你將能夠在同一個地方，同時為 Android 和 iOS 編寫程式碼。</p><p>本教程使用一個 <a href="https://github.com/Kotlin/kmp-integration-sample" target="_blank" rel="noreferrer">範例 Android 應用程式</a>，它只有一個畫面，用於輸入使用者名稱和密碼。這些憑證會被驗證並儲存到一個記憶體資料庫中。</p><p>為了讓你的應用程式在 iOS 和 Android 上都能執行， 你將首先透過將部分程式碼移至共用模組來使其跨平台。 之後，你將在 Android 應用程式中使用你的跨平台程式碼，然後在新的 iOS 應用程式中使用相同的程式碼。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果你不熟悉 Kotlin Multiplatform，請先學習如何<a href="./quickstart">從頭開始建立一個跨平台應用程式</a>。</p></div><h2 id="準備開發環境" tabindex="-1">準備開發環境 <a class="header-anchor" href="#準備開發環境" aria-label="Permalink to &quot;準備開發環境&quot;">​</a></h2><ol><li><p>在快速入門指南中，完成<a href="./quickstart#set-up-the-environment">設定 Kotlin Multiplatform 開發環境</a>的說明。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>你需要一台搭載 macOS 的 Mac 來完成本教程中的某些步驟，例如執行 iOS 應用程式。 這是由於 Apple 的要求。</p></div></li><li><p>在 Android Studio 中，從版本控制建立一個新專案：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/kmp-integration-sample</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>master</code> 分支包含專案的初始狀態 – 一個簡單的 Android 應用程式。 若要查看包含 iOS 應用程式和共用模組的最終狀態，請切換到 <code>final</code> 分支。</p></div></li><li><p>切換到 <strong>Project</strong> 視圖：</p><p><img src="'+E+'" alt="Project view" width="513"></p></li></ol><h2 id="讓你的程式碼跨平台" tabindex="-1">讓你的程式碼跨平台 <a class="header-anchor" href="#讓你的程式碼跨平台" aria-label="Permalink to &quot;讓你的程式碼跨平台&quot;">​</a></h2><p>為了讓你的程式碼跨平台，你將遵循以下步驟：</p><ol><li><a href="#decide-what-code-to-make-cross-platform">決定要讓哪些程式碼跨平台</a></li><li><a href="#create-a-shared-module-for-cross-platform-code">為跨平台程式碼建立一個共用模組</a></li><li><a href="#add-code-to-the-shared-module">測試程式碼共享</a></li><li><a href="#add-a-dependency-on-the-shared-module-to-your-android-application">在你的 Android 應用程式中新增對共用模組的相依性</a></li><li><a href="#make-the-business-logic-cross-platform">使業務邏輯跨平台</a></li><li><a href="#run-your-cross-platform-application-on-android">在 Android 上執行你的跨平台應用程式</a></li></ol><h3 id="決定要讓哪些程式碼跨平台" tabindex="-1">決定要讓哪些程式碼跨平台 <a class="header-anchor" href="#決定要讓哪些程式碼跨平台" aria-label="Permalink to &quot;決定要讓哪些程式碼跨平台&quot;">​</a></h3><p>決定你的 Android 應用程式的哪些程式碼更適合與 iOS 共享，哪些適合保持原生。一個簡單的規則是：盡可能多地共享你想重用的程式碼。業務邏輯對於 Android 和 iOS 通常是相同的，因此它是重用的絕佳選擇。</p><p>在你的範例 Android 應用程式中，業務邏輯儲存在 <code>com.jetbrains.simplelogin.androidapp.data</code> 套件中。你未來的 iOS 應用程式將使用相同的邏輯，因此你也應該使其跨平台。</p><p><img src="'+u+'" alt="Business logic to share" width="366"></p><h3 id="為跨平台程式碼建立一個共用模組" tabindex="-1">為跨平台程式碼建立一個共用模組 <a class="header-anchor" href="#為跨平台程式碼建立一個共用模組" aria-label="Permalink to &quot;為跨平台程式碼建立一個共用模組&quot;">​</a></h3><p>用於 iOS 和 Android 的跨平台程式碼將儲存在共用模組中。 Android Studio 和 IntelliJ IDEA 都提供了用於為 Kotlin Multiplatform 建立共用模組的精靈。</p><p>建立一個共用模組以連接到現有的 Android 應用程式和你未來的 iOS 應用程式：</p><ol><li><p>在 Android Studio 中，從主選單中選擇 <strong>File</strong> | <strong>New</strong> | <strong>New Module</strong>。</p></li><li><p>在模板列表中，選擇 <strong>Kotlin Multiplatform Shared Module</strong>。 將函式庫名稱保留為 <code>shared</code> 並輸入套件名稱：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>com.jetbrains.simplelogin.shared</span></span></code></pre></div></li><li><p>點擊 <strong>Finish</strong>。精靈會建立一個共用模組，相應地更改建置腳本，並啟動 Gradle 同步。</p></li><li><p>設定完成後，你將在 <code>shared</code> 目錄中看到以下檔案結構：</p><p><img src="'+y+`" alt="Final file structure inside the shared directory" width="341"></p></li><li><p>確保 <code>shared/build.gradle.kts</code> 檔案中的 <code>kotlin.androidLibrary.minSdk</code> 屬性與 <code>app/build.gradle.kts</code> 檔案中相同屬性的值相符。</p></li></ol><h3 id="將程式碼新增到共用模組" tabindex="-1">將程式碼新增到共用模組 <a class="header-anchor" href="#將程式碼新增到共用模組" aria-label="Permalink to &quot;將程式碼新增到共用模組&quot;">​</a></h3><p>現在你有了共用模組， 將一些通用程式碼新增到 <code>commonMain/kotlin/com.jetbrains.simplelogin.shared</code> 目錄中以供共享：</p><ol><li><p>建立一個新的 <code>Greeting</code> 類別，包含以下程式碼：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, \${platform.name}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>將已建立檔案中的程式碼替換為以下內容：</p><ul><li><p>在 <code>commonMain/Platform.kt</code> 中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div></li><li><p>在 <code>androidMain/Platform.android.kt</code> 中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android.os.Build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Android \${Build.VERSION.SDK_INT}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li><li><p>在 <code>iosMain/Platform.ios.kt</code> 中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.UIKit.UIDevice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.systemVersion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ul></li></ol><p>如果你想更好地理解結果專案的佈局， 請參閱 <a href="./multiplatform-discover-project">Kotlin Multiplatform 專案結構的基礎知識</a>。</p><h3 id="在你的-android-應用程式中新增對共用模組的相依性" tabindex="-1">在你的 Android 應用程式中新增對共用模組的相依性 <a class="header-anchor" href="#在你的-android-應用程式中新增對共用模組的相依性" aria-label="Permalink to &quot;在你的 Android 應用程式中新增對共用模組的相依性&quot;">​</a></h3><p>要在你的 Android 應用程式中使用跨平台程式碼，請將共用模組連接到它，將業務邏輯程式碼移動到那裡，並使此程式碼跨平台。</p><ol><li><p>將共用模組的相依性新增到 <code>app/build.gradle.kts</code> 檔案中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>根據 IDE 的建議或使用 <strong>File</strong> | <strong>Sync Project with Gradle Files</strong> 選單項目同步 Gradle 檔案。</p></li><li><p>在 <code>app/src/main/java/</code> 目錄中，開啟 <code>com.jetbrains.simplelogin.androidapp.ui.login</code> 套件中的 <code>LoginActivity.kt</code> 檔案。</p></li><li><p>為了確保共用模組已成功連接到你的應用程式，透過將 <code>Log.i()</code> 呼叫新增到 <code>onCreate()</code> 方法中，將 <code>greet()</code> 函數結果傾印到日誌：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Login Activity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from shared module: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>遵循 IDE 的建議來匯入缺少的類別。</p></li><li><p>在工具列中，點擊 <code>app</code> 下拉式選單，然後點擊偵錯圖示：</p><p><img src="`+F+'" alt="App from list to debug" width="300"></p></li><li><p>在 <strong>Logcat</strong> 工具視窗中，搜尋日誌中的「Hello」，你將找到來自共用模組的問候語：</p><p><img src="'+m+'" alt="Greeting from the shared module" width="700"></p></li></ol><h3 id="使業務邏輯跨平台" tabindex="-1">使業務邏輯跨平台 <a class="header-anchor" href="#使業務邏輯跨平台" aria-label="Permalink to &quot;使業務邏輯跨平台&quot;">​</a></h3><p>你現在可以將業務邏輯程式碼提取到 Kotlin Multiplatform 共用模組中，並使其與平台無關。 這對於在 Android 和 iOS 上重用程式碼是必要的。</p>',26)),a[16]||(a[16]=i("ol",null,[i("li",null,[i("p",null,[s("將 "),i("code",null,"com.jetbrains.simplelogin.androidapp.data"),s(" 的業務邏輯程式碼從 "),i("code",null,"app"),s(" 目錄移動到 "),i("code",null,"shared/src/commonMain"),s(" 目錄中的 "),i("code",null,"com.jetbrains.simplelogin.shared"),s(" 套件。")]),i("p",null,[i("img",{src:r,alt:"Drag and drop the package with the business logic code",width:"300"})])]),i("li",null,[i("p",null,"當 Android Studio 詢問你想做什麼時，選擇移動套件，然後批准重構。"),i("p",null,[i("img",{src:d,alt:"Refactor the business logic package",width:"300"})])]),i("li",null,[i("p",null,[s("忽略所有關於平台相關程式碼的警告，然後點擊 "),i("strong",null,"Refactor Anyway"),s("。")]),i("p",null,[i("img",{src:g,alt:"Warnings about platform-dependent code",width:"450"})])]),i("li",null,[i("p",null,[s("透過使用跨平台 Kotlin 程式碼替換 Android 特定程式碼或使用"),i("a",{href:"./multiplatform-connect-to-apis"},"預期與實際宣告"),s("連接到 Android 特定 API 來移除 Android 特定程式碼。詳細資訊請參閱以下部分：")]),i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"使用跨平台程式碼替換-android-特定程式碼",tabindex:"-1"},[s("使用跨平台程式碼替換 Android 特定程式碼 "),i("a",{class:"header-anchor",href:"#使用跨平台程式碼替換-android-特定程式碼","aria-label":'Permalink to "使用跨平台程式碼替換 Android 特定程式碼 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")]),i("p",null,[s("為了讓你的程式碼在 Android 和 iOS 上都能良好執行，請盡可能將移動後的 "),i("code",null,"data"),s(" 目錄中的所有 JVM 相依性替換為 Kotlin 相依性。")]),i("ol",null,[i("li",null,[i("p",null,[s("在 "),i("code",null,"LoginDataValidator"),s(" 類別中，用符合電子郵件驗證模式的 Kotlin 正則表達式替換來自 "),i("code",null,"android.utils"),s(" 套件的 "),i("code",null,"Patterns"),s(" 類別：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// Before")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"private"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," fun"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," isEmailValid"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(email: "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Patterns.EMAIL_ADDRESS."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"matcher"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(email)."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"matches"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")])])])]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// After")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"private"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," fun"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," isEmailValid"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(email: "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," emailRegex."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"matches"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(email)")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"companion"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," object"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    private"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," emailRegex "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        ("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"[a-zA-Z0-9'),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"+"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"_"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"%"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"-"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'+]{1,256}"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "'),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'@"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "[a-zA-Z0-9][a-zA-Z0-9'),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'-]{0,64}"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "("'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "'),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'."'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "[a-zA-Z0-9][a-zA-Z0-9'),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'-]{0,25}"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            ")+"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"toRegex"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])])]),i("li",null,[i("p",null,[s("移除 "),i("code",null,"Patterns"),s(" 類別的匯入指令：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," android.util.Patterns")])])])])]),i("li",null,[i("p",null,[s("在 "),i("code",null,"LoginDataSource"),s(" 類別中，將 "),i("code",null,"login()"),s(" 函數中的 "),i("code",null,"IOException"),s(" 替換為 "),i("code",null,"RuntimeException"),s("。 "),i("code",null,"IOException"),s(" 在 Kotlin/JVM 中不可用。")]),i("pre",null,[i("code",null,'```kotlin\n// Before\nreturn Result.Error(IOException("Error logging in", e))\n```\n\n```kotlin\n// After\nreturn Result.Error(RuntimeException("Error logging in", e))\n```\n')])]),i("li",null,[i("p",null,[s("同時移除 "),i("code",null,"IOException"),s(" 的匯入指令：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," java.io.IOException")])])])])])]),i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"從跨平台程式碼連接到平台特定-api",tabindex:"-1"},[s("從跨平台程式碼連接到平台特定 API "),i("a",{class:"header-anchor",href:"#從跨平台程式碼連接到平台特定-api","aria-label":'Permalink to "從跨平台程式碼連接到平台特定 API {initial-collapse-state="collapsed" collapsible="true"}"'},"​")]),i("p",null,[s("在 "),i("code",null,"LoginDataSource"),s(" 類別中，"),i("code",null,"fakeUser"),s(" 的全局唯一識別碼 (UUID) 是使用 "),i("code",null,"java.util.UUID"),s(" 類別生成的，該類別在 iOS 上不可用。")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," fakeUser "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," LoggedInUser"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(java.util.UUID."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"toString"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(), "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"Jane Doe"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])]),i("p",null,[s("儘管 Kotlin 標準函式庫提供了"),i("a",{href:"https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.uuid/-uuid/",target:"_blank",rel:"noreferrer"},"用於 UUID 生成的實驗性類別"),s("， 但為了練習，讓我們為此案例使用平台特定功能。")]),i("p",null,[s("在共用程式碼中為 "),i("code",null,"randomUUID()"),s(" 函數提供 "),i("code",null,"expect"),s(" 宣告，並為每個平台（Android 和 iOS）在對應的原始碼集中提供其 "),i("code",null,"actual"),s(" 實作。 你可以了解更多關於"),i("a",{href:"./multiplatform-connect-to-apis"},"連接到平台特定 API"),s(" 的資訊。")]),i("ol",null,[i("li",null,[i("p",null,[s("將 "),i("code",null,"login()"),s(" 函數中的 "),i("code",null,"java.util.UUID.randomUUID()"),s(" 呼叫更改為 "),i("code",null,"randomUUID()"),s(" 呼叫，你將為每個平台實作此函數：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," fakeUser "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," LoggedInUser"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(), "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"Jane Doe"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])])]),i("li",null,[i("p",null,[s("在 "),i("code",null,"shared/src/commonMain"),s(" 目錄的 "),i("code",null,"com.jetbrains.simplelogin.shared"),s(" 套件中建立 "),i("code",null,"Utils.kt"),s(" 檔案並提供 "),i("code",null,"expect"),s(" 宣告：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"package"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," com.jetbrains.simplelogin.shared")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"expect "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(): "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String")])])])])]),i("li",null,[i("p",null,[s("在 "),i("code",null,"shared/src/androidMain"),s(" 目錄的 "),i("code",null,"com.jetbrains.simplelogin.shared"),s(" 套件中建立 "),i("code",null,"Utils.android.kt"),s(" 檔案並提供 Android 中 "),i("code",null,"randomUUID()"),s(" 的 "),i("code",null,"actual"),s(" 實作：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"package"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," com.jetbrains.simplelogin.shared")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," java.util."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"actual "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," UUID."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"toString"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")])])])])]),i("li",null,[i("p",null,[s("在 "),i("code",null,"shared/src/iosMain"),s(" 目錄的 "),i("code",null,"com.jetbrains.simplelogin.shared"),s(" 套件中建立 "),i("code",null,"Utils.ios.kt"),s(" 檔案並提供 iOS 中 "),i("code",null,"randomUUID()"),s(" 的 "),i("code",null,"actual"),s(" 實作：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"package"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," com.jetbrains.simplelogin.shared")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," platform.Foundation.NSUUID")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"actual "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(): "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," NSUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"UUIDString"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")])])])])]),i("li",null,[i("p",null,[s("在 "),i("code",null,"shared/src/commonMain"),s(" 目錄的 "),i("code",null,"LoginDataSource.kt"),s(" 檔案中匯入 "),i("code",null,"randomUUID"),s(" 函數：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," com.jetbrains.simplelogin.shared.randomUUID")])])])])])])])],-1)),a[17]||(a[17]=t('<p>現在，Kotlin 將為 Android 和 iOS 使用平台特定的 UUID 實作。</p><h3 id="在-android-上執行你的跨平台應用程式" tabindex="-1">在 Android 上執行你的跨平台應用程式 <a class="header-anchor" href="#在-android-上執行你的跨平台應用程式" aria-label="Permalink to &quot;在 Android 上執行你的跨平台應用程式&quot;">​</a></h3><p>執行你的 Android 跨平台應用程式，確保它像以前一樣正常運作。</p><p><img src="'+C+'" alt="Android login application" width="300"></p><h2 id="讓你的跨平台應用程式在-ios-上執行" tabindex="-1">讓你的跨平台應用程式在 iOS 上執行 <a class="header-anchor" href="#讓你的跨平台應用程式在-ios-上執行" aria-label="Permalink to &quot;讓你的跨平台應用程式在 iOS 上執行&quot;">​</a></h2><p>一旦你將 Android 應用程式設定為跨平台，你就可以建立一個 iOS 應用程式並在其中重用共用業務邏輯。</p><ol><li><a href="#create-an-ios-project-in-xcode">在 Xcode 中建立 iOS 專案</a></li><li><a href="#configure-the-ios-project-to-use-a-kmp-framework">設定 iOS 專案以使用 KMP 框架</a></li><li><a href="#set-up-an-ios-run-configuration-in-android-studio">在 Android Studio 中設定 iOS 執行設定</a></li><li><a href="#use-the-shared-module-in-the-ios-project">在 iOS 專案中使用共用模組</a></li></ol><h3 id="在-xcode-中建立-ios-專案" tabindex="-1">在 Xcode 中建立 iOS 專案 <a class="header-anchor" href="#在-xcode-中建立-ios-專案" aria-label="Permalink to &quot;在 Xcode 中建立 iOS 專案&quot;">​</a></h3><ol><li><p>在 Xcode 中，點擊 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>。</p></li><li><p>選擇 iOS 應用程式的模板，然後點擊 <strong>Next</strong>。</p><p><img src="'+b+'" alt="iOS project template" width="700"></p></li><li><p>將產品名稱指定為「simpleLoginIOS」，然後點擊 <strong>Next</strong>。</p><p><img src="'+A+'" alt="iOS project settings" width="700"></p></li><li><p>將專案位置選擇為儲存你的跨平台應用程式的目錄，例如 <code>kmp-integration-sample</code>。</p></li></ol><p>在 Android Studio 中，你將獲得以下結構：</p><p><img src="'+f+'" alt="iOS project in Android Studio" width="194"></p><p>你可以將 <code>simpleLoginIOS</code> 目錄重新命名為 <code>iosApp</code>，以與你的跨平台專案的其他頂層目錄保持一致。 要做到這一點，請關閉 Xcode，然後將 <code>simpleLoginIOS</code> 目錄重新命名為 <code>iosApp</code>。 如果在 Xcode 開啟的情況下重新命名資料夾，你會收到警告並可能損壞你的專案。</p><p><img src="'+v+'" alt="Renamed iOS project directory in Android Studio" width="194"></p><h3 id="設定-ios-專案以使用-kmp-框架" tabindex="-1">設定 iOS 專案以使用 KMP 框架 <a class="header-anchor" href="#設定-ios-專案以使用-kmp-框架" aria-label="Permalink to &quot;設定 iOS 專案以使用 KMP 框架&quot;">​</a></h3><p>你可以直接設定 iOS 應用程式和 Kotlin Multiplatform 建置的框架之間的整合。 此方法的替代方案在 <a href="./multiplatform-ios-integration-overview">iOS 整合方法概覽</a>中介紹，但它們超出了本教程的範圍。</p><ol><li><p>在 Android Studio 中，右鍵點擊 <code>iosApp/simpleLoginIOS.xcodeproj</code> 目錄並選擇 <strong>Open In</strong> | <strong>Open In Associated Application</strong> 以在 Xcode 中開啟 iOS 專案。</p></li><li><p>在 Xcode 中，透過雙擊 <strong>Project</strong> 導航器中的專案名稱來開啟 iOS 專案設定。</p></li><li><p>在左側的 <strong>Targets</strong> 部分，選擇 <strong>simpleLoginIOS</strong>，然後點擊 <strong>Build Phases</strong> 標籤。</p></li><li><p>點擊 <strong>+</strong> 圖示並選擇 <strong>New Run Script Phase</strong>。</p><p><img src="'+_+`" alt="Add a run script phase" width="700"></p></li><li><p>將以下腳本貼到執行腳本欄位中：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd &quot;$SRCROOT/..&quot;</span></span>
<span class="line"><span>./gradlew :shared:embedAndSignAppleFrameworkForXcode</span></span></code></pre></div><p><img src="`+O+'" alt="Add the script" width="700"></p></li><li><p>停用 <strong>Based on dependency analysis</strong> 選項。</p><p>這確保了 Xcode 在每次建置期間都執行腳本，並且不會每次都警告缺少輸出相依性。</p></li><li><p>將 <strong>Run Script</strong> 階段向上移動，將其放置在 <strong>Compile Sources</strong> 階段之前：</p><p><img src="'+w+'" alt="Move the Run Script phase" width="700"></p></li><li><p>在 <strong>Build Settings</strong> 標籤上，在 <strong>Build Options</strong> 下停用 <strong>User Script Sandboxing</strong> 選項：</p><p><img src="'+I+'" alt="User Script Sandboxing" width="700"></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果你有不同於預設 <code>Debug</code> 或 <code>Release</code> 的自訂建置設定，在 <strong>Build Settings</strong> 標籤上，在 <strong>User-Defined</strong> 下新增 <code>KOTLIN_FRAMEWORK_BUILD_TYPE</code> 設定並將其設定為 <code>Debug</code> 或 <code>Release</code>。</p></div></li><li><p>在 Xcode 中建置專案（主選單中的 <strong>Product</strong> | <strong>Build</strong>）。 如果一切設定正確，專案應該會成功建置 （你可以安全地忽略「build phase will be run during every build」警告）。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果你在停用 <strong>User Script Sandboxing</strong> 選項之前建置了專案，建置可能會失敗： Gradle 精靈程序可能被沙箱化，需要重新啟動。 在再次建置專案之前，透過在專案目錄（在我們的範例中是 <code>kmp-integration-sample</code>）中執行此指令來停止它： <code>shell ./gradlew --stop </code></p></div></li></ol><h3 id="在-android-studio-中設定-ios-執行設定" tabindex="-1">在 Android Studio 中設定 iOS 執行設定 <a class="header-anchor" href="#在-android-studio-中設定-ios-執行設定" aria-label="Permalink to &quot;在 Android Studio 中設定 iOS 執行設定&quot;">​</a></h3><p>一旦你確保 Xcode 設定正確，返回 Android Studio：</p><ol><li><p>在主選單中選擇 <strong>File | Sync Project with Gradle Files</strong>。Android Studio 會自動生成一個名為 <strong>simpleLoginIOS</strong> 的執行設定。</p><p>Android Studio 會自動生成一個名為 <strong>simpleLoginIOS</strong> 的執行設定，並將 <code>iosApp</code> 目錄標記為連結的 Xcode 專案。</p></li><li><p>在執行設定列表中，選擇 <strong>simpleLoginIOS</strong>。 選擇一個 iOS 模擬器，然後點擊 <strong>Run</strong> 檢查 iOS 應用程式是否正常執行。</p><p><img src="'+D+`" alt="The iOS run configuration in the list of run configurations" width="400"></p></li></ol><h3 id="在-ios-專案中使用共用模組" tabindex="-1">在 iOS 專案中使用共用模組 <a class="header-anchor" href="#在-ios-專案中使用共用模組" aria-label="Permalink to &quot;在 iOS 專案中使用共用模組&quot;">​</a></h3><p><code>shared</code> 模組的 <code>build.gradle.kts</code> 檔案為每個 iOS 目標定義了 <code>binaries.framework.baseName</code> 屬性為 <code>sharedKit</code>。 這是 Kotlin Multiplatform 為 iOS 應用程式建置並供其使用的框架名稱。</p><p>為了測試整合，在 Swift 程式碼中新增對通用程式碼的呼叫：</p><ol><li><p>在 Android Studio 中，開啟 <code>iosApp/simpleloginIOS/ContentView.swift</code> 檔案並匯入框架：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sharedKit</span></span></code></pre></div></li><li><p>為了檢查是否正確連接，將 <code>ContentView</code> 結構更改為使用你的跨平台應用程式共用模組中的 <code>greet()</code> 函數：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>使用 Android Studio iOS 執行設定執行應用程式以查看結果：</p><p><img src="`+S+`" alt="Greeting from the shared module" width="300"></p></li><li><p>再次更新 <code>ContentView.swift</code> 檔案中的程式碼，以使用共用模組中的業務邏輯來呈現應用程式 UI：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div></li><li><p>在 <code>simpleLoginIOSApp.swift</code> 檔案中，匯入 <code>sharedKit</code> 模組並為 <code>ContentView()</code> 函數指定引數：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwiftUI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sharedKit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleLoginIOSApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scene {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        WindowGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loginRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LoginRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LoginDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loginValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LoginDataValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>再次執行 iOS 執行設定，查看 iOS 應用程式顯示登入表單。</p></li><li><p>輸入「Jane」作為使用者名稱，輸入「password」作為密碼。</p></li><li><p>由於你<a href="#configure-the-ios-project-to-use-a-kmp-framework">之前已經設定了整合</a>， iOS 應用程式會使用通用程式碼驗證輸入：</p><p><img src="`+B+'" alt="Simple login application" width="300"></p></li></ol><h2 id="享受成果-–-只需更新一次邏輯" tabindex="-1">享受成果 – 只需更新一次邏輯 <a class="header-anchor" href="#享受成果-–-只需更新一次邏輯" aria-label="Permalink to &quot;享受成果 – 只需更新一次邏輯&quot;">​</a></h2><p>現在你的應用程式是跨平台的了。你可以在 <code>shared</code> 模組中更新業務邏輯，並在 Android 和 iOS 上都看到結果。</p>',25)),i("ol",null,[i("li",null,[i("p",null,[a[4]||(a[4]=s("更改使用者密碼的驗證邏輯：「password」不應該是一個有效選項。 為此，請更新 ")),a[5]||(a[5]=i("code",null,"LoginDataValidator",-1)),a[6]||(a[6]=s(" 類別的 ")),a[7]||(a[7]=i("code",null,"checkPassword()",-1)),a[8]||(a[8]=s(" 函數 （要快速找到它，按兩次 ")),l(o,null,{default:e(()=>a[3]||(a[3]=[s("Shift")])),_:1}),a[9]||(a[9]=s("，貼上類別名稱，然後切換到 ")),a[10]||(a[10]=i("strong",null,"Classes",-1)),a[11]||(a[11]=s(" 標籤）："))]),a[12]||(a[12]=t(`<div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared.data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoginDataValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            password.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Password must be &gt;5 characters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            password.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lowercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;password&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Password shouldn&#39;t be </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">password</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.Success</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,1))]),a[13]||(a[13]=i("li",null,[i("p",null,"從 Android Studio 執行 iOS 和 Android 應用程式以查看更改："),i("p",null,[i("img",{src:c,alt:"Android and iOS applications password error",width:"600"})])],-1))]),a[18]||(a[18]=t('<p>你可以查看<a href="https://github.com/Kotlin/kmp-integration-sample/tree/final" target="_blank" rel="noreferrer">本教程的最終程式碼</a>。</p><h2 id="還能共享什麼" tabindex="-1">還能共享什麼？ <a class="header-anchor" href="#還能共享什麼" aria-label="Permalink to &quot;還能共享什麼？&quot;">​</a></h2><p>你已經共享了應用程式的業務邏輯，但你也可以決定共享應用程式的其他層。 例如，<code>ViewModel</code> 類別的程式碼對於 <a href="https://github.com/Kotlin/kmp-integration-sample/blob/final/app/src/main/java/com/jetbrains/simplelogin/androidapp/ui/login/LoginViewModel.kt" target="_blank" rel="noreferrer">Android</a> 和 <a href="https://github.com/Kotlin/kmp-integration-sample/blob/final/iosApp/SimpleLoginIOS/ContentView.swift#L84" target="_blank" rel="noreferrer">iOS 應用程式</a>幾乎相同， 如果你的行動應用程式應該具有相同的呈現層，你可以共享它。</p><h2 id="接下來是什麼" tabindex="-1">接下來是什麼？ <a class="header-anchor" href="#接下來是什麼" aria-label="Permalink to &quot;接下來是什麼？&quot;">​</a></h2><p>一旦你將 Android 應用程式設定為跨平台，你就可以繼續：</p><ul><li><a href="./multiplatform-add-dependencies">新增對多平台函式庫的相依性</a></li><li><a href="./multiplatform-android-dependencies">新增 Android 相依性</a></li><li><a href="./multiplatform-ios-dependencies">新增 iOS 相依性</a></li></ul><p>你可以使用 Compose Multiplatform 建立跨所有平台的統一 UI：</p><ul><li><a href="./compose-multiplatform-and-jetpack-compose">了解 Compose Multiplatform 和 Jetpack Compose</a></li><li><a href="./compose-multiplatform-resources">探索 Compose Multiplatform 的可用資源</a></li><li><a href="./compose-multiplatform-create-first-app">建立具有共享邏輯和 UI 的應用程式</a></li></ul><p>你也可以查看社群資源：</p><ul><li><a href="https://www.youtube.com/watch?v=vb-Pt8SdfEE&amp;t=1s" target="_blank" rel="noreferrer">影片：如何將 Android 專案遷移到 Kotlin Multiplatform</a></li><li><a href="https://www.youtube.com/watch?v=X6ckI1JWjqo" target="_blank" rel="noreferrer">影片：3 種方法讓你的 Kotlin JVM 程式碼為 Kotlin Multiplatform 做好準備</a></li></ul>',10))])}const z=x(q,[["render",j]]);export{J as __pageData,z as default};
