import{_ as g,C as n,c,o as m,G as t,j as i,ag as y,w as e,a}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-mustache.md","filePath":"ko/ktor/server-mustache.md","lastUpdated":1755457140000}'),v={name:"ko/ktor/server-mustache.md"};function F(b,s,f,C,_,M){const k=n("TopicTitle"),o=n("show-structure"),d=n("primary-label"),r=n("Links"),u=n("tldr"),l=n("code-block"),p=n("TabItem"),h=n("Tabs"),E=n("list");return m(),c("div",null,[t(k,{labelRef:"server-plugin",title:"머스테치"}),t(o,{for:"chapter",depth:"2"}),t(d,{ref:"server-plugin"},null,512),t(u,null,{default:e(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"필수 의존성"),a(": "),i("code",null,"io.ktor:ktor-server-mustache")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"코드 예시"),a(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/mustache"}," mustache ")],-1)),i("p",null,[i("b",null,[t(r,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임 또는 가상 머신 없이 서버를 실행할 수 있습니다."},{default:e(()=>s[0]||(s[0]=[a("네이티브 서버")])),_:1}),s[1]||(s[1]=a(" 지원"))]),s[2]||(s[2]=a(": ✖️ "))])]),_:1}),s[16]||(s[16]=i("p",null,[a("Ktor는 "),i("a",{href:"https://github.com/spullara/mustache.java",target:"_blank",rel:"noreferrer"},"Mustache 템플릿"),a("을 애플리케이션 내 뷰로 사용할 수 있도록 "),i("a",{href:"https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-mustache/io.ktor.server.mustache/-mustache",target:"_blank",rel:"noreferrer"},"Mustache"),a(" 플러그인을 설치할 수 있습니다.")],-1)),s[17]||(s[17]=i("h2",{id:"add_dependencies",tabindex:"-1"},[a("의존성 추가 "),i("a",{class:"header-anchor",href:"#add_dependencies","aria-label":'Permalink to "의존성 추가 {id="add_dependencies"}"'},"​")],-1)),s[18]||(s[18]=i("p",null,[i("code",null,"Mustache"),a("을 사용하려면 빌드 스크립트에 "),i("code",null,"ktor-server-mustache"),a(" 아티팩트를 포함해야 합니다: ")],-1)),t(h,{group:"languages"},{default:e(()=>[t(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[t(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-mustache:$ktor_version")'})]),_:1}),t(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[t(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-mustache:$ktor_version"'})]),_:1}),t(p,{title:"Maven","group-key":"maven"},{default:e(()=>[t(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-mustache-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[19]||(s[19]=i("h2",{id:"install_plugin",tabindex:"-1"},[a("Mustache 설치 "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "Mustache 설치 {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[6]||(s[6]=i("code",null,"Mustache",-1)),s[7]||(s[7]=a(" 플러그인을 애플리케이션에 ")),s[8]||(s[8]=i("a",{href:"#install"},"설치",-1)),s[9]||(s[9]=a("하려면, 지정된 ")),t(r,{href:"/ktor/server-modules",summary:"모듈을 사용하면 라우트를 그룹화하여 애플리케이션을 구조화할 수 있습니다."},{default:e(()=>s[5]||(s[5]=[a("모듈")])),_:1}),s[10]||(s[10]=a("에서 ")),s[11]||(s[11]=i("code",null,"install",-1)),s[12]||(s[12]=a(" 함수에 전달합니다. 아래 코드 스니펫은 ")),s[13]||(s[13]=i("code",null,"Mustache",-1)),s[14]||(s[14]=a("을 설치하는 방법을 보여줍니다... "))]),t(E,null,{default:e(()=>s[15]||(s[15]=[i("li",null,[a(" ... "),i("code",null,"embeddedServer"),a(" 함수 호출 내. ")],-1),i("li",null,[a(" ... "),i("code",null,"Application"),a(" 클래스의 확장 함수인 명시적으로 정의된 "),i("code",null,"module"),a(" 내. ")],-1)])),_:1}),t(h,null,{default:e(()=>[t(p,{title:"embeddedServer"},{default:e(()=>[t(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.mustache.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(Mustache)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),t(p,{title:"module"},{default:e(()=>[t(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.mustache.*
            // ...
            fun Application.module() {
                install(Mustache)
                // ...
            }`})]),_:1})]),_:1}),s[20]||(s[20]=y(`<p><code>install</code> 블록 내에서 Mustache 템플릿 로드를 위한 <a href="http://spullara.github.io/mustache/apidocs/com/github/mustachejava/MustacheFactory.html" target="_blank" rel="noreferrer">MustacheFactory</a>를 <a href="#template_loading">구성</a>할 수 있습니다.</p><h2 id="configure" tabindex="-1">Mustache 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;Mustache 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><h3 id="template_loading" tabindex="-1">템플릿 로딩 구성 <a class="header-anchor" href="#template_loading" aria-label="Permalink to &quot;템플릿 로딩 구성 {id=&quot;template_loading&quot;}&quot;">​</a></h3><p>템플릿을 로드하려면 <a href="http://spullara.github.io/mustache/apidocs/com/github/mustachejava/MustacheFactory.html" target="_blank" rel="noreferrer">MustacheFactory</a>를 <code>mustacheFactory</code> 프로퍼티에 할당해야 합니다. 예를 들어, 아래 코드 스니펫은 Ktor가 현재 클래스패스를 기준으로 <code>templates</code> 패키지에서 템플릿을 찾도록 합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.github.mustachejava.DefaultMustacheFactory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.mustache.Mustache</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.mustache.MustacheContent</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Mustache) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mustacheFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DefaultMustacheFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;templates&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="use_template" tabindex="-1">응답으로 템플릿 전송 <a class="header-anchor" href="#use_template" aria-label="Permalink to &quot;응답으로 템플릿 전송 {id=&quot;use_template&quot;}&quot;">​</a></h3><p><code>resources/templates</code>에 <code>index.hbs</code> 템플릿이 있다고 가정해 봅시다:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, {{user.name}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>사용자 데이터 모델은 다음과 같습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>지정된 <a href="./server-routing">경로</a>에 템플릿을 사용하려면 다음과 같이 <code>call.respond</code> 메서드에 <code>MustacheContent</code>를 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampleUser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MustacheContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.hbs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to sampleUser)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,12))])}const D=g(v,[["render",F]]);export{B as __pageData,D as default};
