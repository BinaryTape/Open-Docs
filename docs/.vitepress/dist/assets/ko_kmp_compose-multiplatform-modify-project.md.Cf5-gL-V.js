import{_ as o}from"./chunks/icon-1-done.B5D6C9SU.js";import{_ as d}from"./chunks/icon-2-done.e1N9yMQF.js";import{_ as g}from"./chunks/icon-3.DqpDG4W7.js";import{_ as y}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as m}from"./chunks/gradle-sync.fCQp85Nh.js";import{_ as F,a as c,b as u,c as C}from"./chunks/first-compose-project-on-web-2.Af5ifRSk.js";import{_ as f,C as t,c as b,o as B,j as i,G as a,ag as e,a as n,w as l}from"./chunks/framework.Bksy39di.js";const J=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-multiplatform-modify-project.md","filePath":"ko/kmp/compose-multiplatform-modify-project.md","lastUpdated":1755516278000}'),A={name:"ko/kmp/compose-multiplatform-modify-project.md"};function D(v,s,x,_,M,T){const k=t("secondary-label"),h=t("Links"),r=t("tldr"),p=t("TabItem"),E=t("Tabs");return B(),b("div",null,[s[21]||(s[21]=i("h1",{id:"프로젝트-수정하기",tabindex:"-1"},[n("프로젝트 수정하기 "),i("a",{class:"header-anchor",href:"#프로젝트-수정하기","aria-label":'Permalink to "프로젝트 수정하기"'},"​")],-1)),a(k,{ref:"IntelliJ IDEA"},null,512),a(k,{ref:"Android Studio"},null,512),a(r,null,{default:l(()=>[s[15]||(s[15]=i("p",null,"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE 모두 동일한 핵심 기능과 Kotlin Multiplatform 지원을 공유합니다.",-1)),s[16]||(s[16]=i("br",null,null,-1)),s[17]||(s[17]=i("p",null,[n("이 튜토리얼은 "),i("strong",null,"공유 로직 및 UI를 사용하는 Compose Multiplatform 앱 생성하기"),n(" 튜토리얼의 세 번째 부분입니다. 계속 진행하기 전에 이전 단계를 완료했는지 확인하세요.")],-1)),i("p",null,[s[2]||(s[2]=i("img",{src:o,width:"20",alt:"첫 번째 단계"},null,-1)),s[3]||(s[3]=n()),a(h,{href:"/kmp/compose-multiplatform-create-first-app",summary:"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE 모두 동일한 핵심 기능과 Kotlin Multiplatform 지원을 공유합니다. 이 튜토리얼은 공유 로직 및 UI를 사용하는 Compose Multiplatform 앱 생성하기 튜토리얼의 첫 번째 부분입니다. Compose Multiplatform 앱 생성하기 컴포저블 코드 살펴보기 프로젝트 수정하기 자신만의 애플리케이션 생성하기"},{default:l(()=>s[0]||(s[0]=[n("Compose Multiplatform 앱 생성하기")])),_:1}),s[4]||(s[4]=i("br",null,null,-1)),s[5]||(s[5]=i("img",{src:d,width:"20",alt:"두 번째 단계"},null,-1)),s[6]||(s[6]=n()),a(h,{href:"/kmp/compose-multiplatform-explore-composables",summary:"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE 모두 동일한 핵심 기능과 Kotlin Multiplatform 지원을 공유합니다. 이 튜토리얼은 공유 로직 및 UI를 사용하는 Compose Multiplatform 앱 생성하기 튜토리얼의 두 번째 부분입니다. 계속 진행하기 전에 이전 단계를 완료했는지 확인하세요. Compose Multiplatform 앱 생성하기 컴포저블 코드 살펴보기 프로젝트 수정하기 자신만의 애플리케이션 생성하기"},{default:l(()=>s[1]||(s[1]=[n("컴포저블 코드 살펴보기")])),_:1}),s[7]||(s[7]=i("br",null,null,-1)),s[8]||(s[8]=i("img",{src:g,width:"20",alt:"세 번째 단계"},null,-1)),s[9]||(s[9]=n()),s[10]||(s[10]=i("strong",null,"프로젝트 수정하기",-1)),s[11]||(s[11]=i("br",null,null,-1)),s[12]||(s[12]=i("img",{src:y,width:"20",alt:"네 번째 단계"},null,-1)),s[13]||(s[13]=n(" 자신만의 애플리케이션 생성하기")),s[14]||(s[14]=i("br",null,null,-1))])]),_:1}),s[22]||(s[22]=e(`<p>Kotlin Multiplatform 마법사가 생성한 코드를 수정하고 <code>App</code> 컴포저블 내에 현재 날짜를 표시해 보겠습니다. 이를 위해 프로젝트에 새 의존성을 추가하고, UI를 개선하며, 각 플랫폼에서 애플리케이션을 다시 실행합니다.</p><h2 id="새-의존성-추가" tabindex="-1">새 의존성 추가 <a class="header-anchor" href="#새-의존성-추가" aria-label="Permalink to &quot;새 의존성 추가&quot;">​</a></h2><p>플랫폼별 라이브러리와 <a href="./multiplatform-expect-actual">expect/actual 선언</a>을 사용하여 날짜를 가져올 수 있습니다. 하지만 Kotlin Multiplatform 라이브러리를 사용할 수 없을 때만 이 접근 방식을 사용하는 것이 좋습니다. 이 경우 <a href="https://github.com/Kotlin/kotlinx-datetime" target="_blank" rel="noreferrer">kotlinx-datetime</a> 라이브러리를 사용할 수 있습니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>JetBrains의 실험적인 검색 서비스인 <a href="https://klibs.io/" target="_blank" rel="noreferrer">klibs.io</a>에서 대상 플랫폼에 사용할 수 있는 Kotlin Multiplatform 라이브러리를 탐색할 수 있습니다.</p></div><p><code>kotlinx-datetime</code> 라이브러리를 사용하려면:</p><ol><li><p><code>composeApp/build.gradle.kts</code> 파일을 열고 프로젝트에 의존성으로 추가합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlinx:kotlinx-datetime:0.6.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        wasmJsMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@js-joda/timezone&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.22.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>주요 의존성은 공통 코드 소스 세트를 구성하는 섹션에 추가됩니다.</li><li>단순화를 위해 버전 번호는 버전 카탈로그에 추가하는 대신 직접 포함됩니다.</li><li>웹 타겟에서 시간대를 지원하기 위해 필요한 npm 패키지 참조가 <code>wasmJsMain</code> 의존성에 포함됩니다.</li></ul></li><li><p>의존성이 추가되면 프로젝트 동기화를 요청하는 메시지가 나타납니다. <strong>Sync Gradle Changes</strong> 버튼을 클릭하여 Gradle 파일을 동기화합니다. <img src="`+m+`" alt="Gradle 파일 동기화" width="50"></p></li><li><p><strong>터미널</strong> 도구 창에서 다음 명령을 실행합니다.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinUpgradeYarnLock</span></span></code></pre></div><p>이 Gradle 작업은 <code>yarn.lock</code> 파일이 최신 의존성 버전으로 업데이트되도록 합니다.</p></li></ol><h2 id="사용자-인터페이스-개선" tabindex="-1">사용자 인터페이스 개선 <a class="header-anchor" href="#사용자-인터페이스-개선" aria-label="Permalink to &quot;사용자 인터페이스 개선&quot;">​</a></h2><ol><li><p><code>composeApp/src/commonMain/kotlin/App.kt</code> 파일을 열고 현재 날짜를 포함하는 문자열을 반환하는 다음 함수를 추가합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> todaysDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LocalDateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">substringBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;T&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Clock.System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zone </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeZone.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentSystemDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> now.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLocalDateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(zone).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>같은 파일에서 <code>App()</code> 컴포저블을 수정하여 이 함수를 호출하고 결과를 표시하는 <code>Text()</code> 컴포저블을 포함하도록 합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">safeContentPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Today&#39;s date is \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">todaysDate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                fontSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.sp,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                textAlign </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TextAlign.Center</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">showContent }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click me!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            AnimatedVisibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(showContent) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.drawable.compose_multiplatform), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Compose: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$greeting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>IDE의 제안에 따라 누락된 의존성을 임포트합니다. <code>todaysDate()</code> 함수에 필요한 모든 누락된 의존성을 <code>kotlinx.datetime</code> 패키지에서 임포트해야 하며, <code>kotlin.time</code>에서 임포트하지 않도록 주의하세요.</p><p><img src="`+C+`" alt="해결되지 않은 참조"></p></li><li><p>웹 앱이 컨테이너로 <code>Element</code>를 사용하는 대신 외부에서 지정된 <code>id</code>를 가진 HTML 요소를 사용하도록 전환합니다.</p><ol><li><p><code>composeApp/src/wasmJsMain/resources/index.html</code> 파일에서 <code>&lt;body&gt;</code> 내에 명명된 요소를 추가합니다.</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;composeApplication&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width:400px; height: 600px;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><code>composeApp/src/wasmJsMain/kotlin/main.kt</code> 파일에서 <code>ComposeViewport</code> 호출을 HTML 파일에 지정한 ID를 가리키는 <code>String</code> 변형으로 변경합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalComposeUiApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ComposeViewport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(viewportContainerId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composeApplication&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol></li></ol><h2 id="애플리케이션-다시-실행" tabindex="-1">애플리케이션 다시 실행 <a class="header-anchor" href="#애플리케이션-다시-실행" aria-label="Permalink to &quot;애플리케이션 다시 실행&quot;">​</a></h2><p>이제 Android, iOS, 데스크톱 및 웹에 대해 동일한 실행 구성을 사용하여 애플리케이션을 다시 실행할 수 있습니다.</p>`,10)),a(E,null,{default:l(()=>[a(p,{id:"mobile-app",title:"Android 및 iOS"},{default:l(()=>s[18]||(s[18]=[i("img",{src:F,alt:"Android 및 iOS에서의 첫 Compose Multiplatform 앱",width:"500"},null,-1)])),_:1}),a(p,{id:"desktop-app",title:"데스크톱"},{default:l(()=>s[19]||(s[19]=[i("img",{src:c,alt:"데스크톱에서의 첫 Compose Multiplatform 앱",width:"400"},null,-1)])),_:1}),a(p,{id:"web-app",title:"웹"},{default:l(()=>s[20]||(s[20]=[i("img",{src:u,alt:"웹에서의 첫 Compose Multiplatform 앱",width:"400"},null,-1)])),_:1})]),_:1}),s[23]||(s[23]=e('<h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>튜토리얼의 다음 부분에서는 새로운 Compose Multiplatform 개념을 배우고 자신만의 애플리케이션을 처음부터 생성합니다.</p><p><strong><a href="./compose-multiplatform-new-project">다음 파트로 진행</a></strong></p><h2 id="도움말" tabindex="-1">도움말 <a class="header-anchor" href="#도움말" aria-label="Permalink to &quot;도움말&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>. <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">초대</a>를 받고 <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 채널에 참여하세요.</li><li><strong>Kotlin 이슈 트래커</strong>. <a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">새 이슈 보고</a>.</li></ul>',5))])}const K=f(A,[["render",D]]);export{J as __pageData,K as default};
