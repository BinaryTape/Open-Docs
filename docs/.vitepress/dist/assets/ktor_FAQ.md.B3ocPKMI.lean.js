import{_ as g,C as d,c as v,o as K,G as n,w as r,j as l,a as o}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/FAQ.md","filePath":"ktor/FAQ.md","lastUpdated":1755457140000}'),b={name:"ktor/FAQ.md"};function w(x,t,S,C,N,T){const p=d("emphasis"),e=d("chapter"),i=d("Links"),s=d("code-block"),u=d("step"),m=d("Path"),f=d("procedure"),a=d("list"),k=d("topic");return K(),v("div",null,[n(k,{"xsi:noNamespaceSchemaLocation":"https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance",title:"常见问题",id:"FAQ"},{default:r(()=>[n(e,{title:"Ktor 的正确发音是什么？",id:"pronounce"},{default:r(()=>[l("p",null,[n(p,null,{default:r(()=>t[0]||(t[0]=[o("/keɪ-tor/")])),_:1})])]),_:1}),n(e,{title:'"Ktor" 这个名字代表什么？',id:"name-meaning"},{default:r(()=>t[1]||(t[1]=[l("p",null,[o(" Ktor 这个名字源自 "),l("code",null,"ctor"),o(" (构造函数) 的缩写，其中第一个字母被替换为 'K' 以表示 Kotlin。 ")],-1)])),_:1}),n(e,{title:"如何提问、报告 Bug、联系我们、贡献代码、提供反馈等？",id:"feedback"},{default:r(()=>t[2]||(t[2]=[l("p",null,[o(" 前往"),l("a",{href:"https://ktor.io/support/"},"支持"),o("页面，了解更多关于可用支持渠道的信息。 《"),l("a",{href:"https://github.com/ktorio/ktor/blob/main/CONTRIBUTING.md"},"如何贡献"),o("》指南描述了您可以为 Ktor 贡献的方式。 ")],-1)])),_:1}),n(e,{title:"CIO 是什么意思？",id:"cio"},{default:r(()=>[l("p",null,[t[4]||(t[4]=o(" CIO 代表 ")),n(p,null,{default:r(()=>t[3]||(t[3]=[o("基于协程的 I/O")])),_:1}),t[5]||(t[5]=o(" 。 通常，我们称之为使用 Kotlin 和协程实现 IETF RFC 或其他协议的逻辑，而不依赖外部基于 JVM 的库的引擎。 "))])]),_:1}),n(e,{title:"如何修复未解析（红色）的 Ktor 导入？",id:"ktor-artifact"},{default:r(()=>[l("p",null,[t[7]||(t[7]=o(" 请确保相应的 ")),n(i,{href:"/ktor/server-dependencies",summary:"了解如何将 Ktor 服务器依赖项添加到现有 Gradle/Maven 项目中。"},{default:r(()=>t[6]||(t[6]=[o("Ktor 构件")])),_:1}),t[8]||(t[8]=o(" 已添加到构建脚本中。 "))])]),_:1}),n(e,{title:"Ktor 是否提供捕获 IPC 信号（例如 SIGTERM 或 SIGINT）的方法，以便服务器可以优雅地关闭？",id:"sigterm"},{default:r(()=>t[9]||(t[9]=[l("p",null,[o(" 如果您正在运行一个 "),l("a",{href:"#engine-main"},"EngineMain"),o("，它将自动处理。 否则，您需要"),l("a",{href:"https://github.com/ktorio/ktor/blob/main/ktor-server/ktor-server-cio/jvmAndNix/src/io/ktor/server/cio/EngineMain.kt#L21"},"手动处理"),o("。 您可以使用 "),l("code",null,"Runtime.getRuntime().addShutdownHook"),o(" 这一 JVM 机制。 ")],-1)])),_:1}),n(e,{title:"如何获取代理后面的客户端 IP？",id:"proxy-ip"},{default:r(()=>[l("p",null,[t[11]||(t[11]=o(" 如果代理提供了正确的标头并且 ")),n(i,{href:"/ktor/server-forward-headers",summary:"所需依赖项：io.ktor:%artifact_name% 代码示例：%example_name% 原生服务器支持：✅"},{default:r(()=>t[10]||(t[10]=[o("ForwardedHeader")])),_:1}),t[12]||(t[12]=o(" 插件已安装，则 ")),t[13]||(t[13]=l("code",null,"call.request.origin",-1)),t[14]||(t[14]=o(" 属性会提供有关原始调用者（即代理）的")),t[15]||(t[15]=l("a",{href:"#request_information"},"连接信息",-1)),t[16]||(t[16]=o("。 "))])]),_:1}),n(e,{title:"如何测试 main 分支上的最新提交？",id:"bleeding-edge"},{default:r(()=>t[17]||(t[17]=[l("p",null,[o(" 您可以从 "),l("code",null,"jetbrains.space"),o(" 获取 Ktor 的每夜构建版本。 从"),l("a",{href:"https://ktor.io/eap/"},"抢先体验计划"),o("了解更多信息。 ")],-1)])),_:1}),n(e,{title:"如何确认我正在使用哪个版本的 Ktor？",id:"ktor-version-used"},{default:r(()=>[l("p",null,[t[19]||(t[19]=o(" 您可以使用 ")),n(i,{href:"/ktor/server-default-headers",summary:"所需依赖项：io.ktor:%artifact_name% 原生服务器支持：✅"},{default:r(()=>t[18]||(t[18]=[o("DefaultHeaders")])),_:1}),t[20]||(t[20]=o(" 插件，该插件会发送一个包含 Ktor 版本的 ")),t[21]||(t[21]=l("code",null,"Server",-1)),t[22]||(t[22]=o(" 响应标头，例如： "))]),n(s,{code:"            Server: ktor-server-core/3.2.3"})]),_:1}),n(e,{title:"我的路由未被执行。如何调试？",id:"route-not-executing"},{default:r(()=>t[23]||(t[23]=[l("p",null,[o(" Ktor 提供了一种跟踪机制，可帮助排查路由决策问题。 请查看"),l("a",{href:"#trace_routes"},"跟踪路由"),o("章节。 ")],-1)])),_:1}),n(e,{title:"如何解决“Response has already been sent”？",id:"response-already-sent"},{default:r(()=>t[24]||(t[24]=[l("p",null,[o(" 这意味着您、某个插件或拦截器已经调用了 "),l("code",null,"call.respond* "),o(" 函数，而您又再次调用了它。 ")],-1)])),_:1}),n(e,{title:"如何订阅 Ktor 事件？",id:"ktor-events"},{default:r(()=>[l("p",null,[t[26]||(t[26]=o(" 请参阅")),n(i,{href:"/ktor/server-events",summary:"代码示例：%example_name%"},{default:r(()=>t[25]||(t[25]=[o("应用程序监控")])),_:1}),t[27]||(t[27]=o("页面了解更多信息。 "))])]),_:1}),n(e,{title:"如何解决“No configuration setting found for key ktor”？",id:"cannot-find-application-conf"},{default:r(()=>[l("p",null,[t[30]||(t[30]=o(" 这意味着 Ktor 未能找到")),n(i,{href:"/ktor/server-configuration-file",summary:"了解如何在配置文件中配置各种服务器参数。"},{default:r(()=>t[28]||(t[28]=[o("配置文件")])),_:1}),t[31]||(t[31]=o("。 请确保 ")),t[32]||(t[32]=l("code",null,"resources",-1)),t[33]||(t[33]=o(" 文件夹中存在配置文件，并且 ")),t[34]||(t[34]=l("code",null,"resources",-1)),t[35]||(t[35]=o(" 文件夹已正确标记。 建议使用")),t[36]||(t[36]=l("a",{href:"https://start.ktor.io/"},"Ktor 项目生成器",-1)),t[37]||(t[37]=o("或")),t[38]||(t[38]=l("a",{href:"https://plugins.jetbrains.com/plugin/16008-ktor"},"适用于 IntelliJ IDEA Ultimate 的 Ktor 插件",-1)),t[39]||(t[39]=o("来设置项目，以便拥有一个可运行的基础项目。更多信息请参见")),n(i,{href:"/ktor/server-create-a-new-project",summary:"了解如何使用 Ktor 打开、运行和测试服务器应用程序。"},{default:r(()=>t[29]||(t[29]=[o("创建、打开和运行新的 Ktor 项目")])),_:1}),t[40]||(t[40]=o("。 "))])]),_:1}),n(e,{title:"我可以在 Android 上使用 Ktor 吗？",id:"android-support"},{default:r(()=>t[41]||(t[41]=[l("p",null," 是的，Ktor 服务器和客户端已知可以在 Android 5 (API 21) 或更高版本上运行，至少使用 Netty 引擎时如此。 ",-1)])),_:1}),n(e,{title:"为什么 'CURL -I' 返回 '404 Not Found'？",id:"curl-head-not-found"},{default:r(()=>[l("p",null,[t[43]||(t[43]=l("code",null,"CURL -I",-1)),t[44]||(t[44]=o(" 是 ")),t[45]||(t[45]=l("code",null,"CURL --head",-1)),t[46]||(t[46]=o(" 的别名，它执行 ")),t[47]||(t[47]=l("code",null,"HEAD",-1)),t[48]||(t[48]=o(" 请求。 默认情况下，Ktor 不会处理针对 ")),t[49]||(t[49]=l("code",null,"GET",-1)),t[50]||(t[50]=o(" 处理器发出的 ")),t[51]||(t[51]=l("code",null,"HEAD",-1)),t[52]||(t[52]=o(" 请求。 要启用此功能，请安装")),n(i,{href:"/ktor/server-autoheadresponse",summary:"%plugin_name% 提供了为每个定义了 GET 的路由自动响应 HEAD 请求的能力。"},{default:r(()=>t[42]||(t[42]=[o("AutoHeadResponse")])),_:1}),t[53]||(t[53]=o(" 插件。 "))])]),_:1}),n(e,{title:"使用 'HttpsRedirect' 插件时如何解决无限重定向？",id:"infinite-redirect"},{default:r(()=>[t[59]||(t[59]=l("p",null,[o(" 最可能的原因是您的后端位于反向代理或负载均衡器之后，并且该中间层正在向您的后端发出普通的 HTTP 请求，因此您 Ktor 后端中的 "),l("code",null,"HttpsRedirect"),o(" 插件认为这是一个普通的 HTTP 请求并以重定向响应。 ")],-1)),l("p",null,[t[56]||(t[56]=o(" 通常，反向代理会发送一些描述原始请求（例如它是 HTTPS 或原始 IP 地址）的标头，并且有一个插件 ")),n(i,{href:"/ktor/server-forward-headers",summary:"所需依赖项：io.ktor:%artifact_name% 代码示例：%example_name% 原生服务器支持：✅"},{default:r(()=>t[54]||(t[54]=[o("ForwardedHeader")])),_:1}),t[57]||(t[57]=o(" 用于解析这些标头，这样 ")),n(i,{href:"/ktor/server-https-redirect",summary:"所需依赖项：io.ktor:%artifact_name% 代码示例：%example_name% 原生服务器支持：✅"},{default:r(()=>t[55]||(t[55]=[o("HttpsRedirect")])),_:1}),t[58]||(t[58]=o(" 插件就知道原始请求是 HTTPS。 "))])]),_:1}),n(e,{title:"如何在 Windows 上安装 'curl' 以在 Kotlin/Native 上使用相应的引擎？",id:"native-curl"},{default:r(()=>[t[67]||(t[67]=l("p",null,[l("a",{href:"#curl"},"Curl"),o(" 客户端引擎需要安装 "),l("code",null,"curl"),o(" 库。 在 Windows 上，您可能需要考虑使用 MinGW/MSYS2 "),l("code",null,"curl"),o(" 二进制文件。 ")],-1)),n(f,null,{default:r(()=>[n(u,null,{default:r(()=>t[60]||(t[60]=[l("p",null,[o(" 按照"),l("a",{href:"https://www.msys2.org/"},"MinGW/MSYS2"),o("中的描述安装 MinGW/MSYS2。 ")],-1)])),_:1}),n(u,null,{default:r(()=>[t[61]||(t[61]=l("p",null,[o(" 使用以下命令安装 "),l("code",null,"libcurl"),o("： ")],-1)),n(s,{lang:"shell",code:"                    pacman -S mingw-w64-x86_64-curl"})]),_:1}),n(u,null,{default:r(()=>[l("p",null,[t[63]||(t[63]=o(" 如果您将 MinGW/MSYS2 安装到默认位置，请将")),n(m,null,{default:r(()=>t[62]||(t[62]=[o("C:\\msys64\\mingw64\\bin\\")])),_:1}),t[64]||(t[64]=o("添加到 ")),t[65]||(t[65]=l("code",null,"PATH",-1)),t[66]||(t[66]=o(" 环境变量中。 "))])]),_:1})]),_:1})]),_:1}),n(e,{title:"如何解决 'NoTransformationFoundException'？",id:"no-transformation-found-exception"},{default:r(()=>[t[73]||(t[73]=l("p",null,[l("a",{href:"https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.call/-no-transformation-found-exception/index.html"},"NoTransformationFoundException"),o(" 表示未能找到适合将"),l("i",null,"接收到的正文"),o("从"),l("b",null,"结果"),o("类型转换为客户端"),l("b",null,"期望"),o("类型的转换。 ")],-1)),n(f,null,{default:r(()=>[n(u,null,{default:r(()=>t[68]||(t[68]=[l("p",null,[o(" 检查您请求中的 "),l("code",null,"Accept"),o(" 标头是否指定了所需的内容类型，以及服务器响应中的 "),l("code",null,"Content-Type"),o(" 标头是否与客户端期望的类型匹配。 ")],-1)])),_:1}),n(u,null,{default:r(()=>[t[69]||(t[69]=l("p",null," 注册针对您正在使用的特定内容类型所需的转换。 ",-1)),t[70]||(t[70]=l("p",null,[o(" 您可以在客户端使用"),l("a",{href:"https://ktor.io/docs/serialization-client.html"},"ContentNegotiation"),o("插件。此插件允许您指定如何序列化和反序列化不同内容类型的数据。 ")],-1)),n(s,{lang:"kotlin",code:`                    val client = HttpClient(CIO) {
                        install(ContentNegotiation) {
                            json() // 示例：注册 JSON 内容转换
                            // 根据需要添加更多针对其他内容类型的转换
                        }
                    }`})]),_:1}),n(u,null,{default:r(()=>[t[72]||(t[72]=l("p",null," 请确保您安装了所有所需的插件。可能缺失的特性有： ",-1)),n(a,{type:"bullet"},{default:r(()=>t[71]||(t[71]=[l("li",null,[o("客户端 "),l("a",{href:"https://ktor.io/docs/websocket-client.html"},"WebSockets"),o(" 和 服务器 "),l("a",{href:"https://ktor.io/docs/websocket.html"},"WebSockets")],-1),l("li",null,[o("客户端 "),l("a",{href:"https://ktor.io/docs/serialization-client.html"},"ContentNegotiation"),o(" 和 服务器 "),l("a",{href:"https://ktor.io/docs/serialization.html"},"ContentNegotiation")],-1),l("li",null,[l("a",{href:"https://ktor.io/docs/compression.html"},"Compression")],-1)])),_:1})]),_:1})]),_:1})]),_:1})]),_:1})])}const H=g(b,[["render",w]]);export{I as __pageData,H as default};
