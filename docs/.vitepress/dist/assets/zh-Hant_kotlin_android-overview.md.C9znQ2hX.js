import{_ as t,c as o,o as e,ag as n}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"適用於 Android 的 Kotlin","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/android-overview.md","filePath":"zh-Hant/kotlin/android-overview.md","lastUpdated":1754307826000}'),a={name:"zh-Hant/kotlin/android-overview.md"};function i(l,r,d,s,p,m){return e(),o("div",null,r[0]||(r[0]=[n('<h1 id="適用於-android-的-kotlin" tabindex="-1">適用於 Android 的 Kotlin <a class="header-anchor" href="#適用於-android-的-kotlin" aria-label="Permalink to &quot;適用於 Android 的 Kotlin&quot;">​</a></h1><p>自 2019 年 Google I/O 起，Android 行動開發已成為 <a href="https://developer.android.com/kotlin/first" target="_blank" rel="noreferrer">Kotlin-first</a>。</p><p>超過 50% 的專業 Android 開發人員將 Kotlin 作為主要語言，而只有 30% 將 Java 作為主要語言。70% 以 Kotlin 為主要語言的開發人員表示，Kotlin 讓他們更具生產力。</p><p>將 Kotlin 用於 Android 開發，您可以從中獲益：</p><ul><li><strong>更少程式碼與更高的可讀性</strong>。花費更少時間撰寫程式碼，並更容易理解他人的程式碼。</li><li><strong>更少常見錯誤</strong>。根據 <a href="https://medium.com/androiddevelopers/fewer-crashes-and-more-stability-with-kotlin-b606c6a6ac04" target="_blank" rel="noreferrer">Google 的內部資料</a>，使用 Kotlin 建置的應用程式崩潰可能性降低 20%。</li><li><strong>Jetpack 程式庫中的 Kotlin 支援</strong>。<a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> 是 Android 推薦的現代工具包，用於在 Kotlin 中建置原生 UI。 <a href="https://developer.android.com/kotlin/ktx" target="_blank" rel="noreferrer">KTX extensions</a> 為現有的 Android 程式庫添加了 Kotlin 語言功能，例如 coroutines、extension functions、lambdas 和 named parameters。</li><li><strong>支援多平台開發</strong>。Kotlin Multiplatform 不僅支援 Android 開發，還支援 <a href="https://kotlinlang.org/lp/multiplatform/" target="_blank" rel="noreferrer">iOS</a>、後端和 Web 應用程式的開發。 <a href="https://developer.android.com/kotlin/multiplatform" target="_blank" rel="noreferrer">一些 Jetpack 程式庫</a> 已經是多平台的了。 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 是 JetBrains 基於 Kotlin 和 Jetpack Compose 的宣告式 UI 框架，它使得在 iOS、Android、桌面和 Web 等平台之間共享 UI 成為可能。</li><li><strong>成熟的語言和環境</strong>。自 2011 年創立以來，Kotlin 不僅作為一種語言持續發展，更發展為一個擁有強大工具的完整生態系統。現在，它已無縫整合到 <a href="https://developer.android.com/studio" target="_blank" rel="noreferrer">Android Studio</a> 中，並被許多公司積極用於開發 Android 應用程式。</li><li><strong>與 Java 的互通性</strong>。您可以在應用程式中將 Kotlin 與 Java 程式語言一起使用，而無需將所有程式碼遷移到 Kotlin。</li><li><strong>易於學習</strong>。Kotlin 非常容易學習，特別是對 Java 開發人員而言。</li><li><strong>龐大的社群</strong>。Kotlin 獲得社群的大力支援和許多貢獻，其社群正在全球範圍內不斷壯大。前一千名 Android 應用程式中，超過 95% 使用 Kotlin。</li></ul><p>許多新創公司和財富 500 強公司已經使用 Kotlin 開發了 Android 應用程式，請參閱 <a href="https://developer.android.com/kotlin/stories" target="_blank" rel="noreferrer">Google 針對 Android 開發者的網站</a> 上的清單。</p><p>若要開始將 Kotlin 用於：</p><ul><li>Android 開發，請閱讀 <a href="https://developer.android.com/kotlin/get-started" target="_blank" rel="noreferrer">Google 關於使用 Kotlin 開發 Android 應用程式的文件</a>。</li><li>開發跨平台行動應用程式，請參閱 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-create-first-app.html" target="_blank" rel="noreferrer">建立具有共享邏輯和原生 UI 的應用程式</a>。</li></ul>',8)]))}const g=t(a,[["render",i]]);export{c as __pageData,g as default};
