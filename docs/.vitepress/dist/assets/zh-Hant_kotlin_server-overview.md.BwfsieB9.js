import{_ as r,c as e,o as a,ag as o}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"Kotlin 用於伺服器端","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/server-overview.md","filePath":"zh-Hant/kotlin/server-overview.md","lastUpdated":1754307826000}'),n={name:"zh-Hant/kotlin/server-overview.md"};function l(i,t,s,h,p,k){return a(),e("div",null,t[0]||(t[0]=[o('<h1 id="kotlin-用於伺服器端" tabindex="-1">Kotlin 用於伺服器端 <a class="header-anchor" href="#kotlin-用於伺服器端" aria-label="Permalink to &quot;Kotlin 用於伺服器端&quot;">​</a></h1><p>Kotlin 非常適合用於開發伺服器端應用程式。它讓您可以編寫簡潔且富有表達力的程式碼，同時與現有的基於 Java 的技術堆疊完全相容，而且學習曲線平緩：</p><ul><li><strong>表達力</strong>：Kotlin 創新的語言特性，例如對 <a href="/zh-Hant/kotlin/type-safe-builders">型別安全建構器</a> 和 <a href="/zh-Hant/kotlin/delegated-properties">委派屬性</a> 的支援，有助於建立功能強大且易於使用的抽象。</li><li><strong>可擴展性</strong>：Kotlin 對於 <a href="/zh-Hant/kotlin/coroutines-overview">協程</a> 的支援，有助於以適度的硬體要求，建立可擴展至大量客戶端的伺服器端應用程式。</li><li><strong>互通性</strong>：Kotlin 與所有基於 Java 的框架完全相容，因此您可以使用熟悉的技術堆疊，同時享受更現代語言帶來的益處。</li><li><strong>遷移</strong>：Kotlin 支援將大型程式碼庫從 Java 逐步遷移到 Kotlin。您可以開始使用 Kotlin 編寫新程式碼，同時保留系統中較舊的部分為 Java。</li><li><strong>工具</strong>：除了普遍出色的 IDE 支援外，Kotlin 還在 IntelliJ IDEA Ultimate 的外掛程式中提供框架特定的工具（例如，針對 Spring 和 Ktor）。</li><li><strong>學習曲線</strong>：對於 Java 開發人員而言，開始使用 Kotlin 非常容易。Kotlin 外掛程式中包含的自動 Java-to-Kotlin 轉換器有助於您的入門。 <a href="/zh-Hant/kotlin/koans">Kotlin Koans</a> 透過一系列互動式練習引導您了解關鍵語言特性。像 <a href="https://ktor.io/" target="_blank" rel="noreferrer">Ktor</a> 這樣的 Kotlin 特定框架提供了一種簡單、直接的方法，沒有大型框架的隱藏複雜性。</li></ul><h2 id="適用於-kotlin-伺服器端開發的框架" tabindex="-1">適用於 Kotlin 伺服器端開發的框架 <a class="header-anchor" href="#適用於-kotlin-伺服器端開發的框架" aria-label="Permalink to &quot;適用於 Kotlin 伺服器端開發的框架&quot;">​</a></h2><p>以下是一些適用於 Kotlin 的伺服器端框架範例：</p><ul><li><p><a href="https://spring.io" target="_blank" rel="noreferrer">Spring</a> 從 5.0 版本開始，利用 Kotlin 的語言特性提供 <a href="https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0" target="_blank" rel="noreferrer">更簡潔的 API</a>。<a href="https://start.spring.io/#!language=kotlin" target="_blank" rel="noreferrer">線上專案產生器</a> 讓您能快速產生新的 Kotlin 專案。</p></li><li><p><a href="https://github.com/kotlin/ktor" target="_blank" rel="noreferrer">Ktor</a> 是由 JetBrains 開發的框架，用於以 Kotlin 建立 Web 應用程式，利用協程實現高可擴展性，並提供易於使用且慣用 (idiomatic) 的 API。</p></li><li><p><a href="https://quarkus.io/guides/kotlin" target="_blank" rel="noreferrer">Quarkus</a> 提供了對使用 Kotlin 的一流支援。該框架是開源的，由 Red Hat 維護。Quarkus 從頭開始為 Kubernetes 構建，透過利用不斷增長的數百種最佳程式庫列表，提供了一個連貫的全端框架。</p></li><li><p><a href="https://vertx.io" target="_blank" rel="noreferrer">Vert.x</a> 是一個在 JVM 上構建反應式 Web 應用程式的框架，為 Kotlin 提供 <a href="https://github.com/vert-x3/vertx-lang-kotlin" target="_blank" rel="noreferrer">專門支援</a>，包括 <a href="https://vertx.io/docs/vertx-core/kotlin/" target="_blank" rel="noreferrer">完整文件</a>。</p></li><li><p><a href="https://github.com/kotlin/kotlinx.html" target="_blank" rel="noreferrer">kotlinx.html</a> 是一種可用於在 Web 應用程式中構建 HTML 的 DSL。它作為傳統模板系統（如 JSP 和 FreeMarker）的替代方案。</p></li><li><p><a href="https://micronaut.io/" target="_blank" rel="noreferrer">Micronaut</a> 是一個現代化的基於 JVM 的全端框架，用於構建模組化、易於測試的微服務和無伺服器應用程式。它帶有許多實用的內建功能。</p></li><li><p><a href="https://http4k.org/" target="_blank" rel="noreferrer">http4k</a> 是一個用於 Kotlin HTTP 應用程式的功能性工具包，佔用空間小，以純 Kotlin 編寫。該程式庫基於 Twitter 的「Your Server as a Function」論文，並將 HTTP 伺服器和客戶端建模為可以組合在一起的簡單 Kotlin 函數。</p></li><li><p><a href="https://javalin.io" target="_blank" rel="noreferrer">Javalin</a> 是一個非常輕量級的 Kotlin 和 Java Web 框架，支援 WebSockets、HTTP2 和非同步請求。</p></li><li><p>持久化的可用選項包括直接 JDBC 存取、JPA 以及透過其 Java 驅動程式使用 NoSQL 資料庫。對於 JPA，<a href="/zh-Hant/kotlin/no-arg-plugin#jpa-support">kotlin-jpa 編譯器外掛程式</a> 會使 Kotlin 編譯的類別適應框架的要求。</p></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您可以在 <a href="https://kotlin.link/resources" target="_blank" rel="noreferrer">https://kotlin.link/</a> 找到更多框架。</p></div><h2 id="部署-kotlin-伺服器端應用程式" tabindex="-1">部署 Kotlin 伺服器端應用程式 <a class="header-anchor" href="#部署-kotlin-伺服器端應用程式" aria-label="Permalink to &quot;部署 Kotlin 伺服器端應用程式&quot;">​</a></h2><p>Kotlin 應用程式可以部署到任何支援 Java Web 應用程式的主機，包括 Amazon Web Services、Google Cloud Platform 等。</p><p>要在 <a href="https://www.heroku.com" target="_blank" rel="noreferrer">Heroku</a> 上部署 Kotlin 應用程式，您可以參考 <a href="https://devcenter.heroku.com/articles/getting-started-with-kotlin" target="_blank" rel="noreferrer">Heroku 官方教學</a>。</p><p>AWS Labs 提供了一個 <a href="https://github.com/awslabs/serverless-photo-recognition" target="_blank" rel="noreferrer">範例專案</a>，展示了如何使用 Kotlin 編寫 <a href="https://aws.amazon.com/lambda/" target="_blank" rel="noreferrer">AWS Lambda</a> 函數。</p><p>Google Cloud Platform 提供一系列關於將 Kotlin 應用程式部署到 GCP 的教學，包括 <a href="https://cloud.google.com/community/tutorials/kotlin-ktor-app-engine-java8" target="_blank" rel="noreferrer">Ktor 和 App Engine</a> 以及 <a href="https://cloud.google.com/community/tutorials/kotlin-springboot-app-engine-java8" target="_blank" rel="noreferrer">Spring 和 App Engine</a>。此外，還有一個 <a href="https://codelabs.developers.google.com/codelabs/cloud-spring-cloud-gcp-kotlin" target="_blank" rel="noreferrer">互動式程式碼實驗室</a> 用於部署 Kotlin Spring 應用程式。</p><h2 id="伺服器端使用-kotlin-的產品" tabindex="-1">伺服器端使用 Kotlin 的產品 <a class="header-anchor" href="#伺服器端使用-kotlin-的產品" aria-label="Permalink to &quot;伺服器端使用 Kotlin 的產品&quot;">​</a></h2><p><a href="https://www.corda.net/" target="_blank" rel="noreferrer">Corda</a> 是一個由主要銀行支持的開源分散式帳本平台，完全以 Kotlin 構建。</p><p><a href="https://account.jetbrains.com/" target="_blank" rel="noreferrer">JetBrains Account</a>，負責 JetBrains 整個許可證銷售和驗證流程的系統，完全以 Kotlin 編寫，自 2015 年以來一直在生產環境中運行，沒有重大問題。</p><p><a href="https://www.chess.com/" target="_blank" rel="noreferrer">Chess.com</a> 是一個致力於西洋棋及其全球數百萬愛好者的網站。Chess.com 使用 Ktor 來實現多個 HTTP 客戶端的無縫配置。</p><p><a href="https://blog.developer.adobe.com/streamlining-server-side-app-development-with-kotlin-be8cf9d8b61a" target="_blank" rel="noreferrer">Adobe</a> 的工程師使用 Kotlin 進行伺服器端應用程式開發，並在 Adobe Experience Platform 中使用 Ktor 進行原型開發。該平台使組織能夠在應用資料科學和機器學習之前集中並標準化客戶資料。</p><h2 id="後續步驟" tabindex="-1">後續步驟 <a class="header-anchor" href="#後續步驟" aria-label="Permalink to &quot;後續步驟&quot;">​</a></h2><ul><li>要更深入地了解該語言，請查閱本網站上的 Kotlin 文件和 <a href="/zh-Hant/kotlin/koans">Kotlin Koans</a>。</li><li>探索如何使用 <a href="https://ktor.io/docs/server-create-a-new-project.html" target="_blank" rel="noreferrer">Ktor 構建非同步伺服器應用程式</a>，這是一個使用 Kotlin 協程的框架。</li><li>觀看網路研討會 <a href="https://micronaut.io/2020/12/03/webinar-micronaut-for-microservices-with-kotlin/" target="_blank" rel="noreferrer">&quot;Micronaut for microservices with Kotlin&quot;</a>，並探索詳細的 <a href="https://guides.micronaut.io/latest/micronaut-kotlin-extension-fns.html" target="_blank" rel="noreferrer">指南</a>，其中展示了如何在 Micronaut 框架中使用 <a href="/zh-Hant/kotlin/extensions#extension-functions">Kotlin 擴展函數</a>。</li><li>http4k 提供 <a href="https://toolbox.http4k.org" target="_blank" rel="noreferrer">CLI</a> 以產生完整專案，以及一個 <a href="https://start.http4k.org" target="_blank" rel="noreferrer">starter</a> 儲存庫，只需一個 bash 命令即可使用 GitHub、Travis 和 Heroku 產生完整的 CI/CD 流水線。</li><li>想要從 Java 遷移到 Kotlin 嗎？了解如何在 <a href="/zh-Hant/kotlin/java-to-kotlin-idioms-strings">Java 和 Kotlin 中執行典型的字串任務</a>。</li></ul>',19)]))}const c=r(n,[["render",l]]);export{g as __pageData,c as default};
