import{_ as s,a,b as t,c as e,d as l}from"./chunks/refined-data.Bho3Y6Lq.js";import{_ as n,c as h,o as p,ag as k}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"파일에서 데이터 가져오기","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/data-analysis-work-with-data-sources.md","filePath":"ko/kotlin/data-analysis-work-with-data-sources.md","lastUpdated":1754307826000}'),o={name:"ko/kotlin/data-analysis-work-with-data-sources.md"};function r(d,i,E,c,g,y){return p(),h("div",null,i[0]||(i[0]=[k(`<h1 id="파일에서-데이터-가져오기" tabindex="-1">파일에서 데이터 가져오기 <a class="header-anchor" href="#파일에서-데이터-가져오기" aria-label="Permalink to &quot;파일에서 데이터 가져오기&quot;">​</a></h1><p><a href="/ko/kotlin/kotlin-notebook-overview">Kotlin Notebook</a>은 <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 라이브러리</a>와 함께 비정형 및 정형 데이터를 모두 처리할 수 있도록 지원합니다. 이 조합은 TXT 파일에서 발견되는 데이터와 같은 비정형 데이터를 정형 데이터셋으로 변환할 수 있는 유연성을 제공합니다.</p><p>데이터 변환을 위해 <a href="https://kotlin.github.io/dataframe/adddf.html" target="_blank" rel="noreferrer"><code>add</code></a>, <a href="https://kotlin.github.io/dataframe/split.html" target="_blank" rel="noreferrer"><code>split</code></a>, <a href="https://kotlin.github.io/dataframe/convert.html" target="_blank" rel="noreferrer"><code>convert</code></a>, <a href="https://kotlin.github.io/dataframe/parse.html" target="_blank" rel="noreferrer"><code>parse</code></a>와 같은 메서드를 사용할 수 있습니다. 또한, 이 도구 세트는 CSV, JSON, XLS, XLSX, Apache Arrow를 포함한 다양한 정형 파일 형식에서 데이터를 검색하고 조작할 수 있도록 합니다.</p><p>이 가이드에서는 여러 예제를 통해 데이터를 검색하고, 정제하고, 처리하는 방법을 배울 수 있습니다.</p><h2 id="시작하기-전에" tabindex="-1">시작하기 전에 <a class="header-anchor" href="#시작하기-전에" aria-label="Permalink to &quot;시작하기 전에&quot;">​</a></h2><p>Kotlin Notebook은 <a href="https://plugins.jetbrains.com/plugin/16340-kotlin-notebook" target="_blank" rel="noreferrer">Kotlin Notebook 플러그인</a>에 의존하며, 이 플러그인은 IntelliJ IDEA에 기본적으로 번들로 제공되고 활성화되어 있습니다.</p><p>Kotlin Notebook 기능이 사용 가능하지 않다면, 플러그인이 활성화되어 있는지 확인하십시오. 더 자세한 내용은 <a href="/ko/kotlin/kotlin-notebook-set-up-env">환경 설정</a>을 참조하십시오.</p><p>새 Kotlin Notebook 생성:</p><ol><li><p><strong>File</strong> | <strong>New</strong> | <strong>Kotlin Notebook</strong>을 선택합니다.</p></li><li><p>Kotlin Notebook에서 다음 명령을 실행하여 Kotlin DataFrame 라이브러리를 임포트합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span></code></pre></div></li></ol><h2 id="파일에서-데이터-가져오기-1" tabindex="-1">파일에서 데이터 가져오기 <a class="header-anchor" href="#파일에서-데이터-가져오기-1" aria-label="Permalink to &quot;파일에서 데이터 가져오기&quot;">​</a></h2><p>Kotlin Notebook에서 파일로부터 데이터를 검색하려면:</p><ol><li>Kotlin Notebook 파일(<code>.ipynb</code>)을 엽니다.</li><li>노트북 시작 부분의 코드 셀에 <code>%use dataframe</code>을 추가하여 Kotlin DataFrame 라이브러리를 임포트합니다.<div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>%use dataframe</code> 줄이 포함된 코드 셀을 Kotlin DataFrame 라이브러리에 의존하는 다른 코드 셀을 실행하기 전에 실행해야 합니다.</p></div></li><li>Kotlin DataFrame 라이브러리의 <a href="https://kotlin.github.io/dataframe/read.html" target="_blank" rel="noreferrer"><code>.read()</code></a> 함수를 사용하여 데이터를 검색합니다. 예를 들어, CSV 파일을 읽으려면 <code>DataFrame.read(&quot;example.csv&quot;)</code>를 사용합니다.</li></ol><p><code>.read()</code> 함수는 파일 확장자 및 내용을 기반으로 입력 형식을 자동으로 감지합니다. <code>delimiter = &#39;;&#39;</code>와 같이 구분자를 지정하는 등 함수를 사용자 정의하기 위해 다른 인수를 추가할 수도 있습니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>추가 파일 형식 및 다양한 읽기 함수에 대한 포괄적인 개요는 <a href="https://kotlin.github.io/dataframe/read.html" target="_blank" rel="noreferrer">Kotlin DataFrame 라이브러리 문서</a>를 참조하십시오.</p></div><h2 id="데이터-표시" tabindex="-1">데이터 표시 <a class="header-anchor" href="#데이터-표시" aria-label="Permalink to &quot;데이터 표시&quot;">​</a></h2><p><a href="#retrieve-data-from-a-file">노트북에 데이터가 있다면</a>, 변수에 쉽게 저장하고 코드 셀에서 다음을 실행하여 액세스할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dfJson </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jsonFile.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dfJson</span></span></code></pre></div><p>이 코드는 CSV, JSON, XLS, XLSX 또는 Apache Arrow와 같이 선택한 파일의 데이터를 표시합니다.</p><p><img src="`+s+'" alt="Display data" width="700"></p><p>데이터의 구조나 스키마에 대한 통찰력을 얻으려면, DataFrame 변수에 <code>.schema()</code> 함수를 적용하십시오. 예를 들어, <code>dfJson.schema()</code>는 JSON 데이터셋의 각 컬럼 유형을 나열합니다.</p><p><img src="'+a+'" alt="Schema example" width="700"></p><p>또한 Kotlin Notebook의 자동 완성 기능을 사용하여 DataFrame의 속성에 빠르게 액세스하고 조작할 수 있습니다. 데이터를 로드한 후, DataFrame 변수 뒤에 점을 입력하기만 하면 사용 가능한 컬럼과 해당 유형 목록을 볼 수 있습니다.</p><p><img src="'+t+`" alt="Available properties" width="700"></p><h2 id="데이터-정제" tabindex="-1">데이터 정제 <a class="header-anchor" href="#데이터-정제" aria-label="Permalink to &quot;데이터 정제&quot;">​</a></h2><p>데이터셋을 정제하기 위해 Kotlin DataFrame 라이브러리에서 사용할 수 있는 다양한 작업 중 주요 예시로는 <a href="https://kotlin.github.io/dataframe/group.html" target="_blank" rel="noreferrer">그룹화</a>, <a href="https://kotlin.github.io/dataframe/filter.html" target="_blank" rel="noreferrer">필터링</a>, <a href="https://kotlin.github.io/dataframe/update.html" target="_blank" rel="noreferrer">업데이트</a>, 그리고 <a href="https://kotlin.github.io/dataframe/add.html" target="_blank" rel="noreferrer">새 컬럼 추가</a>가 있습니다. 이러한 함수는 데이터를 효과적으로 정리, 클린, 변환할 수 있도록 하여 데이터 분석에 필수적입니다.</p><p>데이터에 영화 제목과 해당 개봉 연도가 동일한 셀에 포함된 예제를 살펴보겠습니다. 목표는 더 쉬운 분석을 위해 이 데이터셋을 정제하는 것입니다:</p><ol><li><p><code>.read()</code> 함수를 사용하여 데이터를 노트북으로 로드합니다. 이 예제에서는 <code>movies.csv</code>라는 CSV 파일에서 데이터를 읽어 <code>movies</code>라는 DataFrame을 생성합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> movies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;movies.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>정규식을 사용하여 영화 제목에서 개봉 연도를 추출하고 새 컬럼으로 추가합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesWithYear </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> movies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d{4}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(title)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lastOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li><li><p>각 제목에서 개봉 연도를 제거하여 영화 제목을 수정합니다. 이렇게 하면 제목의 일관성이 유지됩니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesTitle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesWithYear</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d{4}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s*$&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(title, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li><li><p><code>filter</code> 메서드를 사용하여 특정 데이터에 집중합니다. 이 경우, 데이터셋은 1996년 이후에 개봉된 영화에 초점을 맞추도록 필터링됩니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesNew </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesWithYear.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1996</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">moviesNew</span></span></code></pre></div></li></ol><p>비교를 위해, 정제 전 데이터셋은 다음과 같습니다:</p><p><img src="`+e+'" alt="Original dataset" width="700"></p><p>정제된 데이터셋:</p><p><img src="'+l+`" alt="Data refinement result" width="700"></p><p>이는 Kotlin에서 <code>add</code>, <code>update</code>, <code>filter</code>와 같은 Kotlin DataFrame 라이브러리 메서드를 사용하여 데이터를 효과적으로 정제하고 분석하는 방법을 실질적으로 보여줍니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>추가 사용 사례 및 자세한 예시는 <a href="https://github.com/Kotlin/dataframe/tree/master/examples" target="_blank" rel="noreferrer">Kotlin DataFrame 예시</a>를 참조하십시오.</p></div><h2 id="dataframe-저장" tabindex="-1">DataFrame 저장 <a class="header-anchor" href="#dataframe-저장" aria-label="Permalink to &quot;DataFrame 저장&quot;">​</a></h2><p>Kotlin DataFrame 라이브러리를 사용하여 <a href="#refine-data">Kotlin Notebook에서 데이터를 정제한</a> 후, 처리된 데이터를 쉽게 내보낼 수 있습니다. 이를 위해 CSV, JSON, XLS, XLSX, Apache Arrow, 심지어 HTML 테이블을 포함한 여러 형식으로 저장을 지원하는 다양한 <a href="https://kotlin.github.io/dataframe/write.html" target="_blank" rel="noreferrer"><code>.write()</code></a> 함수를 활용할 수 있습니다. 이는 결과를 공유하거나, 보고서를 작성하거나, 데이터를 추가 분석에 사용할 수 있도록 하는 데 특히 유용할 수 있습니다.</p><p>다음은 DataFrame을 필터링하고, 컬럼을 제거하고, 정제된 데이터를 JSON 파일로 저장하고, 브라우저에서 HTML 테이블을 여는 방법입니다:</p><ol><li><p>Kotlin Notebook에서 <code>.read()</code> 함수를 사용하여 <code>movies.csv</code>라는 파일을 <code>moviesDf</code>라는 DataFrame으로 로드합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;movies.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p><code>.filter</code> 메서드를 사용하여 &quot;Action&quot; 장르에 속하는 영화만 포함하도록 DataFrame을 필터링합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actionMoviesDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { genres.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span></code></pre></div></li><li><p><code>.remove</code>를 사용하여 DataFrame에서 <code>movieId</code> 컬럼을 제거합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> refinedMoviesDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actionMoviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { movieId }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refinedMoviesDf</span></span></code></pre></div></li><li><p>Kotlin DataFrame 라이브러리는 다양한 형식으로 데이터를 저장할 수 있는 다양한 쓰기 함수를 제공합니다. 이 예제에서는 수정된 <code>movies.csv</code>를 JSON 파일로 저장하기 위해 <a href="https://kotlin.github.io/dataframe/write.html#writing-to-json" target="_blank" rel="noreferrer"><code>.writeJson()</code></a> 함수가 사용됩니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refinedMoviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;movies.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p><code>.toStandaloneHTML()</code> 함수를 사용하여 DataFrame을 독립형 HTML 테이블로 변환하고 기본 웹 브라우저에서 엽니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refinedMoviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toStandaloneHTML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisplayConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rowsLimit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openInBrowser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ol><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><ul><li><a href="https://kotlin.github.io/kandy/examples.html" target="_blank" rel="noreferrer">Kandy 라이브러리</a>를 사용한 데이터 시각화 탐색</li><li><a href="/ko/kotlin/data-analysis-visualization">Kandy와 함께하는 Kotlin Notebook의 데이터 시각화</a>에서 데이터 시각화에 대한 추가 정보 찾기</li><li>Kotlin의 데이터 과학 및 분석에 사용할 수 있는 도구 및 리소스에 대한 광범위한 개요는 <a href="/ko/kotlin/data-analysis-libraries">Kotlin 및 Java 데이터 분석 라이브러리</a>를 참조하십시오.</li></ul>`,39)]))}const b=n(o,[["render",r]]);export{u as __pageData,b as default};
