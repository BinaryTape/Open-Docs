import{_ as h}from"./chunks/icon-1-done.B5D6C9SU.js";import{_ as k}from"./chunks/icon-2-done.e1N9yMQF.js";import{_ as o}from"./chunks/icon-3.DqpDG4W7.js";import{_ as d}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as E}from"./chunks/icon-5-todo.DJgVODZv.js";import{_ as g}from"./chunks/gradle-sync.fCQp85Nh.js";import{_ as u}from"./chunks/first-multiplatform-project-3.DSsneMHX.js";import{_ as m,C as l,c as y,o as F,j as s,G as t,ag as f,a,w as n}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/multiplatform-dependencies.md","filePath":"ko/kmp/multiplatform-dependencies.md","lastUpdated":1755516278000}'),c={name:"ko/kmp/multiplatform-dependencies.md"};function C(b,i,B,A,D,v){const e=l("secondary-label"),p=l("Links"),r=l("tldr");return F(),y("div",null,[i[21]||(i[21]=s("h1",{id:"프로젝트에-의존성-추가하기",tabindex:"-1"},[a("프로젝트에 의존성 추가하기 "),s("a",{class:"header-anchor",href:"#프로젝트에-의존성-추가하기","aria-label":'Permalink to "프로젝트에 의존성 추가하기"'},"​")],-1)),t(e,{ref:"IntelliJ IDEA"},null,512),t(e,{ref:"Android Studio"},null,512),t(r,null,{default:n(()=>[i[18]||(i[18]=s("p",null,"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE는 핵심 기능과 Kotlin Multiplatform 지원을 공유합니다.",-1)),i[19]||(i[19]=s("br",null,null,-1)),i[20]||(i[20]=s("p",null,[a("이 문서는 "),s("strong",null,"공유 로직 및 네이티브 UI를 사용하여 Kotlin Multiplatform 앱 생성하기"),a(" 튜토리얼의 세 번째 파트입니다. 계속 진행하기 전에 이전 단계를 완료했는지 확인하세요.")],-1)),s("p",null,[i[2]||(i[2]=s("img",{src:h,width:"20",alt:"First step"},null,-1)),i[3]||(i[3]=a()),t(p,{href:"/kmp/multiplatform-create-first-app",summary:"This tutorial uses IntelliJ IDEA, but you can also follow it in Android Studio – both IDEs share the same core functionality and Kotlin Multiplatform support. This is the first part of the Create a Kotlin Multiplatform app with shared logic and native UI tutorial. Create your Kotlin Multiplatform app Update the user interface Add dependencies Share more logic Wrap up your project"},{default:n(()=>i[0]||(i[0]=[a("Kotlin Multiplatform 앱 생성하기")])),_:1}),i[4]||(i[4]=s("br",null,null,-1)),i[5]||(i[5]=s("img",{src:k,width:"20",alt:"Second step"},null,-1)),i[6]||(i[6]=a()),t(p,{href:"/kmp/multiplatform-update-ui",summary:"This tutorial uses IntelliJ IDEA, but you can also follow it in Android Studio – both IDEs share the same core functionality and Kotlin Multiplatform support. This is the second part of the Create a Kotlin Multiplatform app with shared logic and native UI tutorial. Before proceeding, make sure you've completed previous steps. Create your Kotlin Multiplatform app Update the user interface Add dependencies Share more logic Wrap up your project"},{default:n(()=>i[1]||(i[1]=[a("사용자 인터페이스 업데이트하기")])),_:1}),i[7]||(i[7]=s("br",null,null,-1)),i[8]||(i[8]=s("img",{src:o,width:"20",alt:"Third step"},null,-1)),i[9]||(i[9]=a()),i[10]||(i[10]=s("strong",null,"의존성 추가하기",-1)),i[11]||(i[11]=s("br",null,null,-1)),i[12]||(i[12]=s("img",{src:d,width:"20",alt:"Fourth step"},null,-1)),i[13]||(i[13]=a(" 더 많은 로직 공유하기")),i[14]||(i[14]=s("br",null,null,-1)),i[15]||(i[15]=s("img",{src:E,width:"20",alt:"Fifth step"},null,-1)),i[16]||(i[16]=a(" 프로젝트 마무리하기")),i[17]||(i[17]=s("br",null,null,-1))])]),_:1}),i[22]||(i[22]=f(`<p>첫 번째 크로스 플랫폼(cross-platform) Kotlin Multiplatform 프로젝트를 이미 생성했습니다! 이제 성공적인 크로스 플랫폼 애플리케이션을 구축하는 데 필요한 서드파티 라이브러리에 의존성을 추가하는 방법을 알아보겠습니다.</p><h2 id="의존성-유형" tabindex="-1">의존성 유형 <a class="header-anchor" href="#의존성-유형" aria-label="Permalink to &quot;의존성 유형&quot;">​</a></h2><p>Kotlin Multiplatform 프로젝트에서 사용할 수 있는 의존성 유형에는 두 가지가 있습니다.</p><ul><li><p><em>멀티플랫폼 의존성(Multiplatform dependencies)</em>. 이들은 여러 타겟을 지원하며 공통 소스 세트(<code>commonMain</code>)에서 사용할 수 있는 멀티플랫폼 라이브러리입니다.</p><p>많은 최신 Android 라이브러리는 이미 <a href="https://insert-koin.io/" target="_blank" rel="noreferrer">Koin</a>, <a href="https://www.apollographql.com/" target="_blank" rel="noreferrer">Apollo</a>, <a href="https://square.github.io/okio/" target="_blank" rel="noreferrer">Okio</a>와 같은 멀티플랫폼 지원을 제공합니다. JetBrains가 Kotlin Multiplatform 라이브러리를 검색하기 위해 만든 실험적인 검색 서비스인 <a href="https://klibs.io/" target="_blank" rel="noreferrer">klibs.io</a>에서 더 많은 멀티플랫폼 라이브러리를 찾아보세요.</p></li><li><p><em>네이티브 의존성(Native dependencies)</em>. 이들은 관련 생태계의 일반 라이브러리입니다. 네이티브 프로젝트에서는 Android의 경우 Gradle, iOS의 경우 CocoaPods 또는 다른 의존성 관리자를 사용하여 주로 작업합니다.</p><p>공유 모듈을 사용할 때, 일반적으로 보안 저장소와 같은 플랫폼 API를 사용하려면 여전히 네이티브 의존성이 필요합니다. 네이티브 의존성은 네이티브 소스 세트인 <code>androidMain</code> 및 <code>iosMain</code>에 추가할 수 있습니다.</p></li></ul><p>두 가지 유형의 의존성 모두 로컬 및 외부 저장소를 사용할 수 있습니다.</p><h2 id="멀티플랫폼-의존성-추가하기" tabindex="-1">멀티플랫폼 의존성 추가하기 <a class="header-anchor" href="#멀티플랫폼-의존성-추가하기" aria-label="Permalink to &quot;멀티플랫폼 의존성 추가하기&quot;">​</a></h2><blockquote style=""><p>Android 앱 개발 경험이 있다면, 멀티플랫폼 의존성을 추가하는 것은 일반적인 Android 프로젝트에서 Gradle 의존성을 추가하는 것과 유사합니다. 유일한 차이점은 소스 세트를 지정해야 한다는 것입니다.</p></blockquote><p>앱으로 돌아가 인사를 좀 더 축제 분위기로 만들어 봅시다. 기기 정보 외에, 새해까지 남은 일수를 표시하는 함수를 추가해 보세요. 완전한 멀티플랫폼 지원을 제공하는 <code>kotlinx-datetime</code> 라이브러리는 공유 코드에서 날짜를 다루는 가장 편리한 방법입니다.</p><ol><li><p><code>shared</code> 디렉터리에 있는 <code>build.gradle.kts</code> 파일을 엽니다.</p></li><li><p>다음 의존성과 Kotlin time 옵트인(opt-in)을 <code>commonMain</code> 소스 세트의 의존성에 추가합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //... </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sourceSets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageSettings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">optIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kotlin.time.ExperimentalTime&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlinx:kotlinx-datetime:0.7.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Gradle 변경사항 동기화(Sync Gradle Changes)</strong> 버튼을 클릭하여 Gradle 파일을 동기화합니다. <img src="`+g+`" alt="Synchronize Gradle files" width="50"></p></li><li><p><code>shared/src/commonMain/kotlin</code>에서 <code>Greeting.kt</code> 파일이 있는 프로젝트 디렉터리에 <code>NewYear.kt</code>라는 새 파일을 생성합니다.</p></li><li><p><code>date-time</code> 날짜 연산을 사용하여 오늘부터 새해까지 남은 일수를 계산하는 짧은 함수로 파일을 업데이트합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.datetime.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.Clock</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> daysUntilNewYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> today </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Clock.System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">todayIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TimeZone.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentSystemDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> closestNewYear </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LocalDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(today.year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> today.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">daysUntil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(closestNewYear)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> daysPhrase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;There are only \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">daysUntilNewYear</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()} days left until New Year! 🎆&quot;</span></span></code></pre></div></li><li><p><code>Greeting.kt</code>에서 결과를 확인하기 위해 <code>Greeting</code> 클래스를 업데이트합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platform: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hi!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Guess what this is! &gt; \${platform.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reversed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">daysPhrase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>결과를 확인하려면 IntelliJ IDEA에서 <strong>composeApp</strong> 및 <strong>iosApp</strong> 구성을 다시 실행합니다.</p></li></ol><p><img src="`+u+'" alt="Updated mobile multiplatform app with external dependencies" width="500"></p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>튜토리얼의 다음 부분에서는 프로젝트에 더 많은 의존성과 더 복잡한 로직을 추가할 것입니다.</p><p><strong><a href="./multiplatform-upgrade-app">다음 파트로 진행하기</a></strong></p><h3 id="참고-자료" tabindex="-1">참고 자료 <a class="header-anchor" href="#참고-자료" aria-label="Permalink to &quot;참고 자료&quot;">​</a></h3><ul><li>모든 종류의 멀티플랫폼 의존성 작업 방법 알아보기: <a href="./multiplatform-add-dependencies">Kotlin 라이브러리, Kotlin 멀티플랫폼 라이브러리 및 기타 멀티플랫폼 프로젝트</a>.</li><li>플랫폼별 소스 세트에서 사용할 <a href="./multiplatform-android-dependencies">Android 의존성 추가 방법</a> 및 <a href="./multiplatform-ios-dependencies">CocoaPods 유무에 관계없이 iOS 의존성 추가 방법</a> 알아보기.</li><li>샘플 프로젝트에서 <a href="./multiplatform-samples">Android 및 iOS 라이브러리 사용 방법</a> 예시 확인하기.</li></ul><h2 id="도움-받기" tabindex="-1">도움 받기 <a class="header-anchor" href="#도움-받기" aria-label="Permalink to &quot;도움 받기&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>. <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">초대 받기</a> 및 <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 채널 참여.</li><li><strong>Kotlin 이슈 트래커</strong>. <a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">새로운 이슈 보고하기</a>.</li></ul>',17))])}const _=m(c,[["render",C]]);export{T as __pageData,_ as default};
