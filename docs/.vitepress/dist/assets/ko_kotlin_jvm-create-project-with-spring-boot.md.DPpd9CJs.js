import{_ as d}from"./chunks/icon-1.K8qzZaho.js";import{_ as g}from"./chunks/icon-2-todo.CF_tKCD9.js";import{_ as E}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as c}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as u,a as m,b as y,c as F,d as b}from"./chunks/spring-application-response.CubByq9P.js";import{_ as C,C as p,c as B,o as f,j as s,G as a,ag as e,a as i,w as t}from"./chunks/framework.Bksy39di.js";const J=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/jvm-create-project-with-spring-boot.md","filePath":"ko/kotlin/jvm-create-project-with-spring-boot.md","lastUpdated":1754307826000}'),A={name:"ko/kotlin/jvm-create-project-with-spring-boot.md"};function S(_,n,q,v,D,w){const r=p("web-summary"),k=p("tldr"),l=p("def"),o=p("deflist"),h=p("code-block");return f(),B("div",null,[n[14]||(n[14]=s("h1",{id:"kotlin으로-spring-boot-프로젝트-생성하기",tabindex:"-1"},[i("Kotlin으로 Spring Boot 프로젝트 생성하기 "),s("a",{class:"header-anchor",href:"#kotlin으로-spring-boot-프로젝트-생성하기","aria-label":'Permalink to "Kotlin으로 Spring Boot 프로젝트 생성하기"'},"​")],-1)),a(r,null,{default:t(()=>n[0]||(n[0]=[i("IntelliJ IDEA를 사용하여 Kotlin으로 Spring Boot 애플리케이션을 생성합니다.")])),_:1}),a(k,null,{default:t(()=>n[1]||(n[1]=[s("p",null,[i("이것은 "),s("strong",null,"Spring Boot와 Kotlin 시작하기"),i(" 튜토리얼의 첫 번째 부분입니다:")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:d,width:"20",alt:"First step"}),i(),s("strong",null,"Kotlin으로 Spring Boot 프로젝트 생성하기"),s("br"),s("img",{src:g,width:"20",alt:"Second step"}),i(" Spring Boot 프로젝트에 데이터 클래스 추가하기"),s("br"),s("img",{src:E,width:"20",alt:"Third step"}),i(" Spring Boot 프로젝트에 데이터베이스 지원 추가하기"),s("br"),s("img",{src:c,width:"20",alt:"Fourth step"}),i(" Spring Data CrudRepository를 사용하여 데이터베이스 액세스하기"),s("br")],-1)])),_:1}),n[15]||(n[15]=e('<p>이 튜토리얼의 첫 번째 부분은 IntelliJ IDEA에서 프로젝트 마법사(Project Wizard)를 사용하여 Gradle로 Spring Boot 프로젝트를 생성하는 방법을 보여줍니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>이 튜토리얼은 Gradle을 빌드 시스템으로 사용할 것을 요구하지 않습니다. Maven을 사용하더라도 동일한 단계를 따를 수 있습니다.</p></div><h2 id="시작하기-전에" tabindex="-1">시작하기 전에 <a class="header-anchor" href="#시작하기-전에" aria-label="Permalink to &quot;시작하기 전에&quot;">​</a></h2><p><a href="https://www.jetbrains.com/idea/download/index.html" target="_blank" rel="noreferrer">IntelliJ IDEA Ultimate Edition</a>의 최신 버전을 다운로드하여 설치하세요.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>IntelliJ IDEA Community Edition 또는 다른 IDE를 사용하는 경우, <a href="https://start.spring.io/#!language=kotlin&amp;type=gradle-project-kotlin" target="_blank" rel="noreferrer">웹 기반 프로젝트 생성기</a>를 사용하여 Spring Boot 프로젝트를 생성할 수 있습니다.</p></div><h2 id="spring-boot-프로젝트-생성하기" tabindex="-1">Spring Boot 프로젝트 생성하기 <a class="header-anchor" href="#spring-boot-프로젝트-생성하기" aria-label="Permalink to &quot;Spring Boot 프로젝트 생성하기&quot;">​</a></h2><p>IntelliJ IDEA Ultimate Edition에서 프로젝트 마법사를 사용하여 Kotlin으로 새 Spring Boot 프로젝트를 생성하세요:</p><ol><li><p>IntelliJ IDEA에서 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>를 선택하세요.</p></li><li><p>왼쪽 패널에서 <strong>New Project</strong> | <strong>Spring Boot</strong>를 선택하세요.</p></li><li><p><strong>New Project</strong> 창에서 다음 필드와 옵션을 지정하세요:</p><ul><li><p><strong>Name</strong>: demo</p></li><li><p><strong>Language</strong>: Kotlin</p></li><li><p><strong>Type</strong>: Gradle - Kotlin</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>이 옵션은 빌드 시스템과 DSL을 지정합니다.</p></div></li><li><p><strong>Package name</strong>: com.example.demo</p></li><li><p><strong>JDK</strong>: Java JDK</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>이 튜토리얼은 <strong>Amazon Corretto 버전 23</strong>을 사용합니다. JDK가 설치되어 있지 않다면, 드롭다운 목록에서 다운로드할 수 있습니다.</p></div></li><li><p><strong>Java</strong>: 17</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Java 17이 설치되어 있지 않다면, JDK 드롭다운 목록에서 다운로드할 수 있습니다.</p></div></li></ul><p><img src="'+u+'" alt="Spring Boot 프로젝트 생성" width="800"></p></li><li><p>모든 필드를 지정했는지 확인하고 <strong>Next</strong>를 클릭하세요.</p></li><li><p>튜토리얼에 필요한 다음 의존성(dependency)을 선택하세요:</p><ul><li><strong>Web | Spring Web</strong></li><li><strong>SQL | Spring Data JDBC</strong></li><li><strong>SQL | H2 Database</strong></li></ul><p><img src="'+m+'" alt="Spring Boot 프로젝트 설정" width="800"></p></li><li><p><strong>Create</strong>를 클릭하여 프로젝트를 생성하고 설정하세요.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>IDE가 새 프로젝트를 생성하고 엽니다. 프로젝트 의존성을 다운로드하고 가져오는 데 시간이 걸릴 수 있습니다.</p></div></li><li><p>이후, <strong>Project view</strong>에서 다음 구조를 확인할 수 있습니다:</p><p><img src="'+y+'" alt="Spring Boot 프로젝트 설정" width="400"></p><p>생성된 Gradle 프로젝트는 Maven의 표준 디렉터리 레이아웃과 일치합니다:</p><ul><li>애플리케이션에 속하는 패키지와 클래스는 <code>main/kotlin</code> 폴더 아래에 있습니다.</li><li>애플리케이션의 진입점은 <code>DemoApplication.kt</code> 파일의 <code>main()</code> 메서드입니다.</li></ul></li></ol>',8)),n[16]||(n[16]=s("h2",{"initial-collapse-state":"collapsed",collapsible:"true",id:"프로젝트-gradle-빌드-파일-살펴보기",tabindex:"-1"},[i("프로젝트 Gradle 빌드 파일 살펴보기 "),s("a",{class:"header-anchor",href:"#프로젝트-gradle-빌드-파일-살펴보기","aria-label":'Permalink to "프로젝트 Gradle 빌드 파일 살펴보기 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),n[17]||(n[17]=e(`<p><code>build.gradle.kts</code> 파일을 엽니다: 이 파일은 애플리케이션에 필요한 의존성 목록을 포함하는 Gradle Kotlin 빌드 스크립트입니다.</p><p>Gradle 파일은 Spring Boot의 표준이지만, <code>kotlin(&quot;plugin.spring&quot;)</code>과 같은 kotlin-spring Gradle 플러그인을 포함하여 필요한 Kotlin 의존성도 포함합니다.</p><p>다음은 모든 부분과 의존성에 대한 설명이 포함된 전체 스크립트입니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.9.25&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // The version of Kotlin to use</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;plugin.spring&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.9.25&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // The Kotlin Spring plugin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.4.5&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.spring.dependency-management&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.1.7&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0.0.1-SNAPSHOT&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    toolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot:spring-boot-starter-data-jdbc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.fasterxml.jackson.module:jackson-module-kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Jackson extensions for Kotlin for working with JSON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-reflect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin reflection library, required for working with Spring</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runtimeOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.h2database:h2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot:spring-boot-starter-test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-test-junit5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testRuntimeOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.junit.platform:junit-platform-launcher&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xjsr305=strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`-Xjsr305=strict\` enables the strict mode for JSR-305 annotations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    useJUnitPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>보시다시피, Gradle 빌드 파일에는 몇 가지 Kotlin 관련 아티팩트가 추가되어 있습니다:</p><ol><li><p><code>plugins</code> 블록에는 두 개의 Kotlin 아티팩트가 있습니다:</p><ul><li><code>kotlin(&quot;jvm&quot;)</code> – 프로젝트에서 사용할 Kotlin 버전을 정의하는 플러그인</li><li><code>kotlin(&quot;plugin.spring&quot;)</code> – Kotlin 클래스에 <code>open</code> 수정자를 추가하여 Spring Framework 기능과 호환되도록 하는 Kotlin Spring 컴파일러 플러그인</li></ul></li><li><p><code>dependencies</code> 블록에는 몇 가지 Kotlin 관련 모듈이 나열되어 있습니다:</p><ul><li><code>com.fasterxml.jackson.module:jackson-module-kotlin</code> – Kotlin 클래스 및 데이터 클래스의 직렬화 및 역직렬화를 지원하는 모듈</li><li><code>org.jetbrains.kotlin:kotlin-reflect</code> – Kotlin 리플렉션 라이브러리</li></ul></li><li><p>의존성 섹션 다음에는 <code>kotlin</code> 플러그인 구성 블록을 볼 수 있습니다. 여기에서 컴파일러에 추가 인수를 추가하여 다양한 언어 기능을 활성화하거나 비활성화할 수 있습니다.</p></li></ol><p>Kotlin 컴파일러 옵션에 대한 자세한 내용은 <a href="/ko/kotlin/gradle-compiler-options"></a>에서 확인할 수 있습니다.</p><h2 id="생성된-spring-boot-애플리케이션-살펴보기" tabindex="-1">생성된 Spring Boot 애플리케이션 살펴보기 <a class="header-anchor" href="#생성된-spring-boot-애플리케이션-살펴보기" aria-label="Permalink to &quot;생성된 Spring Boot 애플리케이션 살펴보기&quot;">​</a></h2><p><code>DemoApplication.kt</code> 파일을 엽니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DemoApplication.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.boot.autoconfigure.SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.boot.runApplication</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DemoApplication</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DemoApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,10)),a(o,{collapsible:"true"},{default:t(()=>[a(l,{title:"클래스 선언하기 – class DemoApplication"},{default:t(()=>n[2]||(n[2]=[s("p",null,[i("패키지 선언과 임포트 문 바로 뒤에 첫 번째 클래스 선언인 "),s("code",null,"class DemoApplication"),i("을 볼 수 있습니다.")],-1),s("p",null,[i("Kotlin에서 클래스에 멤버(프로퍼티 또는 함수)가 포함되지 않으면 클래스 본문("),s("code",null,"{}"),i(")을 완전히 생략할 수 있습니다.")],-1)])),_:1}),a(l,{title:"@SpringBootApplication 애노테이션"},{default:t(()=>n[3]||(n[3]=[s("p",null,[s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.using-the-springbootapplication-annotation"},[s("code",null,"@SpringBootApplication"),i(" 애노테이션")]),i("은 Spring Boot 애플리케이션의 편의 애노테이션입니다. 이 애노테이션은 Spring Boot의 "),s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.auto-configuration"},"자동 구성"),i(", "),s("a",{href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.html"},"컴포넌트 스캔"),i('을 활성화하고 "애플리케이션 클래스"에 추가 구성을 정의할 수 있도록 합니다. ')],-1)])),_:1}),a(l,{title:"프로그램 진입점 – main()"},{default:t(()=>n[4]||(n[4]=[s("p",null,[i("["),s("a",{href:"/ko/kotlin/basic-syntax#program-entry-point"},[s("code",null,"main()")]),i("] 함수는 애플리케이션의 진입점입니다.")],-1),s("p",null,[s("code",null,"DemoApplication"),i(" 클래스 외부에 ["),s("a",{href:"/ko/kotlin/functions#function-scope"},"최상위 함수"),i("]로 선언됩니다. "),s("code",null,"main()"),i(" 함수는 Spring Framework를 사용하여 애플리케이션을 시작하기 위해 Spring의 "),s("code",null,"runApplication(*args)"),i(" 함수를 호출합니다.")],-1)])),_:1}),a(l,{title:"가변 인자 – args: Array<String>"},{default:t(()=>n[5]||(n[5]=[s("p",null,[s("code",null,"runApplication()"),i(" 함수의 선언을 확인하면, 함수의 매개변수가 ["),s("a",{href:"/ko/kotlin/functions#variable-number-of-arguments-varargs"},[s("code",null,"vararg"),i(" 수정자")]),i("]로 표시되어 있는 것을 볼 수 있습니다: "),s("code",null,"vararg args: String"),i(". 이는 함수에 가변 개수의 String 인자를 전달할 수 있음을 의미합니다. ")],-1)])),_:1}),a(l,{title:"스프레드 연산자 – (*args)"},{default:t(()=>n[6]||(n[6]=[s("p",null,[s("code",null,"args"),i("는 String 배열로 선언된 "),s("code",null,"main()"),i(" 함수의 매개변수입니다. String 배열이 있고 그 내용을 함수에 전달하고자 할 때, 스프레드 연산자(배열 앞에 별표 기호 "),s("code",null,"*"),i("를 붙입니다)를 사용하세요. ")],-1)])),_:1})]),_:1}),n[18]||(n[18]=e(`<h2 id="컨트롤러-생성하기" tabindex="-1">컨트롤러 생성하기 <a class="header-anchor" href="#컨트롤러-생성하기" aria-label="Permalink to &quot;컨트롤러 생성하기&quot;">​</a></h2><p>애플리케이션은 실행할 준비가 되었지만, 먼저 로직을 업데이트해 봅시다.</p><p>Spring 애플리케이션에서 컨트롤러는 웹 요청을 처리하는 데 사용됩니다. 동일한 패키지에 <code>DemoApplication.kt</code> 파일 옆에 다음과 같이 <code>MessageController</code> 클래스를 포함하는 <code>MessageController.kt</code> 파일을 생성하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MessageController.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.GetMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.RequestParam</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.RestController</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MessageController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RequestParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,4)),a(o,{collapsible:"true"},{default:t(()=>[a(l,{title:"@RestController 애노테이션"},{default:t(()=>n[7]||(n[7]=[s("p",null,[i("Spring에게 "),s("code",null,"MessageController"),i("가 REST 컨트롤러임을 알려야 하므로, "),s("code",null,"@RestController"),i(" 애노테이션으로 표시해야 합니다.")],-1),s("p",null,[i("이 애노테이션은 "),s("code",null,"DemoApplication"),i(" 클래스와 동일한 패키지에 있기 때문에 이 클래스가 컴포넌트 스캔에 의해 감지될 것임을 의미합니다.")],-1)])),_:1}),a(l,{title:"@GetMapping 애노테이션"},{default:t(()=>[n[9]||(n[9]=s("p",null,[s("code",null,"@GetMapping"),i("은 HTTP GET 호출에 해당하는 엔드포인트를 구현하는 REST 컨트롤러의 함수를 표시합니다:")],-1)),a(h,{lang:"kotlin"},{default:t(()=>n[8]||(n[8]=[i(' @GetMapping("/") fun index(@RequestParam("name") name: String) = "Hello, $name!" ')])),_:1})]),_:1}),a(l,{title:"@RequestParam 애노테이션"},{default:t(()=>n[10]||(n[10]=[s("p",null,[i("함수 매개변수 "),s("code",null,"name"),i("은 "),s("code",null,"@RequestParam"),i(" 애노테이션으로 표시됩니다. 이 애노테이션은 메서드 매개변수가 웹 요청 매개변수에 바인딩되어야 함을 나타냅니다.")],-1),s("p",null,[i("따라서 루트에서 애플리케이션에 접근하고 "),s("code",null,"/?name=<your-value>"),i('와 같이 "name"이라는 요청 매개변수를 제공하면, 해당 매개변수 값이 '),s("code",null,"index()"),i(" 함수를 호출하는 인자로 사용됩니다.")],-1)])),_:1}),a(l,{title:"단일 표현식 함수 – index()"},{default:t(()=>n[11]||(n[11]=[s("p",null,[s("code",null,"index()"),i(" 함수는 하나의 문장만 포함하므로, ["),s("a",{href:"/ko/kotlin/functions#single-expression-functions"},"단일 표현식 함수"),i("]로 선언할 수 있습니다.")],-1),s("p",null,[i("이는 중괄호를 생략하고 등호("),s("code",null,"="),i(") 뒤에 본문을 지정할 수 있음을 의미합니다.")],-1)])),_:1}),a(l,{title:"함수 반환 타입에 대한 타입 추론"},{default:t(()=>n[12]||(n[12]=[s("p",null,[s("code",null,"index()"),i(" 함수는 반환 타입을 명시적으로 선언하지 않습니다. 대신, 컴파일러는 등호("),s("code",null,"="),i(")의 오른쪽에 있는 문장의 결과를 보고 반환 타입을 추론합니다.")],-1),s("p",null,[s("code",null,"Hello, $name!"),i(" 표현식의 타입은 "),s("code",null,"String"),i("이며, 따라서 함수의 반환 타입도 "),s("code",null,"String"),i("입니다.")],-1)])),_:1}),a(l,{title:"문자열 템플릿 – $name"},{default:t(()=>n[13]||(n[13]=[s("p",null,[s("code",null,"Hello, $name!"),i(" 표현식은 Kotlin에서 ["),s("a",{href:"/ko/kotlin/strings#string-templates"},[s("i",null,"문자열 템플릿")]),i("]이라고 불립니다.")],-1),s("p",null,"문자열 템플릿은 포함된 표현식을 포함하는 문자열 리터럴입니다.",-1),s("p",null,"이는 문자열 연결 연산을 편리하게 대체할 수 있습니다.",-1)])),_:1})]),_:1}),n[19]||(n[19]=e('<h2 id="애플리케이션-실행하기" tabindex="-1">애플리케이션 실행하기 <a class="header-anchor" href="#애플리케이션-실행하기" aria-label="Permalink to &quot;애플리케이션 실행하기&quot;">​</a></h2><p>이제 Spring 애플리케이션을 실행할 준비가 되었습니다:</p><ol><li><p><code>DemoApplication.kt</code> 파일에서 <code>main()</code> 메서드 옆의 거터에 있는 녹색 <strong>Run</strong> 아이콘을 클릭하세요:</p><p><img src="'+F+'" alt="Spring Boot 애플리케이션 실행" width="706"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>터미널에서 <code>./gradlew bootRun</code> 명령을 실행할 수도 있습니다.</p></div><p>이렇게 하면 컴퓨터에서 로컬 서버가 시작됩니다.</p></li><li><p>애플리케이션이 시작되면 다음 URL을 여세요:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://localhost:8080?name=John</span></span></code></pre></div><p>&quot;Hello, John!&quot;이 응답으로 출력되는 것을 볼 수 있습니다:</p><p><img src="'+b+'" alt="Spring 애플리케이션 응답" width="706"></p></li></ol><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>이 튜토리얼의 다음 부분에서는 Kotlin 데이터 클래스와 이를 애플리케이션에서 사용하는 방법에 대해 알아볼 것입니다.</p><p><strong><a href="/ko/kotlin/jvm-spring-boot-add-data-class">다음 챕터로 진행하기</a></strong></p>',6))])}const R=C(A,[["render",S]]);export{J as __pageData,R as default};
