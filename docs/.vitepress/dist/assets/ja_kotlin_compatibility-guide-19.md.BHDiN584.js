import{_ as o,c as t,o as r,ag as n}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"Kotlin 1.9 互換性ガイド","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/compatibility-guide-19.md","filePath":"ja/kotlin/compatibility-guide-19.md","lastUpdated":1754307826000}'),a={name:"ja/kotlin/compatibility-guide-19.md"};function l(s,e,i,c,p,g){return r(),t("div",null,e[0]||(e[0]=[n('<h1 id="kotlin-1-9-互換性ガイド" tabindex="-1">Kotlin 1.9 互換性ガイド <a class="header-anchor" href="#kotlin-1-9-互換性ガイド" aria-label="Permalink to &quot;Kotlin 1.9 互換性ガイド&quot;">​</a></h1><p><em><a href="/ja/kotlin/kotlin-evolution-principles">言語のモダンさを保つ</a></em> および <em><a href="/ja/kotlin/kotlin-evolution-principles">快適なアップデート</a></em> は、Kotlin言語設計における基本原則の一つです。前者は、言語の進化を妨げる構文は削除すべきであると述べ、後者は、コードの移行を可能な限り円滑にするために、この削除は事前に十分に伝達されるべきであると述べています。</p><p>言語の変更のほとんどは、更新チェンジログやコンパイラの警告など、他のチャネルを通じてすでに発表されていますが、このドキュメントではそれらすべてをまとめ、Kotlin 1.8からKotlin 1.9への移行に関する完全なリファレンスを提供します。</p><h2 id="基本的な用語" tabindex="-1">基本的な用語 <a class="header-anchor" href="#基本的な用語" aria-label="Permalink to &quot;基本的な用語&quot;">​</a></h2><p>このドキュメントでは、いくつかの種類の互換性について説明します。</p><ul><li><em>ソース</em>: ソース非互換な変更（source-incompatible change）とは、以前は問題なくコンパイルできていたコード（エラーや警告なし）が、もはやコンパイルできなくなる変更を指します。</li><li><em>バイナリ</em>: 2つのバイナリアーティファクトは、それらを入れ替えてもロードエラーやリンクエラーが発生しない場合、バイナリ互換（binary-compatible）であると言われます。</li><li><em>動作</em>: 変更が動作非互換（behavioral-incompatible）であると言われるのは、同じプログラムが変更適用前後で異なる動作を示す場合です。</li></ul><p>これらの定義は純粋なKotlinに対してのみ与えられていることに注意してください。他の言語の観点（例えばJavaから見た）Kotlinコードの互換性については、このドキュメントの範囲外です。</p><h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><h3 id="言語バージョン-1-3-の削除" tabindex="-1">言語バージョン 1.3 の削除 <a class="header-anchor" href="#言語バージョン-1-3-の削除" aria-label="Permalink to &quot;言語バージョン 1.3 の削除&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-61111/Remove-language-version-1.3" target="_blank" rel="noreferrer">KT-61111</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.9 では言語バージョン1.9を導入し、言語バージョン1.3のサポートを削除します。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 警告を報告</li><li>1.9.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="スーパインターフェース型が関数リテラルの場合のスーパークラスのコンストラクタ呼び出しの禁止" tabindex="-1">スーパインターフェース型が関数リテラルの場合のスーパークラスのコンストラクタ呼び出しの禁止 <a class="header-anchor" href="#スーパインターフェース型が関数リテラルの場合のスーパークラスのコンストラクタ呼び出しの禁止" aria-label="Permalink to &quot;スーパインターフェース型が関数リテラルの場合のスーパークラスのコンストラクタ呼び出しの禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46344" target="_blank" rel="noreferrer">KT-46344</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: インターフェースが関数リテラル型から継承している場合、Kotlin 1.9 ではスーパークラスのコンストラクタ呼び出しを禁止します。そのようなコンストラクタは存在しないためです。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 警告を報告（またはプログレッシブモードではエラー）</li><li>1.9.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="アノテーションのパラメータ型における循環の禁止" tabindex="-1">アノテーションのパラメータ型における循環の禁止 <a class="header-anchor" href="#アノテーションのパラメータ型における循環の禁止" aria-label="Permalink to &quot;アノテーションのパラメータ型における循環の禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47932" target="_blank" rel="noreferrer">KT-47932</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.9 は、アノテーションの型が、直接的または間接的に、そのパラメータ型の1つとして使用されることを禁止します。これにより循環が作成されるのを防ぎます。 ただし、アノテーション型の <code>Array</code> または <code>vararg</code> であるパラメータ型を持つことは許可されます。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: アノテーションパラメータの型における循環について警告を報告（またはプログレッシブモードではエラー）</li><li>1.9.0: 警告をエラーに昇格。一時的に1.9より前の動作に戻すには <code>-XXLanguage:-ProhibitCyclesInAnnotations</code> を使用できます。</li></ul></blockquote><h3 id="パラメータのない関数型に対する-extensionfunctiontype-アノテーションの使用禁止" tabindex="-1">パラメータのない関数型に対する <code>@ExtensionFunctionType</code> アノテーションの使用禁止 <a class="header-anchor" href="#パラメータのない関数型に対する-extensionfunctiontype-アノテーションの使用禁止" aria-label="Permalink to &quot;パラメータのない関数型に対する `@ExtensionFunctionType` アノテーションの使用禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-43527" target="_blank" rel="noreferrer">KT-43527</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.9 は、パラメータのない関数型、または関数型ではない型に対して <code>@ExtensionFunctionType</code> アノテーションを使用することを禁止します。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 関数型ではない型に対するアノテーションについては警告を報告し、関数型である型に対するアノテーションについてはエラーを報告</li><li>1.9.0: 関数型に対する警告をエラーに昇格</li></ul></blockquote><h3 id="javaフィールドへの代入における型不一致の禁止" tabindex="-1">Javaフィールドへの代入における型不一致の禁止 <a class="header-anchor" href="#javaフィールドへの代入における型不一致の禁止" aria-label="Permalink to &quot;Javaフィールドへの代入における型不一致の禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48994" target="_blank" rel="noreferrer">KT-48994</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.9 は、Javaフィールドに代入された値の型がそのJavaフィールドの投影型に一致しないことを検出した場合、コンパイラエラーを報告します。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 投影されたJavaフィールドの型が代入された値の型に一致しない場合に警告を報告（またはプログレッシブモードではエラー）</li><li>1.9.0: 警告をエラーに昇格。一時的に1.9より前の動作に戻すには <code>-XXLanguage:-RefineTypeCheckingOnAssignmentsToJavaFields</code> を使用できます。</li></ul></blockquote><h3 id="プラットフォーム型におけるnull可能性アサーション例外でのソースコード抜粋の非表示" tabindex="-1">プラットフォーム型におけるNull可能性アサーション例外でのソースコード抜粋の非表示 <a class="header-anchor" href="#プラットフォーム型におけるnull可能性アサーション例外でのソースコード抜粋の非表示" aria-label="Permalink to &quot;プラットフォーム型におけるNull可能性アサーション例外でのソースコード抜粋の非表示&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-57570" target="_blank" rel="noreferrer">KT-57570</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 動作</p><p><strong>Short summary</strong>: Kotlin 1.9 では、式のnullチェックによって生成される例外メッセージにソースコードの抜粋が含まれなくなります。代わりに、メソッドまたはフィールドの名前が表示されます。 式がメソッドまたはフィールドでない場合、メッセージに追加情報は提供されません。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.9.0: 式のnullチェックによって生成される例外メッセージにソースコードの抜粋が含まれる</li><li>1.9.0: 式のnullチェックによって生成される例外メッセージにメソッドまたはフィールド名のみが含まれる。一時的に1.9より前の動作に戻すには <code>-XXLanguage:-NoSourceCodeInNotNullAssertionExceptions</code> を使用できます。</li></ul></blockquote><h3 id="抽象スーパークラスメンバーへのスーパークラス呼び出しの委譲の禁止" tabindex="-1">抽象スーパークラスメンバーへのスーパークラス呼び出しの委譲の禁止 <a class="header-anchor" href="#抽象スーパークラスメンバーへのスーパークラス呼び出しの委譲の禁止" aria-label="Permalink to &quot;抽象スーパークラスメンバーへのスーパークラス呼び出しの委譲の禁止&quot;">​</a></h3><blockquote><p><strong>Issues</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-45508" target="_blank" rel="noreferrer">KT-45508</a>, <a href="https://youtrack.jetbrains.com/issue/KT-49017" target="_blank" rel="noreferrer">KT-49017</a>, <a href="https://youtrack.jetbrains.com/issue/KT-38078" target="_blank" rel="noreferrer">KT-38078</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin は、明示的または暗黙的なスーパークラス呼び出しがスーパークラスの_抽象_メンバーに委譲される場合に、スーパインターフェースにデフォルトの実装がある場合でも、コンパイルエラーを報告します。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.5.20: すべての抽象メンバーをオーバーライドしない非抽象クラスが使用された場合に警告を導入</li><li>1.7.0: スーパークラス呼び出しが実際にスーパークラスの抽象メンバーにアクセスする場合に警告を報告</li><li>1.7.0: <code>-Xjvm-default=all</code> または <code>-Xjvm-default=all-compatibility</code> 互換性モードが有効になっている場合、影響を受けるすべてのケースでエラーを報告。 プログレッシブモードでエラーを報告</li><li>1.8.0: スーパークラスのオーバーライドされていない抽象メソッドを持つ具象クラスを宣言するケース、および<code>Any</code> メソッドのスーパークラス呼び出しがスーパークラスで抽象としてオーバーライドされているケースでエラーを報告</li><li>1.9.0: スーパークラスの抽象メソッドへの明示的なスーパークラス呼び出しを含む、影響を受けるすべてのケースでエラーを報告</li></ul></blockquote><h3 id="when-式の対象あり構文における紛らわしい文法の非推奨化" tabindex="-1"><code>when</code> 式の対象あり構文における紛らわしい文法の非推奨化 <a class="header-anchor" href="#when-式の対象あり構文における紛らわしい文法の非推奨化" aria-label="Permalink to &quot;`when` 式の対象あり構文における紛らわしい文法の非推奨化&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48385" target="_blank" rel="noreferrer">KT-48385</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.6 では、<code>when</code> 条件式におけるいくつかの紛らわしい文法構造を非推奨にしました。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 影響を受ける式に対して非推奨警告を導入</li><li>1.8.0: この警告をエラーに昇格。 一時的に1.8より前の動作に戻すには <code>-XXLanguage:-ProhibitConfusingSyntaxInWhenBranches</code> を使用できます。</li><li>&gt;= 2.1: いくつかの非推奨の構造を新しい言語機能のために再利用</li></ul></blockquote><h3 id="異なる数値型間の暗黙的な型強制の防止" tabindex="-1">異なる数値型間の暗黙的な型強制の防止 <a class="header-anchor" href="#異なる数値型間の暗黙的な型強制の防止" aria-label="Permalink to &quot;異なる数値型間の暗黙的な型強制の防止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48645" target="_blank" rel="noreferrer">KT-48645</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 動作</p><p><strong>Short summary</strong>: Kotlin は、意味的にその型へのダウンキャストのみが必要とされる場合、数値がプリミティブ数値型に自動変換されることを回避します。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.5.30: 影響を受けるすべてのケースで以前の動作</li><li>1.5.30: 生成されたプロパティデリゲートアクセサにおけるダウンキャスト動作を修正。 一時的に1.5.30より前の修正動作に戻すには <code>-Xuse-old-backend</code> を使用できます。</li><li>&gt;= 2.0: その他の影響を受けるケースにおけるダウンキャスト動作を修正</li></ul></blockquote><h3 id="ジェネリック型エイリアスの使用における上限違反の禁止-エイリアスされた型の型引数のジェネリック型引数で使用される型パラメータ" tabindex="-1">ジェネリック型エイリアスの使用における上限違反の禁止（エイリアスされた型の型引数のジェネリック型引数で使用される型パラメータ） <a class="header-anchor" href="#ジェネリック型エイリアスの使用における上限違反の禁止-エイリアスされた型の型引数のジェネリック型引数で使用される型パラメータ" aria-label="Permalink to &quot;ジェネリック型エイリアスの使用における上限違反の禁止（エイリアスされた型の型引数のジェネリック型引数で使用される型パラメータ）&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-54066" target="_blank" rel="noreferrer">KT-54066</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin は、型エイリアスの型パラメータが、エイリアスされた型の型引数のジェネリック型引数として使用される場合（例: <code>typealias Alias&lt;T&gt; = Base&lt;List&lt;T&gt;&gt;</code>）、エイリアスされた型の対応する型パラメータの上限制約に違反する型引数を持つ型エイリアスの使用を禁止します。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.8.0: ジェネリック型エイリアスの使用に、エイリアスされた型の対応する型パラメータの上限制約に違反する型引数がある場合に警告を報告</li><li>2.0.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="公開シグネチャでローカル型を近似する際にnull可能性を保持する" tabindex="-1">公開シグネチャでローカル型を近似する際にnull可能性を保持する <a class="header-anchor" href="#公開シグネチャでローカル型を近似する際にnull可能性を保持する" aria-label="Permalink to &quot;公開シグネチャでローカル型を近似する際にnull可能性を保持する&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-53982" target="_blank" rel="noreferrer">KT-53982</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース、バイナリ</p><p><strong>Short summary</strong>: 明示的に指定された戻り値の型なしで式本体関数からローカルまたは匿名型が返される場合、Kotlinコンパイラは、その型の既知のスーパタイプを使用して戻り値の型を推論（または近似）します。 この際、実際にはnull値が返される可能性があるにもかかわらず、コンパイラが非null型を推論する場合があります。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.8.0: 柔軟な型を柔軟なスーパタイプで近似</li><li>1.8.0: null許容であるべき宣言が非null型として推論される場合に警告を報告し、ユーザーに型を明示的に指定するよう促す</li><li>2.0.0: null許容型をnull許容スーパタイプで近似。 一時的に2.0より前の動作に戻すには <code>-XXLanguage:-KeepNullabilityWhenApproximatingLocalType</code> を使用できます。</li></ul></blockquote><h3 id="オーバーライドによる非推奨の伝播の停止" tabindex="-1">オーバーライドによる非推奨の伝播の停止 <a class="header-anchor" href="#オーバーライドによる非推奨の伝播の停止" aria-label="Permalink to &quot;オーバーライドによる非推奨の伝播の停止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47902" target="_blank" rel="noreferrer">KT-47902</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.9 では、スーパークラスの非推奨メンバーからサブクラスのオーバーライドメンバーへの非推奨の伝播を停止します。これにより、スーパークラスのメンバーを非推奨にする一方で、サブクラスでは非推奨にしないという明示的なメカニズムが提供されます。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 将来の動作変更のメッセージと、この警告を抑制するか、非推奨メンバーのオーバーライドに明示的に <code>@Deprecated</code> アノテーションを記述するよう促す警告を報告</li><li>1.9.0: オーバーライドされたメンバーへの非推奨ステータスの伝播を停止します。この変更はプログレッシブモードでもすぐに有効になります。</li></ul></blockquote><h3 id="アノテーションクラスのパラメータ宣言以外の場所でのコレクションリテラルの使用禁止" tabindex="-1">アノテーションクラスのパラメータ宣言以外の場所でのコレクションリテラルの使用禁止 <a class="header-anchor" href="#アノテーションクラスのパラメータ宣言以外の場所でのコレクションリテラルの使用禁止" aria-label="Permalink to &quot;アノテーションクラスのパラメータ宣言以外の場所でのコレクションリテラルの使用禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-39041" target="_blank" rel="noreferrer">KT-39041</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin は、コレクションリテラルを、アノテーションクラスのパラメータに配列を渡すため、またはこれらのパラメータのデフォルト値を指定するために、制限された方法で使用することを許可しています。 しかし、それ以外にも、Kotlin はアノテーションクラス内の他の場所、例えばネストされたオブジェクト内でコレクションリテラルを使用することを許可していました。Kotlin 1.9 は、アノテーションクラスのパラメータのデフォルト値を除くどこかでのコレクションリテラルの使用を禁止します。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: アノテーションクラスのネストされたオブジェクト内の配列リテラルについて警告を報告（またはプログレッシブモードではエラー）</li><li>1.9.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="デフォルト値式におけるパラメータの前方参照の禁止" tabindex="-1">デフォルト値式におけるパラメータの前方参照の禁止 <a class="header-anchor" href="#デフォルト値式におけるパラメータの前方参照の禁止" aria-label="Permalink to &quot;デフォルト値式におけるパラメータの前方参照の禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-25694" target="_blank" rel="noreferrer">KT-25694</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.9 は、他のパラメータのデフォルト値式におけるパラメータの前方参照を禁止します。これにより、パラメータがデフォルト値式でアクセスされる時点までに、関数に渡された値、またはそれ自身のデフォルト値式によって初期化された値がすでに存在することが保証されます。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: デフォルト値を持つパラメータが、それより前の別のパラメータのデフォルト値で参照される場合に警告を報告（またはプログレッシブモードではエラー）</li><li>1.9.0: 警告をエラーに昇格。 一時的に1.9より前の動作に戻すには <code>-XXLanguage:-ProhibitIllegalValueParameterUsageInDefaultArguments</code> を使用できます。</li></ul></blockquote><h3 id="インライン関数パラメータに対する拡張呼び出しの禁止" tabindex="-1">インライン関数パラメータに対する拡張呼び出しの禁止 <a class="header-anchor" href="#インライン関数パラメータに対する拡張呼び出しの禁止" aria-label="Permalink to &quot;インライン関数パラメータに対する拡張呼び出しの禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-52502" target="_blank" rel="noreferrer">KT-52502</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin はインライン関数パラメータを別のインライン関数にレシーバとして渡すことを許可していましたが、そのようなコードをコンパイルする際に常にコンパイラ例外を引き起こしました。 Kotlin 1.9 はこれを禁止し、コンパイラをクラッシュさせる代わりにエラーを報告します。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.20: インライン関数パラメータに対するインライン拡張呼び出しについて警告を報告（またはプログレッシブモードではエラー）</li><li>1.9.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="匿名関数引数を持つ-suspend-という名前の中置関数の呼び出しの禁止" tabindex="-1">匿名関数引数を持つ <code>suspend</code> という名前の中置関数の呼び出しの禁止 <a class="header-anchor" href="#匿名関数引数を持つ-suspend-という名前の中置関数の呼び出しの禁止" aria-label="Permalink to &quot;匿名関数引数を持つ `suspend` という名前の中置関数の呼び出しの禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-49264" target="_blank" rel="noreferrer">KT-49264</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.9 では、匿名関数リテラルとして渡された関数型の単一の引数を持つ <code>suspend</code> という名前の中置関数の呼び出しを許可しなくなります。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.20: 匿名関数リテラルを伴う <code>suspend</code> 中置呼び出しについて警告を報告</li><li>1.9.0: 警告をエラーに昇格。 一時的に1.9より前の動作に戻すには <code>-XXLanguage:-ModifierNonBuiltinSuspendFunError</code> を使用できます。</li><li>TODO: <code>suspend fun</code> トークンシーケンスがパーサーによって解釈される方法を変更</li></ul></blockquote><h3 id="内部クラスにおけるキャプチャされた型パラメータの分散に反する使用の禁止" tabindex="-1">内部クラスにおけるキャプチャされた型パラメータの分散に反する使用の禁止 <a class="header-anchor" href="#内部クラスにおけるキャプチャされた型パラメータの分散に反する使用の禁止" aria-label="Permalink to &quot;内部クラスにおけるキャプチャされた型パラメータの分散に反する使用の禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-50947" target="_blank" rel="noreferrer">KT-50947</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.9 は、外側クラスの <code>in</code> または <code>out</code> 分散を持つ型パラメータが、その型パラメータの宣言された分散に違反する位置で、そのクラスの内部クラスで使用されることを禁止します。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 外側クラスの型パラメータの使用位置がそのパラメータの分散ルールに違反する場合に警告を報告（またはプログレッシブモードではエラー）</li><li>1.9.0: 警告をエラーに昇格。 一時的に1.9より前の動作に戻すには <code>-XXLanguage:-ReportTypeVarianceConflictOnQualifierArguments</code> を使用できます。</li></ul></blockquote><h3 id="複合代入演算子での明示的な戻り値の型がない関数の再帰呼び出しの禁止" tabindex="-1">複合代入演算子での明示的な戻り値の型がない関数の再帰呼び出しの禁止 <a class="header-anchor" href="#複合代入演算子での明示的な戻り値の型がない関数の再帰呼び出しの禁止" aria-label="Permalink to &quot;複合代入演算子での明示的な戻り値の型がない関数の再帰呼び出しの禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48546" target="_blank" rel="noreferrer">KT-48546</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.9 は、その関数の本体内の複合代入演算子の引数で、明示的に指定された戻り値の型がない関数を呼び出すことを禁止します。これは現在、その関数の本体内の他の式で行っているのと同様です。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 明示的に指定された戻り値の型がない関数が、その関数の本体内の複合代入演算子引数で再帰的に呼び出される場合に警告を報告（またはプログレッシブモードではエラー）</li><li>1.9.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="notnull-t-が期待され、null許容境界を持つkotlinジェネリックパラメータが与えられた場合の不健全な呼び出しの禁止" tabindex="-1"><code>@NotNull T</code> が期待され、null許容境界を持つKotlinジェネリックパラメータが与えられた場合の不健全な呼び出しの禁止 <a class="header-anchor" href="#notnull-t-が期待され、null許容境界を持つkotlinジェネリックパラメータが与えられた場合の不健全な呼び出しの禁止" aria-label="Permalink to &quot;`@NotNull T` が期待され、null許容境界を持つKotlinジェネリックパラメータが与えられた場合の不健全な呼び出しの禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-36770" target="_blank" rel="noreferrer">KT-36770</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.9 は、null許容の可能性があるジェネリック型の値が、Javaメソッドの <code>@NotNull</code> アノテーションが付けられたパラメータに渡されるメソッド呼び出しを禁止します。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.5.20: 非null型が期待される場合に、制約のないジェネリック型パラメータが渡されると警告を報告</li><li>1.9.0: 上記の警告の代わりに型不一致エラーを報告。 一時的に1.8より前の動作に戻すには <code>-XXLanguage:-ProhibitUsingNullableTypeParameterAgainstNotNullAnnotated</code> を使用できます。</li></ul></blockquote><h3 id="enum-エントリ初期化子からの-enum-クラスのコンパニオンメンバーへのアクセス禁止" tabindex="-1">enum エントリ初期化子からの enum クラスのコンパニオンメンバーへのアクセス禁止 <a class="header-anchor" href="#enum-エントリ初期化子からの-enum-クラスのコンパニオンメンバーへのアクセス禁止" aria-label="Permalink to &quot;enum エントリ初期化子からの enum クラスのコンパニオンメンバーへのアクセス禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-49110" target="_blank" rel="noreferrer">KT-49110</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.9 は、enumエントリ初期化子からenumのコンパニオンオブジェクトへのあらゆる種類のアクセスを禁止します。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: そのようなコンパニオンメンバーアクセスについて警告を報告（またはプログレッシブモードではエラー）</li><li>1.9.0: 警告をエラーに昇格。 一時的に1.8より前の動作に戻すには <code>-XXLanguage:-ProhibitAccessToEnumCompanionMembersInEnumConstructorCall</code> を使用できます。</li></ul></blockquote><h3 id="enum-declaringclass-合成プロパティの非推奨化と削除" tabindex="-1"><code>Enum.declaringClass</code> 合成プロパティの非推奨化と削除 <a class="header-anchor" href="#enum-declaringclass-合成プロパティの非推奨化と削除" aria-label="Permalink to &quot;`Enum.declaringClass` 合成プロパティの非推奨化と削除&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-49653" target="_blank" rel="noreferrer">KT-49653</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin は、基底のJavaクラス <code>java.lang.Enum</code> のメソッド <code>getDeclaringClass()</code> から生成される <code>Enum</code> 値に対して、合成プロパティ <code>declaringClass</code> の使用を許可していました。このメソッドはKotlinの <code>Enum</code> 型では利用できないにもかかわらずです。Kotlin 1.9 はこのプロパティの使用を禁止し、代わりに拡張プロパティ <code>declaringJavaClass</code> への移行を提案します。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: <code>declaringClass</code> プロパティの使用について警告を報告（またはプログレッシブモードではエラー）。 <code>declaringJavaClass</code> 拡張への移行を提案。</li><li>1.9.0: 警告をエラーに昇格。 一時的に1.9より前の動作に戻すには <code>-XXLanguage:-ProhibitEnumDeclaringClass</code> を使用できます。</li><li>2.0.0: <code>declaringClass</code> 合成プロパティを削除</li></ul></blockquote><h3 id="コンパイラオプション-xjvm-default-の-enable-および-compatibility-モードの非推奨化" tabindex="-1">コンパイラオプション <code>-Xjvm-default</code> の <code>enable</code> および <code>compatibility</code> モードの非推奨化 <a class="header-anchor" href="#コンパイラオプション-xjvm-default-の-enable-および-compatibility-モードの非推奨化" aria-label="Permalink to &quot;コンパイラオプション `-Xjvm-default` の `enable` および `compatibility` モードの非推奨化&quot;">​</a></h3><blockquote><p><strong>Issues</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46329" target="_blank" rel="noreferrer">KT-46329</a>, <a href="https://youtrack.jetbrains.com/issue/KT-54746" target="_blank" rel="noreferrer">KT-54746</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.9 は、<code>-Xjvm-default</code> コンパイラオプションの <code>enable</code> および <code>compatibility</code> モードの使用を禁止します。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: <code>-Xjvm-default</code> コンパイラオプションの <code>enable</code> および <code>compatibility</code> モードについて警告を導入</li><li>1.9.0: この警告をエラーに昇格</li></ul></blockquote><h3 id="ビルダー推論コンテキストにおいて型変数を上限に暗黙的に推論することの禁止" tabindex="-1">ビルダー推論コンテキストにおいて型変数を上限に暗黙的に推論することの禁止 <a class="header-anchor" href="#ビルダー推論コンテキストにおいて型変数を上限に暗黙的に推論することの禁止" aria-label="Permalink to &quot;ビルダー推論コンテキストにおいて型変数を上限に暗黙的に推論することの禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47986" target="_blank" rel="noreferrer">KT-47986</a></p><p><strong>Component</strong>: コア言語</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 2.0 は、ビルダー推論ラムダ関数のスコープにおいて使用サイトの型情報がない場合に、型変数を対応する型パラメータの上限に推論することを禁止します。これは現在他のコンテキストで行っているのと同じ方法です。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.20: 使用サイトの型情報がない場合に、型パラメータが宣言された上限に推論されると警告を報告（またはプログレッシブモードではエラー）</li><li>2.0.0: 警告をエラーに昇格</li></ul></blockquote><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><h3 id="range-progression-が-collection-を実装し始める際の潜在的なオーバーロード解決の変更に関する警告" tabindex="-1">Range/Progression が Collection を実装し始める際の潜在的なオーバーロード解決の変更に関する警告 <a class="header-anchor" href="#range-progression-が-collection-を実装し始める際の潜在的なオーバーロード解決の変更に関する警告" aria-label="Permalink to &quot;Range/Progression が Collection を実装し始める際の潜在的なオーバーロード解決の変更に関する警告&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-49276" target="_blank" rel="noreferrer">KT-49276</a></p><p><strong>Component</strong>: コア言語 / kotlin-stdlib</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Kotlin 1.9 では、標準のプログレッションおよびそれらから継承された具象レンジに <code>Collection</code> インターフェースを実装することが計画されています。これにより、あるメソッドに2つのオーバーロードがあり、1つが要素を受け入れ、もう1つがコレクションを受け入れる場合、オーバーロード解決で別のオーバーロードが選択される可能性があります。 Kotlin は、レンジまたはプログレッションの引数でそのようなオーバーロードされたメソッドが呼び出された場合に、警告またはエラーを報告することでこの状況を可視化します。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: オーバーロードされたメソッドが、標準のプログレッションまたはそのレンジ継承者を引数として呼び出され、将来的にこのプログレッション/レンジによる <code>Collection</code> インターフェースの実装が、この呼び出しで別のオーバーロードが選択されることにつながる場合に警告を報告</li><li>1.8.0: この警告をエラーに昇格</li><li>2.1.0: エラーの報告を停止し、プログレッションで <code>Collection</code> インターフェースを実装することで、影響を受けるケースでのオーバーロード解決結果を変更</li></ul></blockquote><h3 id="kotlin-dom-および-kotlin-browser-パッケージからの宣言を-kotlinx-に移行" tabindex="-1"><code>kotlin.dom</code> および <code>kotlin.browser</code> パッケージからの宣言を <code>kotlinx.*</code> に移行 <a class="header-anchor" href="#kotlin-dom-および-kotlin-browser-パッケージからの宣言を-kotlinx-に移行" aria-label="Permalink to &quot;`kotlin.dom` および `kotlin.browser` パッケージからの宣言を `kotlinx.*` に移行&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-39330" target="_blank" rel="noreferrer">KT-39330</a></p><p><strong>Component</strong>: kotlin-stdlib (JS)</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: <code>kotlin.dom</code> および <code>kotlin.browser</code> パッケージの宣言は、標準ライブラリからそれらを抽出するための準備として、対応する <code>kotlinx.*</code> パッケージに移動されます。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.4.0: <code>kotlinx.dom</code> および <code>kotlinx.browser</code> パッケージに代替APIを導入</li><li>1.4.0: <code>kotlin.dom</code> および <code>kotlin.browser</code> パッケージのAPIを非推奨にし、上記の新しいAPIを代替として提案</li><li>1.6.0: 非推奨レベルをエラーに昇格</li><li>1.8.20: JS-IRターゲットの標準ライブラリから非推奨関数を削除</li><li>&gt;= 2.0: <code>kotlinx.*</code> パッケージのAPIを別のライブラリに移動</li></ul></blockquote><h3 id="一部のjs専用apiの非推奨化" tabindex="-1">一部のJS専用APIの非推奨化 <a class="header-anchor" href="#一部のjs専用apiの非推奨化" aria-label="Permalink to &quot;一部のJS専用APIの非推奨化&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48587" target="_blank" rel="noreferrer">KT-48587</a></p><p><strong>Component</strong>: kotlin-stdlib (JS)</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: 標準ライブラリの一部のJS専用関数が削除のために非推奨とされます。これらには、<code>String.concat(String)</code>、<code>String.match(regex: String)</code>、<code>String.matches(regex: String)</code>、および比較関数を受け取る配列の <code>sort</code> 関数（例: <code>Array&lt;out T&gt;.sort(comparison: (a: T, b: T) -&gt; Int)</code>) が含まれます。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 影響を受ける関数を警告とともに非推奨に</li><li>1.9.0: 非推奨レベルをエラーに昇格</li><li>&gt;=2.0: 公開APIから非推奨関数を削除</li></ul></blockquote><h2 id="ツール" tabindex="-1">ツール <a class="header-anchor" href="#ツール" aria-label="Permalink to &quot;ツール&quot;">​</a></h2><h3 id="gradleセットアップからの-enableendorsedlibs-フラグの削除" tabindex="-1">Gradleセットアップからの <code>enableEndorsedLibs</code> フラグの削除 <a class="header-anchor" href="#gradleセットアップからの-enableendorsedlibs-フラグの削除" aria-label="Permalink to &quot;Gradleセットアップからの `enableEndorsedLibs` フラグの削除&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-54098" target="_blank" rel="noreferrer">KT-54098</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Gradleセットアップでは <code>enableEndorsedLibs</code> フラグはサポートされなくなります。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.9.0: Gradleセットアップで <code>enableEndorsedLibs</code> フラグがサポートされる</li><li>1.9.0: Gradleセットアップで <code>enableEndorsedLibs</code> フラグが<strong>サポートされない</strong></li></ul></blockquote><h3 id="gradleの規約の削除" tabindex="-1">Gradleの規約の削除 <a class="header-anchor" href="#gradleの規約の削除" aria-label="Permalink to &quot;Gradleの規約の削除&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-52976" target="_blank" rel="noreferrer">KT-52976</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: Gradleの規約はGradle 7.1で非推奨となり、Gradle 8で削除されました。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.20: Gradleの規約を非推奨に</li><li>1.9.0: Gradleの規約を削除</li></ul></blockquote><h3 id="kotlincompile-タスクの-classpath-プロパティの削除" tabindex="-1"><code>KotlinCompile</code> タスクの <code>classpath</code> プロパティの削除 <a class="header-anchor" href="#kotlincompile-タスクの-classpath-プロパティの削除" aria-label="Permalink to &quot;`KotlinCompile` タスクの `classpath` プロパティの削除&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-53748" target="_blank" rel="noreferrer">KT-53748</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: <code>KotlinCompile</code> タスクの <code>classpath</code> プロパティが削除されます。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: <code>classpath</code> プロパティが非推奨に</li><li>1.8.0: 非推奨レベルをエラーに昇格</li><li>1.9.0: 公開APIから非推奨関数を削除</li></ul></blockquote><h3 id="kotlin-internal-single-build-metrics-file-プロパティの非推奨化" tabindex="-1"><code>kotlin.internal.single.build.metrics.file</code> プロパティの非推奨化 <a class="header-anchor" href="#kotlin-internal-single-build-metrics-file-プロパティの非推奨化" aria-label="Permalink to &quot;`kotlin.internal.single.build.metrics.file` プロパティの非推奨化&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-53357" target="_blank" rel="noreferrer">KT-53357</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: ソース</p><p><strong>Short summary</strong>: ビルドレポート用の単一ファイルを定義するために使用される <code>kotlin.internal.single.build.metrics.file</code> プロパティを非推奨にします。 代わりに、<code>kotlin.build.report.output=single_file</code> とともにプロパティ <code>kotlin.build.report.single_file</code> を使用してください。</p><p><strong>Deprecation cycle:</strong></p><ul><li>1.8.0: 非推奨レベルを警告に昇格</li><li>&gt;= 1.9: プロパティを削除</li></ul></blockquote>',70)]))}const h=o(a,[["render",l]]);export{d as __pageData,h as default};
