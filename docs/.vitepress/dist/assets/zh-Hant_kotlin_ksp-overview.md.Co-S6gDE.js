import{_ as n,C as t,c as e,o as l,ag as a,G as p}from"./chunks/framework.Bksy39di.js";const y=JSON.parse('{"title":"Kotlin 符號處理 API","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/ksp-overview.md","filePath":"zh-Hant/kotlin/ksp-overview.md","lastUpdated":1754307826000}'),r={name:"zh-Hant/kotlin/ksp-overview.md"};function h(k,s,o,d,c,E){const i=t("YouTubeVideo");return l(),e("div",null,[s[0]||(s[0]=a('<h1 id="kotlin-符號處理-api" tabindex="-1">Kotlin 符號處理 API <a class="header-anchor" href="#kotlin-符號處理-api" aria-label="Permalink to &quot;Kotlin 符號處理 API&quot;">​</a></h1><p>Kotlin 符號處理（<em>KSP</em>）是一個 API，您可以使用它來開發輕量級的編譯器外掛。 KSP 提供了一個簡化的編譯器外掛 API，它充分利用了 Kotlin 的強大功能，同時將學習曲線保持在 最低水準。與 <a href="/zh-Hant/kotlin/kapt">kapt</a> 相比，使用 KSP 的註解處理器執行速度可提高兩倍。</p><ul><li>若要深入了解 KSP 與 kapt 的比較，請查看 <a href="/zh-Hant/kotlin/ksp-why-ksp">為何選擇 KSP</a>。</li><li>若要開始編寫 KSP 處理器，請參閱 <a href="/zh-Hant/kotlin/ksp-quickstart">KSP 快速入門</a>。</li></ul><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>KSP API 以慣用的方式處理 Kotlin 程式。KSP 理解 Kotlin 特有的功能，例如擴充函數、 宣告點變異和局部函數。它還明確地模型化類型，並提供基本的類型檢查， 例如等價性和賦值相容性。</p><p>該 API 根據 <a href="https://kotlinlang.org/docs/reference/grammar.html" target="_blank" rel="noreferrer">Kotlin 語法</a> 在符號層級模型化 Kotlin 程式結構。 當基於 KSP 的外掛處理原始程式時，類別、類別成員、函數和相關參數等結構可供 處理器存取，而像 <code>if</code> 區塊和 <code>for</code> 迴圈則無法存取。</p><p>概念上，KSP 類似於 Kotlin 反射中的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-type/" target="_blank" rel="noreferrer">KType</a>。 該 API 允許處理器從類別宣告導航到具有特定類型引數的對應類型，反之亦然。 您還可以替換類型引數、指定變異、應用星號投影，並標記類型的可空性。</p><p>另一種看待 KSP 的方式是將其視為 Kotlin 程式的預處理器框架。將基於 KSP 的外掛視為 <em>符號處理器</em>，或簡稱 <em>處理器</em>，編譯中的資料流可以描述為以下步驟：</p><ol><li>處理器讀取並分析原始程式和資源。</li><li>處理器生成程式碼或其他形式的輸出。</li><li>Kotlin 編譯器將原始程式與生成的程式碼一起編譯。</li></ol><p>與成熟的編譯器外掛不同，處理器不能修改程式碼。 改變語言語義的編譯器外掛有時會非常令人困惑。 KSP 通過將原始程式視為唯讀來避免這種情況。</p><p>您也可以在這段影片中獲得 KSP 的概述：</p>',11)),p(i,{src:"https://www.youtube.com/v/bv-VyGM3HCY",title:"Kotlin Symbol Processing (KSP)"}),s[1]||(s[1]=a(`<h2 id="ksp-如何看待原始檔" tabindex="-1">KSP 如何看待原始檔 <a class="header-anchor" href="#ksp-如何看待原始檔" aria-label="Permalink to &quot;KSP 如何看待原始檔&quot;">​</a></h2><p>大多數處理器會導航輸入原始碼的各種程式結構。 在深入了解 API 的用法之前，讓我們先看看一個檔案從 KSP 的角度來看可能長什麼樣：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>KSFile</span></span>
<span class="line"><span>  packageName: KSName</span></span>
<span class="line"><span>  fileName: String</span></span>
<span class="line"><span>  annotations: List&lt;KSAnnotation&gt;  (File annotations)</span></span>
<span class="line"><span>  declarations: List&lt;KSDeclaration&gt;</span></span>
<span class="line"><span>    KSClassDeclaration // class, interface, object</span></span>
<span class="line"><span>      simpleName: KSName</span></span>
<span class="line"><span>      qualifiedName: KSName</span></span>
<span class="line"><span>      containingFile: String</span></span>
<span class="line"><span>      typeParameters: KSTypeParameter</span></span>
<span class="line"><span>      parentDeclaration: KSDeclaration</span></span>
<span class="line"><span>      classKind: ClassKind</span></span>
<span class="line"><span>      primaryConstructor: KSFunctionDeclaration</span></span>
<span class="line"><span>      superTypes: List&lt;KSTypeReference&gt;</span></span>
<span class="line"><span>      // contains inner classes, member functions, properties, etc.</span></span>
<span class="line"><span>      declarations: List&lt;KSDeclaration&gt;</span></span>
<span class="line"><span>    KSFunctionDeclaration // top level function</span></span>
<span class="line"><span>      simpleName: KSName</span></span>
<span class="line"><span>      qualifiedName: KSName</span></span>
<span class="line"><span>      containingFile: String</span></span>
<span class="line"><span>      typeParameters: KSTypeParameter</span></span>
<span class="line"><span>      parentDeclaration: KSDeclaration</span></span>
<span class="line"><span>      functionKind: FunctionKind</span></span>
<span class="line"><span>      extensionReceiver: KSTypeReference?</span></span>
<span class="line"><span>      returnType: KSTypeReference</span></span>
<span class="line"><span>      parameters: List&lt;KSValueParameter&gt;</span></span>
<span class="line"><span>      // contains local classes, local functions, local variables, etc.</span></span>
<span class="line"><span>      declarations: List&lt;KSDeclaration&gt;</span></span>
<span class="line"><span>    KSPropertyDeclaration // global variable</span></span>
<span class="line"><span>      simpleName: KSName</span></span>
<span class="line"><span>      qualifiedName: KSName</span></span>
<span class="line"><span>      containingFile: String</span></span>
<span class="line"><span>      typeParameters: KSTypeParameter</span></span>
<span class="line"><span>      parentDeclaration: KSDeclaration</span></span>
<span class="line"><span>      extensionReceiver: KSTypeReference?</span></span>
<span class="line"><span>      type: KSTypeReference</span></span>
<span class="line"><span>      getter: KSPropertyGetter</span></span>
<span class="line"><span>        returnType: KSTypeReference</span></span>
<span class="line"><span>      setter: KSPropertySetter</span></span>
<span class="line"><span>        parameter: KSValueParameter</span></span></code></pre></div><p>此視圖列出了檔案中宣告的常見內容：類別、函數、屬性等等。</p><h2 id="symbolprocessorprovider-入口點" tabindex="-1">SymbolProcessorProvider：入口點 <a class="header-anchor" href="#symbolprocessorprovider-入口點" aria-label="Permalink to &quot;SymbolProcessorProvider：入口點&quot;">​</a></h2><p>KSP 期望 <code>SymbolProcessorProvider</code> 介面的實作來實例化 <code>SymbolProcessor</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SymbolProcessorProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(environment: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessorEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>而 <code>SymbolProcessor</code> 定義為：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SymbolProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSAnnotated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Let&#39;s focus on this</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> finish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>Resolver</code> 為 <code>SymbolProcessor</code> 提供對編譯器細節（例如符號）的存取。 一個尋找所有頂層函數和頂層類別中非局部函數的處理器可能看起來像 以下這樣：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloFunctionFinderProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSClassDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> visitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FindFunctionsVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        resolver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(visitor, Unit) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    inner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FindFunctionsVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSVisitorVoid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visitClassDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(classDeclaration: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSClassDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            classDeclaration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDeclaredFunctions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Unit) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visitFunctionDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(function: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSFunctionDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            functions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(function)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            file.declarations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Unit) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessorProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(environment: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessorEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="資源" tabindex="-1">資源 <a class="header-anchor" href="#資源" aria-label="Permalink to &quot;資源&quot;">​</a></h2><ul><li><a href="/zh-Hant/kotlin/ksp-quickstart">快速入門</a></li><li><a href="/zh-Hant/kotlin/ksp-why-ksp">為何使用 KSP？</a></li><li><a href="/zh-Hant/kotlin/ksp-examples">範例</a></li><li><a href="/zh-Hant/kotlin/ksp-additional-details">KSP 如何模型化 Kotlin 程式碼</a></li><li><a href="/zh-Hant/kotlin/ksp-reference">Java 註解處理器作者參考</a></li><li><a href="/zh-Hant/kotlin/ksp-incremental">增量處理注意事項</a></li><li><a href="/zh-Hant/kotlin/ksp-multi-round">多輪處理注意事項</a></li><li><a href="/zh-Hant/kotlin/ksp-multiplatform">多平台專案中的 KSP</a></li><li><a href="/zh-Hant/kotlin/ksp-command-line">從命令列執行 KSP</a></li><li><a href="/zh-Hant/kotlin/ksp-faq">常見問題</a></li></ul><h2 id="支援的函式庫" tabindex="-1">支援的函式庫 <a class="header-anchor" href="#支援的函式庫" aria-label="Permalink to &quot;支援的函式庫&quot;">​</a></h2><p>下表包含 Android 上流行函式庫的清單及其對 KSP 的不同支援階段：</p><table tabindex="0"><thead><tr><th>函式庫</th><th>狀態</th></tr></thead><tbody><tr><td>Room</td><td><a href="https://developer.android.com/jetpack/androidx/releases/room#2.3.0-beta02" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>Moshi</td><td><a href="https://github.com/square/moshi/" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>RxHttp</td><td><a href="https://github.com/liujingxing/rxhttp" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>Kotshi</td><td><a href="https://github.com/ansman/kotshi" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>Lyricist</td><td><a href="https://github.com/adrielcafe/lyricist" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>Lich SavedState</td><td><a href="https://github.com/line/lich/tree/master/savedstate" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>gRPC Dekorator</td><td><a href="https://github.com/mottljan/grpc-dekorator" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>EasyAdapter</td><td><a href="https://github.com/AmrDeveloper/EasyAdapter" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>Koin Annotations</td><td><a href="https://github.com/InsertKoinIO/koin-annotations" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>Glide</td><td><a href="https://github.com/bumptech/glide" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>Micronaut</td><td><a href="https://micronaut.io/2023/07/14/micronaut-framework-4-0-0-released/" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>Epoxy</td><td><a href="https://github.com/airbnb/epoxy" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>Paris</td><td><a href="https://github.com/airbnb/paris" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>Auto Dagger</td><td><a href="https://github.com/ansman/auto-dagger" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>SealedX</td><td><a href="https://github.com/skydoves/sealedx" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>Ktorfit</td><td><a href="https://github.com/Foso/Ktorfit" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>Mockative</td><td><a href="https://github.com/mockative/mockative" target="_blank" rel="noreferrer">官方支援</a></td></tr><tr><td>DeeplinkDispatch</td><td><a href="https://github.com/airbnb/DeepLinkDispatch/pull/323" target="_blank" rel="noreferrer">透過 airbnb/DeepLinkDispatch#323 支援</a></td></tr><tr><td>Dagger</td><td><a href="https://dagger.dev/dev-guide/ksp" target="_blank" rel="noreferrer">Alpha</a></td></tr><tr><td>Motif</td><td><a href="https://github.com/uber/motif" target="_blank" rel="noreferrer">Alpha</a></td></tr><tr><td>Hilt</td><td><a href="https://dagger.dev/dev-guide/ksp" target="_blank" rel="noreferrer">進行中</a></td></tr><tr><td>Auto Factory</td><td><a href="https://github.com/google/auto/issues/982" target="_blank" rel="noreferrer">尚不支援</a></td></tr></tbody></table>`,16))])}const F=n(r,[["render",h]]);export{y as __pageData,F as default};
