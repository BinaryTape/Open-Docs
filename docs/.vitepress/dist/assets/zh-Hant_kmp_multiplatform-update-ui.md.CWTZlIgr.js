import{_ as r}from"./chunks/icon-1-done.B5D6C9SU.js";import{_ as k}from"./chunks/icon-2.D_3lm1kb.js";import{_ as d}from"./chunks/icon-3-todo.aEuKIG4W.js";import{_ as o}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as E}from"./chunks/icon-5-todo.DJgVODZv.js";import{_ as g,a as y}from"./chunks/first-multiplatform-project-on-ios-2.CLUQ81d4.js";import{_ as c,C as l,c as u,o as m,j as i,G as n,ag as F,a,w as e}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/multiplatform-update-ui.md","filePath":"zh-Hant/kmp/multiplatform-update-ui.md","lastUpdated":1755516278000}'),f={name:"zh-Hant/kmp/multiplatform-update-ui.md"};function C(b,s,A,B,v,S){const t=l("secondary-label"),p=l("Links"),h=l("tldr");return m(),u("div",null,[s[21]||(s[21]=i("h1",{id:"更新使用者介面",tabindex:"-1"},[a("更新使用者介面 "),i("a",{class:"header-anchor",href:"#更新使用者介面","aria-label":'Permalink to "更新使用者介面"'},"​")],-1)),n(t,{ref:"IntelliJ IDEA"},null,512),n(t,{ref:"Android Studio"},null,512),n(h,null,{default:e(()=>[s[18]||(s[18]=i("p",null,"本教程使用 IntelliJ IDEA，但您也可以在 Android Studio 中進行操作 – 這兩個 IDE 都共享相同的核心功能和 Kotlin Multiplatform 支援。",-1)),s[19]||(s[19]=i("br",null,null,-1)),s[20]||(s[20]=i("p",null,[a("這是"),i("strong",null,"使用共享邏輯和原生 UI 建立 Kotlin Multiplatform 應用程式"),a("教程的第二部分。在繼續之前，請確保您已完成先前的步驟。")],-1)),i("p",null,[s[1]||(s[1]=i("img",{src:r,width:"20",alt:"第一步"},null,-1)),s[2]||(s[2]=a()),n(p,{href:"/kmp/multiplatform-create-first-app",summary:"本教程使用 IntelliJ IDEA，但您也可以在 Android Studio 中進行操作 – 這兩個 IDE 都共享相同的核心功能和 Kotlin Multiplatform 支援。這是使用共享邏輯和原生 UI 建立 Kotlin Multiplatform 應用程式教程的第一部分。建立您的 Kotlin Multiplatform 應用程式 更新使用者介面 新增依賴項 共享更多邏輯 完成您的專案"},{default:e(()=>s[0]||(s[0]=[a("建立您的 Kotlin Multiplatform 應用程式")])),_:1}),s[3]||(s[3]=i("br",null,null,-1)),s[4]||(s[4]=i("img",{src:k,width:"20",alt:"第二步"},null,-1)),s[5]||(s[5]=a()),s[6]||(s[6]=i("strong",null,"更新使用者介面",-1)),s[7]||(s[7]=i("br",null,null,-1)),s[8]||(s[8]=i("img",{src:d,width:"20",alt:"第三步"},null,-1)),s[9]||(s[9]=a(" 新增依賴項")),s[10]||(s[10]=i("br",null,null,-1)),s[11]||(s[11]=i("br",null,null,-1)),s[12]||(s[12]=i("img",{src:o,width:"20",alt:"第四步"},null,-1)),s[13]||(s[13]=a(" 共享更多邏輯")),s[14]||(s[14]=i("br",null,null,-1)),s[15]||(s[15]=i("img",{src:E,width:"20",alt:"第五步"},null,-1)),s[16]||(s[16]=a(" 完成您的專案")),s[17]||(s[17]=i("br",null,null,-1))])]),_:1}),s[22]||(s[22]=F(`<p>為了建立使用者介面，您將使用 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 工具包來構建專案的 Android 部分，並使用 <a href="https://developer.apple.com/xcode/swiftui/" target="_blank" rel="noreferrer">SwiftUI</a> 來構建 iOS 部分。 這兩者都是宣告式 UI 框架，您會在 UI 實作中看到相似之處。在這兩種情況下，您都會將資料儲存在 <code>phrases</code> 變數中，然後對其進行迭代以產生 <code>Text</code> 項目的清單。</p><h2 id="更新-android-部分" tabindex="-1">更新 Android 部分 <a class="header-anchor" href="#更新-android-部分" aria-label="Permalink to &quot;更新 Android 部分&quot;">​</a></h2><p><code>composeApp</code> 模組包含一個 Android 應用程式，定義其主要活動和 UI 視圖，並將 <code>shared</code> 模組作為常規 Android 程式庫使用。該應用程式的 UI 使用 Compose Multiplatform 框架。</p><p>進行一些變更，看看它們如何反映在 UI 中：</p><ol><li><p>導覽至 <code>composeApp/src/androidMain/kotlin</code> 中的 <code>App.kt</code> 檔案。</p></li><li><p>找到 <code>Greeting</code> 類別的呼叫。選取 <code>greet()</code> 函式，右鍵點擊它，然後選取 <strong>Go To</strong> | <strong>Declaration or Usages</strong>。 您會看到它是您在上一步編輯的 <code>shared</code> 模組中的相同類別。</p></li><li><p>在 <code>Greeting.kt</code> 檔案中，更新 <code>greet()</code> 函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.random.Random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hi!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Guess what this is! &gt; \${platform.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reversed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>現在它會回傳一個字串清單。</p></li><li><p>返回 <code>App.kt</code> 檔案並更新 <code>App()</code> 實作：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(all </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">safeContentPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            verticalArrangement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Arrangement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spacedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            greeting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(greeting)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                HorizontalDivider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在這裡，<code>Column</code> 可組合項顯示每個 <code>Text</code> 項目，在它們周圍新增邊距並在它們之間新增空間。</p></li><li><p>遵循 IntelliJ IDEA 的建議匯入缺少的依賴項。</p></li><li><p>現在您可以執行 Android 應用程式，查看它如何顯示字串清單：</p><p><img src="`+g+`" alt="更新後的 Android 多平台應用程式 UI" width="300"></p></li></ol><h2 id="使用-ios-模組" tabindex="-1">使用 iOS 模組 <a class="header-anchor" href="#使用-ios-模組" aria-label="Permalink to &quot;使用 iOS 模組&quot;">​</a></h2><p><code>iosApp</code> 目錄構建為一個 iOS 應用程式。它依賴並使用 <code>shared</code> 模組作為 iOS 框架。應用程式的 UI 以 Swift 編寫。</p><p>實作與 Android 應用程式相同的變更：</p><ol><li><p>在 IntelliJ IDEA 中，在 <strong>Project</strong> 工具視窗的專案根目錄中找到 <code>iosApp</code> 資料夾。</p></li><li><p>開啟 <code>ContentView.swift</code> 檔案，右鍵點擊 <code>Greeting().greet()</code> 呼叫，然後選取 <strong>Go To</strong> | <strong>Definition</strong>。</p><p>您會看到 <code>shared</code> 模組中定義的 Kotlin 函式的 Objective-C 宣告。從 Objective-C/Swift 使用 Kotlin 型別時，它們會表示為 Objective-C 型別。在這裡，<code>greet()</code> 函式在 Kotlin 中回傳 <code>List&lt;String&gt;</code>，從 Swift 看來則回傳 <code>NSArray&lt;NSString&gt;</code>。有關型別映射的更多資訊，請參閱<a href="https://kotlinlang.org/docs/native-objc-interop.html" target="_blank" rel="noreferrer">與 Swift/Objective-C 的互通性</a>。</p></li><li><p>更新 SwiftUI 程式碼，以與 Android 應用程式相同的方式顯示項目清單：</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> phrases </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(phrases, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: \\.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>greet()</code> 呼叫的結果儲存在 <code>phrases</code> 變數中（Swift 中的 <code>let</code> 類似於 Kotlin 的 <code>val</code>）。</li><li><code>List</code> 函式產生 <code>Text</code> 項目的清單。</li></ul></li><li><p>啟動 iOS 執行配置以查看變更：</p><p><img src="`+y+'" alt="更新後的 iOS 多平台應用程式 UI" width="300"></p></li></ol><h2 id="可能的問題與解決方案" tabindex="-1">可能的問題與解決方案 <a class="header-anchor" href="#可能的問題與解決方案" aria-label="Permalink to &quot;可能的問題與解決方案&quot;">​</a></h2><h3 id="xcode-報告呼叫共享框架的程式碼中存在錯誤" tabindex="-1">Xcode 報告呼叫共享框架的程式碼中存在錯誤 <a class="header-anchor" href="#xcode-報告呼叫共享框架的程式碼中存在錯誤" aria-label="Permalink to &quot;Xcode 報告呼叫共享框架的程式碼中存在錯誤&quot;">​</a></h3><p>如果您正在使用 Xcode，您的 Xcode 專案可能仍在使用舊版本的框架。若要解決此問題，請返回 IntelliJ IDEA 並重建專案或啟動 iOS 執行配置。</p><h3 id="xcode-在匯入共享框架時報告錯誤" tabindex="-1">Xcode 在匯入共享框架時報告錯誤 <a class="header-anchor" href="#xcode-在匯入共享框架時報告錯誤" aria-label="Permalink to &quot;Xcode 在匯入共享框架時報告錯誤&quot;">​</a></h3><p>如果您正在使用 Xcode，它可能需要清除快取二進位檔：嘗試在主選單中選擇 <strong>Product | Clean Build Folder</strong> 來重設環境。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在教程的下一部分中，您將了解依賴項並新增第三方程式庫以擴展專案的功能。</p><p><strong><a href="./multiplatform-dependencies">繼續到下一部分</a></strong></p><h2 id="取得協助" tabindex="-1">取得協助 <a class="header-anchor" href="#取得協助" aria-label="Permalink to &quot;取得協助&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>。取得<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">邀請</a>並加入 <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 頻道。</li><li><strong>Kotlin 問題追蹤器</strong>。<a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">報告新問題</a>。</li></ul>',19))])}const K=c(f,[["render",C]]);export{T as __pageData,K as default};
