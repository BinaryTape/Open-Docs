import{_ as r,a as d,b as g,c,d as E,e as u,f as y,g as F,h as m,i as C,j as b,k as A,l as f,m as v,n as D,o as S,p as B}from"./chunks/android-iphone-password-error.w1wD0Z9I.js";import{_ as w}from"./chunks/xcode-run-script-phase-1.BlwrlSQM.js";import{_,a as O,b as I}from"./chunks/disable-sandboxing-in-xcode-project-settings.Hr8r5yJK.js";import{_ as x,C as t,c as P,o as U,j as i,G as l,ag as n,a as s,w as e}from"./chunks/framework.Bksy39di.js";const J=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-integrate-in-existing-app.md","filePath":"kmp/multiplatform-integrate-in-existing-app.md","lastUpdated":1755516278000}'),q={name:"kmp/multiplatform-integrate-in-existing-app.md"};function j(M,a,T,L,V,K){const p=t("secondary-label"),h=t("Links"),k=t("tldr"),o=t("shortcut");return U(),P("div",null,[a[14]||(a[14]=i("h1",{id:"将-android-应用程序迁移到-ios-–-教程",tabindex:"-1"},[s("将 Android 应用程序迁移到 iOS – 教程 "),i("a",{class:"header-anchor",href:"#将-android-应用程序迁移到-ios-–-教程","aria-label":'Permalink to "将 Android 应用程序迁移到 iOS – 教程"'},"​")],-1)),l(p,{ref:"IntelliJ IDEA"},null,512),l(p,{ref:"Android Studio"},null,512),l(k,null,{default:e(()=>[i("p",null,[a[1]||(a[1]=s("本教程使用 Android Studio，但你也可以在 IntelliJ IDEA 中学习。如果")),l(h,{href:"/kmp/quickstart",summary:"undefined"},{default:e(()=>a[0]||(a[0]=[s("设置正确")])),_:1}),a[2]||(a[2]=s("， 这两个 IDE 共享相同的核心功能和 Kotlin Multiplatform 支持。"))])]),_:1}),a[15]||(a[15]=n('<p>本教程展示了如何将现有 Android 应用程序改造为跨平台应用程序，使其既能在 Android 上运行，也能在 iOS 上运行。 你将能够一次性在同一个地方为 Android 和 iOS 编写代码。</p><p>本教程使用一个 <a href="https://github.com/Kotlin/kmp-integration-sample" target="_blank" rel="noreferrer">Android 示例应用程序</a>，该应用程序有一个用于输入用户名和密码的单个屏幕。凭据将被检测并保存到内存数据库中。</p><p>为了使你的应用程序在 iOS 和 Android 上都能工作， 你首先需要将部分代码迁移到共享模块，使其成为跨平台代码。 之后，你将在 Android 应用程序中使用你的跨平台代码，然后在新创建的 iOS 应用程序中重用相同的代码。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果你不熟悉 Kotlin Multiplatform，请先学习如何<a href="./quickstart">从头创建跨平台应用程序</a>。</p></div><h2 id="准备开发环境" tabindex="-1">准备开发环境 <a class="header-anchor" href="#准备开发环境" aria-label="Permalink to &quot;准备开发环境&quot;">​</a></h2><ol><li><p>在快速入门中，完成<a href="./quickstart#set-up-the-environment">为 Kotlin Multiplatform 开发设置环境</a>的说明。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>你需要一台装有 macOS 的 Mac 电脑才能完成本教程中的某些步骤，例如运行 iOS 应用程序。 这是 Apple 的要求。</p></div></li><li><p>在 Android Studio 中，从版本控制创建新项目：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/kmp-integration-sample</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>master</code> 分支包含项目的初始状态 – 一个简单的 Android 应用程序。 要查看包含 iOS 应用程序和共享模块的最终状态，请切换到 <code>final</code> 分支。</p></div></li><li><p>切换到 <strong>Project</strong> 视图：</p><p><img src="'+E+'" alt="Project view" width="513"></p></li></ol><h2 id="使你的代码跨平台" tabindex="-1">使你的代码跨平台 <a class="header-anchor" href="#使你的代码跨平台" aria-label="Permalink to &quot;使你的代码跨平台&quot;">​</a></h2><p>要使你的代码跨平台，你需要遵循以下步骤：</p><ol><li><a href="#decide-what-code-to-make-cross-platform">决定哪些代码要跨平台</a></li><li><a href="#create-a-shared-module-for-cross-platform-code">为跨平台代码创建共享模块</a></li><li><a href="#add-code-to-the-shared-module">测试代码共享</a></li><li><a href="#add-a-dependency-on-the-shared-module-to-your-android-application">将共享模块的依赖项添加到 Android 应用程序</a></li><li><a href="#make-the-business-logic-cross-platform">使业务逻辑跨平台</a></li><li><a href="#run-your-cross-platform-application-on-android">在 Android 上运行你的跨平台应用程序</a></li></ol><h3 id="决定哪些代码要跨平台" tabindex="-1">决定哪些代码要跨平台 <a class="header-anchor" href="#决定哪些代码要跨平台" aria-label="Permalink to &quot;决定哪些代码要跨平台&quot;">​</a></h3><p>决定 Android 应用程序的哪些代码更适合与 iOS 共享，哪些代码应保留为 native。一个简单的规则是：尽可能多地重用你想要重用的部分。业务逻辑通常在 Android 和 iOS 上是相同的， 因此它是重用的绝佳候选。</p><p>在你的 Android 示例应用程序中，业务逻辑存储在 <code>com.jetbrains.simplelogin.androidapp.data</code> 包中。 你未来的 iOS 应用程序将使用相同的逻辑，因此你也应该使其跨平台。</p><p><img src="'+u+'" alt="Business logic to share" width="366"></p><h3 id="为跨平台代码创建共享模块" tabindex="-1">为跨平台代码创建共享模块 <a class="header-anchor" href="#为跨平台代码创建共享模块" aria-label="Permalink to &quot;为跨平台代码创建共享模块&quot;">​</a></h3><p>用于 iOS 和 Android 的跨平台代码将存储在共享模块中。 Android Studio 和 IntelliJ IDEA 都提供了用于创建 Kotlin Multiplatform 共享模块的向导。</p><p>创建一个共享模块，以连接到现有的 Android 应用程序和你未来的 iOS 应用程序：</p><ol><li><p>在 Android Studio 中，从主菜单中选择 <strong>File</strong> | <strong>New</strong> | <strong>New Module</strong>。</p></li><li><p>在模板列表中，选择 <strong>Kotlin Multiplatform Shared Module</strong>。 将库名称保留为 <code>shared</code> 并输入包名：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>com.jetbrains.simplelogin.shared</span></span></code></pre></div></li><li><p>点击 <strong>Finish</strong>。向导会创建一个共享模块，相应地更改构建脚本，并开始 Gradle 同步。</p></li><li><p>设置完成后，你将在 <code>shared</code> 目录中看到以下文件结构：</p><p><img src="'+y+`" alt="Final file structure inside the shared directory" width="341"></p></li><li><p>确保 <code>shared/build.gradle.kts</code> 文件中的 <code>kotlin.androidLibrary.minSdk</code> 属性与 <code>app/build.gradle.kts</code> 文件中同名属性的值匹配。</p></li></ol><h3 id="将代码添加到共享模块" tabindex="-1">将代码添加到共享模块 <a class="header-anchor" href="#将代码添加到共享模块" aria-label="Permalink to &quot;将代码添加到共享模块&quot;">​</a></h3><p>现在你已经有了一个共享模块， 将一些通用代码添加到 <code>commonMain/kotlin/com.jetbrains.simplelogin.shared</code> 目录中以供共享：</p><ol><li><p>创建一个包含以下代码的新 <code>Greeting</code> 类：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, \${platform.name}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>用以下代码替换已创建文件中的代码：</p><ul><li><p>在 <code>commonMain/Platform.kt</code> 中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div></li><li><p>在 <code>androidMain/Platform.android.kt</code> 中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android.os.Build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Android \${Build.VERSION.SDK_INT}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li><li><p>在 <code>iosMain/Platform.ios.kt</code> 中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.UIKit.UIDevice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.systemVersion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ul></li></ol><p>如果你想更好地了解所得项目的布局， 请参阅 <a href="./multiplatform-discover-project">Kotlin Multiplatform 项目结构基础</a>。</p><h3 id="将共享模块的依赖项添加到-android-应用程序" tabindex="-1">将共享模块的依赖项添加到 Android 应用程序 <a class="header-anchor" href="#将共享模块的依赖项添加到-android-应用程序" aria-label="Permalink to &quot;将共享模块的依赖项添加到 Android 应用程序&quot;">​</a></h3><p>要在 Android 应用程序中使用跨平台代码，请将共享模块连接到它，将业务逻辑代码移动到其中，并使该代码跨平台。</p><ol><li><p>将共享模块的依赖项添加到 <code>app/build.gradle.kts</code> 文件中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>按照 IDE 的建议或使用 <strong>File</strong> | <strong>Sync Project with Gradle Files</strong> 菜单项同步 Gradle 文件。</p></li><li><p>在 <code>app/src/main/java/</code> 目录中，打开 <code>com.jetbrains.simplelogin.androidapp.ui.login</code> 包中的 <code>LoginActivity.kt</code> 文件。</p></li><li><p>为了确保共享模块已成功连接到你的应用程序，通过向 <code>onCreate()</code> 方法添加 <code>Log.i()</code> 调用，将 <code>greet()</code> 函数的结果转储到日志中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Login Activity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from shared module: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>按照 IDE 的建议导入缺失的类。</p></li><li><p>在工具栏中，点击 <code>app</code> 下拉菜单，然后点击调试图标：</p><p><img src="`+F+'" alt="App from list to debug" width="300"></p></li><li><p>在 <strong>Logcat</strong> 工具窗口中，在日志中搜索 &quot;Hello&quot;，你将找到来自共享模块的问候语：</p><p><img src="'+m+'" alt="Greeting from the shared module" width="700"></p></li></ol><h3 id="使业务逻辑跨平台" tabindex="-1">使业务逻辑跨平台 <a class="header-anchor" href="#使业务逻辑跨平台" aria-label="Permalink to &quot;使业务逻辑跨平台&quot;">​</a></h3><p>你现在可以将业务逻辑代码提取到 Kotlin Multiplatform 共享模块中，并使其独立于平台。 这对于在 Android 和 iOS 上重用代码是必要的。</p>',26)),a[16]||(a[16]=i("ol",null,[i("li",null,[i("p",null,[s("将 "),i("code",null,"com.jetbrains.simplelogin.androidapp.data"),s(" 业务逻辑代码从 "),i("code",null,"app"),s(" 目录移动到 "),i("code",null,"shared/src/commonMain"),s(" 目录中的 "),i("code",null,"com.jetbrains.simplelogin.shared"),s(" 包。")]),i("p",null,[i("img",{src:r,alt:"Drag and drop the package with the business logic code",width:"300"})])]),i("li",null,[i("p",null,"当 Android Studio 询问你想要做什么时，选择移动包，然后批准重构。"),i("p",null,[i("img",{src:d,alt:"Refactor the business logic package",width:"300"})])]),i("li",null,[i("p",null,[s("忽略所有关于平台相关代码的警告，然后点击 "),i("strong",null,"Refactor Anyway"),s("。")]),i("p",null,[i("img",{src:g,alt:"Warnings about platform-dependent code",width:"450"})])]),i("li",null,[i("p",null,[s("通过将其替换为跨平台 Kotlin 代码或使用 "),i("a",{href:"./multiplatform-connect-to-apis"},"expect 和 actual 声明"),s("连接到 Android 特有的 API，来移除 Android 特有的代码。有关详细信息，请参阅以下部分：")]),i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"用跨平台代码替换-android-特有的代码",tabindex:"-1"},[s("用跨平台代码替换 Android 特有的代码 "),i("a",{class:"header-anchor",href:"#用跨平台代码替换-android-特有的代码","aria-label":'Permalink to "用跨平台代码替换 Android 特有的代码 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")]),i("p",null,[s("为了使你的代码在 Android 和 iOS 上都能很好地工作，请尽可能在移动的 "),i("code",null,"data"),s(" 目录中用 Kotlin 依赖项替换所有 JVM 依赖项。")]),i("ol",null,[i("li",null,[i("p",null,[s("在 "),i("code",null,"LoginDataValidator"),s(" 类中，用匹配电子邮件验证模式的 Kotlin 正则表达式替换 "),i("code",null,"android.utils"),s(" 包中的 "),i("code",null,"Patterns"),s(" 类：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// Before")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"private"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," fun"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," isEmailValid"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(email: "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Patterns.EMAIL_ADDRESS."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"matcher"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(email)."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"matches"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")])])])]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// After")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"private"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," fun"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," isEmailValid"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(email: "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," emailRegex."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"matches"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(email)")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"companion"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," object"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    private"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," emailRegex "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        ("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"[a-zA-Z0-9'),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"+"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"_"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"%"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"-"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'+]{1,256}"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "'),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'@"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "[a-zA-Z0-9][a-zA-Z0-9'),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'-]{0,64}"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "("'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "'),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'."'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "[a-zA-Z0-9][a-zA-Z0-9'),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'-]{0,25}"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            ")+"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"toRegex"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])])]),i("li",null,[i("p",null,[s("移除 "),i("code",null,"Patterns"),s(" 类的导入指令：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," android.util.Patterns")])])])])]),i("li",null,[i("p",null,[s("在 "),i("code",null,"LoginDataSource"),s(" 类中，将 "),i("code",null,"login()"),s(" 函数中的 "),i("code",null,"IOException"),s(" 替换为 "),i("code",null,"RuntimeException"),s("。 "),i("code",null,"IOException"),s(" 在 Kotlin/JVM 中不可用。")]),i("pre",null,[i("code",null,'```kotlin\n// Before\nreturn Result.Error(IOException("Error logging in", e))\n```\n\n```kotlin\n// After\nreturn Result.Error(RuntimeException("Error logging in", e))\n```\n')])]),i("li",null,[i("p",null,[s("同时移除 "),i("code",null,"IOException"),s(" 的导入指令：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," java.io.IOException")])])])])])]),i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"从跨平台代码连接到平台特有的-api",tabindex:"-1"},[s("从跨平台代码连接到平台特有的 API "),i("a",{class:"header-anchor",href:"#从跨平台代码连接到平台特有的-api","aria-label":'Permalink to "从跨平台代码连接到平台特有的 API {initial-collapse-state="collapsed" collapsible="true"}"'},"​")]),i("p",null,[s("在 "),i("code",null,"LoginDataSource"),s(" 类中，"),i("code",null,"fakeUser"),s(" 的通用唯一标识符 (UUID) 是使用 "),i("code",null,"java.util.UUID"),s(" 类生成的，该类在 iOS 上不可用。")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," fakeUser "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," LoggedInUser"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(java.util.UUID."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"toString"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(), "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"Jane Doe"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])]),i("p",null,[s("尽管 Kotlin 标准库提供了"),i("a",{href:"https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.uuid/-uuid/",target:"_blank",rel:"noreferrer"},"用于 UUID 生成的实验性类"),s("， 但为了练习，让我们在这种情况下使用平台特有的功能。")]),i("p",null,[s("在共享代码中为 "),i("code",null,"randomUUID()"),s(" 函数提供 "),i("code",null,"expect"),s(" 声明，并在相应的源代码集中为每个平台（Android 和 iOS）提供其 "),i("code",null,"actual"),s(" 实现。 你可以了解更多关于"),i("a",{href:"./multiplatform-connect-to-apis"},"连接到平台特有的 API"),s(" 的信息。")]),i("ol",null,[i("li",null,[i("p",null,[s("将 "),i("code",null,"login()"),s(" 函数中的 "),i("code",null,"java.util.UUID.randomUUID()"),s(" 调用更改为 "),i("code",null,"randomUUID()"),s(" 调用，你将为每个平台实现该调用：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," fakeUser "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," LoggedInUser"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(), "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"Jane Doe"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])])]),i("li",null,[i("p",null,[s("在 "),i("code",null,"shared/src/commonMain"),s(" 目录的 "),i("code",null,"com.jetbrains.simplelogin.shared"),s(" 包中创建 "),i("code",null,"Utils.kt"),s(" 文件，并提供 "),i("code",null,"expect"),s(" 声明：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"package"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," com.jetbrains.simplelogin.shared")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"expect "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(): "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String")])])])])]),i("li",null,[i("p",null,[s("在 "),i("code",null,"shared/src/androidMain"),s(" 目录的 "),i("code",null,"com.jetbrains.simplelogin.shared"),s(" 包中创建 "),i("code",null,"Utils.android.kt"),s(" 文件，并提供 "),i("code",null,"randomUUID()"),s(" 在 Android 中的 "),i("code",null,"actual"),s(" 实现：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"package"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," com.jetbrains.simplelogin.shared")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," java.util."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"actual "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," UUID."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"toString"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")])])])])]),i("li",null,[i("p",null,[s("在 "),i("code",null,"shared/src/iosMain"),s(" 目录的 "),i("code",null,"com.jetbrains.simplelogin.shared"),s(" 包中创建 "),i("code",null,"Utils.ios.kt"),s(" 文件，并提供 "),i("code",null,"randomUUID()"),s(" 在 iOS 中的 "),i("code",null,"actual"),s(" 实现：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"package"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," com.jetbrains.simplelogin.shared")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," platform.Foundation.NSUUID")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"actual "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(): "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," NSUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"UUIDString"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")])])])])]),i("li",null,[i("p",null,[s("在 "),i("code",null,"shared/src/commonMain"),s(" 目录的 "),i("code",null,"LoginDataSource.kt"),s(" 文件中导入 "),i("code",null,"randomUUID"),s(" 函数：")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," com.jetbrains.simplelogin.shared.randomUUID")])])])])])])])],-1)),a[17]||(a[17]=n('<p>现在，Kotlin 将为 Android 和 iOS 使用平台特有的 UUID 实现。</p><h3 id="在-android-上运行你的跨平台应用程序" tabindex="-1">在 Android 上运行你的跨平台应用程序 <a class="header-anchor" href="#在-android-上运行你的跨平台应用程序" aria-label="Permalink to &quot;在 Android 上运行你的跨平台应用程序&quot;">​</a></h3><p>在 Android 上运行你的跨平台应用程序，以确保它像以前一样正常工作。</p><p><img src="'+C+'" alt="Android login application" width="300"></p><h2 id="使你的跨平台应用程序在-ios-上工作" tabindex="-1">使你的跨平台应用程序在 iOS 上工作 <a class="header-anchor" href="#使你的跨平台应用程序在-ios-上工作" aria-label="Permalink to &quot;使你的跨平台应用程序在 iOS 上工作&quot;">​</a></h2><p>一旦你的 Android 应用程序实现跨平台，你就可以创建 iOS 应用程序并重用其中的共享业务逻辑。</p><ol><li><a href="#create-an-ios-project-in-xcode">在 Xcode 中创建 iOS 项目</a></li><li><a href="#configure-the-ios-project-to-use-a-kmp-framework">配置 iOS 项目以使用 KMP framework</a></li><li><a href="#set-up-an-ios-run-configuration-in-android-studio">在 Android Studio 中设置 iOS 运行配置</a></li><li><a href="#use-the-shared-module-in-the-ios-project">在 iOS 项目中使用共享模块</a></li></ol><h3 id="在-xcode-中创建-ios-项目" tabindex="-1">在 Xcode 中创建 iOS 项目 <a class="header-anchor" href="#在-xcode-中创建-ios-项目" aria-label="Permalink to &quot;在 Xcode 中创建 iOS 项目&quot;">​</a></h3><ol><li><p>在 Xcode 中，点击 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>。</p></li><li><p>选择 iOS app 模板并点击 <strong>Next</strong>。</p><p><img src="'+b+'" alt="iOS project template" width="700"></p></li><li><p>将产品名称指定为 &quot;simpleLoginIOS&quot; 并点击 <strong>Next</strong>。</p><p><img src="'+A+'" alt="iOS project settings" width="700"></p></li><li><p>选择存储你的跨平台应用程序的目录作为项目位置，例如 <code>kmp-integration-sample</code>。</p></li></ol><p>在 Android Studio 中，你将获得以下结构：</p><p><img src="'+f+'" alt="iOS project in Android Studio" width="194"></p><p>你可以将 <code>simpleLoginIOS</code> 目录重命名为 <code>iosApp</code>，以与跨平台项目的其他顶层目录保持一致。 为此，请关闭 Xcode，然后将 <code>simpleLoginIOS</code> 目录重命名为 <code>iosApp</code>。 如果在 Xcode 打开的情况下重命名文件夹，你将收到警告并可能损坏你的项目。</p><p><img src="'+v+'" alt="Renamed iOS project directory in Android Studio" width="194"></p><h3 id="配置-ios-项目以使用-kmp-framework" tabindex="-1">配置 iOS 项目以使用 KMP framework <a class="header-anchor" href="#配置-ios-项目以使用-kmp-framework" aria-label="Permalink to &quot;配置 iOS 项目以使用 KMP framework&quot;">​</a></h3><p>你可以直接设置 iOS 应用与 Kotlin Multiplatform 构建的 framework 之间的集成。 本教程不包括除此方法之外的其他方法，这些方法在 <a href="./multiplatform-ios-integration-overview">iOS 集成方法概述</a>中有所介绍。</p><ol><li><p>在 Android Studio 中，右键点击 <code>iosApp/simpleLoginIOS.xcodeproj</code> 目录并选择 <strong>Open In</strong> | <strong>Open In Associated Application</strong> 以在 Xcode 中打开 iOS 项目。</p></li><li><p>在 Xcode 中，通过双击 <strong>Project</strong> 导航器中的项目名称来打开 iOS 项目设置。</p></li><li><p>在左侧的 <strong>Targets</strong> 部分中，选择 <strong>simpleLoginIOS</strong>，然后点击 <strong>Build Phases</strong> 标签页。</p></li><li><p>点击 <strong>+</strong> 图标并选择 <strong>New Run Script Phase</strong>。</p><p><img src="'+w+`" alt="Add a run script phase" width="700"></p></li><li><p>将以下脚本粘贴到运行脚本字段中：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd &quot;$SRCROOT/..&quot;</span></span>
<span class="line"><span>./gradlew :shared:embedAndSignAppleFrameworkForXcode</span></span></code></pre></div><p><img src="`+_+'" alt="Add the script" width="700"></p></li><li><p>禁用 <strong>Based on dependency analysis</strong> 选项。</p><p>这可以确保 Xcode 在每次构建期间都运行该脚本，并且每次都不会警告缺少输出依赖项。</p></li><li><p>将 <strong>Run Script</strong> 阶段向上移动，将其放置在 <strong>Compile Sources</strong> 阶段之前：</p><p><img src="'+O+'" alt="Move the Run Script phase" width="700"></p></li><li><p>在 <strong>Build Settings</strong> 标签页上，禁用 <strong>Build Options</strong> 下的 <strong>User Script Sandboxing</strong> 选项：</p><p><img src="'+I+'" alt="User Script Sandboxing" width="700"></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果你的构建配置与默认的 <code>Debug</code> 或 <code>Release</code> 不同，请在 <strong>Build Settings</strong> 标签页上，在 <strong>User-Defined</strong> 下添加 <code>KOTLIN_FRAMEWORK_BUILD_TYPE</code> 设置，并将其设置为 <code>Debug</code> 或 <code>Release</code>。</p></div></li><li><p>在 Xcode 中构建项目（主菜单中的 <strong>Product</strong> | <strong>Build</strong>）。 如果一切配置正确，项目应该能成功构建 （你可以安全地忽略“build phase will be run during every build”警告）</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果你在禁用 <strong>User Script Sandboxing</strong> 选项之前构建了项目，构建可能会失败： Gradle daemon 进程可能已被沙盒化，需要重新启动。 在再次构建项目之前，通过在项目目录（本例中为 <code>kmp-integration-sample</code>）中运行此命令来停止它： <code>shell ./gradlew --stop </code></p></div></li></ol><h3 id="在-android-studio-中设置-ios-运行配置" tabindex="-1">在 Android Studio 中设置 iOS 运行配置 <a class="header-anchor" href="#在-android-studio-中设置-ios-运行配置" aria-label="Permalink to &quot;在 Android Studio 中设置 iOS 运行配置&quot;">​</a></h3><p>确认 Xcode 设置正确后，返回 Android Studio：</p><ol><li><p>在主菜单中选择 <strong>File | Sync Project with Gradle Files</strong>。Android Studio 会自动生成一个名为 <strong>simpleLoginIOS</strong> 的运行配置。</p><p>Android Studio 会自动生成一个名为 <strong>simpleLoginIOS</strong> 的运行配置，并将 <code>iosApp</code> 目录标记为链接的 Xcode project。</p></li><li><p>在运行配置列表中，选择 <strong>simpleLoginIOS</strong>。 选择一个 iOS 模拟器，然后点击 <strong>Run</strong> 以检测 iOS 应用是否正常运行。</p><p><img src="'+D+`" alt="The iOS run configuration in the list of run configurations" width="400"></p></li></ol><h3 id="在-ios-项目中使用共享模块" tabindex="-1">在 iOS 项目中使用共享模块 <a class="header-anchor" href="#在-ios-项目中使用共享模块" aria-label="Permalink to &quot;在 iOS 项目中使用共享模块&quot;">​</a></h3><p><code>shared</code> 模块的 <code>build.gradle.kts</code> 文件为每个 iOS target 定义了 <code>binaries.framework.baseName</code> 属性为 <code>sharedKit</code>。 这是 Kotlin Multiplatform 为 iOS 应用生成并使用的 framework 的名称。</p><p>要测试集成，在 Swift 代码中添加对通用代码的调用：</p><ol><li><p>在 Android Studio 中，打开 <code>iosApp/simpleloginIOS/ContentView.swift</code> 文件并导入 framework：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sharedKit</span></span></code></pre></div></li><li><p>为了检测它是否正确连接，将 <code>ContentView</code> 结构更改为使用来自跨平台应用程序共享模块的 <code>greet()</code> 函数：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>使用 Android Studio iOS 运行配置运行应用程序，查看结果：</p><p><img src="`+S+`" alt="Greeting from the shared module" width="300"></p></li><li><p>再次更新 <code>ContentView.swift</code> 文件中的代码，以使用共享模块中的业务逻辑来渲染应用程序 UI：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div></li><li><p>在 <code>simpleLoginIOSApp.swift</code> 文件中，导入 <code>sharedKit</code> 模块并为 <code>ContentView()</code> 函数指定实参：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwiftUI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sharedKit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleLoginIOSApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scene {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        WindowGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loginRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LoginRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LoginDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loginValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LoginDataValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>再次运行 iOS 运行配置，查看 iOS 应用显示登录表单。</p></li><li><p>输入 &quot;Jane&quot; 作为用户名，&quot;password&quot; 作为密码。</p></li><li><p>由于你已经<a href="#configure-the-ios-project-to-use-a-kmp-framework">提前设置了集成</a>， iOS 应用会使用通用代码验证输入：</p><p><img src="`+B+'" alt="Simple login application" width="300"></p></li></ol><h2 id="享受成果-–-只需更新一次逻辑" tabindex="-1">享受成果 – 只需更新一次逻辑 <a class="header-anchor" href="#享受成果-–-只需更新一次逻辑" aria-label="Permalink to &quot;享受成果 – 只需更新一次逻辑&quot;">​</a></h2><p>现在你的应用程序是跨平台的了。你可以在 <code>shared</code> 模块中更新业务逻辑，并在 Android 和 iOS 上看到结果。</p>',25)),i("ol",null,[i("li",null,[i("p",null,[a[4]||(a[4]=s('更改用户密码的验证逻辑："password" 不应是有效选项。 为此，更新 ')),a[5]||(a[5]=i("code",null,"LoginDataValidator",-1)),a[6]||(a[6]=s(" 类的 ")),a[7]||(a[7]=i("code",null,"checkPassword()",-1)),a[8]||(a[8]=s(" 函数 （要快速找到它，按两次 ")),l(o,null,{default:e(()=>a[3]||(a[3]=[s("Shift")])),_:1}),a[9]||(a[9]=s("，粘贴类名，然后切换到 ")),a[10]||(a[10]=i("strong",null,"Classes",-1)),a[11]||(a[11]=s(" 标签页）："))]),a[12]||(a[12]=n(`<div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared.data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoginDataValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            password.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Password must be &gt;5 characters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            password.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lowercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;password&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Password shouldn&#39;t be </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">password</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.Success</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,1))]),a[13]||(a[13]=i("li",null,[i("p",null,"从 Android Studio 运行 iOS 和 Android 应用程序，查看更改："),i("p",null,[i("img",{src:c,alt:"Android and iOS applications password error",width:"600"})])],-1))]),a[18]||(a[18]=n('<p>你可以查看本教程的<a href="https://github.com/Kotlin/kmp-integration-sample/tree/final" target="_blank" rel="noreferrer">最终代码</a>。</p><h2 id="还有什么可以共享" tabindex="-1">还有什么可以共享？ <a class="header-anchor" href="#还有什么可以共享" aria-label="Permalink to &quot;还有什么可以共享？&quot;">​</a></h2><p>你已经共享了应用程序的业务逻辑，但你也可以决定共享应用程序的其他层。 例如，<code>ViewModel</code> 类的代码对于 <a href="https://github.com/Kotlin/kmp-integration-sample/blob/final/app/src/main/java/com/jetbrains/simplelogin/androidapp/ui/login/LoginViewModel.kt" target="_blank" rel="noreferrer">Android</a> 和 <a href="https://github.com/Kotlin/kmp-integration-sample/blob/final/iosApp/SimpleLoginIOS/ContentView.swift#L84" target="_blank" rel="noreferrer">iOS 应用程序</a>几乎相同， 如果你的移动应用程序应该具有相同的展示层，你可以共享它。</p><h2 id="接下来是什么" tabindex="-1">接下来是什么？ <a class="header-anchor" href="#接下来是什么" aria-label="Permalink to &quot;接下来是什么？&quot;">​</a></h2><p>一旦你将 Android 应用程序改造为跨平台，你可以继续：</p><ul><li><a href="./multiplatform-add-dependencies">添加对 multiplatform 库的依赖项</a></li><li><a href="./multiplatform-android-dependencies">添加 Android 依赖项</a></li><li><a href="./multiplatform-ios-dependencies">添加 iOS 依赖项</a></li></ul><p>你可以使用 Compose Multiplatform 在所有平台上创建统一的 UI：</p><ul><li><a href="./compose-multiplatform-and-jetpack-compose">了解 Compose Multiplatform 和 Jetpack Compose</a></li><li><a href="./compose-multiplatform-resources">探索 Compose Multiplatform 的可用资源</a></li><li><a href="./compose-multiplatform-create-first-app">创建一个带有共享逻辑和 UI 的应用程序</a></li></ul><p>你还可以查看社区资源：</p><ul><li><a href="https://www.youtube.com/watch?v=vb-Pt8SdfEE&amp;t=1s" target="_blank" rel="noreferrer">视频：如何将 Android 项目迁移到 Kotlin Multiplatform</a></li><li><a href="https://www.youtube.com/watch?v=X6ckI1JWjqo" target="_blank" rel="noreferrer">视频：让 Kotlin JVM 代码为 Kotlin Multiplatform 做好准备的 3 种方法</a></li></ul>',10))])}const $=x(q,[["render",j]]);export{J as __pageData,$ as default};
