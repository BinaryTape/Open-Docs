import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Koin 시작하기","description":"","frontmatter":{"title":"Koin 시작하기"},"headers":[],"relativePath":"ko/koin/reference/koin-core/start-koin.md","filePath":"ko/koin/reference/koin-core/start-koin.md","lastUpdated":1750001831000}'),e={name:"ko/koin/reference/koin-core/start-koin.md"};function t(p,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="koin-시작하기" tabindex="-1">Koin 시작하기 <a class="header-anchor" href="#koin-시작하기" aria-label="Permalink to &quot;Koin 시작하기&quot;">​</a></h1><p>Koin은 DSL이자, 경량 컨테이너이며, 실용적인 API입니다. Koin 모듈 내에 정의를 선언하면, Koin 컨테이너를 시작할 준비가 된 것입니다.</p><h3 id="startkoin-함수" tabindex="-1"><code>startKoin</code> 함수 <a class="header-anchor" href="#startkoin-함수" aria-label="Permalink to &quot;\`startKoin\` 함수&quot;">​</a></h3><p><code>startKoin</code> 함수는 Koin 컨테이너를 실행하는 주요 진입점입니다. 이 함수는 실행할 <em>Koin 모듈 목록</em>을 필요로 합니다. 모듈이 로드되고 정의가 Koin 컨테이너에 의해 해결될 준비가 됩니다.</p><p>Koin 시작하기</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Global 컨텍스트에서 KoinApplication 시작</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 사용될 모듈 선언</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coffeeAppModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>startKoin</code>이 호출되면, Koin은 모든 모듈과 정의를 읽습니다. 그러면 Koin은 필요한 인스턴스를 가져오기 위한 모든 <code>get()</code> 또는 <code>by inject()</code> 호출에 대비할 준비가 됩니다.</p><p>Koin 컨테이너는 다음과 같은 몇 가지 옵션을 가질 수 있습니다.</p><ul><li><code>logger</code> - 로깅을 활성화합니다. - <a href="/ko/koin#logging">로깅</a> 섹션 참조</li><li><code>properties()</code>, <code>fileProperties( )</code> 또는 <code>environmentProperties( )</code> - 환경, <code>koin.properties</code> 파일, 추가 프로퍼티 등에서 프로퍼티를 로드합니다. - <a href="/ko/koin#loading-properties">프로퍼티 로드</a> 섹션 참조</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>startKoin</code>은 두 번 이상 호출될 수 없습니다. 여러 지점에서 모듈을 로드해야 하는 경우, <code>loadKoinModules</code> 함수를 사용하세요.</p></div><h3 id="koin-시작-확장-kmp-및-기타-재사용성-지원" tabindex="-1">Koin 시작 확장 (KMP 및 기타 재사용성 지원) <a class="header-anchor" href="#koin-시작-확장-kmp-및-기타-재사용성-지원" aria-label="Permalink to &quot;Koin 시작 확장 (KMP 및 기타 재사용성 지원)&quot;">​</a></h3><p>Koin은 이제 KoinConfiguration을 위한 재사용 가능하고 확장 가능한 구성 객체를 지원합니다. 공유 구성을 플랫폼(Android, iOS, JVM 등) 간에 사용하거나 다른 환경에 맞게 조정하여 추출할 수 있습니다. 이는 <code>includes()</code> 함수로 수행할 수 있습니다. 아래에서 일반적인 구성을 쉽게 재사용하고, Android 환경 설정을 추가하여 확장할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KoinAppDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 외부 구성 확장을 포함할 수 있음</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        initKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            androidContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this@MainApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            androidLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="시작-과정의-내부-동작-koin-인스턴스" tabindex="-1">시작 과정의 내부 동작 - Koin 인스턴스 <a class="header-anchor" href="#시작-과정의-내부-동작-koin-인스턴스" aria-label="Permalink to &quot;시작 과정의 내부 동작 - Koin 인스턴스&quot;">​</a></h3><p>Koin을 시작할 때, Koin 컨테이너 구성 인스턴스를 나타내는 <code>KoinApplication</code> 인스턴스를 생성합니다. 일단 실행되면, 모듈과 옵션의 결과로 <code>Koin</code> 인스턴스를 생성하게 됩니다. 이 <code>Koin</code> 인스턴스는 이후 <code>GlobalContext</code>에 의해 유지되며, 모든 <code>KoinComponent</code> 클래스에서 사용될 수 있습니다.</p><p><code>GlobalContext</code>는 Koin의 기본 JVM 컨텍스트 전략입니다. <code>startKoin</code>에 의해 호출되고 <code>GlobalContext</code>에 등록됩니다. 이는 Koin 멀티플랫폼 관점에서 다른 종류의 컨텍스트를 등록할 수 있게 해줍니다.</p><h3 id="startkoin-이후-모듈-로드" tabindex="-1"><code>startKoin</code> 이후 모듈 로드 <a class="header-anchor" href="#startkoin-이후-모듈-로드" aria-label="Permalink to &quot;\`startKoin\` 이후 모듈 로드&quot;">​</a></h3><p><code>startKoin</code> 함수를 두 번 이상 호출할 수는 없습니다. 하지만 <code>loadKoinModules()</code> 함수를 직접 사용할 수 있습니다.</p><p>이 함수는 Koin을 사용하려는 SDK 개발자에게 유용합니다. 왜냐하면 그들은 <code>startKoin()</code> 함수를 사용할 필요 없이 라이브러리 시작 시 <code>loadKoinModules</code>를 사용하기만 하면 되기 때문입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadKoinModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(module1,module2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.)</span></span></code></pre></div><h3 id="모듈-언로드" tabindex="-1">모듈 언로드 <a class="header-anchor" href="#모듈-언로드" aria-label="Permalink to &quot;모듈 언로드&quot;">​</a></h3><p>주어진 함수를 사용하여 여러 정의를 언로드하고 해당 인스턴스들을 해제하는 것도 가능합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unloadKoinModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(module1,module2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.)</span></span></code></pre></div><h3 id="koin-중지-모든-리소스-닫기" tabindex="-1">Koin 중지 - 모든 리소스 닫기 <a class="header-anchor" href="#koin-중지-모든-리소스-닫기" aria-label="Permalink to &quot;Koin 중지 - 모든 리소스 닫기&quot;">​</a></h3><p>모든 Koin 리소스를 닫고 인스턴스와 정의를 삭제할 수 있습니다. 이를 위해 어디서든 <code>stopKoin()</code> 함수를 사용하여 Koin <code>GlobalContext</code>를 중지할 수 있습니다. 또는 <code>KoinApplication</code> 인스턴스에서 단순히 <code>close()</code>를 호출하기만 하면 됩니다.</p><h2 id="로깅" tabindex="-1">로깅 <a class="header-anchor" href="#로깅" aria-label="Permalink to &quot;로깅&quot;">​</a></h2><p>Koin은 모든 Koin 활동(할당, 조회 등)을 로깅하는 간단한 로깅 API를 제공합니다. 이 로깅 API는 아래 클래스로 표현됩니다.</p><p>Koin 로거</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> level: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Level.INFO) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(level: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.DEBUG, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.INFO, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.WARNING, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.ERROR, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Koin은 대상 플랫폼에 따라 몇 가지 로깅 구현을 제공합니다.</p><ul><li><code>PrintLogger</code> - 콘솔에 직접 로깅합니다 (<code>koin-core</code>에 포함됨)</li><li><code>EmptyLogger</code> - 아무것도 로깅하지 않습니다 (<code>koin-core</code>에 포함됨)</li><li><code>SLF4JLogger</code> - SLF4J를 사용하여 로깅합니다. Ktor 및 Spark에서 사용됩니다 (<code>koin-logger-slf4j</code> 프로젝트)</li><li><code>AndroidLogger</code> - Android 로거에 로깅합니다 (<code>koin-android</code>에 포함됨)</li></ul><h3 id="시작-시-로깅-설정" tabindex="-1">시작 시 로깅 설정 <a class="header-anchor" href="#시작-시-로깅-설정" aria-label="Permalink to &quot;시작 시 로깅 설정&quot;">​</a></h3><p>기본적으로 Koin은 <code>EmptyLogger</code>를 사용합니다. 다음과 같이 <code>PrintLogger</code>를 직접 사용할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LEVEL.INFO)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="프로퍼티-로드" tabindex="-1">프로퍼티 로드 <a class="header-anchor" href="#프로퍼티-로드" aria-label="Permalink to &quot;프로퍼티 로드&quot;">​</a></h2><p>시작 시 다음과 같은 여러 종류의 프로퍼티를 로드할 수 있습니다.</p><ul><li>환경 프로퍼티 - <em>시스템</em> 프로퍼티를 로드합니다.</li><li><code>koin.properties</code> 파일 - <code>/src/main/resources/koin.properties</code> 파일에서 프로퍼티를 로드합니다.</li><li>&quot;추가&quot; 시작 프로퍼티 - <code>startKoin</code> 함수에 전달되는 값의 맵입니다.</li></ul><h3 id="모듈에서-프로퍼티-읽기" tabindex="-1">모듈에서 프로퍼티 읽기 <a class="header-anchor" href="#모듈에서-프로퍼티-읽기" aria-label="Permalink to &quot;모듈에서 프로퍼티 읽기&quot;">​</a></h3><p>Koin 시작 시 프로퍼티를 로드해야 합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 기본 위치에서 프로퍼티 로드</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // (예: \`/src/main/resources/koin.properties\`)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fileProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Koin 모듈에서는 키를 사용하여 프로퍼티를 가져올 수 있습니다.</p><p><code>/src/main/resources/koin.properties</code> 파일에서</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 키 - 값</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//service_url</span></span></code></pre></div><p><code>getProperty</code> 함수로 로드하기만 하면 됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;server_url&quot; 키를 사용하여 해당 값 가져오기</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;server_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="koin-옵션-기능-플래그-4-1-0" tabindex="-1">Koin 옵션 - 기능 플래그 (4.1.0) <a class="header-anchor" href="#koin-옵션-기능-플래그-4-1-0" aria-label="Permalink to &quot;Koin 옵션 - 기능 플래그 (4.1.0)&quot;">​</a></h2><p>이제 Koin 애플리케이션은 전용 <code>options</code> 섹션을 통해 일부 실험적 기능을 활성화할 수 있습니다. 예를 들어:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ViewModel Scope 팩토리 기능 활성화 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        viewModelScopeFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,48)]))}const E=i(e,[["render",t]]);export{c as __pageData,E as default};
