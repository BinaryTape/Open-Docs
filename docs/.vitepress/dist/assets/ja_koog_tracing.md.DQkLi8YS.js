import{_ as a,c as i,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"トレーシング","description":"","frontmatter":{},"headers":[],"relativePath":"ja/koog/tracing.md","filePath":"ja/koog/tracing.md","lastUpdated":1755146406000}'),e={name:"ja/koog/tracing.md"};function l(h,s,p,d,k,r){return t(),i("div",null,s[0]||(s[0]=[n(`<h1 id="トレーシング" tabindex="-1">トレーシング <a class="header-anchor" href="#トレーシング" aria-label="Permalink to &quot;トレーシング&quot;">​</a></h1><p>このページでは、AIエージェント向けの包括的なトレーシング機能を提供するトレーシング機能について詳しく説明します。</p><h2 id="機能概要" tabindex="-1">機能概要 <a class="header-anchor" href="#機能概要" aria-label="Permalink to &quot;機能概要&quot;">​</a></h2><p>トレーシング機能は、エージェントの実行に関する詳細情報を捕捉する強力なモニタリングおよびデバッグツールです。捕捉される情報には以下が含まれます。</p><ul><li>戦略の実行</li><li>LLM呼び出し</li><li>ツール呼び出し</li><li>エージェントグラフ内のノード実行</li></ul><p>この機能は、エージェントパイプライン内の主要なイベントを傍受し、構成可能なメッセージプロセッサーに転送することで動作します。これらのプロセッサーは、トレース情報をログファイルやファイルシステム内のその他の種類のファイルなど、様々な出力先に出力でき、開発者はエージェントの動作を把握し、問題を効果的にトラブルシューティングできます。</p><h3 id="イベントフロー" tabindex="-1">イベントフロー <a class="header-anchor" href="#イベントフロー" aria-label="Permalink to &quot;イベントフロー&quot;">​</a></h3><ol><li>トレーシング機能は、エージェントパイプライン内のイベントを傍受します。</li><li>イベントは、設定されたメッセージフィルターに基づいてフィルタリングされます。</li><li>フィルタリングされたイベントは、登録されたメッセージプロセッサーに渡されます。</li><li>メッセージプロセッサーはイベントをフォーマットし、それぞれの出力先に送ります。</li></ol><h2 id="設定と初期化" tabindex="-1">設定と初期化 <a class="header-anchor" href="#設定と初期化" aria-label="Permalink to &quot;設定と初期化&quot;">​</a></h2><h3 id="基本的なセットアップ" tabindex="-1">基本的なセットアップ <a class="header-anchor" href="#基本的なセットアップ" aria-label="Permalink to &quot;基本的なセットアップ&quot;">​</a></h3><p>トレーシング機能を使用するには、以下が必要です。</p><ol><li>1つ以上のメッセージプロセッサーを用意する（既存のものを使用するか、独自に作成できます）。</li><li>エージェントに<code>Tracing</code>をインストールします。</li><li>メッセージフィルターを設定する（オプション）。</li><li>メッセージプロセッサーを機能に追加します。</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// トレースメッセージの出力先として使用されるロガー/ファイルを定義しています</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KotlinLogging.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputPath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/trace.log&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// エージェントを作成しています</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // トレースイベントを処理するメッセージプロセッサーを設定します</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TraceFeatureMessageLogWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logger))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         TraceFeatureMessageFileWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            outputPath,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buffered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // オプションでメッセージをフィルタリングします</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // LLM呼び出しとツール呼び出しのみをトレースします</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AfterLLMCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolCallEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="メッセージフィルタリング" tabindex="-1">メッセージフィルタリング <a class="header-anchor" href="#メッセージフィルタリング" aria-label="Permalink to &quot;メッセージフィルタリング&quot;">​</a></h3><p>既存のすべてのイベントを処理することも、特定の基準に基づいて一部を選択することもできます。 メッセージフィルターを使用すると、どのイベントを処理するかを制御できます。これは、エージェント実行の特定の側面に焦点を当てるのに役立ちます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// LLM関連イベントのみをフィルタリング</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeforeLLMCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AfterLLMCallEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ツール関連イベントのみをフィルタリング</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolCallResultEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolValidationErrorEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolCallFailureEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ノード実行イベントのみをフィルタリング</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AIAgentNodeExecutionStartEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AIAgentNodeExecutionEndEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="大量のトレースデータ" tabindex="-1">大量のトレースデータ <a class="header-anchor" href="#大量のトレースデータ" aria-label="Permalink to &quot;大量のトレースデータ&quot;">​</a></h3><p>複雑な戦略を持つエージェントや、長時間の実行を行うエージェントでは、トレースイベントの量が膨大になる可能性があります。イベントの量を管理するために、以下の方法を検討してください。</p><ul><li>特定のメッセージフィルターを使用してイベント数を減らします。</li><li>バッファリングまたはサンプリング機能を備えたカスタムメッセージプロセッサーを実装します。</li><li>ログファイルが肥大化するのを防ぐために、ファイルローテーションを使用します。</li></ul><h3 id="依存関係グラフ" tabindex="-1">依存関係グラフ <a class="header-anchor" href="#依存関係グラフ" aria-label="Permalink to &quot;依存関係グラフ&quot;">​</a></h3><p>Tracing機能には以下の依存関係があります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Tracing</span></span>
<span class="line"><span>├── AIAgentPipeline (for intercepting events)</span></span>
<span class="line"><span>├── TraceFeatureConfig</span></span>
<span class="line"><span>│   └── FeatureConfig</span></span>
<span class="line"><span>├── Message Processors</span></span>
<span class="line"><span>│   ├── TraceFeatureMessageLogWriter</span></span>
<span class="line"><span>│   │   └── FeatureMessageLogWriter</span></span>
<span class="line"><span>│   ├── TraceFeatureMessageFileWriter</span></span>
<span class="line"><span>│   │   └── FeatureMessageFileWriter</span></span>
<span class="line"><span>│   └── TraceFeatureMessageRemoteWriter</span></span>
<span class="line"><span>│       └── FeatureMessageRemoteWriter</span></span>
<span class="line"><span>└── Event Types (from ai.koog.agents.core.feature.model)</span></span>
<span class="line"><span>    ├── AIAgentStartedEvent</span></span>
<span class="line"><span>    ├── AIAgentFinishedEvent</span></span>
<span class="line"><span>    ├── AIAgentRunErrorEvent</span></span>
<span class="line"><span>    ├── AIAgentStrategyStartEvent</span></span>
<span class="line"><span>    ├── AIAgentStrategyFinishedEvent</span></span>
<span class="line"><span>    ├── AIAgentNodeExecutionStartEvent</span></span>
<span class="line"><span>    ├── AIAgentNodeExecutionEndEvent</span></span>
<span class="line"><span>    ├── LLMCallStartEvent</span></span>
<span class="line"><span>    ├── LLMCallWithToolsStartEvent</span></span>
<span class="line"><span>    ├── LLMCallEndEvent</span></span>
<span class="line"><span>    ├── LLMCallWithToolsEndEvent</span></span>
<span class="line"><span>    ├── ToolCallEvent</span></span>
<span class="line"><span>    ├── ToolValidationErrorEvent</span></span>
<span class="line"><span>    ├── ToolCallFailureEvent</span></span>
<span class="line"><span>    └── ToolCallResultEvent</span></span></code></pre></div><h2 id="例とクイックスタート" tabindex="-1">例とクイックスタート <a class="header-anchor" href="#例とクイックスタート" aria-label="Permalink to &quot;例とクイックスタート&quot;">​</a></h2><h3 id="ロガーへの基本的なトレーシング" tabindex="-1">ロガーへの基本的なトレーシング <a class="header-anchor" href="#ロガーへの基本的なトレーシング" aria-label="Permalink to &quot;ロガーへの基本的なトレーシング&quot;">​</a></h3><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ロガーを作成します</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KotlinLogging.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // トレーシング機能付きエージェントを作成します</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TraceFeatureMessageLogWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logger))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // エージェントを実行します</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, agent!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="エラー処理とエッジケース" tabindex="-1">エラー処理とエッジケース <a class="header-anchor" href="#エラー処理とエッジケース" aria-label="Permalink to &quot;エラー処理とエッジケース&quot;">​</a></h2><h3 id="メッセージプロセッサーがない場合" tabindex="-1">メッセージプロセッサーがない場合 <a class="header-anchor" href="#メッセージプロセッサーがない場合" aria-label="Permalink to &quot;メッセージプロセッサーがない場合&quot;">​</a></h3><p>Tracing機能にメッセージプロセッサーが追加されていない場合、警告がログに記録されます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Tracing Feature. No feature out stream providers are defined. Trace streaming has no target.</span></span></code></pre></div><p>この機能は引き続きイベントを傍受しますが、どこにも処理または出力されません。</p><h3 id="リソース管理" tabindex="-1">リソース管理 <a class="header-anchor" href="#リソース管理" aria-label="Permalink to &quot;リソース管理&quot;">​</a></h3><p>メッセージプロセッサーは、適切に解放する必要のあるリソース（ファイルハンドルなど）を保持する場合があります。適切なクリーンアップを確実に行うために、<code>use</code>拡張関数を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// エージェントを作成しています</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> writer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TraceFeatureMessageFileWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        outputPath,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buffered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// エージェントを実行します</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ブロックが終了すると、ライターは自動的に閉じられます</span></span></code></pre></div><h3 id="特定のイベントをファイルにトレースする" tabindex="-1">特定のイベントをファイルにトレースする <a class="header-anchor" href="#特定のイベントをファイルにトレースする" aria-label="Permalink to &quot;特定のイベントをファイルにトレースする&quot;">​</a></h3><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // LLM呼び出しのみをトレースします</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeforeLLMCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AfterLLMCallEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="特定のイベントをリモートエンドポイントにトレースする" tabindex="-1">特定のイベントをリモートエンドポイントにトレースする <a class="header-anchor" href="#特定のイベントをリモートエンドポイントにトレースする" aria-label="Permalink to &quot;特定のイベントをリモートエンドポイントにトレースする&quot;">​</a></h3><p>ネットワーク経由でイベントデータを送信する必要がある場合は、リモートエンドポイントへのトレーシングを使用します。一旦開始されると、リモートエンドポイントへのトレーシングは指定されたポート番号で軽量サーバーを起動し、Kotlin Server-Sent Events (SSE)を介してイベントを送信します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// エージェントを作成しています</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connectionConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgentFeatureServerConnectionConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> host, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> writer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TraceFeatureMessageRemoteWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connectionConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connectionConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// エージェントを実行します</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ブロックが終了すると、ライターは自動的に閉じられます</span></span></code></pre></div><p>クライアント側では、<code>FeatureMessageRemoteClient</code>を使用してイベントを受信し、逆シリアル化できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgentFeatureClientConnectionConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> host, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port, protocol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> URLProtocol.HTTP)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agentEvents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefinedFeatureEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientJob </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    FeatureMessageRemoteClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(connectionConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientConfig, scope </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> collectEventsJob </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            client.receivedMessages.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consumeAsFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // サーバーからイベントを収集</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                agentEvents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefinedFeatureEvent)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // エージェント完了時にイベント収集を停止</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AIAgentFinishedEvent) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    cancel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        collectEventsJob.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">healthCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clientJob).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="apiドキュメント" tabindex="-1">APIドキュメント <a class="header-anchor" href="#apiドキュメント" aria-label="Permalink to &quot;APIドキュメント&quot;">​</a></h2><p>Tracing機能は、以下の主要コンポーネントを持つモジュラーアーキテクチャに従います。</p><ol><li><a href="https://api.koog.ai/agents/agents-features/agents-features-trace/ai.koog.agents.features.tracing.feature/-tracing/index.html" target="_blank" rel="noreferrer">Tracing</a>: エージェントパイプライン内のイベントを傍受する主要な機能クラスです。</li><li><a href="https://api.koog.ai/agents/agents-features/agents-features-trace/ai.koog.agents.features.tracing.feature/-trace-feature-config/index.html" target="_blank" rel="noreferrer">TraceFeatureConfig</a>: 機能の動作をカスタマイズするための設定クラスです。</li><li>Message Processors: トレースイベントを処理し、出力するコンポーネントです。 <ul><li><a href="https://api.koog.ai/agents/agents-features/agents-features-trace/ai.koog.agents.features.tracing.writer/-trace-feature-message-log-writer/index.html" target="_blank" rel="noreferrer">TraceFeatureMessageLogWriter</a>: トレースイベントをロガーに書き込みます。</li><li><a href="https://api.koog.ai/agents/agents-features/agents-features-trace/ai.koog.agents.features.tracing.writer/-trace-feature-message-file-writer/index.html" target="_blank" rel="noreferrer">TraceFeatureMessageFileWriter</a>: トレースイベントをファイルに書き込みます。</li><li><a href="https://api.koog.ai/agents/agents-features/agents-features-trace/ai.koog.agents.features.tracing.writer/-trace-feature-message-remote-writer/index.html" target="_blank" rel="noreferrer">TraceFeatureMessageRemoteWriter</a>: トレースイベントをリモートサーバーに送信します。</li></ul></li></ol><h2 id="faqとトラブルシューティング" tabindex="-1">FAQとトラブルシューティング <a class="header-anchor" href="#faqとトラブルシューティング" aria-label="Permalink to &quot;FAQとトラブルシューティング&quot;">​</a></h2><p>以下のセクションには、Tracing機能に関連するよくある質問とその回答が含まれています。</p><h3 id="エージェント実行の特定の部分のみをトレースするにはどうすればよいですか" tabindex="-1">エージェント実行の特定の部分のみをトレースするにはどうすればよいですか？ <a class="header-anchor" href="#エージェント実行の特定の部分のみをトレースするにはどうすればよいですか" aria-label="Permalink to &quot;エージェント実行の特定の部分のみをトレースするにはどうすればよいですか？&quot;">​</a></h3><p><code>messageFilter</code>プロパティを使用してイベントをフィルタリングします。例えば、ノード実行のみをトレースするには：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // LLM呼び出しのみをトレースします</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeforeLLMCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AfterLLMCallEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="複数のメッセージプロセッサーを使用できますか" tabindex="-1">複数のメッセージプロセッサーを使用できますか？ <a class="header-anchor" href="#複数のメッセージプロセッサーを使用できますか" aria-label="Permalink to &quot;複数のメッセージプロセッサーを使用できますか？&quot;">​</a></h3><p>はい、複数のメッセージプロセッサーを追加して、同時に異なる出力先にトレースできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TraceFeatureMessageLogWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logger))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TraceFeatureMessageFileWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(outputPath, syncOpener))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TraceFeatureMessageRemoteWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(connectionConfig))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="カスタムメッセージプロセッサーを作成するにはどうすればよいですか" tabindex="-1">カスタムメッセージプロセッサーを作成するにはどうすればよいですか？ <a class="header-anchor" href="#カスタムメッセージプロセッサーを作成するにはどうすればよいですか" aria-label="Permalink to &quot;カスタムメッセージプロセッサーを作成するにはどうすればよいですか？&quot;">​</a></h3><p><code>FeatureMessageProcessor</code>インターフェースを実装します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomTraceProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FeatureMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // プロセッサーの現在のオープン状態</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _isOpen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MutableStateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isOpen: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _isOpen.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asStateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FeatureMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // カスタム処理ロジック</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (message) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AIAgentNodeExecutionStartEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ノード開始イベントを処理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AfterLLMCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // LLM呼び出し終了イベントを処理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // その他のイベントタイプを処理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 確立された接続を閉じる</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// カスタムプロセッサーを使用します</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomTraceProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>メッセージプロセッサーで処理できる既存のイベントタイプの詳細については、<a href="#predefined-event-types">定義済みイベントタイプ</a>を参照してください。</p><h2 id="定義済みイベントタイプ" tabindex="-1">定義済みイベントタイプ <a class="header-anchor" href="#定義済みイベントタイプ" aria-label="Permalink to &quot;定義済みイベントタイプ&quot;">​</a></h2><p>Koogは、カスタムメッセージプロセッサーで使用できる定義済みイベントタイプを提供します。定義済みイベントは、関連するエンティティに応じていくつかのカテゴリに分類できます。</p><ul><li><a href="#agent-events">エージェントイベント</a></li><li><a href="#strategy-events">戦略イベント</a></li><li><a href="#node-events">ノードイベント</a></li><li><a href="#llm-call-events">LLM呼び出しイベント</a></li><li><a href="#tool-call-events">ツール呼び出しイベント</a></li></ul><h3 id="エージェントイベント" tabindex="-1">エージェントイベント <a class="header-anchor" href="#エージェントイベント" aria-label="Permalink to &quot;エージェントイベント&quot;">​</a></h3><h4 id="aiagentstartedevent" tabindex="-1">AIAgentStartedEvent <a class="header-anchor" href="#aiagentstartedevent" aria-label="Permalink to &quot;AIAgentStartedEvent&quot;">​</a></h4><p>エージェントの実行開始を表します。以下のフィールドが含まれます：</p><table tabindex="0"><thead><tr><th>名前</th><th>データ型</th><th>必須</th><th>デフォルト</th><th>説明</th></tr></thead><tbody><tr><td><code>strategyName</code></td><td>String</td><td>Yes</td><td></td><td>エージェントが従うべき戦略の名前。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>AIAgentStartedEvent</code></td><td>イベントの識別子。通常、イベントクラスの<code>simpleName</code>です。</td></tr></tbody></table><h4 id="aiagentfinishedevent" tabindex="-1">AIAgentFinishedEvent <a class="header-anchor" href="#aiagentfinishedevent" aria-label="Permalink to &quot;AIAgentFinishedEvent&quot;">​</a></h4><p>エージェントの実行終了を表します。以下のフィールドが含まれます：</p><table tabindex="0"><thead><tr><th>名前</th><th>データ型</th><th>必須</th><th>デフォルト</th><th>説明</th></tr></thead><tbody><tr><td><code>strategyName</code></td><td>String</td><td>Yes</td><td></td><td>エージェントが従った戦略の名前。</td></tr><tr><td><code>result</code></td><td>String</td><td>Yes</td><td></td><td>エージェント実行の結果。結果がない場合は<code>null</code>になります。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>AIAgentFinishedEvent</code></td><td>イベントの識別子。通常、イベントクラスの<code>simpleName</code>です。</td></tr></tbody></table><h4 id="aiagentrunerrorevent" tabindex="-1">AIAgentRunErrorEvent <a class="header-anchor" href="#aiagentrunerrorevent" aria-label="Permalink to &quot;AIAgentRunErrorEvent&quot;">​</a></h4><p>エージェントの実行中にエラーが発生したことを表します。以下のフィールドが含まれます：</p><table tabindex="0"><thead><tr><th>名前</th><th>データ型</th><th>必須</th><th>デフォルト</th><th>説明</th></tr></thead><tbody><tr><td><code>strategyName</code></td><td>String</td><td>Yes</td><td></td><td>エージェントが従った戦略の名前。</td></tr><tr><td><code>error</code></td><td>AIAgentError</td><td>Yes</td><td></td><td>エージェント実行中に発生した特定のエラー。<a href="#aiagenterror">AIAgentError</a>の詳細については、を参照してください。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>AIAgentRunErrorEvent</code></td><td>イベントの識別子。通常、イベントクラスの<code>simpleName</code>です。</td></tr></tbody></table><p><a id="aiagenterror"></a><code>AIAgentError</code>クラスは、エージェントの実行中に発生したエラーに関する詳細情報を提供します。以下のフィールドが含まれます：</p><table tabindex="0"><thead><tr><th>名前</th><th>データ型</th><th>必須</th><th>デフォルト</th><th>説明</th></tr></thead><tbody><tr><td><code>message</code></td><td>String</td><td>Yes</td><td></td><td>特定のエラーに関する詳細情報を提供するメッセージ。</td></tr><tr><td><code>stackTrace</code></td><td>String</td><td>Yes</td><td></td><td>最後に実行されたコードまでのスタックレコードのコレクション。</td></tr><tr><td><code>cause</code></td><td>String</td><td>No</td><td>null</td><td>利用可能な場合、エラーの原因。</td></tr></tbody></table><h3 id="戦略イベント" tabindex="-1">戦略イベント <a class="header-anchor" href="#戦略イベント" aria-label="Permalink to &quot;戦略イベント&quot;">​</a></h3><h4 id="aiagentstrategystartevent" tabindex="-1">AIAgentStrategyStartEvent <a class="header-anchor" href="#aiagentstrategystartevent" aria-label="Permalink to &quot;AIAgentStrategyStartEvent&quot;">​</a></h4><p>戦略の実行開始を表します。以下のフィールドが含まれます：</p><table tabindex="0"><thead><tr><th>名前</th><th>データ型</th><th>必須</th><th>デフォルト</th><th>説明</th></tr></thead><tbody><tr><td><code>strategyName</code></td><td>String</td><td>Yes</td><td></td><td>戦略の名前。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>AIAgentStrategyStartEvent</code></td><td>イベントの識別子。通常、イベントクラスの<code>simpleName</code>です。</td></tr></tbody></table><h4 id="aiagentstrategyfinishedevent" tabindex="-1">AIAgentStrategyFinishedEvent <a class="header-anchor" href="#aiagentstrategyfinishedevent" aria-label="Permalink to &quot;AIAgentStrategyFinishedEvent&quot;">​</a></h4><p>戦略の実行終了を表します。以下のフィールドが含まれます：</p><table tabindex="0"><thead><tr><th>名前</th><th>データ型</th><th>必須</th><th>デフォルト</th><th>説明</th></tr></thead><tbody><tr><td><code>strategyName</code></td><td>String</td><td>Yes</td><td></td><td>戦略の名前。</td></tr><tr><td><code>result</code></td><td>String</td><td>Yes</td><td></td><td>実行の結果。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>AIAgentStrategyFinishedEvent</code></td><td>イベントの識別子。通常、イベントクラスの<code>simpleName</code>です。</td></tr></tbody></table><h3 id="ノードイベント" tabindex="-1">ノードイベント <a class="header-anchor" href="#ノードイベント" aria-label="Permalink to &quot;ノードイベント&quot;">​</a></h3><h4 id="aiagentnodeexecutionstartevent" tabindex="-1">AIAgentNodeExecutionStartEvent <a class="header-anchor" href="#aiagentnodeexecutionstartevent" aria-label="Permalink to &quot;AIAgentNodeExecutionStartEvent&quot;">​</a></h4><p>ノードの実行開始を表します。以下のフィールドが含まれます：</p><table tabindex="0"><thead><tr><th>名前</th><th>データ型</th><th>必須</th><th>デフォルト</th><th>説明</th></tr></thead><tbody><tr><td><code>nodeName</code></td><td>String</td><td>Yes</td><td></td><td>実行が開始されたノードの名前。</td></tr><tr><td><code>input</code></td><td>String</td><td>Yes</td><td></td><td>ノードの入力値。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>AIAgentNodeExecutionStartEvent</code></td><td>イベントの識別子。通常、イベントクラスの<code>simpleName</code>です。</td></tr></tbody></table><h4 id="aiagentnodeexecutionendevent" tabindex="-1">AIAgentNodeExecutionEndEvent <a class="header-anchor" href="#aiagentnodeexecutionendevent" aria-label="Permalink to &quot;AIAgentNodeExecutionEndEvent&quot;">​</a></h4><p>ノードの実行終了を表します。以下のフィールドが含まれます：</p><table tabindex="0"><thead><tr><th>名前</th><th>データ型</th><th>必須</th><th>デフォルト</th><th>説明</th></tr></thead><tbody><tr><td><code>nodeName</code></td><td>String</td><td>Yes</td><td></td><td>実行が終了したノードの名前。</td></tr><tr><td><code>input</code></td><td>String</td><td>Yes</td><td></td><td>ノードの入力値。</td></tr><tr><td><code>output</code></td><td>String</td><td>Yes</td><td></td><td>ノードによって生成された出力値。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>AIAgentNodeExecutionEndEvent</code></td><td>イベントの識別子。通常、イベントクラスの<code>simpleName</code>です。</td></tr></tbody></table><h3 id="llm呼び出しイベント" tabindex="-1">LLM呼び出しイベント <a class="header-anchor" href="#llm呼び出しイベント" aria-label="Permalink to &quot;LLM呼び出しイベント&quot;">​</a></h3><h4 id="llmcallstartevent" tabindex="-1">LLMCallStartEvent <a class="header-anchor" href="#llmcallstartevent" aria-label="Permalink to &quot;LLMCallStartEvent&quot;">​</a></h4><p>LLM呼び出しの開始を表します。以下のフィールドが含まれます：</p><table tabindex="0"><thead><tr><th>名前</th><th>データ型</th><th>必須</th><th>デフォルト</th><th>説明</th></tr></thead><tbody><tr><td><code>prompt</code></td><td>Prompt</td><td>Yes</td><td></td><td>モデルに送信されるプロンプト。<a href="#prompt">Prompt</a>の詳細については、を参照してください。</td></tr><tr><td><code>tools</code></td><td>List&lt;String&gt;</td><td>Yes</td><td></td><td>モデルが呼び出すことができるツールのリスト。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>LLMCallStartEvent</code></td><td>イベントの識別子。通常、イベントクラスの<code>simpleName</code>です。</td></tr></tbody></table><p><a id="prompt"></a><code>Prompt</code>クラスは、メッセージのリスト、一意の識別子、および言語モデル設定用のオプションパラメーターで構成される、プロンプトのデータ構造を表します。以下のフィールドが含まれます：</p><table tabindex="0"><thead><tr><th>名前</th><th>データ型</th><th>必須</th><th>デフォルト</th><th>説明</th></tr></thead><tbody><tr><td><code>messages</code></td><td>List&lt;Message&gt;</td><td>Yes</td><td></td><td>プロンプトを構成するメッセージのリスト。</td></tr><tr><td><code>id</code></td><td>String</td><td>Yes</td><td></td><td>プロンプトの一意の識別子。</td></tr><tr><td><code>params</code></td><td>LLMParams</td><td>No</td><td>LLMParams()</td><td>LLMがコンテンツを生成する方法を制御する設定。</td></tr></tbody></table><h4 id="llmcallendevent" tabindex="-1">LLMCallEndEvent <a class="header-anchor" href="#llmcallendevent" aria-label="Permalink to &quot;LLMCallEndEvent&quot;">​</a></h4><p>LLM呼び出しの終了を表します。以下のフィールドが含まれます：</p><table tabindex="0"><thead><tr><th>名前</th><th>データ型</th><th>必須</th><th>デフォルト</th><th>説明</th></tr></thead><tbody><tr><td><code>responses</code></td><td>List&lt;Message.Response&gt;</td><td>Yes</td><td></td><td>モデルによって返された1つ以上の応答。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>LLMCallEndEvent</code></td><td>イベントの識別子。通常、イベントクラスの<code>simpleName</code>です。</td></tr></tbody></table><h3 id="ツール呼び出しイベント" tabindex="-1">ツール呼び出しイベント <a class="header-anchor" href="#ツール呼び出しイベント" aria-label="Permalink to &quot;ツール呼び出しイベント&quot;">​</a></h3><h4 id="toolcallevent" tabindex="-1">ToolCallEvent <a class="header-anchor" href="#toolcallevent" aria-label="Permalink to &quot;ToolCallEvent&quot;">​</a></h4><p>モデルがツールを呼び出すイベントを表します。以下のフィールドが含まれます：</p><table tabindex="0"><thead><tr><th>名前</th><th>データ型</th><th>必須</th><th>デフォルト</th><th>説明</th></tr></thead><tbody><tr><td><code>toolName</code></td><td>String</td><td>Yes</td><td></td><td>ツールの名前。</td></tr><tr><td><code>toolArgs</code></td><td>Tool.Args</td><td>Yes</td><td></td><td>ツールに提供される引数。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>ToolCallEvent</code></td><td>イベントの識別子。通常、イベントクラスの<code>simpleName</code>です。</td></tr></tbody></table><h4 id="toolvalidationerrorevent" tabindex="-1">ToolValidationErrorEvent <a class="header-anchor" href="#toolvalidationerrorevent" aria-label="Permalink to &quot;ToolValidationErrorEvent&quot;">​</a></h4><p>ツール呼び出し中に検証エラーが発生したことを表します。以下のフィールドが含まれます：</p><table tabindex="0"><thead><tr><th>名前</th><th>データ型</th><th>必須</th><th>デフォルト</th><th>説明</th></tr></thead><tbody><tr><td><code>toolName</code></td><td>String</td><td>Yes</td><td></td><td>検証が失敗したツールの名前。</td></tr><tr><td><code>toolArgs</code></td><td>Tool.Args</td><td>Yes</td><td></td><td>ツールに提供される引数。</td></tr><tr><td><code>errorMessage</code></td><td>String</td><td>Yes</td><td></td><td>検証エラーメッセージ。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>ToolValidationErrorEvent</code></td><td>イベントの識別子。通常、イベントクラスの<code>simpleName</code>です。</td></tr></tbody></table><h4 id="toolcallfailureevent" tabindex="-1">ToolCallFailureEvent <a class="header-anchor" href="#toolcallfailureevent" aria-label="Permalink to &quot;ToolCallFailureEvent&quot;">​</a></h4><p>ツール呼び出しの失敗を表します。以下のフィールドが含まれます：</p><table tabindex="0"><thead><tr><th>名前</th><th>データ型</th><th>必須</th><th>デフォルト</th><th>説明</th></tr></thead><tbody><tr><td><code>toolName</code></td><td>String</td><td>Yes</td><td></td><td>ツールの名前。</td></tr><tr><td><code>toolArgs</code></td><td>Tool.Args</td><td>Yes</td><td></td><td>ツールに提供される引数。</td></tr><tr><td><code>error</code></td><td>AIAgentError</td><td>Yes</td><td></td><td>ツールを呼び出そうとしたときに発生した特定のエラー。<a href="#aiagenterror">AIAgentError</a>の詳細については、を参照してください。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>ToolCallFailureEvent</code></td><td>イベントの識別子。通常、イベントクラスの<code>simpleName</code>です。</td></tr></tbody></table><h4 id="toolcallresultevent" tabindex="-1">ToolCallResultEvent <a class="header-anchor" href="#toolcallresultevent" aria-label="Permalink to &quot;ToolCallResultEvent&quot;">​</a></h4><p>結果を伴うツール呼び出しの成功を表します。以下のフィールドが含まれます：</p><table tabindex="0"><thead><tr><th>名前</th><th>データ型</th><th>必須</th><th>デフォルト</th><th>説明</th></tr></thead><tbody><tr><td><code>toolName</code></td><td>String</td><td>Yes</td><td></td><td>ツールの名前。</td></tr><tr><td><code>toolArgs</code></td><td>Tool.Args</td><td>Yes</td><td></td><td>ツールに提供される引数。</td></tr><tr><td><code>result</code></td><td>ToolResult</td><td>Yes</td><td></td><td>ツール呼び出しの結果。</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>ToolCallResultEvent</code></td><td>イベントの識別子。通常、イベントクラスの<code>simpleName</code>です。</td></tr></tbody></table>`,106)]))}const g=a(e,[["render",l]]);export{o as __pageData,g as default};
