import{_ as a,c as s,o,ag as i}from"./chunks/framework.Bksy39di.js";const h=JSON.parse('{"title":"Compose 컴파일러 마이그레이션 가이드","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/compose-compiler-migration-guide.md","filePath":"ko/kotlin/compose-compiler-migration-guide.md","lastUpdated":1754307826000}'),l={name:"ko/kotlin/compose-compiler-migration-guide.md"};function p(n,e,t,r,c,d){return o(),s("div",null,e[0]||(e[0]=[i(`<h1 id="compose-컴파일러-마이그레이션-가이드" tabindex="-1">Compose 컴파일러 마이그레이션 가이드 <a class="header-anchor" href="#compose-컴파일러-마이그레이션-가이드" aria-label="Permalink to &quot;Compose 컴파일러 마이그레이션 가이드&quot;">​</a></h1><p>Compose 컴파일러는 Gradle 플러그인에 의해 보완되며, 이는 설정을 간소화하고 컴파일러 옵션에 더 쉽게 접근할 수 있도록 합니다. Android Gradle 플러그인(AGP)과 함께 적용될 때, 이 Compose 컴파일러 플러그인은 AGP가 자동으로 제공하는 Compose 컴파일러의 좌표를 재정의합니다.</p><p>Compose 컴파일러는 Kotlin 2.0.0부터 Kotlin 리포지토리에 병합되었습니다. 이는 Compose 컴파일러가 Kotlin과 동시에 제공되며 항상 동일한 버전의 Kotlin과 호환되므로, 프로젝트를 Kotlin 2.0.0 이상으로 원활하게 마이그레이션하는 데 도움이 됩니다.</p><p>프로젝트에서 새로운 Compose 컴파일러 플러그인을 사용하려면 Compose를 사용하는 각 모듈에 적용하세요. <a href="#migrating-a-jetpack-compose-project">Jetpack Compose 프로젝트를 마이그레이션하는 방법</a>에 대한 자세한 내용은 계속 읽어보세요. Compose Multiplatform 프로젝트의 경우, <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-compiler.html#migrating-a-compose-multiplatform-project" target="_blank" rel="noreferrer">멀티플랫폼 마이그레이션 가이드</a>를 참조하세요.</p><h2 id="jetpack-compose-프로젝트-마이그레이션" tabindex="-1">Jetpack Compose 프로젝트 마이그레이션 <a class="header-anchor" href="#jetpack-compose-프로젝트-마이그레이션" aria-label="Permalink to &quot;Jetpack Compose 프로젝트 마이그레이션&quot;">​</a></h2><p>1.9 버전에서 Kotlin 2.0.0 또는 그 이후 버전으로 마이그레이션할 때, Compose 컴파일러를 다루는 방식에 따라 프로젝트 구성을 조정해야 합니다. 구성 관리를 자동화하기 위해 Kotlin Gradle 플러그인과 Compose 컴파일러 Gradle 플러그인을 사용하는 것을 권장합니다.</p><h3 id="gradle-플러그인을-사용하여-compose-컴파일러-관리하기" tabindex="-1">Gradle 플러그인을 사용하여 Compose 컴파일러 관리하기 <a class="header-anchor" href="#gradle-플러그인을-사용하여-compose-컴파일러-관리하기" aria-label="Permalink to &quot;Gradle 플러그인을 사용하여 Compose 컴파일러 관리하기&quot;">​</a></h3><p>Android 모듈의 경우:</p><ol><li>Compose 컴파일러 Gradle 플러그인을 <a href="https://docs.gradle.org/current/userguide/platforms.html#sub:conventional-dependencies-toml" target="_blank" rel="noreferrer">Gradle 버전 카탈로그</a>에 추가합니다:</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[versions]</span></span>
<span class="line"><span># ...</span></span>
<span class="line"><span>kotlin = &quot;2.2.10&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[plugins]</span></span>
<span class="line"><span># ...</span></span>
<span class="line"><span>org-jetbrains-kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }</span></span>
<span class="line"><span>compose-compiler = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }</span></span></code></pre></div><ol start="2"><li>루트 <code>build.gradle.kts</code> 파일에 Gradle 플러그인을 추가합니다:</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.compose.compiler) apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li>Jetpack Compose를 사용하는 모든 모듈에 플러그인을 적용합니다:</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.compose.compiler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="4"><li><p>Jetpack Compose 컴파일러의 컴파일러 옵션을 사용 중인 경우, <code>composeCompiler {}</code> 블록에 설정하세요. 참조를 위해 <a href="/ko/kotlin/compose-compiler-options">컴파일러 옵션 목록</a>을 확인하세요.</p></li><li><p>Compose 컴파일러 아티팩트를 직접 참조하는 경우, 이러한 참조를 제거하고 Gradle 플러그인이 처리하도록 할 수 있습니다.</p></li></ol><h3 id="gradle-플러그인-없이-compose-컴파일러-사용하기" tabindex="-1">Gradle 플러그인 없이 Compose 컴파일러 사용하기 <a class="header-anchor" href="#gradle-플러그인-없이-compose-컴파일러-사용하기" aria-label="Permalink to &quot;Gradle 플러그인 없이 Compose 컴파일러 사용하기&quot;">​</a></h3><p>Gradle 플러그인을 사용하여 Compose 컴파일러를 관리하지 않는 경우, 프로젝트에서 오래된 Maven 아티팩트에 대한 직접 참조를 업데이트하세요:</p><ul><li><code>androidx.compose.compiler:compiler</code>를 <code>org.jetbrains.kotlin:kotlin-compose-compiler-plugin-embeddable</code>로 변경</li><li><code>androidx.compose.compiler:compiler-hosted</code>를 <code>org.jetbrains.kotlin:kotlin-compose-compiler-plugin</code>으로 변경</li></ul><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><ul><li>Compose 컴파일러가 Kotlin 리포지토리로 이전하는 것에 대한 <a href="https://android-developers.googleblog.com/2024/04/jetpack-compose-compiler-moving-to-kotlin-repository.html" target="_blank" rel="noreferrer">Google의 발표</a>를 확인하세요.</li><li>Jetpack Compose를 사용하여 Android 앱을 빌드하는 경우, <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-integrate-in-existing-app.html" target="_blank" rel="noreferrer">멀티플랫폼으로 만드는 방법에 대한 가이드</a>를 확인하세요.</li></ul>`,20)]))}const k=a(l,[["render",p]]);export{h as __pageData,k as default};
