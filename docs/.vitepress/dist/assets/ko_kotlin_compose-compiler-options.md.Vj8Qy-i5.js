import{_ as i,c as a,o as e,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Compose 컴파일러 옵션 DSL","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/compose-compiler-options.md","filePath":"ko/kotlin/compose-compiler-options.md","lastUpdated":1754307826000}'),p={name:"ko/kotlin/compose-compiler-options.md"};function n(t,s,o,r,k,h){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="compose-컴파일러-옵션-dsl" tabindex="-1">Compose 컴파일러 옵션 DSL <a class="header-anchor" href="#compose-컴파일러-옵션-dsl" aria-label="Permalink to &quot;Compose 컴파일러 옵션 DSL&quot;">​</a></h1><p>Compose 컴파일러 Gradle 플러그인은 다양한 컴파일러 옵션을 위한 DSL을 제공합니다. 이 DSL을 사용하여 플러그인을 적용하는 모듈의 <code>build.gradle.kts</code> 파일에 있는 <code>composeCompiler {}</code> 블록에서 컴파일러를 구성할 수 있습니다.</p><p>지정할 수 있는 옵션은 두 가지 종류가 있습니다:</p><ul><li>주어진 프로젝트에서 필요에 따라 비활성화하거나 활성화할 수 있는 일반 컴파일러 설정</li><li>새롭고 실험적인 기능을 활성화하거나 비활성화하는 기능 플래그 (Feature flag), 이 기능은 결국 기준선(baseline)의 일부가 되어야 합니다.</li></ul><p><a href="https://kotlinlang.org/api/kotlin-gradle-plugin/compose-compiler-gradle-plugin/org.jetbrains.kotlin.compose.compiler.gradle/-compose-compiler-gradle-plugin-extension/" target="_blank" rel="noreferrer">사용 가능한 일반 설정 목록</a>과 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/compose-compiler-gradle-plugin/org.jetbrains.kotlin.compose.compiler.gradle/-compose-feature-flag/-companion/" target="_blank" rel="noreferrer">지원되는 기능 플래그 목록</a>은 Compose 컴파일러 Gradle 플러그인 API 참조에서 찾을 수 있습니다.</p><p>다음은 설정 예시입니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composeCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    includeSourceInformation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    featureFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.StrongSkipping.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.OptimizeNonSkippingGroups</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Gradle 플러그인은 Kotlin 2.0 이전에는 수동으로만 지정되던 몇 가지 Compose 컴파일러 옵션에 대한 기본값을 제공합니다. 예를 들어, 이러한 옵션 중 일부를 <code>freeCompilerArgs</code>로 설정한 경우, Gradle은 중복 옵션 오류를 보고합니다.</p></div><h2 id="기능-플래그의-목적과-사용" tabindex="-1">기능 플래그의 목적과 사용 <a class="header-anchor" href="#기능-플래그의-목적과-사용" aria-label="Permalink to &quot;기능 플래그의 목적과 사용&quot;">​</a></h2><p>기능 플래그는 새로운 플래그가 계속해서 출시되고 사용 중단됨에 따라 최상위 속성(top-level properties)에 대한 변경을 최소화하기 위해 별도의 옵션 세트로 구성됩니다.</p><p>기본적으로 비활성화된 기능 플래그를 활성화하려면, 세트에 지정합니다. 예를 들어:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">featureFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ComposeFeatureFlag.OptimizeNonSkippingGroups)</span></span></code></pre></div><p>기본적으로 활성화된 기능 플래그를 비활성화하려면, <code>disabled()</code> 함수를 호출합니다. 예를 들어:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">featureFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ComposeFeatureFlag.StrongSkipping.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Compose 컴파일러를 직접 구성하는 경우, 다음 구문을 사용하여 기능 플래그를 전달합니다:</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-P plugin:androidx.compose.compiler.plugins.kotlin:featureFlag=&lt;flag name&gt;</span></span></code></pre></div><p><a href="https://kotlinlang.org/api/kotlin-gradle-plugin/compose-compiler-gradle-plugin/org.jetbrains.kotlin.compose.compiler.gradle/-compose-feature-flag/-companion/" target="_blank" rel="noreferrer">지원되는 기능 플래그 목록</a>은 Compose 컴파일러 Gradle 플러그인 API 참조를 확인하세요.</p>`,17)]))}const g=i(p,[["render",n]]);export{c as __pageData,g as default};
