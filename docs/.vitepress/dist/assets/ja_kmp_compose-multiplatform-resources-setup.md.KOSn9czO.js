import{_ as p,a as o}from"./chunks/compose-resources-qualifiers.Cw94GyEp.js";import{_ as r,C as i,c as h,o as d,j as a,G as e,ag as l,a as k}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"マルチプラットフォームリソースのセットアップと構成","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-multiplatform-resources-setup.md","filePath":"ja/kmp/compose-multiplatform-resources-setup.md","lastUpdated":1755516278000}'),c={name:"ja/kmp/compose-multiplatform-resources-setup.md"};function E(u,s,g,y,m,F){const n=i("show-structure"),t=i("secondary-label");return d(),h("div",null,[s[0]||(s[0]=a("h1",{id:"マルチプラットフォームリソースのセットアップと構成",tabindex:"-1"},[k("マルチプラットフォームリソースのセットアップと構成 "),a("a",{class:"header-anchor",href:"#マルチプラットフォームリソースのセットアップと構成","aria-label":'Permalink to "マルチプラットフォームリソースのセットアップと構成"'},"​")],-1)),e(n,{depth:"3"}),s[1]||(s[1]=l(`<p>マルチプラットフォームリソースを使用するようにプロジェクトを適切に構成するには：</p><ol><li>ライブラリの依存関係を追加します。</li><li>各種類のリソースに必要なディレクトリを作成します。</li><li>修飾されたリソース（例えば、ダークUIテーマ用の異なる画像やローカライズされた文字列など）のための追加ディレクトリを作成します。</li></ol><h2 id="ビルドスクリプトとディレクトリのセットアップ" tabindex="-1">ビルドスクリプトとディレクトリのセットアップ <a class="header-anchor" href="#ビルドスクリプトとディレクトリのセットアップ" aria-label="Permalink to &quot;ビルドスクリプトとディレクトリのセットアップ&quot;">​</a></h2><p>マルチプラットフォームプロジェクトでリソースにアクセスするには、ライブラリの依存関係を追加し、プロジェクトディレクトリ内にファイルを整理します。</p><ol><li><p><code>composeApp</code> ディレクトリにある <code>build.gradle.kts</code> ファイルで、<code>commonMain</code> ソースセットに依存関係を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compose.components.resources)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ライブラリを直接参照するには、<a href="https://central.sonatype.com/artifact/org.jetbrains.compose.components/components-resources" target="_blank" rel="noreferrer">Maven Central のアーティファクトページ</a>から完全修飾名を使用してください。</p></div></li><li><p>リソースを追加したいソースセットディレクトリ（この例では <code>commonMain</code>）に、新しいディレクトリ <code>composeResources</code> を作成します。</p><p><img src="`+p+`" alt="Compose resources project structure" width="250"></p></li><li><p><code>composeResources</code> ディレクトリ構造を以下のルールに従って整理します。</p><ul><li>画像は <code>drawable</code> ディレクトリに配置します。Compose Multiplatform は、ラスタライズ画像（JPEG、PNG、ビットマップ、WebP）およびベクター形式のAndroid XML画像（Androidリソースへの参照なし）をサポートしています。</li><li>フォントは <code>font</code> ディレクトリに配置します。</li><li>文字列は <code>values</code> ディレクトリに配置します。</li><li>その他のファイルは <code>files</code> ディレクトリに、適切と思われる任意のフォルダ階層で配置します。</li></ul></li></ol><h3 id="カスタムリソースディレクトリ" tabindex="-1">カスタムリソースディレクトリ <a class="header-anchor" href="#カスタムリソースディレクトリ" aria-label="Permalink to &quot;カスタムリソースディレクトリ&quot;">​</a></h3><p><code>build.gradle.kts</code> ファイルの <code>compose.resources {}</code> ブロックで、各ソースセットのカスタムリソースディレクトリを指定できます。これらのカスタムディレクトリも、デフォルトの <code>composeResources</code> と同じようにファイルを含む必要があります：画像用の <code>drawable</code> サブディレクトリ、フォント用の <code>font</code> サブディレクトリなどです。</p><p>簡単な例として、特定のフォルダを指定する方法です：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    customDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceSetName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;desktopMain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        directoryProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { layout.projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;desktopResources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>また、Gradleタスクによって生成されるフォルダ（例えば、ダウンロードされたファイルを含むフォルダ）を設定することもできます：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DownloadRemoteFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefaultTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OutputDirectory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> layout.buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;downloadedRemoteFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @TaskAction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* your code for downloading files */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    customDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceSetName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;iosMain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        directoryProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DownloadRemoteFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;downloadedRemoteFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.outputDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="androidlibrary-ターゲット内のリソース" tabindex="-1"><code>androidLibrary</code> ターゲット内のリソース <a class="header-anchor" href="#androidlibrary-ターゲット内のリソース" aria-label="Permalink to &quot;\`androidLibrary\` ターゲット内のリソース&quot;">​</a></h3>`,12)),e(t,{ref:"Experimental"},null,512),s[2]||(s[2]=l(`<p>Android Gradle プラグインバージョン 8.8.0 以降では、<code>androidLibrary</code> ターゲットで生成された <code>Res</code> クラスとリソースアクセサを使用できます。 <code>androidLibrary</code> でマルチプラットフォームリソースのサポートを有効にするには、次のように構成を更新します：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin {</span></span>
<span class="line"><span>  androidLibrary {</span></span>
<span class="line"><span>    androidResources.enable = true</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="修飾子" tabindex="-1">修飾子 <a class="header-anchor" href="#修飾子" aria-label="Permalink to &quot;修飾子&quot;">​</a></h2><p>環境（ロケール、画面密度、インターフェーステーマなど）に応じて、同じリソースを異なる方法で表示する必要がある場合があります。例えば、異なる言語にテキストをローカライズしたり、ダークテーマ用に画像を調整したりする必要があるかもしれません。そのため、ライブラリは特別な修飾子を提供しています。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>リソース関連の設定を処理する方法については、<a href="./compose-resource-environment">ローカルリソース環境の管理</a>チュートリアルで学習してください。</p></div><p><code>files</code> ディレクトリ内の生ファイルを除くすべてのリソースタイプは、修飾子をサポートしています。ハイフンを使用してディレクトリ名に修飾子を追加します：</p><p><img src="`+o+'" alt="Qualifiers in multiplatform resources" width="250"></p><p>ライブラリは、以下の修飾子を（優先順位順に）サポートしています：<a href="#language-and-regional-qualifiers">言語</a>、<a href="#theme-qualifier">テーマ</a>、<a href="#density-qualifier">密度</a>。</p><ul><li>異なる種類の修飾子を組み合わせて適用できます。例えば、&quot;drawable-en-rUS-mdpi-dark&quot; は、米国地域向けの英語用画像で、ダークテーマの160 DPIスクリーンに適しています。</li><li>要求された修飾子を持つリソースがアクセスできない場合、代わりにデフォルトのリソース（修飾子なし）が使用されます。</li></ul><h3 id="言語および地域修飾子" tabindex="-1">言語および地域修飾子 <a class="header-anchor" href="#言語および地域修飾子" aria-label="Permalink to &quot;言語および地域修飾子&quot;">​</a></h3><p>言語修飾子と地域修飾子を組み合わせることができます：</p><ul><li>言語は、2文字（ISO 639-1）または3文字（ISO 639-2）の<a href="https://www.loc.gov/standards/iso639-2/php/code_list.php" target="_blank" rel="noreferrer">言語コード</a>によって定義されます。</li><li>言語コードに2文字の<a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2" target="_blank" rel="noreferrer">ISO 3166-1-alpha-2</a>地域コードを追加できます。地域コードには小文字の <code>r</code> プレフィックスが必要です。例：<code>drawable-spa-rMX</code></li></ul><p>言語および地域コードは大文字と小文字を区別します。</p><h3 id="テーマ修飾子" tabindex="-1">テーマ修飾子 <a class="header-anchor" href="#テーマ修飾子" aria-label="Permalink to &quot;テーマ修飾子&quot;">​</a></h3><p>&quot;light&quot; または &quot;dark&quot; 修飾子を追加できます。Compose Multiplatform は、現在のシステムテーマに応じて必要なリソースを選択します。</p><h3 id="密度修飾子" tabindex="-1">密度修飾子 <a class="header-anchor" href="#密度修飾子" aria-label="Permalink to &quot;密度修飾子&quot;">​</a></h3><p>以下の密度修飾子を使用できます：</p><ul><li>&quot;ldpi&quot; – 120 DPI, 0.75x density</li><li>&quot;mdpi&quot; – 160 DPI, 1x density</li><li>&quot;hdpi&quot; – 240 DPI, 1.5x density</li><li>&quot;xhdpi&quot; – 320 DPI, 2x density</li><li>&quot;xxhdpi&quot; – 480 DPI, 3x density</li><li>&quot;xxxhdpi&quot; – 640dpi, 4x density</li></ul><p>リソースは、システムで定義されている画面密度に応じて選択されます。</p><h2 id="公開" tabindex="-1">公開 <a class="header-anchor" href="#公開" aria-label="Permalink to &quot;公開&quot;">​</a></h2><p>Compose Multiplatform 1.6.10 以降、必要なすべてのリソースが公開されるMavenアーティファクトに含まれるようになりました。</p><p>この機能を有効にするには、プロジェクトでKotlin 2.0.0以降およびGradle 7.6以降を使用する必要があります。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li>セットアップしたリソースにアクセスする方法、およびデフォルトで生成されるアクセサをカスタマイズする方法については、<a href="./compose-multiplatform-resources-usage">アプリでマルチプラットフォームリソースを使用する</a>ページを参照してください。</li><li>iOS、Android、デスクトップをターゲットとするCompose Multiplatformプロジェクトでリソースを処理する方法を示す公式の<a href="https://github.com/JetBrains/compose-multiplatform/tree/master/components/resources/demo" target="_blank" rel="noreferrer">デモプロジェクト</a>を確認してください。</li></ul>',24))])}const _=r(c,[["render",E]]);export{q as __pageData,_ as default};
