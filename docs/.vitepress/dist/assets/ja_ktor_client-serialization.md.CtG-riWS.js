import{_ as y,C as k,c as u,o as F,G as a,ag as p,j as i,w as n,a as s}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/client-serialization.md","filePath":"ja/ktor/client-serialization.md","lastUpdated":1755457140000}'),C={name:"ja/ktor/client-serialization.md"};function b(m,t,_,v,f,B){const r=k("TopicTitle"),h=k("show-structure"),d=k("primary-label"),g=k("tldr"),c=k("link-summary"),e=k("code-block"),l=k("TabItem"),o=k("Tabs"),E=k("Links");return F(),u("div",null,[a(r,{labelRef:"client-plugin",title:"Ktorクライアントにおけるコンテンツネゴシエーションとシリアライズ"}),a(h,{for:"chapter",depth:"2"}),a(d,{ref:"client-plugin"},null,512),a(g,null,{default:n(()=>t[0]||(t[0]=[i("p",null,[i("b",null,"必須の依存関係"),s(": "),i("code",null,"io.ktor:ktor-client-content-negotiation")],-1),i("p",null,[i("b",null,"コード例"),s(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-json-kotlinx"}," client-json-kotlinx ")],-1)])),_:1}),a(c,null,{default:n(()=>t[1]||(t[1]=[s(" ContentNegotiationプラグインは、主に2つの目的を果たします。クライアントとサーバー間でメディアタイプをネゴシエートすること、そしてリクエスト送信時およびレスポンス受信時にコンテンツを特定の形式でシリアライズ/デシリアライズすることです。 ")])),_:1}),t[11]||(t[11]=p('<p><a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-content-negotiation/io.ktor.client.plugins.contentnegotiation/-content-negotiation" target="_blank" rel="noreferrer">ContentNegotiation</a>プラグインは、主に2つの目的を果たします。</p><ul><li>クライアントとサーバー間でメディアタイプをネゴシエートすること。これには<code>Accept</code>および<code>Content-Type</code>ヘッダーを使用します。</li><li>リクエスト送信時およびレスポンス受信時に、コンテンツを特定の形式でシリアライズ/デシリアライズすること。Ktorは、JSON、XML、CBOR、ProtoBufといった形式をすぐに使用できるようにサポートしています。XMLシリアライザーは<a href="./client-engines">JVM</a>でのみサポートされていることに注意してください。</li></ul><blockquote><p>サーバー側では、Ktorはコンテンツのシリアライズ/デシリアライズのために<a href="./server-serialization">ContentNegotiation</a>プラグインを提供しています。</p></blockquote><h2 id="add_dependencies" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係の追加 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><h3 id="add_content_negotiation_dependency" tabindex="-1">ContentNegotiation <a class="header-anchor" href="#add_content_negotiation_dependency" aria-label="Permalink to &quot;ContentNegotiation {id=&quot;add_content_negotiation_dependency&quot;}&quot;">​</a></h3><p><code>ContentNegotiation</code>を使用するには、ビルドスクリプトに<code>ktor-client-content-negotiation</code>アーティファクトを含める必要があります。 </p>',6)),a(o,{group:"languages"},{default:n(()=>[a(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-content-negotiation:$ktor_version")'})]),_:1}),a(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-content-negotiation:$ktor_version"'})]),_:1}),a(l,{title:"Maven","group-key":"maven"},{default:n(()=>[a(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-content-negotiation-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),i("p",null,[t[3]||(t[3]=s(" Ktorクライアントに必要なアーティファクトの詳細については、「")),a(E,{href:"/ktor/client-dependencies",summary:"既存のプロジェクトにクライアントの依存関係を追加する方法を学びます。"},{default:n(()=>t[2]||(t[2]=[s("クライアント依存関係の追加")])),_:1}),t[4]||(t[4]=s("」を参照してください。 "))]),t[12]||(t[12]=p('<p>特定の形式のシリアライザーには追加のアーティファクトが必要であることに注意してください。例えば、kotlinx.serializationはJSONのために<code>ktor-serialization-kotlinx-json</code>依存関係を必要とします。含まれるアーティファクトに応じて、Ktorはデフォルトのシリアライザーを自動的に選択します。必要であれば、<a href="#configure_serializer">シリアライザーを明示的に指定</a>して設定できます。</p><h3 id="serialization_dependency" tabindex="-1">シリアライズ <a class="header-anchor" href="#serialization_dependency" aria-label="Permalink to &quot;シリアライズ {id=&quot;serialization_dependency&quot;}&quot;">​</a></h3><p>kotlinx.serializationコンバーターを使用する前に、<a href="https://github.com/Kotlin/kotlinx.serialization#setup" target="_blank" rel="noreferrer">セットアップ</a>セクションで説明されているように、Kotlin serializationプラグインを追加する必要があります。</p><h4 id="add_json_dependency" tabindex="-1">JSON <a class="header-anchor" href="#add_json_dependency" aria-label="Permalink to &quot;JSON {id=&quot;add_json_dependency&quot;}&quot;">​</a></h4><p>JSONデータをシリアライズ/デシリアライズするには、kotlinx.serialization、Gson、Jacksonのいずれかのライブラリを選択できます。</p>',5)),a(o,{group:"json-libraries"},{default:n(()=>[a(l,{title:"kotlinx.serialization","group-key":"kotlinx"},{default:n(()=>[t[5]||(t[5]=i("p",null,[s("ビルドスクリプトに"),i("code",null,"ktor-serialization-kotlinx-json"),s("アーティファクトを追加します。")],-1)),a(o,{group:"languages"},{default:n(()=>[a(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-json:$ktor_version")'})]),_:1}),a(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"'})]),_:1}),a(l,{title:"Maven","group-key":"maven"},{default:n(()=>[a(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-json-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1}),a(l,{title:"Gson","group-key":"gson"},{default:n(()=>[t[6]||(t[6]=i("p",null,[s("ビルドスクリプトに"),i("code",null,"ktor-serialization-gson"),s("アーティファクトを追加します。")],-1)),a(o,{group:"languages"},{default:n(()=>[a(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-gson:$ktor_version")'})]),_:1}),a(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-gson:$ktor_version"'})]),_:1}),a(l,{title:"Maven","group-key":"maven"},{default:n(()=>[a(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-gson-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1}),a(l,{title:"Jackson","group-key":"jackson"},{default:n(()=>[t[7]||(t[7]=i("p",null,[s("ビルドスクリプトに"),i("code",null,"ktor-serialization-jackson"),s("アーティファクトを追加します。")],-1)),a(o,{group:"languages"},{default:n(()=>[a(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-jackson:$ktor_version")'})]),_:1}),a(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-jackson:$ktor_version"'})]),_:1}),a(l,{title:"Maven","group-key":"maven"},{default:n(()=>[a(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-jackson-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1})]),_:1}),t[13]||(t[13]=i("h4",{id:"add_xml_dependency",tabindex:"-1"},[s("XML "),i("a",{class:"header-anchor",href:"#add_xml_dependency","aria-label":'Permalink to "XML {id="add_xml_dependency"}"'},"​")],-1)),t[14]||(t[14]=i("p",null,[s("XMLをシリアライズ/デシリアライズするには、ビルドスクリプトに"),i("code",null,"ktor-serialization-kotlinx-xml"),s("を追加します。")],-1)),a(o,{group:"languages"},{default:n(()=>[a(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-xml:$ktor_version")'})]),_:1}),a(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-xml:$ktor_version"'})]),_:1}),a(l,{title:"Maven","group-key":"maven"},{default:n(()=>[a(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-xml-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),t[15]||(t[15]=i("div",{class:"note custom-block"},[i("p",{class:"custom-block-title"},"NOTE"),i("p",null,[i("code",null,"jsNode"),s("ターゲットではXMLシリアライズがサポートされていないことに注意してください。")])],-1)),t[16]||(t[16]=i("h4",{id:"add_cbor_dependency",tabindex:"-1"},[s("CBOR "),i("a",{class:"header-anchor",href:"#add_cbor_dependency","aria-label":'Permalink to "CBOR {id="add_cbor_dependency"}"'},"​")],-1)),t[17]||(t[17]=i("p",null,[s("CBORをシリアライズ/デシリアライズするには、ビルドスクリプトに"),i("code",null,"ktor-serialization-kotlinx-cbor"),s("を追加します。")],-1)),a(o,{group:"languages"},{default:n(()=>[a(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version")'})]),_:1}),a(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version"'})]),_:1}),a(l,{title:"Maven","group-key":"maven"},{default:n(()=>[a(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-cbor-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),t[18]||(t[18]=i("h4",{id:"add_protobuf_dependency",tabindex:"-1"},[s("ProtoBuf "),i("a",{class:"header-anchor",href:"#add_protobuf_dependency","aria-label":'Permalink to "ProtoBuf {id="add_protobuf_dependency"}"'},"​")],-1)),t[19]||(t[19]=i("p",null,[s("ProtoBufをシリアライズ/デシリアライズするには、ビルドスクリプトに"),i("code",null,"ktor-serialization-kotlinx-protobuf"),s("を追加します。")],-1)),a(o,{group:"languages"},{default:n(()=>[a(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version")'})]),_:1}),a(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version"'})]),_:1}),a(l,{title:"Maven","group-key":"maven"},{default:n(()=>[a(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-protobuf-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),t[20]||(t[20]=p(`<h2 id="install_plugin" tabindex="-1">ContentNegotiationのインストール <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;ContentNegotiationのインストール {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p><code>ContentNegotiation</code>をインストールするには、<a href="./client-create-and-configure#configure-client">クライアント設定ブロック</a>内で<code>install</code>関数に渡します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これで、必要なJSONシリアライザーを<a href="#configure_serializer">設定</a>できます。</p><h2 id="configure_serializer" tabindex="-1">シリアライザーの設定 <a class="header-anchor" href="#configure_serializer" aria-label="Permalink to &quot;シリアライザーの設定 {id=&quot;configure_serializer&quot;}&quot;">​</a></h2><h3 id="register_json" tabindex="-1">JSONシリアライザー <a class="header-anchor" href="#register_json" aria-label="Permalink to &quot;JSONシリアライザー {id=&quot;register_json&quot;}&quot;">​</a></h3>`,6)),a(o,{group:"json-libraries"},{default:n(()=>[a(l,{title:"kotlinx.serialization","group-key":"kotlinx"},{default:n(()=>t[8]||(t[8]=[i("p",null,[s("アプリケーションにJSONシリアライザーを登録するには、"),i("code",null,"json"),s("メソッドを呼び出します。")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.plugins.contentnegotiation."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.kotlinx.json."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CIO) {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(ContentNegotiation) {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        json"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),i("p",null,[i("code",null,"json"),s("コンストラクターでは、例えば以下のように"),i("a",{href:"https://kotlinlang.org/api/kotlinx.serialization/kotlinx-serialization-json/kotlinx.serialization.json/-json-builder/",target:"_blank",rel:"noreferrer"},"JsonBuilder"),s(" APIにアクセスできます。")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CIO) {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(ContentNegotiation) {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        json"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Json"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            prettyPrint "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            isLenient "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        })")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),i("p",null,[s("完全な例は"),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-json-kotlinx",target:"_blank",rel:"noreferrer"},"client-json-kotlinx"),s("にあります。")],-1)])),_:1}),a(l,{title:"Gson","group-key":"gson"},{default:n(()=>t[9]||(t[9]=[i("p",null,[s("アプリケーションにGsonシリアライザーを登録するには、"),i("a",{href:"https://api.ktor.io/ktor-shared/ktor-serialization/ktor-serialization-gson/io.ktor.serialization.gson/gson.html",target:"_blank",rel:"noreferrer"},"gson"),s("メソッドを呼び出します。")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.plugins.contentnegotiation."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.gson."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CIO) {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(ContentNegotiation) {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        gson"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),i("p",null,[i("code",null,"gson"),s("メソッドを使用すると、"),i("a",{href:"https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/GsonBuilder.html",target:"_blank",rel:"noreferrer"},"GsonBuilder"),s("によって提供されるシリアライズ設定を調整することもできます。")],-1)])),_:1}),a(l,{title:"Jackson","group-key":"jackson"},{default:n(()=>t[10]||(t[10]=[i("p",null,[s("アプリケーションにJacksonシリアライザーを登録するには、"),i("a",{href:"https://api.ktor.io/ktor-shared/ktor-serialization/ktor-serialization-jackson/io.ktor.serialization.jackson/jackson.html",target:"_blank",rel:"noreferrer"},"jackson"),s("メソッドを呼び出します。")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.plugins.contentnegotiation."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.jackson."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CIO) {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(ContentNegotiation) {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        jackson"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),i("p",null,[i("code",null,"jackson"),s("メソッドを使用すると、"),i("a",{href:"https://fasterxml.github.io/jackson-databind/javadoc/2.9/com/fasterxml/jackson/databind/ObjectMapper.html",target:"_blank",rel:"noreferrer"},"ObjectMapper"),s("によって提供されるシリアライズ設定を調整することもできます。")],-1)])),_:1})]),_:1}),t[21]||(t[21]=p(`<h3 id="register_xml" tabindex="-1">XMLシリアライザー <a class="header-anchor" href="#register_xml" aria-label="Permalink to &quot;XMLシリアライザー {id=&quot;register_xml&quot;}&quot;">​</a></h3><p>アプリケーションにXMLシリアライザーを登録するには、<code>xml</code>メソッドを呼び出します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.xml.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        xml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>xml</code>メソッドを使用すると、例えば以下のようにXMLシリアライズ設定にアクセスすることもできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.xml.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nl.adaptivity.xmlutil.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nl.adaptivity.xmlutil.serialization.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        xml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(format </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            xmlDeclMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XmlDeclMode.Charset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="register_cbor" tabindex="-1">CBORシリアライザー <a class="header-anchor" href="#register_cbor" aria-label="Permalink to &quot;CBORシリアライザー {id=&quot;register_cbor&quot;}&quot;">​</a></h3><p>アプリケーションにCBORシリアライザーを登録するには、<code>cbor</code>メソッドを呼び出します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.cbor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cbor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>cbor</code>メソッドを使用すると、例えば以下のように<a href="https://kotlinlang.org/api/kotlinx.serialization/kotlinx-serialization-cbor/kotlinx.serialization.cbor/-cbor-builder/" target="_blank" rel="noreferrer">CborBuilder</a>によって提供されるCBORシリアライズ設定にアクセスすることもできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.cbor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.cbor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cbor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cbor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ignoreUnknownKeys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="register_protobuf" tabindex="-1">ProtoBufシリアライザー <a class="header-anchor" href="#register_protobuf" aria-label="Permalink to &quot;ProtoBufシリアライザー {id=&quot;register_protobuf&quot;}&quot;">​</a></h3><p>アプリケーションにProtoBufシリアライザーを登録するには、<code>protobuf</code>メソッドを呼び出します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.protobuf.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        protobuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>protobuf</code>メソッドを使用すると、例えば以下のように<a href="https://kotlinlang.org/api/kotlinx.serialization/kotlinx-serialization-protobuf/kotlinx.serialization.protobuf/-proto-buf-builder/" target="_blank" rel="noreferrer">ProtoBufBuilder</a>によって提供されるProtoBufシリアライズ設定にアクセスすることもできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.protobuf.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.protobuf.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        protobuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProtoBuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            encodeDefaults </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="receive_send_data" tabindex="-1">データの送受信 <a class="header-anchor" href="#receive_send_data" aria-label="Permalink to &quot;データの送受信 {id=&quot;receive_send_data&quot;}&quot;">​</a></h2><h3 id="create_data_class" tabindex="-1">データクラスの作成 <a class="header-anchor" href="#create_data_class" aria-label="Permalink to &quot;データクラスの作成 {id=&quot;create_data_class&quot;}&quot;">​</a></h3><p>データの送受信を行うには、例えば以下のようなデータクラスが必要です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>kotlinx.serializationを使用する場合、このクラスに<code>@Serializable</code>アノテーションが付いていることを確認してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>kotlinx.serializationライブラリは、以下の型のシリアライズ/デシリアライズをサポートしています。</p><ul><li><a href="./https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/builtin-classes">組み込みクラス</a></li><li><a href="https://kotlinlang.org/docs/sequences.html" target="_blank" rel="noreferrer">シーケンス</a>のデシリアライズ</li><li><a href="https://kotlinlang.org/docs/flow.html" target="_blank" rel="noreferrer">フロー</a>のシリアライズ</li></ul><h3 id="send_data" tabindex="-1">データの送信 <a class="header-anchor" href="#send_data" aria-label="Permalink to &quot;データの送信 {id=&quot;send_data&quot;}&quot;">​</a></h3><p><a href="./client-requests">リクエスト</a>ボディ内で<a href="#create_data_class">クラスインスタンス</a>をJSONとして送信するには、<code>setBody</code>関数を使ってこのインスタンスを割り当て、<code>contentType</code>を呼び出すことでコンテンツタイプを<code>application/json</code>に設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8080/customer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contentType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentType.Application.Json)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Brains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>データをXMLまたはCBORとして送信するには、<code>contentType</code>を<code>ContentType.Application.Xml</code>または<code>ContentType.Application.Cbor</code>にそれぞれ設定します。</p><h3 id="receive_data" tabindex="-1">データの受信 <a class="header-anchor" href="#receive_data" aria-label="Permalink to &quot;データの受信 {id=&quot;receive_data&quot;}&quot;">​</a></h3><p>サーバーが<code>application/json</code>、<code>application/xml</code>、または<code>application/cbor</code>コンテンツを含む<a href="./client-responses">レスポンス</a>を送信した場合、レスポンスペイロードを受信する関数（以下の例では<code>body</code>）のパラメータとして<a href="#create_data_class">データクラス</a>を指定することでデシリアライズできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customer: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Customer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8080/customer/3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>完全な例は<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-json-kotlinx" target="_blank" rel="noreferrer">client-json-kotlinx</a>にあります。</p>`,31))])}const z=y(C,[["render",b]]);export{A as __pageData,z as default};
