import{_ as l}from"./chunks/gradle-console-rich-output.BeIOO7Zd.js";import{_ as p,C as e,c as h,o as k,ag as i,G as a,j as r}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Kotlin 2.2.0の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew22.md","filePath":"ja/kotlin/whatsnew22.md","lastUpdated":1754307826000}'),o={name:"ja/kotlin/whatsnew22.md"};function d(c,s,E,g,y,u){const t=e("YouTubeVideo"),n=e("TopicTitle");return k(),h("div",null,[s[0]||(s[0]=i('<h1 id="kotlin-2-2-0の新機能" tabindex="-1">Kotlin 2.2.0の新機能 <a class="header-anchor" href="#kotlin-2-2-0の新機能" aria-label="Permalink to &quot;Kotlin 2.2.0の新機能&quot;">​</a></h1><p><em><a href="/ja/kotlin/releases#release-details">リリース日: 2025年6月23日</a></em></p><p>Kotlin 2.2.0がリリースされました！主なハイライトは以下の通りです。</p><ul><li><strong>言語</strong>: <a href="#preview-of-context-parameters">コンテキストパラメータ</a>など、プレビュー段階の新言語機能が追加されました。ガード条件、非ローカルな<code>break</code>と<code>continue</code>、複数ドル記号による文字列補間など、<a href="#stable-features-guard-conditions-non-local-break-and-continue-and-multi-dollar-interpolation">以前実験的だった機能のいくつかは安定版になりました</a>。</li><li><strong>Kotlinコンパイラ</strong>: <a href="#kotlin-compiler-unified-management-of-compiler-warnings">コンパイラの警告の一元管理</a>。</li><li><strong>Kotlin/JVM</strong>: <a href="#changes-to-default-method-generation-for-interface-functions">インターフェース関数のデフォルトメソッド生成の変更点</a>。</li><li><strong>Kotlin/Native</strong>: <a href="#kotlin-native">LLVM 19とメモリ消費量の追跡および調整のための新機能</a>。</li><li><strong>Kotlin/Wasm</strong>: <a href="#build-infrastructure-for-wasm-target-separated-from-javascript-target">Wasmターゲットの分離</a>と<a href="#per-project-binaryen-configuration">プロジェクトごとのBinaryen設定機能</a>。</li><li><strong>Kotlin/JS</strong>: <a href="#fix-for-copy-in-jsplainobject-interfaces"><code>@JsPlainObject</code>インターフェース用に生成される<code>copy()</code>メソッドの修正</a>。</li><li><strong>Gradle</strong>: <a href="#binary-compatibility-validation-included-in-kotlin-gradle-plugin">Kotlin Gradleプラグインにバイナリ互換性検証が組み込まれました</a>。</li><li><strong>標準ライブラリ</strong>: <a href="#stable-base64-encoding-and-decoding">Base64およびHexFormat APIの安定化</a>。</li><li><strong>ドキュメント</strong>: <a href="https://surveys.jetbrains.com/s3/Kotlin-Docs-2025" target="_blank" rel="noreferrer">ドキュメントに関するアンケートを開始しました</a>。また、<a href="#documentation-updates">Kotlinドキュメントに大幅な改善が行われました</a>。</li></ul><p>Kotlin Language Evolutionチームが新機能について議論し、質問に答えるこのビデオもご覧ください。</p>',5)),a(t,{src:"https://www.youtube.com/watch?v=jne3923lWtw",title:"Kotlin 2.2.0の新機能"}),s[1]||(s[1]=i('<h2 id="ideサポート" tabindex="-1">IDEサポート <a class="header-anchor" href="#ideサポート" aria-label="Permalink to &quot;IDEサポート&quot;">​</a></h2><p>2.2.0をサポートするKotlinプラグインは、IntelliJ IDEAおよびAndroid Studioの最新バージョンに同梱されています。 IDEのKotlinプラグインを更新する必要はありません。 必要なのは、ビルドスクリプトで<a href="/ja/kotlin/configure-build-for-eap#adjust-the-kotlin-version">Kotlinのバージョンを2.2.0に変更する</a>だけです。</p><p>詳細は<a href="/ja/kotlin/releases#update-to-a-new-kotlin-version">新しいリリースへのアップデート</a>を参照してください。</p><h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><p>このリリースでは、ガード条件、非ローカルな<code>break</code>と<code>continue</code>、複数ドル記号による文字列補間が<a href="#stable-features-guard-conditions-non-local-break-and-continue-and-multi-dollar-interpolation">安定版</a>に昇格しました。 さらに、<a href="#preview-of-context-parameters">コンテキストパラメータ</a>や<a href="#preview-of-context-sensitive-resolution">コンテキスト依存の解決</a>などのいくつかの機能がプレビューとして導入されました。</p>',5)),a(n,{id:"コンテキストパラメータのプレビュー",level:"3",title:"コンテキストパラメータのプレビュー",labelRef:"experimental-general"}),s[2]||(s[2]=i(` <p>コンテキストパラメータを使用すると、関数とプロパティは、周囲のコンテキストで暗黙的に利用可能な依存関係を宣言できます。</p><p>コンテキストパラメータを使用すると、サービスや依存関係など、共有され、関数呼び出しのセット間でめったに変更されない値を手動で渡す必要がなくなります。</p><p>コンテキストパラメータは、コンテキストレシーバと呼ばれる以前の実験的な機能を置き換えます。コンテキストレシーバからコンテキストパラメータに移行するには、<a href="https://blog.jetbrains.com/kotlin/2025/04/update-on-context-parameters/" target="_blank" rel="noreferrer">ブログ記事</a>で説明されているように、IntelliJ IDEAの支援機能を使用できます。</p><p>主な違いは、コンテキストパラメータが関数の本体にレシーバとして導入されない点です。結果として、コンテキストが暗黙的に利用可能だったコンテキストレシーバとは異なり、コンテキストパラメータの名前を使用してそのメンバーにアクセスする必要があります。</p><p>Kotlinのコンテキストパラメータは、簡素化された依存性注入、改善されたDSL設計、およびスコープ付き操作を通じて、依存関係の管理において大幅な改善をもたらします。詳細については、この機能の<a href="https://github.com/Kotlin/KEEP/blob/context-parameters/proposals/context-parameters.md" target="_blank" rel="noreferrer">KEEP</a>を参照してください。</p><h4 id="コンテキストパラメータの宣言方法" tabindex="-1">コンテキストパラメータの宣言方法 <a class="header-anchor" href="#コンテキストパラメータの宣言方法" aria-label="Permalink to &quot;コンテキストパラメータの宣言方法&quot;">​</a></h4><p><code>context</code>キーワードの後に<code>name: Type</code>の形式のパラメータのリストを続けることで、プロパティや関数にコンテキストパラメータを宣言できます。以下は、<code>UserService</code>インターフェースへの依存関係を持つ例です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UserServiceはコンテキストで必要な依存関係を定義します </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findUserById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// コンテキストパラメータを持つ関数を宣言します</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> outputMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // コンテキストからlogを使用します</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Log: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// コンテキストパラメータを持つプロパティを宣言します</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstUser: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // コンテキストからfindUserByIdを使用します    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findUserById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コンテキストパラメータ名として<code>_</code>を使用できます。この場合、パラメータの値は解決に利用できますが、ブロック内で名前によってアクセスすることはできません。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// コンテキストパラメータ名として&quot;_&quot;を使用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> logWelcome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // UserServiceから適切なlog関数を見つけます</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outputMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="コンテキストパラメータを有効にする方法" tabindex="-1">コンテキストパラメータを有効にする方法 <a class="header-anchor" href="#コンテキストパラメータを有効にする方法" aria-label="Permalink to &quot;コンテキストパラメータを有効にする方法&quot;">​</a></h4><p>プロジェクトでコンテキストパラメータを有効にするには、コマンドラインで以下のコンパイラオプションを使用します。</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xcontext-parameters</span></span></code></pre></div><p>または、Gradleビルドファイルの<code>compilerOptions {}</code>ブロックに追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xcontext-parameters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>-Xcontext-receivers</code>と<code>-Xcontext-parameters</code>の両方のコンパイラオプションを同時に指定するとエラーになります。</p></div><h4 id="フィードバックにご協力ください" tabindex="-1">フィードバックにご協力ください <a class="header-anchor" href="#フィードバックにご協力ください" aria-label="Permalink to &quot;フィードバックにご協力ください&quot;">​</a></h4><p>この機能は、今後のKotlinリリースで安定化され、改善される予定です。 課題トラッカー<a href="https://youtrack.jetbrains.com/issue/KT-10468/Context-Parameters-expanding-extension-receivers-to-work-with-scopes" target="_blank" rel="noreferrer">YouTrack</a>へのフィードバックをお待ちしております。</p>`,19)),a(n,{id:"コンテキスト依存の解決のプレビュー",level:"3",title:"コンテキスト依存の解決のプレビュー",labelRef:"experimental-general"}),s[3]||(s[3]=i(` <p>Kotlin 2.2.0は、コンテキスト依存の解決のプレビュー版実装を導入します。</p><p>以前は、型がコンテキストから推論できる場合でも、enumエントリまたはsealedクラスのメンバーの完全な名前を記述する必要がありました。 例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Problem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CONNECTION, AUTHENTICATION, DATABASE, UNKNOWN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(problem: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Problem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (problem) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Problem.CONNECTION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;connection&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Problem.AUTHENTICATION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;authentication&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Problem.DATABASE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;database&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Problem.UNKNOWN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;unknown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>現在、コンテキスト依存の解決により、期待される型が既知であるコンテキストでは、型名を省略できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Problem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CONNECTION, AUTHENTICATION, DATABASE, UNKNOWN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 問題の既知の型に基づいてenumエントリを解決します</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(problem: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Problem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (problem) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CONNECTION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;connection&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AUTHENTICATION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;authentication&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DATABASE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;database&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    UNKNOWN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;unknown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>コンパイラは、このコンテキストの型情報を使用して、正しいメンバーを解決します。この情報には、とりわけ以下が含まれます。</p><ul><li><code>when</code>式の対象</li><li>明示的な戻り値の型</li><li>宣言された変数型</li><li>型チェック (<code>is</code>) およびキャスト (<code>as</code>)</li><li>sealedクラス階層の既知の型</li><li>パラメータの宣言された型</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>コンテキスト依存の解決は、関数、パラメータを持つプロパティ、またはレシーバを持つ拡張プロパティには適用されません。</p></div><p>プロジェクトでコンテキスト依存の解決を試すには、コマンドラインで以下のコンパイラオプションを使用します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xcontext-sensitive-resolution</span></span></code></pre></div><p>または、Gradleビルドファイルの<code>compilerOptions {}</code>ブロックに追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xcontext-sensitive-resolution&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>私たちは、今後のKotlinリリースでこの機能を安定化させ、改善していく予定です。課題トラッカー<a href="https://youtrack.jetbrains.com/issue/KT-16768/Context-sensitive-resolution" target="_blank" rel="noreferrer">YouTrack</a>へのフィードバックをお待ちしております。</p>`,14)),a(n,{id:"アノテーション使用サイトターゲット機能のプレビュー",level:"3",title:"アノテーション使用サイトターゲット機能のプレビュー",labelRef:"experimental-general"}),s[4]||(s[4]=r("p",null,"Kotlin 2.2.0は、アノテーションの使用サイトターゲットとの連携をより便利にするいくつかの機能を導入します。",-1)),a(n,{id:"プロパティの-all-メタターゲット",level:"4",title:"プロパティの`@all`メタターゲット",labelRef:"experimental-general"}),s[5]||(s[5]=i(`<p>Kotlinでは、<a href="/ja/kotlin/annotations#annotation-use-site-targets">使用サイトターゲット</a>として知られる、宣言の特定の箇所にアノテーションを付加できます。 しかし、各ターゲットに個別にアノテーションを付けるのは複雑でエラーが発生しやすいものでした。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      // </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">コンストラクタパラメータ</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      // </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">バッキングフィールド</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        // </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ゲッターメソッド</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   // </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Kotlinプロパティ参照</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondaryEmail: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これを簡素化するために、Kotlinはプロパティ用の新しい<code>@all</code>メタターゲットを導入します。 この機能は、コンパイラに、プロパティの関連するすべての箇所にアノテーションを適用するように指示します。<code>@all</code>を使用すると、アノテーションは以下に適用しようとします。</p><ul><li><p><strong><code>param</code></strong>: プライマリコンストラクタで宣言されている場合、コンストラクタパラメータ。</p></li><li><p><strong><code>property</code></strong>: Kotlinプロパティ自体。</p></li><li><p><strong><code>field</code></strong>: 存在する場合、バッキングフィールド。</p></li><li><p><strong><code>get</code></strong>: ゲッターメソッド。</p></li><li><p><strong><code>set_param</code></strong>: プロパティが<code>var</code>として定義されている場合、セッターメソッドのパラメータ。</p></li><li><p><strong><code>RECORD_COMPONENT</code></strong>: クラスが<code>@JvmRecord</code>である場合、アノテーションは<a href="#improved-support-for-annotating-jvm-records">Javaレコードコンポーネント</a>に適用されます。この動作は、Javaがレコードコンポーネントのアノテーションを処理する方法を模倣しています。</p></li></ul><p>コンパイラは、指定されたプロパティのターゲットにのみアノテーションを適用します。</p><p>以下の例では、<code>@Email</code>アノテーションは各プロパティの関連するすべてのターゲットに適用されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // @Emailをparam、property、field、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // get、set_param（varの場合）に適用します</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> val</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // @Emailをproperty、field、およびgetterに適用します </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // （コンストラクタにはないためparamなし）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> val</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> secondaryEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? = </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>プライマリコンストラクタの内外を問わず、任意のプロパティで<code>@all</code>メタターゲットを使用できます。ただし、<a href="https://kotlinlang.org/spec/syntax-and-grammar.html#grammar-rule-annotation" target="_blank" rel="noreferrer">複数のアノテーション</a>で<code>@all</code>メタターゲットを使用することはできません。</p><p>この新機能は、構文を簡素化し、一貫性を確保し、Javaレコードとの相互運用性を向上させます。</p><p>プロジェクトで<code>@all</code>メタターゲットを有効にするには、コマンドラインで以下のコンパイラオプションを使用します。</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xannotation-target-all</span></span></code></pre></div><p>または、Gradleビルドファイルの<code>compilerOptions {}</code>ブロックに追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xannotation-target-all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この機能はプレビュー段階です。問題が発生した場合は、課題トラッカー<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>までご報告ください。 <code>@all</code>メタターゲットの詳細については、この<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/annotation-target-in-properties.md" target="_blank" rel="noreferrer">KEEP</a>提案を参照してください。</p>`,14)),a(n,{id:"使用サイトアノテーションターゲットの新しいデフォルトルール",level:"4",title:"使用サイトアノテーションターゲットの新しいデフォルトルール",labelRef:"experimental-general"}),s[6]||(s[6]=i(`<p>Kotlin 2.2.0は、パラメータ、フィールド、プロパティにアノテーションを伝播するための新しいデフォルトルールを導入します。 以前はアノテーションがデフォルトで<code>param</code>、<code>property</code>、<code>field</code>のいずれか1つにのみ適用されていましたが、現在はアノテーションに期待されるものとより一致するようになりました。</p><p>複数の適用可能なターゲットがある場合、以下のように1つ以上が選択されます。</p><ul><li>コンストラクタパラメータターゲット (<code>param</code>) が適用可能な場合、それが使用されます。</li><li>プロパティターゲット (<code>property</code>) が適用可能な場合、それが使用されます。</li><li>フィールドターゲット (<code>field</code>) が適用可能で<code>property</code>が適用可能でない場合、<code>field</code>が使用されます。</li></ul><p>複数のターゲットがあり、<code>param</code>、<code>property</code>、<code>field</code>のいずれも適用できない場合、アノテーションはエラーになります。</p><p>この機能を有効にするには、Gradleビルドファイルの<code>compilerOptions {}</code>ブロックに追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xannotation-default-target=param-property&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>または、コンパイラのコマンドライン引数を使用します。</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xannotation-default-target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">param-property</span></span></code></pre></div><p>古い動作を使用したい場合は、次のことができます。</p><ul><li><p>特定のケースでは、例えば<code>@Annotation</code>の代わりに<code>@param:Annotation</code>を使用するなど、必要なターゲットを明示的に定義します。</p></li><li><p>プロジェクト全体では、Gradleビルドファイルでこのフラグを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xannotation-default-target=first-only&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>この機能はプレビュー段階です。問題が発生した場合は、課題トラッカー<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>までご報告ください。 アノテーション使用サイトターゲットの新しいデフォルトルールの詳細については、この<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/annotation-target-in-properties.md" target="_blank" rel="noreferrer">KEEP</a>提案を参照してください。</p>`,11)),a(n,{id:"ネストされた型エイリアスのサポート",level:"3",title:"ネストされた型エイリアスのサポート",labelRef:"beta"}),s[7]||(s[7]=i(`<p>以前は、<a href="/ja/kotlin/type-aliases">型エイリアス</a>はKotlinファイルのトップレベルでのみ宣言できました。これは、内部またはドメイン固有の型エイリアスでさえ、使用されるクラスの外に存在する必要があることを意味していました。</p><p>2.2.0以降、外側のクラスから型パラメータをキャプチャしない限り、他の宣言内で型エイリアスを定義できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dijkstra</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VisitedNodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> step</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(visited: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VisitedNodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ネストされた型エイリアスには、型パラメータを参照できないなど、いくつかの追加の制約があります。全ルールセットについては<a href="/ja/kotlin/type-aliases#nested-type-aliases">ドキュメント</a>を参照してください。</p><p>ネストされた型エイリアスは、カプセル化の向上、パッケージレベルの煩雑さの軽減、内部実装の簡素化により、よりクリーンで保守しやすいコードを可能にします。</p><h4 id="ネストされた型エイリアスを有効にする方法" tabindex="-1">ネストされた型エイリアスを有効にする方法 <a class="header-anchor" href="#ネストされた型エイリアスを有効にする方法" aria-label="Permalink to &quot;ネストされた型エイリアスを有効にする方法&quot;">​</a></h4><p>プロジェクトでネストされた型エイリアスを有効にするには、コマンドラインで以下のコンパイラオプションを使用します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xnested-type-aliases</span></span></code></pre></div><p>または、Gradleビルドファイルの<code>compilerOptions {}</code>ブロックに追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xnested-type-aliases&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="フィードバックを共有する" tabindex="-1">フィードバックを共有する <a class="header-anchor" href="#フィードバックを共有する" aria-label="Permalink to &quot;フィードバックを共有する&quot;">​</a></h4><p>ネストされた型エイリアスは現在<a href="/ja/kotlin/components-stability#stability-levels-explained">ベータ版</a>です。問題が発生した場合は、課題トラッカー<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>までご報告ください。この機能の詳細については、この<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/nested-typealias.md" target="_blank" rel="noreferrer">KEEP</a>提案を参照してください。</p><h3 id="安定版機能-ガード条件、非ローカルなbreakとcontinue、および複数ドル記号による文字列補間" tabindex="-1">安定版機能: ガード条件、非ローカルな<code>break</code>と<code>continue</code>、および複数ドル記号による文字列補間 <a class="header-anchor" href="#安定版機能-ガード条件、非ローカルなbreakとcontinue、および複数ドル記号による文字列補間" aria-label="Permalink to &quot;安定版機能: ガード条件、非ローカルな\`break\`と\`continue\`、および複数ドル記号による文字列補間&quot;">​</a></h3><p>Kotlin 2.1.0では、いくつかの新言語機能がプレビュー段階で導入されました。 このリリースで以下の言語機能が<a href="/ja/kotlin/components-stability#stability-levels-explained">安定版</a>になったことをお知らせします。</p><ul><li><a href="/ja/kotlin/whatsnew21#guard-conditions-in-when-with-a-subject">when\`におけるガード条件（対象あり）</a></li><li><a href="/ja/kotlin/whatsnew21#non-local-break-and-continue">非ローカルな<code>break</code>と<code>continue</code></a></li><li><a href="/ja/kotlin/whatsnew21#multi-dollar-string-interpolation">複数ドル記号による文字列補間: 文字列リテラルにおける処理の改善</a></li></ul><p><a href="/ja/kotlin/kotlin-language-features-and-proposals">Kotlinの言語設計機能と提案の全リストを参照してください</a>。</p>`,16)),a(n,{id:"kotlinコンパイラ-コンパイラの警告の一元管理",level:"2",title:"Kotlinコンパイラ: コンパイラの警告の一元管理",labelRef:"experimental-general"}),s[8]||(s[8]=i(`<p>Kotlin 2.2.0は、新しいコンパイラオプション<code>-Xwarning-level</code>を導入します。これは、Kotlinプロジェクトでコンパイラの警告を一元的に管理するための統一された方法を提供することを目的としています。</p><p>以前は、<code>-nowarn</code>ですべての警告を無効にする、<code>-Werror</code>ですべての警告をコンパイルエラーにする、または<code>-Wextra</code>で追加のコンパイラチェックを有効にするなど、一般的なモジュール全体にわたるルールのみを適用できました。特定の警告に対して調整する唯一のオプションは<code>-Xsuppress-warning</code>オプションでした。</p><p>この新しいソリューションにより、一般的なルールを上書きし、特定の診断を一貫した方法で除外できます。</p><h3 id="適用方法" tabindex="-1">適用方法 <a class="header-anchor" href="#適用方法" aria-label="Permalink to &quot;適用方法&quot;">​</a></h3><p>新しいコンパイラオプションは以下の構文を持ちます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xwarning-level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DIAGNOSTIC_NAME:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warning</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><code>error</code>: 指定された警告をエラーに昇格させます。</li><li><code>warning</code>: 警告を出力し、デフォルトで有効になります。</li><li><code>disabled</code>: 指定された警告をモジュール全体で完全に抑制します。</li></ul><p>この新しいコンパイラオプションでは、_警告_の重要度レベルのみを設定できることに注意してください。</p><h3 id="ユースケース" tabindex="-1">ユースケース <a class="header-anchor" href="#ユースケース" aria-label="Permalink to &quot;ユースケース&quot;">​</a></h3><p>新しいソリューションを使用すると、一般的なルールと特定のルールを組み合わせることで、プロジェクトでの警告レポートをより詳細に調整できます。 ユースケースを選択してください:</p><h4 id="警告の抑制" tabindex="-1">警告の抑制 <a class="header-anchor" href="#警告の抑制" aria-label="Permalink to &quot;警告の抑制&quot;">​</a></h4><table tabindex="0"><thead><tr><th>コマンド</th><th>説明</th></tr></thead><tbody><tr><td><a href="/ja/kotlin/compiler-reference#nowarn"><code>-nowarn</code></a></td><td>コンパイル中のすべての警告を抑制します。</td></tr><tr><td><code>-Xwarning-level=DIAGNOSTIC_NAME:disabled</code></td><td>指定された警告のみを抑制します。</td></tr><tr><td><code>-nowarn -Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>指定された警告を除き、すべての警告を抑制します。</td></tr></tbody></table><h4 id="警告をエラーに昇格" tabindex="-1">警告をエラーに昇格 <a class="header-anchor" href="#警告をエラーに昇格" aria-label="Permalink to &quot;警告をエラーに昇格&quot;">​</a></h4><table tabindex="0"><thead><tr><th>コマンド</th><th>説明</th></tr></thead><tbody><tr><td><a href="/ja/kotlin/compiler-reference#werror"><code>-Werror</code></a></td><td>すべての警告をコンパイルエラーに昇格させます。</td></tr><tr><td><code>-Xwarning-level=DIAGNOSTIC_NAME:error</code></td><td>指定された警告のみをエラーに昇格させます。</td></tr><tr><td><code>-Werror -Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>指定された警告を除き、すべての警告をエラーに昇格させます。</td></tr></tbody></table><h4 id="追加のコンパイラ警告を有効にする" tabindex="-1">追加のコンパイラ警告を有効にする <a class="header-anchor" href="#追加のコンパイラ警告を有効にする" aria-label="Permalink to &quot;追加のコンパイラ警告を有効にする&quot;">​</a></h4><table tabindex="0"><thead><tr><th>コマンド</th><th>説明</th></tr></thead><tbody><tr><td><a href="/ja/kotlin/compiler-reference#wextra"><code>-Wextra</code></a></td><td>trueの場合に警告を出力する、すべての追加の宣言、式、型コンパイラチェックを有効にします。</td></tr><tr><td><code>-Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>指定された追加のコンパイラチェックのみを有効にします。</td></tr><tr><td><code>-Wextra -Xwarning-level=DIAGNOSTIC_NAME:disabled</code></td><td>指定されたものを除き、すべての追加チェックを有効にします。</td></tr></tbody></table><h4 id="警告リスト" tabindex="-1">警告リスト <a class="header-anchor" href="#警告リスト" aria-label="Permalink to &quot;警告リスト&quot;">​</a></h4><p>一般的なルールから除外したい警告が多数ある場合、<a href="/ja/kotlin/compiler-reference#argfile"><code>@argfile</code></a>を介して別のファイルにそれらをリストできます。</p><h3 id="フィードバックにご協力ください-1" tabindex="-1">フィードバックにご協力ください <a class="header-anchor" href="#フィードバックにご協力ください-1" aria-label="Permalink to &quot;フィードバックにご協力ください&quot;">​</a></h3><p>新しいコンパイラオプションはまだ<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。問題が発生した場合は、課題トラッカー<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>までご報告ください。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 2.2.0はJVMに多くのアップデートをもたらします。コンパイラはJava 24バイトコードをサポートし、インターフェース関数のデフォルトメソッド生成に変更を導入します。また、このリリースではKotlinメタデータでのアノテーションの扱いを簡素化し、インライン値クラスとのJava相互運用性を向上させ、JVMレコードへのアノテーション付けのサポートを改善します。</p><h3 id="インターフェース関数のデフォルトメソッド生成の変更点" tabindex="-1">インターフェース関数のデフォルトメソッド生成の変更点 <a class="header-anchor" href="#インターフェース関数のデフォルトメソッド生成の変更点" aria-label="Permalink to &quot;インターフェース関数のデフォルトメソッド生成の変更点&quot;">​</a></h3><p>Kotlin 2.2.0以降、インターフェースで宣言された関数は、別途設定されていない限り、JVMのデフォルトメソッドにコンパイルされます。この変更は、Kotlinの、実装を持つインターフェース関数がバイトコードにコンパイルされる方法に影響します。</p><p>この動作は、非推奨の<code>-Xjvm-default</code>オプションを置き換える、新しい安定版コンパイラオプション<code>-jvm-default</code>によって制御されます。</p><p>以下の値を使用して<code>-jvm-default</code>オプションの動作を制御できます。</p><ul><li><code>enable</code> (デフォルト): インターフェースにデフォルト実装を生成し、サブクラスと<code>DefaultImpls</code>クラスにブリッジ関数を含めます。このモードは、古いKotlinバージョンとのバイナリ互換性を維持するために使用します。</li><li><code>no-compatibility</code>: インターフェースにデフォルト実装のみを生成します。このモードでは、互換性ブリッジと<code>DefaultImpls</code>クラスがスキップされるため、新しいコードに適しています。</li><li><code>disable</code>: インターフェースのデフォルト実装を無効にします。ブリッジ関数と<code>DefaultImpls</code>クラスのみが生成され、Kotlin 2.2.0より前の動作と一致します。</li></ul><p><code>-jvm-default</code>コンパイラオプションを設定するには、Gradle Kotlin DSLで<code>jvmDefault</code>プロパティを設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmDefault </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JvmDefaultMode.NO_COMPATIBILITY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,29)),a(n,{id:"kotlinメタデータにおけるアノテーションの読み書きのサポート",level:"3",title:"Kotlinメタデータにおけるアノテーションの読み書きのサポート",labelRef:"experimental-general"}),s[9]||(s[9]=i(`<p>以前は、コンパイルされたJVMクラスファイルからリフレクションまたはバイトコード分析を使用してアノテーションを読み取り、シグネチャに基づいてメタデータエントリに手動で一致させる必要がありました。 このプロセスは、特にオーバーロードされた関数では、エラーが発生しやすかったものでした。</p><p>現在、Kotlin 2.2.0では、<a href="/ja/kotlin/metadata-jvm">Kotlinメタデータ</a>に格納されたアノテーションの読み取りのサポートが導入されます。</p><p>コンパイルされたファイルのメタデータでアノテーションを利用可能にするには、以下のコンパイラオプションを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xannotations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-in-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">metadata</span></span></code></pre></div><p>または、Gradleビルドファイルの<code>compilerOptions {}</code>ブロックに追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xannotations-in-metadata&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このオプションを有効にすると、KotlinコンパイラはJVMバイトコードとともにメタデータにアノテーションを書き込み、<code>kotlin-metadata-jvm</code>ライブラリからアクセスできるようにします。</p><p>このライブラリは、アノテーションにアクセスするための以下のAPIを提供します。</p><ul><li><code>KmClass.annotations</code></li><li><code>KmFunction.annotations</code></li><li><code>KmProperty.annotations</code></li><li><code>KmConstructor.annotations</code></li><li><code>KmPropertyAccessorAttributes.annotations</code></li><li><code>KmValueParameter.annotations</code></li><li><code>KmFunction.extensionReceiverAnnotations</code></li><li><code>KmProperty.extensionReceiverAnnotations</code></li><li><code>KmProperty.backingFieldAnnotations</code></li><li><code>KmProperty.delegateFieldAnnotations</code></li><li><code>KmEnumEntry.annotations</code></li></ul><p>これらのAPIは<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 オプトインするには、<code>@OptIn(ExperimentalAnnotationsInMetadata::class)</code>アノテーションを使用します。</p><p>Kotlinメタデータからアノテーションを読み取る例を以下に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExperimentalAnnotationsInMetadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.metadata.ExperimentalAnnotationsInMetadata</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.metadata.jvm.KotlinClassMetadata</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Message class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Message</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> metadata </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Message::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Metadata::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kmClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (KotlinClassMetadata.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readStrict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(metadata) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KotlinClassMetadata.Class).kmClass</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kmClass.annotations)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // [@Label(value = StringValue(&quot;Message class&quot;))]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>プロジェクトで<code>kotlin-metadata-jvm</code>ライブラリを使用している場合、アノテーションをサポートするようにコードをテストおよび更新することをお勧めします。 そうしないと、将来のKotlinバージョンでメタデータ内のアノテーションが<a href="https://youtrack.jetbrains.com/issue/KT-75736" target="_blank" rel="noreferrer">デフォルトで有効</a>になったときに、プロジェクトが無効または不完全なメタデータを生成する可能性があります。 問題が発生した場合は、<a href="https://youtrack.jetbrains.com/issue/KT-31857" target="_blank" rel="noreferrer">課題トラッカー</a>までご報告ください。</p></div>`,13)),a(n,{id:"インライン値クラスとのjava相互運用性の改善",level:"3",title:"インライン値クラスとのJava相互運用性の改善",labelRef:"experimental-general"}),s[10]||(s[10]=i(`<p>Kotlin 2.2.0は、新しい実験的なアノテーション<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.jvm/-jvm-expose-boxed/" target="_blank" rel="noreferrer"><code>@JvmExposeBoxed</code></a>を導入します。このアノテーションは、Javaから<a href="/ja/kotlin/inline-classes">インライン値クラス</a>を使用しやすくします。</p><p>デフォルトでは、Kotlinはインライン値クラスを<strong>アンボックス化された表現</strong>を使用するようにコンパイルします。これはパフォーマンスが向上しますが、Javaから使用するのが困難または不可能な場合が多いです。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PositiveInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この場合、クラスがアンボックス化されているため、Javaが呼び出せるコンストラクタがありません。また、Javaが<code>init</code>ブロックをトリガーして<code>number</code>が正であることを保証する方法もありません。</p><p>クラスに<code>@JvmExposeBoxed</code>アノテーションを付けると、KotlinはJavaが直接呼び出せるパブリックコンストラクタを生成し、<code>init</code>ブロックも実行されることを保証します。</p><p><code>@JvmExposeBoxed</code>アノテーションは、クラス、コンストラクタ、または関数レベルで適用でき、Javaに公開されるものを細かく制御できます。</p><p>例えば、以下のコードでは、拡張関数<code>.timesTwoBoxed()</code>はJavaからアクセス<strong>できません</strong>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timesTwoBoxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>MyInt</code>クラスのインスタンスを作成し、Javaコードから<code>.timesTwoBoxed()</code>関数を呼び出すことを可能にするには、クラスと関数の両方に<code>@JvmExposeBoxed</code>アノテーションを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmExposeBoxed</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmExposeBoxed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timesTwoBoxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>これらのアノテーションを使用すると、Kotlinコンパイラは<code>MyInt</code>クラス用のJavaからアクセス可能なコンストラクタを生成します。また、値クラスのボックス化された形式を使用する拡張関数のオーバーロードも生成します。結果として、以下のJavaコードが正常に実行されます。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyInt input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyInt output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExampleKt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timesTwoBoxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input);</span></span></code></pre></div><p>公開したいインライン値クラスのすべての部分にアノテーションを付けたくない場合、アノテーションをモジュール全体に効果的に適用できます。この動作をモジュールに適用するには、<code>-Xjvm-expose-boxed</code>オプションでコンパイルします。このオプションでコンパイルすると、モジュール内のすべての宣言に<code>@JvmExposeBoxed</code>アノテーションが付いているのと同じ効果があります。</p><p>この新しいアノテーションは、Kotlinが値クラスを内部でコンパイルまたは使用する方法を変更せず、既存のコンパイル済みコードはすべて有効なままです。Java相互運用性を向上させる新しい機能を追加するだけです。値クラスを使用するKotlinコードのパフォーマンスには影響しません。</p><p><code>@JvmExposeBoxed</code>アノテーションは、メンバー関数のボックス化されたバリアントを公開し、ボックス化された戻り値の型を受け取りたいライブラリ作者にとって有用です。これにより、インライン値クラス（効率的だがKotlin専用）とデータクラス（Java互換だが常にボックス化される）のどちらかを選択する必要がなくなります。</p><p><code>@JvmExposedBoxed</code>アノテーションの動作とそれが解決する問題に関するより詳細な説明については、この<a href="https://github.com/Kotlin/KEEP/blob/jvm-expose-boxed/proposals/jvm-expose-boxed.md" target="_blank" rel="noreferrer">KEEP</a>提案を参照してください。</p><h3 id="jvmレコードへのアノテーション付けのサポートの改善" tabindex="-1">JVMレコードへのアノテーション付けのサポートの改善 <a class="header-anchor" href="#jvmレコードへのアノテーション付けのサポートの改善" aria-label="Permalink to &quot;JVMレコードへのアノテーション付けのサポートの改善&quot;">​</a></h3><p>KotlinはKotlin 1.5.0以降、<a href="/ja/kotlin/jvm-records">JVMレコード</a>をサポートしています。現在、Kotlin 2.2.0は、レコードコンポーネントに対するKotlinのアノテーションの扱いを改善します。特に、Javaの<a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/annotation/ElementType.html#RECORD_COMPONENT" target="_blank" rel="noreferrer"><code>RECORD_COMPONENT</code></a>ターゲットとの関連において、改善が見られます。</p><p>まず、<code>RECORD_COMPONENT</code>をアノテーションターゲットとして使用したい場合、Kotlin (<code>@Target</code>) とJavaのアノテーションを手動で追加する必要があります。これは、Kotlinの<code>@Target</code>アノテーションが<code>RECORD_COMPONENT</code>をサポートしていないためです。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.CLASS, AnnotationTarget.PROPERTY)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@java.lang.annotation.Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ElementType.CLASS, ElementType.RECORD_COMPONENT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exampleClass</span></span></code></pre></div><p>両方のリストを手動で維持するのはエラーが発生しやすいため、Kotlin 2.2.0はKotlinとJavaのターゲットが一致しない場合にコンパイラの警告を導入します。例えば、Javaターゲットリストから<code>ElementType.CLASS</code>を省略すると、コンパイラは次のように報告します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Incompatible annotation targets: Java target &#39;CLASS&#39; missing, corresponding to Kotlin targets &#39;CLASS&#39;.</span></span></code></pre></div><p>次に、Kotlinの動作は、レコードでのアノテーションの伝播に関してJavaとは異なります。Javaでは、レコードコンポーネントのアノテーションは自動的にバッキングフィールド、ゲッター、およびコンストラクタパラメータに適用されます。Kotlinはデフォルトではこれを実行しませんが、<a href="#all-meta-target-for-properties"><code>@all:</code>使用サイトターゲット</a>を使用してその動作を再現できるようになりました。</p><p>例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRecord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Positive</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> val</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>@JvmRecord</code>を<code>@all:</code>と組み合わせて使用すると、Kotlinは現在、次のように動作します。</p><ul><li>アノテーションをプロパティ、バッキングフィールド、コンストラクタパラメータ、ゲッターに伝播します。</li><li>アノテーションがJavaの<code>RECORD_COMPONENT</code>をサポートしている場合、レコードコンポーネントにもアノテーションを適用します。</li></ul><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>2.2.0以降、Kotlin/NativeはLLVM 19を使用します。このリリースでは、メモリ消費量を追跡および調整するために設計されたいくつかの実験的機能も導入します。</p>`,29)),a(n,{id:"オブジェクトごとのメモリ割り当て",level:"3",title:"オブジェクトごとのメモリ割り当て",labelRef:"experimental-opt-in"}),s[11]||(s[11]=i('<p>Kotlin/Nativeの<a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/runtime/src/alloc/custom/README.md" target="_blank" rel="noreferrer">メモリ割り当てツール</a>は、オブジェクトごとにメモリを予約できるようになりました。場合によっては、これにより厳密なメモリ制限を満たしたり、アプリケーションの起動時のメモリ消費量を削減したりするのに役立つ場合があります。</p><p>この新機能は、デフォルトのメモリ割り当てツールの代わりにシステムメモリ割り当てツールを有効にする<code>-Xallocator=std</code>コンパイラオプションを置き換えるように設計されています。現在、メモリ割り当てを切り替えることなく、バッファリング（割り当てのページング）を無効にできます。</p><p>この機能は現在<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 有効にするには、<code>gradle.properties</code>ファイルで以下のオプションを設定します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.pagedAllocator=false</span></span></code></pre></div><p>問題が発生した場合は、課題トラッカー<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>までご報告ください。</p>',5)),a(n,{id:"実行時におけるlatin-1エンコード文字列のサポート",level:"3",title:"実行時におけるLatin-1エンコード文字列のサポート",labelRef:"experimental-opt-in"}),s[12]||(s[12]=i(`<p>Kotlinは現在、<a href="https://openjdk.org/jeps/254" target="_blank" rel="noreferrer">JVM</a>と同様に、Latin-1エンコードされた文字列をサポートするようになりました。これは、アプリケーションのバイナリサイズを削減し、メモリ消費量を調整するのに役立つはずです。</p><p>デフォルトでは、Kotlinの文字列はUTF-16エンコーディングを使用して格納され、各文字は2バイトで表現されます。場合によっては、これによりソースコードと比較して、バイナリで文字列が2倍のスペースを占めることになり、単純なASCIIファイルからデータを読み取ると、ディスクにファイルを保存するよりも2倍のメモリを消費する可能性があります。</p><p>一方、<a href="https://en.wikipedia.org/wiki/ISO/IEC_8859-1" target="_blank" rel="noreferrer">Latin-1 (ISO 8859-1)</a>エンコーディングは、最初の256個のUnicode文字をそれぞれ1バイトで表現します。Latin-1サポートが有効になっている場合、すべての文字がその範囲内にある限り、文字列はLatin-1エンコーディングで格納されます。それ以外の場合は、デフォルトのUTF-16エンコーディングが使用されます。</p><h4 id="latin-1サポートを有効にする方法" tabindex="-1">Latin-1サポートを有効にする方法 <a class="header-anchor" href="#latin-1サポートを有効にする方法" aria-label="Permalink to &quot;Latin-1サポートを有効にする方法&quot;">​</a></h4><p>この機能は現在<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 有効にするには、<code>gradle.properties</code>ファイルで以下のオプションを設定します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.latin1Strings=true</span></span></code></pre></div><h4 id="既知の問題" tabindex="-1">既知の問題 <a class="header-anchor" href="#既知の問題" aria-label="Permalink to &quot;既知の問題&quot;">​</a></h4><p>この機能が実験的である限り、cinterop拡張関数<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/pin.html" target="_blank" rel="noreferrer"><code>String.pin</code></a>、<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/use-pinned.html" target="_blank" rel="noreferrer"><code>String.usePinned</code></a>、および<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/ref-to.html" target="_blank" rel="noreferrer"><code>String.refTo</code></a>は効率が低下します。それらへの各呼び出しは、自動的な文字列のUTF-16変換をトリガーする可能性があります。</p><p>Kotlinチームは、この機能の実装にご協力いただいたGoogleの同僚、特に<a href="https://github.com/pyos" target="_blank" rel="noreferrer">Sonya Valchuk</a>に深く感謝いたします。</p><p>Kotlinでのメモリ消費量の詳細については、<a href="/ja/kotlin/native-memory-manager#memory-consumption">ドキュメント</a>を参照してください。</p><h3 id="appleプラットフォームにおけるメモリ消費量追跡の改善" tabindex="-1">Appleプラットフォームにおけるメモリ消費量追跡の改善 <a class="header-anchor" href="#appleプラットフォームにおけるメモリ消費量追跡の改善" aria-label="Permalink to &quot;Appleプラットフォームにおけるメモリ消費量追跡の改善&quot;">​</a></h3><p>Kotlin 2.2.0以降、Kotlinコードによって割り当てられたメモリにタグが付けられるようになりました。これは、Appleプラットフォームでのメモリ問題のデバッグに役立ちます。</p><p>アプリケーションの高いメモリ使用量を調査する際、Kotlinコードによってどれくらいのメモリが予約されているかを識別できるようになりました。Kotlinの共有メモリは識別子でタグ付けされ、Xcode InstrumentsのVM Trackerなどのツールを通じて追跡できます。</p><p>この機能はデフォルトで有効ですが、以下の_すべての_条件が満たされている場合にのみ、Kotlin/Nativeのデフォルトメモリ割り当てツールで利用可能です。</p><ul><li><p><strong>タグ付けが有効であること</strong>。メモリには有効な識別子でタグが付けられている必要があります。Appleは240から255の範囲の数値を推奨しており、デフォルト値は246です。</p><p><code>kotlin.native.binary.mmapTag=0</code>Gradleプロパティを設定すると、タグ付けは無効になります。</p></li><li><p><strong><code>mmap</code>による割り当て</strong>。アロケータは<code>mmap</code>システムコールを使用してファイルをメモリにマップする必要があります。</p><p><code>kotlin.native.binary.disableMmap=true</code>Gradleプロパティを設定すると、デフォルトのアロケータは<code>mmap</code>の代わりに<code>malloc</code>を使用します。</p></li><li><p><strong>ページングが有効であること</strong>。割り当てのページング（バッファリング）が有効になっている必要があります。</p><p><a href="#per-object-memory-allocation"><code>kotlin.native.binary.pagedAllocator=false</code></a>Gradleプロパティを設定すると、代わりにメモリはオブジェクトごとに予約されます。</p></li></ul><p>Kotlinでのメモリ消費量の詳細については、<a href="/ja/kotlin/native-memory-manager#memory-consumption">ドキュメント</a>を参照してください。</p><h3 id="llvm-16から19へのアップデート" tabindex="-1">LLVM 16から19へのアップデート <a class="header-anchor" href="#llvm-16から19へのアップデート" aria-label="Permalink to &quot;LLVM 16から19へのアップデート&quot;">​</a></h3><p>Kotlin 2.2.0では、LLVMをバージョン16から19にアップデートしました。 新しいバージョンには、パフォーマンスの改善、バグ修正、セキュリティアップデートが含まれています。</p><p>このアップデートがコードに影響を与えることはないはずですが、何か問題が発生した場合は、<a href="http://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>までご報告ください。</p><h3 id="windows-7ターゲットの非推奨化" tabindex="-1">Windows 7ターゲットの非推奨化 <a class="header-anchor" href="#windows-7ターゲットの非推奨化" aria-label="Permalink to &quot;Windows 7ターゲットの非推奨化&quot;">​</a></h3><p>Kotlin 2.2.0以降、最小サポートWindowsバージョンがWindows 7からWindows 10に引き上げられました。Microsoftが2025年1月にWindows 7のサポートを終了したため、私たちはこのレガシーターゲットを非推奨とすることを決定しました。</p><p>詳細については、<a href="/ja/kotlin/native-target-support">ネイティブターゲットのサポート</a>を参照してください。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>このリリースでは、<a href="#build-infrastructure-for-wasm-target-separated-from-javascript-target">WasmターゲットのビルドインフラストラクチャがJavaScriptターゲットから分離されました</a>。さらに、<a href="#per-project-binaryen-configuration">プロジェクトまたはモジュールごとにBinaryenツールを設定できる</a>ようになりました。</p><h3 id="wasmターゲットのビルドインフラストラクチャがjavascriptターゲットから分離されました" tabindex="-1">WasmターゲットのビルドインフラストラクチャがJavaScriptターゲットから分離されました <a class="header-anchor" href="#wasmターゲットのビルドインフラストラクチャがjavascriptターゲットから分離されました" aria-label="Permalink to &quot;WasmターゲットのビルドインフラストラクチャがJavaScriptターゲットから分離されました&quot;">​</a></h3><p>以前は、<code>wasmJs</code>ターゲットは<code>js</code>ターゲットと同じインフラストラクチャを共有していました。その結果、両方のターゲットは同じディレクトリ (<code>build/js</code>) にホストされ、同じNPMタスクと設定を使用していました。</p><p>現在、<code>wasmJs</code>ターゲットは<code>js</code>ターゲットとは分離された独自のインフラストラクチャを持つようになりました。これにより、WasmタスクとタイプをJavaScriptのそれらと区別し、独立した設定を可能にします。</p><p>さらに、Wasm関連のプロジェクトファイルとNPM依存関係は、個別の<code>build/wasm</code>ディレクトリに格納されるようになりました。</p><p>Wasm用の新しいNPM関連タスクが導入され、既存のJavaScriptタスクはJavaScript専用になりました。</p><table tabindex="0"><thead><tr><th><strong>Wasmタスク</strong></th><th><strong>JavaScriptタスク</strong></th></tr></thead><tbody><tr><td><code>kotlinWasmNpmInstall</code></td><td><code>kotlinNpmInstall</code></td></tr><tr><td><code>wasmRootPackageJson</code></td><td><code>rootPackageJson</code></td></tr></tbody></table><p>同様に、新しいWasm固有の宣言が追加されました。</p><table tabindex="0"><thead><tr><th><strong>Wasm宣言</strong></th><th><strong>JavaScript宣言</strong></th></tr></thead><tbody><tr><td><code>WasmNodeJsRootPlugin</code></td><td><code>NodeJsRootPlugin</code></td></tr><tr><td><code>WasmNodeJsPlugin</code></td><td><code>NodeJsPlugin</code></td></tr><tr><td><code>WasmYarnPlugin</code></td><td><code>YarnPlugin</code></td></tr><tr><td><code>WasmNodeJsRootExtension</code></td><td><code>NodeJsRootExtension</code></td></tr><tr><td><code>WasmNodeJsEnvSpec</code></td><td><code>NodeJsEnvSpec</code></td></tr><tr><td><code>WasmYarnRootEnvSpec</code></td><td><code>YarnRootEnvSpec</code></td></tr></tbody></table><p>これにより、JavaScriptターゲットから独立してWasmターゲットを操作できるようになり、設定プロセスが簡素化されます。</p><p>この変更はデフォルトで有効になっており、追加の設定は不要です。</p><h3 id="プロジェクトごとのbinaryen設定" tabindex="-1">プロジェクトごとのBinaryen設定 <a class="header-anchor" href="#プロジェクトごとのbinaryen設定" aria-label="Permalink to &quot;プロジェクトごとのBinaryen設定&quot;">​</a></h3><p>Kotlin/Wasmで<a href="/ja/kotlin/whatsnew20#optimized-production-builds-by-default-using-binaryen">プロダクションビルドを最適化する</a>ために使用されるBinaryenツールは、以前はルートプロジェクトで一度だけ設定されていました。</p><p>現在、プロジェクトまたはモジュールごとにBinaryenツールを設定できるようになりました。この変更はGradleのベストプラクティスと整合し、<a href="https://docs.gradle.org/current/userguide/isolated_projects.html" target="_blank" rel="noreferrer">プロジェクト分離</a>のような機能のサポートを強化し、複雑なビルドでのビルドパフォーマンスと信頼性を向上させます。</p><p>さらに、必要に応じて、異なるモジュールに対して異なるバージョンのBinaryenを設定することもできます。</p><p>この機能はデフォルトで有効です。ただし、カスタムのBinaryen設定がある場合、ルートプロジェクトのみではなく、プロジェクトごとに適用する必要があります。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>このリリースでは、<a href="#fix-for-copy-in-jsplainobject-interfaces"><code>@JsPlainObject</code>インターフェースにおける<code>copy()</code>関数の修正</a>、<a href="#support-for-type-aliases-in-files-with-jsmodule-annotation"><code>@JsModule</code>アノテーションを持つファイルでの型エイリアス</a>、およびその他のKotlin/JS機能が改善されています。</p><h3 id="jsplainobjectインターフェースにおけるcopy-の修正" tabindex="-1"><code>@JsPlainObject</code>インターフェースにおける<code>copy()</code>の修正 <a class="header-anchor" href="#jsplainobjectインターフェースにおけるcopy-の修正" aria-label="Permalink to &quot;\`@JsPlainObject\`インターフェースにおける\`copy()\`の修正&quot;">​</a></h3><p>Kotlin/JSには<code>js-plain-objects</code>という実験的なプラグインがあり、<code>@JsPlainObject</code>でアノテーションされたインターフェースに<code>copy()</code>関数を導入しました。<code>copy()</code>関数を使用してオブジェクトを操作できます。</p><p>しかし、<code>copy()</code>の初期実装は継承と互換性がなく、これにより<code>@JsPlainObject</code>インターフェースが他のインターフェースを拡張する際に問題を引き起こしました。</p><p>プレーンオブジェクトに関する制限を回避するため、<code>copy()</code>関数はオブジェクト自体からそのコンパニオンオブジェクトに移動されました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsPlainObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SomeUser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // この構文はもう有効ではありません</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 35</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)      </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // こちらが正しい構文です</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user, age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 35</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この変更は、継承階層の競合を解決し、曖昧さを解消します。 Kotlin 2.2.0からデフォルトで有効になります。</p><h3 id="jsmoduleアノテーションを持つファイルにおける型エイリアスのサポート" tabindex="-1"><code>@JsModule</code>アノテーションを持つファイルにおける型エイリアスのサポート <a class="header-anchor" href="#jsmoduleアノテーションを持つファイルにおける型エイリアスのサポート" aria-label="Permalink to &quot;\`@JsModule\`アノテーションを持つファイルにおける型エイリアスのサポート&quot;">​</a></h3><p>以前は、JavaScriptモジュールから宣言をインポートするために<code>@JsModule</code>でアノテーションされたファイルは、外部宣言にのみ制限されていました。これは、そのようなファイルで<code>typealias</code>を宣言できなかったことを意味します。</p><p>Kotlin 2.2.0以降、<code>@JsModule</code>でマークされたファイル内で型エイリアスを宣言できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">somepackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> somepackage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SomeClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Any</span></span></code></pre></div><p>この変更はKotlin/JSの相互運用性における制限の一側面を軽減します。今後のリリースでさらなる改善が計画されています。</p><p><code>@JsModule</code>を持つファイルでの型エイリアスのサポートはデフォルトで有効になっています。</p><h3 id="マルチプラットフォームのexpect宣言における-jsexportのサポート" tabindex="-1">マルチプラットフォームの<code>expect</code>宣言における<code>@JsExport</code>のサポート <a class="header-anchor" href="#マルチプラットフォームのexpect宣言における-jsexportのサポート" aria-label="Permalink to &quot;マルチプラットフォームの\`expect\`宣言における\`@JsExport\`のサポート&quot;">​</a></h3><p>Kotlinマルチプラットフォームプロジェクトで<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer"><code>expect/actual</code>メカニズム</a>を使用する場合、共通コードの<code>expect</code>宣言に<code>@JsExport</code>アノテーションを使用することはできませんでした。</p><p>このリリースから、<code>expect</code>宣言に直接<code>@JsExport</code>を適用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// commonMain</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以前はエラーになりましたが、現在は正しく動作します </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WindowManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> acceptWindowManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(manager: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WindowManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// jsMain</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WindowManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>JavaScriptソースセット内の対応する<code>actual</code>実装にも<code>@JsExport</code>でアノテーションを付ける必要があり、エクスポート可能な型のみを使用する必要があります。</p><p>この修正により、<code>commonMain</code>で定義された共有コードをJavaScriptに正しくエクスポートできます。これにより、手動の回避策を使用することなく、マルチプラットフォームコードをJavaScriptのコンシューマに公開できるようになりました。</p><p>この変更はデフォルトで有効になっています。</p><h3 id="promise-unit-型での-jsexportの使用" tabindex="-1"><code>Promise&lt;Unit&gt;</code>型での<code>@JsExport</code>の使用 <a class="header-anchor" href="#promise-unit-型での-jsexportの使用" aria-label="Permalink to &quot;\`Promise&lt;Unit&gt;\`型での\`@JsExport\`の使用&quot;">​</a></h3><p>以前は、<code>@JsExport</code>アノテーションを付けて<code>Promise&lt;Unit&gt;</code>型を返す関数をエクスポートしようとすると、Kotlinコンパイラがエラーを生成しました。</p><p><code>Promise&lt;Int&gt;</code>のような戻り値の型は正しく動作しましたが、<code>Promise&lt;Unit&gt;</code>を使用すると、「エクスポート不可能な型」の警告がトリガーされました。TypeScriptでは<code>Promise&lt;void&gt;</code>に正しくマッピングされていたにもかかわらず、です。</p><p>この制限は解除されました。現在、以下のコードはエラーなしでコンパイルされます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以前は正しく動作しました</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fooInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GlobalScope.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@promise </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以前はエラーになりましたが、現在は正しく動作します</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fooUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GlobalScope.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この変更はKotlin/JS相互運用モデルにおける不要な制限を削除します。この修正はデフォルトで有効になっています。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 2.2.0はGradle 7.6.3から8.14まで完全に互換性があります。最新のGradleリリースまでのGradleバージョンも使用できます。ただし、そうすると非推奨の警告が発生したり、一部の新しいGradle機能が動作しない可能性があることに注意してください。</p><p>このリリースでは、Kotlin Gradleプラグインの診断機能にいくつかの改善が加えられています。また、<a href="#binary-compatibility-validation-included-in-kotlin-gradle-plugin">バイナリ互換性検証</a>の実験的な統合が導入され、ライブラリでの作業が容易になります。</p>`,69)),a(n,{id:"kotlin-gradleプラグインにバイナリ互換性検証が含まれるようになりました",level:"3",title:"Kotlin Gradleプラグインにバイナリ互換性検証が含まれるようになりました",labelRef:"experimental-general"}),s[13]||(s[13]=i(`<p>ライブラリバージョン間のバイナリ互換性をチェックしやすくするために、<a href="https://github.com/Kotlin/binary-compatibility-validator" target="_blank" rel="noreferrer">バイナリ互換性バリデータ</a>の機能をKotlin Gradleプラグイン（KGP）に移行する実験を行っています。おもちゃのプロジェクトで試すことはできますが、まだ本番環境での使用は推奨しません。</p><p>元の<a href="https://github.com/Kotlin/binary-compatibility-validator" target="_blank" rel="noreferrer">バイナリ互換性バリデータ</a>は、この実験段階中も引き続きメンテナンスされます。</p><p>Kotlinライブラリは2つのバイナリフォーマットのいずれかを使用できます: JVMクラスファイルまたは<code>klib</code>。これらのフォーマットは互換性がないため、KGPはそれぞれを個別に処理します。</p><p>バイナリ互換性検証機能を有効にするには、<code>build.gradle.kts</code>ファイルの<code>kotlin{}</code>ブロックに以下を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.abi.ExperimentalAbiValidation::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    abiValidation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 古いGradleバージョンとの互換性を確保するためにset()関数を使用します</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        enabled.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>プロジェクトにバイナリ互換性をチェックしたい複数のモジュールがある場合、各モジュールで個別に機能を設定します。各モジュールは独自のカスタム設定を持つことができます。</p><p>有効にしたら、<code>checkLegacyAbi</code>Gradleタスクを実行して、バイナリ互換性の問題をチェックします。タスクはIntelliJ IDEAまたはプロジェクトディレクトリのコマンドラインから実行できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gradlew checkLegacyAbi</span></span></code></pre></div><p>このタスクは、現在のコードからアプリケーションバイナリインターフェース（ABI）ダンプをUTF-8テキストファイルとして生成します。タスクは、新しいダンプを以前のリリースからのものと比較します。違いが見つかった場合、それらをエラーとして報告します。エラーを確認し、変更が許容できると判断した場合は、<code>updateLegacyAbi</code>Gradleタスクを実行して参照ABIダンプを更新できます。</p><h4 id="クラスのフィルタリング" tabindex="-1">クラスのフィルタリング <a class="header-anchor" href="#クラスのフィルタリング" aria-label="Permalink to &quot;クラスのフィルタリング&quot;">​</a></h4><p>この機能により、ABIダンプ内のクラスをフィルタリングできます。名前または部分名で明示的にクラスを含めたり除外したり、またはそれらをマークするアノテーション（またはアノテーション名の一部）によってフィルタリングできます。</p><p>例えば、このサンプルは<code>com.company</code>パッケージ内のすべてのクラスを除外します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.abi.ExperimentalAbiValidation::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    abiValidation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        filters.excluded.byNames.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.company.**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>バイナリ互換性バリデータの設定について詳しくは、<a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.dsl.abi/" target="_blank" rel="noreferrer">KGP APIリファレンス</a>を参照してください。</p><h4 id="マルチプラットフォームの制限" tabindex="-1">マルチプラットフォームの制限 <a class="header-anchor" href="#マルチプラットフォームの制限" aria-label="Permalink to &quot;マルチプラットフォームの制限&quot;">​</a></h4><p>マルチプラットフォームプロジェクトで、ホストがすべてのターゲットのクロスコンパイルをサポートしていない場合、KGPは、他のターゲットからのABIダンプをチェックすることで、サポートされていないターゲットのABI変更を推論しようとします。このアプローチは、後で<strong>すべて</strong>のターゲットをコンパイルできるホストに切り替えた場合に、誤った検証失敗を回避するのに役立ちます。</p><p>KGPがサポートされていないターゲットのABI変更を推論しないように、このデフォルトの動作を変更するには、<code>build.gradle.kts</code>ファイルに以下を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.abi.ExperimentalAbiValidation::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    abiValidation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        klib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            keepUnsupportedTargets </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ただし、プロジェクトにサポートされていないターゲットがある場合、タスクがABIダンプを作成できないため、<code>checkLegacyAbi</code>タスクの実行は失敗します。この動作は、他のターゲットから推論されたABI変更による互換性のない変更を見逃すよりも、チェックが失敗する方が重要である場合に望ましいです。</p><h3 id="kotlin-gradleプラグインのコンソールにおけるリッチ出力のサポート" tabindex="-1">Kotlin Gradleプラグインのコンソールにおけるリッチ出力のサポート <a class="header-anchor" href="#kotlin-gradleプラグインのコンソールにおけるリッチ出力のサポート" aria-label="Permalink to &quot;Kotlin Gradleプラグインのコンソールにおけるリッチ出力のサポート&quot;">​</a></h3><p>Kotlin 2.2.0では、Gradleビルドプロセス中に、コンソールでの色やその他のリッチ出力をサポートします。これにより、報告される診断情報をより読みやすく、理解しやすくします。</p><p>リッチ出力はLinuxおよびmacOSのサポートされているターミナルエミュレーターで利用可能であり、Windowsのサポート追加に取り組んでいます。</p><p><img src="`+l+'" alt="Gradle console" width="600"></p><p>この機能はデフォルトで有効ですが、上書きしたい場合、<code>gradle.properties</code>ファイルに以下のGradleプロパティを追加してください。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.gradle.console=plain</span></span></code></pre></div><p>このプロパティとそのオプションの詳細については、Gradleの<a href="https://docs.gradle.org/current/userguide/command_line_interface.html#sec:command_line_customizing_log_format" target="_blank" rel="noreferrer">ログ形式のカスタマイズ</a>に関するドキュメントを参照してください。</p><h3 id="kgp診断におけるproblems-apiの統合" tabindex="-1">KGP診断におけるProblems APIの統合 <a class="header-anchor" href="#kgp診断におけるproblems-apiの統合" aria-label="Permalink to &quot;KGP診断におけるProblems APIの統合&quot;">​</a></h3><p>以前は、Kotlin Gradleプラグイン（KGP）は、警告やエラーなどの診断情報を、コンソールやログにプレーンテキスト出力としてしか報告できませんでした。</p><p>2.2.0以降、KGPは追加のレポートメカニズムを導入します: 現在は<a href="https://docs.gradle.org/current/kotlin-dsl/gradle/org.gradle.api.problems/index.html" target="_blank" rel="noreferrer">GradleのProblems API</a>を使用しています。これは、ビルドプロセス中にリッチで構造化された問題情報を報告する標準化された方法です。</p><p>KGP診断は、Gradle CLIやIntelliJ IDEAなど、異なるインターフェースでより読みやすく、より一貫して表示されるようになりました。</p><p>この統合は、Gradle 8.6以降からデフォルトで有効になっています。 APIはまだ進化中であるため、最新の改善を活用するために最新のGradleバージョンを使用してください。</p><h3 id="kgpと-warning-modeの互換性" tabindex="-1">KGPと<code>--warning-mode</code>の互換性 <a class="header-anchor" href="#kgpと-warning-modeの互換性" aria-label="Permalink to &quot;KGPと`--warning-mode`の互換性&quot;">​</a></h3><p>Kotlin Gradleプラグイン（KGP）診断は、固定された重要度レベルで問題を報告していました。これは、Gradleの<a href="https://docs.gradle.org/current/userguide/command_line_interface.html#sec:command_line_warnings" target="_blank" rel="noreferrer"><code>--warning-mode</code>コマンドラインオプション</a>がKGPのエラー表示方法に影響を与えなかったことを意味します。</p><p>現在、KGP診断は<code>--warning-mode</code>オプションと互換性があり、より柔軟性を提供します。例えば、すべての警告をエラーに変換したり、警告を完全に無効にしたりできます。</p><p>この変更により、KGP診断は選択された警告モードに基づいて出力を調整します。</p><ul><li><code>--warning-mode=fail</code>を設定すると、<code>Severity.Warning</code>の診断は<code>Severity.Error</code>に昇格されます。</li><li><code>--warning-mode=none</code>を設定すると、<code>Severity.Warning</code>の診断はログに記録されません。</li></ul><p>この動作は2.2.0からデフォルトで有効になっています。</p><p><code>--warning-mode</code>オプションを無視するには、<code>gradle.properties</code>ファイルに以下のGradleプロパティを設定してください。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.internal.diagnostics.ignoreWarningMode=true</span></span></code></pre></div>',39)),a(n,{id:"新しい実験的なビルドツールapi",level:"2",title:"新しい実験的なビルドツールAPI",labelRef:"experimental-general"}),s[14]||(s[14]=i(`<p>Gradle、Maven、AmperなどのさまざまなビルドシステムでKotlinを使用できます。ただし、インクリメンタルコンパイル、Kotlinコンパイラプラグイン、デーモン、Kotlin Multiplatformとの互換性など、完全な機能セットをサポートするために各システムにKotlinを統合することは、多大な労力を必要とします。</p><p>このプロセスを簡素化するために、Kotlin 2.2.0は新しい実験的なビルドツールAPI（BTA）を導入します。BTAは、ビルドシステムとKotlinコンパイラエコシステム間の抽象化レイヤーとして機能する普遍的なAPIです。このアプローチにより、各ビルドシステムは単一のBTAエントリーポイントをサポートするだけでよくなります。</p><p>現在、BTAはKotlin/JVMのみをサポートしています。JetBrainsのKotlinチームは、Kotlin Gradleプラグイン（KGP）と<code>kotlin-maven-plugin</code>で既にこれを使用しています。これらのプラグインを通じてBTAを試すことはできますが、API自体は、独自のビルドツール統合での一般的な使用にはまだ準備ができていません。BTAの提案に興味がある場合、またはフィードバックを共有したい場合、この<a href="https://github.com/Kotlin/KEEP/issues/421" target="_blank" rel="noreferrer">KEEP</a>提案を参照してください。</p><p>BTAを試すには:</p><ul><li>KGPの場合、<code>gradle.properties</code>ファイルに以下のプロパティを追加してください。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.compiler.runViaBuildToolsApi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><ul><li>Mavenの場合、何もする必要はありません。デフォルトで有効になっています。</li></ul><p>BTAは現在、Mavenプラグインに直接的なメリットはありませんが、<a href="https://youtrack.jetbrains.com/issue/KT-77587/Maven-Introduce-Kotlin-daemon-support-and-make-it-enabled-by-default" target="_blank" rel="noreferrer">Kotlinデーモンのサポート</a>や<a href="https://youtrack.jetbrains.com/issue/KT-77086/Stabilize-incremental-compilation-in-Maven" target="_blank" rel="noreferrer">インクリメンタルコンパイルの安定化</a>など、新機能のより迅速な提供のための確固たる基盤を築きます。</p><p>KGPの場合、BTAを使用することですでに以下のメリットがあります。</p><ul><li><a href="#improved-in-process-compiler-execution-strategy">「インプロセス」コンパイラ実行戦略の改善</a></li><li><a href="#flexibility-to-configure-different-compiler-versions-from-kotlin">Kotlinからの異なるコンパイラバージョン設定の柔軟性</a></li></ul><h3 id="「インプロセス」コンパイラ実行戦略の改善" tabindex="-1">「インプロセス」コンパイラ実行戦略の改善 <a class="header-anchor" href="#「インプロセス」コンパイラ実行戦略の改善" aria-label="Permalink to &quot;「インプロセス」コンパイラ実行戦略の改善&quot;">​</a></h3><p>KGPは3つの<a href="/ja/kotlin/gradle-compilation-and-caches#defining-kotlin-compiler-execution-strategy">Kotlinコンパイラ実行戦略</a>をサポートしています。Gradleデーモンプロセス内でコンパイラを実行する「インプロセス」戦略は、以前はインクリメンタルコンパイルをサポートしていませんでした。</p><p>現在、BTAを使用することで、「インプロセス」戦略はインクリメンタルコンパイルを<strong>サポート</strong>するようになりました。使用するには、<code>gradle.properties</code>ファイルに以下のプロパティを追加してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.compiler.execution.strategy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=in-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span></span></code></pre></div><h3 id="kotlinからの異なるコンパイラバージョン設定の柔軟性" tabindex="-1">Kotlinからの異なるコンパイラバージョン設定の柔軟性 <a class="header-anchor" href="#kotlinからの異なるコンパイラバージョン設定の柔軟性" aria-label="Permalink to &quot;Kotlinからの異なるコンパイラバージョン設定の柔軟性&quot;">​</a></h3><p>ビルドスクリプトの非推奨を処理しながら新しい言語機能を試すなど、コードで新しいKotlinコンパイラバージョンを使用しながら、KGPを古いバージョンのままにしたい場合があります。または、KGPのバージョンを更新し、古いKotlinコンパイラバージョンを保持したい場合もあります。</p><p>BTAはこれを可能にします。<code>build.gradle.kts</code>ファイルで次のように設定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.buildtools.api.ExperimentalBuildToolsApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0-SNAPSHOT&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalBuildToolsApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilerVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.1.21&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2.2.0とは異なるバージョン</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>BTAは、KGPとKotlinコンパイラバージョンを、過去3つのメジャーバージョンと将来の1つのメジャーバージョンで設定することをサポートします。したがって、KGP 2.2.0では、Kotlinコンパイラバージョン2.1.x、2.0.x、および1.9.25がサポートされます。KGP 2.2.0は、将来のKotlinコンパイラバージョン2.2.xおよび2.3.xとも互換性があります。</p><p>ただし、異なるコンパイラバージョンをコンパイラプラグインと組み合わせて使用すると、Kotlinコンパイラ例外が発生する可能性があることに注意してください。Kotlinチームは、今後のリリースでこれらの問題に対処する予定です。</p><p>これらのプラグインでBTAを試して、<a href="https://youtrack.jetbrains.com/issue/KT-56574" target="_blank" rel="noreferrer">KGP</a>と<a href="https://youtrack.jetbrains.com/issue/KT-73012" target="_blank" rel="noreferrer">Mavenプラグイン</a>専用のYouTrackチケットでフィードバックをお寄せください。</p><h2 id="kotlin標準ライブラリ" tabindex="-1">Kotlin標準ライブラリ <a class="header-anchor" href="#kotlin標準ライブラリ" aria-label="Permalink to &quot;Kotlin標準ライブラリ&quot;">​</a></h2><p>Kotlin 2.2.0では、<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io.encoding/-base64/" target="_blank" rel="noreferrer"><code>Base64</code> API</a>と<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.text/-hex-format/" target="_blank" rel="noreferrer"><code>HexFormat</code> API</a>が<a href="/ja/kotlin/components-stability#stability-levels-explained">安定版</a>になりました。</p><h3 id="base64エンコーディングとデコーディングの安定化" tabindex="-1">Base64エンコーディングとデコーディングの安定化 <a class="header-anchor" href="#base64エンコーディングとデコーディングの安定化" aria-label="Permalink to &quot;Base64エンコーディングとデコーディングの安定化&quot;">​</a></h3><p>Kotlin 1.8.20は<a href="/ja/kotlin/whatsnew1820#support-for-base64-encoding">Base64エンコーディングとデコーディングの実験的なサポート</a>を導入しました。 Kotlin 2.2.0では、<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io.encoding/-base64/" target="_blank" rel="noreferrer">Base64 API</a>は現在<a href="/ja/kotlin/components-stability#stability-levels-explained">安定版</a>であり、4つのエンコーディングスキームが含まれ、このリリースで新しい<code>Base64.Pem</code>が追加されました。</p><ul><li><p><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io.encoding/-base64/-default/" target="_blank" rel="noreferrer"><code>Base64.Default</code></a>は、標準の<a href="https://www.rfc-editor.org/rfc/rfc4648#section-4" target="_blank" rel="noreferrer">Base64エンコーディングスキーム</a>を使用します。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>Base64.Default</code>は<code>Base64</code>クラスのコンパニオンオブジェクトです。 結果として、<code>Base64.Default.encode()</code>や<code>Base64.Default.decode()</code>の代わりに、<code>Base64.encode()</code>や<code>Base64.decode()</code>でその関数を呼び出すことができます。</p></div></li><li><p><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io.encoding/-base64/-default/-url-safe.html" target="_blank" rel="noreferrer"><code>Base64.UrlSafe</code></a>は、<a href="https://www.rfc-editor.org/rfc/rfc4648#section-5" target="_blank" rel="noreferrer">&quot;URLおよびファイル名セーフ&quot;</a>エンコーディングスキームを使用します。</p></li><li><p><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io.encoding/-base64/-default/-mime.html" target="_blank" rel="noreferrer"><code>Base64.Mime</code></a>は、<a href="https://www.rfc-editor.org/rfc/rfc2045#section-6.8" target="_blank" rel="noreferrer">MIME</a>エンコーディングスキームを使用し、エンコード中に76文字ごとに改行文字を挿入し、デコード中に不正な文字をスキップします。</p></li><li><p><code>Base64.Pem</code>は<code>Base64.Mime</code>のようにデータをエンコードしますが、行の長さを64文字に制限します。</p></li></ul><p>Base64 APIを使用して、バイナリデータをBase64文字列にエンコードし、バイトにデコードするために使用できます。</p><p>以下に例を示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.Default.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foBytes) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Zm8=&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Alternatively:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base64.encode(foBytes)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foobarBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.Url</span></span></code></pre></div>`,29))])}const v=p(o,[["render",d]]);export{m as __pageData,v as default};
