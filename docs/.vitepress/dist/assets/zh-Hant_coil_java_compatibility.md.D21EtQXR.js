import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"Java 相容性","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/coil/java_compatibility.md","filePath":"zh-Hant/coil/java_compatibility.md","lastUpdated":1753369988000}'),n={name:"zh-Hant/coil/java_compatibility.md"};function h(l,s,p,k,r,E){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="java-相容性" tabindex="-1">Java 相容性 <a class="header-anchor" href="#java-相容性" aria-label="Permalink to &quot;Java 相容性&quot;">​</a></h1><p>Coil 的 API 設計以 Kotlin 優先。它利用了 Kotlin 的語言特性，例如內聯 Lambda 表達式、接收器參數、預設引數和擴展函數，這些特性在 Java 中是不可用的。</p><p>重要的是，掛起函數 (suspend functions) 無法在 Java 中實作。這意味著自訂的 <a href="https://coil-kt.github.io/coil/api/coil-core/coil3.transform/-transformation" target="_blank" rel="noreferrer">Transformations</a>、<a href="https://coil-kt.github.io/coil/api/coil-core/coil3.size/-size-resolver" target="_blank" rel="noreferrer">Size Resolvers</a>、<a href="./image_pipeline#fetchers">Fetchers</a> 和 <a href="./image_pipeline#decoders">Decoders</a> <strong>必須</strong>在 Kotlin 中實作。</p><p>儘管有這些限制，Coil 的大多數 API 都與 Java 相容。您可以使用以下方式取得單例 <code>ImageLoader</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImageLoader imageLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SingletonImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context);</span></span></code></pre></div><p>將 <code>ImageRequest</code> 入佇列的語法在 Java 和 Kotlin 中幾乎相同：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImageRequest request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImageViewTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(imageView))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span></code></pre></div><p>::: Note <code>ImageView.load</code> 無法從 Java 使用。請改用 <code>ImageRequest.Builder</code> API。</p><p>::: <code>suspend</code> 函數無法從 Java 輕鬆呼叫。因此，要同步取得影像，您必須使用 <code>ImageLoader.executeBlocking</code> 擴展函數，它可像這樣從 Java 呼叫：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImageRequest request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1920</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Drawable drawable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageLoaders.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(imageLoader, request).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asDrawable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.resources);</span></span></code></pre></div><p>::: Note <code>ImageLoaders.executeBlocking</code> 將會阻塞當前執行緒，而不是掛起。請勿從主執行緒呼叫此函數。 :::</p>`,11)]))}const g=i(n,[["render",h]]);export{o as __pageData,g as default};
