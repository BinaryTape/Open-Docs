import{_ as p,a as d,b as E}from"./chunks/manual-hierarchical-structure.BFgQV1II.js";import{_ as o,C as k,c as r,o as c,ag as t,G as l,j as i,w as n,a as s}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"分层项目结构","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-hierarchy.md","filePath":"kmp/multiplatform-hierarchy.md","lastUpdated":1755516278000}'),g={name:"kmp/multiplatform-hierarchy.md"};function y(u,a,m,F,v,A){const e=k("TabItem"),h=k("Tabs");return c(),r("div",null,[a[12]||(a[12]=t('<h1 id="分层项目结构" tabindex="-1">分层项目结构 <a class="header-anchor" href="#分层项目结构" aria-label="Permalink to &quot;分层项目结构&quot;">​</a></h1><p>Kotlin 多平台项目支持分层源代码集结构。这意味着你可以安排中间源代码集的层级结构，以便在部分（而非全部）<a href="./multiplatform-dsl-reference#targets">支持的目标</a>之间共享公共代码。使用中间源代码集有助于你：</p><ul><li>为某些目标提供特定的 API。例如，一个库可以在一个中间源代码集中为 Kotlin/Native 目标添加原生特有的 API，而不是为 Kotlin/JVM 目标添加。</li><li>为某些目标消费特定的 API。例如，你可以受益于 Kotlin 多平台库为构成中间源代码集的一些目标提供的丰富 API。</li><li>在你的项目中使用平台相关的库。例如，你可以从中间 iOS 源代码集访问 iOS 特有的依赖项。</li></ul><p>Kotlin 工具链确保每个源代码集只能访问对其编译到的所有目标都可用的 API。这可以防止诸如使用 Windows 特有的 API 然后将其编译到 macOS，从而导致链接错误或运行时未定义行为的情况。</p><p>设置源代码集层级结构推荐的方式是使用<a href="#default-hierarchy-template">默认分层模板</a>。该模板涵盖了最常见的用例。如果你有一个更高级的项目，可以<a href="#manual-configuration">手动配置</a>它。这是一种更底层的方法：它更灵活，但需要更多的精力和知识。</p><h2 id="默认分层模板" tabindex="-1">默认分层模板 <a class="header-anchor" href="#默认分层模板" aria-label="Permalink to &quot;默认分层模板&quot;">​</a></h2><p>Kotlin Gradle 插件有一个内置的默认<a href="#see-the-full-hierarchy-template">分层模板</a>。它包含针对一些常见用例的预定义中间源代码集。该插件会根据你的项目中指定的目标自动设置这些源代码集。</p><p>考虑以下项目中包含共享代码的模块中的 <code>build.gradle(.kts)</code> 文件：</p>',8)),l(h,{group:"build-script"},{default:n(()=>[l(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    androidTarget"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    iosArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    iosSimulatorArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    androidTarget()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    iosArm64()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    iosSimulatorArm64()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[13]||(a[13]=t('<p>当你在代码中声明 <code>androidTarget</code>、<code>iosArm64</code> 和 <code>iosSimulatorArm64</code> 目标时，Kotlin Gradle 插件会从模板中查找合适的共享源代码集并为你创建它们。结果层级结构如下所示：</p><p><img src="'+p+'" alt="使用默认分层模板的示例"></p><p>彩色源代码集是实际创建并存在于项目中的，而默认模板中灰色的源代码集则被忽略。例如，Kotlin Gradle 插件没有创建 <code>watchos</code> 源代码集，因为项目中没有 watchOS 目标。</p><p>如果你添加一个 watchOS 目标，例如 <code>watchosArm64</code>，那么 <code>watchos</code> 源代码集将被创建，并且 <code>apple</code>、<code>native</code> 和 <code>common</code> 源代码集中的代码也将编译到 <code>watchosArm64</code>。</p><p>Kotlin Gradle 插件为默认分层模板中的所有源代码集提供了类型安全和静态访问器，因此与<a href="#manual-configuration">手动配置</a>相比，你无需使用 <code>by getting</code> 或 <code>by creating</code> 构造即可引用它们。</p><p>如果你在共享模块的 <code>build.gradle(.kts)</code> 文件中尝试访问源代码集而未首先声明相应目标，你将看到一个警告：</p>',6)),l(h,{group:"build-script"},{default:n(()=>[l(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>a[2]||(a[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    androidTarget"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    iosArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    iosSimulatorArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        iosMain."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // 警告：未声明目标就访问源代码集")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        linuxX64Main"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," { }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>a[3]||(a[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    androidTarget()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    iosArm64()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    iosSimulatorArm64()")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        iosMain {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependencies {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                implementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // 警告：未声明目标就访问源代码集")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        linuxX64Main { }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[14]||(a[14]=t(`<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在此示例中，<code>apple</code> 和 <code>native</code> 源代码集仅编译到 <code>iosArm64</code> 和 <code>iosSimulatorArm64</code> 目标。尽管它们的名称如此，但它们可以访问完整的 iOS API。对于像 <code>native</code> 这样的源代码集来说，这可能违反直觉，因为你可能会期望只有适用于所有原生目标的 API 才能在此源代码集中访问。这种行为将来可能会改变。</p></div><h3 id="额外配置" tabindex="-1">额外配置 <a class="header-anchor" href="#额外配置" aria-label="Permalink to &quot;额外配置&quot;">​</a></h3><p>你可能需要对默认分层模板进行调整。如果你之前通过 <code>dependsOn</code> 调用<a href="#manual-configuration">手动</a>引入了中间源代码集，这将取消对默认分层模板的使用，并导致以下警告：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>默认 Kotlin 分层模板未应用于 &#39;&lt;项目名称&gt;&#39;：</span></span>
<span class="line"><span>已为以下源代码集配置了显式 .dependsOn() 关联：</span></span>
<span class="line"><span>[&lt;... 带有手动配置 dependsOn 关联的源代码集名称...&gt;]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>考虑删除 dependsOn 调用，或通过在 gradle.properties 中添加</span></span>
<span class="line"><span>    &#39;kotlin.mpp.applyDefaultHierarchyTemplate=false&#39;</span></span>
<span class="line"><span>来禁用默认模板</span></span>
<span class="line"><span></span></span>
<span class="line"><span>了解更多关于分层模板的信息：https://kotl.in/hierarchy-template</span></span></code></pre></div><p>要解决此问题，请通过执行以下任一操作来配置你的项目：</p><ul><li><a href="#replacing-a-manual-configuration">用默认分层模板替换你的手动配置</a></li><li><a href="#creating-additional-source-sets">在默认分层模板中创建额外的源代码集</a></li><li><a href="#modifying-source-sets">修改由默认分层模板创建的源代码集</a></li></ul><h4 id="替换手动配置" tabindex="-1">替换手动配置 <a class="header-anchor" href="#替换手动配置" aria-label="Permalink to &quot;替换手动配置&quot;">​</a></h4><p><strong>场景</strong>。你所有的中间源代码集目前都由默认分层模板覆盖。</p><p><strong>解决方案</strong>。在共享模块的 <code>build.gradle(.kts)</code> 文件中，移除所有手动 <code>dependsOn()</code> 调用和带有 <code>by creating</code> 构造的源代码集。要查看所有默认源代码集的列表，请参见<a href="#see-the-full-hierarchy-template">完整的分层模板</a>。</p><h4 id="创建额外的源代码集" tabindex="-1">创建额外的源代码集 <a class="header-anchor" href="#创建额外的源代码集" aria-label="Permalink to &quot;创建额外的源代码集&quot;">​</a></h4><p><strong>场景</strong>。你希望添加默认分层模板尚未提供的源代码集，例如，在 macOS 和 JVM 目标之间添加一个。</p><p><strong>解决方案</strong>：</p>`,12)),i("ol",null,[a[7]||(a[7]=i("li",null,[i("p",null,[s("在共享模块的 "),i("code",null,"build.gradle(.kts)"),s(" 文件中，通过显式调用 "),i("code",null,"applyDefaultHierarchyTemplate()"),s(" 重新应用模板。")])],-1)),i("li",null,[a[6]||(a[6]=i("p",null,[s("使用 "),i("code",null,"dependsOn()"),s(),i("a",{href:"#manual-configuration"},"手动"),s("配置额外的源代码集：")],-1)),l(h,{group:"build-script"},{default:n(()=>[l(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>a[4]||(a[4]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    jvm"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    macosArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    iosArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    iosSimulatorArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 再次应用默认层级。例如，它将创建 iosMain 源代码集：")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    applyDefaultHierarchyTemplate"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // 创建一个额外的 jvmAndMacos 源代码集：")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," jvmAndMacos "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," creating"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(commonMain."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"get"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"())")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        macosArm64Main."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"get"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(jvmAndMacos)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        jvmMain."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"get"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(jvmAndMacos)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>a[5]||(a[5]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    jvm()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    macosArm64()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    iosArm64()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    iosSimulatorArm64()")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 再次应用默认层级。例如，它将创建 iosMain 源代码集：")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    applyDefaultHierarchyTemplate()")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // 创建一个额外的 jvmAndMacos 源代码集：")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        jvmAndMacos {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(commonMain"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"get())")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        macosArm64Main {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(jvmAndMacos"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"get())")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        jvmMain {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(jvmAndMacos"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"get())")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    } ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})])]),a[15]||(a[15]=t('<h4 id="修改源代码集" tabindex="-1">修改源代码集 <a class="header-anchor" href="#修改源代码集" aria-label="Permalink to &quot;修改源代码集&quot;">​</a></h4><p><strong>场景</strong>。你已有的源代码集与模板生成的源代码集名称完全相同，但在你的项目中由不同的目标集共享。例如，一个 <code>nativeMain</code> 源代码集仅在桌面特有的目标：<code>linuxX64</code>、<code>mingwX64</code> 和 <code>macosX64</code> 之间共享。</p><p><strong>解决方案</strong>。目前没有办法修改模板源代码集之间的默认 <code>dependsOn</code> 关联。同样重要的是，源代码集的实现和含义，例如 <code>nativeMain</code>，在所有项目中都是相同的。</p><p>但是，你仍然可以执行以下任一操作：</p><ul><li>找到适用于你目的的不同源代码集，无论是在默认分层模板中还是手动创建的。</li><li>通过在 <code>gradle.properties</code> 文件中添加 <code>kotlin.mpp.applyDefaultHierarchyTemplate=false</code> 来完全退出模板，并手动配置所有源代码集。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>我们目前正在开发一个 API 来创建你自己的分层模板。这将对层级配置与默认模板显著不同的项目很有用。 这个 API 尚未准备就绪，但如果你渴望尝试它，可以查看 <code>applyHierarchyTemplate {}</code> 代码块和 <code>KotlinHierarchyTemplate.default</code> 的声明作为示例。请记住，此 API 仍在开发中。它可能未经测试，并且在后续版本中可能会发生变化。</p></div>',6)),a[16]||(a[16]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"查看完整的分层模板",tabindex:"-1"},[s("查看完整的分层模板 "),i("a",{class:"header-anchor",href:"#查看完整的分层模板","aria-label":'Permalink to "查看完整的分层模板 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[17]||(a[17]=t('<p>当你声明项目编译到的目标时，插件会根据模板中指定的目标选择共享源代码集，并在你的项目中创建它们。</p><p><img src="'+d+'" alt="默认分层模板"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>此示例仅显示项目的生产部分，省略了 <code>Main</code> 后缀（例如，使用 <code>common</code> 而不是 <code>commonMain</code>）。然而，对于 <code>*Test</code> 源代码集，一切都是相同的。</p></div><h2 id="手动配置" tabindex="-1">手动配置 <a class="header-anchor" href="#手动配置" aria-label="Permalink to &quot;手动配置&quot;">​</a></h2><p>你可以在源代码集结构中手动引入一个中间源代码集。它将包含多个目标的共享代码。</p><p>例如，如果你想在原生 Linux、Windows 和 macOS 目标（<code>linuxX64</code>、<code>mingwX64</code> 和 <code>macosX64</code>）之间共享代码，可以这样做：</p>',6)),i("ol",null,[a[11]||(a[11]=i("li",null,[i("p",null,[s("在共享模块的 "),i("code",null,"build.gradle(.kts)"),s(" 文件中，添加中间源代码集 "),i("code",null,"desktopMain"),s("，它将包含这些目标的共享逻辑。")])],-1)),i("li",null,[a[10]||(a[10]=i("p",null,[s("使用 "),i("code",null,"dependsOn"),s(" 关联，设置源代码集层级结构。将 "),i("code",null,"commonMain"),s(" 与 "),i("code",null,"desktopMain"),s(" 连接，然后将 "),i("code",null,"desktopMain"),s(" 与每个目标源代码集连接：")],-1)),l(h,{group:"build-script"},{default:n(()=>[l(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>a[8]||(a[8]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    linuxX64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    mingwX64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    macosX64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," desktopMain "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," creating"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(commonMain."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"get"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"())")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        linuxX64Main."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"get"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        mingwX64Main."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"get"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        macosX64Main."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"get"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>a[9]||(a[9]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    linuxX64()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mingwX64()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    macosX64()")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        desktopMain {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(commonMain"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"get())")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        linuxX64Main {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        mingwX64Main {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        macosX64Main {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})])]),a[18]||(a[18]=t('<p>结果层级结构将如下所示：</p><p><img src="'+E+'" alt="手动配置的分层结构"></p><p>你可以为以下目标组合共享源代码集：</p><ul><li>JVM 或 Android + JS + Native</li><li>JVM 或 Android + Native</li><li>JS + Native</li><li>JVM 或 Android + JS</li><li>Native</li></ul><p>Kotlin 目前不支持为以下组合共享源代码集：</p><ul><li>多个 JVM 目标</li><li>JVM + Android 目标</li><li>多个 JS 目标</li></ul><p>如果你需要从共享的原生源代码集访问平台特有的 API，IntelliJ IDEA 将帮助你检测可以在共享原生代码中使用的公共声明。对于其他情况，请使用 Kotlin 的<a href="./multiplatform-expect-actual">预期与实际声明</a>机制。</p>',7))])}const f=o(g,[["render",y]]);export{_ as __pageData,f as default};
