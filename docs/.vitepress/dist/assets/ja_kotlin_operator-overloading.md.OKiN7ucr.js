import{_ as t,c as i,o as e,ag as s}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"演算子オーバーロード","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/operator-overloading.md","filePath":"ja/kotlin/operator-overloading.md","lastUpdated":1754307826000}'),d={name:"ja/kotlin/operator-overloading.md"};function o(n,a,l,h,c,r){return e(),i("div",null,a[0]||(a[0]=[s(`<h1 id="演算子オーバーロード" tabindex="-1">演算子オーバーロード <a class="header-anchor" href="#演算子オーバーロード" aria-label="Permalink to &quot;演算子オーバーロード&quot;">​</a></h1><p>Kotlinでは、型に対する定義済み演算子のセットにカスタム実装を提供できます。これらの演算子には、定義済みの記号表現（<code>+</code>や<code>*</code>など）と優先順位があります。演算子を実装するには、対応する型に対して特定の名前を持つ<a href="/ja/kotlin/functions#member-functions">メンバー関数</a>または<a href="/ja/kotlin/extensions">拡張関数</a>を提供します。この型は、二項演算の場合は左辺の型となり、単項演算の場合は引数の型となります。</p><p>演算子をオーバーロードするには、対応する関数を<code>operator</code>修飾子でマークします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IndexedContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>演算子のオーバーロードを<a href="/ja/kotlin/inheritance#overriding-methods">オーバーライドする</a>場合、<code>operator</code>を省略できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrdersList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IndexedContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*...*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="単項演算" tabindex="-1">単項演算 <a class="header-anchor" href="#単項演算" aria-label="Permalink to &quot;単項演算&quot;">​</a></h2><h3 id="単項前置演算子" tabindex="-1">単項前置演算子 <a class="header-anchor" href="#単項前置演算子" aria-label="Permalink to &quot;単項前置演算子&quot;">​</a></h3><table tabindex="0"><thead><tr><th>式</th><th>翻訳先</th></tr></thead><tbody><tr><td><code>+a</code></td><td><code>a.unaryPlus()</code></td></tr><tr><td><code>-a</code></td><td><code>a.unaryMinus()</code></td></tr><tr><td><code>!a</code></td><td><code>a.not()</code></td></tr></tbody></table><p>この表は、コンパイラが例えば式<code>+a</code>を処理する際に、以下のステップを実行することを示しています。</p><ul><li><code>a</code>の型を決定し、それを<code>T</code>とする。</li><li><code>operator</code>修飾子を持ち、レシーバー<code>T</code>に対するパラメータを持たない<code>unaryPlus()</code>関数を検索する。これはメンバー関数または拡張関数を意味する。</li><li>その関数が存在しないか、曖昧な場合は、コンパイルエラーとなる。</li><li>その関数が存在し、戻り値の型が<code>R</code>である場合、式<code>+a</code>は型<code>R</code>を持つ。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>これらの演算は、他のすべての演算と同様に、<a href="/ja/kotlin/basic-types">基本型</a>向けに最適化されており、それらに対する関数呼び出しのオーバーヘッドを発生させません。</p></div><p>例として、単項マイナス演算子をオーバーロードする方法を次に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unaryMinus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> point </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">point)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// prints &quot;Point(x=-10, y=-20)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="インクリメントとデクリメント" tabindex="-1">インクリメントとデクリメント <a class="header-anchor" href="#インクリメントとデクリメント" aria-label="Permalink to &quot;インクリメントとデクリメント&quot;">​</a></h3><table tabindex="0"><thead><tr><th>式</th><th>翻訳先</th></tr></thead><tbody><tr><td><code>a++</code></td><td><code>a.inc()</code> + 以下を参照</td></tr><tr><td><code>a--</code></td><td><code>a.dec()</code> + 以下を参照</td></tr></tbody></table><p><code>inc()</code>および<code>dec()</code>関数は値を返さなければならず、その値は<code>++</code>または<code>--</code>演算子が使用された変数に代入されます。これらの関数は、<code>inc</code>または<code>dec</code>が呼び出されたオブジェクトをミューテーション（変更）すべきではありません。</p><p>コンパイラは、例えば<code>a++</code>のような<em>後置</em>形式の演算子の解決のために、以下のステップを実行します。</p><ul><li><code>a</code>の型を決定し、それを<code>T</code>とする。</li><li><code>operator</code>修飾子を持ち、パラメータがなく、型<code>T</code>のレシーバーに適用可能な<code>inc()</code>関数を検索する。</li><li>その関数の戻り値の型が<code>T</code>のサブタイプであることを確認する。</li></ul><p>式を計算した結果は次のとおりです。</p><ul><li><code>a</code>の初期値を一時記憶域<code>a0</code>に保存する。</li><li><code>a0.inc()</code>の結果を<code>a</code>に代入する。</li><li><code>a0</code>を式の結果として返す。</li></ul><p><code>a--</code>についても、手順は完全に類似しています。</p><p><em>前置</em>形式の<code>++a</code>と<code>--a</code>についても、解決は同じ方法で行われ、結果は次のとおりです。</p><ul><li><code>a.inc()</code>の結果を<code>a</code>に代入する。</li><li><code>a</code>の新しい値を式の結果として返す。</li></ul><h2 id="二項演算" tabindex="-1">二項演算 <a class="header-anchor" href="#二項演算" aria-label="Permalink to &quot;二項演算&quot;">​</a></h2><h3 id="算術演算子" tabindex="-1">算術演算子 <a class="header-anchor" href="#算術演算子" aria-label="Permalink to &quot;算術演算子&quot;">​</a></h3><table tabindex="0"><thead><tr><th>式</th><th>翻訳先</th></tr></thead><tbody><tr><td><code>a + b</code></td><td><code>a.plus(b)</code></td></tr><tr><td><code>a - b</code></td><td><code>a.minus(b)</code></td></tr><tr><td><code>a * b</code></td><td><code>a.times(b)</code></td></tr><tr><td><code>a / b</code></td><td><code>a.div(b)</code></td></tr><tr><td><code>a % b</code></td><td><code>a.rem(b)</code></td></tr><tr><td><code>a..b</code></td><td><code>a.rangeTo(b)</code></td></tr><tr><td><code>a..&lt;b</code></td><td><code>a.rangeUntil(b)</code></td></tr></tbody></table><p>この表の演算子については、コンパイラは<em>翻訳先</em>列の式を解決するだけです。</p><p>以下は、指定された値で始まり、オーバーロードされた<code>+</code>演算子を使用してインクリメントできる<code>Counter</code>クラスの例です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dayIndex: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> plus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(increment: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dayIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> increment)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="in-演算子" tabindex="-1"><code>in</code> 演算子 <a class="header-anchor" href="#in-演算子" aria-label="Permalink to &quot;\`in\` 演算子&quot;">​</a></h3><table tabindex="0"><thead><tr><th>式</th><th>翻訳先</th></tr></thead><tbody><tr><td><code>a in b</code></td><td><code>b.contains(a)</code></td></tr><tr><td><code>a !in b</code></td><td><code>!b.contains(a)</code></td></tr></tbody></table><p><code>in</code>と<code>!in</code>については手順は同じですが、引数の順序が逆になります。</p><h3 id="添字アクセス演算子" tabindex="-1">添字アクセス演算子 <a class="header-anchor" href="#添字アクセス演算子" aria-label="Permalink to &quot;添字アクセス演算子&quot;">​</a></h3><table tabindex="0"><thead><tr><th>式</th><th>翻訳先</th></tr></thead><tbody><tr><td><code>a[i]</code></td><td><code>a.get(i)</code></td></tr><tr><td><code>a[i, j]</code></td><td><code>a.get(i, j)</code></td></tr><tr><td><code>a[i_1, ..., i_n]</code></td><td><code>a.get(i_1, ..., i_n)</code></td></tr><tr><td><code>a[i] = b</code></td><td><code>a.set(i, b)</code></td></tr><tr><td><code>a[i, j] = b</code></td><td><code>a.set(i, j, b)</code></td></tr><tr><td><code>a[i_1, ..., i_n] = b</code></td><td><code>a.set(i_1, ..., i_n, b)</code></td></tr></tbody></table><p>角括弧は、適切な数の引数を持つ<code>get</code>および<code>set</code>への呼び出しに翻訳されます。</p><h3 id="invoke-演算子" tabindex="-1"><code>invoke</code> 演算子 <a class="header-anchor" href="#invoke-演算子" aria-label="Permalink to &quot;\`invoke\` 演算子&quot;">​</a></h3><table tabindex="0"><thead><tr><th>式</th><th>翻訳先</th></tr></thead><tbody><tr><td><code>a()</code></td><td><code>a.invoke()</code></td></tr><tr><td><code>a(i)</code></td><td><code>a.invoke(i)</code></td></tr><tr><td><code>a(i, j)</code></td><td><code>a.invoke(i, j)</code></td></tr><tr><td><code>a(i_1, ..., i_n)</code></td><td><code>a.invoke(i_1, ..., i_n)</code></td></tr></tbody></table><p>丸括弧は、適切な数の引数を持つ<code>invoke</code>への呼び出しに翻訳されます。</p><h3 id="複合代入" tabindex="-1">複合代入 <a class="header-anchor" href="#複合代入" aria-label="Permalink to &quot;複合代入&quot;">​</a></h3><table tabindex="0"><thead><tr><th>式</th><th>翻訳先</th></tr></thead><tbody><tr><td><code>a += b</code></td><td><code>a.plusAssign(b)</code></td></tr><tr><td><code>a -= b</code></td><td><code>a.minusAssign(b)</code></td></tr><tr><td><code>a *= b</code></td><td><code>a.timesAssign(b)</code></td></tr><tr><td><code>a /= b</code></td><td><code>a.divAssign(b)</code></td></tr><tr><td><code>a %= b</code></td><td><code>a.remAssign(b)</code></td></tr></tbody></table><p>例えば<code>a += b</code>のような代入演算の場合、コンパイラは以下のステップを実行します。</p><ul><li>右列の関数が利用可能な場合： <ul><li>対応する二項関数（<code>plusAssign()</code>の場合は<code>plus()</code>）も利用可能で、<code>a</code>が可変変数であり、<code>plus</code>の戻り値の型が<code>a</code>の型のサブタイプである場合、エラー（曖昧性）を報告する。</li><li>その戻り値の型が<code>Unit</code>であることを確認し、そうでない場合はエラーを報告する。</li><li><code>a.plusAssign(b)</code>のコードを生成する。</li></ul></li><li>それ以外の場合、<code>a = a + b</code>のコードを生成しようとする（これには型チェックが含まれ、<code>a + b</code>の型が<code>a</code>のサブタイプでなければならない）。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlinにおいて、代入は式では<em>ありません</em>。</p></div><h3 id="等値演算子と不等値演算子" tabindex="-1">等値演算子と不等値演算子 <a class="header-anchor" href="#等値演算子と不等値演算子" aria-label="Permalink to &quot;等値演算子と不等値演算子&quot;">​</a></h3><table tabindex="0"><thead><tr><th>式</th><th>翻訳先</th></tr></thead><tbody><tr><td><code>a == b</code></td><td><code>a?.equals(b) ?: (b === null)</code></td></tr><tr><td><code>a != b</code></td><td><code>!(a?.equals(b) ?: (b === null))</code></td></tr></tbody></table><p>これらの演算子は、カスタムの等値チェック実装を提供するためにオーバーライドできる関数<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/equals.html" target="_blank" rel="noreferrer"><code>equals(other: Any?): Boolean</code></a>とのみ連携します。同じ名前の他の関数（<code>equals(other: Foo)</code>など）は呼び出されません。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>===</code>と<code>!==</code>（同一性チェック）はオーバーロードできないため、それらに関する規約は存在しません。</p></div><p><code>==</code>演算は特殊です。これは<code>null</code>をスクリーニングする複雑な式に翻訳されます。 <code>null == null</code>は常に<code>true</code>であり、非<code>null</code>の<code>x</code>に対する<code>x == null</code>は常に<code>false</code>となり、<code>x.equals()</code>を呼び出しません。</p><h3 id="比較演算子" tabindex="-1">比較演算子 <a class="header-anchor" href="#比較演算子" aria-label="Permalink to &quot;比較演算子&quot;">​</a></h3><table tabindex="0"><thead><tr><th>式</th><th>翻訳先</th></tr></thead><tbody><tr><td><code>a &gt; b</code></td><td><code>a.compareTo(b) &gt; 0</code></td></tr><tr><td><code>a &lt; b</code></td><td><code>a.compareTo(b) &lt; 0</code></td></tr><tr><td><code>a &gt;= b</code></td><td><code>a.compareTo(b) &gt;= 0</code></td></tr><tr><td><code>a &lt;= b</code></td><td><code>a.compareTo(b) &lt;= 0</code></td></tr></tbody></table><p>すべての比較は<code>compareTo</code>への呼び出しに翻訳され、<code>compareTo</code>は<code>Int</code>を返す必要があります。</p><h3 id="プロパティ委譲演算子" tabindex="-1">プロパティ委譲演算子 <a class="header-anchor" href="#プロパティ委譲演算子" aria-label="Permalink to &quot;プロパティ委譲演算子&quot;">​</a></h3><p><code>provideDelegate</code>、<code>getValue</code>、<code>setValue</code>の演算子関数については、<a href="/ja/kotlin/delegated-properties">プロパティ委譲</a>で説明されています。</p><h2 id="名前付き関数の中置呼び出し" tabindex="-1">名前付き関数の中置呼び出し <a class="header-anchor" href="#名前付き関数の中置呼び出し" aria-label="Permalink to &quot;名前付き関数の中置呼び出し&quot;">​</a></h2><p><a href="/ja/kotlin/functions#infix-notation">中置記法</a>を使用することで、カスタムの中置演算をシミュレートできます。</p>`,56)]))}const E=t(d,[["render",o]]);export{k as __pageData,E as default};
