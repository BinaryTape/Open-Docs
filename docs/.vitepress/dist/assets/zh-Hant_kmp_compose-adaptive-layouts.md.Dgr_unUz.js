import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"自適應佈局","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/compose-adaptive-layouts.md","filePath":"zh-Hant/kmp/compose-adaptive-layouts.md","lastUpdated":1755516278000}'),p={name:"zh-Hant/kmp/compose-adaptive-layouts.md"};function l(t,s,h,o,d,k){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="自適應佈局" tabindex="-1">自適應佈局 <a class="header-anchor" href="#自適應佈局" aria-label="Permalink to &quot;自適應佈局&quot;">​</a></h1><p>為了在所有類型的裝置上提供一致的使用者體驗，請將您應用程式的 UI 調整為不同的顯示尺寸、方向和輸入模式。</p><h2 id="設計自適應佈局" tabindex="-1">設計自適應佈局 <a class="header-anchor" href="#設計自適應佈局" aria-label="Permalink to &quot;設計自適應佈局&quot;">​</a></h2><p>設計自適應佈局時，請遵循以下主要準則：</p><ul><li>優先選擇 <a href="https://developer.android.com/develop/ui/compose/layouts/adaptive/canonical-layouts" target="_blank" rel="noreferrer">典範佈局</a> 模式，例如清單-詳細資訊、訊息流和輔助窗格。</li><li>透過重複使用共用樣式（如邊距、排版和其他設計元素）來保持一致性。在遵循平台特定準則的同時，在不同裝置上保持導覽模式一致。</li><li>將複雜的佈局分解為可重複使用的 composable，以提高彈性和模組化。</li><li>調整螢幕密度和方向。</li></ul><h2 id="使用視窗尺寸類別" tabindex="-1">使用視窗尺寸類別 <a class="header-anchor" href="#使用視窗尺寸類別" aria-label="Permalink to &quot;使用視窗尺寸類別&quot;">​</a></h2><p>視窗尺寸類別是預定義的閾值，也稱為斷點，用於分類不同的螢幕尺寸，幫助您設計、開發和測試自適應佈局。</p><p>視窗尺寸類別將您應用程式可用的顯示區域分為寬度和高度的三個類別：<code>compact</code>、<code>medium</code> 和 <code>expanded</code>。當您進行佈局變更時，請測試所有視窗尺寸下的佈局行為，特別是在不同的斷點閾值處。</p><p>要使用 <code>WindowSizeClass</code> 類別，請將 <code>material3.adaptive</code> 依賴項新增到您模組的 <code>build.gradle.kts</code> 檔案中的 <code>commonMain</code> 原始碼集中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3.adaptive:adaptive:1.2.0-alpha05&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>WindowSizeClass</code> API 允許您根據可用的顯示空間變更應用程式的佈局。例如，您可以根據視窗高度管理頂部應用程式列的顯示狀態：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    windowSizeClass: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WindowSizeClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> currentWindowAdaptiveInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().windowSizeClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 判斷是否應顯示頂部應用程式列</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showTopAppBar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowSizeClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isHeightAtLeastBreakpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WindowSizeClass.HEIGHT_DP_MEDIUM_LOWER_BOUND)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用列的顯示狀態來定義 UI </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MyScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        showTopAppBar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showTopAppBar,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="接下來" tabindex="-1">接下來 <a class="header-anchor" href="#接下來" aria-label="Permalink to &quot;接下來&quot;">​</a></h2><p>在 <a href="https://developer.android.com/develop/ui/compose/layouts/adaptive" target="_blank" rel="noreferrer">Jetpack Compose 文件</a> 中了解更多關於自適應佈局的資訊。</p>`,14)]))}const E=a(p,[["render",l]]);export{c as __pageData,E as default};
