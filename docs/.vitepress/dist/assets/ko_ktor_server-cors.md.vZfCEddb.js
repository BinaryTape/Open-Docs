import{_ as g,C as e,c as u,o as y,G as t,j as i,ag as F,w as n,a}from"./chunks/framework.Bksy39di.js";const H=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-cors.md","filePath":"ko/ktor/server-cors.md","lastUpdated":1755457140000}'),C={name:"ko/ktor/server-cors.md"};function v(m,s,b,f,B,q){const o=e("TopicTitle"),r=e("show-structure"),d=e("primary-label"),h=e("Links"),E=e("tldr"),l=e("code-block"),p=e("TabItem"),k=e("Tabs"),c=e("list");return y(),u("div",null,[t(o,{labelRef:"server-plugin",title:"CORS"}),t(r,{for:"chapter",depth:"2"}),t(d,{ref:"server-plugin"},null,512),t(E,null,{default:n(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"필수 종속성"),a(": "),i("code",null,"io.ktor:ktor-server-cors")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"코드 예시"),a(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/cors"}," cors ")],-1)),i("p",null,[i("b",null,[t(h,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임 또는 가상 머신 없이 서버를 실행할 수 있게 합니다."},{default:n(()=>s[0]||(s[0]=[a("네이티브 서버")])),_:1}),s[1]||(s[1]=a(" 지원"))]),s[2]||(s[2]=a(": ✅ "))])]),_:1}),s[17]||(s[17]=i("p",null,[a("서버가 "),i("a",{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",target:"_blank",rel:"noreferrer"},"교차 출처 요청"),a("을 처리해야 하는 경우, "),i("a",{href:"https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-cors/io.ktor.server.plugins.cors.routing/-c-o-r-s.html",target:"_blank",rel:"noreferrer"},"CORS"),a(" Ktor 플러그인을 설치하고 구성해야 합니다. 이 플러그인을 사용하면 허용된 호스트, HTTP 메서드, 클라이언트가 설정한 헤더 등을 구성할 수 있습니다.")],-1)),s[18]||(s[18]=i("h2",{id:"add_dependencies",tabindex:"-1"},[a("종속성 추가 "),i("a",{class:"header-anchor",href:"#add_dependencies","aria-label":'Permalink to "종속성 추가 {id="add_dependencies"}"'},"​")],-1)),s[19]||(s[19]=i("p",null,[i("code",null,"CORS"),a("을(를) 사용하려면 빌드 스크립트에 "),i("code",null,"ktor-server-cors"),a(" 아티팩트를 포함해야 합니다: ")],-1)),t(k,{group:"languages"},{default:n(()=>[t(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-cors:$ktor_version")'})]),_:1}),t(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-cors:$ktor_version"'})]),_:1}),t(p,{title:"Maven","group-key":"maven"},{default:n(()=>[t(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-cors-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[20]||(s[20]=i("h2",{id:"install_plugin",tabindex:"-1"},[a("CORS 설치 "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "CORS 설치 {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[6]||(s[6]=a(" 애플리케이션에 ")),s[7]||(s[7]=i("code",null,"CORS",-1)),s[8]||(s[8]=a(" 플러그인을 ")),s[9]||(s[9]=i("a",{href:"#install"},"설치",-1)),s[10]||(s[10]=a("하려면, 지정된 ")),t(h,{href:"/ktor/server-modules",summary:"모듈을 사용하면 경로를 그룹화하여 애플리케이션을 구성할 수 있습니다."},{default:n(()=>s[5]||(s[5]=[a("모듈")])),_:1}),s[11]||(s[11]=a("의 ")),s[12]||(s[12]=i("code",null,"install",-1)),s[13]||(s[13]=a(" 함수에 플러그인을 전달합니다. 다음 코드 스니펫은 ")),s[14]||(s[14]=i("code",null,"CORS",-1)),s[15]||(s[15]=a("을(를) 설치하는 방법을 보여줍니다... "))]),t(c,null,{default:n(()=>s[16]||(s[16]=[i("li",null,[a(" ... "),i("code",null,"embeddedServer"),a(" 함수 호출 내부. ")],-1),i("li",null,[a(" ... "),i("code",null,"Application"),a(" 클래스의 확장 함수로 명시적으로 정의된 "),i("code",null,"module"),a(" 내부. ")],-1)])),_:1}),t(k,null,{default:n(()=>[t(p,{title:"embeddedServer"},{default:n(()=>[t(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.cors.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(CORS)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),t(p,{title:"module"},{default:n(()=>[t(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.cors.*
            // ...
            fun Application.module() {
                install(CORS)
                // ...
            }`})]),_:1})]),_:1}),s[21]||(s[21]=F(`<p><code>CORS</code> 플러그인은 <a href="#install-route">특정 라우트에 설치</a>할 수도 있습니다. 이는 애플리케이션의 다양한 리소스에 대해 다른 <code>CORS</code> 구성이 필요한 경우 유용할 수 있습니다. </p><blockquote><p>특정 라우트에 <code>CORS</code> 플러그인을 설치하는 경우, 해당 라우트에 <code>options</code> <a href="./server-routing#define_route">핸들러</a>를 추가해야 합니다. 이를 통해 Ktor는 CORS 프리플라이트 요청에 올바르게 응답할 수 있습니다.</p></blockquote><h2 id="configure" tabindex="-1">CORS 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;CORS 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><p>CORS 관련 구성 설정은 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-cors/io.ktor.server.plugins.cors/-c-o-r-s-config/index.html" target="_blank" rel="noreferrer">CORSConfig</a> 클래스에서 제공됩니다. 이러한 설정을 구성하는 방법을 살펴보겠습니다.</p><h3 id="overview" tabindex="-1">개요 <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;개요 {id=&quot;overview&quot;}&quot;">​</a></h3><p><code>8080</code> 포트에서 수신 대기하며 <code>/customer</code> <a href="./server-routing">라우트</a>가 <a href="./server-serialization#send_data">JSON</a> 데이터를 응답하는 서버가 있다고 가정해 봅시다. 아래 코드 스니펫은 다른 포트에서 실행 중인 클라이언트가 Fetch API를 사용하여 교차 출처 요청을 수행하는 샘플 요청을 보여줍니다:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> saveCustomer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://0.0.0.0:8080/customer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &#39;Accept&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, firstName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lastName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Brains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Success:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Error:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>백엔드에서 이러한 요청을 허용하려면 다음과 같이 <code>CORS</code> 플러그인을 구성해야 합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.0.0:8081&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.ContentType)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>전체 예시는 다음에서 찾을 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/cors" target="_blank" rel="noreferrer">cors</a>.</p><h3 id="hosts" tabindex="-1">호스트 <a class="header-anchor" href="#hosts" aria-label="Permalink to &quot;호스트 {id=&quot;hosts&quot;}&quot;">​</a></h3><p>교차 출처 요청을 할 수 있는 허용된 호스트를 지정하려면 <code>allowHost</code> 함수를 사용합니다. 호스트 이름 외에 포트 번호, 서브 도메인 목록 또는 지원되는 HTTP 스키마를 지정할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;client-host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;client-host:8081&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;client-host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, subDomains </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;de&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;client-host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, schemes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>어떤 호스트에서든 교차 출처 요청을 허용하려면 <code>anyHost</code> 함수를 사용합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    anyHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="methods" tabindex="-1">HTTP 메서드 <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;HTTP 메서드 {id=&quot;methods&quot;}&quot;">​</a></h3><p>기본적으로 <code>CORS</code> 플러그인은 <code>GET</code>, <code>POST</code> 및 <code>HEAD</code> HTTP 메서드를 허용합니다. 추가 메서드를 추가하려면 <code>allowMethod</code> 함수를 사용합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpMethod.Options)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpMethod.Put)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpMethod.Patch)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpMethod.Delete)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="headers" tabindex="-1">헤더 허용 <a class="header-anchor" href="#headers" aria-label="Permalink to &quot;헤더 허용 {id=&quot;headers&quot;}&quot;">​</a></h3><p>기본적으로 <code>CORS</code> 플러그인은 <code>Access-Control-Allow-Headers</code>에 의해 관리되는 다음 클라이언트 헤더를 허용합니다:</p><ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li></ul><p>추가 헤더를 허용하려면 <code>allowHeader</code> 함수를 사용합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.ContentType)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.Authorization)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>사용자 정의 헤더를 허용하려면 <code>allowHeaders</code> 또는 <code>allowHeadersPrefixed</code> 함수를 사용합니다. 예를 들어, 아래 코드 스니펫은 <code>custom-</code>으로 시작하는 헤더를 허용하는 방법을 보여줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHeadersPrefixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><code>allowHeaders</code> 또는 <code>allowHeadersPrefixed</code>는 비단순(non-simple) 콘텐츠 타입에 대해 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-cors/io.ktor.server.plugins.cors/-c-o-r-s-config/allow-non-simple-content-types.html" target="_blank" rel="noreferrer">allowNonSimpleContentTypes</a> 속성을 <code>true</code>로 설정해야 합니다.</p></blockquote><h3 id="expose-headers" tabindex="-1">헤더 노출 <a class="header-anchor" href="#expose-headers" aria-label="Permalink to &quot;헤더 노출 {id=&quot;expose-headers&quot;}&quot;">​</a></h3><p><code>Access-Control-Expose-Headers</code> 헤더는 브라우저의 JavaScript가 액세스할 수 있는 허용 목록에 지정된 헤더를 추가합니다. 이러한 헤더를 구성하려면 <code>exposeHeader</code> 함수를 사용합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exposeHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;X-My-Custom-Header&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exposeHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;X-Another-Custom-Header&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="credentials" tabindex="-1">자격 증명 <a class="header-anchor" href="#credentials" aria-label="Permalink to &quot;자격 증명 {id=&quot;credentials&quot;}&quot;">​</a></h3><p>기본적으로 브라우저는 교차 출처 요청 시 자격 증명 정보(예: 쿠키 또는 인증 정보)를 전송하지 않습니다. 이 정보를 전달할 수 있도록 하려면 <code>allowCredentials</code> 속성을 사용하여 <code>Access-Control-Allow-Credentials</code> 응답 헤더를 <code>true</code>로 설정합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    allowCredentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="misc" tabindex="-1">기타 <a class="header-anchor" href="#misc" aria-label="Permalink to &quot;기타 {id=&quot;misc&quot;}&quot;">​</a></h3><p><code>CORS</code> 플러그인을 사용하면 다른 CORS 관련 설정도 지정할 수 있습니다. 예를 들어, <code>maxAgeInSeconds</code>를 사용하여 프리플라이트 요청에 대한 응답이 다음 프리플라이트 요청을 보내지 않고 얼마나 오래 캐시될 수 있는지 지정할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    maxAgeInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3600</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>다른 구성 옵션은 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-cors/io.ktor.server.plugins.cors/-c-o-r-s-config/index.html" target="_blank" rel="noreferrer">CORSConfig</a>에서 확인할 수 있습니다.</p>`,36))])}const O=g(C,[["render",v]]);export{H as __pageData,O as default};
