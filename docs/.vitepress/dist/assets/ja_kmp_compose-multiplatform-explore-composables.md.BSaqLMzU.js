import{_ as k}from"./chunks/icon-1-done.B5D6C9SU.js";import{_ as o}from"./chunks/icon-2.D_3lm1kb.js";import{_ as r}from"./chunks/icon-3-todo.aEuKIG4W.js";import{_ as d}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as E,C as l,c,o as g,j as i,G as n,ag as y,a,w as e}from"./chunks/framework.Bksy39di.js";const w=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-multiplatform-explore-composables.md","filePath":"ja/kmp/compose-multiplatform-explore-composables.md","lastUpdated":1755516278000}'),m={name:"ja/kmp/compose-multiplatform-explore-composables.md"};function u(F,s,C,b,f,A){const t=l("secondary-label"),p=l("Links"),h=l("tldr");return g(),c("div",null,[s[18]||(s[18]=i("h1",{id:"コンポーザブルコードの探索",tabindex:"-1"},[a("コンポーザブルコードの探索 "),i("a",{class:"header-anchor",href:"#コンポーザブルコードの探索","aria-label":'Permalink to "コンポーザブルコードの探索"'},"​")],-1)),n(t,{ref:"IntelliJ IDEA"},null,512),n(t,{ref:"Android Studio"},null,512),n(h,null,{default:e(()=>[s[15]||(s[15]=i("p",null,"このチュートリアルではIntelliJ IDEAを使用していますが、Android Studioでも同様に進めることができます。両方のIDEは同じコア機能とKotlin Multiplatformのサポートを共有しています。",-1)),s[16]||(s[16]=i("br",null,null,-1)),s[17]||(s[17]=i("p",null,[a("これは「"),i("strong",null,"共有ロジックとUIを持つCompose Multiplatformアプリを作成する"),a("」チュートリアルの第2部です。続行する前に、前の手順を完了していることを確認してください。")],-1)),i("p",null,[s[1]||(s[1]=i("img",{src:k,width:"20",alt:"First step"},null,-1)),s[2]||(s[2]=a()),n(p,{href:"/kmp/compose-multiplatform-create-first-app",summary:"This tutorial uses IntelliJ IDEA, but you can also follow it in Android Studio – both IDEs share the same core functionality and Kotlin Multiplatform support. This is the first part of the Create a Compose Multiplatform app with shared logic and UI tutorial. Create your Compose Multiplatform app Explore composable code Modify the project Create your own application"},{default:e(()=>s[0]||(s[0]=[a("Compose Multiplatformアプリを作成する")])),_:1}),s[3]||(s[3]=i("br",null,null,-1)),s[4]||(s[4]=i("img",{src:o,width:"20",alt:"Second step"},null,-1)),s[5]||(s[5]=a()),s[6]||(s[6]=i("strong",null,"コンポーザブルコードの探索",-1)),s[7]||(s[7]=i("br",null,null,-1)),s[8]||(s[8]=i("img",{src:r,width:"20",alt:"Third step"},null,-1)),s[9]||(s[9]=a(" プロジェクトを変更する")),s[10]||(s[10]=i("br",null,null,-1)),s[11]||(s[11]=i("br",null,null,-1)),s[12]||(s[12]=i("img",{src:d,width:"20",alt:"Fourth step"},null,-1)),s[13]||(s[13]=a(" 独自のアプリケーションを作成する")),s[14]||(s[14]=i("br",null,null,-1))])]),_:1}),s[19]||(s[19]=y(`<p>Kotlin Multiplatformウィザードによって作成されたサンプルコンポーザブルを詳しく見てみましょう。まず、共通UIを実装し、すべてのプラットフォームで使用できるコンポーザブルな<code>App()</code>関数があります。次に、各プラットフォームでこのUIを起動するプラットフォーム固有のコードがあります。</p><h2 id="コンポーザブル関数の実装" tabindex="-1">コンポーザブル関数の実装 <a class="header-anchor" href="#コンポーザブル関数の実装" aria-label="Permalink to &quot;コンポーザブル関数の実装&quot;">​</a></h2><p><code>composeApp/src/commonMain/kotlin/App.kt</code>ファイルで、<code>App()</code>関数を見てみましょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">safeContentPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">showContent }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click me!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      AnimatedVisibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(showContent) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.drawable.compose_multiplatform), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Compose: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$greeting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>App()</code>関数は、<code>@Composable</code>でアノテーションされた通常のKotlin関数です。これらの種類の関数は、_コンポーザブル関数_または単に_コンポーザブル_と呼ばれます。それらはCompose Multiplatformに基づいたUIの構成要素です。</p><p>コンポーザブル関数には、次の一般的な構造があります。</p><ul><li><code>MaterialTheme</code>はアプリケーションの外観を設定します。デフォルト設定はカスタマイズできます。たとえば、色、形状、タイポグラフィを選択できます。</li><li><code>Column</code>コンポーザブルはアプリケーションのレイアウトを制御します。ここでは、<code>AnimatedVisibility</code>コンポーザブルの上に<code>Button</code>を表示します。</li><li><code>Button</code>は<code>Text</code>コンポーザブルを含み、いくつかのテキストをレンダリングします。</li><li><code>AnimatedVisibility</code>はアニメーションを使用して<code>Image</code>を表示および非表示にします。</li><li><code>painterResource</code>はXMLリソースに格納されているベクターアイコンをロードします。</li></ul><p><code>Column</code>の<code>horizontalAlignment</code>パラメーターは、そのコンテンツを中央に配置します。しかし、これが効果を発揮するには、カラムがそのコンテナの全幅を占める必要があります。これは<code>modifier</code>パラメーターを使用して実現されます。</p><p>モディファイアはCompose Multiplatformの主要なコンポーネントです。これは、UI内のコンポーザブルの表示や動作を調整するために使用する主要なメカニズムです。モディファイアは<code>Modifier</code>型のメソッドを使用して作成されます。これらのメソッドをチェーンすると、各呼び出しは前の呼び出しから返された<code>Modifier</code>を変更できるため、順序が重要になります。 詳細については、<a href="https://developer.android.com/jetpack/compose/modifiers" target="_blank" rel="noreferrer">JetPack Composeドキュメント</a>を参照してください。</p><h3 id="状態の管理" tabindex="-1">状態の管理 <a class="header-anchor" href="#状態の管理" aria-label="Permalink to &quot;状態の管理&quot;">​</a></h3><p>サンプルコンポーザブルの最後の側面は、状態の管理方法です。<code>App</code>コンポーザブルの<code>showContent</code>プロパティは、<code>mutableStateOf()</code>関数を使用して構築されます。これは、監視可能な状態オブジェクトであることを意味します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span></code></pre></div><p>状態オブジェクトは<code>remember()</code>関数への呼び出しでラップされており、これは一度構築され、その後フレームワークによって保持されることを意味します。これを実行することで、値がブール値を含む状態オブジェクトであるプロパティを作成します。フレームワークはこの状態オブジェクトをキャッシュし、コンポーザブルがそれを監視できるようにします。</p><p>状態の値が変更されると、それを監視するすべてのコンポーザブルが再呼び出しされます。これにより、それらが生成するウィジェットが再描画されることになります。これは_リコンポジション_と呼ばれます。</p><p>アプリケーションでは、状態が変更される唯一の場所はボタンのクリックイベント内です。<code>onClick</code>イベントハンドラは<code>showContent</code>プロパティの値を反転させます。結果として、親の<code>AnimatedVisibility</code>コンポーザブルが<code>showContent</code>を監視しているため、画像が<code>Greeting().greet()</code>の呼び出しとともに表示または非表示になります。</p><h2 id="異なるプラットフォームでのuiの起動" tabindex="-1">異なるプラットフォームでのUIの起動 <a class="header-anchor" href="#異なるプラットフォームでのuiの起動" aria-label="Permalink to &quot;異なるプラットフォームでのUIの起動&quot;">​</a></h2><p><code>App()</code>関数の実行はプラットフォームごとに異なります。Androidではアクティビティによって管理され、iOSではビューコントローラによって、デスクトップではウィンドウによって、ウェブではコンテナによって管理されます。それぞれを調べてみましょう。</p><h3 id="androidの場合" tabindex="-1">Androidの場合 <a class="header-anchor" href="#androidの場合" aria-label="Permalink to &quot;Androidの場合&quot;">​</a></h3><p>Androidの場合、<code>composeApp/src/androidMain/kotlin</code>にある<code>MainActivity.kt</code>ファイルを開きます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        enableEdgeToEdge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これは<code>App</code>コンポーザブルを呼び出す<a href="https://developer.android.com/guide/components/activities/intro-activities" target="_blank" rel="noreferrer">Androidアクティビティ</a>である<code>MainActivity</code>です。</p><h3 id="iosの場合" tabindex="-1">iOSの場合 <a class="header-anchor" href="#iosの場合" aria-label="Permalink to &quot;iOSの場合&quot;">​</a></h3><p>iOSの場合、<code>composeApp/src/iosMain/kotlin</code>にある<code>MainViewController.kt</code>ファイルを開きます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span></code></pre></div><p>これは、Androidのアクティビティと同じ役割を果たす<a href="https://developer.apple.com/documentation/uikit/view_controllers" target="_blank" rel="noreferrer">ビューコントローラ</a>です。iOSとAndroidの両方のタイプが単に<code>App</code>コンポーザブルを呼び出していることに注目してください。</p><h3 id="デスクトップの場合" tabindex="-1">デスクトップの場合 <a class="header-anchor" href="#デスクトップの場合" aria-label="Permalink to &quot;デスクトップの場合&quot;">​</a></h3><p>デスクトップの場合、<code>composeApp/src/desktopMain/kotlin</code>にある<code>main()</code>関数を見てください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onCloseRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exitApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ComposeDemo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>ここで、<code>application()</code>関数は新しいデスクトップアプリケーションを起動します。</li><li>この関数はラムダを受け取り、そこでUIを初期化します。通常、<code>Window</code>を作成し、ウィンドウが閉じられたときにプログラムがどのように反応すべきかを指示するプロパティと命令を指定します。このケースでは、アプリケーション全体がシャットダウンします。</li><li>このウィンドウ内にコンテンツを配置できます。AndroidやiOSと同様に、唯一のコンテンツは<code>App()</code>関数です。</li></ul><p>現在、<code>App</code>関数はパラメーターを宣言していません。大規模なアプリケーションでは、通常、プラットフォーム固有の依存関係にパラメーターを渡します。これらの依存関係は手動で作成することも、依存性注入ライブラリを使用することもできます。</p><h3 id="ウェブの場合" tabindex="-1">ウェブの場合 <a class="header-anchor" href="#ウェブの場合" aria-label="Permalink to &quot;ウェブの場合&quot;">​</a></h3><p><code>composeApp/src/wasmJsMain/kotlin/main.kt</code>ファイルで、<code>main()</code>関数を見てみましょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalComposeUiApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ComposeViewport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>@OptIn(ExperimentalComposeUiApi::class)</code>アノテーションは、実験的としてマークされており、将来のリリースで変更される可能性があるAPIを使用していることをコンパイラに伝えます。</li><li><code>ComposeViewport()</code>関数は、アプリケーションのCompose環境を設定します。</li><li>Webアプリは、<code>ComposeViewport</code>関数のパラメーターとして指定されたコンテナに挿入されます。この例では、ドキュメントのボディ全体がコンテナとして機能します。</li><li><code>App()</code>関数は、Jetpack Composeを使用してアプリケーションのUIコンポーネントを構築する役割を担います。</li></ul><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>チュートリアルの次のパートでは、プロジェクトに依存関係を追加し、ユーザーインターフェースを変更します。</p><p><strong><a href="./compose-multiplatform-modify-project">次のパートに進む</a></strong></p><h2 id="ヘルプ" tabindex="-1">ヘルプ <a class="header-anchor" href="#ヘルプ" aria-label="Permalink to &quot;ヘルプ&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>。招待状を<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">入手</a>して、<a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a>チャンネルに参加してください。</li><li><strong>Kotlinイシュートラッカー</strong>。<a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">新しいイシューを報告</a>してください。</li></ul>`,39))])}const I=E(m,[["render",u]]);export{w as __pageData,I as default};
