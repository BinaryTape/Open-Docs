import{_ as h,a as r,b as o,c as d}from"./chunks/test-failed.BxM9HXpM.js";import{_ as E}from"./chunks/create-test.CrrH3ADr.js";import{_ as g,C as p,c,o as u,ag as k,j as s,a as i,G as t,w as l}from"./chunks/framework.Bksy39di.js";const D=JSON.parse('{"title":"JVMでのJUnitを使ったテストコード – チュートリアル","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/jvm-test-using-junit.md","filePath":"ja/kotlin/jvm-test-using-junit.md","lastUpdated":1754307826000}'),y={name:"ja/kotlin/jvm-test-using-junit.md"};function F(m,a,C,b,v,f){const n=p("tab"),e=p("tabs");return u(),c("div",null,[a[8]||(a[8]=k('<h1 id="jvmでのjunitを使ったテストコード-–-チュートリアル" tabindex="-1">JVMでのJUnitを使ったテストコード – チュートリアル <a class="header-anchor" href="#jvmでのjunitを使ったテストコード-–-チュートリアル" aria-label="Permalink to &quot;JVMでのJUnitを使ったテストコード – チュートリアル&quot;">​</a></h1><p>このチュートリアルでは、Kotlin/JVMプロジェクトでシンプルな単体テストを書き、Gradleビルドツールを使って実行する方法を紹介します。</p><p>このプロジェクトでは、<a href="https://kotlinlang.org/api/latest/kotlin.test/index.html" target="_blank" rel="noreferrer"><code>kotlin.test</code></a>ライブラリを使用し、JUnitを使ってテストを実行します。 マルチプラットフォームアプリを開発している場合は、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-run-tests.html" target="_blank" rel="noreferrer">Kotlin Multiplatformチュートリアル</a>を参照してください。</p><p>開始するには、まず<a href="https://www.jetbrains.com/idea/download/index.html" target="_blank" rel="noreferrer">IntelliJ IDEA</a>の最新バージョンをダウンロードしてインストールしてください。</p><h2 id="依存関係の追加" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#依存関係の追加" aria-label="Permalink to &quot;依存関係の追加&quot;">​</a></h2>',5)),s("ol",null,[a[7]||(a[7]=s("li",null,[s("p",null,[i("IntelliJ IDEAでKotlinプロジェクトを開きます。プロジェクトがない場合は、 "),s("a",{href:"https://www.jetbrains.com/help/idea/create-your-first-kotlin-app.html#create-project",target:"_blank",rel:"noreferrer"},"作成してください"),i("。")])],-1)),s("li",null,[a[2]||(a[2]=s("p",null,[s("code",null,"build.gradle(.kts)"),i("ファイルを開き、"),s("code",null,"testImplementation"),i("依存関係が存在することを確認します。 この依存関係により、"),s("code",null,"kotlin.test"),i("と"),s("code",null,"JUnit"),i("を操作できるようになります。")],-1)),t(e,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[0]||(a[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // Other dependencies.")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    testImplementation"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"test"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[1]||(a[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // Other dependencies.")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    testImplementation "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin:kotlin-test'")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),s("li",null,[a[5]||(a[5]=s("p",null,[s("code",null,"build.gradle(.kts)"),i("ファイルに"),s("code",null,"test"),i("タスクを追加します。")],-1)),t(e,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[3]||(a[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"test"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    useJUnitPlatform"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[4]||(a[4]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"test {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    useJUnitPlatform()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[6]||(a[6]=s("div",{class:"note custom-block"},[s("p",{class:"custom-block-title"},"NOTE"),s("p",null,[i("ビルドスクリプトで"),s("code",null,"useJUnitPlatform()"),i("関数を使用すると、 "),s("code",null,"kotlin-test"),i("ライブラリは自動的にJUnit 5を依存関係として含めます。 この設定により、JVM専用プロジェクトおよびKotlin Multiplatform (KMP) プロジェクトのJVMテストで、 "),s("code",null,"kotlin-test"),i(" APIとともにすべてのJUnit 5 APIにアクセスできるようになります。")])],-1))])]),a[9]||(a[9]=k(`<p>以下は<code>build.gradle.kts</code>の完全なコードです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.2.10&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0-SNAPSHOT&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    useJUnitPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="テストするコードの追加" tabindex="-1">テストするコードの追加 <a class="header-anchor" href="#テストするコードの追加" aria-label="Permalink to &quot;テストするコードの追加&quot;">​</a></h2><ol><li><p><code>src/main/kotlin</code>内の<code>Main.kt</code>ファイルを開きます。</p><p><code>src</code>ディレクトリにはKotlinのソースファイルとリソースが含まれています。 <code>Main.kt</code>ファイルには<code>Hello, World!</code>を出力するサンプルコードが含まれています。</p></li><li><p>2つの整数を合計する<code>sum()</code>関数を持つ<code>Sample</code>クラスを作成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="テストの作成" tabindex="-1">テストの作成 <a class="header-anchor" href="#テストの作成" aria-label="Permalink to &quot;テストの作成&quot;">​</a></h2><ol><li><p>IntelliJ IDEAで、<code>Sample</code>クラスに対して<strong>Code</strong> | <strong>Generate</strong> | **Test...**を選択します。</p><p><img src="`+h+'" alt="Generate a test"></p></li><li><p>テストクラスの名前を指定します。例えば、<code>SampleTest</code>です。</p><p><img src="'+E+`" alt="Create a test"></p><p>IntelliJ IDEAは<code>test</code>ディレクトリに<code>SampleTest.kt</code>ファイルを作成します。 このディレクトリにはKotlinのテストソースファイルとリソースが含まれています。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>src/test/kotlin</code>にテスト用の<code>*.kt</code>ファイルを自分で作成することもできます。</p></div></li><li><p><code>SampleTest.kt</code>に<code>sum()</code>関数のテストコードを追加します。</p><ul><li><a href="https://kotlinlang.org/api/latest/kotlin.test/-test/index.html" target="_blank" rel="noreferrer"><code>@Test</code>アノテーション</a>を使用して、テスト<code>testSum()</code>関数を定義します。</li><li><a href="https://kotlinlang.org/api/latest/kotlin.test/kotlin.test/assert-equals.html" target="_blank" rel="noreferrer"><code>assertEquals()</code></a>関数を使用して、<code>sum()</code>関数が期待される値を返すことを確認します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example.Sample</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.jupiter.api.Assertions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.test.Test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SampleTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testSample: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sample</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expected </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expected, testSample.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="テストの実行" tabindex="-1">テストの実行 <a class="header-anchor" href="#テストの実行" aria-label="Permalink to &quot;テストの実行&quot;">​</a></h2><ol><li><p>ガターアイコンを使用してテストを実行します。</p><p><img src="`+r+'" alt="Run the test"></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>./gradlew check</code>コマンドを使用して、コマンドラインインターフェース経由でプロジェクトのすべてのテストを実行することもできます。</p></div></li><li><p><strong>Run</strong>ツールウィンドウで結果を確認します。</p><p><img src="'+o+`" alt="Check the test result. The test passed successfully"></p><p>テスト関数は正常に実行されました。</p></li><li><p><code>expected</code>変数の値を43に変更して、テストが正しく動作することを確認します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expected </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 43</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expected, classForTesting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>再度テストを実行し、結果を確認します。</p><p><img src="`+d+'" alt="Check the test result. The test has failed"></p><p>テスト実行は失敗しました。</p></li></ol><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>最初のテストを終えたら、以下を行うことができます。</p><ul><li>他の<a href="https://kotlinlang.org/api/latest/kotlin.test/kotlin.test/" target="_blank" rel="noreferrer"><code>kotlin.test</code></a>関数を使用して、さらにテストを書くことができます。 例えば、<a href="https://kotlinlang.org/api/latest/kotlin.test/kotlin.test/assert-not-equals.html" target="_blank" rel="noreferrer"><code>assertNotEquals()</code></a>関数を使用します。</li><li><a href="/ja/kotlin/power-assert">Kotlin Power-assertコンパイラプラグイン</a>でテスト出力を改善します。 このプラグインは、テスト出力にコンテキスト情報を付加します。</li><li>KotlinとSpring Bootを使って<a href="/ja/kotlin/jvm-get-started-spring-boot">最初のサーバーサイドアプリケーションを作成します</a>。</li></ul>',11))])}const T=g(y,[["render",F]]);export{D as __pageData,T as default};
