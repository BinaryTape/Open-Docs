import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"KotlinマルチプラットフォームでのKSP","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/ksp-multiplatform.md","filePath":"ja/kotlin/ksp-multiplatform.md","lastUpdated":1754307826000}'),e={name:"ja/kotlin/ksp-multiplatform.md"};function l(p,s,k,h,o,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="kotlinマルチプラットフォームでのksp" tabindex="-1">KotlinマルチプラットフォームでのKSP <a class="header-anchor" href="#kotlinマルチプラットフォームでのksp" aria-label="Permalink to &quot;KotlinマルチプラットフォームでのKSP&quot;">​</a></h1><p>手っ取り早く始めるには、KSPプロセッサーを定義している<a href="https://github.com/google/ksp/tree/main/examples/multiplatform" target="_blank" rel="noreferrer">サンプルKotlinマルチプラットフォームプロジェクト</a>を参照してください。</p><p>KSP 1.0.1以降、マルチプラットフォームプロジェクトにKSPを適用する方法は、単一プラットフォームのJVMプロジェクトと同様です。主な違いは、依存関係に<code>ksp(...)</code>設定を記述する代わりに、コンパイル前にどのコンパイルターゲットがシンボル処理を必要とするかを指定するために、<code>add(ksp&lt;Target&gt;)</code>または<code>add(ksp&lt;SourceSet&gt;)</code>が使用される点です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.devtools.ksp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kspCommonMainMetadata&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:test-processor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kspJvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:test-processor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kspJvmTest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:test-processor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JVM用のテストソースセットがないため、何も行われません</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // kspLinuxX64が指定されていないため、Linux x64のメインソースセットに対する処理はありません</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // add(&quot;kspLinuxX64Test&quot;, project(&quot;:test-processor&quot;))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="コンパイルと処理" tabindex="-1">コンパイルと処理 <a class="header-anchor" href="#コンパイルと処理" aria-label="Permalink to &quot;コンパイルと処理&quot;">​</a></h2><p>マルチプラットフォームプロジェクトでは、Kotlinのコンパイルは各プラットフォームで複数回（<code>main</code>、<code>test</code>、またはその他のビルドフレーバー）行われることがあります。シンボル処理も同様です。Kotlinのコンパイルタスクがあり、対応する<code>ksp&lt;Target&gt;</code>または<code>ksp&lt;SourceSet&gt;</code>設定が指定されている場合、常にシンボル処理タスクが作成されます。</p><p>例えば、上記の<code>build.gradle.kts</code>では、<code>common/metadata</code>、<code>JVM main</code>、<code>Linux x64 main</code>、<code>Linux x64 test</code>の4つのコンパイルタスクがあり、<code>common/metadata</code>、<code>JVM main</code>、<code>Linux x64 test</code>の3つのシンボル処理タスクがあります。</p><h2 id="ksp-1-0-1以降でのksp-設定の回避" tabindex="-1">KSP 1.0.1以降でのksp(...)設定の回避 <a class="header-anchor" href="#ksp-1-0-1以降でのksp-設定の回避" aria-label="Permalink to &quot;KSP 1.0.1以降でのksp(...)設定の回避&quot;">​</a></h2><p>KSP 1.0.1より前では、<code>ksp(...)</code>設定は統一されたものが1つしか利用できませんでした。そのため、プロセッサーはすべてのコンパイルターゲットに適用されるか、まったく適用されないかのどちらかでした。<code>ksp(...)</code>設定は、従来の非マルチプラットフォームプロジェクトであっても、メインソースセットだけでなく、テストソースセットが存在する場合はそちらにも適用されることに注意してください。これはビルド時間への不要なオーバーヘッドをもたらしました。</p><p>KSP 1.0.1以降、上記の例に示すように、ターゲットごとの設定が提供されています。将来的には、</p><ol><li>マルチプラットフォームプロジェクトでは、<code>ksp(...)</code>設定は非推奨となり削除されます。</li><li>単一プラットフォームプロジェクトでは、<code>ksp(...)</code>設定はメインのデフォルトコンパイルにのみ適用されます。<code>test</code>のような他のターゲットは、プロセッサーを適用するために<code>kspTest(...)</code>を指定する必要があります。</li></ol><p>KSP 1.0.1以降、より効率的な動作に切り替えるための早期アクセスフラグ<code>-DallowAllTargetConfiguration=false</code>が提供されています。現在の動作がパフォーマンス上の問題を引き起こしている場合、ぜひお試しください。このフラグのデフォルト値は、KSP 2.0で<code>true</code>から<code>false</code>に反転されます。</p>`,12)]))}const c=i(e,[["render",l]]);export{E as __pageData,c as default};
