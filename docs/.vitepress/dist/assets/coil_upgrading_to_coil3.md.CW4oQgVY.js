import{_ as o,c,o as d,ag as a}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"升级到 Coil 3.x","description":"","frontmatter":{},"headers":[],"relativePath":"coil/upgrading_to_coil3.md","filePath":"coil/upgrading_to_coil3.md","lastUpdated":1753369988000}'),i={name:"coil/upgrading_to_coil3.md"};function r(l,e,t,n,s,m){return d(),c("div",null,e[0]||(e[0]=[a('<h1 id="升级到-coil-3-x" tabindex="-1">升级到 Coil 3.x <a class="header-anchor" href="#升级到-coil-3-x" aria-label="Permalink to &quot;升级到 Coil 3.x&quot;">​</a></h1><p>Coil 3 是 Coil 的下一个主要版本，它包含了多项重大改进：</p><ul><li>全面支持 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>，包括所有主要目标平台（Android、iOS、JVM、JS 和 <a href="/coil/sample/">WASM</a>）。</li><li>支持多种网络库（Ktor 和 OkHttp）。或者，如果您只需要加载本地/静态文件，Coil 也可以在没有网络依赖的情况下使用。</li><li>改进了 Compose <code>@Preview</code> 渲染，并通过 <code>LocalAsyncImagePreviewHandler</code> 支持自定义预览行为。</li><li>针对需要破坏现有行为的 bug 进行了重要修复（如下所述）。</li></ul><p>本文档提供了从 Coil 2 到 Coil 3 的主要变化概览，并重点介绍了所有破坏性或重要更改。它不涵盖每一个二进制不兼容的更改或小的行为变化。</p><p>在 Compose Multiplatform 项目中使用 Coil 3？请查看 <a href="https://github.com/coil-kt/coil/tree/3.x/samples/compose" target="_blank" rel="noreferrer"><code>samples</code></a> 仓库以获取示例。</p><h2 id="maven-坐标和包名" tabindex="-1">Maven 坐标和包名 <a class="header-anchor" href="#maven-坐标和包名" aria-label="Permalink to &quot;Maven 坐标和包名&quot;">​</a></h2><p>Coil 的 Maven 坐标已从 <code>io.coil-kt</code> 更新为 <code>io.coil-kt.coil3</code>，其包名已从 <code>coil</code> 更新为 <code>coil3</code>。这使得 Coil 3 可以与 Coil 2 并行运行，而不会出现二进制兼容性问题。例如，<code>io.coil-kt:coil:2.7.0</code> 现在是 <code>io.coil-kt.coil3:coil:3.0.0</code>。</p><p>为了与 Coroutines、Ktor 和 AndroidX 使用的命名约定保持一致，<code>coil-base</code> 和 <code>coil-compose-base</code> 工件已分别重命名为 <code>coil-core</code> 和 <code>coil-compose-core</code>。</p><h2 id="网络图片" tabindex="-1">网络图片 <a class="header-anchor" href="#网络图片" aria-label="Permalink to &quot;网络图片&quot;">​</a></h2><p><strong><code>coil-core</code> 不再默认支持从网络加载图片。</strong> <a href="./network">您必须添加对 Coil 某个网络工件的依赖。详见此处。</a>。进行此更改是为了让消费者可以使用不同的网络库，或者在应用不需要时避免网络依赖。</p><p>此外，缓存控制标头不再默认受尊重。详见 <a href="./network">此处</a>。</p><h2 id="多平台" tabindex="-1">多平台 <a class="header-anchor" href="#多平台" aria-label="Permalink to &quot;多平台&quot;">​</a></h2><p>Coil 3 现在是一个 Kotlin 多平台库，支持 Android、JVM、iOS、macOS、Javascript 和 WASM。</p><p>在 Android 上，Coil 使用标准图形类来渲染图片。在非 Android 平台上，Coil 使用 <a href="https://github.com/JetBrains/skiko" target="_blank" rel="noreferrer">Skiko</a> 来渲染图片。Skiko 是 JetBrains 开发的一组 Kotlin 绑定，它封装了由 Google 开发的 <a href="https://github.com/google/skia" target="_blank" rel="noreferrer">Skia</a> 图形引擎。</p><p>作为与 Android SDK 解耦的一部分，进行了一些 API 更改。值得注意的是：</p><ul><li><code>Drawable</code> 被自定义的 <code>Image</code> 接口取代。在 Android 上，使用 <code>Drawable.asImage()</code> 和 <code>Image.asDrawable(resources)</code> 在这些类之间进行转换。在非 Android 平台上，使用 <code>Bitmap.asImage()</code> 和 <code>Image.toBitmap()</code>。</li><li>Android 的 <code>android.net.Uri</code> 类用法被多平台 <code>coil3.Uri</code> 类取代。任何将 <code>android.net.Uri</code> 作为 <code>ImageRequest.data</code> 传递的调用点不受影响。依赖于接收 <code>android.net.Uri</code> 的自定义 <code>Fetcher</code> 需要更新为使用 <code>coil3.Uri</code>。</li><li><code>Context</code> 的用法被 <code>PlatformContext</code> 取代。<code>PlatformContext</code> 在 Android 上是 <code>Context</code> 的类型别名，在非 Android 平台上可以使用 <code>PlatformContext.INSTANCE</code> 访问。在 Compose Multiplatform 中，使用 <code>LocalPlatformContext.current</code> 获取引用。</li><li><code>Coil</code> 类被重命名为 <code>SingletonImageLoader</code>。</li><li>如果您在自定义的 Android <code>Application</code> 类中实现了 <code>ImageLoaderFactory</code>，则需要切换为实现 <code>SingletonImageLoader.Factory</code> 来替代 <code>ImageLoaderFactory</code>。一旦您实现了 <code>SingletonImageLoader.Factory</code>，如果需要或希望覆盖 <code>newImageLoader()</code>，您就可以这么做。</li></ul><p>多平台支持 <code>coil-svg</code> 工件，但 <code>coil-gif</code> 和 <code>coil-video</code> 工件目前仍仅限 Android 使用，因为它们依赖于特定的 Android 解码器和库。</p><h2 id="compose" tabindex="-1">Compose <a class="header-anchor" href="#compose" aria-label="Permalink to &quot;Compose&quot;">​</a></h2><p><code>coil-compose</code> 工件的 API 大部分未变。您可以继续像 Coil 2 一样使用 <code>AsyncImage</code>、<code>SubcomposeAsyncImage</code> 和 <code>rememberAsyncImagePainter</code>。此外，这些方法已更新为 <a href="https://developer.android.com/jetpack/compose/performance/stability" target="_blank" rel="noreferrer">可重启和可跳过</a>，这应该会提高它们的性能。</p><ul><li><code>AsyncImagePainter.state</code> 现在是一个 <code>StateFlow</code>。应该使用 <code>val state = painter.state.collectAsState()</code> 来观察它。</li><li><code>AsyncImagePainter</code> 的默认 <code>SizeResolver</code> 不再等待第一次 <code>onDraw</code> 调用来获取画布的大小。相反，<code>AsyncImagePainter</code> 默认使用 <code>Size.ORIGINAL</code>。</li><li>Compose 的 <code>modelEqualityDelegate</code> 委托现在通过一个组合本地 <code>LocalAsyncImageModelEqualityDelegate</code> 设置，而不是作为 <code>AsyncImage</code>/<code>SubcomposeAsyncImage</code>/<code>rememberAsyncImagePainter</code> 的参数。</li></ul><h2 id="通用" tabindex="-1">通用 <a class="header-anchor" href="#通用" aria-label="Permalink to &quot;通用&quot;">​</a></h2><p>其他重要的行为更改包括：</p><ul><li>第一方 <code>Fetcher</code> 和 <code>Decoder</code>（例如 <code>NetworkFetcher.Factory</code>、<code>SvgDecoder</code> 等）现在通过服务加载器自动添加到每个新的 <code>ImageLoader</code> 中。此行为可以通过 <code>ImageLoader.Builder.serviceLoaderEnabled(false)</code> 禁用。</li><li>移除对 <code>android.resource://example.package.name/drawable/image</code> URI 的支持，因为它会阻止资源缩小优化。建议直接传递 <code>R.drawable.image</code> 值。传递资源 ID 而不是资源名称仍然有效：<code>android.resource://example.package.name/12345678</code>。如果您仍然需要其功能，可以 <a href="https://github.com/coil-kt/coil/blob/da7d872e340430014dbc5136e35eb62f9b17662e/coil-core/src/androidInstrumentedTest/kotlin/coil3/map/ResourceUriMapper.kt" target="_blank" rel="noreferrer">手动将 <code>ResourceUriMapper</code> 包含在您的组件注册表中</a>。</li><li>文件的最后写入时间戳不再默认添加到其缓存键中。这是为了避免在主线程上读取磁盘（即使时间很短）。可以通过 <code>ImageRequest.Builder.addLastModifiedToFileCacheKey(true)</code> 或 <code>ImageLoader.Builder.addLastModifiedToFileCacheKey(true)</code> 重新启用此功能。</li><li>输出图片尺寸现在被强制限制在 4096x4096 以下，以防止意外的内存溢出 (OOM)。这可以通过 <code>ImageLoader/ImageRequest.Builder.maxBitmapSize</code> 配置。要禁用此行为，请将 <code>maxBitmapSize</code> 设置为 <code>Size.ORIGINAL</code>。</li><li>Coil 2 的 <code>Parameters</code> API 已被 <code>Extras</code> 取代。<code>Extras</code> 不需要字符串键，而是依赖于身份相等性。<code>Extras</code> 不支持修改内存缓存键。相反，如果您的额外参数影响内存缓存键，请使用 <code>ImageRequest.memoryCacheKeyExtra</code>。</li><li>许多 <code>ImageRequest.Builder</code> 函数已移至扩展函数，以更方便地支持多平台。</li></ul>',23)]))}const u=o(i,[["render",r]]);export{g as __pageData,u as default};
