import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"Koin 注解中的作用域","description":"","frontmatter":{"title":"Koin 注解中的作用域"},"headers":[],"relativePath":"koin/reference/koin-annotations/scope.md","filePath":"koin/reference/koin-annotations/scope.md","lastUpdated":1748365453000}'),p={name:"koin/reference/koin-annotations/scope.md"};function t(l,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="koin-注解中的作用域" tabindex="-1">Koin 注解中的作用域 <a class="header-anchor" href="#koin-注解中的作用域" aria-label="Permalink to &quot;Koin 注解中的作用域&quot;">​</a></h1><p>在使用定义和模块时，你可能需要为特定的空间和时间解析定义作用域。</p><h2 id="使用-scope-定义作用域" tabindex="-1">使用 @Scope 定义作用域 <a class="header-anchor" href="#使用-scope-定义作用域" aria-label="Permalink to &quot;使用 @Scope 定义作用域&quot;">​</a></h2><p>Koin 允许使用作用域，有关其基础知识的更多详细信息，请参阅 <a href="/koin/reference/koin-core/scopes">Koin 作用域</a> 部分。</p><p>要使用注解声明作用域，只需在类上使用 <code>@Scope</code> 注解，如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopeClass</span></span></code></pre></div><blockquote><p>这等效于以下作用域段落：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></blockquote><p>此外，如果你更需要一个作用域名称而不是类型，你需要使用 <code>@Scope(name = )</code> 注解，并通过 <code>name</code> 参数来标记一个类：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopeClass</span></span></code></pre></div><blockquote><p>这等效于：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_scope_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;)&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></blockquote><h2 id="使用-scoped-在作用域中添加定义" tabindex="-1">使用 @Scoped 在作用域中添加定义 <a class="header-anchor" href="#使用-scoped-在作用域中添加定义" aria-label="Permalink to &quot;使用 @Scoped 在作用域中添加定义&quot;">​</a></h2><p>要在作用域内声明定义（无论是否使用注解定义），只需使用 <code>@Scope</code> 和 <code>@Scoped</code> 注解标记一个类：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopedComponent</span></span></code></pre></div><p>这将在作用域段落中生成正确的定义：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_scope_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;)&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  scoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>你需要这两个注解，以指示所需的作用域空间（通过 <code>@Scope</code>）以及要定义的组件类型（通过 <code>@Scoped</code>）。</p></div><h2 id="从作用域解析依赖" tabindex="-1">从作用域解析依赖 <a class="header-anchor" href="#从作用域解析依赖" aria-label="Permalink to &quot;从作用域解析依赖&quot;">​</a></h2><p>从一个作用域定义中，你可以解析你的内部作用域和父作用域中的任何定义。</p><p>例如，以下情况将起作用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySingle</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySingle : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MySingle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myOtherScopedComponent :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyOtherScopedComponent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyOtherScopedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySingle : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MySingle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>组件 <code>MySingle</code> 被定义为根作用域中的 <code>single</code> 定义。<code>MyScopedComponent</code> 和 <code>MyOtherScopedComponent</code> 定义在 &quot;my_scope_name&quot; 作用域中。 从 <code>MyScopedComponent</code> 解析依赖时，会通过 <code>MySingle</code> 实例访问 Koin 根作用域，并从当前 &quot;my_scope_name&quot; 作用域访问 <code>MyOtherScopedComponent</code> 的作用域实例。</p><h2 id="使用-scopeid-从作用域外部解析-自-1-3-0-起" tabindex="-1">使用 @ScopeId 从作用域外部解析 (自 1.3.0 起) <a class="header-anchor" href="#使用-scopeid-从作用域外部解析-自-1-3-0-起" aria-label="Permalink to &quot;使用 @ScopeId 从作用域外部解析 (自 1.3.0 起)&quot;">​</a></h2><p>你可能需要从另一个作用域解析组件，该作用域无法直接被你的作用域访问。为此，你需要使用 <code>@ScopeId</code> 注解标记你的依赖，以告知 Koin 在给定作用域 ID 的作用域中查找此依赖。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Factory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  @ScopeId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_scope_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myScopedComponent :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopedComponent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>以上代码等效于生成的：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Myfactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_scope_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) }</span></span></code></pre></div><p>此示例表明 <code>MyFactory</code> 组件将从 ID 为 &quot;my_scope_id&quot; 的作用域实例中解析 <code>MyScopedComponent</code> 组件。这个以 &quot;my_scope_id&quot; 为 ID 创建的作用域需要使用正确的作用域定义来创建。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>MyScopedComponent</code> 组件需要在作用域段落中定义，并且作用域实例需要以 &quot;my_scope_id&quot; 为 ID 创建。</p></div>`,28)]))}const g=i(p,[["render",t]]);export{r as __pageData,g as default};
