import{_ as a}from"./chunks/compose-1610-ios-magnifier.YMZtwDpq.js";import{_ as o,c as i,o as r,ag as l}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Compose Multiplatform 1.6.10 新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/whats-new-compose-1610.md","filePath":"zh-Hant/kmp/whats-new-compose-1610.md","lastUpdated":1755516278000}'),t={name:"zh-Hant/kmp/whats-new-compose-1610.md"};function s(n,e,p,c,d,h){return r(),i("div",null,e[0]||(e[0]=[l('<h1 id="compose-multiplatform-1-6-10-新功能" tabindex="-1">Compose Multiplatform 1.6.10 新功能 <a class="header-anchor" href="#compose-multiplatform-1-6-10-新功能" aria-label="Permalink to &quot;Compose Multiplatform 1.6.10 新功能&quot;">​</a></h1><p>以下是此功能版本的主要亮點：</p><ul><li><a href="#breaking-change-new-compose-compiler-gradle-plugin">破壞性變更：新的 Compose 編譯器 Gradle 外掛程式</a></li><li><a href="#support-for-multimodule-projects-with-compose-multiplatform-resources">支援具有 Compose Multiplatform 資源的多模組專案</a></li><li><a href="#experimental-navigation-library">實驗性導航函式庫</a></li><li><a href="#lifecycle-library">具實驗性通用 ViewModel 的生命週期函式庫</a></li><li><a href="#known-issue-missingresourceexception">已知問題：MissingResourceException</a></li></ul><p>請參閱此版本的完整變更列表 <a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/CHANGELOG#1610-may-2024">在 GitHub 上</a>。</p><h2 id="依賴項" tabindex="-1">依賴項 <a class="header-anchor" href="#依賴項" aria-label="Permalink to &quot;依賴項&quot;">​</a></h2><ul><li>Gradle 外掛程式 <code>org.jetbrains.compose</code>，版本 1.6.10。基於 Jetpack Compose 函式庫： <ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-compiler#1.5.14" target="_blank" rel="noreferrer">Compiler 1.5.14</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.6.7" target="_blank" rel="noreferrer">Runtime 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.6.7" target="_blank" rel="noreferrer">UI 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.6.7" target="_blank" rel="noreferrer">Foundation 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.6.7" target="_blank" rel="noreferrer">Material 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.2.1" target="_blank" rel="noreferrer">Material3 1.2.1</a></li></ul></li><li>生命週期函式庫 <code>org.jetbrains.androidx.lifecycle:lifecycle-*:2.8.0</code>。基於 <a href="https://developer.android.com/jetpack/androidx/releases/lifecycle#2.8.0" target="_blank" rel="noreferrer">Jetpack Lifecycle 2.8.0</a>。</li><li>導航函式庫 <code>org.jetbrains.androidx.navigation:navigation-*:2.7.0-alpha07</code>。基於 <a href="https://developer.android.com/jetpack/androidx/releases/navigation#2.7.7" target="_blank" rel="noreferrer">Jetpack Navigation 2.7.7</a>。</li></ul><h2 id="破壞性變更-新的-compose-編譯器-gradle-外掛程式" tabindex="-1">破壞性變更：新的 Compose 編譯器 Gradle 外掛程式 <a class="header-anchor" href="#破壞性變更-新的-compose-編譯器-gradle-外掛程式" aria-label="Permalink to &quot;破壞性變更：新的 Compose 編譯器 Gradle 外掛程式&quot;">​</a></h2><p>從 Kotlin 2.0.0 開始，Compose Multiplatform 需要新的 Compose 編譯器 Gradle 外掛程式。 請參閱 <a href="./compose-compiler#migrating-a-compose-multiplatform-project">遷移指南</a> 以獲取詳細資訊。</p><h2 id="跨平台" tabindex="-1">跨平台 <a class="header-anchor" href="#跨平台" aria-label="Permalink to &quot;跨平台&quot;">​</a></h2><h3 id="資源" tabindex="-1">資源 <a class="header-anchor" href="#資源" aria-label="Permalink to &quot;資源&quot;">​</a></h3><h4 id="穩定資源函式庫" tabindex="-1">穩定資源函式庫 <a class="header-anchor" href="#穩定資源函式庫" aria-label="Permalink to &quot;穩定資源函式庫&quot;">​</a></h4><p><a href="./compose-multiplatform-resources">資源函式庫 API</a> 的大部分現在被認為是穩定的。</p><h4 id="支援具有-compose-multiplatform-資源的多模組專案" tabindex="-1">支援具有 Compose Multiplatform 資源的多模組專案 <a class="header-anchor" href="#支援具有-compose-multiplatform-資源的多模組專案" aria-label="Permalink to &quot;支援具有 Compose Multiplatform 資源的多模組專案&quot;">​</a></h4><p>從 Compose Multiplatform 1.6.10 開始， 您可以在任何 Gradle 模組和任何來源集 (source set) 中儲存資源，並發佈包含資源的專案和函式庫。</p><p>若要啟用多模組支援，請將您的專案更新至 Kotlin 2.0.0 或更新版本，以及 Gradle 7.6 或更新版本。</p><h4 id="多平台資源的配置-dsl" tabindex="-1">多平台資源的配置 DSL <a class="header-anchor" href="#多平台資源的配置-dsl" aria-label="Permalink to &quot;多平台資源的配置 DSL&quot;">​</a></h4><p>您現在可以微調專案中的 <code>Res</code> 類別生成：更改類別的模態 (modality) 和指定套件，並選擇生成條件：始終、從不，或僅在明確依賴資源函式庫時。</p><p>請參閱 <a href="./compose-multiplatform-resources-usage#customizing-accessor-class-generation">文件章節</a> 以獲取詳細資訊。</p><h4 id="用於生成資源-uri-的公共函數" tabindex="-1">用於生成資源 URI 的公共函數 <a class="header-anchor" href="#用於生成資源-uri-的公共函數" aria-label="Permalink to &quot;用於生成資源 URI 的公共函數&quot;">​</a></h4><p>新的 <code>getUri()</code> 函數允許您將資源的平台相關 URI 傳遞給外部函式庫，以便它們可以直接存取檔案。 請參閱 <a href="./compose-multiplatform-resources-usage#accessing-multiplatform-resources-from-external-libraries">文件</a> 以獲取詳細資訊。</p><h4 id="字串資源的複數形式" tabindex="-1">字串資源的複數形式 <a class="header-anchor" href="#字串資源的複數形式" aria-label="Permalink to &quot;字串資源的複數形式&quot;">​</a></h4><p>您現在可以與其他多平台字串資源一同定義複數形式（數量字串）。 請參閱 <a href="./compose-multiplatform-resources-usage#plurals">文件</a> 以獲取詳細資訊。</p><h4 id="支援三字母語系" tabindex="-1">支援三字母語系 <a class="header-anchor" href="#支援三字母語系" aria-label="Permalink to &quot;支援三字母語系&quot;">​</a></h4><p><a href="./compose-multiplatform-resources-setup#language-and-regional-qualifiers">語言限定符</a> 現在支援語系的 alpha-3 (ISO 639-2) 代碼。</p><h4 id="影像與字型的實驗性位元組陣列函數" tabindex="-1">影像與字型的實驗性位元組陣列函數 <a class="header-anchor" href="#影像與字型的實驗性位元組陣列函數" aria-label="Permalink to &quot;影像與字型的實驗性位元組陣列函數&quot;">​</a></h4><p>您可以嘗試兩個允許將字型和影像作為位元組陣列擷取的函數：<code>getDrawableResourceBytes()</code> 和 <code>getFontResourceBytes()</code>。 這些函數旨在幫助從第三方函式庫存取多平台資源。</p><p>請參閱 <a href="https://github.com/JetBrains/compose-multiplatform/pull/4651" target="_blank" rel="noreferrer">pull request</a> 以獲取詳細資訊。</p><h3 id="實驗性導航函式庫" tabindex="-1">實驗性導航函式庫 <a class="header-anchor" href="#實驗性導航函式庫" aria-label="Permalink to &quot;實驗性導航函式庫&quot;">​</a></h3><p>基於 Jetpack Compose 的通用導航函式庫現已可用。 欲了解詳情，請參閱 <a href="./compose-navigation-routing">文件</a>。</p><p>此版本的關鍵限制：</p><ul><li><a href="https://developer.android.com/guide/navigation/design/deep-link" target="_blank" rel="noreferrer">深層連結</a>（處理或追蹤）尚不支援。</li><li><a href="https://developer.android.com/develop/ui/compose/libraries#handling_the_system_back_button" target="_blank" rel="noreferrer">BackHandler</a> 函數和 <a href="https://developer.android.com/guide/navigation/custom-back/predictive-back-gesture" target="_blank" rel="noreferrer">預測性返回手勢</a> 僅在 Android 上支援。</li></ul><h3 id="生命週期函式庫" tabindex="-1">生命週期函式庫 <a class="header-anchor" href="#生命週期函式庫" aria-label="Permalink to &quot;生命週期函式庫&quot;">​</a></h3><p>基於 Jetpack 生命週期的通用生命週期函式庫現已可用，請參閱 <a href="./compose-lifecycle">文件</a> 以獲取詳細資訊。</p><p>此函式庫主要為支援通用導航功能而引入，但也提供實驗性的跨平台 <code>ViewModel</code> 實作，並包含一個您可以為專案實作的通用 <code>LifecycleOwner</code> 介面。</p><p>Compose Multiplatform 也提供通用的 <code>ViewModelStoreOwner</code> 實作。</p><h3 id="支援-kotlin-2-0-0" tabindex="-1">支援 Kotlin 2.0.0 <a class="header-anchor" href="#支援-kotlin-2-0-0" aria-label="Permalink to &quot;支援 Kotlin 2.0.0&quot;">​</a></h3><p>Kotlin 2.0.0 隨 Compose 編譯器的新 Gradle 外掛程式一同發布。 若要將 Compose Multiplatform 與最新編譯器版本一起使用，請將外掛程式應用於專案中的模組（請參閱 <a href="./compose-compiler#migrating-a-compose-multiplatform-project">遷移指南</a> 以獲取詳細資訊）。</p><h2 id="桌面" tabindex="-1">桌面 <a class="header-anchor" href="#桌面" aria-label="Permalink to &quot;桌面&quot;">​</a></h2><h3 id="對-basictextfield2-的基本支援" tabindex="-1">對 BasicTextField2 的基本支援 <a class="header-anchor" href="#對-basictextfield2-的基本支援" aria-label="Permalink to &quot;對 BasicTextField2 的基本支援&quot;">​</a></h3><p>在桌面目標上，現在已基本支援 <code>BasicTextField2</code> Compose 元件。 如果您的專案絕對需要它，或只是想測試它，都可以使用，但請記住可能存在未涵蓋的邊緣情況。 例如，<code>BasicTextField2</code> 目前不支援 IME 事件，因此您將無法使用虛擬鍵盤輸入中文、日文或韓文。</p><p>該元件的完整支援及對其他平台的支援計畫在 Compose Multiplatform 1.7.0 版本中實現。</p><h3 id="dialogwindow-的-alwaysontop-旗標" tabindex="-1">DialogWindow 的 alwaysOnTop 旗標 <a class="header-anchor" href="#dialogwindow-的-alwaysontop-旗標" aria-label="Permalink to &quot;DialogWindow 的 alwaysOnTop 旗標&quot;">​</a></h3><p>為避免您的對話視窗被覆蓋，您現在可以為 <code>DialogWindow</code> 可組合項使用 <code>alwaysOnTop</code> 旗標。</p><p>請參閱 <a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1120" target="_blank" rel="noreferrer">pull request</a> 以獲取詳細資訊。</p><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="輔助功能支援改進" tabindex="-1">輔助功能支援改進 <a class="header-anchor" href="#輔助功能支援改進" aria-label="Permalink to &quot;輔助功能支援改進&quot;">​</a></h3><p>在此版本中：</p><ul><li>對話框和彈出視窗已正確整合輔助功能，</li><li>使用 <code>UIKitView</code> 和 <code>UIKitViewController</code> 建立的互操作視圖現在可由輔助服務 (Accessibility Services) 存取，</li><li>輔助功能 API 支援 <code>LiveRegion</code> 語義，</li><li>支援 <a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1169" target="_blank" rel="noreferrer">輔助功能捲動</a>，</li><li>支援 <code>HapticFeedback</code>。</li></ul><h3 id="ios-17-及更高版本選取容器放大鏡" tabindex="-1">iOS 17 及更高版本選取容器放大鏡 <a class="header-anchor" href="#ios-17-及更高版本選取容器放大鏡" aria-label="Permalink to &quot;iOS 17 及更高版本選取容器放大鏡&quot;">​</a></h3><p>iOS 上的 Compose Multiplatform 選取容器現在可模擬原生放大工具。</p><p><img src="'+a+`" alt="Screenshot of iPhone chat app with the text magnifier active" width="390"></p><h3 id="對話框置中的軟體鍵盤內嵌" tabindex="-1">對話框置中的軟體鍵盤內嵌 <a class="header-anchor" href="#對話框置中的軟體鍵盤內嵌" aria-label="Permalink to &quot;對話框置中的軟體鍵盤內嵌&quot;">​</a></h3><p>對話框可組合項 <code>Dialog</code> 的行為現在與 Android 一致：當軟體鍵盤出現在螢幕上時，對話框會考慮應用程式視窗的有效高度進行置中。 可以使用 <code>DialogProperties.useSoftwareKeyboardInset</code> 屬性來停用此功能。</p><h2 id="網頁" tabindex="-1">網頁 <a class="header-anchor" href="#網頁" aria-label="Permalink to &quot;網頁&quot;">​</a></h2><h3 id="kotlin-wasm-支援處於-alpha-階段" tabindex="-1">Kotlin/Wasm 支援處於 Alpha 階段 <a class="header-anchor" href="#kotlin-wasm-支援處於-alpha-階段" aria-label="Permalink to &quot;Kotlin/Wasm 支援處於 Alpha 階段&quot;">​</a></h3><p>實驗性的網頁版 Compose Multiplatform 現已進入 Alpha 階段：</p><ul><li>大多數網頁功能反映了桌面版 Compose Multiplatform。</li><li>團隊致力於將網頁平台推向正式發布。</li><li>下一步，將對大多數元件進行徹底的瀏覽器適應。</li></ul><p>請依照 <a href="./quickstart">第一個應用程式教學</a> 查看如何設定和執行具有共用 UI 程式碼的網頁應用程式。</p><h3 id="基本-ime-鍵盤支援" tabindex="-1">基本 IME 鍵盤支援 <a class="header-anchor" href="#基本-ime-鍵盤支援" aria-label="Permalink to &quot;基本 IME 鍵盤支援&quot;">​</a></h3><p>Compose Multiplatform 的網頁目標現在對虛擬（IME）鍵盤具有基本支援。</p><h2 id="gradle-外掛程式" tabindex="-1">Gradle 外掛程式 <a class="header-anchor" href="#gradle-外掛程式" aria-label="Permalink to &quot;Gradle 外掛程式&quot;">​</a></h2><h3 id="修改-macos-最低版本的可能性" tabindex="-1">修改 macOS 最低版本的可能性 <a class="header-anchor" href="#修改-macos-最低版本的可能性" aria-label="Permalink to &quot;修改 macOS 最低版本的可能性&quot;">​</a></h3><p>在舊版本中，如果不包含 Intel 版本，則無法將 macOS 應用程式上傳到 App Store。 您現在可以在特定平台 Compose Multiplatform 選項中為您的應用程式設定最低 macOS 版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                minimumSystemVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;12.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>請參閱 <a href="https://github.com/JetBrains/compose-multiplatform/pull/4271" target="_blank" rel="noreferrer">pull request</a> 以獲取詳細資訊。</p><h3 id="支援-proguard-建立-uber-jars-的選項" tabindex="-1">支援 Proguard 建立 Uber JARs 的選項 <a class="header-anchor" href="#支援-proguard-建立-uber-jars-的選項" aria-label="Permalink to &quot;支援 Proguard 建立 Uber JARs 的選項&quot;">​</a></h3><p>您現在可以使用 ProGuard Gradle 任務建立 Uber JARs（包含應用程式及其所有依賴項 JAR 檔的複雜套件）。</p><p>請參閱 <a href="./compose-native-distribution#minification-and-obfuscation">縮減與混淆</a> 指南以獲取詳細資訊。</p><h3 id="已知問題-missingresourceexception" tabindex="-1">已知問題：MissingResourceException <a class="header-anchor" href="#已知問題-missingresourceexception" aria-label="Permalink to &quot;已知問題：MissingResourceException&quot;">​</a></h3><p>在從 Kotlin 1.9.x 切換到 2.0.0（或反之）後，您可能會遇到 <code>org.jetbrains.compose.resources.MissingResourceException: Missing resource with path: ...</code> 錯誤。 為了解決此問題，請刪除專案中所有的 <code>build</code> 目錄。 這包括位於專案根目錄和模組目錄中的目錄。</p>`,70)]))}const k=o(t,[["render",s]]);export{f as __pageData,k as default};
