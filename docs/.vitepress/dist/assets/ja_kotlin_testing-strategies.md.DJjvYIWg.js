import{_ as p}from"./chunks/counter-stress.dAkLADVR.js";import{_ as l,c as t,o as h,ag as i,j as s,a as n}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"ストレス テストとモデル検査","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/testing-strategies.md","filePath":"ja/kotlin/testing-strategies.md","lastUpdated":1754307826000}'),e={name:"ja/kotlin/testing-strategies.md"};function k(r,a,d,c,g,E){return h(),t("div",null,a[0]||(a[0]=[i(`<h1 id="ストレス-テストとモデル検査" tabindex="-1">ストレス テストとモデル検査 <a class="header-anchor" href="#ストレス-テストとモデル検査" aria-label="Permalink to &quot;ストレス テストとモデル検査&quot;">​</a></h1><p>Lincheckには、ストレス テストとモデル検査という2つのテスト戦略があります。 <a href="/ja/kotlin/introduction">前のステップ</a>の<code>BasicCounterTest.kt</code>ファイルで記述した<code>Counter</code>を使用して、両方のアプローチの内部で何が起こるかを見ていきましょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Volatile</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="ストレス-テスト" tabindex="-1">ストレス テスト <a class="header-anchor" href="#ストレス-テスト" aria-label="Permalink to &quot;ストレス テスト&quot;">​</a></h2><h3 id="ストレス-テストの記述" tabindex="-1">ストレス テストの記述 <a class="header-anchor" href="#ストレス-テストの記述" aria-label="Permalink to &quot;ストレス テストの記述&quot;">​</a></h3><p>以下の手順に従って、<code>Counter</code>の並行ストレス テストを作成します。</p><ol><li><code>CounterTest</code>クラスを作成します。</li><li>このクラスに、<code>Counter</code>型のフィールド<code>c</code>を追加し、コンストラクターでインスタンスを作成します。</li><li>カウンター操作をリストアップし、それらを<code>@Operation</code>アノテーションでマークし、その実装を<code>c</code>に委譲します。</li><li><code>StressOptions()</code>を使用して、ストレス テスト戦略を指定します。</li><li><code>StressOptions.check()</code>関数を呼び出してテストを実行します。</li></ol><p>完成したコードは次のようになります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.datastructures.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CounterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初期状態</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Counterに対する操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // テストの実行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stressTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StressOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,9),s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"ストレス-テストの仕組み",tabindex:"-1"},[n("ストレス テストの仕組み "),s("a",{class:"header-anchor",href:"#ストレス-テストの仕組み","aria-label":'Permalink to "ストレス テストの仕組み {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<p>まず、Lincheckは<code>@Operation</code>でマークされた操作を使用して並行シナリオのセットを生成します。次に、ネイティブ スレッドを起動し、操作が同時に開始されることを保証するために最初に同期させます。最後に、Lincheckはこれらのネイティブ スレッドで各シナリオを複数回実行し、誤った結果を生成するインターリービングに遭遇することを期待します。</p><p>下図は、Lincheckが生成されたシナリオをどのように実行するかを示す高レベルな概略図です。</p><p><img src="'+p+`" alt="Stress execution of the Counter" width="700"></p><h2 id="モデル検査" tabindex="-1">モデル検査 <a class="header-anchor" href="#モデル検査" aria-label="Permalink to &quot;モデル検査&quot;">​</a></h2><p>ストレス テストに関する主な懸念は、発見されたバグを再現する方法を理解するために何時間も費やす可能性があることです。これを支援するために、Lincheckは、バグ再現のためのインターリービングを自動的に提供する有界モデル検査をサポートしています。</p><p>モデル検査テストは、ストレス テストと同じ方法で構築されます。テスト戦略を指定する<code>StressOptions()</code>を<code>ModelCheckingOptions()</code>に置き換えるだけです。</p><h3 id="モデル検査テストの記述" tabindex="-1">モデル検査テストの記述 <a class="header-anchor" href="#モデル検査テストの記述" aria-label="Permalink to &quot;モデル検査テストの記述&quot;">​</a></h3><p>ストレス テスト戦略をモデル検査に変更するには、テストで<code>StressOptions()</code>を<code>ModelCheckingOptions()</code>に置き換えます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.datastructures.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CounterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初期状態</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Counterに対する操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // テストの実行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> modelCheckingTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModelCheckingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,9),s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"モデル検査の仕組み",tabindex:"-1"},[n("モデル検査の仕組み "),s("a",{class:"header-anchor",href:"#モデル検査の仕組み","aria-label":'Permalink to "モデル検査の仕組み {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i(`<p>複雑な並行アルゴリズムにおけるほとんどのバグは、あるスレッドから別のスレッドへ実行を切り替える古典的なインターリービングで再現できます。さらに、弱いメモリモデルのモデルチェッカーは非常に複雑であるため、Lincheckは_シーケンシャル一貫性メモリモデル_の下で有界モデル検査を使用します。</p><p>要するに、Lincheckは、1回のコンテキストスイッチから始まり、次に2回というように、指定された数のインターリービングが検査されるまでプロセスを続行し、すべてのインターリービングを分析します。この戦略により、可能な限り少ないコンテキストスイッチで不正なスケジュールを発見でき、その後のバグ調査が容易になります。</p><p>実行を制御するために、Lincheckはテストコードに特別なスイッチポイントを挿入します。これらのポイントは、コンテキストスイッチを実行できる場所を識別します。基本的に、これらはJVMにおけるフィールドや配列要素の読み取りまたは更新、<code>wait/notify</code>や<code>park/unpark</code>呼び出しのような共有メモリアクセスです。スイッチポイントを挿入するために、LincheckはASMフレームワークを使用してテストコードをオンザフライで変換し、既存のコードに内部関数呼び出しを追加します。</p><p>モデル検査戦略が実行を制御するため、Lincheckは不正なインターリービングにつながるトレースを提供でき、これは実用的にも非常に役立ちます。<code>Counter</code>の不正な実行のトレースの例は、<a href="/ja/kotlin/introduction#trace-the-invalid-execution">Lincheckで最初のテストを記述する</a>チュートリアルで確認できます。</p><h2 id="どちらのテスト戦略が良いか" tabindex="-1">どちらのテスト戦略が良いか？ <a class="header-anchor" href="#どちらのテスト戦略が良いか" aria-label="Permalink to &quot;どちらのテスト戦略が良いか？&quot;">​</a></h2><p>_モデル検査戦略_は、シーケンシャル一貫性メモリモデル下でバグを見つけるのに優れています。これは、より良いカバレッジを保証し、エラーが見つかった場合に失敗した実行トレースを提供するからです。</p><p>_ストレス テスト_はカバレッジを保証しませんが、<code>volatile</code>修飾子の見落としなどの低レベルな効果によって引き起こされるバグに対してアルゴリズムをチェックするのに依然として役立ちます。ストレス テストは、再現するために多くのコンテキストスイッチを必要とする稀なバグを発見するのにも大いに役立ち、モデル検査戦略における現在の制限のため、それらすべてを分析することは不可能です。</p><h2 id="テスト戦略の構成" tabindex="-1">テスト戦略の構成 <a class="header-anchor" href="#テスト戦略の構成" aria-label="Permalink to &quot;テスト戦略の構成&quot;">​</a></h2><p>テスト戦略を構成するには、<code>&lt;TestingMode&gt;Options</code>クラスでオプションを設定します。</p><ol><li><p><code>CounterTest</code>のシナリオ生成と実行のオプションを設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.datastructures.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CounterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stressTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StressOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ストレス テストのオプション:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">actorsBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 並列処理前の操作数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">threads</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 並列処理部のスレッド数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">actorsPerThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 並列処理部の各スレッドにおける操作数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">actorsAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 並列処理後の操作数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 100個のランダムな並行シナリオを生成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invocationsPerIteration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 各生成シナリオを1000回実行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// テストの実行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>もう一度<code>stressTest()</code>を実行すると、Lincheckは以下のようなシナリオを生成します。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| Thread 1 | Thread 2 |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| inc()    |          |</span></span>
<span class="line"><span>| inc()    |          |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| get()    | inc()    |</span></span>
<span class="line"><span>| inc()    | get()    |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| inc()    |          |</span></span>
<span class="line"><span>| ------------------- |</span></span></code></pre></div><p>ここでは、並列処理部の前に2つの操作があり、2つのスレッドがそれぞれ2つの操作を行い、その後に最後に単一の操作が続きます。</p></li></ol><p>モデル検査テストも同様に構成できます。</p><h2 id="シナリオの最小化" tabindex="-1">シナリオの最小化 <a class="header-anchor" href="#シナリオの最小化" aria-label="Permalink to &quot;シナリオの最小化&quot;">​</a></h2><p>検出されたエラーは、通常、テスト構成で指定されたよりも小さいシナリオで表現されることにすでに気づいているかもしれません。Lincheckは、テストが失敗しないようにしながら、操作を積極的に削除することでエラーを最小化しようとします。</p><p>上記のカウンター テストの最小化されたシナリオは次のとおりです。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>= Invalid execution results =</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| Thread 1 | Thread 2 |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| inc()    | inc()    |</span></span>
<span class="line"><span>| ------------------- |</span></span></code></pre></div><p>より小さなシナリオの方が分析しやすいため、シナリオの最小化はデフォルトで有効になっています。この機能を無効にするには、<code>[Stress, ModelChecking]Options</code>構成に<code>minimizeFailedScenario(false)</code>を追加します。</p><h2 id="データ構造の状態のロギング" tabindex="-1">データ構造の状態のロギング <a class="header-anchor" href="#データ構造の状態のロギング" aria-label="Permalink to &quot;データ構造の状態のロギング&quot;">​</a></h2><p>デバッグのためのもう1つの便利な機能は、_状態ロギング_です。エラーにつながるインターリービングを分析する際、通常、各イベント後に状態を変更しながら、データ構造の変更を紙に書き出します。この手順を自動化するために、データ構造の<code>String</code>表現を返す特別なメソッドを提供できます。これにより、Lincheckはデータ構造を変更するインターリービングの各イベント後に状態表現を出力します。</p><p>これには、引数を取らず、<code>@StateRepresentation</code>アノテーションでマークされたメソッドを定義します。このメソッドはスレッドセーフで、ノンブロッキングであり、データ構造を一切変更してはいけません。</p><ol><li><p><code>Counter</code>の例では、<code>String</code>表現は単にカウンターの値です。したがって、トレースにカウンターの状態を出力するには、<code>stateRepresentation()</code>関数を<code>CounterTest</code>に追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.datastructures.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.Test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CounterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @StateRepresentation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stateRepresentation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> modelCheckingTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModelCheckingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>modelCheckingTest()</code>を今すぐ実行し、カウンターの状態を変更するスイッチポイントで出力された<code>Counter</code>の状態を確認します（<code>STATE:</code>で始まります）。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>= Invalid execution results =</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| Thread 1 | Thread 2 |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| STATE: 0            |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| inc(): 1 | inc(): 1 |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| STATE: 1            |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span></span></span>
<span class="line"><span>The following interleaving leads to the error:</span></span>
<span class="line"><span>| -------------------------------------------------------------------- |</span></span>
<span class="line"><span>| Thread 1 |                         Thread 2                          |</span></span>
<span class="line"><span>| -------------------------------------------------------------------- |</span></span>
<span class="line"><span>|          | inc()                                                     |</span></span>
<span class="line"><span>|          |   inc(): 1 at CounterTest.inc(CounterTest.kt:10)          |</span></span>
<span class="line"><span>|          |     value.READ: 0 at Counter.inc(BasicCounterTest.kt:10)  |</span></span>
<span class="line"><span>|          |     switch                                                |</span></span>
<span class="line"><span>| inc(): 1 |                                                           |</span></span>
<span class="line"><span>| STATE: 1 |                                                           |</span></span>
<span class="line"><span>|          |     value.WRITE(1) at Counter.inc(BasicCounterTest.kt:10) |</span></span>
<span class="line"><span>|          |     STATE: 1                                              |</span></span>
<span class="line"><span>|          |     value.READ: 1 at Counter.inc(BasicCounterTest.kt:10)  |</span></span>
<span class="line"><span>|          |   result: 1                                               |</span></span>
<span class="line"><span>| -------------------------------------------------------------------- |</span></span></code></pre></div></li></ol><p>ストレス テストの場合、Lincheckはシナリオの並列処理部の直前と直後、そして最後に状態表現を出力します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><ul><li>これらの<a href="https://github.com/JetBrains/lincheck/tree/master/src/jvm/test-lincheck-integration/org/jetbrains/lincheck_test/guide/CounterTest.kt" target="_blank" rel="noreferrer">完全なコード例を入手</a> * その他の<a href="https://github.com/JetBrains/lincheck/tree/master/src/jvm/test/org/jetbrains/lincheck_test/guide" target="_blank" rel="noreferrer">テスト例を参照</a></li></ul></div><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p><a href="/ja/kotlin/operation-arguments">操作に渡される引数を構成する方法</a>と、それがいつ役立つかについて学習します。</p>`,24)]))}const C=l(e,[["render",k]]);export{F as __pageData,C as default};
