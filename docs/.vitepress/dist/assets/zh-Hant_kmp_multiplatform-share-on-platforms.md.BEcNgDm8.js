import{_ as e,a as t}from"./chunks/lib-hierarchical-structure.Dk8bxMrh.js";import{_ as o,c as r,o as l,ag as i}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"在平台間共享程式碼","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/multiplatform-share-on-platforms.md","filePath":"zh-Hant/kmp/multiplatform-share-on-platforms.md","lastUpdated":1755516278000}'),n={name:"zh-Hant/kmp/multiplatform-share-on-platforms.md"};function c(p,a,d,s,h,m){return l(),r("div",null,a[0]||(a[0]=[i('<h1 id="在平台間共享程式碼" tabindex="-1">在平台間共享程式碼 <a class="header-anchor" href="#在平台間共享程式碼" aria-label="Permalink to &quot;在平台間共享程式碼&quot;">​</a></h1><p>藉助 Kotlin Multiplatform，您可以使用 Kotlin 提供的機制來共享程式碼：</p><ul><li><a href="#share-code-on-all-platforms">在專案中所有使用的平台間共享程式碼</a>。用於共享適用於所有平台的通用業務邏輯。</li><li><a href="#share-code-on-similar-platforms">在專案中部分平台間（而非全部）共享程式碼</a>。您可以借助階層式結構在類似平台中重用程式碼。</li></ul><p>如果需要從共享程式碼存取平台特定的 API，請使用 Kotlin 的 <a href="./multiplatform-expect-actual">expected and actual declarations</a> 機制。</p><h2 id="在所有平台間共享程式碼" tabindex="-1">在所有平台間共享程式碼 <a class="header-anchor" href="#在所有平台間共享程式碼" aria-label="Permalink to &quot;在所有平台間共享程式碼&quot;">​</a></h2><p>如果您有適用於所有平台的通用業務邏輯，則無需為每個平台編寫相同的程式碼 – 只需將其在通用原始碼集 (common source set) 中共享即可。</p><p><img src="'+e+'" alt="為所有平台共享的程式碼"></p><p>一些原始碼集的依賴項是預設設定的。您無需手動指定任何 <code>dependsOn</code> 關係：</p><ul><li>對於所有依賴於通用原始碼集的平台特定原始碼集，例如 <code>jvmMain</code>、<code>macosX64Main</code> 等。</li><li>在特定目標的 <code>main</code> 和 <code>test</code> 原始碼集之間，例如 <code>androidMain</code> 和 <code>androidUnitTest</code>。</li></ul><p>如果需要從共享程式碼存取平台特定的 API，請使用 Kotlin 的 <a href="./multiplatform-expect-actual">expected and actual declarations</a> 機制。</p><h2 id="在類似平台間共享程式碼" tabindex="-1">在類似平台間共享程式碼 <a class="header-anchor" href="#在類似平台間共享程式碼" aria-label="Permalink to &quot;在類似平台間共享程式碼&quot;">​</a></h2><p>您經常需要建立多個原生目標，這些目標可能會重用大量通用邏輯和第三方 API。</p><p>例如，在一個典型的以 iOS 為目標的多平台專案中，有兩個與 iOS 相關的目標：一個用於 iOS ARM64 裝置，另一個用於 x64 模擬器。它們有獨立的平台特定原始碼集，但實際上很少需要針對裝置和模擬器使用不同的程式碼，而且它們的依賴項也大致相同。因此，iOS 特定的程式碼可以在它們之間共享。</p><p>顯然，在這種設定下，最好為兩個 iOS 目標擁有一個共享原始碼集，其中包含的 Kotlin/Native 程式碼仍然可以直接呼叫 iOS 裝置和模擬器通用的任何 API。</p><p>在這種情況下，您可以使用 <a href="./multiplatform-hierarchy">階層式結構</a> 在專案中跨原生目標共享程式碼，方法有以下兩種：</p><ul><li><a href="./multiplatform-hierarchy#default-hierarchy-template">使用預設階層範本</a></li><li><a href="./multiplatform-hierarchy#manual-configuration">手動配置階層式結構</a></li></ul><p>深入了解<a href="#share-code-in-libraries">在函式庫中共享程式碼</a>以及<a href="#connect-platform-specific-libraries">連接平台特定函式庫</a>。</p><h2 id="在函式庫中共享程式碼" tabindex="-1">在函式庫中共享程式碼 <a class="header-anchor" href="#在函式庫中共享程式碼" aria-label="Permalink to &quot;在函式庫中共享程式碼&quot;">​</a></h2><p>由於階層式專案結構，函式庫也可以為目標子集提供通用 API。當<a href="./multiplatform-publish-lib-setup">函式庫發佈</a>時，其中間原始碼集的 API 會連同專案結構的資訊一起嵌入到函式庫構件中。當您使用此函式庫時，您專案的中間原始碼集僅存取那些可供每個原始碼集目標使用的函式庫 API。</p><p>例如，請查看 <code>kotlinx.coroutines</code> 儲存庫中的以下原始碼集階層：</p><p><img src="'+t+'" alt="函式庫階層式結構"></p><p><code>concurrent</code> 原始碼集宣告了 <code>runBlocking</code> 函式，並為 JVM 和原生目標進行編譯。一旦 <code>kotlinx.coroutines</code> 函式庫使用階層式專案結構更新並發佈，您就可以依賴於它，並從在 JVM 和原生目標之間共享的原始碼集呼叫 <code>runBlocking</code>，因為它符合函式庫 <code>concurrent</code> 原始碼集的「目標簽章 (targets signature)」。</p><h2 id="連接平台特定函式庫" tabindex="-1">連接平台特定函式庫 <a class="header-anchor" href="#連接平台特定函式庫" aria-label="Permalink to &quot;連接平台特定函式庫&quot;">​</a></h2><p>為了共享更多原生程式碼而不受平台特定依賴項限制，請使用 <a href="https://kotlinlang.org/docs/native-platform-libs.html" target="_blank" rel="noreferrer">平台函式庫</a>，例如 Foundation、UIKit 和 POSIX。這些函式庫隨 Kotlin/Native 附帶，並預設在共享原始碼集中可用。</p><p>此外，如果您在專案中使用 <a href="./multiplatform-cocoapods-overview">Kotlin CocoaPods Gradle</a> 外掛程式，則可以使用透過 <a href="https://kotlinlang.org/docs/native-c-interop.html" target="_blank" rel="noreferrer"><code>cinterop</code> 機制</a> 使用的第三方原生函式庫。</p><h2 id="接下來是什麼" tabindex="-1">接下來是什麼？ <a class="header-anchor" href="#接下來是什麼" aria-label="Permalink to &quot;接下來是什麼？&quot;">​</a></h2><ul><li><a href="./multiplatform-expect-actual">閱讀有關 Kotlin 的 expected and actual declarations 機制</a></li><li><a href="./multiplatform-hierarchy">深入了解階層式專案結構</a></li><li><a href="./multiplatform-publish-lib-setup">設定多平台函式庫的發佈</a></li><li><a href="https://kotlinlang.org/docs/coding-conventions.html#source-file-names" target="_blank" rel="noreferrer">查看我們關於多平台專案中原始碼檔命名的建議</a></li></ul>',27)]))}const b=o(n,[["render",c]]);export{_ as __pageData,b as default};
