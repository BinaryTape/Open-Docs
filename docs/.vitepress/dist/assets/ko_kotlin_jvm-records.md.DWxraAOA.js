import{_ as e,C as t,c as l,o as n,ag as i,G as o}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Kotlin에서 자바 레코드 사용하기","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/jvm-records.md","filePath":"ko/kotlin/jvm-records.md","lastUpdated":1754307826000}'),p={name:"ko/kotlin/jvm-records.md"};function h(r,a,d,k,c,g){const s=t("TopicTitle");return n(),l("div",null,[a[0]||(a[0]=i(`<h1 id="kotlin에서-자바-레코드-사용하기" tabindex="-1">Kotlin에서 자바 레코드 사용하기 <a class="header-anchor" href="#kotlin에서-자바-레코드-사용하기" aria-label="Permalink to &quot;Kotlin에서 자바 레코드 사용하기&quot;">​</a></h1><p>_레코드(Records)_는 불변 데이터를 저장하기 위한 자바의 <a href="https://openjdk.java.net/jeps/395" target="_blank" rel="noreferrer">클래스</a>입니다. 레코드는 _레코드 컴포넌트(records components)_라는 고정된 값 집합을 가집니다. 레코드는 자바에서 간결한 문법을 제공하여 상용구 코드(boilerplate code)를 작성할 필요가 없습니다.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> record Person (String name, int age) {}</span></span></code></pre></div><p>컴파일러는 자동으로 <a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Record.html" target="_blank" rel="noreferrer"><code>java.lang.Record</code></a>를 상속받는 최종(final) 클래스를 다음 멤버와 함께 생성합니다:</p><ul><li>각 레코드 컴포넌트에 대한 private final 필드</li><li>모든 필드에 대한 매개변수를 가진 public 생성자</li><li>구조적 동일성(structural equality)을 구현하는 메서드 집합: <code>equals()</code>, <code>hashCode()</code>, <code>toString()</code></li><li>각 레코드 컴포넌트를 읽기 위한 public 메서드</li></ul><p>레코드는 코틀린 <a href="/ko/kotlin/data-classes">데이터 클래스</a>와 매우 유사합니다.</p><h2 id="코틀린-코드에서-자바-레코드-사용하기" tabindex="-1">코틀린 코드에서 자바 레코드 사용하기 <a class="header-anchor" href="#코틀린-코드에서-자바-레코드-사용하기" aria-label="Permalink to &quot;코틀린 코드에서 자바 레코드 사용하기&quot;">​</a></h2><p>자바에서 선언된 컴포넌트를 가진 레코드 클래스는 코틀린에서 프로퍼티를 가진 클래스를 사용하는 것과 동일한 방식으로 사용할 수 있습니다. 레코드 컴포넌트에 접근하려면 <a href="/ko/kotlin/properties">코틀린 프로퍼티</a>처럼 해당 이름을 사용하면 됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newPerson </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newPerson.name</span></span></code></pre></div><h2 id="코틀린에서-레코드-선언하기" tabindex="-1">코틀린에서 레코드 선언하기 <a class="header-anchor" href="#코틀린에서-레코드-선언하기" aria-label="Permalink to &quot;코틀린에서 레코드 선언하기&quot;">​</a></h2><p>코틀린은 데이터 클래스에 대해서만 레코드 선언을 지원하며, 데이터 클래스는 <a href="#requirements">요구 사항</a>을 충족해야 합니다.</p><p>코틀린에서 레코드 클래스를 선언하려면 <code>@JvmRecord</code> 어노테이션을 사용합니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>@JvmRecord</code>를 기존 클래스에 적용하는 것은 바이너리 호환 변경(binary compatible change)이 아닙니다. 이 어노테이션은 클래스 프로퍼티 접근자(accessors)의 명명 규칙을 변경합니다.</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRecord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>이 JVM 특정 어노테이션은 다음을 생성할 수 있도록 합니다.</p><ul><li>클래스 파일의 클래스 프로퍼티에 해당하는 레코드 컴포넌트</li><li>자바 레코드 명명 규칙에 따라 이름이 지정된 프로퍼티 접근자 메서드</li></ul><p>데이터 클래스는 <code>equals()</code>, <code>hashCode()</code>, <code>toString()</code> 메서드 구현을 제공합니다.</p><h3 id="요구-사항" tabindex="-1">요구 사항 <a class="header-anchor" href="#요구-사항" aria-label="Permalink to &quot;요구 사항&quot;">​</a></h3><p><code>@JvmRecord</code> 어노테이션과 함께 데이터 클래스를 선언하려면 다음 요구 사항을 충족해야 합니다.</p><ul><li>클래스는 JVM 16 바이트코드(또는 <code>-Xjvm-enable-preview</code> 컴파일러 옵션이 활성화된 경우 15)를 대상으로 하는 모듈에 있어야 합니다.</li><li>모든 JVM 레코드가 암시적으로 <code>java.lang.Record</code>를 상속하기 때문에 클래스는 명시적으로 다른 클래스(<code>Any</code> 포함)를 상속할 수 없습니다. 하지만 클래스는 인터페이스를 구현할 수 있습니다.</li><li>클래스는 해당 주 생성자 매개변수에서 초기화된 경우를 제외하고 배킹 필드(backing fields)를 가진 프로퍼티를 선언할 수 없습니다.</li><li>클래스는 배킹 필드를 가진 가변(mutable) 프로퍼티를 선언할 수 없습니다.</li><li>클래스는 로컬 클래스(local class)일 수 없습니다.</li><li>클래스의 주 생성자는 클래스 자체만큼 가시적이어야 합니다.</li></ul><h3 id="jvm-레코드-활성화하기" tabindex="-1">JVM 레코드 활성화하기 <a class="header-anchor" href="#jvm-레코드-활성화하기" aria-label="Permalink to &quot;JVM 레코드 활성화하기&quot;">​</a></h3><p>JVM 레코드는 생성된 JVM 바이트코드의 <code>16</code> 이상 대상 버전을 요구합니다.</p><p>명시적으로 지정하려면 <a href="/ko/kotlin/gradle-compiler-options#attributes-specific-to-jvm">Gradle</a> 또는 <a href="/ko/kotlin/maven#attributes-specific-to-jvm">Maven</a>에서 <code>jvmTarget</code> 컴파일러 옵션을 사용하세요.</p>`,23)),o(s,{id:"코틀린에서-레코드-컴포넌트-어노테이션-지정하기",level:"2",title:"코틀린에서 레코드 컴포넌트 어노테이션 지정하기",labelRef:"experimental-general"}),a[1]||(a[1]=i(`<p>자바에서 레코드 컴포넌트에 대한 <a href="/ko/kotlin/annotations">어노테이션</a>은 배킹 필드, getter, setter 및 생성자 매개변수로 자동으로 전파됩니다. 코틀린에서는 <a href="/ko/kotlin/annotations#all-meta-target"><code>all</code></a> 사용-사이트 대상(use-site target)을 사용하여 이 동작을 재현할 수 있습니다.</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>all</code> 사용-사이트 대상을 사용하려면 옵트인(opt in)해야 합니다. <code>-Xannotation-target-all</code> 컴파일러 옵션을 사용하거나 <code>build.gradle.kts</code> 파일에 다음 내용을 추가하세요. <code>kotlin kotlin { compilerOptions { freeCompilerArgs.add(&quot;-Xannotation-target-all&quot;) } } </code></p></div><p>예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRecord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Positive</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> val</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>@JvmRecord</code>와 <code>@all:</code>을 함께 사용할 때 코틀린은 다음을 수행합니다.</p><ul><li>어노테이션을 프로퍼티, 배킹 필드, 생성자 매개변수, getter 및 setter에 전파합니다.</li><li>어노테이션이 자바의 <code>RECORD_COMPONENT</code>를 지원하는 경우, 레코드 컴포넌트에도 어노테이션을 적용합니다.</li></ul><h2 id="어노테이션이-레코드-컴포넌트와-작동하도록-만들기" tabindex="-1">어노테이션이 레코드 컴포넌트와 작동하도록 만들기 <a class="header-anchor" href="#어노테이션이-레코드-컴포넌트와-작동하도록-만들기" aria-label="Permalink to &quot;어노테이션이 레코드 컴포넌트와 작동하도록 만들기&quot;">​</a></h2><p><a href="/ko/kotlin/annotations">어노테이션</a>을 코틀린 프로퍼티 <strong>및</strong> 자바 레코드 컴포넌트 모두에 사용할 수 있도록 하려면 어노테이션 선언에 다음 메타 어노테이션(meta-annotations)을 추가하세요.</p><ul><li>코틀린의 경우: <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-target/index.html" target="_blank" rel="noreferrer"><code>@Target</code></a></li><li>자바 레코드 컴포넌트의 경우: <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Target.html" target="_blank" rel="noreferrer"><code>@java.lang.annotation.Target</code></a></li></ul><p>예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.CLASS, AnnotationTarget.PROPERTY)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@java.lang.annotation.Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ElementType.CLASS, ElementType.RECORD_COMPONENT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exampleClass</span></span></code></pre></div><p>이제 <code>@ExampleClass</code>를 코틀린 클래스 및 프로퍼티뿐만 아니라 자바 클래스 및 레코드 컴포넌트에도 적용할 수 있습니다.</p><h2 id="추가-논의" tabindex="-1">추가 논의 <a class="header-anchor" href="#추가-논의" aria-label="Permalink to &quot;추가 논의&quot;">​</a></h2><p>더 자세한 기술적 세부 사항 및 논의는 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/jvm-records.md" target="_blank" rel="noreferrer">JVM 레코드에 대한 이 언어 제안</a>을 참조하세요.</p>`,14))])}const u=e(p,[["render",h]]);export{m as __pageData,u as default};
