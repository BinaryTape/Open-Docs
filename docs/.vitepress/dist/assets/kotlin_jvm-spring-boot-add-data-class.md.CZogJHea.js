import{_ as g}from"./chunks/icon-1-done.ZX9lW-aj.js";import{_ as E}from"./chunks/icon-2.DCnUydpf.js";import{_ as u}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as c}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as F}from"./chunks/messages-in-json-format.6v4MkOOj.js";import{_ as y,C as t,c as m,o as C,j as s,G as l,ag as e,a as i,w as n}from"./chunks/framework.Bksy39di.js";const N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/jvm-spring-boot-add-data-class.md","filePath":"kotlin/jvm-spring-boot-add-data-class.md","lastUpdated":1754307826000}'),b={name:"kotlin/jvm-spring-boot-add-data-class.md"};function B(f,a,A,v,D,M){const r=t("web-summary"),d=t("tldr"),p=t("def"),k=t("list"),h=t("code-block"),o=t("deflist");return C(),m("div",null,[a[20]||(a[20]=s("h1",{id:"将数据类添加到-spring-boot-项目",tabindex:"-1"},[i("将数据类添加到 Spring Boot 项目 "),s("a",{class:"header-anchor",href:"#将数据类添加到-spring-boot-项目","aria-label":'Permalink to "将数据类添加到 Spring Boot 项目"'},"​")],-1)),l(r,null,{default:n(()=>a[0]||(a[0]=[i("将 Kotlin 数据类添加到 Spring Boot 项目中。")])),_:1}),l(d,null,{default:n(()=>a[1]||(a[1]=[s("p",null,[i("这是 "),s("strong",null,"Spring Boot 和 Kotlin 入门"),i(" 教程的第二部分。在继续之前，请确保你已完成之前的步骤：")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:g,width:"20",alt:"First step"}),i(),s("a",{href:"/kotlin/jvm-create-project-with-spring-boot"},"使用 Kotlin 创建 Spring Boot 项目"),s("br"),s("img",{src:E,width:"20",alt:"Second step"}),i(),s("strong",null,"将数据类添加到 Spring Boot 项目"),s("br"),s("img",{src:u,width:"20",alt:"Third step"}),i(" 为 Spring Boot 项目添加数据库支持"),s("br"),s("img",{src:c,width:"20",alt:"Fourth step"}),i(" 使用 Spring Data CrudRepository 进行数据库访问")],-1)])),_:1}),a[21]||(a[21]=s("p",null,[i("本教程的这一部分，你将向应用程序添加更多功能，并探索更多 Kotlin 语言特性，例如数据类。 这需要更改 "),s("code",null,"MessageController"),i(" 类，使其能够以包含序列化对象集合的 JSON 文档进行响应。")],-1)),a[22]||(a[22]=s("h2",{id:"更新你的应用程序",tabindex:"-1"},[i("更新你的应用程序 "),s("a",{class:"header-anchor",href:"#更新你的应用程序","aria-label":'Permalink to "更新你的应用程序"'},"​")],-1)),s("ol",null,[a[19]||(a[19]=s("li",null,[s("p",null,[i("在与 "),s("code",null,"DemoApplication.kt"),i(" 文件相同的包中，创建 "),s("code",null,"Message.kt"),i(" 文件。")])],-1)),s("li",null,[a[9]||(a[9]=e(`<p>在 <code>Message.kt</code> 文件中，创建一个具有 <code>id</code> 和 <code>text</code> 两个属性的数据类：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Message.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>Message</code> 类将用于数据传输：一个序列化的 <code>Message</code> 对象 list 将构成控制器响应浏览器请求的 JSON 文档。</p>`,3)),l(o,{collapsible:"true"},{default:n(()=>[l(p,{title:"数据类 – data class Message"},{default:n(()=>a[2]||(a[2]=[s("p",null,[i("Kotlin 中"),s("a",{href:"/kotlin/data-classes"},"数据类"),i("的主要目的是存储数据。这类类用 "),s("code",null,"data"),i(" 关键字标记，并且一些标准功能和实用函数通常可以从类结构中机械地派生出来。")],-1),s("p",null,[i("在此示例中，你将 "),s("code",null,"Message"),i(" 声明为数据类，因为其主要目的是存储数据。")],-1)])),_:1}),l(p,{title:"val 和 var 属性"},{default:n(()=>[a[4]||(a[4]=s("p",null,[s("a",{href:"/kotlin/properties"},"Kotlin 中的属性"),i("可以声明为：")],-1)),l(k,null,{default:n(()=>a[3]||(a[3]=[s("li",null,[s("i",null,"可变的"),i("，使用 "),s("code",null,"var"),i(" 关键字")],-1),s("li",null,[s("i",null,"只读的"),i("，使用 "),s("code",null,"val"),i(" 关键字")],-1)])),_:1}),a[5]||(a[5]=s("p",null,[s("code",null,"Message"),i(" 类使用 "),s("code",null,"val"),i(" 关键字声明了两个属性："),s("code",null,"id"),i(" 和 "),s("code",null,"text"),i("。 编译器将自动为这两个属性生成 getter。 在 "),s("code",null,"Message"),i(" 类实例创建后，这些属性的值将无法重新赋值。 ")],-1))]),_:1}),l(p,{title:"可空的类型 – String?"},{default:n(()=>[a[7]||(a[7]=s("p",null,[i("Kotlin 提供"),s("a",{href:"/kotlin/null-safety#nullable-types-and-non-nullable-types"},"对可空的类型内置支持"),i("。在 Kotlin 中，类型系统区分可以持有 "),s("code",null,"null"),i(" 的引用（"),s("i",null,"可空引用"),i("）和不能持有 "),s("code",null,"null"),i(" 的引用（"),s("i",null,"非空引用"),i("）。"),s("br"),i(" 例如，"),s("code",null,"String"),i(" 类型的普通变量不能持有 "),s("code",null,"null"),i("。为了允许 null 值，你可以通过写入 "),s("code",null,"String?"),i(" 将变量声明为可空的字符串。 ")],-1)),a[8]||(a[8]=s("p",null,[s("code",null,"Message"),i(" 类的 "),s("code",null,"id"),i(" 属性此次被声明为可空的类型。 因此，可以通过传递 "),s("code",null,"null"),i(" 作为 "),s("code",null,"id"),i(" 的值来创建 "),s("code",null,"Message"),i(" 类的实例： ")],-1)),l(h,{lang:"kotlin"},{default:n(()=>a[6]||(a[6]=[i(' Message(null, "Hello!") ')])),_:1})]),_:1})]),_:1})]),s("li",null,[a[18]||(a[18]=e(`<p>在 <code>MessageController.kt</code> 文件中，用返回 <code>Message</code> 对象 list 的 <code>listMessages()</code> 函数替换 <code>index()</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MessageController.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.GetMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.RequestMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.RestController</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RestController</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MessageController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @GetMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listMessages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bonjour!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Privet!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,2)),l(o,{collapsible:"true"},{default:n(()=>[l(p,{title:"集合 – listOf()"},{default:n(()=>[a[11]||(a[11]=s("p",null,[i("Kotlin 标准库为基本集合类型提供实现：set、list 和 map。"),s("br"),i(" 每种集合类型可以是"),s("i",null,"只读的"),i("或"),s("i",null,"可变的"),i("：")],-1)),l(k,null,{default:n(()=>a[10]||(a[10]=[s("li",null,[s("i",null,"只读集合"),i("提供访问集合元素的操作。")],-1),s("li",null,[s("i",null,"可变集合"),i("还提供用于添加、移除和更新其元素的写入操作。")],-1)])),_:1}),a[12]||(a[12]=s("p",null,"Kotlin 标准库也提供了相应的工厂函数来创建这些集合的实例。 ",-1)),a[13]||(a[13]=s("p",null,[i("在本教程中，你使用 "),s("a",{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/list-of.html"},[s("code",null,"listOf()")]),i(" 函数创建 "),s("code",null,"Message"),i(" 对象 list。 这是创建"),s("i",null,"只读"),i("对象 list 的工厂函数：你无法从 list 中添加或移除元素。"),s("br"),i(" 如果需要对 list 执行写入操作，请调用 "),s("a",{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/mutable-list-of.html"},[s("code",null,"mutableListOf()")]),i(" 函数以创建可变 list 实例。 ")],-1))]),_:1}),l(p,{title:"尾部逗号"},{default:n(()=>[a[15]||(a[15]=s("p",null,[s("a",{href:"/kotlin/coding-conventions#trailing-commas"},"尾部逗号"),i("是系列元素中"),s("strong",null,"最后一个项"),i("之后的逗号符号：")],-1)),l(h,{lang:"kotlin"},{default:n(()=>a[14]||(a[14]=[i(' Message("3", "Privet!"), ')])),_:1}),a[16]||(a[16]=s("p",null,"这是 Kotlin 语法的一个便捷特性，完全是可选的——即使没有它们，你的代码也能正常工作。 ",-1)),a[17]||(a[17]=s("p",null,[i("在上面的示例中，创建 "),s("code",null,"Message"),i(" 对象 list 包含在 "),s("code",null,"listOf()"),i(" 函数的最后一个实参之后添加的尾部逗号。")],-1))]),_:1})]),_:1})])]),a[23]||(a[23]=e(`<p><code>MessageController</code> 的响应现在将是一个包含 <code>Message</code> 对象集合的 JSON 文档。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果 Jackson 库在 classpath 中，Spring 应用程序中的任何控制器默认都会渲染 JSON 响应。 由于你<a href="/kotlin/jvm-create-project-with-spring-boot#explore-the-project-gradle-build-file">在 <code>build.gradle.kts</code> 文件中指定了 <code>spring-boot-starter-web</code> 依赖项</a>，因此你获得了 Jackson 作为<i>传递性</i>依赖项。 因此，如果端点返回可以序列化为 JSON 的数据结构，应用程序将以 JSON 文档形式响应。</p></div><p>以下是 <code>DemoApplication.kt</code>、<code>MessageController.kt</code> 和 <code>Message.kt</code> 文件的完整代码：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DemoApplication.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.boot.autoconfigure.SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.boot.runApplication</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DemoApplication</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DemoApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MessageController.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.GetMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.RequestMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.RestController</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RestController</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MessageController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @GetMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listMessages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bonjour!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Privet!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Message.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="运行应用程序" tabindex="-1">运行应用程序 <a class="header-anchor" href="#运行应用程序" aria-label="Permalink to &quot;运行应用程序&quot;">​</a></h2><p>Spring 应用程序已准备就绪，可以运行：</p><ol><li><p>再次运行应用程序。</p></li><li><p>应用程序启动后，打开以下 URL：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://localhost:8080</span></span></code></pre></div><p>你将看到一个包含 JSON 格式消息集合的页面：</p><p><img src="`+F+'" alt="运行应用程序" width="800"></p></li></ol><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在本教程的下一部分，你将为你的项目添加和配置数据库，并进行 HTTP 请求。</p><p><strong><a href="/kotlin/jvm-spring-boot-add-db-support">继续下一章</a></strong></p>',12))])}const P=y(b,[["render",B]]);export{N as __pageData,P as default};
