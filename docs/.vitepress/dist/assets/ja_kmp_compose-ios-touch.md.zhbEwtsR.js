import{_ as i,C as a,c as l,o as r,ag as e,G as c}from"./chunks/framework.Bksy39di.js";const h=JSON.parse('{"title":"iOSでの相互運用におけるタッチイベントの処理","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-ios-touch.md","filePath":"ja/kmp/compose-ios-touch.md","lastUpdated":1755516278000}'),p={name:"ja/kmp/compose-ios-touch.md"};function s(d,o,n,m,u,_){const t=a("secondary-label");return r(),l("div",null,[o[0]||(o[0]=e('<h1 id="iosでの相互運用におけるタッチイベントの処理" tabindex="-1">iOSでの相互運用におけるタッチイベントの処理 <a class="header-anchor" href="#iosでの相互運用におけるタッチイベントの処理" aria-label="Permalink to &quot;iOSでの相互運用におけるタッチイベントの処理&quot;">​</a></h1><p>iOSでは、Compose MultiplatformはネイティブのUIKitおよびSwiftUIフレームワークと統合できます。このような統合の課題の1つはタッチの処理です。Compose MultiplatformアプリにネイティブUI要素が含まれる場合、アプリはコンテキストに応じて、相互運用領域でのタッチに異なる反応をする必要があるかもしれません。</p><p>現在、Compose Multiplatformには、ネイティブビューでのタッチイベントを処理するための戦略が1つしかありません。それは、すべてのタッチはネイティブUIによって完全に処理され、Composeはそれらが全く発生したことを認識しない、というものです。</p><h2 id="相互運用スクロールにおけるタッチ" tabindex="-1">相互運用スクロールにおけるタッチ <a class="header-anchor" href="#相互運用スクロールにおけるタッチ" aria-label="Permalink to &quot;相互運用スクロールにおけるタッチ&quot;">​</a></h2><p>相互運用領域での各タッチが下層のネイティブUI要素に即座に送信されると、コンテナコンポーザブルは同じタッチに反応できません。これが引き起こす最も明らかな問題はスクロールです。相互運用領域がスクロール可能なコンテナ内にある場合、ユーザーはその領域が次のように動作することを期待するかもしれません。</p><ul><li>操作したいときにタッチに反応する。</li><li>親コンテナをスクロールしたいときにタッチに反応しない。</li></ul><p>これを解決するため、Compose Multiplatformは<a href="https://developer.apple.com/documentation/uikit/uiscrollview" target="_blank" rel="noreferrer"><code>UIScrollView</code></a>に触発された動作を実装しています。タッチが最初に検出されると、短い遅延（150ミリ秒）があり、これによりアプリがコンテナにそれを認識させるかどうかを決定できます。</p><ul><li>この遅延中にComposeコンポーネントがタッチイベントを消費した場合、Compose MultiplatformはそのタッチシーケンスをネイティブUI要素に認識させません。</li><li>遅延中にイベントが消費されない場合、残りのタッチシーケンスでは、Compose MultiplatformがネイティブUIに制御を渡します。</li></ul><p>したがって、スクロール可能なコンテンツでは、ユーザーがタッチをホールドすると、UIはこれをネイティブ要素と対話する意図と解釈します。タッチシーケンスが速い場合、ユーザーはおそらく親要素と対話したいと考えています。</p><p>相互運用ビューが操作されることを意図していない場合は、事前にすべてのタッチ処理を無効にできます。それには、<code>isInteractive</code>パラメーターを<code>false</code>に設定して、<code>UIKitView</code>または<code>UIKitViewController</code>のコンストラクタを呼び出します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>相互運用ビュー内でのジェスチャー処理のより複雑なシナリオには、<code>UIGestureRecognizer</code>クラスまたはそのさまざまなサブクラスを使用してください。これにより、ネイティブ相互運用ビューで目的のジェスチャーを検出したり、Composeでのタッチシーケンスをキャンセルしたりできます。</p></div><h2 id="タッチ処理の戦略の選択" tabindex="-1">タッチ処理の戦略の選択 <a class="header-anchor" href="#タッチ処理の戦略の選択" aria-label="Permalink to &quot;タッチ処理の戦略の選択&quot;">​</a></h2>',12)),c(t,{ref:"Experimental"},null,512),o[1]||(o[1]=e('<p>Compose Multiplatform 1.8.2では、相互運用UIをよりきめ細かく制御するための実験的APIも試すことができます。</p><p><code>UIKitView</code>または<code>UIKitViewController</code>の新しいコンストラクタは、引数として<code>UIKitInteropProperties</code>オブジェクトを受け入れます。このオブジェクトを使用すると、次を設定できます。</p><ul><li>指定された相互運用ビューの<code>interactionMode</code>パラメーター。これにより、タッチ処理戦略を選択できます。</li><li>相互運用ビューのアクセシビリティ動作を変更する<code>isNativeAccessibilityEnabled</code>オプション。</li></ul><p><code>interactionMode</code>パラメーターは、<code>Cooperative</code>または<code>NonCooperative</code>のいずれかに設定できます。</p><ul><li><code>Cooperative</code>モードは、上記で説明したように新しいデフォルトです。Compose Multiplatformはタッチ処理に遅延を導入します。実験的APIを使用すると、デフォルトの150ミリ秒の代わりに異なる値を試すことで、この遅延を微調整できます。</li><li><code>NonCooperative</code>モードは以前の戦略を使用し、Compose Multiplatformは相互運用ビューでいかなるタッチイベントも処理しません。上記で挙げられた一般的な問題にもかかわらず、相互運用タッチがComposeレベルで処理される必要が全くないと確信している場合には、このモードが有用です。</li><li>ネイティブUIとのいかなるインタラクションも無効にするには、コンストラクタに<code>interactionMode = null</code>を渡します。</li></ul><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>Compose Multiplatformにおける<a href="./compose-uikit-integration">UIKit</a>および<a href="./compose-swiftui-integration">SwiftUI</a>の統合についてさらに詳しく学びましょう。</p>',7))])}const I=i(p,[["render",s]]);export{h as __pageData,I as default};
