import{_ as p,a as k,b as h}from"./chunks/variable-optimised-out.gsL8I0ER.js";import{_ as d,a as g,b as c,c as u}from"./chunks/coroutine-debug-3.D_74SQPz.js";import{_ as E,C as o,c as m,o as y,ag as a,j as i,a as t,G as n,w as l}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"IntelliJ IDEA를 사용하여 코루틴 디버그하기 – 튜토리얼","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/debug-coroutines-with-idea.md","filePath":"ko/kotlin/debug-coroutines-with-idea.md","lastUpdated":1754307826000}'),F={name:"ko/kotlin/debug-coroutines-with-idea.md"};function b(_,s,C,f,B,x){const e=o("tab"),r=o("tabs");return y(),m("div",null,[s[6]||(s[6]=a('<h1 id="intellij-idea를-사용하여-코루틴-디버그하기-–-튜토리얼" tabindex="-1">IntelliJ IDEA를 사용하여 코루틴 디버그하기 – 튜토리얼 <a class="header-anchor" href="#intellij-idea를-사용하여-코루틴-디버그하기-–-튜토리얼" aria-label="Permalink to &quot;IntelliJ IDEA를 사용하여 코루틴 디버그하기 – 튜토리얼&quot;">​</a></h1><p>이 튜토리얼에서는 IntelliJ IDEA를 사용하여 Kotlin 코루틴을 생성하고 디버그하는 방법을 보여줍니다.</p><p>이 튜토리얼은 <a href="/ko/kotlin/coroutines-guide">코루틴</a> 개념에 대한 사전 지식이 있다고 가정합니다.</p><h2 id="코루틴-생성하기" tabindex="-1">코루틴 생성하기 <a class="header-anchor" href="#코루틴-생성하기" aria-label="Permalink to &quot;코루틴 생성하기&quot;">​</a></h2>',4)),i("ol",null,[s[4]||(s[4]=i("li",null,[i("p",null,[t("IntelliJ IDEA에서 Kotlin 프로젝트를 엽니다. 프로젝트가 없다면 "),i("a",{href:"/ko/kotlin/jvm-get-started#create-a-project"},"새로 생성"),t("하세요.")])],-1)),i("li",null,[s[2]||(s[2]=i("p",null,[t("Gradle 프로젝트에서 "),i("code",null,"kotlinx.coroutines"),t(" 라이브러리를 사용하려면 "),i("code",null,"build.gradle(.kts)"),t("에 다음 의존성을 추가하세요.")],-1)),n(r,{group:"build-script"},{default:l(()=>[n(e,{title:"코틀린","group-key":"kotlin"},{default:l(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(e,{title:"그루비","group-key":"groovy"},{default:l(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2'")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[3]||(s[3]=i("p",null,[t("다른 빌드 시스템의 경우 "),i("a",{href:"https://github.com/Kotlin/kotlinx.coroutines#using-in-your-projects",target:"_blank",rel:"noreferrer"},[i("code",null,"kotlinx.coroutines"),t(" README")]),t("의 지침을 참조하세요.")],-1))]),s[5]||(s[5]=a(`<li><p><code>src/main/kotlin</code>에서 <code>Main.kt</code> 파일을 엽니다.</p><p><code>src</code> 디렉터리에는 Kotlin 소스 파일과 리소스가 포함되어 있습니다. <code>Main.kt</code> 파일에는 <code>Hello World!</code>를 출력할 샘플 코드가 포함되어 있습니다.</p></li><li><p><code>main()</code> 함수에서 코드를 변경하세요:</p><ul><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html" target="_blank" rel="noreferrer"><code>runBlocking()</code></a> 블록을 사용하여 코루틴을 래핑합니다.</li><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html" target="_blank" rel="noreferrer"><code>async()</code></a> 함수를 사용하여 지연된 값 <code>a</code>와 <code>b</code>를 계산하는 코루틴을 생성합니다.</li><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html" target="_blank" rel="noreferrer"><code>await()</code></a> 함수를 사용하여 계산 결과를 기다립니다.</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html" target="_blank" rel="noreferrer"><code>println()</code></a> 함수를 사용하여 계산 상태와 곱셈 결과를 출력합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m computing part of the answer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m computing another part of the answer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The answer is \${a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Build Project</strong>를 클릭하여 코드를 빌드하세요.</p><p><img src="`+p+'" alt="애플리케이션 빌드"></p></li>',3))]),s[7]||(s[7]=a('<h2 id="코루틴-디버그하기" tabindex="-1">코루틴 디버그하기 <a class="header-anchor" href="#코루틴-디버그하기" aria-label="Permalink to &quot;코루틴 디버그하기&quot;">​</a></h2><ol><li><p><code>println()</code> 함수 호출이 있는 줄에 중단점을 설정하세요.</p><p><img src="'+d+'" alt="콘솔 애플리케이션 빌드"></p></li><li><p>화면 상단의 실행 구성 옆에 있는 <strong>Debug</strong>를 클릭하여 디버그 모드에서 코드를 실행하세요.</p><p><img src="'+k+'" alt="콘솔 애플리케이션 빌드"></p><p><strong>Debug</strong> 도구 창이 나타납니다:</p><ul><li><strong>Frames</strong> 탭에는 호출 스택이 포함됩니다.</li><li><strong>Variables</strong> 탭에는 현재 컨텍스트의 변수가 포함됩니다.</li><li><strong>Coroutines</strong> 탭에는 실행 중이거나 일시 중단된 코루틴에 대한 정보가 포함됩니다. 세 개의 코루틴이 표시됩니다. 첫 번째 코루틴은 <strong>RUNNING</strong> 상태이고, 나머지 두 코루틴은 <strong>CREATED</strong> 상태입니다.</li></ul><p><img src="'+g+'" alt="코루틴 디버그"></p></li><li><p><strong>Debug</strong> 도구 창에서 <strong>Resume Program</strong>을 클릭하여 디버거 세션을 재개하세요:</p><p><img src="'+c+'" alt="코루틴 디버그"></p><p>이제 <strong>Coroutines</strong> 탭에 다음이 표시됩니다:</p><ul><li>첫 번째 코루틴은 <strong>SUSPENDED</strong> 상태입니다. 이는 값을 곱할 수 있도록 기다리고 있음을 의미합니다.</li><li>두 번째 코루틴은 <code>a</code> 값을 계산하고 있으며 <strong>RUNNING</strong> 상태입니다.</li><li>세 번째 코루틴은 <strong>CREATED</strong> 상태이며 <code>b</code> 값을 계산하고 있지 않습니다.</li></ul></li><li><p><strong>Debug</strong> 도구 창에서 <strong>Resume Program</strong>을 클릭하여 디버거 세션을 재개하세요:</p><p><img src="'+u+'" alt="콘솔 애플리케이션 빌드"></p><p>이제 <strong>Coroutines</strong> 탭에 다음이 표시됩니다:</p><ul><li>첫 번째 코루틴은 <strong>SUSPENDED</strong> 상태입니다. 이는 값을 곱할 수 있도록 기다리고 있음을 의미합니다.</li><li>두 번째 코루틴은 값을 계산하고 사라졌습니다.</li><li>세 번째 코루틴은 <code>b</code> 값을 계산하고 있으며 <strong>RUNNING</strong> 상태입니다.</li></ul></li></ol><p>IntelliJ IDEA 디버거를 사용하면 각 코루틴을 더 깊이 파고들어 코드를 디버그할 수 있습니다.</p><h3 id="최적화로-제외된-변수" tabindex="-1">최적화로 제외된 변수 <a class="header-anchor" href="#최적화로-제외된-변수" aria-label="Permalink to &quot;최적화로 제외된 변수&quot;">​</a></h3><p><code>suspend</code> 함수를 사용하면 디버거에서 변수 이름 옆에 &quot;was optimized out&quot; 텍스트가 표시될 수 있습니다:</p><p><img src="'+h+'" alt="변수 &quot;a&quot;가 최적화로 제외됨" width="480"></p><p>이 텍스트는 변수의 수명이 단축되어 더 이상 존재하지 않음을 의미합니다. 변수 값을 볼 수 없기 때문에 최적화로 제외된 변수가 있는 코드를 디버그하기 어렵습니다. <code>-Xdebug</code> 컴파일러 옵션을 사용하여 이 동작을 비활성화할 수 있습니다.</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><strong>이 플래그를 프로덕션 환경에서 절대 사용하지 마세요</strong>: <code>-Xdebug</code>는 <a href="https://youtrack.jetbrains.com/issue/KT-48678/Coroutine-debugger-disable-was-optimised-out-compiler-feature#focus=Comments-27-6015585.0-0" target="_blank" rel="noreferrer">메모리 누수를 유발할 수 있습니다</a>.</p></div>',8))])}const T=E(F,[["render",b]]);export{I as __pageData,T as default};
