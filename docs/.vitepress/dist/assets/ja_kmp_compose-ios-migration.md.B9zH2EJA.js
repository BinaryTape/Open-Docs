import{_ as i,c as o,o as a,ag as t}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"iOS 移行ガイド","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-ios-migration.md","filePath":"ja/kmp/compose-ios-migration.md","lastUpdated":1755516278000}'),s={name:"ja/kmp/compose-ios-migration.md"};function l(c,e,d,n,r,p){return a(),o("div",null,e[0]||(e[0]=[t(`<h1 id="ios-移行ガイド" tabindex="-1">iOS 移行ガイド <a class="header-anchor" href="#ios-移行ガイド" aria-label="Permalink to &quot;iOS 移行ガイド&quot;">​</a></h1><p>このページでは、Compose Multiplatform ライブラリをプロジェクトで新しいバージョン、特に1.7.0以降にアップグレードする際のiOSに関する考慮事項について説明します。</p><h2 id="compose-multiplatform-1-6-11-から-1-7-0" tabindex="-1">Compose Multiplatform 1.6.11 から 1.7.0 <a class="header-anchor" href="#compose-multiplatform-1-6-11-から-1-7-0" aria-label="Permalink to &quot;Compose Multiplatform 1.6.11 から 1.7.0&quot;">​</a></h2><h3 id="uikitview-と-uikitviewcontroller-から-background-パラメータが削除されました" tabindex="-1">UIKitView と UIKitViewController から background パラメータが削除されました <a class="header-anchor" href="#uikitview-と-uikitviewcontroller-から-background-パラメータが削除されました" aria-label="Permalink to &quot;UIKitView と UIKitViewController から background パラメータが削除されました&quot;">​</a></h3><p>非推奨の <code>UIKitView</code> および <code>UIKitViewController</code> API には <code>background</code> パラメータがありましたが、新しいAPIにはありません。 このパラメータは冗長と見なされ、削除されました。</p><ul><li>新しいインスタンスの相互運用ビューの背景を設定する必要がある場合は、<code>factory</code> パラメータを使用して設定できます。</li><li>背景を更新可能にする必要がある場合は、対応するコードを <code>update</code> ラムダに記述してください。</li></ul><h3 id="タッチやジェスチャーが期待通りに動作しなくなる可能性があります" tabindex="-1">タッチやジェスチャーが期待通りに動作しなくなる可能性があります <a class="header-anchor" href="#タッチやジェスチャーが期待通りに動作しなくなる可能性があります" aria-label="Permalink to &quot;タッチやジェスチャーが期待通りに動作しなくなる可能性があります&quot;">​</a></h3><p>新しいデフォルトの<a href="./compose-ios-touch">タッチ動作</a>では、タッチが相互運用ビュー向けか、そのビューのComposeコンテナ向けかを判断するために遅延を使用します。ユーザーは、相互運用ビューがタッチを受け取る前に少なくとも150ミリ秒間静止している必要があります。</p><p>Compose Multiplatform に従来通りタッチを処理させる必要がある場合は、新しい実験的な <code>UIKitInteropProperties</code> コンストラクタを検討してください。 これには <code>interactionMode</code> パラメータがあり、これを <code>UIKitInteropInteractionMode.NonCooperative</code> に設定すると、Compose がタッチを相互運用ビューに直接転送するようになります。</p><p>このコンストラクタは実験的とされています。なぜなら、最終的には相互運用ビューのインタラクション可能性を単一のブール値フラグで記述することを意図しているためです。 <code>interactionMode</code> パラメータで明示的に記述されている動作は、将来的に自動的に導出される可能性が高いです。</p><h3 id="accessibilityenabled-が-isnativeaccessibilityenabled-に置き換えられ、デフォルトでオフになりました" tabindex="-1">accessibilityEnabled が isNativeAccessibilityEnabled に置き換えられ、デフォルトでオフになりました <a class="header-anchor" href="#accessibilityenabled-が-isnativeaccessibilityenabled-に置き換えられ、デフォルトでオフになりました" aria-label="Permalink to &quot;accessibilityEnabled が isNativeAccessibilityEnabled に置き換えられ、デフォルトでオフになりました&quot;">​</a></h3><p>古い <code>UIKitView</code> および <code>UIKitViewController</code> コンストラクタの <code>accessibilityEnabled</code> パラメータは、<code>UIKitInteropProperties.isNativeAccessibilityEnabled</code> プロパティとして利用できるよう移動され、名前が変更されました。 また、デフォルトでは <code>false</code> に設定されています。</p><p><code>isNativeAccessibilityEnabled</code> プロパティは、結合されたComposeサブツリーをネイティブのアクセシビリティ解決で汚染します。 そのため、相互運用ビューの豊富なアクセシビリティ機能（Webビューなど）が必要な場合を除き、<code>true</code> に設定することは推奨されません。</p><p>このプロパティとそのデフォルト値の根拠については、<a href="https://github.com/JetBrains/compose-multiplatform-core/blob/jb-main/compose/ui/ui/src/uikitMain/kotlin/androidx/compose/ui/viewinterop/UIKitInteropProperties.uikit.kt" target="_blank" rel="noreferrer"><code>UIKitInteropProperties</code> クラスのコード内ドキュメント</a>を参照してください。</p><h3 id="onresize-パラメータが削除されました" tabindex="-1">onResize パラメータが削除されました <a class="header-anchor" href="#onresize-パラメータが削除されました" aria-label="Permalink to &quot;onResize パラメータが削除されました&quot;">​</a></h3><p>古い <code>UIKitView</code> および <code>UIKitViewController</code> コンストラクタの <code>onResize</code> パラメータは、<code>rect</code> 引数に基づいてカスタムフレームを設定しましたが、Compose レイアウト自体には影響を与えなかったため、直感的に使用できませんでした。 さらに、<code>onResize</code> パラメータのデフォルト実装は、相互運用ビューのフレームを適切に設定する必要があり、ビューを適切にクリッピングするための実装詳細が含まれていました。 </p><p><code>onResize</code> なしで対処する方法：</p><ul><li>相互運用ビューのフレーム変更に反応する必要がある場合、以下が可能です： <ul><li>相互運用 <code>UIView</code> の <a href="https://developer.apple.com/documentation/uikit/uiview/1622482-layoutsubviews" target="_blank" rel="noreferrer"><code>layoutSubviews</code></a> をオーバーライドする</li><li>相互運用 <code>UIViewController</code> の <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621398-viewdidlayoutsubviews" target="_blank" rel="noreferrer"><code>viewDidLayoutSubviews</code></a> をオーバーライドする</li><li>または <code>Modifier</code> チェーンに <code>onGloballyPositioned</code> を追加する。</li></ul></li><li>相互運用ビューのフレームを設定する必要がある場合は、対応するComposeモディファイア、例えば <code>size</code>、<code>fillMaxSize</code> などを使用してください。</li></ul><h3 id="いくつかの-onreset-使用パターンが無効になりました" tabindex="-1">いくつかの onReset 使用パターンが無効になりました <a class="header-anchor" href="#いくつかの-onreset-使用パターンが無効になりました" aria-label="Permalink to &quot;いくつかの onReset 使用パターンが無効になりました&quot;">​</a></h3><p>非nullの <code>onReset</code> ラムダを <code>remember { UIView() }</code> と一緒に使用するのは正しくありません。</p><p>次のコードを考慮してください：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> view </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIKitView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { view }, onReset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p><code>UIKitView</code> がコンポジションに入るとき、<code>factory</code> または <code>onReset</code> のいずれかが呼び出され、両方が呼び出されることはありません。 そのため、<code>onReset</code> がnullでない場合、記憶された <code>view</code> は画面に表示されているものと異なる可能性があります： コンポーザブルはコンポジションを離れ、ビューのインスタンスを残すことができ、そのインスタンスは <code>factory</code> を使用して新しいものを割り当てるのではなく、<code>onReset</code> でリセットされた後に再利用されます。</p><p>このような間違いを避けるために、コンストラクタで <code>onReset</code> の値を指定しないでください。 関数がコンポジションに入ったコンテキストに基づいて、相互運用ビュー内からコールバックを実行する必要がある場合があります： この場合、<code>onReset</code> で <code>update</code> を使用して、コールバックをビュー内に保存することを検討してください。</p>`,24)]))}const u=i(s,[["render",l]]);export{k as __pageData,u as default};
