import{_ as e,c as t,o as r,ag as n}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlin 1.7 互換性ガイド","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/compatibility-guide-17.md","filePath":"ja/kotlin/compatibility-guide-17.md","lastUpdated":1754307826000}'),l={name:"ja/kotlin/compatibility-guide-17.md"};function a(s,o,i,c,d,p){return r(),t("div",null,o[0]||(o[0]=[n('<h1 id="kotlin-1-7-互換性ガイド" tabindex="-1">Kotlin 1.7 互換性ガイド <a class="header-anchor" href="#kotlin-1-7-互換性ガイド" aria-label="Permalink to &quot;Kotlin 1.7 互換性ガイド&quot;">​</a></h1><p><em><a href="/ja/kotlin/kotlin-evolution-principles">言語をモダンに保つ</a></em> と <em><a href="/ja/kotlin/kotlin-evolution-principles">快適なアップデート</a></em> は、 Kotlin言語設計の基本原則です。前者は、言語の進化を妨げる構成要素は削除されるべきであると述べ、 後者は、コードの移行を可能な限りスムーズにするために、この削除が事前に十分に伝達されるべきであると述べています。</p><p>ほとんどの言語変更は、更新チェンジログやコンパイラの警告など、他のチャネルを通じてすでに発表されていますが、 このドキュメントではそれらすべてをまとめ、Kotlin 1.6からKotlin 1.7への移行に関する完全なリファレンスを提供します。</p><h2 id="基本用語" tabindex="-1">基本用語 <a class="header-anchor" href="#基本用語" aria-label="Permalink to &quot;基本用語&quot;">​</a></h2><p>このドキュメントでは、いくつかの種類の互換性について説明します。</p><ul><li><em>ソース互換性</em>：ソース非互換な変更により、これまで（エラーや警告なしで）正常にコンパイルされていたコードがコンパイルできなくなること</li><li><em>バイナリ互換性</em>：2つのバイナリアーティファクトがバイナリ互換であるとは、それらを交換してもロードエラーやリンクエラーが発生しないことを指す</li><li><em>動作互換性</em>：変更が動作非互換であるとは、同じプログラムが変更適用前後で異なる動作を示すことを指す</li></ul><p>これらの定義は純粋なKotlinに対してのみ与えられることに注意してください。他の言語の視点からのKotlinコードの互換性 （例えばJavaからの互換性）は、このドキュメントの範囲外です。</p><h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><h3 id="セーフコールの結果を常にnull許容にする" tabindex="-1">セーフコールの結果を常にNULL許容にする <a class="header-anchor" href="#セーフコールの結果を常にnull許容にする" aria-label="Permalink to &quot;セーフコールの結果を常にNULL許容にする&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46860" target="_blank" rel="noreferrer">KT-46860</a></p><p><strong>コンポーネント</strong>: Core language</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: Kotlin 1.7 では、セーフコールのレシーバーがNULLを許容しない場合でも、セーフコールの結果の型が常にNULL許容であると見なされます。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>&lt;1.3: NULLを許容しないレシーバーへの不要なセーフコールに対して警告を報告する</li><li>1.6.20: 不要なセーフコールの結果の型が次のバージョンで変更されることを追加で警告する</li><li>1.7.0: セーフコールの結果の型をNULL許容に変更する。 一時的に1.7以前の動作に戻すには<code>-XXLanguage:-SafeCallsAreAlwaysNullable</code>を使用できます。</li></ul></blockquote><h3 id="スーパークラスの抽象メンバーへのスーパーコールの委譲を禁止する" tabindex="-1">スーパークラスの抽象メンバーへのスーパーコールの委譲を禁止する <a class="header-anchor" href="#スーパークラスの抽象メンバーへのスーパーコールの委譲を禁止する" aria-label="Permalink to &quot;スーパークラスの抽象メンバーへのスーパーコールの委譲を禁止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-45508" target="_blank" rel="noreferrer">KT-45508</a>, <a href="https://youtrack.jetbrains.com/issue/KT-49017" target="_blank" rel="noreferrer">KT-49017</a>, <a href="https://youtrack.jetbrains.com/issue/KT-38078" target="_blank" rel="noreferrer">KT-38078</a></p><p><strong>コンポーネント</strong>: Core language</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: Kotlinは、明示的または暗黙的なスーパーコールが、スーパーインターフェースにデフォルト実装がある場合でも、スーパークラスの_抽象_メンバーに委譲されている場合に、コンパイルエラーを報告します。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.5.20: すべての抽象メンバーをオーバーライドしない非抽象クラスが使用された場合に警告を導入する</li><li>1.7.0: スーパーコールが実際にスーパークラスの抽象メンバーにアクセスしている場合にエラーを報告する</li><li>1.7.0: <code>-Xjvm-default=all</code> または <code>-Xjvm-default=all-compatibility</code> 互換性モードが有効になっている場合にエラーを報告する。プログレッシブモードでエラーを報告する。</li><li>&gt;=1.8.0: すべてのケースでエラーを報告する</li></ul></blockquote><h3 id="非公開のプライマリコンストラクタで宣言されたパブリックプロパティを介した非公開型の公開を禁止する" tabindex="-1">非公開のプライマリコンストラクタで宣言されたパブリックプロパティを介した非公開型の公開を禁止する <a class="header-anchor" href="#非公開のプライマリコンストラクタで宣言されたパブリックプロパティを介した非公開型の公開を禁止する" aria-label="Permalink to &quot;非公開のプライマリコンストラクタで宣言されたパブリックプロパティを介した非公開型の公開を禁止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-28078" target="_blank" rel="noreferrer">KT-28078</a></p><p><strong>コンポーネント</strong>: Core language</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: Kotlinは、プライベートなプライマリコンストラクタ内で非公開型を持つパブリックプロパティの宣言を禁止します。別のパッケージからそのようなプロパティにアクセスすると、<code>IllegalAccessError</code>が発生する可能性があります。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.3.20: 非公開型を持ち、非公開コンストラクタで宣言されたパブリックプロパティに対して警告を報告する</li><li>1.6.20: この警告をプログレッシブモードでエラーに昇格させる</li><li>1.7.0: この警告をエラーに昇格させる</li></ul></blockquote><h3 id="列挙名で修飾された未初期化の列挙エントリへのアクセスを禁止する" tabindex="-1">列挙名で修飾された未初期化の列挙エントリへのアクセスを禁止する <a class="header-anchor" href="#列挙名で修飾された未初期化の列挙エントリへのアクセスを禁止する" aria-label="Permalink to &quot;列挙名で修飾された未初期化の列挙エントリへのアクセスを禁止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-41124" target="_blank" rel="noreferrer">KT-41124</a></p><p><strong>コンポーネント</strong>: Core language</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: Kotlin 1.7では、列挙のstaticイニシャライザブロックから、列挙名で修飾された未初期化の列挙エントリへのアクセスが禁止されます。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.7.0: 列挙のstaticイニシャライザブロックから未初期化の列挙エントリにアクセスされた場合にエラーを報告する</li></ul></blockquote><h3 id="when条件ブランチおよびループ条件における複雑な真偽値式の定数計算を禁止する" tabindex="-1">when条件ブランチおよびループ条件における複雑な真偽値式の定数計算を禁止する <a class="header-anchor" href="#when条件ブランチおよびループ条件における複雑な真偽値式の定数計算を禁止する" aria-label="Permalink to &quot;when条件ブランチおよびループ条件における複雑な真偽値式の定数計算を禁止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-39883" target="_blank" rel="noreferrer">KT-39883</a></p><p><strong>コンポーネント</strong>: Core language</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: Kotlinは、リテラルの<code>true</code>および<code>false</code>以外の定数真偽値式に基づいて、whenの網羅性や制御フローの仮定を行わなくなります。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.5.30: <code>when</code>ブランチまたはループ条件内の複雑な定数真偽値式に基づいて、<code>when</code>の網羅性または制御フローの到達可能性が決定される場合に警告を報告する</li><li>1.7.0: この警告をエラーに昇格させる</li></ul></blockquote><h3 id="列挙型、sealed型、およびboolean型のwhenステートメントをデフォルトで網羅的にする" tabindex="-1">列挙型、sealed型、およびBoolean型のwhenステートメントをデフォルトで網羅的にする <a class="header-anchor" href="#列挙型、sealed型、およびboolean型のwhenステートメントをデフォルトで網羅的にする" aria-label="Permalink to &quot;列挙型、sealed型、およびBoolean型のwhenステートメントをデフォルトで網羅的にする&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47709" target="_blank" rel="noreferrer">KT-47709</a></p><p><strong>コンポーネント</strong>: Core language</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: Kotlin 1.7では、列挙型、sealed型、またはBoolean型を対象とする<code>when</code>ステートメントが網羅的でない場合にエラーを報告します。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.6.0: 列挙型、sealed型、またはBoolean型を対象とする<code>when</code>ステートメントが網羅的でない場合に警告を導入する（プログレッシブモードではエラー）</li><li>1.7.0: この警告をエラーに昇格させる</li></ul></blockquote><h3 id="when-with-subjectにおける紛らわしい文法を非推奨化する" tabindex="-1">when-with-subjectにおける紛らわしい文法を非推奨化する <a class="header-anchor" href="#when-with-subjectにおける紛らわしい文法を非推奨化する" aria-label="Permalink to &quot;when-with-subjectにおける紛らわしい文法を非推奨化する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48385" target="_blank" rel="noreferrer">KT-48385</a></p><p><strong>コンポーネント</strong>: Core language</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: Kotlin 1.6では、<code>when</code>条件式におけるいくつかの紛らわしい文法構造が非推奨になりました。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.6.20: 影響を受ける式に対して非推奨警告を導入する</li><li>1.8.0: この警告をエラーに昇格させる</li><li>&gt;= 1.8: いくつかの非推奨の構造を新しい言語機能のために再利用する</li></ul></blockquote><h3 id="型のnull許容性強化の改善" tabindex="-1">型のNULL許容性強化の改善 <a class="header-anchor" href="#型のnull許容性強化の改善" aria-label="Permalink to &quot;型のNULL許容性強化の改善&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48623" target="_blank" rel="noreferrer">KT-48623</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: Kotlin 1.7では、Javaコード内の型のNULL許容性アノテーションのロードおよび解釈方法が変更されます。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.4.30: より厳密な型のNULL許容性がエラーにつながる可能性のあるケースに対して警告を導入する</li><li>1.7.0: Java型のNULL許容性をより厳密に推論する。一時的に1.7以前の動作に戻すには<code>-XXLanguage:-TypeEnhancementImprovementsInStrictMode</code>を使用できます。</li></ul></blockquote><h3 id="異なる数値型間の暗黙的な型変換を防止する" tabindex="-1">異なる数値型間の暗黙的な型変換を防止する <a class="header-anchor" href="#異なる数値型間の暗黙的な型変換を防止する" aria-label="Permalink to &quot;異なる数値型間の暗黙的な型変換を防止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48645" target="_blank" rel="noreferrer">KT-48645</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>非互換変更の種類</strong>: behavioral</p><p><strong>概要</strong>: Kotlinは、セマンティック上はその型へのダウンキャストのみが必要な場合に、数値がプリミティブ数値型に自動的に変換されるのを回避します。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>&lt; 1.5.30: 影響を受けるすべてのケースで古い動作</li><li>1.5.30: 生成されたプロパティデリゲートアクセサにおけるダウンキャスト動作を修正する。一時的に1.5.30修正以前の動作に戻すには<code>-Xuse-old-backend</code>を使用できます。</li><li>&gt;= 1.7.20: 他の影響を受けるケースでのダウンキャスト動作を修正する</li></ul></blockquote><h3 id="コンパイラオプション-xjvm-default-の-enable-および-compatibility-モードを非推奨化する" tabindex="-1">コンパイラオプション <code>-Xjvm-default</code> の <code>enable</code> および <code>compatibility</code> モードを非推奨化する <a class="header-anchor" href="#コンパイラオプション-xjvm-default-の-enable-および-compatibility-モードを非推奨化する" aria-label="Permalink to &quot;コンパイラオプション `-Xjvm-default` の `enable` および `compatibility` モードを非推奨化する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46329" target="_blank" rel="noreferrer">KT-46329</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: Kotlin 1.6.20では、<code>-Xjvm-default</code>コンパイラオプションの<code>enable</code>および<code>compatibility</code>モードの使用について警告します。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.6.20: <code>-Xjvm-default</code>コンパイラオプションの<code>enable</code>および<code>compatibility</code>モードについて警告を導入する</li><li>&gt;= 1.8.0: この警告をエラーに昇格させる</li></ul></blockquote><h3 id="末尾ラムダを持つsuspendという名前の関数への呼び出しを禁止する" tabindex="-1">末尾ラムダを持つ<code>suspend</code>という名前の関数への呼び出しを禁止する <a class="header-anchor" href="#末尾ラムダを持つsuspendという名前の関数への呼び出しを禁止する" aria-label="Permalink to &quot;末尾ラムダを持つ`suspend`という名前の関数への呼び出しを禁止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-22562" target="_blank" rel="noreferrer">KT-22562</a></p><p><strong>コンポーネント</strong>: Core language</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: Kotlin 1.6では、関数型を単一の引数として末尾ラムダで渡す<code>suspend</code>という名前のユーザー関数を呼び出すことができなくなります。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.3.0: そのような関数呼び出しに対して警告を導入する</li><li>1.6.0: この警告をエラーに昇格させる</li><li>1.7.0: <code>{</code>の前の<code>suspend</code>がキーワードとして解析されるように、言語文法に変更を導入する</li></ul></blockquote><h3 id="基底クラスが別のモジュールにある場合、基底クラスのプロパティに対するスマートキャストを禁止する" tabindex="-1">基底クラスが別のモジュールにある場合、基底クラスのプロパティに対するスマートキャストを禁止する <a class="header-anchor" href="#基底クラスが別のモジュールにある場合、基底クラスのプロパティに対するスマートキャストを禁止する" aria-label="Permalink to &quot;基底クラスが別のモジュールにある場合、基底クラスのプロパティに対するスマートキャストを禁止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-52629" target="_blank" rel="noreferrer">KT-52629</a></p><p><strong>コンポーネント</strong>: Core language</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: Kotlin 1.7では、スーパークラスが別のモジュールに存在する場合、そのスーパークラスのプロパティに対するスマートキャストが許可されなくなります。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.6.0: 別のモジュールにあるスーパークラスで宣言されたプロパティに対するスマートキャストについて警告を報告する</li><li>1.7.0: この警告をエラーに昇格させる。一時的に1.7以前の動作に戻すには<code>-XXLanguage:-ProhibitSmartcastsOnPropertyFromAlienBaseClass</code>を使用できます。</li></ul></blockquote><h3 id="型推論時の意味のある制約を無視しない" tabindex="-1">型推論時の意味のある制約を無視しない <a class="header-anchor" href="#型推論時の意味のある制約を無視しない" aria-label="Permalink to &quot;型推論時の意味のある制約を無視しない&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-52668" target="_blank" rel="noreferrer">KT-52668</a></p><p><strong>コンポーネント</strong>: Core language</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: Kotlin 1.4−1.6では、不適切な最適化により、型推論時の一部の型制約が無視されていました。これにより、健全でないコードが記述可能となり、実行時に<code>ClassCastException</code>が発生する可能性がありました。Kotlin 1.7では、これらの制約が考慮されるため、健全でないコードが禁止されます。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.5.20: すべての型推論制約が考慮された場合に型ミスマッチが発生する式に対して警告を報告する</li><li>1.7.0: すべての制約を考慮に入れることで、この警告をエラーに昇格させる。一時的に1.7以前の動作に戻すには<code>-XXLanguage:-ProperTypeInferenceConstraintsProcessing</code>を使用できます。</li></ul></blockquote><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><h3 id="コレクションのminおよびmax関数の戻り値を徐々に非null許容に変更する" tabindex="-1">コレクションのminおよびmax関数の戻り値を徐々に非NULL許容に変更する <a class="header-anchor" href="#コレクションのminおよびmax関数の戻り値を徐々に非null許容に変更する" aria-label="Permalink to &quot;コレクションのminおよびmax関数の戻り値を徐々に非NULL許容に変更する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-38854" target="_blank" rel="noreferrer">KT-38854</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: Kotlin 1.7では、コレクションの<code>min</code>および<code>max</code>関数の戻り値の型が非NULL許容に変更されます。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.4.0: <code>...OrNull</code>関数を同義語として導入し、影響を受けるAPIを非推奨にする（詳細は課題を参照）</li><li>1.5.0: 影響を受けるAPIの非推奨レベルをエラーに昇格させる</li><li>1.6.0: 非推奨関数をパブリックAPIから非表示にする</li><li>1.7.0: 影響を受けるAPIを再導入するが、戻り値の型は非NULL許容とする</li></ul></blockquote><h3 id="浮動小数点配列関数-contains、indexof、lastindexof-を非推奨化する" tabindex="-1">浮動小数点配列関数 <code>contains</code>、<code>indexOf</code>、<code>lastIndexOf</code> を非推奨化する <a class="header-anchor" href="#浮動小数点配列関数-contains、indexof、lastindexof-を非推奨化する" aria-label="Permalink to &quot;浮動小数点配列関数 `contains`、`indexOf`、`lastIndexOf` を非推奨化する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-28753" target="_blank" rel="noreferrer">KT-28753</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: Kotlinは、全順序ではなくIEEE-754順序を使用して値を比較する浮動小数点配列関数<code>contains</code>、<code>indexOf</code>、<code>lastIndexOf</code>を非推奨にします。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.4.0: 影響を受ける関数を警告付きで非推奨にする</li><li>1.6.0: 非推奨レベルをエラーに昇格させる</li><li>1.7.0: 非推奨関数をパブリックAPIから非表示にする</li></ul></blockquote><h3 id="kotlin-dom-および-kotlin-browser-パッケージからの宣言を-kotlinx-に移行する" tabindex="-1"><code>kotlin.dom</code> および <code>kotlin.browser</code> パッケージからの宣言を <code>kotlinx.*</code> に移行する <a class="header-anchor" href="#kotlin-dom-および-kotlin-browser-パッケージからの宣言を-kotlinx-に移行する" aria-label="Permalink to &quot;`kotlin.dom` および `kotlin.browser` パッケージからの宣言を `kotlinx.*` に移行する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-39330" target="_blank" rel="noreferrer">KT-39330</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib (JS)</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: <code>kotlin.dom</code>および<code>kotlin.browser</code>パッケージからの宣言は、stdlibからの抽出に備えて対応する<code>kotlinx.*</code>パッケージに移動されます。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.4.0: <code>kotlinx.dom</code>および<code>kotlinx.browser</code>パッケージに代替APIを導入する</li><li>1.4.0: <code>kotlin.dom</code>および<code>kotlin.browser</code>パッケージのAPIを非推奨にし、上記の新しいAPIを代替として提案する</li><li>1.6.0: 非推奨レベルをエラーに昇格させる</li><li>&gt;= 1.8: 非推奨関数をstdlibから削除する</li><li>&gt;= 1.8: <code>kotlinx.*</code>パッケージ内のAPIを別のライブラリに移動する</li></ul></blockquote><h3 id="一部のjs専用apiを非推奨化する" tabindex="-1">一部のJS専用APIを非推奨化する <a class="header-anchor" href="#一部のjs専用apiを非推奨化する" aria-label="Permalink to &quot;一部のJS専用APIを非推奨化する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48587" target="_blank" rel="noreferrer">KT-48587</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib (JS)</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: stdlib内の一部のJS専用関数が削除のために非推奨になりました。これらには、<code>String.concat(String)</code>、<code>String.match(regex: String)</code>、<code>String.matches(regex: String)</code>、および比較関数を取る配列の<code>sort</code>関数（例: <code>Array&lt;out T&gt;.sort(comparison: (a: T, b: T) -&gt; Int)</code>)が含まれます。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.6.0: 影響を受ける関数を警告付きで非推奨にする</li><li>1.8.0: 非推奨レベルをエラーに昇格させる</li><li>1.9.0: 非推奨関数をパブリックAPIから削除する</li></ul></blockquote><h2 id="ツール" tabindex="-1">ツール <a class="header-anchor" href="#ツール" aria-label="Permalink to &quot;ツール&quot;">​</a></h2><h3 id="kotlingradlesubplugin-クラスの削除" tabindex="-1"><code>KotlinGradleSubplugin</code> クラスの削除 <a class="header-anchor" href="#kotlingradlesubplugin-クラスの削除" aria-label="Permalink to &quot;`KotlinGradleSubplugin` クラスの削除&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48831" target="_blank" rel="noreferrer">KT-48831</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: <code>KotlinGradleSubplugin</code> クラスを削除します。代わりに<code>KotlinCompilerPluginSupportPlugin</code> クラスを使用してください。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.6.0: 非推奨レベルをエラーに昇格させる</li><li>1.7.0: 非推奨クラスを削除する</li></ul></blockquote><h3 id="useir-コンパイラオプションの削除" tabindex="-1"><code>useIR</code> コンパイラオプションの削除 <a class="header-anchor" href="#useir-コンパイラオプションの削除" aria-label="Permalink to &quot;`useIR` コンパイラオプションの削除&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48847" target="_blank" rel="noreferrer">KT-48847</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: 非推奨で隠されていた<code>useIR</code>コンパイラオプションを削除します。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.5.0: 非推奨レベルを警告に昇格させる</li><li>1.6.0: オプションを非表示にする</li><li>1.7.0: 非推奨オプションを削除する</li></ul></blockquote><h3 id="kapt-use-worker-api-gradle-プロパティの非推奨化" tabindex="-1"><code>kapt.use.worker.api</code> Gradle プロパティの非推奨化 <a class="header-anchor" href="#kapt-use-worker-api-gradle-プロパティの非推奨化" aria-label="Permalink to &quot;`kapt.use.worker.api` Gradle プロパティの非推奨化&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48826" target="_blank" rel="noreferrer">KT-48826</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: kaptをGradle Workers API経由で実行できるようにする<code>kapt.use.worker.api</code>プロパティ（デフォルト: true）を非推奨にします。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.6.20: 非推奨レベルを警告に昇格させる</li><li>&gt;= 1.8.0: このプロパティを削除する</li></ul></blockquote><h3 id="kotlin-experimental-coroutines-gradle-dslオプションとkotlin-coroutines-gradleプロパティの削除" tabindex="-1"><code>kotlin.experimental.coroutines</code> Gradle DSLオプションと<code>kotlin.coroutines</code> Gradleプロパティの削除 <a class="header-anchor" href="#kotlin-experimental-coroutines-gradle-dslオプションとkotlin-coroutines-gradleプロパティの削除" aria-label="Permalink to &quot;`kotlin.experimental.coroutines` Gradle DSLオプションと`kotlin.coroutines` Gradleプロパティの削除&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-50494" target="_blank" rel="noreferrer">KT-50494</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: <code>kotlin.experimental.coroutines</code> Gradle DSLオプションと<code>kotlin.coroutines</code>プロパティを削除します。</p><p><strong>非推奨化サイクル</strong>:</p><ul><li>1.6.20: 非推奨レベルを警告に昇格させる</li><li>1.7.0: DSLオプション、それを囲む<code>experimental</code>ブロック、およびプロパティを削除する</li></ul></blockquote><h3 id="useexperimentalannotation-コンパイラオプションの非推奨化" tabindex="-1"><code>useExperimentalAnnotation</code> コンパイラオプションの非推奨化 <a class="header-anchor" href="#useexperimentalannotation-コンパイラオプションの非推奨化" aria-label="Permalink to &quot;`useExperimentalAnnotation` コンパイラオプションの非推奨化&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47763" target="_blank" rel="noreferrer">KT-47763</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: モジュール内のAPIの使用をオプトインするために使用されていた、隠しGradle関数<code>useExperimentalAnnotation()</code>を削除します。代わりに<code>optIn()</code>関数を使用できます。</p><p><strong>非推奨化サイクル:</strong></p><ul><li>1.6.0: 非推奨オプションを非表示にする</li><li>1.7.0: 非推奨オプションを削除する</li></ul></blockquote><h3 id="kotlin-compiler-execution-strategy-システムプロパティの非推奨化" tabindex="-1"><code>kotlin.compiler.execution.strategy</code> システムプロパティの非推奨化 <a class="header-anchor" href="#kotlin-compiler-execution-strategy-システムプロパティの非推奨化" aria-label="Permalink to &quot;`kotlin.compiler.execution.strategy` システムプロパティの非推奨化&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-51830" target="_blank" rel="noreferrer">KT-51830</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: コンパイラの実行戦略を選択するために使用されていた<code>kotlin.compiler.execution.strategy</code>システムプロパティを非推奨にします。代わりにGradleプロパティ<code>kotlin.compiler.execution.strategy</code>またはコンパイルタスクプロパティ<code>compilerExecutionStrategy</code>を使用してください。</p><p><strong>非推奨化サイクル:</strong></p><ul><li>1.7.0: 非推奨レベルを警告に昇格させる</li><li>&gt; 1.7.0: プロパティを削除する</li></ul></blockquote><h3 id="kotlinoptions-jdkhome-コンパイラオプションの削除" tabindex="-1"><code>kotlinOptions.jdkHome</code> コンパイラオプションの削除 <a class="header-anchor" href="#kotlinoptions-jdkhome-コンパイラオプションの削除" aria-label="Permalink to &quot;`kotlinOptions.jdkHome` コンパイラオプションの削除&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46541" target="_blank" rel="noreferrer">KT-46541</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: デフォルトの<code>JAVA_HOME</code>の代わりに、指定された場所からカスタムJDKをクラスパスに含めるために使用されていた<code>kotlinOptions.jdkHome</code>コンパイラオプションを削除します。代わりに<a href="/ja/kotlin/gradle-configure-project#gradle-java-toolchains-support">Javaツールチェーン</a>を使用してください。</p><p><strong>非推奨化サイクル:</strong></p><ul><li>1.5.30: 非推奨レベルを警告に昇格させる</li><li>&gt; 1.7.0: オプションを削除する</li></ul></blockquote><h3 id="nostdlib-コンパイラオプションの削除" tabindex="-1"><code>noStdlib</code> コンパイラオプションの削除 <a class="header-anchor" href="#nostdlib-コンパイラオプションの削除" aria-label="Permalink to &quot;`noStdlib` コンパイラオプションの削除&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-49011" target="_blank" rel="noreferrer">KT-49011</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: <code>noStdlib</code>コンパイラオプションを削除します。Gradleプラグインは、Kotlin標準ライブラリが存在するかどうかを制御するために<code>kotlin.stdlib.default.dependency=true</code>プロパティを使用します。</p><p><strong>非推奨化サイクル:</strong></p><ul><li>1.5.0: 非推奨レベルを警告に昇格させる</li><li>1.7.0: オプションを削除する</li></ul></blockquote><h3 id="kotlin2js-および-kotlin-dce-plugin-プラグインの削除" tabindex="-1"><code>kotlin2js</code> および <code>kotlin-dce-plugin</code> プラグインの削除 <a class="header-anchor" href="#kotlin2js-および-kotlin-dce-plugin-プラグインの削除" aria-label="Permalink to &quot;`kotlin2js` および `kotlin-dce-plugin` プラグインの削除&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48276" target="_blank" rel="noreferrer">KT-48276</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: <code>kotlin2js</code> および <code>kotlin-dce-plugin</code> プラグインを削除します。<code>kotlin2js</code>の代わりに、新しい<code>org.jetbrains.kotlin.js</code>プラグインを使用してください。デッドコード削除（DCE）は、Kotlin/JS Gradleプラグインが適切に設定されている場合に機能します。</p><p><strong>非推奨化サイクル:</strong></p><ul><li>1.4.0: 非推奨レベルを警告に昇格させる</li><li>1.7.0: プラグインを削除する</li></ul></blockquote><h3 id="コンパイルタスクの変更点" tabindex="-1">コンパイルタスクの変更点 <a class="header-anchor" href="#コンパイルタスクの変更点" aria-label="Permalink to &quot;コンパイルタスクの変更点&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-32805" target="_blank" rel="noreferrer">KT-32805</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: source</p><p><strong>概要</strong>: Kotlinのコンパイルタスクは、Gradleの<code>AbstractCompile</code>タスクを継承しなくなったため、Kotlinユーザーのスクリプトでは<code>sourceCompatibility</code>および<code>targetCompatibility</code>入力が利用できなくなります。<code>SourceTask.stableSources</code>入力は利用できなくなりました。<code>sourceFilesExtensions</code>入力は削除されました。非推奨の<code>Gradle destinationDir: File</code>出力は<code>destinationDirectory: DirectoryProperty</code>出力に置き換えられました。<code>KotlinCompile</code>タスクの<code>classpath</code>プロパティは非推奨です。</p><p><strong>非推奨化サイクル:</strong></p><ul><li>1.7.0: 入力は利用できなくなり、出力は置き換えられ、<code>classpath</code>プロパティは非推奨となる</li></ul></blockquote>',64)]))}const h=e(l,[["render",a]]);export{u as __pageData,h as default};
