import{_ as a,c as o,o as i,ag as l}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"關鍵字與運算子","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/keyword-reference.md","filePath":"zh-Hant/kotlin/keyword-reference.md","lastUpdated":1754307826000}'),t={name:"zh-Hant/kotlin/keyword-reference.md"};function n(r,e,c,d,s,h){return i(),o("div",null,e[0]||(e[0]=[l('<h1 id="關鍵字與運算子" tabindex="-1">關鍵字與運算子 <a class="header-anchor" href="#關鍵字與運算子" aria-label="Permalink to &quot;關鍵字與運算子&quot;">​</a></h1><h2 id="硬關鍵字" tabindex="-1">硬關鍵字 <a class="header-anchor" href="#硬關鍵字" aria-label="Permalink to &quot;硬關鍵字&quot;">​</a></h2><p>以下標記總是會被解釋為關鍵字，並且不能用作識別符號：</p><ul><li><code>as</code><ul><li>用於<a href="/zh-Hant/kotlin/typecasts#unsafe-cast-operator">型別轉換</a>。</li><li>為<a href="/zh-Hant/kotlin/packages#imports">匯入</a>指定別名</li></ul></li><li><code>as?</code> 用於<a href="/zh-Hant/kotlin/typecasts#safe-nullable-cast-operator">安全型別轉換</a>。</li><li><code>break</code> <a href="/zh-Hant/kotlin/returns">終止迴圈的執行</a>。</li><li><code>class</code> 宣告一個<a href="/zh-Hant/kotlin/classes">類別</a>。</li><li><code>continue</code> <a href="/zh-Hant/kotlin/returns">跳到最近封閉迴圈的下一個步驟</a>。</li><li><code>do</code> 開始一個 <a href="/zh-Hant/kotlin/control-flow#while-loops">do/while 迴圈</a>（帶有後置條件的迴圈）。</li><li><code>else</code> 定義當條件為假時執行的<a href="/zh-Hant/kotlin/control-flow#if-expression">if 表達式</a>分支。</li><li><code>false</code> 指定<a href="/zh-Hant/kotlin/booleans">Boolean 型別</a>的 &#39;false&#39; 值。</li><li><code>for</code> 開始一個 <a href="/zh-Hant/kotlin/control-flow#for-loops">for 迴圈</a>。</li><li><code>fun</code> 宣告一個<a href="/zh-Hant/kotlin/functions">函式</a>。</li><li><code>if</code> 開始一個 <a href="/zh-Hant/kotlin/control-flow#if-expression">if 表達式</a>。</li><li><code>in</code><ul><li>在<a href="/zh-Hant/kotlin/control-flow#for-loops">for 迴圈</a>中指定正在迭代的物件。</li><li>作為中綴運算子用於檢查值是否屬於<a href="/zh-Hant/kotlin/ranges">一個範圍</a>、一個集合或<a href="/zh-Hant/kotlin/operator-overloading#in-operator">定義了 &#39;contains&#39; 方法</a>的其他實體。</li><li>在<a href="/zh-Hant/kotlin/control-flow#when-expressions-and-statements">when 表達式</a>中用於相同的目的。</li><li>將型別參數標記為<a href="/zh-Hant/kotlin/generics#declaration-site-variance">逆變</a>。</li></ul></li><li><code>!in</code><ul><li>作為運算子用於檢查值是否<strong>不</strong>屬於<a href="/zh-Hant/kotlin/ranges">一個範圍</a>、一個集合或<a href="/zh-Hant/kotlin/operator-overloading#in-operator">定義了 &#39;contains&#39; 方法</a>的其他實體。</li><li>在<a href="/zh-Hant/kotlin/control-flow#when-expressions-and-statements">when 表達式</a>中用於相同的目的。</li></ul></li><li><code>interface</code> 宣告一個<a href="/zh-Hant/kotlin/interfaces">介面</a>。</li><li><code>is</code><ul><li>檢查<a href="/zh-Hant/kotlin/typecasts#is-and-is-operators">一個值是否具有特定型別</a>。</li><li>在<a href="/zh-Hant/kotlin/control-flow#when-expressions-and-statements">when 表達式</a>中用於相同的目的。</li></ul></li><li><code>!is</code><ul><li>檢查<a href="/zh-Hant/kotlin/typecasts#is-and-is-operators">一個值是否<strong>不</strong>具有特定型別</a>。</li><li>在<a href="/zh-Hant/kotlin/control-flow#when-expressions-and-statements">when 表達式</a>中用於相同的目的。</li></ul></li><li><code>null</code> 是一個表示不指向任何物件的物件參照常數。</li><li><code>object</code> 同時宣告<a href="/zh-Hant/kotlin/object-declarations">一個類別及其實例</a>。</li><li><code>package</code> 指定<a href="/zh-Hant/kotlin/packages">當前檔案的套件</a>。</li><li><code>return</code> <a href="/zh-Hant/kotlin/returns">從最近的封閉函式或匿名函式返回</a>。</li><li><code>super</code><ul><li><a href="/zh-Hant/kotlin/inheritance#calling-the-superclass-implementation">參照超類別方法或屬性的實作</a>。</li><li>從次要建構函式<a href="/zh-Hant/kotlin/classes#inheritance">呼叫超類別建構函式</a>。</li></ul></li><li><code>this</code><ul><li>參照<a href="/zh-Hant/kotlin/this-expressions">當前的接收者</a>。</li><li>從次要建構函式<a href="/zh-Hant/kotlin/classes#constructors">呼叫同一類別的另一個建構函式</a>。</li></ul></li><li><code>throw</code> <a href="/zh-Hant/kotlin/exceptions">拋出一個例外</a>。</li><li><code>true</code> 指定<a href="/zh-Hant/kotlin/booleans">Boolean 型別</a>的 &#39;true&#39; 值。</li><li><code>try</code> <a href="/zh-Hant/kotlin/exceptions">開始一個例外處理區塊</a>。</li><li><code>typealias</code> 宣告一個<a href="/zh-Hant/kotlin/type-aliases">型別別名</a>。</li><li><code>typeof</code> 保留供將來使用。</li><li><code>val</code> 宣告一個唯讀<a href="/zh-Hant/kotlin/properties">屬性</a>或<a href="/zh-Hant/kotlin/basic-syntax#variables">區域變數</a>。</li><li><code>var</code> 宣告一個可變<a href="/zh-Hant/kotlin/properties">屬性</a>或<a href="/zh-Hant/kotlin/basic-syntax#variables">區域變數</a>。</li><li><code>when</code> 開始一個 <a href="/zh-Hant/kotlin/control-flow#when-expressions-and-statements">when 表達式</a>（執行給定分支之一）。</li><li><code>while</code> 開始一個 <a href="/zh-Hant/kotlin/control-flow#while-loops">while 迴圈</a>（帶有前置條件的迴圈）。</li></ul><h2 id="軟關鍵字" tabindex="-1">軟關鍵字 <a class="header-anchor" href="#軟關鍵字" aria-label="Permalink to &quot;軟關鍵字&quot;">​</a></h2><p>以下標記在適用上下文中充當關鍵字，並且在其他上下文中可以用作識別符號：</p><ul><li><code>by</code><ul><li><a href="/zh-Hant/kotlin/delegation">將介面的實作委派給另一個物件</a>。</li><li><a href="/zh-Hant/kotlin/delegated-properties">將屬性存取器的實作委派給另一個物件</a>。</li></ul></li><li><code>catch</code> 開始一個<a href="/zh-Hant/kotlin/exceptions">處理特定例外型別</a>的區塊。</li><li><code>constructor</code> 宣告一個<a href="/zh-Hant/kotlin/classes#constructors">主要或次要建構函式</a>。</li><li><code>delegate</code> 用作<a href="/zh-Hant/kotlin/annotations#annotation-use-site-targets">註解使用站點目標</a>。</li><li><code>dynamic</code> 在 Kotlin/JS 程式碼中參照一個<a href="/zh-Hant/kotlin/dynamic-type">動態型別</a>。</li><li><code>field</code> 用作<a href="/zh-Hant/kotlin/annotations#annotation-use-site-targets">註解使用站點目標</a>。</li><li><code>file</code> 用作<a href="/zh-Hant/kotlin/annotations#annotation-use-site-targets">註解使用站點目標</a>。</li><li><code>finally</code> 開始一個<a href="/zh-Hant/kotlin/exceptions">在 try 區塊退出時總是會執行</a>的區塊。</li><li><code>get</code><ul><li>宣告<a href="/zh-Hant/kotlin/properties#getters-and-setters">屬性的 getter</a>。</li><li>用作<a href="/zh-Hant/kotlin/annotations#annotation-use-site-targets">註解使用站點目標</a>。</li></ul></li><li><code>import</code> <a href="/zh-Hant/kotlin/packages">將另一個套件中的宣告匯入到當前檔案</a>。</li><li><code>init</code> 開始一個<a href="/zh-Hant/kotlin/classes#constructors">初始化器區塊</a>。</li><li><code>param</code> 用作<a href="/zh-Hant/kotlin/annotations#annotation-use-site-targets">註解使用站點目標</a>。</li><li><code>property</code> 用作<a href="/zh-Hant/kotlin/annotations#annotation-use-site-targets">註解使用站點目標</a>。</li><li><code>receiver</code> 用作<a href="/zh-Hant/kotlin/annotations#annotation-use-site-targets">註解使用站點目標</a>。</li><li><code>set</code><ul><li>宣告<a href="/zh-Hant/kotlin/properties#getters-and-setters">屬性的 setter</a>。</li><li>用作<a href="/zh-Hant/kotlin/annotations#annotation-use-site-targets">註解使用站點目標</a>。</li></ul></li><li><code>setparam</code> 用作<a href="/zh-Hant/kotlin/annotations#annotation-use-site-targets">註解使用站點目標</a>。</li><li><code>value</code> 與 <code>class</code> 關鍵字一同宣告<a href="/zh-Hant/kotlin/inline-classes">行內類別</a>。</li><li><code>where</code> 指定<a href="/zh-Hant/kotlin/generics#upper-bounds">泛型型別參數的約束</a>。</li></ul><h2 id="修飾符關鍵字" tabindex="-1">修飾符關鍵字 <a class="header-anchor" href="#修飾符關鍵字" aria-label="Permalink to &quot;修飾符關鍵字&quot;">​</a></h2><p>以下標記在宣告的修飾符列表中充當關鍵字，並且在其他上下文中可以用作識別符號：</p><ul><li><code>abstract</code> 將類別或成員標記為<a href="/zh-Hant/kotlin/classes#abstract-classes">抽象的</a>。</li><li><code>actual</code> 在<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">多平台專案</a>中表示平台特定的實作。</li><li><code>annotation</code> 宣告一個<a href="/zh-Hant/kotlin/annotations">註解類別</a>。</li><li><code>companion</code> 宣告一個<a href="/zh-Hant/kotlin/object-declarations#companion-objects">伴生物件</a>。</li><li><code>const</code> 將屬性標記為<a href="/zh-Hant/kotlin/properties#compile-time-constants">編譯期常數</a>。</li><li><code>crossinline</code> 禁止<a href="/zh-Hant/kotlin/inline-functions#returns">傳遞給行內函式的 Lambda 中進行非區域返回</a>。</li><li><code>data</code> 指示編譯器為<a href="/zh-Hant/kotlin/data-classes">類別生成規範成員</a>。</li><li><code>enum</code> 宣告一個<a href="/zh-Hant/kotlin/enum-classes">列舉</a>。</li><li><code>expect</code> 將宣告標記為<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">平台特定</a>，預期在平台模組中實作。</li><li><code>external</code> 將宣告標記為在 Kotlin 外部實作（可透過 <a href="/zh-Hant/kotlin/java-interop#using-jni-with-kotlin">JNI</a> 或在 <a href="/zh-Hant/kotlin/js-interop#external-modifier">JavaScript</a> 中存取）。</li><li><code>final</code> 禁止<a href="/zh-Hant/kotlin/inheritance#overriding-methods">覆寫成員</a>。</li><li><code>infix</code> 允許使用<a href="/zh-Hant/kotlin/functions#infix-notation">中綴表示法</a>呼叫函式。</li><li><code>inline</code> 告知編譯器在<a href="/zh-Hant/kotlin/inline-functions">呼叫站點行內化函式及傳遞給它的 Lambda</a>。</li><li><code>inner</code> 允許從<a href="/zh-Hant/kotlin/nested-classes">巢狀類別</a>參照外部類別實例。</li><li><code>internal</code> 將宣告標記為在<a href="/zh-Hant/kotlin/visibility-modifiers">當前模組中可見</a>。</li><li><code>lateinit</code> 允許在建構函式之外初始化<a href="/zh-Hant/kotlin/properties#late-initialized-properties-and-variables">不可為 null 的屬性</a>。</li><li><code>noinline</code> 關閉<a href="/zh-Hant/kotlin/inline-functions#noinline">傳遞給行內函式的 Lambda 的行內化</a>。</li><li><code>open</code> 允許<a href="/zh-Hant/kotlin/classes#inheritance">繼承類別或覆寫成員</a>。</li><li><code>operator</code> 將函式標記為<a href="/zh-Hant/kotlin/operator-overloading">運算子多載或實作約定</a>。</li><li><code>out</code> 將型別參數標記為<a href="/zh-Hant/kotlin/generics#declaration-site-variance">共變</a>。</li><li><code>override</code> 將成員標記為<a href="/zh-Hant/kotlin/inheritance#overriding-methods">超類別成員的覆寫</a>。</li><li><code>private</code> 將宣告標記為在<a href="/zh-Hant/kotlin/visibility-modifiers">當前類別或檔案中可見</a>。</li><li><code>protected</code> 將宣告標記為在<a href="/zh-Hant/kotlin/visibility-modifiers">當前類別及其子類別中可見</a>。</li><li><code>public</code> 將宣告標記為<a href="/zh-Hant/kotlin/visibility-modifiers">在任何地方都可見</a>。</li><li><code>reified</code> 將行內函式的型別參數標記為<a href="/zh-Hant/kotlin/inline-functions#reified-type-parameters">執行時可存取</a>。</li><li><code>sealed</code> 宣告一個<a href="/zh-Hant/kotlin/sealed-classes">密封類別</a>（一個子類化受限制的類別）。</li><li><code>suspend</code> 將函式或 Lambda 標記為暫停（可用作<a href="/zh-Hant/kotlin/coroutines-overview">協程</a>）。</li><li><code>tailrec</code> 將函式標記為<a href="/zh-Hant/kotlin/functions#tail-recursive-functions">尾遞迴</a>（允許編譯器用迭代替換遞迴）。</li><li><code>vararg</code> 允許<a href="/zh-Hant/kotlin/functions#variable-number-of-arguments-varargs">為參數傳遞可變數量的引數</a>。</li></ul><h2 id="特殊識別符號" tabindex="-1">特殊識別符號 <a class="header-anchor" href="#特殊識別符號" aria-label="Permalink to &quot;特殊識別符號&quot;">​</a></h2><p>以下識別符號由編譯器在特定上下文中定義，並且在其他上下文中可以用作常規識別符號：</p><ul><li><code>field</code> 在屬性存取器內部用於參照<a href="/zh-Hant/kotlin/properties#backing-fields">屬性的支援欄位</a>。</li><li><code>it</code> 在 Lambda 內部用於<a href="/zh-Hant/kotlin/lambdas#it-implicit-name-of-a-single-parameter">隱式參照其參數</a>。</li></ul><h2 id="運算子與特殊符號" tabindex="-1">運算子與特殊符號 <a class="header-anchor" href="#運算子與特殊符號" aria-label="Permalink to &quot;運算子與特殊符號&quot;">​</a></h2><p>Kotlin 支援以下運算子與特殊符號：</p><ul><li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> - 數學運算子 <ul><li><code>*</code> 也用於<a href="/zh-Hant/kotlin/functions#variable-number-of-arguments-varargs">將陣列傳遞給 vararg 參數</a>。</li></ul></li><li><code>=</code><ul><li>指派運算子。</li><li>用於指定<a href="/zh-Hant/kotlin/functions#parameters-with-default-values">參數的預設值</a>。</li></ul></li><li><code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code> - <a href="/zh-Hant/kotlin/operator-overloading#augmented-assignments">擴增指派運算子</a>。</li><li><code>++</code>, <code>--</code> - <a href="/zh-Hant/kotlin/operator-overloading#increments-and-decrements">遞增和遞減運算子</a>。</li><li><code>&amp;&amp;</code>, <code>||</code>, <code>!</code> - 邏輯 &#39;and&#39;、&#39;or&#39;、&#39;not&#39; 運算子（對於位元運算，請改用相對應的<a href="/zh-Hant/kotlin/numbers#operations-on-numbers">中綴函式</a>）。</li><li><code>==</code>, <code>!=</code> - <a href="/zh-Hant/kotlin/operator-overloading#equality-and-inequality-operators">相等運算子</a>（對於非基本型別，翻譯為呼叫 <code>equals()</code>）。</li><li><code>===</code>, <code>!==</code> - <a href="/zh-Hant/kotlin/equality#referential-equality">參照相等運算子</a>。</li><li><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> - <a href="/zh-Hant/kotlin/operator-overloading#comparison-operators">比較運算子</a>（對於非基本型別，翻譯為呼叫 <code>compareTo()</code>）。</li><li><code>[</code>, <code>]</code> - <a href="/zh-Hant/kotlin/operator-overloading#indexed-access-operator">索引存取運算子</a>（翻譯為呼叫 <code>get</code> 和 <code>set</code>）。</li><li><code>!!</code> <a href="/zh-Hant/kotlin/null-safety#not-null-assertion-operator">斷言一個表達式不可為 null</a>。</li><li><code>?.</code> 執行<a href="/zh-Hant/kotlin/null-safety#safe-call-operator">安全呼叫</a>（如果接收者不可為 null，則呼叫方法或存取屬性）。</li><li><code>?:</code> 如果左側值為 null 則取右側值（<a href="/zh-Hant/kotlin/null-safety#elvis-operator">elvis 運算子</a>）。</li><li><code>::</code> 建立<a href="/zh-Hant/kotlin/reflection#function-references">成員參照</a>或<a href="/zh-Hant/kotlin/reflection#class-references">類別參照</a>。</li><li><code>..</code>, <code>..&lt;</code> 建立<a href="/zh-Hant/kotlin/ranges">範圍</a>。</li><li><code>:</code> 在宣告中將名稱與型別分開。</li><li><code>?</code> 將型別標記為<a href="/zh-Hant/kotlin/null-safety#nullable-types-and-non-nullable-types">可為 null 的</a>。</li><li><code>-&gt;</code><ul><li>分隔<a href="/zh-Hant/kotlin/lambdas#lambda-expression-syntax">Lambda 表達式</a>的參數與主體。</li><li>分隔<a href="/zh-Hant/kotlin/lambdas#function-types">函式型別</a>的參數與回傳型別宣告。</li><li>分隔<a href="/zh-Hant/kotlin/control-flow#when-expressions-and-statements">when 表達式</a>分支的條件與主體。</li></ul></li><li><code>@</code><ul><li>引入一個<a href="/zh-Hant/kotlin/annotations#usage">註解</a>。</li><li>引入或參照一個<a href="/zh-Hant/kotlin/returns#break-and-continue-labels">迴圈標籤</a>。</li><li>引入或參照一個<a href="/zh-Hant/kotlin/returns#return-to-labels">Lambda 標籤</a>。</li><li>參照<a href="/zh-Hant/kotlin/this-expressions#qualified-this">外部範圍的 &#39;this&#39; 表達式</a>。</li><li>參照<a href="/zh-Hant/kotlin/inheritance#calling-the-superclass-implementation">外部超類別</a>。</li></ul></li><li><code>;</code> 分隔同一行上的多個語句。</li><li><code>$</code> 在<a href="/zh-Hant/kotlin/strings#string-templates">字串模板</a>中參照變數或表達式。</li><li><code>_</code><ul><li>在<a href="/zh-Hant/kotlin/lambdas#underscore-for-unused-variables">Lambda 表達式</a>中替換未使用的參數。</li><li>在<a href="/zh-Hant/kotlin/destructuring-declarations#underscore-for-unused-variables">解構宣告</a>中替換未使用的參數。</li></ul></li></ul><p>對於運算子優先順序，請參閱 Kotlin 文法中<a href="https://kotlinlang.org/docs/reference/grammar.html#expressions" target="_blank" rel="noreferrer">此參照</a>。</p>',17)]))}const k=a(t,[["render",n]]);export{u as __pageData,k as default};
