import{_ as s,C as n,c as f,o as h,ag as i,G as a,w as l,j as e,a as r}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/native-migration-guide.md","filePath":"kotlin/native-migration-guide.md","lastUpdated":1754307826000}'),p={name:"kotlin/native-migration-guide.md"};function u(k,t,g,m,b,v){const d=n("list"),o=n("def"),c=n("deflist");return h(),f("div",null,[t[5]||(t[5]=i("",11)),a(c,{style:{}},{default:l(()=>[a(o,{title:"kotlinx.coroutines"},{default:l(()=>[t[1]||(t[1]=e("p",null,[r("更新到 1.6.0 或更高版本。请勿使用带有 "),e("code",null,"native-mt"),r(" 后缀的版本。")],-1)),t[2]||(t[2]=e("p",null,"新的内存管理器还有一些需要注意的特殊之处：",-1)),a(d,null,{default:l(()=>t[0]||(t[0]=[e("li",null,"所有常见的原语（channels、flows、coroutines）都可以跨越 Worker 边界工作，因为不再需要冻结。",-1),e("li",null,[e("code",null,"Dispatchers.Default"),r(" 在 Linux 和 Windows 上由 Worker 池提供支持，在 Apple 目标平台 (target) 上由全局队列提供支持。")],-1),e("li",null,[r("使用 "),e("code",null,"newSingleThreadContext"),r(" 创建由 Worker 支持的协程调度器。")],-1),e("li",null,[r("使用 "),e("code",null,"newFixedThreadPoolContext"),r(" 创建由 "),e("code",null,"N"),r(" 个 Worker 池支持的协程调度器。")],-1),e("li",null,[e("code",null,"Dispatchers.Main"),r(" 在 Darwin 上由主队列提供支持，在其他平台由独立的 Worker 提供支持。")],-1)])),_:1})]),_:1}),a(o,{title:"Ktor"},{default:l(()=>t[3]||(t[3]=[r(" 更新到 2.0 或更高版本。 ")])),_:1}),a(o,{title:"其他依赖项"},{default:l(()=>t[4]||(t[4]=[e("p",null,"大多数库无需任何更改即可工作，但可能存在例外。",-1),e("p",null,"请确保将依赖项更新到最新版本，并且旧内存管理器和新内存管理器的库版本之间没有差异。",-1)])),_:1})]),_:1}),t[6]||(t[6]=i("",5))])}const x=s(p,[["render",u]]);export{T as __pageData,x as default};
