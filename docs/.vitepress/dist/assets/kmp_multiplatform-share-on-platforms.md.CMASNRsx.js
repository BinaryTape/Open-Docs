import{_ as e,a as o}from"./chunks/lib-hierarchical-structure.Dk8bxMrh.js";import{_ as t,c as r,o as l,ag as i}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"跨平台共享代码","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-share-on-platforms.md","filePath":"kmp/multiplatform-share-on-platforms.md","lastUpdated":1755516278000}'),n={name:"kmp/multiplatform-share-on-platforms.md"};function c(p,a,d,h,s,m){return l(),r("div",null,a[0]||(a[0]=[i('<h1 id="跨平台共享代码" tabindex="-1">跨平台共享代码 <a class="header-anchor" href="#跨平台共享代码" aria-label="Permalink to &quot;跨平台共享代码&quot;">​</a></h1><p>借助 Kotlin Multiplatform，你可以使用 Kotlin 提供的机制共享代码：</p><ul><li><a href="#share-code-on-all-platforms">在项目中使用的所有平台之间共享代码</a>。这适用于共享适用于所有平台的通用业务逻辑。</li><li><a href="#share-code-on-similar-platforms">在项目包含的部分而非所有平台之间共享代码</a>。借助分层结构，你可以在相似平台中重用代码。</li></ul><p>如果你需要从共享代码中访问平台特有的 API，请使用 Kotlin 的<a href="./multiplatform-expect-actual">预期与实际声明</a>机制。</p><h2 id="在所有平台之间共享代码" tabindex="-1">在所有平台之间共享代码 <a class="header-anchor" href="#在所有平台之间共享代码" aria-label="Permalink to &quot;在所有平台之间共享代码&quot;">​</a></h2><p>如果你有适用于所有平台的通用业务逻辑，则无需为每个平台编写相同的代码——只需在公共源代码集中共享即可。</p><p><img src="'+e+'" alt="所有平台共享的代码"></p><p>某些源代码集的依赖项是默认设置的。你无需手动指定任何 <code>dependsOn</code> 关系：</p><ul><li>对于所有依赖于公共源代码集的平台特有源代码集，例如 <code>jvmMain</code>、<code>macosX64Main</code> 等。</li><li>在特定目标平台的 <code>main</code> 和 <code>test</code> 源代码集之间，例如 <code>androidMain</code> 和 <code>androidUnitTest</code>。</li></ul><p>如果你需要从共享代码中访问平台特有的 API，请使用 Kotlin 的<a href="./multiplatform-expect-actual">预期与实际声明</a>机制。</p><h2 id="在相似平台之间共享代码" tabindex="-1">在相似平台之间共享代码 <a class="header-anchor" href="#在相似平台之间共享代码" aria-label="Permalink to &quot;在相似平台之间共享代码&quot;">​</a></h2><p>你通常需要创建多个原生目标平台，这些平台可能会重用大量通用逻辑和第三方 API。</p><p>例如，在一个典型的面向 iOS 的多平台项目中，有两个与 iOS 相关的目标平台：一个是用于 iOS ARM64 设备，另一个是用于 x64 模拟器。它们有各自独立的平台特有源代码集，但实际上很少需要为设备和模拟器编写不同的代码，而且它们的依赖项也大同小异。因此，iOS 特有的代码可以在它们之间共享。</p><p>显然，在这种设置中，最好能为两个 iOS 目标平台提供一个共享源代码集，其中包含的 Kotlin/Native 代码仍然可以直接调用 iOS 设备和模拟器共有的任何 API。</p><p>在这种情况下，你可以使用以下方式之一，通过<a href="./multiplatform-hierarchy">分层结构</a>在项目中的原生目标平台之间共享代码：</p><ul><li><a href="./multiplatform-hierarchy#default-hierarchy-template">使用默认分层模板</a></li><li><a href="./multiplatform-hierarchy#manual-configuration">手动配置分层结构</a></li></ul><p>了解更多关于<a href="#share-code-in-libraries">在库中共享代码</a>和<a href="#connect-platform-specific-libraries">连接平台特有的库</a>的信息。</p><h2 id="在库中共享代码" tabindex="-1">在库中共享代码 <a class="header-anchor" href="#在库中共享代码" aria-label="Permalink to &quot;在库中共享代码&quot;">​</a></h2><p>得益于分层项目结构，库也可以为目标平台子集提供通用 API。当<a href="./multiplatform-publish-lib-setup">库发布</a>时，其中间源代码集的 API 会与项目结构信息一同嵌入到库构件中。当你使用此库时，你项目的中间源代码集仅访问该库中可供每个源代码集的目标平台使用的 API。</p><p>例如，查看 <code>kotlinx.coroutines</code> 版本库中的以下源代码集层次结构：</p><p><img src="'+o+'" alt="库分层结构"></p><p><code>concurrent</code> 源代码集声明了 <code>runBlocking</code> 函数，并为 JVM 和原生目标平台编译。一旦 <code>kotlinx.coroutines</code> 库使用分层项目结构更新并发布，你就可以依赖它，并从 JVM 和原生目标平台之间共享的源代码集中调用 <code>runBlocking</code>，因为它与该库的 <code>concurrent</code> 源代码集的“目标平台签名”匹配。</p><h2 id="连接平台特有的库" tabindex="-1">连接平台特有的库 <a class="header-anchor" href="#连接平台特有的库" aria-label="Permalink to &quot;连接平台特有的库&quot;">​</a></h2><p>为了共享更多原生代码而不受平台特有依赖项的限制，请使用 <a href="https://kotlinlang.org/docs/native-platform-libs.html" target="_blank" rel="noreferrer">平台库</a>，例如 Foundation、UIKit 和 POSIX。这些库随 Kotlin/Native 提供，并默认在共享源代码集中可用。</p><p>此外，如果你在项目中使用了 <a href="./multiplatform-cocoapods-overview">Kotlin CocoaPods Gradle</a> 插件，你可以使用 <a href="https://kotlinlang.org/docs/native-c-interop.html" target="_blank" rel="noreferrer"><code>cinterop</code> 机制</a>与第三方原生库交互。</p><h2 id="接下来" tabindex="-1">接下来？ <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来？&quot;">​</a></h2><ul><li><a href="./multiplatform-expect-actual">关于 Kotlin 预期与实际声明机制，请参阅</a></li><li><a href="./multiplatform-hierarchy">了解更多关于分层项目结构的信息</a></li><li><a href="./multiplatform-publish-lib-setup">设置你的多平台库的发布</a></li><li><a href="https://kotlinlang.org/docs/coding-conventions.html#source-file-names" target="_blank" rel="noreferrer">关于多平台项目中源代码文件命名，请参见我们的建议</a></li></ul>',27)]))}const b=t(n,[["render",c]]);export{_ as __pageData,b as default};
