import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"文字列のローカライズ","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-localize-strings.md","filePath":"ja/kmp/compose-localize-strings.md","lastUpdated":1755516278000}'),e={name:"ja/kmp/compose-localize-strings.md"};function l(p,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="文字列のローカライズ" tabindex="-1">文字列のローカライズ <a class="header-anchor" href="#文字列のローカライズ" aria-label="Permalink to &quot;文字列のローカライズ&quot;">​</a></h1><p>ローカライズとは、アプリケーションを異なる言語、地域、文化的な慣習に適応させるプロセスです。 このガイドでは、翻訳ディレクトリの設定方法、<a href="./compose-regional-format">地域固有の形式の扱い方</a>、<a href="./compose-rtl">右から左へ記述する言語 (RTL) の扱い方</a>、および<a href="./compose-localization-tests">クロスプラットフォームでのローカライズのテスト方法</a>について説明します。</p><p>Compose Multiplatform で文字列をローカライズするには、サポートされているすべての言語でアプリケーションのユーザーインターフェース要素に翻訳されたテキストを提供する必要があります。Compose Multiplatform は、共通のリソース管理ライブラリとコード生成を提供することで、このプロセスを簡素化し、翻訳への簡単なアクセスを可能にします。</p><h2 id="翻訳ディレクトリの設定" tabindex="-1">翻訳ディレクトリの設定 <a class="header-anchor" href="#翻訳ディレクトリの設定" aria-label="Permalink to &quot;翻訳ディレクトリの設定&quot;">​</a></h2><p>すべての文字列リソースは、共通ソースセット内の専用の <code>composeResources</code> ディレクトリに格納します。 デフォルトのテキストは <code>values</code> ディレクトリに配置し、各言語に対応するディレクトリを作成します。 以下の構造を使用してください。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>commonMain/composeResources/</span></span>
<span class="line"><span>├── values/</span></span>
<span class="line"><span>│   └── strings.xml</span></span>
<span class="line"><span>├── values-es/</span></span>
<span class="line"><span>│   └── strings.xml</span></span>
<span class="line"><span>├── values-fr/</span></span>
<span class="line"><span>│   └── strings.xml</span></span>
<span class="line"><span>└── ... (other locale directories)</span></span></code></pre></div><p><code>values</code> ディレクトリとそのローカライズされたバリアント内で、キーと値のペアを使用して <code>strings.xml</code> ファイルに文字列リソースを定義します。 例えば、<code>commonMain/composeResources/values/strings.xml</code> に英語のテキストを追加します。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;My Application&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;greeting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, world!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;welcome_message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Welcome, %s!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>次に、翻訳に対応するローカライズされたファイルを作成します。例えば、<code>commonMain/composeResources/values-es/strings.xml</code> にスペイン語の翻訳を追加します。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Mi Aplicación&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;greeting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;¡Hola mundo!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;welcome_message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;¡Bienvenido, %s!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="静的アクセス用のクラスを生成する" tabindex="-1">静的アクセス用のクラスを生成する <a class="header-anchor" href="#静的アクセス用のクラスを生成する" aria-label="Permalink to &quot;静的アクセス用のクラスを生成する&quot;">​</a></h2><p>すべての翻訳を追加したら、プロジェクトをビルドして、リソースへのアクセスを提供する特殊なクラスを生成します。 Compose Multiplatform は <code>composeResources</code> 内の <code>strings.xml</code> リソースファイルを処理し、各文字列リソースに対して静的アクセサープロパティを作成します。</p><p>結果として得られる <code>Res.strings</code> オブジェクトにより、共有コードからローカライズされた文字列に安全にアクセスできます。 アプリのUIに文字列を表示するには、<code>stringResource()</code> コンポーザブル関数を使用します。 この関数は、ユーザーの現在のロケールに基づいて正しいテキストを取得します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> project.composeapp.generated.resources.Res</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.strings.app_name))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.strings.greeting))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.strings.welcome_message, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上記の例では、<code>welcome_message</code> 文字列には動的な値のためのプレースホルダー (<code>%s</code>) が含まれています。 生成されたアクセサーと <code>stringResource()</code> 関数はどちらも、このようなパラメータの受け渡しをサポートしています。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li><a href="./compose-regional-format">地域形式の管理方法を学ぶ</a></li><li><a href="./compose-rtl">右から左へ記述する言語の扱いについて読む</a></li></ul>`,17)]))}const g=i(e,[["render",l]]);export{d as __pageData,g as default};
