import{_ as a,c as s,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"패키지 및 임포트","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/packages.md","filePath":"ko/kotlin/packages.md","lastUpdated":1754307826000}'),l={name:"ko/kotlin/packages.md"};function n(p,i,o,r,h,k){return e(),s("div",null,i[0]||(i[0]=[t(`<h1 id="패키지-및-임포트" tabindex="-1">패키지 및 임포트 <a class="header-anchor" href="#패키지-및-임포트" aria-label="Permalink to &quot;패키지 및 임포트&quot;">​</a></h1><p>소스 파일은 패키지 선언으로 시작할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*...*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*...*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span></code></pre></div><p>클래스와 함수 등 소스 파일의 모든 내용은 이 패키지에 포함됩니다. 따라서 위 예시에서 <code>printMessage()</code>의 전체 이름은 <code>org.example.printMessage</code>이고, <code>Message</code>의 전체 이름은 <code>org.example.Message</code>입니다.</p><p>패키지가 지정되지 않은 경우, 해당 파일의 내용은 이름이 없는 <em>기본</em> 패키지에 속합니다.</p><h2 id="기본-임포트" tabindex="-1">기본 임포트 <a class="header-anchor" href="#기본-임포트" aria-label="Permalink to &quot;기본 임포트&quot;">​</a></h2><p>기본적으로 여러 패키지가 모든 Kotlin 파일에 임포트됩니다:</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/index.html" target="_blank" rel="noreferrer">kotlin.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/index.html" target="_blank" rel="noreferrer">kotlin.annotation.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index.html" target="_blank" rel="noreferrer">kotlin.collections.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.comparisons/index.html" target="_blank" rel="noreferrer">kotlin.comparisons.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/index.html" target="_blank" rel="noreferrer">kotlin.io.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/index.html" target="_blank" rel="noreferrer">kotlin.ranges.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/index.html" target="_blank" rel="noreferrer">kotlin.sequences.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/index.html" target="_blank" rel="noreferrer">kotlin.text.*</a></li></ul><p>대상 플랫폼에 따라 추가 패키지가 임포트됩니다:</p><ul><li><p>JVM:</p><ul><li>java.lang.*</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/index.html" target="_blank" rel="noreferrer">kotlin.jvm.*</a></li></ul></li><li><p>JS:</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/index.html" target="_blank" rel="noreferrer">kotlin.js.*</a></li></ul></li></ul><h2 id="임포트" tabindex="-1">임포트 <a class="header-anchor" href="#임포트" aria-label="Permalink to &quot;임포트&quot;">​</a></h2><p>기본 임포트 외에도 각 파일은 자체 <code>import</code> 지시자를 포함할 수 있습니다.</p><p>단일 이름을 임포트할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example.Message </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Message is now accessible without qualification</span></span></code></pre></div><p>또는 스코프 내의 모든 접근 가능한 내용(패키지, 클래스, 객체 등)을 임포트할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // everything in &#39;org.example&#39; becomes accessible</span></span></code></pre></div><p>이름 충돌이 있는 경우, <code>as</code> 키워드를 사용하여 충돌하는 엔티티의 이름을 로컬로 변경함으로써 모호성을 해결할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example.Message </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Message is accessible</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.test.Message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestMessage </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TestMessage stands for &#39;org.test.Message&#39;</span></span></code></pre></div><p><code>import</code> 키워드는 클래스를 임포트하는 데에만 제한되지 않습니다; 다른 선언을 임포트하는 데에도 사용할 수 있습니다:</p><ul><li>최상위 함수 및 프로퍼티</li><li><a href="/ko/kotlin/object-declarations#object-declarations-overview">객체 선언</a>에 선언된 함수 및 프로퍼티</li><li><a href="/ko/kotlin/enum-classes">enum 상수</a></li></ul><h2 id="최상위-선언의-가시성" tabindex="-1">최상위 선언의 가시성 <a class="header-anchor" href="#최상위-선언의-가시성" aria-label="Permalink to &quot;최상위 선언의 가시성&quot;">​</a></h2><p>최상위 선언이 <code>private</code>으로 표시되면, 해당 선언이 선언된 파일에 대해서만 비공개입니다 (자세한 내용은 <a href="/ko/kotlin/visibility-modifiers">가시성 변경자</a>를 참조하세요).</p>`,22)]))}const c=a(l,[["render",n]]);export{g as __pageData,c as default};
