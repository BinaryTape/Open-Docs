import{_ as k}from"./chunks/ios-hierarchy-example.OtFev01v.js";import{_ as h,C as r,c as d,o as c,j as i,G as t,ag as n,a,w as e}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin 1.6.20 有哪些新变化","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/whatsnew1620.md","filePath":"kotlin/whatsnew1620.md","lastUpdated":1754307826000}'),g={name:"kotlin/whatsnew1620.md"};function E(u,s,y,b,m,f){const o=r("YouTubeVideo"),l=r("tab"),p=r("tabs");return c(),d("div",null,[s[8]||(s[8]=i("h1",{id:"kotlin-1-6-20-有哪些新变化",tabindex:"-1"},[a("Kotlin 1.6.20 有哪些新变化 "),i("a",{class:"header-anchor",href:"#kotlin-1-6-20-有哪些新变化","aria-label":'Permalink to "Kotlin 1.6.20 有哪些新变化"'},"​")],-1)),s[9]||(s[9]=i("p",null,[i("em",null,[i("a",{href:"/kotlin/releases#release-details"},"发布日期：2022 年 4 月 4 日")])],-1)),s[10]||(s[10]=i("p",null,"Kotlin 1.6.20 揭示了未来语言特性的抢先体验预览，将分层结构设为多平台项目的默认设置，并为其他组件带来了演进改进。",-1)),s[11]||(s[11]=i("p",null,"您还可以在此视频中找到更改的简要概述：",-1)),t(o,{src:"https://www.youtube.com/v/8F19ds109-o",title:"What's new in Kotlin 1.6.20"}),s[12]||(s[12]=n(`<h2 id="语言" tabindex="-1">语言 <a class="header-anchor" href="#语言" aria-label="Permalink to &quot;语言&quot;">​</a></h2><p>在 Kotlin 1.6.20 中，您可以尝试两种新的语言特性：</p><ul><li><a href="#prototype-of-context-receivers-for-kotlin-jvm">Kotlin/JVM 的上下文接收者原型</a></li><li><a href="#definitely-non-nullable-types">明确非空类型</a></li></ul><h3 id="kotlin-jvm-的上下文接收者原型" tabindex="-1">Kotlin/JVM 的上下文接收者原型 <a class="header-anchor" href="#kotlin-jvm-的上下文接收者原型" aria-label="Permalink to &quot;Kotlin/JVM 的上下文接收者原型&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>该特性是仅适用于 Kotlin/JVM 的原型。启用 <code>-Xcontext-receivers</code> 后， 编译器将生成预发布二进制文件，这些文件不能用于生产代码。 仅在您的实验项目中使用上下文接收者。 我们非常感谢您在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 中提供反馈。</p></div><p>使用 Kotlin 1.6.20，您不再限于只有一个接收者。如果您需要更多接收者，可以通过向函数、属性和类的声明中添加上下文接收者来使它们依赖于上下文（或称“上下文相关的”）。上下文相关的声明执行以下操作：</p><ul><li>它要求所有声明的上下文接收者以隐式接收者的形式存在于调用者的作用域中。</li><li>它将声明的上下文接收者作为隐式接收者引入到其代码块作用域中。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggingContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> log: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Logger</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // This context provides a reference to a logger </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingContext)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startBusinessOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // You can access the log property since LoggingContext is an implicit receiver</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Operation has started&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loggingContext: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggingContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loggingContext) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // You need to have LoggingContext in a scope as an implicit receiver</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // to call startBusinessOperation()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        startBusinessOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要在您的项目中启用上下文接收者，请使用 <code>-Xcontext-receivers</code> 编译器选项。 您可以在 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/context-receivers.md#detailed-design" target="_blank" rel="noreferrer">KEEP</a> 中找到该特性及其语法的详细描述。</p><p>请注意，此实现是一个原型：</p><ul><li>启用 <code>-Xcontext-receivers</code> 后，编译器将生成预发布二进制文件，这些文件不能用于生产代码</li><li>目前对上下文接收者的 IDE 支持最少</li></ul><p>请在您的实验项目中尝试该特性，并在 <a href="https://youtrack.jetbrains.com/issue/KT-42435" target="_blank" rel="noreferrer">此 YouTrack 问题</a> 中与我们分享您的想法和经验。 如果您遇到任何问题，请<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">提交新问题</a>。</p><h3 id="明确非空类型" tabindex="-1">明确非空类型 <a class="header-anchor" href="#明确非空类型" aria-label="Permalink to &quot;明确非空类型&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>明确非空类型处于 <a href="/kotlin/components-stability">Beta 阶段</a>。它们几乎稳定， 但未来可能需要迁移步骤。 我们将尽力减少您必须进行的任何更改。</p></div><p>为了在扩展 Java 泛型类和接口时提供更好的互操作性，Kotlin 1.6.20 允许您使用新语法 <code>T &amp; Any</code> 在使用点将泛型类型形参标记为明确非空的。 这种语法形式来自<a href="https://en.wikipedia.org/wiki/Intersection_type" target="_blank" rel="noreferrer">交集类型</a>的表示法，目前仅限于 <code>&amp;</code> 左侧具有可空上界和右侧具有非空 <code>Any</code> 的类型形参：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; Any): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; Any </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x ?: y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Error: &#39;null&#39; cannot be a value of a non-null type</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Error: &#39;null&#39; cannot be a value of a non-null type</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>将语言版本设置为 <code>1.7</code> 以启用该特性：</p>`,17)),t(p,{group:"build-script"},{default:e(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"all"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"apply"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "1.7"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:e(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"all {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '1.7'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[13]||(s[13]=n(`<p>在 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/definitely-non-nullable-types.md" target="_blank" rel="noreferrer">KEEP</a> 中了解有关明确非空类型的更多信息。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.6.20 引入：</p><ul><li>JVM 接口中默认方法的兼容性改进：<a href="#new-jvmdefaultwithcompatibility-annotation-for-interfaces">接口的新 <code>@JvmDefaultWithCompatibility</code> 注解</a>和 <a href="#compatibility-changes-in-the-xjvm-default-modes"><code>-Xjvm-default</code> 模式的兼容性更改</a></li><li><a href="#support-for-parallel-compilation-of-a-single-module-in-the-jvm-backend">支持 JVM 后端中单个模块的并行编译</a></li><li><a href="#support-for-callable-references-to-functional-interface-constructors">支持函数式接口构造函数的可调用引用</a></li></ul><h3 id="接口的新-jvmdefaultwithcompatibility-注解" tabindex="-1">接口的新 @JvmDefaultWithCompatibility 注解 <a class="header-anchor" href="#接口的新-jvmdefaultwithcompatibility-注解" aria-label="Permalink to &quot;接口的新 @JvmDefaultWithCompatibility 注解&quot;">​</a></h3><p>Kotlin 1.6.20 引入了新注解 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-default-with-compatibility/" target="_blank" rel="noreferrer"><code>@JvmDefaultWithCompatibility</code></a>：将其与 <code>-Xjvm-default=all</code> 编译器选项一起使用，<a href="/kotlin/java-to-kotlin-interop#default-methods-in-interfaces">为任何 Kotlin 接口中的任何非抽象成员创建 JVM 接口中的默认方法</a>。</p><p>如果存在使用未经 <code>-Xjvm-default=all</code> 选项编译的 Kotlin 接口的客户端，它们可能与使用此选项编译的代码二进制不兼容。 在 Kotlin 1.6.20 之前，为了避免此兼容性问题，<a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/#JvmDefaultWithoutCompatibility" target="_blank" rel="noreferrer">推荐的方法</a>是使用 <code>-Xjvm-default=all-compatibility</code> 模式，并为不需要此类型兼容性的接口使用 <code>@JvmDefaultWithoutCompatibility</code> 注解。</p><p>这种方法有一些缺点：</p><ul><li>添加新接口时，您很容易忘记添加注解。</li><li>通常非公共部分的接口多于公共 API 中的接口，因此您最终会在代码中的许多地方使用此注解。</li></ul><p>现在，您可以使用 <code>-Xjvm-default=all</code> 模式并使用 <code>@JvmDefaultWithCompatibility</code> 注解标记接口。 这允许您一次性将此注解添加到公共 API 中的所有接口，并且无需为新的非公共代码使用任何注解。</p><p>请在 <a href="https://youtrack.jetbrains.com/issue/KT-48217" target="_blank" rel="noreferrer">此 YouTrack 问题单</a> 中留下您对此新注解的反馈。</p><h3 id="xjvm-default-模式的兼容性更改" tabindex="-1">-Xjvm-default 模式的兼容性更改 <a class="header-anchor" href="#xjvm-default-模式的兼容性更改" aria-label="Permalink to &quot;-Xjvm-default 模式的兼容性更改&quot;">​</a></h3><p>Kotlin 1.6.20 添加了将模块以默认模式（<code>-Xjvm-default=disable</code> 编译器选项）编译到使用 <code>-Xjvm-default=all</code> 或 <code>-Xjvm-default=all-compatibility</code> 模式编译的模块的选项。 与之前一样，如果所有模块都使用 <code>-Xjvm-default=all</code> 或 <code>-Xjvm-default=all-compatibility</code> 模式，编译也将成功。 您可以在此 <a href="https://youtrack.jetbrains.com/issue/KT-47000" target="_blank" rel="noreferrer">YouTrack 问题</a> 中留下您的反馈。</p><p>Kotlin 1.6.20 弃用了编译器选项 <code>-Xjvm-default</code> 的 <code>compatibility</code> 和 <code>enable</code> 模式。 其他模式的描述在兼容性方面有所更改，但总体逻辑保持不变。 您可以查看<a href="/kotlin/java-to-kotlin-interop#compatibility-modes-for-default-methods">更新的描述</a>。</p><p>有关 Java 互操作中默认方法的更多信息，请参阅<a href="/kotlin/java-to-kotlin-interop#default-methods-in-interfaces">互操作性文档</a>和 <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer">此博客文章</a>。</p><h3 id="支持-jvm-后端中单个模块的并行编译" tabindex="-1">支持 JVM 后端中单个模块的并行编译 <a class="header-anchor" href="#支持-jvm-后端中单个模块的并行编译" aria-label="Permalink to &quot;支持 JVM 后端中单个模块的并行编译&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>支持 JVM 后端中单个模块的并行编译是<a href="/kotlin/components-stability">实验性的</a>。 它可能随时被删除或更改。需要显式选择启用（参见下方详情），且您应仅将其用于评估目的。 我们非常感谢您在 <a href="https://youtrack.jetbrains.com/issue/KT-46085" target="_blank" rel="noreferrer">YouTrack</a> 中提供反馈。</p></div><p>我们正在继续努力<a href="https://youtrack.jetbrains.com/issue/KT-46768" target="_blank" rel="noreferrer">改进新的 JVM IR 后端编译时间</a>。 在 Kotlin 1.6.20 中，我们添加了实验性的 JVM IR 后端模式，以并行编译模块中的所有文件。 并行编译可以将总编译时间缩短多达 15%。</p><p>使用<a href="/kotlin/compiler-reference#compiler-options">编译器选项</a> <code>-Xbackend-threads</code> 启用实验性的并行后端模式。 为此选项使用以下实参：</p><ul><li><code>N</code> 是您要使用的线程数。它不应大于您的 CPU 核心数；否则，由于线程之间上下文切换，并行化将停止有效。</li><li><code>0</code> 表示为每个 CPU 核心使用单独的线程。</li></ul><p><a href="/kotlin/gradle">Gradle</a> 可以并行运行任务，但当项目（或项目的主要部分）在 Gradle 看来只是一个大任务时，这种并行化帮助不大。 如果您有一个非常大的单体模块，请使用并行编译以更快地编译。 如果您的项目包含许多小模块并通过 Gradle 进行并行构建，添加另一层并行化可能会因为上下文切换而损害性能。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>并行编译有一些限制： * 它不适用于 <a href="/kotlin/kapt">kapt</a>，因为 kapt 禁用了 IR 后端。 * 它设计上需要更多的 JVM 堆内存。堆内存量与线程数成比例。</p></div><h3 id="支持函数式接口构造函数的可调用引用" tabindex="-1">支持函数式接口构造函数的可调用引用 <a class="header-anchor" href="#支持函数式接口构造函数的可调用引用" aria-label="Permalink to &quot;支持函数式接口构造函数的可调用引用&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>对函数式接口构造函数的可调用引用支持是<a href="/kotlin/components-stability">实验性的</a>。 它可能随时被删除或更改。需要显式选择启用（参见下方详情），且您应仅将其用于评估目的。 我们非常感谢您在 <a href="https://youtrack.jetbrains.com/issue/KT-47939" target="_blank" rel="noreferrer">YouTrack</a> 中提供反馈。</p></div><p>对函数式接口构造函数<a href="/kotlin/reflection#callable-references">可调用引用</a>的支持提供了一种源兼容的方式，用于从带有构造函数接口迁移到<a href="/kotlin/fun-interfaces">函数式接口</a>。</p><p>考虑以下代码：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span></code></pre></div><p>启用对函数式接口构造函数的可调用引用后，此代码可以替换为仅一个函数式接口声明：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其构造函数将隐式创建，并且任何使用 <code>::Printer</code> 函数引用的代码都将编译。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">documentsStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addPrinter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>通过使用 <code>DeprecationLevel.HIDDEN</code> 标记旧的 <code>Printer</code> 函数来保留二进制兼容性 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-deprecated/" target="_blank" rel="noreferrer"><code>@Deprecated</code></a> 注解：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Deprecated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your message about the deprecation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DeprecationLevel.HIDDEN)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.) {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.}</span></span></code></pre></div><p>使用编译器选项 <code>-XXLanguage:+KotlinFunInterfaceConstructorReference</code> 启用此特性。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native 1.6.20 标志着其新组件的持续开发。我们向在其他平台提供一致的 Kotlin 体验又迈进了一步：</p><ul><li><a href="#an-update-on-the-new-memory-manager">新内存管理器的更新</a></li><li><a href="#concurrent-implementation-for-the-sweep-phase-in-new-memory-manager">新内存管理器中清除阶段的并发实现</a></li><li><a href="#instantiation-of-annotation-classes">注解类实例化</a></li><li><a href="#interop-with-swift-async-await-returning-void-instead-of-kotlinunit">与 Swift async/await 的互操作：返回 Swift 的 Void 而不是 KotlinUnit</a></li><li><a href="#better-stack-traces-with-libbacktrace">使用 libbacktrace 改进栈跟踪</a></li><li><a href="#support-for-standalone-android-executables">支持独立 Android 可执行文件</a></li><li><a href="#performance-improvements">性能改进</a></li><li><a href="#improved-error-handling-during-cinterop-modules-import">cinterop 模块导入期间改进错误处理</a></li><li><a href="#support-for-xcode-13-libraries">支持 Xcode 13 库</a></li></ul><h3 id="新内存管理器的更新" tabindex="-1">新内存管理器的更新 <a class="header-anchor" href="#新内存管理器的更新" aria-label="Permalink to &quot;新内存管理器的更新&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>新的 Kotlin/Native 内存管理器处于 <a href="/kotlin/components-stability">Alpha 阶段</a>。 它将来可能不兼容地更改并需要手动迁移。 我们非常感谢您在 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a> 中提供反馈。</p></div><p>使用 Kotlin 1.6.20，您可以尝试新的 Kotlin/Native 内存管理器的 Alpha 版本。 它消除了 JVM 和 Native 平台之间的差异，以便在多平台项目中提供一致的开发者体验。 例如，您将更容易创建可在 Android 和 iOS 上运行的新的跨平台移动应用程序。</p><p>新的 Kotlin/Native 内存管理器取消了线程间对象共享的限制。 它还提供了无内存泄漏的并发编程原语，这些原语是安全的，并且不需要任何特殊管理或注解。</p><p>新的内存管理器将在未来版本中成为默认设置，因此我们鼓励您现在就尝试它。 请查看我们的<a href="https://blog.jetbrains.com/kotlin/2021/08/try-the-new-kotlin-native-memory-manager-development-preview/" target="_blank" rel="noreferrer">博客文章</a>，了解有关新内存管理器的更多信息并探索演示项目，或者直接跳转到<a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/NEW_MM.md" target="_blank" rel="noreferrer">迁移说明</a>自行尝试。</p><p>尝试在您的项目中使用新的内存管理器，看看它是如何工作的，并在我们的问题跟踪器 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a> 中分享反馈。</p><h3 id="新内存管理器中清除阶段的并发实现" tabindex="-1">新内存管理器中清除阶段的并发实现 <a class="header-anchor" href="#新内存管理器中清除阶段的并发实现" aria-label="Permalink to &quot;新内存管理器中清除阶段的并发实现&quot;">​</a></h3><p>如果您已经切换到我们在 <a href="/kotlin/whatsnew16#preview-of-the-new-memory-manager">Kotlin 1.6 中宣布</a>的新内存管理器，您可能会注意到执行时间的大幅改进：我们的基准测试显示平均提升 35%。 从 1.6.20 开始，新的内存管理器还提供了清除阶段的并发实现。 这也应该能提高性能并缩短垃圾收集器暂停的持续时间。</p><p>要为新的 Kotlin/Native 内存管理器启用该特性，请传递以下编译器选项：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xgc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cms</span></span></code></pre></div><p>欢迎在 <a href="https://youtrack.jetbrains.com/issue/KT-48526" target="_blank" rel="noreferrer">此 YouTrack 问题</a> 中分享您对新内存管理器性能的反馈。</p><h3 id="注解类实例化" tabindex="-1">注解类实例化 <a class="header-anchor" href="#注解类实例化" aria-label="Permalink to &quot;注解类实例化&quot;">​</a></h3><p>在 Kotlin 1.6.0 中，注解类的实例化对于 Kotlin/JVM 和 Kotlin/JS 而言已变为<a href="/kotlin/components-stability">稳定</a>。 1.6.20 版本提供了对 Kotlin/Native 的支持。</p><p>了解有关<a href="/kotlin/annotations#instantiation">注解类实例化</a>的更多信息。</p><h3 id="与-swift-async-await-的互操作-返回-swift-的-void-而不是-kotlinunit" tabindex="-1">与 Swift async/await 的互操作：返回 Swift 的 Void 而不是 KotlinUnit <a class="header-anchor" href="#与-swift-async-await-的互操作-返回-swift-的-void-而不是-kotlinunit" aria-label="Permalink to &quot;与 Swift async/await 的互操作：返回 Swift 的 Void 而不是 KotlinUnit&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>与 Swift async/await 的并发互操作性是<a href="/kotlincomponents-stability.20">实验性的</a>。它可能随时被删除或更改。 您应仅将其用于评估目的。我们非常感谢您在 <a href="https://youtrack.jetbrains.com/issue/KT-47610" target="_blank" rel="noreferrer">YouTrack</a> 中提供反馈。</p></div><p>我们继续致力于<a href="/kotlin/whatsnew1530#experimental-interoperability-with-swift-5-5-async-await">与 Swift 5.5 async/await 的实验性互操作</a>（自 Swift 5.5 起可用）。 Kotlin 1.6.20 与以前版本在处理 <code>Unit</code> 返回类型的<a href="https://kotlinlang.org/docs/reference/coroutines/basics.html#suspending-functions" target="_blank" rel="noreferrer">挂起函数</a>的方式上有所不同。</p><p>以前，此类函数在 Swift 中表示为返回 <code>KotlinUnit</code> 的 <code>async</code> 函数。但是，它们的正确返回类型应该是 <code>Void</code>，类似于非挂起函数。</p><p>为避免破坏现有代码，我们引入了一个 Gradle 属性，该属性使编译器将返回 <code>Unit</code> 的挂起函数转换为具有 <code>Void</code> 返回类型的 <code>async</code> Swift 函数：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.native.binary.unitSuspendFunctionObjCExport=proper</span></span></code></pre></div><p>我们计划在未来的 Kotlin 版本中使此行为成为默认设置。</p><h3 id="使用-libbacktrace-改进栈跟踪" tabindex="-1">使用 libbacktrace 改进栈跟踪 <a class="header-anchor" href="#使用-libbacktrace-改进栈跟踪" aria-label="Permalink to &quot;使用 libbacktrace 改进栈跟踪&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>使用 libbacktrace 解析源位置是<a href="/kotlin/components-stability">实验性的</a>。它可能随时被删除或更改。 您应仅将其用于评估目的。我们非常感谢您在 <a href="https://youtrack.jetbrains.com/issue/KT-48424" target="_blank" rel="noreferrer">YouTrack</a> 中提供反馈。</p></div><p>Kotlin/Native 现在能够生成带有文件位置和行号的详细栈跟踪，以便更好地调试 <code>linux*</code>（<code>linuxMips32</code> 和 <code>linuxMipsel32</code> 除外）和 <code>androidNative*</code> 目标平台。</p><p>此特性底层使用 <a href="https://github.com/ianlancetaylor/libbacktrace" target="_blank" rel="noreferrer">libbacktrace</a> 库。 请看以下代码，了解差异示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>1.6.20 之前：</strong></li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Uncaught Kotlin exception: kotlin.IllegalStateException:</span></span>
<span class="line"><span>   at 0   example.kexe        0x227190       kfun:kotlin.Throwable#&lt;init&gt;(kotlin.String?){} + 96</span></span>
<span class="line"><span>   at 1   example.kexe        0x221e4c       kfun:kotlin.Exception#&lt;init&gt;(kotlin.String?){} + 92</span></span>
<span class="line"><span>   at 2   example.kexe        0x221f4c       kfun:kotlin.RuntimeException#&lt;init&gt;(kotlin.String?){} + 92</span></span>
<span class="line"><span>   at 3   example.kexe        0x22234c       kfun:kotlin.IllegalStateException#&lt;init&gt;(kotlin.String?){} + 92</span></span>
<span class="line"><span>   at 4   example.kexe        0x25d708       kfun:#bar(){} + 104</span></span>
<span class="line"><span>   at 5   example.kexe        0x25d68c       kfun:#main(){} + 12</span></span></code></pre></div><ul><li><strong>1.6.20 带 libbacktrace：</strong></li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Uncaught Kotlin exception: kotlin.IllegalStateException:</span></span>
<span class="line"><span>   at 0   example.kexe        0x229550    kfun:kotlin.Throwable#&lt;init&gt;(kotlin.String?){} + 96 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Throwable.kt:24:37)</span></span>
<span class="line"><span>   at 1   example.kexe        0x22420c    kfun:kotlin.Exception#&lt;init&gt;(kotlin.String?){} + 92 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:23:44)</span></span>
<span class="line"><span>   at 2   example.kexe        0x22430c    kfun:kotlin.RuntimeException#&lt;init&gt;(kotlin.String?){} + 92 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:34:44)</span></span>
<span class="line"><span>   at 3   example.kexe        0x22470c    kfun:kotlin.IllegalStateException#&lt;init&gt;(kotlin.String?){} + 92 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:70:44)</span></span>
<span class="line"><span>   at 4   example.kexe        0x25fac8    kfun:#bar(){} + 104 [inlined] (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/libraries/stdlib/src/kotlin/util/Preconditions.kt:143:56)</span></span>
<span class="line"><span>   at 5   example.kexe        0x25fac8    kfun:#bar(){} + 104 [inlined] (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:4:5)</span></span>
<span class="line"><span>   at 6   example.kexe        0x25fac8    kfun:#bar(){} + 104 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:2:13)</span></span>
<span class="line"><span>   at 7   example.kexe        0x25fa4c    kfun:#main(){} + 12 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:1:14)</span></span></code></pre></div><p>在 Apple 目标平台中，栈跟踪中已经包含文件位置和行号，libbacktrace 为内联函数调用提供了更多详细信息：</p><ul><li><strong>1.6.20 之前：</strong></li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Uncaught Kotlin exception: kotlin.IllegalStateException:</span></span>
<span class="line"><span>   at 0   example.kexe    0x10a85a8f8    kfun:kotlin.Throwable#&lt;init&gt;(kotlin.String?){} + 88 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Throwable.kt:24:37)</span></span>
<span class="line"><span>   at 1   example.kexe    0x10a855846    kfun:kotlin.Exception#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:23:44)</span></span>
<span class="line"><span>   at 2   example.kexe    0x10a855936    kfun:kotlin.RuntimeException#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:34:44)</span></span>
<span class="line"><span>   at 3   example.kexe    0x10a855c86    kfun:kotlin.IllegalStateException#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:70:44)</span></span>
<span class="line"><span>   at 4   example.kexe    0x10a8489a5    kfun:#bar(){} + 117 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:2:1)</span></span>
<span class="line"><span>   at 5   example.kexe    0x10a84891c    kfun:#main(){} + 12 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:1:14)</span></span>
<span class="line"><span>...</span></span></code></pre></div><ul><li><strong>1.6.20 带 libbacktrace：</strong></li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Uncaught Kotlin exception: kotlin.IllegalStateException:</span></span>
<span class="line"><span>   at 0   example.kexe    0x10669bc88    kfun:kotlin.Throwable#&lt;init&gt;(kotlin.String?){} + 88 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Throwable.kt:24:37)</span></span>
<span class="line"><span>   at 1   example.kexe    0x106696bd6    kfun:kotlin.Exception#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:23:44)</span></span>
<span class="line"><span>   at 2   example.kexe    0x106696cc6    kfun:kotlin.RuntimeException#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:34:44)</span></span>
<span class="line"><span>   at 3   example.kexe    0x106697016    kfun:kotlin.IllegalStateException#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:70:44)</span></span>
<span class="line"><span>   at 4   example.kexe    0x106689d35    kfun:#bar(){} + 117 [inlined] (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/libraries/stdlib/src/kotlin/util/Preconditions.kt:143:56)</span></span>
<span class="line"><span>&gt;&gt;  at 5   example.kexe    0x106689d35    kfun:#bar(){} + 117 [inlined] (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:4:5)</span></span>
<span class="line"><span>   at 6   example.kexe    0x106689d35    kfun:#bar(){} + 117 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:2:13)</span></span>
<span class="line"><span>   at 7   example.kexe    0x106689cac    kfun:#main(){} + 12 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:1:14)</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>要使用 libbacktrace 生成更好的栈跟踪，请将以下行添加到 <code>gradle.properties</code>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.native.binary.sourceInfoType=libbacktrace</span></span></code></pre></div><p>请在 <a href="https://youtrack.jetbrains.com/issue/KT-48424" target="_blank" rel="noreferrer">此 YouTrack 问题</a> 中告诉我们使用 libbacktrace 调试 Kotlin/Native 的体验如何。</p><h3 id="支持独立-android-可执行文件" tabindex="-1">支持独立 Android 可执行文件 <a class="header-anchor" href="#支持独立-android-可执行文件" aria-label="Permalink to &quot;支持独立 Android 可执行文件&quot;">​</a></h3><p>以前，Kotlin/Native 中的 Android 原生可执行文件实际上不是可执行文件，而是可以作为 NativeActivity 使用的共享库。现在有一个选项可以为 Android 原生目标平台生成标准可执行文件。</p><p>为此，在您项目的 <code>build.gradle(.kts)</code> 部分中，配置 <code>androidNative</code> 目标平台的可执行文件块。 添加以下二进制选项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidNativeX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;android&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                binaryOptions[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidProgramType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;standalone&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>请注意，此特性将在 Kotlin 1.7.0 中成为默认设置。 如果您想保留当前行为，请使用以下设置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">binaryOptions[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidProgramType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;nativeActivity&quot;</span></span></code></pre></div><p>感谢 Mattia Iavarone 的<a href="https://github.com/jetbrains/kotlin/pull/4624" target="_blank" rel="noreferrer">实现</a>！</p><h3 id="性能改进" tabindex="-1">性能改进 <a class="header-anchor" href="#性能改进" aria-label="Permalink to &quot;性能改进&quot;">​</a></h3><p>我们正在努力改进 Kotlin/Native，以<a href="https://youtrack.jetbrains.com/issue/KT-42294" target="_blank" rel="noreferrer">加快编译过程</a>并改善您的开发体验。</p><p>Kotlin 1.6.20 带来了一些影响 Kotlin 生成的 LLVM IR 的性能更新和错误修复。 根据我们内部项目的基准测试，我们平均实现了以下性能提升：</p><ul><li>执行时间减少 15%</li><li>发布和调试二进制文件的代码大小减少 20%</li><li>发布二进制文件的编译时间减少 26%</li></ul><p>这些更改还在大型内部项目上将调试二进制文件的编译时间减少了 10%。</p><p>为了实现这一点，我们为一些编译器生成的合成对象实现了静态初始化，改进了为每个函数构造 LLVM IR 的方式，并优化了编译器缓存。</p><h3 id="cinterop-模块导入期间改进错误处理" tabindex="-1">cinterop 模块导入期间改进错误处理 <a class="header-anchor" href="#cinterop-模块导入期间改进错误处理" aria-label="Permalink to &quot;cinterop 模块导入期间改进错误处理&quot;">​</a></h3><p>此版本引入了对使用 <code>cinterop</code> 工具导入 Objective-C 模块（如 CocoaPods pods 典型情况）时的错误处理改进。 以前，如果您在尝试使用 Objective-C 模块时遇到错误（例如，处理头文件中的编译错误时），您会收到一条信息不明确的错误消息，例如 <code>fatal error: could not build module $name</code>。 我们扩展了 <code>cinterop</code> 工具的这部分功能，因此您将收到带有扩展描述的错误消息。</p><h3 id="支持-xcode-13-库" tabindex="-1">支持 Xcode 13 库 <a class="header-anchor" href="#支持-xcode-13-库" aria-label="Permalink to &quot;支持 Xcode 13 库&quot;">​</a></h3><p>此版本完全支持 Xcode 13 附带的库。 您可以随时从 Kotlin 代码的任何地方访问它们。</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>1.6.20 为 Kotlin Multiplatform 带来了以下值得注意的更新：</p><ul><li><a href="#hierarchical-structure-support-for-multiplatform-projects">分层结构支持现在是所有新多平台项目的默认设置</a></li><li><a href="#kotlin-cocoapods-gradle-plugin">Kotlin CocoaPods Gradle 插件获得了一些有用的 CocoaPods 集成特性</a></li></ul><h3 id="多平台项目中的分层结构支持" tabindex="-1">多平台项目中的分层结构支持 <a class="header-anchor" href="#多平台项目中的分层结构支持" aria-label="Permalink to &quot;多平台项目中的分层结构支持&quot;">​</a></h3><p>Kotlin 1.6.20 默认启用分层结构支持。 自<a href="/kotlin/whatsnew14#sharing-code-in-several-targets-with-the-hierarchical-project-structure">在 Kotlin 1.4.0 中引入</a>以来，我们显著改进了前端并使 IDE 导入稳定。</p><p>以前，在多平台项目中添加代码有两种方式。第一种是将其插入到平台特有的源代码集中，该源代码集仅限于单个目标平台，不能被其他平台重用。 第二种是使用在 Kotlin 当前支持的所有平台之间共享的公共源代码集。</p><p>现在，您可以在几个类似的，重用大量通用逻辑和第三方 API 的原生目标平台之间<a href="#better-code-sharing-in-your-project">共享源代码</a>。 该技术将提供正确的默认依赖项，并找到共享代码中可用的确切 API。 这消除了复杂的构建设置以及不得不使用变通方案来获取 IDE 对在原生目标平台之间共享源代码集的支持。 它还有助于防止不安全地使用旨在用于不同目标平台的 API。</p><p>该技术对于<a href="#more-opportunities-for-library-authors">库作者</a>也很有用，因为分层项目结构允许他们发布和使用包含目标平台子集公共 API 的库。</p><p>默认情况下，使用分层项目结构发布的库仅与分层结构项目兼容。</p><h4 id="在您的项目中更好地共享代码" tabindex="-1">在您的项目中更好地共享代码 <a class="header-anchor" href="#在您的项目中更好地共享代码" aria-label="Permalink to &quot;在您的项目中更好地共享代码&quot;">​</a></h4><p>如果没有分层结构支持，没有直接的方法可以跨<strong>某些</strong>而非<strong>所有</strong> <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#targets" target="_blank" rel="noreferrer">Kotlin 目标平台</a>共享代码。 一个常见的例子是跨所有 iOS 目标平台共享代码并访问 iOS 特有的<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#connect-platform-specific-libraries" target="_blank" rel="noreferrer">依赖项</a>，如 Foundation。</p><p>得益于分层项目结构支持，您现在可以开箱即用地实现这一点。 在新结构中，源代码集形成一个层次结构。 您可以使用适用于给定源代码集编译到的每个目标平台的平台特有的语言特性和依赖项。</p><p>例如，考虑一个具有两个目标平台——<code>iosArm64</code> 和 <code>iosX64</code>（用于 iOS 设备和模拟器）的典型多平台项目。 Kotlin 工具理解这两个目标平台具有相同的功能，并允许您从中间源代码集 <code>iosMain</code> 访问该功能。</p><p><img src="`+k+`" alt="iOS hierarchy example" width="700"></p><p>Kotlin 工具链提供了正确的默认依赖项，如 Kotlin/Native stdlib 或原生库。 此外，Kotlin 工具链将尽力准确地找到共享代码中可用的 API 接口。 这可以防止诸如在共享给 Windows 的代码中使用 macOS 特有的函数之类的情况。</p><h4 id="为库作者带来更多机会" tabindex="-1">为库作者带来更多机会 <a class="header-anchor" href="#为库作者带来更多机会" aria-label="Permalink to &quot;为库作者带来更多机会&quot;">​</a></h4><p>当发布多平台库时，其中间源代码集的 API 现在会随之正确发布，使其可供消费者使用。 同样，Kotlin 工具链将自动确定消费者源代码集中可用的 API，同时仔细留意不安全的使用，例如在 JS 代码中使用旨在用于 JVM 的 API。 了解有关<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-in-libraries" target="_blank" rel="noreferrer">在库中共享代码</a>的更多信息。</p><h4 id="配置与设置" tabindex="-1">配置与设置 <a class="header-anchor" href="#配置与设置" aria-label="Permalink to &quot;配置与设置&quot;">​</a></h4><p>从 Kotlin 1.6.20 开始，所有新的多平台项目都将具有分层项目结构。无需额外设置。</p><ul><li><p>如果您已<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-on-similar-platforms" target="_blank" rel="noreferrer">手动启用</a>，您可以从 <code>gradle.properties</code> 中删除弃用选项：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.mpp.enableGranularSourceSetsMetadata=true</span></span>
<span class="line"><span>kotlin.native.enableDependencyPropagation=false // or &#39;true&#39;, depending on your previous setup</span></span></code></pre></div></li><li><p>对于 Kotlin 1.6.20，我们推荐使用 <a href="https://developer.android.com/studio" target="_blank" rel="noreferrer">Android Studio 2021.1.1</a> (Bumblebee) 或更高版本以获得最佳体验。</p></li><li><p>您也可以选择退出。要禁用分层结构支持，请在 <code>gradle.properties</code> 中设置以下选项：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.mpp.hierarchicalStructureSupport=false</span></span></code></pre></div></li></ul><h4 id="留下您的反馈" tabindex="-1">留下您的反馈 <a class="header-anchor" href="#留下您的反馈" aria-label="Permalink to &quot;留下您的反馈&quot;">​</a></h4><p>这是对整个生态系统的重大改变。我们非常感谢您的反馈，以帮助使其变得更好。</p><p>现在就尝试一下，并向<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">我们的问题跟踪器</a>报告您遇到的任何困难。</p><h3 id="kotlin-cocoapods-gradle-插件" tabindex="-1">Kotlin CocoaPods Gradle 插件 <a class="header-anchor" href="#kotlin-cocoapods-gradle-插件" aria-label="Permalink to &quot;Kotlin CocoaPods Gradle 插件&quot;">​</a></h3><p>为了简化 CocoaPods 集成，Kotlin 1.6.20 提供了以下特性：</p><ul><li><p>CocoaPods 插件现在具有构建 XCFramework 并生成 Podspec 文件的任务，其中包含所有已注册的目标平台。这在您不想直接与 Xcode 集成，但又想构建 artifact 并将其部署到本地 CocoaPods 版本库时很有用。</p><p>了解有关<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html#build-xcframeworks" target="_blank" rel="noreferrer">构建 XCFramework</a> 的更多信息。</p></li><li><p>如果您在项目中使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 集成</a>，您习惯于为整个 Gradle 项目指定所需的 Pod 版本。现在您有更多选项：</p><ul><li>直接在 <code>cocoapods</code> 块中指定 Pod 版本。</li><li>继续使用 Gradle 项目版本。</li></ul><p>如果这些属性都没有配置，您将收到错误。</p></li><li><p>您现在可以在 <code>cocoapods</code> 块中配置 CocoaPod 名称，而不是更改整个 Gradle 项目的名称。</p></li><li><p>CocoaPods 插件引入了一个新的 <code>extraSpecAttributes</code> 属性，您可以使用它来配置 Podspec 文件中以前硬编码的属性，例如 <code>libraries</code> 或 <code>vendored_frameworks</code>。</p></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyCocoaPod&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extraSpecAttributes[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;social_media_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://twitter.com/kotlin&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extraSpecAttributes[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vendored_frameworks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;CustomFramework.xcframework&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extraSpecAttributes[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;libraries&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;xml&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>查看完整的 Kotlin CocoaPods Gradle 插件 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-dsl-reference.html" target="_blank" rel="noreferrer">DSL 参考</a>。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS 1.6.20 的改进主要影响 IR 编译器：</p><ul><li><a href="#incremental-compilation-for-development-binaries-with-ir-compiler">IR 编译器开发二进制文件的增量编译</a></li><li><a href="#lazy-initialization-of-top-level-properties-by-default-with-ir-compiler">IR 编译器默认顶层属性惰性初始化</a></li><li><a href="#separate-js-files-for-project-modules-by-default-with-ir-compiler">IR 编译器默认项目模块独立 JS 文件</a></li><li><a href="#char-class-optimization">Char 类优化 (IR)</a></li><li><a href="#improvements-to-export-and-typescript-declaration-generation">导出改进（IR 和传统后端）</a></li><li><a href="#aftertest-guarantees-for-asynchronous-tests">@AfterTest 对异步测试的保证</a></li></ul><h3 id="ir-编译器开发二进制文件的增量编译" tabindex="-1">IR 编译器开发二进制文件的增量编译 <a class="header-anchor" href="#ir-编译器开发二进制文件的增量编译" aria-label="Permalink to &quot;IR 编译器开发二进制文件的增量编译&quot;">​</a></h3><p>为了提高使用 IR 编译器进行 Kotlin/JS 开发的效率，我们引入了一种新的<strong>增量编译</strong>模式。</p><p>在此模式下，使用 <code>compileDevelopmentExecutableKotlinJs</code> Gradle 任务构建<strong>开发二进制文件</strong>时，编译器会缓存先前编译的结果在模块级别。 它在后续编译期间使用未更改源文件的缓存编译结果，从而使编译更快完成，尤其是当更改很小时。 请注意，此改进仅针对开发过程（缩短编辑-构建-调试周期），不影响生产 artifact 的构建。</p><p>要为开发二进制文件启用增量编译，请将以下行添加到项目的 <code>gradle.properties</code>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.incremental.js.ir=true // false by default</span></span></code></pre></div><p>在我们的测试项目中，新模式使增量编译速度提高了 30%。但是，在此模式下，干净构建变得更慢，因为需要创建和填充缓存。</p><p>请在 <a href="https://youtrack.jetbrains.com/issue/KT-50203" target="_blank" rel="noreferrer">此 YouTrack 问题</a> 中告诉我们您如何看待在 Kotlin/JS 项目中使用增量编译。</p><h3 id="ir-编译器默认顶层属性惰性初始化" tabindex="-1">IR 编译器默认顶层属性惰性初始化 <a class="header-anchor" href="#ir-编译器默认顶层属性惰性初始化" aria-label="Permalink to &quot;IR 编译器默认顶层属性惰性初始化&quot;">​</a></h3><p>在 Kotlin 1.4.30 中，我们展示了 JS IR 编译器中<a href="/kotlin/whatsnew1430#lazy-initialization-of-top-level-properties">顶层属性惰性初始化</a>的原型。 通过消除应用程序启动时初始化所有属性的需要，惰性初始化缩短了启动时间。 我们的测量显示，在一个实际的 Kotlin/JS 应用程序中，速度提升了约 10%。</p><p>现在，我们已经完善并适当测试了此机制，我们正在使惰性初始化成为 IR 编译器中顶层属性的默认设置。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lazy initialization</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // intensive computations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// run is executed upon the first usage of the variable</span></span></code></pre></div><p>如果由于某种原因您需要在应用程序启动时急切初始化属性，请使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-eager-initialization/" target="_blank" rel="noreferrer"><code>@EagerInitialization</code></a> 注解标记它。</p><h3 id="ir-编译器默认项目模块独立-js-文件" tabindex="-1">IR 编译器默认项目模块独立 JS 文件 <a class="header-anchor" href="#ir-编译器默认项目模块独立-js-文件" aria-label="Permalink to &quot;IR 编译器默认项目模块独立 JS 文件&quot;">​</a></h3><p>以前，JS IR 编译器提供了<a href="https://youtrack.jetbrains.com/issue/KT-44319" target="_blank" rel="noreferrer">生成独立 <code>.js</code> 文件</a>的能力，用于项目模块。 这是默认选项——整个项目的单个 <code>.js</code> 文件——的替代方案。 这个文件可能太大且不方便使用，因为每当您想使用项目中的函数时，都必须将整个 JS 文件作为依赖项包含在内。 拥有多个文件增加了灵活性并减小了此类依赖项的大小。此特性可与 <code>-Xir-per-module</code> 编译器选项一起使用。</p><p>从 1.6.20 开始，JS IR 编译器默认为项目模块生成独立的 <code>.js</code> 文件。</p><p>现在可以使用以下 Gradle 属性将项目编译成单个 <code>.js</code> 文件：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.js.ir.output.granularity=whole-program // \`per-module\` is the default</span></span></code></pre></div><p>在以前的版本中，实验性的按模块模式（通过 <code>-Xir-per-module=true</code> 标志可用）在每个模块中调用 <code>main()</code> 函数。这与常规的单个 <code>.js</code> 模式不一致。从 1.6.20 开始，<code>main()</code> 函数将仅在主模块中调用，在两种情况下都是如此。如果您确实需要在模块加载时运行一些代码，可以使用带有 <code>@EagerInitialization</code> 注解的顶层属性。请参阅<a href="#lazy-initialization-of-top-level-properties-by-default-with-ir-compiler">IR 编译器默认顶层属性惰性初始化</a>。</p><h3 id="char-类优化" tabindex="-1">Char 类优化 <a class="header-anchor" href="#char-类优化" aria-label="Permalink to &quot;Char 类优化&quot;">​</a></h3><p>现在，Kotlin/JS 编译器处理 <code>Char</code> 类时不会引入装箱（类似于<a href="/kotlin/inline-classes">内联类</a>）。 这加快了 Kotlin/JS 代码中对 char 的操作。</p><p>除了性能改进之外，这还改变了 <code>Char</code> 导出到 JavaScript 的方式：它现在被转换为 <code>Number</code>。</p><h3 id="导出改进和-typescript-声明生成" tabindex="-1">导出改进和 TypeScript 声明生成 <a class="header-anchor" href="#导出改进和-typescript-声明生成" aria-label="Permalink to &quot;导出改进和 TypeScript 声明生成&quot;">​</a></h3><p>Kotlin 1.6.20 为导出机制（<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-export/" target="_blank" rel="noreferrer"><code>@JsExport</code></a> 注解）带来了多项修复和改进，包括 <a href="/kotlin/js-ir-compiler#preview-generation-of-typescript-declaration-files-d-ts">TypeScript 声明（.d.ts）的生成</a>。 我们增加了导出接口和枚举的能力，并修复了先前向我们报告的某些边缘情况下的导出行为。 有关更多详细信息，请参阅 <a href="https://youtrack.jetbrains.com/issues?q=Project:%20Kotlin%20issue%20id:%20KT-45434,%20KT-44494,%20KT-37916,%20KT-43191,%20KT-46961,%20KT-40236" target="_blank" rel="noreferrer">YouTrack 中导出改进列表</a>。</p><p>了解有关<a href="/kotlin/js-to-kotlin-interop">从 JavaScript 使用 Kotlin 代码</a>的更多信息。</p><h3 id="aftertest-对异步测试的保证" tabindex="-1">@AfterTest 对异步测试的保证 <a class="header-anchor" href="#aftertest-对异步测试的保证" aria-label="Permalink to &quot;@AfterTest 对异步测试的保证&quot;">​</a></h3><p>Kotlin 1.6.20 使得 <a href="https://kotlinlang.org/api/latest/kotlin.test/kotlin.test/-after-test/" target="_blank" rel="noreferrer"><code>@AfterTest</code></a> 函数可以在 Kotlin/JS 上的异步测试中正常工作。 如果测试函数的返回类型被静态解析为 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-promise/" target="_blank" rel="noreferrer"><code>Promise</code></a>，编译器现在会将 <code>@AfterTest</code> 函数的执行调度到相应的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-promise/then.html" target="_blank" rel="noreferrer"><code>then()</code></a> 回调。</p><h2 id="安全性" tabindex="-1">安全性 <a class="header-anchor" href="#安全性" aria-label="Permalink to &quot;安全性&quot;">​</a></h2><p>Kotlin 1.6.20 引入了一些特性来提高您的代码安全性：</p><ul><li><a href="#using-relative-paths-in-klibs">在 klib 中使用相对路径</a></li><li><a href="#persisting-yarn-lock-for-kotlin-js-gradle-projects">Kotlin/JS Gradle 项目的 yarn.lock 文件持久化</a></li><li><a href="#installation-of-npm-dependencies-with-ignore-scripts-by-default">默认情况下使用 <code>--ignore-scripts</code> 安装 npm 依赖项</a></li></ul><h3 id="在-klib-中使用相对路径" tabindex="-1">在 klib 中使用相对路径 <a class="header-anchor" href="#在-klib-中使用相对路径" aria-label="Permalink to &quot;在 klib 中使用相对路径&quot;">​</a></h3><p><code>klib</code> 格式的库<a href="/kotlin/native-libraries#library-format">包含</a>源文件的序列化 IR 表示，其中还包括它们的路径，用于生成适当的调试信息。 在 Kotlin 1.6.20 之前，存储的文件路径是绝对的。由于库作者可能不希望共享绝对路径，1.6.20 版本提供了一个替代选项。</p><p>如果您正在发布 <code>klib</code> 并希望在 artifact 中仅使用源文件的相对路径，您现在可以传递 <code>-Xklib-relative-path-base</code> 编译器选项，并附带一个或多个源文件的基本路径：</p>`,155)),t(p,{group:"build-script"},{default:e(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>s[2]||(s[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(org.jetbrains.kotlin.gradle.dsl.KotlinCompile::"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"class"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // $base is a base path of source files")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions.freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "-Xklib-relative-path-base='),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"$base"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:e(()=>s[3]||(s[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.dsl.KotlinCompile"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"configureEach {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // $base is a base path of source files")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "-Xklib-relative-path-base='),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"$base"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[14]||(s[14]=n('<h3 id="kotlin-js-gradle-项目的-yarn-lock-文件持久化" tabindex="-1">Kotlin/JS Gradle 项目的 yarn.lock 文件持久化 <a class="header-anchor" href="#kotlin-js-gradle-项目的-yarn-lock-文件持久化" aria-label="Permalink to &quot;Kotlin/JS Gradle 项目的 yarn.lock 文件持久化&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>该特性已回溯到 Kotlin 1.6.10。</p></div><p>Kotlin/JS Gradle 插件现在提供了持久化 <code>yarn.lock</code> 文件的能力，从而可以在无需额外 Gradle 配置的情况下锁定项目中 npm 依赖项的版本。 该特性通过在项目根目录添加自动生成的 <code>kotlin-js-store</code> 目录来改变默认的项目结构。 它内部包含 <code>yarn.lock</code> 文件。</p><p>我们强烈建议将 <code>kotlin-js-store</code> 目录及其内容提交到您的版本控制系统。 将锁定文件提交到版本控制系统是一种<a href="https://classic.yarnpkg.com/blog/2016/11/24/lockfiles-for-all/" target="_blank" rel="noreferrer">推荐实践</a>，因为它确保您的应用程序在所有机器上都使用完全相同的依赖树进行构建，无论这些机器是其他机器上的开发环境还是 CI/CD 服务。 锁定文件还可以防止 npm 依赖项在项目签出到新机器时被静默更新，这是一个安全隐患。</p><p>像 <a href="https://github.com/dependabot" target="_blank" rel="noreferrer">Dependabot</a> 这样的工具还可以解析您的 Kotlin/JS 项目的 <code>yarn.lock</code> 文件，并在您依赖的任何 npm 包被入侵时提供警告。</p><p>如果需要，您可以在构建脚本中更改目录和锁定文件名称：</p>',6)),t(p,{group:"build-script"},{default:e(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>s[4]||(s[4]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject.plugins."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"the"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">().lockFileDirectory "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        project.rootDir."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"resolve"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"my-kotlin-js-store"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"the"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">().lockFileName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "my-yarn.lock"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:e(()=>s[5]||(s[5]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"extensions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"getByType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"lockFileDirectory "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        file("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"my-kotlin-js-store"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"extensions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"getByType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"lockFileName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'my-yarn.lock'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[15]||(s[15]=n('<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>更改锁定文件的名称可能会导致依赖项检查工具无法再识别该文件。</p></div><h3 id="默认情况下使用-ignore-scripts-安装-npm-依赖项" tabindex="-1">默认情况下使用 --ignore-scripts 安装 npm 依赖项 <a class="header-anchor" href="#默认情况下使用-ignore-scripts-安装-npm-依赖项" aria-label="Permalink to &quot;默认情况下使用 --ignore-scripts 安装 npm 依赖项&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>该特性已回溯到 Kotlin 1.6.10。</p></div><p>Kotlin/JS Gradle 插件现在默认阻止在安装 npm 依赖项期间执行<a href="https://docs.npmjs.com/cli/v8/using-npm/scripts#life-cycle-scripts" target="_blank" rel="noreferrer">生命周期脚本</a>。 此更改旨在降低从被入侵的 npm 包执行恶意代码的可能性。</p><p>要回滚到旧配置，您可以通过向 <code>build.gradle(.kts)</code> 添加以下行来显式启用生命周期脚本执行：</p>',5)),t(p,{group:"build-script"},{default:e(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>s[6]||(s[6]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject.plugins."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"the"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">().ignoreScripts "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:e(()=>s[7]||(s[7]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"extensions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"getByType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"ignoreScripts "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[16]||(s[16]=n(`<p>了解有关 <a href="/kotlin/js-project-setup#npm-dependencies">Kotlin/JS Gradle 项目的 npm 依赖项</a>的更多信息。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.6.20 为 Kotlin Gradle 插件带来了以下更改：</p><ul><li><a href="#properties-for-defining-kotlin-compiler-execution-strategy">用于定义 Kotlin 编译器执行策略的新属性 <code>kotlin.compiler.execution.strategy</code> 和 <code>compilerExecutionStrategy</code></a></li><li><a href="#deprecation-of-build-options-for-kapt-and-coroutines">kapt 和 coroutines 构建选项的弃用</a></li><li><a href="#removal-of-the-kotlin-parallel-tasks-in-project-build-option">移除 <code>kotlin.parallel.tasks.in.project</code> 构建选项</a></li></ul><h3 id="用于定义-kotlin-编译器执行策略的属性" tabindex="-1">用于定义 Kotlin 编译器执行策略的属性 <a class="header-anchor" href="#用于定义-kotlin-编译器执行策略的属性" aria-label="Permalink to &quot;用于定义 Kotlin 编译器执行策略的属性&quot;">​</a></h3><p>在 Kotlin 1.6.20 之前，您使用系统属性 <code>-Dkotlin.compiler.execution.strategy</code> 来定义 Kotlin 编译器执行策略。 此属性在某些情况下可能不方便。 Kotlin 1.6.20 引入了一个同名的 Gradle 属性 <code>kotlin.compiler.execution.strategy</code> 和编译任务属性 <code>compilerExecutionStrategy</code>。</p><p>系统属性仍然有效，但将在未来版本中移除。</p><p>当前属性的优先级如下：</p><ul><li>任务属性 <code>compilerExecutionStrategy</code> 优先于系统属性和 Gradle 属性 <code>kotlin.compiler.execution.strategy</code>。</li><li>Gradle 属性优先于系统属性。</li></ul><p>您可以为这些属性分配三种编译器执行策略：</p><table tabindex="0"><thead><tr><th>策略</th><th>Kotlin 编译器执行位置</th><th>增量编译</th><th>其他特性</th></tr></thead><tbody><tr><td>Daemon</td><td>在其自身的守护进程中</td><td>是</td><td><em>默认策略</em>。可以在不同的 Gradle 守护进程之间共享</td></tr><tr><td>In process</td><td>在 Gradle 守护进程中</td><td>否</td><td>可能与 Gradle 守护进程共享堆内存</td></tr><tr><td>Out of process</td><td>每次调用都在单独的进程中</td><td>否</td><td>—</td></tr></tbody></table><p>因此，<code>kotlin.compiler.execution.strategy</code> 属性（系统属性和 Gradle 属性）的可用值是：</p><ol><li><code>daemon</code>（默认）</li><li><code>in-process</code></li><li><code>out-of-process</code></li></ol><p>在 <code>gradle.properties</code> 中使用 Gradle 属性 <code>kotlin.compiler.execution.strategy</code>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.compiler.execution.strategy=out-of-process</span></span></code></pre></div><p><code>compilerExecutionStrategy</code> 任务属性的可用值是：</p><ol><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.DAEMON</code>（默认）</li><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.IN_PROCESS</code></li><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.OUT_OF_PROCESS</code></li></ol><p>在 <code>build.gradle.kts</code> 构建脚本中使用 <code>compilerExecutionStrategy</code> 任务属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.dsl.KotlinCompile</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilerExecutionStrategy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KotlinCompilerExecutionStrategy.IN_PROCESS)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>请在 <a href="https://youtrack.jetbrains.com/issue/KT-49299" target="_blank" rel="noreferrer">此 YouTrack 任务</a> 中留下您的反馈。</p><h3 id="kapt-和-coroutines-构建选项的弃用" tabindex="-1">kapt 和 coroutines 构建选项的弃用 <a class="header-anchor" href="#kapt-和-coroutines-构建选项的弃用" aria-label="Permalink to &quot;kapt 和 coroutines 构建选项的弃用&quot;">​</a></h3><p>在 Kotlin 1.6.20 中，我们更改了属性的弃用级别：</p><ul><li><p>我们弃用了通过 <code>kapt.use.worker.api</code> 通过 Kotlin 守护进程运行 <a href="/kotlin/kapt">kapt</a> 的能力——现在它会在 Gradle 的输出中生成警告。 默认情况下，自 1.3.70 版本以来，<a href="/kotlin/kapt#run-kapt-tasks-in-parallel">kapt 一直使用 Gradle worker</a>，我们建议坚持使用此方法。</p><p>我们将在未来版本中移除 <code>kapt.use.worker.api</code> 选项。</p></li><li><p>我们弃用了 <code>kotlin.experimental.coroutines</code> Gradle DSL 选项以及 <code>gradle.properties</code> 中使用的 <code>kotlin.coroutines</code> 属性。 只需使用<a href="https://kotlinlang.org/docs/reference/coroutines/basics.html#suspending-functions" target="_blank" rel="noreferrer">挂起函数</a>或<a href="/kotlin/gradle-configure-project#set-a-dependency-on-a-kotlinx-library">将 <code>kotlinx.coroutines</code> 依赖项添加到</a>您的 <code>build.gradle(.kts)</code> 文件。</p><p>在<a href="/kotlin/coroutines-guide">协程指南</a>中了解有关协程的更多信息。</p></li></ul><h3 id="移除-kotlin-parallel-tasks-in-project-构建选项" tabindex="-1">移除 kotlin.parallel.tasks.in.project 构建选项 <a class="header-anchor" href="#移除-kotlin-parallel-tasks-in-project-构建选项" aria-label="Permalink to &quot;移除 kotlin.parallel.tasks.in.project 构建选项&quot;">​</a></h3><p>在 Kotlin 1.5.20 中，我们宣布<a href="/kotlin/whatsnew1520#deprecation-of-the-kotlin-parallel-tasks-in-project-build-property">弃用构建选项 <code>kotlin.parallel.tasks.in.project</code></a>。 此选项已在 Kotlin 1.6.20 中移除。</p><p>根据项目，Kotlin 守护进程中的并行编译可能需要更多内存。 要减少内存消耗，请<a href="/kotlin/gradle-compilation-and-caches#setting-kotlin-daemon-s-jvm-arguments">增加 Kotlin 守护进程的 JVM 堆内存大小</a>。</p><p>了解有关 Kotlin Gradle 插件中<a href="/kotlin/gradle-compiler-options">当前支持的编译器选项</a>的更多信息。</p>`,27))])}const x=h(g,[["render",E]]);export{C as __pageData,x as default};
