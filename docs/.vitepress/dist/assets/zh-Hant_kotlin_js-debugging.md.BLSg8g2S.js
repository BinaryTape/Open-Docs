import{_ as t,a as r,b as a,c as o,d as i}from"./chunks/ide-console-output.D95j1GLN.js";import{_ as l,c as n,o as s,ag as d}from"./chunks/framework.Bksy39di.js";const j=JSON.parse('{"title":"偵錯 Kotlin/JS 程式碼","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/js-debugging.md","filePath":"zh-Hant/kotlin/js-debugging.md","lastUpdated":1754307826000}'),p={name:"zh-Hant/kotlin/js-debugging.md"};function c(g,e,h,m,u,b){return s(),n("div",null,e[0]||(e[0]=[d('<h1 id="偵錯-kotlin-js-程式碼" tabindex="-1">偵錯 Kotlin/JS 程式碼 <a class="header-anchor" href="#偵錯-kotlin-js-程式碼" aria-label="Permalink to &quot;偵錯 Kotlin/JS 程式碼&quot;">​</a></h1><p>JavaScript 原始碼對應 (source maps) 提供了捆綁器或最小化工具產生的最小化程式碼與開發人員實際使用的原始碼之間的映射。透過這種方式，原始碼對應可在程式碼執行期間支援偵錯。</p><p>Kotlin Multiplatform Gradle 外掛程式會自動為專案建構產生原始碼對應，使其無需任何額外設定即可使用。</p><h2 id="在瀏覽器中偵錯" tabindex="-1">在瀏覽器中偵錯 <a class="header-anchor" href="#在瀏覽器中偵錯" aria-label="Permalink to &quot;在瀏覽器中偵錯&quot;">​</a></h2><p>大多數現代瀏覽器都提供了工具，允許檢查頁面內容並偵錯在其上執行的程式碼。詳情請參閱您的瀏覽器文件。</p><p>若要在瀏覽器中偵錯 Kotlin/JS：</p><ol><li>透過呼叫其中一個可用的 <code>_run_</code> Gradle 任務來執行專案，例如在多平台專案中的 <code>browserDevelopmentRun</code> 或 <code>jsBrowserDevelopmentRun</code>。 深入了解 <a href="/zh-Hant/kotlin/running-kotlin-js#run-the-browser-target">執行 Kotlin/JS</a>。</li><li>在瀏覽器中導覽至頁面並啟動其開發人員工具 (例如，透過右鍵點擊並選擇「<strong>檢查</strong>」動作)。了解如何在常用瀏覽器中 <a href="https://balsamiq.com/support/faqs/browserconsole/" target="_blank" rel="noreferrer">尋找開發人員工具</a>。</li><li>如果您的程式正在將資訊記錄到主控台，請導覽至「<strong>主控台</strong>」分頁以查看此輸出。根據您的瀏覽器，這些日誌可以參考其來源的 Kotlin 原始檔和行：</li></ol><p><img src="'+t+'" alt="Chrome 開發人員工具主控台" width="600"></p><ol start="4"><li>點擊右側的檔案參考以導覽至程式碼的對應行。或者，您可以手動切換到「<strong>來源</strong>」分頁並在檔案樹中找到您需要的檔案。導覽至 Kotlin 檔案會顯示常規的 Kotlin 程式碼 (而不是最小化 JavaScript)：</li></ol><p><img src="'+r+'" alt="在 Chrome 開發人員工具中偵錯" width="600"></p><p>您現在可以開始偵錯程式了。透過點擊其中一個行號來設定中斷點。開發人員工具甚至支援在語句中設定中斷點。如同常規 JavaScript 程式碼一樣，任何已設定的中斷點將在頁面重新載入後仍然存在。這也使得偵錯 Kotlin 的 <code>main()</code> 方法成為可能，該方法在腳本首次載入時執行。</p><h2 id="在-ide-中偵錯" tabindex="-1">在 IDE 中偵錯 <a class="header-anchor" href="#在-ide-中偵錯" aria-label="Permalink to &quot;在 IDE 中偵錯&quot;">​</a></h2><p><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA Ultimate</a> 提供了一套強大的工具，用於在開發期間偵錯程式碼。</p><p>若要在 IntelliJ IDEA 中偵錯 Kotlin/JS，您需要一個「<strong>JavaScript 偵錯</strong>」設定。若要新增此類偵錯設定：</p><ol><li>進入「<strong>執行 | 編輯組態 (Run | Edit Configurations)</strong>」。</li><li>點擊「<strong>+</strong>」並選擇「<strong>JavaScript 偵錯</strong>」。</li><li>指定設定「<strong>名稱</strong>」並提供專案執行的「<strong>URL</strong>」（預設為 <code>http://localhost:8080</code>）。</li></ol><p><img src="'+a+'" alt="JavaScript 偵錯設定" width="700"></p><ol start="4"><li>儲存設定。</li></ol><p>深入了解 <a href="https://www.jetbrains.com/help/idea/configuring-javascript-debugger.html" target="_blank" rel="noreferrer">設定 JavaScript 偵錯組態</a>。</p><p>現在您已準備好偵錯您的專案！</p><ol><li>透過呼叫其中一個可用的 <code>_run_</code> Gradle 任務來執行專案，例如在多平台專案中的 <code>browserDevelopmentRun</code> 或 <code>jsBrowserDevelopmentRun</code>。 深入了解 <a href="/zh-Hant/kotlin/running-kotlin-js#run-the-browser-target">執行 Kotlin/JS</a>。</li><li>透過執行您之前建立的 JavaScript 偵錯設定來啟動偵錯會話：</li></ol><p><img src="'+o+'" alt="JavaScript 偵錯設定" width="700"></p><ol start="3"><li>您可以在 IntelliJ IDEA 的「<strong>偵錯</strong>」視窗中看到程式的主控台輸出。輸出項目參考其來源的 Kotlin 原始檔和行：</li></ol><p><img src="'+i+'" alt="IDE 中的 JavaScript 偵錯輸出" width="700"></p><ol start="4"><li>點擊右側的檔案參考以導覽至程式碼的對應行。</li></ol><p>您現在可以使用 IDE 提供的整套工具開始偵錯程式：中斷點、步進、表達式評估等等。深入了解 <a href="https://www.jetbrains.com/help/idea/debugging-javascript-in-chrome.html" target="_blank" rel="noreferrer">在 IntelliJ IDEA 中偵錯</a>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>由於 IntelliJ IDEA 中目前 JavaScript 偵錯器的限制，您可能需要重新執行 JavaScript 偵錯，才能使執行在中斷點處停止。</p></div><h2 id="在-node-js-中偵錯" tabindex="-1">在 Node.js 中偵錯 <a class="header-anchor" href="#在-node-js-中偵錯" aria-label="Permalink to &quot;在 Node.js 中偵錯&quot;">​</a></h2><p>如果您的專案目標是 Node.js，您可以在此執行環境中偵錯它。</p><p>若要偵錯目標為 Node.js 的 Kotlin/JS 應用程式：</p><ol><li>透過執行 <code>build</code> Gradle 任務來建構專案。</li><li>在專案目錄內的 <code>build/js/packages/your-module/kotlin/</code> 目錄中找到 Node.js 的結果 <code>.js</code> 檔案。</li><li>如 <a href="https://nodejs.org/en/docs/guides/debugging-getting-started/#jetbrains-webstorm-2017-1-and-other-jetbrains-ides" target="_blank" rel="noreferrer">Node.js 偵錯指南</a> 中所述，在 Node.js 中偵錯它。</li></ol><h2 id="接下來是什麼" tabindex="-1">接下來是什麼？ <a class="header-anchor" href="#接下來是什麼" aria-label="Permalink to &quot;接下來是什麼？&quot;">​</a></h2><p>既然您已經知道如何開始 Kotlin/JS 專案的偵錯會話，請學習如何有效地利用偵錯工具：</p><ul><li>學習如何在 <a href="https://developer.chrome.com/docs/devtools/javascript/" target="_blank" rel="noreferrer">Google Chrome 中偵錯 JavaScript</a></li><li>熟悉 <a href="https://www.jetbrains.com/help/idea/debugging-javascript-in-chrome.html" target="_blank" rel="noreferrer">IntelliJ IDEA JavaScript 偵錯器</a></li><li>學習如何在 <a href="https://nodejs.org/en/docs/guides/debugging-getting-started/" target="_blank" rel="noreferrer">Node.js 中偵錯</a>。</li></ul><h2 id="如果您遇到任何問題" tabindex="-1">如果您遇到任何問題 <a class="header-anchor" href="#如果您遇到任何問題" aria-label="Permalink to &quot;如果您遇到任何問題&quot;">​</a></h2><p>如果您在偵錯 Kotlin/JS 時遇到任何問題，請向我們的問題追蹤器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 報告。</p>',35)]))}const k=l(p,[["render",c]]);export{j as __pageData,k as default};
