import{_ as o,c,o as a,ag as d}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"Coil 3.x へのアップグレード","description":"","frontmatter":{},"headers":[],"relativePath":"ja/coil/upgrading_to_coil3.md","filePath":"ja/coil/upgrading_to_coil3.md","lastUpdated":1753369988000}'),i={name:"ja/coil/upgrading_to_coil3.md"};function r(l,e,t,n,s,p){return a(),c("div",null,e[0]||(e[0]=[d('<h1 id="coil-3-x-へのアップグレード" tabindex="-1">Coil 3.x へのアップグレード <a class="header-anchor" href="#coil-3-x-へのアップグレード" aria-label="Permalink to &quot;Coil 3.x へのアップグレード&quot;">​</a></h1><p>Coil 3 は、Coil の次の主要バージョンであり、いくつかの大きな改善点があります。</p><ul><li><a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> の主要なターゲット（Android、iOS、JVM、JS、および <a href="/ja/coil/sample/">WASM</a>）を含む完全なサポート。</li><li>複数のネットワーキングライブラリ（Ktor と OkHttp）のサポート。あるいは、ローカル/静的ファイルの読み込みのみが必要な場合は、ネットワーク依存関係なしで Coil を使用できます。</li><li>Compose の <code>@Preview</code> レンダリングの改善と、<code>LocalAsyncImagePreviewHandler</code> を介したカスタムプレビュー動作のサポート。</li><li>既存の動作の変更を必要とした重要なバグ修正（以下に概説）。</li></ul><p>このドキュメントでは、Coil 2 から Coil 3 への主な変更点の概要と、破壊的または重要な変更点について重点的に説明します。バイナリ非互換な変更や細かな動作の変更はすべては網羅していません。</p><p>Compose Multiplatform プロジェクトで Coil 3 を使用していますか？ <a href="https://github.com/coil-kt/coil/tree/3.x/samples/compose" target="_blank" rel="noreferrer"><code>samples</code></a> リポジトリで例を確認してください。</p><h2 id="maven座標とパッケージ名" tabindex="-1">Maven座標とパッケージ名 <a class="header-anchor" href="#maven座標とパッケージ名" aria-label="Permalink to &quot;Maven座標とパッケージ名&quot;">​</a></h2><p>Coil の Maven 座標は <code>io.coil-kt</code> から <code>io.coil-kt.coil3</code> に更新され、そのパッケージ名は <code>coil</code> から <code>coil3</code> に更新されました。これにより、Coil 3 はバイナリ互換性の問題なしに Coil 2 と並行して実行できます。例えば、<code>io.coil-kt:coil:2.7.0</code> は <code>io.coil-kt.coil3:coil:3.0.0</code> になりました。</p><p><code>coil-base</code> と <code>coil-compose-base</code> アーティファクトは、それぞれ <code>coil-core</code> と <code>coil-compose-core</code> に名称変更され、Coroutines、Ktor、および AndroidX で使用される命名規則に合わせられました。</p><h2 id="ネットワーク画像" tabindex="-1">ネットワーク画像 <a class="header-anchor" href="#ネットワーク画像" aria-label="Permalink to &quot;ネットワーク画像&quot;">​</a></h2><p><strong><code>coil-core</code> はデフォルトでネットワークからの画像読み込みをサポートしなくなりました。</strong> <a href="./network">Coil のネットワークアーティファクトのいずれかへの依存関係を追加する必要があります。詳細はこちらを参照してください。</a>。これは、ユーザーが異なるネットワークライブラリを使用したり、アプリがネットワークを必要としない場合にネットワークへの依存を避けられるように変更されました。</p><p>さらに、キャッシュコントロールヘッダーはデフォルトでは尊重されなくなりました。<a href="./network">詳細はこちら</a> を参照してください。</p><h2 id="マルチプラットフォーム" tabindex="-1">マルチプラットフォーム <a class="header-anchor" href="#マルチプラットフォーム" aria-label="Permalink to &quot;マルチプラットフォーム&quot;">​</a></h2><p>Coil 3 は、Android、JVM、iOS、macOS、Javascript、および WASM をサポートする Kotlin マルチプラットフォームライブラリになりました。</p><p>Android では、Coil は標準のグラフィッククラスを使用して画像をレンダリングします。Android以外のプラットフォームでは、Coil は <a href="https://github.com/JetBrains/skiko" target="_blank" rel="noreferrer">Skiko</a> を使用して画像をレンダリングします。Skiko は、Google が開発した <a href="https://github.com/google/skia" target="_blank" rel="noreferrer">Skia</a> グラフィックエンジンをラップする Kotlin バインディングのセットです。</p><p>Android SDK からの分離の一環として、いくつかの API 変更が行われました。特に次の点が挙げられます。</p><ul><li><code>Drawable</code> はカスタムの <code>Image</code> インターフェースに置き換えられました。Android 上でクラス間で変換するには、<code>Drawable.asImage()</code> と <code>Image.asDrawable(resources)</code> を使用します。Android以外のプラットフォームでは <code>Bitmap.asImage()</code> と <code>Image.toBitmap()</code> を使用します。</li><li>Android の <code>android.net.Uri</code> クラスの使用は、マルチプラットフォームの <code>coil3.Uri</code> クラスに置き換えられました。<code>android.net.Uri</code> を <code>ImageRequest.data</code> として渡す呼び出し箇所は影響を受けません。<code>android.net.Uri</code> の受信に依存するカスタム <code>Fetcher</code> は、<code>coil3.Uri</code> を使用するように更新する必要があります。</li><li><code>Context</code> の使用は <code>PlatformContext</code> に置き換えられました。<code>PlatformContext</code> は Android では <code>Context</code> の型エイリアスであり、Android以外のプラットフォームでは <code>PlatformContext.INSTANCE</code> を使用してアクセスできます。Compose Multiplatform で参照を取得するには <code>LocalPlatformContext.current</code> を使用します。</li><li><code>Coil</code> クラスは <code>SingletonImageLoader</code> に名称変更されました。</li><li>カスタム Android <code>Application</code> クラスで <code>ImageLoaderFactory</code> を実装している場合、<code>ImageLoaderFactory</code> の代替として <code>SingletonImageLoader.Factory</code> の実装に切り替える必要があります。<code>SingletonImageLoader.Factory</code> を実装すると、必要に応じて <code>newImageLoader()</code> をオーバーライドできるようになります。</li></ul><p><code>coil-svg</code> アーティファクトはマルチプラットフォームでサポートされていますが、<code>coil-gif</code> および <code>coil-video</code> アーティファクトは、特定のAndroidデコーダーとライブラリに依存しているため、引き続きAndroidのみの対応です（現時点では）。</p><h2 id="compose" tabindex="-1">Compose <a class="header-anchor" href="#compose" aria-label="Permalink to &quot;Compose&quot;">​</a></h2><p><code>coil-compose</code> アーティファクトの API はほとんど変更されていません。Coil 2 と同じように <code>AsyncImage</code>、<code>SubcomposeAsyncImage</code>、<code>rememberAsyncImagePainter</code> を引き続き使用できます。さらに、これらのメソッドは <a href="https://developer.android.com/jetpack/compose/performance/stability" target="_blank" rel="noreferrer">リスタート可能かつスキップ可能</a> に更新され、パフォーマンスが向上するはずです。</p><ul><li><code>AsyncImagePainter.state</code> は <code>StateFlow</code> になりました。<code>val state = painter.state.collectAsState()</code> を使用して観測する必要があります。</li><li><code>AsyncImagePainter</code> のデフォルト <code>SizeResolver</code> は、キャンバスのサイズを取得するために最初の <code>onDraw</code> 呼び出しを待たなくなりました。代わりに、<code>AsyncImagePainter</code> はデフォルトで <code>Size.ORIGINAL</code> になります。</li><li>Compose の <code>modelEqualityDelegate</code> デリゲートは、<code>AsyncImage</code>/<code>SubcomposeAsyncImage</code>/<code>rememberAsyncImagePainter</code> へのパラメータとしてではなく、コンポジションローカルである <code>LocalAsyncImageModelEqualityDelegate</code> を介して設定されるようになりました。</li></ul><h2 id="一般" tabindex="-1">一般 <a class="header-anchor" href="#一般" aria-label="Permalink to &quot;一般&quot;">​</a></h2><p>その他の重要な動作変更には以下が含まれます。</p><ul><li><p>ファーストパーティの <code>Fetcher</code> と <code>Decoder</code>（例: <code>NetworkFetcher.Factory</code>、<code>SvgDecoder</code> など）は、サービスローダーを介して各新しい <code>ImageLoader</code> に自動的に追加されるようになりました。この動作は <code>ImageLoader.Builder.serviceLoaderEnabled(false)</code> で無効にできます。</p></li><li><p>リソース縮小最適化を妨げるため、<code>android.resource://example.package.name/drawable/image</code> URI のサポートを削除しました。<code>R.drawable.image</code> の値を直接渡すことを推奨します。リソース名ではなくリソースIDを渡す場合でも機能します: <code>android.resource://example.package.name/12345678</code>。その機能がまだ必要な場合は、<a href="https://github.com/coil-kt/coil/blob/da7d872e340430014dbc5136e35eb62f9b17662e/coil-core/src/androidInstrumentedTest/kotlin/coil3/map/ResourceUriMapper.kt" target="_blank" rel="noreferrer">コンポーネントレジストリに <code>ResourceUriMapper</code> を手動で含める</a>ことができます。</p></li><li><p>ファイルの最終書き込みタイムスタンプは、デフォルトでキャッシュキーに追加されなくなりました。これは、メインスレッドでのディスク読み込み（非常に短時間であっても）を避けるためです。これは <code>ImageRequest.Builder.addLastModifiedToFileCacheKey(true)</code> または <code>ImageLoader.Builder.addLastModifiedToFileCacheKey(true)</code> で再有効化できます。</p></li><li><p>意図しないOOM（メモリ不足エラー）を防ぐため、出力画像サイズは4096x4096ピクセル未満に制限されるようになりました。これは <code>ImageLoader/ImageRequest.Builder.maxBitmapSize</code> で設定できます。この動作を無効にするには、<code>maxBitmapSize</code> を <code>Size.ORIGINAL</code> に設定します。</p></li><li><p>Coil 2 の <code>Parameters</code> API は <code>Extras</code> に置き換えられました。<code>Extras</code> は文字列キーを必要とせず、代わりに同一性等価性に依存します。<code>Extras</code> はメモリキャッシュキーの変更をサポートしていません。代わりに、追加情報がメモリキャッシュキーに影響する場合は <code>ImageRequest.memoryCacheKeyExtra</code> を使用してください。</p></li><li><p>多くの <code>ImageRequest.Builder</code> 関数は、マルチプラットフォームをより容易にサポートするために拡張関数になりました。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div></li></ul>',23)]))}const u=o(i,[["render",r]]);export{g as __pageData,u as default};
