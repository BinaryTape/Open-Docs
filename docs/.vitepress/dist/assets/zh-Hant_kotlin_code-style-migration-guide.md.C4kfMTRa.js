import{_ as o,a as e}from"./chunks/reformat-code.BxjpTpco.js";import{_ as n,c as a,o as l,ag as i}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"遷移至 Kotlin 程式碼風格","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/code-style-migration-guide.md","filePath":"zh-Hant/kotlin/code-style-migration-guide.md","lastUpdated":1754307826000}'),s={name:"zh-Hant/kotlin/code-style-migration-guide.md"};function r(d,t,p,c,g,h){return l(),a("div",null,t[0]||(t[0]=[i('<h1 id="遷移至-kotlin-程式碼風格" tabindex="-1">遷移至 Kotlin 程式碼風格 <a class="header-anchor" href="#遷移至-kotlin-程式碼風格" aria-label="Permalink to &quot;遷移至 Kotlin 程式碼風格&quot;">​</a></h1><h2 id="kotlin-編碼慣例與-intellij-idea-格式化程式" tabindex="-1">Kotlin 編碼慣例與 IntelliJ IDEA 格式化程式 <a class="header-anchor" href="#kotlin-編碼慣例與-intellij-idea-格式化程式" aria-label="Permalink to &quot;Kotlin 編碼慣例與 IntelliJ IDEA 格式化程式&quot;">​</a></h2><p><a href="/zh-Hant/kotlin/coding-conventions">Kotlin 編碼慣例</a> 影響著編寫慣用 Kotlin 的多個方面，其中一組旨在提高 Kotlin 程式碼可讀性的格式化建議便是其一。</p><p>不幸的是，IntelliJ IDEA 內建的程式碼格式化程式在該文件發布之前就已運作許久，現在的預設設定所產生的格式與目前建議的格式不同。</p><p>透過切換 IntelliJ IDEA 的預設值並使格式與 Kotlin 編碼慣例保持一致，看似是消除這種模糊性合乎邏輯的下一步。但這意味著所有現有的 Kotlin 專案將在安裝 Kotlin 外掛程式的那一刻啟用新的程式碼風格。這並不是外掛程式更新所預期的結果，對吧？</p><p>因此，我們有以下遷移計畫：</p><ul><li>從 Kotlin 1.3 開始，預設啟用官方程式碼風格格式化，且僅限於新專案（舊格式可以手動啟用）。</li><li>現有專案的作者可以選擇遷移到 Kotlin 編碼慣例。</li><li>現有專案的作者可以選擇在專案中明確聲明使用舊的程式碼風格（這樣專案未來就不會受到切換到預設值的影響）。</li><li>在 Kotlin 1.4 中切換到預設格式並使其與 Kotlin 編碼慣例保持一致。</li></ul><h2 id="「kotlin-編碼慣例」與「intellij-idea-預設程式碼風格」之間的差異" tabindex="-1">「Kotlin 編碼慣例」與「IntelliJ IDEA 預設程式碼風格」之間的差異 <a class="header-anchor" href="#「kotlin-編碼慣例」與「intellij-idea-預設程式碼風格」之間的差異" aria-label="Permalink to &quot;「Kotlin 編碼慣例」與「IntelliJ IDEA 預設程式碼風格」之間的差異&quot;">​</a></h2><p>最顯著的改變在於續行縮排策略。有一個很好的想法是使用雙倍縮排來表示多行表達式尚未在前一行結束。這是一個非常簡單且通用的規則，但當一些 Kotlin 結構以這種方式格式化時，看起來會有點笨拙。在 Kotlin 編碼慣例中，建議在之前曾強制使用長續行縮排的情況下使用單倍縮排。</p><img src="'+o+`" alt="程式碼格式" width="700"><p>實際上，相當一部分程式碼受到影響，因此這可以被視為一次主要的程式碼風格更新。</p><h2 id="遷移到新程式碼風格的討論" tabindex="-1">遷移到新程式碼風格的討論 <a class="header-anchor" href="#遷移到新程式碼風格的討論" aria-label="Permalink to &quot;遷移到新程式碼風格的討論&quot;">​</a></h2><p>如果新程式碼風格的採用始於一個沒有以舊方式格式化程式碼的新專案，這可能是一個非常自然的過程。因此，從版本 1.3 開始，Kotlin IntelliJ 外掛程式會建立新專案，其格式來自預設啟用的 <a href="/zh-Hant/kotlin/coding-conventions">編碼慣例</a> 文件。</p><p>更改現有專案中的格式是一項更具挑戰性的任務，可能應該先與團隊討論所有注意事項。</p><p>在現有專案中更改程式碼風格的主要缺點是，blame/annotate VCS 功能將更頻繁地指向不相關的提交。雖然每個 VCS 都有某種方法來處理這個問題（在 IntelliJ IDEA 中可以使用「<a href="https://www.jetbrains.com/help/idea/investigate-changes.html" target="_blank" rel="noreferrer">註解上一版本</a>」），但重要的是要決定新風格是否值得所有這些努力。將重新格式化提交與有意義的變更分開的實踐可以對後續調查有很大幫助。</p><p>此外，對於大型團隊來說，遷移可能更困難，因為在多個子系統中提交大量檔案可能會在個人分支中產生合併衝突。儘管每次衝突解決通常都是微不足道的，但明智的做法是了解目前是否有大型功能分支正在開發中。</p><p>通常，對於小型專案，我們建議一次性轉換所有檔案。</p><p>對於中型和大型專案，這個決定可能很艱難。如果您不準備立即更新許多檔案，您可以決定逐個模組遷移，或者僅針對修改過的檔案繼續進行漸進式遷移。</p><h2 id="遷移到新的程式碼風格" tabindex="-1">遷移到新的程式碼風格 <a class="header-anchor" href="#遷移到新的程式碼風格" aria-label="Permalink to &quot;遷移到新的程式碼風格&quot;">​</a></h2><p>可以透過「<strong>設定/偏好設定</strong>」|「<strong>編輯器</strong>」|「<strong>程式碼風格</strong>」|「<strong>Kotlin</strong>」對話方塊切換到 Kotlin 編碼慣例程式碼風格。將方案切換為「<strong>專案</strong>」，然後啟用「<strong>設定來自...</strong>」|「<strong>Kotlin 風格指南</strong>」。</p><p>為了在所有專案開發人員之間共享這些變更，必須將 <code>.idea/codeStyle</code> 資料夾提交到 VCS。</p><p>如果使用外部建置系統配置專案，並且決定不共享 <code>.idea/codeStyle</code> 資料夾，則可以使用額外屬性強制執行 Kotlin 編碼慣例：</p><h3 id="在-gradle-中" tabindex="-1">在 Gradle 中 <a class="header-anchor" href="#在-gradle-中" aria-label="Permalink to &quot;在 Gradle 中&quot;">​</a></h3><p>將 <code>kotlin.code.style=official</code> 屬性新增到專案根目錄的 <code>gradle.properties</code> 檔案中，並將該檔案提交到 VCS。</p><h3 id="在-maven-中" tabindex="-1">在 Maven 中 <a class="header-anchor" href="#在-maven-中" aria-label="Permalink to &quot;在 Maven 中&quot;">​</a></h3><p>將 <code>kotlin.code.style official</code> 屬性新增到根 <code>pom.xml</code> 專案檔案中。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;properties&gt;</span></span>
<span class="line"><span>  &lt;kotlin.code.style&gt;official&lt;/kotlin.code.style&gt;</span></span>
<span class="line"><span>&lt;/properties&gt;</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>設定 <strong>kotlin.code.style</strong> 選項可能會在專案匯入期間修改程式碼風格方案，並可能更改程式碼風格設定。</p></div><p>更新程式碼風格設定後，在專案視圖中對所需範圍啟用「<strong>重新格式化程式碼</strong>」。</p><img src="`+e+'" alt="重新格式化程式碼" width="500"><p>對於漸進式遷移，可以啟用「<strong>檔案未依專案設定格式化</strong>」檢查。它將突顯應重新格式化的位置。啟用「<strong>僅套用於修改過的檔案</strong>」選項後，檢查將僅顯示修改過的檔案中的格式問題。這些檔案無論如何可能很快就會被提交。</p><h2 id="在專案中儲存舊的程式碼風格" tabindex="-1">在專案中儲存舊的程式碼風格 <a class="header-anchor" href="#在專案中儲存舊的程式碼風格" aria-label="Permalink to &quot;在專案中儲存舊的程式碼風格&quot;">​</a></h2><p>始終可以明確將 IntelliJ IDEA 程式碼風格設定為專案的正確程式碼風格：</p><ol><li>在「<strong>設定/偏好設定</strong>」|「<strong>編輯器</strong>」|「<strong>程式碼風格</strong>」|「<strong>Kotlin</strong>」中，切換到「<strong>專案</strong>」方案。</li><li>開啟「<strong>載入/儲存</strong>」分頁，並在「<strong>使用預設值來自</strong>」中選擇「<strong>Kotlin 過時 IntelliJ IDEA 程式碼風格</strong>」。</li></ol><p>為了在專案開發人員之間共享變更，<code>.idea/codeStyle</code> 資料夾必須提交到 VCS。或者，對於使用 Gradle 或 Maven 配置的專案，可以使用 <strong>kotlin.code.style</strong>=<strong>obsolete</strong>。</p>',35)]))}const b=n(s,[["render",r]]);export{k as __pageData,b as default};
