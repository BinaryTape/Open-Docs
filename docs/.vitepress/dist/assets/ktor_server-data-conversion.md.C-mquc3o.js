import{_ as c,C as e,c as u,o as v,G as n,j as i,ag as y,w as t,a}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-data-conversion.md","filePath":"ktor/server-data-conversion.md","lastUpdated":1755514048000}'),m={name:"ktor/server-data-conversion.md"};function F(C,s,D,b,f,A){const k=e("TopicTitle"),d=e("primary-label"),r=e("Links"),h=e("tldr"),E=e("link-summary"),l=e("code-block"),p=e("TabItem"),o=e("Tabs"),g=e("list");return v(),u("div",null,[n(k,{labelRef:"server-plugin",title:"数据转换"}),n(d,{ref:"server-plugin"},null,512),n(h,null,{default:t(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"代码示例"),a(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/data-conversion"}," data-conversion ")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"所需依赖项"),a(": "),i("code",null,"io.ktor:ktor-server-data-conversion")],-1)),i("p",null,[i("b",null,[n(r,{href:"/ktor/server-native",summary:"Ktor 支持 Kotlin/Native，并允许您无需额外的运行时或虚拟机即可运行服务器。"},{default:t(()=>s[0]||(s[0]=[a("原生服务器")])),_:1}),s[1]||(s[1]=a("支持"))]),s[2]||(s[2]=a(": ✅ "))])]),_:1}),n(E,null,{default:t(()=>s[5]||(s[5]=[a(" Ktor 服务器的 DataConversion 插件允许您添加自定义转换器，用于序列化和反序列化值列表。 ")])),_:1}),s[18]||(s[18]=i("p",null,[i("a",{href:"https://api.ktor.io/ktor-utils/io.ktor.util.converters/-data-conversion/index.html",target:"_blank",rel:"noreferrer"},"DataConversion"),a(" 插件 允许您序列化和反序列化值列表。默认情况下，Ktor 通过 "),i("a",{href:"https://api.ktor.io/ktor-utils/io.ktor.util.converters/-default-conversion-service/index.html",target:"_blank",rel:"noreferrer"},"DefaultConversionService"),a(" 处理原生类型和枚举。 您可以通过安装和配置 DataConversion 插件来扩展此服务以处理额外类型。")],-1)),s[19]||(s[19]=i("h2",{id:"add_dependencies",tabindex:"-1"},[a("添加依赖项 "),i("a",{class:"header-anchor",href:"#add_dependencies","aria-label":'Permalink to "添加依赖项 {id="add_dependencies"}"'},"​")],-1)),s[20]||(s[20]=i("p",null,[a(" 要使用 "),i("code",null,"DataConversion"),a("，您需要在构建脚本中包含 "),i("code",null,"ktor-server-data-conversion"),a(" artifact： ")],-1)),n(o,{group:"languages"},{default:t(()=>[n(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[n(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-data-conversion:$ktor_version")'})]),_:1}),n(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[n(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-data-conversion:$ktor_version"'})]),_:1}),n(p,{title:"Maven","group-key":"maven"},{default:t(()=>[n(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-data-conversion-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[21]||(s[21]=i("h2",{id:"install_plugin",tabindex:"-1"},[a("安装 DataConversion "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "安装 DataConversion {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[7]||(s[7]=a(" 要")),s[8]||(s[8]=i("a",{href:"#install"},"安装",-1)),s[9]||(s[9]=a()),s[10]||(s[10]=i("code",null,"DataConversion",-1)),s[11]||(s[11]=a(" 插件到应用程序， 请将其传递给指定")),n(r,{href:"/ktor/server-modules",summary:"模块允许您通过分组路由来组织您的应用程序。"},{default:t(()=>s[6]||(s[6]=[a("模块")])),_:1}),s[12]||(s[12]=a("中的 ")),s[13]||(s[13]=i("code",null,"install",-1)),s[14]||(s[14]=a(" 函数。 下面的代码片段展示了如何安装 ")),s[15]||(s[15]=i("code",null,"DataConversion",-1)),s[16]||(s[16]=a(" ... "))]),n(g,null,{default:t(()=>s[17]||(s[17]=[i("li",null,[a(" ... 在 "),i("code",null,"embeddedServer"),a(" 函数调用内部。 ")],-1),i("li",null,[a(" ... 在显式定义的 "),i("code",null,"module"),a(" 内部，它是 "),i("code",null,"Application"),a(" 类的扩展函数。 ")],-1)])),_:1}),n(o,null,{default:t(()=>[n(p,{title:"embeddedServer"},{default:t(()=>[n(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.dataconversion.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(DataConversion)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),n(p,{title:"module"},{default:t(()=>[n(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.dataconversion.*
            // ...
            fun Application.module() {
                install(DataConversion)
                // ...
            }`})]),_:1})]),_:1}),s[22]||(s[22]=y(`<h2 id="add-converters" tabindex="-1">添加转换器 <a class="header-anchor" href="#add-converters" aria-label="Permalink to &quot;添加转换器 {id=&quot;add-converters&quot;}&quot;">​</a></h2><p>您可以在 DataConversion 配置中定义类型转换。为指定类型提供一个 <code>convert&lt;T&gt;</code> 方法，并使用可用 函数来序列化和反序列化值列表：</p><ul><li><p>使用 <code>decode()</code> 函数反序列化值列表。它接受一个字符串列表，表示 URL 中重复的值，并返回解码后的值。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { values </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (values: List&lt;String&gt;) -&gt; Any?</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //deserialize values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>使用 <code>encode()</code> 函数序列化值。该函数接受任意值，并返回表示它的 字符串列表。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (value: Any?) -&gt; List&lt;String&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     //serialize value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li></ul><h2 id="访问服务" tabindex="-1">访问服务 <a class="header-anchor" href="#访问服务" aria-label="Permalink to &quot;访问服务&quot;">​</a></h2><p id="service"></p><p>您可以从当前上下文访问 DataConversion 服务：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataConversion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> application.conversionService</span></span></code></pre></div><p>然后您可以使用转换器服务来调用回调函数：</p><ul><li><code>fromValues(values: List String , type: TypeInfo)</code> 回调函数接受作为字符串列表的 <code>values</code>，以及要转换的值的 <code>TypeInfo</code>， 并返回解码后的值。</li><li><code>toValues(value: Any?)</code> 回调函数接受任意值，并返回表示它的字符串列表。</li></ul><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>在以下示例中，定义并配置了 <code>LocalDate</code> 类型的转换器以序列化和反序列化值。当调用 <code>encode</code> 函数时，服务将使用 <code>SimpleDateFormat</code> 转换该值，并返回包含格式化值的列表。 当调用 <code>decode</code> 函数时，服务将把日期格式化为 <code>LocalDate</code> 并返回它。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DataConversion) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        convert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LocalDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: DelegatingConversionService</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formatter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateTimeFormatterBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChronoField.YEAR, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SignStyle.NEVER)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChronoField.MONTH_OF_YEAR, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChronoField.DAY_OF_MONTH, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFormatter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Locale.ROOT)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { values </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (values: List&lt;String&gt;) -&gt; Any?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(formatter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (value: Any?) -&gt; List&lt;String&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SimpleDateFormat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>然后可以手动调用转换服务以检索编码和解码后的值：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> application.conversionService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(call.parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decodedDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> application.conversionService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedDate, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LocalDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;())</span></span></code></pre></div><p>有关完整示例，请参见 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/data-conversion" target="_blank" rel="noreferrer">data-conversion</a></p>`,15))])}const S=c(m,[["render",F]]);export{_ as __pageData,S as default};
