import{_ as e,c as t,o as r,ag as n}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"Kotlin 1.9 相容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/compatibility-guide-19.md","filePath":"zh-Hant/kotlin/compatibility-guide-19.md","lastUpdated":1754307826000}'),a={name:"zh-Hant/kotlin/compatibility-guide-19.md"};function l(s,o,i,c,p,g){return r(),t("div",null,o[0]||(o[0]=[n('<h1 id="kotlin-1-9-相容性指南" tabindex="-1">Kotlin 1.9 相容性指南 <a class="header-anchor" href="#kotlin-1-9-相容性指南" aria-label="Permalink to &quot;Kotlin 1.9 相容性指南&quot;">​</a></h1><p><em>保持語言現代化 (Keeping the Language Modern)</em> 和 <em>舒適的更新 (Comfortable Updates)</em> 是 Kotlin 語言設計中的基本原則。前者指出應移除阻礙語言演進的結構，後者則表示此類移除應事先充分溝通，以使程式碼遷移盡可能順暢。</p><p>儘管大多數語言變更已透過其他管道（如更新日誌或編譯器警告）公佈，但本文件將所有變更彙總，為從 Kotlin 1.8 遷移到 Kotlin 1.9 提供了完整的參考資料。</p><h2 id="基本術語" tabindex="-1">基本術語 <a class="header-anchor" href="#基本術語" aria-label="Permalink to &quot;基本術語&quot;">​</a></h2><p>本文件介紹了幾種相容性：</p><ul><li><em>原始碼 (source)</em>：原始碼不相容變更會使原本能正常編譯（沒有錯誤或警告）的程式碼不再能編譯</li><li><em>二進位 (binary)</em>：如果互相替換兩個二進位構件不會導致載入或連結錯誤，則稱它們為二進位相容</li><li><em>行為 (behavioral)</em>：如果同一程式在應用變更前後展現不同的行為，則稱該變更為行為不相容</li></ul><p>請記住，這些定義僅適用於純粹的 Kotlin。從其他語言角度來看的 Kotlin 程式碼相容性（例如，從 Java 的角度）不在本文件範圍內。</p><h2 id="語言" tabindex="-1">語言 <a class="header-anchor" href="#語言" aria-label="Permalink to &quot;語言&quot;">​</a></h2><h3 id="移除語言版本-1-3" tabindex="-1">移除語言版本 1.3 <a class="header-anchor" href="#移除語言版本-1-3" aria-label="Permalink to &quot;移除語言版本 1.3&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-61111/Remove-language-version-1.3" target="_blank" rel="noreferrer">KT-61111</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.9 引入了語言版本 1.9 並移除了對語言版本 1.3 的支援。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 報告警告</li><li>1.9.0: 將警告提升為錯誤</li></ul></blockquote><h3 id="禁止父類別建構函式呼叫-當父介面型別為函式字面量時" tabindex="-1">禁止父類別建構函式呼叫，當父介面型別為函式字面量時 <a class="header-anchor" href="#禁止父類別建構函式呼叫-當父介面型別為函式字面量時" aria-label="Permalink to &quot;禁止父類別建構函式呼叫，當父介面型別為函式字面量時&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46344" target="_blank" rel="noreferrer">KT-46344</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 如果介面繼承自函式字面量型別，Kotlin 1.9 將禁止呼叫父類別建構函式，因為不存在這樣的建構函式。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將警告提升為錯誤</li></ul></blockquote><h3 id="禁止註解參數型別中的循環" tabindex="-1">禁止註解參數型別中的循環 <a class="header-anchor" href="#禁止註解參數型別中的循環" aria-label="Permalink to &quot;禁止註解參數型別中的循環&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-47932" target="_blank" rel="noreferrer">KT-47932</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.9 禁止將註解的型別直接或間接用作其參數型別之一。這可以防止產生循環。然而，參數型別可以是註解型別的 <code>Array</code> 或 <code>vararg</code>。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 在註解參數型別中的循環上報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將警告提升為錯誤，可以使用 <code>-XXLanguage:-ProhibitCyclesInAnnotations</code> 暫時恢復到 1.9 之前的行為</li></ul></blockquote><h3 id="禁止在沒有參數的函式型別上使用-extensionfunctiontype-註解" tabindex="-1">禁止在沒有參數的函式型別上使用 @ExtensionFunctionType 註解 <a class="header-anchor" href="#禁止在沒有參數的函式型別上使用-extensionfunctiontype-註解" aria-label="Permalink to &quot;禁止在沒有參數的函式型別上使用 @ExtensionFunctionType 註解&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-43527" target="_blank" rel="noreferrer">KT-43527</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.9 禁止在沒有參數的函式型別或非函式型別上使用 <code>@ExtensionFunctionType</code> 註解。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 對非函式型別上的註解報告警告，對<strong>是</strong>函式型別上的註解報告錯誤</li><li>1.9.0: 將函式型別的警告提升為錯誤</li></ul></blockquote><h3 id="禁止-java-欄位型別不匹配賦值" tabindex="-1">禁止 Java 欄位型別不匹配賦值 <a class="header-anchor" href="#禁止-java-欄位型別不匹配賦值" aria-label="Permalink to &quot;禁止 Java 欄位型別不匹配賦值&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-48994" target="_blank" rel="noreferrer">KT-48994</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 如果 Kotlin 1.9 檢測到賦予 Java 欄位的值型別與 Java 欄位的投影型別不匹配，它將報告編譯器錯誤。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 當投影的 Java 欄位型別與賦予的值型別不匹配時，報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將警告提升為錯誤，可以使用 <code>-XXLanguage:-RefineTypeCheckingOnAssignmentsToJavaFields</code> 暫時恢復到 1.9 之前的行為</li></ul></blockquote><h3 id="平台型別可空性斷言例外中不包含原始碼摘錄" tabindex="-1">平台型別可空性斷言例外中不包含原始碼摘錄 <a class="header-anchor" href="#平台型別可空性斷言例外中不包含原始碼摘錄" aria-label="Permalink to &quot;平台型別可空性斷言例外中不包含原始碼摘錄&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-57570" target="_blank" rel="noreferrer">KT-57570</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: behavioral</p><p><strong>Short summary</strong>: 在 Kotlin 1.9 中，表達式空值檢查的例外訊息不包含原始碼摘錄。取而代之的是顯示方法或欄位的名稱。如果表達式不是方法或欄位，則訊息中不提供額外資訊。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.9.0: 表達式空值檢查產生的例外訊息包含原始碼摘錄</li><li>1.9.0: 表達式空值檢查產生的例外訊息僅包含方法或欄位名稱，可以使用 <code>-XXLanguage:-NoSourceCodeInNotNullAssertionExceptions</code> 暫時恢復到 1.9 之前的行為</li></ul></blockquote><h3 id="禁止將-super-呼叫委派給抽象父類別成員" tabindex="-1">禁止將 super 呼叫委派給抽象父類別成員 <a class="header-anchor" href="#禁止將-super-呼叫委派給抽象父類別成員" aria-label="Permalink to &quot;禁止將 super 呼叫委派給抽象父類別成員&quot;">​</a></h3><blockquote><p><strong>Issues</strong>: <a href="https://youtrack.com/issue/KT-45508" target="_blank" rel="noreferrer">KT-45508</a>, <a href="https://youtrack.com/issue/KT-49017" target="_blank" rel="noreferrer">KT-49017</a>, <a href="https://youtrack.com/issue/KT-38078" target="_blank" rel="noreferrer">KT-38078</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 當顯式或隱式 <code>super</code> 呼叫被委派給父類別的<strong>抽象</strong>成員時，即使超介面中有預設實作，Kotlin 也將報告編譯錯誤。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.5.20: 當使用未覆寫所有抽象成員的非抽象類別時引入警告</li><li>1.7.0: 如果 <code>super</code> 呼叫實際上存取了父類別的抽象成員，則報告警告</li><li>1.7.0: 如果啟用了 <code>-Xjvm-default=all</code> 或 <code>-Xjvm-default=all-compatibility</code> 相容性模式，則在所有受影響的情況下報告錯誤；在漸進模式下報告錯誤</li><li>1.8.0: 在以下情況下報告錯誤：宣告了具有來自父類別的未覆寫抽象方法的具體類別，以及 <code>Any</code> 方法的 <code>super</code> 呼叫在父類別中被覆寫為抽象</li><li>1.9.0: 在所有受影響的情況下報告錯誤，包括對父類別抽象方法的顯式 <code>super</code> 呼叫</li></ul></blockquote><h3 id="廢棄帶主詞的-when-中容易混淆的語法" tabindex="-1">廢棄帶主詞的 when 中容易混淆的語法 <a class="header-anchor" href="#廢棄帶主詞的-when-中容易混淆的語法" aria-label="Permalink to &quot;廢棄帶主詞的 when 中容易混淆的語法&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-48385" target="_blank" rel="noreferrer">KT-48385</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.6 廢棄了 <code>when</code> 條件表達式中幾個容易混淆的語法結構。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 對受影響的表達式引入廢棄警告</li><li>1.8.0: 將此警告提升為錯誤，可以使用 <code>-XXLanguage:-ProhibitConfusingSyntaxInWhenBranches</code> 暫時恢復到 1.8 之前的行為</li><li>&gt;= 2.1: 將一些廢棄的結構重新用於新的語言功能</li></ul></blockquote><h3 id="防止不同數值型別之間的隱式強制轉型" tabindex="-1">防止不同數值型別之間的隱式強制轉型 <a class="header-anchor" href="#防止不同數值型別之間的隱式強制轉型" aria-label="Permalink to &quot;防止不同數值型別之間的隱式強制轉型&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-48645" target="_blank" rel="noreferrer">KT-48645</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: behavioral</p><p><strong>Short summary</strong>: 當語義上只需要向下轉換為某個原始數值型別時，Kotlin 將避免自動將數值轉換為該型別。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.5.30: 所有受影響情況下的舊行為</li><li>1.5.30: 修復生成的屬性委託存取器中的向下轉換行為，可以使用 <code>-Xuse-old-backend</code> 暫時恢復到 1.5.30 之前的修復行為</li><li>&gt;= 2.0: 修復其他受影響情況下的向下轉換行為</li></ul></blockquote><h3 id="禁止泛型型別別名使用中的上限違規-在別名型別的型別引數的泛型型別引數中使用的型別參數" tabindex="-1">禁止泛型型別別名使用中的上限違規（在別名型別的型別引數的泛型型別引數中使用的型別參數） <a class="header-anchor" href="#禁止泛型型別別名使用中的上限違規-在別名型別的型別引數的泛型型別引數中使用的型別參數" aria-label="Permalink to &quot;禁止泛型型別別名使用中的上限違規（在別名型別的型別引數的泛型型別引數中使用的型別參數）&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-54066" target="_blank" rel="noreferrer">KT-54066</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 當型別別名 (type alias) 的型別參數被用作別名型別 (aliased type) 的型別引數的泛型型別引數時（例如 <code>typealias Alias&lt;T&gt; = Base&lt;List&lt;T&gt;&gt;</code>），Kotlin 將禁止使用具有違反相應別名型別參數上限限制的型別引數的型別別名。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.8.0: 當泛型型別別名使用具有違反相應別名型別參數上限約束的型別引數時，報告警告</li><li>2.0.0: 將警告提升為錯誤</li></ul></blockquote><h3 id="在公共簽名中近似局部型別時保持可空性" tabindex="-1">在公共簽名中近似局部型別時保持可空性 <a class="header-anchor" href="#在公共簽名中近似局部型別時保持可空性" aria-label="Permalink to &quot;在公共簽名中近似局部型別時保持可空性&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-53982" target="_blank" rel="noreferrer">KT-53982</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source, binary</p><p><strong>Short summary</strong>: 當局部或匿名型別從沒有明確指定返回型別的表達式主體函式返回時，Kotlin 編譯器會使用該型別的已知超型別來推斷（或近似）返回型別。在此過程中，編譯器可能會推斷出一個非空型別，而實際上可能返回空值。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.8.0: 使用彈性超型別近似彈性型別</li><li>1.8.0: 當宣告被推斷為應為可空型別而卻是非空型別時報告警告，提示使用者明確指定型別</li><li>2.0.0: 使用可空超型別近似可空型別，可以使用 <code>-XXLanguage:-KeepNullabilityWhenApproximatingLocalType</code> 暫時恢復到 2.0 之前的行為</li></ul></blockquote><h3 id="不透過覆寫傳播廢棄狀態" tabindex="-1">不透過覆寫傳播廢棄狀態 <a class="header-anchor" href="#不透過覆寫傳播廢棄狀態" aria-label="Permalink to &quot;不透過覆寫傳播廢棄狀態&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-47902" target="_blank" rel="noreferrer">KT-47902</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.9 將不再將父類別中已廢棄成員的廢棄狀態傳播到子類別中覆寫它的成員，從而提供一種明確的機制，可以在廢棄父類別成員的同時，使其在子類別中保持非廢棄狀態。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 報告一個警告，內容為未來行為變更的訊息，並提示使用者要麼抑制此警告，要麼在已廢棄成員的覆寫上明確寫上 <code>@Deprecated</code> 註解</li><li>1.9.0: 停止將廢棄狀態傳播到被覆寫的成員。此變更也會在漸進模式下立即生效</li></ul></blockquote><h3 id="禁止在註解類別中除其參數宣告以外的任何地方使用集合字面量" tabindex="-1">禁止在註解類別中除其參數宣告以外的任何地方使用集合字面量 <a class="header-anchor" href="#禁止在註解類別中除其參數宣告以外的任何地方使用集合字面量" aria-label="Permalink to &quot;禁止在註解類別中除其參數宣告以外的任何地方使用集合字面量&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-39041" target="_blank" rel="noreferrer">KT-39041</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 允許以受限制的方式使用集合字面量——用於將陣列傳遞給註解類別的參數或為這些參數指定預設值。然而，除此之外，Kotlin 還允許在註解類別的任何其他地方使用集合字面量，例如在其巢狀物件中。Kotlin 1.9 將禁止在註解類別中除其參數預設值之外的任何地方使用集合字面量。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 對註解類別中巢狀物件裡的陣列字面量報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將警告提升為錯誤</li></ul></blockquote><h3 id="禁止在預設值表達式中向前引用參數" tabindex="-1">禁止在預設值表達式中向前引用參數 <a class="header-anchor" href="#禁止在預設值表達式中向前引用參數" aria-label="Permalink to &quot;禁止在預設值表達式中向前引用參數&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-25694" target="_blank" rel="noreferrer">KT-25694</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.9 將禁止在其他參數的預設值表達式中向前引用參數。這確保了在參數於預設值表達式中被存取時，它已經具有值，要麼是傳遞給函式的值，要麼是透過其自身的預設值表達式初始化的值。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 當帶有預設值的參數在位於其之前的另一個參數的預設值中被引用時，報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將警告提升為錯誤，可以使用 <code>-XXLanguage:-ProhibitIllegalValueParameterUsageInDefaultArguments</code> 暫時恢復到 1.9 之前的行為</li></ul></blockquote><h3 id="禁止在內聯函式參數上進行擴充呼叫" tabindex="-1">禁止在內聯函式參數上進行擴充呼叫 <a class="header-anchor" href="#禁止在內聯函式參數上進行擴充呼叫" aria-label="Permalink to &quot;禁止在內聯函式參數上進行擴充呼叫&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-52502" target="_blank" rel="noreferrer">KT-52502</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 儘管 Kotlin 允許將內聯函式參數作為接收者傳遞給另一個內聯函式，但在編譯此類程式碼時總是會導致編譯器例外。Kotlin 1.9 將禁止這種行為，從而報告錯誤而不是使編譯器崩潰。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.20: 對內聯函式參數上的內聯擴充呼叫報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將警告提升為錯誤</li></ul></blockquote><h3 id="禁止呼叫名稱為-suspend-且帶有匿名函式引數的中綴函式" tabindex="-1">禁止呼叫名稱為 suspend 且帶有匿名函式引數的中綴函式 <a class="header-anchor" href="#禁止呼叫名稱為-suspend-且帶有匿名函式引數的中綴函式" aria-label="Permalink to &quot;禁止呼叫名稱為 suspend 且帶有匿名函式引數的中綴函式&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-49264" target="_blank" rel="noreferrer">KT-49264</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.9 將不再允許呼叫名稱為 <code>suspend</code> 且將函式型別的單個參數作為匿名函式字面量傳遞的中綴函式。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.20: 對帶有匿名函式字面量的 <code>suspend</code> 中綴呼叫報告警告</li><li>1.9.0: 將警告提升為錯誤，可以使用 <code>-XXLanguage:-ModifierNonBuiltinSuspendFunError</code> 暫時恢復到 1.9 之前的行為</li><li>TODO: 變更解析器解釋 <code>suspend fun</code> 詞元序列的方式</li></ul></blockquote><h3 id="禁止在內部類別中使用捕獲的型別參數-以防其變異性衝突" tabindex="-1">禁止在內部類別中使用捕獲的型別參數，以防其變異性衝突 <a class="header-anchor" href="#禁止在內部類別中使用捕獲的型別參數-以防其變異性衝突" aria-label="Permalink to &quot;禁止在內部類別中使用捕獲的型別參數，以防其變異性衝突&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-50947" target="_blank" rel="noreferrer">KT-50947</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.9 將禁止在內部類別中使用外部類別具有 <code>in</code> 或 <code>out</code> 變異的型別參數，當這些參數在違反其宣告變異的位置時。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 當外部類別的型別參數使用位置違反該參數的變異規則時，報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將警告提升為錯誤，可以使用 <code>-XXLanguage:-ReportTypeVarianceConflictOnQualifierArguments</code> 暫時恢復到 1.9 之前的行為</li></ul></blockquote><h3 id="禁止在複合賦值運算子中遞歸呼叫沒有明確返回型別的函式" tabindex="-1">禁止在複合賦值運算子中遞歸呼叫沒有明確返回型別的函式 <a class="header-anchor" href="#禁止在複合賦值運算子中遞歸呼叫沒有明確返回型別的函式" aria-label="Permalink to &quot;禁止在複合賦值運算子中遞歸呼叫沒有明確返回型別的函式&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-48546" target="_blank" rel="noreferrer">KT-48546</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.9 將禁止在函式體內，於複合賦值運算子 (compound assignment operator) 的引數中呼叫沒有明確指定返回型別的函式，就像它目前在該函式體內的其它表達式中所做的那樣。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 當沒有明確指定返回型別的函式在其函式體內於複合賦值運算子引數中遞歸呼叫時，報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將警告提升為錯誤</li></ul></blockquote><h3 id="禁止將具有可空邊界的-kotlin-泛型參數傳遞給預期為-notnull-t-的不健全呼叫" tabindex="-1">禁止將具有可空邊界的 Kotlin 泛型參數傳遞給預期為 @NotNull T 的不健全呼叫 <a class="header-anchor" href="#禁止將具有可空邊界的-kotlin-泛型參數傳遞給預期為-notnull-t-的不健全呼叫" aria-label="Permalink to &quot;禁止將具有可空邊界的 Kotlin 泛型參數傳遞給預期為 @NotNull T 的不健全呼叫&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-36770" target="_blank" rel="noreferrer">KT-36770</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.9 將禁止方法呼叫中，將可能為空值的泛型型別值傳遞給 Java 方法的 <code>@NotNull</code> 註解參數。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.5.20: 當預期非空型別時傳遞了無約束的泛型型別參數，則報告警告</li><li>1.9.0: 報告型別不匹配錯誤而不是上述警告，可以使用 <code>-XXLanguage:-ProhibitUsingNullableTypeParameterAgainstNotNullAnnotated</code> 暫時恢復到 1.8 之前的行為</li></ul></blockquote><h3 id="禁止從列舉條目初始化器存取該列舉的伴生物件成員" tabindex="-1">禁止從列舉條目初始化器存取該列舉的伴生物件成員 <a class="header-anchor" href="#禁止從列舉條目初始化器存取該列舉的伴生物件成員" aria-label="Permalink to &quot;禁止從列舉條目初始化器存取該列舉的伴生物件成員&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-49110" target="_blank" rel="noreferrer">KT-49110</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.9 將禁止從列舉條目初始化器中對列舉的伴生物件進行所有類型的存取。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 對此類伴生成員存取報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將警告提升為錯誤，可以使用 <code>-XXLanguage:-ProhibitAccessToEnumCompanionMembersInEnumConstructorCall</code> 暫時恢復到 1.8 之前的行為</li></ul></blockquote><h3 id="廢棄並移除-enum-declaringclass-合成屬性" tabindex="-1">廢棄並移除 Enum.declaringClass 合成屬性 <a class="header-anchor" href="#廢棄並移除-enum-declaringclass-合成屬性" aria-label="Permalink to &quot;廢棄並移除 Enum.declaringClass 合成屬性&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-49653" target="_blank" rel="noreferrer">KT-49653</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 允許在由底層 Java 類別 <code>java.lang.Enum</code> 的 <code>getDeclaringClass()</code> 方法產生的 <code>Enum</code> 值上使用合成屬性 <code>declaringClass</code>，儘管此方法不適用於 Kotlin 的 <code>Enum</code> 型別。Kotlin 1.9 將禁止使用此屬性，建議改用擴充屬性 <code>declaringJavaClass</code>。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 對 <code>declaringClass</code> 屬性使用報告警告（或在漸進模式下報告錯誤），建議遷移到 <code>declaringJavaClass</code> 擴充</li><li>1.9.0: 將警告提升為錯誤，可以使用 <code>-XXLanguage:-ProhibitEnumDeclaringClass</code> 暫時恢復到 1.9 之前的行為</li><li>2.0.0: 移除 <code>declaringClass</code> 合成屬性</li></ul></blockquote><h3 id="廢棄編譯器選項-xjvm-default-的-enable-和-compatibility-模式" tabindex="-1">廢棄編譯器選項 -Xjvm-default 的 enable 和 compatibility 模式 <a class="header-anchor" href="#廢棄編譯器選項-xjvm-default-的-enable-和-compatibility-模式" aria-label="Permalink to &quot;廢棄編譯器選項 -Xjvm-default 的 enable 和 compatibility 模式&quot;">​</a></h3><blockquote><p><strong>Issues</strong>: <a href="https://youtrack.com/issue/KT-46329" target="_blank" rel="noreferrer">KT-46329</a>, <a href="https://youtrack.com/issue/KT-54746" target="_blank" rel="noreferrer">KT-54746</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.9 禁止使用編譯器選項 <code>-Xjvm-default</code> 的 <code>enable</code> 和 <code>compatibility</code> 模式。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 對編譯器選項 <code>-Xjvm-default</code> 的 <code>enable</code> 和 <code>compatibility</code> 模式引入警告</li><li>1.9.0: 將此警告提升為錯誤</li></ul></blockquote><h3 id="禁止在建構器推斷上下文下隱式將型別變數推斷為上限" tabindex="-1">禁止在建構器推斷上下文下隱式將型別變數推斷為上限 <a class="header-anchor" href="#禁止在建構器推斷上下文下隱式將型別變數推斷為上限" aria-label="Permalink to &quot;禁止在建構器推斷上下文下隱式將型別變數推斷為上限&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-47986" target="_blank" rel="noreferrer">KT-47986</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 在建構器推斷 lambda 函式的範圍內，如果沒有任何使用點型別資訊，Kotlin 2.0 將禁止將型別變數推斷為相應型別參數的上限，就像它目前在其他上下文中那樣。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.20: 當在沒有使用點型別資訊的情況下將型別參數推斷為宣告的上限時，報告警告（或在漸進模式下報告錯誤）</li><li>2.0.0: 將警告提升為錯誤</li></ul></blockquote><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><h3 id="當-range-progression-開始實作-collection-時-警告潛在的重載解析變更" tabindex="-1">當 Range/Progression 開始實作 Collection 時，警告潛在的重載解析變更 <a class="header-anchor" href="#當-range-progression-開始實作-collection-時-警告潛在的重載解析變更" aria-label="Permalink to &quot;當 Range/Progression 開始實作 Collection 時，警告潛在的重載解析變更&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-49276" target="_blank" rel="noreferrer">KT-49276</a></p><p><strong>Component</strong>: Core language / kotlin-stdlib</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 計劃在 Kotlin 1.9 中讓標準進程 (progressions) 及其繼承的具體範圍 (concrete ranges) 實作 <code>Collection</code> 介面。如果某個方法有兩個重載，一個接受元素而另一個接受集合，這可能會導致重載解析時選擇不同的重載。當使用範圍或進程引數呼叫此類重載方法時，Kotlin 將透過報告警告或錯誤來使此情況可見。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 當使用標準進程或其範圍繼承者作為引數呼叫重載方法時報告警告，如果此進程/範圍實作 <code>Collection</code> 介面導致未來在此呼叫中選擇另一個重載</li><li>1.8.0: 將此警告提升為錯誤</li><li>2.1.0: 停止報告錯誤，在進程中實作 <code>Collection</code> 介面，從而改變受影響情況下的重載解析結果</li></ul></blockquote><h3 id="將宣告從-kotlin-dom-和-kotlin-browser-封裝遷移到-kotlinx" tabindex="-1">將宣告從 kotlin.dom 和 kotlin.browser 封裝遷移到 kotlinx.* <a class="header-anchor" href="#將宣告從-kotlin-dom-和-kotlin-browser-封裝遷移到-kotlinx" aria-label="Permalink to &quot;將宣告從 kotlin.dom 和 kotlin.browser 封裝遷移到 kotlinx.*&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-39330" target="_blank" rel="noreferrer">KT-39330</a></p><p><strong>Component</strong>: kotlin-stdlib (JS)</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: <code>kotlin.dom</code> 和 <code>kotlin.browser</code> 封裝中的宣告已移至相應的 <code>kotlinx.*</code> 封裝，以準備將它們從標準函式庫 (stdlib) 中提取。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.4.0: 在 <code>kotlinx.dom</code> 和 <code>kotlinx.browser</code> 封裝中引入替換 API</li><li>1.4.0: 廢棄 <code>kotlin.dom</code> 和 <code>kotlin.browser</code> 封裝中的 API 並建議使用上述新 API 作為替換</li><li>1.6.0: 將廢棄等級提升為錯誤</li><li>1.8.20: 從適用於 JS-IR 目標的標準函式庫中移除廢棄函式</li><li>&gt;= 2.0: 將 <code>kotlinx.*</code> 封裝中的 API 移至單獨的函式庫</li></ul></blockquote><h3 id="廢棄部分僅限-js-的-api" tabindex="-1">廢棄部分僅限 JS 的 API <a class="header-anchor" href="#廢棄部分僅限-js-的-api" aria-label="Permalink to &quot;廢棄部分僅限 JS 的 API&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-48587" target="_blank" rel="noreferrer">KT-48587</a></p><p><strong>Component</strong>: kotlin-stdlib (JS)</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 標準函式庫中的一些僅限 JS 的函式已被廢棄以供移除。它們包括：<code>String.concat(String)</code>、<code>String.match(regex: String)</code>、<code>String.matches(regex: String)</code>，以及接受比較函式的陣列 <code>sort</code> 函式，例如 <code>Array&lt;out T&gt;.sort(comparison: (a: T, b: T) -&gt; Int)</code>。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 以警告方式廢棄受影響的函式</li><li>1.9.0: 將廢棄等級提升為錯誤</li><li>&gt;=2.0: 從公共 API 中移除廢棄函式</li></ul></blockquote><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="從-gradle-設定中移除-enableendorsedlibs-標誌" tabindex="-1">從 Gradle 設定中移除 enableEndorsedLibs 標誌 <a class="header-anchor" href="#從-gradle-設定中移除-enableendorsedlibs-標誌" aria-label="Permalink to &quot;從 Gradle 設定中移除 enableEndorsedLibs 標誌&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-54098" target="_blank" rel="noreferrer">KT-54098</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: <code>enableEndorsedLibs</code> 標誌在 Gradle 設定中不再受支援。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.9.0: <code>enableEndorsedLibs</code> 標誌在 Gradle 設定中受支援</li><li>1.9.0: <code>enableEndorsedLibs</code> 標誌在 Gradle 設定中<strong>不</strong>受支援</li></ul></blockquote><h3 id="移除-gradle-慣例" tabindex="-1">移除 Gradle 慣例 <a class="header-anchor" href="#移除-gradle-慣例" aria-label="Permalink to &quot;移除 Gradle 慣例&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-52976" target="_blank" rel="noreferrer">KT-52976</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Gradle 慣例已在 Gradle 7.1 中廢棄，並在 Gradle 8 中移除。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.20: Gradle 慣例已廢棄</li><li>1.9.0: Gradle 慣例已移除</li></ul></blockquote><h3 id="移除-kotlincompile-任務的-classpath-屬性" tabindex="-1">移除 KotlinCompile 任務的 classpath 屬性 <a class="header-anchor" href="#移除-kotlincompile-任務的-classpath-屬性" aria-label="Permalink to &quot;移除 KotlinCompile 任務的 classpath 屬性&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-53748" target="_blank" rel="noreferrer">KT-53748</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: <code>KotlinCompile</code> 任務的 <code>classpath</code> 屬性已移除。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: <code>classpath</code> 屬性已廢棄</li><li>1.8.0: 將廢棄等級提升為錯誤</li><li>1.9.0: 從公共 API 中移除廢棄函式</li></ul></blockquote><h3 id="廢棄-kotlin-internal-single-build-metrics-file-屬性" tabindex="-1">廢棄 kotlin.internal.single.build.metrics.file 屬性 <a class="header-anchor" href="#廢棄-kotlin-internal-single-build-metrics-file-屬性" aria-label="Permalink to &quot;廢棄 kotlin.internal.single.build.metrics.file 屬性&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-53357" target="_blank" rel="noreferrer">KT-53357</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 廢棄用於定義單一檔案以產生建置報告的 <code>kotlin.internal.single.build.metrics.file</code> 屬性。請改用 <code>kotlin.build.report.single_file</code> 屬性並配合 <code>kotlin.build.report.output=single_file</code>。</p><p><strong>Deprecation cycle:</strong></p><ul><li>1.8.0: 將廢棄等級提升為警告</li><li>&gt;= 1.9: 刪除該屬性</li></ul></blockquote>',70)]))}const h=e(a,[["render",l]]);export{d as __pageData,h as default};
