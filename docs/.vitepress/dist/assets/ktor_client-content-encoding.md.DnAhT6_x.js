import{_ as E,C as n,c as u,o as y,G as s,ag as p,j as t,w as a,a as e}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/client-content-encoding.md","filePath":"ktor/client-content-encoding.md","lastUpdated":1755457140000}'),F={name:"ktor/client-content-encoding.md"};function _(C,i,m,b,f,B){const k=n("TopicTitle"),h=n("primary-label"),r=n("tldr"),d=n("link-summary"),l=n("code-block"),o=n("TabItem"),c=n("Tabs"),g=n("Links");return y(),u("div",null,[s(k,{labelRef:"client-plugin",title:"内容编码"}),s(h,{ref:"client-plugin"},null,512),s(r,null,{default:a(()=>i[0]||(i[0]=[t("p",null,[t("b",null,"所需依赖项"),e(": "),t("code",null,"io.ktor:ktor-client-encoding")],-1),t("p",null,[t("b",null,"代码示例"),e(": "),t("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-content-encoding"}," client-content-encoding ")],-1)])),_:1}),s(d,null,{default:a(()=>i[1]||(i[1]=[e(" ContentEncoding 插件允许你启用指定的压缩算法（例如 'gzip' 和 'deflate'）并配置其设置。 ")])),_:1}),i[5]||(i[5]=p('<p>Ktor 客户端提供了 <a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-encoding/io.ktor.client.plugins.compression/-content-encoding" target="_blank" rel="noreferrer">ContentEncoding</a> 插件，允许你启用指定的压缩算法（例如 <code>gzip</code> 和 <code>deflate</code>）并配置其设置。该插件主要有三个用途：</p><ul><li>设置 <code>Accept-Encoding</code> 请求头并带上指定的质量值。</li><li>可选地编码请求体。</li><li>解码<a href="./client-responses#body">从服务器接收到的内容</a>以获取原始载荷。</li></ul><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>要使用 <code>ContentEncoding</code>，你需要在构建脚本中包含 <code>ktor-client-encoding</code> artifact：</p>',4)),s(c,{group:"languages"},{default:a(()=>[s(o,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:a(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-encoding:$ktor_version")'})]),_:1}),s(o,{title:"Gradle (Groovy)","group-key":"groovy"},{default:a(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-encoding:$ktor_version"'})]),_:1}),s(o,{title:"Maven","group-key":"maven"},{default:a(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-encoding-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),t("p",null,[i[3]||(i[3]=e(" 你可以从 ")),s(g,{href:"/ktor/client-dependencies",summary:"了解如何将客户端依赖项添加到现有项目中。"},{default:a(()=>i[2]||(i[2]=[e("添加客户端依赖项")])),_:1}),i[4]||(i[4]=e(" 中了解更多关于 Ktor 客户端所需 artifact 的信息。 "))]),i[6]||(i[6]=p(`<h2 id="install_plugin" tabindex="-1">安装 ContentEncoding <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;安装 ContentEncoding {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p>要安装 <code>ContentEncoding</code>，请将其传递给<a href="./client-create-and-configure#configure-client">客户端配置块</a>内的 <code>install</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.compression.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentEncoding)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configure_plugin" tabindex="-1">配置 ContentEncoding <a class="header-anchor" href="#configure_plugin" aria-label="Permalink to &quot;配置 ContentEncoding {id=&quot;configure_plugin&quot;}&quot;">​</a></h2><p>以下<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-content-encoding" target="_blank" rel="noreferrer">示例</a>展示了如何在客户端上启用 <code>deflate</code> 和 <code>gzip</code> 编码器并带上指定的质量值：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentEncoding) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        deflate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        gzip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果需要，你可以实现 <code>ContentEncoder</code> 接口来创建自定义编码器，并将其传递给 <code>customEncoder</code> 函数。</p><h2 id="encode_request_body" tabindex="-1">编码请求体 <a class="header-anchor" href="#encode_request_body" aria-label="Permalink to &quot;编码请求体 {id=&quot;encode_request_body&quot;}&quot;">​</a></h2><p>要编码请求体，请在 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/-http-request-builder/index.html" target="_blank" rel="noreferrer">HttpRequestBuilder</a> 块中使用 <code>compress()</code> 函数。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.compression.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentEncoding)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/upload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gzip&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(someLongBody)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,10))])}const A=E(F,[["render",_]]);export{q as __pageData,A as default};
