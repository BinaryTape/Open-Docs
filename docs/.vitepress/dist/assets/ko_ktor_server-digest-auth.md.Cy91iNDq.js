import{_ as g,C as t,c,o as E,j as i,G as a,ag as h,a as e,w as n}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-digest-auth.md","filePath":"ko/ktor/server-digest-auth.md","lastUpdated":1755457140000}'),u={name:"ko/ktor/server-digest-auth.md"};function y(F,s,v,m,C,b){const r=t("show-structure"),k=t("Links"),o=t("tldr"),l=t("code-block"),p=t("TabItem"),d=t("Tabs");return E(),c("div",null,[s[5]||(s[5]=i("h1",{id:"ktor-서버의-다이제스트-인증",tabindex:"-1"},[e("Ktor 서버의 다이제스트 인증 "),i("a",{class:"header-anchor",href:"#ktor-서버의-다이제스트-인증","aria-label":'Permalink to "Ktor 서버의 다이제스트 인증"'},"​")],-1)),a(r,{for:"chapter",depth:"2"}),a(o,null,{default:n(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"필수 의존성"),e(": "),i("code",null,"io.ktor:ktor-server-auth")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"코드 예시"),e(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-digest"}," auth-digest ")],-1)),i("p",null,[i("b",null,[a(k,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임이나 가상 머신 없이 서버를 실행할 수 있게 해줍니다."},{default:n(()=>s[0]||(s[0]=[e("네이티브 서버")])),_:1}),s[1]||(s[1]=e(" 지원"))]),s[2]||(s[2]=e(": ✖️ "))])]),_:1}),s[6]||(s[6]=h('<p>다이제스트(Digest) 인증 방식은 접근 제어 및 인증에 사용되는 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noreferrer">HTTP 프레임워크</a>의 일부입니다. 이 방식에서는 사용자 이름과 비밀번호를 네트워크를 통해 전송하기 전에 해시 함수를 적용합니다.</p><p>Ktor는 다이제스트 인증을 사용하여 사용자 로그인 및 특정 <a href="./server-routing">라우트</a>를 보호할 수 있도록 지원합니다. Ktor에서의 인증에 대한 일반적인 정보는 <a href="./server-auth">Ktor 서버에서의 인증 및 인가</a> 섹션에서 확인할 수 있습니다.</p><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>digest</code> 인증을 활성화하려면 빌드 스크립트에 <code>ktor-server-auth</code> 아티팩트를 포함해야 합니다.</p>',4)),a(d,{group:"languages"},{default:n(()=>[a(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),a(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),a(p,{title:"Maven","group-key":"maven"},{default:n(()=>[a(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[7]||(s[7]=h(`<h2 id="flow" tabindex="-1">다이제스트 인증 흐름 <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;다이제스트 인증 흐름 {id=&quot;flow&quot;}&quot;">​</a></h2><p>다이제스트 인증 흐름은 다음과 같습니다.</p><ol><li><p>클라이언트가 서버 애플리케이션의 특정 <a href="./server-routing">라우트</a>에 <code>Authorization</code> 헤더 없이 요청합니다.</p></li><li><p>서버는 클라이언트에 <code>401</code> (Unauthorized) 응답 상태로 응답하고, <code>WWW-Authenticate</code> 응답 헤더를 사용하여 다이제스트 인증 방식이 라우트를 보호하는 데 사용된다는 정보를 제공합니다. 일반적인 <code>WWW-Authenticate</code> 헤더는 다음과 같습니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>WWW-Authenticate: Digest</span></span>
<span class="line"><span>        realm=&quot;Access to the &#39;/&#39; path&quot;,</span></span>
<span class="line"><span>        nonce=&quot;e4549c0548886bc2&quot;,</span></span>
<span class="line"><span>        algorithm=&quot;MD5&quot;</span></span></code></pre></div><p>Ktor에서는 <code>digest</code> 인증 제공자를 <a href="#configure-provider">구성</a>할 때 realm과 nonce 값을 생성하는 방법을 지정할 수 있습니다.</p></li><li><p>일반적으로 클라이언트는 사용자가 자격 증명을 입력할 수 있는 로그인 대화 상자를 표시합니다. 그런 다음 클라이언트는 다음 <code>Authorization</code> 헤더와 함께 요청을 보냅니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Authorization: Digest username=&quot;jetbrains&quot;,</span></span>
<span class="line"><span>        realm=&quot;Access to the &#39;/&#39; path&quot;,</span></span>
<span class="line"><span>        nonce=&quot;e4549c0548886bc2&quot;,</span></span>
<span class="line"><span>        uri=&quot;/&quot;,</span></span>
<span class="line"><span>        algorithm=MD5,</span></span>
<span class="line"><span>        response=&quot;6299988bb4f05c0d8ad44295873858cf&quot;</span></span></code></pre></div><p><code>response</code> 값은 다음 방식으로 생성됩니다.</p><p>a. <code>HA1 = MD5(username:realm:password)</code></p><blockquote><p>이 부분은 서버에 <a href="#digest-table">저장</a>되며 Ktor가 사용자 자격 증명을 검증하는 데 사용될 수 있습니다.</p></blockquote><p>b. <code>HA2 = MD5(method:digestURI)</code></p><p>c. <code>response = MD5(HA1:nonce:HA2)</code></p></li><li><p>서버는 클라이언트가 보낸 자격 증명을 <a href="#configure-provider">검증</a>하고 요청된 콘텐츠로 응답합니다.</p></li></ol><h2 id="install" tabindex="-1">다이제스트 인증 설치 <a class="header-anchor" href="#install" aria-label="Permalink to &quot;다이제스트 인증 설치 {id=&quot;install&quot;}&quot;">​</a></h2><p><code>digest</code> 인증 제공자를 설치하려면 <code>install</code> 블록 내에서 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/digest.html" target="_blank" rel="noreferrer">digest</a> 함수를 호출합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure digest authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>선택적으로 <a href="#authenticate-route">지정된 라우트를 인증</a>하는 데 사용될 수 있는 <a href="./server-auth#provider-name">제공자 이름</a>을 지정할 수 있습니다.</p><h2 id="configure" tabindex="-1">다이제스트 인증 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;다이제스트 인증 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><p>Ktor에서 다양한 인증 제공자를 구성하는 방법에 대한 일반적인 아이디어를 얻으려면 <a href="./server-auth#configure">인증 구성</a>을 참조하세요. 이 섹션에서는 <code>digest</code> 인증 제공자의 구성 세부 정보를 살펴보겠습니다.</p><h3 id="digest-table" tabindex="-1">1단계: 다이제스트가 포함된 사용자 테이블 제공 <a class="header-anchor" href="#digest-table" aria-label="Permalink to &quot;1단계: 다이제스트가 포함된 사용자 테이블 제공 {id=&quot;digest-table&quot;}&quot;">​</a></h3><p><code>digest</code> 인증 제공자는 다이제스트 메시지의 <code>HA1</code> 부분을 사용하여 사용자 자격 증명을 검증합니다. 따라서 사용자 이름과 해당 <code>HA1</code> 해시를 포함하는 사용자 테이블을 제공할 수 있습니다. 아래 예시에서는 <code>getMd5Digest</code> 함수가 <code>HA1</code> 해시를 생성하는 데 사용됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getMd5Digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ByteArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MessageDigest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MD5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UTF_8))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myRealm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userTable: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;jetbrains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMd5Digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jetbrains:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$myRealm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMd5Digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;admin:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$myRealm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="configure-provider" tabindex="-1">2단계: 다이제스트 제공자 구성 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;2단계: 다이제스트 제공자 구성 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p><code>digest</code> 인증 제공자는 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-digest-authentication-provider/-config/index.html" target="_blank" rel="noreferrer">DigestAuthenticationProvider.Config</a> 클래스를 통해 설정을 노출합니다. 아래 예시에서는 다음 설정이 지정됩니다.</p><ul><li><code>realm</code> 속성은 <code>WWW-Authenticate</code> 헤더에 전달될 realm을 설정합니다.</li><li><code>digestProvider</code> 함수는 지정된 사용자 이름에 대한 다이제스트의 <code>HA1</code> 부분을 가져옵니다.</li><li>(선택 사항) <code>validate</code> 함수는 자격 증명을 사용자 정의 principal에 매핑할 수 있도록 합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-digest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myRealm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            digestProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { userName, realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                userTable[userName]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (credentials.userName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    CustomPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentials.userName, credentials.realm)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> realm: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>또한 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-digest-authentication-provider/-config/nonce-manager.html" target="_blank" rel="noreferrer">nonceManager</a> 속성을 사용하여 nonce 값을 생성하는 방법을 지정할 수도 있습니다.</p><h3 id="authenticate-route" tabindex="-1">3단계: 특정 리소스 보호 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;3단계: 특정 리소스 보호 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p><code>digest</code> 제공자를 구성한 후 <strong><a href="./server-auth#authenticate-route">authenticate</a></strong> 함수를 사용하여 애플리케이션의 특정 리소스를 보호할 수 있습니다. 인증에 성공한 경우 <code>call.principal</code> 함수를 사용하여 라우트 핸들러 내에서 인증된 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-principal/index.html" target="_blank" rel="noreferrer">Principal</a>을 검색하고 인증된 사용자의 이름을 가져올 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-digest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomPrincipal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()?.userName}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,20))])}const B=g(u,[["render",y]]);export{q as __pageData,B as default};
