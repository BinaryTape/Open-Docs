import{_ as k,C as t,c as r,o as d,ag as e,j as s,a as i,G as n,w as l}from"./chunks/framework.Bksy39di.js";const D=JSON.parse('{"title":"Lincheck으로 첫 테스트 작성하기","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/introduction.md","filePath":"ko/kotlin/introduction.md","lastUpdated":1754307826000}'),c={name:"ko/kotlin/introduction.md"};function o(g,a,E,F,y,u){const p=t("tab"),h=t("tabs");return d(),r("div",null,[a[4]||(a[4]=e('<h1 id="lincheck으로-첫-테스트-작성하기" tabindex="-1">Lincheck으로 첫 테스트 작성하기 <a class="header-anchor" href="#lincheck으로-첫-테스트-작성하기" aria-label="Permalink to &quot;Lincheck으로 첫 테스트 작성하기&quot;">​</a></h1><p>이 튜토리얼은 첫 Lincheck 테스트를 작성하고, Lincheck 프레임워크를 설정하며, 기본 API를 사용하는 방법을 보여줍니다. 잘못된 동시성 카운터 구현이 포함된 새로운 IntelliJ IDEA 프로젝트를 생성하고, 이에 대한 테스트를 작성한 다음 버그를 찾아 분석할 것입니다.</p><h2 id="프로젝트-생성" tabindex="-1">프로젝트 생성 <a class="header-anchor" href="#프로젝트-생성" aria-label="Permalink to &quot;프로젝트 생성&quot;">​</a></h2><p>IntelliJ IDEA에서 기존 Kotlin 프로젝트를 열거나 <a href="https://kotlinlang.org/docs/jvm-get-started.html" target="_blank" rel="noreferrer">새 프로젝트를 생성합니다</a>. 프로젝트를 생성할 때는 Gradle 빌드 시스템을 사용하세요.</p><h2 id="필요한-종속성-추가" tabindex="-1">필요한 종속성 추가 <a class="header-anchor" href="#필요한-종속성-추가" aria-label="Permalink to &quot;필요한 종속성 추가&quot;">​</a></h2>',5)),s("ol",null,[a[3]||(a[3]=s("li",null,[s("p",null,[s("code",null,"build.gradle(.kts)"),i(" 파일을 열고 "),s("code",null,"mavenCentral()"),i("이 리포지토리 목록에 추가되어 있는지 확인합니다.")])],-1)),s("li",null,[a[2]||(a[2]=s("p",null,"다음 종속성을 Gradle 구성에 추가합니다.",-1)),n(h,{group:"build-script"},{default:l(()=>[n(p,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[0]||(a[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"repositories"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    mavenCentral"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // Lincheck 종속성")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    testImplementation"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.lincheck:lincheck:3.0"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 이 종속성을 사용하면 kotlin.test 및 JUnit과 함께 작업할 수 있습니다.")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    testImplementation"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"junit:junit:4.13"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(p,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[1]||(a[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"repositories {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mavenCentral()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // Lincheck 종속성")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    testImplementation "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.lincheck:lincheck:3.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 이 종속성을 사용하면 kotlin.test 및 JUnit과 함께 작업할 수 있습니다.")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    testImplementation "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"junit:junit:4.13"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})])]),a[5]||(a[5]=e(`<h2 id="동시성-카운터-작성-및-테스트-실행" tabindex="-1">동시성 카운터 작성 및 테스트 실행 <a class="header-anchor" href="#동시성-카운터-작성-및-테스트-실행" aria-label="Permalink to &quot;동시성 카운터 작성 및 테스트 실행&quot;">​</a></h2><ol><li><p><code>src/test/kotlin</code> 디렉터리에 <code>BasicCounterTest.kt</code> 파일을 생성하고 버그가 있는 동시성 카운터와 이에 대한 Lincheck 테스트 코드를 추가합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.datastructures.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Volatile</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BasicCounterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 초기 상태</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 카운터에 대한 작업</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // JUnit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stressTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StressOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 마법의 버튼</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 Lincheck 테스트는 자동으로 다음을 수행합니다.</p><ul><li>지정된 <code>inc()</code> 및 <code>get()</code> 작업으로 여러 임의의 동시성 시나리오를 생성합니다.</li><li>생성된 각 시나리오에 대해 많은 호출을 수행합니다.</li><li>각 호출 결과가 올바른지 확인합니다.</li></ul></li><li><p>위 테스트를 실행하면 다음과 같은 오류가 표시됩니다.</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>= Invalid execution results =</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| Thread 1 | Thread 2 |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| inc(): 1 | inc(): 1 |</span></span>
<span class="line"><span>| ------------------- |</span></span></code></pre></div><p>여기서 Lincheck은 카운터 원자성을 위반하는 실행을 발견했습니다. 두 번의 동시 증분(increment)이 동일한 결과 <code>1</code>로 끝났습니다. 이는 한 번의 증분이 손실되었음을 의미하며, 카운터의 동작이 올바르지 않습니다.</p></li></ol><h2 id="유효하지-않은-실행-추적" tabindex="-1">유효하지 않은 실행 추적 <a class="header-anchor" href="#유효하지-않은-실행-추적" aria-label="Permalink to &quot;유효하지 않은 실행 추적&quot;">​</a></h2><p>유효하지 않은 실행 결과를 보여주는 것 외에도 Lincheck은 오류로 이어지는 인터리빙(interleaving)을 제공할 수 있습니다. 이 기능은 제한된 수의 컨텍스트 스위치(context switch)로 수많은 실행을 검사하는 <a href="/ko/kotlin/testing-strategies#model-checking">모델 검증 (model checking)</a> 테스트 전략을 통해 접근할 수 있습니다.</p><ol><li><p>테스트 전략을 전환하려면 <code>options</code> 타입을 <code>StressOptions()</code>에서 <code>ModelCheckingOptions()</code>로 변경합니다. 업데이트된 <code>BasicCounterTest</code> 클래스는 다음과 같습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.datastructures.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Volatile</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BasicCounterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> modelCheckingTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModelCheckingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>테스트를 다시 실행합니다. 올바르지 않은 결과로 이어지는 실행 트레이스(execution trace)를 얻게 됩니다.</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>= Invalid execution results =</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| Thread 1 | Thread 2 |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| inc(): 1 | inc(): 1 |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span></span></span>
<span class="line"><span>The following interleaving leads to the error:</span></span>
<span class="line"><span>| --------------------------------------------------------------------- |</span></span>
<span class="line"><span>| Thread 1 |                          Thread  2                         |</span></span>
<span class="line"><span>| --------------------------------------------------------------------- |</span></span>
<span class="line"><span>|          | inc()                                                      |</span></span>
<span class="line"><span>|          |   inc(): 1 at BasicCounterTest.inc(BasicCounterTest.kt:18) |</span></span>
<span class="line"><span>|          |     value.READ: 0 at Counter.inc(BasicCounterTest.kt:10)   |</span></span>
<span class="line"><span>|          |     switch                                                 |</span></span>
<span class="line"><span>| inc(): 1 |                                                            |</span></span>
<span class="line"><span>|          |     value.WRITE(1) at Counter.inc(BasicCounterTest.kt:10)  |</span></span>
<span class="line"><span>|          |     value.READ: 1 at Counter.inc(BasicCounterTest.kt:10)   |</span></span>
<span class="line"><span>|          |   result: 1                                                |</span></span>
<span class="line"><span>| --------------------------------------------------------------------- |</span></span></code></pre></div><p>트레이스(trace)에 따르면 다음 이벤트가 발생했습니다.</p><ul><li><strong>T2</strong>: 두 번째 스레드가 <code>inc()</code> 작업을 시작하고 현재 카운터 값(<code>value.READ: 0</code>)을 읽은 후 일시 중지합니다.</li><li><strong>T1</strong>: 첫 번째 스레드가 <code>inc()</code>를 실행하여 <code>1</code>을 반환하고 완료합니다.</li><li><strong>T2</strong>: 두 번째 스레드가 다시 시작하여 이전에 얻은 카운터 값을 증가시키고, 카운터를 <code>1</code>로 잘못 업데이트합니다.</li></ul></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><a href="https://github.com/JetBrains/lincheck/blob/master/src/jvm/test-lincheck-integration/org/jetbrains/lincheck_test/guide/BasicCounterTest.kt" target="_blank" rel="noreferrer">전체 코드 보기</a>.</p></div><h2 id="java-표준-라이브러리-테스트" tabindex="-1">Java 표준 라이브러리 테스트 <a class="header-anchor" href="#java-표준-라이브러리-테스트" aria-label="Permalink to &quot;Java 표준 라이브러리 테스트&quot;">​</a></h2><p>이제 표준 Java의 <code>ConcurrentLinkedDeque</code> 클래스에서 버그를 찾아봅시다. 아래 Lincheck 테스트는 데크(deque)의 헤드에 요소를 제거하고 추가하는 과정에서 발생하는 경쟁 조건(race condition)을 찾습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.util.concurrent.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.datastructures.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcurrentDequeTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deque </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConcurrentLinkedDeque</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addLast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addLast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pollFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pollFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pollLast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pollLast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> peekFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">peekFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> peekLast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">peekLast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> modelCheckingTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModelCheckingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>modelCheckingTest()</code>를 실행합니다. 테스트는 다음과 같은 출력과 함께 실패할 것입니다.</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>= Invalid execution results =</span></span>
<span class="line"><span>| ---------------------------------------- |</span></span>
<span class="line"><span>|      Thread 1     |       Thread 2       |</span></span>
<span class="line"><span>| ---------------------------------------- |</span></span>
<span class="line"><span>| addLast(22): void |                      |</span></span>
<span class="line"><span>| ---------------------------------------- |</span></span>
<span class="line"><span>| pollFirst(): 22   | addFirst(8): void    |</span></span>
<span class="line"><span>|                   | peekLast(): 22 [-,1] |</span></span>
<span class="line"><span>| ---------------------------------------- |</span></span>
<span class="line"><span></span></span>
<span class="line"><span>---</span></span>
<span class="line"><span>All operations above the horizontal line | ----- | happen before those below the line</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span>Values in &quot;[..]&quot; brackets indicate the number of completed operations</span></span>
<span class="line"><span>in each of the parallel threads seen at the beginning of the current operation</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span></span></span>
<span class="line"><span>The following interleaving leads to the error:</span></span>
<span class="line"><span>| --------------------------------------------------------------------------------------------------------------------------------- |</span></span>
<span class="line"><span>|                                                Thread 1                                                    |       Thread 2       |</span></span>
<span class="line"><span>| --------------------------------------------------------------------------------------------------------------------------------- |</span></span>
<span class="line"><span>| pollFirst()                                                                                                |                      |</span></span>
<span class="line"><span>|   pollFirst(): 22 at ConcurrentDequeTest.pollFirst(ConcurrentDequeTest.kt:17)                              |                      |</span></span>
<span class="line"><span>|     first(): Node@1 at ConcurrentLinkedDeque.pollFirst(ConcurrentLinkedDeque.java:915)                     |                      |</span></span>
<span class="line"><span>|     item.READ: null at ConcurrentLinkedDeque.pollFirst(ConcurrentLinkedDeque.java:917)                     |                      |</span></span>
<span class="line"><span>|     next.READ: Node@2 at ConcurrentLinkedDeque.pollFirst(ConcurrentLinkedDeque.java:925)                   |                      |</span></span>
<span class="line"><span>|     item.READ: 22 at ConcurrentLinkedDeque.pollFirst(ConcurrentLinkedDeque.java:917)                       |                      |</span></span>
<span class="line"><span>|     prev.READ: null at ConcurrentLinkedDeque.pollFirst(ConcurrentLinkedDeque.java:919)                     |                      |</span></span>
<span class="line"><span>|     switch                                                                                                 |                      |</span></span>
<span class="line"><span>|                                                                                                            | addFirst(8): void    |</span></span>
<span class="line"><span>|                                                                                                            | peekLast(): 22       |</span></span>
<span class="line"><span>|     compareAndSet(Node@2,22,null): true at ConcurrentLinkedDeque.pollFirst(ConcurrentLinkedDeque.java:920) |                      |</span></span>
<span class="line"><span>|     unlink(Node@2) at ConcurrentLinkedDeque.pollFirst(ConcurrentLinkedDeque.java:921)                      |                      |</span></span>
<span class="line"><span>|   result: 22                                                                                               |                      |</span></span>
<span class="line"><span>| --------------------------------------------------------------------------------------------------------------------------------- |</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><a href="https://github.com/JetBrains/lincheck/blob/master/src/jvm/test-lincheck-integration/org/jetbrains/lincheck_test/guide/ConcurrentLinkedDequeTest.kt" target="_blank" rel="noreferrer">전체 코드 보기</a>.</p></div><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p><a href="/ko/kotlin/testing-strategies">테스트 전략을 선택하고 테스트 실행을 구성하세요</a>.</p><h2 id="참고-항목" tabindex="-1">참고 항목 <a class="header-anchor" href="#참고-항목" aria-label="Permalink to &quot;참고 항목&quot;">​</a></h2><ul><li><a href="/ko/kotlin/operation-arguments">작업 인수를 생성하는 방법</a></li><li><a href="/ko/kotlin/constraints">인기 있는 알고리즘 제약 조건</a></li><li><a href="/ko/kotlin/progress-guarantees">비블로킹 진행 보장 확인</a></li><li><a href="/ko/kotlin/sequential-specification">알고리즘의 순차 사양 정의</a></li></ul>`,16))])}const B=k(c,[["render",o]]);export{D as __pageData,B as default};
