import{_ as y,C as k,c as u,o as F,G as s,ag as p,j as i,w as n,a}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/client-serialization.md","filePath":"zh-Hant/ktor/client-serialization.md","lastUpdated":1755457140000}'),C={name:"zh-Hant/ktor/client-serialization.md"};function _(b,t,m,v,f,B){const r=k("TopicTitle"),h=k("show-structure"),d=k("primary-label"),g=k("tldr"),c=k("link-summary"),e=k("code-block"),l=k("TabItem"),o=k("Tabs"),E=k("Links");return F(),u("div",null,[s(r,{labelRef:"client-plugin",title:"Ktor 用戶端中的內容協商與序列化"}),s(h,{for:"chapter",depth:"2"}),s(d,{ref:"client-plugin"},null,512),s(g,null,{default:n(()=>t[0]||(t[0]=[i("p",null,[i("b",null,"所需依賴項"),a("："),i("code",null,"io.ktor:ktor-client-content-negotiation")],-1),i("p",null,[i("b",null,"程式碼範例"),a("： "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-json-kotlinx"}," client-json-kotlinx ")],-1)])),_:1}),s(c,null,{default:n(()=>t[1]||(t[1]=[a(" ContentNegotiation 外掛程式主要有兩個用途：在用戶端和伺服器之間協商媒體類型，以及在傳送請求和接收回應時以特定格式序列化/反序列化內容。 ")])),_:1}),t[11]||(t[11]=p('<p><a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-content-negotiation/io.ktor.client.plugins.contentnegotiation/-content-negotiation" target="_blank" rel="noreferrer">ContentNegotiation</a> 外掛程式主要有兩個用途：</p><ul><li>在用戶端和伺服器之間協商媒體類型。為此，它使用 <code>Accept</code> 和 <code>Content-Type</code> 標頭。</li><li>在傳送<a href="./client-requests">請求</a>和接收<a href="./client-responses">回應</a>時以特定格式序列化/反序列化內容。Ktor 開箱即用支援以下格式：JSON、XML、CBOR 和 ProtoBuf。請注意，XML 序列化器僅在 <a href="./client-engines">JVM</a> 上支援。</li></ul><blockquote><p>在伺服器端，Ktor 提供 <a href="./server-serialization">ContentNegotiation</a> 外掛程式用於內容的序列化/反序列化。</p></blockquote><h2 id="add_dependencies" tabindex="-1">新增依賴項 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;新增依賴項 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><h3 id="add_content_negotiation_dependency" tabindex="-1">ContentNegotiation <a class="header-anchor" href="#add_content_negotiation_dependency" aria-label="Permalink to &quot;ContentNegotiation {id=&quot;add_content_negotiation_dependency&quot;}&quot;">​</a></h3><p> 要使用 <code>ContentNegotiation</code>，您需要在建置指令碼中包含 <code>ktor-client-content-negotiation</code> 構件： </p>',6)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-content-negotiation:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-content-negotiation:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-content-negotiation-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),i("p",null,[t[3]||(t[3]=a(" 您可以從 ")),s(E,{href:"/ktor/client-dependencies",summary:"了解如何將用戶端依賴項新增到現有專案。"},{default:n(()=>t[2]||(t[2]=[a("新增用戶端依賴項")])),_:1}),t[4]||(t[4]=a(" 了解更多關於 Ktor 用戶端所需的構件。 "))]),t[12]||(t[12]=p('<p>請注意，特定格式的序列化器需要額外的構件。例如，kotlinx.serialization 需要用於 JSON 的 <code>ktor-serialization-kotlinx-json</code> 依賴項。根據所包含的構件，Ktor 會自動選擇預設序列化器。如果需要，您可以明確<a href="#configure_serializer">指定序列化器</a>並進行配置。</p><h3 id="serialization_dependency" tabindex="-1">序列化 <a class="header-anchor" href="#serialization_dependency" aria-label="Permalink to &quot;序列化 {id=&quot;serialization_dependency&quot;}&quot;">​</a></h3><p>在使用 kotlinx.serialization 轉換器之前，您需要如 <a href="https://github.com/Kotlin/kotlinx.serialization#setup" target="_blank" rel="noreferrer">Setup</a> 部分所述，新增 Kotlin 序列化外掛程式。</p><h4 id="add_json_dependency" tabindex="-1">JSON <a class="header-anchor" href="#add_json_dependency" aria-label="Permalink to &quot;JSON {id=&quot;add_json_dependency&quot;}&quot;">​</a></h4><p>要序列化/反序列化 JSON 資料，您可以選擇以下函式庫之一：kotlinx.serialization、Gson 或 Jackson。</p>',5)),s(o,{group:"json-libraries"},{default:n(()=>[s(l,{title:"kotlinx.serialization","group-key":"kotlinx"},{default:n(()=>[t[5]||(t[5]=i("p",null,[a("在建置指令碼中新增 "),i("code",null,"ktor-serialization-kotlinx-json"),a(" 構件：")],-1)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-json:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-json-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1}),s(l,{title:"Gson","group-key":"gson"},{default:n(()=>[t[6]||(t[6]=i("p",null,[a("在建置指令碼中新增 "),i("code",null,"ktor-serialization-gson"),a(" 構件：")],-1)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-gson:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-gson:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-gson-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1}),s(l,{title:"Jackson","group-key":"jackson"},{default:n(()=>[t[7]||(t[7]=i("p",null,[a("在建置指令碼中新增 "),i("code",null,"ktor-serialization-jackson"),a(" 構件：")],-1)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-jackson:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-jackson:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-jackson-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1})]),_:1}),t[13]||(t[13]=i("h4",{id:"add_xml_dependency",tabindex:"-1"},[a("XML "),i("a",{class:"header-anchor",href:"#add_xml_dependency","aria-label":'Permalink to "XML {id="add_xml_dependency"}"'},"​")],-1)),t[14]||(t[14]=i("p",null,[a("要序列化/反序列化 XML，請在建置指令碼中新增 "),i("code",null,"ktor-serialization-kotlinx-xml"),a("：")],-1)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-xml:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-xml:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-xml-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),t[15]||(t[15]=p('<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>請注意，XML 序列化<a href="https://github.com/pdvrieze/xmlutil/issues/83" target="_blank" rel="noreferrer">不支援 <code>jsNode</code> 目標</a>。</p></div><h4 id="add_cbor_dependency" tabindex="-1">CBOR <a class="header-anchor" href="#add_cbor_dependency" aria-label="Permalink to &quot;CBOR {id=&quot;add_cbor_dependency&quot;}&quot;">​</a></h4><p>要序列化/反序列化 CBOR，請在建置指令碼中新增 <code>ktor-serialization-kotlinx-cbor</code>：</p>',3)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-cbor-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),t[16]||(t[16]=i("h4",{id:"add_protobuf_dependency",tabindex:"-1"},[a("ProtoBuf "),i("a",{class:"header-anchor",href:"#add_protobuf_dependency","aria-label":'Permalink to "ProtoBuf {id="add_protobuf_dependency"}"'},"​")],-1)),t[17]||(t[17]=i("p",null,[a("要序列化/反序列化 ProtoBuf，請在建置指令碼中新增 "),i("code",null,"ktor-serialization-kotlinx-protobuf"),a("：")],-1)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-protobuf-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),t[18]||(t[18]=p(`<h2 id="install_plugin" tabindex="-1">安裝 ContentNegotiation <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;安裝 ContentNegotiation {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p>要安裝 <code>ContentNegotiation</code>，請在<a href="./client-create-and-configure#configure-client">用戶端配置區塊</a>內將其傳遞給 <code>install</code> 函數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>現在您可以<a href="#configure_serializer">配置</a>所需的 JSON 序列化器。</p><h2 id="configure_serializer" tabindex="-1">配置序列化器 <a class="header-anchor" href="#configure_serializer" aria-label="Permalink to &quot;配置序列化器 {id=&quot;configure_serializer&quot;}&quot;">​</a></h2><h3 id="register_json" tabindex="-1">JSON 序列化器 <a class="header-anchor" href="#register_json" aria-label="Permalink to &quot;JSON 序列化器 {id=&quot;register_json&quot;}&quot;">​</a></h3>`,6)),s(o,{group:"json-libraries"},{default:n(()=>[s(l,{title:"kotlinx.serialization","group-key":"kotlinx"},{default:n(()=>t[8]||(t[8]=[i("p",null,[a("要在您的應用程式中註冊 JSON 序列化器，請呼叫 "),i("code",null,"json"),a(" 方法：")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.plugins.contentnegotiation."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.kotlinx.json."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CIO) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(ContentNegotiation) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        json"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),i("p",null,[a("在 "),i("code",null,"json"),a(" 建構函數中，您可以存取 "),i("a",{href:"https://kotlinlang.org/api/kotlinx.serialization/kotlinx-serialization-json/kotlinx.serialization.json/-json-builder/",target:"_blank",rel:"noreferrer"},"JsonBuilder"),a(" API，例如：")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CIO) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(ContentNegotiation) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        json"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Json"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            prettyPrint "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            isLenient "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        })")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),i("p",null,[a("您可以在這裡找到完整範例："),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-json-kotlinx",target:"_blank",rel:"noreferrer"},"client-json-kotlinx"),a("。")],-1)])),_:1}),s(l,{title:"Gson","group-key":"gson"},{default:n(()=>t[9]||(t[9]=[i("p",null,[a("要在您的應用程式中註冊 Gson 序列化器，請呼叫 "),i("a",{href:"https://api.ktor.io/ktor-shared/ktor-serialization/ktor-serialization-gson/io.ktor.serialization.gson/gson.html",target:"_blank",rel:"noreferrer"},"gson"),a(" 方法：")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.plugins.contentnegotiation."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.gson."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CIO) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(ContentNegotiation) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        gson"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),i("p",null,[i("code",null,"gson"),a(" 方法也允許您調整由 "),i("a",{href:"https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/GsonBuilder.html",target:"_blank",rel:"noreferrer"},"GsonBuilder"),a(" 提供的序列化設定。")],-1)])),_:1}),s(l,{title:"Jackson","group-key":"jackson"},{default:n(()=>t[10]||(t[10]=[i("p",null,[a("要在您的應用程式中註冊 Jackson 序列化器，請呼叫 "),i("a",{href:"https://api.ktor.io/ktor-shared/ktor-serialization/ktor-serialization-jackson/io.ktor.serialization.jackson/jackson.html",target:"_blank",rel:"noreferrer"},"jackson"),a(" 方法：")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.plugins.contentnegotiation."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.jackson."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CIO) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(ContentNegotiation) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        jackson"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),i("p",null,[i("code",null,"jackson"),a(" 方法也允許您調整由 "),i("a",{href:"https://fasterxml.github.io/jackson-databind/javadoc/2.9/com/fasterxml/jackson/databind/ObjectMapper.html",target:"_blank",rel:"noreferrer"},"ObjectMapper"),a(" 提供的序列化設定。")],-1)])),_:1})]),_:1}),t[19]||(t[19]=p(`<h3 id="register_xml" tabindex="-1">XML 序列化器 <a class="header-anchor" href="#register_xml" aria-label="Permalink to &quot;XML 序列化器 {id=&quot;register_xml&quot;}&quot;">​</a></h3><p>要在您的應用程式中註冊 XML 序列化器，請呼叫 <code>xml</code> 方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.xml.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        xml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>xml</code> 方法也允許您存取 XML 序列化設定，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.xml.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nl.adaptivity.xmlutil.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nl.adaptivity.xmlutil.serialization.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        xml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(format </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            xmlDeclMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XmlDeclMode.Charset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="register_cbor" tabindex="-1">CBOR 序列化器 <a class="header-anchor" href="#register_cbor" aria-label="Permalink to &quot;CBOR 序列化器 {id=&quot;register_cbor&quot;}&quot;">​</a></h3><p>要在您的應用程式中註冊 CBOR 序列化器，請呼叫 <code>cbor</code> 方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.cbor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cbor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>cbor</code> 方法也允許您存取由 <a href="https://kotlinlang.org/api/kotlinx.serialization/kotlinx-serialization-cbor/kotlinx.serialization.cbor/-cbor-builder/" target="_blank" rel="noreferrer">CborBuilder</a> 提供的 CBOR 序列化設定，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.cbor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.cbor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cbor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cbor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ignoreUnknownKeys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="register_protobuf" tabindex="-1">ProtoBuf 序列化器 <a class="header-anchor" href="#register_protobuf" aria-label="Permalink to &quot;ProtoBuf 序列化器 {id=&quot;register_protobuf&quot;}&quot;">​</a></h3><p>要在您的應用程式中註冊 ProtoBuf 序列化器，請呼叫 <code>protobuf</code> 方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.protobuf.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        protobuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>protobuf</code> 方法也允許您存取由 <a href="https://kotlinlang.org/api/kotlinx.serialization/kotlinx-serialization-protobuf/kotlinx.serialization.protobuf/-proto-buf-builder/" target="_blank" rel="noreferrer">ProtoBufBuilder</a> 提供的 ProtoBuf 序列化設定，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.protobuf.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.protobuf.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        protobuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProtoBuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            encodeDefaults </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="receive_send_data" tabindex="-1">接收與傳送資料 <a class="header-anchor" href="#receive_send_data" aria-label="Permalink to &quot;接收與傳送資料 {id=&quot;receive_send_data&quot;}&quot;">​</a></h2><h3 id="create_data_class" tabindex="-1">建立資料類別 <a class="header-anchor" href="#create_data_class" aria-label="Permalink to &quot;建立資料類別 {id=&quot;create_data_class&quot;}&quot;">​</a></h3><p>要接收和傳送資料，您需要一個資料類別，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果您使用 kotlinx.serialization，請確保此類別具有 <code>@Serializable</code> 註解：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>kotlinx.serialization 函式庫支援以下類型的序列化/反序列化：</p><ul><li><a href="./https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/builtin-classes">內建類別</a></li><li><a href="https://kotlinlang.org/docs/sequences.html" target="_blank" rel="noreferrer">序列</a>的反序列化</li><li><a href="https://kotlinlang.org/docs/flow.html" target="_blank" rel="noreferrer">流程</a>的序列化</li></ul><h3 id="send_data" tabindex="-1">傳送資料 <a class="header-anchor" href="#send_data" aria-label="Permalink to &quot;傳送資料 {id=&quot;send_data&quot;}&quot;">​</a></h3><p>要將<a href="#create_data_class">類別實例</a>作為 JSON 在<a href="./client-requests">請求</a>主體中傳送，請使用 <code>setBody</code> 函數指派此實例，並透過呼叫 <code>contentType</code> 將內容類型設定為 <code>application/json</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8080/customer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contentType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentType.Application.Json)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Brains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要將資料作為 XML 或 CBOR 傳送，請將 <code>contentType</code> 分別設定為 <code>ContentType.Application.Xml</code> 或 <code>ContentType.Application.Cbor</code>。</p><h3 id="receive_data" tabindex="-1">接收資料 <a class="header-anchor" href="#receive_data" aria-label="Permalink to &quot;接收資料 {id=&quot;receive_data&quot;}&quot;">​</a></h3><p>當伺服器傳送帶有 <code>application/json</code>、<code>application/xml</code> 或 <code>application/cbor</code> 內容的回應時，您可以透過將<a href="#create_data_class">資料類別</a>指定為用於接收回應酬載的函數 (在以下範例中為 <code>body</code>) 的參數來反序列化它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customer: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Customer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8080/customer/3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>您可以在這裡找到完整範例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-json-kotlinx" target="_blank" rel="noreferrer">client-json-kotlinx</a>。</p>`,31))])}const z=y(C,[["render",_]]);export{A as __pageData,z as default};
