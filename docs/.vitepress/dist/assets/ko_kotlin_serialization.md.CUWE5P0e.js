import{_ as h,C as o,c as k,o as p,ag as r,j as i,G as t,a,w as l}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"직렬화","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/serialization.md","filePath":"ko/kotlin/serialization.md","lastUpdated":1754307826000}'),d={name:"ko/kotlin/serialization.md"};function g(E,s,c,b,y,u){const n=o("tab"),e=o("tabs");return p(),k("div",null,[s[6]||(s[6]=r('<h1 id="직렬화" tabindex="-1">직렬화 <a class="header-anchor" href="#직렬화" aria-label="Permalink to &quot;직렬화&quot;">​</a></h1><p>_직렬화(Serialization)_는 애플리케이션에서 사용되는 데이터를 네트워크를 통해 전송되거나 데이터베이스 또는 파일에 저장될 수 있는 형식으로 변환하는 과정입니다. 반대로 _역직렬화(deserialization)_는 외부 소스에서 데이터를 읽어 런타임 객체로 변환하는 반대 과정입니다. 이 둘은 타사와 데이터를 교환하는 대부분의 애플리케이션에 필수적입니다.</p><p><a href="https://www.json.org/json-en.html" target="_blank" rel="noreferrer">JSON</a>과 <a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noreferrer">프로토콜 버퍼(protocol buffers)</a>와 같은 일부 데이터 직렬화 형식은 특히 흔합니다. 이들은 언어 중립적이고 플랫폼 중립적이므로 모든 최신 언어로 작성된 시스템 간에 데이터 교환을 가능하게 합니다.</p><p>Kotlin에서는 데이터 직렬화 도구를 별도의 구성 요소인 <a href="https://github.com/Kotlin/kotlinx.serialization" target="_blank" rel="noreferrer">kotlinx.serialization</a>에서 사용할 수 있습니다. 이는 <code>org.jetbrains.kotlin.plugin.serialization</code> Gradle 플러그인, <a href="#libraries">런타임 라이브러리</a>, 그리고 컴파일러 플러그인으로 구성됩니다.</p><p><code>kotlinx-serialization-compiler-plugin</code>과 <code>kotlinx-serialization-compiler-plugin-embeddable</code> 컴파일러 플러그인은 Maven Central에 직접 게시됩니다. 두 번째 플러그인은 <code>kotlin-compiler-embeddable</code> 아티팩트와 함께 작동하도록 설계되었으며, 이는 스크립팅 아티팩트의 기본 옵션입니다. Gradle은 컴파일러 플러그인을 컴파일러 인수로 프로젝트에 추가합니다.</p><h2 id="라이브러리" tabindex="-1">라이브러리 <a class="header-anchor" href="#라이브러리" aria-label="Permalink to &quot;라이브러리&quot;">​</a></h2><p><code>kotlinx.serialization</code>은 지원되는 모든 플랫폼(JVM, JavaScript, Native)과 JSON, CBOR, 프로토콜 버퍼 등 다양한 직렬화 형식을 위한 라이브러리 세트를 제공합니다. 지원되는 직렬화 형식의 전체 목록은 <a href="#formats">아래</a>에서 확인할 수 있습니다.</p><p>모든 Kotlin 직렬화 라이브러리는 <code>org.jetbrains.kotlinx:</code> 그룹에 속합니다. 이름은 <code>kotlinx-serialization-</code>로 시작하며 직렬화 형식을 반영하는 접미사가 붙습니다. 예시:</p><ul><li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code>은 Kotlin 프로젝트에 JSON 직렬화를 제공합니다.</li><li><code>org.jetbrains.kotlinx:kotlinx-serialization-cbor</code>은 CBOR 직렬화를 제공합니다.</li></ul><p>플랫폼별 아티팩트는 자동으로 처리되므로 수동으로 추가할 필요가 없습니다. JVM, JS, Native, 그리고 멀티플랫폼 프로젝트에서 동일한 의존성을 사용하세요.</p><p>참고로 <code>kotlinx.serialization</code> 라이브러리는 자체 버전 관리 구조를 사용하며, 이는 Kotlin의 버전 관리와 일치하지 않습니다. 최신 버전을 찾으려면 <a href="https://github.com/Kotlin/kotlinx.serialization/releases" target="_blank" rel="noreferrer">GitHub</a>의 릴리스를 확인하세요.</p><h2 id="형식" tabindex="-1">형식 <a class="header-anchor" href="#형식" aria-label="Permalink to &quot;형식&quot;">​</a></h2><p><code>kotlinx.serialization</code>은 다양한 직렬화 형식을 위한 라이브러리를 포함합니다:</p><ul><li><a href="https://www.json.org/" target="_blank" rel="noreferrer">JSON</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#json" target="_blank" rel="noreferrer"><code>kotlinx-serialization-json</code></a></li><li><a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noreferrer">프로토콜 버퍼</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#protobuf" target="_blank" rel="noreferrer"><code>kotlinx-serialization-protobuf</code></a></li><li><a href="https://cbor.io/" target="_blank" rel="noreferrer">CBOR</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#cbor" target="_blank" rel="noreferrer"><code>kotlinx-serialization-cbor</code></a></li><li><a href="https://en.wikipedia.org/wiki/.properties" target="_blank" rel="noreferrer">Properties</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#properties" target="_blank" rel="noreferrer"><code>kotlinx-serialization-properties</code></a></li><li><a href="https://github.com/lightbend/config/blob/master/HOCON.md" target="_blank" rel="noreferrer">HOCON</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#hocon" target="_blank" rel="noreferrer"><code>kotlinx-serialization-hocon</code></a> (JVM에서만 지원)</li></ul><p>참고로 JSON 직렬화(<code>kotlinx-serialization-json</code>)를 제외한 모든 라이브러리는 <a href="/ko/kotlin/components-stability">실험적(Experimental)</a>이며, 이는 해당 API가 예고 없이 변경될 수 있음을 의미합니다.</p><p>또한 <a href="https://yaml.org/" target="_blank" rel="noreferrer">YAML</a> 또는 <a href="https://avro.apache.org/" target="_blank" rel="noreferrer">Apache Avro</a>와 같은 더 많은 직렬화 형식을 지원하는 커뮤니티 관리 라이브러리도 있습니다. 사용 가능한 직렬화 형식에 대한 자세한 정보는 <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md" target="_blank" rel="noreferrer"><code>kotlinx.serialization</code> 문서</a>를 참조하세요.</p><h2 id="예시-json-직렬화" tabindex="-1">예시: JSON 직렬화 <a class="header-anchor" href="#예시-json-직렬화" aria-label="Permalink to &quot;예시: JSON 직렬화&quot;">​</a></h2><p>Kotlin 객체를 JSON으로 직렬화하는 방법을 살펴보겠습니다.</p><h3 id="플러그인-및-의존성-추가" tabindex="-1">플러그인 및 의존성 추가 <a class="header-anchor" href="#플러그인-및-의존성-추가" aria-label="Permalink to &quot;플러그인 및 의존성 추가&quot;">​</a></h3><p>시작하기 전에, 프로젝트에서 Kotlin 직렬화 도구를 사용할 수 있도록 빌드 스크립트를 구성해야 합니다:</p>',20)),i("ol",null,[i("li",null,[s[2]||(s[2]=i("p",null,[a("Kotlin 직렬화 Gradle 플러그인 "),i("code",null,"org.jetbrains.kotlin.plugin.serialization"),a("을 적용합니다 (Kotlin Gradle DSL에서는 "),i("code",null,'kotlin("plugin.serialization")'),a(").")],-1)),t(e,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"jvm"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"plugin.serialization"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.jvm'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.plugin.serialization'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i("li",null,[s[5]||(s[5]=i("p",null,[a("JSON 직렬화 라이브러리 의존성을 추가합니다: "),i("code",null,"org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0")],-1)),t(e,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>s[3]||(s[3]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>s[4]||(s[4]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})])]),s[7]||(s[7]=r(`<p>이제 코드에서 직렬화 API를 사용할 준비가 되었습니다. API는 <code>kotlinx.serialization</code> 패키지와 <code>kotlinx.serialization.json</code>과 같은 형식별 하위 패키지에 있습니다.</p><h3 id="json-직렬화-및-역직렬화" tabindex="-1">JSON 직렬화 및 역직렬화 <a class="header-anchor" href="#json-직렬화-및-역직렬화" aria-label="Permalink to &quot;JSON 직렬화 및 역직렬화&quot;">​</a></h3><ol><li><code>@Serializable</code> 어노테이션을 사용하여 클래스를 직렬화 가능하도록 만듭니다.</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.Serializable</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="2"><li><code>Json.encodeToString()</code>을 호출하여 이 클래스의 인스턴스를 직렬화합니다.</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.json.Json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.encodeToString</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>결과적으로, 이 객체의 상태를 JSON 형식으로 포함하는 문자열을 얻게 됩니다: <code>{&quot;a&quot;: 42, &quot;b&quot;: &quot;str&quot;}</code></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>리스트와 같은 객체 컬렉션도 단일 호출로 직렬화할 수 있습니다: <code>kotlin val dataList = listOf(Data(42, &quot;str&quot;), Data(12, &quot;test&quot;)) val jsonList = Json.encodeToString(dataList) </code></p></div><ol start="3"><li><code>decodeFromString()</code> 함수를 사용하여 JSON에서 객체를 역직렬화합니다:</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.json.Json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.decodeFromString</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decodeFromString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;{&quot;a&quot;:42, &quot;b&quot;: &quot;str&quot;}&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>끝입니다! 객체를 JSON 문자열로 성공적으로 직렬화하고 다시 객체로 역직렬화했습니다.</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>Kotlin 직렬화에 대한 더 자세한 정보는 <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serialization-guide.md" target="_blank" rel="noreferrer">Kotlin Serialization Guide</a>를 참조하세요.</p><p>다음 자료에서 Kotlin 직렬화의 다양한 측면을 살펴볼 수 있습니다:</p><ul><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/basic-serialization.md" target="_blank" rel="noreferrer">Kotlin 직렬화 및 핵심 개념에 대해 자세히 알아보기</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/builtin-classes.md" target="_blank" rel="noreferrer">Kotlin의 내장 직렬화 가능 클래스 살펴보기</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serializers.md" target="_blank" rel="noreferrer">직렬 변환기(serializer)에 대해 자세히 알아보고 커스텀 직렬 변환기를 만드는 방법 배우기</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/polymorphism.md#open-polymorphism" target="_blank" rel="noreferrer">Kotlin에서 다형성(polymorphic) 직렬화가 어떻게 처리되는지 알아보기</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/json.md#json-elements" target="_blank" rel="noreferrer">Kotlin 직렬화에 JSON 기능이 어떻게 적용되는지 살펴보기</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/formats.md" target="_blank" rel="noreferrer">Kotlin에서 지원하는 실험적 직렬화 형식에 대해 자세히 알아보기</a></li></ul>`,15))])}const f=h(d,[["render",g]]);export{m as __pageData,f as default};
