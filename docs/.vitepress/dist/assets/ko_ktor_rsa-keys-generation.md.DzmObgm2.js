import{_ as r,C as p,c,o as u,j as i,G as a,ag as n,a as e,w as t}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/rsa-keys-generation.md","filePath":"ko/ktor/rsa-keys-generation.md","lastUpdated":1755457140000}'),g={name:"ko/ktor/rsa-keys-generation.md"};function F(y,s,b,C,E,_){const k=p("show-structure"),h=p("tldr"),o=p("warning"),l=p("code-block"),d=p("note");return u(),c("div",null,[s[6]||(s[6]=i("h1",{id:"rsa-키-생성",tabindex:"-1"},[e("RSA 키 생성 "),i("a",{class:"header-anchor",href:"#rsa-키-생성","aria-label":'Permalink to "RSA 키 생성"'},"​")],-1)),a(k,{for:"chapter",depth:"2"}),a(h,null,{default:t(()=>s[0]||(s[0]=[i("p",null,[i("b",null,"코드 예시"),e(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-jwt-rs256"}," auth-jwt-rs256 ")],-1)])),_:1}),s[7]||(s[7]=i("p",null,[i("a",{href:"https://en.wikipedia.org/wiki/RSA_(cryptosystem)",target:"_blank",rel:"noreferrer"},"RSA (Rivest–Shamir–Adleman)"),e("는 안전한 데이터 전송, 디지털 서명, 키 교환을 가능하게 하는 널리 사용되는 공개 키 암호화 시스템입니다.")],-1)),s[8]||(s[8]=i("p",null,"RS256은 RSA 암호화 알고리즘의 일부로, 디지털 통신을 보호하기 위해 SHA-256을 해싱에 사용하고 키(일반적으로 2048비트, 4096비트 이상)를 활용합니다.",-1)),s[9]||(s[9]=i("p",null,[i("a",{href:"https://jwt.io/",target:"_blank",rel:"noreferrer"},"JSON 웹 토큰(JSON Web Token)"),e(" 인증 영역에서 RS256은 중요한 역할을 합니다. JWT의 무결성과 신뢰성은 RS256과 같은 서명 메커니즘(여기서는 공개/개인 키 쌍이 사용됨)을 통해 검증될 수 있기 때문입니다. 이는 토큰에 포함된 정보가 변조되지 않고 신뢰할 수 있음을 보장합니다.")],-1)),s[10]||(s[10]=i("p",null,[e("이 섹션에서는 Ktor가 제공하는 "),i("a",{href:"./server-jwt"},"인증 JWT(Authentication JWT)"),e(" 플러그인과 함께 이러한 키가 어떻게 생성되고 사용되는지 알아봅니다.")],-1)),a(o,null,{default:t(()=>s[1]||(s[1]=[i("p",null,[e(" 프로덕션 환경에서는 RSA보다 더 효율적이고 안전한 암호화를 기반으로 하는 "),i("a",{href:"https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm"},"ES256"),e("과 같은 최신 대안을 선택하는 것이 좋습니다. ")],-1)])),_:1}),s[11]||(s[11]=i("h2",{id:"rsa-개인-키-생성",tabindex:"-1"},[e("RSA 개인 키 생성 "),i("a",{class:"header-anchor",href:"#rsa-개인-키-생성","aria-label":'Permalink to "RSA 개인 키 생성"'},"​")],-1)),s[12]||(s[12]=i("p",null,[e("개인 키를 생성하려면 OpenSSL, "),i("code",null,"ssh-keygen"),e(" 또는 인증 키 쌍 생성을 위한 다른 도구를 사용할 수 있습니다. 여기서는 시연을 위해 OpenSSL을 사용합니다.")],-1)),s[13]||(s[13]=i("p",null,"새 터미널 창에서 다음 명령어를 실행합니다:",-1)),a(l,{lang:"shell",code:"openssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 &gt; ktor.pk8"}),s[14]||(s[14]=n('<p><a href="https://www.openssl.org/docs/man3.0/man1/openssl-genpkey.html" target="_blank" rel="noreferrer">openssl genpkey</a> 명령어는 RSA 알고리즘을 사용하여 2048비트 개인 키를 생성하고, 여기서는 <code>ktor.pk8</code>이라는 지정된 파일에 저장합니다. 파일의 내용은 <a href="https://en.wikipedia.org/wiki/Base64" target="_blank" rel="noreferrer">Base64</a>로 인코딩되어 있으므로, 공개 키를 파생하기 전에 디코딩해야 합니다.</p><blockquote style=""><p><a href="https://github.com/ktorio/ktor-documentation/blob/3.2.3/codeSnippets/snippets/auth-jwt-rs256/" target="_blank" rel="noreferrer">코드 예시</a>에서 개인 키를 사용하려면, <code>src/main/resources</code> 내의 <code>application.conf</code> 파일로 이동하여 개인 키를 새 <code>.pk8</code> 파일로 추출하세요.</p></blockquote><h2 id="second-step" tabindex="-1">공개 키 파생 <a class="header-anchor" href="#second-step" aria-label="Permalink to &quot;공개 키 파생 {id=&quot;second-step&quot;}&quot;">​</a></h2><p>이전에 생성한 개인 키에서 공개 키를 파생하려면 다음 단계를 수행해야 합니다:</p><ol><li>개인 키를 디코딩합니다.</li><li>공개 키를 추출합니다.</li><li>공개 키를 PEM 형식으로 저장합니다.</li></ol><p>OpenSSL을 사용하여 이 작업을 수행하려면 다음 명령어를 실행합니다:</p>',6)),a(l,{lang:"shell",code:"openssl rsa -in ktor.pk8 -pubout | tee ktor.spki"}),s[15]||(s[15]=n('<ul><li><code>openssl rsa</code>: 이 명령어는 RSA 키 작업을 위한 OpenSSL 명령어입니다. 이 문맥에서는 RSA 키 관련 작업을 수행하는 데 사용됩니다.</li><li><code>-in ktor.pk8</code>: 이 옵션은 OpenSSL이 RSA 개인 키를 읽어야 하는 입력 파일(<code>ktor.pk8</code>)을 지정합니다.</li><li><code>-pubout</code>: 이 옵션은 OpenSSL에 입력 파일에 제공된 개인 키에 해당하는 공개 키를 출력하도록 지시합니다.</li><li><code>|</code>: 파이프(<code>|</code>) 기호는 이전 명령어(openssl rsa에 의해 생성된 공개 키)의 출력을 <code>tee</code> 명령어로 리디렉션하는 데 사용됩니다.</li><li><code>tee ktor.spki</code>: <code>tee</code>는 표준 입력에서 읽고 표준 출력과 하나 이상의 파일에 쓰는 명령줄 유틸리티입니다. 이 명령어 부분은 <code>tee</code>가 수신된 입력을 <code>ktor.spki</code>라는 파일에 쓰도록 지시합니다. 따라서 공개 키는 터미널에 표시되고 <code>ktor.spki</code> 파일에도 저장됩니다.</li></ul><p>이제 공개 키가 있으므로 해당 지수(exponent) 및 모듈러스(modulus) 값을 파생할 수 있습니다.</p><h2 id="모듈러스-및-지수-속성-추출" tabindex="-1">모듈러스 및 지수 속성 추출 <a class="header-anchor" href="#모듈러스-및-지수-속성-추출" aria-label="Permalink to &quot;모듈러스 및 지수 속성 추출&quot;">​</a></h2><p>이제 키 쌍을 확보했으니, <code>jwks.json</code> 파일에서 사용하기 위해 공개 키의 <code>e</code> (지수) 및 <code>n</code> (모듈러스) 속성을 추출해야 합니다. 이를 위해서는 다음 단계가 필요합니다:</p><ol><li>생성한 <code>.spki</code> 파일에서 공개 키를 읽습니다.</li><li>키에 대한 정보를 사람이 읽을 수 있는 형식으로 표시합니다.</li></ol><p>OpenSSL을 사용하여 이 작업을 수행하려면 다음 명령어를 실행합니다:</p>',6)),a(l,{lang:"shell",code:"openssl pkey -in ktor.spki -pubin -noout -text"}),s[16]||(s[16]=n(`<ul><li><code>pkey</code>: 이 명령어는 개인 키 및 공개 키를 처리하는 OpenSSL 명령줄 유틸리티입니다.</li><li><code>-in ktor.spki</code>: PEM 형식의 공개 키가 포함된 입력 파일을 지정합니다. 이 경우 입력 파일은 <code>ktor.spki</code>입니다.</li><li><code>-pubin</code>: 입력 파일에 공개 키가 포함되어 있음을 나타냅니다. 이 옵션이 없으면 OpenSSL은 입력 파일에 개인 키가 포함되어 있다고 가정합니다.</li><li><code>-noout</code>: 이 옵션은 OpenSSL이 인코딩된 공개 키를 출력하는 것을 방지합니다. 이 명령어는 공개 키에 대한 정보만 표시하며, 실제 키는 콘솔에 인쇄되지 않습니다.</li><li><code>-text</code>: OpenSSL이 키의 텍스트 표현을 표시하도록 요청합니다. 여기에는 키 유형, 크기 및 사람이 읽을 수 있는 형식의 실제 키 데이터와 같은 세부 정보가 포함됩니다.</li></ul><p>예상되는 출력은 다음과 같습니다:</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pkey</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ktor.spki</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -pubin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -noout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -text</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RSA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Public-Key:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (512 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Modulus:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    00:b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    2b:d0:87:b4:01</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exponent:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 65537</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x10001)</span></span></code></pre></div>`,3)),a(o,null,{default:t(()=>s[2]||(s[2]=[i("p",null," 이 예시에서는 공개 키가 512비트를 사용하며, 이는 안전하지 않다는 점에 유의하십시오. 이상적으로는 2048비트 또는 4096비트 키를 선택해야 합니다. ",-1)])),_:1}),s[17]||(s[17]=n('<h2 id="모듈러스-및-지수-속성-변환-및-인코딩" tabindex="-1">모듈러스 및 지수 속성 변환 및 인코딩 <a class="header-anchor" href="#모듈러스-및-지수-속성-변환-및-인코딩" aria-label="Permalink to &quot;모듈러스 및 지수 속성 변환 및 인코딩&quot;">​</a></h2><p>이전 단계에서 <code>jwks.json</code> 파일에 필요한 <code>n</code> 및 <code>e</code> 속성을 추출했습니다. 하지만 이들은 16진수 형식입니다. 이제 지수와 모듈러스의 16진수 표현을 각각 <a href="https://en.wikipedia.org/wiki/Base64#URL_applications" target="_blank" rel="noreferrer">Base64URL</a> 인코딩으로 변환해야 합니다.</p><h3 id="지수" tabindex="-1">지수 <a class="header-anchor" href="#지수" aria-label="Permalink to &quot;지수&quot;">​</a></h3><p>지수 속성은 <code>0x10001</code>의 16진수 값을 가집니다. 이 값을 Base64URL로 변환하려면 다음 명령어를 사용합니다.</p>',4)),a(l,{lang:"shell",code:"echo 010001 | xxd -p -r | base64 "}),s[18]||(s[18]=n("<ul><li><code>echo 010001</code>: 이 명령어 부분은 <code>echo</code> 명령어를 사용하여 RSA 키의 공개 지수(e)를 나타내는 문자열 &quot;010001&quot;을 표준 출력으로 내보냅니다.</li><li><code>|</code>: <code>|</code> 문자는 이전 명령어의 출력을 다음 명령어의 입력으로 전달하는 파이프입니다.</li><li><code>xxd -p -r</code>: 이 명령어는 16진수를 이진수로 변환하는 데 사용됩니다. 16진수 입력을 받아 해당하는 이진수 출력을 생성합니다.</li><li><code>| base64</code>: 이 명령어 부분은 이전 단계의 이진수 출력을 <code>base64</code> 명령어를 사용하여 Base64 형식으로 인코딩합니다.</li></ul>",1)),a(d,null,{default:t(()=>s[3]||(s[3]=[i("p",null," 왼쪽에 0을 추가하여 짝수 개의 16진수 숫자가 사용되었음에 유의하십시오. ",-1)])),_:1}),s[19]||(s[19]=n(`<p>위에서 언급된 지수 값에 대한 예상 출력은 다음과 같습니다:</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 010001</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xxd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AQAB</span></span></code></pre></div><p>지수의 Base64URL 인코딩 값은 <code>AQAB</code>이며 이 경우에는 추가 처리가 필요하지 않습니다. 다른 경우에는 다음 단계에 표시된 대로 <code>tr</code> 명령어를 사용해야 할 수도 있습니다.</p><h3 id="모듈러스" tabindex="-1">모듈러스 <a class="header-anchor" href="#모듈러스" aria-label="Permalink to &quot;모듈러스&quot;">​</a></h3><p><code>n</code> 속성의 경우 <code>tr</code> 유틸리티를 사용하여 모듈러스의 16진수 표현을 추가로 처리합니다.</p>`,5)),a(l,{lang:"shell",code:`echo "b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:
    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:
    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:
    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:
    2b:d0:87:b4:01" | tr -d ": 
" | xxd -p -r | base64 | tr +/ -_ | tr -d "=
"`}),a(d,null,{default:t(()=>s[4]||(s[4]=[i("p",null," 선행 `00` 바이트가 생략되었음에 유의하십시오. 모듈러스의 선행 `00` 바이트는 RSA 공개 키의 ASN.1 인코딩과 관련이 있습니다. 정수의 ASN.1 DER 인코딩에서 정수의 최상위 비트가 0인 경우 선행 0 바이트는 제거됩니다. 이는 ASN.1 인코딩 규칙의 표준 부분입니다. RSA 공개 키의 맥락에서 모듈러스는 빅 엔디안 정수이며, DER 인코딩으로 표현될 때 이러한 규칙을 따릅니다. 선행 0 바이트 제거는 DER 규칙에 따라 정수가 올바르게 해석되도록 하기 위해 수행됩니다. ",-1)])),_:1}),s[20]||(s[20]=n(`<ul><li><code>echo &quot;b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5: \\ ... &quot;</code>: 이 명령어 부분은 여러 줄의 16진수 문자열(일련의 바이트를 나타냄)을 출력합니다. 각 줄 끝의 백슬래시는 줄 계속을 나타냅니다.</li><li><code>tr -d &quot;: &quot;</code>: <code>tr</code> 명령어는 인수 목록에 지정된 문자를 삭제하는 데 사용됩니다. 여기서는 16진수 문자열에서 콜론, 공백 및 개행 문자를 제거하여 연속적인 16진수 문자열로 만듭니다.</li><li><code>xxd -p -r</code>: <code>xxd</code>는 이진 파일의 16진수 덤프를 생성하거나 16진수 덤프를 이진수로 다시 변환하는 유틸리티입니다. <code>-p</code> 옵션은 줄 번호나 ASCII 문자 열 없이 일반 16진수 덤프를 지정합니다. <code>-r</code> 옵션은 작업을 역전시켜 16진수를 이진수로 다시 변환합니다.</li><li><code>base64</code>: 이전 단계의 이진수 출력을 Base64 형식으로 인코딩합니다.</li><li><code>tr +/ -_</code>: Base64 출력의 <code>+</code> 및 <code>/</code> 문자를 각각 <code>-</code> 및 <code>_</code>로 변환합니다. 이는 URL-safe Base64 인코딩을 위한 일반적인 수정입니다.</li><li><code>tr -d &quot;= &quot;</code>: 최종 Base64 인코딩된 문자열에서 등호(<code>=</code>) 및 개행 문자를 제거합니다.</li></ul><p>위 명령어의 출력은 다음과 같습니다:</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    2b:d0:87:b4:01&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;: </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xxd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;=</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tfJaLrzXILUg1U3N1KV8yJr92GHn5OtYZR7qWk1Mc4cy4JGjklYup7weMjBD9f3bBVoIsiUVX6xNcYIr0Ie0AQ</span></span></code></pre></div><p><code>tr</code> 명령어를 적절히 활용하여 모듈러스 필드는 <code>jwks.json</code> 파일에서 사용할 수 있는 Base64URL 문자열로 인코딩되었습니다.</p><h2 id="jwks-json-파일-채우기" tabindex="-1">jwks.json 파일 채우기 <a class="header-anchor" href="#jwks-json-파일-채우기" aria-label="Permalink to &quot;jwks.json 파일 채우기&quot;">​</a></h2><p>이전 단계에서 다음 필요한 정보를 수집했습니다:</p><ol><li>RSA 키 쌍.</li><li>Base64URL 형식의 RSA 공개 키 모듈러스.</li><li>Base64URL 형식의 RSA 공개 키 지수.</li></ol><p>이들을 통해 이제 Ktor 프로젝트의 <a href="https://auth0.com/docs/secure/tokens/json-web-tokens/json-web-key-sets" target="_blank" rel="noreferrer">jwks.json</a> 파일을 다음 속성으로 채울 수 있습니다:</p><ul><li>이전 단계에서 생성한 Base64URL 인코딩 값인 <code>e</code> 및 <code>n</code> 값.</li><li>키 ID (이 경우, <code>kid</code>는 샘플 프로젝트에서 파생됩니다).</li><li><code>kty</code> 속성은 <code>RSA</code>.</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;keys&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;kty&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RSA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;e&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AQAB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;kid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;6f8856ed-9189-488f-9011-0ff4b6c08edc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tfJaLrzXILUg1U3N1KV8yJr92GHn5OtYZR7qWk1Mc4cy4JGjklYup7weMjBD9f3bBVoIsiUVX6xNcYIr0Ie0AQ&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>남은 유일한 단계는 Ktor 프로젝트가 인증에 사용할 수 있도록 개인 키를 지정하는 것입니다.</p><h2 id="개인-키-정의" tabindex="-1">개인 키 정의 <a class="header-anchor" href="#개인-키-정의" aria-label="Permalink to &quot;개인 키 정의&quot;">​</a></h2><p>공개 키 정보를 설정했으니, 마지막 단계는 Ktor 프로젝트에 개인 키에 대한 액세스 권한을 제공하는 것입니다.</p><p>개인 키(시작 부분에 <code>.pk8</code> 파일로 생성한 키)를 시스템의 환경 변수(이 경우 <code>jwt_pk</code>)로 추출했다고 가정하면, <code>resources/application.conf</code> 파일의 <code>jwt</code> 섹션은 다음과 유사하게 보일 것입니다:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>jwt {</span></span>
<span class="line"><span>  privateKey = \${jwt_pk}</span></span>
<span class="line"><span>  issuer = &quot;http://0.0.0.0:8080/&quot;</span></span>
<span class="line"><span>  audience = &quot;http://0.0.0.0:8080/login&quot;</span></span>
<span class="line"><span>  realm = &quot;MyProject&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,15)),a(o,null,{default:t(()=>s[5]||(s[5]=[i("p",null,[e(" 개인 키는 민감한 정보로 간주되므로 코드에 직접 저장해서는 안 됩니다. 민감한 데이터는 환경 변수 또는 "),i("a",{href:"https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"},"비밀 저장소"),e("를 사용하는 것을 고려하십시오. ")],-1)])),_:1})])}const f=r(g,[["render",F]]);export{B as __pageData,f as default};
