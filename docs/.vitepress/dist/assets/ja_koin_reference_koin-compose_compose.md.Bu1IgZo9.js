import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"Jetpack Compose および Compose Multiplatform 向けの Koin","description":"","frontmatter":{"title":"Jetpack Compose および Compose Multiplatform 向けの Koin"},"headers":[],"relativePath":"ja/koin/reference/koin-compose/compose.md","filePath":"ja/koin/reference/koin-compose/compose.md","lastUpdated":1750001831000}'),l={name:"ja/koin/reference/koin-compose/compose.md"};function p(t,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="jetpack-compose-および-compose-multiplatform-向けの-koin" tabindex="-1">Jetpack Compose および Compose Multiplatform 向けの Koin <a class="header-anchor" href="#jetpack-compose-および-compose-multiplatform-向けの-koin" aria-label="Permalink to &quot;Jetpack Compose および Compose Multiplatform 向けの Koin&quot;">​</a></h1><p>このページでは、<a href="https://developer.developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Android Jetpack Compose</a> または <a href="https://www.jetbrains.com/lp/compose-mpp/" target="_blank" rel="noreferrer">Multiplatform Compose</a> アプリケーションで依存関係を注入する方法について説明します。</p><h2 id="koin-compose-multiplatform-と-koin-android-jetpack-compose-の比較" tabindex="-1">Koin Compose Multiplatform と Koin Android Jetpack Compose の比較 <a class="header-anchor" href="#koin-compose-multiplatform-と-koin-android-jetpack-compose-の比較" aria-label="Permalink to &quot;Koin Compose Multiplatform と Koin Android Jetpack Compose の比較&quot;">​</a></h2><p>2024年半ば以降、Compose アプリケーションは Koin Multiplatform API を使用して開発できるようになりました。Koin Jetpack Compose (koin-androidx-compose) と Koin Compose Multiplatform (koin-compose) の間のすべての API は同一です。</p><h3 id="compose-にはどの-koin-パッケージを使用するか" tabindex="-1">Compose にはどの Koin パッケージを使用するか？ <a class="header-anchor" href="#compose-にはどの-koin-パッケージを使用するか" aria-label="Permalink to &quot;Compose にはどの Koin パッケージを使用するか？&quot;">​</a></h3><p>Android Jetpack Compose API のみを使用する純粋な Android アプリケーションの場合、以下のパッケージを使用します:</p><ul><li><code>koin-androidx-compose</code> - Compose のベース API と Compose ViewModel API を有効にする</li><li><code>koin-androidx-compose-navigation</code> - Navigation API 統合による Compose ViewModel API</li></ul><p>Android/Multiplatform アプリケーションの場合、以下のパッケージを使用します:</p><ul><li><code>koin-compose</code> - Compose のベース API</li><li><code>koin-compose-viewmodel</code> - Compose ViewModel API</li><li><code>koin-compose-viewmodel-navigation</code> - Navigation API 統合による Compose ViewModel API</li></ul><h2 id="既存の-koin-コンテキストから開始する" tabindex="-1">既存の Koin コンテキストから開始する <a class="header-anchor" href="#既存の-koin-コンテキストから開始する" aria-label="Permalink to &quot;既存の Koin コンテキストから開始する&quot;">​</a></h2><p>Composeアプリケーションの前に<code>startKoin</code>関数を使用することで、アプリケーションはKoinインジェクションを受け入れる準備ができています。ComposeでKoinコンテキストを設定するために、これ以上何も必要ありません。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>KoinContext</code> と <code>KoinAndroidContext</code> は非推奨です</p></div><h2 id="compose-アプリで-koin-を起動する-koinapplication" tabindex="-1">Compose アプリで Koin を起動する - KoinApplication <a class="header-anchor" href="#compose-アプリで-koin-を起動する-koinapplication" aria-label="Permalink to &quot;Compose アプリで Koin を起動する - KoinApplication&quot;">​</a></h2><p><code>startKoin</code> 関数を実行できる場所にアクセスできない場合、Compose と Koin に頼って Koin の設定を開始できます。</p><p><code>KoinApplication</code> というコンポーズ関数は、KoinアプリケーションインスタンスをComposableとして作成するのに役立ちます:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    KoinApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // your screens here ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        MyScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>KoinApplication</code> 関数は、Compose コンテキストのライフサイクルに応じて、Koin コンテキストの開始と停止を処理します。この関数は新しい Koin アプリケーションコンテキストを開始および停止します。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Android アプリケーションでは、<code>KoinApplication</code> は設定変更や Activity のドロップに伴う Koin コンテキストの停止/再起動の必要性を処理します。</p></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>(実験的API) <code>KoinMultiplatformApplication</code> を使用してマルチプラットフォームのエントリポイントを置き換えることができます。これは<code>KoinApplication</code>と同じですが、自動的に<code>androidContext</code>と<code>androidLogger</code>を注入します。</p></div><h2 id="koinapplicationpreview-を使用した-compose-プレビュー" tabindex="-1">KoinApplicationPreview を使用した Compose プレビュー <a class="header-anchor" href="#koinapplicationpreview-を使用した-compose-プレビュー" aria-label="Permalink to &quot;KoinApplicationPreview を使用した Compose プレビュー&quot;">​</a></h2><p><code>KoinApplicationPreview</code> コンポーズ関数は、Composableをプレビューするために特化されています:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1 - Pixel 2 XL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, device </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Devices.PIXEL_2_XL, locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2 - Pixel 5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, device </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Devices.PIXEL_5, locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, uiMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Configuration.UI_MODE_NIGHT_YES)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;3 - Pixel 7 &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, device </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Devices.PIXEL_7, locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ru&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, uiMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Configuration.UI_MODE_NIGHT_YES)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> previewVMComposable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    KoinApplicationPreview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appModule) }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        ViewModelComposable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="composable-への注入" tabindex="-1">@Composable への注入 <a class="header-anchor" href="#composable-への注入" aria-label="Permalink to &quot;@Composable への注入&quot;">​</a></h2><p>コンポーザブル関数を記述する際、Koinコンテナからインスタンスを注入するために、以下のKoin APIである<code>koinInject()</code>にアクセスできます。</p><p>&#39;MyService&#39; コンポーネントを宣言するモジュールの場合:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> androidModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // or constructor DSL</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>インスタンスは次のように取得できます:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> koinInject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Jetpack Compose の関数型アスペクトに合わせるため、最適な記述アプローチは、インスタンスを関数のパラメーターに直接注入することです。この方法により、Koin を使用したデフォルトの実装が可能になりつつ、インスタンスを自由に注入する余地を残します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myService: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> koinInject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="パラメーターを持つ-composable-への注入" tabindex="-1">パラメーターを持つ @Composable への注入 <a class="header-anchor" href="#パラメーターを持つ-composable-への注入" aria-label="Permalink to &quot;パラメーターを持つ @Composable への注入&quot;">​</a></h3><p>Koin から新しい依存関係を要求する際に、パラメーターを注入する必要がある場合があります。これを行うには、<code>koinInject</code> 関数の <code>parameters</code> パラメーターを <code>parametersOf()</code> 関数とともに次のように使用できます:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> koinInject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(parameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parametersOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a_string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>koinInject&lt;MyService&gt;{ parametersOf(&quot;a_string&quot;) }</code> のようにラムダ注入でパラメーターを使用できますが、頻繁に再コンポーズする場合、パフォーマンスに影響を与える可能性があります。このラムダを使ったバージョンは、呼び出し時にパラメーターをアンラップする必要があり、パラメーターを記憶するのを避けるのに役立ちます。</p><p>Koin のバージョン 4.0.2 から、パラメーターを最も効率的な方法で使用できるように <code>koinInject(Qualifier,Scope,ParametersHolder)</code> が導入されました。</p></div><h2 id="composable-用の-viewmodel" tabindex="-1">@Composable 用の ViewModel <a class="header-anchor" href="#composable-用の-viewmodel" aria-label="Permalink to &quot;@Composable 用の ViewModel&quot;">​</a></h2><p>従来のsingle/factoryインスタンスにアクセスするのと同様に、以下のKoin ViewModel APIにアクセスできます:</p><ul><li><code>koinViewModel()</code> - ViewModel インスタンスを注入</li><li><code>koinNavViewModel()</code> - ViewModel インスタンス + Navigation 引数データ（<code>Navigation</code> API を使用している場合）を注入</li></ul><p>&#39;MyViewModel&#39; コンポーネントを宣言するモジュールの場合:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    viewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // or constructor DSL</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    viewModelOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>インスタンスは次のように取得できます:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> koinViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>インスタンスは関数のパラメーターでも取得できます:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyViewModel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> koinViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Jetpack Compose の更新では Lazy API はサポートされていません。</p></div><h3 id="共有-activity-viewmodel-4-1-android" tabindex="-1">共有 Activity ViewModel (4.1 - Android) <a class="header-anchor" href="#共有-activity-viewmodel-4-1-android" aria-label="Permalink to &quot;共有 Activity ViewModel (4.1 - Android)&quot;">​</a></h3><p><code>koinActivityViewModel()</code> を使用して、同じViewModelホスト（Activity）からViewModelを注入できるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // hold ViewModel instance at Activity level</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> koinActivityViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="composable-用の-viewmodel-と-savedstatehandle" tabindex="-1">@Composable 用の ViewModel と SavedStateHandle <a class="header-anchor" href="#composable-用の-viewmodel-と-savedstatehandle" aria-label="Permalink to &quot;@Composable 用の ViewModel と SavedStateHandle&quot;">​</a></h3><p><code>SavedStateHandle</code> コンストラクターパラメーターを持つことができ、それは Compose 環境（Navigation の BackStack または ViewModel）に応じて注入されます。 ViewModelの<code>CreationExtras</code>経由で注入されるか、Navigationの<code>BackStackEntry</code>経由で注入されます:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Setting objectId argument in Navhost</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    navController,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    startDestination </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;list&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;list&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { backStackEntry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;detail/{objectId}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { backStackEntry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> backStackEntry.arguments?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;objectId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        DetailScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navController, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Injected Argument in ViewModel</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DetailViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> savedStateHandle: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SavedStateHandle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> - objectId: \${savedStateHandle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;(&quot;objectId&quot;)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>SavedStateHandle の注入の違いに関する詳細: <a href="https://github.com/InsertKoinIO/koin/issues/1935#issuecomment-2362335705" target="_blank" rel="noreferrer">https://github.com/InsertKoinIO/koin/issues/1935#issuecomment-2362335705</a></p></div><h3 id="共有-viewmodel-と-navigation-実験的" tabindex="-1">共有 ViewModel と Navigation (実験的) <a class="header-anchor" href="#共有-viewmodel-と-navigation-実験的" aria-label="Permalink to &quot;共有 ViewModel と Navigation (実験的)&quot;">​</a></h3><p>Koin Compose Navigation には、現在の <code>NavBackEntry</code> に既に保存されているViewModelを取得できる <code>NavBackEntry.sharedKoinViewModel()</code> 関数が追加されました。ナビゲーション部分では、単に <code>sharedKoinViewModel</code> を使用します:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">navigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BookGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                startDestination </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Route.BookList</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BookList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    exitTransition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slideOutHorizontally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    popEnterTransition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slideInHorizontally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                ) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // Use SharedViewModel here ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedBookViewModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sharedKoinViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SelectedBookViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(navController)</span></span></code></pre></div><h2 id="composable-に紐付けられたモジュールのロードとアンロード" tabindex="-1">Composable に紐付けられたモジュールのロードとアンロード <a class="header-anchor" href="#composable-に紐付けられたモジュールのロードとアンロード" aria-label="Permalink to &quot;Composable に紐付けられたモジュールのロードとアンロード&quot;">​</a></h2><p>Koin は、特定の Composable 関数用に特定のモジュールをロードする方法を提供します。<code>rememberKoinModules</code> 関数は、Koin モジュールをロードし、現在の Composable 上でそれらを記憶します:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponentComposable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // load module at first call of this component</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rememberKoinModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>2つの側面でモジュールをアンロードするために、いずれかの放棄関数を使用できます:</p><ul><li><code>onForgotten</code> - コンポジションがドロップされた後</li><li><code>onAbandoned</code> - コンポジションが失敗した場合</li></ul><p>このためには、<code>rememberKoinModules</code> の <code>unloadOnForgotten</code> または <code>unloadOnAbandoned</code> 引数を使用します。</p><h2 id="composable-で-koin-スコープを作成する" tabindex="-1">Composable で Koin スコープを作成する <a class="header-anchor" href="#composable-で-koin-スコープを作成する" aria-label="Permalink to &quot;Composable で Koin スコープを作成する&quot;">​</a></h2><p>Composable 関数 <code>rememberKoinScope</code> および <code>KoinScope</code> は、Composable 内で Koin Scope を処理し、Composable の終了時にスコープを閉じるように追跡します。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>この API は現時点ではまだ不安定です。</p></div>`,63)]))}const c=i(l,[["render",p]]);export{E as __pageData,c as default};
