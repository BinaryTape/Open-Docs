import{_ as E,C as a,c as y,o as _,G as s,ag as o,j as e,w as t,a as n}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/client-auth.md","filePath":"ktor/client-auth.md","lastUpdated":1755457140000}'),b={name:"ktor/client-auth.md"};function m(f,i,F,v,A,C){const h=a("TopicTitle"),r=a("show-structure"),k=a("primary-label"),d=a("tldr"),c=a("link-summary"),l=a("code-block"),p=a("TabItem"),u=a("Tabs"),g=a("Links");return _(),y("div",null,[s(h,{labelRef:"client-plugin",title:"Ktor 客户端中的认证与授权"}),s(r,{for:"chapter",depth:"2"}),s(k,{ref:"client-plugin"},null,512),s(d,null,{default:t(()=>i[0]||(i[0]=[e("p",null,[e("b",null,"所需依赖项"),n(": "),e("code",null,"io.ktor:ktor-client-auth")],-1)])),_:1}),s(c,null,{default:t(()=>i[1]||(i[1]=[n(" Auth 插件用于处理客户端应用程序中的认证与授权。 ")])),_:1}),i[5]||(i[5]=o('<p>Ktor 提供了 <a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth/-auth" target="_blank" rel="noreferrer">Auth</a> 插件，用于处理客户端应用程序中的认证与授权。典型的用法场景包括用户登录和获取特定资源的访问权限。</p><blockquote><p>在服务器端，Ktor 提供了 <a href="./server-auth">Authentication</a> 插件用于处理认证与授权。</p></blockquote><h2 id="supported" tabindex="-1">支持的认证类型 <a class="header-anchor" href="#supported" aria-label="Permalink to &quot;支持的认证类型 {id=&quot;supported&quot;}&quot;">​</a></h2><p>HTTP 提供了用于 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noreferrer">访问控制与认证的通用框架</a>。Ktor 客户端允许你使用以下 HTTP 认证方案：</p><ul><li><a href="./client-basic-auth">Basic</a> - 使用 <code>Base64</code> 编码来提供用户名和密码。除非与 HTTPS 结合使用，否则通常不推荐。</li><li><a href="./client-digest-auth">Digest</a> - 一种认证方法，通过对用户名和密码应用散列函数，以加密形式传输用户凭据。</li><li><a href="./client-bearer-auth">Bearer</a> - 一种认证方案，涉及称为持有者令牌的<strong>安全令牌</strong>。例如，你可以将此方案作为 OAuth 流程的一部分，通过使用 Google、Facebook、Twitter 等外部提供者来授权应用程序用户。</li></ul><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>要启用认证，你需要在构建脚本中包含 <code>ktor-client-auth</code> artifact：</p>',7)),s(u,{group:"languages"},{default:t(()=>[s(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-auth:$ktor_version")'})]),_:1}),s(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-auth:$ktor_version"'})]),_:1}),s(p,{title:"Maven","group-key":"maven"},{default:t(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),e("p",null,[i[3]||(i[3]=n(" 你可以从 ")),s(g,{href:"/ktor/client-dependencies",summary:"了解如何向现有项目添加客户端依赖项。"},{default:t(()=>i[2]||(i[2]=[n("添加客户端依赖项")])),_:1}),i[4]||(i[4]=n(" 中了解更多关于 Ktor 客户端所需的 artifact。 "))]),i[6]||(i[6]=o(`<h2 id="install_plugin" tabindex="-1">安装 Auth <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;安装 Auth {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p>要安装 <code>Auth</code> 插件，请将其传递给 <a href="./client-create-and-configure#configure-client">客户端配置块</a> 中的 <code>install</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 配置认证</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>现在你可以<a href="#configure_authentication">配置</a>所需的认证提供者。</p><h2 id="configure_authentication" tabindex="-1">配置认证 <a class="header-anchor" href="#configure_authentication" aria-label="Permalink to &quot;配置认证 {id=&quot;configure_authentication&quot;}&quot;">​</a></h2><h3 id="choose-provider" tabindex="-1">步骤 1：选择认证提供者 <a class="header-anchor" href="#choose-provider" aria-label="Permalink to &quot;步骤 1：选择认证提供者 {id=&quot;choose-provider&quot;}&quot;">​</a></h3><p>要使用特定的认证提供者（<a href="./client-basic-auth">Basic</a>、<a href="./client-digest-auth">Digest</a> 或 <a href="./client-bearer-auth">Bearer</a>），你需要调用 <code>install</code> 代码块内相应的函数。例如，要使用 <code>basic</code> 认证，请调用 <a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/basic.html" target="_blank" rel="noreferrer">basic</a> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 配置 Basic 认证</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在该代码块内，你可以配置此提供者特有的设置。</p><h3 id="realm" tabindex="-1">步骤 2：（可选）配置域 <a class="header-anchor" href="#realm" aria-label="Permalink to &quot;步骤 2：（可选）配置域 {id=&quot;realm&quot;}&quot;">​</a></h3><p>可选地，你可以使用 <code>realm</code> 属性来配置域：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以创建多个具有不同域的提供者，以访问不同的资源：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/admin&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这种情况下，客户端会根据 <code>WWW-Authenticate</code> 响应标头选择必要的提供者，该标头中包含域信息。</p><h3 id="configure-provider" tabindex="-1">步骤 3：配置提供者 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;步骤 3：配置提供者 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p>要了解如何配置特定<a href="#supported">提供者</a>的设置，请参阅相应的专题：</p><ul><li><a href="./client-basic-auth">Ktor 客户端中的 Basic 认证</a></li><li><a href="./client-digest-auth">Ktor 客户端中的 Digest 认证</a></li><li><a href="./client-bearer-auth">Ktor 客户端中的 Bearer 认证</a></li></ul>`,18))])}const B=E(b,[["render",m]]);export{T as __pageData,B as default};
