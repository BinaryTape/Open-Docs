import{_ as r,a as d,b as o}from"./chunks/ktor-routing-3.BEpN3HgF.js";import{_ as E,C as n,c as g,o as u,j as s,G as t,ag as k,a as i,w as l}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"应用程序结构","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-application-structure.md","filePath":"ktor/server-application-structure.md","lastUpdated":1755457140000}'),y={name:"ktor/server-application-structure.md"};function c(F,a,m,C,b,f){const p=n("link-summary"),e=n("TabItem"),h=n("Tabs");return u(),g("div",null,[a[5]||(a[5]=s("h1",{id:"应用程序结构",tabindex:"-1"},[i("应用程序结构 "),s("a",{class:"header-anchor",href:"#应用程序结构","aria-label":'Permalink to "应用程序结构"'},"​")],-1)),t(p,null,{default:l(()=>a[0]||(a[0]=[i("了解如何构建应用程序结构，以便随着应用程序的增长保持其可维护性。")])),_:1}),a[6]||(a[6]=s("p",null,[i("Ktor 的一大优势在于它在应用程序结构方面的灵活性。与许多其他服务端框架不同，Ktor 不强制我们遵循特定的模式，例如必须将所有内聚的路由放在一个名为 "),s("code",null,"CustomerController"),i(" 的类中。虽然这样做当然是可行的，但并非必需。")],-1)),a[7]||(a[7]=s("p",null,"在本节中，我们将探讨构建应用程序结构的不同选项。",-1)),a[8]||(a[8]=s("h2",{id:"group_by_file",tabindex:"-1"},[i("按文件分组 "),s("a",{class:"header-anchor",href:"#group_by_file","aria-label":'Permalink to "按文件分组 {id="group_by_file"}"'},"​")],-1)),a[9]||(a[9]=s("p",null,[i("一种方法是将相关路由分组到单个文件中。例如，如果我们的应用程序处理客户和订单，这意味着我们会有 "),s("code",null,"CustomerRoutes.kt"),i(" 和 "),s("code",null,"OrderRoutes.kt"),i(" 文件：")],-1)),t(h,null,{default:l(()=>[t(e,{title:"CustomerRoutes.kt"},{default:l(()=>a[1]||(a[1]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Route"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"customerByIdRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    get"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"/customer/{id}"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Route"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"createCustomerRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    post"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"/customer"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"OrderRoutes.kt"},{default:l(()=>a[2]||(a[2]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Route"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getOrderRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    get"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"/order/{id}"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Route"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"totalizeOrderRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    get"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"/order/{id}/total"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[10]||(a[10]=k(`<p>子路由（例如 <code>order/shipment</code>）会怎样？这在某种程度上取决于我们对这个 URL 的理解。 如果我们将它们视为资源（它们确实是），那么 <code>shipment</code> 本身就可以是一个资源，并且可以很容易地映射到另一个文件 <code>ShipmentRoutes.kt</code>。</p><h2 id="group_routing_definitions" tabindex="-1">分组路由定义 <a class="header-anchor" href="#group_routing_definitions" aria-label="Permalink to &quot;分组路由定义 {id=&quot;group_routing_definitions&quot;}&quot;">​</a></h2><p>这种方法的一个优点是，我们还可以按文件分组路由定义，以及潜在的功能性。 例如，假设我们遵循上述的按文件分组布局。即使路由位于不同的文件中，我们仍需要在 <code>Application</code> 级别声明它们。 因此，我们的应用程序将看起来像下面这样：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    customerRouting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOrdersRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    totalizeOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果我们的应用中有大量路由，这很快就会变得冗长和繁琐。 然而，由于我们已经按文件对路由进行了分组，我们可以利用这一点，在每个文件中也定义路由。 为此，我们可以为 <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application/index.html" target="_blank" rel="noreferrer">Application</a> 创建一个扩展，并定义路由：</p>`,5)),t(h,null,{default:l(()=>[t(e,{title:"CustomerRoutes.kt"},{default:l(()=>a[3]||(a[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Application"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"customerRoutes"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    routing"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        listCustomersRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        customerByIdRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        createCustomerRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        deleteCustomerRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }    ")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"OrderRoutes.kt"},{default:l(()=>a[4]||(a[4]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Application"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"orderRoutes"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    routing"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        listOrdersRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        getOrderRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        totalizeOrderRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[11]||(a[11]=k(`<p>现在，在我们实际的 <code>Application.module</code> 启动时，我们只需调用这些函数，而无需 <code>routing</code> 代码块：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Init....</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    customerRoutes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    orderRoutes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>我们甚至可以更进一步——根据需要为每个应用程序安装插件，尤其是在使用依赖于特定路由的认证插件时。然而，一个重要的注意事项是，Ktor 如果检测到插件被重复安装，则会抛出 <code>DuplicateApplicationPluginException</code> 异常。</p><h3 id="关于使用对象的说明" tabindex="-1">关于使用对象的说明 <a class="header-anchor" href="#关于使用对象的说明" aria-label="Permalink to &quot;关于使用对象的说明&quot;">​</a></h3><p>使用对象来分组路由函数不会提供任何性能或内存方面的优势，因为 Ktor 中的顶层函数只实例化一次。虽然它可以提供某种内聚的结构，我们可能希望共享通用功能，但如果我们担心任何类型的开销，则不必使用对象。</p><h2 id="group_by_folder" tabindex="-1">按文件夹分组 <a class="header-anchor" href="#group_by_folder" aria-label="Permalink to &quot;按文件夹分组 {id=&quot;group_by_folder&quot;}&quot;">​</a></h2><p>当文件增大时，将所有内容放在单个文件中可能会变得有些繁琐。 我们可以做的是使用文件夹（即包）来定义不同的区域，然后将每个路由放在其自己的文件中。</p>`,7)),a[12]||(a[12]=s("p",null,[s("img",{src:r,alt:"Grouping by folders",width:"350","border-effect":"rounded"})],-1)),a[13]||(a[13]=s("p",null,[i("虽然这确实在路由和独立操作方面提供了良好的布局优势，但它肯定会导致“包过多”的问题，并可能导致大量同名文件，从而使导航变得有些困难。 另一方面，正如我们在下一个示例中看到的，我们也可以仅仅为每个文件添加区域前缀（例如 "),s("code",null,"CustomerCreate.kt"),i("）。")],-1)),a[14]||(a[14]=s("h2",{id:"group_by_feature",tabindex:"-1"},[i("按特性分组 "),s("a",{class:"header-anchor",href:"#group_by_feature","aria-label":'Permalink to "按特性分组 {id="group_by_feature"}"'},"​")],-1)),a[15]||(a[15]=s("p",null,"ASP.NET MVC 或 Ruby on Rails 等框架具有使用三个文件夹（模型、视图和控制器（路由））来组织应用程序的概念。",-1)),a[16]||(a[16]=s("p",null,[s("img",{src:d,alt:"Model View Controller",width:"350","border-effect":"rounded"})],-1)),a[17]||(a[17]=s("p",null,[i("这与我们上面将路由分组到各自的包/文件中、在 Ktor 中将视图放在 "),s("code",null,"resources"),i(" 文件夹中以及当然没有任何东西阻止我们拥有一个包模型来放置我们想要显示或响应 HTTP 端点的数据的方案不无关联。")],-1)),a[18]||(a[18]=s("p",null,[i("虽然这种方法可能可行，并且类似于其他框架，但有些人会争论说，按特性分组更有意义，即不按路由、模型和视图分发项目，而是按特定行为/特性分组这些内容，例如 "),s("code",null,"OrderProcessPayment"),i("、"),s("code",null,"CustomerAddressChange"),i(" 等。")],-1)),a[19]||(a[19]=s("p",null,[s("img",{src:o,alt:"Feature grouping",width:"350","border-effect":"rounded"})],-1)),a[20]||(a[20]=k(`<p>对于许多框架而言，这种代码组织方式在不严重修改底层约定的情况下是不可行的。然而，对于 Ktor，鉴于其灵活性，原则上这不成问题。但有一个注意事项——当我们使用<a href="./server-templating">模板引擎</a>时，资源可能会是一个问题。但让我们看看如何解决这个问题。</p><p>这个问题的解决方法很大程度上取决于用于视图的技术。如果我们的应用程序仅仅是一个 HTTP 后端，并且我们使用客户端技术，那么通常所有渲染都在客户端完成。如果我们使用 Kotlinx.HTML，那么这再次不是问题，因为页面可以从放置在任何位置的 Kotlin 文件中生成。</p><p>当使用 FreeMarker 等模板引擎时，问题会更多地出现。这些引擎在模板文件的存放位置和方式上具有特殊性。 幸运的是，其中一些提供了模板加载的灵活性。</p><p>例如，对于 FreeMarker，我们可以使用 <code>MultiTemplateLoader</code>，然后从不同的位置加载模板：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FreeMarker) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customerTemplates </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileTemplateLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./customer/changeAddress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loaders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TemplateLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(customerTemplates)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    templateLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MultiTemplateLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loaders)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>显然，这段代码并不理想，因为它使用了相对路径等等，但不难看出我们如何可以实际遍历文件夹并加载模板，甚至拥有一个自定义构建操作，在执行之前将视图复制到我们的 <code>resources</code> 文件夹。 解决这个问题的方法有很多。</p><p>这种方法的好处是，我们可以将所有与相同功能相关的内容分组到一个单一位置，即按特性分组，而不是按其技术/基础设施方面分组。</p>`,7))])}const A=E(y,[["render",c]]);export{v as __pageData,A as default};
