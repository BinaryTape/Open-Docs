import{_ as k,C as n,c,o,ag as h,G as s,w as l,j as i,a}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Lincheck ガイド","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/lincheck-guide.md","filePath":"ja/kotlin/lincheck-guide.md","lastUpdated":1754307826000}'),p={name:"ja/kotlin/lincheck-guide.md"};function d(E,e,g,u,_,y){const t=n("tab"),r=n("tabs");return o(),c("div",null,[e[2]||(e[2]=h('<h1 id="lincheck-ガイド" tabindex="-1">Lincheck ガイド <a class="header-anchor" href="#lincheck-ガイド" aria-label="Permalink to &quot;Lincheck ガイド&quot;">​</a></h1><p>Lincheckは、JVM上で並行アルゴリズムをテストするための実用的で使いやすいフレームワークです。これは、並行テストを記述するためのシンプルかつ宣言的な方法を提供します。</p><p>Lincheckフレームワークを使用すると、テストの実行方法を記述する代わりに、検査するすべての操作と必要な正当性プロパティを宣言することで、_何をテストするか_を指定できます。その結果、一般的な並行Lincheckテストはわずか約15行になります。</p><p>操作のリストが与えられると、Lincheckは自動的に以下を行います。</p><ul><li>ランダムな並行シナリオのセットを生成します。</li><li>ストレス テストまたは有界モデル検査のいずれかを使用してそれらを検査します。</li><li>各呼び出しの結果が、要求される正当性プロパティ（線形化可能性がデフォルトです）を満たしていることを検証します。</li></ul><h2 id="プロジェクトにlincheckを追加する" tabindex="-1">プロジェクトにLincheckを追加する <a class="header-anchor" href="#プロジェクトにlincheckを追加する" aria-label="Permalink to &quot;プロジェクトにLincheckを追加する&quot;">​</a></h2><p>Lincheckのサポートを有効にするには、対応するリポジトリと依存関係をGradle設定に含めます。<code>build.gradle(.kts)</code>ファイルに以下を追加します。</p>',7)),s(r,{group:"build-script"},{default:l(()=>[s(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>e[0]||(e[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"repositories"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    mavenCentral"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    testImplementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.lincheck:lincheck:3.0"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>e[1]||(e[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"repositories {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mavenCentral()")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    testImplementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.lincheck:lincheck:3.0"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),e[3]||(e[3]=h('<h2 id="lincheckを使ってみる" tabindex="-1">Lincheckを使ってみる <a class="header-anchor" href="#lincheckを使ってみる" aria-label="Permalink to &quot;Lincheckを使ってみる&quot;">​</a></h2><p>このガイドは、Lincheckフレームワークに親しみ、例を交えながら最も役立つ機能を試すのに役立ちます。Lincheckの機能をステップバイステップで学びましょう。</p><ol><li><a href="/ja/kotlin/introduction">Lincheckで最初のテストを作成する</a></li><li><a href="/ja/kotlin/testing-strategies">テスト戦略を選択する</a></li><li><a href="/ja/kotlin/operation-arguments">操作引数を設定する</a></li><li><a href="/ja/kotlin/constraints">一般的なアルゴリズムの制約を考慮する</a></li><li><a href="/ja/kotlin/progress-guarantees">アルゴリズムの非ブロッキング進行保証を確認する</a></li><li><a href="/ja/kotlin/sequential-specification">アルゴリズムのシーケンシャル仕様を定義する</a></li></ol><h2 id="その他の参考資料" tabindex="-1">その他の参考資料 <a class="header-anchor" href="#その他の参考資料" aria-label="Permalink to &quot;その他の参考資料&quot;">​</a></h2><ul><li>Nikita Kovalによる「Kotlinコルーチンにおける並行アルゴリズムのテスト方法」： <a href="https://youtu.be/jZqkWfa11Js" target="_blank" rel="noreferrer">動画</a>。 KotlinConf 2023</li><li>Maria Sokolovaによる「Lincheck: JVM上での並行性テスト」ワークショップ： <a href="https://www.youtube.com/watch?v=YNtUK9GK4pA" target="_blank" rel="noreferrer">パート1</a>、<a href="https://www.youtube.com/watch?v=EW7mkAOErWw" target="_blank" rel="noreferrer">パート2</a>。 Hydra 2021</li></ul>',5))])}const m=k(p,[["render",d]]);export{f as __pageData,m as default};
