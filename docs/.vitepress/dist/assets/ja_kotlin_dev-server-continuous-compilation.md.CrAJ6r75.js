import{_ as t,a,b as i}from"./chunks/waiting-for-changes.B2D0TX8R.js";import{_ as s,c as o,o as n,ag as r}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"開発サーバーと連続コンパイル","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/dev-server-continuous-compilation.md","filePath":"ja/kotlin/dev-server-continuous-compilation.md","lastUpdated":1754307826000}'),l={name:"ja/kotlin/dev-server-continuous-compilation.md"};function p(d,e,c,_,h,u){return n(),o("div",null,e[0]||(e[0]=[r('<h1 id="開発サーバーと連続コンパイル" tabindex="-1">開発サーバーと連続コンパイル <a class="header-anchor" href="#開発サーバーと連続コンパイル" aria-label="Permalink to &quot;開発サーバーと連続コンパイル&quot;">​</a></h1><p>変更を加えるたびに手動でKotlin/JSプロジェクトをコンパイルして実行する代わりに、_連続コンパイル_モードを使用できます。通常の<code>run</code>コマンドを使用する代わりに、Gradleラッパーを_連続_モードで呼び出します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --continuous</span></span></code></pre></div><p>IntelliJ IDEAで作業している場合、_実行構成_を介して同じフラグを渡すことができます。IDEからGradleの<code>run</code>タスクを初めて実行すると、IntelliJ IDEAはそれに対する実行構成を自動的に生成し、編集できるようになります。</p><p><img src="'+t+'" alt="IntelliJ IDEAで実行構成を編集する" width="700"></p><p><strong>実行/デバッグ構成</strong>ダイアログから連続モードを有効にするには、実行構成の引数に<code>--continuous</code>フラグを追加するだけで簡単です。</p><p><img src="'+a+'" alt="IntelliJ IDEAで実行構成に連続フラグを追加する" width="700"></p><p>この実行構成を実行すると、Gradleプロセスがプログラムの変更を監視し続けていることがわかります。</p><p><img src="'+i+'" alt="変更を待機中のGradle" width="700"></p><p>変更が検出されると、プログラムは自動的に再コンパイルされます。ブラウザでページを開いたままにしている場合、開発サーバーはページの自動リロードをトリガーし、変更が反映されます。これは、Kotlin Multiplatform Gradleプラグインによって管理される統合された<code>webpack-dev-server</code>のおかげです。</p>',10)]))}const v=s(l,[["render",p]]);export{g as __pageData,v as default};
