import{_ as e,c as t,o as r,ag as l}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlin 1.8 互換性ガイド","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/compatibility-guide-18.md","filePath":"ja/kotlin/compatibility-guide-18.md","lastUpdated":1754307826000}'),n={name:"ja/kotlin/compatibility-guide-18.md"};function a(i,o,s,c,p,d){return r(),t("div",null,o[0]||(o[0]=[l('<h1 id="kotlin-1-8-互換性ガイド" tabindex="-1">Kotlin 1.8 互換性ガイド <a class="header-anchor" href="#kotlin-1-8-互換性ガイド" aria-label="Permalink to &quot;Kotlin 1.8 互換性ガイド&quot;">​</a></h1><p><em><a href="/ja/kotlin/kotlin-evolution-principles">言語をモダンに保つ</a></em> および <em><a href="/ja/kotlin/kotlin-evolution-principles">快適なアップデート</a></em> は、Kotlin 言語設計における基本的な原則の1つです。前者は、言語の進化を妨げる構文は削除されるべきであると述べており、後者は、コードの移行を可能な限りスムーズにするために、この削除が事前に十分に周知されるべきであると述べています。</p><p>言語の変更点のほとんどは、アップデートの変更ログやコンパイラ警告など、他のチャネルを通じてすでに発表されていますが、このドキュメントではそれらすべてをまとめ、Kotlin 1.7 から Kotlin 1.8 への移行のための完全なリファレンスを提供します。</p><h2 id="基本的な用語" tabindex="-1">基本的な用語 <a class="header-anchor" href="#基本的な用語" aria-label="Permalink to &quot;基本的な用語&quot;">​</a></h2><p>このドキュメントでは、いくつかの種類の互換性について説明します。</p><ul><li><em>ソース互換性</em>: ソース非互換の変更とは、これまで問題なく (エラーや警告なしに) コンパイルできていたコードが、コンパイルできなくなるような変更を指します。</li><li><em>バイナリ互換性</em>: 2つのバイナリアーティファクトは、それらを相互に入れ替えてもロードまたはリンクエラーが発生しない場合に、バイナリ互換であると言われます。</li><li><em>動作互換性</em>: 動作非互換の変更とは、同じプログラムが変更適用前後で異なる動作を示す場合に、その変更を指します。</li></ul><p>これらの定義は純粋な Kotlin のみに与えられるものであることに注意してください。他の言語の観点 (例えば Java) から見た Kotlin コードの互換性については、このドキュメントの範囲外です。</p><h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><h3 id="抽象スーパークラスメンバーへのスーパークラス呼び出しの委譲を禁止" tabindex="-1">抽象スーパークラスメンバーへのスーパークラス呼び出しの委譲を禁止 <a class="header-anchor" href="#抽象スーパークラスメンバーへのスーパークラス呼び出しの委譲を禁止" aria-label="Permalink to &quot;抽象スーパークラスメンバーへのスーパークラス呼び出しの委譲を禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-45508" target="_blank" rel="noreferrer">KT-45508</a>, <a href="https://youtrack.com/issue/KT-49017" target="_blank" rel="noreferrer">KT-49017</a>, <a href="https://youtrack.com/issue/KT-38078" target="_blank" rel="noreferrer">KT-38078</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin は、明示的または暗黙的なスーパークラス呼び出しがスーパークラスの_抽象_メンバーに委譲される場合にコンパイルエラーを報告します。これは、スーパーインターフェースにデフォルトの実装がある場合でも同様です。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5.20: 抽象メンバーをすべてオーバーライドしない非抽象クラスが使用された場合に警告を報告</li><li>1.7.0: スーパークラス呼び出しが実際にスーパークラスから抽象メンバーにアクセスする場合に警告を報告</li><li>1.7.0: <code>-Xjvm-default=all</code> または <code>-Xjvm-default=all-compatibility</code> 互換モードが有効な場合、影響を受けるすべての場合にエラーを報告。プログレッシブモードではエラーを報告</li><li>1.8.0: スーパークラスの抽象メソッドをオーバーライドしていない具象クラスを宣言する場合、および <code>Any</code> メソッドのスーパークラス呼び出しがスーパークラスで抽象としてオーバーライドされている場合にエラーを報告</li><li>1.9.0: 明示的なスーパークラス呼び出しがスーパークラスの抽象メソッドに対して行われる場合を含む、影響を受けるすべての場合にエラーを報告</li></ul></blockquote><h3 id="when式における紛らわしい文法を非推奨に" tabindex="-1"><code>when</code>式における紛らわしい文法を非推奨に <a class="header-anchor" href="#when式における紛らわしい文法を非推奨に" aria-label="Permalink to &quot;`when`式における紛らわしい文法を非推奨に&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-48385" target="_blank" rel="noreferrer">KT-48385</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.6 では、<code>when</code> 条件式におけるいくつかの紛らわしい文法構造が非推奨になりました。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.20: 影響を受ける式に対して非推奨警告を導入</li><li>1.8.0: この警告をエラーに昇格。<code>-XXLanguage:-ProhibitConfusingSyntaxInWhenBranches</code> を使用して一時的に 1.8 より前の挙動に戻すことができます。</li><li><blockquote><p>= 1.9: いくつかの非推奨の構造を新しい言語機能のために再利用</p></blockquote></li></ul></blockquote><h3 id="異なる数値型間の暗黙的な型強制を禁止" tabindex="-1">異なる数値型間の暗黙的な型強制を禁止 <a class="header-anchor" href="#異なる数値型間の暗黙的な型強制を禁止" aria-label="Permalink to &quot;異なる数値型間の暗黙的な型強制を禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-48645" target="_blank" rel="noreferrer">KT-48645</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>非互換変更タイプ</strong>: 動作</p><p><strong>概要</strong>: Kotlin は、数値のダウンキャストのみが意味的に必要な場合、数値をプリミティブ数値型に自動的に変換することを避けます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>&lt; 1.5.30: 影響を受けるすべての場合で古い挙動</li><li>1.5.30: 生成されたプロパティデリゲートアクセサにおけるダウンキャストの挙動を修正。<code>-Xuse-old-backend</code> を使用して一時的に 1.5.30 より前の修正前の挙動に戻すことができます。</li><li><blockquote><p>= 1.9: 他の影響を受ける場合でのダウンキャストの挙動を修正</p></blockquote></li></ul></blockquote><h3 id="sealed-クラスのプライベートコンストラクタを本当にプライベートに" tabindex="-1"><code>sealed</code> クラスのプライベートコンストラクタを本当にプライベートに <a class="header-anchor" href="#sealed-クラスのプライベートコンストラクタを本当にプライベートに" aria-label="Permalink to &quot;`sealed` クラスのプライベートコンストラクタを本当にプライベートに&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-44866" target="_blank" rel="noreferrer">KT-44866</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: <code>sealed</code> クラスの継承者がプロジェクト構造のどこに宣言されるかという制限が緩和された後、<code>sealed</code> クラスのコンストラクタのデフォルトの可視性は <code>protected</code> になりました。しかし、1.8 までは、Kotlin は <code>sealed</code> クラスの明示的に宣言されたプライベートコンストラクタをそれらのクラスのスコープ外から呼び出すことを依然として許可していました。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.20: <code>sealed</code> クラスのプライベートコンストラクタがそのクラスの外部から呼び出された場合に警告を報告 (またはプログレッシブモードではエラーを報告)</li><li>1.8.0: プライベートコンストラクタにデフォルトの可視性ルールを適用 (プライベートコンストラクタへの呼び出しは、その呼び出しが対応するクラス内にある場合にのみ解決可能)。<code>-XXLanguage:-UseConsistentRulesForPrivateConstructorsOfSealedClasses</code> コンパイラ引数を指定することで、一時的に古い挙動に戻すことができます。</li></ul></blockquote><h3 id="ビルダー推論コンテキストにおいて、互換性のない数値型に対して-演算子を使用することを禁止" tabindex="-1">ビルダー推論コンテキストにおいて、互換性のない数値型に対して <code>==</code> 演算子を使用することを禁止 <a class="header-anchor" href="#ビルダー推論コンテキストにおいて、互換性のない数値型に対して-演算子を使用することを禁止" aria-label="Permalink to &quot;ビルダー推論コンテキストにおいて、互換性のない数値型に対して `==` 演算子を使用することを禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-45508" target="_blank" rel="noreferrer">KT-45508</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.8 では、<code>Int</code> と <code>Long</code> のように互換性のない数値型に対して、ビルダー推論ラムダ関数のスコープ内で <code>==</code> 演算子を使用することが禁止されます。これは、他のコンテキストで現在行われているのと同じです。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.20: 互換性のない数値型に対して <code>==</code> 演算子が使用された場合に警告を報告 (またはプログレッシブモードではエラーを報告)</li><li>1.8.0: 警告をエラーに昇格。<code>-XXLanguage:-ProperEqualityChecksInBuilderInferenceCalls</code> を使用して一時的に 1.8 より前の挙動に戻すことができます。</li></ul></blockquote><h3 id="elvis-演算子の右辺における-else-を持たない-if-および網羅的でない-when-を禁止" tabindex="-1">Elvis 演算子の右辺における <code>else</code> を持たない <code>if</code> および網羅的でない <code>when</code> を禁止 <a class="header-anchor" href="#elvis-演算子の右辺における-else-を持たない-if-および網羅的でない-when-を禁止" aria-label="Permalink to &quot;Elvis 演算子の右辺における `else` を持たない `if` および網羅的でない `when` を禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-44705" target="_blank" rel="noreferrer">KT-44705</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.8 では、Elvis 演算子 (<code>?:</code>) の右辺で、網羅的でない <code>when</code> 式や <code>else</code> ブランチを持たない <code>if</code> 式を使用することが禁止されます。以前は、Elvis 演算子の結果が式として使用されない場合に許可されていました。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.20: そのような網羅的でない <code>if</code> および <code>when</code> 式に対して警告を報告 (またはプログレッシブモードではエラーを報告)</li><li>1.8.0: この警告をエラーに昇格。<code>-XXLanguage:-ProhibitNonExhaustiveIfInRhsOfElvis</code> を使用して一時的に 1.8 より前の挙動に戻すことができます。</li></ul></blockquote><h3 id="ジェネリック型エイリアスの使用における上限違反を禁止-エイリアス型の複数の型引数で使用される型パラメータ" tabindex="-1">ジェネリック型エイリアスの使用における上限違反を禁止 (エイリアス型の複数の型引数で使用される型パラメータ) <a class="header-anchor" href="#ジェネリック型エイリアスの使用における上限違反を禁止-エイリアス型の複数の型引数で使用される型パラメータ" aria-label="Permalink to &quot;ジェネリック型エイリアスの使用における上限違反を禁止 (エイリアス型の複数の型引数で使用される型パラメータ)&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-29168" target="_blank" rel="noreferrer">KT-29168</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.8 では、<code>typealias Alias&lt;T&gt; = Base&lt;T, T&gt;</code> のように、エイリアス型（alias type）の複数の型引数で1つの型エイリアス型パラメータが使用されている場合に、対応するエイリアス型（alias type）の型パラメータの上限制限に違反する型引数を持つ型エイリアスの使用が禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.7.0: 型エイリアスの使用において、型引数が対応するエイリアス型（alias type）の型パラメータの上限制約に違反している場合に警告を報告 (またはプログレッシブモードではエラーを報告)</li><li>1.8.0: この警告をエラーに昇格。<code>-XXLanguage:-ReportMissingUpperBoundsViolatedErrorOnAbbreviationAtSupertypes</code> を使用して一時的に 1.8 より前の挙動に戻すことができます。</li></ul></blockquote><h3 id="ジェネリック型エイリアスの使用における上限違反を禁止-エイリアス型の型引数のジェネリック型引数として使用される型パラメータ" tabindex="-1">ジェネリック型エイリアスの使用における上限違反を禁止 (エイリアス型の型引数のジェネリック型引数として使用される型パラメータ) <a class="header-anchor" href="#ジェネリック型エイリアスの使用における上限違反を禁止-エイリアス型の型引数のジェネリック型引数として使用される型パラメータ" aria-label="Permalink to &quot;ジェネリック型エイリアスの使用における上限違反を禁止 (エイリアス型の型引数のジェネリック型引数として使用される型パラメータ)&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-54066" target="_blank" rel="noreferrer">KT-54066</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin は、<code>typealias Alias&lt;T&gt; = Base&lt;List&lt;T&gt;&gt;</code> のように、型エイリアスの型パラメータがエイリアス型（alias type）の型引数のジェネリック型引数として使用されている場合に、対応するエイリアス型（alias type）の型パラメータの上限制限に違反する型引数を持つ型エイリアスの使用を禁止します。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.8.0: ジェネリック型エイリアスの使用において、型引数が対応するエイリアス型（alias type）の型パラメータの上限制約に違反している場合に警告を報告</li><li><blockquote><p>=1.10: 警告をエラーに昇格</p></blockquote></li></ul></blockquote><h3 id="委譲内での拡張プロパティに宣言された型パラメータの使用を禁止" tabindex="-1">委譲内での拡張プロパティに宣言された型パラメータの使用を禁止 <a class="header-anchor" href="#委譲内での拡張プロパティに宣言された型パラメータの使用を禁止" aria-label="Permalink to &quot;委譲内での拡張プロパティに宣言された型パラメータの使用を禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-24643" target="_blank" rel="noreferrer">KT-24643</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.8 では、ジェネリック型に対する拡張プロパティを、レシーバの型パラメータを安全でない方法で使用するジェネリック型に委譲することが禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.0: 拡張プロパティを、委譲されるプロパティの型引数から推論された型パラメータを特定の方法で使用する型に委譲した場合に警告を報告 (またはプログレッシブモードではエラーを報告)</li><li>1.8.0: 警告をエラーに昇格。<code>-XXLanguage:-ForbidUsingExtensionPropertyTypeParameterInDelegate</code> を使用して一時的に 1.8 より前の挙動に戻すことができます。</li></ul></blockquote><h3 id="サスペンド関数での-synchronized-アノテーションを禁止" tabindex="-1">サスペンド関数での <code>@Synchronized</code> アノテーションを禁止 <a class="header-anchor" href="#サスペンド関数での-synchronized-アノテーションを禁止" aria-label="Permalink to &quot;サスペンド関数での `@Synchronized` アノテーションを禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-48516" target="_blank" rel="noreferrer">KT-48516</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.8 では、サスペンド関数に <code>@Synchronized</code> アノテーションを配置することが禁止されます。これは、<code>synchronized</code> ブロック内でサスペンド呼び出しが発生することを許可すべきではないためです。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.0: <code>@Synchronized</code> アノテーションが付けられたサスペンド関数に対して警告を報告。プログレッシブモードではエラーとして報告されます。</li><li>1.8.0: 警告をエラーに昇格。<code>-XXLanguage:-SynchronizedSuspendError</code> を使用して一時的に 1.8 より前の挙動に戻すことができます。</li></ul></blockquote><h3 id="非可変長引数パラメータへの引数渡しにスプレッド演算子を使用することを禁止" tabindex="-1">非可変長引数パラメータへの引数渡しにスプレッド演算子を使用することを禁止 <a class="header-anchor" href="#非可変長引数パラメータへの引数渡しにスプレッド演算子を使用することを禁止" aria-label="Permalink to &quot;非可変長引数パラメータへの引数渡しにスプレッド演算子を使用することを禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-48162" target="_blank" rel="noreferrer">KT-48162</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin は、特定の条件下で、スプレッド演算子 (<code>*</code>) を使用して非可変長配列パラメータに配列を渡すことを許可していました。Kotlin 1.8 からは、これが禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.0: 非可変長配列パラメータが期待される場所でスプレッド演算子を使用した場合に警告を報告 (またはプログレッシブモードではエラーを報告)</li><li>1.8.0: 警告をエラーに昇格。<code>-XXLanguage:-ReportNonVarargSpreadOnGenericCalls</code> を使用して一時的に 1.8 より前の挙動に戻すことができます。</li></ul></blockquote><h3 id="ラムダの戻り値型によってオーバーロードされた関数に渡されるラムダにおける-null-安全性違反を禁止" tabindex="-1">ラムダの戻り値型によってオーバーロードされた関数に渡されるラムダにおける null 安全性違反を禁止 <a class="header-anchor" href="#ラムダの戻り値型によってオーバーロードされた関数に渡されるラムダにおける-null-安全性違反を禁止" aria-label="Permalink to &quot;ラムダの戻り値型によってオーバーロードされた関数に渡されるラムダにおける null 安全性違反を禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-49658" target="_blank" rel="noreferrer">KT-49658</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.8 では、ラムダの戻り値型によってオーバーロードされた関数に渡されるラムダが、オーバーロードが null 許容な戻り値型を許可しない場合に <code>null</code> を返すことを禁止します。以前は、<code>null</code> が <code>when</code> 演算子のブランチの1つから返される場合に許可されていました。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.20: 型不一致警告を報告 (またはプログレッシブモードではエラーを報告)</li><li>1.8.0: 警告をエラーに昇格。<code>-XXLanguage:-DontLoseDiagnosticsDuringOverloadResolutionByReturnType</code> を使用して一時的に 1.8 より前の挙動に戻すことができます。</li></ul></blockquote><h3 id="public-なシグネチャでローカル型を近似する際に-null-可能性を保持" tabindex="-1"><code>public</code> なシグネチャでローカル型を近似する際に null 可能性を保持 <a class="header-anchor" href="#public-なシグネチャでローカル型を近似する際に-null-可能性を保持" aria-label="Permalink to &quot;`public` なシグネチャでローカル型を近似する際に null 可能性を保持&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-53982" target="_blank" rel="noreferrer">KT-53982</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース, バイナリ</p><p><strong>概要</strong>: 明示的に戻り値型が指定されていない式ボディ関数からローカル型または匿名型が返される場合、Kotlin コンパイラは、その型の既知のスーパータイプを使用して戻り値型を推論 (または近似) します。この際、コンパイラは、実際には <code>null</code> 値が返される可能性があるにもかかわらず、null非許容型を推論してしまうことがあります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.8.0: フレキシブル型をフレキシブルなスーパータイプで近似</li><li>1.8.0: 宣言が、null許容であるべき型がnull非許容型と推論された場合に警告を報告し、ユーザーに明示的に型を指定するよう促す</li><li>1.9.0: null許容型をnull許容なスーパータイプで近似。<code>-XXLanguage:-KeepNullabilityWhenApproximatingLocalType</code> を使用して一時的に 1.9 より前の挙動に戻すことができます。</li></ul></blockquote><h3 id="オーバーライドを通じて非推奨を伝播しない" tabindex="-1">オーバーライドを通じて非推奨を伝播しない <a class="header-anchor" href="#オーバーライドを通じて非推奨を伝播しない" aria-label="Permalink to &quot;オーバーライドを通じて非推奨を伝播しない&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-47902" target="_blank" rel="noreferrer">KT-47902</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.9 からは、スーパークラスの非推奨メンバーからサブクラスのオーバーライドメンバーへの非推奨の伝播は行われなくなります。これにより、サブクラスでは非推奨にせずにスーパークラスのメンバーを非推奨にするための明示的なメカニズムが提供されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.20: 将来の挙動変更のメッセージと、この警告を抑制するか、非推奨メンバーのオーバーライドに明示的に <code>@Deprecated</code> アノテーションを記述するよう促す警告を報告</li><li>1.9.0: オーバーライドされたメンバーへの非推奨ステータスの伝播を停止。この変更はプログレッシブモードでも即座に有効になります。</li></ul></blockquote><h3 id="ビルダー推論コンテキストにおける、型変数を上限に暗黙的に推論することを禁止" tabindex="-1">ビルダー推論コンテキストにおける、型変数を上限に暗黙的に推論することを禁止 <a class="header-anchor" href="#ビルダー推論コンテキストにおける、型変数を上限に暗黙的に推論することを禁止" aria-label="Permalink to &quot;ビルダー推論コンテキストにおける、型変数を上限に暗黙的に推論することを禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-47986" target="_blank" rel="noreferrer">KT-47986</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.9 では、ビルダー推論ラムダ関数のスコープ内で使用箇所での型情報がない場合に、型変数を対応する型パラメータの上限に推論することが禁止されます。これは、他のコンテキストで現在行われているのと同じです。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.7.20: 使用箇所での型情報がない場合に、型パラメータが宣言された上限に推論された場合に警告を報告 (またはプログレッシブモードではエラーを報告)</li><li>1.9.0: 警告をエラーに昇格。<code>-XXLanguage:-ForbidInferringPostponedTypeVariableIntoDeclaredUpperBound</code> を使用して一時的に 1.9 より前の挙動に戻すことができます。</li></ul></blockquote><h3 id="アノテーションクラス内でのコレクションリテラルの使用を、パラメータ宣言以外の場所で禁止" tabindex="-1">アノテーションクラス内でのコレクションリテラルの使用を、パラメータ宣言以外の場所で禁止 <a class="header-anchor" href="#アノテーションクラス内でのコレクションリテラルの使用を、パラメータ宣言以外の場所で禁止" aria-label="Permalink to &quot;アノテーションクラス内でのコレクションリテラルの使用を、パラメータ宣言以外の場所で禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-39041" target="_blank" rel="noreferrer">KT-39041</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin は、アノテーションクラスのパラメータに配列を渡すため、またはこれらのパラメータのデフォルト値を指定するために、コレクションリテラルを制限された方法で使用することを許可しています。しかし、それに加えて、Kotlin はアノテーションクラス内の他の場所 (例えば、そのネストされたオブジェクト内) でコレクションリテラルを使用することを許可していました。Kotlin 1.9 では、アノテーションクラス内でのコレクションリテラルの使用が、そのパラメータのデフォルト値以外の場所で禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.7.0: アノテーションクラスのネストされたオブジェクト内の配列リテラルに対して警告を報告 (またはプログレッシブモードではエラーを報告)</li><li>1.9.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="デフォルト値式におけるデフォルト値を持つパラメータの前方参照を禁止" tabindex="-1">デフォルト値式におけるデフォルト値を持つパラメータの前方参照を禁止 <a class="header-anchor" href="#デフォルト値式におけるデフォルト値を持つパラメータの前方参照を禁止" aria-label="Permalink to &quot;デフォルト値式におけるデフォルト値を持つパラメータの前方参照を禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-25694" target="_blank" rel="noreferrer">KT-25694</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.9 では、デフォルト値式において、デフォルト値を持つパラメータの前方参照が禁止されます。これにより、パラメータがデフォルト値式でアクセスされるまでに、関数に渡されるか、または自身のデフォルト値式によって初期化されるかのいずれかの値がすでに存在するようになります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.7.0: デフォルト値を持つパラメータが、それより前に来る別のパラメータのデフォルト値で参照された場合に警告を報告 (またはプログレッシブモードではエラーを報告)</li><li>1.9.0: 警告をエラーに昇格。<code>-XXLanguage:-ProhibitIllegalValueParameterUsageInDefaultArguments</code> を使用して一時的に 1.9 より前の挙動に戻すことができます。</li></ul></blockquote><h3 id="インライン関数型パラメータに対する拡張呼び出しを禁止" tabindex="-1">インライン関数型パラメータに対する拡張呼び出しを禁止 <a class="header-anchor" href="#インライン関数型パラメータに対する拡張呼び出しを禁止" aria-label="Permalink to &quot;インライン関数型パラメータに対する拡張呼び出しを禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-52502" target="_blank" rel="noreferrer">KT-52502</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin は、インライン関数型パラメータを別のインライン関数にレシーバとして渡すことを許可していましたが、そのようなコードをコンパイルする際には常にコンパイラ例外が発生していました。Kotlin 1.9 ではこれが禁止され、コンパイラのクラッシュではなくエラーが報告されるようになります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.7.20: インライン関数型パラメータに対するインライン拡張呼び出しに対して警告を報告 (またはプログレッシブモードではエラーを報告)</li><li>1.9.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="匿名関数引数を持つ-suspend-という名前の-infix-関数への呼び出しを禁止" tabindex="-1">匿名関数引数を持つ <code>suspend</code> という名前の infix 関数への呼び出しを禁止 <a class="header-anchor" href="#匿名関数引数を持つ-suspend-という名前の-infix-関数への呼び出しを禁止" aria-label="Permalink to &quot;匿名関数引数を持つ `suspend` という名前の infix 関数への呼び出しを禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-49264" target="_blank" rel="noreferrer">KT-49264</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.9 からは、単一の関数型引数を匿名関数リテラルとして持つ <code>suspend</code> という名前の infix 関数を呼び出すことはできなくなります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.7.20: 匿名関数リテラルを持つ <code>suspend</code> infix 呼び出しに対して警告を報告</li><li>1.9.0: 警告をエラーに昇格。<code>-XXLanguage:-ModifierNonBuiltinSuspendFunError</code> を使用して一時的に 1.9 より前の挙動に戻すことができます。</li><li><blockquote><p>=1.10: <code>suspend fun</code> トークンシーケンスがパーサーによって解釈される方法を変更</p></blockquote></li></ul></blockquote><h3 id="inner-クラスでキャプチャされた型パラメータを、そのバリアンスに反して使用することを禁止" tabindex="-1"><code>inner</code> クラスでキャプチャされた型パラメータを、そのバリアンスに反して使用することを禁止 <a class="header-anchor" href="#inner-クラスでキャプチャされた型パラメータを、そのバリアンスに反して使用することを禁止" aria-label="Permalink to &quot;`inner` クラスでキャプチャされた型パラメータを、そのバリアンスに反して使用することを禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-50947" target="_blank" rel="noreferrer">KT-50947</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.9 では、<code>in</code> または <code>out</code> のバリアンスを持つ外側クラスの型パラメータを、そのクラスの <code>inner</code> クラス内で、その型パラメータの宣言されたバリアンスに違反する位置で使用することが禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.7.0: 外側クラスの型パラメータの使用位置がそのパラメータのバリアンスルールに違反している場合に警告を報告 (またはプログレッシブモードではエラーを報告)</li><li>1.9.0: 警告をエラーに昇格。<code>-XXLanguage:-ReportTypeVarianceConflictOnQualifierArguments</code> を使用して一時的に 1.9 より前の挙動に戻すことができます。</li></ul></blockquote><h3 id="複合代入演算子での明示的な戻り値型を持たない関数の再帰呼び出しを禁止" tabindex="-1">複合代入演算子での明示的な戻り値型を持たない関数の再帰呼び出しを禁止 <a class="header-anchor" href="#複合代入演算子での明示的な戻り値型を持たない関数の再帰呼び出しを禁止" aria-label="Permalink to &quot;複合代入演算子での明示的な戻り値型を持たない関数の再帰呼び出しを禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-48546" target="_blank" rel="noreferrer">KT-48546</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.9 では、明示的に戻り値型が指定されていない関数が、その関数のボディ内の複合代入演算子の引数内で再帰的に呼び出されることが禁止されます。これは、その関数のボディ内の他の式で現在行われているのと同じです。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.7.0: 明示的に戻り値型が指定されていない関数が、その関数のボディ内の複合代入演算子の引数内で再帰的に呼び出された場合に警告を報告 (またはプログレッシブモードではエラーを報告)</li><li>1.9.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="notnull-t-が期待され、null-許容境界を持つ-kotlin-ジェネリックパラメータが与えられた場合の不健全な呼び出しを禁止" tabindex="-1"><code>@NotNull T</code> が期待され、null 許容境界を持つ Kotlin ジェネリックパラメータが与えられた場合の不健全な呼び出しを禁止 <a class="header-anchor" href="#notnull-t-が期待され、null-許容境界を持つ-kotlin-ジェネリックパラメータが与えられた場合の不健全な呼び出しを禁止" aria-label="Permalink to &quot;`@NotNull T` が期待され、null 許容境界を持つ Kotlin ジェネリックパラメータが与えられた場合の不健全な呼び出しを禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-36770" target="_blank" rel="noreferrer">KT-36770</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.9 では、<code>@NotNull</code> アノテーションが付けられた Java メソッドのパラメータに、null許容の可能性のあるジェネリック型の値が渡されるメソッド呼び出しが禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5.20: null非許容型が期待される場所に制約のないジェネリック型パラメータが渡された場合に警告を報告</li><li>1.9.0: 上記の警告の代わりに型不一致エラーを報告。<code>-XXLanguage:-ProhibitUsingNullableTypeParameterAgainstNotNullAnnotated</code> を使用して一時的に 1.8 より前の挙動に戻すことができます。</li></ul></blockquote><h3 id="enum-のエントリ初期化子からの-enum-クラスのコンパニオンのメンバーへのアクセスを禁止" tabindex="-1"><code>enum</code> のエントリ初期化子からの <code>enum</code> クラスのコンパニオンのメンバーへのアクセスを禁止 <a class="header-anchor" href="#enum-のエントリ初期化子からの-enum-クラスのコンパニオンのメンバーへのアクセスを禁止" aria-label="Permalink to &quot;`enum` のエントリ初期化子からの `enum` クラスのコンパニオンのメンバーへのアクセスを禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-49110" target="_blank" rel="noreferrer">KT-49110</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.9 では、<code>enum</code> エントリ初期化子からの <code>enum</code> のコンパニオンオブジェクトへのあらゆる種類のアクセスが禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.20: そのようなコンパニオンメンバーへのアクセスに対して警告を報告 (またはプログレッシブモードではエラーを報告)</li><li>1.9.0: 警告をエラーに昇格。<code>-XXLanguage:-ProhibitAccessToEnumCompanionMembersInEnumConstructorCall</code> を使用して一時的に 1.8 より前の挙動に戻すことができます。</li></ul></blockquote><h3 id="enum-declaringclass-シンセティックプロパティを非推奨にし、削除" tabindex="-1"><code>Enum.declaringClass</code> シンセティックプロパティを非推奨にし、削除 <a class="header-anchor" href="#enum-declaringclass-シンセティックプロパティを非推奨にし、削除" aria-label="Permalink to &quot;`Enum.declaringClass` シンセティックプロパティを非推奨にし、削除&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-49653" target="_blank" rel="noreferrer">KT-49653</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin は、基盤となる Java クラス <code>java.lang.Enum</code> の <code>getDeclaringClass()</code> メソッドから生成される <code>Enum</code> 値に対して、<code>declaringClass</code> シンセティックプロパティの使用を許可していました。このメソッドは Kotlin の <code>Enum</code> 型では利用できないにもかかわらずです。Kotlin 1.9 ではこのプロパティの使用が禁止され、代わりに拡張プロパティ <code>declaringJavaClass</code> への移行が提案されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.7.0: <code>declaringClass</code> プロパティの使用に対して警告を報告 (またはプログレッシブモードではエラーを報告) し、<code>declaringJavaClass</code> 拡張への移行を提案</li><li>1.9.0: 警告をエラーに昇格。<code>-XXLanguage:-ProhibitEnumDeclaringClass</code> を使用して一時的に 1.9 より前の挙動に戻すことができます。</li><li><blockquote><p>=1.10: <code>declaringClass</code> シンセティックプロパティを削除</p></blockquote></li></ul></blockquote><h3 id="コンパイラオプション-xjvm-default-の-enable-および-compatibility-モードを非推奨に" tabindex="-1">コンパイラオプション <code>-Xjvm-default</code> の <code>enable</code> および <code>compatibility</code> モードを非推奨に <a class="header-anchor" href="#コンパイラオプション-xjvm-default-の-enable-および-compatibility-モードを非推奨に" aria-label="Permalink to &quot;コンパイラオプション `-Xjvm-default` の `enable` および `compatibility` モードを非推奨に&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-46329" target="_blank" rel="noreferrer">KT-46329</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.6.20 では、コンパイラオプション <code>-Xjvm-default</code> の <code>enable</code> および <code>compatibility</code> モードの使用について警告が報告されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.20: コンパイラオプション <code>-Xjvm-default</code> の <code>enable</code> および <code>compatibility</code> モードに対して警告を導入</li><li><blockquote><p>= 1.9: この警告をエラーに昇格</p></blockquote></li></ul></blockquote><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><h3 id="range-progression-が-collection-を実装し始める際の潜在的なオーバーロード解決の変更について警告" tabindex="-1"><code>Range</code>/<code>Progression</code> が <code>Collection</code> を実装し始める際の潜在的なオーバーロード解決の変更について警告 <a class="header-anchor" href="#range-progression-が-collection-を実装し始める際の潜在的なオーバーロード解決の変更について警告" aria-label="Permalink to &quot;`Range`/`Progression` が `Collection` を実装し始める際の潜在的なオーバーロード解決の変更について警告&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-49276" target="_blank" rel="noreferrer">KT-49276</a></p><p><strong>コンポーネント</strong>: コア言語 / kotlin-stdlib</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.9 では、標準のプログレッションおよびそこから継承される具体的なレンジで <code>Collection</code> インターフェースを実装することが計画されています。これにより、あるメソッドに2つのオーバーロード (1つは要素を受け入れ、もう1つはコレクションを受け入れる) がある場合、オーバーロード解決で異なるオーバーロードが選択される可能性があります。Kotlin は、レンジまたはプログレッション引数でそのようなオーバーロードされたメソッドが呼び出された場合に警告またはエラーを報告することで、この状況を可視化します。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.20: 標準のプログレッションまたはそのレンジの継承者を引数としてオーバーロードされたメソッドが呼び出された場合に警告を報告。このプログレッション/レンジによる <code>Collection</code> インターフェースの実装が、将来的にこの呼び出しで別のオーバーロードが選択されることにつながる場合。</li><li>1.8.0: この警告をエラーに昇格</li><li>1.9.0: エラーの報告を停止し、プログレッションで <code>Collection</code> インターフェースを実装することで、影響を受けるケースでオーバーロード解決の結果を変更</li></ul></blockquote><h3 id="kotlin-dom-および-kotlin-browser-パッケージの宣言を-kotlinx-に移行" tabindex="-1"><code>kotlin.dom</code> および <code>kotlin.browser</code> パッケージの宣言を <code>kotlinx.*</code> に移行 <a class="header-anchor" href="#kotlin-dom-および-kotlin-browser-パッケージの宣言を-kotlinx-に移行" aria-label="Permalink to &quot;`kotlin.dom` および `kotlin.browser` パッケージの宣言を `kotlinx.*` に移行&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-39330" target="_blank" rel="noreferrer">KT-39330</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib (JS)</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: <code>kotlin.dom</code> および <code>kotlin.browser</code> パッケージからの宣言は、stdlib からそれらを抽出するための準備として、対応する <code>kotlinx.*</code> パッケージに移動されました。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.4.0: <code>kotlinx.dom</code> および <code>kotlinx.browser</code> パッケージに代替 API を導入</li><li>1.4.0: <code>kotlin.dom</code> および <code>kotlin.browser</code> パッケージの API を非推奨化し、上記の新しい API を代替として提案</li><li>1.6.0: 非推奨レベルをエラーに昇格</li><li>1.8.20: JS-IR ターゲット向けに stdlib から非推奨の関数を削除</li><li><blockquote><p>= 1.9: <code>kotlinx.*</code> パッケージの API を別のライブラリに移動</p></blockquote></li></ul></blockquote><h3 id="一部の-js-専用-api-を非推奨に" tabindex="-1">一部の JS 専用 API を非推奨に <a class="header-anchor" href="#一部の-js-専用-api-を非推奨に" aria-label="Permalink to &quot;一部の JS 専用 API を非推奨に&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-48587" target="_blank" rel="noreferrer">KT-48587</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib (JS)</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: stdlib の多くの JS 専用関数が削除のために非推奨になりました。これには、<code>String.concat(String)</code>, <code>String.match(regex: String)</code>, <code>String.matches(regex: String)</code>、および比較関数を取る配列の <code>sort</code> 関数 (例: <code>Array&lt;out T&gt;.sort(comparison: (a: T, b: T) -&gt; Int)</code>) が含まれます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.0: 影響を受ける関数を警告とともに非推奨化</li><li>1.9.0: 非推奨レベルをエラーに昇格</li><li><blockquote><p>=1.10.0: 公開 API から非推奨の関数を削除</p></blockquote></li></ul></blockquote><h2 id="ツール" tabindex="-1">ツール <a class="header-anchor" href="#ツール" aria-label="Permalink to &quot;ツール&quot;">​</a></h2><h3 id="kotlincompile-タスクの-classpath-プロパティの非推奨レベルを昇格" tabindex="-1"><code>KotlinCompile</code> タスクの <code>classpath</code> プロパティの非推奨レベルを昇格 <a class="header-anchor" href="#kotlincompile-タスクの-classpath-プロパティの非推奨レベルを昇格" aria-label="Permalink to &quot;`KotlinCompile` タスクの `classpath` プロパティの非推奨レベルを昇格&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-51679" target="_blank" rel="noreferrer">KT-51679</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: <code>KotlinCompile</code> タスクの <code>classpath</code> プロパティは非推奨になりました。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.7.0: <code>classpath</code> プロパティが非推奨化</li><li>1.8.0: 非推奨レベルをエラーに昇格</li><li><blockquote><p>=1.9.0: 公開 API から非推奨の関数を削除</p></blockquote></li></ul></blockquote><h3 id="kapt-use-worker-api-gradle-プロパティを削除" tabindex="-1"><code>kapt.use.worker.api</code> Gradle プロパティを削除 <a class="header-anchor" href="#kapt-use-worker-api-gradle-プロパティを削除" aria-label="Permalink to &quot;`kapt.use.worker.api` Gradle プロパティを削除&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-48827" target="_blank" rel="noreferrer">KT-48827</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更タイプ</strong>: 動作</p><p><strong>概要</strong>: Gradle Workers API を介して kapt を実行することを許可していた <code>kapt.use.worker.api</code> プロパティ (デフォルト: true) を削除します。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.20: 非推奨レベルを警告に昇格</li><li>1.8.0: このプロパティを削除</li></ul></blockquote><h3 id="kotlin-compiler-execution-strategy-システムプロパティを削除" tabindex="-1"><code>kotlin.compiler.execution.strategy</code> システムプロパティを削除 <a class="header-anchor" href="#kotlin-compiler-execution-strategy-システムプロパティを削除" aria-label="Permalink to &quot;`kotlin.compiler.execution.strategy` システムプロパティを削除&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-51831" target="_blank" rel="noreferrer">KT-51831</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更タイプ</strong>: 動作</p><p><strong>概要</strong>: コンパイラの実行戦略を選択するために使用されていた <code>kotlin.compiler.execution.strategy</code> システムプロパティを削除します。代わりに Gradle プロパティ <code>kotlin.compiler.execution.strategy</code> またはコンパイルタスクプロパティ <code>compilerExecutionStrategy</code> を使用してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.7.0: 非推奨レベルを警告に昇格</li><li>1.8.0: プロパティを削除</li></ul></blockquote><h3 id="コンパイラオプションの変更" tabindex="-1">コンパイラオプションの変更 <a class="header-anchor" href="#コンパイラオプションの変更" aria-label="Permalink to &quot;コンパイラオプションの変更&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-27301" target="_blank" rel="noreferrer">KT-27301</a>, <a href="https://youtrack.com/issue/KT-48532" target="_blank" rel="noreferrer">KT-48532</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更タイプ</strong>: ソース, バイナリ</p><p><strong>概要</strong>: この変更は Gradle プラグインの作成者に影響を与える可能性があります。<code>kotlin-gradle-plugin</code> には、一部の内部型に追加のジェネリックパラメータがあります (ジェネリック型または <code>*</code> を追加する必要があります)。<code>KotlinNativeLink</code> タスクは <code>AbstractKotlinNativeCompile</code> タスクを継承しなくなりました。<code>KotlinJsCompilerOptions.outputFile</code> および関連する <code>KotlinJsOptions.outputFile</code> オプションは非推奨になりました。代わりに <code>Kotlin2JsCompile.outputFileProperty</code> タスク入力を使用してください。<code>kotlinOptions</code> タスク入力および <code>kotlinOptions{...}</code> タスク DSL はサポートモードであり、今後のリリースで非推奨になる予定です。<code>compilerOptions</code> および <code>kotlinOptions</code> はタスク実行フェーズで変更できません (<a href="/ja/kotlin/whatsnew18#limitations">Kotlin 1.8 の新機能</a> の例外を1つ参照)。<code>freeCompilerArgs</code> は不変の <code>List&lt;String&gt;</code> を返します – <code>kotlinOptions.freeCompilerArgs.remove(&quot;something&quot;)</code> は失敗します。古い JVM バックエンドを使用することを許可していた <code>useOldBackend</code> プロパティは削除されました。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.8.0: <code>KotlinNativeLink</code> タスクは <code>AbstractKotlinNativeCompile</code> を継承しません。<code>KotlinJsCompilerOptions.outputFile</code> および関連する <code>KotlinJsOptions.outputFile</code> オプションは非推奨になりました。古い JVM バックエンドを使用することを許可していた <code>useOldBackend</code> プロパティは削除されました。</li></ul></blockquote><h3 id="kotlin-internal-single-build-metrics-file-プロパティを非推奨に" tabindex="-1"><code>kotlin.internal.single.build.metrics.file</code> プロパティを非推奨に <a class="header-anchor" href="#kotlin-internal-single-build-metrics-file-プロパティを非推奨に" aria-label="Permalink to &quot;`kotlin.internal.single.build.metrics.file` プロパティを非推奨に&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-53357" target="_blank" rel="noreferrer">KT-53357</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更タイプ</strong>: ソース</p><p><strong>概要</strong>: ビルドレポート用の単一ファイルを定義するために使用されていた <code>kotlin.internal.single.build.metrics.file</code> プロパティを非推奨にします。代わりに <code>kotlin.build.report.output=single_file</code> とともに <code>kotlin.build.report.single_file</code> プロパティを使用してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.8.0: 非推奨レベルを警告に昇格</li><li><blockquote><p>= 1.9: プロパティを削除</p></blockquote></li></ul></blockquote>',76)]))}const h=e(n,[["render",a]]);export{u as __pageData,h as default};
