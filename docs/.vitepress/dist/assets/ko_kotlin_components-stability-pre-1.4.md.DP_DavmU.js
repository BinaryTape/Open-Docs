import{_ as n,C as r,c as e,o as i,j as d,G as l,ag as a,a as s}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"Kotlin 컴포넌트의 안정성 (1.4 이전","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/components-stability-pre-1.4.md","filePath":"ko/kotlin/components-stability-pre-1.4.md","lastUpdated":1754307826000}'),p={name:"ko/kotlin/components-stability-pre-1.4.md"};function g(F,t,c,k,M,m){const o=r("no-index");return i(),e("div",null,[t[0]||(t[0]=d("h1",{id:"kotlin-컴포넌트의-안정성-1-4-이전",tabindex:"-1"},[s("Kotlin 컴포넌트의 안정성 (1.4 이전 "),d("a",{class:"header-anchor",href:"#kotlin-컴포넌트의-안정성-1-4-이전","aria-label":'Permalink to "Kotlin 컴포넌트의 안정성 (1.4 이전"'},"​")],-1)),t[1]||(t[1]=d("p",null,"[//]: # (title: Kotlin 컴포넌트의 안정성 (1.4 이전))",-1)),l(o),t[2]||(t[2]=a('<p>컴포넌트의 진화 속도에 따라 다양한 안정성 모드가 있을 수 있습니다:</p><a name="moving-fast"></a><ul><li><p><strong>빠르게 변화 (MF)</strong>: <a href="/ko/kotlin/kotlin-evolution-principles#language-and-tooling-releases">증분 릴리스</a> 간에도 호환성을 기대할 수 없으며, 어떠한 기능도 경고 없이 추가, 제거 또는 변경될 수 있습니다.</p></li><li><p><strong>증분 릴리스에서 추가 (AIR)</strong>: 증분 릴리스에서 기능이 추가될 수 있으며, 제거 및 동작 변경은 피해야 하며, 필요한 경우 이전 증분 릴리스에서 공지되어야 합니다.</p></li><li><p><strong>안정적인 증분 릴리스 (SIR)</strong>: 증분 릴리스는 완전히 호환되며, 최적화 및 버그 수정만 이루어집니다. 어떤 변경 사항이라도 <a href="/ko/kotlin/kotlin-evolution-principles#language-and-tooling-releases">언어 릴리스</a>에서 이루어질 수 있습니다.</p></li></ul><a name="fully-stable"></a><ul><li><strong>완전 안정 (FS)</strong>: 증분 릴리스는 완전히 호환되며, 최적화 및 버그 수정만 이루어집니다. 피처 릴리스는 하위 호환성을 유지합니다.</li></ul><p>소스 및 바이너리 호환성은 동일한 컴포넌트라도 다른 모드를 가질 수 있습니다. 예를 들어, 소스 언어는 바이너리 형식이 안정화되기 전에 완전한 안정성을 달성할 수 있으며, 그 반대도 가능합니다.</p><p><a href="/ko/kotlin/kotlin-evolution-principles">Kotlin 진화 정책</a>의 조항은 완전 안정(FS)에 도달한 컴포넌트에만 완전히 적용됩니다. 그 시점부터 호환되지 않는 변경 사항은 언어 위원회의 승인을 받아야 합니다.</p><table tabindex="0"><thead><tr><th><strong>컴포넌트</strong></th><th><strong>버전 진입 시점</strong></th><th><strong>소스 모드</strong></th><th><strong>바이너리 모드</strong></th></tr></thead><tbody><tr><td>Kotlin/JVM</td><td>1.0</td><td>FS</td><td>FS</td></tr><tr><td>kotlin-stdlib (JVM)</td><td>1.0</td><td>FS</td><td>FS</td></tr><tr><td>KDoc syntax</td><td>1.0</td><td>FS</td><td>N/A</td></tr><tr><td>Coroutines</td><td>1.3</td><td>FS</td><td>FS</td></tr><tr><td>kotlin-reflect (JVM)</td><td>1.0</td><td>SIR</td><td>SIR</td></tr><tr><td>Kotlin/JS</td><td>1.1</td><td>AIR</td><td>MF</td></tr><tr><td>Kotlin/Native</td><td>1.3</td><td>AIR</td><td>MF</td></tr><tr><td>Kotlin Scripts (*.kts)</td><td>1.2</td><td>AIR</td><td>MF</td></tr><tr><td>dokka</td><td>0.1</td><td>MF</td><td>N/A</td></tr><tr><td>Kotlin Scripting APIs</td><td>1.2</td><td>MF</td><td>MF</td></tr><tr><td>Compiler Plugin API</td><td>1.0</td><td>MF</td><td>MF</td></tr><tr><td>Serialization</td><td>1.3</td><td>MF</td><td>MF</td></tr><tr><td>Multiplatform Projects</td><td>1.2</td><td>MF</td><td>MF</td></tr><tr><td>Inline classes</td><td>1.3</td><td>MF</td><td>MF</td></tr><tr><td>Unsigned arithmetics</td><td>1.3</td><td>MF</td><td>MF</td></tr><tr><td><strong>기본적으로 모든 기타 실험적 기능</strong></td><td>N/A</td><td><strong>MF</strong></td><td><strong>MF</strong></td></tr></tbody></table>',8))])}const u=n(p,[["render",g]]);export{_ as __pageData,u as default};
