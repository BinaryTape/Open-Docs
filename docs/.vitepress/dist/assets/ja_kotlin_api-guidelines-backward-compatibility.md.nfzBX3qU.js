import{_ as e,C as l,c as p,o as h,j as s,ag as a,G as k,a as t}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"ライブラリ作成者向け後方互換性ガイドライン","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/api-guidelines-backward-compatibility.md","filePath":"ja/kotlin/api-guidelines-backward-compatibility.md","lastUpdated":1754307826000}'),d={name:"ja/kotlin/api-guidelines-backward-compatibility.md"};function r(o,i,c,g,E,y){const n=l("TopicTitle");return h(),p("div",null,[i[0]||(i[0]=s("h1",{id:"ライブラリ作成者向け後方互換性ガイドライン",tabindex:"-1"},[t("ライブラリ作成者向け後方互換性ガイドライン "),s("a",{class:"header-anchor",href:"#ライブラリ作成者向け後方互換性ガイドライン","aria-label":'Permalink to "ライブラリ作成者向け後方互換性ガイドライン"'},"​")],-1)),i[1]||(i[1]=s("p",null,"ライブラリを作成する最も一般的な動機は、より幅広いコミュニティに機能を提供することです。 このコミュニティは、単一のチーム、企業、特定の業界、またはテクノロジープラットフォームである可能性があります。 どのような場合でも、後方互換性は重要な考慮事項となります。 コミュニティが広がるほど、ユーザーが誰であり、どのような制約の中で作業しているかを把握しにくくなるため、後方互換性はより重要になります。",-1)),i[2]||(i[2]=s("p",null,"後方互換性とは単一の用語ではなく、バイナリ、ソース、および振る舞いの各レベルで定義できます。 これらのタイプに関する詳細は、このセクションで説明します。",-1)),i[3]||(i[3]=s("p",null,"次の点に注意してください。",-1)),i[4]||(i[4]=s("ul",null,[s("li",null,"ソース互換性を損なわずにバイナリ互換性を損なうこと、またその逆も可能です。"),s("li",null,"ソース互換性を保証することは望ましいですが、非常に困難です。ライブラリ作成者は、ライブラリのユーザーが関数または型を呼び出し、あるいはインスタンス化するあらゆる可能な方法を考慮しなければなりません。 ソース互換性は通常、目標であり、約束ではありません。")],-1)),i[5]||(i[5]=s("p",null,"このセクションの残りの部分では、さまざまな種類の互換性を確保するのに役立つアクションとツールについて説明します。",-1)),i[6]||(i[6]=s("h2",{"initial-collapse-state":"collapsed",collapsible:"true",id:"互換性の種類",tabindex:"-1"},[t("互換性の種類 "),s("a",{class:"header-anchor",href:"#互換性の種類","aria-label":'Permalink to "互換性の種類 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[7]||(i[7]=a('<p><strong>バイナリ互換性</strong>とは、ライブラリの新しいバージョンが、以前にコンパイルされたライブラリのバージョンを置き換えることができることを意味します。 以前のバージョンのライブラリに対してコンパイルされたソフトウェアは、引き続き正しく動作するはずです。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>バイナリ互換性の詳細については、<a href="https://github.com/Kotlin/binary-compatibility-validator?tab=readme-ov-file#what-makes-an-incompatible-change-to-the-public-binary-api" target="_blank" rel="noreferrer">バイナリ互換性バリデーターのREADME</a>または<a href="https://github.com/eclipse-platform/eclipse.platform/blob/master/docs/Evolving-Java-based-APIs-2.md" target="_blank" rel="noreferrer">JavaベースのAPIの進化</a>ドキュメントを参照してください。</p></div><p><strong>ソース互換性</strong>とは、ライブラリの新しいバージョンが、ライブラリを使用するソースコードを一切変更することなく、以前のバージョンを置き換えることができることを意味します。ただし、このクライアントコードのコンパイル出力は、ライブラリのコンパイル出力と互換性がなくなる可能性があるため、互換性を保証するにはクライアントコードを新しいバージョンのライブラリに対して再ビルドする必要があります。</p><p><strong>振る舞いの互換性</strong>とは、ライブラリの新しいバージョンが、バグ修正を除いて既存の機能を変更しないことを意味します。同じ機能が関与し、同じセマンティクスを持ちます。</p><h2 id="バイナリ互換性バリデーターを使用する" tabindex="-1">バイナリ互換性バリデーターを使用する <a class="header-anchor" href="#バイナリ互換性バリデーターを使用する" aria-label="Permalink to &quot;バイナリ互換性バリデーターを使用する&quot;">​</a></h2><p>JetBrainsは、APIの異なるバージョン間でのバイナリ互換性を確保するために使用できる<a href="https://github.com/Kotlin/binary-compatibility-validator" target="_blank" rel="noreferrer">バイナリ互換性バリデーター</a>ツールを提供しています。</p><p>このツールはGradleプラグインとして実装されており、ビルドに2つのタスクを追加します。</p><ul><li><code>apiDump</code> タスクは、APIを記述する人間が読める形式の <code>.api</code> ファイルを作成します。</li><li><code>apiCheck</code> タスクは、保存されたAPIの記述と現在のビルドでコンパイルされたクラスを比較します。</li></ul><p><code>apiCheck</code> タスクは、標準のGradle <code>check</code> タスクによってビルド時に呼び出されます。 互換性が損なわれた場合、ビルドは失敗します。その時点で、<code>apiDump</code> タスクを手動で実行し、以前のバージョンと新しいバージョンの違いを比較する必要があります。 変更に問題がなければ、VCS内にある既存の <code>.api</code> ファイルを更新できます。</p><p>このバリデーターは、マルチプラットフォームライブラリによって生成された<a href="https://github.com/Kotlin/binary-compatibility-validator?tab=readme-ov-file#experimental-klib-abi-validation-support" target="_blank" rel="noreferrer">KLibの検証に関する実験的サポート</a>を提供します。</p>',10)),k(n,{id:"kotlin-gradleプラグインにおけるバイナリ互換性検証",level:"3",title:"Kotlin Gradleプラグインにおけるバイナリ互換性検証",labelRef:"experimental-general"}),i[8]||(i[8]=a(`<p>バージョン2.2.0以降、Kotlin Gradleプラグインはバイナリ互換性検証をサポートしています。詳細については、<a href="/ja/kotlin/gradle-binary-compatibility-validation">Kotlin Gradleプラグインにおけるバイナリ互換性検証</a>を参照してください。</p><h2 id="戻り値の型を明示的に指定する" tabindex="-1">戻り値の型を明示的に指定する <a class="header-anchor" href="#戻り値の型を明示的に指定する" aria-label="Permalink to &quot;戻り値の型を明示的に指定する&quot;">​</a></h2><p><a href="/ja/kotlin/coding-conventions#coding-conventions-for-libraries">Kotlinコーディングガイドライン</a>で説明されているように、API内の関数戻り値の型とプロパティの型は常に明示的に指定する必要があります。 <a href="/ja/kotlin/api-guidelines-simplicity#use-explicit-api-mode">明示的なAPIモード</a>に関するセクションも参照してください。</p><p>次の例を考えてみましょう。ライブラリ作成者が <code>JsonDeserializer</code> を作成し、便宜のために拡張関数を使用して <code>Int</code> 型と関連付けています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromJson: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span></code></pre></div><p>作成者がこの実装を <code>JsonOrXmlDeserializer</code> に置き換えたとします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonOrXmlDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromJson: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromXML: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonOrXmlDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }, { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. })</span></span></code></pre></div><p>既存の機能は引き続き動作し、XMLをデシリアライズする機能が追加されます。しかし、これはバイナリ互換性を損ないます。</p><h2 id="既存のapi関数への引数追加を避ける" tabindex="-1">既存のAPI関数への引数追加を避ける <a class="header-anchor" href="#既存のapi関数への引数追加を避ける" aria-label="Permalink to &quot;既存のAPI関数への引数追加を避ける&quot;">​</a></h2><p>パブリックAPIに非デフォルト引数を追加すると、ユーザーは以前よりも多くの情報を提供する必要があるため、バイナリ互換性とソース互換性の両方が損なわれます。 しかし、<a href="/ja/kotlin/functions#parameters-with-default-values">デフォルト引数</a>を追加するだけでも互換性が損なわれる可能性があります。</p><p>例えば、<code>lib.kt</code> に次の関数があるとします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> … </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns zero</span></span></code></pre></div><p>そして、<code>client.kt</code> に次の関数があるとします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints zero</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これら2つのファイルをJVM上でコンパイルすると、<code>LibKt.class</code> と <code>ClientKt.class</code> が出力されます。</p><p><code>fib</code> 関数をフィボナッチ数列を表すように再実装してコンパイルし、<code>fib(3)</code> が2を返し、<code>fib(4)</code> が3を返すなどとしたとします。 パラメータを追加しますが、既存の動作を維持するためにデフォルト値をゼロにします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> … </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns Fibonacci member</span></span></code></pre></div><p>これで <code>lib.kt</code> ファイルを再コンパイルする必要があります。<code>client.kt</code> ファイルは再コンパイルする必要がなく、関連するクラスファイルは次のように呼び出せると思うかもしれません。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ClientKt.class</span></span></code></pre></div><p>しかし、これを試すと <code>NoSuchMethodError</code> が発生します。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: &#39;int LibKt.fib()&#39;</span></span>
<span class="line"><span>       at LibKt.main(fib.kt:2)</span></span>
<span class="line"><span>       at LibKt.main(fib.kt)</span></span>
<span class="line"><span>       …</span></span></code></pre></div><p>これは、Kotlin/JVMコンパイラによって生成されたバイトコードでメソッドのシグネチャが変更され、バイナリ互換性が損なわれたためです。</p><p>しかし、ソース互換性は維持されます。両方のファイルを再コンパイルすれば、プログラムは以前と同様に実行されます。</p>`,23)),i[9]||(i[9]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"互換性維持のためオーバーロードを使用する",tabindex:"-1"},[t("互換性維持のためオーバーロードを使用する "),s("a",{class:"header-anchor",href:"#互換性維持のためオーバーロードを使用する","aria-label":'Permalink to "互換性維持のためオーバーロードを使用する {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[10]||(i[10]=a(`<p>JVM向けKotlinコードを記述する場合、デフォルト引数を持つ関数に <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-overloads/" target="_blank" rel="noreferrer"><code>@JvmOverloads</code></a> アノテーションを使用できます。 これにより、関数のオーバーロードが生成されます。各オーバーロードは、パラメータリストの末尾から省略できるデフォルト引数を持つパラメータごとに1つずつです。 これらの個別に生成された関数を使用すると、パラメータリストの末尾に新しいパラメータを追加しても、出力内の既存の関数が変更されず、新しい関数が追加されるだけなので、バイナリ互換性が維持されます。</p><p>例えば、上記の関数は次のようにアノテーション付けされるかもしれません。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmOverloads</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> …</span></span></code></pre></div><p>これにより、出力バイトコードには2つのメソッドが生成されます。1つはパラメータなし、もう1つは <code>Int</code> パラメータを持つものです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()I</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(I)I</span></span></code></pre></div><p>すべてのKotlinターゲットにおいて、バイナリ互換性を維持するために、デフォルト引数を受け入れる単一の関数ではなく、関数の複数のオーバーロードを手動で作成することを選択できます。上記の例では、これは <code>Int</code> パラメータを受け取りたい場合に備えて、別の <code>fib</code> 関数を作成することを意味します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> … </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> …</span></span></code></pre></div><h2 id="戻り値の型を広げたり狭めたりするのを避ける" tabindex="-1">戻り値の型を広げたり狭めたりするのを避ける <a class="header-anchor" href="#戻り値の型を広げたり狭めたりするのを避ける" aria-label="Permalink to &quot;戻り値の型を広げたり狭めたりするのを避ける&quot;">​</a></h2><p>APIを進化させる際、関数の戻り値の型を広げたり狭めたりしたいと考えるのは一般的です。 例えば、APIの次期バージョンで、戻り値の型を <code>List</code> から <code>Collection</code> に、または <code>Collection</code> から <code>List</code> に切り替えたいと考えるかもしれません。</p><p>インデックスサポートに対するユーザーの要求に応えるために、型を <code>List</code> に狭めたいと考えるかもしれません。 逆に、扱っているデータに自然な順序がないことに気づいたため、型を <code>Collection</code> に広げたいと考えるかもしれません。</p><p>戻り値の型を広げると互換性が損なわれる理由は簡単に理解できます。例えば、<code>List</code> から <code>Collection</code> への変換は、インデックスを使用するすべてのコードを破壊します。</p><p>戻り値の型を狭めること、例えば <code>Collection</code> から <code>List</code> へと変更すれば互換性が維持されると考えるかもしれません。 残念ながら、ソース互換性は維持されますが、バイナリ互換性は損なわれます。</p><p><code>Library.kt</code> ファイルにデモ関数があるとします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span></code></pre></div><p>そして、<code>Client.kt</code> にその関数のクライアントがあるとします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>demo</code> の戻り値の型を変更し、<code>Library.kt</code> だけを再コンパイルするシナリオを想像してみましょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span></code></pre></div><p>クライアントを再実行すると、以下のエラーが発生します (JVM上)。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: &#39;java.lang.Number Library.demo()&#39;</span></span>
<span class="line"><span>        at ClientKt.main(call.kt:2)</span></span>
<span class="line"><span>        at ClientKt.main(call.kt)</span></span>
<span class="line"><span>        …</span></span></code></pre></div><p>これは、<code>main</code> メソッドから生成されたバイトコード内の以下の命令が原因で発生します。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>0: invokestatic  #12 // Method Library.demo:()Ljava/lang/Number;</span></span></code></pre></div><p>JVMは <code>Number</code> を返す <code>demo</code> と呼ばれる静的メソッドを呼び出そうとしています。 しかし、このメソッドはもはや存在しないため、バイナリ互換性が損なわれています。</p><h2 id="apiでのデータクラスの使用を避ける" tabindex="-1">APIでのデータクラスの使用を避ける <a class="header-anchor" href="#apiでのデータクラスの使用を避ける" aria-label="Permalink to &quot;APIでのデータクラスの使用を避ける&quot;">​</a></h2><p>通常開発では、データクラスの強みは自動生成される追加関数です。 API設計においては、この強みが弱点となります。</p><p>例えば、APIで次のデータクラスを使用するとします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>後で、<code>active</code> と呼ばれるプロパティを追加したいと考えるかもしれません。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> active: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>これは2つの方法でバイナリ互換性を損ないます。まず、生成されるコンストラクタのシグネチャが異なります。 さらに、生成される <code>copy</code> メソッドのシグネチャも変更されます。</p><p>元のシグネチャ (Kotlin/JVM上) は次のようになります。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public final User copy(java.lang.String, java.lang.String)</span></span></code></pre></div><p><code>active</code> プロパティを追加すると、シグネチャは次のようになります。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public final User copy(java.lang.String, java.lang.String, boolean)</span></span></code></pre></div><p>コンストラクタと同様に、これはバイナリ互換性を損ないます。</p><p>これらの問題を回避するには、セカンダリコンストラクタを手動で記述し、<code>copy</code> メソッドをオーバーライドすることで可能です。 しかし、これには手間がかかり、データクラスを使用する利便性が失われます。</p><p>データクラスのもう一つの問題は、コンストラクタ引数の順序を変更すると、分解に使用される生成された <code>componentX</code> メソッドに影響を与えることです。 バイナリ互換性を損なわないとしても、順序を変更すると確実に振る舞いの互換性が損なわれます。</p><h2 id="publishedapiアノテーション使用時の考慮事項" tabindex="-1">PublishedApiアノテーション使用時の考慮事項 <a class="header-anchor" href="#publishedapiアノテーション使用時の考慮事項" aria-label="Permalink to &quot;PublishedApiアノテーション使用時の考慮事項&quot;">​</a></h2><p>Kotlinでは、インライン関数をライブラリのAPIの一部にすることができます。これらの関数への呼び出しは、ユーザーが記述したクライアントコードにインライン化されます。 これにより互換性の問題が発生する可能性があるため、これらの関数は非パブリックAPI宣言を呼び出すことはできません。</p><p>インライン化されたパブリック関数からライブラリの内部APIを呼び出す必要がある場合は、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-published-api/" target="_blank" rel="noreferrer"><code>@PublishedApi</code></a> でアノテーションを付けることで可能です。 これにより、コンパイルされたクライアントコードに参照が含まれるため、内部宣言は事実上パブリックになります。 したがって、変更を加える際にはパブリック宣言と同じように扱う必要があります。これらの変更がバイナリ互換性に影響を与える可能性があるためです。</p><h2 id="apiを実用的に進化させる" tabindex="-1">APIを実用的に進化させる <a class="header-anchor" href="#apiを実用的に進化させる" aria-label="Permalink to &quot;APIを実用的に進化させる&quot;">​</a></h2><p>時間の経過とともに、既存の宣言を削除または変更することで、ライブラリのAPIに破壊的な変更を加える必要がある場合があります。 このセクションでは、そのようなケースを実用的に処理する方法について説明します。</p><p>ユーザーがライブラリの新しいバージョンにアップグレードする際、プロジェクトのソースコードにライブラリのAPIへの未解決の参照が残ってはいけません。 ライブラリのパブリックAPIから何かをすぐに削除するのではなく、非推奨サイクルに従うべきです。 こうすることで、ユーザーに代替APIへの移行時間を与えることができます。</p><p>古い宣言に <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-deprecated/" target="_blank" rel="noreferrer"><code>@Deprecated</code></a> アノテーションを使用し、それが置き換えられることを示します。このアノテーションのパラメータは、非推奨に関する重要な詳細を提供します。</p><ul><li><code>message</code> は、何が変更され、なぜ変更されるのかを説明する必要があります。</li><li><code>replaceWith</code> パラメータは、可能な限り新しいAPIへの自動移行を提供するために使用すべきです。</li><li>非推奨のレベルは、APIを段階的に非推奨にするために使用すべきです。詳細については、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-deprecated/" target="_blank" rel="noreferrer">KotlinドキュメントのDeprecatedページ</a>を参照してください。</li></ul><p>一般的に、非推奨化はまず警告を生成し、次にエラーを生成し、その後宣言を隠すべきです。 このプロセスは、いくつかのマイナーリリースにわたって行われ、ユーザーがプロジェクトに必要な変更を行う時間を与えるべきです。 APIの削除などの破壊的な変更は、メジャーリリースでのみ行うべきです。 ライブラリは異なるバージョニングおよび非推奨化戦略を採用する場合がありますが、これは正しい期待を設定するためにユーザーに伝える必要があります。</p><p>詳細については、<a href="/ja/kotlin/kotlin-evolution-principles#libraries">Kotlin進化原則ドキュメント</a>またはKotlinConf 2023でのLeonid Startsevによる<a href="https://www.youtube.com/watch?v=cCgXtpVPO-o&amp;t=1468s" target="_blank" rel="noreferrer">クライアント向けにKotlin APIをスムーズに進化させる</a>という講演を参照してください。</p><h2 id="requiresoptinメカニズムを使用する" tabindex="-1">RequiresOptInメカニズムを使用する <a class="header-anchor" href="#requiresoptinメカニズムを使用する" aria-label="Permalink to &quot;RequiresOptInメカニズムを使用する&quot;">​</a></h2><p>Kotlin標準ライブラリは、APIの一部を使用する前にユーザーからの明示的な同意を要求する<a href="/ja/kotlin/opt-in-requirements">オプトインメカニズム</a>を提供しています。 これは、それ自体が <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-requires-opt-in/" target="_blank" rel="noreferrer"><code>@RequiresOptIn</code></a> でアノテーション付けされたマーカーアノテーションを作成することに基づいています。 特にライブラリに新しいAPIを導入する際には、ソース互換性および振る舞いの互換性に関する期待を管理するために、このメカニズムを使用すべきです。</p><p>このメカニズムを使用することを選択した場合、次のベストプラクティスに従うことをお勧めします。</p><ul><li>オプトインメカニズムを使用して、APIの異なる部分に異なる保証を提供します。例えば、機能を <em>プレビュー</em>、 <em>実験的</em>、 <em>デリケート</em> とマークすることができます。各カテゴリは、ドキュメントおよび<a href="/ja/kotlin/kotlin-doc">KDocコメント</a>で明確に説明し、適切な警告メッセージを含める必要があります。</li><li>ライブラリが実験的なAPIを使用している場合、<a href="/ja/kotlin/opt-in-requirements#propagate-opt-in-requirements">アノテーションを伝播</a>して、ユーザーが依存関係がまだ進化中であることを認識できるようにします。これにより、ユーザーは、あなたがまだ進化中の依存関係を持っていることを認識できます。</li><li>オプトインメカニズムを、ライブラリ内の既存の宣言を非推奨にするために使用することは避けてください。代わりに、<a href="#evolve-apis-pragmatically">APIを実用的に進化させる</a>セクションで説明されているように、<code>@Deprecated</code> を使用してください。</li></ul><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>まだの場合は、以下のページも確認してみてください。</p><ul><li><a href="/ja/kotlin/api-guidelines-minimizing-mental-complexity">精神的複雑さを最小限に抑える</a>ページで、精神的複雑さを最小限に抑える戦略を探ります。</li><li>効果的なドキュメンテーションの実践に関する詳細な概要については、<a href="/ja/kotlin/api-guidelines-informative-documentation">有益なドキュメンテーション</a>を参照してください。</li></ul>`,54))])}const F=e(d,[["render",r]]);export{u as __pageData,F as default};
