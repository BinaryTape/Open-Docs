import{_ as o,a as r,d as h,e as d,b as k,c}from"./chunks/ios-new-configuration.DNF7jnri.js";import{_ as g}from"./chunks/icon-3-todo.aEuKIG4W.js";import{_ as m}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as u}from"./chunks/icon-5-todo.DJgVODZv.js";import{_ as E,a as y,b as F,c as f,d as b,e as A}from"./chunks/first-multiplatform-project-on-ios-1.Baa1gGHA.js";import{_ as v,C as e,c as C,o as D,j as i,G as l,ag as t,a,w as _}from"./chunks/framework.Bksy39di.js";const V=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/multiplatform-create-first-app.md","filePath":"zh-Hant/kmp/multiplatform-create-first-app.md","lastUpdated":1755516278000}'),P={name:"zh-Hant/kmp/multiplatform-create-first-app.md"};function I(S,s,x,B,M,K){const n=e("secondary-label"),p=e("tldr");return D(),C("div",null,[s[1]||(s[1]=i("h1",{id:"建立您的-kotlin-multiplatform-應用程式",tabindex:"-1"},[a("建立您的 Kotlin Multiplatform 應用程式 "),i("a",{class:"header-anchor",href:"#建立您的-kotlin-multiplatform-應用程式","aria-label":'Permalink to "建立您的 Kotlin Multiplatform 應用程式"'},"​")],-1)),l(n,{ref:"IntelliJ IDEA"},null,512),l(n,{ref:"Android Studio"},null,512),l(p,null,{default:_(()=>s[0]||(s[0]=[i("p",null,"本教學使用 IntelliJ IDEA，但您也可以在 Android Studio 中遵循它 – 這兩個 IDE 共享相同的核心功能和 Kotlin Multiplatform 支援。",-1),i("br",null,null,-1),i("p",null,[a("這是「"),i("strong",null,"使用共享邏輯和原生 UI 建立 Kotlin Multiplatform 應用程式"),a("」教學的第一部分。")],-1),i("p",null,[i("img",{src:o,width:"20",alt:"First step"}),a(),i("strong",null,"建立您的 Kotlin Multiplatform 應用程式"),i("br"),i("img",{src:r,width:"20",alt:"Second step"}),a(" 更新使用者介面"),i("br"),i("img",{src:g,width:"20",alt:"Third step"}),a(" 新增依賴項"),i("br"),i("br"),i("img",{src:m,width:"20",alt:"Fourth step"}),a(" 共享更多邏輯"),i("br"),i("img",{src:u,width:"20",alt:"Fifth step"}),a(" 完成您的專案"),i("br")],-1)])),_:1}),s[2]||(s[2]=t('<p>在這裡，您將學習如何使用 IntelliJ IDEA 建立並執行您的第一個 Kotlin Multiplatform 應用程式。</p><p>Kotlin Multiplatform 技術簡化了跨平台專案的開發。 Kotlin Multiplatform 應用程式可以在各種平台上運作，例如 iOS、Android、macOS、Windows、Linux、Web 等。</p><p>其中一個主要的 Kotlin Multiplatform 使用案例是在行動平台之間共享程式碼。 您可以在 iOS 和 Android 應用程式之間共享應用程式邏輯，並且僅在需要實作原生 UI 或使用平台 API 時才編寫平台特定程式碼。</p><h2 id="建立專案" tabindex="-1">建立專案 <a class="header-anchor" href="#建立專案" aria-label="Permalink to &quot;建立專案&quot;">​</a></h2><ol><li><p>在 <a href="./quickstart">快速入門</a> 中，完成 <a href="./quickstart#set-up-the-environment">設定 Kotlin Multiplatform 開發環境</a> 的指示。</p></li><li><p>在 IntelliJ IDEA 中，選擇 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>。</p></li><li><p>在左側面板中，選擇 <strong>Kotlin Multiplatform</strong>。</p></li><li><p>在 <strong>New Project</strong> 視窗中指定以下欄位：</p><ul><li><strong>Name</strong>：GreetingKMP</li><li><strong>Group</strong>：com.jetbrains.greeting</li><li><strong>Artifact</strong>：greetingkmp</li></ul><p><img src="'+E+'" alt="建立 Compose Multiplatform 專案" width="800"></p></li><li><p>選擇 <strong>Android</strong> 和 <strong>iOS</strong> 目標。</p></li><li><p>針對 iOS，選擇 <strong>Do not share UI</strong> 選項以保持 UI 原生。</p></li><li><p>指定所有欄位和目標後，點擊 <strong>Create</strong>。</p></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>IntelliJ IDEA 可能會自動建議將專案中的 Android Gradle plugin 升級到最新版本。 我們不建議升級，因為 Kotlin Multiplatform 與最新的 AGP 版本不相容 (請參閱 <a href="https://kotlinlang.org/docs/multiplatform-compatibility-guide.html#version-compatibility" target="_blank" rel="noreferrer">相容性表格</a>)。</p></div><h2 id="檢查專案結構" tabindex="-1">檢查專案結構 <a class="header-anchor" href="#檢查專案結構" aria-label="Permalink to &quot;檢查專案結構&quot;">​</a></h2><p>在 IntelliJ IDEA 中，展開 <code>GreetingKMP</code> 資料夾。</p><p>這個 Kotlin Multiplatform 專案包含三個模組：</p><ul><li><em>shared</em> 是一個 Kotlin 模組，包含 Android 和 iOS 應用程式共用的邏輯 – 您在平台之間共享的程式碼。它使用 <a href="https://kotlinlang.org/docs/gradle.html" target="_blank" rel="noreferrer">Gradle</a> 作為建置系統，以幫助自動化您的建置流程。</li><li><em>composeApp</em> 是一個 Kotlin 模組，建置為 Android 應用程式。它使用 Gradle 作為建置系統。composeApp 模組依賴並使用共享模組作為常規 Android 函式庫。</li><li><em>iosApp</em> 是一個 Xcode 專案，建置為 iOS 應用程式。它依賴並使用共享模組作為 iOS framework。共享模組可以作為常規 framework 或 <a href="./multiplatform-cocoapods-overview">CocoaPods 依賴項</a> 使用。預設情況下，在 IntelliJ IDEA 中建立的 Kotlin Multiplatform 專案使用常規 framework 依賴項。</li></ul><p><img src="'+y+'" alt="基本 Multiplatform 專案結構" width="700"></p><p>共享模組由三個原始碼集組成：<code>androidMain</code>、<code>commonMain</code> 和 <code>iosMain</code>。<em>原始碼集</em> 是一個 Gradle 概念，用於將多個檔案邏輯分組，其中每個組都有自己的依賴項。在 Kotlin Multiplatform 中，共享模組中的不同原始碼集可以針對不同的平台。</p><p>共用原始碼集包含共享的 Kotlin 程式碼，而平台原始碼集使用針對每個目標的 Kotlin 程式碼。<code>androidMain</code> 使用 Kotlin/JVM，<code>iosMain</code> 使用 Kotlin/Native：</p><p><img src="'+F+'" alt="原始碼集和模組結構" width="350"></p><p>當共享模組建置為 Android 函式庫時，共用 Kotlin 程式碼被視為 Kotlin/JVM。 當它建置為 iOS framework 時，共用 Kotlin 被視為 Kotlin/Native：</p><p><img src="'+f+`" alt="共用 Kotlin、Kotlin/JVM 和 Kotlin/Native"></p><h3 id="編寫共用宣告" tabindex="-1">編寫共用宣告 <a class="header-anchor" href="#編寫共用宣告" aria-label="Permalink to &quot;編寫共用宣告&quot;">​</a></h3><p>共用原始碼集包含可在多個目標平台之間使用的共享程式碼。它旨在包含平台獨立的程式碼。如果您嘗試在共用原始碼集中使用平台特定的 API，IDE 將會顯示警告：</p><ol><li><p>開啟 <code>shared/src/commonMain/kotlin/com/jetbrains/greeting/greetingkmp/Greeting.kt</code> 檔案， 您可以在其中找到自動產生的 <code>Greeting</code> 類別和 <code>greet()</code> 函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, \${platform.name}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>為問候語增加一些變化。從 Kotlin 標準函式庫導入 <code>kotlin.random.Random</code>。這是一個可在所有平台運作的 Multiplatform 函式庫，並會自動作為依賴項包含在內。</p></li><li><p>使用 Kotlin 標準函式庫中的 <code>reversed()</code> 呼叫更新共享程式碼以反轉文字：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.random.Random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platform: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstWord </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hi!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$firstWord</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Guess what this is! &gt; \${platform.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reversed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>僅在共用 Kotlin 中編寫程式碼有明顯的限制，因為它無法使用任何平台特定的功能。使用介面和 <a href="./multiplatform-connect-to-apis">expect/actual</a> 機制可解決此問題。</p><h3 id="查看平台特定實作" tabindex="-1">查看平台特定實作 <a class="header-anchor" href="#查看平台特定實作" aria-label="Permalink to &quot;查看平台特定實作&quot;">​</a></h3><p>共用原始碼集可以定義 expect 宣告 (介面、類別等)。然後，每個平台原始碼集（在本例中為 <code>androidMain</code> 和 <code>iosMain</code>）必須為 expect 宣告提供實際的平台特定實作。</p><p>在為特定平台產生程式碼時，Kotlin 編譯器會合併 expect 和 actual 宣告，並產生帶有實際實作的單一宣告。</p><ol><li><p>當使用 IntelliJ IDEA 建立 Kotlin Multiplatform 專案時， 您會在 <code>commonMain</code> 模組中獲得一個包含 <code>Platform.kt</code> 檔案的範本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>這是一個共用的 <code>Platform</code> 介面，包含有關平台資訊。</p></li><li><p>在 <code>androidMain</code> 和 <code>iosMain</code> 模組之間切換。 您會看到它們在 Android 和 iOS 原始碼集中針對相同功能有不同的實作：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.android.kt in the androidMain module:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android.os.Build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Android \${Build.VERSION.SDK_INT}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.ios.kt in the iosMain module:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.UIKit.UIDevice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        UIDevice.currentDevice.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.systemVersion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>AndroidPlatform</code> 中的 <code>name</code> 屬性實作使用 Android 特定程式碼，即 <code>android.os.Build</code> 依賴項。此程式碼以 Kotlin/JVM 編寫。如果您嘗試在此處存取 JVM 特定類別，例如 <code>java.util.Random</code>，此程式碼將會編譯。</li><li><code>IOSPlatform</code> 中的 <code>name</code> 屬性實作使用 iOS 特定程式碼，即 <code>platform.UIKit.UIDevice</code> 依賴項。它以 Kotlin/Native 編寫，這表示您可以用 Kotlin 編寫 iOS 程式碼。此程式碼成為 iOS framework 的一部分，您稍後將在 iOS 應用程式中從 Swift 呼叫它。</li></ul></li><li><p>檢查不同原始碼集中的 <code>getPlatform()</code> 函式。其 expect 宣告沒有主體， 並且實際實作在平台程式碼中提供：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.kt in the commonMain source set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.android.kt in the androidMain source set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.ios.kt in the iosMain source set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ol><p>在這裡，共用原始碼集定義了一個 expect <code>getPlatform()</code> 函式，並在平台原始碼集中具有實際的實作：適用於 Android 應用程式的 <code>AndroidPlatform()</code> 和適用於 iOS 應用程式的 <code>IOSPlatform()</code>。</p><p>在為特定平台產生程式碼時，Kotlin 編譯器會將 expect 和 actual 宣告合併為一個帶有實際實作的 <code>getPlatform()</code> 函式。</p><p>這就是為什麼 expect 和 actual 宣告應該定義在同一個套件中 – 它們會合併到結果平台程式碼中的一個宣告。對所產生平台程式碼中 expect <code>getPlatform()</code> 函式的任何呼叫都會呼叫正確的實際實作。</p><p>現在您可以執行應用程式並查看所有這些實際運作。</p>`,28)),s[3]||(s[3]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"探索-expect-actual-機制-選用",tabindex:"-1"},[a("探索 expect/actual 機制 (選用) "),i("a",{class:"header-anchor",href:"#探索-expect-actual-機制-選用","aria-label":'Permalink to "探索 expect/actual 機制 (選用) {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[4]||(s[4]=t(`<p>範本專案使用 expect/actual 機制來處理函式，但它也適用於大多數 Kotlin 宣告，例如屬性和類別。讓我們實作一個 expect 屬性：</p><ol><li><p>開啟 <code>commonMain</code> 模組中的 <code>Platform.kt</code>，並在檔案末尾添加以下內容：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span></code></pre></div><p>Kotlin 編譯器抱怨此屬性在平台模組中沒有對應的 actual 宣告。</p></li><li><p>嘗試立即提供實作：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span></code></pre></div><p>您會收到錯誤訊息，指出 expect 宣告不能有主體，在本例中是初始化器。實作必須在實際的平台模組中提供。移除初始化器。</p></li><li><p>將滑鼠懸停在 <code>num</code> 屬性上，然後點擊 <strong>Create missed actuals...</strong>。 選擇 <code>androidMain</code> 原始碼集。然後您可以在 <code>androidMain/Platform.android.kt</code> 中完成實作：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div></li><li><p>現在為 <code>iosMain</code> 模組提供實作。將以下內容添加到 <code>iosMain/Platform.ios.kt</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div></li><li><p>在 <code>commonMain/Greeting.kt</code> 檔案中，將 <code>num</code> 屬性添加到 <code>greet()</code> 函式中以查看差異：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstWord </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hi!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$firstWord</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$num</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">] Guess what this is! &gt; \${platform.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reversed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="執行您的應用程式" tabindex="-1">執行您的應用程式 <a class="header-anchor" href="#執行您的應用程式" aria-label="Permalink to &quot;執行您的應用程式&quot;">​</a></h2><p>您可以從 IntelliJ IDEA 執行您的 Multiplatform 應用程式，適用於 <a href="#run-your-application-on-android">Android</a> 或 <a href="#run-your-application-on-ios">iOS</a>。</p><p>如果您之前已經探索過 expect/actual 機制，您會看到 Android 的問候語中添加了「[1]」，iOS 中添加了「[2]」。</p><h3 id="在-android-上執行您的應用程式" tabindex="-1">在 Android 上執行您的應用程式 <a class="header-anchor" href="#在-android-上執行您的應用程式" aria-label="Permalink to &quot;在 Android 上執行您的應用程式&quot;">​</a></h3><ol><li><p>在執行設定列表中，選擇 <strong>composeApp</strong>。</p></li><li><p>在設定列表旁邊選擇一個 Android 虛擬裝置，然後點擊 <strong>Run</strong>。</p><p>如果列表中沒有裝置，請建立一個 <a href="https://developer.android.com/studio/run/managing-avds#createavd" target="_blank" rel="noreferrer">新的 Android 虛擬裝置</a>。</p><p><img src="`+h+'" alt="在 Android 上執行 Multiplatform 應用程式" width="350"></p><p><img src="'+b+'" alt="第一個行動 Multiplatform 應用程式在 Android 上" width="300"></p></li></ol>',7)),s[5]||(s[5]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"在不同的-android-模擬裝置上執行",tabindex:"-1"},[a("在不同的 Android 模擬裝置上執行 "),i("a",{class:"header-anchor",href:"#在不同的-android-模擬裝置上執行","aria-label":'Permalink to "在不同的 Android 模擬裝置上執行 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[6]||(s[6]=i("p",null,[a("了解如何 "),i("a",{href:"https://developer.android.com/studio/run/emulator#runningapp",target:"_blank",rel:"noreferrer"},"設定 Android 模擬器並在不同的模擬裝置上執行您的應用程式"),a("。")],-1)),s[7]||(s[7]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"在真實-android-裝置上執行",tabindex:"-1"},[a("在真實 Android 裝置上執行 "),i("a",{class:"header-anchor",href:"#在真實-android-裝置上執行","aria-label":'Permalink to "在真實 Android 裝置上執行 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[8]||(s[8]=t('<p>了解如何 <a href="https://developer.android.com/studio/run/device" target="_blank" rel="noreferrer">設定和連接硬體裝置並在其上執行您的應用程式</a>。</p><h3 id="在-ios-上執行您的應用程式" tabindex="-1">在 iOS 上執行您的應用程式 <a class="header-anchor" href="#在-ios-上執行您的應用程式" aria-label="Permalink to &quot;在 iOS 上執行您的應用程式&quot;">​</a></h3><p>如果您尚未啟動 Xcode 作為初始設定的一部分，請在執行 iOS 應用程式之前執行此操作。</p><p>在 IntelliJ IDEA 中，在執行設定列表中選擇 <strong>iosApp</strong>，在執行設定旁邊選擇一個模擬裝置，然後點擊 <strong>Run</strong>。</p><p>如果列表中沒有可用的 iOS 設定，請新增一個 <a href="#run-on-a-new-ios-simulated-device">新的執行設定</a>。</p><p><img src="'+d+'" alt="在 iOS 上執行 Multiplatform 應用程式" width="350"></p><p><img src="'+A+'" alt="第一個行動 Multiplatform 應用程式在 iOS 上" width="300"></p>',7)),s[9]||(s[9]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"在新的-ios-模擬裝置上執行",tabindex:"-1"},[a("在新的 iOS 模擬裝置上執行 "),i("a",{class:"header-anchor",href:"#在新的-ios-模擬裝置上執行","aria-label":'Permalink to "在新的 iOS 模擬裝置上執行 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[10]||(s[10]=t('<p>如果您想在模擬裝置上執行您的應用程式，可以新增一個新的執行設定。</p><ol><li><p>在執行設定列表中，點擊 <strong>Edit Configurations</strong>。</p><p><img src="'+k+'" alt="編輯執行設定" width="450"></p></li><li><p>點擊設定列表上方的 <strong>+</strong> 按鈕，然後選擇 <strong>Xcode Application</strong>。</p><p><img src="'+c+'" alt="iOS 應用程式的新執行設定"></p></li><li><p>為您的設定命名。</p></li><li><p>選擇 <strong>Working directory</strong>。為此，請導覽至您的專案，例如 <strong>KotlinMultiplatformSandbox</strong>，在 <code>iosApp</code> 資料夾中。</p></li><li><p>點擊 <strong>Run</strong> 以在新模擬裝置上執行您的應用程式。</p></li></ol>',2)),s[11]||(s[11]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"在真實-ios-裝置上執行",tabindex:"-1"},[a("在真實 iOS 裝置上執行 "),i("a",{class:"header-anchor",href:"#在真實-ios-裝置上執行","aria-label":'Permalink to "在真實 iOS 裝置上執行 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[12]||(s[12]=t(`<p>您可以在真實 iOS 裝置上執行您的 Multiplatform 應用程式。開始之前， 您需要設定與您的 <a href="https://support.apple.com/en-us/HT204316" target="_blank" rel="noreferrer">Apple ID</a> 關聯的團隊 ID (Team ID)。</p><h5 id="設定您的團隊-id" tabindex="-1">設定您的團隊 ID <a class="header-anchor" href="#設定您的團隊-id" aria-label="Permalink to &quot;設定您的團隊 ID&quot;">​</a></h5><p>若要在專案中設定團隊 ID，您可以在 IntelliJ IDEA 中使用 KDoctor 工具，或在 Xcode 中選擇您的團隊。</p><p>針對 KDoctor：</p><ol><li><p>在 IntelliJ IDEA 中，在終端機中執行以下命令：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kdoctor --team-ids</span></span></code></pre></div><p>KDoctor 將列出您系統上目前設定的所有團隊 ID，例如：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>3ABC246XYZ (Max Sample)</span></span>
<span class="line"><span>ZABCW6SXYZ (SampleTech Inc.)</span></span></code></pre></div></li><li><p>在 IntelliJ IDEA 中，開啟 <code>iosApp/Configuration/Config.xcconfig</code> 並指定您的團隊 ID。</p></li></ol><p>或者，在 Xcode 中選擇團隊：</p><ol><li><p>前往 Xcode 並選擇 <strong>Open a project or file</strong>。</p></li><li><p>導覽至您專案的 <code>iosApp/iosApp.xcworkspace</code> 檔案。</p></li><li><p>在左側選單中，選擇 <code>iosApp</code>。</p></li><li><p>導覽至 <strong>Signing &amp; Capabilities</strong>。</p></li><li><p>在 <strong>Team</strong> 列表中，選擇您的團隊。</p><p>如果您尚未設定您的團隊，請在 <strong>Team</strong> 列表中使用 <strong>Add an Account</strong> 選項並遵循 Xcode 指示。</p></li><li><p>確保組合識別碼 (Bundle Identifier) 是唯一的，並且簽署憑證 (Signing Certificate) 已成功指派。</p></li></ol><h5 id="執行應用程式" tabindex="-1">執行應用程式 <a class="header-anchor" href="#執行應用程式" aria-label="Permalink to &quot;執行應用程式&quot;">​</a></h5><p>使用傳輸線連接您的 iPhone。如果您已經在 Xcode 中註冊了該裝置，IntelliJ IDEA 應該會將其顯示在執行設定列表中。執行對應的 <code>iosApp</code> 設定。</p><p>如果您尚未在 Xcode 中註冊您的 iPhone，請遵循 <a href="https://developer.apple.com/documentation/xcode/running-your-app-in-simulator-or-on-a-device/" target="_blank" rel="noreferrer">Apple 建議</a>。 簡而言之，您應該：</p><ol><li>使用傳輸線連接您的 iPhone。</li><li>在您的 iPhone 上，在 <strong>Settings</strong> | <strong>Privacy &amp; Security</strong> 中啟用開發者模式。</li><li>在 Xcode 中，前往頂部選單並選擇 <strong>Window</strong> | <strong>Devices and Simulators</strong>。</li><li>點擊加號。選擇您連接的 iPhone 並點擊 <strong>Add</strong>。</li><li>使用您的 Apple ID 登入以啟用裝置上的開發功能。</li><li>遵循螢幕上的指示完成配對流程。</li></ol><p>在 Xcode 中註冊您的 iPhone 後，在 IntelliJ IDEA 中 <a href="#run-on-a-new-ios-simulated-device">建立新的執行設定</a> 並在 <strong>Execution target</strong> 列表中選擇您的裝置。執行對應的 <code>iosApp</code> 設定。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在教學的下一部分，您將學習如何使用平台特定函式庫更新 UI 元素。</p><p><strong><a href="./multiplatform-update-ui">繼續到下一部分</a></strong></p><h3 id="另請參閱" tabindex="-1">另請參閱 <a class="header-anchor" href="#另請參閱" aria-label="Permalink to &quot;另請參閱&quot;">​</a></h3><ul><li>了解如何 <a href="./multiplatform-run-tests">建立和執行 Multiplatform 測試</a> 以檢查程式碼是否正確運作。</li><li>了解更多關於 <a href="./multiplatform-discover-project">專案結構</a> 的資訊。</li><li>如果您想將現有的 Android 專案轉換為跨平台應用程式，請 <a href="./multiplatform-integrate-in-existing-app">完成本教學以使您的 Android 應用程式跨平台</a>。</li></ul><h2 id="取得協助" tabindex="-1">取得協助 <a class="header-anchor" href="#取得協助" aria-label="Permalink to &quot;取得協助&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>。取得 <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">邀請</a> 並加入 <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 頻道。</li><li><strong>Kotlin 問題追蹤器</strong>。<a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">報告新問題</a>。</li></ul>`,19))])}const G=v(P,[["render",I]]);export{V as __pageData,G as default};
