import{_ as e,c as t,o,ag as l}from"./chunks/framework.Bksy39di.js";const s=JSON.parse('{"title":"なぜKSPなのか","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/ksp-why-ksp.md","filePath":"ja/kotlin/ksp-why-ksp.md","lastUpdated":1754307826000}'),i={name:"ja/kotlin/ksp-why-ksp.md"};function r(p,a,n,c,d,k){return o(),t("div",null,a[0]||(a[0]=[l('<h1 id="なぜkspなのか" tabindex="-1">なぜKSPなのか <a class="header-anchor" href="#なぜkspなのか" aria-label="Permalink to &quot;なぜKSPなのか&quot;">​</a></h1><p>コンパイラープラグインは、コードの記述方法を大幅に強化できる強力なメタプログラミングツールです。 コンパイラープラグインは、コンパイラーをライブラリとして直接呼び出し、入力プログラムを分析・編集します。これらのプラグインは、 さまざまな用途で出力を生成することもできます。例えば、ボイラープレートコードを生成したり、 <code>Parcelable</code> のような特別なマークが付けられたプログラム要素の完全な実装を生成したりすることも可能です。プラグインには他にも様々な用途があり、 言語に直接提供されていない機能を実装したり、微調整したりするためにも使用できます。</p><p>コンパイラープラグインは強力ですが、その力には代償が伴います。最もシンプルなプラグインを作成するだけでも、 コンパイラーに関するある程度の予備知識と、使用する特定のコンパイラーの実装詳細に対するある程度の熟知が必要です。 もう一つの実用的な問題は、プラグインが特定のコンパイラーバージョンと密接に結びついていることが多い点です。 つまり、新しいバージョンのコンパイラーをサポートしたい場合、その度にプラグインを更新する必要があるかもしれません。</p><h2 id="kspが軽量なコンパイラープラグインの作成を容易にする" tabindex="-1">KSPが軽量なコンパイラープラグインの作成を容易にする <a class="header-anchor" href="#kspが軽量なコンパイラープラグインの作成を容易にする" aria-label="Permalink to &quot;KSPが軽量なコンパイラープラグインの作成を容易にする&quot;">​</a></h2><p>KSPは、コンパイラーの変更を隠蔽し、それを使用するプロセッサーのメンテナンス作業を最小限に抑えるように設計されています。 KSPはJVMに縛られないように設計されており、将来的に他のプラットフォームにも容易に適応できるようになっています。 KSPはビルド時間の最小化も考慮して設計されています。 <a href="https://github.com/bumptech/glide" target="_blank" rel="noreferrer">Glide</a> のような一部のプロセッサーでは、KSPはkaptと比較してフルコンパイル時間を最大25%削減します。</p><p>KSP自体もコンパイラープラグインとして実装されています。GoogleのMavenリポジトリには、 プロジェクトを自分でビルドすることなくダウンロードして使用できるプリビルドパッケージが提供されています。</p><h2 id="kotlincコンパイラープラグインとの比較" tabindex="-1">kotlincコンパイラープラグインとの比較 <a class="header-anchor" href="#kotlincコンパイラープラグインとの比較" aria-label="Permalink to &quot;kotlincコンパイラープラグインとの比較&quot;">​</a></h2><p><code>kotlinc</code> コンパイラープラグインは、コンパイラーからのほぼすべてにアクセスできるため、最大限の機能と柔軟性を持っています。 その一方で、これらのプラグインはコンパイラー内のあらゆるものに依存する可能性があるため、 コンパイラーの変更に敏感で、頻繁なメンテナンスが必要です。 また、これらのプラグインは <code>kotlinc</code> の実装について深い理解を必要とするため、学習曲線が急になることがあります。</p><p>KSPは、明確に定義されたAPIを通じてほとんどのコンパイラー変更を隠蔽することを目指していますが、 コンパイラーやKotlin言語自体の大きな変更は、API利用者への公開が必要になる場合があります。</p><p>KSPは、機能と引き換えにシンプルさを提供するAPIにより、一般的なユースケースに対応しようとします。 その機能は、一般的な <code>kotlinc</code> プラグインの厳密なサブセットです。 例えば、<code>kotlinc</code> は式やステートメントを検査したり、コードを修正したりすることができますが、KSPはできません。</p><p><code>kotlinc</code> プラグインを書くのは非常に楽しいことですが、多くの時間がかかることもあります。 <code>kotlinc</code> の実装を学ぶ立場になく、ソースコードの変更や式の読み取りが必要ない場合、KSPは良い選択肢となるかもしれません。</p><h2 id="リフレクションとの比較" tabindex="-1">リフレクションとの比較 <a class="header-anchor" href="#リフレクションとの比較" aria-label="Permalink to &quot;リフレクションとの比較&quot;">​</a></h2><p>KSPのAPIは <code>kotlin.reflect</code> に似ています。それらの主な違いは、KSPにおける型参照が明示的に解決される必要がある点です。 これが、インターフェースが共有されていない理由の一つです。</p><h2 id="kaptとの比較" tabindex="-1">kaptとの比較 <a class="header-anchor" href="#kaptとの比較" aria-label="Permalink to &quot;kaptとの比較&quot;">​</a></h2><p><a href="/ja/kotlin/kapt">kapt</a> は、大量のJavaアノテーションプロセッサーをKotlinプログラムでそのまま動作させる、注目に値するソリューションです。 KSPがkaptに対して持つ主な利点は、ビルドパフォーマンスの向上、JVMに縛られないこと、よりKotlinらしいAPI、そしてKotlin専用のシンボルを理解する能力です。</p><p>Javaアノテーションプロセッサーを修正せずに実行するために、kaptはKotlinコードを、 Javaアノテーションプロセッサーが関心を持つ情報を保持するJavaスタブにコンパイルします。 これらのスタブを作成するには、kaptはKotlinプログラム内のすべてのシンボルを解決する必要があります。 スタブ生成は、完全な <code>kotlinc</code> 解析のおよそ1/3のコストと、<code>kotlinc</code> コード生成と同程度のコストがかかります。 多くのJavaアノテーションプロセッサーにとって、これはプロセッサー自体が費やす時間よりもはるかに長いです。 例えば、Glideは定義済みのアノテーションを持つごく限られた数のクラスを調べ、そのコード生成はかなり迅速です。 ビルドオーバーヘッドのほとんどすべてがスタブ生成フェーズに存在します。 KSPに切り替えることで、コンパイラーが費やす時間を直ちに25%削減できます。</p><p>パフォーマンス評価のため、<a href="https://github.com/tachiyomiorg" target="_blank" rel="noreferrer">Tachiyomi</a> プロジェクト用のコードを生成するために、 KSPで<a href="https://github.com/bumptech/glide" target="_blank" rel="noreferrer">Glide</a>の<a href="https://github.com/google/ksp/releases/download/1.4.10-dev-experimental-20200924/miniGlide.zip" target="_blank" rel="noreferrer">簡略版</a>を実装しました。 テストデバイスでのプロジェクトのKotlin総コンパイル時間は21.55秒でしたが、 kaptがコードを生成するのに8.67秒かかり、我々のKSP実装がコードを生成するのには1.15秒しかかかりませんでした。</p><p>kaptとは異なり、KSPのプロセッサーは入力プログラムをJavaの視点からは見ません。 APIはKotlinにとってより自然であり、特にトップレベル関数のようなKotlin固有の機能に当てはまります。 KSPはkaptのように <code>javac</code> に委譲しないため、JVM固有の動作を前提とせず、将来的には他のプラットフォームでも使用できる可能性があります。</p><h2 id="制限事項" tabindex="-1">制限事項 <a class="header-anchor" href="#制限事項" aria-label="Permalink to &quot;制限事項&quot;">​</a></h2><p>KSPはほとんどの一般的なユースケースに対するシンプルなソリューションを目指していますが、 他のプラグインソリューションと比較していくつかのトレードオフを行っています。 以下はKSPの目標ではありません。</p><ul><li>ソースコードの式レベルの情報を検査すること。</li><li>ソースコードを修正すること。</li><li>Javaアノテーション処理APIとの100%互換性。</li></ul>',21)]))}const P=e(i,[["render",r]]);export{s as __pageData,P as default};
