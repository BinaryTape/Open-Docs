import{_ as h,C as o,c,o as g,j as i,G as e,ag as p,a,w as t}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/client-multiplatform.md","filePath":"zh-Hant/ktor/client-multiplatform.md","lastUpdated":1755457140000}'),m={name:"zh-Hant/ktor/client-multiplatform.md"};function u(y,n,E,_,f,v){const d=o("tldr"),k=o("link-summary"),s=o("code-block"),l=o("TabItem"),r=o("Tabs");return g(),c("div",null,[n[6]||(n[6]=i("h1",{id:"多平台",tabindex:"-1"},[a("多平台 "),i("a",{class:"header-anchor",href:"#多平台","aria-label":'Permalink to "多平台"'},"​")],-1)),e(d,null,{default:t(()=>n[0]||(n[0]=[i("p",null,[a(" 程式碼範例："),i("a",{href:"https://github.com/ktorio/ktor-samples/tree/main/client-mpp"},"client-mpp")],-1)])),_:1}),e(k,null,{default:t(()=>n[1]||(n[1]=[a(" Ktor 用戶端可用於多平台專案，並支援 Android、JavaScript 和 Native 平台。 ")])),_:1}),n[7]||(n[7]=p('<p><a href="./client-create-and-configure">Ktor HTTP 用戶端</a> 可用於 <a href="https://kotlinlang.org/docs/multiplatform.html" target="_blank" rel="noreferrer">多平台專案</a>，並支援以下平台：</p><ul><li>JVM</li><li><a href="https://kotlinlang.org/docs/android-overview.html" target="_blank" rel="noreferrer">Android</a></li><li><a href="https://kotlinlang.org/docs/js-overview.html" target="_blank" rel="noreferrer">JavaScript</a></li><li><a href="https://kotlinlang.org/docs/native-overview.html" target="_blank" rel="noreferrer">Native</a></li></ul><h2 id="add-dependencies" tabindex="-1">新增依賴項 <a class="header-anchor" href="#add-dependencies" aria-label="Permalink to &quot;新增依賴項 {id=&quot;add-dependencies&quot;}&quot;">​</a></h2><p>若要在專案中使用 Ktor HTTP 用戶端，您至少需要新增兩個依賴項：一個用戶端依賴項和一個 <a href="./client-engines">引擎</a> 依賴項。對於多平台專案，您需要依以下方式新增這些依賴項：</p>',4)),i("ol",null,[i("li",null,[n[2]||(n[2]=i("p",null,[a("若要在通用程式碼中使用 Ktor 用戶端，請將 "),i("code",null,"ktor-client-core"),a(" 依賴項新增至 "),i("code",null,"build.gradle"),a(" 或 "),i("code",null,"build.gradle.kts"),a(" 檔案中的 "),i("code",null,"commonMain"),a(" 原始碼集：")],-1)),e(r,{group:"languages"},{default:t(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[e(s,{lang:"Kotlin",code:`               val commonMain by getting {
                   dependencies {
                       implementation("io.ktor:ktor-client-core:$ktor_version")
                   }
               }`})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[e(s,{lang:"Groovy",code:`               commonMain {
                   dependencies {
                       implementation "io.ktor:ktor-client-core:$ktor_version"
                   }
               }`})]),_:1})]),_:1})]),i("li",null,[n[3]||(n[3]=i("p",null,[a("將所需平台的 "),i("a",{href:"./client-engines#dependencies"},"引擎依賴項"),a(" 新增至對應的原始碼集。對於 Android，您可以將 "),i("a",{href:"./client-engines#android"},"Android"),a(" 引擎依賴項新增至 "),i("code",null,"androidMain"),a(" 原始碼集：")],-1)),e(r,{group:"languages"},{default:t(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[e(s,{lang:"Kotlin",code:`               val androidMain by getting {
                   dependencies {
                       implementation("io.ktor:ktor-client-android:$ktor_version")
                   }
               }`})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[e(s,{lang:"Groovy",code:`               androidMain {
                   dependencies {
                       implementation "io.ktor:ktor-client-android:$ktor_version"
                   }
               }`})]),_:1})]),_:1}),n[4]||(n[4]=i("p",null,[a("對於 iOS，您需要將 "),i("a",{href:"./client-engines#darwin"},"Darwin"),a(" 引擎依賴項新增至 "),i("code",null,"iosMain"),a("：")],-1)),e(r,{group:"languages"},{default:t(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[e(s,{lang:"Kotlin",code:`               val iosMain by getting {
                   dependencies {
                       implementation("io.ktor:ktor-client-darwin:$ktor_version")
                   }
               }`})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[e(s,{lang:"Groovy",code:`               iosMain {
                   dependencies {
                       implementation "io.ktor:ktor-client-darwin:$ktor_version"
                   }
               }`})]),_:1})]),_:1}),n[5]||(n[5]=i("p",null,[a("若要了解每個平台支援哪些引擎，請參閱 "),i("a",{href:"./client-engines#dependencies"},"新增引擎依賴項"),a("。")],-1))])]),n[8]||(n[8]=p(`<h2 id="create-client" tabindex="-1">建立用戶端 <a class="header-anchor" href="#create-client" aria-label="Permalink to &quot;建立用戶端 {id=&quot;create-client&quot;}&quot;">​</a></h2><p>若要在多平台專案中建立用戶端，請在專案的 <a href="https://kotlinlang.org/docs/mpp-discover-project.html#source-sets" target="_blank" rel="noreferrer">通用程式碼</a> 中呼叫 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client/-http-client/index.html" target="_blank" rel="noreferrer">HttpClient</a> 建構函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>在此程式碼片段中，<code>HttpClient</code> 建構函式不接受引擎作為參數：用戶端將根據 <a href="#add-dependencies">建構腳本中新增的</a> artifacts 為所需平台選擇引擎。</p><p>如果您需要為特定平台調整引擎配置，請將對應的引擎類別作為參數傳遞給 <code>HttpClient</code> 建構函式，並使用 <code>engine</code> 方法配置引擎，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.android.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.net.Proxy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.net.InetSocketAddress</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Android) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: AndroidEngineConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connectTimeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        socketTimeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Proxy.Type.HTTP, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以從 <a href="./client-engines">用戶端引擎</a> 了解如何配置所有引擎類型。</p><h2 id="code-example" tabindex="-1">程式碼範例 <a class="header-anchor" href="#code-example" aria-label="Permalink to &quot;程式碼範例 {id=&quot;code-example&quot;}&quot;">​</a></h2><p><a href="https://github.com/ktorio/ktor-samples/tree/main/client-mpp" target="_blank" rel="noreferrer">mpp/client-mpp</a> 專案展示了如何在多平台應用程式中使用 Ktor 用戶端。此應用程式可在以下平台運作：<code>Android</code>、<code>iOS</code>、<code>JavaScript</code> 和 <code>macosX64</code>。</p>`,9))])}const b=h(m,[["render",u]]);export{C as __pageData,b as default};
