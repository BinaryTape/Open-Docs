import{_ as p}from"./chunks/kmp-logic-and-ui.C5b8DY7I.js";import{_ as s}from"./chunks/discover-kmp.BprQjN3-.js";import{_ as m}from"./chunks/explore-compose.CnswIadv.js";import{_ as f}from"./chunks/kmp-use-cases-1.D7ku5ORt.js";import{_ as d,C as n,c as h,o as b,j as t,G as r,ag as i,a as o,w as e}from"./chunks/framework.Bksy39di.js";const G=JSON.parse('{"title":"Kotlin Multiplatform 和 Flutter：跨平台開發解決方案","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/kotlin-multiplatform-flutter.md","filePath":"zh-Hant/kmp/kotlin-multiplatform-flutter.md","lastUpdated":1755516278000}'),k={name:"zh-Hant/kmp/kotlin-multiplatform-flutter.md"},w={style:{}};function g(M,l,v,K,F,P){const u=n("web-summary"),a=n("Links");return b(),h("div",null,[l[25]||(l[25]=t("h1",{id:"kotlin-multiplatform-和-flutter-跨平台開發解決方案",tabindex:"-1"},[o("Kotlin Multiplatform 和 Flutter：跨平台開發解決方案 "),t("a",{class:"header-anchor",href:"#kotlin-multiplatform-和-flutter-跨平台開發解決方案","aria-label":'Permalink to "Kotlin Multiplatform 和 Flutter：跨平台開發解決方案"'},"​")],-1)),r(u,null,{default:e(()=>l[0]||(l[0]=[o("本文探討 Kotlin Multiplatform 和 Flutter，協助您瞭解它們的功能，並為您的跨平台專案選擇最適合的方案。")])),_:1}),l[26]||(l[26]=i('<p>在快速發展的科技世界中，開發人員不斷尋求高效的框架和工具以協助他們建構高品質的應用程式。然而，在眾多可能性中進行選擇時，重要的是要避免過度強調尋找所謂的「最佳」選項，因為這種方法不一定總能帶來最合適的選擇。</p><p>每個專案都是獨特的，並有其特定需求。本文旨在協助您評估您的選擇，並更好地理解哪種技術（例如 Kotlin Multiplatform 或 Flutter）最適合您的專案，以便您做出明智的決策。</p><h2 id="跨平台開發-現代應用程式建構的統一方法" tabindex="-1">跨平台開發：現代應用程式建構的統一方法 <a class="header-anchor" href="#跨平台開發-現代應用程式建構的統一方法" aria-label="Permalink to &quot;跨平台開發：現代應用程式建構的統一方法&quot;">​</a></h2><p>跨平台開發提供了一種方法，可透過單一程式碼庫建構能在多個平台上執行的應用程式，消除了為每個系統重寫相同功能的需要。雖然通常與 <a href="./cross-platform-mobile-development">行動開發</a>（針對 Android 和 iOS）相關聯，但這種方法遠不止於行動裝置，還涵蓋了網路、桌面，甚至是伺服器端環境。</p><p>其核心理念是最大限度地提高程式碼重用性，同時確保在必要時仍可實作平台特定功能，從而簡化開發流程並減少維護工作。團隊可以加快開發週期、降低成本並確保跨平台的一致性，這使得跨平台開發在當今日益多樣化的應用程式生態系統中成為明智的選擇。</p><h2 id="kotlin-multiplatform-和-flutter-簡化跨平台開發" tabindex="-1">Kotlin Multiplatform 和 Flutter：簡化跨平台開發 <a class="header-anchor" href="#kotlin-multiplatform-和-flutter-簡化跨平台開發" aria-label="Permalink to &quot;Kotlin Multiplatform 和 Flutter：簡化跨平台開發&quot;">​</a></h2><p>Flutter 和 Kotlin Multiplatform 是兩種流行的跨平台技術，簡化了在不同平台上開發應用程式的過程。</p><h3 id="flutter" tabindex="-1">Flutter <a class="header-anchor" href="#flutter" aria-label="Permalink to &quot;Flutter&quot;">​</a></h3><p><a href="https://flutter.dev/" target="_blank" rel="noreferrer">Flutter</a> 是一個開源框架，用於從單一程式碼庫建構原生編譯的多平台應用程式。它讓您能夠在 Android、iOS、網路、桌面（Windows、macOS、Linux）和嵌入式系統上建立豐富的應用程式體驗——所有這些都來自單一、共用的應用程式程式碼庫。Flutter 應用程式是使用 Dart 程式語言編寫的。Flutter 受到 Google 的支援和使用。</p><p>最初於 2014 年以 Sky 的名稱推出，<a href="https://developers.googleblog.com/en/flutter-10-googles-portable-ui-toolkit/" target="_blank" rel="noreferrer">Flutter 1.0</a> 於 2018 年 12 月在 Flutter Live 期間正式發布。</p><p>Flutter 開發者社群龐大且高度活躍，提供持續的改進和支援。Flutter 允許使用由 Flutter 和 Dart 生態系統中的開發人員貢獻的共用套件。</p><h3 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h3><p><a href="https://www.jetbrains.com/kotlin-multiplatform/" target="_blank" rel="noreferrer">Kotlin Multiplatform</a> (KMP) 是一種由 JetBrains 開發的開源技術，讓開發人員能夠為 Android、iOS、網路、桌面（Windows、macOS、Linux）和伺服器端建立應用程式，使他們能夠在這些平台上高效地重用 Kotlin 程式碼，同時保留原生程式設計的優勢。</p><p>透過 Kotlin Multiplatform，您有多種選擇：您可以共用所有程式碼，除了應用程式進入點之外；共用單一邏輯片段（例如網路或資料庫模組）；或共用業務邏輯，同時保持 UI 原生。</p><p><img src="'+p+'" alt="Kotlin Multiplatform 是一種可重用高達 100% 程式碼的技術" width="700"></p><p>Kotlin Multiplatform 最初於 2017 年作為 Kotlin 1.2 的一部分推出。2023 年 11 月，Kotlin Multiplatform 變得 <a href="https://blog.jetbrains.com/kotlin/2023/11/kotlin-multiplatform-stable/" target="_blank" rel="noreferrer">穩定</a>。在 Google I/O 2024 期間，Google 宣布其 <a href="https://android-developers.googleblog.com/2024/05/android-support-for-kotlin-multiplatform-to-share-business-logic-across-mobile-web-server-desktop.html" target="_blank" rel="noreferrer">對 Kotlin Multiplatform 的支援</a>，用於在 Android 上共用 Android 和 iOS 之間的業務邏輯。</p><p><a href="https://www.jetbrains.com/kotlin-multiplatform/" target="_blank" rel="noreferrer"><img src="'+s+'" alt="探索 Kotlin Multiplatform" width="500"></a></p><h4 id="compose-multiplatform" tabindex="-1">Compose Multiplatform <a class="header-anchor" href="#compose-multiplatform" aria-label="Permalink to &quot;Compose Multiplatform&quot;">​</a></h4><p>您可以使用 <a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 在多個平台上編寫共用 UI 程式碼，這是一個由 JetBrains 開發的現代宣告式框架，該框架建構於 Kotlin Multiplatform 和 Google 的 Jetpack Compose 之上。</p><p>Compose Multiplatform 目前在 <a href="https://blog.jetbrains.com/kotlin/2025/05/compose-multiplatform-1-8-0-released-compose-multiplatform-for-ios-is-stable-and-production-ready/" target="_blank" rel="noreferrer">iOS</a>、Android 和桌面端已趨於穩定，網路端則處於 Alpha 階段。</p><p><a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer"><img src="'+m+'" alt="探索 Compose Multiplatform" width="500"></a></p><p>我們的專門文章概述了 <a href="./compose-multiplatform-and-jetpack-compose">Compose Multiplatform 和 Jetpack Compose</a> 之間的關係，並強調了主要差異。</p><h3 id="kotlin-multiplatform-和-flutter-概述" tabindex="-1">Kotlin Multiplatform 和 Flutter：概述 <a class="header-anchor" href="#kotlin-multiplatform-和-flutter-概述" aria-label="Permalink to &quot;Kotlin Multiplatform 和 Flutter：概述&quot;">​</a></h3>',23)),t("table",w,[l[16]||(l[16]=t("tr",null,[t("td"),t("td",null,[t("b",null,"Kotlin Multiplatform")]),t("td",null,[t("b",null,"Flutter")])],-1)),l[17]||(l[17]=t("tr",null,[t("td",null,[t("b",null,"建立者")]),t("td",null,"JetBrains"),t("td",null,"Google")],-1)),l[18]||(l[18]=t("tr",null,[t("td",null,[t("b",null,"語言")]),t("td",null,"Kotlin"),t("td",null,"Dart")],-1)),l[19]||(l[19]=t("tr",null,[t("td",null,[t("b",null,"靈活性和程式碼重用")]),t("td",null,"您可以共用程式碼庫的任何部分，包括業務邏輯和/或 UI，從 1% 到 100%。"),t("td",null,"控制應用程式的每個像素，以建立客製化和適應性設計，並在所有平台之間實現 100% 的程式碼共用。")],-1)),l[20]||(l[20]=t("tr",null,[t("td",null,[t("b",null,"套件、依賴項和生態系統")]),t("td",null,[o("套件可從 "),t("a",{href:"https://central.sonatype.com/"},"Maven Central"),o(" 和其他儲存庫取得，包括 "),t("p",null,[t("a",{href:"http://klibs.io"},"klibs.io"),o(" (Alpha 版本)，旨在簡化 KMP 函式庫的搜尋。")]),t("p",null,[o("此 "),t("a",{href:"https://github.com/terrakok/kmp-awesome"},"清單"),o(" 包含一些最流行的 KMP 函式庫和工具。")])]),t("td",null,[o("套件可從 "),t("a",{href:"https://pub.dev/"},"Pub.dev."),o(" 取得。")])],-1)),l[21]||(l[21]=t("tr",null,[t("td",null,[t("b",null,"建構工具")]),t("td",null,"Gradle (針對 Apple 裝置的應用程式還需 Xcode)。"),t("td",null,"Flutter 命令列工具 (內部使用 Gradle 和 Xcode)。")],-1)),l[22]||(l[22]=t("tr",null,[t("td",null,[t("b",null,"程式碼共用")]),t("td",null,"Android、iOS、網路、桌面和伺服器端。"),t("td",null,"Android、iOS、網路、桌面和嵌入式裝置。")],-1)),l[23]||(l[23]=t("tr",null,[t("td",null,[t("b",null,"編譯")]),t("td",null,"針對桌面和 Android 編譯為 JVM 位元組碼，針對網路編譯為 JavaScript 或 Wasm，針對原生平台編譯為平台特定二進位檔。"),t("td",null,[o("偵錯建構在虛擬機中執行 Dart 程式碼。 "),t("p",null,"發行建構為原生平台輸出平台特定二進位檔，為網路輸出 JavaScript/Wasm。")])],-1)),t("tr",null,[l[3]||(l[3]=t("td",null,[t("b",null,"與原生 API 的通訊")],-1)),t("td",null,[l[2]||(l[2]=o("原生 API 可直接從 Kotlin 程式碼中存取，使用 ")),r(a,{href:"/kmp/multiplatform-expect-actual",summary:"undefined"},{default:e(()=>l[1]||(l[1]=[o("expect/actual 宣告。")])),_:1})]),l[4]||(l[4]=t("td",null,[o("與主機平台的通訊可透過 "),t("a",{href:"https://docs.flutter.dev/platform-integration/platform-channels"},"平台通道"),o(" 實現。")],-1))]),l[24]||(l[24]=t("tr",null,[t("td",null,[t("b",null,"UI 渲染")]),t("td",null,[t("a",{href:"https://www.jetbrains.com/compose-multiplatform/"},"Compose Multiplatform"),o(" 可用於跨平台共用 UI，基於 Google 的 Jetpack Compose，使用與 OpenGL、ANGLE（將 OpenGL ES 2 或 3 呼叫轉換為原生 API）、Vulkan 和 Metal 相容的 Skia 引擎。")]),t("td",null,[o("Flutter 小工具使用客製化的 "),t("a",{href:"https://docs.flutter.dev/perf/impeller"},"Impeller 引擎"),o(" 在螢幕上渲染，該引擎根據平台和裝置的不同，直接使用 Metal、Vulkan 或 OpenGL 與 GPU 通訊。")])],-1)),t("tr",null,[l[9]||(l[9]=t("td",null,[t("b",null,"UI 開發迭代")],-1)),t("td",null,[l[8]||(l[8]=o("即使是通用程式碼，也可以使用 UI 預覽。 ")),t("p",null,[l[6]||(l[6]=o("透過 ")),r(a,{href:"/kmp/compose-hot-reload",summary:"undefined"},{default:e(()=>l[5]||(l[5]=[o("Compose 熱重載")])),_:1}),l[7]||(l[7]=o("，您可以即時看到 UI 變更，而無需重新啟動應用程式或丟失其狀態。"))])]),l[10]||(l[10]=t("td",null,"VS Code 和 Android Studio 均提供 IDE 外掛程式。",-1))]),t("tr",null,[l[14]||(l[14]=t("td",null,[t("b",null,"使用該技術的公司")],-1)),t("td",null,[l[12]||(l[12]=i('<a href="https://www.forbes.com/sites/forbes-engineering/2023/11/13/forbes-mobile-app-shifts-to-kotlin-multiplatform/">Forbes</a>、<a href="https://www.youtube.com/watch?v=z-o9MqN86eE">Todoist</a>、<a href="https://medium.com/mcdonalds-technical-blog/mobile-multiplatform-development-at-mcdonalds-3b72c8d44ebc">McDonald’s</a>、<a href="https://www.youtube.com/watch?v=5sOXv-X43vc">Google Workspace</a>、<a href="https://www.youtube.com/watch?v=hZPL8QqiLi8">Philips</a>、<a href="https://raymondctc.medium.com/adopting-kotlin-multiplatform-mobile-kmm-on-9gag-app-dfe526d9ce04">9gag</a>、<a href="https://kotlinlang.org/lp/multiplatform/case-studies/baidu">Baidu</a>、<a href="https://kotlinlang.org/lp/multiplatform/case-studies/autodesk/">Autodesk</a>、<a href="https://touchlab.co/">TouchLab</a>、<a href="https://www.youtube.com/watch?v=YsQ-2lQYQ8M">Instabee</a>，以及更多公司列在我們的 ',20)),r(a,{href:"/kmp/case-studies",summary:"undefined"},{default:e(()=>l[11]||(l[11]=[o("KMP 案例研究")])),_:1}),l[13]||(l[13]=o(" 中。"))]),l[15]||(l[15]=t("td",null,[t("a",{href:"https://flutter.dev/showcase/xiaomi"},"小米"),o("、"),t("a",{href:"https://flutter.dev/showcase/wolt"},"Wolt"),o("、"),t("a",{href:"https://flutter.dev/showcase/universal-studios"},"環球影城"),o("、"),t("a",{href:"https://flutter.dev/showcase/alibaba-group"},"阿里巴巴集團"),o("、"),t("a",{href:"https://flutter.dev/showcase/bytedance"},"字節跳動"),o("、"),t("a",{href:"https://www.geico.com/techblog/flutter-as-the-multi-channel-ux-framework/"},"Geico"),o("、"),t("a",{href:"https://flutter.dev/showcase/ebay"},"eBay Motors"),o("、"),t("a",{href:"https://flutter.dev/showcase/google-pay"},"Google Pay"),o("、"),t("a",{href:"https://flutter.dev/showcase/so-vegan"},"So Vegan"),o("，以及更多公司列在 "),t("a",{href:"https://flutter.dev/showcase"},"Flutter 展示"),o(" 中。")],-1))])]),l[27]||(l[27]=t("p",null,[t("a",{href:"https://www.jetbrains.com/help/kotlin-multiplatform-dev/case-studies.html",target:"_blank",rel:"noreferrer"},[t("img",{src:f,alt:"探索全球公司利用 Kotlin Multiplatform 進行跨平台開發的實際用例。",width:"500"})])],-1)),l[28]||(l[28]=t("p",null,[o("您還可以查看 Google 的部落格文章，"),t("a",{href:"https://developers.googleblog.com/en/making-development-across-platforms-easier-for-developers/",target:"_blank",rel:"noreferrer"},"讓開發人員更輕鬆地進行跨平台開發"),o("，其中提供了關於為您的專案選擇正確技術堆疊的指導。")],-1)),l[29]||(l[29]=t("p",null,[o("如果您正在尋找 Kotlin Multiplatform 和 Flutter 之間的額外比較，您還可以觀看 Philipp Lackner 製作的 "),t("a",{href:"https://www.youtube.com/watch?v=dzog64ENKG0",target:"_blank",rel:"noreferrer"},"KMP 與 Flutter 影片"),o("。在這部影片中，他分享了一些關於這些技術的有趣觀察，包括程式碼共用、UI 渲染、效能以及這兩種技術的未來。")],-1)),l[30]||(l[30]=t("p",null,"透過仔細評估您的特定業務需求、目標和任務，您可以確定最符合您需求的跨平台解決方案。",-1))])}const x=d(k,[["render",g]]);export{G as __pageData,x as default};
