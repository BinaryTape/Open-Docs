import{_ as o,c as t,o as r,ag as n}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"Kotlin 1.7 호환성 가이드","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/compatibility-guide-17.md","filePath":"ko/kotlin/compatibility-guide-17.md","lastUpdated":1754307826000}'),a={name:"ko/kotlin/compatibility-guide-17.md"};function l(s,e,i,c,p,d){return r(),t("div",null,e[0]||(e[0]=[n('<h1 id="kotlin-1-7-호환성-가이드" tabindex="-1">Kotlin 1.7 호환성 가이드 <a class="header-anchor" href="#kotlin-1-7-호환성-가이드" aria-label="Permalink to &quot;Kotlin 1.7 호환성 가이드&quot;">​</a></h1><p><em><a href="/ko/kotlin/kotlin-evolution-principles">언어의 현대성 유지</a></em> 및 _<a href="/ko/kotlin/kotlin-evolution-principles">편안한 업데이트</a>_는 Kotlin 언어 설계의 근본 원칙 중 일부입니다. 전자는 언어 발전을 저해하는 구조는 제거되어야 한다고 말하며, 후자는 코드 마이그레이션이 최대한 원활하게 진행될 수 있도록 이러한 제거를 사전에 충분히 알려야 한다고 말합니다.</p><p>대부분의 언어 변경 사항은 업데이트 변경 로그 또는 컴파일러 경고와 같은 다른 채널을 통해 이미 발표되었지만, 이 문서는 Kotlin 1.6에서 Kotlin 1.7로의 마이그레이션을 위한 완전한 참조 자료를 제공하며 모든 변경 사항을 요약합니다.</p><h2 id="기본-용어" tabindex="-1">기본 용어 <a class="header-anchor" href="#기본-용어" aria-label="Permalink to &quot;기본 용어&quot;">​</a></h2><p>이 문서에서는 여러 종류의 호환성을 소개합니다:</p><ul><li><em>소스</em>: 소스 호환성이 없는 변경은 오류나 경고 없이 잘 컴파일되던 코드가 더 이상 컴파일되지 않도록 합니다.</li><li><em>바이너리</em>: 두 바이너리 아티팩트가 바이너리 호환된다는 것은 서로 교환해도 로딩 또는 링크 오류가 발생하지 않는다는 의미입니다.</li><li><em>동작</em>: 변경 사항이 동작 호환성이 없다는 것은 동일한 프로그램이 변경 사항을 적용하기 전과 후에 다른 동작을 보인다는 의미입니다.</li></ul><p>이러한 정의는 순수 Kotlin에 대해서만 주어진 것임을 기억하세요. 다른 언어 관점에서의 Kotlin 코드의 호환성(예: Java에서)은 이 문서의 범위를 벗어납니다.</p><h2 id="언어" tabindex="-1">언어 <a class="header-anchor" href="#언어" aria-label="Permalink to &quot;언어&quot;">​</a></h2><h3 id="안전-호출-결과는-항상-널러블로-만듭니다" tabindex="-1">안전 호출 결과는 항상 널러블로 만듭니다. <a class="header-anchor" href="#안전-호출-결과는-항상-널러블로-만듭니다" aria-label="Permalink to &quot;안전 호출 결과는 항상 널러블로 만듭니다.&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46860" target="_blank" rel="noreferrer">KT-46860</a></p><p><strong>Component</strong>: 핵심 언어</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: Kotlin 1.7에서는 안전 호출의 리시버(receiver)가 널러블이 아니더라도(non-nullable), 안전 호출 결과의 타입은 항상 널러블(nullable)인 것으로 간주합니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt;1.3: 널러블이 아닌 리시버에 대한 불필요한 안전 호출에 경고 보고</li><li>1.6.20: 불필요한 안전 호출의 결과 타입이 다음 버전에서 변경될 것임을 추가로 경고</li><li>1.7.0: 안전 호출 결과의 타입을 널러블로 변경,<br><code>-XXLanguage:-SafeCallsAreAlwaysNullable</code>를 사용하여 1.7 이전 동작으로 일시적으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="추상-슈퍼클래스-멤버에-대한-슈퍼-호출-위임-금지" tabindex="-1">추상 슈퍼클래스 멤버에 대한 슈퍼 호출 위임 금지 <a class="header-anchor" href="#추상-슈퍼클래스-멤버에-대한-슈퍼-호출-위임-금지" aria-label="Permalink to &quot;추상 슈퍼클래스 멤버에 대한 슈퍼 호출 위임 금지&quot;">​</a></h3><blockquote><p><strong>Issues</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-45508" target="_blank" rel="noreferrer">KT-45508</a>, <a href="https://youtrack.jetbrains.com/issue/KT-49017" target="_blank" rel="noreferrer">KT-49017</a>, <a href="https://youtrack.jetbrains.com/issue/KT-38078" target="_blank" rel="noreferrer">KT-38078</a></p><p><strong>Component</strong>: 핵심 언어</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: 슈퍼 인터페이스에 기본 구현이 있더라도 Kotlin은 명시적 또는 암시적 슈퍼 호출이 슈퍼클래스의 <em>추상</em> 멤버에 위임될 때 컴파일 오류를 보고합니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.5.20: 모든 추상 멤버를 오버라이드하지 않는 비추상 클래스가 사용될 때 경고 도입</li><li>1.7.0: 슈퍼 호출이 실제로 슈퍼클래스의 추상 멤버에 접근하는 경우 오류 보고</li><li>1.7.0: <code>-Xjvm-default=all</code> 또는 <code>-Xjvm-default=all-compatibility</code> 호환성 모드가 활성화된 경우 오류 보고; 프로그레시브 모드에서 오류 보고</li><li>&gt;=1.8.0: 모든 경우에 오류 보고</li></ul></blockquote><h3 id="비공개-기본-생성자에서-선언된-공개-프로퍼티를-통해-비공개-타입을-노출하는-것을-금지합니다" tabindex="-1">비공개 기본 생성자에서 선언된 공개 프로퍼티를 통해 비공개 타입을 노출하는 것을 금지합니다. <a class="header-anchor" href="#비공개-기본-생성자에서-선언된-공개-프로퍼티를-통해-비공개-타입을-노출하는-것을-금지합니다" aria-label="Permalink to &quot;비공개 기본 생성자에서 선언된 공개 프로퍼티를 통해 비공개 타입을 노출하는 것을 금지합니다.&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-28078" target="_blank" rel="noreferrer">KT-28078</a></p><p><strong>Component</strong>: 핵심 언어</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: Kotlin은 비공개 기본 생성자에서 비공개 타입을 가진 공개 프로퍼티를 선언하는 것을 방지합니다. 다른 패키지에서 이러한 프로퍼티에 접근하면 <code>IllegalAccessError</code>가 발생할 수 있습니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.3.20: 비공개 생성자에서 선언되고 비공개 타입을 가진 공개 프로퍼티에 경고 보고</li><li>1.6.20: 프로그레시브 모드에서 이 경고를 오류로 격상</li><li>1.7.0: 이 경고를 오류로 격상</li></ul></blockquote><h3 id="enum-이름으로-한정된-초기화되지-않은-enum-엔트리에-대한-접근-금지" tabindex="-1">enum 이름으로 한정된 초기화되지 않은 enum 엔트리에 대한 접근 금지 <a class="header-anchor" href="#enum-이름으로-한정된-초기화되지-않은-enum-엔트리에-대한-접근-금지" aria-label="Permalink to &quot;enum 이름으로 한정된 초기화되지 않은 enum 엔트리에 대한 접근 금지&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-41124" target="_blank" rel="noreferrer">KT-41124</a></p><p><strong>Component</strong>: 핵심 언어</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: Kotlin 1.7에서는 enum 정적 초기화 블록에서 enum 이름으로 한정된 초기화되지 않은 enum 엔트리에 접근하는 것을 금지합니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: enum 정적 초기화 블록에서 초기화되지 않은 enum 엔트리에 접근할 때 오류 보고</li></ul></blockquote><h3 id="when-조건-분기-및-루프-조건에서-복잡한-불리언-표현식의-상수-값-계산-금지" tabindex="-1"><code>when</code> 조건 분기 및 루프 조건에서 복잡한 불리언 표현식의 상수 값 계산 금지 <a class="header-anchor" href="#when-조건-분기-및-루프-조건에서-복잡한-불리언-표현식의-상수-값-계산-금지" aria-label="Permalink to &quot;`when` 조건 분기 및 루프 조건에서 복잡한 불리언 표현식의 상수 값 계산 금지&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-39883" target="_blank" rel="noreferrer">KT-39883</a></p><p><strong>Component</strong>: 핵심 언어</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: Kotlin은 리터럴 <code>true</code>와 <code>false</code>를 제외한 복잡한 상수 불리언 표현식을 기반으로 <code>when</code>의 완전성(exhaustiveness) 및 제어 흐름 추정(control flow assumptions)을 더 이상 수행하지 않습니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.5.30: <code>when</code> 분기 또는 루프 조건에서 복잡한 상수 불리언 표현식을 기반으로 <code>when</code>의 완전성 또는 제어 흐름 도달성(reachability)이 결정될 때 경고 보고</li><li>1.7.0: 이 경고를 오류로 격상</li></ul></blockquote><h3 id="enum-sealed-boolean-주제를-가진-when-문은-기본적으로-완전-exhaustive-하도록-만듭니다" tabindex="-1">enum, sealed, Boolean 주제를 가진 <code>when</code> 문은 기본적으로 완전(exhaustive)하도록 만듭니다. <a class="header-anchor" href="#enum-sealed-boolean-주제를-가진-when-문은-기본적으로-완전-exhaustive-하도록-만듭니다" aria-label="Permalink to &quot;enum, sealed, Boolean 주제를 가진 `when` 문은 기본적으로 완전(exhaustive)하도록 만듭니다.&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47709" target="_blank" rel="noreferrer">KT-47709</a></p><p><strong>Component</strong>: 핵심 언어</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: Kotlin 1.7에서는 enum, sealed, 또는 Boolean 주제를 가진 <code>when</code> 문이 완전하지 않을 때 오류를 보고합니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: enum, sealed, 또는 Boolean 주제를 가진 <code>when</code> 문이 완전하지 않을 때 경고 도입 (프로그레시브 모드에서는 오류)</li><li>1.7.0: 이 경고를 오류로 격상</li></ul></blockquote><h3 id="when-with-subject에서-혼란스러운-문법-사용-중단" tabindex="-1"><code>when-with-subject</code>에서 혼란스러운 문법 사용 중단 <a class="header-anchor" href="#when-with-subject에서-혼란스러운-문법-사용-중단" aria-label="Permalink to &quot;`when-with-subject`에서 혼란스러운 문법 사용 중단&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48385" target="_blank" rel="noreferrer">KT-48385</a></p><p><strong>Component</strong>: 핵심 언어</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: Kotlin 1.6은 <code>when</code> 조건 표현식에서 몇 가지 혼란스러운 문법 구조를 지원 중단했습니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 영향을 받는 표현식에 대한 지원 중단 경고 도입</li><li>1.8.0: 이 경고를 오류로 격상</li><li>&gt;= 1.8: 일부 지원 중단된 구조를 새로운 언어 기능에 재활용</li></ul></blockquote><h3 id="타입-널러블성-향상-개선" tabindex="-1">타입 널러블성 향상 개선 <a class="header-anchor" href="#타입-널러블성-향상-개선" aria-label="Permalink to &quot;타입 널러블성 향상 개선&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48623" target="_blank" rel="noreferrer">KT-48623</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: Kotlin 1.7은 Java 코드에서 타입 널러블성 어노테이션(annotation)을 로드하고 해석하는 방식을 변경합니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.4.30: 더 정확한 타입 널러블성이 오류로 이어질 수 있는 경우에 대한 경고 도입</li><li>1.7.0: Java 타입의 널러블성을 더 정확하게 추론, <code>-XXLanguage:-TypeEnhancementImprovementsInStrictMode</code>를 사용하여 1.7 이전 동작으로 일시적으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="다른-숫자-타입-간의-암시적-강제-변환-방지" tabindex="-1">다른 숫자 타입 간의 암시적 강제 변환 방지 <a class="header-anchor" href="#다른-숫자-타입-간의-암시적-강제-변환-방지" aria-label="Permalink to &quot;다른 숫자 타입 간의 암시적 강제 변환 방지&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48645" target="_blank" rel="noreferrer">KT-48645</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 동작</p><p><strong>Short summary</strong>: Kotlin은 의미상 해당 타입으로의 다운캐스트만 필요한 경우 숫자 값을 기본 숫자 타입으로 자동으로 변환하는 것을 피합니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.5.30: 영향을 받는 모든 경우의 이전 동작</li><li>1.5.30: 생성된 프로퍼티 위임 접근자(property delegate accessors)의 다운캐스트 동작 수정, <code>-Xuse-old-backend</code>를 사용하여 1.5.30 이전 수정 동작으로 일시적으로 되돌릴 수 있습니다.</li><li>&gt;= 1.7.20: 영향을 받는 다른 경우의 다운캐스트 동작 수정</li></ul></blockquote><h3 id="컴파일러-옵션-xjvm-default의-enable-및-compatibility-모드-지원-중단" tabindex="-1">컴파일러 옵션 <code>-Xjvm-default</code>의 <code>enable</code> 및 <code>compatibility</code> 모드 지원 중단 <a class="header-anchor" href="#컴파일러-옵션-xjvm-default의-enable-및-compatibility-모드-지원-중단" aria-label="Permalink to &quot;컴파일러 옵션 `-Xjvm-default`의 `enable` 및 `compatibility` 모드 지원 중단&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46329" target="_blank" rel="noreferrer">KT-46329</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: Kotlin 1.6.20은 <code>-Xjvm-default</code> 컴파일러 옵션의 <code>enable</code> 및 <code>compatibility</code> 모드 사용에 대해 경고합니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: <code>-Xjvm-default</code> 컴파일러 옵션의 <code>enable</code> 및 <code>compatibility</code> 모드에 대한 경고 도입</li><li>&gt;= 1.8.0: 이 경고를 오류로 격상</li></ul></blockquote><h3 id="후행-람다를-사용하는-suspend라는-이름의-함수-호출-금지" tabindex="-1">후행 람다를 사용하는 <code>suspend</code>라는 이름의 함수 호출 금지 <a class="header-anchor" href="#후행-람다를-사용하는-suspend라는-이름의-함수-호출-금지" aria-label="Permalink to &quot;후행 람다를 사용하는 `suspend`라는 이름의 함수 호출 금지&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-22562" target="_blank" rel="noreferrer">KT-22562</a></p><p><strong>Component</strong>: 핵심 언어</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: Kotlin 1.6부터는 함수 타입의 단일 인수를 후행 람다(trailing lambda)로 전달하는 <code>suspend</code>라는 이름의 사용자 함수를 호출하는 것이 더 이상 허용되지 않습니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.3.0: 이러한 함수 호출에 경고 도입</li><li>1.6.0: 이 경고를 오류로 격상</li><li>1.7.0: <code>suspend</code>가 <code>{</code> 앞에 키워드로 파싱되도록 언어 문법 변경 도입</li></ul></blockquote><h3 id="베이스-클래스가-다른-모듈에-있는-경우-베이스-클래스-프로퍼티에-대한-스마트-캐스트-금지" tabindex="-1">베이스 클래스가 다른 모듈에 있는 경우 베이스 클래스 프로퍼티에 대한 스마트 캐스트 금지 <a class="header-anchor" href="#베이스-클래스가-다른-모듈에-있는-경우-베이스-클래스-프로퍼티에-대한-스마트-캐스트-금지" aria-label="Permalink to &quot;베이스 클래스가 다른 모듈에 있는 경우 베이스 클래스 프로퍼티에 대한 스마트 캐스트 금지&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-52629" target="_blank" rel="noreferrer">KT-52629</a></p><p><strong>Component</strong>: 핵심 언어</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: Kotlin 1.7부터는 슈퍼클래스가 다른 모듈에 위치한 경우 해당 슈퍼클래스의 프로퍼티에 대한 스마트 캐스트(smart cast)가 더 이상 허용되지 않습니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 다른 모듈에 있는 슈퍼클래스에 선언된 프로퍼티에 대한 스마트 캐스트에 경고 보고</li><li>1.7.0: 이 경고를 오류로 격상,<br><code>-XXLanguage:-ProhibitSmartcastsOnPropertyFromAlienBaseClass</code>를 사용하여 1.7 이전 동작으로 일시적으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="타입-추론-시-의미-있는-제약-조건을-무시하지-않습니다" tabindex="-1">타입 추론 시 의미 있는 제약 조건을 무시하지 않습니다. <a class="header-anchor" href="#타입-추론-시-의미-있는-제약-조건을-무시하지-않습니다" aria-label="Permalink to &quot;타입 추론 시 의미 있는 제약 조건을 무시하지 않습니다.&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-52668" target="_blank" rel="noreferrer">KT-52668</a></p><p><strong>Component</strong>: 핵심 언어</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: Kotlin 1.4-1.6에서는 잘못된 최적화로 인해 타입 추론 시 일부 타입 제약 조건을 무시했습니다. 이로 인해 불안정한(unsound) 코드를 작성하게 되어 런타임에 <code>ClassCastException</code>이 발생할 수 있었습니다. Kotlin 1.7은 이러한 제약 조건을 고려하여 불안정한 코드를 금지합니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.5.20: 모든 타입 추론 제약 조건을 고려할 경우 타입 불일치가 발생하는 표현식에 경고 보고</li><li>1.7.0: 모든 제약 조건을 고려하여 이 경고를 오류로 격상,<br><code>-XXLanguage:-ProperTypeInferenceConstraintsProcessing</code>를 사용하여 1.7 이전 동작으로 일시적으로 되돌릴 수 있습니다.</li></ul></blockquote><h2 id="표준-라이브러리" tabindex="-1">표준 라이브러리 <a class="header-anchor" href="#표준-라이브러리" aria-label="Permalink to &quot;표준 라이브러리&quot;">​</a></h2><h3 id="컬렉션-min-및-max-함수의-반환-타입을-점진적으로-널러블이-아닌-non-nullable-것으로-변경합니다" tabindex="-1">컬렉션 <code>min</code> 및 <code>max</code> 함수의 반환 타입을 점진적으로 널러블이 아닌(non-nullable) 것으로 변경합니다. <a class="header-anchor" href="#컬렉션-min-및-max-함수의-반환-타입을-점진적으로-널러블이-아닌-non-nullable-것으로-변경합니다" aria-label="Permalink to &quot;컬렉션 `min` 및 `max` 함수의 반환 타입을 점진적으로 널러블이 아닌(non-nullable) 것으로 변경합니다.&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-38854" target="_blank" rel="noreferrer">KT-38854</a></p><p><strong>Component</strong>: kotlin-stdlib</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: 컬렉션 <code>min</code> 및 <code>max</code> 함수의 반환 타입이 Kotlin 1.7에서 널러블이 아닌 것으로 변경됩니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.4.0: <code>...OrNull</code> 함수를 동의어로 도입하고 영향을 받는 API 지원 중단 (이슈에서 자세한 내용 참조)</li><li>1.5.0: 영향을 받는 API의 지원 중단 수준을 오류로 격상</li><li>1.6.0: 공개 API에서 지원 중단된 함수 숨기기</li><li>1.7.0: 영향을 받는 API를 재도입하되 널러블이 아닌 반환 타입으로 변경</li></ul></blockquote><h3 id="부동-소수점-배열-함수-contains-indexof-lastindexof-지원-중단" tabindex="-1">부동 소수점 배열 함수: <code>contains</code>, <code>indexOf</code>, <code>lastIndexOf</code> 지원 중단 <a class="header-anchor" href="#부동-소수점-배열-함수-contains-indexof-lastindexof-지원-중단" aria-label="Permalink to &quot;부동 소수점 배열 함수: `contains`, `indexOf`, `lastIndexOf` 지원 중단&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-28753" target="_blank" rel="noreferrer">KT-28753</a></p><p><strong>Component</strong>: kotlin-stdlib</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: Kotlin은 전체 순서(total order) 대신 IEEE-754 순서로 값을 비교하는 부동 소수점 배열 함수 <code>contains</code>, <code>indexOf</code>, <code>lastIndexOf</code>를 지원 중단합니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.4.0: 영향을 받는 함수를 경고와 함께 지원 중단</li><li>1.6.0: 지원 중단 수준을 오류로 격상</li><li>1.7.0: 공개 API에서 지원 중단된 함수 숨기기</li></ul></blockquote><h3 id="kotlin-dom-및-kotlin-browser-패키지의-선언을-kotlinx-로-마이그레이션" tabindex="-1"><code>kotlin.dom</code> 및 <code>kotlin.browser</code> 패키지의 선언을 <code>kotlinx.*</code>로 마이그레이션 <a class="header-anchor" href="#kotlin-dom-및-kotlin-browser-패키지의-선언을-kotlinx-로-마이그레이션" aria-label="Permalink to &quot;`kotlin.dom` 및 `kotlin.browser` 패키지의 선언을 `kotlinx.*`로 마이그레이션&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-39330" target="_blank" rel="noreferrer">KT-39330</a></p><p><strong>Component</strong>: kotlin-stdlib (JS)</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: <code>kotlin.dom</code> 및 <code>kotlin.browser</code> 패키지의 선언은 <code>stdlib</code>에서 분리할 준비를 위해 해당 <code>kotlinx.*</code> 패키지로 이동되었습니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.4.0: <code>kotlinx.dom</code> 및 <code>kotlinx.browser</code> 패키지에 대체 API 도입</li><li>1.4.0: <code>kotlin.dom</code> 및 <code>kotlin.browser</code> 패키지의 API를 지원 중단하고 위에서 언급한 새 API를 대체제로 제안</li><li>1.6.0: 지원 중단 수준을 오류로 격상</li><li>&gt;= 1.8: <code>stdlib</code>에서 지원 중단된 함수 제거</li><li>&gt;= 1.8: <code>kotlinx.*</code> 패키지의 API를 별도 라이브러리로 이동</li></ul></blockquote><h3 id="일부-js-전용-api-지원-중단" tabindex="-1">일부 JS 전용 API 지원 중단 <a class="header-anchor" href="#일부-js-전용-api-지원-중단" aria-label="Permalink to &quot;일부 JS 전용 API 지원 중단&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48587" target="_blank" rel="noreferrer">KT-48587</a></p><p><strong>Component</strong>: kotlin-stdlib (JS)</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: <code>stdlib</code>의 일부 JS 전용 함수가 제거를 위해 지원 중단되었습니다. 여기에는 <code>String.concat(String)</code>, <code>String.match(regex: String)</code>, <code>String.matches(regex: String)</code> 및 비교 함수를 인수로 받는 배열의 <code>sort</code> 함수(예: <code>Array&lt;out T&gt;.sort(comparison: (a: T, b: T) -&gt; Int)</code>)가 포함됩니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 영향을 받는 함수를 경고와 함께 지원 중단</li><li>1.8.0: 지원 중단 수준을 오류로 격상</li><li>1.9.0: 공개 API에서 지원 중단된 함수 제거</li></ul></blockquote><h2 id="도구" tabindex="-1">도구 <a class="header-anchor" href="#도구" aria-label="Permalink to &quot;도구&quot;">​</a></h2><h3 id="kotlingradlesubplugin-클래스-제거" tabindex="-1"><code>KotlinGradleSubplugin</code> 클래스 제거 <a class="header-anchor" href="#kotlingradlesubplugin-클래스-제거" aria-label="Permalink to &quot;`KotlinGradleSubplugin` 클래스 제거&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48831" target="_blank" rel="noreferrer">KT-48831</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: <code>KotlinGradleSubplugin</code> 클래스를 제거합니다. 대신 <code>KotlinCompilerPluginSupportPlugin</code> 클래스를 사용하세요.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 지원 중단 수준을 오류로 격상</li><li>1.7.0: 지원 중단된 클래스 제거</li></ul></blockquote><h3 id="useir-컴파일러-옵션-제거" tabindex="-1"><code>useIR</code> 컴파일러 옵션 제거 <a class="header-anchor" href="#useir-컴파일러-옵션-제거" aria-label="Permalink to &quot;`useIR` 컴파일러 옵션 제거&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48847" target="_blank" rel="noreferrer">KT-48847</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: 지원 중단되고 숨겨진 <code>useIR</code> 컴파일러 옵션을 제거합니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.5.0: 지원 중단 수준을 경고로 격상</li><li>1.6.0: 옵션 숨기기</li><li>1.7.0: 지원 중단된 옵션 제거</li></ul></blockquote><h3 id="kapt-use-worker-api-gradle-프로퍼티-지원-중단" tabindex="-1"><code>kapt.use.worker.api</code> Gradle 프로퍼티 지원 중단 <a class="header-anchor" href="#kapt-use-worker-api-gradle-프로퍼티-지원-중단" aria-label="Permalink to &quot;`kapt.use.worker.api` Gradle 프로퍼티 지원 중단&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48826" target="_blank" rel="noreferrer">KT-48826</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: Gradle Workers API를 통해 kapt를 실행할 수 있도록 허용했던 <code>kapt.use.worker.api</code> 프로퍼티를 지원 중단합니다 (기본값: true).</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 지원 중단 수준을 경고로 격상</li><li>&gt;= 1.8.0: 이 프로퍼티 제거</li></ul></blockquote><h3 id="kotlin-experimental-coroutines-gradle-dsl-옵션-및-kotlin-coroutines-gradle-프로퍼티-제거" tabindex="-1"><code>kotlin.experimental.coroutines</code> Gradle DSL 옵션 및 <code>kotlin.coroutines</code> Gradle 프로퍼티 제거 <a class="header-anchor" href="#kotlin-experimental-coroutines-gradle-dsl-옵션-및-kotlin-coroutines-gradle-프로퍼티-제거" aria-label="Permalink to &quot;`kotlin.experimental.coroutines` Gradle DSL 옵션 및 `kotlin.coroutines` Gradle 프로퍼티 제거&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-50494" target="_blank" rel="noreferrer">KT-50494</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: <code>kotlin.experimental.coroutines</code> Gradle DSL 옵션 및 <code>kotlin.coroutines</code> 프로퍼티를 제거합니다.</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 지원 중단 수준을 경고로 격상</li><li>1.7.0: DSL 옵션, 이를 포함하는 <code>experimental</code> 블록, 그리고 해당 프로퍼티 제거</li></ul></blockquote><h3 id="useexperimentalannotation-컴파일러-옵션-지원-중단" tabindex="-1"><code>useExperimentalAnnotation</code> 컴파일러 옵션 지원 중단 <a class="header-anchor" href="#useexperimentalannotation-컴파일러-옵션-지원-중단" aria-label="Permalink to &quot;`useExperimentalAnnotation` 컴파일러 옵션 지원 중단&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47763" target="_blank" rel="noreferrer">KT-47763</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: 모듈에서 API 사용을 옵트인(opt in)하는 데 사용되었던 숨겨진 <code>useExperimentalAnnotation()</code> Gradle 함수를 제거합니다. 대신 <code>optIn()</code> 함수를 사용할 수 있습니다.</p><p><strong>Deprecation cycle:</strong></p><ul><li>1.6.0: 지원 중단 옵션 숨기기</li><li>1.7.0: 지원 중단된 옵션 제거</li></ul></blockquote><h3 id="kotlin-compiler-execution-strategy-시스템-프로퍼티-지원-중단" tabindex="-1"><code>kotlin.compiler.execution.strategy</code> 시스템 프로퍼티 지원 중단 <a class="header-anchor" href="#kotlin-compiler-execution-strategy-시스템-프로퍼티-지원-중단" aria-label="Permalink to &quot;`kotlin.compiler.execution.strategy` 시스템 프로퍼티 지원 중단&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-51830" target="_blank" rel="noreferrer">KT-51830</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: 컴파일러 실행 전략을 선택하는 데 사용되었던 <code>kotlin.compiler.execution.strategy</code> 시스템 프로퍼티를 지원 중단합니다. 대신 Gradle 프로퍼티 <code>kotlin.compiler.execution.strategy</code> 또는 컴파일 태스크 프로퍼티 <code>compilerExecutionStrategy</code>를 사용하세요.</p><p><strong>Deprecation cycle:</strong></p><ul><li>1.7.0: 지원 중단 수준을 경고로 격상</li><li>&gt; 1.7.0: 해당 프로퍼티 제거</li></ul></blockquote><h3 id="kotlinoptions-jdkhome-컴파일러-옵션-제거" tabindex="-1"><code>kotlinOptions.jdkHome</code> 컴파일러 옵션 제거 <a class="header-anchor" href="#kotlinoptions-jdkhome-컴파일러-옵션-제거" aria-label="Permalink to &quot;`kotlinOptions.jdkHome` 컴파일러 옵션 제거&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46541" target="_blank" rel="noreferrer">KT-46541</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: 기본 <code>JAVA_HOME</code> 대신 지정된 위치의 커스텀 JDK를 클래스패스에 포함하는 데 사용되었던 <code>kotlinOptions.jdkHome</code> 컴파일러 옵션을 제거합니다. 대신 <a href="/ko/kotlin/gradle-configure-project#gradle-java-toolchains-support">Java 툴체인</a>을 사용하세요.</p><p><strong>Deprecation cycle:</strong></p><ul><li>1.5.30: 지원 중단 수준을 경고로 격상</li><li>&gt; 1.7.0: 해당 옵션 제거</li></ul></blockquote><h3 id="nostdlib-컴파일러-옵션-제거" tabindex="-1"><code>noStdlib</code> 컴파일러 옵션 제거 <a class="header-anchor" href="#nostdlib-컴파일러-옵션-제거" aria-label="Permalink to &quot;`noStdlib` 컴파일러 옵션 제거&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-49011" target="_blank" rel="noreferrer">KT-49011</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: <code>noStdlib</code> 컴파일러 옵션을 제거합니다. Gradle 플러그인은 <code>kotlin.stdlib.default.dependency=true</code> 프로퍼티를 사용하여 Kotlin 표준 라이브러리 포함 여부를 제어합니다.</p><p><strong>Deprecation cycle:</strong></p><ul><li>1.5.0: 지원 중단 수준을 경고로 격상</li><li>1.7.0: 해당 옵션 제거</li></ul></blockquote><h3 id="kotlin2js-및-kotlin-dce-plugin-플러그인-제거" tabindex="-1"><code>kotlin2js</code> 및 <code>kotlin-dce-plugin</code> 플러그인 제거 <a class="header-anchor" href="#kotlin2js-및-kotlin-dce-plugin-플러그인-제거" aria-label="Permalink to &quot;`kotlin2js` 및 `kotlin-dce-plugin` 플러그인 제거&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48276" target="_blank" rel="noreferrer">KT-48276</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: <code>kotlin2js</code> 및 <code>kotlin-dce-plugin</code> 플러그인을 제거합니다. <code>kotlin2js</code> 대신 새로운 <code>org.jetbrains.kotlin.js</code> 플러그인을 사용하세요. 데드 코드 제거(DCE)는 Kotlin/JS Gradle 플러그인이 올바르게 구성되면 작동합니다.</p></blockquote><blockquote><p><strong>Deprecation cycle:</strong></p><ul><li>1.4.0: 지원 중단 수준을 경고로 격상</li><li>1.7.0: 플러그인 제거</li></ul></blockquote><h3 id="컴파일-태스크-변경-사항" tabindex="-1">컴파일 태스크 변경 사항 <a class="header-anchor" href="#컴파일-태스크-변경-사항" aria-label="Permalink to &quot;컴파일 태스크 변경 사항&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-32805" target="_blank" rel="noreferrer">KT-32805</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: 소스</p><p><strong>Short summary</strong>: Kotlin 컴파일 태스크는 더 이상 Gradle <code>AbstractCompile</code> 태스크를 상속하지 않으므로, <code>sourceCompatibility</code> 및 <code>targetCompatibility</code> 입력은 Kotlin 사용자 스크립트에서 더 이상 사용할 수 없습니다. <code>SourceTask.stableSources</code> 입력은 더 이상 사용할 수 없습니다. <code>sourceFilesExtensions</code> 입력은 제거되었습니다. 지원 중단된 <code>Gradle destinationDir: File</code> 출력은 <code>destinationDirectory: DirectoryProperty</code> 출력으로 대체되었습니다. <code>KotlinCompile</code> 태스크의 <code>classpath</code> 프로퍼티는 지원 중단되었습니다.</p><p><strong>Deprecation cycle:</strong></p><ul><li>1.7.0: 입력 사용 불가, 출력 대체, <code>classpath</code> 프로퍼티 지원 중단</li></ul></blockquote>',65)]))}const h=o(a,[["render",l]]);export{g as __pageData,h as default};
