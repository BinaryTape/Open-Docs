import{_ as i}from"./chunks/compose-resources-android-webview.1cP4Ejca.js";import{_ as e,c as s,o as t,ag as l}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"Compose Multiplatform 1.7.3 中的新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/whats-new-compose-170.md","filePath":"kmp/whats-new-compose-170.md","lastUpdated":1755516278000}'),o={name:"kmp/whats-new-compose-170.md"};function n(p,a,r,d,h,c){return t(),s("div",null,a[0]||(a[0]=[l(`<h1 id="compose-multiplatform-1-7-3-中的新特性" tabindex="-1">Compose Multiplatform 1.7.3 中的新特性 <a class="header-anchor" href="#compose-multiplatform-1-7-3-中的新特性" aria-label="Permalink to &quot;Compose Multiplatform 1.7.3 中的新特性&quot;">​</a></h1><p>以下是此特性版本的主要亮点：</p><ul><li><a href="#type-safe-navigation">类型安全导航</a></li><li><a href="#shared-element-transitions">共享元素过渡</a></li><li><a href="#resources-packed-into-android-assets">多平台资源打包到 Android assets 中</a></li><li><a href="#custom-resource-directories">自定义资源目录</a></li><li><a href="#support-for-multiplatform-test-resources">支持多平台测试资源</a></li><li><a href="#new-default-behavior-for-processing-touch-in-ios-native-elements">改进 iOS 上的触控互操作性</a></li><li><a href="#material3-adaptive-adaptive">Material3 <code>adaptive</code> 和 <code>material3-window-size-class</code> 现在位于公共代码中</a></li><li><a href="#drag-and-drop">桌面端实现了拖放功能</a></li><li><a href="#basictextfield-renamed-from-basictextfield2-adopted-on-desktop"><code>BasicTextField</code> 在桌面端采用</a></li></ul><p>有关此版本的完整变更列表，请参阅 <a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/CHANGELOG#170-october-2024">GitHub</a>。</p><h2 id="依赖项" tabindex="-1">依赖项 <a class="header-anchor" href="#依赖项" aria-label="Permalink to &quot;依赖项&quot;">​</a></h2><ul><li>Gradle 插件 <code>org.jetbrains.compose</code>，版本 1.7.3。基于 Jetpack Compose 库： <ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.7.5" target="_blank" rel="noreferrer">Runtime 1.7.5</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.7.5" target="_blank" rel="noreferrer">UI 1.7.5</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.7.5" target="_blank" rel="noreferrer">Foundation 1.7.5</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.7.5" target="_blank" rel="noreferrer">Material 1.7.5</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.3.1" target="_blank" rel="noreferrer">Material3 1.3.1</a></li></ul></li><li>Lifecycle 库 <code>org.jetbrains.androidx.lifecycle:lifecycle-*:2.8.3</code>。基于 <a href="https://developer.android.com/jetpack/androidx/releases/lifecycle#2.8.5" target="_blank" rel="noreferrer">Jetpack Lifecycle 2.8.5</a>。</li><li>Navigation 库 <code>org.jetbrains.androidx.navigation:navigation-*:2.8.0-alpha10</code>。基于 <a href="https://developer.android.com/jetpack/androidx/releases/navigation#2.8.0" target="_blank" rel="noreferrer">Jetpack Navigation 2.8.0</a>。</li><li>Material3 Adaptive 库 <code>org.jetbrains.compose.material3.adaptive:adaptive-*:1.0.0</code>。基于 <a href="https://developer.android.com/jetpack/androidx/releases/compose-material3-adaptive#1.0.0" target="_blank" rel="noreferrer">Jetpack Material3 Adaptive 1.0.0</a>。</li></ul><h2 id="破坏性变更" tabindex="-1">破坏性变更 <a class="header-anchor" href="#破坏性变更" aria-label="Permalink to &quot;破坏性变更&quot;">​</a></h2><h3 id="最低-agp-版本提升至-8-1-0" tabindex="-1">最低 AGP 版本提升至 8.1.0 <a class="header-anchor" href="#最低-agp-版本提升至-8-1-0" aria-label="Permalink to &quot;最低 AGP 版本提升至 8.1.0&quot;">​</a></h3><p>Jetpack Compose 1.7.0 和 Lifecycle 2.8.0（Compose Multiplatform 1.7.0 都使用了它们）均不支持 AGP 7。 因此，当您更新到 Compose Multiplatform 1.7.3 时，您可能也需要升级您的 AGP 依赖项。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>新实现的 Android Studio 中 Android 可组合项的预览<a href="#resources-packed-into-android-assets">需要最新版本的 AGP 之一</a>。</p></div><h3 id="java-资源-api-已弃用-推荐使用多平台资源库" tabindex="-1">Java 资源 API 已弃用，推荐使用多平台资源库 <a class="header-anchor" href="#java-资源-api-已弃用-推荐使用多平台资源库" aria-label="Permalink to &quot;Java 资源 API 已弃用，推荐使用多平台资源库&quot;">​</a></h3><p>在此版本中，我们显式弃用了 <code>compose.ui</code> 包中可用的 Java 资源 API： <code>painterResource()</code>、<code>loadImageBitmap()</code>、<code>loadSvgPainter()</code> 和 <code>loadXmlImageVector()</code> 函数，以及 <code>ClassLoaderResourceLoader</code> 类和依赖于它的函数。</p><p>请考虑过渡到<a href="./compose-multiplatform-resources">多平台资源库</a>。 虽然您可以在 Compose Multiplatform 中使用 Java 资源，但它们无法受益于框架提供的扩展特性：例如生成的访问器、多模块支持、本地化等。</p><p>如果您仍然需要访问 Java 资源，可以复制<a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1457" target="_blank" rel="noreferrer">拉取请求中建议的实现</a>， 以确保您的代码在升级到 Compose Multiplatform 1.7.3 并在可能的情况下切换到多平台资源后仍然能够工作。</p><h3 id="ios-原生元素中处理触控的新默认行为" tabindex="-1">iOS 原生元素中处理触控的新默认行为 <a class="header-anchor" href="#ios-原生元素中处理触控的新默认行为" aria-label="Permalink to &quot;iOS 原生元素中处理触控的新默认行为&quot;">​</a></h3><p>在 1.7.3 之前，Compose Multiplatform 无法响应落在互操作 UI 视图中的触控事件，因此互操作视图完全处理了这些触控序列。</p><p>Compose Multiplatform 1.7.3 实现了更复杂的逻辑来处理互操作触控序列。 默认情况下，现在在初始触控之后会有一个延迟，这有助于父级可组合项理解触控序列是否旨在与原生视图交互并相应地作出反应。</p><p>有关更多信息，请参阅<a href="#ios-touch-interop">本页的 iOS 章节</a>中的解释或阅读此<a href="./compose-ios-touch">特性</a>的文档。</p><h3 id="在-ios-上禁用最小帧持续时间是强制性的" tabindex="-1">在 iOS 上禁用最小帧持续时间是强制性的 <a class="header-anchor" href="#在-ios-上禁用最小帧持续时间是强制性的" aria-label="Permalink to &quot;在 iOS 上禁用最小帧持续时间是强制性的&quot;">​</a></h3><p>开发者经常未能注意到关于高刷新率显示器的打印警告，导致用户在 120 赫兹设备上无法享受到流畅的动画。 我们现在严格执行此检测。如果 <code>Info.plist</code> 文件中的 <code>CADisableMinimumFrameDurationOnPhone</code> 属性缺失或设置为 <code>false</code>，则使用 Compose Multiplatform 构建的应用现在将崩溃。</p><p>您可以通过将 <code>ComposeUIViewControllerConfiguration.enforceStrictPlistSanityCheck</code> 属性设置为 <code>false</code> 来禁用此行为。</p><h3 id="桌面端-modifier-onexternaldrag-已弃用" tabindex="-1">桌面端 <code>Modifier.onExternalDrag</code> 已弃用 <a class="header-anchor" href="#桌面端-modifier-onexternaldrag-已弃用" aria-label="Permalink to &quot;桌面端 \`Modifier.onExternalDrag\` 已弃用&quot;">​</a></h3><p>实验性的 <code>Modifier.onExternalDrag</code> 及其相关 API 已弃用，推荐使用新的 <code>Modifier.dragAndDropTarget</code>。 <code>DragData</code> 接口已移动到 <code>compose.ui.draganddrop</code> 包中。</p><p>如果您在 Compose Multiplatform 1.7.0 中使用已弃用的 API，将会遇到弃用错误。 在 1.8.0 版本中，<code>onExternalDrag</code> 修饰符将被完全移除。</p><h2 id="跨平台" tabindex="-1">跨平台 <a class="header-anchor" href="#跨平台" aria-label="Permalink to &quot;跨平台&quot;">​</a></h2><h3 id="共享元素过渡" tabindex="-1">共享元素过渡 <a class="header-anchor" href="#共享元素过渡" aria-label="Permalink to &quot;共享元素过渡&quot;">​</a></h3><p>Compose Multiplatform 现在提供了一个 API，用于在共享一致元素的可组合项之间实现无缝过渡。 这些过渡在导航中通常很有用，可帮助用户跟踪 UI 中变化的轨迹。</p><p>有关 API 的深入了解，请参阅 <a href="https://developer.android.com/develop/ui/compose/animation/shared-elements" target="_blank" rel="noreferrer">Jetpack Compose 文档</a>。</p><h3 id="类型安全导航" tabindex="-1">类型安全导航 <a class="header-anchor" href="#类型安全导航" aria-label="Permalink to &quot;类型安全导航&quot;">​</a></h3><p>Compose Multiplatform 已采用 Jetpack Compose 的类型安全方法，用于沿导航路由传递对象。 Navigation 2.8.0 中的新 API 允许 Compose 为您的导航图提供编译期安全。 这些 API 实现了与基于 XML 的导航的 <a href="https://developer.android.com/guide/navigation/use-graph/pass-data#Safe-args" target="_blank" rel="noreferrer">Safe Args</a> 插件相同的效果。</p><p>有关详细信息，请参阅 <a href="https://developer.android.com/guide/navigation/design/type-safety" target="_blank" rel="noreferrer">Google 关于 Navigation Compose 中类型安全的文档</a>。</p><h3 id="多平台资源" tabindex="-1">多平台资源 <a class="header-anchor" href="#多平台资源" aria-label="Permalink to &quot;多平台资源&quot;">​</a></h3><h4 id="资源打包到-android-assets-中" tabindex="-1">资源打包到 Android assets 中 <a class="header-anchor" href="#资源打包到-android-assets-中" aria-label="Permalink to &quot;资源打包到 Android assets 中&quot;">​</a></h4><p>所有多平台资源现在都打包到 Android assets 中。这允许 Android Studio 为 Android 源代码集中的 Compose Multiplatform 可组合项生成预览。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Android Studio 预览仅适用于 Android 源代码集中的可组合项。 它们还需要最新版本的 AGP 之一：8.5.2、8.6.0-rc01 或 8.7.0-alpha04。</p></div><p>这也提供了从 Android 上的 WebView 和媒体播放器组件直接访问多平台资源的途径， 因为资源可以通过简单路径访问，例如 <code>Res.getUri(“files/index.html”)</code>。</p><p>以下是一个 Android 可组合项的示例，它显示了一个带有资源图像链接的资源 HTML 页面：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// androidMain/kotlin/com/example/webview/App.kt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalResourceApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uri </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;files/webview/index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Adding a WebView inside AndroidView with layout as full screen.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        AndroidView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            WebView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                layoutParams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ViewGroup.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LayoutParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ViewGroup.LayoutParams.MATCH_PARENT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ViewGroup.LayoutParams.MATCH_PARENT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }, update </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uri)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此示例适用于以下简单的 HTML 文件：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Cat Resource</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cat.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>此示例中的两个资源文件都位于 <code>commonMain</code> 源代码集中：</p><p><img src="`+i+`" alt="File structure of the composeResources directory" width="230"></p><h4 id="自定义资源目录" tabindex="-1">自定义资源目录 <a class="header-anchor" href="#自定义资源目录" aria-label="Permalink to &quot;自定义资源目录&quot;">​</a></h4><p>通过配置 DSL 中的新 <code>customDirectory</code> 设置，您可以将<a href="./compose-multiplatform-resources-setup#custom-resource-directories">自定义目录</a>与特定源代码集关联起来。这使得例如可以使用下载的文件作为资源成为可能。</p><h4 id="多平台字体缓存" tabindex="-1">多平台字体缓存 <a class="header-anchor" href="#多平台字体缓存" aria-label="Permalink to &quot;多平台字体缓存&quot;">​</a></h4><p>Compose Multiplatform 将 Android 的字体缓存功能带到了其他平台， 消除了对 <code>Font</code> 资源过多的字节读取。</p><h4 id="支持多平台测试资源" tabindex="-1">支持多平台测试资源 <a class="header-anchor" href="#支持多平台测试资源" aria-label="Permalink to &quot;支持多平台测试资源&quot;">​</a></h4><p>资源库现在支持在您的项目中使用测试资源，这意味着您可以：</p><ul><li>将资源添加到测试源代码集。</li><li>使用仅在相应源代码集中可用的生成访问器。</li><li>仅在测试运行时将测试资源打包到应用中。</li></ul><h4 id="资源映射到字符串-id-以便轻松访问" tabindex="-1">资源映射到字符串 ID 以便轻松访问 <a class="header-anchor" href="#资源映射到字符串-id-以便轻松访问" aria-label="Permalink to &quot;资源映射到字符串 ID 以便轻松访问&quot;">​</a></h4><p>每种类型的资源都与其文件名进行映射。例如，您可以使用 <code>Res.allDrawableResources</code> 属性来获取所有 <code>drawable</code> 资源的 <code>map</code>，并通过传递其字符串 ID 来访问所需的资源：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.allDrawableResources[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose_multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="将字节数组转换为-imagebitmap-或-imagevector-的函数" tabindex="-1">将字节数组转换为 ImageBitmap 或 ImageVector 的函数 <a class="header-anchor" href="#将字节数组转换为-imagebitmap-或-imagevector-的函数" aria-label="Permalink to &quot;将字节数组转换为 ImageBitmap 或 ImageVector 的函数&quot;">​</a></h4><p>有新的函数可以将 <code>ByteArray</code> 转换为图像资源：</p><ul><li><code>decodeToImageBitmap()</code> 将 JPEG、PNG、BMP 或 WEBP 文件转换为 <code>ImageBitmap</code> 对象。</li><li><code>decodeToImageVector()</code> 将 XML 向量文件转换为 <code>ImageVector</code> 对象。</li><li><code>decodeToSvgPainter()</code> 将 SVG 文件转换为 <code>Painter</code> 对象。此函数在 Android 上不可用。</li></ul><p>有关详细信息，请参阅<a href="./compose-multiplatform-resources-usage#convert-byte-arrays-into-images">文档</a>。</p><h3 id="新公共模块" tabindex="-1">新公共模块 <a class="header-anchor" href="#新公共模块" aria-label="Permalink to &quot;新公共模块&quot;">​</a></h3><h4 id="material3-adaptive-adaptive" tabindex="-1">material3.adaptive:adaptive* <a class="header-anchor" href="#material3-adaptive-adaptive" aria-label="Permalink to &quot;material3.adaptive:adaptive*&quot;">​</a></h4><p>Material3 <code>adaptive</code> 模块现在在 Compose Multiplatform 的公共代码中可用。 要使用它们，请在模块的 <code>build.gradle.kts</code> 文件中显式添加相应的依赖项到公共源代码集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3.adaptive:adaptive:1.0.0-alpha03&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3.adaptive:adaptive-layout:1.0.0-alpha03&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3.adaptive:adaptive-navigation:1.0.0-alpha03&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="material3-material3-adaptive-navigation-suite" tabindex="-1">material3.material3-adaptive-navigation-suite <a class="header-anchor" href="#material3-material3-adaptive-navigation-suite" aria-label="Permalink to &quot;material3.material3-adaptive-navigation-suite&quot;">​</a></h4><p>Material3 <code>adaptive</code> 导航套件，对于使用 Compose <a href="https://developer.android.com/develop/ui/compose/layouts/adaptive/build-adaptive-navigation" target="_blank" rel="noreferrer">构建自适应导航</a>是必需的，在 Compose Multiplatform 的公共代码中可用。 要使用它，请在模块的 <code>build.gradle.kts</code> 文件中显式添加依赖项到公共源代码集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compose.material3AdaptiveNavigationSuite)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="material3-material3-window-size-class" tabindex="-1">material3:material3-window-size-class <a class="header-anchor" href="#material3-material3-window-size-class" aria-label="Permalink to &quot;material3:material3-window-size-class&quot;">​</a></h4><p>要使用 <a href="https://developer.android.com/reference/kotlin/androidx/compose/material3/windowsizeclass/package-summary" target="_blank" rel="noreferrer"><code>WindowSizeClass</code></a> 类，请在模块的 <code>build.gradle.kts</code> 文件中显式添加 <code>material3-window-size-class</code> 依赖项到公共源代码集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3:material3-window-size-class:1.7.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>calculateWindowSizeClass()</code> 函数尚未在公共代码中可用。 但是，您可以在平台特有的代码中导入并调用它，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// desktopMain/kotlin/main.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.material3.windowsizeclass.calculateWindowSizeClass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateWindowSizeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h4 id="material-navigation" tabindex="-1">material-navigation <a class="header-anchor" href="#material-navigation" aria-label="Permalink to &quot;material-navigation&quot;">​</a></h4><p><code>material-navigation</code> 库除了 Compose Multiplatform Navigation 之外，还在公共代码中可用。 要使用它，请在模块的 <code>build.gradle.kts</code> 文件中添加以下显式依赖项到公共源代码集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.androidx.navigation:navigation-compose:2.8.0-alpha10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material:material-navigation:1.7.0-beta02&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="skia-更新至-milestone-126" tabindex="-1">Skia 更新至 Milestone 126 <a class="header-anchor" href="#skia-更新至-milestone-126" aria-label="Permalink to &quot;Skia 更新至 Milestone 126&quot;">​</a></h3><p>Compose Multiplatform 通过 <a href="https://github.com/JetBrains/skiko" target="_blank" rel="noreferrer">Skiko</a> 使用的 Skia 版本已更新至 Milestone 126。</p><p>之前使用的 Skia 版本是 Milestone 116。您可以在<a href="./https://skia.googlesource.com/skia/+/refs/heads/main/RELEASE_NOTES#milestone-126">发布说明</a>中查看这些版本之间的变更。</p><h3 id="graphicslayer-–-新的绘图-api" tabindex="-1">GraphicsLayer – 新的绘图 API <a class="header-anchor" href="#graphicslayer-–-新的绘图-api" aria-label="Permalink to &quot;GraphicsLayer – 新的绘图 API&quot;">​</a></h3><p>Jetpack Compose 1.7.0 中添加的新绘图层现在在 Compose Multiplatform 中可用。</p><p>与 <code>Modifier.graphicsLayer</code> 不同，新的 <code>GraphicsLayer</code> 类允许您在任何地方渲染可组合内容。 在预期动画内容在不同场景中渲染的情况下，它很有用。</p><p>有关更详细的描述和示例，请参阅<a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/layer/GraphicsLayer" target="_blank" rel="noreferrer">参考文档</a>。</p><h3 id="locallifecycleowner-从-compose-ui-移出" tabindex="-1">LocalLifecycleOwner 从 Compose UI 移出 <a class="header-anchor" href="#locallifecycleowner-从-compose-ui-移出" aria-label="Permalink to &quot;LocalLifecycleOwner 从 Compose UI 移出&quot;">​</a></h3><p><code>LocalLifecycleOwner</code> 类已从 Compose UI 包移动到 Lifecycle 包。</p><p>此变更允许您独立于 Compose UI 访问该类并调用其基于 Compose 的辅助 API。 但是请记住，如果没有 Compose UI 绑定，<code>LocalLifecycleOwner</code> 实例将没有平台集成，因此也没有平台特有的事件可供监听。</p><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="ios-touch-interop" tabindex="-1">改进 Compose Multiplatform 与原生 iOS 之间的触控互操作性 <a class="header-anchor" href="#ios-touch-interop" aria-label="Permalink to &quot;改进 Compose Multiplatform 与原生 iOS 之间的触控互操作性 {id=&quot;ios-touch-interop&quot;}&quot;">​</a></h3><p>此版本改进了 iOS 互操作视图的触控处理。 Compose Multiplatform 现在尝试检测触控是针对互操作视图还是应由 Compose 处理。 这使得处理发生在您的 Compose Multiplatform 应用内 UIKit 或 SwiftUI 区域中的触控事件成为可能。</p><p>默认情况下，Compose Multiplatform 将延迟 150 毫秒向互操作视图传输触控事件：</p><ul><li>如果在此时间范围内，移动距离超过阈值， 父级可组合项将拦截触控序列，并且该序列将不会转发到互操作视图。</li><li>如果没有明显的移动，Compose 将不会处理触控序列的其余部分， 而是完全由互操作视图处理。</li></ul><p>此行为与原生 <code>UIScrollView</code> 的工作方式一致。 这有助于防止触控序列在互操作视图中开始后，在 Compose Multiplatform 无法感知的情况下被拦截的情况发生。这可能导致令人沮丧的用户体验。 例如，想象一个在可滚动上下文（例如 <code>lazy list</code>）中使用的巨型互操作视频播放器。 当屏幕大部分被一个拦截所有触控而 Compose Multiplatform 无法感知的视频占据时，滚动 <code>list</code> 会很棘手。</p><h3 id="原生性能改进" tabindex="-1">原生性能改进 <a class="header-anchor" href="#原生性能改进" aria-label="Permalink to &quot;原生性能改进&quot;">​</a></h3><p>借助 Kotlin 2.0.20，Kotlin/Native 团队在使 iOS 上的 Compose 应用运行更快、更流畅方面取得了很大进展。 Compose Multiplatform 1.7.3 版本利用了这些优化，并带来了 Jetpack Compose 1.7.0 的性能改进。</p><p>当比较 Compose Multiplatform 1.6.11 搭配 Kotlin 2.0.0 和 Compose Multiplatform 1.7.3 搭配 Kotlin 2.0.20 时，我们看到了全面更好的结果：</p><ul><li><code>LazyGrid</code> 基准测试模拟 <code>LazyVerticalGrid</code> 滚动，这最接近实际使用场景，平均性能提升约 9%。 它还显著减少了丢帧数量，这些丢帧通常会让用户感觉 UI 响应迟钝。 您可以亲自尝试：使用 Compose Multiplatform for iOS 构建的应用应该感觉更流畅。</li><li><code>VisualEffects</code> 基准测试渲染大量随机放置的组件，运行速度提高了 3.6 倍： 每 1000 帧的平均 CPU 时间从 8.8 秒减少到 2.4 秒。</li><li><code>AnimatedVisibility</code> 可组合项动画化地显示和隐藏图像，并展示了约 6% 的渲染速度提升。</li></ul><p>最重要的是，Kotlin 2.0.20 引入了垃圾回收器中<a href="https://kotlinlang.org/docs/whatsnew2020.html#concurrent-marking-in-garbage-collector" target="_blank" rel="noreferrer">并发标记</a>的实验性支持。启用并发标记缩短了垃圾回收器暂停时间，并为所有基准测试带来了更大的改进。</p><p>您可以在 Compose Multiplatform 版本库中查看这些 Compose 特有的基准测试代码：</p><ul><li><a href="https://github.com/JetBrains/compose-multiplatform/tree/master/benchmarks/kn-performance" target="_blank" rel="noreferrer">Kotlin/Native 性能基准测试</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/tree/master/benchmarks/ios/jvm-vs-kotlin-native" target="_blank" rel="noreferrer">Kotlin/JVM 对比 Kotlin/Native 基准测试</a></li></ul><h2 id="桌面" tabindex="-1">桌面 <a class="header-anchor" href="#桌面" aria-label="Permalink to &quot;桌面&quot;">​</a></h2><h3 id="拖放" tabindex="-1">拖放 <a class="header-anchor" href="#拖放" aria-label="Permalink to &quot;拖放&quot;">​</a></h3><p>拖放机制已在 Compose Multiplatform 桌面端实现，该机制使用户能够将内容拖入或拖出您的 Compose 应用程序。 要指定拖放的潜在来源和目标，请使用 <code>dragAndDropSource</code> 和 <code>dragAndDropTarget</code> 修饰符。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>虽然这些修饰符在公共代码中可用，但它们目前仅适用于桌面和 Android 源代码集。 敬请关注未来的版本。</p></div><p>对于常见用例，请参阅 Jetpack Compose 文档中的<a href="https://developer.android.com/develop/ui/compose/touch-input/user-interactions/drag-and-drop" target="_blank" rel="noreferrer">专用文章</a>。</p><h3 id="basictextfield-从-basictextfield2-重命名-在桌面端采用" tabindex="-1"><code>BasicTextField</code> (从 <code>BasicTextField2</code> 重命名) 在桌面端采用 <a class="header-anchor" href="#basictextfield-从-basictextfield2-重命名-在桌面端采用" aria-label="Permalink to &quot;\`BasicTextField\` (从 \`BasicTextField2\` 重命名) 在桌面端采用&quot;">​</a></h3><p>Jetpack Compose 已将 <code>BasicTextField2</code> 组件稳定化并将其重命名为 <code>BasicTextField</code>。 在此版本中，Compose Multiplatform 已为桌面目标采用此变更，并计划在稳定的 1.7.0 版本中也覆盖 iOS。</p><p>新的 <code>BasicTextField</code>：</p><ul><li>允许您更可靠地管理状态。</li><li>为文本字段内容的程序化变更提供了新的 <code>TextFieldBuffer</code> API。</li><li>包含了多个用于视觉转换和样式的全新 API。</li><li>提供对 <code>UndoState</code> 的访问，能够回溯到字段的先前状态。</li></ul><h3 id="composepanel-的渲染设置" tabindex="-1"><code>ComposePanel</code> 的渲染设置 <a class="header-anchor" href="#composepanel-的渲染设置" aria-label="Permalink to &quot;\`ComposePanel\` 的渲染设置&quot;">​</a></h3><p>通过在 <code>ComposePanel</code> 构造函数中指定新的 <code>RenderSettings.isVsyncEnabled</code> 参数，您可以向后端渲染实现提示禁用垂直同步。 这可以减少输入与 UI 变更之间的视觉延迟，但也可能导致屏幕撕裂。</p><p>默认行为保持不变：<code>ComposePanel</code> 尝试将可绘制的呈现与 VSync 同步。</p><h2 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h2><h3 id="skiko-js-对-kotlin-wasm-应用程序是冗余的" tabindex="-1"><code>skiko.js</code> 对 Kotlin/Wasm 应用程序是冗余的 <a class="header-anchor" href="#skiko-js-对-kotlin-wasm-应用程序是冗余的" aria-label="Permalink to &quot;\`skiko.js\` 对 Kotlin/Wasm 应用程序是冗余的&quot;">​</a></h3><p><code>skiko.js</code> 文件现在对于使用 Compose Multiplatform 构建的 Kotlin/Wasm 应用程序是冗余的。 您可以将其从 <code>index.html</code> 文件中移除，并改善您的应用加载时间。 <code>skiko.js</code> 将在未来版本中从 Kotlin/Wasm 分发中完全移除。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>skiko.js</code> 文件对于 Kotlin/JS 应用程序仍然是必需的。</p></div>`,110)]))}const g=e(o,[["render",n]]);export{E as __pageData,g as default};
