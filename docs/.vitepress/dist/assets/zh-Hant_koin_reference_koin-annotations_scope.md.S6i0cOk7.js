import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"Koin 註解中的作用域","description":"","frontmatter":{"title":"Koin 註解中的作用域"},"headers":[],"relativePath":"zh-Hant/koin/reference/koin-annotations/scope.md","filePath":"zh-Hant/koin/reference/koin-annotations/scope.md","lastUpdated":1748365453000}'),p={name:"zh-Hant/koin/reference/koin-annotations/scope.md"};function t(l,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="koin-註解中的作用域" tabindex="-1">Koin 註解中的作用域 <a class="header-anchor" href="#koin-註解中的作用域" aria-label="Permalink to &quot;Koin 註解中的作用域&quot;">​</a></h1><p>當使用定義與模組時，你可能需要為特定的空間與時間解析定義作用域。</p><h2 id="使用-scope-定義作用域" tabindex="-1">使用 @Scope 定義作用域 <a class="header-anchor" href="#使用-scope-定義作用域" aria-label="Permalink to &quot;使用 @Scope 定義作用域&quot;">​</a></h2><p>Koin 允許使用作用域，請參考 <a href="/zh-Hant/koin/reference/koin-core/scopes">Koin 作用域</a> 章節以獲取更多基本資訊。</p><p>若要使用註解宣告作用域，只需在類別上使用 <code>@Scope</code> 註解，如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopeClass</span></span></code></pre></div><blockquote><p>這將等同於以下作用域區塊：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></blockquote><p>此外，如果你需要作用域名稱而非型別，你需要使用 <code>@Scope(name = )</code> 註解，並利用 <code>name</code> 參數標記類別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopeClass</span></span></code></pre></div><blockquote><p>這將等同於</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_scope_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;)&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></blockquote><h2 id="使用-scoped-在作用域中新增定義" tabindex="-1">使用 @Scoped 在作用域中新增定義 <a class="header-anchor" href="#使用-scoped-在作用域中新增定義" aria-label="Permalink to &quot;使用 @Scoped 在作用域中新增定義&quot;">​</a></h2><p>若要在作用域（無論是否使用註解定義）中宣告定義，只需使用 <code>@Scope</code> 和 <code>@Scoped</code> 註解標記類別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopedComponent</span></span></code></pre></div><p>這將在作用域區塊中生成正確的定義：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_scope_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;)&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  scoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>你需要這兩個註解，以指示所需的作用域空間（使用 <code>@Scope</code>）以及要定義的元件類型（使用 <code>@Scoped</code>）。</p></div><h2 id="從作用域解析依賴項" tabindex="-1">從作用域解析依賴項 <a class="header-anchor" href="#從作用域解析依賴項" aria-label="Permalink to &quot;從作用域解析依賴項&quot;">​</a></h2><p>從一個作用域定義中，你可以解析來自內部作用域及父作用域的任何定義。</p><p>例如，以下情況將會生效：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySingle</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySingle : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MySingle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myOtherScopedComponent :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyOtherScopedComponent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyOtherScopedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySingle : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MySingle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>元件 <code>MySingle</code> 在根（root）中定義為 <code>single</code> 定義。<code>MyScopedComponent</code> 和 <code>MyOtherScopedComponent</code> 定義在 &quot;my_scope_name&quot; 作用域中。 <code>MyScopedComponent</code> 的依賴項解析會透過 <code>MySingle</code> 實例存取 Koin 根，並從當前的 &quot;my_scope_name&quot; 作用域取得 <code>MyOtherScopedComponent</code> 的作用域實例。</p><h2 id="使用-scopeid-在作用域外部解析-自-1-3-0-起" tabindex="-1">使用 @ScopeId 在作用域外部解析 (自 1.3.0 起) <a class="header-anchor" href="#使用-scopeid-在作用域外部解析-自-1-3-0-起" aria-label="Permalink to &quot;使用 @ScopeId 在作用域外部解析 (自 1.3.0 起)&quot;">​</a></h2><p>你可能需要從另一個作用域解析元件，而該作用域無法直接從你的作用域存取。為此，你需要使用 <code>@ScopeId</code> 註解標記你的依賴項，以告知 Koin 在給定作用域 ID 的作用域中尋找此依賴項。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Factory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  @ScopeId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_scope_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myScopedComponent :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopedComponent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>上述程式碼等同於生成的：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Myfactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_scope_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) }</span></span></code></pre></div><p>這個範例顯示 <code>MyFactory</code> 元件將從 ID 為 &quot;my_scope_id&quot; 的作用域實例解析 <code>MyScopedComponent</code> 元件。這個以 &quot;my_scope_id&quot; 為 ID 建立的作用域需要以正確的作用域定義來建立。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>MyScopedComponent</code> 元件需要在作用域區塊中定義，並且作用域實例需要以 &quot;my_scope_id&quot; 為 ID 建立。</p></div>`,28)]))}const g=i(p,[["render",t]]);export{r as __pageData,g as default};
