import{_ as i,a,b as n,c as e,d as o,e as l,f as t,g as p,h as d,i as c}from"./chunks/ios-compilation-diagram.XqBtYEgD.js";import{_ as h,c as k,o as r,ag as E}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"マルチプラットフォームプロジェクト構造の高度な概念","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-advanced-project-structure.md","filePath":"ja/kmp/multiplatform-advanced-project-structure.md","lastUpdated":1755516278000}'),g={name:"ja/kmp/multiplatform-advanced-project-structure.md"};function m(u,s,y,F,v,M){return r(),k("div",null,s[0]||(s[0]=[E('<h1 id="マルチプラットフォームプロジェクト構造の高度な概念" tabindex="-1">マルチプラットフォームプロジェクト構造の高度な概念 <a class="header-anchor" href="#マルチプラットフォームプロジェクト構造の高度な概念" aria-label="Permalink to &quot;マルチプラットフォームプロジェクト構造の高度な概念&quot;">​</a></h1><p>この記事では、Kotlin Multiplatformプロジェクト構造の高度な概念と、それらがGradleの実装にどのように対応するかを説明します。この情報は、Gradleビルドの低レベルの抽象化（構成 (configurations)、タスク (tasks)、公開 (publications) など）を扱う必要がある場合や、Kotlin Multiplatformビルド用のGradleプラグインを作成する場合に役立ちます。</p><p>このページは、以下のような場合に役立ちます。</p><ul><li>Kotlinがソースセットを作成しないターゲット群の間でコードを共有する必要がある場合。</li><li>Kotlin Multiplatformビルド用のGradleプラグインを作成したい場合、または構成 (configurations)、タスク (tasks)、公開 (publications) など、Gradleビルドの低レベルの抽象化を扱う必要がある場合。</li></ul><p>マルチプラットフォームプロジェクトにおける依存関係管理で理解すべき重要な点の1つは、Gradleスタイルのプロジェクトまたはライブラリの依存関係と、Kotlinに特有のソースセット間の<code>dependsOn</code>関係との違いです。</p><ul><li><code>dependsOn</code>は、共通ソースセットとプラットフォーム固有ソースセット間の関係であり、<a href="#dependson-and-source-set-hierarchies">ソースセット階層</a>とマルチプラットフォームプロジェクトでの一般的なコード共有を可能にします。デフォルトのソースセットの場合、階層は自動的に管理されますが、特定の状況で変更する必要がある場合があります。</li><li>ライブラリとプロジェクトの依存関係は一般的に通常通り機能しますが、マルチプラットフォームプロジェクトでそれらを適切に管理するには、<a href="#dependencies-on-other-libraries-or-projects">Gradleの依存関係がどのように解決されるか</a>を理解し、コンパイルに使用される粒度の高い<strong>ソースセット → ソースセット</strong>の依存関係に変換する方法を知る必要があります。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>高度な概念に入る前に、<a href="./multiplatform-discover-project">マルチプラットフォームプロジェクト構造の基本</a>を学ぶことをお勧めします。</p></div><h2 id="dependsonとソースセット階層" tabindex="-1">dependsOnとソースセット階層 <a class="header-anchor" href="#dependsonとソースセット階層" aria-label="Permalink to &quot;dependsOnとソースセット階層&quot;">​</a></h2><p>通常、あなたは_依存関係_を扱い、_<code>dependsOn</code>_関係を扱うことはありません。しかし、<code>dependsOn</code>を調べることは、Kotlin Multiplatformプロジェクトが内部でどのように機能するかを理解するために不可欠です。</p><p><code>dependsOn</code>は、2つのKotlinソースセット間のKotlinに特有の関係です。これは、<code>jvmMain</code>ソースセットが<code>commonMain</code>に依存し、<code>iosArm64Main</code>が<code>iosMain</code>に依存する、といった共通ソースセットとプラットフォーム固有ソースセット間の接続であり得ます。</p><p>Kotlinソースセット<code>A</code>と<code>B</code>の一般的な例を考えてみましょう。<code>A.dependsOn(B)</code>という表現は、Kotlinに対して以下を指示します。</p><ol><li><code>A</code>は、内部宣言を含む<code>B</code>のAPIを参照します。</li><li><code>A</code>は、<code>B</code>の期待される宣言に対してactual実装を提供できます。これは必要十分条件です。なぜなら、<code>A</code>が<code>B</code>に対して<code>actuals</code>を提供できるのは、<code>A.dependsOn(B)</code>が直接的または間接的に存在する場合に限られるからです。</li><li><code>B</code>は、自身のターゲットに加えて、<code>A</code>がコンパイルするすべてのターゲットに対してもコンパイルされるべきです。</li><li><code>A</code>は、<code>B</code>のすべての通常の依存関係を継承します。</li></ol><p><code>dependsOn</code>関係は、ソースセット階層として知られるツリーのような構造を作成します。以下は、<code>androidTarget</code>、<code>iosArm64</code>（iPhoneデバイス）、および<code>iosSimulatorArm64</code>（Apple Silicon Mac用のiPhoneシミュレーター）を含むモバイル開発の典型的なプロジェクトの例です。</p><p><img src="'+i+'" alt="DependsOn tree structure" width="700"></p><p>矢印は<code>dependsOn</code>関係を表します。 これらの関係は、プラットフォームバイナリのコンパイル中に保持されます。これにより、Kotlinは<code>iosMain</code>が<code>commonMain</code>のAPIを参照するように意図されているが、<code>iosArm64Main</code>のAPIではないことを理解します。</p><p><img src="'+a+`" alt="DependsOn relations during compilation" width="700"></p><p><code>dependsOn</code>関係は、<code>KotlinSourceSet.dependsOn(KotlinSourceSet)</code>呼び出しで構成されます。例えば、以下のように記述します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Targets declaration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Example of configuring the dependsOn relation </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        iosArm64Main.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>この例は、ビルドスクリプトで<code>dependsOn</code>関係を定義する方法を示しています。しかし、Kotlin Gradleプラグインはデフォルトでソースセットを作成し、これらの関係を設定するため、手動で行う必要はありません。</li><li><code>dependsOn</code>関係は、ビルドスクリプトの<code>dependencies {}</code>ブロックとは別に宣言されます。これは、<code>dependsOn</code>が通常の依存関係ではなく、異なるターゲット間でコードを共有するために必要なKotlinソースセット間の特定の関係だからです。</li></ul><p>公開されたライブラリや他のGradleプロジェクトへの通常の依存関係を宣言するために<code>dependsOn</code>を使用することはできません。例えば、<code>commonMain</code>を<code>kotlinx-coroutines-core</code>ライブラリの<code>commonMain</code>に依存させたり、<code>commonTest.dependsOn(commonMain)</code>を呼び出したりすることはできません。</p><h3 id="カスタムソースセットの宣言" tabindex="-1">カスタムソースセットの宣言 <a class="header-anchor" href="#カスタムソースセットの宣言" aria-label="Permalink to &quot;カスタムソースセットの宣言&quot;">​</a></h3><p>場合によっては、プロジェクトにカスタムの中間ソースセットが必要になることがあります。JVM、JS、Linuxにコンパイルされるプロジェクトで、JVMとJSの間だけで一部のソースを共有したいとします。この場合、<a href="./multiplatform-discover-project">マルチプラットフォームプロジェクト構造の基本</a>で説明されているように、このターゲットのペアに特化したソースセットを見つける必要があります。</p><p>Kotlinはそのようなソースセットを自動的に作成しません。そのため、<code>by creating</code>コンストラクションを使用して手動で作成する必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Create a source set named &quot;jvmAndJs&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmAndJsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // …</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>しかし、Kotlinはまだこのソースセットをどのように扱うか、またはコンパイルするかを知りません。図を描くと、このソースセットは孤立しており、どのターゲットラベルも持たないでしょう。</p><p><img src="`+n+`" alt="Missing dependsOn relation" width="700"></p><p>これを修正するには、いくつかの<code>dependsOn</code>関係を追加して、<code>jvmAndJsMain</code>を階層に含めます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmAndJsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Don&#39;t forget to add dependsOn to commonMain</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        jvmMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jvmAndJsMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        jsMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jvmAndJsMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ここで、<code>jvmMain.dependsOn(jvmAndJsMain)</code>はJVMターゲットを<code>jvmAndJsMain</code>に追加し、<code>jsMain.dependsOn(jvmAndJsMain)</code>はJSターゲットを<code>jvmAndJsMain</code>に追加します。</p><p>最終的なプロジェクト構造は次のようになります。</p><p><img src="`+e+`" alt="Final project structure" width="700"></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>dependsOn</code>関係を手動で構成すると、デフォルトの階層テンプレートの自動適用が無効になります。<a href="./multiplatform-hierarchy#additional-configuration">追加設定</a>で、そのようなケースとそれらの対処方法について詳しく学んでください。</p></div><h2 id="他のライブラリやプロジェクトへの依存関係" tabindex="-1">他のライブラリやプロジェクトへの依存関係 <a class="header-anchor" href="#他のライブラリやプロジェクトへの依存関係" aria-label="Permalink to &quot;他のライブラリやプロジェクトへの依存関係&quot;">​</a></h2><p>マルチプラットフォームプロジェクトでは、公開されたライブラリまたは他のGradleプロジェクトに通常の依存関係を設定できます。</p><p>Kotlin Multiplatformでは、一般的にGradleの典型的な方法で依存関係を宣言します。Gradleと同様に、次のことを行います。</p><ul><li>ビルドスクリプトで<code>dependencies {}</code>ブロックを使用します。</li><li><code>implementation</code>や<code>api</code>など、依存関係に適切なスコープを選択します。</li><li>依存関係を、リポジトリで公開されている場合は<code>&quot;com.google.guava:guava:32.1.2-jre&quot;</code>のように座標を指定するか、同じビルド内のGradleプロジェクトである場合は<code>project(&quot;:utils:concurrency&quot;)</code>のようにそのパスを指定して参照します。</li></ul><p>マルチプラットフォームプロジェクトにおける依存関係の構成には、いくつかの特別な機能があります。各Kotlinソースセットは独自の<code>dependencies {}</code>ブロックを持っています。これにより、プラットフォーム固有のソースセットでプラットフォーム固有の依存関係を宣言できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Targets declaration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // This is jvmMain&#39;s dependencies, so it&#39;s OK to add a JVM-specific dependency</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.guava:guava:32.1.2-jre&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>共通の依存関係はより複雑です。例えば、<code>kotlinx.coroutines</code>のようなマルチプラットフォームライブラリへの依存関係を宣言するマルチプラットフォームプロジェクトを考えてみましょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Android</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iPhone devices </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iPhone simulator on Apple Silicon Mac</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>依存関係の解決には、3つの重要な概念があります。</p><ol><li><p>マルチプラットフォームの依存関係は、<code>dependsOn</code>構造を下って伝播されます。<code>commonMain</code>に依存関係を追加すると、<code>commonMain</code>に対して直接的または間接的に<code>dependsOn</code>関係を宣言するすべてのソースセットに自動的に追加されます。</p><p>この場合、依存関係は実際にすべての<code>*Main</code>ソースセット（<code>iosMain</code>、<code>jvmMain</code>、<code>iosSimulatorArm64Main</code>、<code>iosX64Main</code>）に自動的に追加されました。これらのソースセットはすべて<code>commonMain</code>ソースセットから<code>kotlin-coroutines-core</code>の依存関係を継承するため、手動ですべてにコピー＆ペーストする必要はありません。</p><p><img src="`+o+'" alt="Propagation of multiplatform dependencies" width="700"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>伝播メカニズムにより、特定のソースセットを選択することで、宣言された依存関係を受け取るスコープを選択できます。例えば、<code>kotlinx.coroutines</code>をiOSで使用したいがAndroidでは使用したくない場合、この依存関係を<code>iosMain</code>にのみ追加できます。</p></div></li><li><p>上記の<code>commonMain</code>から<code>org.jetbrians.kotlinx:kotlinx-coroutines-core:1.7.3</code>のような_ソースセット → マルチプラットフォームライブラリ_の依存関係は、依存関係解決の中間状態を表します。解決の最終状態は常に_ソースセット → ソースセット_の依存関係で表されます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>最終的な_ソースセット → ソースセット_の依存関係は、<code>dependsOn</code>関係ではありません。</p></div><p>粒度の高い_ソースセット → ソースセット_の依存関係を推論するために、Kotlinは各マルチプラットフォームライブラリと共に公開されるソースセット構造を読み取ります。このステップの後、各ライブラリは全体としてではなく、そのソースセットのコレクションとして内部的に表現されます。<code>kotlinx-coroutines-core</code>の例を見てください。</p><p><img src="'+l+'" alt="Serialization of the source set structure" width="700"></p></li><li><p>Kotlinは各依存関係を取り込み、それを依存関係からのソースセットのコレクションに解決します。そのコレクション内の各依存ソースセットは、_互換性のあるターゲット_を持っている必要があります。依存ソースセットが互換性のあるターゲットを持っているのは、コンシューマーソースセットと同じか、それ以上のターゲットにコンパイルされる場合です。</p><p>サンプルプロジェクトの<code>commonMain</code>が<code>androidTarget</code>、<code>iosX64</code>、および<code>iosSimulatorArm64</code>にコンパイルされる例を考えてみましょう。</p><ul><li>まず、<code>kotlinx-coroutines-core.commonMain</code>への依存関係を解決します。これは、<code>kotlinx-coroutines-core</code>がすべての可能なKotlinターゲットにコンパイルされるためです。したがって、その<code>commonMain</code>は、必要な<code>androidTarget</code>、<code>iosX64</code>、および<code>iosSimulatorArm64</code>を含むすべての可能なターゲットにコンパイルされます。</li><li>次に、<code>commonMain</code>は<code>kotlinx-coroutines-core.concurrentMain</code>に依存します。<code>kotlinx-coroutines-core</code>の<code>concurrentMain</code>はJSを除くすべてのターゲットにコンパイルされるため、コンシューマープロジェクトの<code>commonMain</code>のターゲットに一致します。</li></ul><p>しかし、コルーチンからの<code>iosX64Main</code>のようなソースセットは、コンシューマーの<code>commonMain</code>とは互換性がありません。<code>iosX64Main</code>は<code>commonMain</code>のターゲットの1つである<code>iosX64</code>にコンパイルされますが、<code>androidTarget</code>にも<code>iosSimulatorArm64</code>にもコンパイルされないからです。</p><p>依存関係解決の結果は、<code>kotlinx-coroutines-core</code>のどのコードが可視になるかに直接影響します。</p><p><img src="'+t+'" alt="Error on JVM-specific API in common code" width="700"></p></li></ol><h3 id="ソースセット間で共通の依存関係のバージョンを調整する" tabindex="-1">ソースセット間で共通の依存関係のバージョンを調整する <a class="header-anchor" href="#ソースセット間で共通の依存関係のバージョンを調整する" aria-label="Permalink to &quot;ソースセット間で共通の依存関係のバージョンを調整する&quot;">​</a></h3><p>Kotlin Multiplatformプロジェクトでは、共通ソースセットは、klibを生成し、構成された各<a href="./multiplatform-configure-compilations">コンパイル</a>の一部として、複数回コンパイルされます。一貫性のあるバイナリを生成するには、共通コードは毎回同じバージョンのマルチプラットフォーム依存関係に対してコンパイルされるべきです。Kotlin Gradleプラグインはこれらの依存関係を調整し、各ソースセットで実効的な依存関係のバージョンが同じであることを保証します。</p><p>上記の例で、<code>androidMain</code>ソースセットに<code>androidx.navigation:navigation-compose:2.7.7</code>依存関係を追加したいとします。あなたのプロジェクトは<code>commonMain</code>ソースセットに対して<code>kotlinx-coroutines-core:1.7.3</code>依存関係を明示的に宣言していますが、Compose Navigationライブラリのバージョン2.7.7はKotlinコルーチン1.8.0以降を必要とします。</p><p><code>commonMain</code>と<code>androidMain</code>は一緒にコンパイルされるため、Kotlin Gradleプラグインはコルーチンライブラリの2つのバージョンの中から選択し、<code>commonMain</code>ソースセットに<code>kotlinx-coroutines-core:1.8.0</code>を適用します。しかし、共通コードがすべての設定されたターゲットで一貫してコンパイルされるように、iOSソースセットも同じ依存関係バージョンに制約される必要があります。そのため、Gradleは<code>kotlinx.coroutines-*:1.8.0</code>依存関係を<code>iosMain</code>ソースセットにも伝播させます。</p><p><img src="'+p+'" alt="Alignment of dependencies among *Main source sets" width="700"></p><p>依存関係は、<code>*Main</code>ソースセットと<a href="./multiplatform-discover-project#integration-with-tests"><code>*Test</code>ソースセット</a>の間で別々に調整されます。<code>*Test</code>ソースセットのGradle構成には<code>*Main</code>ソースセットのすべての依存関係が含まれますが、その逆はありません。これにより、メインコードに影響を与えることなく、新しいライブラリバージョンでプロジェクトをテストできます。</p><p>例えば、<code>*Main</code>ソースセットにはKotlinコルーチン1.7.3の依存関係があり、それがプロジェクトのすべてのソースセットに伝播されているとします。しかし、<code>iosTest</code>ソースセットでは、新しいライブラリリリースを試すためにバージョンを1.8.0にアップグレードすることにしました。同じアルゴリズムに従って、この依存関係は<code>*Test</code>ソースセットのツリー全体に伝播されるため、すべての<code>*Test</code>ソースセットは<code>kotlinx.coroutines-*:1.8.0</code>依存関係でコンパイルされます。</p><p><img src="'+d+'" alt="Test source sets resolving dependencies separately from the main source sets"></p><h2 id="コンパイル" tabindex="-1">コンパイル <a class="header-anchor" href="#コンパイル" aria-label="Permalink to &quot;コンパイル&quot;">​</a></h2><p>シングルプラットフォームプロジェクトとは異なり、Kotlin Multiplatformプロジェクトでは、すべてのアーティファクトをビルドするために複数回のコンパイラ起動を必要とします。各コンパイラの起動は_Kotlinコンパイル_です。</p><p>例えば、前述のKotlinコンパイル中にiPhoneデバイス用のバイナリがどのように生成されるかを見てみましょう。</p><p><img src="'+c+`" alt="Kotlin compilation for iOS" width="700"></p><p>Kotlinコンパイルはターゲットの下にグループ化されます。デフォルトでは、Kotlinは各ターゲットに対して2つのコンパイルを作成します。プロダクションソース用の<code>main</code>コンパイルと、テストソース用の<code>test</code>コンパイルです。</p><p>ビルドスクリプトでのコンパイルへのアクセスも同様の方法で行われます。まずKotlinターゲットを選択し、次にその内部の<code>compilations</code>コンテナにアクセスし、最後に名前で必要なコンパイルを選択します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Declare and configure the JVM target</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mainCompilation: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinJvmCompilation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,57)]))}const C=h(g,[["render",m]]);export{_ as __pageData,C as default};
