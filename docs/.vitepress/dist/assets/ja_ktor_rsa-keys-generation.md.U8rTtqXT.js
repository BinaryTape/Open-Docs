import{_ as r,C as p,c,o as u,j as i,G as a,ag as n,a as e,w as t}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/rsa-keys-generation.md","filePath":"ja/ktor/rsa-keys-generation.md","lastUpdated":1755457140000}'),g={name:"ja/ktor/rsa-keys-generation.md"};function F(y,s,b,C,E,_){const k=p("show-structure"),h=p("tldr"),o=p("warning"),l=p("code-block"),d=p("note");return u(),c("div",null,[s[6]||(s[6]=i("h1",{id:"rsaキーの生成",tabindex:"-1"},[e("RSAキーの生成 "),i("a",{class:"header-anchor",href:"#rsaキーの生成","aria-label":'Permalink to "RSAキーの生成"'},"​")],-1)),a(k,{for:"chapter",depth:"2"}),a(h,null,{default:t(()=>s[0]||(s[0]=[i("p",null,[i("b",null,"コード例"),e(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-jwt-rs256"}," auth-jwt-rs256 ")],-1)])),_:1}),s[7]||(s[7]=i("p",null,[i("a",{href:"https://en.wikipedia.org/wiki/RSA_(cryptosystem)",target:"_blank",rel:"noreferrer"},"RSA (Rivest–Shamir–Adleman)"),e("は、安全なデータ送信、デジタル署名、鍵交換を可能にする広く使用されている公開鍵暗号システムです。")],-1)),s[8]||(s[8]=i("p",null,"RSA暗号アルゴリズムの一部であるRS256は、ハッシュ化にSHA-256を利用し、鍵（通常は2048ビット、4096ビット以上）を使用してデジタル通信を安全にします。",-1)),s[9]||(s[9]=i("p",null,[i("a",{href:"https://jwt.io/",target:"_blank",rel:"noreferrer"},"JSON Web Token (JWT)"),e("認証の分野では、RS256は重要な役割を果たします。なぜなら、公開鍵/秘密鍵のペアが使用されるRS256などの署名メカニズムを通じて、JWTの整合性と信頼性を検証できるからです。これにより、トークンに含まれる情報が改ざん防止され、信頼できるものとして維持されます。")],-1)),s[10]||(s[10]=i("p",null,[e("このセクションでは、Ktorが提供する"),i("a",{href:"./server-jwt"},"Authentication JWT"),e("プラグインとともに、そのような鍵がどのように生成され、使用されるかを学びます。")],-1)),a(o,null,{default:t(()=>s[1]||(s[1]=[i("p",null," 本番環境での使用には、RSAと比較してより効率的で安全な暗号化に基づく[ES256](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm)のような、よりモダンな代替手段を選択することをお勧めします。 ",-1)])),_:1}),s[11]||(s[11]=i("h2",{id:"rsa秘密鍵の生成",tabindex:"-1"},[e("RSA秘密鍵の生成 "),i("a",{class:"header-anchor",href:"#rsa秘密鍵の生成","aria-label":'Permalink to "RSA秘密鍵の生成"'},"​")],-1)),s[12]||(s[12]=i("p",null,[e("秘密鍵を生成するには、OpenSSL、"),i("code",null,"ssh-keygen"),e("、または認証鍵ペアを作成するための別のツールを使用できます。デモンストレーション目的のため、OpenSSLを使用します。")],-1)),s[13]||(s[13]=i("p",null,"新しいターミナルウィンドウで、次のコマンドを実行します。",-1)),a(l,{lang:"shell",code:"openssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 &gt; ktor.pk8"}),s[14]||(s[14]=n('<p><a href="https://www.openssl.org/docs/man3.0/man1/openssl-genpkey.html" target="_blank" rel="noreferrer">openssl genpkey</a>コマンドは、RSAアルゴリズムを使用して2048ビットの秘密鍵を生成し、指定されたファイル（この場合は<code>ktor.pk8</code>）に保存します。ファイルのコンテンツは<a href="https://en.wikipedia.org/wiki/Base64" target="_blank" rel="noreferrer">Base64</a>エンコードされているため、公開鍵を派生させる前にデコードする必要があります。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="https://github.com/ktorio/ktor-documentation/blob/3.2.3/codeSnippets/snippets/auth-jwt-rs256/" target="_blank" rel="noreferrer">コード例</a>から秘密鍵を使用するには、<code>src/main/resources</code>内の<code>application.conf</code>ファイルに移動し、新しい<code>.pk8</code>ファイルに秘密鍵を抽出してください。</p></div><h2 id="second-step" tabindex="-1">公開鍵の派生 <a class="header-anchor" href="#second-step" aria-label="Permalink to &quot;公開鍵の派生 {id=&quot;second-step&quot;}&quot;">​</a></h2><p>以前に生成した秘密鍵から公開鍵を派生させるには、以下の手順を実行する必要があります。</p><ol><li>秘密鍵をデコードします。</li><li>公開鍵を抽出します。</li><li>公開鍵をPEM形式で保存します。</li></ol><p>OpenSSLでこれを行うには、次のコマンドを実行します。</p>',6)),a(l,{lang:"shell",code:"openssl rsa -in ktor.pk8 -pubout | tee ktor.spki"}),s[15]||(s[15]=n('<ul><li><code>openssl rsa</code>: これはRSA鍵を扱うための<code>OpenSSL</code>コマンドです。このコンテキストでは、RSA鍵に関連する操作を実行するために使用されます。</li><li><code>-in ktor.pk8</code>: このオプションは、OpenSSLがRSA秘密鍵を読み取る入力ファイル（<code>ktor.pk8</code>）を指定します。</li><li><code>-pubout</code>: このオプションは、入力ファイルで提供された秘密鍵に対応する公開鍵を出力するようにOpenSSLに指示します。</li><li><code>|</code>: パイプ（|）記号は、前のコマンド（<code>openssl rsa</code>によって生成された公開鍵）の出力を<code>tee</code>コマンドにリダイレクトするために使用されます。</li><li><code>tee ktor.spki</code>: <code>tee</code>は、標準入力から読み取り、標準出力と1つ以上のファイルの両方に書き込むコマンドラインユーティリティです。このコマンドの一部は、<code>tee</code>に受信した入力を<code>ktor.spki</code>というファイルに書き込むように指示します。したがって、公開鍵はターミナルに表示され、<code>ktor.spki</code>ファイルに保存されます。</li></ul><p>公開鍵があれば、その指数とモジュラスの値を導出できます。</p><h2 id="モジュラスと指数属性の抽出" tabindex="-1">モジュラスと指数属性の抽出 <a class="header-anchor" href="#モジュラスと指数属性の抽出" aria-label="Permalink to &quot;モジュラスと指数属性の抽出&quot;">​</a></h2><p>鍵ペアが手元にあるので、<code>jwks.json</code>ファイルで使用するために、公開鍵の<code>e</code>（指数）および<code>n</code>（モジュラス）属性を抽出する必要があります。これには以下の手順が必要です。</p><ol><li>作成した<code>.spki</code>ファイルから公開鍵を読み取ります。</li><li>鍵に関する情報を人間が読める形式で表示します。</li></ol><p>OpenSSLを使用してこれを行うには、次のコマンドを実行します。</p>',6)),a(l,{lang:"shell",code:"openssl pkey -in ktor.spki -pubin -noout -text"}),s[16]||(s[16]=n(`<ul><li><code>pkey</code>: これは秘密鍵と公開鍵を処理するためのOpenSSLコマンドラインユーティリティです。</li><li><code>-in ktor.spki</code>: PEM形式の公開鍵を含む入力ファイルを指定します。この場合、入力ファイルは<code>ktor.spki</code>です。</li><li><code>-pubin</code>: 入力ファイルに公開鍵が含まれていることを示します。このオプションがない場合、OpenSSLは入力ファイルに秘密鍵が含まれていると仮定します。</li><li><code>-noout</code>: このオプションは、OpenSSLがエンコードされた公開鍵を出力するのを防ぎます。コマンドは公開鍵に関する情報のみを表示し、実際の鍵はコンソールに表示されません。</li><li><code>-text</code>: OpenSSLに鍵のテキスト表現を表示するよう要求します。これには、鍵のタイプ、サイズ、および人間が読める形式の実際の鍵データなどの詳細が含まれます。</li></ul><p>期待される出力は次のようになります。</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pkey</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ktor.spki</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -pubin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -noout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -text</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RSA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Public-Key:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (512 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Modulus:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    00:b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    2b:d0:87:b4:01</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exponent:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 65537</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x10001)</span></span></code></pre></div>`,3)),a(o,null,{default:t(()=>s[2]||(s[2]=[i("p",null," この例では公開鍵が512ビットを使用しており、安全ではないことに注意してください。理想的には、2048ビットまたは4096ビットの鍵を選択すべきです。 ",-1)])),_:1}),s[17]||(s[17]=n('<h2 id="モジュラスと指数属性の変換とエンコード" tabindex="-1">モジュラスと指数属性の変換とエンコード <a class="header-anchor" href="#モジュラスと指数属性の変換とエンコード" aria-label="Permalink to &quot;モジュラスと指数属性の変換とエンコード&quot;">​</a></h2><p>前のステップで、<code>jwks.json</code>ファイルに必要な<code>n</code>と<code>e</code>属性を抽出しました。しかし、それらは16進数形式です。次に、指数とモジュラスの16進数表現をそれぞれの<a href="https://en.wikipedia.org/wiki/Base64#URL_applications" target="_blank" rel="noreferrer">Base64URL</a>エンコーディングに変換する必要があります。</p><h3 id="指数" tabindex="-1">指数 <a class="header-anchor" href="#指数" aria-label="Permalink to &quot;指数&quot;">​</a></h3><p>指数属性のHEX値は<code>0x10001</code>です。この値をBase64URLに変換するには、次のコマンドを使用します。</p>',4)),a(l,{lang:"shell",code:"echo 010001 | xxd -p -r | base64 "}),s[18]||(s[18]=n("<ul><li><code>echo 010001</code>: このコマンドの一部は、<code>echo</code>コマンドを使用して文字列「010001」を標準出力に出力します。これはRSA鍵の公開指数（e）を表します。</li><li><code>|</code>: <code>|</code>文字はパイプであり、先行するコマンドの出力を受け取り、それを次のコマンドへの入力として渡します。</li><li><code>xxd -p -r</code>: このコマンドは16進数をバイナリに変換するために使用されます。16進数入力を受け取り、対応するバイナリ出力を生成します。</li><li><code>| base64</code>: このコマンドの一部は、前のステップからのバイナリ出力を受け取り、<code>base64</code>コマンドを使用してBase64形式でエンコードします。</li></ul>",1)),a(d,null,{default:t(()=>s[3]||(s[3]=[i("p",null," 左側に0を追加することで、HEX桁の数が偶数になるようにしています。 ",-1)])),_:1}),s[19]||(s[19]=n(`<p>前述の指数値に対する期待される出力は次のとおりです。</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 010001</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xxd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AQAB</span></span></code></pre></div><p>指数のBase64URLエンコード値は<code>AQAB</code>であり、このケースではそれ以上の処理は必要ありません。他のケースでは、次のステップで示すように<code>tr</code>コマンドを使用する必要があるかもしれません。</p><h3 id="モジュラス" tabindex="-1">モジュラス <a class="header-anchor" href="#モジュラス" aria-label="Permalink to &quot;モジュラス&quot;">​</a></h3><p><code>n</code>属性については、<code>tr</code>ユーティリティを使用してモジュラスの16進数表現をさらに処理します。</p>`,5)),a(l,{lang:"shell",code:`echo "b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:
    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:
    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:
    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:
    2b:d0:87:b4:01" | tr -d ": 
" | xxd -p -r | base64 | tr +/ -_ | tr -d "=
"`}),a(d,null,{default:t(()=>s[4]||(s[4]=[i("p",null," 先頭の00バイトは省略されていることに注意してください。モジュラスの先頭の00バイトは、RSA公開鍵のASN.1エンコーディングに関連しています。整数のASN.1 DERエンコーディングでは、整数の最上位ビットが0である場合、先頭のゼロバイトは削除されます。これはASN.1エンコーディング規則の標準的な部分です。RSA公開鍵のコンテキストでは、モジュラスはビッグエンディアン整数であり、DERエンコーディングで表現される場合、これらの規則に従います。先頭のゼロバイトの削除は、整数がDER規則に従って正しく解釈されることを保証するために行われます。 ",-1)])),_:1}),s[20]||(s[20]=n(`<ul><li><code>echo &quot;b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5: \\ ... &quot;</code>: このコマンドの一部は、一連のバイトを表す複数行の16進数文字列をエコーします。各行の末尾にあるバックスラッシュは行の継続を示します。</li><li><code>tr -d &quot;: &quot;</code>: <code>tr</code>コマンドは、引数リストで指定された文字を削除するために使用されます。ここでは、16進数文字列からコロン、スペース、改行文字を削除し、連続した16進数文字列にします。</li><li><code>xxd -p -r</code>: <code>xxd</code>は、バイナリファイルの16進ダンプを作成したり、16進ダンプをバイナリに戻したりするためのユーティリティです。<code>-p</code>オプションは、行番号やASCII文字列を含まないプレーンな16進ダンプを指定します。<code>-r</code>オプションは操作を反転させ、16進数をバイナリに戻します。</li><li><code>base64</code>: 前のステップからのバイナリ出力をBase64形式にエンコードします。</li><li><code>tr +/ -_</code>: Base64出力の<code>+</code>および<code>/</code>文字をそれぞれ<code>-</code>および<code>_</code>に変換します。これはURLセーフなBase64エンコーディングのための一般的な変更です。</li><li><code>tr -d &quot;= &quot;</code>: 最終的なBase64エンコード文字列から、等号（<code>=</code>）と改行文字を削除します。</li></ul><p>上記のコマンドの出力は次のとおりです。</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    2b:d0:87:b4:01&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;: </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xxd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;=</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tfJaLrzXILUg1U3N1KV8yJr92GHn5OtYZR7qWk1Mc4cy4JGjklYup7weMjBD9f3bBVoIsiUVX6xNcYIr0Ie0AQ</span></span></code></pre></div><p><code>tr</code>コマンドを適切に活用することで、モジュラスフィールドは<code>jwks.json</code>ファイルで使用できるBase64URL文字列にエンコードされました。</p><h2 id="jwks-jsonファイルへの情報の入力" tabindex="-1">jwks.jsonファイルへの情報の入力 <a class="header-anchor" href="#jwks-jsonファイルへの情報の入力" aria-label="Permalink to &quot;jwks.jsonファイルへの情報の入力&quot;">​</a></h2><p>これまでの手順で、以下の必要な情報を収集しました。</p><ol><li>RSA鍵ペア。</li><li>Base64URL形式のRSA公開鍵のモジュラス。</li><li>Base64URL形式のRSA公開鍵の指数。</li></ol><p>これらが手元にあれば、Ktorプロジェクトの<a href="https://auth0.com/docs/secure/tokens/json-web-tokens/json-web-key-sets" target="_blank" rel="noreferrer">jwks.json</a>ファイルに以下の属性を入力できます。</p><ul><li>前の手順で生成したBase64URLエンコード値を持つ<code>e</code>および<code>n</code>値。</li><li>鍵ID（この場合、<code>kid</code>はサンプルプロジェクトから派生しています）。</li><li><code>kty</code>属性は<code>RSA</code>。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;keys&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;kty&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RSA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;e&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AQAB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;kid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;6f8856ed-9189-488f-9011-0ff4b6c08edc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tfJaLrzXILUg1U3N1KV8yJr92GHn5OtYZR7qWk1Mc4cy4JGjklYup7weMjBD9f3bBVoIsiUVX6xNcYIr0Ie0AQ&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>残りの唯一のステップは、Ktorプロジェクトが認証に使用できるように秘密鍵を指定することです。</p><h2 id="秘密鍵の定義" tabindex="-1">秘密鍵の定義 <a class="header-anchor" href="#秘密鍵の定義" aria-label="Permalink to &quot;秘密鍵の定義&quot;">​</a></h2><p>公開鍵情報の設定が完了したら、最後のステップはKtorプロジェクトに秘密鍵へのアクセスを提供することです。</p><p>秘密鍵（最初に<code>.pk8</code>ファイルで生成したものです）をシステム上の環境変数（この場合は<code>jwt_pk</code>という名前）に抽出済みであると仮定すると、<code>resources/application.conf</code>ファイルの<code>jwt</code>セクションは次のようになるはずです。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>jwt {</span></span>
<span class="line"><span>  privateKey = \${jwt_pk}</span></span>
<span class="line"><span>  issuer = &quot;http://0.0.0.0:8080/&quot;</span></span>
<span class="line"><span>  audience = &quot;http://0.0.0.0:8080/login&quot;</span></span>
<span class="line"><span>  realm = &quot;MyProject&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,15)),a(o,null,{default:t(()=>s[5]||(s[5]=[i("p",null," 秘密鍵は機密情報とみなされ、コードに直接保存すべきではありません。機密データには、環境変数または[シークレットストア](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)の使用を検討してください。 ",-1)])),_:1})])}const f=r(g,[["render",F]]);export{B as __pageData,f as default};
