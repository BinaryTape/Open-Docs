import{_ as p,a as e,b as d,c as u,d as s,e as m,f,g as S,h,i as O}from"./chunks/remote-artifact-distribution.DrML6DzP.js";import{_ as b,C as K,c as M,o as k,ag as n,j as l,G as o,w as r,a}from"./chunks/framework.Bksy39di.js";const x=JSON.parse('{"title":"針對你的 Kotlin Multiplatform 專案選擇配置","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/multiplatform-project-configuration.md","filePath":"zh-Hant/kmp/multiplatform-project-configuration.md","lastUpdated":1755516278000}'),_={name:"zh-Hant/kmp/multiplatform-project-configuration.md"};function g(A,t,P,T,w,C){const i=K("list");return k(),M("div",null,[t[15]||(t[15]=n("",17)),l("table",null,[t[2]||(t[2]=l("tr",null,[l("th",null,"優點"),l("th",null,"缺點")],-1)),l("tr",null,[l("td",null,[o(i,null,{default:r(()=>t[0]||(t[0]=[l("li",null,"簡單的單一模組設計降低了認知負荷。你無需考慮將功能放在何處或如何將其邏輯地拆分為多個部分。",-1),l("li",null,"非常適合作為起點。",-1)])),_:1})]),l("td",null,[o(i,null,{default:r(()=>t[1]||(t[1]=[l("li",null,"隨著共享模組的增長，編譯時間會增加。",-1),l("li",null,"此設計不允許擁有單獨的功能，或僅依賴於應用程式所需的功能。",-1)])),_:1})])])]),t[16]||(t[16]=n("",5)),l("table",null,[t[5]||(t[5]=l("tr",null,[l("th",null,"優點"),l("th",null,"缺點")],-1)),l("tr",null,[l("td",null,[o(i,null,{default:r(()=>t[3]||(t[3]=[l("li",null,"共享程式碼的關注點分離。",-1),l("li",null,"更好的擴展性。",-1)])),_:1})]),l("td",null,[o(i,null,{default:r(()=>t[4]||(t[4]=[l("li",null,"更複雜的設定，包括傘狀框架設定。",-1),l("li",null,"模組之間的依賴管理更為複雜。",-1)])),_:1})])])]),t[17]||(t[17]=n("",6)),t[18]||(t[18]=l("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"為什麼你需要一個傘狀框架",tabindex:"-1"},[a("為什麼你需要一個傘狀框架？ "),l("a",{class:"header-anchor",href:"#為什麼你需要一個傘狀框架","aria-label":'Permalink to "為什麼你需要一個傘狀框架？ {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),t[19]||(t[19]=n("",12)),l("table",null,[t[8]||(t[8]=l("tr",null,[l("th",null,"優點"),l("th",null,"缺點")],-1)),l("tr",null,[l("td",null,[o(i,null,{default:r(()=>t[6]||(t[6]=[l("li",null,"在精靈的幫助下易於設定。",-1),l("li",null,"iOS 開發人員可以輕鬆使用 Kotlin Multiplatform 程式碼，因為所有程式碼都位於同一個儲存庫中。",-1)])),_:1})]),l("td",null,[o(i,null,{default:r(()=>t[7]||(t[7]=[l("li",null,"iOS 開發人員需要設定和配置不熟悉的工具。",-1),l("li",null,"對於已經儲存在不同儲存庫中的現有應用程式，此方法通常不起作用。",-1)])),_:1})])])]),t[20]||(t[20]=n("",25)),l("table",null,[t[11]||(t[11]=l("tr",null,[l("th",null,"優點"),l("th",null,"缺點")],-1)),l("tr",null,[l("td",null,[o(i,null,{default:r(()=>t[9]||(t[9]=[l("li",null,"Android 和 iOS 團隊成員都可以輕鬆編輯 Kotlin Multiplatform 程式碼，確保創建和維護共享程式碼是共同的責任。這有助於防止團隊孤立並鼓勵協作。",-1),l("li",null,"此方法不需要對共享程式碼進行單獨的版本控制和發布。",-1),l("li",null,"開發工作流程更快，因為 iOS 團隊成員無需等待產物創建和發布。",-1)])),_:1})]),l("td",null,[o(i,null,{default:r(()=>t[10]||(t[10]=[l("li",null,"團隊成員需要在他們的機器上設定完整的開發環境。",-1),l("li",null,"iOS 開發人員必須學習如何使用 Android Studio 和 Gradle。",-1),l("li",null,"隨著共享程式碼的增加和團隊的擴大，管理更改變得困難。",-1)])),_:1})])])]),t[21]||(t[21]=l("h3",{id:"遠端-產物分發",tabindex:"-1"},[a("遠端：產物分發 "),l("a",{class:"header-anchor",href:"#遠端-產物分發","aria-label":'Permalink to "遠端：產物分發"'},"​")],-1)),t[22]||(t[22]=l("p",null,"遠端分發意味著框架產物作為 CocoaPod 或 Swift 套件使用 SPM 發布，並由 iOS 應用程式消費。Android 應用程式可以本地或遠端消費二進位依賴。",-1)),t[23]||(t[23]=l("p",null,"遠端分發通常用於將技術逐步引入現有專案。它不會顯著改變 iOS 開發人員的工作流程和建置過程。擁有兩個或更多儲存庫的團隊主要使用遠端分發來儲存專案程式碼。",-1)),t[24]||(t[24]=l("p",null,[a("作為開始，你可能希望使用 "),l("a",{href:"https://touchlab.co/trykmmbridge",target:"_blank",rel:"noreferrer"},"KMMBridge"),a("——一組極大地簡化遠端分發工作流程的建置工具。或者，你也可以隨時自行設定類似的工作流程：")],-1)),t[25]||(t[25]=l("p",null,[l("img",{src:p,alt:"Remote artifact distribution",width:"700"})],-1)),l("table",null,[t[14]||(t[14]=l("tr",null,[l("th",null,"優點"),l("th",null,"缺點")],-1)),l("tr",null,[t[13]||(t[13]=l("td",null,"不參與的 iOS 團隊成員不必用 Kotlin 編寫程式碼或學習如何使用 Android Studio 和 Gradle 等工具。這顯著降低了團隊的入門門檻。",-1)),l("td",null,[o(i,null,{default:r(()=>t[12]||(t[12]=[l("li",null,"iOS 開發人員的工作流程較慢，因為編輯和建置共享程式碼的過程涉及發布和版本控制。",-1),l("li",null,"在 iOS 上調試共享 Kotlin 程式碼很困難。",-1),l("li",null,"iOS 團隊成員對共享程式碼的貢獻的可能性顯著降低。",-1),l("li",null,"共享程式碼的維護完全由參與的團隊成員負責。",-1)])),_:1})])])]),t[26]||(t[26]=l("h4",{id:"為本機開發設定本機依賴",tabindex:"-1"},[a("為本機開發設定本機依賴 "),l("a",{class:"header-anchor",href:"#為本機開發設定本機依賴","aria-label":'Permalink to "為本機開發設定本機依賴"'},"​")],-1)),t[27]||(t[27]=l("p",null,"許多團隊在採用 Kotlin Multiplatform 技術時選擇遠端分發工作流程，以保持 iOS 開發人員的開發過程不變。但是，在這種工作流程中，他們很難更改 Kotlin Multiplatform 程式碼。我們建議設定一個額外的「本機開發」工作流程，其中包含對從 Kotlin Multiplatform 模組生成的框架的本機依賴。",-1)),t[28]||(t[28]=l("p",null,"當開發人員添加新功能時，他們會切換到將 Kotlin Multiplatform 模組作為本機依賴來消費。這允許更改通用 Kotlin 程式碼，立即觀察 iOS 中的行為，並調試 Kotlin 程式碼。當功能準備好時，他們可以切換回遠端依賴並相應地發布其更改。首先，他們發布對共享模組的更改，然後才對應用程式進行更改。",-1)),t[29]||(t[29]=l("p",null,"對於遠端分發工作流程，請使用 CocoaPods 整合或 SPM。對於本機分發工作流程，直接整合框架。",-1)),t[30]||(t[30]=l("p",null,[a("如果你使用 CocoaPods，你可以選擇使用 CocoaPods 進行本機分發工作流程。你可以透過更改環境變數來切換它們，如 "),l("a",{href:"https://touchlab.co/kmmbridgecocoapodslocal",target:"_blank",rel:"noreferrer"},"TouchLab 文件"),a("所述。")],-1))])}const V=b(_,[["render",g]]);export{x as __pageData,V as default};
