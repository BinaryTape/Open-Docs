import{_ as i,c as a,o as l,ag as n}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"コンストラクタDSL","description":"","frontmatter":{"title":"コンストラクタDSL"},"headers":[],"relativePath":"ja/koin/reference/koin-core/dsl-update.md","filePath":"ja/koin/reference/koin-core/dsl-update.md","lastUpdated":1750001831000}'),t={name:"ja/koin/reference/koin-core/dsl-update.md"};function e(p,s,h,k,d,o){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="コンストラクタdsl" tabindex="-1">コンストラクタDSL <a class="header-anchor" href="#コンストラクタdsl" aria-label="Permalink to &quot;コンストラクタDSL&quot;">​</a></h1><p>Koinは、クラスコンストラクタを直接指定でき、ラムダ式内で定義を記述する必要がなくなる新しい種類のDSLキーワードを提供するようになりました。</p><p>以下の依存関係を持つ<code>ClassA</code>クラスの場合：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>これらのコンポーネントを、<code>クラスコンストラクタ</code>を直接指定して宣言できるようになりました：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>get()</code>関数を使ってコンストラクタで依存関係を指定する必要はもうありません！🎉</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>クラスコンストラクタを指定するには、クラス名の前に<code>::</code>を使用してください。</p></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>コンストラクタはすべての<code>get()</code>で自動的に埋められます。Koinが現在のグラフからその値を見つけようとするため、デフォルト値の使用は避けてください。</p></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>&quot;名前付き&quot;定義を取得する必要がある場合は、クオリファイアを指定するために、ラムダと<code>get()</code>を使用する標準DSLを使う必要があります。</p></div><h2 id="利用可能なキーワード" tabindex="-1">利用可能なキーワード <a class="header-anchor" href="#利用可能なキーワード" aria-label="Permalink to &quot;利用可能なキーワード&quot;">​</a></h2><p>コンストラクタから定義を構築するために、以下のキーワードが利用できます：</p><ul><li><code>factoryOf</code> - <code>factory { }</code>と同等 - ファクトリ定義</li><li><code>singleOf</code> - <code>single { }</code>と同等 - シングルトン定義</li><li><code>scopedOf</code> - <code>scoped { }</code>と同等 - スコープ定義</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Koinがその値ですべてのパラメータを埋めようとするため、コンストラクタでデフォルト値を使用しないようにしてください。</p></div><h2 id="dslオプション" tabindex="-1">DSLオプション <a class="header-anchor" href="#dslオプション" aria-label="Permalink to &quot;DSLオプション&quot;">​</a></h2><p>どのコンストラクタDSL定義も、ラムダ内でいくつかのオプションを開くこともできます：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // definition options</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_qualifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InterfaceA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        createdAtStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このラムダ内では、通常のオプションとDSLキーワードが利用できます：</p><ul><li><code>named(&quot;a_qualifier&quot;)</code> - 定義に文字列クオリファイアを与える</li><li><code>named&lt;MyType&gt;()</code> - 定義に型クオリファイアを与える</li><li><code>bind&lt;MyInterface&gt;()</code> - 指定されたBean定義にバインドする型を追加する</li><li><code>binds(listOf(...))</code> - 指定されたBean定義に型リストを追加する</li><li><code>createdAtStart()</code> - Koin起動時にシングルトンインスタンスを作成する</li></ul><p>ラムダを必要とせずに、<code>bind</code>または<code>binds</code>演算子を使用することもできます：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) bind InterfaceA::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="注入されたパラメータ" tabindex="-1">注入されたパラメータ <a class="header-anchor" href="#注入されたパラメータ" aria-label="Permalink to &quot;注入されたパラメータ&quot;">​</a></h2><p>このような宣言では、引き続き注入されたパラメータを使用できます。Koinは注入されたパラメータと現在の依存関係を調べて、コンストラクタを注入しようとします。</p><p>以下のようになります：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>コンストラクタDSLで宣言する場合：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    factoryOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このように注入できます：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a_factory_id&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parametersOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)}</span></span></code></pre></div><h2 id="リフレクションベースのdsl-3-2以降非推奨" tabindex="-1">リフレクションベースのDSL（3.2以降非推奨） <a class="header-anchor" href="#リフレクションベースのdsl-3-2以降非推奨" aria-label="Permalink to &quot;リフレクションベースのDSL（3.2以降非推奨）&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><p>KoinリフレクションDSLは現在非推奨です。上記のKoinコンストラクタDSLを使用してください。</p></div>`,31)]))}const E=i(t,[["render",e]]);export{r as __pageData,E as default};
