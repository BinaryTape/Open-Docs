import{_ as n}from"./chunks/k2-compiler-architecture.D_ba9KK9.js";import{_ as l,c as e,o as h,ag as i,j as s,a}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"K2 編譯器遷移指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/k2-compiler-migration-guide.md","filePath":"zh-Hant/kotlin/k2-compiler-migration-guide.md","lastUpdated":1754307826000}'),p={name:"zh-Hant/kotlin/k2-compiler-migration-guide.md"};function k(r,t,d,o,g,c){return h(),e("div",null,t[0]||(t[0]=[i('<h1 id="k2-編譯器遷移指南" tabindex="-1">K2 編譯器遷移指南 <a class="header-anchor" href="#k2-編譯器遷移指南" aria-label="Permalink to &quot;K2 編譯器遷移指南&quot;">​</a></h1><p>隨著 Kotlin 語言和生態系統的不斷演進，Kotlin 編譯器也隨之發展。第一步是引入了新的 JVM 和 JS IR（中介表示法）後端，這些後端共享邏輯，簡化了針對不同平台目標的程式碼生成。現在，其演進的下一個階段帶來了一個名為 K2 的新前端。</p><p><img src="'+n+`" alt="Kotlin K2 編譯器架構" width="700"></p><p>隨著 K2 編譯器的到來，Kotlin 前端已被完全重寫，並具備了嶄新且更有效率的架構。新編譯器帶來的根本性變化是採用了一種統一的資料結構，其中包含更多語義資訊。此前端負責執行語義分析、呼叫解析和型別推斷。</p><p>新架構和豐富的資料結構使 K2 編譯器能夠提供以下優勢：</p><ul><li><strong>改進的呼叫解析和型別推斷</strong>。編譯器行為更一致，並能更好地理解您的程式碼。</li><li><strong>更容易為新語言功能引入語法糖</strong>。未來，當新功能引入時，您將能夠使用更簡潔、更具可讀性的程式碼。</li><li><strong>更快的編譯時間</strong>。編譯時間可以<a href="#performance-improvements">顯著加快</a>。</li><li><strong>提升的 IDE 效能</strong>。從 2025.1 版開始，IntelliJ IDEA 使用 K2 模式分析您的 Kotlin 程式碼，提高了穩定性並提供了效能改進。有關更多資訊，請參閱<a href="#support-in-ides">在 IDE 中的支援</a>。</li></ul><p>本指南：</p><ul><li>解釋新 K2 編譯器的好處。</li><li>強調您在遷移過程中可能遇到的變化以及如何相應調整程式碼。</li><li>描述如何回溯到先前的版本。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>從 2.0.0 版開始，新的 K2 編譯器預設啟用。有關 Kotlin 2.0.0 中提供的新功能以及新 K2 編譯器的更多資訊，請參閱 <a href="/zh-Hant/kotlin/whatsnew20">Kotlin 2.0.0 中的新功能</a>。</p></div><h2 id="效能改進" tabindex="-1">效能改進 <a class="header-anchor" href="#效能改進" aria-label="Permalink to &quot;效能改進&quot;">​</a></h2><p>為了評估 K2 編譯器的效能，我們對兩個開源專案：<a href="https://github.com/ankidroid/Anki-Android" target="_blank" rel="noreferrer">Anki-Android</a> 和 <a href="https://github.com/JetBrains/Exposed" target="_blank" rel="noreferrer">Exposed</a> 進行了效能測試。以下是我們發現的主要效能改進：</p><ul><li>K2 編譯器帶來高達 94% 的編譯速度提升。例如，在 Anki-Android 專案中，Clean Build 時間從 Kotlin 1.9.23 的 57.7 秒減少到 Kotlin 2.0.0 的 29.7 秒。</li><li>K2 編譯器使初始化階段速度提升高達 488%。例如，在 Anki-Android 專案中，增量建構的初始化階段從 Kotlin 1.9.23 的 0.126 秒縮短到 Kotlin 2.0.0 的僅 0.022 秒。</li><li>與先前的編譯器相比，Kotlin K2 編譯器在分析階段速度提升高達 376%。例如，在 Anki-Android 專案中，增量建構的分析時間從 Kotlin 1.9.23 的 0.581 秒大幅縮短到 Kotlin 2.0.0 的僅 0.122 秒。</li></ul><p>有關這些改進的更多詳細資訊，以及了解我們如何分析 K2 編譯器效能的資訊，請參閱我們的<a href="https://blog.jetbrains.com/kotlin/2024/04/k2-compiler-performance-benchmarks-and-how-to-measure-them-on-your-projects/" target="_blank" rel="noreferrer">部落格文章</a>。</p><h2 id="語言功能改進" tabindex="-1">語言功能改進 <a class="header-anchor" href="#語言功能改進" aria-label="Permalink to &quot;語言功能改進&quot;">​</a></h2><p>Kotlin K2 編譯器改進了與<a href="#smart-casts">智慧型轉型</a>和<a href="#kotlin-multiplatform">Kotlin 多平台</a>相關的語言功能。</p><h3 id="智慧型轉型" tabindex="-1">智慧型轉型 <a class="header-anchor" href="#智慧型轉型" aria-label="Permalink to &quot;智慧型轉型&quot;">​</a></h3><p>在特定情況下，Kotlin 編譯器可以自動將物件轉型為某個型別，省去了您手動明確指定的麻煩。這稱為<a href="/zh-Hant/kotlin/typecasts#smart-casts">智慧型轉型</a>。Kotlin K2 編譯器現在在比以往更多的情境中執行智慧型轉型。</p><p>在 Kotlin 2.0.0 中，我們改進了以下領域的智慧型轉型相關功能：</p><ul><li><a href="#local-variables-and-further-scopes">局部變數和更深層的作用域</a></li><li><a href="#type-checks-with-the-logical-or-operator">使用邏輯 <code>or</code> 運算子的型別檢查</a></li><li><a href="#inline-functions">內聯函式</a></li><li><a href="#properties-with-function-types">帶有函式型別的屬性</a></li><li><a href="#exception-handling">例外處理</a></li><li><a href="#increment-and-decrement-operators">遞增和遞減運算子</a></li></ul><h4 id="局部變數和更深層的作用域" tabindex="-1">局部變數和更深層的作用域 <a class="header-anchor" href="#局部變數和更深層的作用域" aria-label="Permalink to &quot;局部變數和更深層的作用域&quot;">​</a></h4><p>以前，如果變數在 <code>if</code> 條件中被評估為非 <code>null</code>，則該變數會被智慧型轉型。有關此變數的資訊隨後將在 <code>if</code> 區塊的範圍內進一步共享。</p><p>然而，如果您在 <code>if</code> 條件<strong>外部</strong>宣告變數，則 <code>if</code> 條件內將沒有關於該變數的資訊，因此無法進行智慧型轉型。<code>when</code> 表達式和 <code>while</code> 迴圈也出現了這種行為。</p><p>從 Kotlin 2.0.0 開始，如果您在使用變數之前在 <code>if</code>、<code>when</code> 或 <code>while</code> 條件中宣告它，則編譯器收集到的任何關於該變數的資訊都將在相應的區塊中可用於智慧型轉型。</p><p>這在您想要將布林條件提取到變數中時很有用。然後，您可以為變數賦予一個有意義的名稱，這將提高程式碼的可讀性，並使您以後可以在程式碼中重複使用該變數。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> purr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Purr purr&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> petAnimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animal: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isCat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cat</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isCat) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，編譯器可以存取</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // isCat 的資訊，因此它知道</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // animal 被智慧型轉型為 Cat 型別。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 因此，可以呼叫 purr() 函式。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，編譯器不知道</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 智慧型轉型，因此呼叫 purr()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 函式會觸發錯誤。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        animal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">purr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kitty </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    petAnimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kitty)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Purr purr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="使用邏輯-or-運算子的型別檢查" tabindex="-1">使用邏輯 or 運算子的型別檢查 <a class="header-anchor" href="#使用邏輯-or-運算子的型別檢查" aria-label="Permalink to &quot;使用邏輯 or 運算子的型別檢查&quot;">​</a></h4><p>在 Kotlin 2.0.0 中，如果您使用 <code>or</code> 運算子 (<code>||</code>) 結合物件的型別檢查，則會將其智慧型轉型為最接近的共同父型別。在此變更之前，智慧型轉型總是轉型為 <code>Any</code> 型別。</p><p>在這種情況下，您仍然必須手動檢查物件型別，然後才能存取其任何屬性或呼叫其函式。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Ok</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Postponed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Declined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signalCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signalStatus: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (signalStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Postponed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signalStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Declined) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // signalStatus 被智慧型轉型為共同父型別 Status</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        signalStatus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 之前，signalStatus 被智慧型轉型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 為 Any 型別，因此呼叫 signal() 函式會觸發</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 未解析參考錯誤。signal() 函式只能在</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 另一個型別檢查之後成功呼叫：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // check(signalStatus is Status)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // signalStatus.signal()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>共同父型別是<a href="https://en.wikipedia.org/wiki/Union_type" target="_blank" rel="noreferrer">聯集型別</a>的<strong>近似值</strong>。Kotlin <a href="https://youtrack.jetbrains.com/issue/KT-13108/Denotable-union-and-intersection-types" target="_blank" rel="noreferrer">目前不支援聯集型別</a>。</p></div><h4 id="內聯函式" tabindex="-1">內聯函式 <a class="header-anchor" href="#內聯函式" aria-label="Permalink to &quot;內聯函式&quot;">​</a></h4><p>在 Kotlin 2.0.0 中，K2 編譯器對內聯函式的處理方式不同， 允許它結合其他編譯器分析來判斷智慧型轉型是否安全。</p><p>具體來說，內聯函式現在被視為具有隱式的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.contracts/-contract-builder/calls-in-place.html" target="_blank" rel="noreferrer"><code>callsInPlace</code></a> 契約。這表示傳遞給內聯函式的任何 lambda 函式都會在原地呼叫。由於 lambda 函式在原地呼叫，編譯器知道 lambda 函式不會洩漏對其函式主體中包含的任何變數的參考。</p><p>編譯器利用這些知識以及其他編譯器分析來判斷智慧型轉型任何捕獲的變數是否安全。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inlineAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nextProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    inlineAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，編譯器知道 processor</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 是一個局部變數，inlineAction() 是一個內聯函式，因此</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // processor 的參考不會洩漏。因此，智慧型轉型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // processor 是安全的。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 如果 processor 不為 null，則 processor 會被智慧型轉型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 編譯器知道 processor 不為 null，因此不需要安全呼叫</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            processor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 在 Kotlin 1.9.20 中，您必須執行安全呼叫：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // processor?.process()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nextProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="帶有函式型別的屬性" tabindex="-1">帶有函式型別的屬性 <a class="header-anchor" href="#帶有函式型別的屬性" aria-label="Permalink to &quot;帶有函式型別的屬性&quot;">​</a></h4><p>在 Kotlin 先前版本中，存在一個錯誤，導致具有函式型別的類別屬性無法進行智慧型轉型。我們在 Kotlin 2.0.0 和 K2 編譯器中修復了此行為。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Holder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provider: (() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)?) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，如果 provider 不為 null，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 它會被智慧型轉型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (provider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 編譯器知道 provider 不為 null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 在 1.9.20 中，編譯器不知道 provider 不為</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // null，因此會觸發錯誤：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Reference has a nullable type &#39;(() -&gt; Unit)?&#39;, use explicit &#39;?.invoke()&#39; to make a function-like call instead</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此變更也適用於您重載 <code>invoke</code> 運算子的情況。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Holder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provider: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (provider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 在 1.9.20 中，編譯器觸發錯誤： </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Reference has a nullable type &#39;Provider?&#39;, use explicit &#39;?.invoke()&#39; to make a function-like call instead</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="例外處理" tabindex="-1">例外處理 <a class="header-anchor" href="#例外處理" aria-label="Permalink to &quot;例外處理&quot;">​</a></h4><p>在 Kotlin 2.0.0 中，我們改進了例外處理，以便智慧型轉型資訊可以傳遞到 <code>catch</code> 和 <code>finally</code> 區塊。這項變更使您的程式碼更安全，因為編譯器會追蹤您的物件是否具有可空型別。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stringInput: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // stringInput 被智慧型轉型為 String 型別</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stringInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 編譯器知道 stringInput 不為 null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringInput.length)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 編譯器拒絕了 stringInput 先前的智慧型轉型資訊。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 現在 stringInput 具有 String? 型別。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stringInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 觸發例外</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stringInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (exception: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，編譯器知道 stringInput</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 可以為 null，因此 stringInput 保持可空。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringInput?.length)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，編譯器表示不需要安全呼叫，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 但這是不正確的。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="遞增和遞減運算子" tabindex="-1">遞增和遞減運算子 <a class="header-anchor" href="#遞增和遞減運算子" aria-label="Permalink to &quot;遞增和遞減運算子&quot;">​</a></h4><p>在 Kotlin 2.0.0 之前，編譯器不理解物件的型別在使用遞增或遞減運算子後可能會改變。由於編譯器無法準確追蹤物件型別，您的程式碼可能會導致未解析的參考錯誤。在 Kotlin 2.0.0 中，這已得到修復：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sigma</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sigma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sigma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unknownObject: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rho</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 檢查 unknownObject 是否繼承自 Tau 介面</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 請注意，unknownObject 有可能同時繼承自</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Rho 和 Tau 介面。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (unknownObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Tau) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用介面 Rho 中重載的 inc() 運算子。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，unknownObject 的型別會被智慧型轉型為</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Sigma。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unknownObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，編譯器知道 unknownObject 的型別為</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Sigma，因此 sigma() 函式可以成功呼叫。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        unknownObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sigma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，當呼叫 inc() 時，編譯器不會執行智慧型轉型，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 因此編譯器仍然認為 unknownObject 的型別為 Tau。呼叫 sigma() 函式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 會拋出編譯時錯誤。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，編譯器知道 unknownObject 的型別為</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Sigma，因此呼叫 tau() 函式會拋出編譯時錯誤。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        unknownObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Unresolved reference &#39;tau&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，由於編譯器錯誤地認為</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // unknownObject 的型別為 Tau，tau() 函式可以被呼叫，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 但會拋出 ClassCastException。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-多平台" tabindex="-1">Kotlin 多平台 <a class="header-anchor" href="#kotlin-多平台" aria-label="Permalink to &quot;Kotlin 多平台&quot;">​</a></h3><p>K2 編譯器在以下領域對 Kotlin 多平台進行了改進：</p><ul><li><a href="#separation-of-common-and-platform-sources-during-compilation">編譯期間共同和平台原始碼的分離</a></li><li><a href="#different-visibility-levels-of-expected-and-actual-declarations">預期與實際宣告的不同可見性等級</a></li></ul><h4 id="編譯期間共同和平台原始碼的分離" tabindex="-1">編譯期間共同和平台原始碼的分離 <a class="header-anchor" href="#編譯期間共同和平台原始碼的分離" aria-label="Permalink to &quot;編譯期間共同和平台原始碼的分離&quot;">​</a></h4><p>以前，Kotlin 編譯器的設計阻止了它在編譯時將共同和平台原始碼集分開。因此，共同程式碼可以存取平台程式碼，這導致了平台之間的不同行為。此外，一些來自共同程式碼的編譯器設定和依賴關係也曾洩漏到平台程式碼中。</p><p>在 Kotlin 2.0.0 中，我們對新 Kotlin K2 編譯器的實作包括了編譯方案的重新設計，以確保共同和平台原始碼集之間嚴格分離。當您使用<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html#expected-and-actual-functions" target="_blank" rel="noreferrer">預期與實際函式</a>時，這項變更最為顯著。以前，您的共同程式碼中的函式呼叫可能會解析為平台程式碼中的函式。例如：</p><table><tr><td>共同程式碼</td><td>平台程式碼</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exampleFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JVM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;platform foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// There is no foo() function overload on the JavaScript platform</span></span></code></pre></div></td></tr></table><p>在此範例中，共同程式碼根據其執行的平台具有不同的行為：</p><ul><li>在 JVM 平台上，共同程式碼中呼叫 <code>foo()</code> 函式會導致呼叫平台程式碼中的 <code>foo()</code> 函式，顯示為 <code>platform foo</code>。</li><li>在 JavaScript 平台上，共同程式碼中呼叫 <code>foo()</code> 函式會導致呼叫共同程式碼中的 <code>foo()</code> 函式，顯示為 <code>common foo</code>，因為平台程式碼中沒有此函式。</li></ul><p>在 Kotlin 2.0.0 中，共同程式碼無法存取平台程式碼，因此兩個平台都成功地將 <code>foo()</code> 函式解析為共同程式碼中的 <code>foo()</code> 函式：<code>common foo</code>。</p><p>除了改進跨平台行為的一致性之外，我們還努力修復了 IntelliJ IDEA 或 Android Studio 與編譯器之間行為衝突的情況。例如，當您使用<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html#expected-and-actual-classes" target="_blank" rel="noreferrer">預期與實際類別</a>時，會發生以下情況：</p><table><tr><td>共同程式碼</td><td>平台程式碼</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> confirmIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> common</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Before 2.0.0, it triggers an IDE-only error</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">confirmIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // RESOLUTION_TO_CLASSIFIER : Expected class Identity has no default constructor.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> confirmIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;expect class fun: jvm&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><p>在此範例中，預期類別 <code>Identity</code> 沒有預設建構函式，因此無法在共同程式碼中成功呼叫。以前，錯誤僅由 IDE 報告，但程式碼仍在 JVM 上成功編譯。然而，現在編譯器正確地報告錯誤：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Expected class &#39;expect class Identity : Any&#39; does not have default constructor</span></span></code></pre></div><h5 id="何時解析行為不變" tabindex="-1">何時解析行為不變 <a class="header-anchor" href="#何時解析行為不變" aria-label="Permalink to &quot;何時解析行為不變&quot;">​</a></h5><p>我們仍在遷移到新編譯方案的過程中，因此當您呼叫不在同一原始碼集內的函式時，解析行為仍然相同。您主要會在共同程式碼中使用多平台函式庫的重載時注意到這種差異。</p><p>假設您有一個函式庫，其中有兩個具有不同簽章的 <code>whichFun()</code> 函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Example library</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: common</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: JVM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;platform function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果您在共同程式碼中呼叫 <code>whichFun()</code> 函式，則函式庫中具有最相關引數型別的函式將被解析：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// A project that uses the example library for the JVM target</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: common</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // platform function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>相比之下，如果您在同一原始碼集內宣告 <code>whichFun()</code> 的重載，則共同程式碼中的函式將被解析，因為您的程式碼無法存取特定於平台的版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Example library isn&#39;t used</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: common</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // common function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: JVM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;platform function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>與多平台函式庫類似，由於 <code>commonTest</code> 模組位於單獨的原始碼集，它仍然可以存取平台特定程式碼。因此，對 <code>commonTest</code> 模組中函式的呼叫解析行為與舊的編譯方案相同。</p><p>未來，這些剩餘的案例將與新的編譯方案更加一致。</p><h4 id="預期與實際宣告的不同可見性等級" tabindex="-1">預期與實際宣告的不同可見性等級 <a class="header-anchor" href="#預期與實際宣告的不同可見性等級" aria-label="Permalink to &quot;預期與實際宣告的不同可見性等級&quot;">​</a></h4><p>在 Kotlin 2.0.0 之前，如果您在 Kotlin 多平台專案中使用<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">預期與實際宣告</a>，它們必須具有相同的<a href="/zh-Hant/kotlin/visibility-modifiers">可見性等級</a>。 Kotlin 2.0.0 現在也支援不同的可見性等級，但<strong>僅限於</strong>實際宣告比預期宣告 <em>更具</em> 寬容性時。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 可見性為 internal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 預設可見性為 public，更具寬容性</span></span></code></pre></div><p>同樣，如果您在實際宣告中使用<a href="/zh-Hant/kotlin/type-aliases">型別別名</a>，則<strong>底層型別</strong>的可見性應與預期宣告相同或更具寬容性。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 // 可見性為 internal</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Expanded</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Expanded</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                  // 預設可見性為 public，更具寬容性</span></span></code></pre></div><h2 id="如何啟用-kotlin-k2-編譯器" tabindex="-1">如何啟用 Kotlin K2 編譯器 <a class="header-anchor" href="#如何啟用-kotlin-k2-編譯器" aria-label="Permalink to &quot;如何啟用 Kotlin K2 編譯器&quot;">​</a></h2><p>從 Kotlin 2.0.0 開始，Kotlin K2 編譯器預設啟用。</p><p>要升級 Kotlin 版本，請在您的 <a href="/zh-Hant/kotlin/gradle-configure-project#apply-the-plugin">Gradle</a> 和 <a href="/zh-Hant/kotlin/maven#configure-and-enable-the-plugin">Maven</a> 建構腳本中將其更改為 2.0.0 或更高版本。</p><p>為了在 IntelliJ IDEA 或 Android Studio 中獲得最佳體驗，請考慮在您的 IDE 中<a href="#support-in-ides">啟用 K2 模式</a>。</p><h3 id="使用-gradle-建構報告" tabindex="-1">使用 Gradle 建構報告 <a class="header-anchor" href="#使用-gradle-建構報告" aria-label="Permalink to &quot;使用 Gradle 建構報告&quot;">​</a></h3><p>Kotlin <a href="/zh-Hant/kotlin/gradle-compilation-and-caches#build-reports">建構報告</a>提供了 Kotlin 編譯器任務在不同編譯階段所花費時間的資訊，以及使用了哪個編譯器和 Kotlin 版本，以及編譯是否為增量編譯。這些建構報告對於評估您的建構效能很有用。它們比 <a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">Gradle 建構掃描</a>提供了更多關於 Kotlin 編譯流程的洞察，因為它們提供了所有 Gradle 任務的效能概覽。</p><h4 id="如何啟用建構報告" tabindex="-1">如何啟用建構報告 <a class="header-anchor" href="#如何啟用建構報告" aria-label="Permalink to &quot;如何啟用建構報告&quot;">​</a></h4><p>要啟用建構報告，請在您的 <code>gradle.properties</code> 檔案中宣告您希望儲存建構報告輸出的位置：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.output=file</span></span></code></pre></div><p>以下值及其組合可用於輸出：</p><table tabindex="0"><thead><tr><th style="text-align:left;">選項</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>file</code></td><td style="text-align:left;">將建構報告以人類可讀的格式儲存到本機檔案。預設為 <code>\${project_folder}/build/reports/kotlin-build/\${project_name}-timestamp.txt</code></td></tr><tr><td style="text-align:left;"><code>single_file</code></td><td style="text-align:left;">將建構報告以物件格式儲存到指定的本機檔案。</td></tr><tr><td style="text-align:left;"><code>build_scan</code></td><td style="text-align:left;">將建構報告儲存到<a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">建構掃描</a>的 <code>custom values</code> 區段中。請注意，Gradle Enterprise 外掛程式限制了自訂值的數量和長度。在大型專案中，某些值可能會丟失。</td></tr><tr><td style="text-align:left;"><code>http</code></td><td style="text-align:left;">使用 HTTP(S) 發布建構報告。POST 方法以 JSON 格式發送度量。您可以在<a href="https://github.com/JetBrains/kotlin/blob/master/libraries/tools/kotlin-gradle-plugin/src/common/kotlin/org/jetbrains/kotlin/gradle/report/data/GradleCompileStatisticsData.kt" target="_blank" rel="noreferrer">Kotlin 儲存庫</a>中查看發送資料的當前版本。您可以在<a href="https://blog.jetbrains.com/kotlin/2022/06/introducing-kotlin-build-reports/?_gl=1*1a7pghy*_ga*MTcxMjc1NzE5Ny4xNjY1NDAzNjkz*_ga_9J976DJZ68*MTcxNTA3NjA2NS4zNzcuMS4xNzE1MDc2MDc5LjQ2LjAuMA..&amp;_ga=2.265800911.1124071296.1714976764-1712757197.1665403693#enable_build_reports" target="_blank" rel="noreferrer">此部落格文章</a>中找到 HTTP 端點範例。</td></tr><tr><td style="text-align:left;"><code>json</code></td><td style="text-align:left;">將建構報告以 JSON 格式儲存到本機檔案。在 <code>kotlin.build.report.json.directory</code> 中設定建構報告的位置。預設名稱為 <code>\${project_name}-build-&lt;date-time&gt;-&lt;index&gt;.json</code>。</td></tr></tbody></table><p>有關建構報告功能的更多資訊，請參閱<a href="/zh-Hant/kotlin/gradle-compilation-and-caches#build-reports">建構報告</a>。</p><h2 id="在-ide-中的支援" tabindex="-1">在 IDE 中的支援 <a class="header-anchor" href="#在-ide-中的支援" aria-label="Permalink to &quot;在 IDE 中的支援&quot;">​</a></h2><p>IntelliJ IDEA 和 Android Studio 中的 K2 模式使用 K2 編譯器來改進程式碼分析、程式碼完成和語法高亮。</p><p>從 IntelliJ IDEA 2025.1 開始，K2 模式<a href="https://blog.jetbrains.com/idea/2025/04/k2-mode-in-intellij-idea-2025-1-current-state-and-faq/" target="_blank" rel="noreferrer">預設啟用</a>。</p><p>在 Android Studio 中，您可以從 2024.1 版本開始透過以下步驟啟用 K2 模式：</p><ol><li>前往 <strong>Settings</strong> | <strong>Languages &amp; Frameworks</strong> | <strong>Kotlin</strong>。</li><li>選取 <strong>Enable K2 mode</strong> 選項。</li></ol>`,92),s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"先前的-ide-行為",tabindex:"-1"},[a("先前的 IDE 行為 "),s("a",{class:"header-anchor",href:"#先前的-ide-行為","aria-label":'Permalink to "先前的 IDE 行為 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i(`<p>如果您想恢復到先前的 IDE 行為，可以停用 K2 模式：</p><ol><li>前往 <strong>Settings</strong> | <strong>Languages &amp; Frameworks</strong> | <strong>Kotlin</strong>。</li><li>取消選取 <strong>Enable K2 mode</strong> 選項。</li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>我們計畫在 Kotlin 2.1.0 之後引入<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">穩定</a>的語言功能。 在此之前，您可以繼續使用先前的 IDE 功能進行程式碼分析，並且不會遇到由於無法識別的語言功能而導致的程式碼高亮問題。</p></div><h2 id="在-kotlin-playground-中試用-kotlin-k2-編譯器" tabindex="-1">在 Kotlin Playground 中試用 Kotlin K2 編譯器 <a class="header-anchor" href="#在-kotlin-playground-中試用-kotlin-k2-編譯器" aria-label="Permalink to &quot;在 Kotlin Playground 中試用 Kotlin K2 編譯器&quot;">​</a></h2><p>Kotlin Playground 支援 Kotlin 2.0.0 及更高版本。快來<a href="https://pl.kotl.in/czuoQprce" target="_blank" rel="noreferrer">試試看！</a></p><h2 id="如何回溯到先前的編譯器" tabindex="-1">如何回溯到先前的編譯器 <a class="header-anchor" href="#如何回溯到先前的編譯器" aria-label="Permalink to &quot;如何回溯到先前的編譯器&quot;">​</a></h2><p>要在 Kotlin 2.0.0 及更高版本中使用先前的編譯器，請執行以下操作：</p><ul><li>在您的 <code>build.gradle.kts</code> 檔案中，將<a href="/zh-Hant/kotlin/gradle-compiler-options#example-of-setting-languageversion">語言版本</a>設定為 <code>1.9</code>。</li></ul><p>或</p><ul><li>使用以下編譯器選項：<code>-language-version 1.9</code>。</li></ul><h2 id="變更" tabindex="-1">變更 <a class="header-anchor" href="#變更" aria-label="Permalink to &quot;變更&quot;">​</a></h2><p>隨著新前端的引入，Kotlin 編譯器經歷了多項變革。讓我們先強調影響您程式碼的最重要修改，解釋這些變革的內容，並詳細說明未來的最佳實踐。如果您想了解更多資訊，我們已將這些變更整理到<a href="#per-subject-area">主題領域</a>中，以便您進一步閱讀。</p><p>本節重點介紹以下修改：</p><ul><li><a href="#immediate-initialization-of-open-properties-with-backing-fields">帶有支援欄位的 open 屬性的立即初始化</a></li><li><a href="#deprecated-synthetics-setter-on-a-projected-receiver">棄用投影接收器上的合成 setter</a></li><li><a href="#forbidden-use-of-inaccessible-generic-types">禁止使用不可存取泛型型別</a></li><li><a href="#consistent-resolution-order-of-kotlin-properties-and-java-fields-with-the-same-name">Kotlin 屬性和同名 Java 欄位的一致解析順序</a></li><li><a href="#improved-null-safety-for-java-primitive-arrays">Java 基本型別陣列的空安全改進</a></li><li><a href="#stricter-rules-for-abstract-members-in-expected-classes">預期類別中抽象成員的更嚴格規則</a></li></ul><h3 id="帶有支援欄位的-open-屬性的立即初始化" tabindex="-1">帶有支援欄位的 open 屬性的立即初始化 <a class="header-anchor" href="#帶有支援欄位的-open-屬性的立即初始化" aria-label="Permalink to &quot;帶有支援欄位的 open 屬性的立即初始化&quot;">​</a></h3><p><strong>有什麼變化？</strong></p><p>在 Kotlin 2.0 中，所有帶有支援欄位的 <code>open</code> 屬性都必須立即初始化；否則，您將收到編譯錯誤。以前，只有 <code>open var</code> 屬性需要立即初始化，但現在這也延伸到帶有支援欄位的 <code>open val</code> 屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 從 Kotlin 2.0 開始會出錯，先前可成功編譯 </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 錯誤：open val 必須有初始化式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 始終是錯誤</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 錯誤：open var 必須有初始化式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Derived</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>這項變更使得編譯器的行為更具可預測性。考慮一個 <code>open val</code> 屬性被帶有自訂 setter 的 <code>var</code> 屬性覆寫的範例。</p><p>如果使用自訂 setter，延遲初始化可能會導致混淆，因為不清楚您是要初始化支援欄位還是呼叫 setter。過去，如果您想呼叫 setter，舊編譯器無法保證 setter 會初始化支援欄位。</p><p><strong>現在的最佳實踐是什麼？</strong></p><p>我們鼓勵您始終使用支援欄位初始化 <code>open</code> 屬性，因為我們認為這種做法既高效又不易出錯。</p><p>然而，如果您不想立即初始化屬性，您可以：</p><ul><li>將屬性設為 <code>final</code>。</li><li>使用允許延遲初始化的私有支援屬性。</li></ul><p>有關更多資訊，請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-57555" target="_blank" rel="noreferrer">YouTrack 中的相關問題</a>。</p><h3 id="棄用投影接收器上的合成-setter" tabindex="-1">棄用投影接收器上的合成 setter <a class="header-anchor" href="#棄用投影接收器上的合成-setter" aria-label="Permalink to &quot;棄用投影接收器上的合成 setter&quot;">​</a></h3><p><strong>有什麼變化？</strong></p><p>如果您使用 Java 類別的合成 setter 來賦值與該類別的投影型別衝突的型別，則會觸發錯誤。</p><p>假設您有一個名為 <code>Container</code> 的 Java 類別，其中包含 <code>getFoo()</code> 和 <code>setFoo()</code> 方法：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> E </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFoo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setFoo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(E </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果您有以下 Kotlin 程式碼，其中 <code>Container</code> 類別的實例具有投影型別，則使用 <code>setFoo()</code> 方法將始終產生錯誤。然而，只有從 Kotlin 2.0.0 開始，合成的 <code>foo</code> 屬性才會觸發錯誤：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exampleFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(starProjected: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;, inProjected: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, sampleString: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    starProjected.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setFoo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sampleString)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 從 Kotlin 1.0 開始出錯</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 合成 setter \`foo\` 解析為 \`setFoo()\` 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    starProjected.foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampleString</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 從 Kotlin 2.0.0 開始出錯</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inProjected.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setFoo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sampleString)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 從 Kotlin 1.0 開始出錯</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 合成 setter \`foo\` 解析為 \`setFoo()\` 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inProjected.foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampleString</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 從 Kotlin 2.0.0 開始出錯</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>現在的最佳實踐是什麼？</strong></p><p>如果您發現此變更在程式碼中引入了錯誤，您可能希望重新考慮型別宣告的結構。這可能是您不需要使用型別投影，或者您可能需要從程式碼中移除任何賦值。</p><p>有關更多資訊，請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-54309" target="_blank" rel="noreferrer">YouTrack 中的相關問題</a>。</p><h3 id="禁止使用不可存取泛型型別" tabindex="-1">禁止使用不可存取泛型型別 <a class="header-anchor" href="#禁止使用不可存取泛型型別" aria-label="Permalink to &quot;禁止使用不可存取泛型型別&quot;">​</a></h3><p><strong>有什麼變化？</strong></p><p>由於我們 K2 編譯器的新架構，我們改變了處理不可存取泛型型別的方式。通常，您不應在程式碼中依賴不可存取泛型型別，因為這表示您的專案建構配置有誤，阻礙了編譯器存取必要的編譯資訊。在 Kotlin 2.0.0 中，您不能宣告或呼叫帶有不可存取泛型型別的函式字面值，也不能使用帶有不可存取泛型型別引數的泛型型別。此限制可幫助您避免稍後在程式碼中出現編譯器錯誤。</p><p>例如，假設您在一個模組中宣告了一個泛型類別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模組一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果您有另一個模組（模組二）配置了對模組一的依賴，您的程式碼就可以存取 <code>Node&lt;V&gt;</code> 類別並將其用作函式型別中的型別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模組二</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 函式成功編譯</span></span></code></pre></div><p>然而，如果您的專案配置錯誤，以至於您有第三個模組（模組三）僅依賴於模組二，則 Kotlin 編譯器在編譯第三個模組時將無法存取<strong>模組一</strong>中的 <code>Node&lt;V&gt;</code> 類別。現在，模組三中任何使用 <code>Node&lt;V&gt;</code> 型別的 lambda 或匿名函式都會在 Kotlin 2.0.0 中觸發錯誤，從而防止稍後在程式碼中出現可避免的編譯器錯誤、崩潰和執行時例外：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模組三</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 2.0.0 中觸發錯誤，因為隱式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // lambda 參數 (it) 解析為 Node，而 Node 不可存取</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 2.0.0 中觸發錯誤，因為未使用的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // lambda 參數 (_) 解析為 Node，而 Node 不可存取</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 2.0.0 中觸發錯誤，因為未使用的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 匿名函式參數 (_) 解析為 Node，而 Node 不可存取</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_) {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>除了函式字面值在包含不可存取泛型型別的實值參數時觸發錯誤之外，當型別具有不可存取泛型型別引數時也會發生錯誤。</p><p>例如，您在模組一中具有相同的泛型類別宣告。在模組二中，您宣告了另一個泛型類別：<code>Container&lt;C&gt;</code>。此外，您在模組二中宣告了使用 <code>Container&lt;C&gt;</code> 和泛型類別 <code>Node&lt;V&gt;</code> 作為型別引數的函式：</p><table><tr><td>模組一</td><td>模組二</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模組一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模組二</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vararg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 具有泛型類別型別的函式，其</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 也具有泛型類別型別引數</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> produce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;) {}</span></span></code></pre></div></td></tr></table><p>如果您嘗試在模組三中呼叫這些函式，則會在 Kotlin 2.0.0 中觸發錯誤，因為泛型類別 <code>Node&lt;V&gt;</code> 無法從模組三存取：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模組三</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 2.0.0 中觸發錯誤，因為泛型類別 Node&lt;V&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 不可存取</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    consume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">produce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在未來的版本中，我們將繼續普遍棄用不可存取型別的使用。我們已在 Kotlin 2.0.0 中開始，為某些具有不可存取型別（包括非泛型型別）的情境添加警告。</p><p>例如，讓我們使用與先前範例相同的模組設定，但將泛型類別 <code>Node&lt;V&gt;</code> 轉換為非泛型類別 <code>IntNode</code>，所有函式都在模組二中宣告：</p><table><tr><td>模組一</td><td>模組二</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模組一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模組二</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 包含 lambda 的函式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 參數，型別為 \`IntNode\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vararg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 具有泛型類別型別的函式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 其具有 \`IntNode\` 作為型別引數</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> produce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {}</span></span></code></pre></div></td></tr></table><p>如果您在模組三中呼叫這些函式，則會觸發一些警告：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模組三</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 2.0.0 中觸發警告，因為類別 IntNode</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 不可存取。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 參數 &#39;it&#39; 的類別 &#39;IntNode&#39; 不可存取。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_) {})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 參數 &#39;_&#39; 的類別 &#39;IntNode&#39; 不可存取。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在未來的 Kotlin 版本中將觸發警告，因為 IntNode</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 不可存取。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    consume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">produce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>現在的最佳實踐是什麼？</strong></p><p>如果您遇到關於不可存取泛型型別的新警告，很有可能您的建構系統配置存在問題。我們建議您檢查建構腳本和配置。</p><p>作為最後的手段，您可以為模組三配置對模組一的直接依賴。或者，您可以修改程式碼以使型別在同一模組內可存取。</p><p>有關更多資訊，請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-64474" target="_blank" rel="noreferrer">YouTrack 中的相關問題</a>。</p><h3 id="kotlin-屬性和同名-java-欄位的一致解析順序" tabindex="-1">Kotlin 屬性和同名 Java 欄位的一致解析順序 <a class="header-anchor" href="#kotlin-屬性和同名-java-欄位的一致解析順序" aria-label="Permalink to &quot;Kotlin 屬性和同名 Java 欄位的一致解析順序&quot;">​</a></h3><p><strong>有什麼變化？</strong></p><p>在 Kotlin 2.0.0 之前，如果您處理相互繼承且包含相同名稱的 Kotlin 屬性及 Java 欄位的 Java 和 Kotlin 類別，重複名稱的解析行為會不一致。IntelliJ IDEA 和編譯器之間也存在衝突行為。在為 Kotlin 2.0.0 開發新的解析行為時，我們的目標是將對使用者的影響降到最低。</p><p>例如，假設有一個 Java 類別 <code>Base</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>假設還有一個 Kotlin 類別 <code>Derived</code>，它繼承自上述的 <code>Base</code> 類別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Derived</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;aa&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 宣告自訂 get() 函式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bb&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 解析為 Derived.a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // aa</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 解析為 Base.b</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 Kotlin 2.0.0 之前，<code>a</code> 解析為 <code>Derived</code> Kotlin 類別中的 Kotlin 屬性，而 <code>b</code> 解析為 <code>Base</code> Java 類別中的 Java 欄位。</p><p>在 Kotlin 2.0.0 中，範例中的解析行為是一致的，確保 Kotlin 屬性取代同名的 Java 欄位。現在，<code>b</code> 解析為：<code>Derived.b</code>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在 Kotlin 2.0.0 之前，如果您使用 IntelliJ IDEA 跳轉到 <code>a</code> 的宣告或使用位置，它會錯誤地導航到 Java 欄位，而實際上應該導航到 Kotlin 屬性。 從 Kotlin 2.0.0 開始，IntelliJ IDEA 會正確地導航到與編譯器相同的位置。</p></div><p>一般規則是子類別優先。先前的範例證明了這一點，因為 <code>Derived</code> 類別的 Kotlin 屬性 <code>a</code> 被解析，因為 <code>Derived</code> 是 <code>Base</code> Java 類別的子類別。</p><p>如果繼承反轉，並且 Java 類別繼承自 Kotlin 類別，則子類別中的 Java 欄位優先於同名的 Kotlin 屬性。</p><p>考慮這個範例：</p><table><tr><td>Kotlin</td><td>Java</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;aa&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Derived</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><p>現在在以下程式碼中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 解析為 Derived.a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>現在的最佳實踐是什麼？</strong></p><p>如果此變更影響您的程式碼，請考慮您是否真的需要使用重複的名稱。如果您希望 Java 或 Kotlin 類別各自包含同名的欄位或屬性，並且它們彼此繼承，請記住子類別中的欄位或屬性將優先。</p><p>有關更多資訊，請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-55017" target="_blank" rel="noreferrer">YouTrack 中的相關問題</a>。</p><h3 id="java-基本型別陣列的空安全改進" tabindex="-1">Java 基本型別陣列的空安全改進 <a class="header-anchor" href="#java-基本型別陣列的空安全改進" aria-label="Permalink to &quot;Java 基本型別陣列的空安全改進&quot;">​</a></h3><p><strong>有什麼變化？</strong></p><p>從 Kotlin 2.0.0 開始，編譯器正確推斷匯入到 Kotlin 的 Java 基本型別陣列的可空性。現在，它會保留與 Java 基本型別陣列一起使用的 <code>TYPE_USE</code> 註解中的原生可空性，並在其值未按照註解使用時發出錯誤。</p><p>通常，當從 Kotlin 呼叫帶有 <code>@Nullable</code> 和 <code>@NotNull</code> 註解的 Java 型別時，它們會獲得適當的原生可空性：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NotNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ResultContainer&lt;@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Nullable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataService: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -&gt; ResultContainer&lt;String?&gt;</span></span></code></pre></div><p>然而，以前當 Java 基本型別陣列匯入到 Kotlin 時，所有 <code>TYPE_USE</code> 註解都會丟失，導致平台可空性並可能產生不安全的程式碼：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Nullable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataService: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataProvider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -&gt; IntArray .. IntArray?</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 沒有錯誤，即使 \`dataService.fetchData()\` 根據註解可能為 \`null\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 這可能會導致 NullPointerException</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>請注意，此問題從未影響宣告本身的可空性註解，僅影響 <code>TYPE_USE</code> 註解。</p><p><strong>現在的最佳實踐是什麼？</strong></p><p>在 Kotlin 2.0.0 中，Java 基本型別陣列的空安全現在在 Kotlin 中是標準的，因此如果您使用它們，請檢查您的程式碼是否有新的警告和錯誤：</p><ul><li>任何使用 <code>@Nullable</code> Java 基本型別陣列且未明確進行空值檢查，或嘗試將 <code>null</code> 傳遞給預期非空基本型別陣列的 Java 方法的程式碼，現在將無法編譯。</li><li>對 <code>@NotNull</code> 基本型別陣列進行空值檢查，現在會發出「不必要的安全呼叫」或「與 null 比較始終為 false」的警告。</li></ul><p>有關更多資訊，請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-54521" target="_blank" rel="noreferrer">YouTrack 中的相關問題</a>。</p><h3 id="預期類別中抽象成員的更嚴格規則" tabindex="-1">預期類別中抽象成員的更嚴格規則 <a class="header-anchor" href="#預期類別中抽象成員的更嚴格規則" aria-label="Permalink to &quot;預期類別中抽象成員的更嚴格規則&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>預期與實際類別處於 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">Beta</a> 階段。 它們幾乎穩定，但您可能需要在未來執行遷移步驟。 我們將盡力將您需要進行的進一步變更降至最低。</p></div><p><strong>有什麼變化？</strong></p><p>由於 K2 編譯器在編譯期間對共同原始碼和平台原始碼進行了分離，我們對預期類別中的抽象成員實施了更嚴格的規則。</p><p>使用舊的編譯器時，預期的非抽象類別可以繼承一個抽象函式而無需<a href="/zh-Hant/kotlin/inheritance#overriding-rules">覆寫該函式</a>。由於編譯器可以同時存取共同程式碼和平台程式碼，因此編譯器可以判斷該抽象函式是否在實際類別中具有對應的覆寫和定義。</p><p>現在共同原始碼和平台原始碼是分開編譯的，繼承的函式必須在預期類別中明確覆寫，以便編譯器知道該函式不是抽象的。否則，編譯器將報告 <code>ABSTRACT_MEMBER_NOT_IMPLEMENTED</code> 錯誤。</p><p>例如，假設您有一個共同原始碼集，其中宣告了一個名為 <code>FileSystem</code> 的抽象類別，它有一個抽象函式 <code>listFiles()</code>。您在平台原始碼集中將 <code>listFiles()</code> 函式定義為實際宣告的一部分。</p><p>在您的共同程式碼中，如果您有一個名為 <code>PlatformFileSystem</code> 的預期非抽象類別繼承自 <code>FileSystem</code> 類別，則 <code>PlatformFileSystem</code> 類別會繼承抽象函式 <code>listFiles()</code>。然而，在 Kotlin 中，您不能在非抽象類別中擁有抽象函式。要使 <code>listFiles()</code> 函式變成非抽象，您必須將其宣告為沒有 <code>abstract</code> 關鍵字的覆寫：</p><table><tr><td>共同程式碼</td><td>平台程式碼</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlatformFileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 2.0.0 中，需要明確的覆寫</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 2.0.0 之前，不需要覆寫</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlatformFileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><p><strong>現在的最佳實踐是什麼？</strong></p><p>如果您在預期的非抽象類別中繼承抽象函式，請新增一個非抽象覆寫。</p><p>有關更多資訊，請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-59739/K2-MPP-reports-ABSTRACTMEMBERNOTIMPLEMENTED-for-inheritor-in-common-code-when-the-implementation-is-located-in-the-actual" target="_blank" rel="noreferrer">YouTrack</a> 中的相關問題。</p><h3 id="按主題領域" tabindex="-1">按主題領域 <a class="header-anchor" href="#按主題領域" aria-label="Permalink to &quot;按主題領域&quot;">​</a></h3><p>這些主題領域列出了不太可能影響您程式碼的變更，但提供了相關 YouTrack 問題的連結以供進一步閱讀。標示星號 (*) 的問題 ID 旁的變更會在該節開頭解釋。</p>`,105),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"型別推斷",tabindex:"-1"},[a("型別推斷 "),s("a",{class:"header-anchor",href:"#型別推斷","aria-label":'Permalink to "型別推斷 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">問題 ID</th><th style="text-align:left;">標題</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64189" target="_blank" rel="noreferrer">KT-64189</a></td><td style="text-align:left;">編譯後函式簽章中屬性參考的型別不正確，如果型別明確為 Normal</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-47986" target="_blank" rel="noreferrer">KT-47986</a></td><td style="text-align:left;">在建構器推斷上下文中，禁止隱式推斷型別變數為上限</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-59275" target="_blank" rel="noreferrer">KT-59275</a></td><td style="text-align:left;">K2：要求陣列字面值中泛型註解呼叫的明確型別引數</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-53752" target="_blank" rel="noreferrer">KT-53752</a></td><td style="text-align:left;">交叉型別遺漏的子型別檢查</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-59138" target="_blank" rel="noreferrer">KT-59138</a></td><td style="text-align:left;">變更 Kotlin 中基於 Java 型別參數的型別預設表示</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57178" target="_blank" rel="noreferrer">KT-57178</a></td><td style="text-align:left;">變更前綴遞增的推斷型別，使其返回 getter 的返回型別而不是 inc() 運算子的返回型別</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57609" target="_blank" rel="noreferrer">KT-57609</a></td><td style="text-align:left;">K2：停止依賴對 contravariant 參數使用 @UnsafeVariance</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57620" target="_blank" rel="noreferrer">KT-57620</a></td><td style="text-align:left;">K2：禁止將原始型別解析為被包含的成員</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64641" target="_blank" rel="noreferrer">KT-64641</a></td><td style="text-align:left;">K2：正確推斷可呼叫參考的型別，該可呼叫參考具有擴展函式參數</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57011" target="_blank" rel="noreferrer">KT-57011</a></td><td style="text-align:left;">使解構變數的真實型別與指定時的明確型別保持一致</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-38895" target="_blank" rel="noreferrer">KT-38895</a></td><td style="text-align:left;">K2：修復整數文字溢出的不一致行為</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-54862" target="_blank" rel="noreferrer">KT-54862</a></td><td style="text-align:left;">匿名型別可以從型別引數中的匿名函式中公開</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-22379" target="_blank" rel="noreferrer">KT-22379</a></td><td style="text-align:left;">帶有 break 的 while 迴圈條件可以產生不健全的智慧型轉型</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-62507" target="_blank" rel="noreferrer">KT-62507</a></td><td style="text-align:left;">K2：禁止在 expect/actual 頂層屬性的共同程式碼中進行智慧型轉型</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65750" target="_blank" rel="noreferrer">KT-65750</a></td><td style="text-align:left;">改變返回型別的遞增和加號運算子必須影響智慧型轉型</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65349" target="_blank" rel="noreferrer">KT-65349</a></td><td style="text-align:left;">[LC] K2：明確指定變數型別在某些情況下會破壞綁定智慧型轉型，而這在 K1 中是可行的</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"泛型",tabindex:"-1"},[a("泛型 "),s("a",{class:"header-anchor",href:"#泛型","aria-label":'Permalink to "泛型 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">問題 ID</th><th style="text-align:left;">標題</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-54309" target="_blank" rel="noreferrer">KT-54309</a>*</td><td style="text-align:left;"><a href="#deprecated-synthetics-setter-on-a-projected-receiver">棄用在投影接收器上使用合成 setter</a></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57600" target="_blank" rel="noreferrer">KT-57600</a></td><td style="text-align:left;">禁止使用原始型別參數覆寫帶有泛型型別參數的 Java 方法</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-54663" target="_blank" rel="noreferrer">KT-54663</a></td><td style="text-align:left;">禁止將可能為空型別參數傳遞給 `in` 投影的 DNN 參數</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-54066" target="_blank" rel="noreferrer">KT-54066</a></td><td style="text-align:left;">棄用型別別名建構函式中的上限違規</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-49404" target="_blank" rel="noreferrer">KT-49404</a></td><td style="text-align:left;">修復基於 Java 類別的 contravariant 捕獲型別的型別不健全問題</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-61718" target="_blank" rel="noreferrer">KT-61718</a></td><td style="text-align:left;">禁止自上限和捕獲型別的不健全程式碼</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-61749" target="_blank" rel="noreferrer">KT-61749</a></td><td style="text-align:left;">禁止泛型內部類別的泛型外部類別中的不健全邊界違規</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-62923" target="_blank" rel="noreferrer">KT-62923</a></td><td style="text-align:left;">K2：為內部類別的外部父型別的投影引入 PROJECTION_IN_IMMEDIATE_ARGUMENT_TO_SUPERTYPE</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-63243" target="_blank" rel="noreferrer">KT-63243</a></td><td style="text-align:left;">在繼承自基本型別集合並從另一個父型別額外專門實作時，報告 MANY_IMPL_MEMBER_NOT_IMPLEMENTED</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-60305" target="_blank" rel="noreferrer">KT-60305</a></td><td style="text-align:left;">K2：禁止在展開型別中具有變異修飾符的型別別名的建構函式呼叫和繼承</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64965" target="_blank" rel="noreferrer">KT-64965</a></td><td style="text-align:left;">修復由於不正確處理帶有自上限的捕獲型別導致的型別漏洞</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64966" target="_blank" rel="noreferrer">KT-64966</a></td><td style="text-align:left;">禁止帶有錯誤泛型參數型別的泛型委派建構函式呼叫</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65712" target="_blank" rel="noreferrer">KT-65712</a></td><td style="text-align:left;">當上限為捕獲型別時，報告缺少上限違規</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"解析",tabindex:"-1"},[a("解析 "),s("a",{class:"header-anchor",href:"#解析","aria-label":'Permalink to "解析 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">問題 ID</th><th style="text-align:left;">標題</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-55017" target="_blank" rel="noreferrer">KT-55017</a>*</td><td style="text-align:left;"><a href="#consistent-resolution-order-of-kotlin-properties-and-java-fields-with-the-same-name">在重載解析時，當 Java 欄位來自基底類別時，選擇派生類別中的 Kotlin 屬性</a></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-58260" target="_blank" rel="noreferrer">KT-58260</a></td><td style="text-align:left;">使 invoke 慣例與預期的語法糖轉換一致</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-62866" target="_blank" rel="noreferrer">KT-62866</a></td><td style="text-align:left;">K2：改變當伴隨物件優先於靜態範圍時的限定詞解析行為</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57750" target="_blank" rel="noreferrer">KT-57750</a></td><td style="text-align:left;">當解析型別並具有相同名稱的類別星號匯入時，報告歧義錯誤</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-63558" target="_blank" rel="noreferrer">KT-63558</a></td><td style="text-align:left;">K2：遷移 COMPATIBILITY_WARNING 周圍的解析</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-51194" target="_blank" rel="noreferrer">KT-51194</a></td><td style="text-align:left;">當依賴類別包含在同一依賴關係的兩個不同版本中時，錯誤的負 CONFLICTING_INHERITED_MEMBERS</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-37592" target="_blank" rel="noreferrer">KT-37592</a></td><td style="text-align:left;">具有接收者的函式型別的屬性 invoke 優於擴展函式 invoke</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-51666" target="_blank" rel="noreferrer">KT-51666</a></td><td style="text-align:left;">合格的 this：引入/優先考慮帶有型別案例的 this</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-54166" target="_blank" rel="noreferrer">KT-54166</a></td><td style="text-align:left;">確認類別路徑中 FQ 名稱衝突情況下的未指定行為</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64431" target="_blank" rel="noreferrer">KT-64431</a></td><td style="text-align:left;">K2：禁止在匯入中使用型別別名作為限定詞</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-56520" target="_blank" rel="noreferrer">KT-56520</a></td><td style="text-align:left;">K1/K2：當較低級別存在歧義時，解析樹對型別參考的工作不正確</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"可見性",tabindex:"-1"},[a("可見性 "),s("a",{class:"header-anchor",href:"#可見性","aria-label":'Permalink to "可見性 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">問題 ID</th><th style="text-align:left;">標題</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64474/" target="_blank" rel="noreferrer">KT-64474</a>*</td><td style="text-align:left;"><a href="#forbidden-use-of-inaccessible-generic-types">將不可存取型別的使用宣告為未指定行為</a></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-55179" target="_blank" rel="noreferrer">KT-55179</a></td><td style="text-align:left;">呼叫來自內部內聯函式的私有類別伴隨物件成員時，假負 PRIVATE_CLASS_MEMBER_FROM_INLINE</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-58042" target="_blank" rel="noreferrer">KT-58042</a></td><td style="text-align:left;">如果等效的 getter 不可見，即使被覆寫的宣告可見，也要使合成屬性不可見</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64255" target="_blank" rel="noreferrer">KT-64255</a></td><td style="text-align:left;">禁止在另一個模組中從派生類別存取內部 setter</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-33917" target="_blank" rel="noreferrer">KT-33917</a></td><td style="text-align:left;">禁止從私有內聯函式公開匿名型別</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-54997" target="_blank" rel="noreferrer">KT-54997</a></td><td style="text-align:left;">禁止從公共 API 內聯函式隱式存取非公共 API</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-56310" target="_blank" rel="noreferrer">KT-56310</a></td><td style="text-align:left;">智慧型轉型不應影響受保護成員的可見性</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65494" target="_blank" rel="noreferrer">KT-65494</a></td><td style="text-align:left;">禁止從公共內聯函式存取被忽略的私有運算子函式</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65004" target="_blank" rel="noreferrer">KT-65004</a></td><td style="text-align:left;">K1：覆寫受保護的 val 的 var 的 Setter 被生成為 public</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64972" target="_blank" rel="noreferrer">KT-64972</a></td><td style="text-align:left;">禁止 Kotlin/Native 在連結時通過私有成員覆寫</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"註解",tabindex:"-1"},[a("註解 "),s("a",{class:"header-anchor",href:"#註解","aria-label":'Permalink to "註解 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">問題 ID</th><th style="text-align:left;">標題</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-58723" target="_blank" rel="noreferrer">KT-58723</a></td><td style="text-align:left;">如果註解沒有 EXPRESSION 目標，則禁止使用註解標註語句</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-49930" target="_blank" rel="noreferrer">KT-49930</a></td><td style="text-align:left;">在 `REPEATED_ANNOTATION` 檢查期間忽略括號表達式</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57422" target="_blank" rel="noreferrer">KT-57422</a></td><td style="text-align:left;">K2：禁止在屬性 getter 上使用站點 &#39;get&#39; 目標註解</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-46483" target="_blank" rel="noreferrer">KT-46483</a></td><td style="text-align:left;">禁止在 where 子句中對型別參數進行註解</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64299" target="_blank" rel="noreferrer">KT-64299</a></td><td style="text-align:left;">伴隨作用域在解析伴隨物件上的註解時被忽略</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64654" target="_blank" rel="noreferrer">KT-64654</a></td><td style="text-align:left;">K2：在使用者和編譯器要求的註解之間引入歧義</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64527" target="_blank" rel="noreferrer">KT-64527</a></td><td style="text-align:left;">列舉值的註解不應複製到列舉值類別</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-63389" target="_blank" rel="noreferrer">KT-63389</a></td><td style="text-align:left;">K2：`WRONG_ANNOTATION_TARGET` 報告在包裝成 `()?` 的型別不相容註解上</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-63388" target="_blank" rel="noreferrer">KT-63388</a></td><td style="text-align:left;">K2：`WRONG_ANNOTATION_TARGET` 報告在 catch 參數型別的註解上</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"空安全",tabindex:"-1"},[a("空安全 "),s("a",{class:"header-anchor",href:"#空安全","aria-label":'Permalink to "空安全 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">問題 ID</th><th style="text-align:left;">標題</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-54521" target="_blank" rel="noreferrer">KT-54521</a>*</td><td style="text-align:left;"><a href="#improved-null-safety-for-java-primitive-arrays">棄用 Java 中標註為 Nullable 的陣列型別的不安全用法</a></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-41034" target="_blank" rel="noreferrer">KT-41034</a></td><td style="text-align:left;">K2：改變安全呼叫和慣例運算子組合的評估語義</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-50850" target="_blank" rel="noreferrer">KT-50850</a></td><td style="text-align:left;">父型別的順序定義繼承函式的可空性參數</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-53982" target="_blank" rel="noreferrer">KT-53982</a></td><td style="text-align:left;">在公共簽章中近似局部型別時保留可空性</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-62998" target="_blank" rel="noreferrer">KT-62998</a></td><td style="text-align:left;">禁止將可空值賦值給非空 Java 欄位作為不安全賦值的選擇器</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-63209" target="_blank" rel="noreferrer">KT-63209</a></td><td style="text-align:left;">報告缺少錯誤層級可空引數的錯誤，這些引數屬於警告層級 Java 型別</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"java-互通性",tabindex:"-1"},[a("Java 互通性 "),s("a",{class:"header-anchor",href:"#java-互通性","aria-label":'Permalink to "Java 互通性 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">問題 ID</th><th style="text-align:left;">標題</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-53061" target="_blank" rel="noreferrer">KT-53061</a></td><td style="text-align:left;">禁止源程式碼中具有相同 FQ 名稱的 Java 和 Kotlin 類別</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-49882" target="_blank" rel="noreferrer">KT-49882</a></td><td style="text-align:left;">從 Java 集合繼承的類別根據父型別的順序而行為不一致</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-66324" target="_blank" rel="noreferrer">KT-66324</a></td><td style="text-align:left;">K2：Java 類別從 Kotlin 私有類別繼承時的未指定行為</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-66220" target="_blank" rel="noreferrer">KT-66220</a></td><td style="text-align:left;">將 Java vararg 方法傳遞給內聯函式會導致運行時出現陣列的陣列而不是單個陣列</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-66204" target="_blank" rel="noreferrer">KT-66204</a></td><td style="text-align:left;">允許在 K-J-K 繼承層次結構中覆寫內部成員</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"屬性",tabindex:"-1"},[a("屬性 "),s("a",{class:"header-anchor",href:"#屬性","aria-label":'Permalink to "屬性 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">問題 ID</th><th style="text-align:left;">標題</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57555" target="_blank" rel="noreferrer">KT-57555</a>*</td><td style="text-align:left;"><a href="#immediate-initialization-of-open-properties-with-backing-fields">[LC] 禁止延遲初始化帶有支援欄位的 open 屬性</a></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-58589" target="_blank" rel="noreferrer">KT-58589</a></td><td style="text-align:left;">棄用當沒有主建構函式或類別為局部時遺漏的 MUST_BE_INITIALIZED</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64295" target="_blank" rel="noreferrer">KT-64295</a></td><td style="text-align:left;">禁止在屬性上潛在的 invoke 呼叫情況下進行遞迴解析</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57290" target="_blank" rel="noreferrer">KT-57290</a></td><td style="text-align:left;">棄用在基底類別從另一個模組來的不可見派生類別中的基底類別屬性上的智慧型轉型</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-62661" target="_blank" rel="noreferrer">KT-62661</a></td><td style="text-align:left;">K2：資料類別屬性遺漏 OPT_IN_USAGE_ERROR</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"控制流",tabindex:"-1"},[a("控制流 "),s("a",{class:"header-anchor",href:"#控制流","aria-label":'Permalink to "控制流 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">問題 ID</th><th style="text-align:left;">標題</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-56408" target="_blank" rel="noreferrer">KT-56408</a></td><td style="text-align:left;">K1 和 K2 之間類別初始化區塊中 CFA 規則不一致</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57871" target="_blank" rel="noreferrer">KT-57871</a></td><td style="text-align:left;">K1/K2 在括號中沒有 else 分支的 if 條件式上的不一致</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-42995" target="_blank" rel="noreferrer">KT-42995</a></td><td style="text-align:left;">在帶有初始化作用域函式的 try/catch 區塊中，假負 &quot;VAL_REASSIGNMENT&quot;</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65724" target="_blank" rel="noreferrer">KT-65724</a></td><td style="text-align:left;">將資料流資訊從 try 區塊傳播到 catch 和 finally 區塊</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"列舉類別",tabindex:"-1"},[a("列舉類別 "),s("a",{class:"header-anchor",href:"#列舉類別","aria-label":'Permalink to "列舉類別 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">問題 ID</th><th style="text-align:left;">標題</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57608" target="_blank" rel="noreferrer">KT-57608</a></td><td style="text-align:left;">在列舉項目初始化期間，禁止存取列舉類別的伴隨物件</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-34372" target="_blank" rel="noreferrer">KT-34372</a></td><td style="text-align:left;">報告列舉類別中虛擬內聯方法的遺漏錯誤</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-52802" target="_blank" rel="noreferrer">KT-52802</a></td><td style="text-align:left;">報告屬性/欄位和列舉項目之間解析歧義</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-47310" target="_blank" rel="noreferrer">KT-47310</a></td><td style="text-align:left;">當伴隨屬性優先於列舉項目時，變更限定詞解析行為</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"函式-sam-介面",tabindex:"-1"},[a("函式 (SAM) 介面 "),s("a",{class:"header-anchor",href:"#函式-sam-介面","aria-label":'Permalink to "函式 (SAM) 介面 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">問題 ID</th><th style="text-align:left;">標題</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-52628" target="_blank" rel="noreferrer">KT-52628</a></td><td style="text-align:left;">棄用需要 OptIn 但無註解的 SAM 建構函式使用</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57014" target="_blank" rel="noreferrer">KT-57014</a></td><td style="text-align:left;">禁止從 lambda 為 JDK 函式介面的 SAM 建構函式返回具有不正確可空性的值</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64342" target="_blank" rel="noreferrer">KT-64342</a></td><td style="text-align:left;">可呼叫參考的參數型別 SAM 轉換導致 CCE</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"伴隨物件",tabindex:"-1"},[a("伴隨物件 "),s("a",{class:"header-anchor",href:"#伴隨物件","aria-label":'Permalink to "伴隨物件 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">問題 ID</th><th style="text-align:left;">標題</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-54316" target="_blank" rel="noreferrer">KT-54316</a></td><td style="text-align:left;">伴隨物件成員的呼叫外參考具有無效簽章</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-47313" target="_blank" rel="noreferrer">KT-47313</a></td><td style="text-align:left;">當 V 具有伴隨物件時，變更 (V)::foo 參考解析</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"其他",tabindex:"-1"},[a("其他 "),s("a",{class:"header-anchor",href:"#其他","aria-label":'Permalink to "其他 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">問題 ID</th><th style="text-align:left;">標題</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-59739" target="_blank" rel="noreferrer">KT-59739</a>*</td><td style="text-align:left;">K2/MPP 報告 [ABSTRACT_MEMBER_NOT_IMPLEMENTED] 在共同程式碼中對於繼承者的情況，當實作位於實際對應物中時</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-49015" target="_blank" rel="noreferrer">KT-49015</a></td><td style="text-align:left;">合格的 this：在潛在標籤衝突情況下改變行為</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-56545" target="_blank" rel="noreferrer">KT-56545</a></td><td style="text-align:left;">修復 JVM 後端中函式命名不正確的問題，該問題發生在 Java 子類別中意外的衝突重載情況下</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-62019" target="_blank" rel="noreferrer">KT-62019</a></td><td style="text-align:left;">[LC 問題] 禁止在語句位置宣告 suspend 標記的匿名函式</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-55111" target="_blank" rel="noreferrer">KT-55111</a></td><td style="text-align:left;">OptIn：禁止帶有預設引數（帶有預設值的參數）的建構函式呼叫</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-61182" target="_blank" rel="noreferrer">KT-61182</a></td><td style="text-align:left;">單元轉換意外地被允許用於變數上的表達式 + invoke 解析</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-55199" target="_blank" rel="noreferrer">KT-55199</a></td><td style="text-align:left;">禁止將帶有適配的可呼叫參考提升為 KFunction</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65776" target="_blank" rel="noreferrer">KT-65776</a></td><td style="text-align:left;">[LC] K2 破壞 `false &amp;&amp; ...` 和 `false || ...`</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65682" target="_blank" rel="noreferrer">KT-65682</a></td><td style="text-align:left;">[LC] 棄用 `header`/`impl` 關鍵字</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-45375" target="_blank" rel="noreferrer">KT-45375</a></td><td style="text-align:left;">預設情況下，通過 invokedynamic + LambdaMetafactory 生成所有 Kotlin lambda</td></tr></tbody></table><h2 id="與-kotlin-版本的相容性" tabindex="-1">與 Kotlin 版本的相容性 <a class="header-anchor" href="#與-kotlin-版本的相容性" aria-label="Permalink to &quot;與 Kotlin 版本的相容性&quot;">​</a></h2><p>以下 Kotlin 版本支援新的 K2 編譯器：</p><table tabindex="0"><thead><tr><th style="text-align:left;">Kotlin 版本</th><th style="text-align:left;">穩定性等級</th></tr></thead><tbody><tr><td style="text-align:left;">2.0.0–2.2.10</td><td style="text-align:left;">穩定</td></tr><tr><td style="text-align:left;">1.9.20–1.9.25</td><td style="text-align:left;">測試版</td></tr><tr><td style="text-align:left;">1.9.0–1.9.10</td><td style="text-align:left;">JVM 是測試版</td></tr><tr><td style="text-align:left;">1.7.0–1.8.22</td><td style="text-align:left;">Alpha</td></tr></tbody></table><h2 id="與-kotlin-函式庫的相容性" tabindex="-1">與 Kotlin 函式庫的相容性 <a class="header-anchor" href="#與-kotlin-函式庫的相容性" aria-label="Permalink to &quot;與 Kotlin 函式庫的相容性&quot;">​</a></h2><p>如果您正在使用 Kotlin/JVM，K2 編譯器可與任何 Kotlin 版本編譯的函式庫配合使用。</p><p>如果您正在使用 Kotlin 多平台，K2 編譯器保證可與使用 Kotlin 1.9.20 及更高版本編譯的函式庫配合使用。</p><h2 id="編譯器外掛程式支援" tabindex="-1">編譯器外掛程式支援 <a class="header-anchor" href="#編譯器外掛程式支援" aria-label="Permalink to &quot;編譯器外掛程式支援&quot;">​</a></h2><p>目前，Kotlin K2 編譯器支援以下 Kotlin 編譯器外掛程式：</p><ul><li><a href="/zh-Hant/kotlin/all-open-plugin"><code>all-open</code></a></li><li><a href="https://github.com/Kotlin/kotlinx-atomicfu" target="_blank" rel="noreferrer">AtomicFU</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/plugins/jvm-abi-gen" target="_blank" rel="noreferrer"><code>jvm-abi-gen</code></a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/plugins/js-plain-objects" target="_blank" rel="noreferrer"><code>js-plain-objects</code></a></li><li><a href="/zh-Hant/kotlin/whatsnew1920#preview-kapt-compiler-plugin-with-k2">kapt</a></li><li><a href="/zh-Hant/kotlin/lombok">Lombok</a></li><li><a href="/zh-Hant/kotlin/no-arg-plugin"><code>no-arg</code></a></li><li><a href="https://plugins.gradle.org/plugin/org.jetbrains.kotlin.plugin.parcelize" target="_blank" rel="noreferrer">Parcelize</a></li><li><a href="/zh-Hant/kotlin/sam-with-receiver-plugin">SAM with receiver</a></li><li><a href="/zh-Hant/kotlin/serialization">Serialization</a></li></ul><p>此外，Kotlin K2 編譯器支援：</p><ul><li><a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> 1.5.0 編譯器外掛程式及更高版本。</li><li>自 <a href="https://android-developers.googleblog.com/2023/12/ksp2-preview-kotlin-k2-standalone.html" target="_blank" rel="noreferrer">KSP2</a> 起的 <a href="/zh-Hant/kotlin/ksp-overview">Kotlin 符號處理 (KSP)</a>。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果您使用任何額外的編譯器外掛程式，請查閱其文件以確認它們是否與 K2 相容。</p></div><h3 id="升級您的自訂編譯器外掛程式" tabindex="-1">升級您的自訂編譯器外掛程式 <a class="header-anchor" href="#升級您的自訂編譯器外掛程式" aria-label="Permalink to &quot;升級您的自訂編譯器外掛程式&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>自訂編譯器外掛程式使用外掛程式 API，此 API 屬於<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>階段。 因此，API 可能隨時變更，我們無法保證向後相容性。</p></div><p>升級過程有兩種途徑，具體取決於您擁有的自訂外掛程式類型。</p><h4 id="僅後端編譯器外掛程式" tabindex="-1">僅後端編譯器外掛程式 <a class="header-anchor" href="#僅後端編譯器外掛程式" aria-label="Permalink to &quot;僅後端編譯器外掛程式&quot;">​</a></h4><p>如果您的外掛程式僅實作 <code>IrGenerationExtension</code> 擴充點，則該過程與任何其他新的編譯器版本發佈相同。請檢查您使用的 API 是否有任何變更，並在必要時進行變更。</p><h4 id="後端和前端編譯器外掛程式" tabindex="-1">後端和前端編譯器外掛程式 <a class="header-anchor" href="#後端和前端編譯器外掛程式" aria-label="Permalink to &quot;後端和前端編譯器外掛程式&quot;">​</a></h4><p>如果您的外掛程式使用與前端相關的擴充點，您需要使用新的 K2 編譯器 API 重寫該外掛程式。有關新 API 的介紹，請參閱 <a href="https://github.com/JetBrains/kotlin/blob/master/docs/fir/fir-plugins.md" target="_blank" rel="noreferrer">FIR Plugin API</a>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您對升級自訂編譯器外掛程式有任何疑問，請加入我們的 <a href="https://kotlinlang.slack.com/archives/C7L3JB43G" target="_blank" rel="noreferrer">#compiler</a> Slack 頻道，我們將盡力為您提供幫助。</p></div><h2 id="分享您對新-k2-編譯器的回饋" tabindex="-1">分享您對新 K2 編譯器的回饋 <a class="header-anchor" href="#分享您對新-k2-編譯器的回饋" aria-label="Permalink to &quot;分享您對新 K2 編譯器的回饋&quot;">​</a></h2><p>我們將非常感謝您的任何回饋！</p><ul><li>在<a href="https://youtrack.jetbrains.com/newIssue?project=KT&amp;summary=K2+release+migration+issue&amp;description=Describe+the+problem+you+encountered+here.&amp;c=tag+k2-release-migration" target="_blank" rel="noreferrer">我們的問題追蹤器</a>中報告您在遷移到新 K2 編譯器時遇到的任何問題。</li><li><a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer">啟用傳送使用統計資訊選項</a>以允許 JetBrains 收集有關 K2 使用情況的匿名資料。</li></ul>',24)]))}const b=l(p,[["render",k]]);export{u as __pageData,b as default};
