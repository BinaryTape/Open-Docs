import{_ as h,C as a,c as p,o as k,j as s,G as n,ag as t,a as r,w as o}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/whatsnew17.md","filePath":"kotlin/whatsnew17.md","lastUpdated":1754307826000}'),d={name:"kotlin/whatsnew17.md"};function c(E,i,g,y,u,F){const l=a("tldr"),e=a("YouTubeVideo");return k(),p("div",null,[i[1]||(i[1]=s("h1",{id:"kotlin-1-7-0-的新特性",tabindex:"-1"},[r("Kotlin 1.7.0 的新特性 "),s("a",{class:"header-anchor",href:"#kotlin-1-7-0-的新特性","aria-label":'Permalink to "Kotlin 1.7.0 的新特性"'},"​")],-1)),n(l,null,{default:o(()=>i[0]||(i[0]=[s("p",null,"对 Kotlin 1.7.0 的 IDE 支持适用于 IntelliJ IDEA 2021.2、2021.3 和 2022.1。",-1)])),_:1}),i[2]||(i[2]=t('<p><em><a href="/kotlin/releases#release-details">发布时间：2022 年 6 月 9 日</a></em></p><p>Kotlin 1.7.0 已经发布。它推出了新的 Kotlin/JVM K2 编译器的 Alpha 版本，稳定了语言特性，并为 JVM、JS 和 Native 平台带来了性能改进。</p><p>此版本的主要更新列表如下：</p><ul><li><a href="#new-kotlin-k2-compiler-for-the-jvm-in-alpha">新的 Kotlin K2 编译器现已进入 Alpha 阶段</a>，并提供了显著的性能改进。它仅适用于 JVM，并且包括 kapt 在内的所有编译器插件均不支持它。</li><li><a href="#a-new-approach-to-incremental-compilation">Gradle 中增量编译的新方法</a>。增量编译现在还支持在依赖的非 Kotlin 模块中进行的更改，并且与 Gradle 兼容。</li><li>我们已稳定了<a href="#stable-opt-in-requirements">选择性加入要求注解</a>、<a href="#stable-definitely-non-nullable-types">明确的非空类型</a>和<a href="#stable-builder-inference">构建器推断</a>。</li><li><a href="#underscore-operator-for-type-arguments">现在有了类型实参的下划线操作符</a>。您可以使用它在指定其他类型时自动推断实参的类型。</li><li><a href="#allow-implementation-by-delegation-to-an-inlined-value-of-an-inline-class">此版本允许通过委托方式实现内联类的内联值</a>。您现在可以创建在大多数情况下不分配内存的轻量级封装器。</li></ul><p>您还可以通过此视频简要了解这些更改：</p>',5)),n(e,{src:"https://www.youtube.com/v/54WEfLKtCGk",title:"Kotlin 1.7.0 的新特性"}),i[3]||(i[3]=t(`<h2 id="新的-kotlin-k2-编译器现已进入-alpha-阶段" tabindex="-1">新的 Kotlin K2 编译器现已进入 Alpha 阶段 <a class="header-anchor" href="#新的-kotlin-k2-编译器现已进入-alpha-阶段" aria-label="Permalink to &quot;新的 Kotlin K2 编译器现已进入 Alpha 阶段&quot;">​</a></h2><p>此 Kotlin 版本引入了新的 Kotlin K2 编译器的 <strong>Alpha</strong> 版本。新编译器旨在加速新语言特性的开发，统一 Kotlin 支持的所有平台，带来性能改进，并提供编译器扩展的 API。</p><p>我们已经发布了关于新编译器及其优势的一些详细解释：</p><ul><li><a href="https://www.youtube.com/watch?v=iTdJJq_LyoY" target="_blank" rel="noreferrer">通往新 Kotlin 编译器的道路</a></li><li><a href="https://www.youtube.com/watch?v=db19VFLZqJM" target="_blank" rel="noreferrer">K2 编译器：自上而下的视图</a></li></ul><p>需要指出的是，对于新 K2 编译器的 Alpha 版本，我们主要专注于性能改进，并且它仅适用于 JVM 项目。它不支持 Kotlin/JS、Kotlin/Native 或其他多平台项目，并且包括 <a href="/kotlin/kapt">kapt</a> 在内的所有编译器插件均不适用于它。</p><p>我们的基准测试显示在内部项目上取得了卓越的成果：</p><table tabindex="0"><thead><tr><th>项目</th><th>当前 Kotlin 编译器性能</th><th>新 K2 Kotlin 编译器性能</th><th>性能提升</th></tr></thead><tbody><tr><td>Kotlin</td><td>2.2 KLOC/s</td><td>4.8 KLOC/s</td><td>~ x2.2</td></tr><tr><td>YouTrack</td><td>1.8 KLOC/s</td><td>4.2 KLOC/s</td><td>~ x2.3</td></tr><tr><td>IntelliJ IDEA</td><td>1.8 KLOC/s</td><td>3.9 KLOC/s</td><td>~ x2.2</td></tr><tr><td>Space</td><td>1.2 KLOC/s</td><td>2.8 KLOC/s</td><td>~ x2.3</td></tr></tbody></table><blockquote><p>KLOC/秒 性能数字代表编译器每秒处理的代码行数（千行）。</p><p style=""></p></blockquote><p>您可以在您的 JVM 项目上查看性能提升，并将其与旧编译器的结果进行比较。要启用 Kotlin K2 编译器，请使用以下编译器选项：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xuse-k2</span></span></code></pre></div><p>此外，K2 编译器<a href="https://youtrack.jetbrains.com/issues/KT?q=tag:%20FIR-preview-qa%20%23Resolved" target="_blank" rel="noreferrer">包含许多错误修复</a>。请注意，此列表中即使是 <strong>State: Open</strong> 的问题，实际上也已在 K2 中修复。</p><p>未来的 Kotlin 版本将改进 K2 编译器的稳定性并提供更多特性，敬请关注！</p><p>如果您遇到 Kotlin K2 编译器的任何性能问题，请将其<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">报告到我们的问题跟踪器</a>。</p><h2 id="语言" tabindex="-1">语言 <a class="header-anchor" href="#语言" aria-label="Permalink to &quot;语言&quot;">​</a></h2><p>Kotlin 1.7.0 引入了对通过委托方式实现的支持和类型实参的新下划线操作符。它还稳定了以前版本中作为预览引入的几个语言特性：</p><ul><li><a href="#allow-implementation-by-delegation-to-an-inlined-value-of-an-inline-class">通过委托方式实现内联类的内联值</a></li><li><a href="#underscore-operator-for-type-arguments">类型实参的下划线操作符</a></li><li><a href="#stable-builder-inference">稳定的构建器推断</a></li><li><a href="#stable-opt-in-requirements">稳定的选择性加入要求</a></li><li><a href="#stable-definitely-non-nullable-types">稳定的明确的非空类型</a></li></ul><h3 id="允许通过委托方式实现内联类的内联值" tabindex="-1">允许通过委托方式实现内联类的内联值 <a class="header-anchor" href="#允许通过委托方式实现内联类的内联值" aria-label="Permalink to &quot;允许通过委托方式实现内联类的内联值&quot;">​</a></h3><p>如果您想为值或类实例创建轻量级封装器，则必须手动实现所有接口方法。通过委托方式实现解决了这个问题，但它在 1.7.0 之前不适用于内联类。此限制已解除，因此您现在可以创建在大多数情况下不分配内存的轻量级封装器。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foo&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BarWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bar</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BarWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bw.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="类型实参的下划线操作符" tabindex="-1">类型实参的下划线操作符 <a class="header-anchor" href="#类型实参的下划线操作符" aria-label="Permalink to &quot;类型实参的下划线操作符&quot;">​</a></h3><p>Kotlin 1.7.0 引入了类型实参的下划线操作符 <code>_</code>。您可以使用它在指定其他类型时自动推断类型实参：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SomeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SomeImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SomeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Test&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OtherImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SomeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> S</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SomeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> S::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDeclaredConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // T 被推断为 String，因为 SomeImplementation 派生自 SomeClass&lt;String&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Runner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SomeImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // T 被推断为 Int，因为 OtherImplementation 派生自 SomeClass&lt;Int&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Runner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OtherImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您可以在变量列表中的任何位置使用下划线操作符来推断类型实参。</p></div><h3 id="稳定的构建器推断" tabindex="-1">稳定的构建器推断 <a class="header-anchor" href="#稳定的构建器推断" aria-label="Permalink to &quot;稳定的构建器推断&quot;">​</a></h3><p>构建器推断是一种特殊的类型推断，在调用泛型构建器函数时非常有用。它有助于编译器使用其 lambda 实参内部的其他调用类型信息来推断调用的类型实参。</p><p>从 1.7.0 开始，如果常规类型推断在不指定 <code>-Xenable-builder-inference</code> 编译器选项的情况下无法获取足够关于类型的信息，则构建器推断会自动激活。该选项是<a href="/kotlin/whatsnew16#changes-to-builder-inference">在 1.6.0 中引入的</a>。</p><p><a href="/kotlin/using-builders-with-builder-inference">了解如何编写自定义泛型构建器</a>。</p><h3 id="稳定的选择性加入要求" tabindex="-1">稳定的选择性加入要求 <a class="header-anchor" href="#稳定的选择性加入要求" aria-label="Permalink to &quot;稳定的选择性加入要求&quot;">​</a></h3><p><a href="/kotlin/opt-in-requirements">选择性加入要求</a>现已<a href="/kotlin/components-stability">稳定</a>，并且不需要额外的编译器配置。</p><p>在 1.7.0 之前，选择性加入特性本身需要实参 <code>-opt-in=kotlin.RequiresOptIn</code> 以避免警告。现在它不再需要此项；但是，您仍然可以使用编译器实参 <code>-opt-in</code> 来选择性加入其他注解，<a href="/kotlin/opt-in-requirements#opt-in-a-module">一个模块</a>。</p><h3 id="稳定的明确的非空类型" tabindex="-1">稳定的明确的非空类型 <a class="header-anchor" href="#稳定的明确的非空类型" aria-label="Permalink to &quot;稳定的明确的非空类型&quot;">​</a></h3><p>在 Kotlin 1.7.0 中，明确的非空类型已晋升为<a href="/kotlin/components-stability">稳定</a>。它们在扩展泛型 Java 类和接口时提供了更好的互操作性。</p><p>您可以使用新语法 <code>T &amp; Any</code> 在使用处将泛型类型形参标记为明确的非空类型。该语法形式源自<a href="https://en.wikipedia.org/wiki/Intersection_type" target="_blank" rel="noreferrer">交集类型</a>的表示法，现在限于 <code>&amp;</code> 左侧带有可空上界的类型形参和右侧带有非空 <code>Any</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; Any): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; Any </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x ?: y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 正常</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 错误：&#39;null&#39; 不能是非空类型的值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 正常</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 错误：&#39;null&#39; 不能是非空类型的值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/definitely-non-nullable-types.md" target="_blank" rel="noreferrer">此 KEEP</a> 中了解更多关于明确的非空类型的信息。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>此版本为 Kotlin/JVM 编译器带来了性能改进和新的编译器选项。此外，对函数式接口构造函数的<strong>可调用引用</strong>已成为<a href="/kotlin/components-stability">稳定</a>。请注意，从 1.7.0 开始，Kotlin/JVM 编译的默认目标版本是 <code>1.8</code>。</p><ul><li><a href="#compiler-performance-optimizations">编译器性能优化</a></li><li><a href="#new-compiler-option-xjdk-release">新编译器选项 -Xjdk-release</a></li><li><a href="#stable-callable-references-to-functional-interface-constructors">稳定的对函数式接口构造函数的<strong>可调用引用</strong></a></li><li><a href="#removed-jvm-target-version-1-6">移除了 JVM 目标版本 1.6</a></li></ul><h3 id="编译器性能优化" tabindex="-1">编译器性能优化 <a class="header-anchor" href="#编译器性能优化" aria-label="Permalink to &quot;编译器性能优化&quot;">​</a></h3><p>Kotlin 1.7.0 引入了对 Kotlin/JVM 编译器的性能改进。根据我们的基准测试，与 Kotlin 1.6.0 相比，编译时间<a href="https://youtrack.jetbrains.com/issue/KT-48233/Switching-to-JVM-IR-backend-increases-compilation-time-by-more-t#focus=Comments-27-6114542.0-0" target="_blank" rel="noreferrer">平均减少了 10%</a>。包含大量内联函数使用方式的项目，例如<a href="https://youtrack.jetbrains.com/issue/KT-51416/Compilation-of-kotlinx-html-DSL-should-still-be-faster" target="_blank" rel="noreferrer">使用 <code>kotlinx.html</code> 的项目</a>，由于字节码后处理的改进，编译速度将更快。</p><h3 id="新编译器选项-xjdk-release" tabindex="-1">新编译器选项：-Xjdk-release <a class="header-anchor" href="#新编译器选项-xjdk-release" aria-label="Permalink to &quot;新编译器选项：-Xjdk-release&quot;">​</a></h3><p>Kotlin 1.7.0 推出一个新编译器选项 <code>-Xjdk-release</code>。此选项类似于 <a href="http://openjdk.java.net/jeps/247" target="_blank" rel="noreferrer">javac 的命令行 <code>--release</code> 选项</a>。<code>-Xjdk-release</code> 选项控制目标字节码版本，并将类路径中 JDK 的 API 限制为指定的 Java 版本。例如，即使依赖项中的 JDK 版本为 9 或更高，<code>kotlinc -Xjdk-release=1.8</code> 也不允许引用 <code>java.lang.Module</code>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>此选项<a href="https://youtrack.jetbrains.com/issue/KT-29974" target="_blank" rel="noreferrer">不保证</a>对每个 JDK 分发版都有效。</p></div><p>请将您的反馈留在<a href="https://youtrack.jetbrains.com/issue/KT-29974/Add-a-compiler-option-Xjdk-release-similar-to-javac-s-release-to" target="_blank" rel="noreferrer">此 YouTrack 工单</a>中。</p><h3 id="稳定的对函数式接口构造函数的可调用引用" tabindex="-1">稳定的对函数式接口构造函数的<strong>可调用引用</strong> <a class="header-anchor" href="#稳定的对函数式接口构造函数的可调用引用" aria-label="Permalink to &quot;稳定的对函数式接口构造函数的**可调用引用**&quot;">​</a></h3><p>对函数式接口构造函数的<a href="/kotlin/reflection#callable-references">可调用引用</a>现已<a href="/kotlin/components-stability">稳定</a>。了解如何使用可调用引用从<a href="/kotlin/fun-interfaces#migration-from-an-interface-with-constructor-function-to-a-functional-interface">带有构造函数函数的接口迁移</a>到函数式接口。</p><p>如果您发现任何问题，请在 <a href="https://youtrack.jetbrains.com/newissue?project=kt" target="_blank" rel="noreferrer">YouTrack</a> 中报告。</p><h3 id="移除了-jvm-目标版本-1-6" tabindex="-1">移除了 JVM 目标版本 1.6 <a class="header-anchor" href="#移除了-jvm-目标版本-1-6" aria-label="Permalink to &quot;移除了 JVM 目标版本 1.6&quot;">​</a></h3><p>Kotlin/JVM 编译的默认目标版本是 <code>1.8</code>。<code>1.6</code> 目标已移除。</p><p>请迁移到 JVM 目标 1.8 或更高版本。了解如何更新 JVM 目标版本以用于：</p><ul><li><a href="/kotlin/gradle-compiler-options#attributes-specific-to-jvm">Gradle</a></li><li><a href="/kotlin/maven#attributes-specific-to-jvm">Maven</a></li><li><a href="/kotlin/compiler-reference#jvm-target-version">命令行编译器</a></li></ul><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.7.0 包含对 Objective-C 和 Swift 互操作性的更改，并稳定了以前版本中引入的特性。它还为新的内存管理器带来了性能改进以及其他更新：</p><ul><li><a href="#performance-improvements-for-the-new-memory-manager">新内存管理器的性能改进</a></li><li><a href="#unified-compiler-plugin-abi-with-jvm-and-js-ir-backends">与 JVM 和 JS IR 后端统一的编译器插件 ABI</a></li><li><a href="#support-for-standalone-android-executables">对独立 Android 可执行文件的支持</a></li><li><a href="#interop-with-swift-async-await-returning-void-instead-of-kotlinunit">与 Swift async/await 的互操作：返回 Void 而非 KotlinUnit</a></li><li><a href="#prohibited-undeclared-exceptions-through-objective-c-bridges">禁止通过 Objective-C 桥接未声明的异常</a></li><li><a href="#improved-cocoapods-integration">改进的 CocoaPods 集成</a></li><li><a href="#overriding-the-kotlin-native-compiler-download-url">覆盖 Kotlin/Native 编译器下载 URL</a></li></ul><h3 id="新内存管理器的性能改进" tabindex="-1">新内存管理器的性能改进 <a class="header-anchor" href="#新内存管理器的性能改进" aria-label="Permalink to &quot;新内存管理器的性能改进&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>新的 Kotlin/Native 内存管理器处于 <a href="/kotlin/components-stability">Alpha</a> 阶段。它未来可能会不兼容地更改，并需要手动迁移。我们非常感谢您在 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a> 中提供反馈。</p></div><p>新内存管理器仍处于 Alpha 阶段，但它正在走向<a href="/kotlin/components-stability">稳定</a>。此版本为新内存管理器带来了显著的性能改进，尤其是在垃圾回收 (GC) 方面。特别是，<a href="/kotlin/whatsnew1620">在 1.6.20 中引入</a>的扫描阶段的并发实现现已默认启用。这有助于减少应用程序因 GC 暂停的时间。新的 GC 调度器在选择 GC 频率方面表现更好，尤其适用于更大的堆。</p><p>此外，我们特别优化了调试二进制文件，确保在内存管理器的实现代码中使用了适当的优化级别和链接时优化。这帮助我们在基准测试中将调试二进制文件的执行时间缩短了大约 30%。</p><p>请在您的项目中尝试使用新的内存管理器以了解其工作原理，并在 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a> 中与我们分享您的反馈。</p><h3 id="与-jvm-和-js-ir-后端统一的编译器插件-abi" tabindex="-1">与 JVM 和 JS IR 后端统一的编译器插件 ABI <a class="header-anchor" href="#与-jvm-和-js-ir-后端统一的编译器插件-abi" aria-label="Permalink to &quot;与 JVM 和 JS IR 后端统一的编译器插件 ABI&quot;">​</a></h3><p>从 Kotlin 1.7.0 开始，Kotlin Multiplatform Gradle 插件默认使用 Kotlin/Native 的可嵌入编译器 jar。此<a href="/kotlin/whatsnew16#unified-compiler-plugin-abi-with-jvm-and-js-ir-backends">特性在 1.6.0 中宣布</a>为实验性的，现在它已<a href="/kotlin/components-stability">稳定</a>并可供使用。</p><p>此改进对库作者非常方便，因为它改善了编译器插件开发体验。在此版本之前，您必须为 Kotlin/Native 提供单独的 artifact，但现在您可以为 Native 和其他受支持的平台使用相同的编译器插件 artifact。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此特性可能要求插件开发者为其现有插件采取迁移步骤。 了解如何在<a href="https://youtrack.jetbrains.com/issue/KT-48595" target="_blank" rel="noreferrer">此 YouTrack 工单</a>中为更新准备您的插件。</p></div><h3 id="对独立-android-可执行文件的支持" tabindex="-1">对独立 Android 可执行文件的支持 <a class="header-anchor" href="#对独立-android-可执行文件的支持" aria-label="Permalink to &quot;对独立 Android 可执行文件的支持&quot;">​</a></h3><p>Kotlin 1.7.0 全面支持为 Android Native 目标生成标准可执行文件。它<a href="/kotlin/whatsnew1620#support-for-standalone-android-executables">在 1.6.20 中引入</a>，现在已默认启用。</p><p>如果您想回滚到 Kotlin/Native 生成共享库的之前行为，请使用以下设置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">binaryOptions[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidProgramType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;nativeActivity&quot;</span></span></code></pre></div><h3 id="与-swift-async-await-的互操作-返回-void-而非-kotlinunit" tabindex="-1">与 Swift async/await 的互操作：返回 Void 而非 KotlinUnit <a class="header-anchor" href="#与-swift-async-await-的互操作-返回-void-而非-kotlinunit" aria-label="Permalink to &quot;与 Swift async/await 的互操作：返回 Void 而非 KotlinUnit&quot;">​</a></h3><p>Kotlin <code>挂起</code>函数现在在 Swift 中返回 <code>Void</code> 类型而非 <code>KotlinUnit</code>。这是与 Swift 的 <code>async</code>/<code>await</code> 互操作性改进的结果。此特性<a href="/kotlin/whatsnew1620#interop-with-swift-async-await-returning-void-instead-of-kotlinunit">在 1.6.20 中引入</a>，此版本默认启用此行为。</p><p>您不再需要使用 <code>kotlin.native.binary.unitSuspendFunctionObjCExport=proper</code> 属性来为此类函数返回正确的类型。</p><h3 id="禁止通过-objective-c-桥接未声明的异常" tabindex="-1">禁止通过 Objective-C 桥接未声明的异常 <a class="header-anchor" href="#禁止通过-objective-c-桥接未声明的异常" aria-label="Permalink to &quot;禁止通过 Objective-C 桥接未声明的异常&quot;">​</a></h3><p>当您从 Swift/Objective-C 代码调用 Kotlin 代码（反之亦然），并且此代码抛出异常时，应由发生异常的代码处理，除非您明确允许通过适当的转换在语言之间转发异常（例如，使用 <code>@Throws</code> 注解）。</p><p>以前，Kotlin 还有另一种意外行为，即在某些情况下未声明的异常可能会从一种语言“泄露”到另一种语言。Kotlin 1.7.0 修复了该问题，现在此类情况会导致程序终止。</p><p>因此，例如，如果您在 Kotlin 中有一个 <code>{ throw Exception() }</code> lambda 表达式并从 Swift 调用它，在 Kotlin 1.7.0 中，一旦异常到达 Swift 代码，它就会终止。在以前的 Kotlin 版本中，此类异常可能会泄露到 Swift 代码。</p><p><code>@Throws</code> 注解将继续像以前一样工作。</p><h3 id="改进的-cocoapods-集成" tabindex="-1">改进的 CocoaPods 集成 <a class="header-anchor" href="#改进的-cocoapods-集成" aria-label="Permalink to &quot;改进的 CocoaPods 集成&quot;">​</a></h3><p>从 Kotlin 1.7.0 开始，如果您想在您的项目中集成 CocoaPods，您不再需要安装 <code>cocoapods-generate</code> 插件。</p><p>以前，您需要安装 CocoaPods 依赖项管理器和 <code>cocoapods-generate</code> 插件才能使用 CocoaPods，例如，在 Kotlin Multiplatform Mobile 项目中处理 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-ios-dependencies.html#with-cocoapods" target="_blank" rel="noreferrer">iOS 依赖项</a>。</p><p>现在设置 CocoaPods 集成更容易，并且我们解决了 <code>cocoapods-generate</code> 无法在 Ruby 3 及更高版本上安装的问题。现在支持在 Apple M1 上表现更好的最新 Ruby 版本。</p><p>了解如何设置<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html#set-up-an-environment-to-work-with-cocoapods" target="_blank" rel="noreferrer">初始 CocoaPods 集成</a>。</p><h3 id="覆盖-kotlin-native-编译器下载-url" tabindex="-1">覆盖 Kotlin/Native 编译器下载 URL <a class="header-anchor" href="#覆盖-kotlin-native-编译器下载-url" aria-label="Permalink to &quot;覆盖 Kotlin/Native 编译器下载 URL&quot;">​</a></h3><p>从 Kotlin 1.7.0 开始，您可以自定义 Kotlin/Native 编译器的下载 URL。当 CI 上的外部链接被禁止时，这很有用。</p><p>要覆盖默认基础 URL <code>https://download.jetbrains.com/kotlin/native/builds</code>，请使用以下 Gradle 属性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.distribution.baseDownloadUrl=https://example.com</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>下载器会将 native 版本和目标操作系统附加到此基础 URL，以确保它下载的是实际的编译器分发版。</p></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS 正在获得对 <a href="/kotlin/js-ir-compiler">JS IR 编译器后端</a>的进一步改进，以及其他可以改善您的开发体验的更新：</p><ul><li><a href="#performance-improvements-for-the-new-ir-backend">新 IR 后端的性能改进</a></li><li><a href="#minification-for-member-names-when-using-ir">使用 IR 时成员名称的最小化</a></li><li><a href="#support-for-older-browsers-via-polyfills-in-the-ir-backend">通过 IR 后端中的 polyfill 支持旧版浏览器</a></li><li><a href="#dynamically-load-javascript-modules-from-js-expressions">从 js 表达式动态加载 JavaScript 模块</a></li><li><a href="#specify-environment-variables-for-javascript-test-runners">为 JavaScript 测试运行器指定环境变量</a></li></ul><h3 id="新-ir-后端的性能改进" tabindex="-1">新 IR 后端的性能改进 <a class="header-anchor" href="#新-ir-后端的性能改进" aria-label="Permalink to &quot;新 IR 后端的性能改进&quot;">​</a></h3><p>此版本有一些主要更新，可以改善您的开发体验：</p><ul><li>Kotlin/JS 的增量编译性能已显著提高。构建 JS 项目所需时间更少。现在，在许多情况下，增量重建的速度应该大致与传统后端持平。</li><li>Kotlin/JS 最终 bundle 需要更少的空间，因为我们显著减小了最终 artifact 的大小。对于某些大型项目，我们测量到生产 bundle 大小比传统后端减少了多达 20%。</li><li>接口的类型检测已数量级地改进。</li><li>Kotlin 生成更高质量的 JS 代码</li></ul><h3 id="使用-ir-时成员名称的最小化" tabindex="-1">使用 IR 时成员名称的最小化 <a class="header-anchor" href="#使用-ir-时成员名称的最小化" aria-label="Permalink to &quot;使用 IR 时成员名称的最小化&quot;">​</a></h3><p>Kotlin/JS IR 编译器现在使用其关于 Kotlin 类和函数关系的内部信息来应用更高效的最小化，缩短函数、属性和类的名称。这缩小了最终打包的应用程序。</p><p>当您在生产模式下构建 Kotlin/JS 应用程序时，此类型的最小化会自动应用，并默认启用。要禁用成员名称最小化，请使用 <code>-Xir-minimized-member-names</code> 编译器标志：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compileKotlinTask.kotlinOptions.freeCompilerArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xir-minimized-member-names=false&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="通过-ir-后端中的-polyfill-支持旧版浏览器" tabindex="-1">通过 IR 后端中的 polyfill 支持旧版浏览器 <a class="header-anchor" href="#通过-ir-后端中的-polyfill-支持旧版浏览器" aria-label="Permalink to &quot;通过 IR 后端中的 polyfill 支持旧版浏览器&quot;">​</a></h3><p>Kotlin/JS 的 IR 编译器后端现在包含与传统后端相同的 polyfills。这允许使用新编译器编译的代码在不支持 Kotlin 标准库使用的所有 ES2015 方法的旧版浏览器中运行。只有项目中实际使用的 polyfills 才会被包含在最终 bundle 中，这最小化了它们对 bundle 大小的潜在影响。</p><p>此特性在使用 IR 编译器时默认启用，您无需配置它。</p><h3 id="从-js-表达式动态加载-javascript-模块" tabindex="-1">从 js 表达式动态加载 JavaScript 模块 <a class="header-anchor" href="#从-js-表达式动态加载-javascript-模块" aria-label="Permalink to &quot;从 js 表达式动态加载 JavaScript 模块&quot;">​</a></h3><p>在使用 JavaScript 模块时，大多数应用程序使用静态导入，其使用由 <a href="/kotlin/js-modules">JavaScript 模块集成</a>涵盖。但是，Kotlin/JS 缺少一种机制来在您的应用程序中运行时动态加载 JavaScript 模块。</p><p>从 Kotlin 1.7.0 开始，JavaScript 的 <code>import</code> 语句在 <code>js</code> 代码块中支持，允许您在运行时动态地将包引入您的应用程序：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myPackage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;import(&#39;my-package&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="为-javascript-测试运行器指定环境变量" tabindex="-1">为 JavaScript 测试运行器指定环境变量 <a class="header-anchor" href="#为-javascript-测试运行器指定环境变量" aria-label="Permalink to &quot;为 JavaScript 测试运行器指定环境变量&quot;">​</a></h3><p>为了调整 Node.js 包解析或将外部信息传递给 Node.js 测试，您现在可以指定 JavaScript 测试运行器使用的环境变量。要定义一个环境变量，请在构建脚本的 <code>testTask</code> 代码块内部使用带有键值对的 <code>environment()</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            testTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><p>在 Kotlin 1.7.0 中，标准库收到了一系列更改和改进。它们引入新特性，稳定实验性的特性，并统一对 Native、JS 和 JVM 的命名捕获组的支持：</p><ul><li><a href="#min-and-max-collection-functions-return-as-non-nullable">min() 和 max() 集合函数返回非空类型</a></li><li><a href="#regular-expression-matching-at-specific-indices">特定索引处的正则表达式匹配</a></li><li><a href="#extended-support-for-previous-language-and-api-versions">扩展了对以前语言和 API 版本的支持</a></li><li><a href="#access-to-annotations-via-reflection">通过反射访问注解</a></li><li><a href="#stable-deep-recursive-functions">稳定的深度递归函数</a></li><li><a href="#time-marks-based-on-inline-classes-for-default-time-source">基于内联类的默认时间源时间标记</a></li><li><a href="#new-experimental-extension-functions-for-java-optionals">Java Optional 的新实验性扩展函数</a></li><li><a href="#support-for-named-capturing-groups-in-js-and-native">JS 和 Native 中对命名捕获组的支持</a></li></ul><h3 id="min-和-max-集合函数返回非空类型" tabindex="-1">min() 和 max() 集合函数返回非空类型 <a class="header-anchor" href="#min-和-max-集合函数返回非空类型" aria-label="Permalink to &quot;min() 和 max() 集合函数返回非空类型&quot;">​</a></h3><p>在 <a href="/kotlin/whatsnew14">Kotlin 1.4.0</a> 中，我们将 <code>min()</code> 和 <code>max()</code> 集合函数重命名为 <code>minOrNull()</code> 和 <code>maxOrNull()</code>。这些新名称更好地反映了它们的行为——如果接收者集合为空则返回 null。它还有助于使函数的行为与 Kotlin 集合 API 中使用的命名约定保持一致。<code>minBy()</code>、<code>maxBy()</code>、<code>minWith()</code> 和 <code>maxWith()</code> 也是如此，它们都在 Kotlin 1.4.0 中获得了它们的 *OrNull() 同义词。受此更改影响的旧函数已逐步弃用。</p><p>Kotlin 1.7.0 重新引入了原始函数名称，但返回类型为非空。新的 <code>min()</code>、<code>max()</code>、<code>minBy()</code>、<code>maxBy()</code>、<code>minWith()</code> 和 <code>maxWith()</code> 函数现在严格返回集合元素或抛出异常。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;null&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;异常在... 集合为空。&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="特定索引处的正则表达式匹配" tabindex="-1">特定索引处的正则表达式匹配 <a class="header-anchor" href="#特定索引处的正则表达式匹配" aria-label="Permalink to &quot;特定索引处的正则表达式匹配&quot;">​</a></h3><p><a href="/kotlin/whatsnew1530#matching-with-regex-at-a-particular-position">在 1.5.30 中引入</a>的 <code>Regex.matchAt()</code> 和 <code>Regex.matchesAt()</code> 函数现已<a href="/kotlin/components-stability">稳定</a>。它们提供了一种检测正则表达式在 <code>String</code> 或 <code>CharSequence</code> 中的特定位置是否具有精确匹配的方法。</p><p><code>matchesAt()</code> 检测匹配并返回布尔结果：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> releaseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin 1.7.0 is on its way!&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 正则表达式：一位数字，点，一位数字，点，一位或多位数字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> versionRegex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchesAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;false&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchesAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>matchAt()</code> 如果找到匹配则返回匹配项，否则返回 <code>null</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> releaseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin 1.7.0 is on its way!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> versionRegex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;null&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1.7.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果您对此 <a href="https://youtrack.jetbrains.com/issue/KT-34021" target="_blank" rel="noreferrer">YouTrack 工单</a>有任何反馈，我们将不胜感激。</p><h3 id="扩展了对以前语言和-api-版本的支持" tabindex="-1">扩展了对以前语言和 API 版本的支持 <a class="header-anchor" href="#扩展了对以前语言和-api-版本的支持" aria-label="Permalink to &quot;扩展了对以前语言和 API 版本的支持&quot;">​</a></h3><p>为了支持库作者开发旨在与广泛的旧 Kotlin 版本兼容的库，并应对 Kotlin 主要版本发布频率的增加，我们扩展了对以前语言和 API 版本的支持。</p><p>通过 Kotlin 1.7.0，我们支持三个而非两个以前的语言和 API 版本。这意味着 Kotlin 1.7.0 支持开发面向 Kotlin 1.4.0 及更低版本的库。有关向后兼容性的更多信息，请参阅<a href="/kotlin/compatibility-modes">兼容模式</a>。</p><h3 id="通过反射访问注解" tabindex="-1">通过反射访问注解 <a class="header-anchor" href="#通过反射访问注解" aria-label="Permalink to &quot;通过反射访问注解&quot;">​</a></h3><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/find-annotations.html" target="_blank" rel="noreferrer"><code>KAnnotatedElement.findAnnotations()</code></a> 扩展函数，<a href="/kotlin/whatsnew16#repeatable-annotations-with-runtime-retention-for-1-8-jvm-target">在 1.6.0 中首次引入</a>，现已<a href="/kotlin/components-stability">稳定</a>。此<a href="/kotlin/reflection">反射</a>函数返回元素上给定类型的所有注解，包括单独应用的注解和重复注解。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Repeatable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;First Tag&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Second Tag&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> taggedFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m a tagged function!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">taggedFunction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KAnnotatedElement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findAnnotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [@Tag(name=First Tag), @Tag(name=Second Tag)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="稳定的深度递归函数" tabindex="-1">稳定的深度递归函数 <a class="header-anchor" href="#稳定的深度递归函数" aria-label="Permalink to &quot;稳定的深度递归函数&quot;">​</a></h3><p>深度递归函数自 <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-rc-debugging-coroutines/#Defining_deep_recursive_functions_using_coroutines" target="_blank" rel="noreferrer">Kotlin 1.4.0</a> 以来一直作为实验性特性提供，它们现在在 Kotlin 1.7.0 中已<a href="/kotlin/components-stability">稳定</a>。使用 <code>DeepRecursiveFunction</code>，您可以定义一个将其堆栈保存在堆上而不是使用实际调用栈的函数。这允许您运行非常深的递归计算。要调用深度递归函数，请 <code>invoke</code> 它。</p><p>在此示例中，深度递归函数用于递归地计算二叉树的深度。即使此示例函数递归调用自身 100,000 次，也不会抛出 <code>StackOverflowError</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> calculateDepth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DeepRecursiveFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> maxOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        callRecursive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t.left),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        callRecursive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t.right)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 生成一个深度为 100_000 的树</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deepTree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) { prev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prev, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">last</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">calculateDepth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deepTree)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 100000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>考虑在代码中使用深度递归函数，当您的递归深度超过 1000 次调用时。</p><h3 id="基于内联类的默认时间源时间标记" tabindex="-1">基于内联类的默认时间源时间标记 <a class="header-anchor" href="#基于内联类的默认时间源时间标记" aria-label="Permalink to &quot;基于内联类的默认时间源时间标记&quot;">​</a></h3><p>Kotlin 1.7.0 通过将 <code>TimeSource.Monotonic</code> 返回的时间标记更改为内联值类，改进了时间测量功能 的性能。这意味着调用 <code>markNow()</code>、<code>elapsedNow()</code>、<code>measureTime()</code> 和 <code>measureTimedValue()</code> 等函数不会为其 <code>TimeMark</code> 实例分配封装器类。特别是在测量热路径中的一段代码时，这有助于最小化测量对性能的影响：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalTime::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeSource.Monotonic.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回的 \`TimeMark\` 是内联类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsedDuration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elapsedNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>仅当获取 <code>TimeMark</code> 的时间源静态已知为 <code>TimeSource.Monotonic</code> 时，此优化才可用。</p></div><h3 id="java-optional-的新实验性扩展函数" tabindex="-1">Java Optional 的新实验性扩展函数 <a class="header-anchor" href="#java-optional-的新实验性扩展函数" aria-label="Permalink to &quot;Java Optional 的新实验性扩展函数&quot;">​</a></h3><p>Kotlin 1.7.0 带来了新的便利函数，简化了 Java 中 <code>Optional</code> 类的工作。这些新函数可用于在 JVM 上解包和转换 Optional 对象，并有助于使 Java API 的使用更简洁。</p><p><code>getOrNull()</code>、<code>getOrDefault()</code> 和 <code>getOrElse()</code> 扩展函数允许您在 <code>Optional</code> 存在时获取其值。否则，您将分别获得 <code>null</code>、默认值或由函数返回的值：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> presentOptional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m here!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(presentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;我在这里！&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> absentOptional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(absentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(absentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Nobody here!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;这里没人！&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(absentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrElse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Optional 不存在！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;默认值！&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Optional 不存在！&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;默认值！&quot;</span></span></code></pre></div><p><code>toList()</code>、<code>toSet()</code> 和 <code>asSequence()</code> 扩展函数将存在的 <code>Optional</code> 值转换为 list、set 或 sequence，否则返回空集合。<code>toCollection()</code> 扩展函数将 <code>Optional</code> 值附加到已存在的目的地集合：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> presentOptional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m here!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> absentOptional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(presentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> absentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&quot;我在这里！&quot;], []</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(presentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> absentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&quot;我在这里！&quot;], []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCollection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">absentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toCollection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCollection)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCollection)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">presentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toCollection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCollection)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCollection)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&quot;我在这里！&quot;]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(presentOptional, absentOptional).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&quot;我在这里！&quot;]</span></span></code></pre></div><p>这些扩展函数作为实验性特性在 Kotlin 1.7.0 中引入。您可以在<a href="https://github.com/Kotlin/KEEP/pull/291" target="_blank" rel="noreferrer">此 KEEP</a> 中了解更多关于 <code>Optional</code> 扩展的信息。一如既往，我们欢迎您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">Kotlin 问题跟踪器</a>中提供反馈。</p><h3 id="js-和-native-中对命名捕获组的支持" tabindex="-1">JS 和 Native 中对命名捕获组的支持 <a class="header-anchor" href="#js-和-native-中对命名捕获组的支持" aria-label="Permalink to &quot;JS 和 Native 中对命名捕获组的支持&quot;">​</a></h3><p>从 Kotlin 1.7.0 开始，命名捕获组不仅在 JVM 上支持，也在 JS 和 Native 平台上支持。</p><p>要为捕获组命名，请在正则表达式中使用 (<code>?&lt;name&gt;group</code>) 语法。要获取组匹配的文本，请调用新引入的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/get.html" target="_blank" rel="noreferrer"><code>MatchGroupCollection.get()</code></a> 函数并传递组名。</p><h4 id="按名称检索匹配组值" tabindex="-1">按名称检索匹配组值 <a class="header-anchor" href="#按名称检索匹配组值" aria-label="Permalink to &quot;按名称检索匹配组值&quot;">​</a></h4><p>考虑此匹配城市坐标的示例。要获取正则表达式匹配的组的集合，请使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-match-result/groups.html" target="_blank" rel="noreferrer"><code>groups</code></a>。比较通过其编号（索引）和通过其名称使用 <code>value</code> 获取组内容：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">b(?&lt;city&gt;[A-Za-z</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s]+),</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s(?&lt;state&gt;[A-Z]{2}):</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s(?&lt;areaCode&gt;[0-9]{3})</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Coordinates: Austin, TX: 123&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> match </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.groups[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;city&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Austin&quot; — 按名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.groups[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;TX&quot; — 按编号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="命名反向引用" tabindex="-1">命名反向引用 <a class="header-anchor" href="#命名反向引用" aria-label="Permalink to &quot;命名反向引用&quot;">​</a></h4><p>您现在还可以在反向引用组时使用组名。反向引用匹配之前由捕获组匹配的相同文本。为此，请在正则表达式中使用 <code>\\k&lt;name&gt;</code> 语法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> backRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;(?&lt;title&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">w+), yes </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">k&lt;title&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> match </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Do you copy? Sir, yes Sir!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Sir, yes Sir&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.groups[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Sir&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="替换表达式中的命名组" tabindex="-1">替换表达式中的命名组 <a class="header-anchor" href="#替换表达式中的命名组" aria-label="Permalink to &quot;替换表达式中的命名组&quot;">​</a></h4><p>命名组引用可以与替换表达式一起使用。考虑 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/replace.html" target="_blank" rel="noreferrer"><code>replace()</code></a> 函数，它用替换表达式替换输入中指定正则表达式的所有出现项，以及 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/replace-first.html" target="_blank" rel="noreferrer"><code>replaceFirst()</code></a> 函数，它只交换第一个匹配项。</p><p>替换字符串中 <code>\${name}</code> 的出现项将被替换为与具有指定名称的捕获组对应的子序列。您可以比较组引用中按名称和索引进行的替换：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dateReplace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dateRegex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(?&lt;dd&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d{2})-(?&lt;mm&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d{2})-(?&lt;yyyy&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d{4})&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Date of birth: 27-04-2022&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dateRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{yyyy}-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{mm}-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{dd}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;出生日期：2022-04-27&quot; — 按名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dateRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;出生日期：2022-04-27&quot; — 按编号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>此版本引入了新的构建报告、对 Gradle 插件变体的支持、kapt 中的新统计数据等等：</p><ul><li><a href="#a-new-approach-to-incremental-compilation">增量编译的新方法</a></li><li><a href="#build-reports-for-kotlin-compiler-tasks">用于跟踪编译器性能的新构建报告</a></li><li><a href="#bumping-minimum-supported-versions">Gradle 和 Android Gradle 插件最低支持版本的更改</a></li><li><a href="#support-for-gradle-plugin-variants">对 Gradle 插件变体的支持</a></li><li><a href="#updates-in-the-kotlin-gradle-plugin-api">Kotlin Gradle 插件 API 的更新</a></li><li><a href="#the-sam-with-receiver-plugin-is-available-via-the-plugins-api">sam-with-receiver 插件通过插件 API 可用</a></li><li><a href="#changes-in-compile-tasks">编译任务的更改</a></li><li><a href="#statistics-of-generated-files-by-each-annotation-processor-in-kapt">kapt 中每个注解处理器生成文件的新统计数据</a></li><li><a href="#deprecation-of-the-kotlin-compiler-execution-strategy-system-property">kotlin.compiler.execution.strategy 系统属性的弃用</a></li><li><a href="#removal-of-deprecated-options-methods-and-plugins">移除了已弃用的选项、方法和插件</a></li></ul><h3 id="增量编译的新方法" tabindex="-1">增量编译的新方法 <a class="header-anchor" href="#增量编译的新方法" aria-label="Permalink to &quot;增量编译的新方法&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>增量编译的新方法是<a href="/kotlin/components-stability">实验性的</a>。它可能随时被取消或更改。需要选择性加入（详见下文）。我们鼓励您仅将其用于评估目的，并且我们非常感谢您在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 中提供反馈。</p></div><p>在 Kotlin 1.7.0 中，我们重新设计了跨模块更改的增量编译。现在增量编译还支持在依赖的非 Kotlin 模块中进行的更改，并且与 <a href="https://docs.gradle.org/current/userguide/build_cache.html" target="_blank" rel="noreferrer">Gradle 构建缓存</a>兼容。对编译避免的支持也已改进。</p><p>我们预计，如果您使用构建缓存或频繁在非 Kotlin Gradle 模块中进行更改，您将看到新方法的最显著优势。我们对 <code>kotlin-gradle-plugin</code> 模块上的 Kotlin 项目进行的测试显示，缓存命中后更改的改进超过 80%。</p><p>要尝试这种新方法，请在您的 <code>gradle.properties</code> 中设置以下选项：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.incremental.useClasspathSnapshot=true</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>增量编译的新方法目前仅适用于 Gradle 构建系统中的 JVM 后端。</p></div><p><a href="https://blog.jetbrains.com/kotlin/2022/07/a-new-approach-to-incremental-compilation-in-kotlin/" target="_blank" rel="noreferrer">在此博客文章</a>中了解增量编译新方法的底层实现细节。</p><p>我们的计划是稳定这项技术，并增加对其他后端（例如 JS）和构建系统的支持。如果您在此编译方案中遇到任何问题或异常行为，我们将不胜感激您在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 中报告。谢谢！</p><p>Kotlin 团队非常感谢 <a href="https://github.com/gavra0" target="_blank" rel="noreferrer">Ivan Gavrilovic</a>、<a href="https://github.com/hungvietnguyen" target="_blank" rel="noreferrer">Hung Nguyen</a>、<a href="https://github.com/melix" target="_blank" rel="noreferrer">Cédric Champeau</a> 以及其他外部贡献者的帮助。</p><h3 id="用于跟踪编译器性能的新构建报告" tabindex="-1">用于跟踪编译器性能的新构建报告 <a class="header-anchor" href="#用于跟踪编译器性能的新构建报告" aria-label="Permalink to &quot;用于跟踪编译器性能的新构建报告&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin 构建报告是<a href="/kotlin/components-stability">实验性的</a>。它们可能随时被取消或更改。需要选择性加入（详见下文）。仅将其用于评估目的。我们感谢您在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 中提供有关它们的反馈。</p></div><p>Kotlin 1.7.0 引入了构建报告，有助于跟踪编译器性能。报告包含不同编译阶段的持续时间以及编译无法增量的原因。</p><p>当您想调查编译器任务的问题时，构建报告会派上用场，例如：</p><ul><li>当 Gradle 构建花费太多时间并且您想了解性能不佳的根本原因时。</li><li>当同一项目的编译时间不同，有时只需几秒，有时则需要几分钟时。</li></ul><p>要启用构建报告，请在 <code>gradle.properties</code> 中声明构建报告输出的保存位置：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.output=file</span></span></code></pre></div><p>以下值（及其组合）可用：</p><ul><li><p><code>file</code> 将构建报告保存到本地文件。</p></li><li><p><code>build_scan</code> 将构建报告保存到<a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">构建扫描</a>的 <code>custom values</code> 部分。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Gradle Enterprise 插件限制了自定义值的数量及其长度。在大型项目中，某些值可能会丢失。</p></div></li><li><p><code>http</code> 使用 HTTP(S) 发布构建报告。POST 方法以 JSON 格式发送指标。数据可能因版本而异。您可以在 <a href="https://github.com/JetBrains/kotlin/blob/master/libraries/tools/kotlin-gradle-plugin/src/common/kotlin/org/jetbrains/kotlin/gradle/report/data/GradleCompileStatisticsData.kt" target="_blank" rel="noreferrer">Kotlin 版本库</a>中查看发送数据的当前版本。</p></li></ul><p>有两种常见情况，通过分析长时间运行编译的构建报告可以帮助您解决：</p><ul><li>构建不是增量的。分析原因并修复底层问题。</li><li>构建是增量的，但花费太多时间。尝试重新组织源文件 — 拆分大文件，将独立类保存在不同文件中，重构大型类，在不同文件中声明顶层函数等等。</li></ul><p><a href="https://blog.jetbrains.com/kotlin/2022/06/introducing-kotlin-build-reports/" target="_blank" rel="noreferrer">在此博客文章</a>中了解更多关于新构建报告的信息。</p><p>欢迎您在您的基础设施中尝试使用构建报告。如果您有任何反馈、遇到任何问题或希望提出改进建议，请随时在我们的<a href="https://youtrack.jetbrains.com/newIssue" target="_blank" rel="noreferrer">问题跟踪器</a>中报告。谢谢！</p><h3 id="gradle-和-android-gradle-插件最低支持版本的更改" tabindex="-1">Gradle 和 Android Gradle 插件最低支持版本的更改 <a class="header-anchor" href="#gradle-和-android-gradle-插件最低支持版本的更改" aria-label="Permalink to &quot;Gradle 和 Android Gradle 插件最低支持版本的更改&quot;">​</a></h3><p>从 Kotlin 1.7.0 开始，最低支持的 Gradle 版本是 6.7.1。我们<a href="https://youtrack.jetbrains.com/issue/KT-49733/Bump-minimal-supported-Gradle-version-to-6-7-1" target="_blank" rel="noreferrer">不得不提高版本</a>以支持 <a href="#support-for-gradle-plugin-variants">Gradle 插件变体</a>和新的 Gradle API。在未来，由于 Gradle 插件变体特性，我们不必经常提高最低支持版本。</p><p>此外，最低支持的 Android Gradle 插件版本现在是 3.6.4。</p><h3 id="对-gradle-插件变体的支持" tabindex="-1">对 Gradle 插件变体的支持 <a class="header-anchor" href="#对-gradle-插件变体的支持" aria-label="Permalink to &quot;对 Gradle 插件变体的支持&quot;">​</a></h3><p>Gradle 7.0 为 Gradle 插件作者引入了一项新特性 — <a href="https://docs.gradle.org/7.0/userguide/implementing_gradle_plugins.html#plugin-with-variants" target="_blank" rel="noreferrer">带有变体的插件</a>。此特性使添加对新 Gradle 特性的支持变得更容易，同时保持对 Gradle 7.1 以下版本的兼容性。了解更多关于 <a href="https://docs.gradle.org/current/userguide/variant_model.html" target="_blank" rel="noreferrer">Gradle 中变体选择</a>的信息。</p><p>通过 Gradle 插件变体，我们可以针对不同的 Gradle 版本发布不同的 Kotlin Gradle 插件变体。目标是在 <code>main</code> 变体中支持基础 Kotlin 编译，该变体对应于最旧的受支持 Gradle 版本。每个变体都将包含相应版本中 Gradle 特性的实现。最新的变体将支持最广泛的 Gradle 特性集。通过这种方法，我们可以扩展对旧版 Gradle 的支持，但功能有限。</p><p>目前，Kotlin Gradle 插件只有两种变体：</p><ul><li><code>main</code> 适用于 Gradle 6.7.1–6.9.3 版本</li><li><code>gradle70</code> 适用于 Gradle 7.0 及更高版本</li></ul><p>在未来的 Kotlin 版本中，我们可能会添加更多。</p><p>要检查您的构建使用了哪个变体，请启用 <a href="https://docs.gradle.org/current/userguide/logging.html#sec:choosing_a_log_level" target="_blank" rel="noreferrer"><code>--info</code> 日志级别</a>并在输出中查找以 <code>Using Kotlin Gradle plugin</code> 开头的字符串，例如 <code>Using Kotlin Gradle plugin main variant</code>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>以下是 Gradle 中变体选择的一些已知问题的解决方法： * <a href="https://github.com/gradle/gradle/issues/20545" target="_blank" rel="noreferrer">pluginManagement 中的 ResolutionStrategy 对多变体插件不起作用</a> * <a href="https://github.com/gradle/gradle/issues/20847" target="_blank" rel="noreferrer">当插件作为 <code>buildSrc</code> 公共依赖项添加时，插件变体会被忽略</a></p></div><p>请在<a href="https://youtrack.jetbrains.com/issue/KT-49227/Support-Gradle-plugins-variants" target="_blank" rel="noreferrer">此 YouTrack 工单</a>中留下您的反馈。</p><h3 id="kotlin-gradle-插件-api-的更新" tabindex="-1">Kotlin Gradle 插件 API 的更新 <a class="header-anchor" href="#kotlin-gradle-插件-api-的更新" aria-label="Permalink to &quot;Kotlin Gradle 插件 API 的更新&quot;">​</a></h3><p>Kotlin Gradle 插件 API artifact 收到了一些改进：</p><ul><li><p>Kotlin/JVM 和 Kotlin/kapt 任务有了新的接口，支持用户可配置的输入。</p></li><li><p>有一个新的 <code>KotlinBasePlugin</code> 接口，所有 Kotlin 插件都继承自它。当您想在应用任何 Kotlin Gradle 插件（JVM、JS、Multiplatform、Native 和其他平台）时触发一些配置操作时，请使用此接口：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">project.plugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinBasePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Configure your action here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以在<a href="https://youtrack.jetbrains.com/issue/KT-48008/Consider-offering-a-KotlinBasePlugin" target="_blank" rel="noreferrer">此 YouTrack 工单</a>中留下关于 <code>KotlinBasePlugin</code> 的反馈。</p></li><li><p>我们为 Android Gradle 插件奠定了基础，使其能够在自身内部配置 Kotlin 编译，这意味着您将不再需要将 Kotlin Android Gradle 插件添加到您的构建中。关注 <a href="https://developer.android.com/studio/releases/gradle-plugin" target="_blank" rel="noreferrer">Android Gradle 插件发布公告</a>以了解新增的支持并试用它！</p></li></ul><h3 id="sam-with-receiver-插件通过插件-api-可用" tabindex="-1">sam-with-receiver 插件通过插件 API 可用 <a class="header-anchor" href="#sam-with-receiver-插件通过插件-api-可用" aria-label="Permalink to &quot;sam-with-receiver 插件通过插件 API 可用&quot;">​</a></h3><p><a href="/kotlin/sam-with-receiver-plugin">sam-with-receiver 编译器插件</a>现在可以通过 <a href="https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block" target="_blank" rel="noreferrer">Gradle 插件 DSL</a> 使用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin.plugin.sam.with.receiver&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$kotlin_version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="编译任务的更改" tabindex="-1">编译任务的更改 <a class="header-anchor" href="#编译任务的更改" aria-label="Permalink to &quot;编译任务的更改&quot;">​</a></h3><p>编译任务在此版本中收到了许多更改：</p><ul><li>Kotlin 编译任务不再继承 Gradle <code>AbstractCompile</code> 任务。它们仅继承 <code>DefaultTask</code>。</li><li><code>AbstractCompile</code> 任务具有 <code>sourceCompatibility</code> 和 <code>targetCompatibility</code> 输入。由于 <code>AbstractCompile</code> 任务不再继承，这些输入在 Kotlin 用户脚本中不再可用。</li><li><code>SourceTask.stableSources</code> 输入不再可用，您应该使用 <code>sources</code> 输入。<code>setSource(...)</code> 方法仍然可用。</li><li>所有编译任务现在都使用 <code>libraries</code> 输入来获取编译所需的库列表。<code>KotlinCompile</code> 任务仍然具有已弃用的 Kotlin 属性 <code>classpath</code>，该属性将在未来的版本中移除。</li><li>编译任务仍然实现 <code>PatternFilterable</code> 接口，该接口允许过滤 Kotlin 源。<code>sourceFilesExtensions</code> 输入已移除，转而使用 <code>PatternFilterable</code> 方法。</li><li>已弃用的 <code>Gradle destinationDir: File</code> 输出已替换为 <code>destinationDirectory: DirectoryProperty</code> 输出。</li><li>Kotlin/Native <code>AbstractNativeCompile</code> 任务现在继承 <code>AbstractKotlinCompileTool</code> 基类。这是将 Kotlin/Native 构建工具集成到所有其他工具中的第一步。</li></ul><p>请在<a href="https://youtrack.jetbrains.com/issue/KT-32805" target="_blank" rel="noreferrer">此 YouTrack 工单</a>中留下您的反馈。</p><h3 id="kapt-中每个注解处理器生成文件的新统计数据" tabindex="-1">kapt 中每个注解处理器生成文件的新统计数据 <a class="header-anchor" href="#kapt-中每个注解处理器生成文件的新统计数据" aria-label="Permalink to &quot;kapt 中每个注解处理器生成文件的新统计数据&quot;">​</a></h3><p><code>kotlin-kapt</code> Gradle 插件已经<a href="https://github.com/JetBrains/kotlin/pull/4280" target="_blank" rel="noreferrer">报告了每个处理器的性能统计数据</a>。从 Kotlin 1.7.0 开始，它还可以报告每个注解处理器生成文件数量的统计数据。</p><p>这对于跟踪构建中是否存在未使用的注解处理器很有用。您可以使用生成的报告查找触发不必要注解处理器的模块，并更新模块以防止这种情况。</p><p>通过两个步骤启用统计：</p><ul><li><p>在您的 <code>build.gradle.kts</code> 中将 <code>showProcessorStats</code> 标志设置为 <code>true</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kapt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    showProcessorStats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>在您的 <code>gradle.properties</code> 中将 <code>kapt.verbose</code> Gradle 属性设置为 <code>true</code>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kapt.verbose=true</span></span></code></pre></div></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您还可以通过<a href="/kotlin/kapt#use-in-cli">命令行选项 <code>verbose</code></a> 启用详细输出。</p></div><p>统计信息将以 <code>info</code> 级别显示在日志中。您将看到 <code>Annotation processor stats:</code> 行，后面是关于每个注解处理器执行时间的统计信息。在这些行之后，将是 <code>Generated files report:</code> 行，后面是关于每个注解处理器生成文件数量的统计信息。例如：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[INFO] Annotation processor stats:</span></span>
<span class="line"><span>[INFO] org.mapstruct.ap.MappingProcessor: total: 290 ms, init: 1 ms, 3 round(s): 289 ms, 0 ms, 0 ms</span></span>
<span class="line"><span>[INFO] Generated files report:</span></span>
<span class="line"><span>[INFO] org.mapstruct.ap.MappingProcessor: total sources: 2, sources per round: 2, 0, 0</span></span></code></pre></div><p>请在<a href="https://youtrack.jetbrains.com/issue/KT-51132/KAPT-Support-reporting-the-number-of-generated-files-by-each-ann" target="_blank" rel="noreferrer">此 YouTrack 工单</a>中留下您的反馈。</p><h3 id="kotlin-compiler-execution-strategy-系统属性的弃用" tabindex="-1">kotlin.compiler.execution.strategy 系统属性的弃用 <a class="header-anchor" href="#kotlin-compiler-execution-strategy-系统属性的弃用" aria-label="Permalink to &quot;kotlin.compiler.execution.strategy 系统属性的弃用&quot;">​</a></h3><p>Kotlin 1.6.20 引入了<a href="/kotlin/whatsnew1620#properties-for-defining-kotlin-compiler-execution-strategy">用于定义 Kotlin 编译器执行策略的新属性</a>。在 Kotlin 1.7.0 中，旧系统属性 <code>kotlin.compiler.execution.strategy</code> 的弃用周期已经开始，转而使用新属性。</p><p>当使用 <code>kotlin.compiler.execution.strategy</code> 系统属性时，您将收到警告。此属性将在未来的版本中删除。为了保留旧行为，请将系统属性替换为同名的 Gradle 属性。例如，您可以在 <code>gradle.properties</code> 中执行此操作：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.compiler.execution.strategy=out-of-process</span></span></code></pre></div><p>您还可以使用编译任务属性 <code>compilerExecutionStrategy</code>。在 <a href="/kotlin/gradle-compilation-and-caches#defining-kotlin-compiler-execution-strategy">Gradle 页面</a>上了解更多信息。</p><h3 id="移除了已弃用的选项、方法和插件" tabindex="-1">移除了已弃用的选项、方法和插件 <a class="header-anchor" href="#移除了已弃用的选项、方法和插件" aria-label="Permalink to &quot;移除了已弃用的选项、方法和插件&quot;">​</a></h3><h4 id="移除了-useexperimentalannotation-方法" tabindex="-1">移除了 useExperimentalAnnotation 方法 <a class="header-anchor" href="#移除了-useexperimentalannotation-方法" aria-label="Permalink to &quot;移除了 useExperimentalAnnotation 方法&quot;">​</a></h4><p>在 Kotlin 1.7.0 中，我们完成了 <code>useExperimentalAnnotation</code> Gradle 方法的弃用周期。改用 <code>optIn()</code> 来选择性加入在模块中使用 API。</p><p>例如，如果您的 Gradle 模块是多平台的：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageSettings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">optIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.mylibrary.OptInAnnotation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>了解更多关于 Kotlin 中的<a href="/kotlin/opt-in-requirements">选择性加入要求</a>的信息。</p><h4 id="移除了已弃用的编译器选项" tabindex="-1">移除了已弃用的编译器选项 <a class="header-anchor" href="#移除了已弃用的编译器选项" aria-label="Permalink to &quot;移除了已弃用的编译器选项&quot;">​</a></h4><p>我们已完成了几个编译器选项的弃用周期：</p><ul><li><code>kotlinOptions.jdkHome</code> 编译器选项在 1.5.30 中弃用，并已在当前版本中移除。如果 Gradle 构建包含此选项，现在会失败。我们鼓励您使用自 Kotlin 1.5.30 以来一直支持的 <a href="/kotlin/whatsnew1530#support-for-java-toolchains">Java toolchains</a>。</li><li>已弃用的 <code>noStdlib</code> 编译器选项也已移除。Gradle 插件使用 <code>kotlin.stdlib.default.dependency=true</code> 属性来控制 Kotlin 标准库是否存在。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>编译器实参 <code>-jdkHome</code> 和 <code>-no-stdlib</code> 仍然可用。</p></div><h4 id="移除了已弃用的插件" tabindex="-1">移除了已弃用的插件 <a class="header-anchor" href="#移除了已弃用的插件" aria-label="Permalink to &quot;移除了已弃用的插件&quot;">​</a></h4><p>在 Kotlin 1.4.0 中，<code>kotlin2js</code> 和 <code>kotlin-dce-plugin</code> 插件已弃用，并在此版本中移除。而不是 <code>kotlin2js</code>，请使用新的 <code>org.jetbrains.kotlin.js</code> 插件。无用代码消除 (DCE) 在 Kotlin/JS Gradle 插件正确配置时工作。</p><p>在 Kotlin 1.6.0 中，我们将 <code>KotlinGradleSubplugin</code> 类的弃用级别更改为 <code>ERROR</code>。使用此类的开发者用于编写编译器插件。在此版本中，<a href="https://youtrack.jetbrains.com/issue/KT-48831/" target="_blank" rel="noreferrer">此类已移除</a>。改用 <code>KotlinCompilerPluginSupportPlugin</code> 类。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>最佳实践是在您的整个项目中统一使用 1.7.0 及更高版本的 Kotlin 插件。</p></div><h4 id="移除了已弃用的协程-dsl-选项和属性" tabindex="-1">移除了已弃用的协程 DSL 选项和属性 <a class="header-anchor" href="#移除了已弃用的协程-dsl-选项和属性" aria-label="Permalink to &quot;移除了已弃用的协程 DSL 选项和属性&quot;">​</a></h4><p>我们移除了已弃用的 <code>kotlin.experimental.coroutines</code> Gradle DSL 选项和 <code>gradle.properties</code> 中使用的 <code>kotlin.coroutines</code> 属性。现在您只需使用_<a href="/kotlin/coroutines-basics#extract-function-refactoring">挂起函数</a>_或<a href="/kotlin/gradle-configure-project#set-a-dependency-on-a-kotlinx-library">添加 <code>kotlinx.coroutines</code> 依赖项</a>到您的构建脚本。</p><p>在<a href="/kotlin/coroutines-guide">协程指南</a>中了解更多关于协程的信息。</p><h4 id="移除了工具链扩展方法中的类型转换" tabindex="-1">移除了工具链扩展方法中的类型转换 <a class="header-anchor" href="#移除了工具链扩展方法中的类型转换" aria-label="Permalink to &quot;移除了工具链扩展方法中的类型转换&quot;">​</a></h4><p>在 Kotlin 1.7.0 之前，当使用 Kotlin DSL 配置 Gradle 工具链时，您必须将类型转换成 <code>JavaToolchainSpec</code> 类：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JavaToolchainSpec).languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MAJOR_JDK_VERSION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>现在，您可以省略 <code>(this as JavaToolchainSpec)</code> 部分：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MAJOR_JDK_VERSION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="迁移到-kotlin-1-7-0" tabindex="-1">迁移到 Kotlin 1.7.0 <a class="header-anchor" href="#迁移到-kotlin-1-7-0" aria-label="Permalink to &quot;迁移到 Kotlin 1.7.0&quot;">​</a></h2><h3 id="安装-kotlin-1-7-0" tabindex="-1">安装 Kotlin 1.7.0 <a class="header-anchor" href="#安装-kotlin-1-7-0" aria-label="Permalink to &quot;安装 Kotlin 1.7.0&quot;">​</a></h3><p>IntelliJ IDEA 2022.1 和 Android Studio Chipmunk (212) 会自动建议将 Kotlin 插件更新到 1.7.0。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>对于 IntelliJ IDEA 2022.2、Android Studio Dolphin (213) 或 Android Studio Electric Eel (221)，Kotlin 插件 1.7.0 将随即将发布的 IntelliJ IDEA 和 Android Studio 更新一起提供。</p></div><p>新的命令行编译器可在 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.7.0" target="_blank" rel="noreferrer">GitHub 发布页面</a>下载。</p><h3 id="迁移现有项目或启动新项目-使用-kotlin-1-7-0" tabindex="-1">迁移现有项目或启动新项目（使用 Kotlin 1.7.0） <a class="header-anchor" href="#迁移现有项目或启动新项目-使用-kotlin-1-7-0" aria-label="Permalink to &quot;迁移现有项目或启动新项目（使用 Kotlin 1.7.0）&quot;">​</a></h3><ul><li><p>要将现有项目迁移到 Kotlin 1.7.0，请将 Kotlin 版本更改为 <code>1.7.0</code> 并重新导入您的 Gradle 或 Maven 项目。<a href="/kotlin/releases#update-to-a-new-kotlin-version">了解如何更新到 Kotlin 1.7.0</a>。</p></li><li><p>要使用 Kotlin 1.7.0 启动一个新项目，请更新 Kotlin 插件并从 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong> 运行 Project Wizard。</p></li></ul><h3 id="kotlin-1-7-0-兼容性指南" tabindex="-1">Kotlin 1.7.0 兼容性指南 <a class="header-anchor" href="#kotlin-1-7-0-兼容性指南" aria-label="Permalink to &quot;Kotlin 1.7.0 兼容性指南&quot;">​</a></h3><p>Kotlin 1.7.0 是一个<a href="/kotlin/kotlin-evolution-principles#language-and-tooling-releases">特性发布</a>，因此可能会带来与您为早期版本语言编写的代码不兼容的更改。在 <a href="/kotlin/compatibility-guide-17">Kotlin 1.7.0 兼容性指南</a>中查找此类更改的详细列表。</p>`,247))])}const C=h(d,[["render",c]]);export{m as __pageData,C as default};
