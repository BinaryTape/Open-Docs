import{_ as s,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"可测试性","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/api-guidelines-testability.md","filePath":"kotlin/api-guidelines-testability.md","lastUpdated":1754307826000}'),e={name:"kotlin/api-guidelines-testability.md"};function l(p,i,h,k,o,d){return t(),a("div",null,i[0]||(i[0]=[n(`<h1 id="可测试性" tabindex="-1">可测试性 <a class="header-anchor" href="#可测试性" aria-label="Permalink to &quot;可测试性&quot;">​</a></h1><p>除了<a href="/kotlin/api-guidelines-consistency#maintain-conventions-and-quality">测试你的库</a>之外，还要确保使用你的库的代码也是可测试的。</p><h2 id="避免全局状态和有状态的顶层函数" tabindex="-1">避免全局状态和有状态的顶层函数 <a class="header-anchor" href="#避免全局状态和有状态的顶层函数" aria-label="Permalink to &quot;避免全局状态和有状态的顶层函数&quot;">​</a></h2><p>你的库不应该依赖全局变量中的状态，也不应该提供有状态的顶层函数作为其公共 API 的一部分。 这类变量和函数使得测试使用该库的代码变得困难，因为测试需要找到控制这些全局值的方法。</p><p>例如，一个库可能会定义一个全局可访问的函数，用于提供对当前时间的访问：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instant: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Instant</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Clock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instant)</span></span></code></pre></div><p>任何使用此 API 的代码都将难以测试，因为对 <code>now()</code> 函数的调用将始终返回真实的当前时间，而在测试中通常需要返回模拟值。</p><p>为了实现可测试性，<a href="https://github.com/Kotlin/kotlinx-datetime" target="_blank" rel="noreferrer"><code>kotlinx-datetime</code></a> 库提供了一个 API，允许用户获取一个 <code>Clock</code> 实例，然后使用该实例获取当前时间：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clock: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Clock</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Clock.System</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instant: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Instant</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instant)</span></span></code></pre></div><p>这使得库的用户可以将其 <code>Clock</code> 实例注入到他们自己的类中，并在测试期间用模拟实现替换真实实现。</p><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><p>如果你还没有这样做，请考虑查阅以下页面：</p><ul><li>关于如何保持向后兼容性，请参见 <a href="/kotlin/api-guidelines-backward-compatibility">向后兼容性</a> 页面。</li><li>关于有效文档实践的广泛概述，请参见 <a href="/kotlin/api-guidelines-informative-documentation">信息丰富的文档</a>。</li></ul>`,13)]))}const g=s(e,[["render",l]]);export{c as __pageData,g as default};
