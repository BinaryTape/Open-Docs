import{_ as r}from"./chunks/k2-mode.BqpKbQZk.js";import{_ as o}from"./chunks/compiler-options-levels.DqXOqvYF.js";import{_ as d,C as h,c as E,o as c,ag as e,G as n,w as l,j as s,a as i}from"./chunks/framework.Bksy39di.js";const D=JSON.parse('{"title":"Kotlin 2.0.0 の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew20.md","filePath":"ja/kotlin/whatsnew20.md","lastUpdated":1754307826000}'),g={name:"ja/kotlin/whatsnew20.md"};function y(u,a,F,m,b,C){const k=h("YouTubeVideo"),t=h("tab"),p=h("tabs");return c(),E("div",null,[a[6]||(a[6]=e('<h1 id="kotlin-2-0-0-の新機能" tabindex="-1">Kotlin 2.0.0 の新機能 <a class="header-anchor" href="#kotlin-2-0-0-の新機能" aria-label="Permalink to &quot;Kotlin 2.0.0 の新機能&quot;">​</a></h1><p><em><a href="/ja/kotlin/releases#release-details">公開日: 2024年5月21日</a></em></p><p>Kotlin 2.0.0 がリリースされ、<a href="#kotlin-k2-compiler">新しいKotlin K2コンパイラ</a> が安定版となりました！さらに、主なハイライトは以下の通りです。</p><ul><li><a href="#new-compose-compiler-gradle-plugin">新しいComposeコンパイラGradleプラグイン</a></li><li><a href="#generation-of-lambda-functions-using-invokedynamic">invokedynamic を使用したラムダ関数の生成</a></li><li><a href="#the-kotlinx-metadata-jvm-library-is-stable">kotlinx-metadata-jvm ライブラリがStableに</a></li><li><a href="#monitoring-gc-performance-with-signposts-on-apple-platforms">Appleプラットフォームにおけるsignpostsを用いたKotlin/NativeのGCパフォーマンス監視</a></li><li><a href="#resolving-conflicts-with-objective-c-methods">Objective-C メソッドとの競合の解決 (Kotlin/Native)</a></li><li><a href="#support-for-named-export">Kotlin/Wasmにおける名前付きエクスポートのサポート</a></li><li><a href="#support-for-unsigned-primitive-types-in-functions-with-jsexport">Kotlin/Wasmにおける <code>@JsExport</code> を持つ関数での符号なしプリミティブ型のサポート</a></li><li><a href="#optimized-production-builds-by-default-using-binaryen">Binaryen を使用したプロダクションビルドのデフォルトでの最適化</a></li><li><a href="#new-gradle-dsl-for-compiler-options-in-multiplatform-projects">マルチプラットフォームプロジェクトにおけるコンパイラオプションの新しいGradle DSL</a></li><li><a href="#stable-replacement-of-the-enum-class-values-generic-function">enum class の <code>values</code> ジェネリック関数の安定版置換</a></li><li><a href="#stable-autocloseable-interface">AutoCloseable インターフェースの安定版</a></li></ul><p>Kotlin 2.0は、JetBrainsチームにとって非常に大きな節目となります。今回のリリースはKotlinConf 2024の中心でした。Kotlin言語に関するエキサイティングなアップデートと最近の取り組みについて発表したオープニング基調講演をご覧ください。</p>',5)),n(k,{src:"https://www.youtube.com/v/Ar73Axsz2YA",title:"KotlinConf'24 - Keynote"}),a[7]||(a[7]=e('<h2 id="ideサポート" tabindex="-1">IDEサポート <a class="header-anchor" href="#ideサポート" aria-label="Permalink to &quot;IDEサポート&quot;">​</a></h2><p>Kotlin 2.0.0 をサポートするKotlinプラグインは、最新のIntelliJ IDEAおよびAndroid Studioに同梱されています。 IDEのKotlinプラグインを更新する必要はありません。 必要なのは、ビルドスクリプトで<a href="/ja/kotlin/releases#update-to-a-new-kotlin-version">KotlinのバージョンをKotlin 2.0.0に変更する</a>ことだけです。</p><ul><li>IntelliJ IDEAのKotlin K2コンパイラサポートの詳細については、<a href="#support-in-ides">IDEでのサポート</a> を参照してください。</li><li>IntelliJ IDEAのKotlinサポートの詳細については、<a href="/ja/kotlin/releases#ide-support">Kotlinリリース</a> を参照してください。</li></ul><h2 id="kotlin-k2コンパイラ" tabindex="-1">Kotlin K2コンパイラ <a class="header-anchor" href="#kotlin-k2コンパイラ" aria-label="Permalink to &quot;Kotlin K2コンパイラ&quot;">​</a></h2><p>K2コンパイラへの道は長いものでしたが、JetBrainsチームはついにその安定化を発表する準備が整いました。 Kotlin 2.0.0では、新しいKotlin K2コンパイラがデフォルトで使用され、すべてのターゲットプラットフォーム（JVM、Native、Wasm、JS）で<a href="/ja/kotlin/components-stability">Stable</a>です。この新しいコンパイラは、大幅なパフォーマンス向上、新しい言語機能開発の高速化、Kotlinがサポートするすべてのプラットフォームの統合、そしてマルチプラットフォームプロジェクトのためのより優れたアーキテクチャをもたらします。</p><p>JetBrainsチームは、選択したユーザープロジェクトおよび内部プロジェクトの1000万行のコードを正常にコンパイルすることで、新しいコンパイラの品質を保証しました。18,000人の開発者が安定化プロセスに参加し、合計80,000のプロジェクトで新しいK2コンパイラをテストし、発見した問題を報告しました。</p><p>新しいコンパイラへの移行プロセスを可能な限りスムーズにするために、<a href="/ja/kotlin/k2-compiler-migration-guide">K2コンパイラ移行ガイド</a> を作成しました。 このガイドでは、コンパイラの多くの利点、発生する可能性のある変更点、および必要に応じて以前のバージョンにロールバックする方法について説明しています。</p><p><a href="https://blog.jetbrains.com/kotlin/2024/04/k2-compiler-performance-benchmarks-and-how-to-measure-them-on-your-projects/" target="_blank" rel="noreferrer">ブログ投稿</a> で、さまざまなプロジェクトにおけるK2コンパイラのパフォーマンスについて調査しました。K2コンパイラの実際のパフォーマンスデータや、ご自身のプロジェクトからパフォーマンスベンチマークを収集する方法を知りたい場合は、ぜひご覧ください。</p><p>また、KotlinConf 2024でのこの講演では、リード言語デザイナーのMichail Zarečenskijが、Kotlinにおける機能進化とK2コンパイラについて語っています。</p>',9)),n(k,{src:"https://www.youtube.com/v/tAGJ5zJXJ7w",title:"Kotlin Language Features in 2.0 and Beyond"}),a[8]||(a[8]=e(`<h3 id="現在のk2コンパイラの制限事項" tabindex="-1">現在のK2コンパイラの制限事項 <a class="header-anchor" href="#現在のk2コンパイラの制限事項" aria-label="Permalink to &quot;現在のK2コンパイラの制限事項&quot;">​</a></h3><p>GradleプロジェクトでK2を有効にすると、Gradleバージョン8.3より低いバージョンを使用しているプロジェクトで、以下の場合に影響を与える特定の制限事項があります。</p><ul><li><code>buildSrc</code> からのソースコードのコンパイル。</li><li>インクルードビルドにおけるGradleプラグインのコンパイル。</li><li>Gradleバージョン8.3より低いプロジェクトで使用されている他のGradleプラグインのコンパイル。</li><li>Gradleプラグインの依存関係のビルド。</li></ul><p>上記の問題に遭遇した場合は、以下の手順で対処できます。</p><ul><li><code>buildSrc</code>、すべてのGradleプラグイン、およびその依存関係の言語バージョンを設定します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        apiVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>特定のタスクの言語バージョンとAPIバージョンを設定する場合、これらの値は <code>compilerOptions</code> 拡張によって設定された値をオーバーライドします。この場合、言語バージョンとAPIバージョンは1.9より高く設定すべきではありません。</p></div><ul><li>プロジェクトのGradleバージョンを8.3以降に更新します。</li></ul><h3 id="スマートキャストの改善" tabindex="-1">スマートキャストの改善 <a class="header-anchor" href="#スマートキャストの改善" aria-label="Permalink to &quot;スマートキャストの改善&quot;">​</a></h3><p>Kotlinコンパイラは、特定のケースでオブジェクトを型に自動的にキャストできるため、明示的にキャストする手間を省くことができます。これは<a href="/ja/kotlin/typecasts#smart-casts">スマートキャスト</a> と呼ばれます。 Kotlin K2コンパイラは、以前よりもさらに多くのシナリオでスマートキャストを実行できるようになりました。</p><p>Kotlin 2.0.0では、スマートキャストに関連する以下の領域で改善を行いました。</p><ul><li><a href="#local-variables-and-further-scopes">ローカル変数とより広範囲のスコープ</a></li><li><a href="#type-checks-with-logical-or-operator">論理 <code>or</code> 演算子による型チェック</a></li><li><a href="#inline-functions">インライン関数</a></li><li><a href="#properties-with-function-types">関数型を持つプロパティ</a></li><li><a href="#exception-handling">例外処理</a></li><li><a href="#increment-and-decrement-operators">インクリメント/デクリメント演算子</a></li></ul><h4 id="ローカル変数とより広範囲のスコープ" tabindex="-1">ローカル変数とより広範囲のスコープ <a class="header-anchor" href="#ローカル変数とより広範囲のスコープ" aria-label="Permalink to &quot;ローカル変数とより広範囲のスコープ&quot;">​</a></h4><p>以前は、<code>if</code> 条件内で変数が <code>null</code> でないと評価された場合、変数はスマートキャストされました。 この変数に関する情報は、<code>if</code> ブロックのスコープ内でさらに共有されていました。</p><p>しかし、変数を <code>if</code> 条件の<strong>外側</strong>で宣言した場合、<code>if</code> 条件内では変数に関する情報が利用できなかったため、スマートキャストできませんでした。この動作は、<code>when</code> 式や <code>while</code> ループでも見られました。</p><p>Kotlin 2.0.0からは、<code>if</code>、<code>when</code>、または <code>while</code> 条件で使用する前に変数を宣言した場合、コンパイラが変数について収集した情報は、スマートキャストのために対応するブロックでアクセスできるようになります。</p><p>これは、ブール条件を変数に抽出したい場合に役立ちます。これにより、変数に意味のある名前を付け、コードの可読性を向上させ、後でコード内で変数を再利用できるようになります。例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> purr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Purr purr&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> petAnimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animal: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isCat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cat</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isCat) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Kotlin 2.0.0 では、コンパイラは</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // isCat に関する情報にアクセスできるため、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // animal が Cat 型にスマートキャストされたことを認識します。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // したがって、purr() 関数を呼び出すことができます。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Kotlin 1.9.20 では、コンパイラは</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // スマートキャストについて認識しないため、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // purr() 関数の呼び出しはエラーを発生させます。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        animal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">purr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kitty </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    petAnimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kitty)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Purr purr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="論理or演算子による型チェック" tabindex="-1">論理OR演算子による型チェック <a class="header-anchor" href="#論理or演算子による型チェック" aria-label="Permalink to &quot;論理OR演算子による型チェック&quot;">​</a></h4><p>Kotlin 2.0.0では、オブジェクトの型チェックを <code>or</code> 演算子 (<code>||</code>) で結合した場合、それらの最も近い共通のスーパータイプにスマートキャストが行われます。この変更以前は、スマートキャストは常に <code>Any</code> 型に行われていました。</p><p>この場合、オブジェクトのプロパティにアクセスしたり、関数を呼び出す前に、オブジェクトの型を手動でチェックする必要がありました。例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Ok</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Postponed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Declined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signalCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signalStatus: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (signalStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Postponed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signalStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Declined) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // signalStatus は共通のスーパータイプ Status にスマートキャストされる</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        signalStatus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Kotlin 2.0.0 以前は、signalStatus は Any 型にスマートキャストされ、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // signal() 関数の呼び出しは Unresolved reference エラーを引き起こしていました。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // signal() 関数は、別の型チェックの後でなければ正常に呼び出すことができませんでした。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // check(signalStatus is Status)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // signalStatus.signal()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>共通のスーパータイプは、ユニオン型の<strong>近似</strong>です。<a href="https://en.wikipedia.org/wiki/Union_type" target="_blank" rel="noreferrer">ユニオン型</a> はKotlinではサポートされていません。</p></div><h4 id="インライン関数" tabindex="-1">インライン関数 <a class="header-anchor" href="#インライン関数" aria-label="Permalink to &quot;インライン関数&quot;">​</a></h4><p>Kotlin 2.0.0では、K2コンパイラはインライン関数を異なる方法で扱い、他のコンパイラ分析と組み合わせてスマートキャストが安全であるかどうかを判断できるようになりました。</p><p>具体的には、インライン関数は暗黙的な <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.contracts/-contract-builder/calls-in-place.html" target="_blank" rel="noreferrer"><code>callsInPlace</code></a> コントラクトを持つように扱われるようになりました。これは、インライン関数に渡されたすべてのラムダ関数がその場で呼び出されることを意味します。ラムダ関数がその場で呼び出されるため、コンパイラはラムダ関数がその関数本体内に含まれる変数の参照を漏らすことがないことを認識します。</p><p>コンパイラはこの知識と他のコンパイラ分析を使用して、キャプチャされた変数のスマートキャストが安全であるかどうかを決定します。例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inlineAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nextProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    inlineAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Kotlin 2.0.0 では、コンパイラは processor が</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ローカル変数であり、inlineAction() がインライン関数であることを認識するため、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // processor への参照が漏れることはありません。したがって、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // processor をスマートキャストすることは安全です。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // processor が null でない場合、processor はスマートキャストされる</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // コンパイラは processor が null でないことを認識するため、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 安全な呼び出しは不要です</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            processor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Kotlin 1.9.20 では、安全な呼び出しを実行する必要がありました。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // processor?.process()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nextProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="関数型を持つプロパティ" tabindex="-1">関数型を持つプロパティ <a class="header-anchor" href="#関数型を持つプロパティ" aria-label="Permalink to &quot;関数型を持つプロパティ&quot;">​</a></h4><p>以前のバージョンのKotlinでは、関数型を持つクラスプロパティがスマートキャストされないというバグがありました。 Kotlin 2.0.0 と K2 コンパイラでこの動作を修正しました。例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Holder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provider: (() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)?) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Kotlin 2.0.0 では、provider が null でない場合、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // provider はスマートキャストされる</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (provider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // コンパイラは provider が null でないことを認識している</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 1.9.20 では、コンパイラは provider が null でないことを認識しないため、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // エラーが発生します。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Reference has a nullable type &#39;(() -&gt; Unit)?&#39;, use explicit &#39;?.invoke()&#39; to make a function-like call instead</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この変更は、<code>invoke</code> 演算子をオーバーロードした場合にも適用されます。例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Holder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provider: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (provider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 1.9.20 では、コンパイラはエラーを発生させます。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Reference has a nullable type &#39;Provider?&#39; use explicit &#39;?.invoke()&#39; to make a function-like call instead</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="例外処理" tabindex="-1">例外処理 <a class="header-anchor" href="#例外処理" aria-label="Permalink to &quot;例外処理&quot;">​</a></h4><p>Kotlin 2.0.0では、スマートキャスト情報を <code>catch</code> ブロックと <code>finally</code> ブロックに渡せるように例外処理が改善されました。この変更により、コンパイラがオブジェクトがnullable型であるかどうかを追跡するため、コードがより安全になります。例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stringInput: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // stringInput は String 型にスマートキャストされる</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stringInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // コンパイラは stringInput が null でないことを認識している</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringInput.length)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // コンパイラは stringInput の以前のスマートキャスト情報を破棄します。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // これで stringInput は String? 型になります。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stringInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 例外を発生させる</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stringInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (exception: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Kotlin 2.0.0 では、コンパイラは stringInput が</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // null である可能性があることを認識しているため、stringInput は null のままです。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringInput?.length)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Kotlin 1.9.20 では、コンパイラは安全な呼び出しが不要だと判断しますが、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // これは誤りです。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="インクリメント-デクリメント演算子" tabindex="-1">インクリメント/デクリメント演算子 <a class="header-anchor" href="#インクリメント-デクリメント演算子" aria-label="Permalink to &quot;インクリメント/デクリメント演算子&quot;">​</a></h4><p>Kotlin 2.0.0以前は、コンパイラはインクリメント/デクリメント演算子を使用した後にオブジェクトの型が変わることを認識していませんでした。コンパイラがオブジェクトの型を正確に追跡できなかったため、コードが未解決の参照エラーにつながる可能性がありました。Kotlin 2.0.0でこれが修正されました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sigma</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sigma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sigma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unknownObject: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rho</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // unknownObject が Tau インターフェースを継承しているかチェック</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // unknownObject が Rho と Tau の両方のインターフェースを継承している可能性もある</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (unknownObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Tau) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // インターフェース Rho のオーバーロードされた inc() 演算子を使用する。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Kotlin 2.0.0 では、unknownObject の型は Sigma にスマートキャストされる。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unknownObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Kotlin 2.0.0 では、コンパイラは unknownObject が Sigma 型であることを認識しているため、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // sigma() 関数を正常に呼び出すことができる。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        unknownObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sigma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Kotlin 1.9.20 では、inc() が呼び出されてもコンパイラはスマートキャストを実行しないため、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // unknownObject は Tau 型であると誤解している。sigma() 関数を呼び出すと</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // コンパイル時エラーが発生する。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Kotlin 2.0.0 では、コンパイラは unknownObject が Sigma 型であることを認識しているため、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // tau() 関数を呼び出すとコンパイル時エラーが発生する。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        unknownObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Unresolved reference &#39;tau&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Kotlin 1.9.20 では、コンパイラが誤って unknownObject を Tau 型であると認識しているため、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // tau() 関数を呼び出すことはできるが、ClassCastException がスローされる。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-multiplatformの改善点" tabindex="-1">Kotlin Multiplatformの改善点 <a class="header-anchor" href="#kotlin-multiplatformの改善点" aria-label="Permalink to &quot;Kotlin Multiplatformの改善点&quot;">​</a></h3><p>Kotlin 2.0.0では、Kotlin Multiplatformに関連するK2コンパイラの改善を以下の領域で行いました。</p><ul><li><a href="#separation-of-common-and-platform-sources-during-compilation">コンパイル時の共通ソースとプラットフォームソースの分離</a></li><li><a href="#different-visibility-levels-of-expected-and-actual-declarations">expectedおよびactual宣言の異なる可視性レベル</a></li></ul><h4 id="コンパイル時の共通ソースとプラットフォームソースの分離" tabindex="-1">コンパイル時の共通ソースとプラットフォームソースの分離 <a class="header-anchor" href="#コンパイル時の共通ソースとプラットフォームソースの分離" aria-label="Permalink to &quot;コンパイル時の共通ソースとプラットフォームソースの分離&quot;">​</a></h4><p>以前は、Kotlinコンパイラの設計上、共通ソースセットとプラットフォームソースセットをコンパイル時に分離することができませんでした。その結果、共通コードがプラットフォームコードにアクセスでき、プラットフォーム間で異なる動作を引き起こしていました。さらに、共通コードからの一部コンパイラ設定と依存関係がプラットフォームコードに漏洩していました。</p><p>Kotlin 2.0.0では、新しいKotlin K2コンパイラの導入に伴い、コンパイルスキームを再設計し、共通ソースセットとプラットフォームソースセットの厳密な分離を保証しました。この変更は、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html#expected-and-actual-functions" target="_blank" rel="noreferrer">expectedおよびactual関数</a> を使用する際に最も顕著に現れます。 以前は、共通コード内の関数呼び出しがプラットフォームコード内の関数に解決される可能性がありました。例：</p><table><tr><td>共通コード</td><td>プラットフォームコード</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exampleFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JVM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;platform foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript プラットフォームには</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foo() 関数のオーバーロードはない</span></span></code></pre></div></td></tr></table><p>この例では、共通コードは実行されるプラットフォームによって異なる動作をします。</p><ul><li>JVMプラットフォームでは、共通コードの <code>foo()</code> 関数の呼び出しは、プラットフォームコードの <code>foo()</code> 関数（<code>platform foo</code>）を呼び出します。</li><li>JavaScriptプラットフォームでは、共通コードの <code>foo()</code> 関数の呼び出しは、プラットフォームコードにそのような関数が存在しないため、共通コードの <code>foo()</code> 関数（<code>common foo</code>）を呼び出します。</li></ul><p>Kotlin 2.0.0では、共通コードはプラットフォームコードにアクセスできないため、両方のプラットフォームで <code>foo()</code> 関数は共通コードの <code>foo()</code> 関数（<code>common foo</code>）に正常に解決されます。</p><p>プラットフォーム間の動作の一貫性向上に加えて、IntelliJ IDEAまたはAndroid Studioとコンパイラ間の動作の競合があったケースの修正にも力を入れました。例えば、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html#expected-and-actual-classes" target="_blank" rel="noreferrer">expectedおよびactualクラス</a> を使用した場合、以下のようになります。</p><table><tr><td>共通コード</td><td>プラットフォームコード</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> confirmIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> common</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2.0.0 以前は、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // IDEのみでエラーが発生</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">confirmIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // RESOLUTION_TO_CLASSIFIER : Expected class</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Identity has no default constructor.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> confirmIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;expect class fun: jvm&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><p>この例では、expectedクラス <code>Identity</code> にはデフォルトコンストラクタがないため、共通コードで正常に呼び出すことができません。 以前は、IDEによってのみエラーが報告されていましたが、JVMではコードは正常にコンパイルされていました。しかし、現在はコンパイラが正しくエラーを報告します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Expected class &#39;expect class Identity : Any&#39; does not have default constructor</span></span></code></pre></div><h5 id="解決動作が変わらない場合" tabindex="-1">解決動作が変わらない場合 <a class="header-anchor" href="#解決動作が変わらない場合" aria-label="Permalink to &quot;解決動作が変わらない場合&quot;">​</a></h5><p>新しいコンパイルスキームへの移行はまだ進行中であるため、同じソースセット内にない関数を呼び出す場合、解決動作はまだ同じです。この違いは主に、共通コードでマルチプラットフォームライブラリからのオーバーロードを使用する場合に気づくでしょう。</p><p>シグネチャが異なる2つの <code>whichFun()</code> 関数を持つライブラリがあると仮定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ライブラリの例</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: common</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: JVM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;platform function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>共通コードで <code>whichFun()</code> 関数を呼び出すと、ライブラリ内で最も関連性の高い引数型を持つ関数が解決されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JVM ターゲット用の例のライブラリを使用するプロジェクト</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: common</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // platform function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>比較として、<code>whichFun()</code> のオーバーロードを同じソースセット内で宣言した場合、コードがプラットフォーム固有のバージョンにアクセスできないため、共通コードからの関数が解決されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 例のライブラリは使用しない</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: common</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // common function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: JVM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;platform function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>マルチプラットフォームライブラリと同様に、<code>commonTest</code> モジュールは別のソースセットにあるため、プラットフォーム固有のコードにアクセスできます。したがって、<code>commonTest</code> モジュール内の関数呼び出しの解決は、古いコンパイルスキームと同じ動作を示します。</p><p>将来的には、これらの残りのケースも新しいコンパイルスキームとより一貫したものになる予定です。</p><h4 id="expectedおよびactual宣言の異なる可視性レベル" tabindex="-1">expectedおよびactual宣言の異なる可視性レベル <a class="header-anchor" href="#expectedおよびactual宣言の異なる可視性レベル" aria-label="Permalink to &quot;expectedおよびactual宣言の異なる可視性レベル&quot;">​</a></h4><p>Kotlin 2.0.0以前は、Kotlin Multiplatformプロジェクトで<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">expectedおよびactual宣言</a> を使用する場合、それらは同じ<a href="/ja/kotlin/visibility-modifiers">可視性レベル</a> を持っている必要がありました。 Kotlin 2.0.0では、異なる可視性レベルもサポートされるようになりましたが、<strong>actual宣言がexpected宣言よりも_より寛容である_場合に限ります</strong>。例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 可視性は internal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 可視性はデフォルトで public、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                // これはより寛容</span></span></code></pre></div><p>同様に、actual宣言で<a href="/ja/kotlin/type-aliases">型エイリアス</a> を使用している場合、<strong>基になる型の可視性</strong>は、expected宣言と同じか、より寛容である必要があります。例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 // 可視性は internal</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Expanded</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Expanded</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                  // 可視性はデフォルトで public、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                                // これはより寛容</span></span></code></pre></div><h3 id="コンパイラプラグインのサポート" tabindex="-1">コンパイラプラグインのサポート <a class="header-anchor" href="#コンパイラプラグインのサポート" aria-label="Permalink to &quot;コンパイラプラグインのサポート&quot;">​</a></h3><p>現在、Kotlin K2コンパイラは以下のKotlinコンパイラプラグインをサポートしています。</p><ul><li><a href="/ja/kotlin/all-open-plugin"><code>all-open</code></a></li><li><a href="https://github.com/Kotlin/kotlinx-atomicfu" target="_blank" rel="noreferrer">AtomicFU</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/plugins/jvm-abi-gen" target="_blank" rel="noreferrer"><code>jvm-abi-gen</code></a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/plugins/js-plain-objects" target="_blank" rel="noreferrer"><code>js-plain-objects</code></a></li><li><a href="/ja/kotlin/whatsnew1920#preview-kapt-compiler-plugin-with-k2">kapt</a></li><li><a href="/ja/kotlin/lombok">Lombok</a></li><li><a href="/ja/kotlin/no-arg-plugin"><code>no-arg</code></a></li><li><a href="https://plugins.gradle.org/plugin/org.jetbrains.kotlin.plugin.parcelize" target="_blank" rel="noreferrer">Parcelize</a></li><li><a href="/ja/kotlin/sam-with-receiver-plugin">SAM with receiver</a></li><li><a href="/ja/kotlin/serialization">serialization</a></li><li><a href="/ja/kotlin/power-assert">Power-assert</a></li></ul><p>さらに、Kotlin K2コンパイラは以下もサポートしています。</p><ul><li><a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> コンパイラプラグイン 2.0.0（<a href="https://android-developers.googleblog.com/2024/04/jetpack-compose-compiler-moving-to-kotlin-repository.html" target="_blank" rel="noreferrer">Kotlinリポジトリに移動</a>）。</li><li><a href="https://android-developers.googleblog.com/2023/12/ksp2-preview-kotlin-k2-standalone.html" target="_blank" rel="noreferrer">KSP2</a> 以降の<a href="/ja/kotlin/ksp-overview">Kotlin Symbol Processing (KSP) プラグイン</a>。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>追加のコンパイラプラグインを使用している場合は、K2との互換性についてそれらのドキュメントを確認してください。</p></div><h3 id="実験的なkotlin-power-assertコンパイラプラグイン" tabindex="-1">実験的なKotlin Power-assertコンパイラプラグイン <a class="header-anchor" href="#実験的なkotlin-power-assertコンパイラプラグイン" aria-label="Permalink to &quot;実験的なKotlin Power-assertコンパイラプラグイン&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin Power-assert プラグインは<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的機能</a>です。 いつでも変更される可能性があります。</p></div><p>Kotlin 2.0.0 では、実験的な Power-assert コンパイラプラグインが導入されました。このプラグインは、失敗メッセージにコンテキスト情報を含めることでテスト作成の体験を向上させ、デバッグをより簡単かつ効率的にします。</p><p>開発者は、効果的なテストを書くために複雑なアサーションライブラリを使用する必要があることがよくあります。Power-assert プラグインは、アサーション式の途中値を含む失敗メッセージを自動的に生成することで、このプロセスを簡素化します。これは、開発者がテストが失敗した理由を迅速に理解するのに役立ちます。</p><p>テストでアサーションが失敗すると、改善されたエラーメッセージには、アサーション内のすべての変数と部分式の値が表示され、条件のどの部分が失敗の原因であるかが明確になります。これは、複数の条件がチェックされる複雑なアサーションで特に役立ちます。</p><p>プロジェクトでプラグインを有効にするには、<code>build.gradle(.kts)</code> ファイルで次のように設定します。</p>`,80)),n(p,{group:"build-script"},{default:l(()=>[n(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[0]||(a[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.0.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"plugin.power-assert"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.0.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"powerAssert"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    functions "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," listOf"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kotlin.assert"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kotlin.test.assertTrue"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[1]||(a[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.multiplatform'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.0.0'")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.plugin.power-assert'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.0.0'")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"powerAssert {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    functions "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kotlin.assert"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kotlin.test.assertTrue"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[9]||(a[9]=e('<p><a href="/ja/kotlin/power-assert">ドキュメントでKotlin Power-assertプラグイン</a> の詳細をご覧ください。</p><h3 id="kotlin-k2コンパイラを有効にする方法" tabindex="-1">Kotlin K2コンパイラを有効にする方法 <a class="header-anchor" href="#kotlin-k2コンパイラを有効にする方法" aria-label="Permalink to &quot;Kotlin K2コンパイラを有効にする方法&quot;">​</a></h3><p>Kotlin 2.0.0以降、Kotlin K2コンパイラはデフォルトで有効になっています。追加のアクションは不要です。</p><h3 id="kotlin-playgroundでkotlin-k2コンパイラを試す" tabindex="-1">Kotlin PlaygroundでKotlin K2コンパイラを試す <a class="header-anchor" href="#kotlin-playgroundでkotlin-k2コンパイラを試す" aria-label="Permalink to &quot;Kotlin PlaygroundでKotlin K2コンパイラを試す&quot;">​</a></h3><p>Kotlin Playgroundは2.0.0リリースをサポートしています。<a href="https://pl.kotl.in/czuoQprce" target="_blank" rel="noreferrer">試してみてください！</a></p><h3 id="ideでのサポート" tabindex="-1">IDEでのサポート <a class="header-anchor" href="#ideでのサポート" aria-label="Permalink to &quot;IDEでのサポート&quot;">​</a></h3><p>デフォルトでは、IntelliJ IDEAとAndroid Studioは、コード分析、コード補完、ハイライト、およびその他のIDE関連機能に以前のコンパイラを使用しています。IDEで完全なKotlin 2.0エクスペリエンスを得るには、K2モードを有効にします。</p><p>IDEで、<strong>Settings</strong> | <strong>Languages &amp; Frameworks</strong> | <strong>Kotlin</strong> に移動し、<strong>Enable K2 mode</strong> オプションを選択します。 IDEはK2モードを使用してコードを分析します。</p><p><img src="'+r+`" alt="Enable K2 mode" width="200"></p><p>K2モードを有効にすると、コンパイラの動作変更によりIDE分析に違いがあることに気づくかもしれません。新しいK2コンパイラが以前のものとどのように異なるかについては、<a href="/ja/kotlin/k2-compiler-migration-guide">移行ガイド</a> でご確認ください。</p><ul><li>K2モードの詳細については、<a href="https://blog.jetbrains.com/idea/2024/11/k2-mode-becomes-stable/" target="_blank" rel="noreferrer">ブログ</a> をご覧ください。</li><li>K2モードに関するフィードバックを積極的に収集していますので、<a href="https://kotlinlang.slack.com/archives/C0B8H786P" target="_blank" rel="noreferrer">公開Slackチャンネル</a> でご意見をお聞かせください。</li></ul><h3 id="新しいk2コンパイラに関するフィードバックを送る" tabindex="-1">新しいK2コンパイラに関するフィードバックを送る <a class="header-anchor" href="#新しいk2コンパイラに関するフィードバックを送る" aria-label="Permalink to &quot;新しいK2コンパイラに関するフィードバックを送る&quot;">​</a></h3><p>皆様からのフィードバックをお待ちしております！</p><ul><li>新しいK2コンパイラで直面した問題は、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a> で報告してください。</li><li>JetBrainsがK2の使用状況に関する匿名データを収集できるように、<a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer">「使用状況統計を送信」オプション</a> を有効にしてください。</li></ul><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>バージョン2.0.0以降、コンパイラはJava 22バイトコードを含むクラスを生成できます。 このバージョンには、以下の変更も含まれています。</p><ul><li><a href="#generation-of-lambda-functions-using-invokedynamic">invokedynamic を使用したラムダ関数の生成</a></li><li><a href="#the-kotlinx-metadata-jvm-library-is-stable">kotlinx-metadata-jvm ライブラリがStableに</a></li></ul><h3 id="invokedynamic-を使用したラムダ関数の生成" tabindex="-1">invokedynamic を使用したラムダ関数の生成 <a class="header-anchor" href="#invokedynamic-を使用したラムダ関数の生成" aria-label="Permalink to &quot;invokedynamic を使用したラムダ関数の生成&quot;">​</a></h3><p>Kotlin 2.0.0では、<code>invokedynamic</code> を使用してラムダ関数を生成する新しいデフォルトの方法が導入されました。この変更により、従来の匿名クラス生成と比較してアプリケーションのバイナリサイズが削減されます。</p><p>最初のバージョン以降、Kotlinはラムダを匿名クラスとして生成してきました。しかし、<a href="/ja/kotlin/whatsnew15#lambdas-via-invokedynamic">Kotlin 1.5.0</a> 以降、<code>-Xlambdas=indy</code> コンパイラオプションを使用することで <code>invokedynamic</code> 生成のオプションが利用可能になりました。Kotlin 2.0.0では、<code>invokedynamic</code> がラムダ生成のデフォルトの方法になりました。この方法により、より軽量なバイナリが生成され、KotlinがJVMの最適化に適合し、アプリケーションがJVMパフォーマンスの継続的および将来的な改善の恩恵を受けることができます。</p><p>現在、通常のラムダコンパイルと比較して、以下の3つの制限があります。</p><ul><li><code>invokedynamic</code> にコンパイルされたラムダはシリアル化できません。</li><li>実験的な <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.jvm/reflect.html" target="_blank" rel="noreferrer"><code>reflect()</code></a> API は <code>invokedynamic</code> で生成されたラムダをサポートしていません。</li><li>そのようなラムダに対して <code>.toString()</code> を呼び出すと、可読性の低い文字列表現が生成されます。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Kotlin 1.9.24 とリフレクションの場合、以下を返す</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // () -&gt; kotlin.Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Kotlin 2.0.0 の場合、以下を返す</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // FileKt$Lambda$13/0x00007f88a0004608@506e1b77</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ラムダ関数の従来の生成動作を保持するには、以下のいずれかを実行します。</p><ul><li>特定のラムダに <code>@JvmSerializableLambda</code> アノテーションを付与します。</li><li>コンパイラオプション <code>-Xlambdas=class</code> を使用して、モジュール内のすべてのラムダを従来の方式で生成します。</li></ul><h3 id="kotlinx-metadata-jvm-ライブラリがstableに" tabindex="-1">kotlinx-metadata-jvm ライブラリがStableに <a class="header-anchor" href="#kotlinx-metadata-jvm-ライブラリがstableに" aria-label="Permalink to &quot;kotlinx-metadata-jvm ライブラリがStableに&quot;">​</a></h3><p>Kotlin 2.0.0では、<code>kotlinx-metadata-jvm</code> ライブラリが<a href="/ja/kotlin/components-stability#stability-levels-explained">Stable</a> になりました。ライブラリが <code>kotlin</code> パッケージと座標に変更されたため、<code>kotlin-metadata-jvm</code> (xなし) として見つけることができます。</p><p>以前は、<code>kotlinx-metadata-jvm</code> ライブラリは独自の公開スキームとバージョンを持っていました。今後は、<code>kotlin-metadata-jvm</code> のアップデートをKotlinリリースサイクルの一部としてビルドおよび公開し、Kotlin標準ライブラリと同じ後方互換性の保証を提供します。</p><p><code>kotlin-metadata-jvm</code> ライブラリは、Kotlin/JVMコンパイラによって生成されたバイナリファイルのメタデータを読み書きするためのAPIを提供します。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>このバージョンでは、以下の変更が加えられました。</p><ul><li><a href="#monitoring-gc-performance-with-signposts-on-apple-platforms">signpostsを用いたGCパフォーマンス監視</a></li><li><a href="#resolving-conflicts-with-objective-c-methods">Objective-C メソッドとの競合の解決</a></li><li><a href="#changed-log-level-for-compiler-arguments">Kotlin/Nativeにおけるコンパイラ引数のログレベルの変更</a></li><li><a href="#explicitly-added-standard-library-and-platform-dependencies-to-kotlin-native">Kotlin/Nativeへの標準ライブラリおよびプラットフォーム依存関係の明示的な追加</a></li><li><a href="#tasks-error-in-gradle-configuration-cache">Gradle設定キャッシュにおけるタスクエラー</a></li></ul><h3 id="appleプラットフォームにおけるsignpostsを用いたgcパフォーマンス監視" tabindex="-1">Appleプラットフォームにおけるsignpostsを用いたGCパフォーマンス監視 <a class="header-anchor" href="#appleプラットフォームにおけるsignpostsを用いたgcパフォーマンス監視" aria-label="Permalink to &quot;Appleプラットフォームにおけるsignpostsを用いたGCパフォーマンス監視&quot;">​</a></h3><p>以前は、Kotlin/Nativeのガベージコレクタ（GC）のパフォーマンスは、ログを調べることによってのみ監視可能でした。しかし、これらのログは、iOSアプリのパフォーマンス問題を調査するための一般的なツールキットであるXcode Instrumentsと統合されていませんでした。</p><p>Kotlin 2.0.0以降、GCはInstrumentsで利用可能なsignpostsでポーズを報告します。signpostsはアプリ内でカスタムロギングを可能にするため、iOSアプリのパフォーマンスをデバッグする際、GCポーズがアプリケーションのフリーズに対応しているかを確認できるようになりました。</p><p>GCパフォーマンス分析の詳細については、<a href="/ja/kotlin/native-memory-manager#monitor-gc-performance">ドキュメント</a> をご覧ください。</p><h3 id="objective-c-メソッドとの競合の解決" tabindex="-1">Objective-C メソッドとの競合の解決 <a class="header-anchor" href="#objective-c-メソッドとの競合の解決" aria-label="Permalink to &quot;Objective-C メソッドとの競合の解決&quot;">​</a></h3><p>Objective-Cのメソッドは異なる名前を持つことができますが、パラメータの数と型が同じである場合があります。例えば、 <a href="https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423560-locationmanager?language=objc" target="_blank" rel="noreferrer"><code>locationManager:didEnterRegion:</code></a> と <a href="https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423630-locationmanager?language=objc" target="_blank" rel="noreferrer"><code>locationManager:didExitRegion:</code></a> です。 Kotlinでは、これらのメソッドは同じシグネチャを持つため、使用しようとすると競合するオーバーロードエラーが発生します。</p><p>以前は、このコンパイルエラーを回避するために、競合するオーバーロードを手動で抑制する必要がありました。Objective-CとのKotlinの相互運用性を向上させるため、Kotlin 2.0.0では新しい <code>@ObjCSignatureOverride</code> アノテーションが導入されました。</p><p>このアノテーションは、Objective-Cクラスから引数型が同じだが引数名が異なる関数が複数継承されている場合に、Kotlinコンパイラに競合するオーバーロードを無視するよう指示します。</p><p>このアノテーションを適用することは、一般的なエラー抑制よりも安全です。このアノテーションは、サポートされテストされているObjective-Cメソッドのオーバーライドの場合にのみ使用できますが、一般的な抑制は重要なエラーを隠し、静かに壊れたコードにつながる可能性があります。</p><h3 id="kotlin-nativeにおけるコンパイラ引数のログレベルの変更" tabindex="-1">Kotlin/Nativeにおけるコンパイラ引数のログレベルの変更 <a class="header-anchor" href="#kotlin-nativeにおけるコンパイラ引数のログレベルの変更" aria-label="Permalink to &quot;Kotlin/Nativeにおけるコンパイラ引数のログレベルの変更&quot;">​</a></h3><p>今回のリリースでは、<code>compile</code>、<code>link</code>、<code>cinterop</code> などのKotlin/Native Gradleタスクにおけるコンパイラ引数のログレベルが、<code>info</code> から <code>debug</code> に変更されました。</p><p><code>debug</code> がデフォルト値となったことで、ログレベルは他のGradleコンパイルタスクと一貫性を持つようになり、すべてのコンパイラ引数を含む詳細なデバッグ情報が提供されます。</p><h3 id="kotlin-nativeへの標準ライブラリおよびプラットフォーム依存関係の明示的な追加" tabindex="-1">Kotlin/Nativeへの標準ライブラリおよびプラットフォーム依存関係の明示的な追加 <a class="header-anchor" href="#kotlin-nativeへの標準ライブラリおよびプラットフォーム依存関係の明示的な追加" aria-label="Permalink to &quot;Kotlin/Nativeへの標準ライブラリおよびプラットフォーム依存関係の明示的な追加&quot;">​</a></h3><p>以前は、Kotlin/Nativeコンパイラは標準ライブラリとプラットフォームの依存関係を暗黙的に解決していました。これは、Kotlin GradleプラグインがKotlinターゲット間で動作する方法に不整合を引き起こしていました。</p><p>現在、各Kotlin/Native Gradleコンパイルは、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#compilation-parameters" target="_blank" rel="noreferrer"><code>compileDependencyFiles</code> コンパイルパラメータ</a> を介して、コンパイル時ライブラリパスに標準ライブラリとプラットフォームの依存関係を明示的に含めています。</p><h3 id="gradle設定キャッシュにおけるタスクエラー" tabindex="-1">Gradle設定キャッシュにおけるタスクエラー <a class="header-anchor" href="#gradle設定キャッシュにおけるタスクエラー" aria-label="Permalink to &quot;Gradle設定キャッシュにおけるタスクエラー&quot;">​</a></h3><p>Kotlin 2.0.0以降、次のようなメッセージを含む設定キャッシュエラーが発生する可能性があります。 <code>invocation of Task.project at execution time is unsupported</code></p><p>このエラーは、<code>NativeDistributionCommonizerTask</code> や <code>KotlinNativeCompile</code> などのタスクで発生します。</p><p>しかし、これは偽陽性エラーです。根本的な問題は、<code>publish*</code> タスクなど、Gradle設定キャッシュと互換性のないタスクが存在することです。</p><p>エラーメッセージが異なる根本原因を示唆しているため、この不一致はすぐに明らかにならない場合があります。</p><p>正確な原因がエラー報告に明示されていないため、<a href="https://github.com/gradle/gradle/issues/21290" target="_blank" rel="noreferrer">Gradleチームはすでに報告を修正するために問題に対処しています</a>。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>Kotlin 2.0.0は、パフォーマンスとJavaScriptとの相互運用性を向上させます。</p><ul><li><a href="#optimized-production-builds-by-default-using-binaryen">Binaryen を使用したプロダクションビルドのデフォルトでの最適化</a></li><li><a href="#support-for-named-export">名前付きエクスポートのサポート</a></li><li><a href="#support-for-unsigned-primitive-types-in-functions-with-jsexport"><code>@JsExport</code> を持つ関数での符号なしプリミティブ型のサポート</a></li><li><a href="#generation-of-typescript-declaration-files-in-kotlin-wasm">Kotlin/WasmにおけるTypeScript宣言ファイルの生成</a></li><li><a href="#support-for-catching-javascript-exceptions">JavaScript例外のキャッチのサポート</a></li><li><a href="#new-exception-handling-proposal-is-now-supported-as-an-option">新しい例外処理提案がオプションとしてサポートされるようになりました</a></li><li><a href="#the-withwasm-function-is-split-into-js-and-wasi-variants"><code>withWasm()</code> 関数がJSとWASIのバリアントに分割</a></li></ul><h3 id="binaryen-を使用したプロダクションビルドのデフォルトでの最適化" tabindex="-1">Binaryen を使用したプロダクションビルドのデフォルトでの最適化 <a class="header-anchor" href="#binaryen-を使用したプロダクションビルドのデフォルトでの最適化" aria-label="Permalink to &quot;Binaryen を使用したプロダクションビルドのデフォルトでの最適化&quot;">​</a></h3><p>Kotlin/Wasmツールチェーンは、以前の手動設定アプローチとは異なり、プロダクションコンパイル時にすべてのプロジェクトに<a href="https://github.com/WebAssembly/binaryen" target="_blank" rel="noreferrer">Binaryen</a>ツールを適用するようになりました。私たちの見積もりでは、これによりプロジェクトの実行時パフォーマンスが向上し、バイナリサイズが削減されるはずです。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>この変更はプロダクションコンパイルにのみ影響します。開発コンパイルプロセスは同じままです。</p></div><h3 id="名前付きエクスポートのサポート" tabindex="-1">名前付きエクスポートのサポート <a class="header-anchor" href="#名前付きエクスポートのサポート" aria-label="Permalink to &quot;名前付きエクスポートのサポート&quot;">​</a></h3><p>以前は、Kotlin/Wasmからのすべてのエクスポートされた宣言は、デフォルトのエクスポートを使用してJavaScriptにインポートされていました。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//JavaScript:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./index.mjs&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Module.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>現在では、<code>@JsExport</code> でマークされた各Kotlin宣言を名前でインポートできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//JavaScript:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { add } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./index.mjs&quot;</span></span></code></pre></div><p>名前付きエクスポートにより、KotlinとJavaScriptモジュール間のコード共有が容易になります。これにより可読性が向上し、モジュール間の依存関係管理に役立ちます。</p><h3 id="jsexport-を持つ関数での符号なしプリミティブ型のサポート" tabindex="-1"><code>@JsExport</code> を持つ関数での符号なしプリミティブ型のサポート <a class="header-anchor" href="#jsexport-を持つ関数での符号なしプリミティブ型のサポート" aria-label="Permalink to &quot;\`@JsExport\` を持つ関数での符号なしプリミティブ型のサポート&quot;">​</a></h3><p>Kotlin 2.0.0以降、<a href="/ja/kotlin/unsigned-integer-types">符号なしプリミティブ型</a> を、Kotlin/Wasm関数をJavaScriptコードで利用可能にする <code>@JsExport</code> アノテーションを持つ外部宣言や関数内で使用できるようになりました。</p><p>これにより、以前の制限（符号なしプリミティブ型をエクスポートされた宣言や外部宣言内で直接使用できない）が緩和されます。現在、符号なしプリミティブ型を戻り値型またはパラメータ型として持つ関数をエクスポートしたり、符号なしプリミティブ型を返したり使用する外部宣言を利用したりできるようになりました。</p><p>Kotlin/WasmとJavaScriptの相互運用性の詳細については、<a href="/ja/kotlin/wasm-js-interop#use-javascript-code-in-kotlin">ドキュメント</a> を参照してください。</p><h3 id="kotlin-wasmにおけるtypescript宣言ファイルの生成" tabindex="-1">Kotlin/WasmにおけるTypeScript宣言ファイルの生成 <a class="header-anchor" href="#kotlin-wasmにおけるtypescript宣言ファイルの生成" aria-label="Permalink to &quot;Kotlin/WasmにおけるTypeScript宣言ファイルの生成&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin/WasmでのTypeScript宣言ファイルの生成は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的機能</a>です。 いつでも廃止または変更される可能性があります。</p></div><p>Kotlin 2.0.0では、Kotlin/WasmコンパイラはKotlinコード内の<code>@JsExport</code>宣言からTypeScript定義を生成できるようになりました。これらの定義は、IDEやJavaScriptツールによってコードの自動補完、型チェックの支援、KotlinコードのJavaScriptへの組み込みを容易にするために使用できます。</p><p>Kotlin/Wasmコンパイラは、<code>@JsExport</code>でマークされたすべての<a href="/ja/kotlin/wasm-js-interop#functions-with-the-jsexport-annotation">トップレベル関数</a>を収集し、自動的に<code>.d.ts</code>ファイルにTypeScript定義を生成します。</p><p>TypeScript定義を生成するには、<code>build.gradle(.kts)</code>ファイル内の<code>wasmJs {}</code>ブロックに<code>generateTypeScriptDefinitions()</code>関数を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        generateTypeScriptDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>また、新しい<code>es2015</code> <a href="#new-compilation-target">コンパイルターゲット</a> を使用することもできます。</p><h3 id="javascript例外のキャッチのサポート" tabindex="-1">JavaScript例外のキャッチのサポート <a class="header-anchor" href="#javascript例外のキャッチのサポート" aria-label="Permalink to &quot;JavaScript例外のキャッチのサポート&quot;">​</a></h3><p>以前は、Kotlin/WasmコードはJavaScriptの例外をキャッチできなかったため、プログラムのJavaScript側で発生するエラーを処理することが困難でした。</p><p>Kotlin 2.0.0では、Kotlin/Wasm内でJavaScript例外をキャッチするサポートを実装しました。この実装により、<code>Throwable</code> や <code>JsException</code> などの特定の型を使用して <code>try-catch</code> ブロックを使用し、これらのエラーを適切に処理できます。</p><p>さらに、例外の有無にかかわらずコードを実行するのに役立つ <code>finally</code> ブロックも正しく動作します。JavaScript例外のキャッチのサポートを導入していますが、JavaScript例外（コールスタックなど）が発生した場合に提供される追加情報はありません。ただし、<a href="https://youtrack.jetbrains.com/issue/KT-68185/WasmJs-Attach-js-exception-object-to-JsException" target="_blank" rel="noreferrer">これらの実装に取り組んでいます</a>。</p><h3 id="新しい例外処理提案がオプションとしてサポートされるようになりました" tabindex="-1">新しい例外処理提案がオプションとしてサポートされるようになりました <a class="header-anchor" href="#新しい例外処理提案がオプションとしてサポートされるようになりました" aria-label="Permalink to &quot;新しい例外処理提案がオプションとしてサポートされるようになりました&quot;">​</a></h3><p>このリリースでは、Kotlin/WasmにおけるWebAssemblyの<a href="https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/Exceptions.md" target="_blank" rel="noreferrer">新しい例外処理提案</a>のサポートを導入します。</p><p>このアップデートにより、新しい提案がKotlinの要件に合致し、最新バージョンの提案のみをサポートする仮想マシンでKotlin/Wasmを使用できるようになります。</p><p><code>-Xwasm-use-new-exception-proposal</code> コンパイラオプションを使用することで、新しい例外処理提案を有効にできます。このオプションはデフォルトでは無効になっています。</p><h3 id="withwasm-関数がjsとwasiのバリアントに分割" tabindex="-1"><code>withWasm()</code> 関数がJSとWASIのバリアントに分割 <a class="header-anchor" href="#withwasm-関数がjsとwasiのバリアントに分割" aria-label="Permalink to &quot;\`withWasm()\` 関数がJSとWASIのバリアントに分割&quot;">​</a></h3><p>階層テンプレートのWasmターゲットを提供していた <code>withWasm()</code> 関数は、より特化した <code>withWasmJs()</code> と <code>withWasmWasi()</code> 関数に置き換えられ、非推奨になりました。</p><p>これで、WASIとJSターゲットをツリー定義の異なるグループ間で分離できるようになりました。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>このバージョンには、他の変更に加え、KotlinにモダンなJSコンパイルがもたらされ、ES2015標準のより多くの機能をサポートします。</p><ul><li><a href="#new-compilation-target">新しいコンパイルターゲット</a></li><li><a href="#suspend-functions-as-es2015-generators">ES2015ジェネレータとしてのSuspend関数</a></li><li><a href="#passing-arguments-to-the-main-function">main関数への引数渡し</a></li><li><a href="#per-file-compilation-for-kotlin-js-projects">Kotlin/JSプロジェクトのファイルごとのコンパイル</a></li><li><a href="#improved-collection-interoperability">改善されたコレクション相互運用性</a></li><li><a href="#support-for-createinstance">createInstance() のサポート</a></li><li><a href="#support-for-type-safe-plain-javascript-objects">型安全なプレーンJavaScriptオブジェクトのサポート</a></li><li><a href="#support-for-npm-package-manager">npmパッケージマネージャーのサポート</a></li><li><a href="#changes-to-compilation-tasks">コンパイルタスクの変更</a></li><li><a href="#discontinuing-legacy-kotlin-js-jar-artifacts">レガシーなKotlin/JS JARアーティファクトの廃止</a></li></ul><h3 id="新しいコンパイルターゲット" tabindex="-1">新しいコンパイルターゲット <a class="header-anchor" href="#新しいコンパイルターゲット" aria-label="Permalink to &quot;新しいコンパイルターゲット&quot;">​</a></h3><p>Kotlin 2.0.0では、Kotlin/JSに新しいコンパイルターゲット <code>es2015</code> を追加します。これは、KotlinでサポートされているES2015のすべての機能を一度に有効にする新しい方法です。</p><p><code>build.gradle(.kts)</code> ファイルで次のように設定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            target.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es2015&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>新しいターゲットは、<a href="/ja/kotlin/whatsnew19#experimental-support-for-es2015-classes-and-modules">ESクラスとモジュール</a> および新たにサポートされた<a href="#suspend-functions-as-es2015-generators">ESジェネレータ</a> を自動的に有効にします。</p><h3 id="es2015ジェネレータとしてのsuspend関数" tabindex="-1">ES2015ジェネレータとしてのSuspend関数 <a class="header-anchor" href="#es2015ジェネレータとしてのsuspend関数" aria-label="Permalink to &quot;ES2015ジェネレータとしてのSuspend関数&quot;">​</a></h3><p>このリリースでは、<a href="/ja/kotlin/composing-suspending-functions">Suspend関数</a> をコンパイルするためのES2015ジェネレータの<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的サポート</a> が導入されました。</p><p>ステートマシンではなくジェネレータを使用することで、プロジェクトの最終バンドルサイズが改善されるはずです。たとえば、JetBrainsチームはES2015ジェネレータを使用することで、Spaceプロジェクトのバンドルサイズを20%削減することに成功しました。</p><p><a href="https://262.ecma-international.org/6.0/" target="_blank" rel="noreferrer">ES2015 (ECMAScript 2015, ES6) の詳細については、公式ドキュメント</a> をご覧ください。</p><h3 id="main関数への引数渡し" tabindex="-1">main関数への引数渡し <a class="header-anchor" href="#main関数への引数渡し" aria-label="Permalink to &quot;main関数への引数渡し&quot;">​</a></h3><p>Kotlin 2.0.0 以降、<code>main()</code> 関数の <code>args</code> のソースを指定できるようになりました。この機能により、コマンドラインでの作業が容易になり、引数を渡すのが簡単になります。</p><p>これを行うには、<code>js {}</code> ブロックを新しい <code>passAsArgumentToMainFunction()</code> 関数で定義します。この関数は文字列の配列を返します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binary.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        passAsArgumentToMainFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Deno.args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この関数は実行時に実行されます。JavaScript式を受け取り、<code>main()</code> 関数呼び出しの代わりに <code>args: Array&lt;String&gt;</code> 引数として使用します。</p><p>また、Node.jsランタイムを使用している場合は、特別なエイリアスを利用できます。これにより、<code>process.argv</code> を毎回手動で追加する代わりに、一度 <code>args</code> パラメータに渡すことができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binary.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            passProcessArgvToMainFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-jsプロジェクトのファイルごとのコンパイル" tabindex="-1">Kotlin/JSプロジェクトのファイルごとのコンパイル <a class="header-anchor" href="#kotlin-jsプロジェクトのファイルごとのコンパイル" aria-label="Permalink to &quot;Kotlin/JSプロジェクトのファイルごとのコンパイル&quot;">​</a></h3><p>Kotlin 2.0.0 では、Kotlin/JS プロジェクトの出力に対する新しい粒度オプションが導入されました。Kotlin ファイルごとに1つの JavaScript ファイルを生成するファイルごとのコンパイルを設定できるようになりました。これにより、最終的なバンドルサイズを大幅に最適化し、プログラムの読み込み時間を改善するのに役立ちます。</p><p>以前は、出力オプションは2つしかありませんでした。Kotlin/JS コンパイラは、プロジェクト全体に対して1つの <code>.js</code> ファイルを生成できましたが、このファイルは大きすぎて使いにくい場合がありました。プロジェクトから関数を使用したい場合は、依存関係としてJavaScriptファイル全体を含める必要がありました。あるいは、プロジェクトモジュールごとに個別の <code>.js</code> ファイルのコンパイルを設定することもできました。これは依然としてデフォルトのオプションです。</p><p>モジュールファイルも大きすぎる可能性があったため、Kotlin 2.0.0 では、Kotlin ファイルごとに1つ（または、エクスポートされた宣言が含まれている場合は2つ）の JavaScript ファイルを生成する、よりきめ細かい出力が追加されました。ファイルごとのコンパイルモードを有効にするには：</p><ol><li><p>ECMAScriptモジュールをサポートするために、ビルドファイルに<a href="/ja/kotlin/whatsnew19#experimental-support-for-es2015-classes-and-modules"><code>useEsModules()</code></a>関数を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        useEsModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ES2015 modules を有効にする</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これには、新しい<code>es2015</code> <a href="#new-compilation-target">コンパイルターゲット</a>を使用することもできます。</p></li><li><p><code>-Xir-per-file</code> コンパイラオプションを適用するか、<code>gradle.properties</code> ファイルを次のように更新します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.js.ir.output.granularity=per-file // \`per-module\` がデフォルト</span></span></code></pre></div></li></ol><h3 id="改善されたコレクション相互運用性" tabindex="-1">改善されたコレクション相互運用性 <a class="header-anchor" href="#改善されたコレクション相互運用性" aria-label="Permalink to &quot;改善されたコレクション相互運用性&quot;">​</a></h3><p>Kotlin 2.0.0以降、シグネチャ内にKotlinコレクション型を持つ宣言をJavaScript（およびTypeScript）にエクスポートすることが可能になりました。これは、<code>Set</code>、<code>Map</code>、<code>List</code> コレクション型とその可変バージョンに適用されます。</p><p>JavaScriptでKotlinコレクションを使用するには、まず必要な宣言を<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-export/" target="_blank" rel="noreferrer"><code>@JsExport</code></a> アノテーションでマークします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> friends: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> me </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Me&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    friends </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kodee&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>その後、JavaScriptから通常のJavaScript配列としてそれらを使用できます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { User, me, KtList } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my-module&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> allMyFriendNames</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> me.friends</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asJsReadonlyArrayView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;Kodee&#39;]</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>残念ながら、JavaScriptからKotlinコレクションを作成することはまだできません。Kotlin 2.0.20でこの機能を追加する予定です。</p></div><h3 id="createinstance-のサポート" tabindex="-1">createInstance() のサポート <a class="header-anchor" href="#createinstance-のサポート" aria-label="Permalink to &quot;createInstance() のサポート&quot;">​</a></h3><p>Kotlin 2.0.0以降、Kotlin/JSターゲットから<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/create-instance.html" target="_blank" rel="noreferrer"><code>createInstance()</code></a>関数を使用できるようになりました。以前は、JVMでのみ利用可能でした。</p><p>この関数は、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/" target="_blank" rel="noreferrer">KClass</a>インターフェースから提供され、指定されたクラスの新しいインスタンスを作成します。これは、Kotlinクラスの実行時参照を取得するのに役立ちます。</p><h3 id="型安全なプレーンjavascriptオブジェクトのサポート" tabindex="-1">型安全なプレーンJavaScriptオブジェクトのサポート <a class="header-anchor" href="#型安全なプレーンjavascriptオブジェクトのサポート" aria-label="Permalink to &quot;型安全なプレーンJavaScriptオブジェクトのサポート&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>js-plain-objects</code> プラグインは<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的機能</a>です。 いつでも廃止または変更される可能性があります。<code>js-plain-objects</code> プラグインはK2コンパイラのみをサポートします。</p></div><p>JavaScript APIとの連携を容易にするため、Kotlin 2.0.0では、型安全なプレーンJavaScriptオブジェクトを作成するために使用できる新しいプラグイン <a href="https://github.com/JetBrains/kotlin/tree/master/plugins/js-plain-objects" target="_blank" rel="noreferrer"><code>js-plain-objects</code></a> を提供しています。このプラグインは、<code>@JsPlainObject</code> アノテーションを持つ<a href="/ja/kotlin/wasm-js-interop#external-interfaces">外部インターフェース</a>についてコードをチェックし、以下を追加します。</p><ul><li>コンストラクタとして使用できるコンパニオンオブジェクト内のインライン <code>invoke</code> 演算子関数。</li><li>オブジェクトのコピーを作成し、そのプロパティの一部を調整するために使用できる <code>.copy()</code> 関数。</li></ul><p>例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.js.JsPlainObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsPlainObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // JavaScript オブジェクトを作成する</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // オブジェクトをコピーし、email を追加する</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;some@user.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // { &quot;name&quot;: &quot;Name&quot;, &quot;age&quot;: 10 }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(copy))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // { &quot;name&quot;: &quot;Name&quot;, &quot;age&quot;: 11, &quot;email&quot;: &quot;some@user.com&quot; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このアプローチで作成されたJavaScriptオブジェクトは、実行時にのみエラーを確認するのではなく、コンパイル時またはIDEでハイライト表示されるため、より安全です。</p><p>外部インターフェースを使用してJavaScriptオブジェクトの形状を記述する <code>fetch()</code> 関数を使用してJavaScript APIと対話する例を考えてみましょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.js.JsPlainObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsPlainObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FetchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Window.fetch のラッパー</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FetchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Add your custom behavior here&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;metod&quot; がメソッドとして認識されないため、コンパイル時エラーが発生する</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://google.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FetchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(metod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// method が必須であるため、コンパイル時エラーが発生する</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://google.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FetchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SOME STRING&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>比較として、JavaScriptオブジェクトを作成するために代わりに <code>js()</code> 関数を使用すると、 エラーは実行時にのみ検出されるか、まったく発生しません。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FetchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Add your custom behavior here&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// エラーは発生しない。&quot;metod&quot; が認識されないため、間違ったメソッド（GET）が使用される。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://google.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ metod: &#39;POST&#39; }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// デフォルトでは GET メソッドが使用される。body が存在すべきではないため、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 実行時エラーが発生する。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://google.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ body: &#39;SOME STRING&#39; }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeError: Window.fetch: HEAD or GET Request cannot have a body</span></span></code></pre></div><p><code>js-plain-objects</code> プラグインを使用するには、<code>build.gradle(.kts)</code> ファイルに以下を追加します。</p>`,134)),n(p,{group:"build-script"},{default:l(()=>[n(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[2]||(a[2]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"plugin.js-plain-objects"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.0.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[3]||(a[3]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlin.plugin.js-plain-objects"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.0.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[10]||(a[10]=e(`<h3 id="npmパッケージマネージャーのサポート" tabindex="-1">npmパッケージマネージャーのサポート <a class="header-anchor" href="#npmパッケージマネージャーのサポート" aria-label="Permalink to &quot;npmパッケージマネージャーのサポート&quot;">​</a></h3><p>以前は、Kotlin Multiplatform Gradleプラグインは、npm依存関係をダウンロードしてインストールするために<a href="https://yarnpkg.com/lang/en/" target="_blank" rel="noreferrer">Yarn</a>をパッケージマネージャーとして使用することしかできませんでした。Kotlin 2.0.0からは、代わりに<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npm</a>をパッケージマネージャーとして使用できます。npmをパッケージマネージャーとして使用することで、設定中に管理するツールが1つ減ります。</p><p>後方互換性のため、Yarnは引き続きデフォルトのパッケージマネージャーです。npmをパッケージマネージャーとして使用するには、<code>gradle.properties</code>ファイルで以下のプロパティを設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.js.yarn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span></code></pre></div><h3 id="コンパイルタスクの変更" tabindex="-1">コンパイルタスクの変更 <a class="header-anchor" href="#コンパイルタスクの変更" aria-label="Permalink to &quot;コンパイルタスクの変更&quot;">​</a></h3><p>以前は、<code>webpack</code> と <code>distributeResources</code> のコンパイルタスクが同じディレクトリをターゲットにしていました。さらに、<code>distribution</code> タスクも <code>dist</code> を出力ディレクトリとして宣言していました。これにより、出力が重複し、コンパイル警告が発生していました。</p><p>そこで、Kotlin 2.0.0から、以下の変更を実装しました。</p><ul><li><code>webpack</code> タスクは別のフォルダをターゲットにするようになりました。</li><li><code>distributeResources</code> タスクは完全に削除されました。</li><li><code>distribution</code> タスクは <code>Copy</code> 型になり、<code>dist</code> フォルダをターゲットにするようになりました。</li></ul><h3 id="レガシーなkotlin-js-jarアーティファクトの廃止" tabindex="-1">レガシーなKotlin/JS JARアーティファクトの廃止 <a class="header-anchor" href="#レガシーなkotlin-js-jarアーティファクトの廃止" aria-label="Permalink to &quot;レガシーなKotlin/JS JARアーティファクトの廃止&quot;">​</a></h3><p>Kotlin 2.0.0以降、Kotlinディストリビューションには、<code>.jar</code> 拡張子を持つレガシーなKotlin/JSアーティファクトは含まれなくなりました。レガシーアーティファクトは、サポートされていない古いKotlin/JSコンパイラで使用されており、<code>klib</code> 形式を使用するIRコンパイラでは不要でした。</p><h2 id="gradleの改善点" tabindex="-1">Gradleの改善点 <a class="header-anchor" href="#gradleの改善点" aria-label="Permalink to &quot;Gradleの改善点&quot;">​</a></h2><p>Kotlin 2.0.0はGradle 6.8.3から8.5まで完全に互換性があります。最新のGradleバージョンまで使用することもできますが、その場合、非推奨警告に遭遇したり、一部の新しいGradle機能が動作しない可能性があることに留意してください。</p><p>このバージョンには、以下の変更が含まれています。</p><ul><li><a href="#new-gradle-dsl-for-compiler-options-in-multiplatform-projects">マルチプラットフォームプロジェクトにおけるコンパイラオプションの新しいGradle DSL</a></li><li><a href="#new-compose-compiler-gradle-plugin">新しいComposeコンパイラGradleプラグイン</a></li><li><a href="#new-attribute-to-distinguish-jvm-and-android-published-libraries">JVMおよびAndroid公開ライブラリを区別するための新しい属性</a></li><li><a href="#improved-gradle-dependency-handling-for-cinteropprocess-in-kotlin-native">Kotlin/NativeにおけるCInteropProcessのGradle依存関係処理の改善</a></li><li><a href="#visibility-changes-in-gradle">Gradleにおける可視性の変更</a></li><li><a href="#new-directory-for-kotlin-data-in-gradle-projects">GradleプロジェクトにおけるKotlinデータ用の新しいディレクトリ</a></li><li><a href="#kotlin-native-compiler-downloaded-when-needed">Kotlin/Nativeコンパイラが必要なときにダウンロードされる</a></li><li><a href="#deprecated-old-ways-of-defining-compiler-options">コンパイラオプション定義の旧方式の非推奨化</a></li><li><a href="#bumped-minimum-supported-agp-version">サポートされるAGPの最小バージョンを引き上げ</a></li><li><a href="#new-gradle-property-for-trying-the-latest-language-version">最新の言語バージョンを試すための新しいGradleプロパティ</a></li><li><a href="#new-json-output-format-for-build-reports">ビルドレポートの新しいJSON出力形式</a></li><li><a href="#kapt-configurations-inherit-annotation-processors-from-superconfigurations">kapt設定がスーパー設定からアノテーションプロセッサを継承する</a></li><li><a href="#kotlin-gradle-plugin-no-longer-uses-deprecated-gradle-conventions">Kotlin Gradleプラグインが非推奨のGradle規約を使用しなくなる</a></li></ul><h3 id="マルチプラットフォームプロジェクトにおけるコンパイラオプションの新しいgradle-dsl" tabindex="-1">マルチプラットフォームプロジェクトにおけるコンパイラオプションの新しいGradle DSL <a class="header-anchor" href="#マルチプラットフォームプロジェクトにおけるコンパイラオプションの新しいgradle-dsl" aria-label="Permalink to &quot;マルチプラットフォームプロジェクトにおけるコンパイラオプションの新しいGradle DSL&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。いつでも廃止または変更される可能性があります。評価目的でのみ使用してください。<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> でのフィードバックをお待ちしております。</p></div><p>Kotlin 2.0.0以前は、Gradleでマルチプラットフォームプロジェクトのコンパイラオプションを設定できるのは、タスクごと、コンパイルごと、ソースセットごとといった低レベルのみでした。プロジェクト全体でコンパイラオプションをより一般的に設定しやすくするために、Kotlin 2.0.0には新しいGradle DSLが付属しています。</p><p>この新しいDSLを使用すると、すべてのターゲットと<code>commonMain</code>のような共有ソースセットの拡張レベルで、および特定のターゲットのターゲットレベルでコンパイラオプションを設定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // すべてのターゲットおよび共有ソースセットのデフォルトとして使用される</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 拡張レベルの共通コンパイラオプション</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        allWarningsAsErrors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // このターゲットのすべてのコンパイルのデフォルトとして使用される</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ターゲットレベルのJVMコンパイラオプション</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            noJdk.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>プロジェクト全体の構成は、現在3つのレイヤーで構成されています。最も高いのは拡張レベルで、次にターゲットレベル、そして最も低いのはコンパイル単位（通常はコンパイルタスク）です。</p><p><img src="`+o+`" alt="Kotlin compiler options levels" width="700"></p><p>上位レベルの設定は、下位レベルの規約（デフォルト）として使用されます。</p><ul><li>拡張コンパイラオプションの値は、<code>commonMain</code>、<code>nativeMain</code>、<code>commonTest</code> などの共有ソースセットを含むターゲットコンパイラオプションのデフォルトです。</li><li>ターゲットコンパイラオプションの値は、たとえば <code>compileKotlinJvm</code> や <code>compileTestKotlinJvm</code> タスクなど、コンパイル単位（タスク）コンパイラオプションのデフォルトとして使用されます。</li></ul><p>逆に、下位レベルで行われた設定は、上位レベルの関連設定をオーバーライドします。</p><ul><li>タスクレベルのコンパイラオプションは、ターゲットレベルまたは拡張レベルの関連設定をオーバーライドします。</li><li>ターゲットレベルのコンパイラオプションは、拡張レベルの関連設定をオーバーライドします。</li></ul><p>プロジェクトを設定する際には、コンパイラオプションを設定する一部の古い方法が<a href="#deprecated-old-ways-of-defining-compiler-options">非推奨</a> になっていることに注意してください。</p><p>この新しいDSLをマルチプラットフォームプロジェクトで試していただき、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>でフィードバックをお寄せください。このDSLをコンパイラオプションを設定する推奨アプローチとする予定です。</p><h3 id="新しいcomposeコンパイラgradleプラグイン" tabindex="-1">新しいComposeコンパイラGradleプラグイン <a class="header-anchor" href="#新しいcomposeコンパイラgradleプラグイン" aria-label="Permalink to &quot;新しいComposeコンパイラGradleプラグイン&quot;">​</a></h3><p>コンポーザブルをKotlinコードに変換するJetpack Composeコンパイラが、Kotlinリポジトリにマージされました。これにより、Composeコンパイラが常にKotlinと同時にリリースされるため、ComposeプロジェクトのKotlin 2.0.0への移行が容易になります。これにより、Composeコンパイラのバージョンも2.0.0に上がります。</p><p>プロジェクトで新しいComposeコンパイラを使用するには、<code>build.gradle(.kts)</code>ファイルで<code>org.jetbrains.kotlin.plugin.compose</code> Gradleプラグインを適用し、そのバージョンをKotlin 2.0.0と同じに設定します。</p><p>この変更の詳細と移行手順については、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-compiler.html" target="_blank" rel="noreferrer">Composeコンパイラのドキュメント</a> を参照してください。</p><h3 id="jvmおよびandroid公開ライブラリを区別するための新しい属性" tabindex="-1">JVMおよびAndroid公開ライブラリを区別するための新しい属性 <a class="header-anchor" href="#jvmおよびandroid公開ライブラリを区別するための新しい属性" aria-label="Permalink to &quot;JVMおよびAndroid公開ライブラリを区別するための新しい属性&quot;">​</a></h3><p>Kotlin 2.0.0以降、<a href="https://docs.gradle.org/current/userguide/variant_attributes.html#sub:jvm_default_attributes" target="_blank" rel="noreferrer"><code>org.gradle.jvm.environment</code></a> Gradle属性が、すべてのKotlinバリアントとともにデフォルトで公開されます。</p><p>この属性は、Kotlin MultiplatformライブラリのJVMバリアントとAndroidバリアントを区別するのに役立ちます。特定のライブラリバリアントが特定のJVM環境に適していることを示します。ターゲット環境は「android」、「standard-jvm」、または「no-jvm」になります。</p><p>この属性を公開することで、Javaのみのプロジェクトなど、マルチプラットフォームではないクライアントからも、JVMとAndroidターゲットを持つKotlin Multiplatformライブラリをより堅牢に利用できるようになるはずです。</p><p>必要に応じて、属性の公開を無効にすることができます。そのためには、<code>gradle.properties</code>ファイルに以下のGradleオプションを追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.publishJvmEnvironmentAttribute=false</span></span></code></pre></div><h3 id="kotlin-nativeにおけるcinteropprocessのgradle依存関係処理の改善" tabindex="-1">Kotlin/NativeにおけるCInteropProcessのGradle依存関係処理の改善 <a class="header-anchor" href="#kotlin-nativeにおけるcinteropprocessのgradle依存関係処理の改善" aria-label="Permalink to &quot;Kotlin/NativeにおけるCInteropProcessのGradle依存関係処理の改善&quot;">​</a></h3><p>このリリースでは、Kotlin/NativeプロジェクトにおけるGradleタスクの依存関係管理を向上させるため、<code>defFile</code> プロパティの処理を強化しました。</p><p>このアップデート以前は、<code>defFile</code> プロパティが、まだ実行されていない別のタスクの出力として指定されている場合、Gradleビルドが失敗する可能性がありました。この問題の回避策は、このタスクへの依存関係を追加することでした。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            cinterops</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cinterop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    defFileProperty.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(createDefFileTask.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.defFile.asFile })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    project.tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(interopProcessingTaskName).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                        dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(createDefFileTask)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これを修正するために、<code>definitionFile</code>という新しい<code>RegularFileProperty</code>プロパティが追加されました。これで、Gradleはビルドプロセスの後半で接続されたタスクが実行された後に、<code>definitionFile</code>プロパティの存在を遅延的に検証します。この新しいアプローチにより、追加の依存関係は不要になります。</p><p><code>CInteropProcess</code>タスクと<code>CInteropSettings</code>クラスは、<code>defFile</code>と<code>defFileProperty</code>の代わりに<code>definitionFile</code>プロパティを使用します。</p>`,43)),n(p,{group:"build-script"},{default:l(()=>[n(t,{id:"kotlin",title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[4]||(a[4]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    macosArm64"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilations."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getByName"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"main"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            cinterops"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"                val"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," cinterop "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," creating"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                    definitionFile."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(project."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"file"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"def-file.def"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{id:"groovy",title:"Groovy","group-key":"groovy"},{default:l(()=>a[5]||(a[5]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    macosArm64("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilations"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"main {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            cinterops {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                cinterop {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                    definitionFile"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"set(project"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"file("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"def-file.def"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[11]||(a[11]=e(`<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>defFile</code> と <code>defFileProperty</code> パラメータは非推奨になりました。</p></div><h3 id="gradleにおける可視性の変更" tabindex="-1">Gradleにおける可視性の変更 <a class="header-anchor" href="#gradleにおける可視性の変更" aria-label="Permalink to &quot;Gradleにおける可視性の変更&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>この変更はKotlin DSLユーザーにのみ影響します。</p></div><p>Kotlin 2.0.0 では、ビルドスクリプトの制御と安全性を向上させるために、Kotlin Gradle Plugin を変更しました。以前は、特定の DSL コンテキスト向けに意図された Kotlin DSL 関数とプロパティが、意図せず他の DSL コンテキストに漏洩していました。この漏洩は、誤ったコンパイラオプションの使用、設定の複数回適用、その他の設定ミスにつながる可能性がありました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Target DSL は、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // kotlin{} 拡張 DSL で定義されたメソッドやプロパティにアクセスできなかった</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Compilation DSL は、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // kotlin{} 拡張 DSL や Kotlin jvm{} ターゲット DSL で定義された</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // メソッドやプロパティにアクセスできなかった</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Compilation task DSL は、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // kotlin{} 拡張、Kotlin jvm{} ターゲット、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // または Kotlin compilation DSL で定義された</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // メソッドやプロパティにアクセスできなかった</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compileTaskProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 例：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                explicitApi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ERROR (kotlin{} 拡張 DSL で定義されているため)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                mavenPublication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ERROR (Kotlin jvm{} ターゲット DSL で定義されているため)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                defaultSourceSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ERROR (Kotlin compilation DSL で定義されているため)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この問題を修正するために、<code>@KotlinGradlePluginDsl</code> アノテーションが追加され、Kotlin GradleプラグインのDSL関数とプロパティが、意図されていないレベルに公開されるのを防ぐようになりました。以下のレベルは互いに分離されています。</p><ul><li>Kotlin拡張</li><li>Kotlinターゲット</li><li>Kotlinコンパイル</li><li>Kotlinコンパイルタスク</li></ul><p>最も一般的なケースについては、ビルドスクリプトが誤って設定されている場合に、修正方法の提案を含むコンパイラの警告を追加しました。例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvmMain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.7.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この場合、<code>sourceSets</code> の警告メッセージは次のようになります。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[DEPRECATION] &#39;sourceSets: NamedDomainObjectContainer&lt;KotlinSourceSet&gt;&#39; is deprecated.Accessing &#39;sourceSets&#39; container on the Kotlin target level DSL is deprecated. Consider configuring &#39;sourceSets&#39; on the Kotlin extension level.</span></span></code></pre></div><p>この変更に関するフィードバックをお待ちしております！<a href="https://kotlinlang.slack.com/archives/C19FD9681" target="_blank" rel="noreferrer">#gradle Slackチャンネル</a> でKotlin開発者に直接コメントを共有してください。<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">Slack招待状を入手する</a>。</p><h3 id="gradleプロジェクトにおけるkotlinデータ用の新しいディレクトリ" tabindex="-1">GradleプロジェクトにおけるKotlinデータ用の新しいディレクトリ <a class="header-anchor" href="#gradleプロジェクトにおけるkotlinデータ用の新しいディレクトリ" aria-label="Permalink to &quot;GradleプロジェクトにおけるKotlinデータ用の新しいディレクトリ&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>.kotlin</code> ディレクトリをバージョン管理にコミットしないでください。 たとえば、Gitを使用している場合、プロジェクトの <code>.gitignore</code> ファイルに <code>.kotlin</code> を追加してください。</p></div><p>Kotlin 1.8.20 では、Kotlin Gradle プラグインがデータを Gradle プロジェクトキャッシュディレクトリ（<code>&lt;project-root-directory&gt;/.gradle/kotlin</code>）に保存するように切り替わりました。しかし、<code>.gradle</code> ディレクトリは Gradle 専用であり、結果として将来にわたって保証されるものではありません。</p><p>これを解決するため、Kotlin 2.0.0 以降、Kotlin データはデフォルトで <code>&lt;project-root-directory&gt;/.kotlin</code> に保存されるようになります。 後方互換性のため、一部のデータは引き続き <code>.gradle/kotlin</code> ディレクトリに保存されます。</p><p>設定可能な新しいGradleプロパティは以下の通りです。</p><table tabindex="0"><thead><tr><th>Gradle プロパティ</th><th>説明</th></tr></thead><tbody><tr><td><code>kotlin.project.persistent.dir</code></td><td>プロジェクトレベルのデータが保存される場所を設定します。デフォルト: <code>&lt;project-root-directory&gt;/.kotlin</code></td></tr><tr><td><code>kotlin.project.persistent.dir.gradle.disableWrite</code></td><td><code>.gradle</code> ディレクトリへのKotlinデータの書き込みを無効にするかどうかを制御するブール値。デフォルト: <code>false</code></td></tr></tbody></table><p>これらのプロパティをプロジェクトの <code>gradle.properties</code> ファイルに追加すると、有効になります。</p><h3 id="kotlin-nativeコンパイラが必要なときにダウンロードされる" tabindex="-1">Kotlin/Nativeコンパイラが必要なときにダウンロードされる <a class="header-anchor" href="#kotlin-nativeコンパイラが必要なときにダウンロードされる" aria-label="Permalink to &quot;Kotlin/Nativeコンパイラが必要なときにダウンロードされる&quot;">​</a></h3><p>Kotlin 2.0.0以前は、マルチプラットフォームプロジェクトのGradleビルドスクリプトに<a href="/ja/kotlin/native-target-support">Kotlin/Nativeターゲット</a>が設定されている場合、Gradleは常に<a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:configuration" target="_blank" rel="noreferrer">設定フェーズ</a>でKotlin/Nativeコンパイラをダウンロードしていました。</p><p>これは、<a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:execution" target="_blank" rel="noreferrer">実行フェーズ</a>で実行されるべきKotlin/Nativeターゲットのコードをコンパイルするタスクがなくても発生していました。このようにKotlin/Nativeコンパイラをダウンロードする方法は、CIプロセスの一部としてKotlinプロジェクトのテストやチェックを実行したいだけのユーザーにとっては特に非効率的でした。</p><p>Kotlin 2.0.0では、Kotlin Gradleプラグインのこの動作を変更し、Kotlin/Nativeコンパイラが<a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:execution" target="_blank" rel="noreferrer">実行フェーズ</a>で、<strong>かつ</strong> Kotlin/Nativeターゲットのコンパイルが要求された場合に<strong>のみ</strong>ダウンロードされるようにしました。</p><p>その結果、Kotlin/Nativeコンパイラの依存関係も、コンパイラの一部としてではなく、実行フェーズでダウンロードされるようになりました。</p><p>新しい動作で問題が発生した場合は、<code>gradle.properties</code>ファイルに以下のGradleプロパティを追加することで、一時的に以前の動作に戻すことができます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.toolchain.enabled=false</span></span></code></pre></div><p>Kotlin 1.9.20-Beta以降、Kotlin/NativeディストリビューションはCDNとともに<a href="https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-native-prebuilt/" target="_blank" rel="noreferrer">Maven Central</a>にも公開されています。</p><p>これにより、KotlinがL必要なアーティファクトを探してダウンロードする方法が変更されました。デフォルトでは、CDNの代わりに、プロジェクトの<code>repositories {}</code>ブロックで指定したMavenリポジトリを使用するようになりました。</p><p><code>gradle.properties</code>ファイルに以下のGradleプロパティを設定することで、一時的にこの動作を元に戻すことができます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.distribution.downloadFromMaven=false</span></span></code></pre></div><p>問題があれば、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー (YouTrack)</a> まで報告してください。これらのデフォルト動作を変更する両方のGradleプロパティは一時的なものであり、将来のリリースで削除される予定です。</p><h3 id="コンパイラオプション定義の旧方式の非推奨化" tabindex="-1">コンパイラオプション定義の旧方式の非推奨化 <a class="header-anchor" href="#コンパイラオプション定義の旧方式の非推奨化" aria-label="Permalink to &quot;コンパイラオプション定義の旧方式の非推奨化&quot;">​</a></h3><p>今回のリリースでは、コンパイラオプションの設定方法をさらに洗練しています。これにより、さまざまな方法間のあいまいさを解消し、プロジェクト構成をよりシンプルにすることができます。</p><p>Kotlin 2.0.0以降、コンパイラオプションを指定する以下のDSLは非推奨となりました。</p><ul><li><p>すべてのKotlinコンパイルタスクを実装する <code>KotlinCompile</code> インターフェースの <code>kotlinOptions</code> DSL。代わりに <code>KotlinCompilationTask&lt;CompilerOptions&gt;</code> を使用してください。</p></li><li><p><code>KotlinCompilation</code> インターフェースの <code>HasCompilerOptions</code> 型を持つ <code>compilerOptions</code> プロパティ。このDSLは他のDSLと一貫性がなく、<code>KotlinCompilation.compileTaskProvider</code> コンパイルタスク内の <code>compilerOptions</code> と同じ <code>KotlinCommonCompilerOptions</code> オブジェクトを設定するため、混乱を招いていました。</p><p>代わりに、Kotlinコンパイルタスクの <code>compilerOptions</code> プロパティを使用することをお勧めします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlinCompilation.compileTaskProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compileTaskProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                compilerOptions.freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xir-minimized-member-names=false&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>KotlinCompilation</code> インターフェースの <code>kotlinOptions</code> DSL。</p></li><li><p><code>KotlinNativeArtifactConfig</code> インターフェース、<code>KotlinNativeLink</code> クラス、および <code>KotlinNativeLinkArtifactTask</code> クラスの <code>kotlinOptions</code> DSL。代わりに <code>toolOptions</code> DSL を使用してください。</p></li><li><p><code>KotlinJsDce</code> インターフェースの <code>dceOptions</code> DSL。代わりに <code>toolOptions</code> DSL を使用してください。</p></li></ul><p>Kotlin Gradleプラグインでのコンパイラオプションの指定方法の詳細については、<a href="/ja/kotlin/gradle-compiler-options#how-to-define-options">オプションの定義方法</a> を参照してください。</p><h3 id="サポートされるagpの最小バージョンを引き上げ" tabindex="-1">サポートされるAGPの最小バージョンを引き上げ <a class="header-anchor" href="#サポートされるagpの最小バージョンを引き上げ" aria-label="Permalink to &quot;サポートされるAGPの最小バージョンを引き上げ&quot;">​</a></h3><p>Kotlin 2.0.0以降、サポートされるAndroid Gradleプラグインの最小バージョンは7.1.3です。</p><h3 id="最新の言語バージョンを試すための新しいgradleプロパティ" tabindex="-1">最新の言語バージョンを試すための新しいGradleプロパティ <a class="header-anchor" href="#最新の言語バージョンを試すための新しいgradleプロパティ" aria-label="Permalink to &quot;最新の言語バージョンを試すための新しいGradleプロパティ&quot;">​</a></h3><p>Kotlin 2.0.0以前は、新しいK2コンパイラを試すために <code>kotlin.experimental.tryK2</code> というGradleプロパティがありました。Kotlin 2.0.0でK2コンパイラがデフォルトで有効になったため、このプロパティを新しい形式に進化させ、プロジェクトで最新の言語バージョンを試すために使用できるようになりました。それが <code>kotlin.experimental.tryNext</code> です。このプロパティを <code>gradle.properties</code> ファイルで使用すると、Kotlin Gradleプラグインは言語バージョンを、Kotlinバージョンのデフォルト値よりも1つ高くインクリメントします。例えば、Kotlin 2.0.0ではデフォルトの言語バージョンは2.0なので、このプロパティは言語バージョン2.1を設定します。</p><p>この新しいGradleプロパティは、以前の<code>kotlin.experimental.tryK2</code>と同様の指標を<a href="/ja/kotlin/gradle-compilation-and-caches#build-reports">ビルドレポート</a>で生成します。設定された言語バージョンが出力に含まれます。例：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>##### &#39;kotlin.experimental.tryNext&#39; results #####</span></span>
<span class="line"><span>:app:compileKotlin: 2.1 language version</span></span>
<span class="line"><span>:lib:compileKotlin: 2.1 language version</span></span>
<span class="line"><span>##### 100% (2/2) tasks have been compiled with Kotlin 2.1 #####</span></span></code></pre></div><p>ビルドレポートを有効にする方法とその内容の詳細については、<a href="/ja/kotlin/gradle-compilation-and-caches#build-reports">ビルドレポート</a> を参照してください。</p><h3 id="ビルドレポートの新しいjson出力形式" tabindex="-1">ビルドレポートの新しいJSON出力形式 <a class="header-anchor" href="#ビルドレポートの新しいjson出力形式" aria-label="Permalink to &quot;ビルドレポートの新しいJSON出力形式&quot;">​</a></h3><p>Kotlin 1.7.0では、コンパイラパフォーマンスを追跡するのに役立つビルドレポートを導入しました。時が経つにつれて、これらのレポートをより詳細でパフォーマンス問題の調査に役立つように、さらに多くの指標を追加してきました。以前は、ローカルファイルの出力形式は <code>*.txt</code> 形式のみでした。Kotlin 2.0.0では、他のツールを使用して分析をさらに容易にするために、JSON出力形式をサポートしています。</p><p>ビルドレポートのJSON出力形式を設定するには、<code>gradle.properties</code> ファイルに以下のプロパティを宣言します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.output=json</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// ビルドレポートを保存するディレクトリ</span></span>
<span class="line"><span>kotlin.build.report.json.directory=my/directory/path</span></span></code></pre></div><p>または、次のコマンドを実行することもできます。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assemble</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Pkotlin.build.report.output=json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Pkotlin.build.report.json.directory=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my/directory/path&quot;</span></span></code></pre></div><p>設定が完了すると、Gradleは指定したディレクトリに <code>\${project_name}-date-time-&lt;sequence_number&gt;.json</code> という名前でビルドレポートを生成します。</p><p>以下は、ビルドメトリクスと集計メトリクスを含むJSON出力形式のビルドレポートの例です。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;buildOperationRecord&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:lib:compileKotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;classFqName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin.gradle.tasks.KotlinCompile_Decorated&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;startTimeMs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1714730820601</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;totalTimeMs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2724</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;buildMetrics&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;buildTimes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;buildTimesNs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;CLEAR_OUTPUT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">713417</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;SHRINK_AND_SAVE_CURRENT_CLASSPATH_SNAPSHOT_AFTER_COMPILATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19699333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;IR_TRANSLATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">281000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;NON_INCREMENTAL_LOAD_CURRENT_CLASSPATH_SNAPSHOT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14088042</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;CALCULATE_OUTPUT_SIZE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1301500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;GRADLE_TASK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2724000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;COMPILER_INITIALIZATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">263000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;IR_GENERATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">74000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;aggregatedMetrics&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;buildTimes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;buildTimesNs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;CLEAR_OUTPUT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">782667</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;SHRINK_AND_SAVE_CURRENT_CLASSPATH_SNAPSHOT_AFTER_COMPILATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22031833</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;IR_TRANSLATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">333000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;NON_INCREMENTAL_LOAD_CURRENT_CLASSPATH_SNAPSHOT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14890292</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;CALCULATE_OUTPUT_SIZE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2370750</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;GRADLE_TASK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3234000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;COMPILER_INITIALIZATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">292000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;IR_GENERATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">89000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h3 id="kapt設定がスーパー設定からアノテーションプロセッサを継承する" tabindex="-1">kapt設定がスーパー設定からアノテーションプロセッサを継承する <a class="header-anchor" href="#kapt設定がスーパー設定からアノテーションプロセッサを継承する" aria-label="Permalink to &quot;kapt設定がスーパー設定からアノテーションプロセッサを継承する&quot;">​</a></h3><p>Kotlin 2.0.0以前は、アノテーションプロセッサの共通セットを個別のGradle設定で定義し、サブプロジェクトのkapt固有の設定でこの設定を拡張しようとすると、kaptはアノテーションプロセッサを見つけられないためアノテーション処理をスキップしていました。Kotlin 2.0.0では、kaptはアノテーションプロセッサへの間接的な依存関係が間接的に存在することを正常に検出できます。</p><p>例として、<a href="https://dagger.dev/" target="_blank" rel="noreferrer">Dagger</a> を使用するサブプロジェクトの場合、<code>build.gradle(.kts)</code> ファイルで次の設定を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonAnnotationProcessors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configurations.creating</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configurations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kapt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extendsFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonAnnotationProcessors) }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.dagger:dagger:2.48.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    commonAnnotationProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.dagger:dagger-compiler:2.48.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この例では、<code>commonAnnotationProcessors</code> Gradle 設定は、すべてのプロジェクトで使用したい共通のアノテーション処理設定です。<a href="https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.Configuration.html#org.gradle.api.artifacts.Configuration:extendsFrom" target="_blank" rel="noreferrer"><code>extendsFrom()</code></a> メソッドを使用して、<code>commonAnnotationProcessors</code> をスーパー設定として追加します。kaptは、<code>commonAnnotationProcessors</code> Gradle 設定がDaggerアノテーションプロセッサに依存していることを認識します。したがって、kaptはDaggerアノテーションプロセッサをアノテーション処理の設定に含めます。</p><p><a href="https://github.com/JetBrains/kotlin/pull/5198" target="_blank" rel="noreferrer">実装</a> を提供してくれたChristoph Loyに感謝します！</p><h3 id="kotlin-gradleプラグインが非推奨のgradle規約を使用しなくなる" tabindex="-1">Kotlin Gradleプラグインが非推奨のGradle規約を使用しなくなる <a class="header-anchor" href="#kotlin-gradleプラグインが非推奨のgradle規約を使用しなくなる" aria-label="Permalink to &quot;Kotlin Gradleプラグインが非推奨のGradle規約を使用しなくなる&quot;">​</a></h3><p>Kotlin 2.0.0以前は、Gradle 8.2以降を使用している場合、Kotlin GradleプラグインはGradle 8.2で非推奨となったGradle規約を誤って使用していました。これにより、Gradleはビルドの非推奨警告を報告していました。Kotlin 2.0.0では、Kotlin Gradleプラグインが更新され、Gradle 8.2以降を使用してもこれらの非推奨警告をトリガーしなくなりました。</p><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><p>このリリースでは、Kotlin標準ライブラリのさらなる安定化が図られ、既存の関数がすべてのプラットフォームで共通化されました。</p><ul><li><a href="#stable-replacement-of-the-enum-class-values-generic-function">enum class の <code>values</code> ジェネリック関数の安定版置換</a></li><li><a href="#stable-autocloseable-interface">AutoCloseable インターフェースの安定版</a></li><li><a href="#common-protected-property-abstractmutablelist-modcount">共通の protected プロパティ AbstractMutableList.modCount</a></li><li><a href="#common-protected-function-abstractmutablelist-removerange">共通の protected 関数 AbstractMutableList.removeRange</a></li><li><a href="#common-string-tochararray-destination-function">共通の String.toCharArray(destination) 関数</a></li></ul><h3 id="enum-class-の-values-ジェネリック関数の安定版置換" tabindex="-1">enum class の <code>values</code> ジェネリック関数の安定版置換 <a class="header-anchor" href="#enum-class-の-values-ジェネリック関数の安定版置換" aria-label="Permalink to &quot;enum class の \`values\` ジェネリック関数の安定版置換&quot;">​</a></h3><p>Kotlin 2.0.0では、<code>enumEntries&lt;T&gt;()</code> 関数が<a href="/ja/kotlin/components-stability#stability-levels-explained">Stable</a>になります。 <code>enumEntries&lt;T&gt;()</code> 関数は、ジェネリックな <code>enumValues&lt;T&gt;()</code> 関数の代替です。新しい関数は、指定されたenum型 <code>T</code> のすべてのenumエントリのリストを返します。enumクラスの <code>entries</code> プロパティは以前に導入され、合成関数 <code>values()</code> を置き換えるために安定化されました。<code>entries</code> プロパティの詳細については、<a href="/ja/kotlin/whatsnew1820#a-modern-and-performant-replacement-of-the-enum-class-values-function">Kotlin 1.8.20の新機能</a> を参照してください。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>enumValues&lt;T&gt;()</code> 関数はまだサポートされていますが、パフォーマンスへの影響が少ないため、<code>enumEntries&lt;T&gt;()</code> 関数を使用することをお勧めします。<code>enumValues&lt;T&gt;()</code> を呼び出すたびに新しい配列が作成されますが、<code>enumEntries&lt;T&gt;()</code> を呼び出すたびに同じリストが返されるため、はるかに効率的です。</p></div><p>例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { RED, GREEN, BLUE }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printAllValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enumEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.name })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printAllValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RGB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// RED, GREEN, BLUE</span></span></code></pre></div><h3 id="autocloseable-インターフェースの安定版" tabindex="-1">AutoCloseable インターフェースの安定版 <a class="header-anchor" href="#autocloseable-インターフェースの安定版" aria-label="Permalink to &quot;AutoCloseable インターフェースの安定版&quot;">​</a></h3><p>Kotlin 2.0.0 では、共通の <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-auto-closeable/" target="_blank" rel="noreferrer"><code>AutoCloseable</code></a> インターフェースが<a href="/ja/kotlin/components-stability#stability-levels-explained">Stable</a> になりました。これにより、リソースを簡単に閉じることができ、いくつかの便利な関数が含まれています。</p><ul><li><code>use()</code> 拡張関数：選択したリソースに対して指定されたブロック関数を実行し、例外がスローされるかどうかにかかわらず、正しく閉じます。</li><li><code>AutoCloseable()</code> コンストラクタ関数：<code>AutoCloseable</code> インターフェースのインスタンスを作成します。</li></ul><p>以下の例では、<code>XMLWriter</code> インターフェースを定義し、それを実装するリソースがあることを想定しています。 たとえば、このリソースは、ファイルを開き、XMLコンテンツを書き込み、その後ファイルを閉じるクラスである可能性があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flushAndClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> writeBooksTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> autoCloseable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AutoCloseable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { writer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flushAndClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    autoCloseable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        writer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bookstore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;category&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fiction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Harry Potter and the Prisoner of Azkaban&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;J. K. Rowling&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1999&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;29.99&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;category&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;programming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin in Action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dmitry Jemerov&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Svetlana Isakova&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2017&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;25.19&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="共通の-protected-プロパティ-abstractmutablelist-modcount" tabindex="-1">共通の protected プロパティ AbstractMutableList.modCount <a class="header-anchor" href="#共通の-protected-プロパティ-abstractmutablelist-modcount" aria-label="Permalink to &quot;共通の protected プロパティ AbstractMutableList.modCount&quot;">​</a></h3><p>今回のリリースでは、<code>AbstractMutableList</code> インターフェースの <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-mutable-list/mod-count.html" target="_blank" rel="noreferrer"><code>modCount</code></a> <code>protected</code>プロパティが共通化されました。以前は、<code>modCount</code> プロパティは各プラットフォームで利用可能でしたが、共通ターゲットでは利用できませんでした。これで、<code>AbstractMutableList</code> のカスタム実装を作成し、共通コードでこのプロパティにアクセスできるようになりました。</p><p>このプロパティは、コレクションに対して行われた構造変更の数を追跡します。これには、コレクションのサイズを変更する操作や、進行中のイテレーションが誤った結果を返す可能性がある方法でリストを変更する操作が含まれます。</p><p>カスタムリストを実装する際に、<code>modCount</code> プロパティを使用して、並行変更を登録および検出できます。</p><h3 id="共通の-protected-関数-abstractmutablelist-removerange" tabindex="-1">共通の protected 関数 AbstractMutableList.removeRange <a class="header-anchor" href="#共通の-protected-関数-abstractmutablelist-removerange" aria-label="Permalink to &quot;共通の protected 関数 AbstractMutableList.removeRange&quot;">​</a></h3><p>今回のリリースでは、<code>AbstractMutableList</code> インターフェースの <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-mutable-list/remove-range.html" target="_blank" rel="noreferrer"><code>removeRange()</code></a> <code>protected</code>関数が共通化されました。以前は、各プラットフォームで利用可能でしたが、共通ターゲットでは利用できませんでした。これで、<code>AbstractMutableList</code> のカスタム実装を作成し、共通コードでこの関数をオーバーライドできるようになりました。</p><p>この関数は、指定された範囲に従ってこのリストから要素を削除します。この関数をオーバーライドすることで、カスタム実装を利用し、リスト操作のパフォーマンスを向上させることができます。</p><h3 id="共通の-string-tochararray-destination-関数" tabindex="-1">共通の String.toCharArray(destination) 関数 <a class="header-anchor" href="#共通の-string-tochararray-destination-関数" aria-label="Permalink to &quot;共通の String.toCharArray(destination) 関数&quot;">​</a></h3><p>今回のリリースでは、共通の <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-char-array.html" target="_blank" rel="noreferrer"><code>String.toCharArray(destination)</code></a> 関数が導入されました。以前は、JVMでのみ利用可能でした。</p><p>既存の <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-char-array.html" target="_blank" rel="noreferrer"><code>String.toCharArray()</code></a> 関数と比較してみましょう。こちらは、指定された文字列の文字を含む新しい <code>CharArray</code> を作成します。一方、新しい共通の <code>String.toCharArray(destination)</code> 関数は、<code>String</code> の文字を既存の <code>CharArray</code> に移動します。これは、すでに埋めたいバッファがある場合に便利です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin is awesome!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> destinationArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myString.length)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 文字列を変換し、destinationArray に格納する:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(destinationArray)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (char </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> destinationArray) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$char</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // K o t l i n   i s   a w e s o m e ! </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-2-0-0-をインストールする" tabindex="-1">Kotlin 2.0.0 をインストールする <a class="header-anchor" href="#kotlin-2-0-0-をインストールする" aria-label="Permalink to &quot;Kotlin 2.0.0 をインストールする&quot;">​</a></h2><p>IntelliJ IDEA 2023.3およびAndroid Studio Iguana (2023.2.1) Canary 15以降、KotlinプラグインはIDEにバンドルされたプラグインとして配布されています。これは、JetBrains Marketplaceからプラグインをインストールできなくなったことを意味します。</p><p>新しいKotlinバージョンに更新するには、ビルドスクリプトで<a href="/ja/kotlin/releases#update-to-a-new-kotlin-version">Kotlinのバージョンを2.0.0に変更します</a>。</p>`,87))])}const B=d(g,[["render",y]]);export{D as __pageData,B as default};
