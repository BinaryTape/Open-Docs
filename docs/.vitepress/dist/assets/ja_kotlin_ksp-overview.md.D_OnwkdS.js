import{_ as t,C as n,c as e,o as l,ag as a,G as p}from"./chunks/framework.Bksy39di.js";const y=JSON.parse('{"title":"KotlinシンボルプロセッシングAPI","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/ksp-overview.md","filePath":"ja/kotlin/ksp-overview.md","lastUpdated":1754307826000}'),r={name:"ja/kotlin/ksp-overview.md"};function h(k,s,o,d,c,g){const i=n("YouTubeVideo");return l(),e("div",null,[s[0]||(s[0]=a('<h1 id="kotlinシンボルプロセッシングapi" tabindex="-1">KotlinシンボルプロセッシングAPI <a class="header-anchor" href="#kotlinシンボルプロセッシングapi" aria-label="Permalink to &quot;KotlinシンボルプロセッシングAPI&quot;">​</a></h1><p>Kotlin Symbol Processing (<em>KSP</em>) は、軽量なコンパイラプラグインを開発するために使用できるAPIです。 KSPは、Kotlinの能力を活用しつつ学習曲線を最小限に抑える、簡素化されたコンパイラプラグインAPIを提供します。 <a href="/ja/kotlin/kapt">kapt</a>と比較して、KSPを使用するアノテーションプロセッサは最大2倍高速に実行できます。</p><ul><li>KSPがkaptと比較してどうかを詳しく知るには、<a href="/ja/kotlin/ksp-why-ksp">KSPを使用する理由</a>をご覧ください。</li><li>KSPプロセッサの記述を始めるには、<a href="/ja/kotlin/ksp-quickstart">KSPクイックスタート</a>をご覧ください。</li></ul><h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h2><p>KSP APIは、Kotlinプログラムを慣用的に処理します。KSPは、拡張関数、宣言サイトの分散（declaration-site variance）、ローカル関数など、Kotlin固有の機能を理解します。 また、型を明示的にモデル化し、等価性や代入互換性などの基本的な型チェックも提供します。</p><p>このAPIは、<a href="https://kotlinlang.org/docs/reference/grammar.html" target="_blank" rel="noreferrer">Kotlinの文法</a>に従ってKotlinプログラムの構造をシンボルレベルでモデル化します。 KSPベースのプラグインがソースプログラムを処理する際、クラス、クラスメンバー、関数、および関連するパラメータのような構造がプロセッサからアクセス可能になりますが、<code>if</code>ブロックや<code>for</code>ループのようなものはアクセスできません。</p><p>概念的には、KSPはKotlinリフレクションの<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-type/" target="_blank" rel="noreferrer">KType</a>に似ています。 このAPIにより、プロセッサはクラス宣言から特定の型引数を持つ対応する型へ、またその逆へのナビゲーションを可能にします。 また、型引数を置換し、分散を指定し、スタースプロジェクションを適用し、型のnull許容性をマークできます。</p><p>KSPをKotlinプログラムのプリプロセッサフレームワークと考えることもできます。KSPベースのプラグインを <em>シンボルプロセッサ</em>、または単に_プロセッサ_と見なすことで、コンパイルにおけるデータフローを次のステップで記述できます。</p><ol><li>プロセッサはソースプログラムとリソースを読み込み、分析します。</li><li>プロセッサはコードやその他の形式の出力を生成します。</li><li>Kotlinコンパイラは、ソースプログラムと生成されたコードを一緒にコンパイルします。</li></ol><p>本格的なコンパイラプラグインとは異なり、プロセッサはコードを変更することはできません。 言語の意味を変更するコンパイラプラグインは、時に非常に混乱を招く可能性があります。 KSPは、ソースプログラムを読み取り専用として扱うことで、これを回避します。</p><p>KSPの概要は、こちらのビデオでも確認できます。</p>',11)),p(i,{src:"https://www.youtube.com/v/bv-VyGM3HCY",title:"Kotlin Symbol Processing (KSP)"}),s[1]||(s[1]=a(`<h2 id="kspがソースファイルをどのように見ているか" tabindex="-1">KSPがソースファイルをどのように見ているか <a class="header-anchor" href="#kspがソースファイルをどのように見ているか" aria-label="Permalink to &quot;KSPがソースファイルをどのように見ているか&quot;">​</a></h2><p>ほとんどのプロセッサは、入力ソースコードの様々なプログラム構造をナビゲートします。 APIの利用法に入る前に、KSPの視点からファイルがどのように見えるかを見てみましょう。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>KSFile</span></span>
<span class="line"><span>  packageName: KSName</span></span>
<span class="line"><span>  fileName: String</span></span>
<span class="line"><span>  annotations: List&lt;KSAnnotation&gt;  (File annotations)</span></span>
<span class="line"><span>  declarations: List&lt;KSDeclaration&gt;</span></span>
<span class="line"><span>    KSClassDeclaration // class, interface, object</span></span>
<span class="line"><span>      simpleName: KSName</span></span>
<span class="line"><span>      qualifiedName: KSName</span></span>
<span class="line"><span>      containingFile: String</span></span>
<span class="line"><span>      typeParameters: KSTypeParameter</span></span>
<span class="line"><span>      parentDeclaration: KSDeclaration</span></span>
<span class="line"><span>      classKind: ClassKind</span></span>
<span class="line"><span>      primaryConstructor: KSFunctionDeclaration</span></span>
<span class="line"><span>      superTypes: List&lt;KSTypeReference&gt;</span></span>
<span class="line"><span>      // contains inner classes, member functions, properties, etc.</span></span>
<span class="line"><span>      declarations: List&lt;KSDeclaration&gt;</span></span>
<span class="line"><span>    KSFunctionDeclaration // top level function</span></span>
<span class="line"><span>      simpleName: KSName</span></span>
<span class="line"><span>      qualifiedName: KSName</span></span>
<span class="line"><span>      containingFile: String</span></span>
<span class="line"><span>      typeParameters: KSTypeParameter</span></span>
<span class="line"><span>      parentDeclaration: KSDeclaration</span></span>
<span class="line"><span>      functionKind: FunctionKind</span></span>
<span class="line"><span>      extensionReceiver: KSTypeReference?</span></span>
<span class="line"><span>      returnType: KSTypeReference</span></span>
<span class="line"><span>      parameters: List&lt;KSValueParameter&gt;</span></span>
<span class="line"><span>      // contains local classes, local functions, local variables, etc.</span></span>
<span class="line"><span>      declarations: List&lt;KSDeclaration&gt;</span></span>
<span class="line"><span>    KSPropertyDeclaration // global variable</span></span>
<span class="line"><span>      simpleName: KSName</span></span>
<span class="line"><span>      qualifiedName: KSName</span></span>
<span class="line"><span>      containingFile: String</span></span>
<span class="line"><span>      typeParameters: KSTypeParameter</span></span>
<span class="line"><span>      parentDeclaration: KSDeclaration</span></span>
<span class="line"><span>      extensionReceiver: KSTypeReference?</span></span>
<span class="line"><span>      type: KSTypeReference</span></span>
<span class="line"><span>      getter: KSPropertyGetter</span></span>
<span class="line"><span>        returnType: KSTypeReference</span></span>
<span class="line"><span>      setter: KSPropertySetter</span></span>
<span class="line"><span>        parameter: KSValueParameter</span></span></code></pre></div><p>このビューには、ファイル内で宣言される一般的なもの、例えばクラス、関数、プロパティなどがリストされています。</p><h2 id="symbolprocessorprovider-エントリポイント" tabindex="-1">SymbolProcessorProvider: エントリポイント <a class="header-anchor" href="#symbolprocessorprovider-エントリポイント" aria-label="Permalink to &quot;SymbolProcessorProvider: エントリポイント&quot;">​</a></h2><p>KSPは、<code>SymbolProcessor</code>をインスタンス化するために<code>SymbolProcessorProvider</code>インターフェースの実装を期待します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SymbolProcessorProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(environment: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessorEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>一方、<code>SymbolProcessor</code>は次のように定義されています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SymbolProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSAnnotated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Let&#39;s focus on this</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> finish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>Resolver</code>は、シンボルなどのコンパイラの詳細へのアクセスを<code>SymbolProcessor</code>に提供します。 すべてのトップレベル関数と、トップレベルクラス内の非ローカル関数を見つけるプロセッサは、次のようになるでしょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloFunctionFinderProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSClassDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> visitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FindFunctionsVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        resolver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(visitor, Unit) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    inner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FindFunctionsVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSVisitorVoid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visitClassDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(classDeclaration: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSClassDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            classDeclaration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDeclaredFunctions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Unit) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visitFunctionDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(function: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSFunctionDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            functions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(function)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            file.declarations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Unit) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessorProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(environment: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessorEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="リソース" tabindex="-1">リソース <a class="header-anchor" href="#リソース" aria-label="Permalink to &quot;リソース&quot;">​</a></h2><ul><li><a href="/ja/kotlin/ksp-quickstart">クイックスタート</a></li><li><a href="/ja/kotlin/ksp-why-ksp">KSPを使用する理由</a></li><li><a href="/ja/kotlin/ksp-examples">例</a></li><li><a href="/ja/kotlin/ksp-additional-details">KSPがKotlinコードをモデル化する方法</a></li><li><a href="/ja/kotlin/ksp-reference">Javaアノテーションプロセッサ作成者向けリファレンス</a></li><li><a href="/ja/kotlin/ksp-incremental">インクリメンタル処理の注意点</a></li><li><a href="/ja/kotlin/ksp-multi-round">複数ラウンド処理の注意点</a></li><li><a href="/ja/kotlin/ksp-multiplatform">マルチプラットフォームプロジェクトにおけるKSP</a></li><li><a href="/ja/kotlin/ksp-command-line">コマンドラインからのKSP実行</a></li><li><a href="/ja/kotlin/ksp-faq">FAQ</a></li></ul><h2 id="サポートされているライブラリ" tabindex="-1">サポートされているライブラリ <a class="header-anchor" href="#サポートされているライブラリ" aria-label="Permalink to &quot;サポートされているライブラリ&quot;">​</a></h2><p>以下の表は、Androidで人気のあるライブラリと、KSPの様々なサポート段階を示しています。</p><table tabindex="0"><thead><tr><th style="text-align:left;">ライブラリ</th><th style="text-align:left;">ステータス</th></tr></thead><tbody><tr><td style="text-align:left;">Room</td><td style="text-align:left;"><a href="https://developer.android.com/jetpack/androidx/releases/room#2.3.0-beta02" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">Moshi</td><td style="text-align:left;"><a href="https://github.com/square/moshi/" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">RxHttp</td><td style="text-align:left;"><a href="https://github.com/liujingxing/rxhttp" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">Kotshi</td><td style="text-align:left;"><a href="https://github.com/ansman/kotshi" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">Lyricist</td><td style="text-align:left;"><a href="https://github.com/adrielcafe/lyricist" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">Lich SavedState</td><td style="text-align:left;"><a href="https://github.com/line/lich/tree/master/savedstate" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">gRPC Dekorator</td><td style="text-align:left;"><a href="https://github.com/mottljan/grpc-dekorator" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">EasyAdapter</td><td style="text-align:left;"><a href="https://github.com/AmrDeveloper/EasyAdapter" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">Koin Annotations</td><td style="text-align:left;"><a href="https://github.com/InsertKoinIO/koin-annotations" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">Glide</td><td style="text-align:left;"><a href="https://github.com/bumptech/glide" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">Micronaut</td><td style="text-align:left;"><a href="https://micronaut.io/2023/07/14/micronaut-framework-4-0-0-released/" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">Epoxy</td><td style="text-align:left;"><a href="https://github.com/airbnb/epoxy" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">Paris</td><td style="text-align:left;"><a href="https://github.com/airbnb/paris" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">Auto Dagger</td><td style="text-align:left;"><a href="https://github.com/ansman/auto-dagger" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">SealedX</td><td style="text-align:left;"><a href="https://github.com/skydoves/sealedx" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">Ktorfit</td><td style="text-align:left;"><a href="https://github.com/Foso/Ktorfit" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">Mockative</td><td style="text-align:left;"><a href="https://github.com/mockative/mockative" target="_blank" rel="noreferrer">公式サポート</a></td></tr><tr><td style="text-align:left;">DeeplinkDispatch</td><td style="text-align:left;"><a href="https://github.com/airbnb/DeepLinkDispatch/pull/323" target="_blank" rel="noreferrer">airbnb/DeepLinkDispatch#323</a>を介してサポート</td></tr><tr><td style="text-align:left;">Dagger</td><td style="text-align:left;"><a href="https://dagger.dev/dev-guide/ksp" target="_blank" rel="noreferrer">アルファ</a></td></tr><tr><td style="text-align:left;">Motif</td><td style="text-align:left;"><a href="https://github.com/uber/motif" target="_blank" rel="noreferrer">アルファ</a></td></tr><tr><td style="text-align:left;">Hilt</td><td style="text-align:left;"><a href="https://dagger.dev/dev-guide/ksp" target="_blank" rel="noreferrer">進行中</a></td></tr><tr><td style="text-align:left;">Auto Factory</td><td style="text-align:left;"><a href="https://github.com/google/auto/issues/982" target="_blank" rel="noreferrer">未サポート</a></td></tr></tbody></table>`,16))])}const f=t(r,[["render",h]]);export{y as __pageData,f as default};
