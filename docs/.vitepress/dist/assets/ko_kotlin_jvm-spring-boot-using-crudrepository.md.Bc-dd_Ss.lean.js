import{_ as d}from"./chunks/icon-1-done.ZX9lW-aj.js";import{_ as g}from"./chunks/icon-2-done.DCMUaFG5.js";import{_ as o}from"./chunks/icon-3-done.ByaVtpX2.js";import{_ as E}from"./chunks/icon-4.BcArDRXk.js";import{_ as y}from"./chunks/get-kotlin-language-map.DPRZQM3H.js";import{_ as F,C as l,c,o as u,j as s,G as n,ag as t,a as i,w as p}from"./chunks/framework.Bksy39di.js";const w=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/jvm-spring-boot-using-crudrepository.md","filePath":"ko/kotlin/jvm-spring-boot-using-crudrepository.md","lastUpdated":1754307826000}'),C={name:"ko/kotlin/jvm-spring-boot-using-crudrepository.md"};function m(B,a,A,D,b,v){const h=l("web-summary"),e=l("tldr"),k=l("def"),r=l("deflist");return u(),c("div",null,[a[7]||(a[7]=s("h1",{id:"spring-data-crudrepository를-사용하여-데이터베이스-접근하기",tabindex:"-1"},[i("Spring Data CrudRepository를 사용하여 데이터베이스 접근하기 "),s("a",{class:"header-anchor",href:"#spring-data-crudrepository를-사용하여-데이터베이스-접근하기","aria-label":'Permalink to "Spring Data CrudRepository를 사용하여 데이터베이스 접근하기"'},"​")],-1)),n(h,null,{default:p(()=>a[0]||(a[0]=[i("코틀린으로 작성된 Spring Boot 프로젝트에서 Spring Data 인터페이스를 사용합니다.")])),_:1}),n(e,null,{default:p(()=>a[1]||(a[1]=[s("p",null,[i("이 문서는 "),s("strong",null,"Spring Boot 및 Kotlin 시작하기"),i(" 튜토리얼의 마지막 부분입니다. 진행하기 전에 이전 단계를 모두 완료했는지 확인하세요:")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:d,width:"20",alt:"First step"}),i(),s("a",{href:"/ko/kotlin/jvm-create-project-with-spring-boot"},"코틀린으로 Spring Boot 프로젝트 생성하기"),s("br"),s("img",{src:g,width:"20",alt:"Second step"}),i(),s("a",{href:"/ko/kotlin/jvm-spring-boot-add-data-class"},"Spring Boot 프로젝트에 데이터 클래스 추가하기"),s("br"),s("img",{src:o,width:"20",alt:"Third step"}),i(),s("a",{href:"/ko/kotlin/jvm-spring-boot-add-db-support"},"Spring Boot 프로젝트에 데이터베이스 지원 추가하기"),s("br"),s("img",{src:E,width:"20",alt:"Fourth step"}),i(),s("strong",null,"Spring Data CrudRepository를 사용하여 데이터베이스 접근하기")],-1)])),_:1}),a[8]||(a[8]=t("",3)),s("ol",null,[a[5]||(a[5]=t("",2)),s("li",null,[a[4]||(a[4]=t("",2)),n(r,{collapsible:"true"},{default:p(()=>[n(k,{title:"확장 함수"},{default:p(()=>a[2]||(a[2]=[s("p",null,[s("code",null,"findByIdOrNull()"),i(" 함수는 Spring Data JDBC에서 "),s("code",null,"CrudRepository"),i(" 인터페이스를 위한 "),s("a",{href:"/ko/kotlin/extensions#extension-functions"},"확장 함수"),i("입니다.")],-1)])),_:1}),n(k,{title:"CrudRepository save() 함수"},{default:p(()=>a[3]||(a[3]=[s("p",null,[s("a",{href:"https://docs.spring.io/spring-data/jdbc/docs/current/reference/html/#jdbc.entity-persistence"},"이 함수는"),i(" 새 객체에 데이터베이스에 ID가 없다는 가정을 기반으로 작동합니다. 따라서 삽입을 위해서는 ID가 "),s("b",null,"null이어야 합니다"),i(".")],-1),s("p",null,[i("ID가 "),s("i",null,"null"),i("이 아니면 "),s("code",null,"CrudRepository"),i("는 객체가 데이터베이스에 이미 존재하며 이것은 "),s("i",null,"삽입"),i(" 작업이 아닌 "),s("i",null,"업데이트"),i(" 작업이라고 가정합니다. 삽입 작업 후에는 "),s("code",null,"id"),i("가 데이터 저장소에 의해 생성되어 "),s("code",null,"Message"),i(" 인스턴스에 다시 할당됩니다. 이것이 "),s("code",null,"id"),i(" 프로퍼티가 "),s("code",null,"var"),i(" 키워드를 사용하여 선언되어야 하는 이유입니다.")],-1),s("p",null,null,-1)])),_:1})]),_:1})]),a[6]||(a[6]=t("",2))]),a[9]||(a[9]=t("",14))])}const x=F(C,[["render",m]]);export{w as __pageData,x as default};
