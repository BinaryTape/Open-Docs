import{_ as e,c as a,o as r,ag as l}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"マルチプラットフォーム向けKotlinライブラリの構築","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/api-guidelines-build-for-multiplatform.md","filePath":"ja/kotlin/api-guidelines-build-for-multiplatform.md","lastUpdated":1754307826000}'),o={name:"ja/kotlin/api-guidelines-build-for-multiplatform.md"};function i(n,t,p,s,m,c){return r(),a("div",null,t[0]||(t[0]=[l('<h1 id="マルチプラットフォーム向けkotlinライブラリの構築" tabindex="-1">マルチプラットフォーム向けKotlinライブラリの構築 <a class="header-anchor" href="#マルチプラットフォーム向けkotlinライブラリの構築" aria-label="Permalink to &quot;マルチプラットフォーム向けKotlinライブラリの構築&quot;">​</a></h1><p>Kotlinライブラリを作成する際は、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-publish-lib-setup.html" target="_blank" rel="noreferrer">Kotlin Multiplatformに対応してビルドおよび公開する</a>ことを検討してください。 これにより、ライブラリの対象ユーザー層が広がり、複数のプラットフォームをターゲットとするプロジェクトと互換性を持つようになります。</p><p>以下のセクションでは、Kotlin Multiplatformライブラリを効果的に構築するためのガイドラインを提供します。</p><h2 id="リーチを最大化する" tabindex="-1">リーチを最大化する <a class="header-anchor" href="#リーチを最大化する" aria-label="Permalink to &quot;リーチを最大化する&quot;">​</a></h2><p>あなたのライブラリを依存関係として可能な限り多くのプロジェクトで利用できるようにするには、 Kotlin Multiplatformの<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#targets" target="_blank" rel="noreferrer">ターゲットプラットフォーム</a>をできるだけ多くサポートすることを目指してください。</p><p>あなたのライブラリがマルチプラットフォームプロジェクト（ライブラリかアプリケーションかを問わず）が使用するプラットフォームをサポートしていない場合、 そのプロジェクトがあなたのライブラリに依存することは難しくなります。 そのような場合、プロジェクトは一部のプラットフォームであなたのライブラリを使用し、他のプラットフォームでは別途ソリューションを実装する必要があるか、 またはすべてのプラットフォームをサポートする代替ライブラリを完全に選択することになります。</p><p>アーティファクトの生成を効率化するために、実験的な<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-publish-lib-setup.html#host-requirements" target="_blank" rel="noreferrer">クロスコンパイル</a>を試して、任意のホストからKotlin Multiplatformライブラリを公開できます。 これにより、AppleマシンがなくてもAppleターゲット向けの<code>.klib</code>アーティファクトを生成できます。 この機能は今後安定化させ、ライブラリの公開をさらに改善する予定です。 この機能に関するフィードバックは、イシュートラッカーの<a href="https://youtrack.jetbrains.com/issue/KT-71290" target="_blank" rel="noreferrer">YouTrack</a>にお寄せください。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Nativeターゲットの場合、可能なすべてのターゲットをサポートするために<a href="/ja/kotlin/native-target-support#for-library-authors">段階的なアプローチ</a>の使用を検討してください。</p></div><h2 id="共通コードから使用できるようにapiを設計する" tabindex="-1">共通コードから使用できるようにAPIを設計する <a class="header-anchor" href="#共通コードから使用できるようにapiを設計する" aria-label="Permalink to &quot;共通コードから使用できるようにAPIを設計する&quot;">​</a></h2><p>ライブラリを作成する際は、プラットフォーム固有の実装を記述するのではなく、共通Kotlinコードから利用できるようにAPIを設計してください。</p><p>可能な場合は適切なデフォルト設定を提供し、プラットフォーム固有の設定オプションも含めてください。 適切なデフォルト設定により、ユーザーはライブラリの設定のためにプラットフォーム固有の実装を記述することなく、共通KotlinコードからライブラリのAPIを使用できます。</p><p>最も広範囲に関連するソースセットにAPIを以下の優先順位で配置してください。</p><ul><li><strong><code>commonMain</code> ソースセット:</strong> <code>commonMain</code> ソースセット内のAPIは、ライブラリがサポートするすべてのプラットフォームで利用できます。ライブラリのAPIのほとんどをここに配置することを目指してください。</li><li><strong>中間ソースセット:</strong> 一部のプラットフォームが特定のAPIをサポートしていない場合、特定のプラットフォームをターゲットにするために<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-discover-project.html#intermediate-source-sets" target="_blank" rel="noreferrer">中間ソースセット</a>を使用します。 たとえば、マルチスレッドをサポートするターゲット向けの<code>concurrent</code>ソースセットや、すべての非JVMターゲット向けの<code>nonJvm</code>ソースセットを作成できます。</li><li><strong>プラットフォーム固有のソースセット:</strong> プラットフォーム固有のAPIには、<code>androidMain</code>などのソースセットを使用します。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin Multiplatformプロジェクトのソースセットの詳細については、「<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html" target="_blank" rel="noreferrer">階層型プロジェクト構造</a>」を参照してください。</p></div><h2 id="プラットフォーム間での一貫した動作を保証する" tabindex="-1">プラットフォーム間での一貫した動作を保証する <a class="header-anchor" href="#プラットフォーム間での一貫した動作を保証する" aria-label="Permalink to &quot;プラットフォーム間での一貫した動作を保証する&quot;">​</a></h2><p>サポートされるすべてのプラットフォームでライブラリが一貫して動作するようにするためには、 マルチプラットフォームライブラリ内のAPIは、すべてのプラットフォームで同じ範囲の有効な入力を受け入れ、同じアクションを実行し、 同じ結果を返す必要があります。 同様に、ライブラリは無効な入力を統一的に扱い、すべてのプラットフォームで一貫してエラーを報告するか、例外をスローする必要があります。</p><p>動作に一貫性がないと、ライブラリの使用が難しくなり、ユーザーはプラットフォーム固有の違いを管理するために共通コードに条件ロジックを追加せざるを得なくなります。</p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer"><code>expect</code> および <code>actual</code> 宣言</a>を使用すると、共通コードで関数を宣言し、 各プラットフォームのネイティブAPIに完全にアクセスできるプラットフォーム固有の実装を持つことができます。 これらの実装も、共通コードから信頼性高く使用できるように、同じ動作をする必要があります。</p><p>APIがプラットフォーム間で一貫して動作する場合、<code>commonMain</code> ソースセットで一度だけ文書化すれば済みます。</p><blockquote><p>プラットフォームの違いが避けられない場合（例：あるプラットフォームがより広範な入力をサポートしている場合）でも、可能な限りそれらを最小限に抑えてください。たとえば、あるプラットフォームの機能を他のプラットフォームに合わせるために制限したくない場合などです。そのような場合は、具体的な違いを明確に文書化してください。</p><p style=""></p></blockquote><h2 id="すべてのプラットフォームでテストする" tabindex="-1">すべてのプラットフォームでテストする <a class="header-anchor" href="#すべてのプラットフォームでテストする" aria-label="Permalink to &quot;すべてのプラットフォームでテストする&quot;">​</a></h2><p>マルチプラットフォームライブラリには、共通コードで記述され、すべてのプラットフォームで実行される<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-run-tests.html" target="_blank" rel="noreferrer">マルチプラットフォームテスト</a>を含めることができます。 サポートされるプラットフォームでこの共通テストスイートを定期的に実行することで、ライブラリが正しく一貫して動作することを確認できます。</p><p>すべての公開プラットフォームでKotlin/Nativeターゲットを定期的にテストするのは難しい場合があります。 ただし、より広範な互換性を確保するためには、互換性をテストする際に<a href="/ja/kotlin/native-target-support#for-library-authors">段階的な方法</a>を使用して、サポート可能なすべてのターゲットに対してライブラリを公開することを検討してください。</p><p><a href="https://kotlinlang.org/api/latest/kotlin.test/" target="_blank" rel="noreferrer"><code>kotlin-test</code></a>ライブラリを使用して共通コードでテストを記述し、プラットフォーム固有のテストランナーで実行します。</p><h2 id="kotlin以外のユーザーを考慮する" tabindex="-1">Kotlin以外のユーザーを考慮する <a class="header-anchor" href="#kotlin以外のユーザーを考慮する" aria-label="Permalink to &quot;Kotlin以外のユーザーを考慮する&quot;">​</a></h2><p>Kotlin Multiplatformは、サポートするターゲットプラットフォーム間でネイティブAPIと言語との相互運用性を提供します。 Kotlin Multiplatformライブラリを作成する際は、ユーザーがあなたのライブラリの型や宣言をKotlin以外の言語から使用する必要があるかどうかを考慮してください。</p><p>たとえば、ライブラリの特定の型が相互運用性を介してSwiftコードに公開される場合、 それらの型がSwiftから簡単にアクセスできるように設計してください。 <a href="https://github.com/kotlin-hands-on/kotlin-swift-interopedia" target="_blank" rel="noreferrer">Kotlin-Swift interopedia</a>は、Kotlin APIがSwiftから呼び出されたときにどのように見えるかについて役立つ洞察を提供します。</p><h2 id="ライブラリをプロモーションする" tabindex="-1">ライブラリをプロモーションする <a class="header-anchor" href="#ライブラリをプロモーションする" aria-label="Permalink to &quot;ライブラリをプロモーションする&quot;">​</a></h2><p>あなたのライブラリは、<a href="https://klibs.io/" target="_blank" rel="noreferrer">JetBrainsの検索プラットフォーム</a>に掲載される可能性があります。 これは、ターゲットプラットフォームに基づいてKotlin Multiplatformライブラリを簡単に検索できるように設計されています。</p><p>基準を満たすライブラリは自動的に追加されます。ライブラリを追加する方法の詳細については、<a href="https://klibs.io/faq" target="_blank" rel="noreferrer">FAQ</a>を参照してください。</p>',30)]))}const f=e(o,[["render",i]]);export{d as __pageData,f as default};
