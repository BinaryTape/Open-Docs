import{_ as o,a as i,b as a}from"./chunks/publish-your-application-on-web.Dq0Z4N4Z.js";import{_ as t,c as r,o as l,ag as p}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"發布您的應用程式","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/multiplatform-publish-apps.md","filePath":"zh-Hant/kmp/multiplatform-publish-apps.md","lastUpdated":1755516278000}'),n={name:"zh-Hant/kmp/multiplatform-publish-apps.md"};function s(d,e,c,u,h,g){return l(),r("div",null,e[0]||(e[0]=[p('<h1 id="發布您的應用程式" tabindex="-1">發布您的應用程式 <a class="header-anchor" href="#發布您的應用程式" aria-label="Permalink to &quot;發布您的應用程式&quot;">​</a></h1><p>一旦您的應用程式準備好發布，就可以透過發布它們來交付給使用者。</p><p>對於行動應用程式，每個平台都有多個可用的應用程式商店。然而，在本文中，我們將專注於官方商店：<a href="https://play.google.com/store" target="_blank" rel="noreferrer">Google Play Store</a> 和 <a href="https://www.apple.com/ios/app-store/" target="_blank" rel="noreferrer">Apple App Store</a>。對於網頁應用程式，我們將使用 <a href="https://pages.github.com/" target="_blank" rel="noreferrer">GitHub pages</a>。</p><p>您將學習如何準備 Kotlin Multiplatform 應用程式以供發布，我們將強調此過程中需要特別注意的部分。</p><h2 id="android-應用程式" tabindex="-1">Android 應用程式 <a class="header-anchor" href="#android-應用程式" aria-label="Permalink to &quot;Android 應用程式&quot;">​</a></h2><p>由於 <a href="https://developer.android.com/kotlin" target="_blank" rel="noreferrer">Kotlin 是 Android 開發的主要語言</a>，Kotlin Multiplatform 對於專案的編譯和 Android 應用程式的建構沒有明顯影響。無論是從共享模組產生的 Android 函式庫，還是 Android 應用程式本身，都是典型的 Android Gradle 模組；它們與其他 Android 函式庫和應用程式沒有區別。因此，從 Kotlin Multiplatform 專案發布 Android 應用程式，與 <a href="https://developer.android.com/studio/publish" target="_blank" rel="noreferrer">Android 開發者文件</a>中描述的常規過程沒有不同。</p><h2 id="ios-應用程式" tabindex="-1">iOS 應用程式 <a class="header-anchor" href="#ios-應用程式" aria-label="Permalink to &quot;iOS 應用程式&quot;">​</a></h2><p>Kotlin Multiplatform 專案中的 iOS 應用程式是從典型的 Xcode 專案建構的，因此其發布的主要階段與 <a href="https://developer.apple.com/ios/submit/" target="_blank" rel="noreferrer">iOS 開發者文件</a>中描述的相同。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>隨著 2024 春季 App Store 政策的變更，缺少或不完整的隱私權宣告檔可能會導致您的應用程式收到警告甚至遭到拒絕。 有關詳細資訊和因應措施，特別是針對 Kotlin Multiplatform 應用程式，請參閱 <a href="https://kotlinlang.org/docs/apple-privacy-manifest.html" target="_blank" rel="noreferrer">iOS 應用程式的隱私權宣告檔</a>。</p></div><p>Kotlin Multiplatform 專案的特殊之處在於將共享的 Kotlin 模組編譯為框架並將其連結到 Xcode 專案。通常，共享模組與 Xcode 專案之間的整合由 <a href="https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile" target="_blank" rel="noreferrer">Kotlin Multiplatform plugin for Android Studio</a> 自動完成。然而，如果您不使用該外掛程式，在 Xcode 中建構和打包 iOS 專案時請記住以下事項：</p><ul><li>共享的 Kotlin 函式庫會編譯成原生框架。</li><li>您需要將針對特定平台編譯的框架連接到 iOS 應用程式專案。</li><li>在 Xcode 專案設定中，指定框架的路徑以供建構系統搜尋。</li><li>建構專案後，您應啟動並測試應用程式，以確保在執行階段使用框架時沒有任何問題。</li></ul><p>有兩種方法可以將共享的 Kotlin 模組連接到 iOS 專案：</p><ul><li>使用 <a href="./multiplatform-cocoapods-overview">Kotlin CocoaPods Gradle plugin</a>，它允許您將具備原生目標的多平台專案用作 iOS 專案中的 CocoaPods 依賴項。</li><li>手動配置您的 Multiplatform 專案以建立一個 iOS 框架，並配置 Xcode 專案以獲取其最新版本。 Kotlin Multiplatform 精靈或 Kotlin Multiplatform plugin for Android Studio 通常會執行此配置。 請參閱 <a href="./multiplatform-integrate-in-existing-app#configure-the-ios-project-to-use-a-kmp-framework">將框架連接至您的 iOS 專案</a>以了解如何在 Xcode 中直接新增框架。</li></ul><h3 id="配置您的-ios-應用程式" tabindex="-1">配置您的 iOS 應用程式 <a class="header-anchor" href="#配置您的-ios-應用程式" aria-label="Permalink to &quot;配置您的 iOS 應用程式&quot;">​</a></h3><p>您可以在不使用 Xcode 的情況下配置影響最終應用程式的基本屬性。</p><h4 id="bundle-id" tabindex="-1">Bundle ID <a class="header-anchor" href="#bundle-id" aria-label="Permalink to &quot;Bundle ID&quot;">​</a></h4><p><a href="https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleidentifier#discussion" target="_blank" rel="noreferrer">Bundle ID</a> 在作業系統中唯一識別您的應用程式。要更改它，請在 Android Studio 中開啟 <code>iosApp/Configuration/Config.xcconfig</code> 檔案並更新 <code>BUNDLE_ID</code>。</p><h4 id="應用程式名稱" tabindex="-1">應用程式名稱 <a class="header-anchor" href="#應用程式名稱" aria-label="Permalink to &quot;應用程式名稱&quot;">​</a></h4><p>應用程式名稱設定目標可執行檔和應用程式套件名稱。要更改您的應用程式名稱：</p><ul><li><p>如果您尚未在 Android Studio 中開啟專案，可以直接在任何文字編輯器中更改 <code>iosApp/Configuration/Config.xcconfig</code> 檔案中的 <code>APP_NAME</code> 選項。</p></li><li><p>如果您已在 Android Studio 中開啟專案，請執行以下操作：</p><ol><li>關閉專案。</li><li>在任何文字編輯器中，更改 <code>iosApp/Configuration/Config.xcconfig</code> 檔案中的 <code>APP_NAME</code> 選項。</li><li>在 Android Studio 中重新開啟專案。</li></ol></li></ul><p>如果您需要配置其他設定，請使用 Xcode：在 Android Studio 中開啟專案後，在 Xcode 中開啟 <code>iosApp/iosApp.xcworkspace</code> 檔案並在那裡進行更改。</p><h3 id="符號化當機報告" tabindex="-1">符號化當機報告 <a class="header-anchor" href="#符號化當機報告" aria-label="Permalink to &quot;符號化當機報告&quot;">​</a></h3><p>為了幫助開發人員改進他們的應用程式，iOS 提供了一種分析應用程式當機的方法。為了進行詳細的當機分析，它使用特殊的偵錯符號 (<code>.dSYM</code>) 檔案，將當機報告中的記憶體位址與原始碼中的位置（例如函式或行號）進行匹配。</p><p>預設情況下，從共享 Kotlin 模組產生的 iOS 框架的發行版本會隨附一個 <code>.dSYM</code> 檔案。這有助於您分析共享模組程式碼中發生的當機。</p><p>有關當機報告符號化的更多資訊，請參閱 <a href="https://kotlinlang.org/docs/native-debugging.html#debug-ios-applications" target="_blank" rel="noreferrer">Kotlin/Native 文件</a>。</p><h2 id="網頁應用程式" tabindex="-1">網頁應用程式 <a class="header-anchor" href="#網頁應用程式" aria-label="Permalink to &quot;網頁應用程式&quot;">​</a></h2><p>要發布您的網頁應用程式，請建立包含構成您應用程式的已編譯檔案和資源的構件。這些構件對於將您的應用程式部署到 GitHub Pages 等網頁代管平台是必需的。</p><h3 id="產生構件" tabindex="-1">產生構件 <a class="header-anchor" href="#產生構件" aria-label="Permalink to &quot;產生構件&quot;">​</a></h3><p>為執行 <strong>wasmJsBrowserDistribution</strong> 任務建立一個執行組態：</p><ol><li><p>選取 <strong>Run | Edit Configurations</strong> 選單項目。</p></li><li><p>點擊加號按鈕並從下拉式清單中選擇 <strong>Gradle</strong>。</p></li><li><p>在 <strong>Tasks and arguments</strong> 欄位中，貼上此指令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wasmJsBrowserDistribution</span></span></code></pre></div></li><li><p>點擊 <strong>OK</strong>。</p></li></ol><p>現在，您可以使用此組態來執行任務：</p><p><img src="'+o+'" alt="執行 Wasm 發布任務" width="350"></p><p>任務完成後，您可以在 <code>composeApp/build/dist/wasmJs/productionExecutable</code> 目錄中找到產生的構件：</p><p><img src="'+i+'" alt="構件目錄" width="400"></p><h3 id="在-github-pages-上發布您的應用程式" tabindex="-1">在 GitHub Pages 上發布您的應用程式 <a class="header-anchor" href="#在-github-pages-上發布您的應用程式" aria-label="Permalink to &quot;在 GitHub Pages 上發布您的應用程式&quot;">​</a></h3><p>構件準備就緒後，您可以在網頁代管平台部署您的應用程式：</p><ol><li><p>將您的 <code>productionExecutable</code> 目錄的內容複製到您要建立網站的儲存庫中。</p></li><li><p>遵循 GitHub 關於<a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-your-site" target="_blank" rel="noreferrer">建立網站</a>的指示。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>將變更推送至 GitHub 後，您的網站可能需要長達 10 分鐘才能發布。</p></div></li><li><p>在瀏覽器中，導覽至您的 GitHub pages 網域。</p><p><img src="'+a+'" alt="導覽至 GitHub pages" width="650"></p><p>恭喜！您已在 GitHub pages 上發布您的構件。</p></li></ol><h3 id="偵錯您的網頁應用程式" tabindex="-1">偵錯您的網頁應用程式 <a class="header-anchor" href="#偵錯您的網頁應用程式" aria-label="Permalink to &quot;偵錯您的網頁應用程式&quot;">​</a></h3><p>您可以開箱即用地在瀏覽器中偵錯您的網頁應用程式，無需額外配置。要了解如何在瀏覽器中偵錯，請參閱 Kotlin 文件中的<a href="https://kotlinlang.org/docs/wasm-debugging.html#debug-in-your-browser" target="_blank" rel="noreferrer">在瀏覽器中偵錯</a>指南。</p>',39)]))}const k=t(n,[["render",s]]);export{f as __pageData,k as default};
