import{_ as h,C as o,c,o as g,j as i,G as e,ag as p,a,w as t}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-multiplatform.md","filePath":"ko/ktor/client-multiplatform.md","lastUpdated":1755457140000}'),m={name:"ko/ktor/client-multiplatform.md"};function u(y,n,E,_,f,v){const d=o("tldr"),k=o("link-summary"),s=o("code-block"),l=o("TabItem"),r=o("Tabs");return g(),c("div",null,[n[6]||(n[6]=i("h1",{id:"멀티플랫폼",tabindex:"-1"},[a("멀티플랫폼 "),i("a",{class:"header-anchor",href:"#멀티플랫폼","aria-label":'Permalink to "멀티플랫폼"'},"​")],-1)),e(d,null,{default:t(()=>n[0]||(n[0]=[i("p",null,[a(" 코드 예시: "),i("a",{href:"https://github.com/ktorio/ktor-samples/tree/main/client-mpp"},"client-mpp")],-1)])),_:1}),e(k,null,{default:t(()=>n[1]||(n[1]=[a(" Ktor 클라이언트는 멀티플랫폼 프로젝트에서 사용할 수 있으며, Android, JavaScript, Native 플랫폼을 지원합니다. ")])),_:1}),n[7]||(n[7]=p('<p><a href="./client-create-and-configure">Ktor HTTP 클라이언트</a>는 <a href="https://kotlinlang.org/docs/multiplatform.html" target="_blank" rel="noreferrer">멀티플랫폼 프로젝트</a>에서 사용할 수 있으며 다음 플랫폼을 지원합니다.</p><ul><li>JVM</li><li><a href="https://kotlinlang.org/docs/android-overview.html" target="_blank" rel="noreferrer">Android</a></li><li><a href="https://kotlinlang.org/docs/js-overview.html" target="_blank" rel="noreferrer">JavaScript</a></li><li><a href="https://kotlinlang.org/docs/native-overview.html" target="_blank" rel="noreferrer">Native</a></li></ul><h2 id="add-dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add-dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add-dependencies&quot;}&quot;">​</a></h2><p>프로젝트에서 Ktor HTTP 클라이언트를 사용하려면 최소 두 가지 의존성(클라이언트 의존성 및 <a href="./client-engines">엔진</a> 의존성)을 추가해야 합니다. 멀티플랫폼 프로젝트의 경우 다음과 같이 의존성을 추가해야 합니다.</p>',4)),i("ol",null,[i("li",null,[n[2]||(n[2]=i("p",null,[a("공통 코드에서 Ktor 클라이언트를 사용하려면 "),i("code",null,"build.gradle"),a(" 또는 "),i("code",null,"build.gradle.kts"),a(" 파일의 "),i("code",null,"commonMain"),a(" 소스 세트에 "),i("code",null,"ktor-client-core"),a(" 의존성을 추가합니다.")],-1)),e(r,{group:"languages"},{default:t(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[e(s,{lang:"Kotlin",code:`               val commonMain by getting {
                   dependencies {
                       implementation("io.ktor:ktor-client-core:$ktor_version")
                   }
               }`})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[e(s,{lang:"Groovy",code:`               commonMain {
                   dependencies {
                       implementation "io.ktor:ktor-client-core:$ktor_version"
                   }
               }`})]),_:1})]),_:1})]),i("li",null,[n[3]||(n[3]=i("p",null,[a("필요한 플랫폼에 대한 "),i("a",{href:"./client-engines#dependencies"},"엔진 의존성"),a("을 해당 소스 세트에 추가합니다. Android의 경우 "),i("code",null,"androidMain"),a(" 소스 세트에 "),i("a",{href:"./client-engines#android"},"Android"),a(" 엔진 의존성을 추가할 수 있습니다.")],-1)),e(r,{group:"languages"},{default:t(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[e(s,{lang:"Kotlin",code:`               val androidMain by getting {
                   dependencies {
                       implementation("io.ktor:ktor-client-android:$ktor_version")
                   }
               }`})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[e(s,{lang:"Groovy",code:`               androidMain {
                   dependencies {
                       implementation "io.ktor:ktor-client-android:$ktor_version"
                   }
               }`})]),_:1})]),_:1}),n[4]||(n[4]=i("p",null,[a("iOS의 경우 "),i("code",null,"iosMain"),a("에 "),i("a",{href:"./client-engines#darwin"},"Darwin"),a(" 엔진 의존성을 추가해야 합니다.")],-1)),e(r,{group:"languages"},{default:t(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[e(s,{lang:"Kotlin",code:`               val iosMain by getting {
                   dependencies {
                       implementation("io.ktor:ktor-client-darwin:$ktor_version")
                   }
               }`})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[e(s,{lang:"Groovy",code:`               iosMain {
                   dependencies {
                       implementation "io.ktor:ktor-client-darwin:$ktor_version"
                   }
               }`})]),_:1})]),_:1}),n[5]||(n[5]=i("p",null,[a("각 플랫폼에서 어떤 엔진이 지원되는지 알아보려면 "),i("a",{href:"./client-engines#dependencies"},"엔진 의존성 추가"),a("를 참조하세요.")],-1))])]),n[8]||(n[8]=p(`<h2 id="create-client" tabindex="-1">클라이언트 생성 <a class="header-anchor" href="#create-client" aria-label="Permalink to &quot;클라이언트 생성 {id=&quot;create-client&quot;}&quot;">​</a></h2><p>멀티플랫폼 프로젝트에서 클라이언트를 생성하려면 프로젝트의 <a href="https://kotlinlang.org/docs/mpp-discover-project.html#source-sets" target="_blank" rel="noreferrer">공통 코드</a>에서 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client/-http-client/index.html" target="_blank" rel="noreferrer">HttpClient</a> 생성자를 호출합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>이 코드 스니펫에서 <code>HttpClient</code> 생성자는 엔진을 매개변수로 받지 않습니다. 클라이언트는 <a href="#add-dependencies">빌드 스크립트에 추가된</a> 아티팩트에 따라 필요한 플랫폼에 맞춰 엔진을 선택합니다.</p><p>특정 플랫폼에 대한 엔진 구성을 조정해야 하는 경우, 해당 엔진 클래스를 <code>HttpClient</code> 생성자에 인수로 전달하고 <code>engine</code> 메서드를 사용하여 엔진을 구성합니다. 예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.android.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.net.Proxy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.net.InetSocketAddress</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Android) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: AndroidEngineConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connectTimeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        socketTimeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Proxy.Type.HTTP, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="./client-engines">클라이언트 엔진</a>에서 모든 엔진 유형을 구성하는 방법을 알아볼 수 있습니다.</p><h2 id="code-example" tabindex="-1">코드 예시 <a class="header-anchor" href="#code-example" aria-label="Permalink to &quot;코드 예시 {id=&quot;code-example&quot;}&quot;">​</a></h2><p><a href="https://github.com/ktorio/ktor-samples/tree/main/client-mpp" target="_blank" rel="noreferrer">mpp/client-mpp</a> 프로젝트는 멀티플랫폼 애플리케이션에서 Ktor 클라이언트를 사용하는 방법을 보여줍니다. 이 애플리케이션은 <code>Android</code>, <code>iOS</code>, <code>JavaScript</code>, <code>macosX64</code>와 같은 플랫폼에서 작동합니다.</p>`,9))])}const b=h(m,[["render",u]]);export{C as __pageData,b as default};
