import{_ as i,C as n,c as o,o as p,ag as r,G as l,j as e,a as s}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"Gradle 모범 사례","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/gradle-best-practices.md","filePath":"ko/kotlin/gradle-best-practices.md","lastUpdated":1754307826000}'),d={name:"ko/kotlin/gradle-best-practices.md"};function h(k,a,c,g,u,b){const t=n("TopicTitle");return p(),o("div",null,[a[0]||(a[0]=r("",15)),l(t,{id:"컨벤션-플러그인-사용",level:"3",title:"컨벤션 플러그인 사용",labelRef:"advanced"}),a[1]||(a[1]=r("",20)),l(t,{id:"모듈화-사용",level:"3",title:"모듈화 사용",labelRef:"advanced"}),a[2]||(a[2]=r("",4)),l(t,{id:"ci-cd-설정",level:"3",title:"CI/CD 설정",labelRef:"advanced"}),a[3]||(a[3]=e("p",null,[s("CI/CD 프로세스를 설정하여 증분 빌드 및 종속성 캐싱을 통해 빌드 시간을 크게 줄일 수 있습니다. 이러한 이점을 얻으려면 영구 스토리지를 추가하거나 원격 빌드 캐시를 사용하십시오. "),e("a",{href:"https://github.com/features/actions",target:"_blank",rel:"noreferrer"},"GitHub"),s("와 같은 일부 제공업체는 이 서비스를 거의 즉시 제공하므로 이 프로세스는 시간이 많이 걸릴 필요가 없습니다.")],-1)),a[4]||(a[4]=e("p",null,[e("a",{href:"https://cookbook.gradle.org/ci/",target:"_blank",rel:"noreferrer"},"지속적 통합 시스템에서 Gradle 사용"),s("에 대한 Gradle 커뮤니티 쿡북을 살펴보십시오.")],-1)),l(t,{id:"원격-빌드-캐시-사용",level:"3",title:"원격 빌드 캐시 사용",labelRef:"advanced"}),a[5]||(a[5]=e("p",null,[e("a",{href:"#use-local-build-cache"},"로컬 빌드 캐시"),s("와 마찬가지로, 원격 빌드 캐시는 다른 빌드에서 생성된 출력을 재사용하여 시간을 절약하는 데 도움이 됩니다. 마지막 빌드뿐만 아니라 누군가가 이미 실행한 이전 빌드의 태스크 출력을 검색할 수 있습니다.")],-1)),a[6]||(a[6]=e("p",null,"원격 빌드 캐시는 캐시 서버를 사용하여 빌드 간에 태스크 출력을 공유합니다. 예를 들어, CI/CD 서버가 있는 개발 환경에서 서버의 모든 빌드가 원격 캐시를 채웁니다. 새 기능을 시작하기 위해 메인 브랜치를 체크아웃할 때, 증분 빌드에 즉시 액세스할 수 있습니다.",-1)),a[7]||(a[7]=e("p",null,"느린 인터넷 연결은 캐시된 결과 전송이 로컬에서 태스크를 실행하는 것보다 느려질 수 있다는 점을 염두에 두십시오.",-1)),a[8]||(a[8]=e("p",null,[s("자세한 내용은 Gradle 문서의 "),e("a",{href:"https://docs.gradle.org/current/userguide/build_cache.html",target:"_blank",rel:"noreferrer"},"빌드 캐시"),s("를 참조하십시오.")],-1))])}const m=i(d,[["render",h]]);export{_ as __pageData,m as default};
