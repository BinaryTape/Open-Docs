import{_ as d,C as h,c as g,o as c,j as i,G as t,ag as p,a,w as n}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"客户端引擎","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/client-engines.md","filePath":"ktor/client-engines.md","lastUpdated":1755457140000}'),E={name:"ktor/client-engines.md"};function y(F,s,u,C,v,m){const r=h("show-structure"),o=h("link-summary"),e=h("code-block"),l=h("TabItem"),k=h("Tabs");return c(),g("div",null,[s[28]||(s[28]=i("h1",{id:"客户端引擎",tabindex:"-1"},[a("客户端引擎 "),i("a",{class:"header-anchor",href:"#客户端引擎","aria-label":'Permalink to "客户端引擎"'},"​")],-1)),t(r,{for:"chapter",depth:"2"}),t(o,null,{default:n(()=>s[0]||(s[0]=[a(" 了解处理网络请求的引擎。 ")])),_:1}),s[29]||(s[29]=p(`<p>Ktor HTTP 客户端可在不同平台使用，包括 JVM、<a href="https://kotlinlang.org/docs/android-overview.html" target="_blank" rel="noreferrer">Android</a>、<a href="https://kotlinlang.org/docs/js-overview.html" target="_blank" rel="noreferrer">JavaScript</a> 和 <a href="https://kotlinlang.org/docs/native-overview.html" target="_blank" rel="noreferrer">Native</a>。特定平台可能需要特定的引擎来处理网络请求。例如，JVM 应用程序可以使用 <code>Apache</code> 或 <code>Jetty</code>，Android 应用程序可以使用 <code>OkHttp</code> 或 <code>Android</code>，面向 Kotlin/Native 的桌面应用程序可以使用 <code>Curl</code>，等等。不同的引擎可能具有特定的特性并提供不同的配置选项。</p><h2 id="requirements" tabindex="-1">要求与限制 <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;要求与限制 {id=&quot;requirements&quot;}&quot;">​</a></h2><h3 id="platforms" tabindex="-1">支持的平台 <a class="header-anchor" href="#platforms" aria-label="Permalink to &quot;支持的平台 {id=&quot;platforms&quot;}&quot;">​</a></h3><p>下表列出了每个引擎支持的<a href="./client-supported-platforms">平台</a>：</p><table tabindex="0"><thead><tr><th>Engine</th><th>Platforms</th></tr></thead><tbody><tr><td>Apache</td><td><a href="#jvm">JVM</a></td></tr><tr><td>Java</td><td><a href="#jvm">JVM</a></td></tr><tr><td>Jetty</td><td><a href="#jvm">JVM</a></td></tr><tr><td>Android</td><td><a href="#jvm">JVM</a>, <a href="#jvm-android">Android</a></td></tr><tr><td>OkHttp</td><td><a href="#jvm">JVM</a>, <a href="#jvm-android">Android</a></td></tr><tr><td>Darwin</td><td><a href="#native">Native</a></td></tr><tr><td>WinHttp</td><td><a href="#native">Native</a></td></tr><tr><td>Curl</td><td><a href="#native">Native</a></td></tr><tr><td>CIO</td><td><a href="#jvm">JVM</a>, <a href="#jvm-android">Android</a>, <a href="#native">Native</a></td></tr><tr><td>Js</td><td><a href="#js">JavaScript</a></td></tr></tbody></table><h3 id="minimal-version" tabindex="-1">支持的 Android/Java 版本 <a class="header-anchor" href="#minimal-version" aria-label="Permalink to &quot;支持的 Android/Java 版本 {id=&quot;minimal-version&quot;}&quot;">​</a></h3><p>面向 JVM 或同时面向 JVM 和 Android 的客户端引擎支持以下 Android/Java 版本：</p><table tabindex="0"><thead><tr><th>Engine</th><th>Android version</th><th>Java version</th></tr></thead><tbody><tr><td>Apache</td><td></td><td>8+</td></tr><tr><td>Java</td><td></td><td>11+</td></tr><tr><td>Jetty</td><td></td><td>11+</td></tr><tr><td>CIO</td><td>7.0+ <sup>*</sup></td><td>8+</td></tr><tr><td>Android</td><td>1.x+</td><td>8+</td></tr><tr><td>OkHttp</td><td>5.0+</td><td>8+</td></tr></tbody></table><p><em>* 要在旧版 Android 上使用 CIO 引擎，你需要启用 <a href="https://developer.android.com/studio/write/java8-support" target="_blank" rel="noreferrer">Java 8 API desugaring</a>。</em></p><h3 id="limitations" tabindex="-1">限制 <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;限制 {id=&quot;limitations&quot;}&quot;">​</a></h3><p>下表显示了特定引擎是否支持 HTTP/2 和 <a href="./client-websockets">WebSockets</a>：</p><table tabindex="0"><thead><tr><th>Engine</th><th>HTTP/2</th><th>WebSockets</th></tr></thead><tbody><tr><td>Apache</td><td>✅️ <em>(for Apache5)</em></td><td>✖️</td></tr><tr><td>Java</td><td>✅</td><td>✅️</td></tr><tr><td>Jetty</td><td>✅</td><td>✖️</td></tr><tr><td>CIO</td><td>✖️</td><td>✅</td></tr><tr><td>Android</td><td>✖️</td><td>✖️</td></tr><tr><td>OkHttp</td><td>✅</td><td>✅</td></tr><tr><td>Js</td><td>✅</td><td>✅</td></tr><tr><td>Darwin</td><td>✅</td><td>✅</td></tr><tr><td>WinHttp</td><td>✅</td><td>✅</td></tr><tr><td>Curl</td><td>✅</td><td>✅</td></tr></tbody></table><p>你还需要考虑以下影响通用客户端配置和特定插件使用的限制：</p><ul><li>如果引擎支持 HTTP/2，你可以通过自定义引擎配置来启用它（请参见 <a href="#java">Java</a> 引擎示例）。</li><li>要在 Ktor 客户端中配置 <a href="./client-ssl">SSL</a>，你需要自定义所选引擎的配置。</li><li>一些引擎不支持<a href="./client-proxy#supported_engines">代理</a>。</li><li><a href="./client-logging">Logging</a> 插件为不同平台提供不同的日志记录器类型。</li><li><a href="./client-timeout#limitations">HttpTimeout</a> 插件对特定引擎有一些限制。</li></ul><h2 id="dependencies" tabindex="-1">添加引擎依赖项 <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;添加引擎依赖项 {id=&quot;dependencies&quot;}&quot;">​</a></h2><p>除了 <a href="./client-dependencies">ktor-client-core</a> artifact 之外，Ktor 客户端还需要为每个引擎添加特定的依赖项。对于每个支持的平台，你可以在相应部分查看可用的引擎和所需的依赖项：</p><ul><li><a href="#jvm">JVM</a></li><li><a href="#jvm-android">JVM 和 Android</a></li><li><a href="#js">JavaScript</a></li><li><a href="#native">Native</a></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>对于不同的引擎，Ktor 提供带有 <code>-jvm</code> 或 <code>-js</code> 等后缀的平台特有构件，例如 <code>ktor-client-cio-jvm</code>。Gradle 会解析适用于给定平台的构件，而 Maven 不支持此功能。这意味着对于 Maven，你需要手动添加平台特有的后缀。</p></div><h2 id="create" tabindex="-1">创建带指定引擎的客户端 <a class="header-anchor" href="#create" aria-label="Permalink to &quot;创建带指定引擎的客户端 {id=&quot;create&quot;}&quot;">​</a></h2><p>要创建带特定引擎的 HTTP 客户端，请将引擎类作为实参传递给 <code>HttpClient</code> 构造函数。例如，你可以如下创建带 <code>CIO</code> 引擎的客户端：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO)</span></span></code></pre></div><h3 id="default" tabindex="-1">默认引擎 <a class="header-anchor" href="#default" aria-label="Permalink to &quot;默认引擎 {id=&quot;default&quot;}&quot;">​</a></h3><p>如果你不带实参调用 <code>HttpClient</code> 构造函数，客户端将根据<a href="#dependencies">构建脚本中添加的</a>构件自动选择一个引擎。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>这对于多平台项目非常有用。例如，对于同时面向 <a href="./client-create-multiplatform-application">Android 和 iOS</a> 的项目，你可以将 <a href="#jvm-android">Android</a> 依赖项添加到 <code>androidMain</code> 源代码集，并将 <a href="#darwin">Darwin</a> 依赖项添加到 <code>iosMain</code> 源代码集。必要的依赖项将在编译期选择。</p><h2 id="configure" tabindex="-1">配置引擎 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置引擎 {id=&quot;configure&quot;}&quot;">​</a></h2><p>你可以使用 <code>engine</code> 方法配置引擎。所有引擎共享 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.engine/-http-client-engine-config/index.html" target="_blank" rel="noreferrer">HttpClientEngineConfig</a> 公开的多个通用属性，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: HttpClientEngineConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        threadsCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pipelining </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要了解如何配置特定引擎，请参见下面的相应部分。</p><h2 id="jvm" tabindex="-1">JVM <a class="header-anchor" href="#jvm" aria-label="Permalink to &quot;JVM {id=&quot;jvm&quot;}&quot;">​</a></h2><p>在本节中，我们将介绍适用于 JVM 的引擎。</p><h3 id="apache" tabindex="-1">Apache <a class="header-anchor" href="#apache" aria-label="Permalink to &quot;Apache {id=&quot;apache&quot;}&quot;">​</a></h3><p>Apache 引擎支持 HTTP/1.1 并提供多种配置选项。如果你需要 HTTP/2 支持，也可以使用 <code>Apache5</code> 引擎，它默认启用 HTTP/2。</p>`,33)),i("ol",null,[i("li",null,[s[1]||(s[1]=i("p",null,[a("添加 "),i("code",null,"ktor-client-apache5"),a(" 或 "),i("code",null,"ktor-client-apache"),a(" 依赖项：")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-apache5:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-apache5:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-apache5-jvm</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),i("li",null,[s[4]||(s[4]=i("p",null,[a("将 "),i("code",null,"Apache5"),a("/"),i("code",null,"Apache"),a(" 类作为实参传递给 "),i("code",null,"HttpClient"),a(" 构造函数：")],-1)),t(k,{group:"apache_version"},{default:n(()=>[t(l,{title:"Apache5","group-key":"5"},{default:n(()=>s[2]||(s[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.engine.apache5."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Apache5)")])])])],-1)])),_:1}),t(l,{title:"Apache","group-key":"4"},{default:n(()=>s[3]||(s[3]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.engine.apache."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Apache)")])])])],-1)])),_:1})]),_:1})]),i("li",null,[s[7]||(s[7]=i("p",null,[a("要配置引擎，请将 "),i("code",null,"Apache5EngineConfig"),a("/"),i("code",null,"ApacheEngineConfig"),a(" 公开的设置传递给 "),i("code",null,"engine"),a(" 方法：")],-1)),t(k,{group:"apache_version"},{default:n(()=>[t(l,{title:"Apache5","group-key":"5"},{default:n(()=>s[5]||(s[5]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.engine.apache5."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," org.apache.hc.core5.http."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Apache5) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    engine"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // this: Apache5EngineConfig")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        followRedirects "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        socketTimeout "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 10_000")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        connectTimeout "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 10_000")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        connectionRequestTimeout "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 20_000")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        customizeClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            // this: HttpAsyncClientBuilder")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            setProxy"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"HttpHost"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"127.0.0.1"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"8080"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            // ...")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        customizeRequest"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            // this: RequestConfig.Builder")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Apache","group-key":"4"},{default:n(()=>s[6]||(s[6]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.engine.apache."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," org.apache.http.HttpHost")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Apache) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    engine"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // this: ApacheEngineConfig")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        followRedirects "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        socketTimeout "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 10_000")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        connectTimeout "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 10_000")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        connectionRequestTimeout "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 20_000")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        customizeClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            // this: HttpAsyncClientBuilder")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            setProxy"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"HttpHost"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"127.0.0.1"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"8080"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            setMaxConnTotal"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1000"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            setMaxConnPerRoute"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"100"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            // ...")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        customizeRequest"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            // this: RequestConfig.Builder")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})])]),s[30]||(s[30]=i("h3",{id:"java",tabindex:"-1"},[a("Java "),i("a",{class:"header-anchor",href:"#java","aria-label":'Permalink to "Java {id="java"}"'},"​")],-1)),s[31]||(s[31]=i("p",null,[a("Java 引擎使用 Java 11 中引入的 "),i("a",{href:"https://openjdk.java.net/groups/net/httpclient/intro.html",target:"_blank",rel:"noreferrer"},"Java HTTP Client"),a("。要使用它，请按照以下步骤操作：")],-1)),i("ol",null,[i("li",null,[s[8]||(s[8]=i("p",null,[a("添加 "),i("code",null,"ktor-client-java"),a(" 依赖项：")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-java:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-java:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-java-jvm</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[9]||(s[9]=p(`<li><p>将 <a href="https://api.ktor.io/ktor-client/ktor-client-java/io.ktor.client.engine.java/-java/index.html" target="_blank" rel="noreferrer">Java</a> 类作为实参传递给 <code>HttpClient</code> 构造函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.java.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Java)</span></span></code></pre></div></li><li><p>要配置引擎，请将 <a href="https://api.ktor.io/ktor-client/ktor-client-java/io.ktor.client.engine.java/-java-http-config/index.html" target="_blank" rel="noreferrer">JavaHttpConfig</a> 公开的设置传递给 <code>engine</code> 方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.java.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Java) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: JavaHttpConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        threadsCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pipelining </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProxyBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://proxy-server.com/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        protocolVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.net.http.HttpClient.Version.HTTP_2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,2))]),s[32]||(s[32]=i("h3",{id:"jetty",tabindex:"-1"},[a("Jetty "),i("a",{class:"header-anchor",href:"#jetty","aria-label":'Permalink to "Jetty {id="jetty"}"'},"​")],-1)),s[33]||(s[33]=i("p",null,"Jetty 引擎仅支持 HTTP/2，可按以下方式配置：",-1)),i("ol",null,[i("li",null,[s[10]||(s[10]=i("p",null,[a("添加 "),i("code",null,"ktor-client-jetty-jakarta"),a(" 依赖项：")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-jetty-jakarta:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-jetty-jakarta:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-jetty-jakarta-jvm</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[11]||(s[11]=p(`<li><p>将 <a href="https://api.ktor.io/ktor-client/ktor-client-jetty-jakarta/io.ktor.client.engine.jetty.jakarta/-jetty/index.html" target="_blank" rel="noreferrer">Jetty</a> 类作为实参传递给 <code>HttpClient</code> 构造函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.jetty.jakarta.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Jetty)</span></span></code></pre></div></li><li><p>要配置引擎，请将 <a href="https://api.ktor.io/ktor-client/ktor-client-jetty-jakarta/io.ktor.client.engine.jetty.jakarta/-jetty-engine-config/index.html" target="_blank" rel="noreferrer">JettyEngineConfig</a> 公开的设置传递给 <code>engine</code> 方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.jetty.jakarta.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.eclipse.jetty.util.ssl.SslContextFactory</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Jetty) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: JettyEngineConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sslContextFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SslContextFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clientCacheSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,2))]),s[34]||(s[34]=i("h2",{id:"jvm-android",tabindex:"-1"},[a("JVM 和 Android "),i("a",{class:"header-anchor",href:"#jvm-android","aria-label":'Permalink to "JVM 和 Android {id="jvm-android"}"'},"​")],-1)),s[35]||(s[35]=i("p",null,"在本节中，我们将介绍适用于 JVM/Android 的引擎及其配置。",-1)),s[36]||(s[36]=i("h3",{id:"android",tabindex:"-1"},[a("Android "),i("a",{class:"header-anchor",href:"#android","aria-label":'Permalink to "Android {id="android"}"'},"​")],-1)),s[37]||(s[37]=i("p",null,"Android 引擎面向 Android，可按以下方式配置：",-1)),i("ol",null,[i("li",null,[s[12]||(s[12]=i("p",null,[a("添加 "),i("code",null,"ktor-client-android"),a(" 依赖项：")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-android:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-android:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-android-jvm</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[13]||(s[13]=p(`<li><p>将 <a href="https://api.ktor.io/ktor-client/ktor-client-android/io.ktor.client.engine.android/-android/index.html" target="_blank" rel="noreferrer">Android</a> 类作为实参传递给 <code>HttpClient</code> 构造函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.android.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Android)</span></span></code></pre></div></li><li><p>要配置引擎，请将 <a href="https://api.ktor.io/ktor-client/ktor-client-android/io.ktor.client.engine.android/-android-engine-config/index.html" target="_blank" rel="noreferrer">AndroidEngineConfig</a> 公开的设置传递给 <code>engine</code> 方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.android.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.net.Proxy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.net.InetSocketAddress</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Android) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: AndroidEngineConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connectTimeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        socketTimeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Proxy.Type.HTTP, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,2))]),s[38]||(s[38]=i("h3",{id:"okhttp",tabindex:"-1"},[a("OkHttp "),i("a",{class:"header-anchor",href:"#okhttp","aria-label":'Permalink to "OkHttp {id="okhttp"}"'},"​")],-1)),s[39]||(s[39]=i("p",null,"基于 OkHttp 的 OkHttp 引擎可按以下方式配置：",-1)),i("ol",null,[i("li",null,[s[14]||(s[14]=i("p",null,[a("添加 "),i("code",null,"ktor-client-okhttp"),a(" 依赖项：")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-okhttp:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-okhttp:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-okhttp-jvm</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[15]||(s[15]=p(`<li><p>将 <a href="https://api.ktor.io/ktor-client/ktor-client-okhttp/io.ktor.client.engine.okhttp/-ok-http/index.html" target="_blank" rel="noreferrer">OkHttp</a> 类作为实参传递给 <code>HttpClient</code> 构造函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.okhttp.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OkHttp)</span></span></code></pre></div></li><li><p>要配置引擎，请将 <a href="https://api.ktor.io/ktor-client/ktor-client-okhttp/io.ktor.client.engine.okhttp/-ok-http-config/index.html" target="_blank" rel="noreferrer">OkHttpConfig</a> 公开的设置传递给 <code>engine</code> 方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.okhttp.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OkHttp) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: OkHttpConfig</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // this: OkHttpClient.Builder</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            followRedirects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(interceptor)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addNetworkInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(interceptor)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        preconfigured </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> okHttpClientInstance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,2))]),s[40]||(s[40]=p('<h2 id="native" tabindex="-1">Native <a class="header-anchor" href="#native" aria-label="Permalink to &quot;Native {id=&quot;native&quot;}&quot;">​</a></h2><p>在本节中，我们将介绍如何配置面向 Kotlin/Native 的引擎。</p><blockquote><p>在 Kotlin/Native 项目中使用 Ktor 需要新的内存管理器，该管理器从 Kotlin 1.7.20 开始默认启用。</p></blockquote><p id="newmm-note"></p><h3 id="darwin" tabindex="-1">Darwin <a class="header-anchor" href="#darwin" aria-label="Permalink to &quot;Darwin {id=&quot;darwin&quot;}&quot;">​</a></h3><p>Darwin 引擎面向基于 Darwin 的操作系统（例如 macOS、iOS、tvOS 等），并在底层使用 <a href="https://developer.apple.com/documentation/foundation/nsurlsession" target="_blank" rel="noreferrer">NSURLSession</a>。要使用 Darwin 引擎，请按照以下步骤操作：</p>',6)),i("ol",null,[i("li",null,[s[16]||(s[16]=i("p",null,[a("添加 "),i("code",null,"ktor-client-darwin"),a(" 依赖项：")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-darwin:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-darwin:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-darwin-macosx64</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[17]||(s[17]=p(`<li><p>将 <code>Darwin</code> 类作为实参传递给 <code>HttpClient</code> 构造函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.darwin.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Darwin)</span></span></code></pre></div></li><li><p>要配置引擎，请将 <a href="https://api.ktor.io/ktor-client/ktor-client-darwin/io.ktor.client.engine.darwin/-darwin-client-engine-config/index.html" target="_blank" rel="noreferrer">DarwinClientEngineConfig</a> 公开的设置传递给 <code>engine</code> 函数。例如，你可以使用 <code>configureRequest</code> 函数访问 <code>NSMutableURLRequest</code>，或使用 <code>configureSession</code> 来自定义会话配置。下面的代码片段展示了如何使用 <code>configureRequest</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Darwin) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        configureRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            setAllowsCellularAccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以在此处找到完整示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-engine-darwin" target="_blank" rel="noreferrer">client-engine-darwin</a>。</p></li>`,2))]),s[41]||(s[41]=i("h3",{id:"winhttp",tabindex:"-1"},[a("WinHttp "),i("a",{class:"header-anchor",href:"#winhttp","aria-label":'Permalink to "WinHttp {id="winhttp"}"'},"​")],-1)),s[42]||(s[42]=i("p",null,"WinHttp 引擎面向基于 Windows 的操作系统。要使用 WinHttp 引擎，请按照以下步骤操作：",-1)),i("ol",null,[i("li",null,[s[18]||(s[18]=i("p",null,[a("添加 "),i("code",null,"ktor-client-winhttp"),a(" 依赖项：")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-winhttp:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-winhttp:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-winhttp-mingwx64</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[19]||(s[19]=p(`<li><p>将 <code>WinHttp</code> 类作为实参传递给 <code>HttpClient</code> 构造函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.winhttp.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WinHttp)</span></span></code></pre></div></li><li><p>要配置引擎，请将 <a href="https://api.ktor.io/ktor-client/ktor-client-winhttp/io.ktor.client.engine.winhttp/-winhttp-client-engine-config/index.html" target="_blank" rel="noreferrer">WinHttpClientEngineConfig</a> 公开的设置传递给 <code>engine</code> 函数。例如，你可以使用 <code>protocolVersion</code> 属性更改 HTTP 版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WinHttp) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        protocolVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpProtocolVersion.HTTP_1_1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以在此处找到完整示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-engine-winhttp" target="_blank" rel="noreferrer">client-engine-winhttp</a>。</p></li>`,2))]),s[43]||(s[43]=p('<h3 id="curl" tabindex="-1">Curl <a class="header-anchor" href="#curl" aria-label="Permalink to &quot;Curl {id=&quot;curl&quot;}&quot;">​</a></h3><p>对于桌面平台，Ktor 还提供了 Curl 引擎。此引擎支持以下平台：<code>linuxX64</code>、<code>linuxArm64</code>、<code>macosX64</code>、<code>macosArm64</code>、<code>mingwX64</code>。要使用 Curl 引擎，请按照以下步骤操作：</p>',2)),i("ol",null,[s[21]||(s[21]=p('<li><p>安装 <code>libcurl</code> 库。</p><blockquote><p>在 Linux 上，你必须安装 <code>libcurl</code> 的 <code>gnutls</code> 版本。 要在 Ubuntu 上安装此版本，你可以运行：</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libcurl4-gnutls-dev</span></span></code></pre></div><blockquote><p>在 Windows 上，你可能需要考虑 <a href="./FAQ#native-curl">MinGW/MSYS2</a> <code>curl</code> 二进制文件。</p></blockquote></li>',1)),i("li",null,[s[20]||(s[20]=i("p",null,[a("添加 "),i("code",null,"ktor-client-curl"),a(" 依赖项：")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-curl:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-curl:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-curl-macosx64</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[22]||(s[22]=p(`<li><p>将 <code>Curl</code> 类作为实参传递给 <code>HttpClient</code> 构造函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.curl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Curl)</span></span></code></pre></div></li><li><p>要配置引擎，请将 <code>CurlClientEngineConfig</code> 公开的设置传递给 <code>engine</code> 方法。下面的代码片段展示了如何出于测试目的禁用 SSL 验证：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Curl) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sslVerify </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以在此处找到完整示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-engine-curl" target="_blank" rel="noreferrer">client-engine-curl</a>。</p></li>`,2))]),s[44]||(s[44]=i("h2",{id:"jvm-android-native",tabindex:"-1"},[a("JVM、Android 和 Native "),i("a",{class:"header-anchor",href:"#jvm-android-native","aria-label":'Permalink to "JVM、Android 和 Native {id="jvm-android-native"}"'},"​")],-1)),s[45]||(s[45]=i("h3",{id:"cio",tabindex:"-1"},[a("CIO "),i("a",{class:"header-anchor",href:"#cio","aria-label":'Permalink to "CIO {id="cio"}"'},"​")],-1)),s[46]||(s[46]=i("p",null,"CIO 是一个完全异步的基于协程的引擎，可在 JVM、Android 和 Native 平台使用。目前它仅支持 HTTP/1.x。要使用它，请按照以下步骤操作：",-1)),i("ol",null,[i("li",null,[s[23]||(s[23]=i("p",null,[a("添加 "),i("code",null,"ktor-client-cio"),a(" 依赖项：")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-cio:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-cio:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-cio-jvm</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[24]||(s[24]=p(`<li><p>将 <a href="https://api.ktor.io/ktor-client/ktor-client-cio/io.ktor.client.engine.cio/-c-i-o/index.html" target="_blank" rel="noreferrer">CIO</a> 类作为实参传递给 <code>HttpClient</code> 构造函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO)</span></span></code></pre></div></li><li><p>要配置引擎，请将 <a href="https://api.ktor.io/ktor-client/ktor-client-cio/io.ktor.client.engine.cio/-c-i-o-engine-config/index.html" target="_blank" rel="noreferrer">CIOEngineConfig</a> 公开的设置传递给 <code>engine</code> 方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.network.tls.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: CIOEngineConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        maxConnectionsCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        endpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // this: EndpointConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            maxConnectionsPerRoute </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            pipelineMaxSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            keepAliveTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connectTimeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connectAttempts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        https</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // this: TLSConfigBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            serverName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;api.ktor.io&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            cipherSuites </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CIOCipherSuites.SupportedSuites</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            trustManager </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCustomTrustManager</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            random </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySecureRandom</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            addKeyStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myKeyStore, myKeyStorePassword)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,2))]),s[47]||(s[47]=i("h2",{id:"js",tabindex:"-1"},[a("JavaScript "),i("a",{class:"header-anchor",href:"#js","aria-label":'Permalink to "JavaScript {id="js"}"'},"​")],-1)),s[48]||(s[48]=i("p",null,[a("Js 引擎可用于 "),i("a",{href:"https://kotlinlang.org/docs/js-overview.html",target:"_blank",rel:"noreferrer"},"JavaScript 项目"),a("。该引擎对浏览器应用程序使用 "),i("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",target:"_blank",rel:"noreferrer"},"fetch API"),a("，对 Node.js 使用 "),i("code",null,"node-fetch"),a("。要使用它，请按照以下步骤操作：")],-1)),i("ol",null,[i("li",null,[s[25]||(s[25]=i("p",null,[a("添加 "),i("code",null,"ktor-client-js"),a(" 依赖项：")],-1)),s[26]||(s[26]=i("var",{name:"target",value:""},null,-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-js:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-js:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-js-macosx64</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[27]||(s[27]=p(`<li><p>将 <code>Js</code> 类作为实参传递给 <code>HttpClient</code> 构造函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.js.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Js)</span></span></code></pre></div><p>你也可以调用 <code>JsClient</code> 函数来获取 <code>Js</code> 引擎单例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.js.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li>`,1))]),s[49]||(s[49]=p(`<p>你可以在此处找到完整示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-engine-js" target="_blank" rel="noreferrer">client-engine-js</a>。</p><h2 id="mpp-config" tabindex="-1">示例：如何在多平台移动项目配置引擎 <a class="header-anchor" href="#mpp-config" aria-label="Permalink to &quot;示例：如何在多平台移动项目配置引擎 {id=&quot;mpp-config&quot;}&quot;">​</a></h2><p>要在多平台移动项目配置引擎特有的选项，你可以使用 <a href="https://kotlinlang.org/docs/multiplatform-mobile-connect-to-platform-specific-apis.html" target="_blank" rel="noreferrer">expect/actual 声明</a>。让我们使用在<a href="./client-create-multiplatform-application">创建跨平台移动应用程序</a>教程中创建的项目来演示如何实现这一点：</p><ol><li><p>打开 <code>shared/src/commonMain/kotlin/com/example/kmmktor/Platform.kt</code> 文件，并添加一个顶层 <code>httpClient</code> 函数，该函数接受客户端配置并返回 <code>HttpClient</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> httpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpClientConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpClient</span></span></code></pre></div></li><li><p>打开 <code>shared/src/androidMain/kotlin/com/example/kmmktor/Platform.kt</code>，并添加 Android 模块的 <code>httpClient</code> 函数的 actual 声明：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.okhttp.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.util.concurrent.TimeUnit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> httpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpClientConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OkHttp) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         retryOnConnectionFailure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         connectTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此示例展示了如何配置 <a href="#okhttp">OkHttp</a> 引擎，但你也可以使用其他<a href="#jvm-android">支持 Android</a> 的引擎。</p></li><li><p>打开 <code>shared/src/iosMain/kotlin/com/example/kmmktor/Platform.kt</code>，并添加 iOS 模块的 <code>httpClient</code> 函数的 actual 声明：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.darwin.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> httpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpClientConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Darwin) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      configureRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         setAllowsCellularAccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>最后，打开 <code>shared/src/commonMain/kotlin/com/example/kmmktor/Greeting.kt</code>，并将 <code>HttpClient()</code> 构造函数替换为 <code>httpClient</code> 函数调用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> httpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ol>`,4))])}const b=d(E,[["render",y]]);export{f as __pageData,b as default};
