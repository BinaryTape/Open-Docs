import{_ as r}from"./chunks/k2-mode.BqpKbQZk.js";import{_ as o}from"./chunks/compiler-options-levels.DqXOqvYF.js";import{_ as d,C as h,c as E,o as c,ag as e,G as n,w as l,j as s,a as i}from"./chunks/framework.Bksy39di.js";const D=JSON.parse('{"title":"Kotlin 2.0.0 有哪些新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew20.md","filePath":"zh-Hant/kotlin/whatsnew20.md","lastUpdated":1755514048000}'),g={name:"zh-Hant/kotlin/whatsnew20.md"};function y(u,a,F,m,b,C){const k=h("YouTubeVideo"),t=h("tab"),p=h("tabs");return c(),E("div",null,[a[6]||(a[6]=e('<h1 id="kotlin-2-0-0-有哪些新功能" tabindex="-1">Kotlin 2.0.0 有哪些新功能 <a class="header-anchor" href="#kotlin-2-0-0-有哪些新功能" aria-label="Permalink to &quot;Kotlin 2.0.0 有哪些新功能&quot;">​</a></h1><p><em><a href="/zh-Hant/kotlin/releases#release-details">發佈日期：2024 年 5 月 21 日</a></em></p><p>Kotlin 2.0.0 版本已推出，且 <a href="#kotlin-k2-compiler">新的 Kotlin K2 編譯器</a> 已穩定！此外，還有以下重點：</p><ul><li><a href="#new-compose-compiler-gradle-plugin">新的 Compose 編譯器 Gradle 外掛程式</a></li><li><a href="#generation-of-lambda-functions-using-invokedynamic">使用 invokedynamic 生成 Lambda 函式</a></li><li><a href="#the-kotlinx-metadata-jvm-library-is-stable">kotlinx-metadata-jvm 函式庫現已穩定</a></li><li><a href="#monitoring-gc-performance-with-signposts-on-apple-platforms">使用 Apple 平台上的標記監控 Kotlin/Native 中的 GC 效能</a></li><li><a href="#resolving-conflicts-with-objective-c-methods">解決 Kotlin/Native 與 Objective-C 方法的衝突</a></li><li><a href="#support-for-named-export">Kotlin/Wasm 支援命名匯出</a></li><li><a href="#support-for-unsigned-primitive-types-in-functions-with-jsexport">Kotlin/Wasm 中 @JsExport 函式對無符號基本類型的支援</a></li><li><a href="#optimized-production-builds-by-default-using-binaryen">預設使用 Binaryen 優化生產建置</a></li><li><a href="#new-gradle-dsl-for-compiler-options-in-multiplatform-projects">多平台專案中編譯器選項的新 Gradle DSL</a></li><li><a href="#stable-replacement-of-the-enum-class-values-generic-function">enum 類別值泛型函式的穩定取代</a></li><li><a href="#stable-autocloseable-interface">穩定的 AutoCloseable 介面</a></li></ul><p>Kotlin 2.0 是 JetBrains 團隊的一個重要里程碑。此版本是 KotlinConf 2024 的中心。請觀看開幕主題演講，我們在其中宣布了令人興奮的更新並討論了 Kotlin 語言的最新工作：</p>',5)),n(k,{src:"https://www.youtube.com/v/Ar73Axsz2YA",title:"KotlinConf'24 - Keynote"}),a[7]||(a[7]=e('<h2 id="ide-支援" tabindex="-1">IDE 支援 <a class="header-anchor" href="#ide-支援" aria-label="Permalink to &quot;IDE 支援&quot;">​</a></h2><p>支援 Kotlin 2.0.0 的 Kotlin 外掛程式已捆綁在最新的 IntelliJ IDEA 和 Android Studio 中。 您不需要更新 IDE 中的 Kotlin 外掛程式。 您只需在建置指令碼中將 <a href="/zh-Hant/kotlin/releases#update-to-a-new-kotlin-version">Kotlin 版本更改</a> 為 Kotlin 2.0.0 即可。</p><ul><li>有關 IntelliJ IDEA 對 Kotlin K2 編譯器支援的詳細資訊，請參閱 <a href="#support-in-ides">IDE 支援</a>。</li><li>有關 IntelliJ IDEA 對 Kotlin 支援的更多詳細資訊，請參閱 <a href="/zh-Hant/kotlin/releases#ide-support">Kotlin 版本</a>。</li></ul><h2 id="kotlin-k2-編譯器" tabindex="-1">Kotlin K2 編譯器 <a class="header-anchor" href="#kotlin-k2-編譯器" aria-label="Permalink to &quot;Kotlin K2 編譯器&quot;">​</a></h2><p>K2 編譯器之路漫長，但現在 JetBrains 團隊終於準備好宣布其穩定性。 在 Kotlin 2.0.0 中，新的 Kotlin K2 編譯器預設啟用，並且對於所有目標平台（JVM、Native、Wasm 和 JS）都已 <a href="/zh-Hant/kotlin/components-stability">穩定</a>。新的編譯器帶來了主要的效能改進，加速了新語言功能的開發，統一了 Kotlin 支援的所有平台，並為多平台專案提供了更好的架構。</p><p>JetBrains 團隊透過成功編譯來自選定使用者和內部專案的 1000 萬行程式碼，確保了新編譯器的品質。18,000 名開發人員參與了穩定化過程，在總計 80,000 個專案中測試了新的 K2 編譯器，並報告了他們發現的任何問題。</p><p>為了讓遷移到新編譯器的過程盡可能順暢，我們建立了 <a href="/zh-Hant/kotlin/k2-compiler-migration-guide">K2 編譯器遷移指南</a>。 本指南解釋了編譯器的許多優點，強調了您可能會遇到的任何變更，並描述了在必要時如何回溯到舊版本。</p><p>在 <a href="https://blog.jetbrains.com/kotlin/2024/04/k2-compiler-performance-benchmarks-and-how-to-measure-them-on-your-projects/" target="_blank" rel="noreferrer">部落格文章</a> 中， 我們探討了 K2 編譯器在不同專案中的效能。如果您想了解 K2 編譯器的實際效能數據，並找到如何從您自己的專案中收集效能基準測試的說明，請查看該文章。</p><p>您還可以觀看 KotlinConf 2024 的這場演講，其中首席語言設計師 Michail Zarečenskij 討論了 Kotlin 和 K2 編譯器中的功能演進：</p>',9)),n(k,{src:"https://www.youtube.com/v/tAGJ5zJXJ7w",title:"Kotlin Language Features in 2.0 and Beyond"}),a[8]||(a[8]=e(`<h3 id="當前-k2-編譯器限制" tabindex="-1">當前 K2 編譯器限制 <a class="header-anchor" href="#當前-k2-編譯器限制" aria-label="Permalink to &quot;當前 K2 編譯器限制&quot;">​</a></h3><p>在您的 Gradle 專案中啟用 K2 會帶來某些限制，這些限制可能會影響在以下情況中使用 Gradle 8.3 以下版本的專案：</p><ul><li>編譯來自 <code>buildSrc</code> 的原始碼。</li><li>編譯包含建置中的 Gradle 外掛程式。</li><li>如果其他 Gradle 外掛程式在 Gradle 8.3 以下版本的專案中使用，則編譯它們。</li><li>建置 Gradle 外掛程式依賴項。</li></ul><p>如果您遇到上述任何問題，可以採取以下步驟來解決：</p><ul><li><p>為 <code>buildSrc</code>、任何 Gradle 外掛程式及其依賴項設定語言版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        apiVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您為特定任務配置語言和 API 版本，這些值將覆寫 <code>compilerOptions</code> 擴充設定的值。在這種情況下，語言和 API 版本不應高於 1.9。</p></div></li><li><p>將專案中的 Gradle 版本更新到 8.3 或更高版本。</p></li></ul><h3 id="智慧型轉型改進" tabindex="-1">智慧型轉型改進 <a class="header-anchor" href="#智慧型轉型改進" aria-label="Permalink to &quot;智慧型轉型改進&quot;">​</a></h3><p>Kotlin 編譯器可以在特定情況下自動將物件轉型為某種類型，省去了您明確轉型的麻煩。這稱為 <a href="/zh-Hant/kotlin/typecasts#smart-casts">智慧型轉型</a>。 Kotlin K2 編譯器現在在比以前更多的場景中執行智慧型轉型。</p><p>在 Kotlin 2.0.0 中，我們在以下領域對智慧型轉型進行了改進：</p><ul><li><a href="#local-variables-and-further-scopes">區域變數和更多範圍</a></li><li><a href="#type-checks-with-logical-or-operator">使用邏輯 <code>or</code> 運算子進行類型檢查</a></li><li><a href="#inline-functions">內聯函式</a></li><li><a href="#properties-with-function-types">具函式類型的屬性</a></li><li><a href="#exception-handling">例外處理</a></li><li><a href="#increment-and-decrement-operators">遞增和遞減運算子</a></li></ul><h4 id="區域變數和更多範圍" tabindex="-1">區域變數和更多範圍 <a class="header-anchor" href="#區域變數和更多範圍" aria-label="Permalink to &quot;區域變數和更多範圍&quot;">​</a></h4><p>以前，如果變數在 <code>if</code> 條件中被評估為非 <code>null</code>，則該變數將進行智慧型轉型。 有關此變數的資訊將在 <code>if</code> 區塊的範圍內進一步共享。</p><p>但是，如果您在 <code>if</code> 條件 <strong>之外</strong> 宣告變數，則 <code>if</code> 條件中將沒有有關該變數的資訊，因此無法進行智慧型轉型。這種行為也出現在 <code>when</code> 表達式和 <code>while</code> 迴圈中。</p><p>從 Kotlin 2.0.0 開始，如果您在使用 <code>if</code>、<code>when</code> 或 <code>while</code> 條件之前宣告變數，那麼編譯器收集到的任何有關該變數的資訊都將在相應的區塊中可用於智慧型轉型。</p><p>當您想將布林條件提取到變數中時，這會很有用。然後，您可以為變數賦予有意義的名稱，這將提高您的程式碼可讀性，並使其在程式碼中可以重複使用。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> purr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Purr purr&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> petAnimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animal: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isCat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cat</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isCat) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，編譯器可以存取</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 有關 isCat 的資訊，因此它知道</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // animal 已智慧型轉型為 Cat 類型。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 因此，可以呼叫 purr() 函式。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，編譯器不知道</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 智慧型轉型，因此呼叫 purr()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 函式會觸發錯誤。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        animal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">purr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kitty </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    petAnimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kitty)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Purr purr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="使用邏輯或運算子進行類型檢查" tabindex="-1">使用邏輯或運算子進行類型檢查 <a class="header-anchor" href="#使用邏輯或運算子進行類型檢查" aria-label="Permalink to &quot;使用邏輯或運算子進行類型檢查&quot;">​</a></h4><p>在 Kotlin 2.0.0 中，如果您將物件的類型檢查與 <code>or</code> 運算子 (<code>||</code>) 結合使用，則會智慧型轉型為它們最接近的共同超類型。在此變更之前，智慧型轉型始終會轉型為 <code>Any</code> 類型。</p><p>在這種情況下，您仍然必須在之後手動檢查物件類型，才能存取其任何屬性或呼叫其函式。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Ok</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Postponed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Declined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signalCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signalStatus: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (signalStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Postponed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signalStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Declined) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // signalStatus 被智慧型轉型為共同超類型 Status</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        signalStatus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 之前，signalStatus 被智慧型轉型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 為 Any 類型，因此呼叫 signal() 函式會觸發</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 未解析的引用錯誤。signal() 函式只能在</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 另一個類型檢查後成功呼叫：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // check(signalStatus is Status)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // signalStatus.signal()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>共同超類型是聯集類型（<a href="https://en.wikipedia.org/wiki/Union_type" target="_blank" rel="noreferrer">Union types</a>）的 <strong>近似值</strong>。Kotlin 不支援聯集類型。</p></div><h4 id="內聯函式" tabindex="-1">內聯函式 <a class="header-anchor" href="#內聯函式" aria-label="Permalink to &quot;內聯函式&quot;">​</a></h4><p>在 Kotlin 2.0.0 中，K2 編譯器對內聯函式的處理方式有所不同， 使其能夠結合其他編譯器分析來判斷智慧型轉型是否安全。</p><p>具體來說，內聯函式現在被視為具有隱式 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.contracts/-contract-builder/calls-in-place.html" target="_blank" rel="noreferrer"><code>callsInPlace</code></a> 契約。這表示傳遞給內聯函式的任何 Lambda 函式都會在原地呼叫。由於 Lambda 函式在原地呼叫，編譯器知道 Lambda 函式不會洩漏其函式主體中包含的任何變數的引用。</p><p>編譯器將此知識與其他編譯器分析結合使用，以決定智慧型轉型任何捕獲的變數是否安全。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inlineAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nextProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    inlineAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，編譯器知道 processor</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 是一個區域變數，inlineAction() 是一個內聯函式，因此</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // processor 的引用不會被洩漏。因此，智慧型轉型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // processor 是安全的。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 如果 processor 不為 null，則 processor 會被智慧型轉型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 編譯器知道 processor 不為 null，因此不需要安全呼叫</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            processor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 在 Kotlin 1.9.20 中，您必須執行安全呼叫：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // processor?.process()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nextProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="具函式類型的屬性" tabindex="-1">具函式類型的屬性 <a class="header-anchor" href="#具函式類型的屬性" aria-label="Permalink to &quot;具函式類型的屬性&quot;">​</a></h4><p>在舊版 Kotlin 中，存在一個錯誤，導致具函式類型的類別屬性無法進行智慧型轉型。 我們已在 Kotlin 2.0.0 和 K2 編譯器中修復了此行為。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Holder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provider: (() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)?) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，如果 provider 不為 null，則</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // provider 會進行智慧型轉型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (provider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 編譯器知道 provider 不為 null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 在 1.9.20 中，編譯器不知道 provider 不為</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // null，因此它會觸發錯誤：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Reference has a nullable type &#39;(() -&gt; Unit)?&#39;, use explicit &#39;?.invoke()&#39; to make a function-like call instead</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此變更也適用於您重載 <code>invoke</code> 運算子的情況。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Holder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provider: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (provider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 在 1.9.20 中，編譯器會觸發錯誤：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Reference has a nullable type &#39;Provider?&#39; use explicit &#39;?.invoke()&#39; to make a function-like call instead</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="例外處理" tabindex="-1">例外處理 <a class="header-anchor" href="#例外處理" aria-label="Permalink to &quot;例外處理&quot;">​</a></h4><p>在 Kotlin 2.0.0 中，我們改進了例外處理，以便智慧型轉型資訊可以傳遞給 <code>catch</code> 和 <code>finally</code> 區塊。此變更使您的程式碼更安全，因為編譯器會追蹤您的物件是否為可空類型。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stringInput: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // stringInput 被智慧型轉型為 String 類型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stringInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 編譯器知道 stringInput 不為 null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringInput.length)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 編譯器拒絕了 stringInput 之前的智慧型轉型資訊。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 現在 stringInput 的類型為 String?。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stringInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 觸發例外</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stringInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (exception: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，編譯器知道 stringInput</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 可以為 null，因此 stringInput 保持可空。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringInput?.length)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，編譯器說不需要安全呼叫，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 但這是不正確的。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="遞增和遞減運算子" tabindex="-1">遞增和遞減運算子 <a class="header-anchor" href="#遞增和遞減運算子" aria-label="Permalink to &quot;遞增和遞減運算子&quot;">​</a></h4><p>在 Kotlin 2.0.0 之前，編譯器不了解物件類型在使用遞增或遞減運算子後可能會改變。由於編譯器無法準確追蹤物件類型，您的程式碼可能導致未解析的引用錯誤。在 Kotlin 2.0.0 中，此問題已解決：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sigma</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sigma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sigma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unknownObject: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rho</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 檢查 unknownObject 是否繼承自 Tau 介面</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 注意，unknownObject 可能同時繼承自 Rho 和 Tau 介面。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (unknownObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Tau) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用來自 Rho 介面的重載 inc() 運算子。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，unknownObject 的類型被智慧型轉型為</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Sigma。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unknownObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，編譯器知道 unknownObject 的類型是</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Sigma，因此 sigma() 函式可以成功呼叫。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        unknownObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sigma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，inc() 被呼叫時編譯器不會執行智慧型轉型，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 因此編譯器仍然認為 unknownObject 的類型是 Tau。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 呼叫 sigma() 函式會拋出編譯時錯誤。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，編譯器知道 unknownObject 的類型是</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Sigma，因此呼叫 tau() 函式會拋出編譯時錯誤。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        unknownObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Unresolved reference &#39;tau&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，由於編譯器錯誤地認為</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // unknownObject 的類型是 Tau，tau() 函式可以被呼叫，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 但會拋出 ClassCastException。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-多平台改進" tabindex="-1">Kotlin 多平台改進 <a class="header-anchor" href="#kotlin-多平台改進" aria-label="Permalink to &quot;Kotlin 多平台改進&quot;">​</a></h3><p>在 Kotlin 2.0.0 中，我們在 K2 編譯器中對 Kotlin 多平台進行了以下改進：</p><ul><li><a href="#separation-of-common-and-platform-sources-during-compilation">編譯期間共同和平台原始碼的分離</a></li><li><a href="#different-visibility-levels-of-expected-and-actual-declarations">期望和實際宣告的不同可見性級別</a></li></ul><h4 id="編譯期間共同和平台原始碼的分離" tabindex="-1">編譯期間共同和平台原始碼的分離 <a class="header-anchor" href="#編譯期間共同和平台原始碼的分離" aria-label="Permalink to &quot;編譯期間共同和平台原始碼的分離&quot;">​</a></h4><p>以前，Kotlin 編譯器的設計使其無法在編譯時將共同原始碼集和平台原始碼集分離。因此，共同程式碼可以存取平台程式碼，這導致了平台之間的行為差異。此外，一些編譯器設定和來自共同程式碼的依賴項過去會洩漏到平台程式碼中。</p><p>在 Kotlin 2.0.0 中，我們在新的 Kotlin K2 編譯器實作中重新設計了編譯方案，以確保共同原始碼集和平台原始碼集之間嚴格分離。當您使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html#expected-and-actual-functions" target="_blank" rel="noreferrer">期望和實際函式</a> 時，此變更最為顯著。以前，在您的共同程式碼中呼叫函式可能會解析為平台程式碼中的函式。例如：</p><table><tr><td>共同程式碼</td><td>平台程式碼</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exampleFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JVM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;platform foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript 平台沒有 foo() 函式重載</span></span></code></pre></div></td></tr></table><p>在此範例中，共同程式碼的行為因其運行的平台而異：</p><ul><li>在 JVM 平台，在共同程式碼中呼叫 <code>foo()</code> 函式會導致平台程式碼中的 <code>foo()</code> 函式被呼叫為 <code>platform foo</code>。</li><li>在 JavaScript 平台，在共同程式碼中呼叫 <code>foo()</code> 函式會導致共同程式碼中的 <code>foo()</code> 函式被呼叫為 <code>common foo</code>，因為平台程式碼中沒有此類函式可用。</li></ul><p>在 Kotlin 2.0.0 中，共同程式碼無法存取平台程式碼，因此兩個平台都成功將 <code>foo()</code> 函式解析為共同程式碼中的 <code>foo()</code> 函式：<code>common foo</code>。</p><p>除了提高跨平台行為的一致性之外，我們還努力修復了 IntelliJ IDEA 或 Android Studio 與編譯器之間行為衝突的情況。例如，當您使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html#expected-and-actual-classes" target="_blank" rel="noreferrer">期望和實際類別</a> 時，會發生以下情況：</p><table><tr><td>共同程式碼</td><td>平台程式碼</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> confirmIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> common</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2.0.0 之前，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 它會觸發僅限 IDE 的錯誤</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">confirmIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // RESOLUTION_TO_CLASSIFIER : Expected class</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Identity has no default constructor.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> confirmIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;expect class fun: jvm&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><p>在此範例中，期望類別 <code>Identity</code> 沒有預設建構子，因此無法在共同程式碼中成功呼叫。 以前，錯誤只由 IDE 報告，但程式碼在 JVM 上仍然成功編譯。然而，現在編譯器正確地報告了錯誤：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Expected class &#39;expect class Identity : Any&#39; does not have default constructor</span></span></code></pre></div><h5 id="何時解析行為不變" tabindex="-1">何時解析行為不變 <a class="header-anchor" href="#何時解析行為不變" aria-label="Permalink to &quot;何時解析行為不變&quot;">​</a></h5><p>我們仍在遷移到新的編譯方案，因此當您呼叫不在相同原始碼集內的函式時，解析行為仍然相同。您主要會在共同程式碼中使用多平台函式庫的重載時注意到此差異。</p><p>假設您有一個函式庫，它有兩個 <code>whichFun()</code> 函式，具有不同的簽名：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 範例函式庫</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: common</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: JVM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;platform function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果您在共同程式碼中呼叫 <code>whichFun()</code> 函式，則會解析函式庫中具有最相關引數類型的函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 JVM 目標的範例函式庫的專案</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: common</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // platform function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>相比之下，如果您在相同原始碼集中宣告 <code>whichFun()</code> 的重載，則會解析共同程式碼中的函式，因為您的程式碼無法存取平台特定版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 未使用範例函式庫</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: common</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // common function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: JVM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;platform function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>與多平台函式庫類似，由於 <code>commonTest</code> 模組位於單獨的原始碼集，它仍然可以存取平台特定程式碼。因此，<code>commonTest</code> 模組中函式呼叫的解析表現出與舊編譯方案相同的行為。</p><p>將來，這些剩餘的案例將與新的編譯方案更加一致。</p><h4 id="期望和實際宣告的不同可見性級別" tabindex="-1">期望和實際宣告的不同可見性級別 <a class="header-anchor" href="#期望和實際宣告的不同可見性級別" aria-label="Permalink to &quot;期望和實際宣告的不同可見性級別&quot;">​</a></h4><p>在 Kotlin 2.0.0 之前，如果您在 Kotlin 多平台專案中使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">期望和實際宣告</a>，它們必須具有相同的 <a href="/zh-Hant/kotlin/visibility-modifiers">可見性級別</a>。 Kotlin 2.0.0 現在也支援不同的可見性級別，但 <strong>僅限於</strong> 實際宣告比期望宣告 <em>更寬鬆</em> 的情況。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 可見性為 internal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 可見性預設為 public，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                // 這更寬鬆</span></span></code></pre></div><p>同樣，如果您在實際宣告中使用 <a href="/zh-Hant/kotlin/type-aliases">類型別名</a>，則 <strong>基礎類型</strong> 的可見性應與期望宣告相同或更寬鬆。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 // 可見性為 internal</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Expanded</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Expanded</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                  // 可見性預設為 public，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                                // 這更寬鬆</span></span></code></pre></div><h3 id="編譯器外掛程式支援" tabindex="-1">編譯器外掛程式支援 <a class="header-anchor" href="#編譯器外掛程式支援" aria-label="Permalink to &quot;編譯器外掛程式支援&quot;">​</a></h3><p>目前，Kotlin K2 編譯器支援以下 Kotlin 編譯器外掛程式：</p><ul><li><a href="/zh-Hant/kotlin/all-open-plugin"><code>all-open</code></a></li><li><a href="https://github.com/Kotlin/kotlinx-atomicfu" target="_blank" rel="noreferrer">AtomicFU</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/plugins/jvm-abi-gen" target="_blank" rel="noreferrer"><code>jvm-abi-gen</code></a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/plugins/js-plain-objects" target="_blank" rel="noreferrer"><code>js-plain-objects</code></a></li><li><a href="/zh-Hant/kotlin/whatsnew1920#preview-kapt-compiler-plugin-with-k2">kapt</a></li><li><a href="/zh-Hant/kotlin/lombok">Lombok</a></li><li><a href="/zh-Hant/kotlin/no-arg-plugin"><code>no-arg</code></a></li><li><a href="https://plugins.gradle.org/plugin/org.jetbrains.kotlin.plugin.parcelize" target="_blank" rel="noreferrer">Parcelize</a></li><li><a href="/zh-Hant/kotlin/sam-with-receiver-plugin">SAM with receiver</a></li><li><a href="/zh-Hant/kotlin/serialization">serialization</a></li><li><a href="/zh-Hant/kotlin/power-assert">Power-assert</a></li></ul><p>此外，Kotlin K2 編譯器還支援：</p><ul><li><a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> 編譯器外掛程式 2.0.0，該外掛程式已 <a href="https://android-developers.googleblog.com/2024/04/jetpack-compose-compiler-moving-to-kotlin-repository.html" target="_blank" rel="noreferrer">移入 Kotlin 儲存庫</a>。</li><li><a href="/zh-Hant/kotlin/ksp-overview">Kotlin Symbol Processing (KSP) 外掛程式</a> 自 <a href="https://android-developers.googleblog.com/2023/12/ksp2-preview-kotlin-k2-standalone.html" target="_blank" rel="noreferrer">KSP2</a> 起。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果您使用任何額外的編譯器外掛程式，請檢查其文件以確定它們是否與 K2 相容。</p></div><h3 id="實驗性-kotlin-power-assert-編譯器外掛程式" tabindex="-1">實驗性 Kotlin Power-assert 編譯器外掛程式 <a class="header-anchor" href="#實驗性-kotlin-power-assert-編譯器外掛程式" aria-label="Permalink to &quot;實驗性 Kotlin Power-assert 編譯器外掛程式&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin Power-assert 外掛程式是 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a> 功能。 它可能隨時更改。</p></div><p>Kotlin 2.0.0 引入了一個實驗性 Power-assert 編譯器外掛程式。此外掛程式透過在失敗訊息中包含上下文資訊來改善測試編寫體驗，從而使除錯更容易、更有效率。</p><p>開發人員通常需要使用複雜的斷言函式庫來編寫有效的測試。Power-assert 外掛程式透過自動生成包含斷言表達式中間值的失敗訊息來簡化此過程。這有助於開發人員快速了解測試失敗的原因。</p><p>當測試中的斷言失敗時，改進的錯誤訊息會顯示斷言中所有變數和子表達式的值，從而清楚地表明是條件的哪一部分導致了失敗。這對於檢查多個條件的複雜斷言特別有用。</p><p>要在您的專案中啟用此外掛程式，請在您的 <code>build.gradle(.kts)</code> 檔案中配置它：</p>`,77)),n(p,{group:"build-script"},{default:l(()=>[n(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[0]||(a[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.0.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"plugin.power-assert"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.0.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"powerAssert"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    functions "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," listOf"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kotlin.assert"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kotlin.test.assertTrue"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[1]||(a[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.multiplatform'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.0.0'")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.plugin.power-assert'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.0.0'")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"powerAssert {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    functions "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kotlin.assert"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kotlin.test.assertTrue"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[9]||(a[9]=e('<p>在 <a href="/zh-Hant/kotlin/power-assert">文件</a> 中了解有關 Kotlin Power-assert 外掛程式的更多資訊。</p><h3 id="如何啟用-kotlin-k2-編譯器" tabindex="-1">如何啟用 Kotlin K2 編譯器 <a class="header-anchor" href="#如何啟用-kotlin-k2-編譯器" aria-label="Permalink to &quot;如何啟用 Kotlin K2 編譯器&quot;">​</a></h3><p>從 Kotlin 2.0.0 開始，Kotlin K2 編譯器預設啟用。無需額外操作。</p><h3 id="在-kotlin-playground-中試用-kotlin-k2-編譯器" tabindex="-1">在 Kotlin Playground 中試用 Kotlin K2 編譯器 <a class="header-anchor" href="#在-kotlin-playground-中試用-kotlin-k2-編譯器" aria-label="Permalink to &quot;在 Kotlin Playground 中試用 Kotlin K2 編譯器&quot;">​</a></h3><p>Kotlin Playground 支援 2.0.0 版本。 <a href="https://pl.kotl.in/czuoQprce" target="_blank" rel="noreferrer">查看！</a></p><h3 id="ide-支援-1" tabindex="-1">IDE 支援 <a class="header-anchor" href="#ide-支援-1" aria-label="Permalink to &quot;IDE 支援&quot;">​</a></h3><p>預設情況下，IntelliJ IDEA 和 Android Studio 仍然使用以前的編譯器進行程式碼分析、程式碼補齊、語法高亮和其他 IDE 相關功能。要在您的 IDE 中獲得完整的 Kotlin 2.0 體驗，請啟用 K2 模式。</p><p>在您的 IDE 中，前往 <strong>設定</strong> | <strong>語言與框架</strong> | <strong>Kotlin</strong>，然後選擇 <strong>啟用 K2 模式</strong> 選項。 IDE 將使用其 K2 模式分析您的程式碼。</p><p><img src="'+r+`" alt="啟用 K2 模式" width="200"></p><p>啟用 K2 模式後，由於編譯器行為的變更，您可能會注意到 IDE 分析的差異。在我們的 <a href="/zh-Hant/kotlin/k2-compiler-migration-guide">遷移指南</a> 中了解新 K2 編譯器與舊編譯器的差異。</p><ul><li>在 <a href="https://blog.jetbrains.com/idea/2024/11/k2-mode-becomes-stable/" target="_blank" rel="noreferrer">我們的部落格</a> 中了解有關 K2 模式的更多資訊。</li><li>我們正在積極收集有關 K2 模式的回饋，因此請在我們的 <a href="https://kotlinlang.slack.com/archives/C0B8H786P" target="_blank" rel="noreferrer">公開 Slack 頻道</a> 中分享您的想法。</li></ul><h3 id="留下您對新-k2-編譯器的回饋" tabindex="-1">留下您對新 K2 編譯器的回饋 <a class="header-anchor" href="#留下您對新-k2-編譯器的回饋" aria-label="Permalink to &quot;留下您對新 K2 編譯器的回饋&quot;">​</a></h3><p>我們將不勝感激您提供的任何回饋！</p><ul><li>在我們的 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">問題追蹤器</a> 中報告您在使用新 K2 編譯器時遇到的任何問題。</li><li><a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer">啟用「發送使用情況統計」選項</a> 以允許 JetBrains 收集有關 K2 使用情況的匿名數據。</li></ul><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>從 2.0.0 版本開始，編譯器可以生成包含 Java 22 位元碼的類別。 此版本還帶來以下變更：</p><ul><li><a href="#generation-of-lambda-functions-using-invokedynamic">使用 invokedynamic 生成 Lambda 函式</a></li><li><a href="#the-kotlinx-metadata-jvm-library-is-stable">kotlinx-metadata-jvm 函式庫現已穩定</a></li></ul><h3 id="使用-invokedynamic-生成-lambda-函式" tabindex="-1">使用 invokedynamic 生成 Lambda 函式 <a class="header-anchor" href="#使用-invokedynamic-生成-lambda-函式" aria-label="Permalink to &quot;使用 invokedynamic 生成 Lambda 函式&quot;">​</a></h3><p>Kotlin 2.0.0 引入了一種使用 <code>invokedynamic</code> 生成 Lambda 函式的新預設方法。此變更與傳統的匿名類別生成相比，減少了應用程式的二進位檔案大小。</p><p>從第一個版本開始，Kotlin 就將 Lambda 生成為匿名類別。然而，從 <a href="/zh-Hant/kotlin/whatsnew15#lambdas-via-invokedynamic">Kotlin 1.5.0</a> 開始， <code>invokedynamic</code> 生成的選項已可透過使用 <code>-Xlambdas=indy</code> 編譯器選項提供。在 Kotlin 2.0.0 中，<code>invokedynamic</code> 已成為 Lambda 生成的預設方法。此方法產生更輕量級的二進位檔案，並使 Kotlin 與 JVM 優化保持一致，確保應用程式受益於 JVM 效能的持續和未來改進。</p><p>目前，與普通 Lambda 編譯相比，它有三個限制：</p><ul><li>編譯成 <code>invokedynamic</code> 的 Lambda 不可序列化。</li><li>實驗性 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.jvm/reflect.html" target="_blank" rel="noreferrer"><code>reflect()</code></a> API 不支援由 <code>invokedynamic</code> 生成的 Lambda。</li><li>在此類 Lambda 上呼叫 <code>.toString()</code> 會產生可讀性較差的字串表示：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 Kotlin 1.9.24 和反射，返回</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // () -&gt; kotlin.Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 Kotlin 2.0.0，返回</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // FileKt$Lambda$13/0x00007f88a0004608@506e1b77</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>為了保留生成 Lambda 函式的傳統行為，您可以：</p><ul><li>使用 <code>@JvmSerializableLambda</code> 標註特定 Lambda。</li><li>使用編譯器選項 <code>-Xlambdas=class</code> 以使用傳統方法在模組中生成所有 Lambda。</li></ul><h3 id="kotlinx-metadata-jvm-函式庫已穩定" tabindex="-1">kotlinx-metadata-jvm 函式庫已穩定 <a class="header-anchor" href="#kotlinx-metadata-jvm-函式庫已穩定" aria-label="Permalink to &quot;kotlinx-metadata-jvm 函式庫已穩定&quot;">​</a></h3><p>在 Kotlin 2.0.0 中，<code>kotlinx-metadata-jvm</code> 函式庫已變得 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">穩定</a>。現在該函式庫已更改為 <code>kotlin</code> 套件和座標，您可以將其找到為 <code>kotlin-metadata-jvm</code> (沒有「x」)。</p><p>以前，<code>kotlinx-metadata-jvm</code> 函式庫有自己的發佈方案和版本。現在，我們將作為 Kotlin 發佈週期的一部分建置和發佈 <code>kotlin-metadata-jvm</code> 更新，並與 Kotlin 標準函式庫具有相同的向後相容性保證。</p><p><code>kotlin-metadata-jvm</code> 函式庫提供一個 API，用於讀取和修改由 Kotlin/JVM 編譯器生成的二進位檔案的中繼資料。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>此版本帶來以下變更：</p><ul><li><a href="#monitoring-gc-performance-with-signposts-on-apple-platforms">使用標記監控 GC 效能</a></li><li><a href="#resolving-conflicts-with-objective-c-methods">解決與 Objective-C 方法的衝突</a></li><li><a href="#changed-log-level-for-compiler-arguments">Kotlin/Native 中編譯器引數的日誌級別已更改</a></li><li><a href="#explicitly-added-standard-library-and-platform-dependencies-to-kotlin-native">明確新增標準函式庫和平台依賴項至 Kotlin/Native</a></li><li><a href="#tasks-error-in-gradle-configuration-cache">Gradle 配置快取中的任務錯誤</a></li></ul><h3 id="使用-apple-平台上的標記監控-gc-效能" tabindex="-1">使用 Apple 平台上的標記監控 GC 效能 <a class="header-anchor" href="#使用-apple-平台上的標記監控-gc-效能" aria-label="Permalink to &quot;使用 Apple 平台上的標記監控 GC 效能&quot;">​</a></h3><p>以前，只能透過查看日誌來監控 Kotlin/Native 的垃圾收集器 (GC) 效能。然而，這些日誌並未與 Xcode Instruments 整合，Xcode Instruments 是用於調查 iOS 應用程式效能問題的常用工具包。</p><p>自 Kotlin 2.0.0 起，GC 會使用 Instruments 中可用的標記報告暫停。標記允許在您的應用程式內進行自訂日誌記錄，因此現在，在除錯 iOS 應用程式效能時，您可以檢查 GC 暫停是否與應用程式凍結相對應。</p><p>在 <a href="/zh-Hant/kotlin/native-memory-manager#monitor-gc-performance">文件</a> 中了解有關 GC 效能分析的更多資訊。</p><h3 id="解決與-objective-c-方法的衝突" tabindex="-1">解決與 Objective-C 方法的衝突 <a class="header-anchor" href="#解決與-objective-c-方法的衝突" aria-label="Permalink to &quot;解決與 Objective-C 方法的衝突&quot;">​</a></h3><p>Objective-C 方法可以有不同的名稱，但參數的數量和類型相同。例如， <a href="https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423560-locationmanager?language=objc" target="_blank" rel="noreferrer"><code>locationManager:didEnterRegion:</code></a> 和 <a href="https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423630-locationmanager?language=objc" target="_blank" rel="noreferrer"><code>locationManager:didExitRegion:</code></a>。 在 Kotlin 中，這些方法具有相同的簽名，因此嘗試使用它們會觸發衝突的重載錯誤。</p><p>以前，您必須手動抑制衝突的重載以避免此編譯錯誤。為了改進 Kotlin 與 Objective-C 的互通性，Kotlin 2.0.0 引入了新的 <code>@ObjCSignatureOverride</code> 註解。</p><p>此註解指示 Kotlin 編譯器忽略衝突的重載，以防多個具有相同引數類型但引數名稱不同的函式從 Objective-C 類別繼承而來。</p><p>應用此註解也比一般錯誤抑制更安全。此註解只能用於覆寫 Objective-C 方法的情況，這些方法已受支援並經過測試，而一般抑制可能會隱藏重要錯誤並導致程式碼悄然損壞。</p><h3 id="kotlin-native-中編譯器引數的日誌級別已更改" tabindex="-1">Kotlin/Native 中編譯器引數的日誌級別已更改 <a class="header-anchor" href="#kotlin-native-中編譯器引數的日誌級別已更改" aria-label="Permalink to &quot;Kotlin/Native 中編譯器引數的日誌級別已更改&quot;">​</a></h3><p>在此版本中，Kotlin/Native Gradle 任務（例如 <code>compile</code>、<code>link</code> 和 <code>cinterop</code>）中編譯器引數的日誌級別已從 <code>info</code> 更改為 <code>debug</code>。</p><p>預設值為 <code>debug</code>，日誌級別與其他 Gradle 編譯任務一致，並提供詳細的除錯資訊，包括所有編譯器引數。</p><h3 id="明確新增標準函式庫和平台依賴項至-kotlin-native" tabindex="-1">明確新增標準函式庫和平台依賴項至 Kotlin/Native <a class="header-anchor" href="#明確新增標準函式庫和平台依賴項至-kotlin-native" aria-label="Permalink to &quot;明確新增標準函式庫和平台依賴項至 Kotlin/Native&quot;">​</a></h3><p>以前，Kotlin/Native 編譯器會隱式解析標準函式庫和平台依賴項，這導致 Kotlin Gradle 外掛程式在 Kotlin 目標之間的工作方式不一致。</p><p>現在，每個 Kotlin/Native Gradle 編譯都透過 <code>compileDependencyFiles</code> <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#compilation-parameters" target="_blank" rel="noreferrer">編譯參數</a> 明確地將標準函式庫和平台依賴項包含在其編譯時函式庫路徑中。</p><h3 id="gradle-配置快取中的任務錯誤" tabindex="-1">Gradle 配置快取中的任務錯誤 <a class="header-anchor" href="#gradle-配置快取中的任務錯誤" aria-label="Permalink to &quot;Gradle 配置快取中的任務錯誤&quot;">​</a></h3><p>從 Kotlin 2.0.0 開始，您可能會遇到配置快取錯誤，訊息指示： <code>invocation of Task.project at execution time is unsupported</code>。</p><p>此錯誤出現在 <code>NativeDistributionCommonizerTask</code> 和 <code>KotlinNativeCompile</code> 等任務中。</p><p>然而，這是一個誤報錯誤。根本問題是存在與 Gradle 配置快取不相容的任務，例如 <code>publish*</code> 任務。</p><p>這種差異可能不會立即顯現，因為錯誤訊息暗示了不同的根本原因。</p><p>由於錯誤報告中沒有明確說明精確原因，<a href="https://github.com/gradle/gradle/issues/21290" target="_blank" rel="noreferrer">Gradle 團隊已經在解決該問題以修復報告</a>。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>Kotlin 2.0.0 提高了與 JavaScript 的效能和互通性：</p><ul><li><a href="#optimized-production-builds-by-default-using-binaryen">預設使用 Binaryen 優化生產建置</a></li><li><a href="#support-for-named-export">支援命名匯出</a></li><li><a href="#support-for-unsigned-primitive-types-in-functions-with-jsexport">@JsExport 函式中對無符號基本類型的支援</a></li><li><a href="#generation-of-typescript-declaration-files-in-kotlin-wasm">Kotlin/Wasm 中 TypeScript 宣告檔案的生成</a></li><li><a href="#support-for-catching-javascript-exceptions">支援捕獲 JavaScript 例外</a></li><li><a href="#new-exception-handling-proposal-is-now-supported-as-an-option">新的例外處理提案現已作為選項支援</a></li><li><a href="#the-withwasm-function-is-split-into-js-and-wasi-variants"><code>withWasm()</code> 函式已分為 JS 和 WASI 變體</a></li></ul><h3 id="預設使用-binaryen-優化生產建置" tabindex="-1">預設使用 Binaryen 優化生產建置 <a class="header-anchor" href="#預設使用-binaryen-優化生產建置" aria-label="Permalink to &quot;預設使用 Binaryen 優化生產建置&quot;">​</a></h3><p>Kotlin/Wasm 工具鏈現在在生產編譯期間對所有專案應用 <a href="https://github.com/WebAssembly/binaryen" target="_blank" rel="noreferrer">Binaryen</a> 工具， 而不是以前的手動設定方法。根據我們的估計，它應該可以提高專案的執行時效能並減小二進位檔案大小。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>此變更僅影響生產編譯。開發編譯流程保持不變。</p></div><h3 id="支援命名匯出" tabindex="-1">支援命名匯出 <a class="header-anchor" href="#支援命名匯出" aria-label="Permalink to &quot;支援命名匯出&quot;">​</a></h3><p>以前，所有從 Kotlin/Wasm 匯出的宣告都使用預設匯出匯入到 JavaScript 中：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//JavaScript:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./index.mjs&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Module.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>現在，您可以按名稱匯入每個標註有 <code>@JsExport</code> 的 Kotlin 宣告：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//JavaScript:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { add } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./index.mjs&quot;</span></span></code></pre></div><p>命名匯出使 Kotlin 和 JavaScript 模組之間共用程式碼變得更容易。它們提高了可讀性，並有助於管理模組之間的依賴項。</p><h3 id="jsexport-函式中對無符號基本類型的支援" tabindex="-1">@JsExport 函式中對無符號基本類型的支援 <a class="header-anchor" href="#jsexport-函式中對無符號基本類型的支援" aria-label="Permalink to &quot;@JsExport 函式中對無符號基本類型的支援&quot;">​</a></h3><p>從 Kotlin 2.0.0 開始，您可以在外部宣告和帶有 <code>@JsExport</code> 註解的函式內部使用 <a href="/zh-Hant/kotlin/unsigned-integer-types">無符號基本類型</a>，這使得 Kotlin/Wasm 函式在 JavaScript 程式碼中可用。</p><p>這有助於緩解以前的限制，即阻止 <a href="/zh-Hant/kotlin/unsigned-integer-types">無符號基本類型</a> 直接在匯出和外部宣告中使用。現在您可以匯出帶有無符號基本類型作為返回或參數類型的函式，並使用返回或使用無符號基本類型的外部宣告。</p><p>有關 Kotlin/Wasm 與 JavaScript 互通性的更多資訊，請參閱 <a href="/zh-Hant/kotlin/wasm-js-interop#use-javascript-code-in-kotlin">文件</a>。</p><h3 id="kotlin-wasm-中-typescript-宣告檔案的生成" tabindex="-1">Kotlin/Wasm 中 TypeScript 宣告檔案的生成 <a class="header-anchor" href="#kotlin-wasm-中-typescript-宣告檔案的生成" aria-label="Permalink to &quot;Kotlin/Wasm 中 TypeScript 宣告檔案的生成&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>在 Kotlin/Wasm 中生成 TypeScript 宣告檔案是 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a> 功能。 它可能隨時刪除或更改。</p></div><p>在 Kotlin 2.0.0 中，Kotlin/Wasm 編譯器現在能夠從您的 Kotlin 程式碼中的任何 <code>@JsExport</code> 宣告生成 TypeScript 定義。這些定義可用於 IDE 和 JavaScript 工具，以提供程式碼自動補齊、協助類型檢查，並使在 JavaScript 中包含 Kotlin 程式碼更容易。</p><p>Kotlin/Wasm 編譯器會收集任何標註有 <code>@JsExport</code> 的 <a href="/zh-Hant/kotlin/wasm-js-interop#functions-with-the-jsexport-annotation">頂層函式</a>，並自動在 <code>.d.ts</code> 檔案中生成 TypeScript 定義。</p><p>要生成 TypeScript 定義，在您的 <code>build.gradle(.kts)</code> 檔案中的 <code>wasmJs {}</code> 區塊中，添加 <code>generateTypeScriptDefinitions()</code> 函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        generateTypeScriptDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="支援捕獲-javascript-例外" tabindex="-1">支援捕獲 JavaScript 例外 <a class="header-anchor" href="#支援捕獲-javascript-例外" aria-label="Permalink to &quot;支援捕獲 JavaScript 例外&quot;">​</a></h3><p>以前，Kotlin/Wasm 程式碼無法捕獲 JavaScript 例外，這使得難以處理源自程式 JavaScript 端的錯誤。</p><p>在 Kotlin 2.0.0 中，我們實作了在 Kotlin/Wasm 中捕獲 JavaScript 例外的支援。此實作允許您使用 <code>try-catch</code> 區塊，以及 <code>Throwable</code> 或 <code>JsException</code> 等特定類型，以正確處理這些錯誤。</p><p>此外，<code>finally</code> 區塊（無論是否拋出例外都可幫助執行程式碼）也能正常工作。雖然我們引入了捕獲 JavaScript 例外的支援，但當 JavaScript 例外（例如呼叫堆疊）發生時，不提供額外資訊。然而，<a href="https://youtrack.jetbrains.com/issue/KT-68185/WasmJs-Attach-js-exception-object-to-JsException" target="_blank" rel="noreferrer">我們正在開發這些實作</a>。</p><h3 id="新的例外處理提案現已作為選項支援" tabindex="-1">新的例外處理提案現已作為選項支援 <a class="header-anchor" href="#新的例外處理提案現已作為選項支援" aria-label="Permalink to &quot;新的例外處理提案現已作為選項支援&quot;">​</a></h3><p>在此版本中，我們引入了在 Kotlin/Wasm 中對 WebAssembly <a href="https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/Exceptions.md" target="_blank" rel="noreferrer">例外處理提案</a> 新版本的支援。</p><p>此更新確保新提案符合 Kotlin 要求，使得 Kotlin/Wasm 可以在僅支援最新版本提案的虛擬機器上使用。</p><p>透過使用 <code>-Xwasm-use-new-exception-proposal</code> 編譯器選項來啟動新的例外處理提案，該選項預設是關閉的。</p><h3 id="withwasm-函式已分為-js-和-wasi-變體" tabindex="-1"><code>withWasm()</code> 函式已分為 JS 和 WASI 變體 <a class="header-anchor" href="#withwasm-函式已分為-js-和-wasi-變體" aria-label="Permalink to &quot;\`withWasm()\` 函式已分為 JS 和 WASI 變體&quot;">​</a></h3><p><code>withWasm()</code> 函式以前用於為階層模板提供 Wasm 目標，現已棄用，取而代之的是專門的 <code>withWasmJs()</code> 和 <code>withWasmWasi()</code> 函式。</p><p>現在您可以在樹狀定義中將 WASI 和 JS 目標分離到不同的組中。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>除了其他變更之外，此版本還為 Kotlin 帶來了現代 JS 編譯，支援 ES2015 標準的更多功能：</p><ul><li><a href="#new-compilation-target">新編譯目標</a></li><li><a href="#suspend-functions-as-es2015-generators">Suspend 函式作為 ES2015 產生器</a></li><li><a href="#passing-arguments-to-the-main-function">將引數傳遞給 main 函式</a></li><li><a href="#per-file-compilation-for-kotlin-js-projects">Kotlin/JS 專案的按檔案編譯</a></li><li><a href="#improved-collection-interoperability">改進的集合互通性</a></li><li><a href="#support-for-createinstance">支援 createInstance()</a></li><li><a href="#support-for-type-safe-plain-javascript-objects">支援類型安全的普通 JavaScript 物件</a></li><li><a href="#support-for-npm-package-manager">支援 npm 套件管理員</a></li><li><a href="#changes-to-compilation-tasks">編譯任務的變更</a></li><li><a href="#discontinuing-legacy-kotlin-js-jar-artifacts">停止傳統 Kotlin/JS JAR Artifact</a></li></ul><h3 id="新編譯目標" tabindex="-1">新編譯目標 <a class="header-anchor" href="#新編譯目標" aria-label="Permalink to &quot;新編譯目標&quot;">​</a></h3><p>在 Kotlin 2.0.0 中，我們為 Kotlin/JS 添加了一個新的編譯目標 <code>es2015</code>。這是一種讓您一次啟用 Kotlin 中所有支援的 ES2015 功能的新方式。</p><p>您可以在 <code>build.gradle(.kts)</code> 檔案中這樣設定它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            target.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es2015&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>新目標會自動開啟 <a href="/zh-Hant/kotlin/whatsnew19#experimental-support-for-es2015-classes-and-modules">ES 類別和模組</a> 以及新支援的 <a href="#suspend-functions-as-es2015-generators">ES 產生器</a>。</p><h3 id="suspend-函式作為-es2015-產生器" tabindex="-1">Suspend 函式作為 ES2015 產生器 <a class="header-anchor" href="#suspend-函式作為-es2015-產生器" aria-label="Permalink to &quot;Suspend 函式作為 ES2015 產生器&quot;">​</a></h3><p>此版本引入了 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a> 支援 ES2015 產生器，用於編譯 <a href="/zh-Hant/kotlin/composing-suspending-functions">Suspend 函式</a>。</p><p>使用產生器而非狀態機應能改善專案的最終程式碼包大小。例如，JetBrains 團隊透過使用 ES2015 產生器，成功將其 Space 專案的程式碼包大小減少了 20%。</p><p><a href="https://262.ecma-international.org/6.0/" target="_blank" rel="noreferrer">在官方文件</a> 中了解有關 ES2015 (ECMAScript 2015, ES6) 的更多資訊。</p><h3 id="將引數傳遞給-main-函式" tabindex="-1">將引數傳遞給 main 函式 <a class="header-anchor" href="#將引數傳遞給-main-函式" aria-label="Permalink to &quot;將引數傳遞給 main 函式&quot;">​</a></h3><p>從 Kotlin 2.0.0 開始，您可以為 <code>main()</code> 函式指定 <code>args</code> 的來源。此功能使得處理命令列和傳遞引數變得更容易。</p><p>為此，請定義 <code>js {}</code> 區塊，其中包含新的 <code>passAsArgumentToMainFunction()</code> 函式，該函式返回一個字串陣列：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binary.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        passAsArgumentToMainFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Deno.args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>該函式在執行時執行。它接受 JavaScript 表達式並將其用作 <code>args: Array&lt;String&gt;</code> 引數，而不是 <code>main()</code> 函式呼叫。</p><p>此外，如果您使用 Node.js 執行時，您可以利用一個特殊別名。它允許您一次將 <code>process.argv</code> 傳遞給 <code>args</code> 參數，而不是每次都手動添加：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binary.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            passProcessArgvToMainFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-js-專案的按檔案編譯" tabindex="-1">Kotlin/JS 專案的按檔案編譯 <a class="header-anchor" href="#kotlin-js-專案的按檔案編譯" aria-label="Permalink to &quot;Kotlin/JS 專案的按檔案編譯&quot;">​</a></h3><p>Kotlin 2.0.0 引入了 Kotlin/JS 專案輸出的一個新粒度選項。您現在可以設定按檔案編譯，為每個 Kotlin 檔案生成一個 JavaScript 檔案。這有助於顯著優化最終程式碼包的大小並改善程式的載入時間。</p><p>以前，只有兩個輸出選項。Kotlin/JS 編譯器可以為整個專案生成一個單一的 <code>.js</code> 檔案。然而，這個檔案可能太大且不便使用。每當您想要使用專案中的函式時，您都必須將整個 JavaScript 檔案作為依賴項包含進來。或者，您可以配置為每個專案模組編譯一個單獨的 <code>.js</code> 檔案。這仍然是預設選項。</p><p>由於模組檔案也可能太大，在 Kotlin 2.0.0 中，我們添加了更細粒度的輸出，為每個 Kotlin 檔案生成一個（如果檔案包含匯出宣告則為兩個）JavaScript 檔案。要啟用按檔案編譯模式：</p><ol><li><p>將 <a href="/zh-Hant/kotlin/whatsnew19#experimental-support-for-es2015-classes-and-modules"><code>useEsModules()</code></a> 函式添加到您的建置檔案中以支援 ECMAScript 模組：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        useEsModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 啟用 ES2015 模組</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您也可以使用新的 <code>es2015</code> <a href="#new-compilation-target">編譯目標</a> 來實現。</p></li><li><p>應用 <code>-Xir-per-file</code> 編譯器選項或更新您的 <code>gradle.properties</code> 檔案：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.js.ir.output.granularity=per-file // \`per-module\` 是預設值</span></span></code></pre></div></li></ol><h3 id="改進的集合互通性" tabindex="-1">改進的集合互通性 <a class="header-anchor" href="#改進的集合互通性" aria-label="Permalink to &quot;改進的集合互通性&quot;">​</a></h3><p>從 Kotlin 2.0.0 開始，可以將簽名中包含 Kotlin 集合類型的宣告匯出到 JavaScript（和 TypeScript）。這適用於 <code>Set</code>、<code>Map</code> 和 <code>List</code> 集合類型及其可變對應項。</p><p>要在 JavaScript 中使用 Kotlin 集合，請先使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-export/" target="_blank" rel="noreferrer"><code>@JsExport</code></a> 註解標記必要的宣告：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> friends: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> me </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Me&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    friends </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kodee&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>然後，您可以將它們作為常規 JavaScript 陣列從 JavaScript 中使用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { User, me, KtList } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my-module&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> allMyFriendNames</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> me.friends</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asJsReadonlyArrayView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;Kodee&#39;]</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>不幸的是，從 JavaScript 建立 Kotlin 集合仍然不可用。我們計畫在 Kotlin 2.0.20 中添加此功能。</p></div><h3 id="支援-createinstance" tabindex="-1">支援 createInstance() <a class="header-anchor" href="#支援-createinstance" aria-label="Permalink to &quot;支援 createInstance()&quot;">​</a></h3><p>從 Kotlin 2.0.0 開始，您可以從 Kotlin/JS 目標使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/create-instance.html" target="_blank" rel="noreferrer"><code>createInstance()</code></a> 函式。以前，它僅在 JVM 上可用。</p><p>這個來自 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/" target="_blank" rel="noreferrer">KClass</a> 介面的函式會建立指定類別的新實例，這對於獲取 Kotlin 類別的執行時引用非常有用。</p><h3 id="支援類型安全的普通-javascript-物件" tabindex="-1">支援類型安全的普通 JavaScript 物件 <a class="header-anchor" href="#支援類型安全的普通-javascript-物件" aria-label="Permalink to &quot;支援類型安全的普通 JavaScript 物件&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>js-plain-objects</code> 外掛程式是 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a> 功能。 它可能隨時刪除或更改。<code>js-plain-objects</code> 外掛程式 <strong>僅</strong> 支援 K2 編譯器。</p></div><p>為了讓使用 JavaScript API 更容易，在 Kotlin 2.0.0 中，我們提供了一個新外掛程式：<a href="https://github.com/JetBrains/kotlin/tree/master/plugins/js-plain-objects" target="_blank" rel="noreferrer"><code>js-plain-objects</code></a>， 您可以使用它來建立類型安全的普通 JavaScript 物件。此外掛程式會檢查您的程式碼中是否有任何帶有 <code>@JsPlainObject</code> 註解的 <a href="/zh-Hant/kotlin/wasm-js-interop#external-interfaces">外部介面</a>，並添加：</p><ul><li>伴生物件內部的一個內聯 <code>invoke</code> 運算子函式，您可以將其用作建構子。</li><li>一個 <code>.copy()</code> 函式，您可以使用它來建立物件的副本，同時調整其某些屬性。</li></ul><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.js.JsPlainObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsPlainObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 建立一個 JavaScript 物件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 複製物件並添加電子郵件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;some@user.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // { &quot;name&quot;: &quot;Name&quot;, &quot;age&quot;: 10 }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(copy))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // { &quot;name&quot;: &quot;Name&quot;, &quot;age&quot;: 11, &quot;email&quot;: &quot;some@user.com&quot; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用這種方法建立的任何 JavaScript 物件都更安全，因為您不再只在執行時看到錯誤， 而可以在編譯時甚至由您的 IDE 標示出來。</p><p>考慮這個範例，它使用 <code>fetch()</code> 函式與 JavaScript API 交互，使用外部介面來描述 JavaScript 物件的形狀：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.js.JsPlainObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsPlainObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FetchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Window.fetch 的包裝器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FetchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Add your custom behavior here&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 由於「metod」無法識別為方法，觸發編譯時錯誤</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://google.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FetchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(metod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 由於方法是必需的，觸發編譯時錯誤</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://google.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FetchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SOME STRING&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>相比之下，如果您改用 <code>js()</code> 函式來建立 JavaScript 物件， 錯誤只會在執行時找到或根本不會觸發：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FetchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Add your custom behavior here&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 未觸發錯誤。由於「metod」無法識別，使用了錯誤的方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (GET)。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://google.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ metod: &#39;POST&#39; }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 預設情況下，使用 GET 方法。由於不應該存在 body，觸發執行時錯誤。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://google.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ body: &#39;SOME STRING&#39; }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeError: Window.fetch: HEAD or GET Request cannot have a body</span></span></code></pre></div><p>要使用 <code>js-plain-objects</code> 外掛程式，請將以下內容添加到您的 <code>build.gradle(.kts)</code> 檔案中：</p>`,133)),n(p,{group:"build-script"},{default:l(()=>[n(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[2]||(a[2]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"plugin.js-plain-objects"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.0.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[3]||(a[3]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlin.plugin.js-plain-objects"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.0.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[10]||(a[10]=e(`<h3 id="支援-npm-套件管理員" tabindex="-1">支援 npm 套件管理員 <a class="header-anchor" href="#支援-npm-套件管理員" aria-label="Permalink to &quot;支援 npm 套件管理員&quot;">​</a></h3><p>以前，Kotlin 多平台 Gradle 外掛程式只能使用 <a href="https://yarnpkg.com/lang/en/" target="_blank" rel="noreferrer">Yarn</a> 作為套件管理員來下載和安裝 npm 依賴項。從 Kotlin 2.0.0 開始，您可以使用 <a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npm</a> 作為您的套件管理員。使用 npm 作為套件管理員意味著您在設定期間需要管理的工具少了一個。</p><p>為了向後相容性，Yarn 仍然是預設的套件管理員。要使用 npm 作為您的套件管理員， 請在您的 <code>gradle.properties</code> 檔案中設定以下屬性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.js.yarn = false</span></span></code></pre></div><h3 id="編譯任務的變更" tabindex="-1">編譯任務的變更 <a class="header-anchor" href="#編譯任務的變更" aria-label="Permalink to &quot;編譯任務的變更&quot;">​</a></h3><p>以前，<code>webpack</code> 和 <code>distributeResources</code> 編譯任務都針對相同的目錄。此外， <code>distribution</code> 任務也將 <code>dist</code> 聲明為其輸出目錄。這導致了輸出重疊並產生編譯警告。</p><p>因此，從 Kotlin 2.0.0 開始，我們實作了以下變更：</p><ul><li><code>webpack</code> 任務現在針對一個單獨的資料夾。</li><li><code>distributeResources</code> 任務已完全移除。</li><li><code>distribution</code> 任務現在具有 <code>Copy</code> 類型並針對 <code>dist</code> 資料夾。</li></ul><h3 id="停止傳統-kotlin-js-jar-artifact" tabindex="-1">停止傳統 Kotlin/JS JAR Artifact <a class="header-anchor" href="#停止傳統-kotlin-js-jar-artifact" aria-label="Permalink to &quot;停止傳統 Kotlin/JS JAR Artifact&quot;">​</a></h3><p>從 Kotlin 2.0.0 開始，Kotlin 發佈不再包含帶有 <code>.jar</code> 副檔名的傳統 Kotlin/JS Artifact。傳統 Artifact 用於不受支援的舊 Kotlin/JS 編譯器，對於使用 <code>klib</code> 格式的 IR 編譯器來說是不必要的。</p><h2 id="gradle-改進" tabindex="-1">Gradle 改進 <a class="header-anchor" href="#gradle-改進" aria-label="Permalink to &quot;Gradle 改進&quot;">​</a></h2><p>Kotlin 2.0.0 完全相容於 Gradle 6.8.3 到 8.5。您也可以使用最新的 Gradle 版本，但如果您這樣做，請記住您可能會遇到棄用警告或某些新的 Gradle 功能可能無法運作。</p><p>此版本帶來以下變更：</p><ul><li><a href="#new-gradle-dsl-for-compiler-options-in-multiplatform-projects">多平台專案中編譯器選項的新 Gradle DSL</a></li><li><a href="#new-compose-compiler-gradle-plugin">新的 Compose 編譯器 Gradle 外掛程式</a></li><li><a href="#new-attribute-to-distinguish-jvm-and-android-published-libraries">區分 JVM 和 Android 發佈函式庫的新屬性</a></li><li><a href="#improved-gradle-dependency-handling-for-cinteropprocess-in-kotlin-native">改進的 Kotlin/Native 中 CInteropProcess 的 Gradle 依賴處理</a></li><li><a href="#visibility-changes-in-gradle">Gradle 中的可見性變更</a></li><li><a href="#new-directory-for-kotlin-data-in-gradle-projects">Gradle 專案中 Kotlin 資料的新目錄</a></li><li><a href="#kotlin-native-compiler-downloaded-when-needed">Kotlin/Native 編譯器按需下載</a></li><li><a href="#deprecated-old-ways-of-defining-compiler-options">棄用舊的定義編譯器選項方法</a></li><li><a href="#bumped-minimum-supported-agp-version">提高最低支援的 AGP 版本</a></li><li><a href="#new-gradle-property-for-trying-the-latest-language-version">用於嘗試最新語言版本的新 Gradle 屬性</a></li><li><a href="#new-json-output-format-for-build-reports">建置報告的新 JSON 輸出格式</a></li><li><a href="#kapt-configurations-inherit-annotation-processors-from-superconfigurations">kapt 配置繼承超級配置中的註解處理器</a></li><li><a href="#kotlin-gradle-plugin-no-longer-uses-deprecated-gradle-conventions">Kotlin Gradle 外掛程式不再使用棄用的 Gradle 慣例</a></li></ul><h3 id="多平台專案中編譯器選項的新-gradle-dsl" tabindex="-1">多平台專案中編譯器選項的新 Gradle DSL <a class="header-anchor" href="#多平台專案中編譯器選項的新-gradle-dsl" aria-label="Permalink to &quot;多平台專案中編譯器選項的新 Gradle DSL&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能是 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a> 功能。它可能隨時刪除或更改。 僅用於評估目的。我們將不勝感激您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中提供的回饋。</p></div><p>在 Kotlin 2.0.0 之前，在 Gradle 的多平台專案中配置編譯器選項只能在低層級進行，例如按任務、編譯或原始碼集。為了使在專案中更通用地配置編譯器選項變得更容易，Kotlin 2.0.0 帶有新的 Gradle DSL。</p><p>有了這個新的 DSL，您可以在擴充層級為所有目標和共享原始碼集（如 <code>commonMain</code>）以及在目標層級為特定目標配置編譯器選項：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 擴充層級的共同編譯器選項，用作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 所有目標和共享原始碼集的預設值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        allWarningsAsErrors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 目標層級的 JVM 編譯器選項，用作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 此目標中所有編譯的預設值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            noJdk.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>整個專案配置現在有三個層次。最高的是擴充層級，其次是目標層級，最低的是編譯單元（通常是編譯任務）：</p><p><img src="`+o+`" alt="Kotlin 編譯器選項層次" width="700"></p><p>較高層級的設定用作較低層級的慣例（預設值）：</p><ul><li>擴充編譯器選項的值是目標編譯器選項的預設值，包括共享原始碼集，例如 <code>commonMain</code>、<code>nativeMain</code> 和 <code>commonTest</code>。</li><li>目標編譯器選項的值用作編譯單元（任務）編譯器選項的預設值，例如 <code>compileKotlinJvm</code> 和 <code>compileTestKotlinJvm</code> 任務。</li></ul><p>反過來，在較低層級進行的配置會覆寫較高層級的相關設定：</p><ul><li>任務層級的編譯器選項會覆寫目標或擴充層級的相關配置。</li><li>目標層級的編譯器選項會覆寫擴充層級的相關配置。</li></ul><p>配置專案時，請記住一些舊的設定編譯器選項方法已 <a href="#deprecated-old-ways-of-defining-compiler-options">棄用</a>。</p><p>我們鼓勵您在多平台專案中嘗試新的 DSL 並在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中留下回饋，因為我們計畫將此 DSL 作為配置編譯器選項的推薦方法。</p><h3 id="新的-compose-編譯器-gradle-外掛程式" tabindex="-1">新的 Compose 編譯器 Gradle 外掛程式 <a class="header-anchor" href="#新的-compose-編譯器-gradle-外掛程式" aria-label="Permalink to &quot;新的 Compose 編譯器 Gradle 外掛程式&quot;">​</a></h3><p>Jetpack Compose 編譯器（將可組合項轉換為 Kotlin 程式碼）現已合併到 Kotlin 儲存庫中。這將有助於將 Compose 專案轉換為 Kotlin 2.0.0，因為 Compose 編譯器將始終與 Kotlin 同步發佈。這也將 Compose 編譯器版本提高到 2.0.0。</p><p>要在您的專案中使用新的 Compose 編譯器，請在您的 <code>build.gradle(.kts)</code> 檔案中套用 <code>org.jetbrains.kotlin.plugin.compose</code> Gradle 外掛程式，並將其版本設定為等於 Kotlin 2.0.0。</p><p>要了解有關此變更的更多資訊並查看遷移說明，請參閱 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-compiler.html" target="_blank" rel="noreferrer">Compose 編譯器</a> 文件。</p><h3 id="區分-jvm-和-android-發佈函式庫的新屬性" tabindex="-1">區分 JVM 和 Android 發佈函式庫的新屬性 <a class="header-anchor" href="#區分-jvm-和-android-發佈函式庫的新屬性" aria-label="Permalink to &quot;區分 JVM 和 Android 發佈函式庫的新屬性&quot;">​</a></h3><p>從 Kotlin 2.0.0 開始，<a href="https://docs.gradle.org/current/userguide/variant_attributes.html#sub:jvm_default_attributes" target="_blank" rel="noreferrer"><code>org.gradle.jvm.environment</code></a> Gradle 屬性預設與所有 Kotlin 變體一起發佈。</p><p>此屬性有助於區分 Kotlin 多平台函式庫的 JVM 和 Android 變體。它表示某些函式庫變體更適合某些 JVM 環境。目標環境可以是「android」、「standard-jvm」或「no-jvm」。</p><p>發佈此屬性應能使 JVM 和 Android 目標的 Kotlin 多平台函式庫從非多平台客戶端（例如僅 Java 專案）消耗起來更健壯。</p><p>如有必要，您可以禁用屬性發佈。為此，請將以下 Gradle 選項添加到您的 <code>gradle.properties</code> 檔案中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.publishJvmEnvironmentAttribute=false</span></span></code></pre></div><h3 id="改進的-kotlin-native-中-cinteropprocess-的-gradle-依賴處理" tabindex="-1">改進的 Kotlin/Native 中 CInteropProcess 的 Gradle 依賴處理 <a class="header-anchor" href="#改進的-kotlin-native-中-cinteropprocess-的-gradle-依賴處理" aria-label="Permalink to &quot;改進的 Kotlin/Native 中 CInteropProcess 的 Gradle 依賴處理&quot;">​</a></h3><p>在此版本中，我們增強了 <code>defFile</code> 屬性的處理，以確保 Kotlin/Native 專案中更好的 Gradle 任務依賴管理。</p><p>在此更新之前，如果 <code>defFile</code> 屬性被指定為尚未執行的另一個任務的輸出，則 Gradle 建置可能會失敗。此問題的解決方法是添加對此任務的依賴項：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            cinterops</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cinterop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    defFileProperty.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(createDefFileTask.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.defFile.asFile })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    project.tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(interopProcessingTaskName).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                        dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(createDefFileTask)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>為了解決此問題，現在有一個名為 <code>definitionFile</code> 的新 <code>RegularFileProperty</code> 屬性。現在，Gradle 在連接任務在建置過程的後期運行後，惰性驗證 <code>definitionFile</code> 屬性的存在。這種新方法消除了對額外依賴項的需求。</p><p><code>CInteropProcess</code> 任務和 <code>CInteropSettings</code> 類別使用 <code>definitionFile</code> 屬性而不是 <code>defFile</code> 和 <code>defFileProperty</code>：</p>`,43)),n(p,{group:"build-script"},{default:l(()=>[n(t,{id:"kotlin",title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[4]||(a[4]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    macosArm64"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilations."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getByName"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"main"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            cinterops"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"                val"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," cinterop "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," creating"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                    definitionFile."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(project."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"file"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"def-file.def"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{id:"groovy",title:"Groovy","group-key":"groovy"},{default:l(()=>a[5]||(a[5]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    macosArm64("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilations"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"main {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            cinterops {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                cinterop {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                    definitionFile"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"set(project"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"file("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"def-file.def"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[11]||(a[11]=e(`<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>defFile</code> 和 <code>defFileProperty</code> 參數已棄用。</p></div><h3 id="gradle-中的可見性變更" tabindex="-1">Gradle 中的可見性變更 <a class="header-anchor" href="#gradle-中的可見性變更" aria-label="Permalink to &quot;Gradle 中的可見性變更&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>此變更僅影響 Kotlin DSL 使用者。</p></div><p>在 Kotlin 2.0.0 中，我們修改了 Kotlin Gradle 外掛程式，以更好地控制和安全地編寫您的建置指令碼。以前，某些旨在用於特定 DSL 上下文的 Kotlin DSL 函式和屬性會無意中洩漏到其他 DSL 上下文。這種洩漏可能導致使用不正確的編譯器選項、設定多次套用以及其他配置錯誤：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 目標 DSL 無法存取在</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // kotlin{} 擴充 DSL 中定義的方法和屬性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 編譯 DSL 無法存取在</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // kotlin{} 擴充 DSL 和 Kotlin jvm{} 目標 DSL 中定義的方法和屬性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 編譯任務 DSL 無法存取在</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // kotlin{} 擴充、Kotlin jvm{} 目標或 Kotlin 編譯 DSL 中定義的方法和屬性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compileTaskProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 例如：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                explicitApi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ERROR，因為它在 kotlin{} 擴充 DSL 中定義</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                mavenPublication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ERROR，因為它在 Kotlin jvm{} 目標 DSL 中定義</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                defaultSourceSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ERROR，因為它在 Kotlin 編譯 DSL 中定義</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>為了解決此問題，我們添加了 <code>@KotlinGradlePluginDsl</code> 註解，防止 Kotlin Gradle 外掛程式 DSL 函式和屬性暴露到不應可用的層級。以下層級相互獨立：</p><ul><li>Kotlin 擴充</li><li>Kotlin 目標</li><li>Kotlin 編譯</li><li>Kotlin 編譯任務</li></ul><p>對於最常見的情況，如果您的建置指令碼配置不正確，我們已添加編譯器警告並提供如何修復它們的建議。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvmMain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.7.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在這種情況下，<code>sourceSets</code> 的警告訊息是：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[DEPRECATION] &#39;sourceSets: NamedDomainObjectContainer&lt;KotlinSourceSet&gt;&#39; is deprecated.Accessing &#39;sourceSets&#39; container on the Kotlin target level DSL is deprecated. Consider configuring &#39;sourceSets&#39; on the Kotlin extension level.</span></span></code></pre></div><p>我們將不勝感激您對此變更的回饋！請直接在我們的 <a href="https://kotlinlang.slack.com/archives/C19FD9681" target="_blank" rel="noreferrer">#gradle Slack 頻道</a> 中向 Kotlin 開發人員分享您的評論。<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">獲取 Slack 邀請</a>。</p><h3 id="gradle-專案中-kotlin-資料的新目錄" tabindex="-1">Gradle 專案中 Kotlin 資料的新目錄 <a class="header-anchor" href="#gradle-專案中-kotlin-資料的新目錄" aria-label="Permalink to &quot;Gradle 專案中 Kotlin 資料的新目錄&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>不要將 <code>.kotlin</code> 目錄提交到版本控制。 例如，如果您使用 Git，請將 <code>.kotlin</code> 添加到專案的 <code>.gitignore</code> 檔案中。</p></div><p>在 Kotlin 1.8.20 中，Kotlin Gradle 外掛程式切換到將其資料儲存在 Gradle 專案快取目錄中：<code>&lt;project-root-directory&gt;/.gradle/kotlin</code>。然而，<code>.gradle</code> 目錄僅保留給 Gradle， 因此它不是面向未來的。</p><p>為了解決這個問題，從 Kotlin 2.0.0 開始，我們預設會將 Kotlin 資料儲存在您的 <code>&lt;project-root-directory&gt;/.kotlin</code> 中。 為了向後相容性，我們將繼續將一些資料儲存在 <code>.gradle/kotlin</code> 目錄中。</p><p>您可以配置的新 Gradle 屬性是：</p><table tabindex="0"><thead><tr><th>Gradle 屬性</th><th>說明</th></tr></thead><tbody><tr><td><code>kotlin.project.persistent.dir</code></td><td>配置儲存專案層級資料的位置。預設值：<code>&lt;project-root-directory&gt;/.kotlin</code></td></tr><tr><td><code>kotlin.project.persistent.dir.gradle.disableWrite</code></td><td>控制是否禁用將 Kotlin 資料寫入 <code>.gradle</code> 目錄的布林值。預設值：<code>false</code></td></tr></tbody></table><p>將這些屬性添加到您專案的 <code>gradle.properties</code> 檔案中，使其生效。</p><h3 id="kotlin-native-編譯器按需下載" tabindex="-1">Kotlin/Native 編譯器按需下載 <a class="header-anchor" href="#kotlin-native-編譯器按需下載" aria-label="Permalink to &quot;Kotlin/Native 編譯器按需下載&quot;">​</a></h3><p>在 Kotlin 2.0.0 之前，如果您在多平台專案的 Gradle 建置指令碼中配置了 <a href="/zh-Hant/kotlin/native-target-support">Kotlin/Native 目標</a>，Gradle 總是在 <a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:configuration" target="_blank" rel="noreferrer">配置階段</a> 下載 Kotlin/Native 編譯器。</p><p>即使沒有任務需要在 <a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:execution" target="_blank" rel="noreferrer">執行階段</a> 運行以編譯 Kotlin/Native 目標的程式碼，這種情況也會發生。以這種方式下載 Kotlin/Native 編譯器對於只想檢查專案中的 JVM 或 JavaScript 程式碼的使用者（例如，作為 CI 流程的一部分對其 Kotlin 專案執行測試或檢查）來說效率特別低。</p><p>在 Kotlin 2.0.0 中，我們在 Kotlin Gradle 外掛程式中更改了此行為，以便 Kotlin/Native 編譯器在 <a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:execution" target="_blank" rel="noreferrer">執行階段</a> 下載，並且 <strong>僅當</strong> 請求編譯 Kotlin/Native 目標時才下載。</p><p>反過來，Kotlin/Native 編譯器的依賴項現在也不再作為編譯器的一部分下載，而是在執行階段同時下載。</p><p>如果您遇到新行為的任何問題，您可以透過將以下 Gradle 屬性添加到您的 <code>gradle.properties</code> 檔案中，暫時切換回以前的行為：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.toolchain.enabled=false</span></span></code></pre></div><p>從 Kotlin 1.9.20-Beta 開始，Kotlin/Native 發佈版本已與 CDN 一起發佈到 <a href="https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-native-prebuilt/" target="_blank" rel="noreferrer">Maven Central</a>。</p><p>這允許我們更改 Kotlin 尋找和下載必要 Artifact 的方式。預設情況下，它現在使用您在專案的 <code>repositories {}</code> 區塊中指定的 Maven 儲存庫，而不是 CDN。</p><p>您可以透過將以下 Gradle 屬性設定到您的 <code>gradle.properties</code> 檔案中，暫時切換此行為：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.distribution.downloadFromMaven=false</span></span></code></pre></div><p>請將任何問題報告到我們的問題追蹤器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>。這些更改預設行為的 Gradle 屬性都是暫時性的，並將在未來版本中移除。</p><h3 id="棄用舊的定義編譯器選項方法" tabindex="-1">棄用舊的定義編譯器選項方法 <a class="header-anchor" href="#棄用舊的定義編譯器選項方法" aria-label="Permalink to &quot;棄用舊的定義編譯器選項方法&quot;">​</a></h3><p>在此版本中，我們繼續優化您設定編譯器選項的方式。它應該能解決不同方式之間的歧義，並使專案配置更加直觀。</p><p>從 Kotlin 2.0.0 開始，以下用於指定編譯器選項的 DSL 已棄用：</p><ul><li><p>來自實作所有 Kotlin 編譯任務的 <code>KotlinCompile</code> 介面的 <code>kotlinOptions</code> DSL。請改用 <code>KotlinCompilationTask&lt;CompilerOptions&gt;</code>。</p></li><li><p>來自 <code>KotlinCompilation</code> 介面且類型為 <code>HasCompilerOptions</code> 的 <code>compilerOptions</code> 屬性。此 DSL 與其他 DSL 不一致，並配置與 <code>KotlinCompilation.compileTaskProvider</code> 編譯任務中的 <code>compilerOptions</code> 相同的 <code>KotlinCommonCompilerOptions</code> 物件，這令人困惑。</p><p>相反，我們建議使用 Kotlin 編譯任務中的 <code>compilerOptions</code> 屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlinCompilation.compileTaskProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compileTaskProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                compilerOptions.freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xir-minimized-member-names=false&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>來自 <code>KotlinCompilation</code> 介面的 <code>kotlinOptions</code> DSL。</p></li><li><p>來自 <code>KotlinNativeArtifactConfig</code> 介面、<code>KotlinNativeLink</code> 類別 和 <code>KotlinNativeLinkArtifactTask</code> 類別的 <code>kotlinOptions</code> DSL。請改用 <code>toolOptions</code> DSL。</p></li><li><p>來自 <code>KotlinJsDce</code> 介面的 <code>dceOptions</code> DSL。請改用 <code>toolOptions</code> DSL。</p></li></ul><p>有關如何在 Kotlin Gradle 外掛程式中指定編譯器選項的更多資訊，請參閱 <a href="/zh-Hant/kotlin/gradle-compiler-options#how-to-define-options">如何定義選項</a>。</p><h3 id="提高最低支援的-agp-版本" tabindex="-1">提高最低支援的 AGP 版本 <a class="header-anchor" href="#提高最低支援的-agp-版本" aria-label="Permalink to &quot;提高最低支援的 AGP 版本&quot;">​</a></h3><p>從 Kotlin 2.0.0 開始，最低支援的 Android Gradle 外掛程式版本為 7.1.3。</p><h3 id="用於嘗試最新語言版本的新-gradle-屬性" tabindex="-1">用於嘗試最新語言版本的新 Gradle 屬性 <a class="header-anchor" href="#用於嘗試最新語言版本的新-gradle-屬性" aria-label="Permalink to &quot;用於嘗試最新語言版本的新 Gradle 屬性&quot;">​</a></h3><p>在 Kotlin 2.0.0 之前，我們有以下 Gradle 屬性來試用新的 K2 編譯器：<code>kotlin.experimental.tryK2</code>。 現在 K2 編譯器在 Kotlin 2.0.0 中預設啟用，我們決定將此屬性演進為一種新形式，您可以使用它在您的專案中嘗試最新的語言版本：<code>kotlin.experimental.tryNext</code>。當您在 <code>gradle.properties</code> 檔案中使用此屬性時，Kotlin Gradle 外掛程式會將語言版本增加到比您的 Kotlin 版本預設值高一級。例如，在 Kotlin 2.0.0 中，預設語言版本是 2.0，因此該屬性配置語言版本 2.1。</p><p>這個新的 Gradle 屬性在 <a href="/zh-Hant/kotlin/gradle-compilation-and-caches#build-reports">建置報告</a> 中產生與以前使用 <code>kotlin.experimental.tryK2</code> 相似的指標。配置的語言版本包含在輸出中。例如：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>##### &#39;kotlin.experimental.tryNext&#39; results #####</span></span>
<span class="line"><span>:app:compileKotlin: 2.1 language version</span></span>
<span class="line"><span>:lib:compileKotlin: 2.1 language version</span></span>
<span class="line"><span>##### 100% (2/2) tasks have been compiled with Kotlin 2.1 #####</span></span></code></pre></div><p>要了解有關如何啟用建置報告及其內容的更多資訊，請參閱 <a href="/zh-Hant/kotlin/gradle-compilation-and-caches#build-reports">建置報告</a>。</p><h3 id="kapt-配置繼承超級配置中的註解處理器" tabindex="-1">kapt 配置繼承超級配置中的註解處理器 <a class="header-anchor" href="#kapt-配置繼承超級配置中的註解處理器" aria-label="Permalink to &quot;kapt 配置繼承超級配置中的註解處理器&quot;">​</a></h3><p>在 Kotlin 2.0.0 之前，如果您想在單獨的 Gradle 配置中定義一組共同的註解處理器，並在您的子專案的 kapt 特定配置中擴充此配置，kapt 將跳過註解處理，因為它找不到任何註解處理器。在 Kotlin 2.0.0 中，kapt 可以成功檢測到您的註解處理器存在間接依賴項。</p><p>例如，對於使用 <a href="https://dagger.dev/" target="_blank" rel="noreferrer">Dagger</a> 的子專案，在您的 <code>build.gradle(.kts)</code> 檔案中，使用以下配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonAnnotationProcessors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configurations.creating</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configurations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kapt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extendsFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonAnnotationProcessors) }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.dagger:dagger:2.48.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    commonAnnotationProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.dagger:dagger-compiler:2.48.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此範例中，<code>commonAnnotationProcessors</code> Gradle 配置是您希望用於所有專案的共同註解處理配置。您使用 <a href="https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.Configuration.html#org.gradle.api.artifacts.Configuration:extendsFrom" target="_blank" rel="noreferrer"><code>extendsFrom()</code></a> 方法將 <code>commonAnnotationProcessors</code> 添加為超級配置。kapt 看到 <code>commonAnnotationProcessors</code> Gradle 配置對 Dagger 註解處理器存在依賴項。因此，kapt 將 Dagger 註解處理器包含在其註解處理配置中。</p><p>感謝 Christoph Loy 的 <a href="https://github.com/JetBrains/kotlin/pull/5198" target="_blank" rel="noreferrer">實作</a>！</p><h3 id="kotlin-gradle-外掛程式不再使用棄用的-gradle-慣例" tabindex="-1">Kotlin Gradle 外掛程式不再使用棄用的 Gradle 慣例 <a class="header-anchor" href="#kotlin-gradle-外掛程式不再使用棄用的-gradle-慣例" aria-label="Permalink to &quot;Kotlin Gradle 外掛程式不再使用棄用的 Gradle 慣例&quot;">​</a></h3><p>在 Kotlin 2.0.0 之前，如果您使用 Gradle 8.2 或更高版本，Kotlin Gradle 外掛程式錯誤地使用了在 Gradle 8.2 中已棄用的 Gradle 慣例。這導致 Gradle 報告建置棄用。在 Kotlin 2.0.0 中，Kotlin Gradle 外掛程式已更新，不再觸發這些棄用警告，當您使用 Gradle 8.2 或更高版本時。</p><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><p>此版本進一步穩定 Kotlin 標準函式庫，並使更多現有函式對所有平台通用：</p><ul><li><a href="#stable-replacement-of-the-enum-class-values-generic-function">enum 類別值泛型函式的穩定取代</a></li><li><a href="#stable-autocloseable-interface">穩定的 AutoCloseable 介面</a></li><li><a href="#common-protected-property-abstractmutablelist-modcount">共同保護屬性 AbstractMutableList.modCount</a></li><li><a href="#common-protected-function-abstractmutablelist-removerange">共同保護函式 AbstractMutableList.removeRange</a></li><li><a href="#common-string-tochararray-destination-function">共同 String.toCharArray(destination)</a></li></ul><h3 id="enum-類別值泛型函式的穩定取代" tabindex="-1">enum 類別值泛型函式的穩定取代 <a class="header-anchor" href="#enum-類別值泛型函式的穩定取代" aria-label="Permalink to &quot;enum 類別值泛型函式的穩定取代&quot;">​</a></h3><p>在 Kotlin 2.0.0 中，<code>enumEntries&lt;T&gt;()</code> 函式變得 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">穩定</a>。 <code>enumEntries&lt;T&gt;()</code> 函式是泛型 <code>enumValues&lt;T&gt;()</code> 函式的取代。新函式返回給定列舉類型 <code>T</code> 的所有列舉條目列表。列舉類別的 <code>entries</code> 屬性以前已引入並穩定，以取代合成的 <code>values()</code> 函式。有關 <code>entries</code> 屬性的更多資訊，請參閱 <a href="/zh-Hant/kotlin/whatsnew1820#a-modern-and-performant-replacement-of-the-enum-class-values-function">Kotlin 1.8.20 的新功能</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>enumValues&lt;T&gt;()</code> 函式仍然受支援，但我們建議您改用 <code>enumEntries&lt;T&gt;()</code> 函式，因為它對效能的影響較小。每次呼叫 <code>enumValues&lt;T&gt;()</code> 時，都會建立一個新陣列，而每次呼叫 <code>enumEntries&lt;T&gt;()</code> 時，每次都會返回相同的列表，這效率更高。</p></div><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { RED, GREEN, BLUE }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printAllValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enumEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.name })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printAllValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RGB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// RED, GREEN, BLUE</span></span></code></pre></div><h3 id="穩定的-autocloseable-介面" tabindex="-1">穩定的 AutoCloseable 介面 <a class="header-anchor" href="#穩定的-autocloseable-介面" aria-label="Permalink to &quot;穩定的 AutoCloseable 介面&quot;">​</a></h3><p>在 Kotlin 2.0.0 中，共同的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-auto-closeable/" target="_blank" rel="noreferrer"><code>AutoCloseable</code></a> 介面變得 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">穩定</a>。它允許您輕鬆關閉資源，並包含幾個有用的函式：</p><ul><li><code>use()</code> 擴充函式，它在選定的資源上執行給定的區塊函式，然後無論是否拋出例外，都正確關閉它。</li><li><code>AutoCloseable()</code> 建構子函式，用於建立 <code>AutoCloseable</code> 介面的實例。</li></ul><p>在下面的範例中，我們定義 <code>XMLWriter</code> 介面並假設存在實作它的資源。 例如，此資源可能是一個類別，它打開檔案，寫入 XML 內容，然後關閉它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flushAndClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> writeBooksTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> autoCloseable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AutoCloseable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { writer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flushAndClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    autoCloseable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        writer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bookstore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;category&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fiction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Harry Potter and the Prisoner of Azkaban&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;J. K. Rowling&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1999&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;29.99&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;category&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;programming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin in Action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dmitry Jemerov&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Svetlana Isakova&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2017&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;25.19&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="共同保護屬性-abstractmutablelist-modcount" tabindex="-1">共同保護屬性 AbstractMutableList.modCount <a class="header-anchor" href="#共同保護屬性-abstractmutablelist-modcount" aria-label="Permalink to &quot;共同保護屬性 AbstractMutableList.modCount&quot;">​</a></h3><p>在此版本中，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-mutable-list/mod-count.html" target="_blank" rel="noreferrer"><code>modCount</code></a><code>protected</code> 屬性在 <code>AbstractMutableList</code> 介面中變為共同屬性。以前，<code>modCount</code> 屬性在每個平台上都可用，但對於共同目標則不可用。現在，您可以建立 <code>AbstractMutableList</code> 的自訂實作，並在共同程式碼中存取該屬性。</p><p>該屬性會追蹤對集合進行的結構性修改次數。這包括改變集合大小或以可能導致正在進行的迭代返回不正確結果的方式修改列表的操作。</p><p>在實作自訂列表時，您可以使用 <code>modCount</code> 屬性來註冊和檢測並發修改。</p><h3 id="共同保護函式-abstractmutablelist-removerange" tabindex="-1">共同保護函式 AbstractMutableList.removeRange <a class="header-anchor" href="#共同保護函式-abstractmutablelist-removerange" aria-label="Permalink to &quot;共同保護函式 AbstractMutableList.removeRange&quot;">​</a></h3><p>在此版本中，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-mutable-list/remove-range.html" target="_blank" rel="noreferrer"><code>removeRange()</code></a><code>protected</code> 函式在 <code>AbstractMutableList</code> 介面中變為共同函式。以前，它在每個平台上都可用，但對於共同目標則不可用。現在，您可以建立 <code>AbstractMutableList</code> 的自訂實作，並在共同程式碼中覆寫該函式。</p><p>該函式從此列表中移除指定範圍內的元素。透過覆寫此函式，您可以利用自訂實作並提高列表操作的效能。</p><h3 id="共同-string-tochararray-destination-函式" tabindex="-1">共同 String.toCharArray(destination) 函式 <a class="header-anchor" href="#共同-string-tochararray-destination-函式" aria-label="Permalink to &quot;共同 String.toCharArray(destination) 函式&quot;">​</a></h3><p>此版本引入了一個共同的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-char-array.html" target="_blank" rel="noreferrer"><code>String.toCharArray(destination)</code></a> 函式。以前，它僅在 JVM 上可用。</p><p>讓我們將它與現有的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-char-array.html" target="_blank" rel="noreferrer"><code>String.toCharArray()</code></a> 函式進行比較。 它會建立一個新的 <code>CharArray</code>，其中包含指定字串的字元。然而，新的共同 <code>String.toCharArray(destination)</code> 函式會將 <code>String</code> 字元移至現有的目標 <code>CharArray</code> 中。如果您已經有一個要填充的緩衝區，這會很有用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin is awesome!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> destinationArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myString.length)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 轉換字串並將其儲存在 destinationArray 中：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(destinationArray)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (char </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> destinationArray) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$char</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // K o t l i n   i s   a w e s o m e ! </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="安裝-kotlin-2-0-0" tabindex="-1">安裝 Kotlin 2.0.0 <a class="header-anchor" href="#安裝-kotlin-2-0-0" aria-label="Permalink to &quot;安裝 Kotlin 2.0.0&quot;">​</a></h2><p>從 IntelliJ IDEA 2023.3 和 Android Studio Iguana (2023.2.1) Canary 15 開始，Kotlin 外掛程式作為捆綁外掛程式隨您的 IDE 一起發佈。這表示您無法再從 JetBrains Marketplace 安裝此外掛程式。</p><p>要更新到新的 Kotlin 版本，請在您的建置指令碼中將 <a href="/zh-Hant/kotlin/releases#update-to-a-new-kotlin-version">Kotlin 版本更改</a> 為 2.0.0。</p>`,78))])}const B=d(g,[["render",y]]);export{D as __pageData,B as default};
