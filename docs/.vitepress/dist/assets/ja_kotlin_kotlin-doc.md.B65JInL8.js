import{_ as s,c as e,o as i,ag as n}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"Kotlinコードをドキュメント化する: KDoc","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/kotlin-doc.md","filePath":"ja/kotlin/kotlin-doc.md","lastUpdated":1754307826000}'),t={name:"ja/kotlin/kotlin-doc.md"};function o(l,a,p,r,h,d){return i(),e("div",null,a[0]||(a[0]=[n('<h1 id="kotlinコードをドキュメント化する-kdoc" tabindex="-1">Kotlinコードをドキュメント化する: KDoc <a class="header-anchor" href="#kotlinコードをドキュメント化する-kdoc" aria-label="Permalink to &quot;Kotlinコードをドキュメント化する: KDoc&quot;">​</a></h1><p>Kotlinコードをドキュメント化するために使用される言語（JavaのJavadocに相当）は、<strong>KDoc</strong>と呼ばれます。要するに、KDocは、ブロックタグ（Kotlin固有のコンストラクトをサポートするように拡張されています）にはJavadocの構文を、インラインマークアップにはMarkdownを組み合わせています。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>KotlinのドキュメンテーションエンジンであるDokkaは、KDocを理解し、さまざまな形式でドキュメントを生成できます。 詳細については、<a href="/ja/kotlin/dokka-introduction">Dokkaのドキュメント</a>をお読みください。</p></div><h2 id="kdocの構文" tabindex="-1">KDocの構文 <a class="header-anchor" href="#kdocの構文" aria-label="Permalink to &quot;KDocの構文&quot;">​</a></h2><p>Javadocと同様に、KDocコメントは <code>/**</code> で始まり <code>*/</code> で終わります。コメントの各行はアスタリスクで始めることができますが、これはコメントの内容の一部とは見なされません。</p><p>慣例として、ドキュメンテーションテキストの最初の段落（最初の空行までのテキストブロック）は要素の概要説明であり、その後のテキストは詳細な説明となります。</p><p>各ブロックタグは新しい行から始まり、<code>@</code> 文字で始まります。</p><p>KDocを使用してドキュメント化されたクラスの例を以下に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * A group of *members*.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * This class has no useful logic; it&#39;s just a documentation example.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> T</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> the type of a member in this group.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@property</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> name</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> the name of this group.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@constructor</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> Creates an empty group.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * Adds a [member] to this group.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> the new size of the group.</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(member: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="ブロックタグ" tabindex="-1">ブロックタグ <a class="header-anchor" href="#ブロックタグ" aria-label="Permalink to &quot;ブロックタグ&quot;">​</a></h3><p>KDocは現在、以下のブロックタグをサポートしています。</p><h3 id="param-name" tabindex="-1"><code>@param _name_</code> <a class="header-anchor" href="#param-name" aria-label="Permalink to &quot;`@param _name_`&quot;">​</a></h3><p>関数の値パラメータ、またはクラス、プロパティ、関数の型パラメータをドキュメント化します。パラメータ名を説明からより明確に区別したい場合は、パラメータ名を角括弧で囲むことができます。したがって、以下の2つの構文は同等です。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@param name description.</span></span>\n<span class="line"><span>@param[name] description.</span></span></code></pre></div><h3 id="return" tabindex="-1"><code>@return</code> <a class="header-anchor" href="#return" aria-label="Permalink to &quot;`@return`&quot;">​</a></h3><p>関数の戻り値をドキュメント化します。</p><h3 id="constructor" tabindex="-1"><code>@constructor</code> <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;`@constructor`&quot;">​</a></h3><p>クラスのプライマリコンストラクタをドキュメント化します。</p><h3 id="receiver" tabindex="-1"><code>@receiver</code> <a class="header-anchor" href="#receiver" aria-label="Permalink to &quot;`@receiver`&quot;">​</a></h3><p>拡張関数のレシーバをドキュメント化します。</p><h3 id="property-name" tabindex="-1"><code>@property _name_</code> <a class="header-anchor" href="#property-name" aria-label="Permalink to &quot;`@property _name_`&quot;">​</a></h3><p>指定された名前を持つクラスのプロパティをドキュメント化します。このタグは、プライマリコンストラクタで宣言されたプロパティをドキュメント化するのに使用できます。その場合、プロパティ定義の直前にドキュメントコメントを配置するのは不自然になります。</p><h3 id="throws-class-exception-class" tabindex="-1"><code>@throws _class_, @exception _class_</code> <a class="header-anchor" href="#throws-class-exception-class" aria-label="Permalink to &quot;`@throws _class_, @exception _class_`&quot;">​</a></h3><p>メソッドによってスローされる可能性のある例外をドキュメント化します。Kotlinにはチェック例外がないため、すべての可能な例外がドキュメント化されるという期待もありませんが、このタグはクラスのユーザーに有用な情報を提供する際に使用できます。</p><h3 id="sample-identifier" tabindex="-1"><code>@sample _identifier_</code> <a class="header-anchor" href="#sample-identifier" aria-label="Permalink to &quot;`@sample _identifier_`&quot;">​</a></h3><p>指定された完全修飾名を持つ関数の本体を現在の要素のドキュメントに埋め込み、その要素がどのように使用され得るかの例を示すために使用します。</p><h3 id="see-identifier" tabindex="-1"><code>@see _identifier_</code> <a class="header-anchor" href="#see-identifier" aria-label="Permalink to &quot;`@see _identifier_`&quot;">​</a></h3><p>指定されたクラスまたはメソッドへのリンクを、ドキュメントの <strong>「関連項目」</strong> ブロックに追加します。</p><h3 id="author" tabindex="-1"><code>@author</code> <a class="header-anchor" href="#author" aria-label="Permalink to &quot;`@author`&quot;">​</a></h3><p>ドキュメント化される要素の作成者を指定します。</p><h3 id="since" tabindex="-1"><code>@since</code> <a class="header-anchor" href="#since" aria-label="Permalink to &quot;`@since`&quot;">​</a></h3><p>ドキュメント化される要素が導入されたソフトウェアのバージョンを指定します。</p><h3 id="suppress" tabindex="-1"><code>@suppress</code> <a class="header-anchor" href="#suppress" aria-label="Permalink to &quot;`@suppress`&quot;">​</a></h3><p>生成されるドキュメントから要素を除外します。モジュールの公式APIの一部ではないが、外部から可視である必要がある要素に使用できます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>KDocは <code>@deprecated</code> タグをサポートしていません。代わりに、<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-deprecated/" target="_blank" rel="noreferrer"><code>@Deprecated</code></a> アノテーションを使用してください。</p></div><h2 id="インラインマークアップ" tabindex="-1">インラインマークアップ <a class="header-anchor" href="#インラインマークアップ" aria-label="Permalink to &quot;インラインマークアップ&quot;">​</a></h2><p>インラインマークアップには、KDocは通常の<a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noreferrer">Markdown</a>構文を使用しますが、コード内の他の要素へのリンクのための短縮構文をサポートするように拡張されています。</p><h3 id="要素へのリンク" tabindex="-1">要素へのリンク <a class="header-anchor" href="#要素へのリンク" aria-label="Permalink to &quot;要素へのリンク&quot;">​</a></h3><p>他の要素（クラス、メソッド、プロパティ、またはパラメータ）にリンクするには、その名前を角括弧で囲むだけです。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Use the method [foo] for this purpose.</span></span></code></pre></div><p>リンクにカスタムラベルを指定したい場合は、要素リンクの前に、別の角括弧のセットで追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Use [this method][foo] for this purpose.</span></span></code></pre></div><p>要素リンクでは完全修飾名も使用できます。Javadocとは異なり、完全修飾名はメソッド名の前でも、常にドット文字を使用してコンポーネントを区切ることに注意してください。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Use [kotlin.reflect.KClass.properties] to enumerate the properties of the class.</span></span></code></pre></div><p>要素リンク内の名前は、ドキュメント化される要素内で名前が使用された場合と同じルールを使用して解決されます。特に、これは現在のファイルに名前をインポートしている場合、KDocコメントで使用する際に完全修飾する必要がないことを意味します。</p><p>KDocには、リンク内でオーバーロードされたメンバーを解決するための構文がないことに注意してください。Kotlinのドキュメント生成ツールは、関数のすべてのオーバーロードのドキュメントを同じページに配置するため、リンクを機能させるために特定のオーバーロードされた関数を識別する必要はありません。</p><h3 id="外部リンク" tabindex="-1">外部リンク <a class="header-anchor" href="#外部リンク" aria-label="Permalink to &quot;外部リンク&quot;">​</a></h3><p>外部リンクを追加するには、標準的なMarkdown構文を使用します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>For more information about KDoc syntax, see [KDoc](&lt;example-URL&gt;).</span></span></code></pre></div><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>Kotlinのドキュメント生成ツールであるDokkaの使い方はこちらです: <a href="/ja/kotlin/dokka-introduction">Dokka</a>。</p>',51)]))}const u=s(t,[["render",o]]);export{k as __pageData,u as default};
