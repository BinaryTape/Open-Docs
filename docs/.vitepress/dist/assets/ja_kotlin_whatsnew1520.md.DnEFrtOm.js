import{_ as k,C as e,c as o,o as d,j as i,G as t,ag as h,a as s,w as n}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"Kotlin 1.5.20 の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew1520.md","filePath":"ja/kotlin/whatsnew1520.md","lastUpdated":1754307826000}'),c={name:"ja/kotlin/whatsnew1520.md"};function g(E,a,y,u,b,m){const p=e("YouTubeVideo"),l=e("tab"),r=e("tabs");return d(),o("div",null,[a[2]||(a[2]=i("h1",{id:"kotlin-1-5-20-の新機能",tabindex:"-1"},[s("Kotlin 1.5.20 の新機能 "),i("a",{class:"header-anchor",href:"#kotlin-1-5-20-の新機能","aria-label":'Permalink to "Kotlin 1.5.20 の新機能"'},"​")],-1)),a[3]||(a[3]=i("p",null,[i("em",null,[i("a",{href:"/ja/kotlin/releases#release-details"},"リリース日: 2021年6月24日")])],-1)),a[4]||(a[4]=i("p",null,"Kotlin 1.5.20 では、1.5.0 の新機能で発見された問題の修正に加え、さまざまなツール改善が含まれています。",-1)),a[5]||(a[5]=i("p",null,[s("変更点の概要については、"),i("a",{href:"https://blog.jetbrains.com/kotlin/2021/06/kotlin-1-5-20-released/",target:"_blank",rel:"noreferrer"},"リリースブログ記事"),s("と、以下の動画で確認できます。")],-1)),t(p,{src:"https://www.youtube.com/v/SV8CgSXQe44",title:"Kotlin 1.5.20"}),a[6]||(a[6]=h(`<h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.5.20 では、JVMプラットフォームで以下のアップデートが適用されます。</p><ul><li><a href="#string-concatenation-via-invokedynamic">invokedynamic を介した文字列連結</a></li><li><a href="#support-for-jspecify-nullness-annotations">JSpecify nullness アノテーションのサポート</a></li><li><a href="#support-for-calling-java-s-lombok-generated-methods-within-modules-that-have-kotlin-and-java-code">Kotlin および Java コードを持つモジュール内での Java の Lombok 生成メソッドの呼び出しサポート</a></li></ul><h3 id="invokedynamic-を介した文字列連結" tabindex="-1">invokedynamic を介した文字列連結 <a class="header-anchor" href="#invokedynamic-を介した文字列連結" aria-label="Permalink to &quot;invokedynamic を介した文字列連結&quot;">​</a></h3><p>Kotlin 1.5.20 は、JVM 9+ ターゲットで文字列連結を<a href="https://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html#invokedynamic" target="_blank" rel="noreferrer">動的呼び出し</a> (<code>invokedynamic</code>) にコンパイルすることで、最新の Java バージョンに対応しています。 より正確には、文字列連結のために <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/StringConcatFactory.html#makeConcatWithConstants-java.lang.invoke.MethodHandles.Lookup-java.lang.String-java.lang.invoke.MethodType-java.lang.String-java.lang.Object...-" target="_blank" rel="noreferrer"><code>StringConcatFactory.makeConcatWithConstants()</code></a> を使用します。</p><p>以前のバージョンで使用されていた <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/StringBuilder.html#append-java.lang.String-" target="_blank" rel="noreferrer"><code>StringBuilder.append()</code></a> を介した連結に戻すには、コンパイラオプション <code>-Xstring-concat=inline</code> を追加します。</p><p>コンパイラオプションの追加方法については、<a href="/ja/kotlin/gradle-compiler-options">Gradle</a>、<a href="/ja/kotlin/maven#specify-compiler-options">Maven</a>、および<a href="/ja/kotlin/compiler-reference#compiler-options">コマンドラインコンパイラ</a>を参照してください。</p><h3 id="jspecify-nullness-アノテーションのサポート" tabindex="-1">JSpecify nullness アノテーションのサポート <a class="header-anchor" href="#jspecify-nullness-アノテーションのサポート" aria-label="Permalink to &quot;JSpecify nullness アノテーションのサポート&quot;">​</a></h3><p>Kotlin コンパイラは、さまざまな種類の<a href="/ja/kotlin/java-interop#nullability-annotations">null許容性アノテーション</a>を読み取り、Java から Kotlin へ null許容性情報を渡すことができます。バージョン 1.5.20 では、Java nullness アノテーションの標準統一セットを含む <a href="https://jspecify.dev/" target="_blank" rel="noreferrer">JSpecify プロジェクト</a>のサポートが導入されました。</p><p>JSpecify を使用すると、Kotlin が Java との null安全性相互運用を維持するのに役立つ、より詳細な null許容性情報を提供できます。宣言、パッケージ、またはモジュールスコープのデフォルトの null許容性を設定したり、パラメトリックな null許容性を指定したりできます。これに関する詳細は、<a href="https://jspecify.dev/docs/user-guide" target="_blank" rel="noreferrer">JSpecify ユーザーガイド</a>で確認できます。</p><p>Kotlin が JSpecify アノテーションをどのように扱うかの例を以下に示します。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaClass.java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.jspecify.nullness.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NullMarked</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JavaClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notNullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @Nullable String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Test.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JavaClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  notNullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().length </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  nullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().length    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Warning: receiver nullability mismatch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>1.5.20 では、JSpecify が提供する null許容性情報に基づくすべての null許容性の不一致が警告として報告されます。 JSpecify を使用する際に厳格モード（エラー報告あり）を有効にするには、<code>-Xjspecify-annotations=strict</code> および <code>-Xtype-enhancement-improvements-strict-mode</code> コンパイラオプションを使用してください。 JSpecify プロジェクトは活発に開発中であることに注意してください。その API と実装は、いつでも大幅に変更される可能性があります。</p><p><a href="/ja/kotlin/java-interop#null-safety-and-platform-types">null安全性とプラットフォーム型についてさらに詳しく学ぶ</a>。</p><h3 id="kotlin-および-java-コードを持つモジュール内での-java-の-lombok-生成メソッドの呼び出しサポート" tabindex="-1">Kotlin および Java コードを持つモジュール内での Java の Lombok 生成メソッドの呼び出しサポート <a class="header-anchor" href="#kotlin-および-java-コードを持つモジュール内での-java-の-lombok-生成メソッドの呼び出しサポート" aria-label="Permalink to &quot;Kotlin および Java コードを持つモジュール内での Java の Lombok 生成メソッドの呼び出しサポート&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Lombok コンパイラプラグインは<a href="/ja/kotlin/components-stability">実験的</a>です。 これはいつでも削除または変更される可能性があります。評価目的のみにご使用ください。 <a href="https://youtrack.jetbrains.com/issue/KT-7112" target="_blank" rel="noreferrer">YouTrack</a> でのフィードバックをお待ちしております。</p></div><p>Kotlin 1.5.20 では、実験的な <a href="/ja/kotlin/lombok">Lombok コンパイラプラグイン</a>が導入されました。このプラグインにより、Kotlin と Java のコードを持つモジュール内で、Java の <a href="https://projectlombok.org/" target="_blank" rel="noreferrer">Lombok</a> 宣言を生成して使用することが可能になります。Lombok アノテーションは Java ソース内でのみ機能し、Kotlin コードで使用しても無視されます。</p><p>このプラグインは以下の注釈をサポートしています。</p><ul><li><code>@Getter</code>、<code>@Setter</code></li><li><code>@NoArgsConstructor</code>、<code>@RequiredArgsConstructor</code>、<code>@AllArgsConstructor</code></li><li><code>@Data</code></li><li><code>@With</code></li><li><code>@Value</code></li></ul><p>私たちはこのプラグインの作業を続けています。現在の詳細な状況については、<a href="https://github.com/JetBrains/kotlin/tree/master/plugins/lombok" target="_blank" rel="noreferrer">Lombok コンパイラプラグインの README</a> を参照してください。</p><p>現在、<code>@Builder</code> アノテーションをサポートする計画はありません。しかし、<a href="https://youtrack.jetbrains.com/issue/KT-46959" target="_blank" rel="noreferrer">YouTrack で <code>@Builder</code> に投票</a>していただければ、検討する可能性があります。</p><p><a href="/ja/kotlin/lombok#gradle">Lombok コンパイラプラグインの設定方法を学ぶ</a>。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native 1.5.20 では、新機能のプレビューとツール改善が提供されています。</p><ul><li><a href="#opt-in-export-of-kdoc-comments-to-generated-objective-c-headers">生成された Objective-C ヘッダーへの KDoc コメントのオプトインエクスポート</a></li><li><a href="#compiler-bug-fixes">コンパイラのバグ修正</a></li><li><a href="#improved-performance-of-array-copyinto-inside-one-array">単一配列内での <code>Array.copyInto()</code> のパフォーマンス向上</a></li></ul><h3 id="生成された-objective-c-ヘッダーへの-kdoc-コメントのオプトインエクスポート" tabindex="-1">生成された Objective-C ヘッダーへの KDoc コメントのオプトインエクスポート <a class="header-anchor" href="#生成された-objective-c-ヘッダーへの-kdoc-コメントのオプトインエクスポート" aria-label="Permalink to &quot;生成された Objective-C ヘッダーへの KDoc コメントのオプトインエクスポート&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>生成された Objective-C ヘッダーへの KDoc コメントのエクスポート機能は<a href="/ja/kotlin/components-stability">実験的</a>です。 これはいつでも削除または変更される可能性があります。 オプトインが必要であり（詳細は下記参照）、評価目的のみにご使用ください。 <a href="https://youtrack.com/issue/KT-38600" target="_blank" rel="noreferrer">YouTrack</a> でのフィードバックをお待ちしております。</p></div><p>Kotlin/Native コンパイラで、Kotlin コードの<a href="/ja/kotlin/kotlin-doc">ドキュメンテーションコメント (KDoc)</a> を、そこから生成される Objective-C フレームワークにエクスポートできるようになり、フレームワークの利用者から見えるようになりました。</p><p>例えば、KDoc を含む以下の Kotlin コードは、</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Prints the sum of the arguments.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Properly handles the case when the sum doesn&#39;t fit in 32-bit integer.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)</span></span></code></pre></div><p>以下の Objective-C ヘッダーを生成します。</p><div class="language-objc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objc</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Prints the sum of the arguments.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Properly handles the case when the sum doesn&#39;t fit in 32-bit integer.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)printSumA:(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)a b:(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)b </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__attribute__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;printSum(a:b:)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span></span></code></pre></div><p>これは Swift でも同様に機能します。</p><p>Objective-C ヘッダーへの KDoc コメントのエクスポート機能を試すには、<code>-Xexport-kdoc</code> コンパイラオプションを使用してください。コメントをエクスポートしたい Gradle プロジェクトの <code>build.gradle(.kts)</code> に以下の行を追加します。</p>`,35)),t(r,{group:"build-script"},{default:n(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    targets."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"mpp"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinNativeTarget"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilations."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"get"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"main"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},").kotlinOptions.freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "-Xexport-kdoc"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:n(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    targets"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilations"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"get("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"main"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlinOptions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "-Xexport-kdoc"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[7]||(a[7]=h(`<p>この <a href="https://youtrack.jetbrains.com/issue/KT-38600" target="_blank" rel="noreferrer">YouTrack チケット</a> でフィードバックを共有していただけると幸いです。</p><h3 id="コンパイラのバグ修正" tabindex="-1">コンパイラのバグ修正 <a class="header-anchor" href="#コンパイラのバグ修正" aria-label="Permalink to &quot;コンパイラのバグ修正&quot;">​</a></h3><p>Kotlin/Native コンパイラは 1.5.20 で複数のバグ修正を受けました。完全なリストは<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.5.20" target="_blank" rel="noreferrer">変更履歴</a>で確認できます。</p><p>互換性に影響する重要なバグ修正があります。以前のバージョンでは、不正な UTF <a href="https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates" target="_blank" rel="noreferrer">サロゲートペア</a>を含む文字列定数はコンパイル中に値が失われていました。現在、そのような値は保持されます。アプリケーション開発者は安全に 1.5.20 に更新でき、何も壊れません。ただし、1.5.20 でコンパイルされたライブラリは、以前のコンパイラバージョンとは互換性がありません。 詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-33175" target="_blank" rel="noreferrer">この YouTrack の問題</a>を参照してください。</p><h3 id="単一配列内での-array-copyinto-のパフォーマンス向上" tabindex="-1">単一配列内での Array.copyInto() のパフォーマンス向上 <a class="header-anchor" href="#単一配列内での-array-copyinto-のパフォーマンス向上" aria-label="Permalink to &quot;単一配列内での Array.copyInto() のパフォーマンス向上&quot;">​</a></h3><p><code>Array.copyInto()</code> がソースとデスティネーションが同じ配列である場合の動作が改善されました。このユースケースにおけるメモリ管理の最適化により、そのような操作は最大で20倍高速になります（コピーされるオブジェクトの数によります）。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>1.5.20 では、新しい <a href="/ja/kotlin/js-ir-compiler">IRベースのバックエンド</a>にプロジェクトを移行するのに役立つガイドを公開しています。</p><h3 id="js-ir-バックエンドの移行ガイド" tabindex="-1">JS IR バックエンドの移行ガイド <a class="header-anchor" href="#js-ir-バックエンドの移行ガイド" aria-label="Permalink to &quot;JS IR バックエンドの移行ガイド&quot;">​</a></h3><p>新しい <a href="/ja/kotlin/js-ir-migration">JS IR バックエンドの移行ガイド</a>は、移行中に発生する可能性のある問題を特定し、それらに対する解決策を提供します。ガイドに記載されていない問題が見つかった場合は、<a href="http://kotl.in/issue" target="_blank" rel="noreferrer">イシュートラッカー</a>に報告してください。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.5.20 では、Gradle エクスペリエンスを向上させる以下の機能が導入されています。</p><ul><li><a href="#caching-for-annotation-processors-classloaders-in-kapt">kapt におけるアノテーションプロセッサのクラスローダーのキャッシュ</a></li><li><a href="#deprecation-of-the-kotlin-parallel-tasks-in-project-build-property"><code>kotlin.parallel.tasks.in.project</code> ビルドプロパティの非推奨化</a></li></ul><h3 id="kapt-におけるアノテーションプロセッサのクラスローダーのキャッシュ" tabindex="-1">kapt におけるアノテーションプロセッサのクラスローダーのキャッシュ <a class="header-anchor" href="#kapt-におけるアノテーションプロセッサのクラスローダーのキャッシュ" aria-label="Permalink to &quot;kapt におけるアノテーションプロセッサのクラスローダーのキャッシュ&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>kapt におけるアノテーションプロセッサのクラスローダーのキャッシュは<a href="/ja/kotlin/components-stability">実験的</a>です。 これはいつでも削除または変更される可能性があります。評価目的のみにご使用ください。 <a href="https://youtrack.jetbrains.com/issue/KT-28901" target="_blank" rel="noreferrer">YouTrack</a> でのフィードバックをお待ちしております。</p></div><p><a href="/ja/kotlin/kapt">kapt</a> のアノテーションプロセッサのクラスローダーをキャッシュできる新しい実験的機能が追加されました。 この機能は、連続した Gradle 実行において kapt の速度を向上させることができます。</p><p>この機能を有効にするには、<code>gradle.properties</code> ファイルに以下のプロパティを使用します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># positive value will enable caching</span></span>
<span class="line"><span># use the same value as the number of modules that use kapt</span></span>
<span class="line"><span>kapt.classloaders.cache.size=5</span></span>
<span class="line"><span></span></span>
<span class="line"><span># disable for caching to work</span></span>
<span class="line"><span>kapt.include.compile.classpath=false</span></span></code></pre></div><p><a href="/ja/kotlin/kapt">kapt</a> についてさらに詳しく学ぶ。</p><h3 id="kotlin-parallel-tasks-in-project-ビルドプロパティの非推奨化" tabindex="-1">kotlin.parallel.tasks.in.project ビルドプロパティの非推奨化 <a class="header-anchor" href="#kotlin-parallel-tasks-in-project-ビルドプロパティの非推奨化" aria-label="Permalink to &quot;kotlin.parallel.tasks.in.project ビルドプロパティの非推奨化&quot;">​</a></h3><p>このリリースにより、Kotlin の並列コンパイルは、<a href="https://docs.gradle.org/current/userguide/performance.html#parallel_execution" target="_blank" rel="noreferrer">Gradle の並列実行フラグ <code>--parallel</code></a>によって制御されるようになりました。 このフラグを使用すると、Gradle はタスクを並行して実行し、コンパイルタスクの速度を向上させ、リソースをより効率的に利用します。</p><p><code>kotlin.parallel.tasks.in.project</code> プロパティを使用する必要はなくなりました。このプロパティは非推奨となり、次のメジャーリリースで削除されます。</p><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><p>Kotlin 1.5.20 では、文字を扱ういくつかの関数のプラットフォーム固有の実装が変更され、その結果、プラットフォーム間での統一がもたらされます。</p><ul><li><a href="#support-for-all-unicode-digits-in-char-digittoint-in-kotlin-native-and-kotlin-js">Kotlin/Native および Kotlin/JS における <code>Char.digitToInt()</code> でのすべての Unicode 数字のサポート</a>。</li><li><a href="#unification-of-char-islowercase-isuppercase-implementations-across-platforms">プラットフォーム間での <code>Char.isLowerCase()/isUpperCase()</code> 実装の統一</a>。</li></ul><h3 id="kotlin-native-および-kotlin-js-における-char-digittoint-でのすべての-unicode-数字のサポート" tabindex="-1">Kotlin/Native および Kotlin/JS における Char.digitToInt() でのすべての Unicode 数字のサポート <a class="header-anchor" href="#kotlin-native-および-kotlin-js-における-char-digittoint-でのすべての-unicode-数字のサポート" aria-label="Permalink to &quot;Kotlin/Native および Kotlin/JS における Char.digitToInt() でのすべての Unicode 数字のサポート&quot;">​</a></h3><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/digit-to-int.html" target="_blank" rel="noreferrer"><code>Char.digitToInt()</code></a> は、文字が表す10進数字の数値値を返します。1.5.20 より前は、この関数は Kotlin/JVM のみで全ての Unicode 数字文字をサポートしており、Native および JS プラットフォームの実装は ASCII 数字のみをサポートしていました。</p><p>今後、Kotlin/Native と Kotlin/JS の両方で、任意の Unicode 数字文字に対して <code>Char.digitToInt()</code> を呼び出し、その数値表現を取得できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ten </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0661&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0039&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ARABIC-INDIC DIGIT ONE + DIGIT NINE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ten)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="プラットフォーム間での-char-islowercase-isuppercase-実装の統一" tabindex="-1">プラットフォーム間での Char.isLowerCase()/isUpperCase() 実装の統一 <a class="header-anchor" href="#プラットフォーム間での-char-islowercase-isuppercase-実装の統一" aria-label="Permalink to &quot;プラットフォーム間での Char.isLowerCase()/isUpperCase() 実装の統一&quot;">​</a></h3><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-upper-case.html" target="_blank" rel="noreferrer"><code>Char.isUpperCase()</code></a> と <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-lower-case.html" target="_blank" rel="noreferrer"><code>Char.isLowerCase()</code></a> 関数は、文字のケースに応じてブール値を返します。Kotlin/JVM の場合、実装は <code>General_Category</code> と <code>Other_Uppercase</code>/<code>Other_Lowercase</code> の両方の <a href="https://en.wikipedia.org/wiki/Unicode_character_property" target="_blank" rel="noreferrer">Unicode プロパティ</a>をチェックします。</p><p>1.5.20 より前は、他のプラットフォームの実装は異なり、一般カテゴリのみを考慮していました。 1.5.20 では、実装がプラットフォーム間で統一され、文字のケースを決定するために両方のプロパティを使用するようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> latinCapitalA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // has &quot;Lu&quot; general category</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> circledLatinCapitalA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Ⓐ&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // has &quot;Other_Uppercase&quot; property</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(latinCapitalA.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> circledLatinCapitalA.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,33))])}const f=k(c,[["render",g]]);export{F as __pageData,f as default};
