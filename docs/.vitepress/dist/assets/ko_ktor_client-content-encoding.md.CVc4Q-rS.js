import{_ as E,C as n,c as u,o as y,G as s,ag as p,j as t,w as a,a as e}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-content-encoding.md","filePath":"ko/ktor/client-content-encoding.md","lastUpdated":1755457140000}'),F={name:"ko/ktor/client-content-encoding.md"};function _(C,i,m,b,f,B){const k=n("TopicTitle"),h=n("primary-label"),d=n("tldr"),r=n("link-summary"),l=n("code-block"),o=n("TabItem"),c=n("Tabs"),g=n("Links");return y(),u("div",null,[s(k,{labelRef:"client-plugin",title:"콘텐츠 인코딩"}),s(h,{ref:"client-plugin"},null,512),s(d,null,{default:a(()=>i[0]||(i[0]=[t("p",null,[t("b",null,"필수 의존성"),e(": "),t("code",null,"io.ktor:ktor-client-encoding")],-1),t("p",null,[t("b",null,"코드 예시"),e(": "),t("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-content-encoding"}," client-content-encoding ")],-1)])),_:1}),s(r,null,{default:a(()=>i[1]||(i[1]=[e(" ContentEncoding 플러그인을 사용하면 지정된 압축 알고리즘('gzip', 'deflate' 등)을 활성화하고 해당 설정을 구성할 수 있습니다. ")])),_:1}),i[5]||(i[5]=p('<p>Ktor 클라이언트는 <a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-encoding/io.ktor.client.plugins.compression/-content-encoding" target="_blank" rel="noreferrer">ContentEncoding</a> 플러그인을 제공하여 지정된 압축 알고리즘(<code>gzip</code>, <code>deflate</code> 등)을 활성화하고 해당 설정을 구성할 수 있도록 합니다. 이 플러그인의 주요 목적은 다음과 같습니다:</p><ul><li>지정된 품질 값으로 <code>Accept-Encoding</code> 헤더를 설정합니다.</li><li>선택적으로 요청 본문을 인코딩합니다.</li><li><a href="./client-responses#body">서버로부터 수신된 콘텐츠</a>를 디코딩하여 원본 페이로드를 얻습니다.</li></ul><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>ContentEncoding</code>을 사용하려면 빌드 스크립트에 <code>ktor-client-encoding</code> 아티팩트를 포함해야 합니다:</p>',4)),s(c,{group:"languages"},{default:a(()=>[s(o,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:a(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-encoding:$ktor_version")'})]),_:1}),s(o,{title:"Gradle (Groovy)","group-key":"groovy"},{default:a(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-encoding:$ktor_version"'})]),_:1}),s(o,{title:"Maven","group-key":"maven"},{default:a(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-encoding-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),t("p",null,[i[3]||(i[3]=e(" Ktor 클라이언트에 필요한 아티팩트에 대한 자세한 내용은 ")),s(g,{href:"/ktor/client-dependencies",summary:"기존 프로젝트에 클라이언트 의존성을 추가하는 방법을 알아보세요."},{default:a(()=>i[2]||(i[2]=[e("클라이언트 의존성 추가")])),_:1}),i[4]||(i[4]=e("에서 확인할 수 있습니다. "))]),i[6]||(i[6]=p(`<h2 id="install_plugin" tabindex="-1">ContentEncoding 설치 <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;ContentEncoding 설치 {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p><code>ContentEncoding</code>을 설치하려면 <a href="./client-create-and-configure#configure-client">클라이언트 설정 블록</a> 내부의 <code>install</code> 함수에 전달하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.compression.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentEncoding)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configure_plugin" tabindex="-1">ContentEncoding 구성 <a class="header-anchor" href="#configure_plugin" aria-label="Permalink to &quot;ContentEncoding 구성 {id=&quot;configure_plugin&quot;}&quot;">​</a></h2><p>아래 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-content-encoding" target="_blank" rel="noreferrer">예시</a>는 지정된 품질 값으로 클라이언트에서 <code>deflate</code> 및 <code>gzip</code> 인코더를 활성화하는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentEncoding) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        deflate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        gzip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>필요한 경우 <code>ContentEncoder</code> 인터페이스를 구현하여 사용자 지정 인코더를 생성하고 <code>customEncoder</code> 함수에 전달할 수 있습니다.</p><h2 id="encode_request_body" tabindex="-1">요청 본문 인코딩 <a class="header-anchor" href="#encode_request_body" aria-label="Permalink to &quot;요청 본문 인코딩 {id=&quot;encode_request_body&quot;}&quot;">​</a></h2><p>요청 본문을 인코딩하려면 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/-http-request-builder/index.html" target="_blank" rel="noreferrer">HttpRequestBuilder</a> 블록 내에서 <code>compress()</code> 함수를 사용하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.compression.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentEncoding)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/upload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gzip&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(someLongBody)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,10))])}const A=E(F,[["render",_]]);export{q as __pageData,A as default};
