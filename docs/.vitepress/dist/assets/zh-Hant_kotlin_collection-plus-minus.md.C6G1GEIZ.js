import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"加減運算子","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/collection-plus-minus.md","filePath":"zh-Hant/kotlin/collection-plus-minus.md","lastUpdated":1754307826000}'),l={name:"zh-Hant/kotlin/collection-plus-minus.md"};function e(h,s,p,k,o,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="加減運算子" tabindex="-1">加減運算子 <a class="header-anchor" href="#加減運算子" aria-label="Permalink to &quot;加減運算子&quot;">​</a></h1><p>在 Kotlin 中，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/plus.html" target="_blank" rel="noreferrer"><code>plus</code></a> (<code>+</code>) 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/minus.html" target="_blank" rel="noreferrer"><code>minus</code></a> (<code>-</code>) 運算子為集合定義。 它們以集合作為第一個運算元；第二個運算元可以是元素，也可以是另一個集合。 回傳值是一個新的唯讀集合：</p><ul><li><code>plus</code> 的結果包含原始集合<em>和</em>第二個運算元中的元素。</li><li><code>minus</code> 的結果包含原始集合中<em>除了</em>第二個運算元中的元素。 如果是元素，<code>minus</code> 會移除其<em>第一個</em>出現的實例；如果是集合，則會移除其元素的<em>所有</em>出現實例。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plusList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;five&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> minusList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(plusList)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(minusList)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關 map 的 <code>plus</code> 和 <code>minus</code> 運算子的詳細資訊，請參閱 <a href="/zh-Hant/kotlin/map-operations">Map 專屬運算</a>。 複合指派運算子 (augmented assignment operators) <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/plus-assign.html" target="_blank" rel="noreferrer"><code>plusAssign</code></a> (<code>+=</code>) 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/minus-assign.html" target="_blank" rel="noreferrer"><code>minusAssign</code></a> (<code>-=</code>) 也為集合定義。然而，對於唯讀集合，它們實際上使用 <code>plus</code> 或 <code>minus</code> 運算子，並嘗試將結果指派給同一個變數。因此，它們僅適用於 <code>var</code> 唯讀集合。對於可變集合，如果它是 <code>val</code>，它們會修改該集合。有關更多詳細資訊，請參閱 <a href="/zh-Hant/kotlin/collection-write">集合寫入運算</a>。</p>`,5)]))}const E=i(l,[["render",e]]);export{c as __pageData,E as default};
