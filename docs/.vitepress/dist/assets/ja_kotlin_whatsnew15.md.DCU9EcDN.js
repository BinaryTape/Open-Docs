import{_ as r,C as k,c as o,o as d,ag as e,G as t,w as n,j as i,a}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Kotlin 1.5.0の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew15.md","filePath":"ja/kotlin/whatsnew15.md","lastUpdated":1754307826000}'),c={name:"ja/kotlin/whatsnew15.md"};function g(E,s,y,u,F,b){const l=k("YouTubeVideo"),h=k("tab"),p=k("tabs");return d(),o("div",null,[s[4]||(s[4]=e(`<h1 id="kotlin-1-5-0の新機能" tabindex="-1">Kotlin 1.5.0の新機能 <a class="header-anchor" href="#kotlin-1-5-0の新機能" aria-label="Permalink to &quot;Kotlin 1.5.0の新機能&quot;">​</a></h1><p><em><a href="/ja/kotlin/releases#release-details">リリース日: 2021年5月5日</a></em></p><p>Kotlin 1.5.0では、新しい言語機能、安定版のIRベースJVMコンパイラーバックエンド、パフォーマンス改善、 そして実験的機能の安定化や非推奨化といった進化的な変更が導入されています。</p><p>変更点の概要については、<a href="https://blog.jetbrains.com/kotlin/2021/04/kotlin-1-5-0-released/" target="_blank" rel="noreferrer">リリースブログ記事</a>でも確認できます。</p><h2 id="言語機能" tabindex="-1">言語機能 <a class="header-anchor" href="#言語機能" aria-label="Permalink to &quot;言語機能&quot;">​</a></h2><p>Kotlin 1.5.0では、<a href="/ja/kotlin/whatsnew1430#language-features">1.4.30でプレビュー版</a>として提供された新しい言語機能の安定版が導入されました。</p><ul><li><a href="#jvm-records-support">JVMレコードのサポート</a></li><li><a href="#sealed-interfaces">Sealedインターフェース</a>と<a href="#package-wide-sealed-class-hierarchies">Sealedクラスの改善</a></li><li><a href="#inline-classes">インラインクラス</a></li></ul><p>これらの機能の詳細については、<a href="https://blog.jetbrains.com/kotlin/2021/02/new-language-features-preview-in-kotlin-1-4-30/" target="_blank" rel="noreferrer">こちらのブログ記事</a>と、 Kotlinドキュメントの対応するページで確認できます。</p><h3 id="jvmレコードのサポート" tabindex="-1">JVMレコードのサポート <a class="header-anchor" href="#jvmレコードのサポート" aria-label="Permalink to &quot;JVMレコードのサポート&quot;">​</a></h3><p>Javaは急速に進化しており、Kotlinとの相互運用性を確保するため、その最新機能の1つである <a href="https://openjdk.java.net/jeps/395" target="_blank" rel="noreferrer">レコードクラス</a>のサポートが導入されました。</p><p>KotlinのJVMレコードサポートには、双方向の相互運用性が含まれます。</p><ul><li>Kotlinコードでは、Javaのレコードクラスを通常のプロパティを持つクラスと同じように使用できます。</li><li>KotlinクラスをJavaコードでレコードとして使用するには、<code>data</code>クラスにして<code>@JvmRecord</code>アノテーションを付与します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRecord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="/ja/kotlin/jvm-records">KotlinでJVMレコードを使用する方法の詳細</a>をご覧ください。</p>`,14)),t(l,{src:"https://www.youtube.com/v/iyEWXyuuseU",title:"Support for JVM Records in Kotlin 1.5.0"}),s[5]||(s[5]=e(`<h3 id="sealedインターフェース" tabindex="-1">Sealedインターフェース <a class="header-anchor" href="#sealedインターフェース" aria-label="Permalink to &quot;Sealedインターフェース&quot;">​</a></h3><p>Kotlinインターフェースで<code>sealed</code>修飾子を使用できるようになりました。これはクラスの場合と同様にインターフェースに適用されます。 sealedインターフェースのすべての実装はコンパイル時に認識されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Polygon</span></span></code></pre></div><p>この事実を利用して、例えば、網羅的な<code>when</code>式を記述できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> draw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(polygon: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (polygon) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rectangle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Triangle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // else is not needed - all possible implementations are covered</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>さらに、sealedインターフェースは、クラスが複数のsealedインターフェースを直接継承できるため、より柔軟な制限されたクラス階層を可能にします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FilledRectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Fillable</span></span></code></pre></div><p><a href="/ja/kotlin/sealed-classes">sealedインターフェースの詳細</a>をご覧ください。</p>`,8)),t(l,{src:"https://www.youtube.com/v/d_Mor21W_60",title:"Sealed Interfaces and Sealed Classes Improvements"}),s[6]||(s[6]=e(`<h3 id="パッケージ全体にわたるsealedクラスの階層" tabindex="-1">パッケージ全体にわたるSealedクラスの階層 <a class="header-anchor" href="#パッケージ全体にわたるsealedクラスの階層" aria-label="Permalink to &quot;パッケージ全体にわたるSealedクラスの階層&quot;">​</a></h3><p>Sealedクラスは、同じコンパイルユニットおよび同じパッケージ内のすべてのファイルにサブクラスを持つことができるようになりました。 以前は、すべてのサブクラスが同じファイル内に存在する必要がありました。</p><p>直接のサブクラスは、トップレベル、または任意の数の他の名前付きクラス、名前付きインターフェース、または名前付きオブジェクト内にネストされたものでも構いません。</p><p>Sealedクラスのサブクラスは、適切に修飾された名前を持たなければなりません。ローカルオブジェクトまたは匿名オブジェクトにすることはできません。</p><p><a href="/ja/kotlin/sealed-classes#inheritance">Sealedクラスの階層の詳細</a>をご覧ください。</p><h3 id="インラインクラス" tabindex="-1">インラインクラス <a class="header-anchor" href="#インラインクラス" aria-label="Permalink to &quot;インラインクラス&quot;">​</a></h3><p>インラインクラスは、値のみを保持する<a href="https://github.com/Kotlin/KEEP/blob/master/notes/value-classes.md" target="_blank" rel="noreferrer">値ベース</a>クラスのサブセットです。 特定の型の値のラッパーとして使用でき、メモリ割り当てから生じる追加のオーバーヘッドを伴いません。</p><p>インラインクラスは、クラス名の前に<code>value</code>修飾子を付けて宣言できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>JVMバックエンドは、特別な<code>@JvmInline</code>アノテーションも必要とします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>inline</code>修飾子は警告付きで非推奨になりました。</p><p><a href="/ja/kotlin/inline-classes">インラインクラスの詳細</a>をご覧ください。</p>`,13)),t(l,{src:"https://www.youtube.com/v/LpqvtgibbsQ",title:"From Inline to Value Classes"}),s[7]||(s[7]=e('<h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin/JVMは、内部およびユーザー向けの双方でいくつかの改善が行われました。その中でも特に注目すべき点は次のとおりです。</p><ul><li><a href="#stable-jvm-ir-backend">JVM IRバックエンドの安定化</a></li><li><a href="#new-default-jvm-target-1-8">新しいデフォルトJVMターゲット: 1.8</a></li><li><a href="#sam-adapters-via-invokedynamic">invokedynamic経由のSAMアダプター</a></li><li><a href="#lambdas-via-invokedynamic">invokedynamic経由のラムダ</a></li><li><a href="#deprecation-of-jvmdefault-and-old-xjvm-default-modes">@JvmDefaultおよび古いXjvm-defaultモードの非推奨化</a></li><li><a href="#improvements-to-handling-nullability-annotations">null許容アノテーションの取り扱い改善</a></li></ul><h3 id="jvm-irバックエンドの安定化" tabindex="-1">JVM IRバックエンドの安定化 <a class="header-anchor" href="#jvm-irバックエンドの安定化" aria-label="Permalink to &quot;JVM IRバックエンドの安定化&quot;">​</a></h3><p>Kotlin/JVMコンパイラー用の<a href="/ja/kotlin/whatsnew14#new-jvm-ir-backend">IRベースのバックエンド</a>が<a href="/ja/kotlin/components-stability">安定版</a>となり、デフォルトで有効になりました。</p><p><a href="/ja/kotlin/whatsnew14">Kotlin 1.4.0</a>以降、IRベースのバックエンドの早期バージョンがプレビュー版として利用可能でしたが、 <code>1.5</code>言語バージョンではデフォルトとなりました。古いバックエンドは、以前の言語バージョンでは引き続きデフォルトで使用されます。</p><p>IRバックエンドの利点とその将来の開発については、<a href="https://blog.jetbrains.com/kotlin/2021/02/the-jvm-backend-is-in-beta-let-s-make-it-stable-together/" target="_blank" rel="noreferrer">こちらのブログ記事</a>で詳しく説明されています。</p><p>Kotlin 1.5.0で古いバックエンドを使用する必要がある場合は、プロジェクトの構成ファイルに次の行を追加します。</p><ul><li>Gradleの場合：</li></ul>',9)),t(p,{group:"build-script"},{default:n(()=>[t(h,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dsl"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinJvmCompile"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions.useOldBackend "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(h,{title:"Groovy","group-key":"groovy"},{default:n(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," kotlinOptions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"useOldBackend "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[8]||(s[8]=e(`<ul><li>Mavenの場合：</li></ul><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-Xuse-old-backend&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="新しいデフォルトjvmターゲット-1-8" tabindex="-1">新しいデフォルトJVMターゲット: 1.8 <a class="header-anchor" href="#新しいデフォルトjvmターゲット-1-8" aria-label="Permalink to &quot;新しいデフォルトJVMターゲット: 1.8&quot;">​</a></h3><p>Kotlin/JVMコンパイルのデフォルトターゲットバージョンが<code>1.8</code>になりました。<code>1.6</code>ターゲットは非推奨です。</p><p>JVM 1.6用のビルドが必要な場合は、このターゲットに切り替えることができます。方法については以下をご覧ください。</p><ul><li><a href="/ja/kotlin/gradle-compiler-options#attributes-specific-to-jvm">Gradleの場合</a></li><li><a href="/ja/kotlin/maven#attributes-specific-to-jvm">Mavenの場合</a></li><li><a href="/ja/kotlin/compiler-reference#jvm-target-version">コマンドラインコンパイラーの場合</a></li></ul><h3 id="invokedynamic経由のsamアダプター" tabindex="-1">invokedynamic経由のSAMアダプター <a class="header-anchor" href="#invokedynamic経由のsamアダプター" aria-label="Permalink to &quot;invokedynamic経由のSAMアダプター&quot;">​</a></h3><p>Kotlin 1.5.0では、SAM (Single Abstract Method) 変換のコンパイルに動的呼び出し (<code>invokedynamic</code>) を使用するようになりました。</p><ul><li>SAM型が<a href="/ja/kotlin/java-interop#sam-conversions">Javaインターフェース</a>の場合、あらゆる式に対して適用されます。</li><li>SAM型が<a href="/ja/kotlin/fun-interfaces#sam-conversions">Kotlin関数型インターフェース</a>の場合、ラムダに対して適用されます。</li></ul><p>新しい実装では<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/invoke/LambdaMetafactory.html#metafactory-java.lang.invoke.MethodHandles.Lookup-java.lang.String-java.lang.invoke.MethodType-java.lang.invoke.MethodType-java.lang.invoke.MethodHandle-java.lang.invoke.MethodType-" target="_blank" rel="noreferrer"><code>LambdaMetafactory.metafactory()</code></a>を使用し、 コンパイル時に補助ラッパークラスが生成されなくなりました。これにより、アプリケーションのJARサイズが減少し、JVMの起動パフォーマンスが向上します。</p><p>匿名クラス生成に基づく古い実装スキームに戻すには、コンパイラーオプション<code>-Xsam-conversions=class</code>を追加します。</p><p>コンパイラーオプションの追加方法については、<a href="/ja/kotlin/gradle-compiler-options">Gradle</a>、<a href="/ja/kotlin/maven#specify-compiler-options">Maven</a>、 および<a href="/ja/kotlin/compiler-reference#compiler-options">コマンドラインコンパイラー</a>をご覧ください。</p><h3 id="invokedynamic経由のラムダ" tabindex="-1">invokedynamic経由のラムダ <a class="header-anchor" href="#invokedynamic経由のラムダ" aria-label="Permalink to &quot;invokedynamic経由のラムダ&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>純粋なKotlinラムダをinvokedynamicにコンパイルする機能は<a href="/ja/kotlin/components-stability">実験的</a>です。これはいつでも廃止または変更される可能性があります。 オプトインが必要です（詳細については下記参照）。評価目的のみにご利用ください。<a href="https://youtrack.jetbrains.com/issue/KT-45375" target="_blank" rel="noreferrer">YouTrack</a>にてフィードバックをお寄せいただけると幸いです。</p></div><p>Kotlin 1.5.0では、純粋なKotlinラムダ（関数型インターフェースのインスタンスに変換されないもの）を動的呼び出し (<code>invokedynamic</code>) にコンパイルする実験的なサポートを導入しています。 この実装は、<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/invoke/LambdaMetafactory.html#metafactory-java.lang.invoke.MethodHandles.Lookup-java.lang.String-java.lang.invoke.MethodType-java.lang.invoke.MethodType-java.lang.invoke.MethodHandle-java.lang.invoke.MethodType-" target="_blank" rel="noreferrer"><code>LambdaMetafactory.metafactory()</code></a>を使用することでより軽量なバイナリを生成し、 実行時に必要なクラスを効果的に生成します。現在、通常のラムダコンパイルと比較して3つの制限があります。</p><ul><li>invokedynamicにコンパイルされたラムダはシリアライズできません。</li><li>そのようなラムダに対して<code>toString()</code>を呼び出すと、読み取りにくい文字列表現が生成されます。</li><li>実験的な<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.jvm/reflect.html" target="_blank" rel="noreferrer"><code>reflect</code></a> APIは、<code>LambdaMetafactory</code>で作成されたラムダをサポートしていません。</li></ul><p>この機能を試すには、コンパイラーオプション<code>-Xlambdas=indy</code>を追加してください。 <a href="https://youtrack.jetbrains.com/issue/KT-45375" target="_blank" rel="noreferrer">このYouTrackチケット</a>を使用して、フィードバックを共有していただけると幸いです。</p><p>コンパイラーオプションの追加方法については、<a href="/ja/kotlin/gradle-compiler-options">Gradle</a>、<a href="/ja/kotlin/maven#specify-compiler-options">Maven</a>、 および<a href="/ja/kotlin/compiler-reference#compiler-options">コマンドラインコンパイラー</a>をご覧ください。</p><h3 id="jvmdefaultおよび古いxjvm-defaultモードの非推奨化" tabindex="-1">@JvmDefaultおよび古いXjvm-defaultモードの非推奨化 <a class="header-anchor" href="#jvmdefaultおよび古いxjvm-defaultモードの非推奨化" aria-label="Permalink to &quot;@JvmDefaultおよび古いXjvm-defaultモードの非推奨化&quot;">​</a></h3><p>Kotlin 1.4.0より前は、<code>@JvmDefault</code>アノテーションと<code>-Xjvm-default=enable</code>および<code>-Xjvm-default=compatibility</code>モードがありました。 これらはKotlinインターフェース内の特定の非抽象メンバーに対してJVMデフォルトメソッドを作成するために使用されました。</p><p>Kotlin 1.4.0では、プロジェクト全体でデフォルトメソッドの生成を切り替える<a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer">新しい<code>Xjvm-default</code>モードを導入しました</a>。</p><p>Kotlin 1.5.0では、<code>@JvmDefault</code>と古いXjvm-defaultモード（<code>-Xjvm-default=enable</code>および<code>-Xjvm-default=compatibility</code>）を非推奨化します。</p><p><a href="/ja/kotlin/java-to-kotlin-interop#default-methods-in-interfaces">Javaとの相互運用におけるデフォルトメソッドの詳細</a>をご覧ください。</p><h3 id="null許容アノテーションの取り扱い改善" tabindex="-1">null許容アノテーションの取り扱い改善 <a class="header-anchor" href="#null許容アノテーションの取り扱い改善" aria-label="Permalink to &quot;null許容アノテーションの取り扱い改善&quot;">​</a></h3><p>Kotlinは、<a href="/ja/kotlin/java-interop#nullability-annotations">null許容アノテーション</a>を使用してJavaからの型のnull許容情報を処理することをサポートしています。 Kotlin 1.5.0では、この機能に関していくつかの改善が導入されています。</p><ul><li>依存関係として使用されるコンパイル済みJavaライブラリの型引数上のnull許容アノテーションを読み取ります。</li><li><code>TYPE_USE</code>ターゲットを持つnull許容アノテーションを以下のケースでサポートします。 <ul><li>配列</li><li>可変引数 (Varargs)</li><li>フィールド</li><li>型パラメーターとそのバウンド</li><li>基底クラスとインターフェースの型引数</li></ul></li><li>null許容アノテーションが型に適用可能な複数のターゲットを持ち、そのうちの1つが<code>TYPE_USE</code>の場合、<code>TYPE_USE</code>が優先されます。 例えば、<code>@Nullable</code>が<code>TYPE_USE</code>と<code>METHOD</code>の両方をターゲットとしてサポートしている場合、メソッドシグネチャ<code>@Nullable String[] f()</code>は<code>fun f(): Array&lt;String?&gt;!</code>となります。</li></ul><p>これらの新しくサポートされたケースでは、KotlinからJavaを呼び出す際に誤った型null許容を使用すると警告が表示されます。 これらのケースで厳格モード（エラー報告付き）を有効にするには、コンパイラーオプション<code>-Xtype-enhancement-improvements-strict-mode</code>を使用します。</p><p><a href="/ja/kotlin/java-interop#null-safety-and-platform-types">null安全性とプラットフォーム型の詳細</a>をご覧ください。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Nativeは、より高いパフォーマンスと安定性を実現しました。主な変更点は次のとおりです。</p><ul><li><a href="#performance-improvements">パフォーマンスの改善</a></li><li><a href="#deactivation-of-the-memory-leak-checker">メモリリークチェッカーの無効化</a></li></ul><h3 id="パフォーマンスの改善" tabindex="-1">パフォーマンスの改善 <a class="header-anchor" href="#パフォーマンスの改善" aria-label="Permalink to &quot;パフォーマンスの改善&quot;">​</a></h3><p>1.5.0では、Kotlin/Nativeはコンパイルと実行の両方を高速化する一連のパフォーマンス改善が施されています。</p><p><a href="https://blog.jetbrains.com/kotlin/2020/03/kotlin-1-3-70-released/#kotlin-native" target="_blank" rel="noreferrer">コンパイラーキャッシュ</a>が、 <code>linuxX64</code>（Linuxホストのみ）と<code>iosArm64</code>ターゲットのデバッグモードでサポートされるようになりました。 コンパイラーキャッシュを有効にすると、最初のコンパイルを除き、ほとんどのデバッグコンパイルが大幅に高速化されます。 測定では、テストプロジェクトで約200%の速度向上が示されました。</p><p>新しいターゲットでコンパイラーキャッシュを使用するには、プロジェクトの<code>gradle.properties</code>に以下の行を追加してオプトインします。</p><ul><li><code>linuxX64</code>の場合: <code>kotlin.native.cacheKind.linuxX64=static</code></li><li><code>iosArm64</code>の場合: <code>kotlin.native.cacheKind.iosArm64=static</code></li></ul><p>コンパイラーキャッシュを有効にした後に問題が発生した場合は、弊社の課題トラッカーである<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>までご報告ください。</p><p>その他の改善により、Kotlin/Nativeコードの実行が高速化されます。</p><ul><li>自明なプロパティアクセサーがインライン化されます。</li><li>文字列リテラル上の<code>trimIndent()</code>がコンパイル時に評価されます。</li></ul><h3 id="メモリリークチェッカーの無効化" tabindex="-1">メモリリークチェッカーの無効化 <a class="header-anchor" href="#メモリリークチェッカーの無効化" aria-label="Permalink to &quot;メモリリークチェッカーの無効化&quot;">​</a></h3><p>組み込みのKotlin/Nativeメモリリークチェッカーがデフォルトで無効になりました。</p><p>これは元々内部使用向けに設計されており、限られたケースでしかリークを発見できず、すべてのケースには対応していませんでした。 さらに、後にアプリケーションのクラッシュを引き起こす可能性のある問題があることが判明しました。 そのため、メモリリークチェッカーをオフにすることにしました。</p><p>メモリリークチェッカーは、例えば単体テストのような特定のケースでは依然として役立ちます。 これらのケースでは、次のコード行を追加することで有効にできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Platform.isMemoryLeakCheckerActive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><p>アプリケーションのランタイムでチェッカーを有効にすることは推奨されません。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JSは1.5.0で進化的な変更を受けています。<a href="/ja/kotlin/js-ir-compiler">JS IRコンパイラーバックエンド</a>を安定版に移行する作業を継続し、 その他の更新も出荷しています。</p><ul><li><a href="#upgrade-to-webpack-5">webpackバージョン5へのアップグレード</a></li><li><a href="#frameworks-and-libraries-for-the-ir-compiler">IRコンパイラー向けフレームワークとライブラリ</a></li></ul><h3 id="webpackバージョン5へのアップグレード" tabindex="-1">webpackバージョン5へのアップグレード <a class="header-anchor" href="#webpackバージョン5へのアップグレード" aria-label="Permalink to &quot;webpackバージョン5へのアップグレード&quot;">​</a></h3><p>Kotlin/JS Gradleプラグインは、ブラウザターゲットにwebpack 4の代わりにwebpack 5を使用するようになりました。 これは互換性のない変更をもたらす主要なwebpackアップグレードです。 カスタムwebpack設定を使用している場合は、<a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/" target="_blank" rel="noreferrer">webpack 5のリリースノート</a>を必ず確認してください。</p><p><a href="/ja/kotlin/js-project-setup#webpack-bundling">webpackを使用したKotlin/JSプロジェクトのバンドルに関する詳細</a>をご覧ください。</p><h3 id="irコンパイラー向けフレームワークとライブラリ" tabindex="-1">IRコンパイラー向けフレームワークとライブラリ <a class="header-anchor" href="#irコンパイラー向けフレームワークとライブラリ" aria-label="Permalink to &quot;IRコンパイラー向けフレームワークとライブラリ&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin/JS IRコンパイラーは<a href="/ja/kotlin/components-stability">アルファ版</a>です。将来的に互換性のない変更があり、手動での移行が必要になる場合があります。 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>でフィードバックをお寄せいただけると幸いです。</p></div><p>Kotlin/JSコンパイラーのIRベースのバックエンドに取り組むとともに、ライブラリ作者が<code>both</code>モードでプロジェクトを構築することを推奨し、支援しています。 これにより、両方のKotlin/JSコンパイラー向けに成果物を生成できるようになり、新しいコンパイラーのエコシステムが成長します。</p><p>多くの有名なフレームワークやライブラリがすでにIRバックエンドで利用可能です。 <a href="https://kvision.io/" target="_blank" rel="noreferrer">KVision</a>、<a href="https://www.fritz2.dev/" target="_blank" rel="noreferrer">fritz2</a>、<a href="https://github.com/nacular/doodle" target="_blank" rel="noreferrer">doodle</a>などです。 プロジェクトでこれらを使用している場合は、すでにIRバックエンドでビルドを行い、その利点を確認できます。</p><p>独自のライブラリを作成している場合は、<a href="/ja/kotlin/js-ir-compiler#authoring-libraries-for-the-ir-compiler-with-backwards-compatibility">「both」モードでコンパイルします</a>。 これにより、クライアントも新しいコンパイラーでそれを使用できるようになります。</p><h2 id="kotlinマルチプラットフォーム" tabindex="-1">Kotlinマルチプラットフォーム <a class="header-anchor" href="#kotlinマルチプラットフォーム" aria-label="Permalink to &quot;Kotlinマルチプラットフォーム&quot;">​</a></h2><p>Kotlin 1.5.0では、<a href="#simplified-test-dependencies-usage-in-multiplatform-projects">各プラットフォームのテスト依存関係の選択が簡素化され</a>、 Gradleプラグインによって自動的に行われるようになりました。</p><p><a href="/ja/kotlinnew-api-for-getting-a-char-category-now-available-in-multiplatform-code">マルチプラットフォームコードで文字カテゴリを取得するための新しいAPI</a>が利用可能になりました。</p><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><p>標準ライブラリは、実験的機能の安定化から新機能の追加まで、幅広い変更と改善を受けています。</p><ul><li><a href="#stable-unsigned-integer-types">符号なし整数型の安定化</a></li><li><a href="#stable-locale-agnostic-api-for-upper-lowercasing-text">ロケール非依存の文字列大小文字変換APIの安定化</a></li><li><a href="#stable-char-to-integer-conversion-api">Charから整数への変換APIの安定化</a></li><li><a href="#stable-path-api">Path APIの安定化</a></li><li><a href="#floored-division-and-the-mod-operator">切り捨て除算とmod演算子</a></li><li><a href="#duration-api-changes">Duration APIの変更点</a></li><li><a href="#new-api-for-getting-a-char-category-now-available-in-multiplatform-code">マルチプラットフォームコードで文字カテゴリ取得のための新しいAPIが利用可能に</a></li><li><a href="#new-collections-function-firstnotnullof">新しいコレクション関数 firstNotNullOf()</a></li><li><a href="#strict-version-of-string-toboolean">String?.toBoolean()の厳格版</a></li></ul><p>標準ライブラリの変更点の詳細については、<a href="https://blog.jetbrains.com/kotlin/2021/04/kotlin-1-5-0-rc-released/" target="_blank" rel="noreferrer">こちらのブログ記事</a>をご覧ください。</p>`,63)),t(l,{src:"https://www.youtube.com/v/MyTkiT2I6-8",title:"New Standard Library Features"}),s[9]||(s[9]=e(`<h3 id="符号なし整数型の安定化" tabindex="-1">符号なし整数型の安定化 <a class="header-anchor" href="#符号なし整数型の安定化" aria-label="Permalink to &quot;符号なし整数型の安定化&quot;">​</a></h3><p><code>UInt</code>、<code>ULong</code>、<code>UByte</code>、<code>UShort</code>の符号なし整数型が<a href="/ja/kotlin/components-stability">安定版</a>になりました。 これらの型に対する演算、それらの範囲、およびプログレッションについても同様です。符号なし配列とその演算はベータ版のままです。</p><p><a href="/ja/kotlin/unsigned-integer-types">符号なし整数型の詳細</a>をご覧ください。</p><h3 id="ロケール非依存の文字列大小文字変換apiの安定化" tabindex="-1">ロケール非依存の文字列大小文字変換APIの安定化 <a class="header-anchor" href="#ロケール非依存の文字列大小文字変換apiの安定化" aria-label="Permalink to &quot;ロケール非依存の文字列大小文字変換APIの安定化&quot;">​</a></h3><p>このリリースでは、文字列の大小文字変換のための新しいロケール非依存APIが導入されました。 これは、ロケールに依存する<code>toLowerCase()</code>、<code>toUpperCase()</code>、<code>capitalize()</code>、<code>decapitalize()</code> API関数の代替を提供します。 新しいAPIは、異なるロケール設定によるエラーを回避するのに役立ちます。</p><p>Kotlin 1.5.0では、以下の完全に<a href="/ja/kotlin/components-stability">安定版</a>の代替機能が提供されます。</p><ul><li><p><code>String</code>関数について：</p><table tabindex="0"><thead><tr><th><strong>以前のバージョン</strong></th><th><strong>1.5.0の代替</strong></th></tr></thead><tbody><tr><td><code>String.toUpperCase()</code></td><td><code>String.uppercase()</code></td></tr><tr><td><code>String.toLowerCase()</code></td><td><code>String.lowercase()</code></td></tr><tr><td><code>String.capitalize()</code></td><td><code>String.replaceFirstChar { it.uppercase() }</code></td></tr><tr><td><code>String.decapitalize()</code></td><td><code>String.replaceFirstChar { it.lowercase() }</code></td></tr></tbody></table></li><li><p><code>Char</code>関数について：</p><table tabindex="0"><thead><tr><th><strong>以前のバージョン</strong></th><th><strong>1.5.0の代替</strong></th></tr></thead><tbody><tr><td><code>Char.toUpperCase()</code></td><td><code>Char.uppercaseChar(): Char</code><br><code>Char.uppercase(): String</code></td></tr><tr><td><code>Char.toLowerCase()</code></td><td><code>Char.lowercaseChar(): Char</code><br><code>Char.lowercase(): String</code></td></tr><tr><td><code>Char.toTitleCase()</code></td><td><code>Char.titlecaseChar(): Char</code><br><code>Char.titlecase(): String</code></td></tr></tbody></table></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/JVMの場合、明示的な<code>Locale</code>パラメーターを持つオーバーロードされた<code>uppercase()</code>、<code>lowercase()</code>、<code>titlecase()</code>関数も利用できます。</p></div><p>古いAPI関数は非推奨としてマークされており、将来のリリースで削除される予定です。</p><p>テキスト処理関数の変更点の全リストについては、<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/stdlib/locale-agnostic-case-conversions.md" target="_blank" rel="noreferrer">KEEP</a>をご覧ください。</p><h3 id="charから整数への変換apiの安定化" tabindex="-1">Charから整数への変換APIの安定化 <a class="header-anchor" href="#charから整数への変換apiの安定化" aria-label="Permalink to &quot;Charから整数への変換APIの安定化&quot;">​</a></h3><p>Kotlin 1.5.0以降、新しい文字からコードへの変換関数と文字から数字への変換関数が<a href="/ja/kotlin/components-stability">安定版</a>になりました。 これらの関数は、類似の文字列からIntへの変換と混同されがちだった現在のAPI関数に代わるものです。</p><p>新しいAPIは、この命名の混乱を取り除き、コードの動作をより透過的かつ明確にします。</p><p>このリリースでは、明確に命名された以下の関数群に分けられた<code>Char</code>変換が導入されます。</p><ul><li><code>Char</code>の整数コードを取得し、指定されたコードから<code>Char</code>を構築する関数:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Char.code: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span></code></pre></div><ul><li><code>Char</code>をそれが表す数字の数値に変換する関数:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToIntOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?</span></span></code></pre></div><ul><li>負でない単一の数字を表す<code>Int</code>を対応する<code>Char</code>表現に変換するための拡張関数:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span></span></code></pre></div><p><code>Number.toChar()</code>の実装（<code>Int.toChar()</code>を除くすべて）と<code>Char</code>の数値型への変換拡張（例: <code>Char.toInt()</code>）を含む古い変換APIは、現在非推奨です。</p><p><a href="https://github.com/Kotlin/KEEP/blob/master/proposals/stdlib/char-int-conversions.md" target="_blank" rel="noreferrer">Charから整数への変換APIの詳細については、KEEP</a>をご覧ください。</p><h3 id="path-apiの安定化" tabindex="-1">Path APIの安定化 <a class="header-anchor" href="#path-apiの安定化" aria-label="Permalink to &quot;Path APIの安定化&quot;">​</a></h3><p><code>java.nio.file.Path</code>の拡張機能を持つ<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io.path/java.nio.file.-path/" target="_blank" rel="noreferrer">実験的なPath API</a>が<a href="/ja/kotlin/components-stability">安定版</a>になりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// construct path with the div (/) operator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/base&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;subdirectory&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// list files in a directory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinFiles: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listDirectoryEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*.kt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="/ja/kotlin/whatsnew1420#extensions-for-java-nio-file-path">Path APIの詳細</a>をご覧ください。</p><h3 id="切り捨て除算とmod演算子" tabindex="-1">切り捨て除算とmod演算子 <a class="header-anchor" href="#切り捨て除算とmod演算子" aria-label="Permalink to &quot;切り捨て除算とmod演算子&quot;">​</a></h3><p>標準ライブラリに、モジュラー算術の新しい操作が追加されました。</p><ul><li><code>floorDiv()</code>は、<a href="https://en.wikipedia.org/wiki/Floor_and_ceiling_functions" target="_blank" rel="noreferrer">切り捨て除算</a>の結果を返します。これは整数型で利用可能です。</li><li><code>mod()</code>は、切り捨て除算の剰余（<em>modulus</em>）を返します。これはすべての数値型で利用可能です。</li></ul><p>これらの操作は、既存の<a href="/ja/kotlin/numbers#operations-on-numbers">整数の除算</a>および<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-int/rem.html" target="_blank" rel="noreferrer">rem()</a>関数（または<code>%</code>演算子）とよく似ていますが、負の数に対する動作が異なります。</p><ul><li><code>a.floorDiv(b)</code>は、通常の<code>/</code>とは異なり、結果を切り捨て（より小さい整数の方に丸める）ますが、<code>/</code>は結果を0に近い整数に丸めます。</li><li><code>a.mod(b)</code>は、<code>a</code>と<code>a.floorDiv(b) * b</code>の差です。これはゼロであるか、<code>b</code>と同じ符号を持ちますが、<code>a % b</code>は異なる符号を持つことがあります。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Floored division -5/3: \${(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floorDiv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Modulus: \${(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Truncated division -5/3: \${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Remainder: \${</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="duration-apiの変更点" tabindex="-1">Duration APIの変更点 <a class="header-anchor" href="#duration-apiの変更点" aria-label="Permalink to &quot;Duration APIの変更点&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Duration APIは<a href="/ja/kotlin/components-stability">実験的</a>です。これはいつでも廃止または変更される可能性があります。 評価目的のみにご利用ください。<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>にてフィードバックをお寄せいただけると幸いです。</p></div><p>異なる時間単位で期間量を表す実験的な<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/" target="_blank" rel="noreferrer">Duration</a>クラスがあります。 1.5.0では、Duration APIに以下の変更が加えられました。</p><ul><li>内部値表現が<code>Double</code>から<code>Long</code>を使用するようになり、精度が向上しました。</li><li>特定の時間単位への<code>Long</code>での変換のための新しいAPIが追加されました。これは、<code>Double</code>値で操作する古いAPIに代わるもので、古いAPIは現在非推奨です。 例えば、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/in-whole-minutes.html" target="_blank" rel="noreferrer"><code>Duration.inWholeMinutes</code></a>は、期間の値を<code>Long</code>として返し、<code>Duration.inMinutes</code>に代わります。</li><li>数値から<code>Duration</code>を構築するための新しいコンパニオン関数が追加されました。例えば、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/seconds.html" target="_blank" rel="noreferrer"><code>Duration.seconds(Int)</code></a>は、秒の整数値を表す<code>Duration</code>オブジェクトを作成します。 <code>Int.seconds</code>のような古い拡張プロパティは現在非推奨です。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.Duration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.ExperimentalTime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ExperimentalTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">milliseconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">120000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;There are \${duration.inWholeSeconds} seconds in \${duration.inWholeMinutes} minutes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="マルチプラットフォームコードで文字カテゴリ取得のための新しいapiが利用可能に" tabindex="-1">マルチプラットフォームコードで文字カテゴリ取得のための新しいAPIが利用可能に <a class="header-anchor" href="#マルチプラットフォームコードで文字カテゴリ取得のための新しいapiが利用可能に" aria-label="Permalink to &quot;マルチプラットフォームコードで文字カテゴリ取得のための新しいAPIが利用可能に&quot;">​</a></h3><p>Kotlin 1.5.0では、Unicodeに従って文字のカテゴリを取得するための新しいAPIがマルチプラットフォームプロジェクトに導入されました。 いくつかの関数が、すべてのプラットフォームと共通コードで利用可能になりました。</p><p>文字が文字または数字であるかをチェックする関数：</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-digit.html" target="_blank" rel="noreferrer"><code>Char.isDigit()</code></a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-letter.html" target="_blank" rel="noreferrer"><code>Char.isLetter()</code></a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-letter-or-digit.html" target="_blank" rel="noreferrer"><code>Char.isLetterOrDigit()</code></a></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chars </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;+&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (letterOrDigitList, notLetterOrDigitList) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">partition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isLetterOrDigit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(letterOrDigitList) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [a, 1]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(notLetterOrDigitList) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [+]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>文字のケースをチェックする関数：</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-lower-case.html" target="_blank" rel="noreferrer"><code>Char.isLowerCase()</code></a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-upper-case.html" target="_blank" rel="noreferrer"><code>Char.isUpperCase()</code></a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-title-case.html" target="_blank" rel="noreferrer"><code>Char.isTitleCase()</code></a></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chars </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ǅ&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ǈ&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ǋ&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ǲ&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;+&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (titleCases, notTitleCases) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">partition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isTitleCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(titleCases) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ǅ, ǈ, ǋ, ǲ]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(notTitleCases) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, A, a, +]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>その他の関数：</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-defined.html" target="_blank" rel="noreferrer"><code>Char.isDefined()</code></a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-i-s-o-control.html" target="_blank" rel="noreferrer"><code>Char.isISOControl()</code></a></li></ul><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/category.html" target="_blank" rel="noreferrer"><code>Char.category</code></a>プロパティと、 Unicodeに従った文字の一般的なカテゴリを示すその戻り値のEnumクラス<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-char-category/" target="_blank" rel="noreferrer"><code>CharCategory</code></a>も、 マルチプラットフォームプロジェクトで利用できるようになりました。</p><p><a href="/ja/kotlin/characters">文字の詳細</a>をご覧ください。</p><h3 id="新しいコレクション関数-firstnotnullof" tabindex="-1">新しいコレクション関数 firstNotNullOf() <a class="header-anchor" href="#新しいコレクション関数-firstnotnullof" aria-label="Permalink to &quot;新しいコレクション関数 firstNotNullOf()&quot;">​</a></h3><p>新しい<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/first-not-null-of.html" target="_blank" rel="noreferrer"><code>firstNotNullOf()</code></a>と<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/first-not-null-of-or-null.html" target="_blank" rel="noreferrer"><code>firstNotNullOfOrNull()</code></a>関数は、 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map-not-null.html" target="_blank" rel="noreferrer"><code>mapNotNull()</code></a>と<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/first.html" target="_blank" rel="noreferrer"><code>first()</code></a>または<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/first-or-null.html" target="_blank" rel="noreferrer"><code>firstOrNull()</code></a>を組み合わせたものです。 これらはカスタムセレクター関数を使用して元のコレクションをマップし、最初の非null値を返します。そのような値がない場合、 <code>firstNotNullOf()</code>は例外をスローし、<code>firstNotNullOfOrNull()</code>はnullを返します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstNotNullOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDoubleOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstNotNullOfOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toIntOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="string-toboolean-の厳格版" tabindex="-1">String?.toBoolean()の厳格版 <a class="header-anchor" href="#string-toboolean-の厳格版" aria-label="Permalink to &quot;String?.toBoolean()の厳格版&quot;">​</a></h3><p>既存の<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-boolean.html" target="_blank" rel="noreferrer">String?.toBoolean()</a>の 大文字小文字を区別する厳格版として、2つの新しい関数が導入されました。</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-boolean-strict.html" target="_blank" rel="noreferrer"><code>String.toBooleanStrict()</code></a>は、リテラル<code>true</code>と<code>false</code>以外のすべての入力に対して例外をスローします。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-boolean-strict-or-null.html" target="_blank" rel="noreferrer"><code>String.toBooleanStrictOrNull()</code></a>は、リテラル<code>true</code>と<code>false</code>以外のすべての入力に対してnullを返します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBooleanStrict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toBooleanStrictOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // println(&quot;1&quot;.toBooleanStrict())</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Exception</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-testライブラリ" tabindex="-1">kotlin-testライブラリ <a class="header-anchor" href="#kotlin-testライブラリ" aria-label="Permalink to &quot;kotlin-testライブラリ&quot;">​</a></h2><p><a href="https://kotlinlang.org/api/latest/kotlin.test/" target="_blank" rel="noreferrer">kotlin-test</a>ライブラリにはいくつかの新機能が導入されています。</p><ul><li><a href="#simplified-test-dependencies-usage-in-multiplatform-projects">マルチプラットフォームプロジェクトでのテスト依存関係の利用簡素化</a></li><li><a href="#automatic-selection-of-a-testing-framework-for-kotlin-jvm-source-sets">Kotlin/JVMソースセット向けのテストフレームワークの自動選択</a></li><li><a href="#assertion-function-updates">アサーション関数の更新</a></li></ul><h3 id="マルチプラットフォームプロジェクトでのテスト依存関係の利用簡素化" tabindex="-1">マルチプラットフォームプロジェクトでのテスト依存関係の利用簡素化 <a class="header-anchor" href="#マルチプラットフォームプロジェクトでのテスト依存関係の利用簡素化" aria-label="Permalink to &quot;マルチプラットフォームプロジェクトでのテスト依存関係の利用簡素化&quot;">​</a></h3><p><code>kotlin-test</code>依存関係を使用して<code>commonTest</code>ソースセットにテストの依存関係を追加できるようになりました。 Gradleプラグインは、各テストソースセットに対応するプラットフォーム依存関係を推測します。</p><ul><li>JVMソースセットの場合は<code>kotlin-test-junit</code>。<a href="#automatic-selection-of-a-testing-framework-for-kotlin-jvm-source-sets">Kotlin/JVMソースセット向けのテストフレームワークの自動選択</a>を参照してください。</li><li>Kotlin/JSソースセットの場合は<code>kotlin-test-js</code></li><li>共通ソースセットの場合は<code>kotlin-test-common</code>と<code>kotlin-test-annotations-common</code></li><li>Kotlin/Nativeソースセットの場合は追加のアーティファクトなし</li></ul><p>さらに、<code>kotlin-test</code>依存関係は、任意の共有またはプラットフォーム固有のソースセットで使用できます。</p><p>明示的な依存関係を持つ既存のkotlin-test設定は、GradleとMavenの両方で引き続き機能します。</p><p><a href="/ja/kotlin/gradle-configure-project#set-dependencies-on-test-libraries">テストライブラリの依存関係の設定に関する詳細</a>をご覧ください。</p><h3 id="kotlin-jvmソースセット向けのテストフレームワークの自動選択" tabindex="-1">Kotlin/JVMソースセット向けのテストフレームワークの自動選択 <a class="header-anchor" href="#kotlin-jvmソースセット向けのテストフレームワークの自動選択" aria-label="Permalink to &quot;Kotlin/JVMソースセット向けのテストフレームワークの自動選択&quot;">​</a></h3><p>Gradleプラグインは、テストフレームワークの依存関係を自動的に選択して追加するようになりました。 <code>commonTest</code>ソースセットに<code>kotlin-test</code>依存関係を追加するだけで済みます。</p><p>GradleはデフォルトでJUnit 4を使用します。したがって、<code>kotlin(&quot;test&quot;)</code>依存関係はJUnit 4のバリアント、 つまり<code>kotlin-test-junit</code>として解決されます。</p>`,68)),t(p,{group:"build-script"},{default:n(()=>[t(h,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>s[2]||(s[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," commonTest "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"                implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"test"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// This brings the dependency")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"                                               // on JUnit 4 transitively")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(h,{title:"Groovy","group-key":"groovy"},{default:n(()=>s[3]||(s[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        commonTest {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependencies {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                implementation kotlin("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"test"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// This brings the dependency ")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"                                              // on JUnit 4 transitively")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[10]||(s[10]=e(`<p><a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/Test.html#useJUnitPlatform" target="_blank" rel="noreferrer"><code>useJUnitPlatform()</code></a>または <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/Test.html#useTestNG" target="_blank" rel="noreferrer"><code>useTestNG()</code></a>をテストタスクで呼び出すことで、 JUnit 5またはTestNGを選択できます。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    test {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // enable TestNG support</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        useTestNG()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // or</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // enable JUnit Platform (a.k.a. JUnit 5) support</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        useJUnitPlatform()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>プロジェクトの<code>gradle.properties</code>に<code>kotlin.test.infer.jvm.variant=false</code>という行を追加することで、 テストフレームワークの自動選択を無効にできます。</p><p><a href="/ja/kotlin/gradle-configure-project#set-dependencies-on-test-libraries">テストライブラリの依存関係の設定に関する詳細</a>をご覧ください。</p><h3 id="アサーション関数の更新" tabindex="-1">アサーション関数の更新 <a class="header-anchor" href="#アサーション関数の更新" aria-label="Permalink to &quot;アサーション関数の更新&quot;">​</a></h3><p>このリリースでは、新しいアサーション関数が追加され、既存のものが改善されました。</p><p><code>kotlin-test</code>ライブラリには、以下の機能が追加されました。</p><ul><li><p><strong>値の型のチェック</strong></p><p>新しい<code>assertIs&lt;T&gt;</code>および<code>assertIsNot&lt;T&gt;</code>を使用して、値の型をチェックできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertIs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(s)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// throws AssertionError mentioning the actual type of s if the assertion fails</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // can now print s.length because of contract in assertIs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${s.length}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>型消去のため、このアサート関数は次の例では<code>value</code>が<code>List</code>型であることのみをチェックし、特定の<code>String</code>要素型のリストであるかはチェックしません: <code>assertIs&lt;List&lt;String&gt;&gt;(value)</code>。</p></li><li><p><strong>配列、シーケンス、任意のイテラブルのコンテナ内容の比較</strong></p><p><a href="/ja/kotlin/equality#structural-equality">構造的同等性</a>を実装しないさまざまなコレクションのコンテンツを比較するための、オーバーロードされた<code>assertContentEquals()</code>関数が新しく追加されました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expectedArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actualArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertContentEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expectedArray, actualArray)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong><code>Double</code>および<code>Float</code>数値に対する<code>assertEquals()</code>および<code>assertNotEquals()</code>の新しいオーバーロード</strong></p><p>2つの<code>Double</code>または<code>Float</code>数値を絶対精度で比較できるようにする<code>assertEquals()</code>関数の新しいオーバーロードが追加されました。 精度値は関数の3番目のパラメーターとして指定されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PI)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // precision parameter</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tolerance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.000001</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x, tolerance)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>コレクションと要素の内容をチェックするための新しい関数</strong></p><p><code>assertContains()</code>関数を使用して、コレクションまたは要素が何かを含んでいるかをチェックできるようになりました。 これはKotlinコレクション、および<code>IntRange</code>、<code>String</code>などの<code>contains()</code>演算子を持つ要素で使用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampleList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sample&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sample2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampleString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sample&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertContains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sampleList, sampleString)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// element in collection</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertContains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sampleString, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;amp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// substring in string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong><code>assertTrue()</code>、<code>assertFalse()</code>、<code>expect()</code>関数がインラインになりました</strong></p><p>これらの関数はインライン関数として使用できるようになり、ラムダ式内で<a href="/ja/kotlin/composing-suspending-functions">サスペンド関数</a>を呼び出すことが可能になりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deferred </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin is nice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertTrue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin substring should be present&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        deferred.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="kotlinxライブラリ" tabindex="-1">kotlinxライブラリ <a class="header-anchor" href="#kotlinxライブラリ" aria-label="Permalink to &quot;kotlinxライブラリ&quot;">​</a></h2><p>Kotlin 1.5.0とともに、kotlinxライブラリの新しいバージョンがリリースされます。</p><ul><li><code>kotlinx.coroutines</code> <a href="#coroutines-1-5-0-rc">1.5.0-RC</a></li><li><code>kotlinx.serialization</code> <a href="#serialization-1-2-1">1.2.1</a></li><li><code>kotlinx-datetime</code> <a href="#datetime-0-2-0">0.2.0</a></li></ul><h3 id="coroutines-1-5-0-rc" tabindex="-1">Coroutines 1.5.0-RC <a class="header-anchor" href="#coroutines-1-5-0-rc" aria-label="Permalink to &quot;Coroutines 1.5.0-RC&quot;">​</a></h3><p><code>kotlinx.coroutines</code> <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.5.0-RC" target="_blank" rel="noreferrer">1.5.0-RC</a>には以下が含まれています。</p><ul><li><a href="/ja/kotlin/channels">新しいチャネルAPI</a></li><li>安定版の<a href="/ja/kotlin/async-programming#reactive-extensions">リアクティブ統合</a></li><li>その他</li></ul><p>Kotlin 1.5.0以降、<a href="/ja/kotlin/whatsnew14#exclusion-of-the-deprecated-experimental-coroutines">実験的コルーチン</a>は無効になり、 <code>-Xcoroutines=experimental</code>フラグはサポートされなくなります。</p><p>詳細については、<a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.5.0-RC" target="_blank" rel="noreferrer">変更履歴</a>と <a href="https://blog.jetbrains.com/kotlin/2021/05/kotlin-coroutines-1-5-0-released/" target="_blank" rel="noreferrer"><code>kotlinx.coroutines</code> 1.5.0リリースブログ記事</a>をご覧ください。</p>`,16)),t(l,{src:"https://www.youtube.com/v/EVLnWOcR0is",title:"kotlinx.coroutines 1.5.0"}),s[11]||(s[11]=e('<h3 id="serialization-1-2-1" tabindex="-1">Serialization 1.2.1 <a class="header-anchor" href="#serialization-1-2-1" aria-label="Permalink to &quot;Serialization 1.2.1&quot;">​</a></h3><p><code>kotlinx.serialization</code> <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.2.1" target="_blank" rel="noreferrer">1.2.1</a>には以下が含まれています。</p><ul><li>JSONシリアライズ性能の改善</li><li>JSONシリアライズにおける複数名のサポート</li><li><code>@Serializable</code>クラスからの実験的な.protoスキーマ生成</li><li>その他</li></ul><p>詳細については、<a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.2.1" target="_blank" rel="noreferrer">変更履歴</a>と <a href="https://blog.jetbrains.com/kotlin/2021/05/kotlinx-serialization-1-2-released/" target="_blank" rel="noreferrer"><code>kotlinx.serialization</code> 1.2.1リリースブログ記事</a>をご覧ください。</p>',4)),t(l,{src:"https://www.youtube.com/v/698I_AH8h6s",title:"kotlinx.serialization 1.2.1"}),s[12]||(s[12]=e('<h3 id="datetime-0-2-0" tabindex="-1">dateTime 0.2.0 <a class="header-anchor" href="#datetime-0-2-0" aria-label="Permalink to &quot;dateTime 0.2.0&quot;">​</a></h3><p><code>kotlinx-datetime</code> <a href="https://github.com/Kotlin/kotlinx-datetime/releases/tag/v0.2.0" target="_blank" rel="noreferrer">0.2.0</a>には以下が含まれています。</p><ul><li><code>@Serializable</code>なDatetimeオブジェクト</li><li><code>DateTimePeriod</code>および<code>DatePeriod</code>の正規化されたAPI</li><li>その他</li></ul><p>詳細については、<a href="https://github.com/Kotlin/kotlinx-datetime/releases/tag/v0.2.0" target="_blank" rel="noreferrer">変更履歴</a>と <a href="https://blog.jetbrains.com/kotlin/2021/05/kotlinx-datetime-0-2-0-is-out/" target="_blank" rel="noreferrer"><code>kotlinx-datetime</code> 0.2.0リリースブログ記事</a>をご覧ください。</p><h2 id="kotlin-1-5-0への移行" tabindex="-1">Kotlin 1.5.0への移行 <a class="header-anchor" href="#kotlin-1-5-0への移行" aria-label="Permalink to &quot;Kotlin 1.5.0への移行&quot;">​</a></h2><p>IntelliJ IDEAとAndroid Studioは、Kotlinプラグインが利用可能になり次第、1.5.0への更新を提案します。</p><p>既存のプロジェクトをKotlin 1.5.0に移行するには、Kotlinバージョンを<code>1.5.0</code>に変更し、GradleまたはMavenプロジェクトを再インポートするだけです。 <a href="/ja/kotlin/releases#update-to-a-new-kotlin-version">Kotlin 1.5.0への更新方法</a>をご覧ください。</p><p>Kotlin 1.5.0で新しいプロジェクトを開始するには、Kotlinプラグインを更新し、<strong>File</strong> | <strong>New</strong> | <strong>Project</strong>からプロジェクトウィザードを実行します。</p><p>新しいコマンドラインコンパイラーは、<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.5.0" target="_blank" rel="noreferrer">GitHubリリースページ</a>からダウンロードできます。</p><p>Kotlin 1.5.0は<a href="/ja/kotlin/kotlin-evolution-principles#language-and-tooling-releases">機能リリース</a>であり、 言語に互換性のない変更をもたらす可能性があります。 これらの変更点の詳細なリストは、<a href="/ja/kotlin/compatibility-guide-15">Kotlin 1.5互換性ガイド</a>で確認できます。</p>',10))])}const v=r(c,[["render",g]]);export{f as __pageData,v as default};
