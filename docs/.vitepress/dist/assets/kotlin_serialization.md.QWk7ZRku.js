import{_ as h,C as o,c as k,o as p,ag as r,j as i,G as t,a,w as l}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"序列化","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/serialization.md","filePath":"kotlin/serialization.md","lastUpdated":1754307826000}'),d={name:"kotlin/serialization.md"};function g(E,s,c,b,y,u){const n=o("tab"),e=o("tabs");return p(),k("div",null,[s[6]||(s[6]=r('<h1 id="序列化" tabindex="-1">序列化 <a class="header-anchor" href="#序列化" aria-label="Permalink to &quot;序列化&quot;">​</a></h1><p><em>序列化</em> 是将应用程序使用的数据转换为可以通过网络传输或存储在数据库或文件中的格式的过程。反之，<em>反序列化</em> 则是从外部源读取数据并将其转换为运行时对象的相反过程。它们共同对大多数与第三方交换数据的应用程序至关重要。</p><p>一些数据序列化格式，例如 <a href="https://www.json.org/json-en.html" target="_blank" rel="noreferrer">JSON</a> 和 <a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noreferrer">protocol buffers</a> 特别常见。由于它们是语言无关和平台无关的，因此可以在任何现代语言编写的系统之间实现数据交换。</p><p>在 Kotlin 中，数据序列化工具可在独立组件 <a href="https://github.com/Kotlin/kotlinx.serialization" target="_blank" rel="noreferrer">kotlinx.serialization</a> 中获得。它由几个部分组成：<code>org.jetbrains.kotlin.plugin.serialization</code> Gradle 插件、<a href="#libraries">运行时库</a> 和编译器插件。</p><p>编译器插件 <code>kotlinx-serialization-compiler-plugin</code> 和 <code>kotlinx-serialization-compiler-plugin-embeddable</code> 直接发布到 Maven Central。第二个插件旨在与 <code>kotlin-compiler-embeddable</code> 构件配合使用，这是脚本构件的默认选项。Gradle 会将编译器插件作为编译器实参添加到你的项目中。</p><h2 id="库" tabindex="-1">库 <a class="header-anchor" href="#库" aria-label="Permalink to &quot;库&quot;">​</a></h2><p><code>kotlinx.serialization</code> 为所有支持的平台（JVM、JavaScript、Native）以及各种序列化格式（JSON、CBOR、protocol buffers 等）提供了库集。你可以在<a href="#formats">下方</a>找到支持的序列化格式的完整列表。</p><p>所有 Kotlin 序列化库都属于 <code>org.jetbrains.kotlinx:</code> 组。它们的名称以 <code>kotlinx-serialization-</code> 开头，并带有反映序列化格式的后缀。例如：</p><ul><li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> 为 Kotlin 项目提供 JSON 序列化。</li><li><code>org.jetbrains.kotlinx:kotlinx-serialization-cbor</code> 提供 CBOR 序列化。</li></ul><p>平台特有的构件会自动处理；你无需手动添加它们。在 JVM、JS、Native 和多平台项目中使用相同的依赖项。</p><p>请注意，<code>kotlinx.serialization</code> 库使用其自己的版本控制结构，与 Kotlin 的版本控制不匹配。请查看 <a href="https://github.com/Kotlin/kotlinx.serialization/releases" target="_blank" rel="noreferrer">GitHub</a> 上的版本发布以查找最新版本。</p><h2 id="格式" tabindex="-1">格式 <a class="header-anchor" href="#格式" aria-label="Permalink to &quot;格式&quot;">​</a></h2><p><code>kotlinx.serialization</code> 包含用于各种序列化格式的库：</p><ul><li><a href="https://www.json.org/" target="_blank" rel="noreferrer">JSON</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#json" target="_blank" rel="noreferrer"><code>kotlinx-serialization-json</code></a></li><li><a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noreferrer">Protocol buffers</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#protobuf" target="_blank" rel="noreferrer"><code>kotlinx-serialization-protobuf</code></a></li><li><a href="https://cbor.io/" target="_blank" rel="noreferrer">CBOR</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#cbor" target="_blank" rel="noreferrer"><code>kotlinx-serialization-cbor</code></a></li><li><a href="https://en.wikipedia.org/wiki/.properties" target="_blank" rel="noreferrer">Properties</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#properties" target="_blank" rel="noreferrer"><code>kotlinx-serialization-properties</code></a></li><li><a href="https://github.com/lightbend/config/blob/master/HOCON.md" target="_blank" rel="noreferrer">HOCON</a>: <a href="https://github.com/lightbend/config/blob/master/HOCON.md" target="_blank" rel="noreferrer"><code>kotlinx-serialization-hocon</code></a> （仅限 JVM）</li></ul><p>请注意，除 JSON 序列化 (<code>kotlinx-serialization-json</code>) 之外的所有库都是<a href="/kotlin/components-stability">实验性的</a>，这意味着它们的 API 可能会在恕不另行通知的情况下更改。</p><p>还有社区维护的库，它们支持更多序列化格式，例如 <a href="https://yaml.org/" target="_blank" rel="noreferrer">YAML</a> 或 <a href="https://avro.apache.org/" target="_blank" rel="noreferrer">Apache Avro</a>。有关可用序列化格式的详细信息，请参阅 <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md" target="_blank" rel="noreferrer"><code>kotlinx.serialization</code> 文档</a>。</p><h2 id="示例-json-序列化" tabindex="-1">示例：JSON 序列化 <a class="header-anchor" href="#示例-json-序列化" aria-label="Permalink to &quot;示例：JSON 序列化&quot;">​</a></h2><p>让我们看看如何将 Kotlin 对象序列化为 JSON。</p><h3 id="添加插件和依赖项" tabindex="-1">添加插件和依赖项 <a class="header-anchor" href="#添加插件和依赖项" aria-label="Permalink to &quot;添加插件和依赖项&quot;">​</a></h3><p>在开始之前，你必须配置构建脚本，以便在项目中可以使用 Kotlin 序列化工具：</p>',20)),i("ol",null,[i("li",null,[s[2]||(s[2]=i("p",null,[a("应用 Kotlin 序列化 Gradle 插件 "),i("code",null,"org.jetbrains.kotlin.plugin.serialization"),a("（或 Kotlin Gradle DSL 中的 "),i("code",null,'kotlin("plugin.serialization")'),a("）。")],-1)),t(e,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"jvm"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"plugin.serialization"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.jvm'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.plugin.serialization'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i("li",null,[s[5]||(s[5]=i("p",null,[a("添加 JSON 序列化库依赖项："),i("code",null,"org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0")],-1)),t(e,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>s[3]||(s[3]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>s[4]||(s[4]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})])]),s[7]||(s[7]=r(`<p>现在，你已准备好在代码中使用序列化 API。该 API 位于 <code>kotlinx.serialization</code> 包及其格式特有的子包中，例如 <code>kotlinx.serialization.json</code>。</p><h3 id="序列化和反序列化-json" tabindex="-1">序列化和反序列化 JSON <a class="header-anchor" href="#序列化和反序列化-json" aria-label="Permalink to &quot;序列化和反序列化 JSON&quot;">​</a></h3><ol><li>通过使用 <code>@Serializable</code> 注解来使类可序列化。</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.Serializable</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="2"><li>通过调用 <code>Json.encodeToString()</code> 来序列化此类的实例。</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.json.Json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.encodeToString</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>结果，你会得到一个包含此对象 JSON 格式状态的字符串：<code>{&quot;a&quot;: 42, &quot;b&quot;: &quot;str&quot;}</code></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>你也可以在单次调用中序列化对象集合，例如列表： <code>kotlin val dataList = listOf(Data(42, &quot;str&quot;), Data(12, &quot;test&quot;)) val jsonList = Json.encodeToString(dataList) </code></p></div><ol start="3"><li>使用 <code>decodeFromString()</code> 函数从 JSON 反序列化对象：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.json.Json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.decodeFromString</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decodeFromString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;{&quot;a&quot;:42, &quot;b&quot;: &quot;str&quot;}&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>就是这样！你已成功地将对象序列化为 JSON 字符串并将其反序列化回对象。</p><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><p>关于 Kotlin 中的序列化，请参阅 <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serialization-guide.md" target="_blank" rel="noreferrer">Kotlin 序列化指南</a>。</p><p>你可以在以下资源中探究 Kotlin 序列化的不同方面：</p><ul><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/basic-serialization.md" target="_blank" rel="noreferrer">了解更多关于 Kotlin 序列化及其核心概念</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/builtin-classes.md" target="_blank" rel="noreferrer">探究 Kotlin 的内置可序列化类</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serializers.md" target="_blank" rel="noreferrer">更详细地查看序列化器并学习如何创建自定义序列化器</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/polymorphism.md#open-polymorphism" target="_blank" rel="noreferrer">了解 Kotlin 如何处理多态序列化</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/json.md#json-elements" target="_blank" rel="noreferrer">探究处理 Kotlin 序列化的各种 JSON 特性</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/formats.md" target="_blank" rel="noreferrer">了解更多关于 Kotlin 支持的实验性序列化格式</a></li></ul>`,15))])}const f=h(d,[["render",g]]);export{m as __pageData,f as default};
