import{_ as h,C as o,c as k,o as p,ag as r,j as i,G as t,a,w as l}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"シリアライゼーション","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/serialization.md","filePath":"ja/kotlin/serialization.md","lastUpdated":1754307826000}'),d={name:"ja/kotlin/serialization.md"};function g(E,s,c,b,y,u){const n=o("tab"),e=o("tabs");return p(),k("div",null,[s[6]||(s[6]=r('<h1 id="シリアライゼーション" tabindex="-1">シリアライゼーション <a class="header-anchor" href="#シリアライゼーション" aria-label="Permalink to &quot;シリアライゼーション&quot;">​</a></h1><p>_シリアライゼーション_とは、アプリケーションが使用するデータを、ネットワーク経由で転送したり、データベースやファイルに保存したりできる形式に変換するプロセスです。一方、_デシリアライゼーション_とは、外部ソースからデータを読み込み、それをランタイムオブジェクトに変換する逆のプロセスです。これら二つは、サードパーティとデータをやり取りするほとんどのアプリケーションにとって不可欠です。</p><p><a href="https://www.json.org/json-en.html" target="_blank" rel="noreferrer">JSON</a>や<a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noreferrer">protocol buffers</a>のようなデータシリアライゼーションフォーマットは特に一般的です。言語にとらわれず、プラットフォームにも依存しないため、あらゆるモダンな言語で書かれたシステム間でのデータ交換を可能にします。</p><p>Kotlinでは、データシリアライゼーションツールは、別のコンポーネントである<a href="https://github.com/Kotlin/kotlinx.serialization" target="_blank" rel="noreferrer">kotlinx.serialization</a>で利用できます。これは、<code>org.jetbrains.kotlin.plugin.serialization</code> Gradleプラグイン、<a href="#libraries">ランタイムライブラリ</a>、およびコンパイラプラグインのいくつかの部分で構成されています。</p><p>コンパイラプラグインである<code>kotlinx-serialization-compiler-plugin</code>と<code>kotlinx-serialization-compiler-plugin-embeddable</code>は、Maven Centralに直接公開されています。後者のプラグインは、スクリプティングアーティファクトのデフォルトオプションである<code>kotlin-compiler-embeddable</code>アーティファクトと連携するように設計されています。Gradleは、コンパイラ引数としてコンパイラプラグインをプロジェクトに追加します。</p><h2 id="ライブラリ" tabindex="-1">ライブラリ <a class="header-anchor" href="#ライブラリ" aria-label="Permalink to &quot;ライブラリ&quot;">​</a></h2><p><code>kotlinx.serialization</code>は、サポートされているすべてのプラットフォーム（JVM、JavaScript、Native）と、様々なシリアライゼーションフォーマット（JSON、CBOR、protocol buffersなど）用のライブラリセットを提供します。サポートされているシリアライゼーションフォーマットの完全なリストは<a href="#formats">以下</a>で確認できます。</p><p>すべてのKotlinシリアライゼーションライブラリは<code>org.jetbrains.kotlinx:</code>グループに属しています。その名前は<code>kotlinx-serialization-</code>で始まり、シリアライゼーションフォーマットを反映したサフィックスを持ちます。例：</p><ul><li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code>は、KotlinプロジェクトにJSONシリアライゼーションを提供します。</li><li><code>org.jetbrains.kotlinx:kotlinx-serialization-cbor</code>は、CBORシリアライゼーションを提供します。</li></ul><p>プラットフォーム固有のアーティファクトは自動的に処理されるため、手動で追加する必要はありません。JVM、JS、Native、およびマルチプラットフォームプロジェクトで同じ依存関係を使用してください。</p><p><code>kotlinx.serialization</code>ライブラリは独自のバージョン管理構造を使用しており、Kotlinのバージョン管理とは一致しないことに注意してください。最新バージョンを見つけるには、<a href="https://github.com/Kotlin/kotlinx.serialization/releases" target="_blank" rel="noreferrer">GitHub</a>のリリースを確認してください。</p><h2 id="フォーマット" tabindex="-1">フォーマット <a class="header-anchor" href="#フォーマット" aria-label="Permalink to &quot;フォーマット&quot;">​</a></h2><p><code>kotlinx.serialization</code>には、様々なシリアライゼーションフォーマット用のライブラリが含まれています。</p><ul><li><a href="https://www.json.org/" target="_blank" rel="noreferrer">JSON</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#json" target="_blank" rel="noreferrer"><code>kotlinx-serialization-json</code></a></li><li><a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noreferrer">Protocol buffers</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#protobuf" target="_blank" rel="noreferrer"><code>kotlinx-serialization-protobuf</code></a></li><li><a href="https://cbor.io/" target="_blank" rel="noreferrer">CBOR</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#cbor" target="_blank" rel="noreferrer"><code>kotlinx-serialization-cbor</code></a></li><li><a href="https://en.wikipedia.org/wiki/.properties" target="_blank" rel="noreferrer">Properties</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#properties" target="_blank" rel="noreferrer"><code>kotlinx-serialization-properties</code></a></li><li><a href="https://github.com/lightbend/config/blob/master/HOCON.md" target="_blank" rel="noreferrer">HOCON</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#hocon" target="_blank" rel="noreferrer"><code>kotlinx-serialization-hocon</code></a> (JVMのみ)</li></ul><p>JSONシリアライゼーション（<code>kotlinx-serialization-json</code>）を除くすべてのライブラリは<a href="/ja/kotlin/components-stability">Experimental</a>であり、APIが予告なく変更される可能性があることに注意してください。</p><p><a href="https://yaml.org/" target="_blank" rel="noreferrer">YAML</a>や<a href="https://avro.apache.org/" target="_blank" rel="noreferrer">Apache Avro</a>など、より多くのシリアライゼーションフォーマットをサポートするコミュニティでメンテナンスされているライブラリもあります。利用可能なシリアライゼーションフォーマットに関する詳細情報については、<a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md" target="_blank" rel="noreferrer"><code>kotlinx.serialization</code>のドキュメント</a>を参照してください。</p><h2 id="例-jsonシリアライゼーション" tabindex="-1">例: JSONシリアライゼーション <a class="header-anchor" href="#例-jsonシリアライゼーション" aria-label="Permalink to &quot;例: JSONシリアライゼーション&quot;">​</a></h2><p>KotlinオブジェクトをJSONにシリアライズする方法を見てみましょう。</p><h3 id="プラグインと依存関係の追加" tabindex="-1">プラグインと依存関係の追加 <a class="header-anchor" href="#プラグインと依存関係の追加" aria-label="Permalink to &quot;プラグインと依存関係の追加&quot;">​</a></h3><p>開始する前に、プロジェクトでKotlinシリアライゼーションツールを使用できるようにビルドスクリプトを設定する必要があります。</p>',20)),i("ol",null,[i("li",null,[s[2]||(s[2]=i("p",null,[a("KotlinシリアライゼーションGradleプラグイン"),i("code",null,"org.jetbrains.kotlin.plugin.serialization"),a("（またはKotlin Gradle DSLで"),i("code",null,'kotlin("plugin.serialization")'),a("）を適用します。")],-1)),t(e,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"jvm"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"plugin.serialization"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.jvm'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.plugin.serialization'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i("li",null,[s[5]||(s[5]=i("p",null,[a("JSONシリアライゼーションライブラリの依存関係"),i("code",null,"org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0"),a("を追加します。")],-1)),t(e,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>s[3]||(s[3]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>s[4]||(s[4]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})])]),s[7]||(s[7]=r(`<p>これで、コードでシリアライゼーションAPIを使用する準備ができました。APIは<code>kotlinx.serialization</code>パッケージとそのフォーマット固有のサブパッケージ（例：<code>kotlinx.serialization.json</code>）にあります。</p><h3 id="jsonのシリアライズとデシリアライズ" tabindex="-1">JSONのシリアライズとデシリアライズ <a class="header-anchor" href="#jsonのシリアライズとデシリアライズ" aria-label="Permalink to &quot;JSONのシリアライズとデシリアライズ&quot;">​</a></h3><ol><li>クラスに<code>@Serializable</code>アノテーションを付与してシリアライズ可能にします。</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.Serializable</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="2"><li>このクラスのインスタンスを<code>Json.encodeToString()</code>を呼び出してシリアライズします。</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.json.Json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.encodeToString</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>その結果、このオブジェクトの状態をJSONフォーマットで含む文字列:<code>{&quot;a&quot;: 42, &quot;b&quot;: &quot;str&quot;}</code>が得られます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>リストなどのオブジェクトコレクションも、単一の呼び出しでシリアライズできます。 <code>kotlin val dataList = listOf(Data(42, &quot;str&quot;), Data(12, &quot;test&quot;)) val jsonList = Json.encodeToString(dataList) </code></p></div><ol start="3"><li><code>decodeFromString()</code>関数を使用して、JSONからオブジェクトをデシリアライズします。</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.json.Json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.decodeFromString</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decodeFromString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;{&quot;a&quot;:42, &quot;b&quot;: &quot;str&quot;}&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これで完了です！オブジェクトをJSON文字列にシリアライズし、それらをオブジェクトにデシリアライズすることに成功しました。</p><h2 id="次について" tabindex="-1">次について <a class="header-anchor" href="#次について" aria-label="Permalink to &quot;次について&quot;">​</a></h2><p>Kotlinでのシリアライゼーションに関する詳細については、<a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serialization-guide.md" target="_blank" rel="noreferrer">Kotlin Serialization ガイド</a>を参照してください。</p><p>次のリソースでKotlinシリアライゼーションのさまざまな側面を探求できます。</p><ul><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/basic-serialization.md" target="_blank" rel="noreferrer">Kotlinシリアライゼーションとそのコアコンセプトについてさらに学ぶ</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/builtin-classes.md" target="_blank" rel="noreferrer">Kotlinの組み込みシリアライズ可能クラスを探求する</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serializers.md" target="_blank" rel="noreferrer">シリアライザをさらに詳しく見て、カスタムシリアライザの作成方法を学ぶ</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/polymorphism.md#open-polymorphism" target="_blank" rel="noreferrer">Kotlinでポリモーフィックシリアライゼーションがどのように処理されるかを発見する</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/json.md#json-elements" target="_blank" rel="noreferrer">Kotlinシリアライゼーションを扱うさまざまなJSON機能について調べる</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/formats.md" target="_blank" rel="noreferrer">Kotlinがサポートする実験的なシリアライゼーションフォーマットについてさらに学ぶ</a></li></ul>`,15))])}const f=h(d,[["render",g]]);export{m as __pageData,f as default};
