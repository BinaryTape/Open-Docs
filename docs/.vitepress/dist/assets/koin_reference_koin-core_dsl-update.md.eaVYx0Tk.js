import{_ as i,c as a,o as l,ag as n}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"构造函数 DSL","description":"","frontmatter":{"title":"构造函数 DSL"},"headers":[],"relativePath":"koin/reference/koin-core/dsl-update.md","filePath":"koin/reference/koin-core/dsl-update.md","lastUpdated":1750001831000}'),t={name:"koin/reference/koin-core/dsl-update.md"};function e(p,s,h,k,d,o){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="构造函数-dsl" tabindex="-1">构造函数 DSL <a class="header-anchor" href="#构造函数-dsl" aria-label="Permalink to &quot;构造函数 DSL&quot;">​</a></h1><p>Koin 现在提供了一种新型的 DSL 关键字，允许你直接面向类的构造函数，并避免在 lambda 表达式中定义你的类型。</p><p>对于具有以下依赖的给定类 <code>ClassA</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>你现在可以直接面向<code>类构造函数</code>来声明这些组件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>不再需要使用 <code>get()</code> 函数在构造函数中指定依赖！🎉</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>确保在你的类名之前使用 <code>::</code>，以指向你的类构造函数。</p></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>你的构造函数将自动填充所有的 <code>get()</code> 调用。避免使用任何默认值，因为 Koin 将尝试在当前图中查找它。</p></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果你需要获取一个“命名”定义，你需要使用带有 lambda 和 <code>get()</code> 的标准 DSL 来指定限定符。</p></div><h2 id="可用关键字" tabindex="-1">可用关键字 <a class="header-anchor" href="#可用关键字" aria-label="Permalink to &quot;可用关键字&quot;">​</a></h2><p>以下关键字可用于从构造函数构建你的定义：</p><ul><li><code>factoryOf</code> - 相当于 <code>factory { }</code> - 工厂定义</li><li><code>singleOf</code> - 相当于 <code>single { }</code> - 单例定义</li><li><code>scopedOf</code> - 相当于 <code>scoped { }</code> - 作用域定义</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>确保不要在构造函数中使用任何默认值，因为 Koin 将尝试使用它填充每个参数。</p></div><h2 id="dsl-选项" tabindex="-1">DSL 选项 <a class="header-anchor" href="#dsl-选项" aria-label="Permalink to &quot;DSL 选项&quot;">​</a></h2><p>任何构造函数 DSL 定义，也可以在 lambda 中开启一些选项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // definition options</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_qualifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InterfaceA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        createdAtStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>常用的选项和 DSL 关键字在此 lambda 中可用：</p><ul><li><code>named(&quot;a_qualifier&quot;)</code> - 为定义指定一个字符串限定符</li><li><code>named&lt;MyType&gt;()</code> - 为定义指定一个类型限定符</li><li><code>bind&lt;MyInterface&gt;()</code> - 为给定的 bean 定义添加要绑定的类型</li><li><code>binds(listOf(...))</code> - 为给定的 bean 定义添加类型列表</li><li><code>createdAtStart()</code> - 在 Koin 启动时创建单例实例</li></ul><p>你也可以使用 <code>bind</code> 或 <code>binds</code> 操作符，无需 lambda：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) bind InterfaceA::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="注入参数" tabindex="-1">注入参数 <a class="header-anchor" href="#注入参数" aria-label="Permalink to &quot;注入参数&quot;">​</a></h2><p>采用这种声明方式，你仍然可以使用注入参数。Koin 将在注入参数和当前依赖中查找，以尝试注入你的构造函数。</p><p>如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>使用构造函数 DSL 声明：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    factoryOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>可以这样注入：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a_factory_id&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parametersOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)}</span></span></code></pre></div><h2 id="基于反射的-dsl-自-3-2-版起已弃用" tabindex="-1">基于反射的 DSL（自 3.2 版起已弃用） <a class="header-anchor" href="#基于反射的-dsl-自-3-2-版起已弃用" aria-label="Permalink to &quot;基于反射的 DSL（自 3.2 版起已弃用）&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><p>Koin 反射 DSL 现已弃用。请使用上方的 Koin 构造函数 DSL。</p></div>`,31)]))}const E=i(t,[["render",e]]);export{r as __pageData,E as default};
