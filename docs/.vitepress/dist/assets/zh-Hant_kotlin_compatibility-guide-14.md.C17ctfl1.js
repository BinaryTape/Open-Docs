import{_ as o,c as t,o as r,ag as n}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"Kotlin 1.4 相容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/compatibility-guide-14.md","filePath":"zh-Hant/kotlin/compatibility-guide-14.md","lastUpdated":1754307826000}'),a={name:"zh-Hant/kotlin/compatibility-guide-14.md"};function l(s,e,c,i,p,g){return r(),t("div",null,e[0]||(e[0]=[n('<h1 id="kotlin-1-4-相容性指南" tabindex="-1">Kotlin 1.4 相容性指南 <a class="header-anchor" href="#kotlin-1-4-相容性指南" aria-label="Permalink to &quot;Kotlin 1.4 相容性指南&quot;">​</a></h1><p><em>保持語言現代化 (Keeping the Language Modern)</em> 和 <em>舒適的更新 (Comfortable Updates)</em> 是 Kotlin 語言設計的根本原則。前者指出阻礙語言演進的建構應予移除，後者則要求此類移除應事先充分溝通，以使程式碼遷移盡可能順暢。</p><p>儘管大多數語言變更已透過其他管道發布，例如更新變更日誌或編譯器警告，但本文檔將它們全部總結，為從 Kotlin 1.3 遷移到 Kotlin 1.4 提供完整的參考。</p><h2 id="基本術語" tabindex="-1">基本術語 <a class="header-anchor" href="#基本術語" aria-label="Permalink to &quot;基本術語&quot;">​</a></h2><p>在本文檔中，我們介紹了幾種相容性：</p><ul><li><em>source</em>：原始碼不相容變更會導致原本能正常編譯（無錯誤或警告）的程式碼不再編譯。</li><li><em>binary</em>：如果兩個二進位檔案相互替換不會導致載入或連結錯誤，則稱它們為二進位相容。</li><li><em>behavioral</em>：如果相同的程式在應用變更前後表現出不同的行為，則稱此變更為行為不相容。</li></ul><p>請記住，這些定義僅適用於純粹的 Kotlin。從其他語言（例如 Java）角度來看的 Kotlin 程式碼相容性不在本文檔的範圍內。</p><h2 id="語言與標準函式庫-stdlib" tabindex="-1">語言與標準函式庫 (stdlib) <a class="header-anchor" href="#語言與標準函式庫-stdlib" aria-label="Permalink to &quot;語言與標準函式庫 (stdlib)&quot;">​</a></h2><h3 id="in-中綴運算子與-concurrenthashmap-的意外行為" tabindex="-1"><code>in</code> 中綴運算子與 ConcurrentHashMap 的意外行為 <a class="header-anchor" href="#in-中綴運算子與-concurrenthashmap-的意外行為" aria-label="Permalink to &quot;`in` 中綴運算子與 ConcurrentHashMap 的意外行為&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-18053" target="_blank" rel="noreferrer">KT-18053</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: Kotlin 1.4 將禁止自動運算子 <code>contains</code> 來自於用 Java 編寫的 <code>java.util.Map</code> 實作。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 在呼叫端為問題運算子引入警告。</li><li>&gt;= 1.4: 將此警告提升為錯誤， <code>-XXLanguage:-ProhibitConcurrentHashMapContains</code> 可用於暫時恢復到 1.4 之前的行為。</li></ul></blockquote><h3 id="禁止在公開-inline-成員內部存取受保護成員" tabindex="-1">禁止在公開 <code>inline</code> 成員內部存取受保護成員 <a class="header-anchor" href="#禁止在公開-inline-成員內部存取受保護成員" aria-label="Permalink to &quot;禁止在公開 `inline` 成員內部存取受保護成員&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-21178" target="_blank" rel="noreferrer">KT-21178</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: Kotlin 1.4 將禁止從公開的 <code>inline</code> 成員內部存取受保護成員。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 在呼叫端為問題案例引入警告。</li><li>1.4: 將此警告提升為錯誤， <code>-XXLanguage:-ProhibitProtectedCallFromInline</code> 可用於暫時恢復到 1.4 之前的行為。</li></ul></blockquote><h3 id="隱式接收者的呼叫上的契約" tabindex="-1">隱式接收者的呼叫上的契約 <a class="header-anchor" href="#隱式接收者的呼叫上的契約" aria-label="Permalink to &quot;隱式接收者的呼叫上的契約&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-28672" target="_blank" rel="noreferrer">KT-28672</a></p><p><strong>Component</strong>: 核心語言 (Core Language)</p><p><strong>Incompatible change type</strong>: 行為 (behavioral)</p><p><strong>Short summary</strong>: 從 1.4 開始，來自契約的智慧型轉換將適用於帶有隱式接收者的呼叫。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-ContractsOnCallsWithImplicitReceiver</code> 可用於暫時恢復到 1.4 之前的行為。</li></ul></blockquote><h3 id="浮點數比較的不一致行為" tabindex="-1">浮點數比較的不一致行為 <a class="header-anchor" href="#浮點數比較的不一致行為" aria-label="Permalink to &quot;浮點數比較的不一致行為&quot;">​</a></h3><blockquote><p><strong>Issues</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-22723" target="_blank" rel="noreferrer">KT-22723</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 行為 (behavioral)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，Kotlin 編譯器將使用 IEEE 754 標準來比較浮點數。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-ProperIeee754Comparisons</code> 可用於暫時恢復到 1.4 之前的行為。</li></ul></blockquote><h3 id="泛型-lambda-中最後一個表達式沒有智慧型轉換" tabindex="-1">泛型 Lambda 中最後一個表達式沒有智慧型轉換 <a class="header-anchor" href="#泛型-lambda-中最後一個表達式沒有智慧型轉換" aria-label="Permalink to &quot;泛型 Lambda 中最後一個表達式沒有智慧型轉換&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-15020" target="_blank" rel="noreferrer">KT-15020</a></p><p><strong>Component</strong>: 核心語言 (Core Language)</p><p><strong>Incompatible change type</strong>: 行為 (behavioral)</p><p><strong>Short summary</strong>: 從 1.4 開始，Lambda 中最後一個表達式的智慧型轉換將被正確應用。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NewInference</code> 可用於暫時恢復到 1.4 之前的行為。請注意，此標誌也將禁用一些新的語言功能。</li></ul></blockquote><h3 id="不依賴-lambda-引數順序來強制結果轉換為-unit" tabindex="-1">不依賴 Lambda 引數順序來強制結果轉換為 Unit <a class="header-anchor" href="#不依賴-lambda-引數順序來強制結果轉換為-unit" aria-label="Permalink to &quot;不依賴 Lambda 引數順序來強制結果轉換為 Unit&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-36045" target="_blank" rel="noreferrer">KT-36045</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，Lambda 引數將獨立解析，不再隱式強制轉換為 <code>Unit</code>。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NewInference</code> 可用於暫時恢復到 1.4 之前的行為。請注意，此標誌也將禁用一些新的語言功能。</li></ul></blockquote><h3 id="原始型別與整數常值型別之間錯誤的共同父型別導致不健全的程式碼" tabindex="-1">原始型別與整數常值型別之間錯誤的共同父型別導致不健全的程式碼 <a class="header-anchor" href="#原始型別與整數常值型別之間錯誤的共同父型別導致不健全的程式碼" aria-label="Permalink to &quot;原始型別與整數常值型別之間錯誤的共同父型別導致不健全的程式碼&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-35681" target="_blank" rel="noreferrer">KT-35681</a></p><p><strong>Components</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，原始 <code>Comparable</code> 型別與整數常值型別之間的共同父型別將更具體。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NewInference</code> 可用於暫時恢復到 1.4 之前的行為。請注意，此標誌也將禁用一些新的語言功能。</li></ul></blockquote><h3 id="型別安全問題-多個相等型別變數以不同型別實例化" tabindex="-1">型別安全問題：多個相等型別變數以不同型別實例化 <a class="header-anchor" href="#型別安全問題-多個相等型別變數以不同型別實例化" aria-label="Permalink to &quot;型別安全問題：多個相等型別變數以不同型別實例化&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-35679" target="_blank" rel="noreferrer">KT-35679</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，Kotlin 編譯器將禁止以不同型別實例化相等型別變數。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NewInference</code> 可用於暫時恢復到 1.4 之前的行為。請注意，此標誌也將禁用一些新的語言功能。</li></ul></blockquote><h3 id="型別安全問題-交集型別不正確的子型別化" tabindex="-1">型別安全問題：交集型別不正確的子型別化 <a class="header-anchor" href="#型別安全問題-交集型別不正確的子型別化" aria-label="Permalink to &quot;型別安全問題：交集型別不正確的子型別化&quot;">​</a></h3><blockquote><p><strong>Issues</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-22474" target="_blank" rel="noreferrer">KT-22474</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 在 Kotlin 1.4 中，交集型別的子型別化將被完善以更正確地運作。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NewInference</code> 可用於暫時恢復到 1.4 之前的行為。請注意，此標誌也將禁用一些新的語言功能。</li></ul></blockquote><h3 id="lambda-內空-when-表達式不會產生型別不匹配" tabindex="-1">Lambda 內空 <code>when</code> 表達式不會產生型別不匹配 <a class="header-anchor" href="#lambda-內空-when-表達式不會產生型別不匹配" aria-label="Permalink to &quot;Lambda 內空 `when` 表達式不會產生型別不匹配&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-17995" target="_blank" rel="noreferrer">KT-17995</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，如果空的 <code>when</code> 表達式用作 Lambda 中的最後一個表達式，將會出現型別不匹配。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NewInference</code> 可用於暫時恢復到 1.4 之前的行為。請注意，此標誌也將禁用一些新的語言功能。</li></ul></blockquote><h3 id="針對-lambda-中帶有整數常值提前返回的情況推斷出-any-返回型別" tabindex="-1">針對 Lambda 中帶有整數常值提前返回的情況推斷出 <code>Any</code> 返回型別 <a class="header-anchor" href="#針對-lambda-中帶有整數常值提前返回的情況推斷出-any-返回型別" aria-label="Permalink to &quot;針對 Lambda 中帶有整數常值提前返回的情況推斷出 `Any` 返回型別&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-20226" target="_blank" rel="noreferrer">KT-20226</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，當存在提前返回時，從 Lambda 返回的整數型別將更具體。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NewInference</code> 可用於暫時恢復到 1.4 之前的行為。請注意，此標誌也將禁用一些新的語言功能。</li></ul></blockquote><h3 id="正確捕捉帶有遞迴型別的星號投影" tabindex="-1">正確捕捉帶有遞迴型別的星號投影 <a class="header-anchor" href="#正確捕捉帶有遞迴型別的星號投影" aria-label="Permalink to &quot;正確捕捉帶有遞迴型別的星號投影&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-33012" target="_blank" rel="noreferrer">KT-33012</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，將會有更多候選型別適用，因為遞迴型別的捕捉將更正確地運作。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NewInference</code> 可用於暫時恢復到 1.4 之前的行為。請注意，此標誌也將禁用一些新的語言功能。</li></ul></blockquote><h3 id="非適切型別與彈性型別的共同父型別計算導致不正確的結果" tabindex="-1">非適切型別與彈性型別的共同父型別計算導致不正確的結果 <a class="header-anchor" href="#非適切型別與彈性型別的共同父型別計算導致不正確的結果" aria-label="Permalink to &quot;非適切型別與彈性型別的共同父型別計算導致不正確的結果&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-37054" target="_blank" rel="noreferrer">KT-37054</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 行為 (behavioral)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，彈性型別之間的共同父型別將更具體，以防止執行時錯誤。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NewInference</code> 可用於暫時恢復到 1.4 之前的行為。請注意，此標誌也將禁用一些新的語言功能。</li></ul></blockquote><h3 id="型別安全問題-缺少針對可空值型別引數的捕捉轉換" tabindex="-1">型別安全問題：缺少針對可空值型別引數的捕捉轉換 <a class="header-anchor" href="#型別安全問題-缺少針對可空值型別引數的捕捉轉換" aria-label="Permalink to &quot;型別安全問題：缺少針對可空值型別引數的捕捉轉換&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-35487" target="_blank" rel="noreferrer">KT-35487</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，捕捉型別與可空值型別之間的子型別化將更正確，以防止執行時錯誤。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NewInference</code> 可用於暫時恢復到 1.4 之前的行為。請注意，此標誌也將禁用一些新的語言功能。</li></ul></blockquote><h3 id="在未經檢查的轉型後保留協變型別的交集型別" tabindex="-1">在未經檢查的轉型後保留協變型別的交集型別 <a class="header-anchor" href="#在未經檢查的轉型後保留協變型別的交集型別" aria-label="Permalink to &quot;在未經檢查的轉型後保留協變型別的交集型別&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-37280" target="_blank" rel="noreferrer">KT-37280</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，協變型別的未經檢查轉型將產生智慧型轉換的交集型別，而非未經檢查轉型的型別。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NewInference</code> 可用於暫時恢復到 1.4 之前的行為。請注意，此標誌也將禁用一些新的語言功能。</li></ul></blockquote><h3 id="型別變數因使用-this-表達式從建構器推斷中洩漏" tabindex="-1">型別變數因使用 <code>this</code> 表達式從建構器推斷中洩漏 <a class="header-anchor" href="#型別變數因使用-this-表達式從建構器推斷中洩漏" aria-label="Permalink to &quot;型別變數因使用 `this` 表達式從建構器推斷中洩漏&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-32126" target="_blank" rel="noreferrer">KT-32126</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，如果沒有其他適當的約束，則禁止在 <code>sequence {}</code> 等建構器函式內部使用 <code>this</code>。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NewInference</code> 可用於暫時恢復到 1.4 之前的行為。請注意，此標誌也將禁用一些新的語言功能。</li></ul></blockquote><h3 id="帶有可空值型別引數的逆變型別錯誤的多載解析" tabindex="-1">帶有可空值型別引數的逆變型別錯誤的多載解析 <a class="header-anchor" href="#帶有可空值型別引數的逆變型別錯誤的多載解析" aria-label="Permalink to &quot;帶有可空值型別引數的逆變型別錯誤的多載解析&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-31670" target="_blank" rel="noreferrer">KT-31670</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，如果接受逆變型別引數的函式的兩個多載僅因型別的可空性而異（例如 <code>In&lt;T&gt;</code> 和 <code>In&lt;T?&gt;</code>），則可空值型別被認為更具體。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NewInference</code> 可用於暫時恢復到 1.4 之前的行為。請注意，此標誌也將禁用一些新的語言功能。</li></ul></blockquote><h3 id="帶有非巢狀遞迴約束的建構器推斷" tabindex="-1">帶有非巢狀遞迴約束的建構器推斷 <a class="header-anchor" href="#帶有非巢狀遞迴約束的建構器推斷" aria-label="Permalink to &quot;帶有非巢狀遞迴約束的建構器推斷&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-34975" target="_blank" rel="noreferrer">KT-34975</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，<code>sequence {}</code> 等建構器函式如果其型別依賴於傳入的 Lambda 內的遞迴約束，將導致編譯器錯誤。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NewInference</code> 可用於暫時恢復到 1.4 之前的行為。請注意，此標誌也將禁用一些新的語言功能。</li></ul></blockquote><h3 id="急切的型別變數固定導致矛盾的約束系統" tabindex="-1">急切的型別變數固定導致矛盾的約束系統 <a class="header-anchor" href="#急切的型別變數固定導致矛盾的約束系統" aria-label="Permalink to &quot;急切的型別變數固定導致矛盾的約束系統&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-25175" target="_blank" rel="noreferrer">KT-25175</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，在某些情況下，型別推斷的工作會減少急切性，從而允許找到一個不矛盾的約束系統。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NewInference</code> 可用於暫時恢復到 1.4 之前的行為。請注意，此標誌也將禁用一些新的語言功能。</li></ul></blockquote><h3 id="禁止在-open-函式上使用-tailrec-修飾符" tabindex="-1">禁止在 <code>open</code> 函式上使用 <code>tailrec</code> 修飾符 <a class="header-anchor" href="#禁止在-open-函式上使用-tailrec-修飾符" aria-label="Permalink to &quot;禁止在 `open` 函式上使用 `tailrec` 修飾符&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-18541" target="_blank" rel="noreferrer">KT-18541</a></p><p><strong>Component</strong>: 核心語言 (Core language)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，函式不能同時擁有 <code>open</code> 和 <code>tailrec</code> 修飾符。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 對同時具有 <code>open</code> 和 <code>tailrec</code> 修飾符的函式報告警告（在漸進模式下為錯誤）。</li><li>&gt;= 1.4: 將此警告提升為錯誤。</li></ul></blockquote><h3 id="伴隨物件的-instance-欄位比伴隨物件類別本身更可見" tabindex="-1">伴隨物件的 <code>INSTANCE</code> 欄位比伴隨物件類別本身更可見 <a class="header-anchor" href="#伴隨物件的-instance-欄位比伴隨物件類別本身更可見" aria-label="Permalink to &quot;伴隨物件的 `INSTANCE` 欄位比伴隨物件類別本身更可見&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-11567" target="_blank" rel="noreferrer">KT-11567</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，如果伴隨物件是 <code>private</code> 的，那麼它的 <code>INSTANCE</code> 欄位也將是 <code>private</code> 的。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 編譯器生成帶有已廢棄標誌的物件 <code>INSTANCE</code>。</li><li>&gt;= 1.4: 伴隨物件的 <code>INSTANCE</code> 欄位具有正確的可見性。</li></ul></blockquote><h3 id="外部-finally-區塊插入在-return-之前-未被內部不帶-finally-的-try-區塊的捕獲區間排除" tabindex="-1">外部 <code>finally</code> 區塊插入在 <code>return</code> 之前，未被內部不帶 <code>finally</code> 的 <code>try</code> 區塊的捕獲區間排除 <a class="header-anchor" href="#外部-finally-區塊插入在-return-之前-未被內部不帶-finally-的-try-區塊的捕獲區間排除" aria-label="Permalink to &quot;外部 `finally` 區塊插入在 `return` 之前，未被內部不帶 `finally` 的 `try` 區塊的捕獲區間排除&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-31923" target="_blank" rel="noreferrer">KT-31923</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 行為 (behavioral)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，嵌套 <code>try/catch</code> 區塊的捕獲區間將被正確計算。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-ProperFinally</code> 可用於暫時恢復到 1.4 之前的行為。</li></ul></blockquote><h3 id="在協變和泛型特化覆寫中-在返回型別位置使用-inline-類別的裝箱版本" tabindex="-1">在協變和泛型特化覆寫中，在返回型別位置使用 <code>inline</code> 類別的裝箱版本 <a class="header-anchor" href="#在協變和泛型特化覆寫中-在返回型別位置使用-inline-類別的裝箱版本" aria-label="Permalink to &quot;在協變和泛型特化覆寫中，在返回型別位置使用 `inline` 類別的裝箱版本&quot;">​</a></h3><blockquote><p><strong>Issues</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-30419" target="_blank" rel="noreferrer">KT-30419</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 行為 (behavioral)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，使用協變和泛型特化覆寫的函式將返回 <code>inline</code> 類別的裝箱值。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更</li></ul></blockquote><h3 id="在委派給-kotlin-介面時-不在-jvm-位元碼中聲明已檢查例外" tabindex="-1">在委派給 Kotlin 介面時，不在 JVM 位元碼中聲明已檢查例外 <a class="header-anchor" href="#在委派給-kotlin-介面時-不在-jvm-位元碼中聲明已檢查例外" aria-label="Permalink to &quot;在委派給 Kotlin 介面時，不在 JVM 位元碼中聲明已檢查例外&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-35834" target="_blank" rel="noreferrer">KT-35834</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: Kotlin 1.4 將不會在介面委派給 Kotlin 介面期間生成已檢查例外。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-DoNotGenerateThrowsForDelegatedKotlinMembers</code> 可用於暫時恢復到 1.4 之前的行為。</li></ul></blockquote><h3 id="更改帶有單個-vararg-參數的簽名多態呼叫行為-以避免將引數包裝到另一個陣列中" tabindex="-1">更改帶有單個 <code>vararg</code> 參數的簽名多態呼叫行為，以避免將引數包裝到另一個陣列中 <a class="header-anchor" href="#更改帶有單個-vararg-參數的簽名多態呼叫行為-以避免將引數包裝到另一個陣列中" aria-label="Permalink to &quot;更改帶有單個 `vararg` 參數的簽名多態呼叫行為，以避免將引數包裝到另一個陣列中&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-35469" target="_blank" rel="noreferrer">KT-35469</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: Kotlin 1.4 將不會在簽名多態呼叫上將引數包裝到另一個陣列中。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更</li></ul></blockquote><h3 id="kclass-用作泛型參數時註解中不正確的泛型簽名" tabindex="-1">KClass 用作泛型參數時註解中不正確的泛型簽名 <a class="header-anchor" href="#kclass-用作泛型參數時註解中不正確的泛型簽名" aria-label="Permalink to &quot;KClass 用作泛型參數時註解中不正確的泛型簽名&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-35207" target="_blank" rel="noreferrer">KT-35207</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: Kotlin 1.4 將修復 KClass 用作泛型參數時註解中不正確的型別映射。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更</li></ul></blockquote><h3 id="禁止在簽名多態呼叫中使用展開運算子" tabindex="-1">禁止在簽名多態呼叫中使用展開運算子 <a class="header-anchor" href="#禁止在簽名多態呼叫中使用展開運算子" aria-label="Permalink to &quot;禁止在簽名多態呼叫中使用展開運算子&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-35226" target="_blank" rel="noreferrer">KT-35226</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: Kotlin 1.4 將禁止在簽名多態呼叫上使用展開運算子 (<code>*</code>)。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 對於在簽名多態呼叫中使用展開運算子報告警告。</li><li>&gt;= 1.5: 將此警告提升為錯誤， <code>-XXLanguage:-ProhibitSpreadOnSignaturePolymorphicCall</code> 可用於暫時恢復到 1.4 之前的行為。</li></ul></blockquote><h3 id="改變尾遞迴優化函式預設值的初始化順序" tabindex="-1">改變尾遞迴優化函式預設值的初始化順序 <a class="header-anchor" href="#改變尾遞迴優化函式預設值的初始化順序" aria-label="Permalink to &quot;改變尾遞迴優化函式預設值的初始化順序&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-31540" target="_blank" rel="noreferrer">KT-31540</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 行為 (behavioral)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，尾遞迴函式的初始化順序將與常規函式相同。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 對於有問題的函式，在宣告位置報告警告。</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-ProperComputationOrderOfTailrecDefaultParameters</code> 可用於暫時恢復到 1.4 之前的行為。</li></ul></blockquote><h3 id="不為非-const-的-vals-生成-constantvalue-屬性" tabindex="-1">不為非 <code>const</code> 的 <code>val</code>s 生成 <code>ConstantValue</code> 屬性 <a class="header-anchor" href="#不為非-const-的-vals-生成-constantvalue-屬性" aria-label="Permalink to &quot;不為非 `const` 的 `val`s 生成 `ConstantValue` 屬性&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-16615" target="_blank" rel="noreferrer">KT-16615</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 行為 (behavioral)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，編譯器將不會為非 <code>const</code> 的 <code>val</code>s 生成 <code>ConstantValue</code> 屬性。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 透過 IntelliJ IDEA 檢查報告警告。</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-NoConstantValueAttributeForNonConstVals</code> 可用於暫時恢復到 1.4 之前的行為。</li></ul></blockquote><h3 id="對於-open-方法上的-jvmoverloads-生成的多載應為-final" tabindex="-1">對於 <code>open</code> 方法上的 <code>@JvmOverloads</code> 生成的多載應為 <code>final</code> <a class="header-anchor" href="#對於-open-方法上的-jvmoverloads-生成的多載應為-final" aria-label="Permalink to &quot;對於 `open` 方法上的 `@JvmOverloads` 生成的多載應為 `final`&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-33240" target="_blank" rel="noreferrer">KT-33240</a></p><p><strong>Components</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 帶有 <code>@JvmOverloads</code> 的函式的多載將生成為 <code>final</code>。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更， <code>-XXLanguage:-GenerateJvmOverloadsAsFinal</code> 可用於暫時恢復到 1.4 之前的行為。</li></ul></blockquote><h3 id="返回-kotlin-result-的-lambda-現在返回裝箱值而非未裝箱值" tabindex="-1">返回 <code>kotlin.Result</code> 的 Lambda 現在返回裝箱值而非未裝箱值 <a class="header-anchor" href="#返回-kotlin-result-的-lambda-現在返回裝箱值而非未裝箱值" aria-label="Permalink to &quot;返回 `kotlin.Result` 的 Lambda 現在返回裝箱值而非未裝箱值&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-39198" target="_blank" rel="noreferrer">KT-39198</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 行為 (behavioral)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，返回 <code>kotlin.Result</code> 型別值的 Lambda 將返回裝箱值而非未裝箱值。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更</li></ul></blockquote><h3 id="統一空值檢查的例外" tabindex="-1">統一空值檢查的例外 <a class="header-anchor" href="#統一空值檢查的例外" aria-label="Permalink to &quot;統一空值檢查的例外&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-22275" target="_blank" rel="noreferrer">KT-22275</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 行為 (behavior)</p><p><strong>Short summary</strong>: 從 Kotlin 1.4 開始，所有執行時空值檢查都將拋出 <code>java.lang.NullPointerException</code>。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 執行時空值檢查拋出不同的例外，例如 <code>KotlinNullPointerException</code>、<code>IllegalStateException</code>、<code>IllegalArgumentException</code> 和 <code>TypeCastException</code>。</li><li>&gt;= 1.4: 所有執行時空值檢查都拋出 <code>java.lang.NullPointerException</code>。 <code>-Xno-unified-null-checks</code> 可用於暫時恢復到 1.4 之前的行為。</li></ul></blockquote><h3 id="在陣列-列表操作-contains、indexof、lastindexof-中比較浮點值-ieee-754-或全序" tabindex="-1">在陣列/列表操作 <code>contains</code>、<code>indexOf</code>、<code>lastIndexOf</code> 中比較浮點值：IEEE 754 或全序 <a class="header-anchor" href="#在陣列-列表操作-contains、indexof、lastindexof-中比較浮點值-ieee-754-或全序" aria-label="Permalink to &quot;在陣列/列表操作 `contains`、`indexOf`、`lastIndexOf` 中比較浮點值：IEEE 754 或全序&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-28753" target="_blank" rel="noreferrer">KT-28753</a></p><p><strong>Component</strong>: kotlin-stdlib (JVM)</p><p><strong>Incompatible change type</strong>: 行為 (behavioral)</p><p><strong>Short summary</strong>: 從 <code>Double/FloatArray.asList()</code> 返回的 <code>List</code> 實作將實現 <code>contains</code>、<code>indexOf</code> 和 <code>lastIndexOf</code>，使其使用全序相等性。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更</li></ul></blockquote><h3 id="逐步將集合-min-和-max-函式的返回型別變更為非可空值" tabindex="-1">逐步將集合 <code>min</code> 和 <code>max</code> 函式的返回型別變更為非可空值 <a class="header-anchor" href="#逐步將集合-min-和-max-函式的返回型別變更為非可空值" aria-label="Permalink to &quot;逐步將集合 `min` 和 `max` 函式的返回型別變更為非可空值&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-38854" target="_blank" rel="noreferrer">KT-38854</a></p><p><strong>Component</strong>: kotlin-stdlib (JVM)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 集合 <code>min</code> 和 <code>max</code> 函式的返回型別將在 1.6 中變更為非可空值。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.4: 引入 <code>...OrNull</code> 函式作為同義詞並廢棄受影響的 API（詳情請參閱 Issue）。</li><li>1.5.x: 將受影響 API 的廢棄級別提升為錯誤。</li><li>&gt;=1.6: 重新引入受影響的 API，但返回型別為非可空值。</li></ul></blockquote><h3 id="廢棄-appendln-轉而使用-appendline" tabindex="-1">廢棄 <code>appendln</code> 轉而使用 <code>appendLine</code> <a class="header-anchor" href="#廢棄-appendln-轉而使用-appendline" aria-label="Permalink to &quot;廢棄 `appendln` 轉而使用 `appendLine`&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-38754" target="_blank" rel="noreferrer">KT-38754</a></p><p><strong>Component</strong>: kotlin-stdlib (JVM)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: <code>StringBuilder.appendln()</code> 將被廢棄，轉而使用 <code>StringBuilder.appendLine()</code>。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.4: 引入 <code>appendLine</code> 函式作為 <code>appendln</code> 的替代並廢棄 <code>appendln</code>。</li><li>&gt;=1.5: 將廢棄級別提升為錯誤。</li></ul></blockquote><h3 id="廢棄浮點型別轉換為-short-和-byte" tabindex="-1">廢棄浮點型別轉換為 <code>Short</code> 和 <code>Byte</code> <a class="header-anchor" href="#廢棄浮點型別轉換為-short-和-byte" aria-label="Permalink to &quot;廢棄浮點型別轉換為 `Short` 和 `Byte`&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-30360" target="_blank" rel="noreferrer">KT-30360</a></p><p><strong>Component</strong>: kotlin-stdlib (JVM)</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，浮點型別轉換為 <code>Short</code> 和 <code>Byte</code> 將被廢棄。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.4: 廢棄 <code>Double.toShort()/toByte()</code> 和 <code>Float.toShort()/toByte()</code> 並建議替代方案。</li><li>&gt;=1.5: 將廢棄級別提升為錯誤。</li></ul></blockquote><h3 id="在-regex-findall-遇到無效-startindex-時快速失敗" tabindex="-1">在 <code>Regex.findAll</code> 遇到無效 <code>startIndex</code> 時快速失敗 <a class="header-anchor" href="#在-regex-findall-遇到無效-startindex-時快速失敗" aria-label="Permalink to &quot;在 `Regex.findAll` 遇到無效 `startIndex` 時快速失敗&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-28356" target="_blank" rel="noreferrer">KT-28356</a></p><p><strong>Component</strong>: kotlin-stdlib</p><p><strong>Incompatible change type</strong>: 行為 (behavioral)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，<code>findAll</code> 將進行改進，檢查 <code>startIndex</code> 在進入 <code>findAll</code> 時是否在輸入字元序列的有效位置索引範圍內，如果不在則拋出 <code>IndexOutOfBoundsException</code>。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更</li></ul></blockquote><h3 id="移除已廢棄的-kotlin-coroutines-experimental" tabindex="-1">移除已廢棄的 <code>kotlin.coroutines.experimental</code> <a class="header-anchor" href="#移除已廢棄的-kotlin-coroutines-experimental" aria-label="Permalink to &quot;移除已廢棄的 `kotlin.coroutines.experimental`&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-36083" target="_blank" rel="noreferrer">KT-36083</a></p><p><strong>Component</strong>: kotlin-stdlib</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，已廢棄的 <code>kotlin.coroutines.experimental</code> API 將從標準函式庫中移除。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: <code>kotlin.coroutines.experimental</code> 以 <code>ERROR</code> 級別廢棄。</li><li>&gt;= 1.4: <code>kotlin.coroutines.experimental</code> 從標準函式庫中移除。在 JVM 上，提供了單獨的相容性二進位檔案（詳情請參閱 Issue）。</li></ul></blockquote><h3 id="移除已廢棄的-mod-運算子" tabindex="-1">移除已廢棄的 <code>mod</code> 運算子 <a class="header-anchor" href="#移除已廢棄的-mod-運算子" aria-label="Permalink to &quot;移除已廢棄的 `mod` 運算子&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-26654" target="_blank" rel="noreferrer">KT-26654</a></p><p><strong>Component</strong>: kotlin-stdlib</p><p><strong>Incompatible change type</strong>: 原始碼 (source)</p><p><strong>Short summary</strong>: 自 Kotlin 1.4 起，數值型別上的 <code>mod</code> 運算子將從標準函式庫中移除。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: <code>mod</code> 以 <code>ERROR</code> 級別廢棄。</li><li>&gt;= 1.4: <code>mod</code> 從標準函式庫中移除。</li></ul></blockquote><h3 id="隱藏-throwable-addsuppressed-成員並傾向於使用擴充函式" tabindex="-1">隱藏 <code>Throwable.addSuppressed</code> 成員並傾向於使用擴充函式 <a class="header-anchor" href="#隱藏-throwable-addsuppressed-成員並傾向於使用擴充函式" aria-label="Permalink to &quot;隱藏 `Throwable.addSuppressed` 成員並傾向於使用擴充函式&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-38777" target="_blank" rel="noreferrer">KT-38777</a></p><p><strong>Component</strong>: kotlin-stdlib</p><p><strong>Incompatible change type</strong>: 行為 (behavioral)</p><p><strong>Short summary</strong>: <code>Throwable.addSuppressed()</code> 擴充函式現在比 <code>Throwable.addSuppressed()</code> 成員函式更受推薦。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 舊行為（詳情請參閱 Issue）</li><li>&gt;= 1.4: 行為變更</li></ul></blockquote><h3 id="capitalize-應將雙字母組合轉換為標題大小寫" tabindex="-1"><code>capitalize</code> 應將雙字母組合轉換為標題大小寫 <a class="header-anchor" href="#capitalize-應將雙字母組合轉換為標題大小寫" aria-label="Permalink to &quot;`capitalize` 應將雙字母組合轉換為標題大小寫&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-38817" target="_blank" rel="noreferrer">KT-38817</a></p><p><strong>Component</strong>: kotlin-stdlib</p><p><strong>Incompatible change type</strong>: 行為 (behavioral)</p><p><strong>Short summary</strong>: <code>String.capitalize()</code> 函式現在將塞爾維亞-克羅埃西亞語蓋伊拉丁字母 (Serbo-Croatian Gaj&#39;s Latin alphabet) 中的雙字母組合大寫為標題大小寫（<code>ǅ</code> 而非 <code>Ǆ</code>）。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 雙字母組合以大寫形式大寫（<code>Ǆ</code>）。</li><li>&gt;= 1.4: 雙字母組合以標題大小寫形式大寫（<code>ǅ</code>）。</li></ul></blockquote><h2 id="工具-tools" tabindex="-1">工具 (Tools) <a class="header-anchor" href="#工具-tools" aria-label="Permalink to &quot;工具 (Tools)&quot;">​</a></h2><h3 id="在-windows-上-帶有分隔符號的編譯器引數必須用雙引號傳遞" tabindex="-1">在 Windows 上，帶有分隔符號的編譯器引數必須用雙引號傳遞 <a class="header-anchor" href="#在-windows-上-帶有分隔符號的編譯器引數必須用雙引號傳遞" aria-label="Permalink to &quot;在 Windows 上，帶有分隔符號的編譯器引數必須用雙引號傳遞&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-41309" target="_blank" rel="noreferrer">KT-41309</a></p><p><strong>Component</strong>: CLI</p><p><strong>Incompatible change type</strong>: 行為 (behavioral)</p><p><strong>Short summary</strong>: 在 Windows 上，包含分隔符號（空白、<code>=</code>、<code>;</code>、<code>,</code>）的 <code>kotlinc.bat</code> 引數現在需要雙引號 (<code>&quot;</code>)。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 所有編譯器引數無需引號傳遞。</li><li>&gt;= 1.4: 包含分隔符號（空白、<code>=</code>、<code>;</code>、<code>,</code>）的編譯器引數需要雙引號 (<code>&quot;</code>)。</li></ul></blockquote><h3 id="kapt-屬性的合成-annotations-方法名稱已更改" tabindex="-1">KAPT：屬性的合成 <code>$annotations()</code> 方法名稱已更改 <a class="header-anchor" href="#kapt-屬性的合成-annotations-方法名稱已更改" aria-label="Permalink to &quot;KAPT：屬性的合成 `$annotations()` 方法名稱已更改&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-36926" target="_blank" rel="noreferrer">KT-36926</a></p><p><strong>Component</strong>: KAPT</p><p><strong>Incompatible change type</strong>: 行為 (behavioral)</p><p><strong>Short summary</strong>: KAPT 為屬性生成的合成 <code>$annotations()</code> 方法名稱在 1.4 中已更改。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.4: 屬性的合成 <code>$annotations()</code> 方法名稱遵循 <code>&lt;propertyName&gt;@annotations()</code> 範本。</li><li>&gt;= 1.4: 屬性的合成 <code>$annotations()</code> 方法名稱包含 <code>get</code> 字首：<code>get&lt;PropertyName&gt;@annotations()</code>。</li></ul></blockquote>',95)]))}const h=o(a,[["render",l]]);export{d as __pageData,h as default};
