import{_ as t,a as r}from"./chunks/kmp-journey-start.DBIxeMUp.js";import{_ as e}from"./chunks/explore-compose.CnswIadv.js";import{_ as o,c as i,o as l,ag as p}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"六大热门跨平台应用开发框架","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/cross-platform-frameworks.md","filePath":"kmp/cross-platform-frameworks.md","lastUpdated":1755522191000}'),n={name:"kmp/cross-platform-frameworks.md"};function s(c,a,h,m,u,d){return l(),i("div",null,a[0]||(a[0]=[p('<h1 id="六大热门跨平台应用开发框架" tabindex="-1">六大热门跨平台应用开发框架 <a class="header-anchor" href="#六大热门跨平台应用开发框架" aria-label="Permalink to &quot;六大热门跨平台应用开发框架&quot;">​</a></h1><p>多年来，跨平台应用开发已成为构建移动应用程序最流行的方式之一。跨平台或多平台方法允许开发者创建在不同移动平台上类似运行的应用。</p><p>如下图所示，自 2010 年至今，兴趣稳步增长：</p><p><img src="'+t+'" alt="Google 趋势图，显示对跨平台应用开发的兴趣" width="700"></p><p>快速发展的<a href="./cross-platform-mobile-development#kotlin-multiplatform">跨平台移动开发</a>技术日益普及，促使许多新工具应运而生。面对众多选择，可能难以选择最适合您需求的一个。为了帮助您找到合适的工具，我们整理了六款最佳跨平台应用开发框架及其出色的特性。在本文末尾，您还将找到为您的业务选择多平台开发框架时需要注意的一些关键事项。</p><h2 id="什么是跨平台应用开发框架" tabindex="-1">什么是跨平台应用开发框架？ <a class="header-anchor" href="#什么是跨平台应用开发框架" aria-label="Permalink to &quot;什么是跨平台应用开发框架？&quot;">​</a></h2><p>移动工程师使用跨平台移动开发框架，通过单一代码库为 Android 和 iOS 等多个平台构建具有原生外观的应用程序。可共享代码是这种方法相对于原生应用开发的关键优势之一。拥有单一代码库意味着移动工程师可以节省时间，避免为每个操作系统编写代码，从而加速开发过程。</p><h2 id="热门跨平台应用开发框架" tabindex="-1">热门跨平台应用开发框架 <a class="header-anchor" href="#热门跨平台应用开发框架" aria-label="Permalink to &quot;热门跨平台应用开发框架&quot;">​</a></h2><p>此列表并非详尽无遗；目前市场上有许多其他选项。重要的是要认识到，没有一刀切的工具能适合所有人。框架的选择主要取决于您的特定项目和目标，以及我们将在文章末尾介绍的其他具体事项。</p><p>尽管如此，我们还是尝试挑选出一些最佳的跨平台移动开发框架，为您提供决策的起点。</p><h3 id="flutter" tabindex="-1">Flutter <a class="header-anchor" href="#flutter" aria-label="Permalink to &quot;Flutter&quot;">​</a></h3><p>Flutter 由 Google 于 2017 年发布，是一款热门框架，可用于从单一代码库构建移动、Web 和桌面应用。要使用 Flutter 构建应用程序，您需要使用 Google 的编程语言 Dart。</p><p><strong>编程语言：</strong> Dart。</p><p><strong>移动应用示例：</strong> eBay Motors、阿里巴巴、Google Pay、字节跳动应用。</p><p><strong>主要特性：</strong></p><ul><li>Flutter 的热重载特性让您可以在修改代码后立即看到应用程序的变化，而无需重新编译。</li><li>Flutter 支持 Google 的 Material Design，这是一种帮助开发者构建数字体验的设计系统。在构建应用时，您可以使用多种视觉和行为组件。</li><li>Flutter 不依赖于 Web 浏览器技术。相反，它拥有自己的渲染引擎来绘制组件。</li></ul><p>Flutter 在全球拥有相对活跃的用户社区，并被许多开发者广泛使用。根据 <a href="https://insights.stackoverflow.com/trends?tags=flutter%2Creact-native" target="_blank" rel="noreferrer">Stack Overflow 趋势</a>显示，基于相应标签使用量的增加，Flutter 的使用量呈上升趋势。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>深入了解 <a href="./kotlin-multiplatform-flutter">Kotlin Multiplatform 和 Flutter</a>，以了解它们的优势并为您的跨平台开发选择最适合的方案。</p></div><h3 id="react-native" tabindex="-1">React Native <a class="header-anchor" href="#react-native" aria-label="Permalink to &quot;React Native&quot;">​</a></h3><p>React Native 是一个开源 UI 软件框架，由 Meta Platforms（前身为 Facebook）于 2015 年（比 Flutter 稍早）开发。它基于 Facebook 的 JavaScript 库 React，允许开发者构建原生渲染的跨平台移动应用。</p><p><strong>编程语言：</strong> JavaScript。</p><p><strong>移动应用示例：</strong> React Native 用于 Microsoft 的 Office、Skype 和 Xbox Game Pass；Meta 的 Facebook、桌面 Messenger 和 Oculus。请在 <a href="https://reactnative.dev/showcase" target="_blank" rel="noreferrer">React Native 展示</a>中查看更多。</p><p><strong>主要特性：</strong></p><ul><li>借助 Fast Refresh 特性，开发者可以立即看到其 React 组件中的更改。</li><li>React Native 的优势之一是侧重于 UI。React 原语渲染为原生平台 UI 组件，让您能够构建定制化和响应式用户界面。</li><li>在 0.62 及更高版本中，React Native 与移动应用调试器 Flipper 之间的集成默认启用。Flipper 用于调试 Android、iOS 和 React Native 应用，它提供了日志查看器、交互式布局检查器和网络检查器等工具。</li></ul><p>作为最热门的跨平台应用开发框架之一，React Native 拥有庞大而强大的开发者社区，他们分享自己的技术知识。借助这个社区，您在用该框架构建移动应用时可以获得所需的支持。</p><h3 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h3><p>Kotlin Multiplatform (KMP) 是 JetBrains 构建的一项开源技术，它允许跨平台共享代码，同时保留原生编程的优势。它使开发者能够尽可能多地重用代码，如果需要则编写原生代码，并将共享的 Kotlin 代码无缝集成到任何项目中。</p><p><strong>编程语言：</strong> Kotlin。</p><p><strong>移动应用示例：</strong> 麦当劳、Netflix、福布斯、9GAG、Cash App、飞利浦。<a href="./case-studies">参阅更多 Kotlin Multiplatform 案例研究</a>。</p><p><strong>主要特性：</strong></p><ul><li>开发者可以在 Android、iOS、Web、桌面和服务器端重用代码，同时如果需要则保留原生代码。</li><li>Kotlin Multiplatform 可以无缝集成到任何项目中。开发者可以利用平台特有的 API，同时充分利用原生开发和跨平台开发的优势。</li><li>借助 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>（JetBrains 推出的一款现代声明式跨平台 UI 框架），开发者拥有完整的代码共享灵活性，并能够同时共享逻辑和 UI。</li><li>如果您已经将 Kotlin 用于 Android，则无需将新语言引入您的代码库。您可以重用您的 Kotlin 代码和专业知识，这使得迁移到 Kotlin Multiplatform 的风险低于其他技术。</li></ul><p>尽管这款跨平台移动开发框架是我们列表中最年轻的框架之一，但它拥有一个成熟的社区。2023 年 11 月，JetBrains 将其提升为<a href="https://blog.jetbrains.com/kotlin/2023/11/kotlin-multiplatform-stable/" target="_blank" rel="noreferrer">稳定版</a>。它正在快速发展，并已在当今市场留下深刻印象。凭借其定期更新的<a href="./get-started">文档</a>和社区支持，您总能找到问题的答案。更重要的是，许多<a href="./case-studies">全球公司和初创企业已经使用 Kotlin Multiplatform</a> 来开发具有类似原生用户体验的多平台应用。</p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer"><img src="'+r+'" alt="开启您的 Kotlin Multiplatform 之旅" width="700"></a></p><h3 id="ionic" tabindex="-1">Ionic <a class="header-anchor" href="#ionic" aria-label="Permalink to &quot;Ionic&quot;">​</a></h3><p>Ionic 是一个开源移动 UI 工具包，于 2013 年发布。它帮助开发者使用 HTML、CSS 和 JavaScript 等 Web 技术，并通过与 Angular、React 和 Vue 框架的集成，从单一代码库构建跨平台移动应用程序。</p><p><strong>编程语言：</strong> JavaScript。</p><p><strong>移动应用示例：</strong> T-Mobile、BBC（儿童与教育应用）、EA Games。</p><p><strong>主要特性：</strong></p><ul><li>Ionic 基于一个专门为移动操作系统设计的 SaaS UI 框架，并提供了多个用于构建应用程序的 UI 组件。</li><li>Ionic 框架使用 Cordova 和 Capacitor 插件来提供对设备内置特性（例如摄像头、手电筒、GPS 和录音机）的访问。</li><li>Ionic 拥有自己的命令行界面 Ionic CLI，它作为构建 Ionic 应用的首选工具。</li></ul><p>Ionic Framework 论坛持续活跃，社区成员在此交流知识并互相帮助克服开发挑战。</p><h3 id="net-maui" tabindex="-1">.NET MAUI <a class="header-anchor" href="#net-maui" aria-label="Permalink to &quot;.NET MAUI&quot;">​</a></h3><p>.NET Multi-platform App UI (.NET MAUI) 是一个跨平台框架，于 2022 年 5 月发布，由微软所有。它允许开发者使用 C# 和 XAML 创建原生移动和桌面应用。.NET MAUI 是 Xamarin.Forms 的演进版本，Xamarin.Forms 是 Xamarin 的功能之一，它为 Xamarin 支持的平台提供了原生控件。</p><p><strong>编程语言：</strong> C#, XAML。</p><p><strong>移动应用示例：</strong> NBC Sports Next、Escola Agil、Irth Solutions。</p><p><strong>主要特性：</strong></p><ul><li>.NET MAUI 提供了用于访问原生设备特性（例如 GPS、加速度计以及电池和网络状态）的跨平台 API。</li><li>它拥有一个单一项目系统，通过多目标支持来面向 Android、iOS、macOS 和 Windows。</li><li>借助 .NET 热重载的支持，开发者可以在应用运行期间修改托管源代码。</li></ul><p>尽管 .NET MAUI 仍然是一个相对较新的框架，但它已在开发者中获得关注，并在 Stack Overflow 和 Microsoft Q&amp;A 上拥有活跃的社区。</p><h3 id="nativescript" tabindex="-1">NativeScript <a class="header-anchor" href="#nativescript" aria-label="Permalink to &quot;NativeScript&quot;">​</a></h3><p>这款开源移动应用程序开发框架最初于 2014 年发布。NativeScript 允许您使用 JavaScript 或可转换为 JavaScript 的语言（如 TypeScript）以及 Angular 和 Vue.js 等框架来构建 Android 和 iOS 移动应用。</p><p><strong>编程语言：</strong> JavaScript, TypeScript。</p><p><strong>移动应用示例：</strong> Daily Nanny、Strudel、Breethe。</p><p><strong>主要特性：</strong></p><ul><li>NativeScript 允许开发者轻松访问原生 Android 和 iOS API。</li><li>该框架渲染平台原生 UI。使用 NativeScript 构建的应用直接在原生设备上运行，不依赖于 WebViews（这是一个 Android 操作系统系统组件，允许 Android 应用程序在应用内显示来自 Web 的内容）。</li><li>NativeScript 提供了各种插件和预构建应用模板，无需第三方解决方案。</li></ul><p>NativeScript 基于 JavaScript 和 Angular 等知名 Web 技术，这就是许多开发者选择此框架的原因。尽管如此，它通常由小型公司和初创企业使用。</p><h2 id="如何为您的项目选择合适的跨平台应用开发框架" tabindex="-1">如何为您的项目选择合适的跨平台应用开发框架？ <a class="header-anchor" href="#如何为您的项目选择合适的跨平台应用开发框架" aria-label="Permalink to &quot;如何为您的项目选择合适的跨平台应用开发框架？&quot;">​</a></h2><p>除了上述框架之外，还有其他跨平台框架，新工具也将继续出现在市场上。面对众多选项，您如何为您的下一个项目找到合适的框架？第一步是了解您的项目需求和目标，并清楚了解您未来的应用希望是什么样子。接下来，您需要考虑以下重要因素，以便为您的业务决定最适合的方案。</p><h4 id="_1-团队的专业知识" tabindex="-1">1. 团队的专业知识 <a class="header-anchor" href="#_1-团队的专业知识" aria-label="Permalink to &quot;1. 团队的专业知识&quot;">​</a></h4><p>不同的跨平台移动开发框架基于不同的编程语言。在采用框架之前，请检测它所需的技能，并确保您的移动工程师团队拥有足够的知识和经验来使用它。</p><p>例如，如果您的团队拥有一支高技能的 JavaScript 开发者团队，并且没有足够的资源来引入新技术，那么选择使用这种语言的框架（例如 React Native）可能更值得。</p><h4 id="_2-供应商可靠性和支持" tabindex="-1">2. 供应商可靠性和支持 <a class="header-anchor" href="#_2-供应商可靠性和支持" aria-label="Permalink to &quot;2. 供应商可靠性和支持&quot;">​</a></h4><p>重要的是要确保框架的维护者会长期持续支持它。深入了解开发和支持您正在考虑的框架的公司，并查看使用它们构建的移动应用。</p><h4 id="_3-ui-定制化" tabindex="-1">3. UI 定制化 <a class="header-anchor" href="#_3-ui-定制化" aria-label="Permalink to &quot;3. UI 定制化&quot;">​</a></h4><p>根据用户界面对您未来应用的重要性，您可能需要了解使用特定框架定制 UI 的难易程度。例如，Kotlin Multiplatform 借助 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>（JetBrains 推出的一款现代声明式跨平台 UI 框架）提供了完整的代码共享灵活性。它使开发者能够跨 Android、iOS、Web 和桌面（通过 JVM）共享 UI，并且基于 Kotlin 和 Jetpack Compose。</p><p><a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer"><img src="'+e+'" alt="探索 Compose Multiplatform" width="700"></a></p><h4 id="_4-框架成熟度" tabindex="-1">4. 框架成熟度 <a class="header-anchor" href="#_4-框架成熟度" aria-label="Permalink to &quot;4. 框架成熟度&quot;">​</a></h4><p>了解潜在框架的公共 API 和工具变化的频繁程度。例如，对原生操作系统组件的一些更改会破坏内部跨平台行为。最好意识到在使用移动应用开发框架时可能面临的挑战。您还可以浏览 GitHub 并检测该框架有多少错误以及这些错误如何处理。</p><h4 id="_5-框架能力" tabindex="-1">5. 框架能力 <a class="header-anchor" href="#_5-框架能力" aria-label="Permalink to &quot;5. 框架能力&quot;">​</a></h4><p>每个框架都有自己的能力和局限性。了解框架提供了哪些特性和工具对于确定最适合您的解决方案至关重要。它是否有代码分析器和单元测试框架？您将能够多快、多轻松地构建、调试和测试您的应用？</p><h4 id="_6-安全性" tabindex="-1">6. 安全性 <a class="header-anchor" href="#_6-安全性" aria-label="Permalink to &quot;6. 安全性&quot;">​</a></h4><p>在构建关键业务移动应用时，例如包含支付系统的银行和电子商务应用，安全性和隐私尤为重要。根据 <a href="https://owasp.org/www-project-mobile-top-10/" target="_blank" rel="noreferrer">OWASP 移动十大安全风险</a>，移动应用程序最关键的安全风险包括不安全的数据存储和认证/授权。</p><p>您需要确保您选择的多平台移动开发框架提供所需的安全级别。一种方法是浏览框架问题追踪器上的安全工单（如果它有公开可用的）。</p><h4 id="_7-教育材料" tabindex="-1">7. 教育材料 <a class="header-anchor" href="#_7-教育材料" aria-label="Permalink to &quot;7. 教育材料&quot;">​</a></h4><p>关于框架的可用学习资源的数量和质量也可以帮助您了解在使用它时您的体验将有多顺畅。全面的官方<a href="./get-started">文档</a>、线上和线下会议以及教育课程都是一个好迹象，表明您在需要时能够找到关于产品的足够必要信息。</p><h2 id="主要总结" tabindex="-1">主要总结 <a class="header-anchor" href="#主要总结" aria-label="Permalink to &quot;主要总结&quot;">​</a></h2><p>如果不考虑这些因素，很难选择最能满足您特定需求的跨平台移动开发框架。仔细查看您未来的应用程序需求，并将其与各种框架的能力进行权衡。这样做将使您能够找到合适的跨平台解决方案，帮助您交付高质量应用。</p>',75)]))}const _=o(n,[["render",s]]);export{k as __pageData,_ as default};
