import{_ as e,c as a,o as r,ag as l}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"建立適用於多平台的 Kotlin 函式庫","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/api-guidelines-build-for-multiplatform.md","filePath":"zh-Hant/kotlin/api-guidelines-build-for-multiplatform.md","lastUpdated":1754307826000}'),o={name:"zh-Hant/kotlin/api-guidelines-build-for-multiplatform.md"};function i(n,t,p,s,h,m){return r(),a("div",null,t[0]||(t[0]=[l('<h1 id="建立適用於多平台的-kotlin-函式庫" tabindex="-1">建立適用於多平台的 Kotlin 函式庫 <a class="header-anchor" href="#建立適用於多平台的-kotlin-函式庫" aria-label="Permalink to &quot;建立適用於多平台的 Kotlin 函式庫&quot;">​</a></h1><p>建立 Kotlin 函式庫時，請考慮建立並<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-publish-lib-setup.html" target="_blank" rel="noreferrer">發佈支援 Kotlin Multiplatform 的函式庫</a>。這將擴展您的函式庫的目標受眾，使其與鎖定多個平台的專案相容。</p><p>以下各節提供指南，協助您有效建立 Kotlin Multiplatform 函式庫。</p><h2 id="最大化您的觸及範圍" tabindex="-1">最大化您的觸及範圍 <a class="header-anchor" href="#最大化您的觸及範圍" aria-label="Permalink to &quot;最大化您的觸及範圍&quot;">​</a></h2><p>為了使您的函式庫能作為依賴項提供給最多的專案，請盡可能支援最多的 Kotlin Multiplatform <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#targets" target="_blank" rel="noreferrer">目標平台</a>。</p><p>如果您的函式庫不支援多平台專案所使用的平台（無論是函式庫還是應用程式），該專案將難以依賴您的函式庫。在這種情況下，專案可以將您的函式庫用於某些平台，但需要為其他平台實作單獨的解決方案，或者他們將完全選擇支援其所有平台的替代函式庫。</p><p>為了簡化產物生成，您可以嘗試實驗性的<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-publish-lib-setup.html#host-requirements" target="_blank" rel="noreferrer">交叉編譯</a>，從任何主機發佈 Kotlin Multiplatform 函式庫。這允許您在沒有 Apple 機器的情況下，為 Apple 目標生成 <code>.klib</code> 產物。我們計畫在未來穩定此功能並進一步改進函式庫發佈。請在我們的問題追蹤器 <a href="https://youtrack.jetbrains.com/issue/KT-71290" target="_blank" rel="noreferrer">YouTrack</a> 中留下您對此功能的意見回饋。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>對於 Kotlin/Native 目標，請考慮使用<a href="/zh-Hant/kotlin/native-target-support#for-library-authors">分層方法</a>來支援所有可能的目標。</p></div><h2 id="設計可從共同程式碼使用的-api" tabindex="-1">設計可從共同程式碼使用的 API <a class="header-anchor" href="#設計可從共同程式碼使用的-api" aria-label="Permalink to &quot;設計可從共同程式碼使用的 API&quot;">​</a></h2><p>建立函式庫時，請設計可從共同 Kotlin 程式碼使用的 API，而不是撰寫平台特定實作。</p><p>盡可能提供合理的預設組態，並包含平台特定組態選項。良好的預設值允許使用者從共同 Kotlin 程式碼使用函式庫的 API，無需撰寫平台特定實作來設定函式庫。</p><p>使用以下優先順序將 API 放置在最廣泛的相關來源集中：</p><ul><li><strong><code>commonMain</code> 來源集：</strong> <code>commonMain</code> 來源集中的 API 可用於函式庫支援的所有平台。目標是將您函式庫的大部分 API 放在這裡。</li><li><strong>中間來源集：</strong> 如果某些平台不支援特定的 API，請使用<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-discover-project.html#intermediate-source-sets" target="_blank" rel="noreferrer">中間來源集</a>來鎖定特定平台。例如，您可以為支援多執行緒的目標建立 <code>concurrent</code> 來源集，或為所有非 JVM 目標建立 <code>nonJvm</code> 來源集。</li><li><strong>平台特定來源集：</strong> 對於平台特定 API，請使用例如 <code>androidMain</code> 等來源集。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>要了解有關 Kotlin Multiplatform 專案的來源集的更多資訊，請參閱<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html" target="_blank" rel="noreferrer">分層專案結構</a>。</p></div><h2 id="確保跨平台行為一致" tabindex="-1">確保跨平台行為一致 <a class="header-anchor" href="#確保跨平台行為一致" aria-label="Permalink to &quot;確保跨平台行為一致&quot;">​</a></h2><p>為確保您的函式庫在所有支援的平台上行為一致，多平台函式庫中的 API 應在所有平台上接受相同範圍的有效輸入、執行相同的動作並返回相同的結果。同樣地，函式庫應統一處理無效輸入，並在所有平台上一致地報告錯誤或拋出異常。</p><p>不一致的行為會使函式庫難以使用，並迫使使用者在共同程式碼中添加條件邏輯以管理平台特定的差異。</p><p>您可以使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer"><code>expect</code> 和 <code>actual</code> 宣告</a>在共同程式碼中宣告具有平台特定實作的函式，這些實作可以完全存取每個平台的原生 API。這些實作也必須具有相同的行為，以確保它們可以從共同程式碼可靠地使用。</p><p>當 API 在跨平台行為一致時，它們只需在 <code>commonMain</code> 來源集中記錄一次即可。</p><blockquote><p>如果平台差異不可避免，例如一個平台支援更廣泛的輸入集時，請盡可能地減少它們。例如，您可能不希望限制一個平台的功能以與其他平台匹配。在這種情況下，請清楚地記錄具體差異。</p><p style=""></p></blockquote><h2 id="在所有平台進行測試" tabindex="-1">在所有平台進行測試 <a class="header-anchor" href="#在所有平台進行測試" aria-label="Permalink to &quot;在所有平台進行測試&quot;">​</a></h2><p>多平台函式庫可以擁有以共同程式碼撰寫並在所有平台執行的<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-run-tests.html" target="_blank" rel="noreferrer">多平台測試</a>。在您支援的平台上定期執行此共同測試套件可以確保函式庫行為正確且一致。</p><p>在所有已發佈的平台上定期測試 Kotlin/Native 目標可能具有挑戰性。但是，為確保更廣泛的相容性，請考慮為其可支援的所有目標發佈函式庫，並在測試相容性時採用<a href="/zh-Hant/kotlin/native-target-support#for-library-authors">分層方法</a>。</p><p>使用 <a href="https://kotlinlang.org/api/latest/kotlin.test/" target="_blank" rel="noreferrer"><code>kotlin-test</code></a> 函式庫在共同程式碼中撰寫測試，並使用平台特定的測試執行器執行它們。</p><h2 id="考量非-kotlin-使用者" tabindex="-1">考量非 Kotlin 使用者 <a class="header-anchor" href="#考量非-kotlin-使用者" aria-label="Permalink to &quot;考量非 Kotlin 使用者&quot;">​</a></h2><p>Kotlin Multiplatform 在其支援的目標平台上提供與原生 API 和語言的互通性。建立 Kotlin Multiplatform 函式庫時，請考慮使用者是否需要從 Kotlin 以外的語言使用函式庫的類型和宣告。</p><p>例如，如果您的函式庫中的某些類型將透過互通性暴露給 Swift 程式碼，請設計這些類型以便於從 Swift 存取。 <a href="https://github.com/kotlin-hands-on/kotlin-swift-interopedia" target="_blank" rel="noreferrer">Kotlin-Swift interopedia</a> 提供了有關從 Swift 呼叫 Kotlin API 時其顯示方式的有用見解。</p><h2 id="推廣您的函式庫" tabindex="-1">推廣您的函式庫 <a class="header-anchor" href="#推廣您的函式庫" aria-label="Permalink to &quot;推廣您的函式庫&quot;">​</a></h2><p>您的函式庫可以在 <a href="https://klibs.io/" target="_blank" rel="noreferrer">JetBrains 搜尋平台</a>上被推薦。它旨在讓使用者可以輕鬆地根據目標平台搜尋 Kotlin Multiplatform 函式庫。</p><p>符合條件的函式庫會自動新增。有關如何新增函式庫的更多資訊，請參閱<a href="https://klibs.io/faq" target="_blank" rel="noreferrer">常見問題</a>。</p>',30)]))}const f=e(o,[["render",i]]);export{d as __pageData,f as default};
