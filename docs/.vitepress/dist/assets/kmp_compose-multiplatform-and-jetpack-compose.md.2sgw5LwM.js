import{_ as s}from"./chunks/compose-multiplatform-and-jetpack-compose.CSURSSFa.js";import{_ as m,C as r,c as i,o as c,j as o,G as a,ag as n,a as t,w as p}from"./chunks/framework.Bksy39di.js";const J=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/compose-multiplatform-and-jetpack-compose.md","filePath":"kmp/compose-multiplatform-and-jetpack-compose.md","lastUpdated":1755516278000}'),f={name:"kmp/compose-multiplatform-and-jetpack-compose.md"};function u(h,e,k,C,b,g){const d=r("web-summary"),l=r("tldr");return c(),i("div",null,[e[2]||(e[2]=o("h1",{id:"compose-multiplatform-和-jetpack-compose",tabindex:"-1"},[t("Compose Multiplatform 和 Jetpack Compose "),o("a",{class:"header-anchor",href:"#compose-multiplatform-和-jetpack-compose","aria-label":'Permalink to "Compose Multiplatform 和 Jetpack Compose"'},"​")],-1)),a(d,null,{default:p(()=>e[0]||(e[0]=[t("本文解释了 Compose Multiplatform 和 Jetpack Compose 之间的关系。你将了解这两个工具包及其如何协同工作。")])),_:1}),e[3]||(e[3]=o("p",null,[o("img",{src:s,alt:"由 JetBrains 创建的 Compose Multiplatform，由 Google 创建的 Jetpack Compose",width:"730"})],-1)),a(l,null,{default:p(()=>e[1]||(e[1]=[t("本文解释了 Compose Multiplatform 和 Jetpack Compose 之间的关系。 你将了解这两个工具包如何协同工作、库在不同目标平台上的处理方式， 以及如何为多平台项目创建或改编你自己的 UI 库。")])),_:1}),e[4]||(e[4]=n('<p>Compose Multiplatform 是一个由 JetBrains 开发的跨平台 UI 工具包。 它通过支持额外的目标平台，扩展了 Google 适用于 Android 的 <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> 工具包。</p><p>Compose Multiplatform 使 Compose API 可从<a href="./multiplatform-discover-project#common-code">公共 Kotlin 代码</a>中获取， 允许你编写可在 Android、iOS、桌面和 Web 上运行的共享 Compose UI 代码。</p><table tabindex="0"><thead><tr><th></th><th><strong>Compose Multiplatform</strong></th><th><strong>Jetpack Compose</strong></th></tr></thead><tbody><tr><td><strong>平台</strong></td><td>Android、iOS、桌面、Web</td><td>Android</td></tr><tr><td><strong>支持方</strong></td><td>JetBrains</td><td>Google</td></tr></tbody></table><h2 id="jetpack-compose-与可组合项" tabindex="-1">Jetpack Compose 与可组合项 <a class="header-anchor" href="#jetpack-compose-与可组合项" aria-label="Permalink to &quot;Jetpack Compose 与可组合项&quot;">​</a></h2><p>Jetpack Compose 是一个用于构建原生 Android 界面的声明式 UI 工具包。 其基础是使用 <code>@Composable</code> 注解标记的_可组合_函数。 这些函数定义了 UI 的部分，并在底层数据发生变化时自动更新。 你可以组合可组合项来构建布局、处理用户输入、管理状态和应用动画。 Jetpack Compose 包含 <code>Text</code>、<code>Button</code>、<code>Row</code> 和 <code>Column</code> 等常用 UI 组件，你可以使用修饰符对其进行自定义。</p><p>Compose Multiplatform 建立在相同的原则之上。 它与 Jetpack Compose 共享 Compose 编译器和运行时，并使用相同的 API — <code>@Composable</code> 函数、诸如 <code>remember</code> 等状态管理工具、布局组件、修饰符和动画支持。 这意味着你可以将 Jetpack Compose 知识与 Compose Multiplatform 结合使用，为 Android、iOS、桌面和 Web 构建跨平台 UI。</p><h2 id="compose-multiplatform-与-jetpack-compose-特性" tabindex="-1">Compose Multiplatform 与 Jetpack Compose 特性 <a class="header-anchor" href="#compose-multiplatform-与-jetpack-compose-特性" aria-label="Permalink to &quot;Compose Multiplatform 与 Jetpack Compose 特性&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>你可以从几乎任何 Jetpack Compose 资料中了解这两个 UI 框架的基本原理，包括 <a href="https://developer.android.com/jetpack/compose/documentation" target="_blank" rel="noreferrer">Google 的官方文档</a>。</p></div><p>当然，Compose Multiplatform 具有平台特有的特性和考虑因素：</p><ul><li><a href="./compose-android-only-components">仅限 Android 的组件</a>页面列出了与 Android 平台紧密关联的 API，因此无法从公共 Compose Multiplatform 代码中获取。</li><li>一些平台特有的 API，例如适用于桌面的窗口处理 API 或适用于 iOS 的 UIKit 兼容性 API，仅在其各自的平台上可用。</li></ul><p>以下是常用组件和 API 的可用性概述：</p><table tabindex="0"><thead><tr><th></th><th><strong>Compose Multiplatform</strong></th><th><strong>Jetpack Compose</strong></th></tr></thead><tbody><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/compose-animation" target="_blank" rel="noreferrer">Compose Animation</a></td><td>Yes</td><td>Yes</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/compose-compiler" target="_blank" rel="noreferrer">Compose Compiler</a></td><td>Yes</td><td>Yes</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation" target="_blank" rel="noreferrer">Compose Foundation</a></td><td>Yes</td><td>Yes</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/compose-material" target="_blank" rel="noreferrer">Compose Material</a></td><td>Yes</td><td>Yes</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/compose-material30" target="_blank" rel="noreferrer">Compose Material 3</a></td><td>Yes</td><td>Yes</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime" target="_blank" rel="noreferrer">Compose Runtime</a></td><td>Yes，<code>androidx.compose.runtime.rxjava2</code> 和 <code>androidx.compose.runtime.rxjava3</code> 除外</td><td>Yes</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui" target="_blank" rel="noreferrer">Compose UI</a></td><td>Yes</td><td>Yes</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/lifecycle" target="_blank" rel="noreferrer">Jetpack Lifecycle</a></td><td><a href="./compose-lifecycle">Yes</a></td><td>Yes</td></tr><tr><td><a href="https://developer.android.com/topic/libraries/architecture/viewmodel" target="_blank" rel="noreferrer">Jetpack ViewModel</a></td><td><a href="./compose-viewmodel">Yes</a></td><td>Yes</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/navigation" target="_blank" rel="noreferrer">Jetpack Navigation Compose</a></td><td><a href="./compose-navigation-routing">Yes</a></td><td>Yes</td></tr><tr><td>资源</td><td><a href="./compose-multiplatform-resources">Compose Multiplatform 资源库</a> 使用 <code>Res</code> 类</td><td><a href="https://developer.android.com/jetpack/compose/resources" target="_blank" rel="noreferrer">Android 资源系统</a> 使用 <code>R</code> 类</td></tr><tr><td><a href="https://developers.google.com/maps/documentation/android-sdk/maps-compose" target="_blank" rel="noreferrer">Maps Compose</a></td><td>No</td><td>Yes</td></tr><tr><td>用于 UI 组件、导航、架构等方面的<a href="#libraries-for-compose-multiplatform">第三方库</a></td><td><a href="https://github.com/terrakok/kmp-awesome?tab=readme-ov-file#-compose-ui" target="_blank" rel="noreferrer">Compose Multiplatform 库</a></td><td>Jetpack Compose 和 Compose Multiplatform 库</td></tr></tbody></table><h2 id="技术细节" tabindex="-1">技术细节 <a class="header-anchor" href="#技术细节" aria-label="Permalink to &quot;技术细节&quot;">​</a></h2><p>Compose Multiplatform 建立在 Google 发布的代码和版本之上。 尽管 Google 的重点是适用于 Android 的 Jetpack Compose，但 Google 和 JetBrains 之间存在紧密协作，以支持 Compose Multiplatform。</p><p>Jetpack 包含 Foundation 和 Material 等第一方库，这些库由 Google 针对 Android 发布。 为了使<a href="https://github.com/JetBrains/compose-multiplatform-core" target="_blank" rel="noreferrer">这些库</a>提供的 API 可从公共代码中获取，JetBrains 维护了这些库的多平台版本，并将其发布到非 Android 目标平台。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于发布周期，请参见<a href="./compose-compatibility-and-versioning#jetpack-compose-and-compose-multiplatform-release-cycles">兼容性与版本</a>页面。</p></div><p>当你为 Android 构建 Compose Multiplatform 应用程序时，你将使用 Google 发布的 Jetpack Compose 构件。 例如，如果你将 <code>compose.material3</code> 添加到你的依赖项中，你的项目将在 Android 目标平台中使用 <code>androidx.compose.material3:material3</code>，而在其他目标平台中使用 <code>org.jetbrains.compose.material3:material3</code>。 这是基于多平台构件中的 Gradle 模块元数据自动完成的。</p><h2 id="适用于-compose-multiplatform-的库" tabindex="-1">适用于 Compose Multiplatform 的库 <a class="header-anchor" href="#适用于-compose-multiplatform-的库" aria-label="Permalink to &quot;适用于 Compose Multiplatform 的库&quot;">​</a></h2><p>通过使用 Compose Multiplatform，你可以将使用 Compose API 的库发布为 <a href="./multiplatform-publish-lib-setup">Kotlin 多平台库</a>。 这使得它们可从公共 Kotlin 代码中获取使用，面向多个平台。</p><p>因此，如果你正在构建一个使用 Compose API 的新库，请考虑利用这一点，并使用 Compose Multiplatform 将其构建为多平台库。 如果你已经为 Android 构建了一个 Jetpack Compose 库，请考虑将该库多平台化。 生态系统中已有<a href="https://github.com/terrakok/kmp-awesome#-compose-ui" target="_blank" rel="noreferrer">许多 Compose Multiplatform 库</a>可用。</p><p>当一个库使用 Compose Multiplatform 发布时，仅使用 Jetpack Compose 的应用仍然能够无缝地使用它；它们只需使用该库的 Android 构件。</p><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><p>关于以下组件的 Compose Multiplatform 实现，请阅读更多内容：</p><ul><li><a href="./compose-lifecycle">Lifecycle</a></li><li><a href="./compose-multiplatform-resources">资源</a></li><li><a href="./compose-viewmodel">公共 ViewModel</a></li><li><a href="./compose-navigation-routing">导航与路由</a></li></ul>',24))])}const v=m(f,[["render",u]]);export{J as __pageData,v as default};
