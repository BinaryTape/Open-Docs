import{_ as k,C as h,c as r,o,ag as t,j as s,G as e,w as n,a}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin 1.4.30 新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew1430.md","filePath":"zh-Hant/kotlin/whatsnew1430.md","lastUpdated":1754307826000}'),d={name:"zh-Hant/kotlin/whatsnew1430.md"};function c(g,i,E,y,u,b){const l=h("tab"),p=h("tabs");return o(),r("div",null,[i[4]||(i[4]=t(`<h1 id="kotlin-1-4-30-新功能" tabindex="-1">Kotlin 1.4.30 新功能 <a class="header-anchor" href="#kotlin-1-4-30-新功能" aria-label="Permalink to &quot;Kotlin 1.4.30 新功能&quot;">​</a></h1><p><em><a href="/zh-Hant/kotlin/releases#release-details">發佈日期：2021 年 2 月 3 日</a></em></p><p>Kotlin 1.4.30 提供了新語言功能的預覽版本，將 Kotlin/JVM 編譯器的新 IR 後端提升為 Beta 版，並帶來了各種效能和功能改進。</p><p>您也可以透過<a href="https://blog.jetbrains.com/kotlin/2021/01/kotlin-1-4-30-released/" target="_blank" rel="noreferrer">這篇部落格文章</a>了解更多新功能。</p><h2 id="語言功能" tabindex="-1">語言功能 <a class="header-anchor" href="#語言功能" aria-label="Permalink to &quot;語言功能&quot;">​</a></h2><p>Kotlin 1.5.0 將會帶來新的語言功能——JVM records 支援、密封介面以及穩定的行內類別。在 Kotlin 1.4.30 中，您可以在預覽模式下試用這些功能和改進。如果您能在相應的 YouTrack 票證中與我們分享您的回饋，我們將不勝感激，因為這將使我們能夠在 1.5.0 發佈之前解決問題。</p><ul><li><a href="#jvm-records-support">JVM records 支援</a></li><li><a href="#sealed-interfaces">密封介面</a>和<a href="#package-wide-sealed-class-hierarchies">密封類別改進</a></li><li><a href="#improved-inline-classes">改進行內類別</a></li></ul><p>若要在預覽模式下啟用這些語言功能和改進，您需要透過新增特定的編譯器選項來選擇啟用。詳情請參閱以下章節。</p><p>透過<a href="https://blog.jetbrains.com/kotlin/2021/01/new-language-features-preview-in-kotlin-1-4-30" target="_blank" rel="noreferrer">這篇部落格文章</a>了解更多關於新功能預覽的資訊。</p><h3 id="jvm-records-支援" tabindex="-1">JVM records 支援 <a class="header-anchor" href="#jvm-records-支援" aria-label="Permalink to &quot;JVM records 支援&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>JVM records 功能為<a href="/zh-Hant/kotlin/components-stability">實驗性</a>。它可能隨時被刪除或更改。 需要選擇啟用（詳情請參閱下方），您應該僅將其用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-42430" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p><a href="https://openjdk.java.net/projects/jdk/16/" target="_blank" rel="noreferrer">JDK 16 發佈版</a>包含了穩定一種名為 <a href="https://openjdk.java.net/jeps/395" target="_blank" rel="noreferrer">record</a> 的新 Java 類別類型的計劃。為了提供 Kotlin 的所有優勢並維持其與 Java 的互通性，Kotlin 正在引入實驗性的 record 類別支援。</p><p>您可以像 Kotlin 中具有屬性的類別一樣使用在 Java 中聲明的 record 類別。無需額外步驟。</p><p>從 1.4.30 開始，您可以使用 <code>@JvmRecord</code> 註釋在 Kotlin 中為<a href="/zh-Hant/kotlin/data-classes">資料類別</a>聲明 record 類別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRecord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>若要試用 JVM records 的預覽版本，請新增編譯器選項 <code>-Xjvm-enable-preview</code> 和 <code>-language-version 1.5</code>。</p><p>我們正在繼續致力於 JVM records 支援，如果您能透過這個 <a href="https://youtrack.jetbrains.com/issue/KT-42430" target="_blank" rel="noreferrer">YouTrack 票證</a>與我們分享您的回饋，我們將不勝感激。</p><p>透過 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/jvm-records.md" target="_blank" rel="noreferrer">KEEP</a> 了解更多關於實作、限制和語法的資訊。</p><h3 id="密封介面" tabindex="-1">密封介面 <a class="header-anchor" href="#密封介面" aria-label="Permalink to &quot;密封介面&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>密封介面為<a href="/zh-Hant/kotlin/components-stability">實驗性</a>。它可能隨時被刪除或更改。 需要選擇啟用（詳情請參閱下方），您應該僅將其用於評估目的。我們非常感謝您在 <a href="https://youtrack.com/issue/KT-42433" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>在 Kotlin 1.4.30 中，我們正在發佈 <em>密封介面</em> 的原型。它們補充了密封類別，並使得建立更靈活的受限類別階層成為可能。</p><p>它們可以作為「內部」介面，無法在同一個模組之外實作。您可以依賴這個事實，例如，來編寫詳盡的 <code>when</code> 運算式。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Polygon</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Polygon</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Triangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Polygon</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// when() is exhaustive: no other polygon implementations can appear</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// after the module is compiled</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> draw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(polygon: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (polygon) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rectangle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Triangle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>另一個用例：透過密封介面，您可以讓一個類別繼承自兩個或更多密封超類別。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Fillable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vertices: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vertices: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Fillable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*...*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>若要試用密封介面的預覽版本，請新增編譯器選項 <code>-language-version 1.5</code>。一旦切換到此版本，您將能夠在介面上使用 <code>sealed</code> 修飾符。如果您能透過這個 <a href="https://youtrack.jetbrains.com/issue/KT-42433" target="_blank" rel="noreferrer">YouTrack 票證</a>與我們分享您的回饋，我們將不勝感激。</p><p><a href="/zh-Hant/kotlin/sealed-classes">了解更多關於密封介面</a>。</p><h3 id="套件範圍的密封類別階層" tabindex="-1">套件範圍的密封類別階層 <a class="header-anchor" href="#套件範圍的密封類別階層" aria-label="Permalink to &quot;套件範圍的密封類別階層&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>套件範圍的密封類別階層為<a href="/zh-Hant/kotlin/components-stability">實驗性</a>。它們可能隨時被刪除或更改。 需要選擇啟用（詳情請參閱下方），您應該僅將它們用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-42433" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>密封類別現在可以形成更靈活的階層。它們可以在同一編譯單元和同一套件的所有檔案中擁有子類別。以前，所有子類別都必須出現在同一個檔案中。</p><p>直接子類別可以是頂層的，也可以巢狀在任意數量的其他具名類別、具名介面或具名物件中。密封類別的子類別必須具有適當限定的名稱——它們不能是局部或匿名物件。</p><p>若要試用套件範圍的密封類別階層，請新增編譯器選項 <code>-language-version 1.5</code>。如果您能透過這個 <a href="https://youtrack.jetbrains.com/issue/KT-42433" target="_blank" rel="noreferrer">YouTrack 票證</a>與我們分享您的回饋，我們將不勝感激。</p><p><a href="/zh-Hant/kotlin/sealed-classes#inheritance">了解更多關於套件範圍的密封類別階層</a>。</p><h3 id="改進行內類別" tabindex="-1">改進行內類別 <a class="header-anchor" href="#改進行內類別" aria-label="Permalink to &quot;改進行內類別&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>行內值類別處於 <a href="/zh-Hant/kotlin/components-stability">Beta</a> 版。它們幾乎是穩定的，但未來可能需要遷移步驟。我們將盡最大努力減少您必須進行的任何更改。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-42434" target="_blank" rel="noreferrer">YouTrack</a> 上提供關於行內類別功能的回饋。</p></div><p>Kotlin 1.4.30 將<a href="/zh-Hant/kotlin/inline-classes">行內類別</a>提升至 <a href="/zh-Hant/kotlin/components-stability">Beta</a> 版，並為它們帶來以下功能和改進：</p><ul><li><p>由於行內類別是<a href="https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/doc-files/ValueBased.html" target="_blank" rel="noreferrer">基於值的</a>，您可以使用 <code>value</code> 修飾符定義它們。<code>inline</code> 和 <code>value</code> 修飾符現在彼此等效。在未來的 Kotlin 版本中，我們計劃棄用 <code>inline</code> 修飾符。</p><p>從現在開始，Kotlin 要求在 JVM 後端的類別聲明之前加上 <code>@JvmInline</code> 註釋：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// For JVM backends</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>行內類別可以擁有 <code>init</code> 區塊。您可以新增在類別實例化後立即執行的程式碼：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Negative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>從 Java 程式碼呼叫帶有行內類別的函式：在 Kotlin 1.4.30 之前，由於名字修飾，您無法從 Java 呼叫接受行內類別的函式。 從現在開始，您可以手動禁用名字修飾。若要從 Java 程式碼呼叫此類函式，您應該在函式聲明之前新增 <code>@JvmName</code> 註釋：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;computeUInt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span></code></pre></div></li><li><p>在此版本中，我們更改了函式的名字修飾方案以修復不正確的行為。這些更改導致了 ABI 變更。</p><p>從 1.4.30 開始，Kotlin 編譯器預設使用新的名字修飾方案。使用 <code>-Xuse-14-inline-classes-mangling-scheme</code> 編譯器旗標來強制編譯器使用舊的 1.4.0 名字修飾方案並保留二進位相容性。</p></li></ul><p>Kotlin 1.4.30 將行內類別提升至 Beta 版，我們計劃在未來版本中使其穩定。如果您能透過這個 <a href="https://youtrack.jetbrains.com/issue/KT-42434" target="_blank" rel="noreferrer">YouTrack 票證</a>與我們分享您的回饋，我們將不勝感激。</p><p>若要試用行內類別的預覽版本，請新增編譯器選項 <code>-Xinline-classes</code> 或 <code>-language-version 1.5</code>。</p><p>在 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/inline-classes.md" target="_blank" rel="noreferrer">KEEP</a> 中了解更多關於名字修飾演算法的資訊。</p><p><a href="/zh-Hant/kotlin/inline-classes">了解更多關於行內類別</a>。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><h3 id="jvm-ir-編譯器後端達到-beta-版" tabindex="-1">JVM IR 編譯器後端達到 Beta 版 <a class="header-anchor" href="#jvm-ir-編譯器後端達到-beta-版" aria-label="Permalink to &quot;JVM IR 編譯器後端達到 Beta 版&quot;">​</a></h3><p>用於 Kotlin/JVM 的 <a href="/zh-Hant/kotlin/whatsnew14#unified-backends-and-extensibility">基於 IR 的編譯器後端</a> 在 1.4.0 中以 <a href="/zh-Hant/kotlin/components-stability">Alpha</a> 版形式推出，現已達到 Beta 版。這是 IR 後端成為 Kotlin/JVM 編譯器預設後端之前的最後一個預穩定級別。</p><p>我們現在取消了對 IR 編譯器產生二進位檔的消費限制。以前，只有在啟用新後端的情況下，您才能使用由新 JVM IR 後端編譯的程式碼。從 1.4.30 開始，沒有此類限制，因此您可以使用新後端為第三方用途（例如函式庫）建構組件。試用新後端的 Beta 版本，並在我們的<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">問題追蹤器</a>中分享您的回饋。</p><p>若要啟用新的 JVM IR 後端，請將以下行新增到專案的設定檔中：</p>`,46)),s("ul",null,[s("li",null,[i[2]||(i[2]=s("p",null,"在 Gradle 中：",-1)),e(p,{group:"build-script"},{default:n(()=>[e(l,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>i[0]||(i[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile::"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"class"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions.useIR "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),e(l,{title:"Groovy","group-key":"groovy"},{default:n(()=>i[1]||(i[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"useIR "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i[3]||(i[3]=t(`<li><p>在 Maven 中：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-Xuse-ir&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li>`,1))]),i[5]||(i[5]=t(`<p>透過<a href="https://blog.jetbrains.com/kotlin/2021/01/the-jvm-backend-is-in-beta-let-s-make-it-stable-together" target="_blank" rel="noreferrer">這篇部落格文章</a>了解更多關於 JVM IR 後端帶來的變更。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><h3 id="效能改進" tabindex="-1">效能改進 <a class="header-anchor" href="#效能改進" aria-label="Permalink to &quot;效能改進&quot;">​</a></h3><p>Kotlin/Native 在 1.4.30 中獲得了各種效能改進，從而縮短了編譯時間。例如，在 <a href="https://github.com/kotlin-hands-on/kmm-networking-and-data-storage/tree/final" target="_blank" rel="noreferrer">Networking and data storage with Kotlin Multiplatform Mobile</a> 範例中重建框架所需的時間從 9.5 秒（在 1.4.10 中）減少到 4.5 秒（在 1.4.30 中）。</p><h3 id="apple-watchos-64-位元模擬器目標" tabindex="-1">Apple watchOS 64 位元模擬器目標 <a class="header-anchor" href="#apple-watchos-64-位元模擬器目標" aria-label="Permalink to &quot;Apple watchOS 64 位元模擬器目標&quot;">​</a></h3><p>自 7.0 版以來，watchOS 已棄用 x86 模擬器目標。為跟上最新的 watchOS 版本，Kotlin/Native 為在 64 位元架構上執行模擬器提供了新目標 <code>watchosX64</code>。</p><h3 id="支援-xcode-12-2-函式庫" tabindex="-1">支援 Xcode 12.2 函式庫 <a class="header-anchor" href="#支援-xcode-12-2-函式庫" aria-label="Permalink to &quot;支援 Xcode 12.2 函式庫&quot;">​</a></h3><p>我們新增了對 Xcode 12.2 隨附的新函式庫的支援。您現在可以從 Kotlin 程式碼中使用它們。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><h3 id="頂層屬性的惰性初始化" tabindex="-1">頂層屬性的惰性初始化 <a class="header-anchor" href="#頂層屬性的惰性初始化" aria-label="Permalink to &quot;頂層屬性的惰性初始化&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>頂層屬性的惰性初始化為<a href="/zh-Hant/kotlin/components-stability">實驗性</a>。它可能隨時被刪除或更改。 需要選擇啟用（詳情請參閱下方），您應該僅將其用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-44320" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>用於 Kotlin/JS 的 <a href="/zh-Hant/kotlin/js-ir-compiler">IR 後端</a>正在接收頂層屬性的惰性初始化原型實作。這減少了應用程式啟動時初始化所有頂層屬性的需求，並且應該顯著縮短應用程式啟動時間。</p><p>我們將繼續致力於惰性初始化，並請您試用當前的原型，並在<a href="https://youtrack.jetbrains.com/issue/KT-44320" target="_blank" rel="noreferrer">這個 YouTrack 票證</a>或官方 <a href="https://kotlinlang.slack.com" target="_blank" rel="noreferrer">Kotlin Slack</a> 中的 <a href="https://kotlinlang.slack.com/archives/C0B8L3U69" target="_blank" rel="noreferrer"><code>#javascript</code></a> 頻道（在此處<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">取得邀請</a>）中分享您的想法和結果。</p><p>若要使用惰性初始化，請在編譯程式碼時使用 JS IR 編譯器新增 <code>-Xir-property-lazy-initialization</code> 編譯器選項。</p><h2 id="gradle-專案改進" tabindex="-1">Gradle 專案改進 <a class="header-anchor" href="#gradle-專案改進" aria-label="Permalink to &quot;Gradle 專案改進&quot;">​</a></h2><h3 id="支援-gradle-設定快取" tabindex="-1">支援 Gradle 設定快取 <a class="header-anchor" href="#支援-gradle-設定快取" aria-label="Permalink to &quot;支援 Gradle 設定快取&quot;">​</a></h3><p>從 1.4.30 開始，Kotlin Gradle 插件支援<a href="https://docs.gradle.org/current/userguide/configuration_cache.html" target="_blank" rel="noreferrer">設定快取</a>功能。它能加速建構過程：一旦您執行命令，Gradle 就會執行設定階段並計算任務圖。Gradle 會快取結果並將其用於後續的建構。</p><p>若要開始使用此功能，您可以<a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:usage" target="_blank" rel="noreferrer">使用 Gradle 命令</a>或<a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:ide:intellij" target="_blank" rel="noreferrer">設定基於 IntelliJ 的 IDE</a>。</p><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><h3 id="區域設定無關的文字大小寫轉換-api" tabindex="-1">區域設定無關的文字大小寫轉換 API <a class="header-anchor" href="#區域設定無關的文字大小寫轉換-api" aria-label="Permalink to &quot;區域設定無關的文字大小寫轉換 API&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>區域設定無關的 API 功能為<a href="/zh-Hant/kotlin/components-stability">實驗性</a>。它可能隨時被刪除或更改。 僅用於評估目的。 我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-42437" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>此版本引入了用於更改字串和字元大小寫的實驗性區域設定無關 API。 當前的 <code>toLowerCase()</code>、<code>toUpperCase()</code>、<code>capitalize()</code>、<code>decapitalize()</code> API 函式是區域設定敏感的。 這意味著不同的平台區域設定可能會影響程式碼行為。例如，在土耳其語區域設定中，當字串 &quot;kotlin&quot; 使用 <code>toUpperCase</code> 轉換時，結果是 &quot;KOTLİN&quot;，而不是 &quot;KOTLIN&quot;。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// current API</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Needs to be capitalized&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NEEDS TO BE CAPITALIZED</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// new API</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Needs to be capitalized&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uppercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NEEDS TO BE CAPITALIZED</span></span></code></pre></div><p>Kotlin 1.4.30 提供了以下替代方案：</p><ul><li><p>對於 <code>String</code> 函式：</p><table tabindex="0"><thead><tr><th><strong>早期版本</strong></th><th><strong>1.4.30 替代方案</strong></th></tr></thead><tbody><tr><td><code>String.toUpperCase()</code></td><td><code>String.uppercase()</code></td></tr><tr><td><code>String.toLowerCase()</code></td><td><code>String.lowercase()</code></td></tr><tr><td><code>String.capitalize()</code></td><td><code>String.replaceFirstChar { it.uppercase() }</code></td></tr><tr><td><code>String.decapitalize()</code></td><td><code>String.replaceFirstChar { it.lowercase() }</code></td></tr></tbody></table></li><li><p>對於 <code>Char</code> 函式：</p><table tabindex="0"><thead><tr><th><strong>早期版本</strong></th><th><strong>1.4.30 替代方案</strong></th></tr></thead><tbody><tr><td><code>Char.toUpperCase()</code></td><td><code>Char.uppercaseChar(): Char</code><br><code>Char.uppercase(): String</code></td></tr><tr><td><code>Char.toLowerCase()</code></td><td><code>Char.lowercaseChar(): Char</code><br><code>Char.lowercase(): String</code></td></tr><tr><td><code>Char.toTitleCase()</code></td><td><code>Char.titlecaseChar(): Char</code><br><code>Char.titlecase(): String</code></td></tr></tbody></table></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>對於 Kotlin/JVM，還有帶有明確 <code>Locale</code> 參數的重載 <code>uppercase()</code>、<code>lowercase()</code> 和 <code>titlecase()</code> 函式。</p></div><p>在 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/stdlib/locale-agnostic-string-conversions.md" target="_blank" rel="noreferrer">KEEP</a> 中查看文字處理函式的完整更改列表。</p><h3 id="清晰的-char-to-code-和-char-to-digit-轉換" tabindex="-1">清晰的 Char-to-code 和 Char-to-digit 轉換 <a class="header-anchor" href="#清晰的-char-to-code-和-char-to-digit-轉換" aria-label="Permalink to &quot;清晰的 Char-to-code 和 Char-to-digit 轉換&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>Char</code> 轉換的明確 API 功能為<a href="/zh-Hant/kotlin/components-stability">實驗性</a>。它可能隨時被刪除或更改。 僅用於評估目的。 我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-44333" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>當前的 <code>Char</code> 到數字轉換函式會返回以不同數字類型表示的 UTF-16 程式碼，這些函式經常與類似的 String-to-Int 轉換混淆，後者返回字串的數字值：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns 4</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns 52</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// and there was no common function that would return the numeric value 4 for Char &#39;4&#39;</span></span></code></pre></div><p>為了避免這種混淆，我們決定將 <code>Char</code> 轉換分為以下兩組命名清晰的函式：</p><ul><li><p>取得 <code>Char</code> 整數程式碼並從給定程式碼建構 <code>Char</code> 的函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Char.code: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span></code></pre></div></li><li><p>將 <code>Char</code> 轉換為其所代表數字值的函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToIntOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?</span></span></code></pre></div></li><li><p><code>Int</code> 的擴充函式，用於將其所代表的非負單一數字轉換為相應的 <code>Char</code> 表示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span></span></code></pre></div></li></ul><p>在 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/stdlib/char-int-conversions.md" target="_blank" rel="noreferrer">KEEP</a> 中查看更多詳細資訊。</p><h2 id="序列化更新" tabindex="-1">序列化更新 <a class="header-anchor" href="#序列化更新" aria-label="Permalink to &quot;序列化更新&quot;">​</a></h2><p>除了 Kotlin 1.4.30，我們還發佈了 <code>kotlinx.serialization</code> <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.1.0-RC" target="_blank" rel="noreferrer">1.1.0-RC</a>，其中包含一些新功能：</p><ul><li>行內類別序列化支援</li><li>無符號原生型別序列化支援</li></ul><h3 id="行內類別序列化支援" tabindex="-1">行內類別序列化支援 <a class="header-anchor" href="#行內類別序列化支援" aria-label="Permalink to &quot;行內類別序列化支援&quot;">​</a></h3><p>從 Kotlin 1.4.30 開始，您可以使行內類別<a href="/zh-Hant/kotlin/serialization">可序列化</a>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>此功能需要新的 1.4.30 IR 編譯器。</p></div><p>當可序列化的行內類別用於其他可序列化類別時，序列化框架不會對其進行裝箱。</p><p>在 <code>kotlinx.serialization</code> <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/inline-classes.md#serializable-inline-classes" target="_blank" rel="noreferrer">文件中</a>了解更多資訊。</p><h3 id="無符號原生型別序列化支援" tabindex="-1">無符號原生型別序列化支援 <a class="header-anchor" href="#無符號原生型別序列化支援" aria-label="Permalink to &quot;無符號原生型別序列化支援&quot;">​</a></h3><p>從 1.4.30 開始，您可以將 <a href="https://github.com/Kotlin/kotlinx.serialization" target="_blank" rel="noreferrer">kotlinx.serialization</a> 的標準 JSON 序列化器用於無符號原生型別：<code>UInt</code>、<code>ULong</code>、<code>UByte</code> 和 <code>UShort</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counted: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> description: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 239</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(counted, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tries&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <code>kotlinx.serialization</code> <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/inline-classes.md#unsigned-types-support-json-only" target="_blank" rel="noreferrer">文件中</a>了解更多資訊。</p>`,47))])}const m=k(d,[["render",c]]);export{C as __pageData,m as default};
