import{_ as h,C as e,c as k,o as d,ag as o,G as t,w as l,j as s,a as i}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlin/Native 라이브러리","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/native-libraries.md","filePath":"ko/kotlin/native-libraries.md","lastUpdated":1754307826000}'),r={name:"ko/kotlin/native-libraries.md"};function c(g,a,F,y,b,E){const n=e("tab"),p=e("tabs");return d(),k("div",null,[a[2]||(a[2]=o(`<h1 id="kotlin-native-라이브러리" tabindex="-1">Kotlin/Native 라이브러리 <a class="header-anchor" href="#kotlin-native-라이브러리" aria-label="Permalink to &quot;Kotlin/Native 라이브러리&quot;">​</a></h1><h2 id="kotlin-컴파일러-세부-정보" tabindex="-1">Kotlin 컴파일러 세부 정보 <a class="header-anchor" href="#kotlin-컴파일러-세부-정보" aria-label="Permalink to &quot;Kotlin 컴파일러 세부 정보&quot;">​</a></h2><p>Kotlin/Native 컴파일러로 라이브러리를 생성하려면 <code>-produce library</code> 또는 <code>-p library</code> 플래그를 사용하세요. 예를 들어:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc-native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foo.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> library</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bar</span></span></code></pre></div><p>이 명령어는 <code>foo.kt</code>의 컴파일된 내용을 담은 <code>bar.klib</code>를 생성합니다.</p><p>라이브러리에 링크하려면 <code>-library &lt;name&gt;</code> 또는 <code>-l &lt;name&gt;</code> 플래그를 사용하세요. 예를 들어:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc-native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> qux.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bar</span></span></code></pre></div><p>이 명령어는 <code>qux.kt</code>와 <code>bar.klib</code>를 이용하여 <code>program.kexe</code>를 생성합니다.</p><h2 id="cinterop-도구-세부-정보" tabindex="-1">cinterop 도구 세부 정보 <a class="header-anchor" href="#cinterop-도구-세부-정보" aria-label="Permalink to &quot;cinterop 도구 세부 정보&quot;">​</a></h2><p><strong>cinterop</strong> 도구는 네이티브 라이브러리용 <code>.klib</code> 래퍼를 주요 출력물로 생성합니다. 예를 들어, Kotlin/Native 배포판에 포함된 간단한 <code>libgit2.def</code> 네이티브 라이브러리 정의 파일을 사용하여</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cinterop</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -def</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> samples/gitchurn/src/nativeInterop/cinterop/libgit2.def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -compiler-option</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I/usr/local/include</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libgit2</span></span></code></pre></div><p><code>libgit2.klib</code>를 얻을 수 있습니다.</p><p>자세한 내용은 <a href="/ko/kotlin/native-c-interop">C Interop</a>에서 확인하세요.</p><h2 id="klib-유틸리티" tabindex="-1">klib 유틸리티 <a class="header-anchor" href="#klib-유틸리티" aria-label="Permalink to &quot;klib 유틸리티&quot;">​</a></h2><p><strong>klib</strong> 라이브러리 관리 유틸리티를 사용하면 라이브러리를 검사하고 설치할 수 있습니다.</p><p>다음 명령어를 사용할 수 있습니다:</p><ul><li><p><code>content</code> – 라이브러리 내용 나열:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> klib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> contents</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p><code>info</code> – 라이브러리의 내부 관리 세부 정보를 검사합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> klib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> info</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p><code>install</code> – 라이브러리를 기본 위치에 설치합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> klib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li><li><p><code>remove</code> – 라이브러리를 기본 레포지토리에서 제거합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> klib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remove</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div></li></ul><p>위에 언급된 모든 명령어는 기본 레포지토리와 다른 레포지토리를 지정하기 위한 추가 <code>-repository &lt;directory&gt;</code> 인수를 허용합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> klib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">comman</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -repository</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">director</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="몇-가지-예시" tabindex="-1">몇 가지 예시 <a class="header-anchor" href="#몇-가지-예시" aria-label="Permalink to &quot;몇 가지 예시&quot;">​</a></h2><p>먼저 라이브러리를 생성해 봅시다. 작은 라이브러리 소스 코드를 <code>kotlinizer.kt</code>에 넣으세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinizer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String.kotlinized</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc-native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinizer.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> library</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinizer</span></span></code></pre></div><p>라이브러리가 현재 디렉토리에 생성되었습니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinizer.klib</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinizer.klib</span></span></code></pre></div><p>이제 라이브러리 내용을 확인해 봅시다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> klib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> contents</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinizer</span></span></code></pre></div><p><code>kotlinizer</code>를 기본 레포지토리에 설치할 수 있습니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> klib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinizer</span></span></code></pre></div><p>현재 디렉토리에서 해당 흔적을 모두 제거하세요:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinizer.klib</span></span></code></pre></div><p>아주 짧은 프로그램을 생성하여 <code>use.kt</code>에 넣으세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinizer.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${&quot;world&quot;.kotlinized}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이제 방금 생성한 라이브러리와 링크하여 프로그램을 컴파일하세요:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc-native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinizer</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kohello</span></span></code></pre></div><p>그리고 프로그램을 실행하세요:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./kohello.kexe</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Kotlin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world!</span></span></code></pre></div><p>즐거운 시간 되시길 바랍니다!</p><h2 id="고급-주제" tabindex="-1">고급 주제 <a class="header-anchor" href="#고급-주제" aria-label="Permalink to &quot;고급 주제&quot;">​</a></h2><h3 id="라이브러리-검색-순서" tabindex="-1">라이브러리 검색 순서 <a class="header-anchor" href="#라이브러리-검색-순서" aria-label="Permalink to &quot;라이브러리 검색 순서&quot;">​</a></h3><p><code>-library foo</code> 플래그가 주어지면 컴파일러는 다음 순서로 <code>foo</code> 라이브러리를 검색합니다:</p><ul><li><p>현재 컴파일 디렉토리 또는 절대 경로.</p></li><li><p><code>-repo</code> 플래그로 지정된 모든 레포지토리.</p></li><li><p>기본 레포지토리에 설치된 라이브러리.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>기본 레포지토리는 <code>~/.konan</code>입니다. <code>kotlin.data.dir</code> Gradle 프로퍼티를 설정하여 변경할 수 있습니다. 또는 <code>-Xkonan-data-dir</code> 컴파일러 옵션을 사용하여 <code>cinterop</code> 및 <code>konanc</code> 도구를 통해 디렉토리의 사용자 지정 경로를 구성할 수 있습니다.</p></div></li><li><p><code>$installation/klib</code> 디렉토리에 설치된 라이브러리.</p></li></ul><h3 id="라이브러리-형식" tabindex="-1">라이브러리 형식 <a class="header-anchor" href="#라이브러리-형식" aria-label="Permalink to &quot;라이브러리 형식&quot;">​</a></h3><p>Kotlin/Native 라이브러리는 미리 정의된 디렉토리 구조를 포함하는 zip 파일이며, 다음 레이아웃을 가집니다:</p><p><code>foo.klib</code>를 <code>foo/</code>로 압축 해제하면 다음을 얻을 수 있습니다:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  - foo/</span></span>
<span class="line"><span>    - $component_name/</span></span>
<span class="line"><span>      - ir/</span></span>
<span class="line"><span>        - 직렬화된 Kotlin IR.</span></span>
<span class="line"><span>      - targets/</span></span>
<span class="line"><span>        - $platform/</span></span>
<span class="line"><span>          - kotlin/</span></span>
<span class="line"><span>            - LLVM 비트코드로 컴파일된 Kotlin.</span></span>
<span class="line"><span>          - native/</span></span>
<span class="line"><span>            - 추가 네이티브 객체의 비트코드 파일.</span></span>
<span class="line"><span>        - $another_platform/</span></span>
<span class="line"><span>          - 여러 플랫폼별 Kotlin 및 네이티브 쌍이 있을 수 있습니다.</span></span>
<span class="line"><span>      - linkdata/</span></span>
<span class="line"><span>        - 직렬화된 링크 메타데이터를 포함하는 ProtoBuf 파일 세트.</span></span>
<span class="line"><span>      - resources/</span></span>
<span class="line"><span>        - 이미지와 같은 일반 리소스. (아직 사용되지 않음).</span></span>
<span class="line"><span>      - manifest - 라이브러리를 설명하는 Java 속성 형식의 파일.</span></span></code></pre></div><p>예시 레이아웃은 설치된 <code>klib/stdlib</code> 디렉토리에서 찾을 수 있습니다.</p><h3 id="klib에서-상대-경로-사용" tabindex="-1">klib에서 상대 경로 사용 <a class="header-anchor" href="#klib에서-상대-경로-사용" aria-label="Permalink to &quot;klib에서 상대 경로 사용&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>klib에서 상대 경로 사용은 Kotlin 1.6.20부터 가능합니다.</p></div><p>소스 파일의 직렬화된 IR 표현은 <code>klib</code> 라이브러리의 <a href="#library-format">일부</a>입니다. 이는 올바른 디버그 정보 생성을 위한 파일 경로를 포함합니다. 기본적으로 저장된 경로는 절대 경로입니다. <code>-Xklib-relative-path-base</code> 컴파일러 옵션을 사용하면 형식을 변경하고 아티팩트에서 상대 경로만 사용할 수 있습니다. 이 기능을 사용하려면 소스 파일의 기준 경로(base path)를 하나 이상 인수로 전달하세요:</p>`,50)),t(p,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[0]||(a[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// ...")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"named"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"compileKotlin"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configure"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // $base는 소스 파일의 기준 경로입니다.")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    compilerOptions.freeCompilerArgs."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"add"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xklib-relative-path-base='),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"$base"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[1]||(a[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// ...")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"named("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'compileKotlin'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    compilerOptions {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // $base는 소스 파일의 기준 경로입니다.")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        freeCompilerArgs"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"add("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xklib-relative-path-base='),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"$base"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})])}const v=h(r,[["render",c]]);export{u as __pageData,v as default};
