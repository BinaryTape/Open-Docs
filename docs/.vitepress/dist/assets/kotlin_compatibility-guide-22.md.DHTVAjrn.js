import{_ as e,c as t,o as r,ag as a}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlin 2.2 兼容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/compatibility-guide-22.md","filePath":"kotlin/compatibility-guide-22.md","lastUpdated":1754307826000}'),n={name:"kotlin/compatibility-guide-22.md"};function l(i,o,s,c,p,d){return r(),t("div",null,o[0]||(o[0]=[a('<h1 id="kotlin-2-2-兼容性指南" tabindex="-1">Kotlin 2.2 兼容性指南 <a class="header-anchor" href="#kotlin-2-2-兼容性指南" aria-label="Permalink to &quot;Kotlin 2.2 兼容性指南&quot;">​</a></h1><p><em><a href="/kotlin/kotlin-evolution-principles">保持语言现代性</a></em> 和 <em><a href="/kotlin/kotlin-evolution-principles">舒适的更新</a></em> 是 Kotlin 语言设计中的基本原则。前者指出，阻碍语言演进的结构应被移除；后者则表明，此移除应事先充分沟通，以便代码迁移尽可能顺利。</p><p>尽管大多数语言变更已通过其他渠道（如更新日志或编译器警告）公布，但本文档汇总了所有变更，为从 Kotlin 2.1 迁移到 Kotlin 2.2 提供了完整的参考。</p><h2 id="基本术语" tabindex="-1">基本术语 <a class="header-anchor" href="#基本术语" aria-label="Permalink to &quot;基本术语&quot;">​</a></h2><p>本文档介绍了几种兼容性类型：</p><ul><li><em>源代码</em>：源代码不兼容变更会使过去可以正常编译（没有错误或警告）的代码无法再编译。</li><li><em>二进制</em>：如果两个二进制 artifact 互换不会导致加载或链接错误，则称它们是二进制兼容的。</li><li><em>行为</em>：如果同一程序在应用变更前后表现出不同的行为，则称该变更是行为不兼容的。</li></ul><p>请记住，这些定义仅适用于纯 Kotlin。Kotlin 代码从其他语言视角（例如，从 Java）的兼容性超出本文档的范围。</p><h2 id="语言" tabindex="-1">语言 <a class="header-anchor" href="#语言" aria-label="Permalink to &quot;语言&quot;">​</a></h2><h3 id="默认启用带注解-lambda-表达式的-invokedynamic" tabindex="-1">默认启用带注解 lambda 表达式的 invokedynamic <a class="header-anchor" href="#默认启用带注解-lambda-表达式的-invokedynamic" aria-label="Permalink to &quot;默认启用带注解 lambda 表达式的 invokedynamic&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-278" target="_blank" rel="noreferrer">KTLC-278</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概括</strong>：带注解的 lambda 表达式现在默认通过 <code>LambdaMetafactory</code> 使用 <code>invokedynamic</code>，使其行为与 Java lambda 表达式保持一致。这会影响依赖于从生成的 lambda 类中检索注解的基于反射的代码。要恢复旧行为，请使用 <code>-Xindy-allow-annotated-lambdas=false</code> 编译器选项。</p><p><strong>废弃周期</strong>：</p><ul><li>2.2.0：默认启用带注解 lambda 表达式的 <code>invokedynamic</code></li></ul></blockquote><h3 id="在-k2-中禁止构造函数调用和展开类型中带型变修饰符的类型别名继承" tabindex="-1">在 K2 中禁止构造函数调用和展开类型中带型变修饰符的类型别名继承 <a class="header-anchor" href="#在-k2-中禁止构造函数调用和展开类型中带型变修饰符的类型别名继承" aria-label="Permalink to &quot;在 K2 中禁止构造函数调用和展开类型中带型变修饰符的类型别名继承&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-4" target="_blank" rel="noreferrer">KTLC-4</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：使用展开为使用如 <code>out</code> 等型变修饰符的类型的类型别名进行构造函数调用和继承，不再受 K2 编译器支持。这解决了使用原始类型不允许，但通过类型别名使用相同用法却被允许的不一致性。要迁移，请在需要时显式使用原始类型。</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：对展开为带型变修饰符类型的类型别名上的构造函数调用或超类型用法报告警告</li><li>2.2.0：将警告提升为错误</li></ul></blockquote><h3 id="禁止从-kotlin-getter-创建合成属性" tabindex="-1">禁止从 Kotlin getter 创建合成属性 <a class="header-anchor" href="#禁止从-kotlin-getter-创建合成属性" aria-label="Permalink to &quot;禁止从 Kotlin getter 创建合成属性&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-272" target="_blank" rel="noreferrer">KTLC-272</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：合成属性不再允许用于 Kotlin 中定义的 getter。这会影响 Java 类扩展 Kotlin 类以及处理如 <code>java.util.LinkedHashSet</code> 等映射类型的情况。要迁移，请将属性访问替换为对相应 getter 函数的直接调用。</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：对从 Kotlin getter 创建的合成属性访问报告警告</li><li>2.2.0：将警告提升为错误</li></ul></blockquote><h3 id="变更-jvm-接口函数默认方法生成方式" tabindex="-1">变更 JVM 接口函数默认方法生成方式 <a class="header-anchor" href="#变更-jvm-接口函数默认方法生成方式" aria-label="Permalink to &quot;变更 JVM 接口函数默认方法生成方式&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-269" target="_blank" rel="noreferrer">KTLC-269</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：二进制</p><p><strong>简要概括</strong>：除非另行配置，接口中声明的函数现在会编译为 JVM 默认方法。当不相关的超类型定义冲突的实现时，这可能导致 Java 代码中出现编译错误。此行为由稳定的 <code>-jvm-default</code> 编译器选项控制，该选项替代了现在已废弃的 <code>-Xjvm-default</code> 选项。要恢复以前的行为（默认实现仅在 <code>DefaultImpls</code> 类和子类中生成），请使用 <code>-jvm-default=disable</code>。</p><p><strong>废弃周期</strong>：</p><ul><li>2.2.0：<code>-jvm-default</code> 编译器选项默认设置为 <code>enable</code></li></ul></blockquote><h3 id="禁止注解属性上的字段目标注解" tabindex="-1">禁止注解属性上的字段目标注解 <a class="header-anchor" href="#禁止注解属性上的字段目标注解" aria-label="Permalink to &quot;禁止注解属性上的字段目标注解&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-7" target="_blank" rel="noreferrer">KTLC-7</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：字段目标注解不再允许用于注解属性。尽管这些注解没有可观察到的效果，但此更改可能会影响依赖于它们的自定义 IR 插件。要迁移，请从属性中移除字段目标注解。</p><p><strong>废弃周期</strong>：</p><ul><li>2.1.0：对注解属性上的 <code>@JvmField</code> 注解报告废弃警告</li><li>2.1.20：对注解属性上的所有字段目标注解报告警告</li><li>2.2.0：将警告提升为错误</li></ul></blockquote><h3 id="禁止类型别名中使用-reified-类型形参" tabindex="-1">禁止类型别名中使用 <code>reified</code> 类型形参 <a class="header-anchor" href="#禁止类型别名中使用-reified-类型形参" aria-label="Permalink to &quot;禁止类型别名中使用 `reified` 类型形参&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-5" target="_blank" rel="noreferrer">KTLC-5</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：<code>reified</code> 修饰符不再允许用于类型别名中的类型形参。<code>reified</code> 类型形参仅在内联函数中有效，因此在类型别名中使用它们无效。要迁移，请从 <code>typealias</code> 声明中移除 <code>reified</code> 修饰符。</p><p><strong>废弃周期</strong>：</p><ul><li>2.1.0：对类型别名中的 <code>reified</code> 类型形参报告警告</li><li>2.2.0：将警告提升为错误</li></ul></blockquote><h3 id="修正-number-和-comparable-内联值类的类型检测" tabindex="-1">修正 <code>Number</code> 和 <code>Comparable</code> 内联值类的类型检测 <a class="header-anchor" href="#修正-number-和-comparable-内联值类的类型检测" aria-label="Permalink to &quot;修正 `Number` 和 `Comparable` 内联值类的类型检测&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-21" target="_blank" rel="noreferrer">KTLC-21</a></p><p><strong>组件</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概括</strong>：内联值类在 <code>is</code> 和 <code>as</code> 检测中不再被视为 <code>java.lang.Number</code> 或 <code>java.lang.Comparable</code> 的实现者。这些检测在应用于装箱的内联类时，以前会返回不正确的结果。该优化现在仅适用于原生类型及其包装器。</p><p><strong>废弃周期</strong>：</p><ul><li>2.2.0：启用新行为</li></ul></blockquote><h3 id="禁止从间接依赖项中访问不可访问的泛型类型" tabindex="-1">禁止从间接依赖项中访问不可访问的泛型类型 <a class="header-anchor" href="#禁止从间接依赖项中访问不可访问的泛型类型" aria-label="Permalink to &quot;禁止从间接依赖项中访问不可访问的泛型类型&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-3" target="_blank" rel="noreferrer">KTLC-3</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：当使用来自间接依赖项中对编译器不可见的类型时，K2 编译器现在会报告错误。这会影响诸如 lambda 实参或泛型类型实参的情况，其中引用的类型由于缺少依赖项而不可用。</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：对 lambda 表达式中不可访问的泛型类型以及不可访问泛型类型实参的特定用法报告错误；对 lambda 表达式中不可访问的非泛型类型以及表达式和超类型中不可访问的类型实参报告警告</li><li>2.1.0：将 lambda 表达式中不可访问的非泛型类型的警告提升为错误</li><li>2.2.0：将表达式类型中不可访问的类型实参的警告提升为错误</li></ul></blockquote><h3 id="强制执行类型形参边界的可见性检测" tabindex="-1">强制执行类型形参边界的可见性检测 <a class="header-anchor" href="#强制执行类型形参边界的可见性检测" aria-label="Permalink to &quot;强制执行类型形参边界的可见性检测&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-274" target="_blank" rel="noreferrer">KTLC-274</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：函数和属性不再允许使用其可见性比声明本身更具限制性的类型形参边界。这可以防止间接暴露不可访问的类型，此类情况以前编译时没有错误，但在某些情况下会导致运行时故障或 IR 验证错误。</p><p><strong>废弃周期</strong>：</p><ul><li>2.1.0：当类型形参的边界从声明的可见性作用域不可见时，报告警告</li><li>2.2.0：将警告提升为错误</li></ul></blockquote><h3 id="在非私有内联函数中暴露私有类型时报告错误" tabindex="-1">在非私有内联函数中暴露私有类型时报告错误 <a class="header-anchor" href="#在非私有内联函数中暴露私有类型时报告错误" aria-label="Permalink to &quot;在非私有内联函数中暴露私有类型时报告错误&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-70916" target="_blank" rel="noreferrer">KT-70916</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：不再允许从非私有内联函数访问私有类型、函数或属性。要迁移，请避免引用私有实体，将函数设为私有，或移除 <code>inline</code> 修饰符。请注意，移除 <code>inline</code> 会破坏二进制兼容性。</p><p><strong>废弃周期</strong>：</p><ul><li>2.2.0：当从非私有内联函数访问私有类型或成员时报告错误</li></ul></blockquote><h3 id="禁止将非局部返回用于形参默认值-lambda-表达式" tabindex="-1">禁止将非局部返回用于形参默认值 lambda 表达式 <a class="header-anchor" href="#禁止将非局部返回用于形参默认值-lambda-表达式" aria-label="Permalink to &quot;禁止将非局部返回用于形参默认值 lambda 表达式&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-286" target="_blank" rel="noreferrer">KTLC-286</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：非局部返回语句不再允许用于作为形参默认值的 lambda 表达式中。这种模式以前可以编译，但会导致运行时崩溃。要迁移，请重写 lambda 表达式以避免非局部返回，或将逻辑移到默认值之外。</p><p><strong>废弃周期</strong>：</p><ul><li>2.2.0：对用作形参默认值的 lambda 表达式中的非局部返回报告错误</li></ul></blockquote><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><h3 id="废弃-kotlin-native-throws" tabindex="-1">废弃 <code>kotlin.native.Throws</code> <a class="header-anchor" href="#废弃-kotlin-native-throws" aria-label="Permalink to &quot;废弃 `kotlin.native.Throws`&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-72137" target="_blank" rel="noreferrer">KT-72137</a></p><p><strong>组件</strong>：Kotlin/Native</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：<code>kotlin.native.Throws</code> 已废弃；请改用通用的 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-throws/" target="_blank" rel="noreferrer"><code>kotlin.Throws</code></a> 注解。</p><p><strong>废弃周期</strong>：</p><ul><li>1.9.0：使用 <code>kotlin.native.Throws</code> 时报告警告</li><li>2.2.0：将警告提升为错误</li></ul></blockquote><h3 id="废弃-abstractdoubletimesource" tabindex="-1">废弃 <code>AbstractDoubleTimeSource</code> <a class="header-anchor" href="#废弃-abstractdoubletimesource" aria-label="Permalink to &quot;废弃 `AbstractDoubleTimeSource`&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-72137" target="_blank" rel="noreferrer">KT-72137</a></p><p><strong>组件</strong>：kotlin-stdlib</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：<code>AbstractDoubleTimeSource</code> 已废弃；请改用 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.time/-abstract-long-time-source/" target="_blank" rel="noreferrer"><code>AbstractLongTimeSource</code></a>。</p><p><strong>废弃周期</strong>：</p><ul><li>1.8.20：使用 <code>AbstractDoubleTimeSource</code> 时报告警告</li><li>2.2.0：将警告提升为错误</li></ul></blockquote><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="修正-kotlincompiletool-中的-setsource-函数以替换源代码" tabindex="-1">修正 <code>KotlinCompileTool</code> 中的 <code>setSource()</code> 函数以替换源代码 <a class="header-anchor" href="#修正-kotlincompiletool-中的-setsource-函数以替换源代码" aria-label="Permalink to &quot;修正 `KotlinCompileTool` 中的 `setSource()` 函数以替换源代码&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-59632" target="_blank" rel="noreferrer">KT-59632</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概括</strong>：<a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-kotlin-compile-tool/#" target="_blank" rel="noreferrer"><code>KotlinCompileTool</code></a> 接口中的 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-kotlin-compile-tool/set-source.html#" target="_blank" rel="noreferrer"><code>setSource()</code></a> 函数现在会替换已配置的源代码，而不是向其添加。如果您想添加源代码而不替换现有源代码，请使用 <code>source()</code> 函数。</p><p><strong>废弃周期</strong>：</p><ul><li>2.2.0：启用新行为</li></ul></blockquote><h3 id="废弃-kotlincompilationoutput-resourcesdirprovider-属性" tabindex="-1">废弃 <code>KotlinCompilationOutput#resourcesDirProvider</code> 属性 <a class="header-anchor" href="#废弃-kotlincompilationoutput-resourcesdirprovider-属性" aria-label="Permalink to &quot;废弃 `KotlinCompilationOutput#resourcesDirProvider` 属性&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-70620" target="_blank" rel="noreferrer">KT-70620</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：<code>KotlinCompilationOutput#resourcesDirProvider</code> 属性已废弃。请改在 Gradle 构建脚本中使用 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.plugin/-kotlin-source-set/resources.html" target="_blank" rel="noreferrer"><code>KotlinSourceSet.resources</code></a> 以添加额外的资源目录。</p><p><strong>废弃周期</strong>：</p><ul><li>2.1.0：<code>KotlinCompilationOutput#resourcesDirProvider</code> 已废弃并报告警告</li><li>2.2.0：将警告提升为错误</li></ul></blockquote><h3 id="废弃-basekapt-annotationprocessoroptionproviders-属性" tabindex="-1">废弃 <code>BaseKapt.annotationProcessorOptionProviders</code> 属性 <a class="header-anchor" href="#废弃-basekapt-annotationprocessoroptionproviders-属性" aria-label="Permalink to &quot;废弃 `BaseKapt.annotationProcessorOptionProviders` 属性&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-58009" target="_blank" rel="noreferrer">KT-58009</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：<a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-base-kapt/annotation-processor-option-providers.html#" target="_blank" rel="noreferrer"><code>BaseKapt.annotationProcessorOptionProviders</code></a> 属性已废弃，推荐使用 <code>BaseKapt.annotationProcessorOptionsProviders</code>，后者接受 <code>ListProperty&lt;CommandLineArgumentProvider&gt;</code> 而不是 <code>MutableList&lt;Any&gt;</code>。这清晰地定义了预期的元素类型，并防止了因添加不正确元素（例如嵌套列表）而导致的运行时故障。如果您当前的代码将列表作为单个元素添加，请将 <code>add()</code> 函数替换为 <code>addAll()</code> 函数。</p><p><strong>废弃周期</strong>：</p><ul><li>2.2.0：在 API 中强制使用新类型</li></ul></blockquote><h3 id="废弃-kotlin-android-extensions-插件" tabindex="-1">废弃 <code>kotlin-android-extensions</code> 插件 <a class="header-anchor" href="#废弃-kotlin-android-extensions-插件" aria-label="Permalink to &quot;废弃 `kotlin-android-extensions` 插件&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-72341/" target="_blank" rel="noreferrer">KT-72341</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：<code>kotlin-android-extensions</code> 插件已废弃。请改用单独的插件 <a href="https://plugins.gradle.org/plugin/org.jetbrains.kotlin.plugin.parcelize" target="_blank" rel="noreferrer"><code>kotlin-parcelize</code></a> 来生成 <code>Parcelable</code> 实现，并使用 Android Jetpack 的 <a href="https://developer.android.com/topic/libraries/view-binding" target="_blank" rel="noreferrer">视图绑定</a> 来处理合成视图。</p><p><strong>废弃周期</strong>：</p><ul><li>1.4.20：插件已废弃</li><li>2.1.20：引入配置错误，且不执行任何插件代码</li><li>2.2.0：插件代码已移除</li></ul></blockquote><h3 id="废弃-kotlinoptions-dsl" tabindex="-1">废弃 <code>kotlinOptions</code> DSL <a class="header-anchor" href="#废弃-kotlinoptions-dsl" aria-label="Permalink to &quot;废弃 `kotlinOptions` DSL&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-54110" target="_blank" rel="noreferrer">KT-54110</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：通过 <code>kotlinOptions</code> DSL 和相关的 <code>KotlinCompile&lt;KotlinOptions&gt;</code> 任务接口配置编译器选项的功能已废弃，推荐使用新的 <code>compilerOptions</code> DSL。作为此次废弃的一部分，<code>kotlinOptions</code> 接口中的所有属性现在也已单独标记为废弃。要迁移，请使用 <code>compilerOptions</code> DSL 配置编译器选项。关于迁移指南，请参见<a href="/kotlin/gradle-compiler-options#migrate-from-kotlinoptions-to-compileroptions">从 <code>kotlinOptions {}</code> 迁移到 <code>compilerOptions {}</code></a>。</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：对 <code>kotlinOptions</code> DSL 报告警告</li><li>2.2.0：将警告提升为错误，并废弃 <code>kotlinOptions</code> 中的所有属性</li></ul></blockquote><h3 id="移除-kotlin-incremental-useclasspathsnapshot-属性" tabindex="-1">移除 <code>kotlin.incremental.useClasspathSnapshot</code> 属性 <a class="header-anchor" href="#移除-kotlin-incremental-useclasspathsnapshot-属性" aria-label="Permalink to &quot;移除 `kotlin.incremental.useClasspathSnapshot` 属性&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-62963" target="_blank" rel="noreferrer">KT-62963</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：<code>kotlin.incremental.useClasspathSnapshot</code> Gradle 属性已移除。此属性控制已废弃的基于 JVM 历史的增量编译模式，该模式已被从 Kotlin 1.8.20 开始默认启用的基于类路径的方法取代。</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.20：废弃 <code>kotlin.incremental.useClasspathSnapshot</code> 属性并报告警告</li><li>2.2.0：移除该属性</li></ul></blockquote><h3 id="kotlin-脚本的废弃事项" tabindex="-1">Kotlin 脚本的废弃事项 <a class="header-anchor" href="#kotlin-脚本的废弃事项" aria-label="Permalink to &quot;Kotlin 脚本的废弃事项&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-71685" target="_blank" rel="noreferrer">KT-71685</a>、<a href="https://youtrack.jetbrains.com/issue/KT-75632/" target="_blank" rel="noreferrer">KT-75632</a>、<a href="https://youtrack.jetbrains.com/issue/KT-76196/" target="_blank" rel="noreferrer">KT-76196</a>。</p><p><strong>组件</strong>：Scripting</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：Kotlin 2.2.0 废弃了对以下各项的支持：</p><ul><li>REPL：要继续通过 <code>kotlinc</code> 使用 REPL，请使用 <code>-Xrepl</code> 编译器选项选择加入。</li><li>JSR-223：由于 <a href="https://jcp.org/en/jsr/detail?id=223" target="_blank" rel="noreferrer">JSR</a> 处于 <strong>已撤回</strong> 状态。JSR-223 实现继续支持语言版本 1.9，但未来没有迁移到 K2 编译器的计划。</li><li><code>KotlinScriptMojo</code> Maven 插件。如果您继续使用它，将会看到编译器警告。</li></ul><p>有关更多信息，请参阅我们的<a href="https://blog.jetbrains.com/kotlin/2024/11/state-of-kotlin-scripting-2024/" target="_blank" rel="noreferrer">博客文章</a>。</p><p><strong>废弃周期</strong>：</p><ul><li>2.1.0：废弃 <code>kotlinc</code> 中 REPL 的使用并报告警告</li><li>2.2.0：要通过 <code>kotlinc</code> 使用 REPL，请使用 <code>-Xrepl</code> 编译器选项选择加入；废弃 JSR-223，通过切换到语言版本 1.9 可以恢复支持；废弃 <code>KotlinScriptMojo</code> Maven 插件</li></ul></blockquote><h3 id="废弃消歧分类器属性" tabindex="-1">废弃消歧分类器属性 <a class="header-anchor" href="#废弃消歧分类器属性" aria-label="Permalink to &quot;废弃消歧分类器属性&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-58231" target="_blank" rel="noreferrer">KT-58231</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：用于控制 Kotlin Gradle 插件如何消除源代码集名称和 IDE 导入歧义的选项已过时。因此，<code>KotlinTarget</code> 接口中的以下属性现已废弃：</p><ul><li><code>useDisambiguationClassifierAsSourceSetNamePrefix</code></li><li><code>overrideDisambiguationClassifierOnIdeImport</code></li></ul><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：当使用 Gradle 属性时报告警告</li><li>2.1.0：将此警告提升为错误</li><li>2.2.0：移除 Gradle 属性</li></ul></blockquote><h3 id="废弃通用化形参" tabindex="-1">废弃通用化形参 <a class="header-anchor" href="#废弃通用化形参" aria-label="Permalink to &quot;废弃通用化形参&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-75161" target="_blank" rel="noreferrer">KT-75161</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：Kotlin Gradle 插件中实验性的通用化模式的形参已废弃。这些形参可能会生成无效的编译构件，然后被缓存。要删除受影响的构件：</p><ol><li><p>从您的 <code>gradle.properties</code> 文件中移除以下选项：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.enableOptimisticNumberCommonization</span></span>\n<span class="line"><span>kotlin.mpp.enablePlatformIntegerCommonization</span></span></code></pre></div></li><li><p>清除 <code>~/.konan/*/klib/commonized</code> 目录中的通用化缓存，或运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cleanNativeDistributionCommonization</span></span></code></pre></div></li></ol><p><strong>废弃周期</strong>：</p><ul><li>2.2.0：废弃通用化形参并报告错误</li><li>2.2.20：移除通用化形参</li></ul></blockquote><h3 id="废弃对旧版元数据编译的支持" tabindex="-1">废弃对旧版元数据编译的支持 <a class="header-anchor" href="#废弃对旧版元数据编译的支持" aria-label="Permalink to &quot;废弃对旧版元数据编译的支持&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-61817" target="_blank" rel="noreferrer">KT-61817</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：用于设置分层结构并在公共源代码集和中间源代码集之间创建中间源代码集的选项已过时。以下编译器选项已移除：</p><ul><li><code>isCompatibilityMetadataVariantEnabled</code></li><li><code>withGranularMetadata</code></li><li><code>isKotlinGranularMetadataEnabled</code></li></ul><p><strong>废弃周期</strong>：</p><ul><li>2.2.0：从 Kotlin Gradle 插件中移除编译器选项</li></ul></blockquote><h3 id="废弃-kotlincompilation-source-api" tabindex="-1">废弃 <code>KotlinCompilation.source</code> API <a class="header-anchor" href="#废弃-kotlincompilation-source-api" aria-label="Permalink to &quot;废弃 `KotlinCompilation.source` API&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-64991" target="_blank" rel="noreferrer">KT-64991</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：允许将 Kotlin 源代码集直接添加到 Kotlin 编译项的 <code>KotlinCompilation.source</code> API 访问已废弃。</p><p><strong>废弃周期</strong>：</p><ul><li>1.9.0：当使用 <code>KotlinCompilation.source</code> 时报告警告</li><li>1.9.20：将此警告提升为错误</li><li>2.2.0：从 Kotlin Gradle 插件中移除 <code>KotlinCompilation.source</code>；尝试使用它会导致构建脚本编译期间出现“unresolved reference”错误</li></ul></blockquote><h3 id="废弃目标预设-api" tabindex="-1">废弃目标预设 API <a class="header-anchor" href="#废弃目标预设-api" aria-label="Permalink to &quot;废弃目标预设 API&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-71698" target="_blank" rel="noreferrer">KT-71698</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：Kotlin 多平台目标的目标预设已过时；<code>jvm()</code> 或 <code>iosSimulatorArm64()</code> 等目标 DSL 函数现在覆盖了相同的用例。所有与预设相关的 API 已废弃：</p><ul><li><code>org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension</code> 中的 <code>presets</code> 属性</li><li><code>org.jetbrains.kotlin.gradle.plugin.KotlinTargetPreset</code> 接口及其所有继承者</li><li><code>fromPreset</code> 重载</li></ul><p><strong>废弃周期</strong>：</p><ul><li>1.9.20：对任何使用预设相关 API 的情况报告警告</li><li>2.0.0：将此警告提升为错误</li><li>2.2.0：从 Kotlin Gradle 插件的公共 API 中移除与预设相关的 API；仍然使用它的源代码会因“unresolved reference”错误而失败，并且二进制文件（例如 Gradle 插件）除非针对最新版本的 Kotlin Gradle 插件重新编译，否则可能会因链接错误而失败</li></ul></blockquote><h3 id="废弃-apple-目标快捷方式" tabindex="-1">废弃 Apple 目标快捷方式 <a class="header-anchor" href="#废弃-apple-目标快捷方式" aria-label="Permalink to &quot;废弃 Apple 目标快捷方式&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-70615" target="_blank" rel="noreferrer">KT-70615</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：Kotlin 多平台 DSL 中的 <code>ios()</code>、<code>watchos()</code> 和 <code>tvos()</code> 目标快捷方式已废弃。这些快捷方式旨在部分创建 Apple 目标的源代码集层次结构。Kotlin 多平台 Gradle 插件现在提供内置的层次结构模板。不再使用快捷方式，而是指定目标列表，然后插件会自动为它们设置中间源代码集。</p><p><strong>废弃周期</strong>：</p><ul><li>1.9.20：当使用目标快捷方式时报告警告；默认改为启用默认层次结构模板</li><li>2.1.0：当使用目标快捷方式时报告错误</li><li>2.2.0：从 Kotlin 多平台 Gradle 插件中移除目标快捷方式 DSL</li></ul></blockquote><h3 id="废弃-publishalllibraryvariants-函数" tabindex="-1">废弃 <code>publishAllLibraryVariants()</code> 函数 <a class="header-anchor" href="#废弃-publishalllibraryvariants-函数" aria-label="Permalink to &quot;废弃 `publishAllLibraryVariants()` 函数&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-60623" target="_blank" rel="noreferrer">KT-60623</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：<code>publishAllLibraryVariants()</code> 函数已废弃。它旨在发布 Android 目标的所有构建变体。现不推荐此方法，因为它可能导致变体解析问题，尤其是在使用多个风味 (flavor) 和构建类型 (build type) 时。请改用指定构建变体的 <code>publishLibraryVariants()</code> 函数。</p><p><strong>废弃周期</strong>：</p><ul><li>2.2.0：<code>publishAllLibraryVariants()</code> 已废弃</li></ul></blockquote><h3 id="废弃-android-目标" tabindex="-1">废弃 <code>android</code> 目标 <a class="header-anchor" href="#废弃-android-目标" aria-label="Permalink to &quot;废弃 `android` 目标&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-71608" target="_blank" rel="noreferrer">KT-71608</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：<code>android</code> 目标名称在当前 Kotlin DSL 中已废弃。请改用 <code>androidTarget</code>。</p><p><strong>废弃周期</strong>：</p><ul><li>1.9.0：当 <code>android</code> 名称在 Kotlin 多平台项目中被使用时，引入废弃警告</li><li>2.1.0：将此警告提升为错误</li><li>2.2.0：从 Kotlin 多平台 Gradle 插件中移除 <code>android</code> 目标 DSL</li></ul></blockquote><h3 id="废弃-cinteropprocess-中的-konanversion" tabindex="-1">废弃 <code>CInteropProcess</code> 中的 <code>konanVersion</code> <a class="header-anchor" href="#废弃-cinteropprocess-中的-konanversion" aria-label="Permalink to &quot;废弃 `CInteropProcess` 中的 `konanVersion`&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-71069" target="_blank" rel="noreferrer">KT-71069</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：<code>CInteropProcess</code> 任务中的 <code>konanVersion</code> 属性已废弃。请改用 <code>CInteropProcess.kotlinNativeVersion</code>。</p><p><strong>废弃周期</strong>：</p><ul><li>2.1.0：当使用 <code>konanVersion</code> 属性时报告警告</li><li>2.2.0：将此警告提升为错误</li><li>2.3.0：从 Kotlin Gradle 插件中移除 <code>konanVersion</code> 属性</li></ul></blockquote><h3 id="废弃-cinteropprocess-中的-destinationdir" tabindex="-1">废弃 <code>CInteropProcess</code> 中的 <code>destinationDir</code> <a class="header-anchor" href="#废弃-cinteropprocess-中的-destinationdir" aria-label="Permalink to &quot;废弃 `CInteropProcess` 中的 `destinationDir`&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-71068" target="_blank" rel="noreferrer">KT-71068</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：<code>CInteropProcess</code> 任务中的 <code>destinationDir</code> 属性已废弃。请改用 <code>CInteropProcess.destinationDirectory.set()</code> 函数。</p><p><strong>废弃周期</strong>：</p><ul><li>2.1.0：当使用 <code>destinationDir</code> 属性时报告警告</li><li>2.2.0：将此警告提升为错误</li><li>2.3.0：从 Kotlin Gradle 插件中移除 <code>destinationDir</code> 属性</li></ul></blockquote><h3 id="废弃-kotlinartifacts-api" tabindex="-1">废弃 <code>kotlinArtifacts</code> API <a class="header-anchor" href="#废弃-kotlinartifacts-api" aria-label="Permalink to &quot;废弃 `kotlinArtifacts` API&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-74953" target="_blank" rel="noreferrer">KT-74953</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概括</strong>：实验性的 <code>kotlinArtifacts</code> API 已废弃。请使用 Kotlin Gradle 插件中当前可用的 DSL 来<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html" target="_blank" rel="noreferrer">构建最终的原生二进制文件</a>。如果这不足以进行迁移，请在<a href="https://youtrack.jetbrains.com/issue/KT-74953" target="_blank" rel="noreferrer">此 YouTrack 问题</a>中留下评论。</p><p><strong>废弃周期</strong>：</p><ul><li>2.2.0：当使用 <code>kotlinArtifacts</code> API 时报告警告</li><li>2.3.0：将此警告提升为错误</li></ul></blockquote>',72)]))}const h=e(n,[["render",l]]);export{u as __pageData,h as default};
