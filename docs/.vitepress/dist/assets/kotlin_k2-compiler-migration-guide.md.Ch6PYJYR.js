import{_ as n}from"./chunks/k2-compiler-architecture.D_ba9KK9.js";import{_ as e,c as l,o as r,ag as i,j as s,a as t}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"K2 编译器迁移指南","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/k2-compiler-migration-guide.md","filePath":"kotlin/k2-compiler-migration-guide.md","lastUpdated":1754307826000}'),p={name:"kotlin/k2-compiler-migration-guide.md"};function h(k,a,o,d,g,c){return r(),l("div",null,a[0]||(a[0]=[i('<h1 id="k2-编译器迁移指南" tabindex="-1">K2 编译器迁移指南 <a class="header-anchor" href="#k2-编译器迁移指南" aria-label="Permalink to &quot;K2 编译器迁移指南&quot;">​</a></h1><p>随着 Kotlin 语言和生态系统的持续演进，Kotlin 编译器也随之发展。第一步是引入新的 JVM 和 JS IR（中间表示）后端，它们共享逻辑，简化了针对不同平台<strong>目标</strong>的代码生成。现在，其演进的下一个阶段带来了名为 K2 的新前端。</p><p><img src="'+n+`" alt="Kotlin K2 编译器架构" width="700"></p><p>随着 K2 编译器的到来，Kotlin 前端已被彻底重写，并采用了全新、更高效的架构。新编译器带来的根本性变化是使用了包含更多语义信息的统一数据结构。此前端负责执行语义分析、<strong>调用解析</strong>和<strong>类型推断</strong>。</p><p>新架构和丰富的数据结构使 K2 编译器能够提供以下益处：</p><ul><li><strong>改进的调用解析和类型推断</strong>。编译器行为更一致，对你的代码理解更深入。</li><li><strong>更容易引入新语言特性的语法糖</strong>。未来，当新<strong>特性</strong>引入时，你将能够使用更简洁、更可读的代码。</li><li><strong>更快的编译时间</strong>。<strong>编译时间</strong>可以<a href="#performance-improvements">显著加快</a>。</li><li><strong>增强的 IDE 性能</strong>。从 2025.1 开始，IntelliJ IDEA 使用 K2 模式分析你的 Kotlin 代码，提升了稳定性并提供了性能改进。有关更多信息，请参见<a href="#support-in-ides">IDE 支持</a>。</li></ul><p>本指南：</p><ul><li>阐释了新 K2 编译器的益处。</li><li>强调你在迁移过程中可能遇到的变化，以及如何相应地调整代码。</li><li>描述了如何回滚到之前的版本。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>新 K2 编译器从 2.0.0 开始默认启用。有关 Kotlin 2.0.0 中提供的新<strong>特性</strong>以及新 K2 编译器的更多信息，请参见 <a href="/kotlin/whatsnew20">Kotlin 2.0.0 的新增<strong>特性</strong></a>。</p></div><h2 id="性能改进" tabindex="-1">性能改进 <a class="header-anchor" href="#性能改进" aria-label="Permalink to &quot;性能改进&quot;">​</a></h2><p>为了评估 K2 编译器的性能，我们在两个开源<strong>项目</strong>上运行了性能测试：<a href="https://github.com/ankidroid/Anki-Android" target="_blank" rel="noreferrer">Anki-Android</a> 和 <a href="https://github.com/JetBrains/Exposed" target="_blank" rel="noreferrer">Exposed</a>。以下是我们发现的关键性能改进：</p><ul><li>K2 编译器带来了高达 94% 的<strong>编译</strong>速度提升。例如，在 Anki-Android <strong>项目</strong>中，纯净<strong>构建</strong>时间从 Kotlin 1.9.23 的 57.7 秒缩短到 Kotlin 2.0.0 的 29.7 秒。</li><li>使用 K2 编译器，初始化阶段速度提升高达 488%。例如，在 Anki-Android <strong>项目</strong>中，增量<strong>构建</strong>的初始化阶段从 Kotlin 1.9.23 的 0.126 秒削减到 Kotlin 2.0.0 的仅 0.022 秒。</li><li>与之前的编译器相比，Kotlin K2 编译器在分析阶段快了 376%。例如，在 Anki-Android <strong>项目</strong>中，增量<strong>构建</strong>的分析时间从 Kotlin 1.9.23 的 0.581 秒大幅减少到 Kotlin 2.0.0 的仅 0.122 秒。</li></ul><p>有关这些改进的更多详细信息，以及了解我们如何分析 K2 编译器性能的更多信息，请参见我们的<a href="https://blog.jetbrains.com/kotlin/2024/04/k2-compiler-performance-benchmarks-and-how-to-measure-them-on-your-projects/" target="_blank" rel="noreferrer">博客文章</a>。</p><h2 id="语言特性改进" tabindex="-1">语言<strong>特性</strong>改进 <a class="header-anchor" href="#语言特性改进" aria-label="Permalink to &quot;语言**特性**改进&quot;">​</a></h2><p>Kotlin K2 编译器改进了与<a href="#smart-casts"><strong>智能类型转换</strong></a>和 <a href="#kotlin-multiplatform">Kotlin Multiplatform</a> 相关的语言<strong>特性</strong>。</p><h3 id="智能类型转换" tabindex="-1"><strong>智能类型转换</strong> <a class="header-anchor" href="#智能类型转换" aria-label="Permalink to &quot;**智能类型转换**&quot;">​</a></h3><p>Kotlin 编译器可以在特定情况下自动将对象<strong>类型转换</strong>为某种类型，省去你手动<strong>显式</strong>指定的麻烦。这称为<a href="/kotlin/typecasts#smart-casts"><strong>智能类型转换</strong></a>。Kotlin K2 编译器现在在比以前更多的场景下执行<strong>智能类型转换</strong>。</p><p>在 Kotlin 2.0.0 中，我们在以下领域对<strong>智能类型转换</strong>进行了改进：</p><ul><li><a href="#local-variables-and-further-scopes">局部变量和更深的作用域</a></li><li><a href="#type-checks-with-the-logical-or-operator">使用逻辑或<strong>操作符</strong>的类型<strong>检测</strong></a></li><li><a href="#inline-functions">内联<strong>函数</strong></a></li><li><a href="#properties-with-function-types">带有<strong>函数</strong>类型的属性</a></li><li><a href="#exception-handling">异常处理</a></li><li><a href="#increment-and-decrement-operators">自增和自减<strong>操作符</strong></a></li></ul><h4 id="局部变量和更深的作用域" tabindex="-1">局部变量和更深的作用域 <a class="header-anchor" href="#局部变量和更深的作用域" aria-label="Permalink to &quot;局部变量和更深的作用域&quot;">​</a></h4><p>之前，如果变量在 <code>if</code> 条件中被<strong>检测</strong>为非 <code>null</code>，该变量会进行<strong>智能类型转换</strong>。然后，有关此变量的信息会在 <code>if</code> <strong>代码块</strong>的作用域内进一步共享。</p><p>然而，如果你在 <code>if</code> 条件<strong>外部****声明</strong>变量，则 <code>if</code> 条件内将没有关于该变量的信息，因此它无法进行<strong>智能类型转换</strong>。这种行为也出现在 <code>when</code> 表达式和 <code>while</code> 循环中。</p><p>从 Kotlin 2.0.0 开始，如果你在使用变量之前在 <code>if</code>、<code>when</code> 或 <code>while</code> 条件中<strong>声明</strong>它，那么编译器收集到的任何关于该变量的信息都将可在相应的<strong>代码块</strong>中用于<strong>智能类型转换</strong>。</p><p>这在你想要做的事情上会很有用，例如将布尔条件提取到变量中。然后，你可以给变量一个有意义的名称，这将提高你的代码可读性，并使得稍后在代码中重用该变量成为可能。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> purr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Purr purr&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> petAnimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animal: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isCat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cat</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isCat) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，编译器可以访问</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 关于 isCat 的信息，因此它知道</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // animal 已经智能类型转换为了 Cat 类型。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 因此，可以调用 purr() 函数。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，编译器不知道</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 智能类型转换，所以调用 purr() </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 函数会触发错误。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        animal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">purr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kitty </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    petAnimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kitty)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Purr purr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="使用逻辑或操作符的类型检测" tabindex="-1">使用逻辑或<strong>操作符</strong>的类型<strong>检测</strong> <a class="header-anchor" href="#使用逻辑或操作符的类型检测" aria-label="Permalink to &quot;使用逻辑或**操作符**的类型**检测**&quot;">​</a></h4><p>在 Kotlin 2.0.0 中，如果你使用 <code>or</code> <strong>操作符</strong> (<code>||</code>) 组合对象的类型<strong>检测</strong>，<strong>智能类型转换</strong>会转换为它们最接近的共同父类型。在此更改之前，<strong>智能类型转换</strong>总是转换为 <code>Any</code> 类型。</p><p>在这种情况下，你之后仍然需要手动<strong>检测</strong>对象类型，然后才能访问其任何属性或调用其<strong>函数</strong>。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Ok</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Postponed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Declined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signalCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signalStatus: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (signalStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Postponed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signalStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Declined) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // signalStatus 智能类型转换为了共同父类型 Status</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        signalStatus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 之前，signalStatus 智能类型转换 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 为 Any 类型，因此调用 signal() 函数会触发</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 未解析引用错误。signal() 函数只有在 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 另一次类型检测之后才能成功调用：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // check(signalStatus is Status)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // signalStatus.signal()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>共同父类型是<a href="https://en.wikipedia.org/wiki/Union_type" target="_blank" rel="noreferrer">联合类型</a>的<strong>近似</strong>。Kotlin <strong>目前不支持联合类型</strong>。</p></div><h4 id="内联函数" tabindex="-1">内联<strong>函数</strong> <a class="header-anchor" href="#内联函数" aria-label="Permalink to &quot;内联**函数**&quot;">​</a></h4><p>在 Kotlin 2.0.0 中，K2 编译器对待内联<strong>函数</strong>的方式不同，使其能够结合其他编译器分析，判断是否可以安全地进行<strong>智能类型转换</strong>。</p><p>具体来说，内联<strong>函数</strong>现在被视为具有隐式 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.contracts/-contract-builder/calls-in-place.html" target="_blank" rel="noreferrer"><code>callsInPlace</code></a><strong>契约</strong>。这意味着传递给内联<strong>函数</strong>的任何 lambda <strong>函数</strong>都会在原位调用。由于 lambda <strong>函数</strong>在原位调用，编译器知道 lambda <strong>函数</strong>不会泄露对其<strong>函数</strong>体内任何变量的引用。</p><p>编译器将此知识与其它编译器分析结合使用，以决定是否可以安全地对任何捕获的变量进行<strong>智能类型转换</strong>。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inlineAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nextProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    inlineAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，编译器知道 processor </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 是一个局部变量，并且 inlineAction() 是一个内联函数，因此 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // processor 的引用不会泄露。因此，可以安全地 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 对 processor 进行智能类型转换。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 如果 processor 非 null，则 processor 智能类型转换</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 编译器知道 processor 非 null，因此无需安全调用 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            processor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 在 Kotlin 1.9.20 中，你必须执行安全调用：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // processor?.process()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nextProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="带有函数类型的属性" tabindex="-1">带有<strong>函数</strong>类型的属性 <a class="header-anchor" href="#带有函数类型的属性" aria-label="Permalink to &quot;带有**函数**类型的属性&quot;">​</a></h4><p>在以前的 Kotlin 版本中，曾有一个 bug，导致带有<strong>函数</strong>类型的类属性无法进行<strong>智能类型转换</strong>。我们在 Kotlin 2.0.0 和 K2 编译器中修复了此行为。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Holder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provider: (() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)?) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，如果 provider 非 null，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 则它会智能类型转换</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (provider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 编译器知道 provider 非 null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 在 1.9.20 中，编译器不知道 provider 非 null，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 因此会触发错误：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Reference has a nullable type &#39;(() -&gt; Unit)?&#39;, use explicit &#39;?.invoke()&#39; to make a function-like call instead</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此更改也适用于你<strong>重载</strong> <code>invoke</code> <strong>操作符</strong>的情况。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Holder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provider: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (provider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 在 1.9.20 中，编译器会触发错误： </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Reference has a nullable type &#39;Provider?&#39;, use explicit &#39;?.invoke()&#39; to make a function-like call instead</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h4><p>在 Kotlin 2.0.0 中，我们改进了异常处理，以便<strong>智能类型转换</strong>信息可以传递到 <code>catch</code> 和 <code>finally</code> <strong>代码块</strong>。此更改使你的代码更安全，因为编译器会跟踪你的对象是否是<strong>可空的</strong>类型。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stringInput: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // stringInput 智能类型转换为了 String 类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stringInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 编译器知道 stringInput 非 null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringInput.length)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 编译器拒绝了 stringInput 之前的智能类型转换信息。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 现在 stringInput 具有 String? 类型。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stringInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 触发异常</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stringInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (exception: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，编译器知道 stringInput </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 可以为 null，因此 stringInput 保持可空的。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringInput?.length)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，编译器会说不需要安全调用，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 但这是不正确的。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="自增和自减操作符" tabindex="-1">自增和自减<strong>操作符</strong> <a class="header-anchor" href="#自增和自减操作符" aria-label="Permalink to &quot;自增和自减**操作符**&quot;">​</a></h4><p>在 Kotlin 2.0.0 之前，编译器不明白对象类型在使用自增或自减<strong>操作符</strong>后可能会改变。由于编译器无法准确跟踪对象类型，你的代码可能导致未解析引用错误。在 Kotlin 2.0.0 中，此问题已修复：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sigma</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sigma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sigma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unknownObject: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rho</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 检测 unknownObject 是否继承自 Tau 接口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 请注意，unknownObject 可能继承自</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Rho 和 Tau 两个接口。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (unknownObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Tau) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用 Rho 接口重载的 inc() 操作符。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，unknownObject 的类型被智能类型转换为了</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Sigma。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unknownObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，编译器知道 unknownObject 的类型是</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Sigma，因此可以成功调用 sigma() 函数。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        unknownObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sigma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，编译器在调用 inc() 时不执行智能类型转换，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 因此编译器仍然认为 unknownObject 的类型是 Tau。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 调用 sigma() 函数会抛出编译期错误。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，编译器知道 unknownObject 的类型是</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Sigma，因此调用 tau() 函数会抛出编译期错误。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        unknownObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Unresolved reference &#39;tau&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，由于编译器错误地认为</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // unknownObject 的类型是 Tau，可以调用 tau() 函数，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 但会抛出 ClassCastException。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h3><p>K2 编译器在以下领域改进了 Kotlin Multiplatform 相关<strong>特性</strong>：</p><ul><li><a href="#separation-of-common-and-platform-sources-during-compilation"><strong>编译项</strong>期间公共和平台源代码的分离</a></li><li><a href="#different-visibility-levels-of-expected-and-actual-declarations"><code>expect</code> 和 <code>actual</code> <strong>声明</strong>的不同可见性级别</a></li></ul><h4 id="编译项期间公共和平台源代码的分离" tabindex="-1"><strong>编译项</strong>期间公共和平台源代码的分离 <a class="header-anchor" href="#编译项期间公共和平台源代码的分离" aria-label="Permalink to &quot;**编译项**期间公共和平台源代码的分离&quot;">​</a></h4><p>之前，Kotlin 编译器的设计阻止了它在<strong>编译期</strong>将公共和平台<strong>源代码集</strong>分开。因此，公共代码可以访问平台代码，导致平台之间行为不一致。此外，编译器设置和公共代码中的<strong>依赖项</strong>会泄露到平台代码中。</p><p>在 Kotlin 2.0.0 中，我们新 Kotlin K2 编译器的实现包含对编译方案的重新设计，以确保公共和平台<strong>源代码集</strong>之间的严格分离。当你使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html#expected-and-actual-functions" target="_blank" rel="noreferrer"><strong>expect</strong> 和 <strong>actual</strong> <strong>函数</strong></a>时，此更改最为明显。之前，公共代码中的<strong>函数调用</strong>可能会解析为平台代码中的<strong>函数</strong>。例如：</p><table><tr><td>公共代码</td><td>平台代码</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exampleFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JVM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;platform foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// There is no foo() function overload on the JavaScript platform</span></span></code></pre></div></td></tr></table><p>在此示例中，公共代码的行为因其运行的平台而异：</p><ul><li>在 JVM 平台上，在公共代码中调用 <code>foo()</code> <strong>函数</strong>会导致平台代码中的 <code>foo()</code> <strong>函数</strong>被调用，作为 <code>platform foo</code>。</li><li>在 JavaScript 平台上，在公共代码中调用 <code>foo()</code> <strong>函数</strong>会导致公共代码中的 <code>foo()</code> <strong>函数</strong>被调用，作为 <code>common foo</code>，因为平台代码中没有这样的<strong>函数</strong>可用。</li></ul><p>在 Kotlin 2.0.0 中，公共代码无法访问平台代码，因此两个平台都成功将 <code>foo()</code> <strong>函数</strong>解析为公共代码中的 <code>foo()</code> <strong>函数</strong>：<code>common foo</code>。</p><p>除了改进了跨平台行为的一致性之外，我们还努力修复了 IntelliJ IDEA 或 Android Studio 与编译器之间行为冲突的情况。例如，当你使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html#expected-and-actual-classes" target="_blank" rel="noreferrer"><strong>expect</strong> 和 <strong>actual</strong> 类</a>时，会发生以下情况：</p><table><tr><td>公共代码</td><td>平台代码</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> confirmIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> common</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 2.0.0 之前，它只会触发 IDE 错误</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">confirmIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // RESOLUTION_TO_CLASSIFIER : Expected class Identity has no default constructor.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> confirmIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;expect class fun: jvm&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><p>在此示例中，<code>expect</code> 类 <code>Identity</code> 没有默认<strong>构造函数</strong>，因此无法在公共代码中成功调用。之前，只有 IDE 报告错误，但代码在 JVM 上仍然成功<strong>编译</strong>。然而，现在编译器会正确报告错误：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Expected class &#39;expect class Identity : Any&#39; does not have default constructor</span></span></code></pre></div><h5 id="何时解析行为不变" tabindex="-1">何时解析行为不变 <a class="header-anchor" href="#何时解析行为不变" aria-label="Permalink to &quot;何时解析行为不变&quot;">​</a></h5><p>我们仍在向新的编译方案迁移中，因此当你调用不在同一<strong>源代码集</strong>中的<strong>函数</strong>时，解析行为仍然相同。你主要会在公共代码中使用多平台库中的<strong>重载</strong>时注意到这种差异。</p><p>假设你有一个库，它有两个带有不同签名的 <code>whichFun()</code> <strong>函数</strong>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Example library</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块：common</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块：JVM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;platform function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果你在公共代码中调用 <code>whichFun()</code> <strong>函数</strong>，库中拥有最相关<strong>实参</strong>类型的<strong>函数</strong>将被解析：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一个使用 JVM 目标平台示例库的项目</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块：common</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // platform function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>相比之下，如果你在同一<strong>源代码集</strong>内<strong>声明</strong> <code>whichFun()</code> 的<strong>重载</strong>，则公共代码中的<strong>函数</strong>将被解析，因为你的代码无法访问<strong>平台特有的</strong>版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 未使用示例库</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块：common</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // common function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块：JVM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;platform function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>类似于多平台库，由于 <code>commonTest</code> 模块位于单独的<strong>源代码集</strong>中，它仍然可以访问<strong>平台特有的</strong>代码。因此，调用 <code>commonTest</code> 模块中<strong>函数</strong>的解析行为与旧的编译方案相同。</p><p>未来，这些剩余情况将与新的编译方案更加一致。</p><h4 id="expect-和-actual-声明的不同可见性级别" tabindex="-1"><code>expect</code> 和 <code>actual</code> <strong>声明</strong>的不同可见性级别 <a class="header-anchor" href="#expect-和-actual-声明的不同可见性级别" aria-label="Permalink to &quot;\`expect\` 和 \`actual\` **声明**的不同可见性级别&quot;">​</a></h4><p>在 Kotlin 2.0.0 之前，如果你在 Kotlin Multiplatform <strong>项目</strong>中使用了 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer"><strong>expect</strong> 和 <strong>actual</strong> <strong>声明</strong></a>，它们必须具有相同的<a href="/kotlin/visibility-modifiers">可见性级别</a>。Kotlin 2.0.0 现在也支持不同的可见性级别，但<strong>仅限</strong> <code>actual</code> <strong>声明</strong>比 <code>expect</code> <strong>声明</strong>更宽松的情况。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 可见性为 internal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 默认可见性为 public，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                // 更宽松</span></span></code></pre></div><p>同样，如果你在 <code>actual</code> <strong>声明</strong>中使用了<a href="/kotlin/type-aliases">类型别名</a>，则<strong>底层类型</strong>的可见性应与 <code>expect</code> <strong>声明</strong>相同或更宽松。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 // 可见性为 internal</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Expanded</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Expanded</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                  // 默认可见性为 public，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                                // 更宽松</span></span></code></pre></div><h2 id="如何启用-kotlin-k2-编译器" tabindex="-1">如何启用 Kotlin K2 编译器 <a class="header-anchor" href="#如何启用-kotlin-k2-编译器" aria-label="Permalink to &quot;如何启用 Kotlin K2 编译器&quot;">​</a></h2><p>从 Kotlin 2.0.0 开始，Kotlin K2 编译器默认启用。</p><p>要升级 Kotlin 版本，请在你的 <a href="/kotlin/gradle-configure-project#apply-the-plugin">Gradle</a> 和 <a href="/kotlin/maven#configure-and-enable-the-plugin">Maven</a><strong>构建脚本</strong>中将其更改为 2.0.0 或更高版本。</p><p>为了在 IntelliJ IDEA 或 Android Studio 中获得最佳体验，请考虑在 IDE 中<a href="#support-in-ides">启用 K2 模式</a>。</p><h3 id="将-kotlin-构建报告与-gradle-结合使用" tabindex="-1">将 Kotlin <strong>构建报告</strong>与 Gradle 结合使用 <a class="header-anchor" href="#将-kotlin-构建报告与-gradle-结合使用" aria-label="Permalink to &quot;将 Kotlin **构建报告**与 Gradle 结合使用&quot;">​</a></h3><p>Kotlin <a href="/kotlin/gradle-compilation-and-caches#build-reports"><strong>构建报告</strong></a>提供了关于 Kotlin 编译器<strong>任务</strong>在不同<strong>编译项</strong>阶段所花费时间的信息，以及使用了哪个编译器和 Kotlin 版本，以及<strong>编译项</strong>是否为增量<strong>编译项</strong>。这些<strong>构建报告</strong>对于评估你的<strong>构建</strong>性能很有用。它们比 <a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">Gradle <strong>构建扫描</strong></a> 对 Kotlin <strong>编译项流水线</strong>有更多洞察，因为它们为你提供了所有 Gradle <strong>任务</strong>的性能概览。</p><h4 id="如何启用构建报告" tabindex="-1">如何启用<strong>构建报告</strong> <a class="header-anchor" href="#如何启用构建报告" aria-label="Permalink to &quot;如何启用**构建报告**&quot;">​</a></h4><p>要启用<strong>构建报告</strong>，请在你的 <code>gradle.properties</code> 文件中<strong>声明</strong>你希望将<strong>构建报告</strong>输出保存到何处：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.output=file</span></span></code></pre></div><p>以下值及其组合可用于输出：</p><table tabindex="0"><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>file</code></td><td>将<strong>构建报告</strong>以人类可读格式保存到本地文件。默认情况下，它位于 <code>\${project_folder}/build/reports/kotlin-build/\${project_name}-timestamp.txt</code></td></tr><tr><td><code>single_file</code></td><td>将<strong>构建报告</strong>以对象格式保存到指定的本地文件。</td></tr><tr><td><code>build_scan</code></td><td>将<strong>构建报告</strong>保存到 <a href="https://scans.gradle.com/" target="_blank" rel="noreferrer"><strong>构建扫描</strong></a> 的 <code>custom values</code> 部分。请注意，Gradle Enterprise 插件限制了自定义值的数量和长度。在大型<strong>项目</strong>中，某些值可能会丢失。</td></tr><tr><td><code>http</code></td><td>使用 HTTP(S) <strong>发布构建报告</strong>。POST <strong>方法</strong>以 JSON 格式发送指标。你可以在 <a href="https://github.com/JetBrains/kotlin/blob/master/libraries/tools/kotlin-gradle-plugin/src/common/kotlin/org/jetbrains/kotlin/gradle/report/data/GradleCompileStatisticsData.kt" target="_blank" rel="noreferrer">Kotlin <strong>版本库</strong></a> 中查看已发送数据的当前版本。你可以在<a href="https://blog.jetbrains.com/kotlin/2022/06/introducing-kotlin-build-reports/?_gl=1*1a7pghy*_ga*MTcxMjc1NzE5Ny4xNjY1NDAzNjkz*_ga_9J976DJZ68*MTcxNTA3NjA2NS4zNzcuMS4xNzE1MDc2MDc5LjQ2LjAuMA..&amp;_ga=2.265800911.1124071296.1714976764-1712757197.1665403693#enable_build_reports" target="_blank" rel="noreferrer">这篇博客文章</a>中找到 HTTP 端点示例。</td></tr><tr><td><code>json</code></td><td>将<strong>构建报告</strong>以 JSON 格式保存到本地文件。在 <code>kotlin.build.report.json.directory</code> 中设置<strong>构建报告</strong>的位置。默认情况下，其名称为 <code>\${project_name}-build-&lt;date-time&gt;-&lt;index&gt;.json</code>。</td></tr></tbody></table><p>有关<strong>构建报告</strong>可能性的更多信息，请参见 <a href="/kotlin/gradle-compilation-and-caches#build-reports"><strong>构建报告</strong></a>。</p><h2 id="ide-支持" tabindex="-1">IDE 支持 <a class="header-anchor" href="#ide-支持" aria-label="Permalink to &quot;IDE 支持&quot;">​</a></h2><p>IntelliJ IDEA 和 Android Studio 中的 K2 模式使用 K2 编译器来改进代码分析、代码补全和高亮显示。</p><p>从 IntelliJ IDEA 2025.1 开始，K2 模式<a href="https://blog.jetbrains.com/idea/2025/04/k2-mode-in-intellij-idea-2025-1-current-state-and-faq/" target="_blank" rel="noreferrer">默认启用</a>。</p><p>在 Android Studio 中，你可以从 2024.1 开始按照以下步骤启用 K2 模式：</p><ol><li>转到 <strong>设置</strong> | <strong>语言和框架</strong> | <strong>Kotlin</strong>。</li><li>选择<strong>启用 K2 模式</strong>选项。</li></ol>`,92),s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"之前的-ide-行为",tabindex:"-1"},[t("之前的 IDE 行为 "),s("a",{class:"header-anchor",href:"#之前的-ide-行为","aria-label":'Permalink to "之前的 IDE 行为 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i(`<p>如果你想恢复之前的 IDE 行为，可以禁用 K2 模式：</p><ol><li>转到 <strong>设置</strong> | <strong>语言和框架</strong> | <strong>Kotlin</strong>。</li><li>取消选择<strong>启用 K2 模式</strong>选项。</li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>我们计划在 Kotlin 2.1.0 之后引入<a href="/kotlin/components-stability#stability-levels-explained">稳定</a>语言<strong>特性</strong>。在此之前，你可以继续使用之前的 IDE <strong>特性</strong>进行代码分析，并且不会遇到因未识别的语言<strong>特性</strong>而导致的任何代码高亮问题。</p></div><h2 id="在-kotlin-playground-中尝试-kotlin-k2-编译器" tabindex="-1">在 Kotlin Playground 中尝试 Kotlin K2 编译器 <a class="header-anchor" href="#在-kotlin-playground-中尝试-kotlin-k2-编译器" aria-label="Permalink to &quot;在 Kotlin Playground 中尝试 Kotlin K2 编译器&quot;">​</a></h2><p>Kotlin Playground 支持 Kotlin 2.0.0 及更高版本。 <a href="https://pl.kotl.in/czuoQprce" target="_blank" rel="noreferrer">试试看吧！</a></p><h2 id="如何回滚到之前的编译器" tabindex="-1">如何回滚到之前的编译器 <a class="header-anchor" href="#如何回滚到之前的编译器" aria-label="Permalink to &quot;如何回滚到之前的编译器&quot;">​</a></h2><p>要在 Kotlin 2.0.0 及更高版本中使用之前的编译器，你可以：</p><ul><li><p>在你的 <code>build.gradle.kts</code> 文件中，将<a href="/kotlin/gradle-compiler-options#example-of-setting-languageversion">你的语言版本设置为 <code>1.9</code></a>。</p><p>或者</p></li><li><p>使用以下编译器选项：<code>-language-version 1.9</code>。</p></li></ul><h2 id="更改" tabindex="-1">更改 <a class="header-anchor" href="#更改" aria-label="Permalink to &quot;更改&quot;">​</a></h2><p>随着新前端的引入，Kotlin 编译器经历了几次更改。让我们首先重点介绍影响你代码的最重要修改，解释了哪些内容发生了变化，并详细说明了未来的最佳实践。如果你想了解更多信息，我们将这些更改归类到<a href="#per-subject-area">主题领域</a>，以便你进一步阅读。</p><p>本节重点介绍以下修改：</p><ul><li><a href="#immediate-initialization-of-open-properties-with-backing-fields">立即初始化带有<strong>幕后字段</strong>的 <code>open</code> 属性</a></li><li><a href="#deprecated-synthetics-setter-on-a-projected-receiver">弃用对<strong>型变接收者</strong>使用合成<strong>setter</strong></a></li><li><a href="#forbidden-use-of-inaccessible-generic-types">禁止使用无法访问的泛型类型</a></li><li><a href="#consistent-resolution-order-of-kotlin-properties-and-java-fields-with-the-same-name">Kotlin 属性与同名 Java 字段的一致解析顺序</a></li><li><a href="#improved-null-safety-for-java-primitive-arrays">改进 Java <strong>原语数组</strong>的<strong>空安全</strong></a></li><li><a href="#stricter-rules-for-abstract-members-in-expected-classes"><code>expect</code> 类中抽象成员的更严格规则</a></li></ul><h3 id="立即初始化带有幕后字段的-open-属性" tabindex="-1">立即初始化带有<strong>幕后字段</strong>的 <code>open</code> 属性 <a class="header-anchor" href="#立即初始化带有幕后字段的-open-属性" aria-label="Permalink to &quot;立即初始化带有**幕后字段**的 \`open\` 属性&quot;">​</a></h3><p><strong>更改了什么？</strong></p><p>在 Kotlin 2.0 中，所有带有<strong>幕后字段</strong>的 <code>open</code> 属性都必须立即初始化；否则，你将收到<strong>编译错误</strong>。之前，只有 <code>open var</code> 属性需要立即初始化，但现在这也扩展到带有<strong>幕后字段</strong>的 <code>open val</code> 属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 从 Kotlin 2.0 开始报错，之前可以成功编译 </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //Error: open val must have initializer</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 总是报错</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Error: open var must have initializer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Derived</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此更改使编译器的行为更可预测。考虑一个示例，其中 <code>open val</code> 属性被带有自定义<strong>setter</strong>的 <code>var</code> 属性<strong>覆盖</strong>。</p><p>如果使用自定义<strong>setter</strong>，延迟初始化可能导致混淆，因为不清楚你是想初始化<strong>幕后字段</strong>还是调用<strong>setter</strong>。过去，如果你想调用<strong>setter</strong>，旧编译器无法保证<strong>setter</strong>会初始化<strong>幕后字段</strong>。</p><p><strong>现在最佳实践是什么？</strong></p><p>我们鼓励你始终初始化带有<strong>幕后字段</strong>的 <code>open</code> 属性，因为我们相信这种做法更高效且不易出错。</p><p>但是，如果你不想立即初始化属性，可以：</p><ul><li>将属性设为 <code>final</code>。</li><li>使用允许延迟初始化的私有<strong>幕后属性</strong>。</li></ul><p>有关更多信息，请参见 <a href="https://youtrack.jetbrains.com/issue/KT-57555" target="_blank" rel="noreferrer">YouTrack</a> 中的相应问题。</p><h3 id="弃用对型变接收者使用合成setter" tabindex="-1">弃用对<strong>型变接收者</strong>使用合成<strong>setter</strong> <a class="header-anchor" href="#弃用对型变接收者使用合成setter" aria-label="Permalink to &quot;弃用对**型变接收者**使用合成**setter**&quot;">​</a></h3><p><strong>更改了什么？</strong></p><p>如果你使用 Java 类的合成<strong>setter</strong>来<strong>赋值</strong>一个与类<strong>型变</strong>类型冲突的类型，就会触发错误。</p><p>假设你有一个名为 <code>Container</code> 的 Java 类，它包含 <code>getFoo()</code> 和 <code>setFoo()</code> <strong>方法</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> E </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getFoo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setFoo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(E </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果你有以下 Kotlin 代码，其中 <code>Container</code> 类的实例具有<strong>型变</strong>类型，使用 <code>setFoo()</code> <strong>方法</strong>将总是生成错误。然而，只有从 Kotlin 2.0.0 开始，合成的 <code>foo</code> 属性才会触发错误：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exampleFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(starProjected: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;, inProjected: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, sampleString: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    starProjected.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setFoo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sampleString)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 从 Kotlin 1.0 开始报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 合成 setter \`foo\` 解析为 \`setFoo()\` 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    starProjected.foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampleString</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 从 Kotlin 2.0.0 开始报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inProjected.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setFoo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sampleString)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 从 Kotlin 1.0 开始报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 合成 setter \`foo\` 解析为 \`setFoo()\` 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    inProjected.foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampleString</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 从 Kotlin 2.0.0 开始报错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>现在最佳实践是什么？</strong></p><p>如果你发现此更改导致代码中出现错误，你可能需要重新考虑如何<strong>声明</strong>你的类型。你可能不需要使用类型<strong>型变</strong>，或者你可能需要从代码中删除任何<strong>赋值</strong>。</p><p>有关更多信息，请参见 <a href="https://youtrack.jetbrains.com/issue/KT-54309" target="_blank" rel="noreferrer">YouTrack</a> 中的相应问题。</p><h3 id="禁止使用无法访问的泛型类型" tabindex="-1">禁止使用无法访问的泛型类型 <a class="header-anchor" href="#禁止使用无法访问的泛型类型" aria-label="Permalink to &quot;禁止使用无法访问的泛型类型&quot;">​</a></h3><p><strong>更改了什么？</strong></p><p>由于 K2 编译器的新架构，我们更改了处理无法访问的泛型类型的方式。通常，你不应该在代码中<strong>依赖</strong>无法访问的泛型类型，因为这表明你的<strong>项目构建配置</strong>存在配置错误，导致编译器无法访问<strong>编译</strong>所需的必要信息。在 Kotlin 2.0.0 中，你无法<strong>声明</strong>或调用带有无法访问的泛型类型的<strong>函数字面量</strong>，也无法使用带有无法访问的泛型类型<strong>实参</strong>的泛型类型。此限制有助于你避免代码后期出现编译器错误。</p><p>例如，假设你在一个模块中<strong>声明</strong>了一个泛型类：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果你有另一个模块（模块二），其<strong>依赖项配置</strong>在模块一上，你的代码可以访问 <code>Node&lt;V&gt;</code> 类并将其用作<strong>函数</strong>类型中的类型：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块二</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 函数编译成功</span></span></code></pre></div><p>然而，如果你的<strong>项目</strong>配置错误，使得你有一个只<strong>依赖</strong>模块二的第三方模块（模块三），那么 Kotlin 编译器在<strong>编译</strong>模块三时将无法访问<strong>模块一</strong>中的 <code>Node&lt;V&gt;</code> 类。现在，模块三中任何使用 <code>Node&lt;V&gt;</code> 类型的 lambda 或匿名<strong>函数</strong>都会在 Kotlin 2.0.0 中触发错误，从而避免了代码后期可能出现的编译器错误、崩溃和<strong>运行时</strong>异常：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块三</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 2.0.0 中触发错误，因为隐式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // lambda 形参 (it) 的类型解析为 Node，它是无法访问的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 2.0.0 中触发错误，因为未使用的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // lambda 形参 (_) 的类型解析为 Node，它是无法访问的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 2.0.0 中触发错误，因为未使用的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 匿名函数形参 (_) 的类型解析为 Node，它是无法访问的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_) {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>除了<strong>函数字面量</strong>在包含无法访问泛型类型的<strong>值形参</strong>时触发错误之外，当类型具有无法访问的泛型类型<strong>实参</strong>时也会发生错误。</p><p>例如，你在模块一中有相同的泛型类<strong>声明</strong>。在模块二中，你<strong>声明</strong>另一个泛型类：<code>Container&lt;C&gt;</code>。此外，你在模块二中<strong>声明</strong>使用 <code>Container&lt;C&gt;</code> 并以泛型类 <code>Node&lt;V&gt;</code> 作为类型<strong>实参</strong>的<strong>函数</strong>：</p><table><tr><td>模块一</td><td>模块二</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块二</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vararg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 具有泛型类类型、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 同时带有泛型类类型实参的函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> produce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;) {}</span></span></code></pre></div></td></tr></table><p>如果你尝试在模块三中调用这些<strong>函数</strong>，Kotlin 2.0.0 会触发错误，因为泛型类 <code>Node&lt;V&gt;</code> 无法从模块三访问：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块三</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 2.0.0 中触发错误，因为泛型类 Node&lt;V&gt; 无法访问</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    consume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">produce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在未来的版本中，我们将继续弃用一般情况下无法访问的类型。我们已经在 Kotlin 2.0.0 中通过为某些无法访问的类型场景（包括非泛型类型）添加警告来开始这一工作。</p><p>例如，让我们使用与之前示例相同的模块设置，但将泛型类 <code>Node&lt;V&gt;</code> 转换为非泛型类 <code>IntNode</code>，所有<strong>函数</strong>都在模块二中<strong>声明</strong>：</p><table><tr><td>模块一</td><td>模块二</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块一</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块二</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 包含 lambda</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 参数为 IntNode 类型的函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vararg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 具有泛型类类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 且带有 IntNode 作为类型实参的函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> produce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {}</span></span></code></pre></div></td></tr></table><p>如果你在模块三中调用这些<strong>函数</strong>时，会触发一些警告：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 模块三</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 2.0.0 中触发警告，因为类 IntNode 无法访问。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 参数 &#39;it&#39; 的类 &#39;IntNode&#39; 无法访问。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (_) {})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 参数 &#39;_&#39; 的类 &#39;IntNode&#39; 无法访问。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在未来的 Kotlin 版本中将触发警告，因为 IntNode 无法访问。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    consume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">produce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>现在最佳实践是什么？</strong></p><p>如果你遇到关于无法访问的泛型类型的新警告，极有可能你的<strong>构建系统配置</strong>存在问题。我们建议<strong>检测</strong>你的<strong>构建脚本</strong>和配置。</p><p>作为最后手段，你可以为模块三配置对模块一的直接<strong>依赖项</strong>。或者，你可以修改你的代码，使类型在同一模块内可访问。</p><p>有关更多信息，请参见 <a href="https://youtrack.jetbrains.com/issue/KT-64474" target="_blank" rel="noreferrer">YouTrack</a> 中的相应问题。</p><h3 id="kotlin-属性与同名-java-字段的一致解析顺序" tabindex="-1">Kotlin 属性与同名 Java 字段的一致解析顺序 <a class="header-anchor" href="#kotlin-属性与同名-java-字段的一致解析顺序" aria-label="Permalink to &quot;Kotlin 属性与同名 Java 字段的一致解析顺序&quot;">​</a></h3><p><strong>更改了什么？</strong></p><p>在 Kotlin 2.0.0 之前，如果你处理相互<strong>继承</strong>并包含相同名称的 Kotlin 属性和 Java 字段的 Java 和 Kotlin 类，重复名称的解析行为不一致。IntelliJ IDEA 和编译器之间也存在冲突行为。在开发 Kotlin 2.0.0 的新解析行为时，我们的目标是对用户造成最小影响。</p><p>例如，假设有一个 Java 类 <code>Base</code>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>再假设有一个 Kotlin 类 <code>Derived</code> <strong>继承</strong>自上述 <code>Base</code> 类：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Derived</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;aa&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 声明自定义 get() 函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bb&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 解析为 Derived.a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // aa</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 解析为 Base.b</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 Kotlin 2.0.0 之前，<code>a</code> 解析为 <code>Derived</code> Kotlin 类中的 Kotlin 属性，而 <code>b</code> 解析为 <code>Base</code> Java 类中的 Java 字段。</p><p>在 Kotlin 2.0.0 中，示例中的解析行为一致，确保 Kotlin 属性取代了同名 Java 字段。现在，<code>b</code> 解析为：<code>Derived.b</code>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在 Kotlin 2.0.0 之前，如果你使用 IntelliJ IDEA 跳转到 <code>a</code> 的<strong>声明</strong>或使用处，它会错误地导航到 Java 字段，而它本应导航到 Kotlin 属性。 从 Kotlin 2.0.0 开始，IntelliJ IDEA 现在正确导航到与编译器相同的位置。</p></div><p>一般规则是子类优先。前面的示例证明了这一点，因为 <code>Derived</code> 类中的 Kotlin 属性 <code>a</code> 被解析，因为 <code>Derived</code> 是 <code>Base</code> Java 类的子类。</p><p>如果<strong>继承</strong>被反转，并且 Java 类<strong>继承</strong>自 Kotlin 类，则子类中的 Java 字段优先于同名的 Kotlin 属性。</p><p>考虑这个例子：</p><table><tr><td>Kotlin</td><td>Java</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;aa&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Derived</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><p>现在在以下代码中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 解析为 Derived.a</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>现在最佳实践是什么？</strong></p><p>如果此更改影响了你的代码，请考虑你是否真的需要使用重复的名称。如果你想让 Java 或 Kotlin 类各自包含同名字段或属性，并且相互<strong>继承</strong>，请记住子类中的字段或属性将优先。</p><p>有关更多信息，请参见 <a href="https://youtrack.jetbrains.com/issue/KT-55017" target="_blank" rel="noreferrer">YouTrack</a> 中的相应问题。</p><h3 id="改进-java-原语数组的空安全" tabindex="-1">改进 Java <strong>原语数组</strong>的<strong>空安全</strong> <a class="header-anchor" href="#改进-java-原语数组的空安全" aria-label="Permalink to &quot;改进 Java **原语数组**的**空安全**&quot;">​</a></h3><p><strong>更改了什么？</strong></p><p>从 Kotlin 2.0.0 开始，编译器正确<strong>推断</strong>导入到 Kotlin 的 Java <strong>原语数组</strong>的<strong>可空性</strong>。现在，它保留了与 Java <strong>原语数组</strong>一起使用的 <code>TYPE_USE</code> 注解的<strong>原生可空性</strong>，并在其值未按注解使用时发出错误。</p><p>通常，当带有 <code>@Nullable</code> 和 <code>@NotNull</code> 注解的 Java 类型从 Kotlin 调用时，它们会获得相应的<strong>原生可空性</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NotNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ResultContainer&lt;@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Nullable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataService: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -&gt; ResultContainer&lt;String?&gt;</span></span></code></pre></div><p>然而，之前当 Java <strong>原语数组</strong>导入到 Kotlin 时，所有 <code>TYPE_USE</code> 注解都会丢失，导致平台<strong>可空性</strong>和可能不安全的代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DataProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Nullable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataService: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataProvider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// -&gt; IntArray .. IntArray?</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 没有错误，即使根据注解 dataService.fetchData() 可能为 null</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这可能导致 NullPointerException</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>请注意，此问题从未影响<strong>声明</strong>本身的<strong>可空性</strong>注解，只影响 <code>TYPE_USE</code> 注解。</p><p><strong>现在最佳实践是什么？</strong></p><p>在 Kotlin 2.0.0 中，Java <strong>原语数组</strong>的<strong>空安全</strong>现在在 Kotlin 中是标准<strong>特性</strong>，因此如果你使用它们，请<strong>检测</strong>你的代码中是否有新的警告和错误：</p><ul><li>任何在没有<strong>显式可空性检测</strong>的情况下使用 <code>@Nullable</code> Java <strong>原语数组</strong>，或尝试将 <code>null</code> 传递给预期非<strong>非空的****原语数组</strong>的 Java <strong>方法</strong>的代码，现在都将无法<strong>编译</strong>。</li><li>使用带有<strong>可空性检测</strong>的 <code>@NotNull</code> <strong>原语数组</strong>现在会发出“不必要的安全调用”或“与 null 比较始终为 false”警告。</li></ul><p>有关更多信息，请参见 <a href="https://youtrack.jetbrains.com/issue/KT-54521" target="_blank" rel="noreferrer">YouTrack</a> 中的相应问题。</p><h3 id="expect-类中抽象成员的更严格规则" tabindex="-1"><code>expect</code> 类中抽象成员的更严格规则 <a class="header-anchor" href="#expect-类中抽象成员的更严格规则" aria-label="Permalink to &quot;\`expect\` 类中抽象成员的更严格规则&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>expect</code> 和 <code>actual</code> 类处于 <a href="/kotlin/components-stability#stability-levels-explained">Beta</a> 阶段。它们几乎稳定，但未来你可能需要执行迁移步骤。我们将尽力减少你未来需要进行的任何更改。</p></div><p><strong>更改了什么？</strong></p><p>由于 K2 编译器在<strong>编译项</strong>期间分离公共和平台源代码，我们对 <code>expect</code> 类中的抽象成员实施了更严格的规则。</p><p>使用之前的编译器，<code>expect</code> 非抽象类可以<strong>继承</strong>抽象<strong>函数</strong>而无需<a href="/kotlin/inheritance#overriding-rules"><strong>覆盖</strong>该<strong>函数</strong></a>。由于编译器可以同时访问公共和平台代码，编译器可以看到抽象<strong>函数</strong>在 <code>actual</code> 类中是否有相应的<strong>覆盖</strong>和<strong>定义</strong>。</p><p>既然公共和平台源代码是分开<strong>编译</strong>的，<strong>继承</strong>的<strong>函数</strong>必须在 <code>expect</code> 类中<strong>显式覆盖</strong>，这样编译器才能知道该<strong>函数</strong>不是抽象的。否则，编译器会报告 <code>ABSTRACT_MEMBER_NOT_IMPLEMENTED</code> 错误。</p><p>例如，假设你有一个公共<strong>源代码集</strong>，你<strong>声明</strong>了一个名为 <code>FileSystem</code> 的抽象类，它有一个抽象<strong>函数</strong> <code>listFiles()</code>。你在平台<strong>源代码集</strong>中将 <code>listFiles()</code> <strong>函数****定义</strong>为 <code>actual</code> <strong>声明</strong>的一部分。</p><p>在你的公共代码中，如果你有一个名为 <code>PlatformFileSystem</code> 的 <code>expect</code> 非抽象类，它<strong>继承</strong>自 <code>FileSystem</code> 类，那么 <code>PlatformFileSystem</code> 类<strong>继承</strong>了抽象<strong>函数</strong> <code>listFiles()</code>。然而，在 Kotlin 中，非抽象类不能有抽象<strong>函数</strong>。要使 <code>listFiles()</code> <strong>函数</strong>非抽象，你必须将其<strong>声明</strong>为不带 <code>abstract</code> 关键字的<strong>覆盖</strong>：</p><table><tr><td>公共代码</td><td>平台代码</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlatformFileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 2.0.0 中，需要显式覆盖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 2.0.0 之前，不需要覆盖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlatformFileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><p><strong>现在最佳实践是什么？</strong></p><p>如果你在 <code>expect</code> 非抽象类中<strong>继承</strong>抽象<strong>函数</strong>，请添加一个非抽象<strong>覆盖</strong>。</p><p>有关更多信息，请参见 <a href="https://youtrack.com/issue/KT-59739/K2-MPP-reports-ABSTRACTMEMBERNOTIMPLEMENTED-for-inheritor-in-common-code-when-the-implementation-is-located-in-the-actual" target="_blank" rel="noreferrer">YouTrack</a> 中的相应问题。</p><h3 id="按主题领域" tabindex="-1">按主题领域 <a class="header-anchor" href="#按主题领域" aria-label="Permalink to &quot;按主题领域&quot;">​</a></h3><p>这些主题领域列出了不太可能影响你的代码的更改，但提供了相关 YouTrack 问题的链接，供进一步阅读。标记星号 (*) 的问题 ID 在本节开头已解释。</p>`,103),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"类型推断",tabindex:"-1"},[t("类型"),s("strong",null,"推断"),t(),s("a",{class:"header-anchor",href:"#类型推断","aria-label":'Permalink to "类型**推断** {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">问题 ID</th><th style="text-align:left;">标题</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64189" target="_blank" rel="noreferrer">KT-64189</a></td><td style="text-align:left;">如果类型<strong>显式</strong>为 <code>Normal</code>，则属性引用<strong>编译****函数</strong>签名中的类型不正确</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-47986" target="_blank" rel="noreferrer">KT-47986</a></td><td style="text-align:left;">禁止在<strong>构建器推断</strong>上下文中将类型变量隐式<strong>推断</strong>为上限</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-59275" target="_blank" rel="noreferrer">KT-59275</a></td><td style="text-align:left;">K2：要求数组<strong>字面量</strong>中泛型注解调用的<strong>显式</strong>类型<strong>实参</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-53752" target="_blank" rel="noreferrer">KT-53752</a></td><td style="text-align:left;">缺少对交集类型的子类型<strong>检测</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-59138" target="_blank" rel="noreferrer">KT-59138</a></td><td style="text-align:left;">更改 Kotlin 中基于 Java 类型<strong>形参</strong>的类型默认表示</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57178" target="_blank" rel="noreferrer">KT-57178</a></td><td style="text-align:left;">更改前缀自增的<strong>推断</strong>类型为<strong>getter</strong>的返回类型，而不是 <code>inc()</code> <strong>操作符</strong>的返回类型</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57609" target="_blank" rel="noreferrer">KT-57609</a></td><td style="text-align:left;">K2：停止<strong>依赖</strong> <code>@UnsafeVariance</code> 用于<strong>逆变****形参</strong>的存在</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57620" target="_blank" rel="noreferrer">KT-57620</a></td><td style="text-align:left;">K2：禁止<strong>解析</strong>为<strong>原始类型</strong>中的<strong>被包含成员</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64641" target="_blank" rel="noreferrer">KT-64641</a></td><td style="text-align:left;">K2：正确<strong>推断</strong>了带有<strong>扩展<strong><strong>函数</strong></strong>形参</strong>的<strong>可调用引用</strong>类型</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57011" target="_blank" rel="noreferrer">KT-57011</a></td><td style="text-align:left;">当<strong>解构变量****显式</strong>指定时，使其真实类型与<strong>显式</strong>类型一致</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-38895" target="_blank" rel="noreferrer">KT-38895</a></td><td style="text-align:left;">K2：修复整数字<strong>面量溢出</strong>的不一致行为</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-54862" target="_blank" rel="noreferrer">KT-54862</a></td><td style="text-align:left;">匿名类型可以从类型<strong>实参</strong>的匿名<strong>函数</strong>中暴露</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-22379" target="_blank" rel="noreferrer">KT-22379</a></td><td style="text-align:left;">带有 <code>break</code> 的 <code>while</code> 循环条件可能产生不健全的<strong>智能类型转换</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-62507" target="_blank" rel="noreferrer">KT-62507</a></td><td style="text-align:left;">K2：禁止在公共代码中对 <code>expect</code>/<code>actual</code> <strong>顶层</strong>属性进行<strong>智能类型转换</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65750" target="_blank" rel="noreferrer">KT-65750</a></td><td style="text-align:left;">更改返回类型的自增和加<strong>操作符</strong>必须影响<strong>智能类型转换</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65349" target="_blank" rel="noreferrer">KT-65349</a></td><td style="text-align:left;">[LC] K2：<strong>显式</strong>指定变量类型在某些 K1 可用的情况下会破坏绑定<strong>智能类型转换</strong></td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"泛型",tabindex:"-1"},[t("泛型 "),s("a",{class:"header-anchor",href:"#泛型","aria-label":'Permalink to "泛型 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">问题 ID</th><th style="text-align:left;">标题</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-54309" target="_blank" rel="noreferrer">KT-54309</a>*</td><td style="text-align:left;"><a href="#deprecated-synthetics-setter-on-a-projected-receiver">弃用对<strong>型变接收者</strong>使用合成<strong>setter</strong></a></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57600" target="_blank" rel="noreferrer">KT-57600</a></td><td style="text-align:left;">禁止<strong>覆盖</strong>带有<strong>原始类型****形参</strong>的 Java <strong>方法</strong>，而使用带有泛型类型的<strong>形参</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.com/issue/KT-54663" target="_blank" rel="noreferrer">KT-54663</a></td><td style="text-align:left;">禁止将可能<strong>可空</strong>的类型<strong>形参</strong>传递给 <code>in</code> <strong>型变</strong>的 DNN <strong>形参</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-54066" target="_blank" rel="noreferrer">KT-54066</a></td><td style="text-align:left;">弃用类型别名<strong>构造函数</strong>中的上限违反</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-49404" target="_blank" rel="noreferrer">KT-49404</a></td><td style="text-align:left;">修复基于 Java 类的<strong>逆变</strong>捕获类型的类型不健全问题</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-61718" target="_blank" rel="noreferrer">KT-61718</a></td><td style="text-align:left;">禁止带有自<strong>上限</strong>和捕获类型的不健全代码</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-61749" target="_blank" rel="noreferrer">KT-61749</a></td><td style="text-align:left;">禁止泛型外部类的泛型内部类中不健全的边界违反</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-62923" target="_blank" rel="noreferrer">KT-62923</a></td><td style="text-align:left;">K2：为内部类的外部父类型的<strong>型变</strong>引入 <code>PROJECTION_IN_IMMEDIATE_ARGUMENT_TO_SUPERTYPE</code></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-63243" target="_blank" rel="noreferrer">KT-63243</a></td><td style="text-align:left;">当从<strong>原语集合****继承</strong>并从另一个父类型获得额外的<strong>专用实现</strong>时，报告 <code>MANY_IMPL_MEMBER_NOT_IMPLEMENTED</code></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-60305" target="_blank" rel="noreferrer">KT-60305</a></td><td style="text-align:left;">K2：禁止在展开类型中具有<strong>型变</strong>修饰符的类型别名上进行<strong>构造函数</strong>调用和<strong>继承</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64965" target="_blank" rel="noreferrer">KT-64965</a></td><td style="text-align:left;">修复因不当处理带有自上限的捕获类型而导致的类型漏洞</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64966" target="_blank" rel="noreferrer">KT-64966</a></td><td style="text-align:left;">禁止带有错误泛型<strong>形参</strong>类型的泛型<strong>委托****构造函数</strong>调用</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65712" target="_blank" rel="noreferrer">KT-65712</a></td><td style="text-align:left;">当上限是捕获类型时，报告缺失的上限违反</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"解析",tabindex:"-1"},[t("解析 "),s("a",{class:"header-anchor",href:"#解析","aria-label":'Permalink to "解析 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">问题 ID</th><th style="text-align:left;">标题</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-55017" target="_blank" rel="noreferrer">KT-55017</a>*</td><td style="text-align:left;"><a href="#consistent-resolution-order-of-kotlin-properties-and-java-fields-with-the-same-name">在<strong>重载解析</strong>期间，选择派生类中的 Kotlin 属性而非基类中的 Java 字段</a></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-58260" target="_blank" rel="noreferrer">KT-58260</a></td><td style="text-align:left;">使 <code>invoke</code> 约定与预期<strong>解糖</strong>一致地工作</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-62866" target="_blank" rel="noreferrer">KT-62866</a></td><td style="text-align:left;">K2：当伴生对象优先于静态<strong>作用域</strong>时，更改<strong>限定符</strong>解析行为</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57750" target="_blank" rel="noreferrer">KT-57750</a></td><td style="text-align:left;">在解析类型并星形导入同名类时，报告<strong>歧义错误</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-63558" target="_blank" rel="noreferrer">KT-63558</a></td><td style="text-align:left;">K2：迁移 <code>COMPATIBILITY_WARNING</code> 周围的解析</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-51194" target="_blank" rel="noreferrer">KT-51194</a></td><td style="text-align:left;">当<strong>依赖类</strong>包含在同一<strong>依赖项</strong>的两个不同版本中时，<code>CONFLICTING_INHERITED_MEMBERS</code> 误报</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-37592" target="_blank" rel="noreferrer">KT-37592</a></td><td style="text-align:left;">带有<strong>接收者</strong>的<strong>函数</strong>类型的属性 <code>invoke</code> 优先于<strong>扩展****函数</strong> <code>invoke</code></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-51666" target="_blank" rel="noreferrer">KT-51666</a></td><td style="text-align:left;">限定 <code>this</code>：引入/优先处理带有类型情况的限定 <code>this</code></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-54166" target="_blank" rel="noreferrer">KT-54166</a></td><td style="text-align:left;">确认类路径中 FQ 名称冲突时的未指定行为</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64431" target="_blank" rel="noreferrer">KT-64431</a></td><td style="text-align:left;">K2：禁止在导入中使用类型别名作为<strong>限定符</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-56520" target="_blank" rel="noreferrer">KT-56520</a></td><td style="text-align:left;">K1/K2：类型引用在低级别存在<strong>歧义</strong>时的解析塔工作不正确</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"可见性",tabindex:"-1"},[t("可见性 "),s("a",{class:"header-anchor",href:"#可见性","aria-label":'Permalink to "可见性 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">问题 ID</th><th style="text-align:left;">标题</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64474/" target="_blank" rel="noreferrer">KT-64474</a>*</td><td style="text-align:left;"><a href="#forbidden-use-of-inaccessible-generic-types">将无法访问类型的用法<strong>声明</strong>为未指定行为</a></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-55179" target="_blank" rel="noreferrer">KT-55179</a></td><td style="text-align:left;">从内部内联<strong>函数</strong>调用私有类伴生对象成员时，<code>PRIVATE_CLASS_MEMBER_FROM_INLINE</code> 误报</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-58042" target="_blank" rel="noreferrer">KT-58042</a></td><td style="text-align:left;">如果等效<strong>getter</strong>不可见，即使<strong>覆盖****声明</strong>可见，也使合成属性不可见</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64255" target="_blank" rel="noreferrer">KT-64255</a></td><td style="text-align:left;">禁止从另一个模块的派生类中访问内部<strong>setter</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-33917" target="_blank" rel="noreferrer">KT-33917</a></td><td style="text-align:left;">禁止从私有内联<strong>函数</strong>中暴露匿名类型</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-54997" target="_blank" rel="noreferrer">KT-54997</a></td><td style="text-align:left;">禁止从公共 API 内联<strong>函数</strong>中进行隐式非公共 API 访问</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-56310" target="_blank" rel="noreferrer">KT-56310</a></td><td style="text-align:left;"><strong>智能类型转换</strong>不应影响受保护成员的可见性</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65494" target="_blank" rel="noreferrer">KT-65494</a></td><td style="text-align:left;">禁止从公共内联<strong>函数</strong>访问被忽略的私有<strong>操作符****函数</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65004" target="_blank" rel="noreferrer">KT-65004</a></td><td style="text-align:left;">K1：<code>var</code> 的<strong>setter</strong>（<strong>覆盖</strong>受保护的 <code>val</code>）生成为 <code>public</code></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64972" target="_blank" rel="noreferrer">KT-64972</a></td><td style="text-align:left;">在 Kotlin/Native 的链接<strong>编译期</strong>，禁止私有成员的<strong>覆盖</strong></td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"注解",tabindex:"-1"},[t("注解 "),s("a",{class:"header-anchor",href:"#注解","aria-label":'Permalink to "注解 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">问题 ID</th><th style="text-align:left;">标题</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-58723" target="_blank" rel="noreferrer">KT-58723</a></td><td style="text-align:left;">如果注解没有 <code>EXPRESSION</code> <strong>目标</strong>，则禁止用该注解标注语句</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-49930" target="_blank" rel="noreferrer">KT-49930</a></td><td style="text-align:left;">在 <code>REPEATED_ANNOTATION</code> <strong>检测</strong>期间忽略<strong>圆括号</strong>表达式</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57422" target="_blank" rel="noreferrer">KT-57422</a></td><td style="text-align:left;">K2：禁止在属性<strong>getter</strong>上使用以 &#39;get&#39; 为<strong>目标</strong>的<strong>use-site</strong>注解</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-46483" target="_blank" rel="noreferrer">KT-46483</a></td><td style="text-align:left;">禁止在 <code>where</code> 子句中的类型<strong>形参</strong>上使用注解</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64299" target="_blank" rel="noreferrer">KT-64299</a></td><td style="text-align:left;">伴生对象注解的解析会忽略伴生<strong>作用域</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64654" target="_blank" rel="noreferrer">KT-64654</a></td><td style="text-align:left;">K2：引入了用户和编译器所需注解之间的<strong>歧义</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64527" target="_blank" rel="noreferrer">KT-64527</a></td><td style="text-align:left;">枚举值上的注解不应复制到枚举值类</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-63389" target="_blank" rel="noreferrer">KT-63389</a></td><td style="text-align:left;">K2：对包装在 <code>()？</code> 中的类型的不兼容注解报告 <code>WRONG_ANNOTATION_TARGET</code></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-63388" target="_blank" rel="noreferrer">KT-63388</a></td><td style="text-align:left;">K2：对 <code>catch</code> <strong>形参</strong>类型的注解报告 <code>WRONG_ANNOTATION_TARGET</code></td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"空安全",tabindex:"-1"},[s("strong",null,"空安全"),t(),s("a",{class:"header-anchor",href:"#空安全","aria-label":'Permalink to "**空安全** {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">问题 ID</th><th style="text-align:left;">标题</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-54521" target="_blank" rel="noreferrer">KT-54521</a>*</td><td style="text-align:left;"><a href="#improved-null-safety-for-java-primitive-arrays">弃用 Java 中注解为 Nullable 的数组类型的不安全用法</a></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-41034" target="_blank" rel="noreferrer">KT-41034</a></td><td style="text-align:left;">K2：更改安全调用和约定<strong>操作符</strong>组合的<strong>求值</strong>语义</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-50850" target="_blank" rel="noreferrer">KT-50850</a></td><td style="text-align:left;">父类型顺序<strong>定义</strong>了<strong>继承函数</strong>的<strong>可空性****形参</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-53982" target="_blank" rel="noreferrer">KT-53982</a></td><td style="text-align:left;">在公共签名中近似局部类型时保持<strong>可空性</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-62998" target="_blank" rel="noreferrer">KT-62998</a></td><td style="text-align:left;">禁止将<strong>可空的****赋值</strong>给非<strong>非空的</strong> Java 字段作为不安全<strong>赋值</strong>的<strong>选择器</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-63209" target="_blank" rel="noreferrer">KT-63209</a></td><td style="text-align:left;">报告警告级别 Java 类型的错误级别<strong>可空实参</strong>缺失的错误</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"java-互操作性",tabindex:"-1"},[t("Java 互操作性 "),s("a",{class:"header-anchor",href:"#java-互操作性","aria-label":'Permalink to "Java 互操作性 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">问题 ID</th><th style="text-align:left;">标题</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-53061" target="_blank" rel="noreferrer">KT-53061</a></td><td style="text-align:left;">禁止源中具有相同 FQ 名称的 Java 和 Kotlin 类</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-49882" target="_blank" rel="noreferrer">KT-49882</a></td><td style="text-align:left;"><strong>继承</strong>自 Java 集合的类根据父类型顺序具有不一致的行为</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-66324" target="_blank" rel="noreferrer">KT-66324</a></td><td style="text-align:left;">K2：Java 类<strong>继承</strong>自 Kotlin 私有类时的未指定行为</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-66220" target="_blank" rel="noreferrer">KT-66220</a></td><td style="text-align:left;">将 Java <code>vararg</code> <strong>方法</strong>传递给内联<strong>函数</strong>在<strong>运行时</strong>导致<strong>数组的数组</strong>而不是单个数组</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-66204" target="_blank" rel="noreferrer">KT-66204</a></td><td style="text-align:left;">允许在 K-J-K 层次结构中<strong>覆盖</strong>内部成员</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"属性",tabindex:"-1"},[t("属性 "),s("a",{class:"header-anchor",href:"#属性","aria-label":'Permalink to "属性 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">问题 ID</th><th style="text-align:left;">标题</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57555" target="_blank" rel="noreferrer">KT-57555</a>*</td><td style="text-align:left;"><a href="#immediate-initialization-of-open-properties-with-backing-fields">[LC] 禁止延迟初始化带有<strong>幕后字段</strong>的 <code>open</code> 属性</a></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-58589" target="_blank" rel="noreferrer">KT-58589</a></td><td style="text-align:left;">当没有主<strong>构造函数</strong>或类为局部时，弃用缺失的 <code>MUST_BE_INITIALIZED</code></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64295" target="_blank" rel="noreferrer">KT-64295</a></td><td style="text-align:left;">禁止属性上潜在 <code>invoke</code> 调用的递归解析</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57290" target="_blank" rel="noreferrer">KT-57290</a></td><td style="text-align:left;">如果基类来自另一个模块，则弃用对不可见派生类的基类属性的<strong>智能类型转换</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-62661" target="_blank" rel="noreferrer">KT-62661</a></td><td style="text-align:left;">K2：数据类属性缺失 <code>OPT_IN_USAGE_ERROR</code></td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"控制流",tabindex:"-1"},[t("控制流 "),s("a",{class:"header-anchor",href:"#控制流","aria-label":'Permalink to "控制流 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">问题 ID</th><th style="text-align:left;">标题</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-56408" target="_blank" rel="noreferrer">KT-56408</a></td><td style="text-align:left;">K1 和 K2 之间类初始化<strong>代码块</strong>中 CFA 的规则不一致</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57871" target="_blank" rel="noreferrer">KT-57871</a></td><td style="text-align:left;">K1/K2 在不带 <code>else</code> 分支的<strong>圆括号</strong>条件 <code>if</code> 上的不一致性</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-42995" target="_blank" rel="noreferrer">KT-42995</a></td><td style="text-align:left;"><strong>作用域****函数</strong>中带有初始化的 <code>try/catch</code> <strong>代码块</strong>中 <code>VAL_REASSIGNMENT</code> 误报</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65724" target="_blank" rel="noreferrer">KT-65724</a></td><td style="text-align:left;">将数据流信息从 <code>try</code> <strong>代码块</strong>传播到 <code>catch</code> 和 <code>finally</code> <strong>代码块</strong></td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"枚举类",tabindex:"-1"},[t("枚举类 "),s("a",{class:"header-anchor",href:"#枚举类","aria-label":'Permalink to "枚举类 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">问题 ID</th><th style="text-align:left;">标题</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57608" target="_blank" rel="noreferrer">KT-57608</a></td><td style="text-align:left;">禁止在枚举条目初始化期间访问枚举类的伴生对象</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-34372" target="_blank" rel="noreferrer">KT-34372</a></td><td style="text-align:left;">报告枚举类中虚内联<strong>方法</strong>的缺失错误</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-52802" target="_blank" rel="noreferrer">KT-52802</a></td><td style="text-align:left;">报告属性/字段与枚举条目之间解析的<strong>歧义</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-47310" target="_blank" rel="noreferrer">KT-47310</a></td><td style="text-align:left;">伴生属性优先于枚举条目时，更改<strong>限定符</strong>解析行为</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"函数式-sam-接口",tabindex:"-1"},[s("strong",null,"函数式"),t(" (SAM) 接口 "),s("a",{class:"header-anchor",href:"#函数式-sam-接口","aria-label":'Permalink to "**函数式** (SAM) 接口 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">问题 ID</th><th style="text-align:left;">标题</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-52628" target="_blank" rel="noreferrer">KT-52628</a></td><td style="text-align:left;">弃用无需注解便需要 <code>OptIn</code> 的 SAM <strong>构造函数</strong>用法</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-57014" target="_blank" rel="noreferrer">KT-57014</a></td><td style="text-align:left;">禁止从 lambda 返回带有错误<strong>可空性</strong>的值，用于 JDK <strong>函数</strong>接口的 SAM <strong>构造函数</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-64342" target="_blank" rel="noreferrer">KT-64342</a></td><td style="text-align:left;">可调用引用<strong>形参</strong>类型的 SAM 转换导致 CCE</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"伴生对象",tabindex:"-1"},[t("伴生对象 "),s("a",{class:"header-anchor",href:"#伴生对象","aria-label":'Permalink to "伴生对象 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">问题 ID</th><th style="text-align:left;">标题</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-54316" target="_blank" rel="noreferrer">KT-54316</a></td><td style="text-align:left;">对伴生对象成员的外部调用引用签名无效</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-47313" target="_blank" rel="noreferrer">KT-47313</a></td><td style="text-align:left;">当 V 具有伴生对象时，更改 <code>(V)::foo</code> 引用解析</td></tr></tbody></table>',1),s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"其他",tabindex:"-1"},[t("其他 "),s("a",{class:"header-anchor",href:"#其他","aria-label":'Permalink to "其他 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<table tabindex="0"><thead><tr><th style="text-align:left;">问题 ID</th><th style="text-align:left;">标题</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-59739" target="_blank" rel="noreferrer">KT-59739</a>*</td><td style="text-align:left;">K2/MPP 在公共代码中的<strong>继承者</strong>的实现位于实际对应方时报告 [ABSTRACT_MEMBER_NOT_IMPLEMENTED]</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-49015" target="_blank" rel="noreferrer">KT-49015</a></td><td style="text-align:left;">限定 <code>this</code>：更改潜在标签冲突时的行为</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-56545" target="_blank" rel="noreferrer">KT-56545</a></td><td style="text-align:left;">修复 JVM 后端中，Java 子类中意外冲突<strong>重载</strong>情况下的不正确<strong>名字修饰</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-62019" target="_blank" rel="noreferrer">KT-62019</a></td><td style="text-align:left;">[LC 问题] 禁止在语句位置<strong>声明</strong>带有 <code>suspend</code> 标记的匿名<strong>函数</strong></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-55111" target="_blank" rel="noreferrer">KT-55111</a></td><td style="text-align:left;">OptIn：禁止在标记下进行带有默认<strong>实参</strong>（带有默认值的<strong>形参</strong>）的<strong>构造函数</strong>调用</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-61182" target="_blank" rel="noreferrer">KT-61182</a></td><td style="text-align:left;">变量上的表达式和 <code>invoke</code> 解析意外允许使用 Unit 转换</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-55199" target="_blank" rel="noreferrer">KT-55199</a></td><td style="text-align:left;">禁止将带有适配的可调用引用提升为 <code>KFunction</code></td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65776" target="_blank" rel="noreferrer">KT-65776</a></td><td style="text-align:left;">[LC] K2 破坏了 <code>false &amp;&amp; ...</code> 和 `false</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-65682" target="_blank" rel="noreferrer">KT-65682</a></td><td style="text-align:left;">[LC] 弃用 <code>header</code>/<code>impl</code> 关键字</td></tr><tr><td style="text-align:left;"><a href="https://youtrack.jetbrains.com/issue/KT-45375" target="_blank" rel="noreferrer">KT-45375</a></td><td style="text-align:left;">默认通过 <code>invokedynamic + LambdaMetafactory</code> 生成所有 Kotlin lambda</td></tr></tbody></table><h2 id="与-kotlin-版本的兼容性" tabindex="-1">与 Kotlin 版本的兼容性 <a class="header-anchor" href="#与-kotlin-版本的兼容性" aria-label="Permalink to &quot;与 Kotlin 版本的兼容性&quot;">​</a></h2><p>以下 Kotlin 版本支持新的 K2 编译器：</p><table tabindex="0"><thead><tr><th>Kotlin 版本</th><th>稳定性级别</th></tr></thead><tbody><tr><td>2.0.0–2.2.10</td><td>稳定</td></tr><tr><td>1.9.20–1.9.25</td><td>Beta</td></tr><tr><td>1.9.0–1.9.10</td><td>JVM 为 Beta</td></tr><tr><td>1.7.0–1.8.22</td><td>Alpha</td></tr></tbody></table><h2 id="与-kotlin-库的兼容性" tabindex="-1">与 Kotlin 库的兼容性 <a class="header-anchor" href="#与-kotlin-库的兼容性" aria-label="Permalink to &quot;与 Kotlin 库的兼容性&quot;">​</a></h2><p>如果你正在使用 Kotlin/JVM，K2 编译器与使用任何 Kotlin 版本<strong>编译</strong>的库兼容。</p><p>如果你正在使用 Kotlin Multiplatform，K2 编译器保证与使用 Kotlin 1.9.20 及更高版本<strong>编译</strong>的库兼容。</p><h2 id="编译器插件支持" tabindex="-1">编译器插件支持 <a class="header-anchor" href="#编译器插件支持" aria-label="Permalink to &quot;编译器插件支持&quot;">​</a></h2><p>目前，Kotlin K2 编译器支持以下 Kotlin 编译器插件：</p><ul><li><a href="/kotlin/all-open-plugin"><code>all-open</code></a></li><li><a href="https://github.com/Kotlin/kotlinx-atomicfu" target="_blank" rel="noreferrer">AtomicFU</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/plugins/jvm-abi-gen" target="_blank" rel="noreferrer"><code>jvm-abi-gen</code></a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/plugins/js-plain-objects" target="_blank" rel="noreferrer"><code>js-plain-objects</code></a></li><li><a href="/kotlin/whatsnew1920#preview-kapt-compiler-plugin-with-k2">kapt</a></li><li><a href="/kotlin/lombok">Lombok</a></li><li><a href="/kotlin/no-arg-plugin"><code>no-arg</code></a></li><li><a href="https://plugins.gradle.org/plugin/org.jetbrains.kotlin.plugin.parcelize" target="_blank" rel="noreferrer">Parcelize</a></li><li><a href="/kotlin/sam-with-receiver-plugin">SAM with receiver</a></li><li><a href="/kotlin/serialization">Serialization</a></li></ul><p>此外，Kotlin K2 编译器支持：</p><ul><li>Jetpack Compose 1.5.0 编译器插件及更高版本。</li><li>从 <a href="https://android-developers.googleblog.com/2023/12/ksp2-preview-kotlin-k2-standalone.html" target="_blank" rel="noreferrer">KSP2</a> 开始支持 Kotlin 符号处理 (KSP)。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果你使用任何其他编译器插件，请<strong>检测</strong>其文档以查看它们是否与 K2 兼容。</p></div><h3 id="升级你的自定义编译器插件" tabindex="-1">升级你的自定义编译器插件 <a class="header-anchor" href="#升级你的自定义编译器插件" aria-label="Permalink to &quot;升级你的自定义编译器插件&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>自定义编译器插件使用 <a href="/kotlin/components-stability#stability-levels-explained"><strong>实验性的</strong></a> 插件 API。因此，API 随时可能更改，我们无法保证向后兼容性。</p></div><p>升级过程根据你拥有的自定义插件类型有两种路径。</p><h4 id="仅后端编译器插件" tabindex="-1">仅后端编译器插件 <a class="header-anchor" href="#仅后端编译器插件" aria-label="Permalink to &quot;仅后端编译器插件&quot;">​</a></h4><p>如果你的插件只实现了 <code>IrGenerationExtension</code> <strong>扩展点</strong>，则过程与任何其他新编译器版本相同。<strong>检测</strong>你使用的 API 是否有任何更改，并根据需要进行更改。</p><h4 id="后端和前端编译器插件" tabindex="-1">后端和前端编译器插件 <a class="header-anchor" href="#后端和前端编译器插件" aria-label="Permalink to &quot;后端和前端编译器插件&quot;">​</a></h4><p>如果你的插件使用了前端相关的<strong>扩展点</strong>，你需要使用新的 K2 编译器 API 重写插件。有关新 API 的简介，请参见 <a href="https://github.com/JetBrains/kotlin/blob/master/docs/fir/fir-plugins.md" target="_blank" rel="noreferrer">FIR Plugin API</a>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果你对升级自定义编译器插件有疑问，请加入我们的 <a href="https://kotlinlang.slack.com/archives/C7L3JB43G" target="_blank" rel="noreferrer">#compiler</a> Slack <strong>频道</strong>，我们将尽力帮助你。</p></div><h2 id="分享你对新-k2-编译器的反馈" tabindex="-1">分享你对新 K2 编译器的反馈 <a class="header-anchor" href="#分享你对新-k2-编译器的反馈" aria-label="Permalink to &quot;分享你对新 K2 编译器的反馈&quot;">​</a></h2><p>我们感谢你的任何反馈！</p><ul><li>在我们的<a href="https://youtrack.jetbrains.com/newIssue?project=KT&amp;summary=K2+release+migration+issue&amp;description=Describe+the+problem+you+encountered+here.&amp;c=tag+k2-release-migration" target="_blank" rel="noreferrer">问题跟踪器</a>中报告你在迁移到新 K2 编译器时遇到的任何问题。</li><li><strong>启用发送使用情况统计信息选项</strong>，以允许 JetBrains 收集关于 K2 使用情况的匿名数据。</li></ul>',24)]))}const b=e(p,[["render",h]]);export{u as __pageData,b as default};
