import{_ as g}from"./chunks/icon-1-done.ZX9lW-aj.js";import{_ as c}from"./chunks/icon-2.DCnUydpf.js";import{_ as u}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as E}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as y}from"./chunks/messages-in-json-format.6v4MkOOj.js";import{_ as m,C as l,c as F,o as b,j as s,G as a,ag as p,a as i,w as n}from"./chunks/framework.Bksy39di.js";const j=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/jvm-spring-boot-add-data-class.md","filePath":"zh-Hant/kotlin/jvm-spring-boot-add-data-class.md","lastUpdated":1754307826000}'),C={name:"zh-Hant/kotlin/jvm-spring-boot-add-data-class.md"};function f(q,t,B,v,A,_){const o=l("web-summary"),k=l("tldr"),e=l("def"),h=l("list"),r=l("code-block"),d=l("deflist");return b(),F("div",null,[t[9]||(t[9]=s("h1",{id:"將數據類新增至-spring-boot-專案",tabindex:"-1"},[i("將數據類新增至 Spring Boot 專案 "),s("a",{class:"header-anchor",href:"#將數據類新增至-spring-boot-專案","aria-label":'Permalink to "將數據類新增至 Spring Boot 專案"'},"​")],-1)),a(o,null,{default:n(()=>t[0]||(t[0]=[i("將 Kotlin 數據類新增至 Spring Boot 專案。")])),_:1}),a(k,null,{default:n(()=>t[1]||(t[1]=[s("p",null,[i("這是 "),s("strong",null,"Spring Boot 與 Kotlin 入門"),i(" 教學課程的第二部分。在繼續之前，請確保您已完成先前的步驟：")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:g,width:"20",alt:"First step"}),i(),s("a",{href:"/zh-Hant/kotlin/jvm-create-project-with-spring-boot"},"使用 Kotlin 建立 Spring Boot 專案"),s("br"),s("img",{src:c,width:"20",alt:"Second step"}),i(),s("strong",null,"將數據類新增至 Spring Boot 專案"),s("br"),s("img",{src:u,width:"20",alt:"Third step"}),i(" 為 Spring Boot 專案新增資料庫支援"),s("br"),s("img",{src:E,width:"20",alt:"Fourth step"}),i(" 使用 Spring Data CrudRepository 進行資料庫存取")],-1)])),_:1}),t[10]||(t[10]=p("",4)),a(d,{collapsible:"true"},{default:n(()=>[a(e,{title:"數據類 – data class Message"},{default:n(()=>t[2]||(t[2]=[s("p",null,[i("Kotlin 中 "),s("a",{href:"/zh-Hant/kotlin/data-classes"},"數據類"),i(" 的主要目的是儲存資料。這類別會以 "),s("code",null,"data"),i(" 關鍵字標記，並且一些標準功能和一些公用程式函數通常可以從類別結構中機械地衍生出來。")],-1),s("p",null,[i("在這個範例中，您將 "),s("code",null,"Message"),i(" 宣告為數據類，因為其主要目的是儲存資料。")],-1)])),_:1}),a(e,{title:"val 和 var 屬性"},{default:n(()=>[t[4]||(t[4]=s("p",null,[i("Kotlin 類別中的 "),s("a",{href:"/zh-Hant/kotlin/properties"},"屬性"),i(" 可以宣告為：")],-1)),a(h,null,{default:n(()=>t[3]||(t[3]=[s("li",null,[s("i",null,"可變的"),i("，使用 "),s("code",null,"var"),i(" 關鍵字")],-1),s("li",null,[s("i",null,"唯讀的"),i("，使用 "),s("code",null,"val"),i(" 關鍵字")],-1)])),_:1}),t[5]||(t[5]=s("p",null,[s("code",null,"Message"),i(" 類別使用 "),s("code",null,"val"),i(" 關鍵字宣告了兩個屬性："),s("code",null,"id"),i(" 和 "),s("code",null,"text"),i("。編譯器將自動為這兩個屬性產生 getter。在建立 "),s("code",null,"Message"),i(" 類別的實例後，將無法重新指派這些屬性的值。")],-1))]),_:1}),a(e,{title:"可空類型 – String?"},{default:n(()=>[t[7]||(t[7]=s("p",null,[i("Kotlin 提供 "),s("a",{href:"/zh-Hant/kotlin/null-safety#nullable-types-and-non-nullable-types"},"內建的可空類型支援"),i("。在 Kotlin 中，型別系統區分可以容納 "),s("code",null,"null"),i(" 的引用（"),s("i",null,"可空引用"),i("）和不能容納 "),s("code",null,"null"),i(" 的引用（"),s("i",null,"非空引用"),i("）。"),s("br"),i(" 例如，型別為 "),s("code",null,"String"),i(" 的常規變數不能容納 "),s("code",null,"null"),i("。為了允許 null，您可以將變數宣告為可空字串，寫作 "),s("code",null,"String?"),i("。")],-1)),t[8]||(t[8]=s("p",null,[s("code",null,"id"),i(" 屬性這次被宣告為可空類型。因此，可以透過傳遞 "),s("code",null,"null"),i(" 作為 "),s("code",null,"id"),i(" 的值來建立 "),s("code",null,"Message"),i(" 類別的實例：")],-1)),a(r,{lang:"kotlin"},{default:n(()=>t[6]||(t[6]=[i(' Message(null, "Hello!") ')])),_:1})]),_:1})]),_:1}),t[11]||(t[11]=p("",13))])}const N=m(C,[["render",f]]);export{j as __pageData,N as default};
