import{_ as o}from"./chunks/icon-1-done.B5D6C9SU.js";import{_ as k}from"./chunks/icon-2.D_3lm1kb.js";import{_ as r}from"./chunks/icon-3-todo.aEuKIG4W.js";import{_ as d}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as E,C as l,c,o as g,j as i,G as n,ag as m,a,w as e}from"./chunks/framework.Bksy39di.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/compose-multiplatform-explore-composables.md","filePath":"zh-Hant/kmp/compose-multiplatform-explore-composables.md","lastUpdated":1755516278000}'),y={name:"zh-Hant/kmp/compose-multiplatform-explore-composables.md"};function u(F,s,C,b,f,A){const t=l("secondary-label"),p=l("Links"),h=l("tldr");return g(),c("div",null,[s[18]||(s[18]=i("h1",{id:"探索可組合程式碼",tabindex:"-1"},[a("探索可組合程式碼 "),i("a",{class:"header-anchor",href:"#探索可組合程式碼","aria-label":'Permalink to "探索可組合程式碼"'},"​")],-1)),n(t,{ref:"IntelliJ IDEA"},null,512),n(t,{ref:"Android Studio"},null,512),n(h,null,{default:e(()=>[s[15]||(s[15]=i("p",null,"本教程使用 IntelliJ IDEA，但您也可以在 Android Studio 中遵循此教程 – 這兩個 IDE 共享相同的核心功能和 Kotlin Multiplatform 支援。",-1)),s[16]||(s[16]=i("br",null,null,-1)),s[17]||(s[17]=i("p",null,[a("這是 "),i("strong",null,"使用共享邏輯和 UI 建立 Compose Multiplatform 應用程式"),a(" 教程的第二部分。在繼續之前，請確保您已完成先前的步驟。")],-1)),i("p",null,[s[1]||(s[1]=i("img",{src:o,width:"20",alt:"First step"},null,-1)),s[2]||(s[2]=a()),n(p,{href:"/kmp/compose-multiplatform-create-first-app",summary:"This tutorial uses IntelliJ IDEA, but you can also follow it in Android Studio – both IDEs share the same core functionality and Kotlin Multiplatform support. This is the first part of the Create a Compose Multiplatform app with shared logic and UI tutorial. Create your Compose Multiplatform app Explore composable code Modify the project Create your own application"},{default:e(()=>s[0]||(s[0]=[a("建立您的 Compose Multiplatform 應用程式")])),_:1}),s[3]||(s[3]=i("br",null,null,-1)),s[4]||(s[4]=i("img",{src:k,width:"20",alt:"Second step"},null,-1)),s[5]||(s[5]=a()),s[6]||(s[6]=i("strong",null,"探索可組合程式碼",-1)),s[7]||(s[7]=i("br",null,null,-1)),s[8]||(s[8]=i("img",{src:r,width:"20",alt:"Third step"},null,-1)),s[9]||(s[9]=a(" 修改專案")),s[10]||(s[10]=i("br",null,null,-1)),s[11]||(s[11]=i("br",null,null,-1)),s[12]||(s[12]=i("img",{src:d,width:"20",alt:"Fourth step"},null,-1)),s[13]||(s[13]=a(" 建立您自己的應用程式")),s[14]||(s[14]=i("br",null,null,-1))])]),_:1}),s[19]||(s[19]=m(`<p>讓我們仔細檢查由 Kotlin Multiplatform 精靈建立的範例 composable (可組合項)。首先，有一個實作通用使用者介面並可在所有平台上使用的可組合函式 <code>App()</code>。其次，有在每個平台上啟動此 UI 的平台專屬程式碼。</p><h2 id="實作可組合函式" tabindex="-1">實作可組合函式 <a class="header-anchor" href="#實作可組合函式" aria-label="Permalink to &quot;實作可組合函式&quot;">​</a></h2><p>在 <code>composeApp/src/commonMain/kotlin/App.kt</code> 檔案中，查看 <code>App()</code> 函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">safeContentPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">showContent }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click me!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      AnimatedVisibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(showContent) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.drawable.compose_multiplatform), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Compose: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$greeting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>App()</code> 函式是一個常規的 Kotlin 函式，並使用 <code>@Composable</code> 進行註解。這類函式被稱為 <em>可組合函式</em> 或簡稱為 <em>composables</em> (可組合項)。它們是基於 Compose Multiplatform 的 UI 的建構區塊。</p><p>可組合函式具有以下一般結構：</p><ul><li><code>MaterialTheme</code> 設定應用程式的外觀。預設設定可以自訂。例如，您可以選擇顏色、形狀和排版。</li><li><code>Column</code> composable 控制應用程式的佈局。在這裡，它顯示一個 <code>Button</code> 在 <code>AnimatedVisibility</code> composable 的上方。</li><li><code>Button</code> 包含 <code>Text</code> composable，後者渲染一些文字。</li><li><code>AnimatedVisibility</code> 使用動畫顯示和隱藏 <code>Image</code>。</li><li><code>painterResource</code> 從 XML 資源中載入向量圖示。</li></ul><p><code>Column</code> 的 <code>horizontalAlignment</code> 參數將其內容置中。但為了使其生效，該 column 應佔據其容器的全部寬度。這可透過使用 <code>modifier</code> 參數來實現。</p><p><code>Modifier</code> 是 Compose Multiplatform 的關鍵組件。這是您用來調整 UI 中 composable 的外觀或行為的主要機制。<code>Modifier</code> 是使用 <code>Modifier</code> 類型的方法建立的。當您將這些方法串聯起來時，每次呼叫都可以改變從上一次呼叫返回的 <code>Modifier</code>，這使得順序很重要。有關更多詳細資訊，請參閱 <a href="https://developer.android.com/jetpack/compose/modifiers" target="_blank" rel="noreferrer">JetPack Compose 文件</a>。</p><h3 id="管理狀態" tabindex="-1">管理狀態 <a class="header-anchor" href="#管理狀態" aria-label="Permalink to &quot;管理狀態&quot;">​</a></h3><p>範例 composable 的最後一個方面是如何管理狀態。<code>App</code> composable 中的 <code>showContent</code> 屬性是使用 <code>mutableStateOf()</code> 函式建立的，這意味著它是一個可以被觀察的狀態物件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span></code></pre></div><p>狀態物件被包裝在對 <code>remember()</code> 函式的呼叫中，這意味著它會被建立一次，然後由框架保留。透過執行此操作，您會建立一個其值為包含布林值的狀態物件的屬性。框架會快取此狀態物件，允許 composable 觀察它。</p><p>當狀態值改變時，任何觀察它的 composable 都會被重新呼叫。這允許它們產生的任何小工具被重新繪製。這被稱為 <em>重組</em>。</p><p>在您的應用程式中，唯一改變狀態的地方是按鈕的點擊事件。<code>onClick</code> 事件處理器會翻轉 <code>showContent</code> 屬性的值。因此，圖像會隨著 <code>Greeting().greet()</code> 呼叫一起顯示或隱藏，因為父級 <code>AnimatedVisibility</code> composable 觀察 <code>showContent</code>。</p><h2 id="在不同平台上啟動-ui" tabindex="-1">在不同平台上啟動 UI <a class="header-anchor" href="#在不同平台上啟動-ui" aria-label="Permalink to &quot;在不同平台上啟動 UI&quot;">​</a></h2><p><code>App()</code> 函式的執行方式因平台而異。在 Android 上，它由 activity 管理；在 iOS 上，由 view controller 管理；在桌面端，由 window 管理；在網頁上，由 container 管理。讓我們逐一檢視它們。</p><h3 id="在-android-上" tabindex="-1">在 Android 上 <a class="header-anchor" href="#在-android-上" aria-label="Permalink to &quot;在 Android 上&quot;">​</a></h3><p>對於 Android，開啟 <code>composeApp/src/androidMain/kotlin</code> 中的 <code>MainActivity.kt</code> 檔案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        enableEdgeToEdge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>這是一個名為 <code>MainActivity</code> 的 <a href="https://developer.android.com/guide/components/activities/intro-activities" target="_blank" rel="noreferrer">Android activity</a>，它會叫用 <code>App</code> composable。</p><h3 id="在-ios-上" tabindex="-1">在 iOS 上 <a class="header-anchor" href="#在-ios-上" aria-label="Permalink to &quot;在 iOS 上&quot;">​</a></h3><p>對於 iOS，開啟 <code>composeApp/src/iosMain/kotlin</code> 中的 <code>MainViewController.kt</code> 檔案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span></code></pre></div><p>這是一個 <a href="https://developer.apple.com/documentation/uikit/view_controllers" target="_blank" rel="noreferrer">view controller</a>，其作用與 Android 上的 activity 相同。請注意，iOS 和 Android 類型都只是簡單地叫用 <code>App</code> composable。</p><h3 id="在桌面端" tabindex="-1">在桌面端 <a class="header-anchor" href="#在桌面端" aria-label="Permalink to &quot;在桌面端&quot;">​</a></h3><p>對於桌面端，請查看 <code>composeApp/src/desktopMain/kotlin</code> 中的 <code>main()</code> 函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onCloseRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exitApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ComposeDemo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>在這裡，<code>application()</code> 函式會啟動一個新的桌面應用程式。</li><li>此函式接受一個 lambda，您可以在其中初始化 UI。通常，您會建立一個 <code>Window</code> 並指定屬性和指令，以決定程式在視窗關閉時應如何反應。在這種情況下，整個應用程式會關閉。</li><li>在此視窗內，您可以放置您的內容。與 Android 和 iOS 一樣，唯一的內容是 <code>App()</code> 函式。</li></ul><p>目前，<code>App</code> 函式未宣告任何參數。在較大型的應用程式中，您通常會將參數傳遞給平台專屬的依賴項。這些依賴項可以手動建立，或使用依賴注入庫。</p><h3 id="在網頁上" tabindex="-1">在網頁上 <a class="header-anchor" href="#在網頁上" aria-label="Permalink to &quot;在網頁上&quot;">​</a></h3><p>在 <code>composeApp/src/wasmJsMain/kotlin/main.kt</code> 檔案中，查看 <code>main()</code> 函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalComposeUiApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ComposeViewport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>@OptIn(ExperimentalComposeUiApi::class)</code> 註解告訴編譯器您正在使用一個標記為實驗性並可能在未來版本中變更的 API。</li><li><code>ComposeViewport()</code> 函式為應用程式設定 Compose 環境。</li><li>網頁應用程式會插入到作為 <code>ComposeViewport</code> 函式參數指定的容器中。在此範例中，整個文件的主體作為容器。</li><li><code>App()</code> 函式負責使用 Jetpack Compose 建立應用程式的 UI 組件。</li></ul><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在教程的下一部分，您將向專案新增依賴項並修改使用者介面。</p><p><strong><a href="./compose-multiplatform-modify-project">繼續前往下一部分</a></strong></p><h2 id="取得協助" tabindex="-1">取得協助 <a class="header-anchor" href="#取得協助" aria-label="Permalink to &quot;取得協助&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>。取得 <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">邀請</a> 並加入 <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 頻道。</li><li><strong>Kotlin 問題追蹤器</strong>。<a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">報告新問題</a>。</li></ul>`,39))])}const I=E(y,[["render",u]]);export{D as __pageData,I as default};
