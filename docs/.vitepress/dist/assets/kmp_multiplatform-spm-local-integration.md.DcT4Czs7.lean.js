import{_ as r}from"./chunks/direct-integration-scheme.Cw1ubqmC.js";import{_ as d,a as k,b as h,c as g}from"./chunks/xcode-spm-usage.Dn1odtN3.js";import{_ as c,C as p,c as m,o as u,j as i,G as l,ag as t,a,w as n}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"在本地 Swift 包中使用 Kotlin","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-spm-local-integration.md","filePath":"kmp/multiplatform-spm-local-integration.md","lastUpdated":1755516278000}'),E={name:"kmp/multiplatform-spm-local-integration.md"};function F(y,s,f,C,b,S){const o=p("tldr"),e=p("shortcut");return u(),m("div",null,[s[17]||(s[17]=i("h1",{id:"在本地-swift-包中使用-kotlin",tabindex:"-1"},[a("在本地 Swift 包中使用 Kotlin "),i("a",{class:"header-anchor",href:"#在本地-swift-包中使用-kotlin","aria-label":'Permalink to "在本地 Swift 包中使用 Kotlin"'},"​")],-1)),l(o,null,{default:n(()=>s[0]||(s[0]=[a(" 这是一种本地集成方法。如果符合以下情况，它可能对您有用："),i("br",null,null,-1),i("ul",null,[i("li",null,"您的 iOS 应用包含本地 SPM 模块。"),i("li",null,"您已在本地机器上设置了一个面向 iOS 的 Kotlin Multiplatform 项目。"),i("li",null,[a("您现有的 iOS 项目采用静态链接类型。"),i("br")])],-1),i("p",null,[i("a",{href:"./multiplatform-ios-integration-overview"},"选择最适合您的集成方法")],-1)])),_:1}),s[18]||(s[18]=t("",9)),s[19]||(s[19]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"从-spm-binarytarget-集成迁移",tabindex:"-1"},[a("从 SPM binaryTarget 集成迁移 "),i("a",{class:"header-anchor",href:"#从-spm-binarytarget-集成迁移","aria-label":'Permalink to "从 SPM binaryTarget 集成迁移 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[20]||(s[20]=i("p",null,[a("要从带有 "),i("code",null,"binaryTarget"),a(" 的 SPM 集成迁移：")],-1)),i("ol",null,[i("li",null,[s[2]||(s[2]=a("在 Xcode 中，使用 ")),s[3]||(s[3]=i("strong",null,"Product",-1)),s[4]||(s[4]=a(" | ")),s[5]||(s[5]=i("strong",null,"Clean Build Folder",-1)),s[6]||(s[6]=a(" 或快捷键 ")),l(e,null,{default:n(()=>s[1]||(s[1]=[a("Cmd + Shift + K")])),_:1}),s[7]||(s[7]=a(" 清理构建目录。"))]),s[8]||(s[8]=i("li",null,[a("在每个 "),i("code",null,"Package.swift"),a(" 文件中，移除对包含 Kotlin framework 的包的依赖项，以及对产品的目标依赖项。")],-1))]),s[21]||(s[21]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"从-cocoapods-插件迁移",tabindex:"-1"},[a("从 CocoaPods 插件迁移 "),i("a",{class:"header-anchor",href:"#从-cocoapods-插件迁移","aria-label":'Permalink to "从 CocoaPods 插件迁移 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[22]||(s[22]=i("div",{class:"danger custom-block"},[i("p",{class:"custom-block-title"},"WARNING"),i("p",null,[a("如果您的 "),i("code",null,"cocoapods {}"),a(" 代码块中存在对其他 Pod 的依赖项，则必须采用 CocoaPods 集成方法。目前，在多模态 SPM 项目中，不可能同时依赖 Pod 和 Kotlin framework。")])],-1)),s[23]||(s[23]=i("p",null,"要从 CocoaPods 插件迁移：",-1)),i("ol",null,[i("li",null,[i("p",null,[s[10]||(s[10]=a("在 Xcode 中，使用 ")),s[11]||(s[11]=i("strong",null,"Product",-1)),s[12]||(s[12]=a(" | ")),s[13]||(s[13]=i("strong",null,"Clean Build Folder",-1)),s[14]||(s[14]=a(" 或快捷键 ")),l(e,null,{default:n(()=>s[9]||(s[9]=[a("Cmd + Shift + K")])),_:1}),s[15]||(s[15]=a(" 清理构建目录。"))])]),s[16]||(s[16]=t("",3))]),s[24]||(s[24]=t("",8))])}const A=c(E,[["render",F]]);export{B as __pageData,A as default};
