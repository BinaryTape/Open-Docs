import{_ as o,c as t,o as r,ag as n}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"Kotlin 1.7 相容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/compatibility-guide-17.md","filePath":"zh-Hant/kotlin/compatibility-guide-17.md","lastUpdated":1754307826000}'),a={name:"zh-Hant/kotlin/compatibility-guide-17.md"};function l(s,e,i,c,p,u){return r(),t("div",null,e[0]||(e[0]=[n('<h1 id="kotlin-1-7-相容性指南" tabindex="-1">Kotlin 1.7 相容性指南 <a class="header-anchor" href="#kotlin-1-7-相容性指南" aria-label="Permalink to &quot;Kotlin 1.7 相容性指南&quot;">​</a></h1><p><em>讓語言保持現代 (Keeping the Language Modern)</em> 和 <em>舒適的更新 (Comfortable Updates)</em> 是 Kotlin 語言設計的根本原則之一。前者指出應移除阻礙語言演進的結構，後者則表示此類移除應事先充分溝通，以使程式碼遷移盡可能順暢。</p><p>儘管大多數語言變更已透過其他管道（例如更新變更日誌或編譯器警告）宣佈，但本文總結了所有這些變更，為從 Kotlin 1.6 遷移到 Kotlin 1.7 提供了完整的參考。</p><h2 id="基本術語" tabindex="-1">基本術語 <a class="header-anchor" href="#基本術語" aria-label="Permalink to &quot;基本術語&quot;">​</a></h2><p>在本文中，我們引入了幾種相容性：</p><ul><li><em>原始碼 (source)</em>：原始碼不相容變更會阻止過去可以正常編譯（沒有錯誤或警告）的程式碼再次編譯。</li><li><em>二進位碼 (binary)</em>：如果交換兩個二進位碼構件不會導致載入或連結錯誤，則稱它們為二進位碼相容。</li><li><em>行為 (behavioral)</em>：如果同一程式在應用變更前後表現出不同的行為，則稱該變更為行為不相容。</li></ul><p>請記住，這些定義僅適用於純粹的 Kotlin。從其他語言角度（例如，從 Java）來看的 Kotlin 程式碼相容性超出本文的範圍。</p><h2 id="語言" tabindex="-1">語言 <a class="header-anchor" href="#語言" aria-label="Permalink to &quot;語言&quot;">​</a></h2><h3 id="使安全呼叫結果始終為可空" tabindex="-1">使安全呼叫結果始終為可空 <a class="header-anchor" href="#使安全呼叫結果始終為可空" aria-label="Permalink to &quot;使安全呼叫結果始終為可空&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46860" target="_blank" rel="noreferrer">KT-46860</a></p><p><strong>元件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: Kotlin 1.7 將始終把安全呼叫的結果型別視為可空，即使安全呼叫的接收者是不可空的。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.3: 對於不可空接收者的不必要安全呼叫報告警告</li><li>1.6.20: 額外警告不必要安全呼叫的結果型別將在下一版本中變更</li><li>1.7.0: 將安全呼叫結果的型別變更為可空， <code>-XXLanguage:-SafeCallsAreAlwaysNullable</code> 可用於暫時恢復到 1.7 之前的行為</li></ul></blockquote><h3 id="禁止將-super-呼叫委派給抽象超類別成員" tabindex="-1">禁止將 super 呼叫委派給抽象超類別成員 <a class="header-anchor" href="#禁止將-super-呼叫委派給抽象超類別成員" aria-label="Permalink to &quot;禁止將 super 呼叫委派給抽象超類別成員&quot;">​</a></h3><blockquote><p><strong>問題 (Issues)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-49017" target="_blank" rel="noreferrer">KT-45508</a>, <a href="https://youtrack.jetbrains.com/issue/KT-49017" target="_blank" rel="noreferrer">KT-49017</a>, <a href="https://youtrack.jetbrains.com/issue/KT-38078" target="_blank" rel="noreferrer">KT-38078</a></p><p><strong>元件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: Kotlin 將在顯式或隱式 <code>super</code> 呼叫委派給超類別的 <em>抽象</em> 成員時報告編譯錯誤，即使超介面中存在預設實作。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.5.20: 在使用未覆寫所有抽象成員的非抽象類別時引入警告</li><li>1.7.0: 如果 <code>super</code> 呼叫實際上存取了超類別中的抽象成員，則報告錯誤</li><li>1.7.0: 如果啟用 <code>-Xjvm-default=all</code> 或 <code>-Xjvm-default=all-compatibility</code> 相容模式，則報告錯誤； 在漸進模式下報告錯誤</li><li><blockquote><p>=1.8.0: 在所有情況下報告錯誤</p></blockquote></li></ul></blockquote><h3 id="禁止透過在非公開主要建構子中宣告的公開屬性暴露非公開型別" tabindex="-1">禁止透過在非公開主要建構子中宣告的公開屬性暴露非公開型別 <a class="header-anchor" href="#禁止透過在非公開主要建構子中宣告的公開屬性暴露非公開型別" aria-label="Permalink to &quot;禁止透過在非公開主要建構子中宣告的公開屬性暴露非公開型別&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-28078" target="_blank" rel="noreferrer">KT-28078</a></p><p><strong>元件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: Kotlin 將阻止在私有主要建構子中宣告具有非公開型別的公開屬性。 從另一個套件存取此類屬性可能導致 <code>IllegalAccessError</code>。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.3.20: 對於在非公開建構子中宣告的具有非公開型別的公開屬性報告警告</li><li>1.6.20: 在漸進模式下將此警告提升為錯誤</li><li>1.7.0: 將此警告提升為錯誤</li></ul></blockquote><h3 id="禁止存取以列舉名稱限定的未初始化列舉項目" tabindex="-1">禁止存取以列舉名稱限定的未初始化列舉項目 <a class="header-anchor" href="#禁止存取以列舉名稱限定的未初始化列舉項目" aria-label="Permalink to &quot;禁止存取以列舉名稱限定的未初始化列舉項目&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-41124" target="_blank" rel="noreferrer">KT-41124</a></p><p><strong>元件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: Kotlin 1.7 將禁止在列舉靜態初始化區塊中存取未初始化列舉項目， 且這些項目以列舉名稱限定。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.7.0: 當未初始化列舉項目從列舉靜態初始化區塊中存取時報告錯誤</li></ul></blockquote><h3 id="禁止在-when-條件分支和迴圈條件中計算複雜布林運算式的常數值" tabindex="-1">禁止在 when 條件分支和迴圈條件中計算複雜布林運算式的常數值 <a class="header-anchor" href="#禁止在-when-條件分支和迴圈條件中計算複雜布林運算式的常數值" aria-label="Permalink to &quot;禁止在 when 條件分支和迴圈條件中計算複雜布林運算式的常數值&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.com/issue/KT-39883" target="_blank" rel="noreferrer">KT-39883</a></p><p><strong>元件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: Kotlin 將不再根據除了字面值 <code>true</code> 和 <code>false</code> 之外的複雜布林運算式做出窮盡性 (exhaustiveness) 和控制流程假設。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.5.30: 當 <code>when</code> 的窮盡性或控制流程可達性是根據 <code>when</code> 分支或迴圈條件中的複雜常數布林運算式決定時，報告警告。</li><li>1.7.0: 將此警告提升為錯誤。</li></ul></blockquote><h3 id="預設情況下-使帶有列舉、密封和布林主體的-when-語句窮盡" tabindex="-1">預設情況下，使帶有列舉、密封和布林主體的 when 語句窮盡 <a class="header-anchor" href="#預設情況下-使帶有列舉、密封和布林主體的-when-語句窮盡" aria-label="Permalink to &quot;預設情況下，使帶有列舉、密封和布林主體的 when 語句窮盡&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47709" target="_blank" rel="noreferrer">KT-47709</a></p><p><strong>元件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: Kotlin 1.7 將報告關於帶有列舉、密封或布林主體的 <code>when</code> 語句非窮盡的錯誤。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.6.0: 當帶有列舉、密封或布林主體的 <code>when</code> 語句非窮盡時引入警告（漸進模式下為錯誤）。</li><li>1.7.0: 將此警告提升為錯誤。</li></ul></blockquote><h3 id="在帶主體的-when-中棄用混淆語法" tabindex="-1">在帶主體的 when 中棄用混淆語法 <a class="header-anchor" href="#在帶主體的-when-中棄用混淆語法" aria-label="Permalink to &quot;在帶主體的 when 中棄用混淆語法&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48385" target="_blank" rel="noreferrer">KT-48385</a></p><p><strong>元件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: Kotlin 1.6 棄用了 <code>when</code> 條件運算式中的幾個混淆語法結構。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.6.20: 對受影響的運算式引入棄用警告</li><li>1.8.0: 將此警告提升為錯誤</li><li><blockquote><p>= 1.8: 將一些棄用結構重新用於新的語言功能</p></blockquote></li></ul></blockquote><h3 id="型別可空性增強改進" tabindex="-1">型別可空性增強改進 <a class="header-anchor" href="#型別可空性增強改進" aria-label="Permalink to &quot;型別可空性增強改進&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48623" target="_blank" rel="noreferrer">KT-48623</a></p><p><strong>元件 (Component)</strong>: Kotlin/JVM</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: Kotlin 1.7 將變更其載入和解釋 Java 程式碼中型別可空性註解的方式。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.4.30: 對於更精確的型別可空性可能導致錯誤的情況引入警告</li><li>1.7.0: 推斷更精確的 Java 型別可空性， <code>-XXLanguage:-TypeEnhancementImprovementsInStrictMode</code> 可用於暫時恢復到 1.7 之前的行為</li></ul></blockquote><h3 id="防止不同數字型別之間的隱式強制轉型" tabindex="-1">防止不同數字型別之間的隱式強制轉型 <a class="header-anchor" href="#防止不同數字型別之間的隱式強制轉型" aria-label="Permalink to &quot;防止不同數字型別之間的隱式強制轉型&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48645" target="_blank" rel="noreferrer">KT-48645</a></p><p><strong>元件 (Component)</strong>: Kotlin/JVM</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 行為 (behavioral)</p><p><strong>簡要概述 (Short summary)</strong>: Kotlin 將避免自動將數字值轉換為基本數字型別，在語義上僅需要向下轉型為該型別的情況。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt; 1.5.30: 在所有受影響的情況下都是舊行為</li><li>1.5.30: 修正生成的屬性委託存取器中的向下轉型行為， <code>-Xuse-old-backend</code> 可用於暫時恢復到 1.5.30 之前的修正行為</li><li><blockquote><p>= 1.7.20: 修正其他受影響情況下的向下轉型行為</p></blockquote></li></ul></blockquote><h3 id="棄用編譯器選項-xjvm-default-的啟用和相容模式" tabindex="-1">棄用編譯器選項 -Xjvm-default 的啟用和相容模式 <a class="header-anchor" href="#棄用編譯器選項-xjvm-default-的啟用和相容模式" aria-label="Permalink to &quot;棄用編譯器選項 -Xjvm-default 的啟用和相容模式&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46329" target="_blank" rel="noreferrer">KT-46329</a></p><p><strong>元件 (Component)</strong>: Kotlin/JVM</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: Kotlin 1.6.20 警告使用 <code>-Xjvm-default</code> 編譯器選項的 <code>enable</code> 和 <code>compatibility</code> 模式。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.6.20: 對於 <code>-Xjvm-default</code> 編譯器選項的 <code>enable</code> 和 <code>compatibility</code> 模式引入警告</li><li><blockquote><p>= 1.8.0: 將此警告提升為錯誤</p></blockquote></li></ul></blockquote><h3 id="禁止呼叫帶有-trailing-lambda-的-suspend-函數" tabindex="-1">禁止呼叫帶有 trailing lambda 的 <code>suspend</code> 函數 <a class="header-anchor" href="#禁止呼叫帶有-trailing-lambda-的-suspend-函數" aria-label="Permalink to &quot;禁止呼叫帶有 trailing lambda 的 `suspend` 函數&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-22562" target="_blank" rel="noreferrer">KT-22562</a></p><p><strong>元件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: Kotlin 1.6 不再允許呼叫名為 <code>suspend</code> 且單一參數為函數型別並作為 trailing lambda 傳遞的使用者函數。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.3.0: 對此類函數呼叫引入警告</li><li>1.6.0: 將此警告提升為錯誤</li><li>1.7.0: 引入語言語法變更，使 <code>{</code> 之前的 <code>suspend</code> 被解析為關鍵字</li></ul></blockquote><h3 id="禁止對基類屬性進行智能轉型-如果基類來自另一個模組" tabindex="-1">禁止對基類屬性進行智能轉型，如果基類來自另一個模組 <a class="header-anchor" href="#禁止對基類屬性進行智能轉型-如果基類來自另一個模組" aria-label="Permalink to &quot;禁止對基類屬性進行智能轉型，如果基類來自另一個模組&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-52629" target="_blank" rel="noreferrer">KT-52629</a></p><p><strong>元件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: Kotlin 1.7 將不再允許對父類別的屬性進行智能轉型， 如果該類別位於另一個模組中。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.6.0: 對於在另一個模組中的父類別中宣告的屬性進行智能轉型時報告警告</li><li>1.7.0: 將此警告提升為錯誤， <code>-XXLanguage:-ProhibitSmartcastsOnPropertyFromAlienBaseClass</code> 可用於暫時恢復到 1.7 之前的行為</li></ul></blockquote><h3 id="型別推斷時不要忽略有意義的約束" tabindex="-1">型別推斷時不要忽略有意義的約束 <a class="header-anchor" href="#型別推斷時不要忽略有意義的約束" aria-label="Permalink to &quot;型別推斷時不要忽略有意義的約束&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-52668" target="_blank" rel="noreferrer">KT-52668</a></p><p><strong>元件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: Kotlin 1.4−1.6 由於不正確的優化，在型別推斷期間忽略了一些型別約束。 這可能導致撰寫不健全的程式碼，在執行時導致 <code>ClassCastException</code>。 Kotlin 1.7 將這些約束納入考量，從而禁止不健全的程式碼。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.5.20: 對於如果考慮所有型別推斷約束將發生型別不匹配的表達式報告警告</li><li>1.7.0: 考慮所有約束，從而將此警告提升為錯誤， <code>-XXLanguage:-ProperTypeInferenceConstraintsProcessing</code> 可用於暫時恢復到 1.7 之前的行為</li></ul></blockquote><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><h3 id="逐步將集合的-min-和-max-函數的回傳型別改為不可空" tabindex="-1">逐步將集合的 min 和 max 函數的回傳型別改為不可空 <a class="header-anchor" href="#逐步將集合的-min-和-max-函數的回傳型別改為不可空" aria-label="Permalink to &quot;逐步將集合的 min 和 max 函數的回傳型別改為不可空&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-38854" target="_blank" rel="noreferrer">KT-38854</a></p><p><strong>元件 (Component)</strong>: kotlin-stdlib</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: 集合 <code>min</code> 和 <code>max</code> 函數的回傳型別將在 Kotlin 1.7 中變更為不可空。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.4.0: 引入 <code>...OrNull</code> 函數作為同義詞並棄用受影響的 API（詳情請參閱問題）</li><li>1.5.0: 將受影響 API 的棄用級別提升為錯誤</li><li>1.6.0: 將棄用函數從公共 API 中隱藏</li><li>1.7.0: 重新引入受影響的 API 但回傳型別為不可空</li></ul></blockquote><h3 id="棄用浮點數陣列函數-contains-indexof-lastindexof" tabindex="-1">棄用浮點數陣列函數：contains, indexOf, lastIndexOf <a class="header-anchor" href="#棄用浮點數陣列函數-contains-indexof-lastindexof" aria-label="Permalink to &quot;棄用浮點數陣列函數：contains, indexOf, lastIndexOf&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-28753" target="_blank" rel="noreferrer">KT-28753</a></p><p><strong>元件 (Component)</strong>: kotlin-stdlib</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: Kotlin 棄用了浮點數陣列函數 <code>contains</code>、<code>indexOf</code>、<code>lastIndexOf</code>，這些函數使用 IEEE-754 順序而非全序比較值。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.4.0: 帶有警告地棄用受影響的函數</li><li>1.6.0: 將棄用級別提升為錯誤</li><li>1.7.0: 將棄用函數從公共 API 中隱藏</li></ul></blockquote><h3 id="將-kotlin-dom-和-kotlin-browser-套件中的宣告遷移到-kotlinx" tabindex="-1">將 <code>kotlin.dom</code> 和 <code>kotlin.browser</code> 套件中的宣告遷移到 <code>kotlinx.*</code> <a class="header-anchor" href="#將-kotlin-dom-和-kotlin-browser-套件中的宣告遷移到-kotlinx" aria-label="Permalink to &quot;將 `kotlin.dom` 和 `kotlin.browser` 套件中的宣告遷移到 `kotlinx.*`&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-39330" target="_blank" rel="noreferrer">KT-39330</a></p><p><strong>元件 (Component)</strong>: kotlin-stdlib (JS)</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: <code>kotlin.dom</code> 和 <code>kotlin.browser</code> 套件中的宣告已移至對應的 <code>kotlinx.*</code> 套件，以準備將其從標準函式庫中提取。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.4.0: 在 <code>kotlinx.dom</code> 和 <code>kotlinx.browser</code> 套件中引入替換 API</li><li>1.4.0: 棄用 <code>kotlin.dom</code> 和 <code>kotlin.browser</code> 套件中的 API 並提出上述新 API 作為替換</li><li>1.6.0: 將棄用級別提升為錯誤</li><li><blockquote><p>= 1.8: 從標準函式庫中移除棄用函數</p></blockquote></li><li><blockquote><p>= 1.8: 將 <code>kotlinx.*</code> 套件中的 API 移至獨立函式庫</p></blockquote></li></ul></blockquote><h3 id="棄用部分僅限-js-的-api" tabindex="-1">棄用部分僅限 JS 的 API <a class="header-anchor" href="#棄用部分僅限-js-的-api" aria-label="Permalink to &quot;棄用部分僅限 JS 的 API&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48587" target="_blank" rel="noreferrer">KT-48587</a></p><p><strong>元件 (Component)</strong>: kotlin-stdlib (JS)</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: 標準函式庫中一些僅限 JS 的函數已被棄用以供移除。它們包括：<code>String.concat(String)</code>、<code>String.match(regex: String)</code>、<code>String.matches(regex: String)</code>，以及接受比較函數的陣列 <code>sort</code> 函數，例如 <code>Array&lt;out T&gt;.sort(comparison: (a: T, b: T) -&gt; Int)</code>。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.6.0: 帶有警告地棄用受影響的函數</li><li>1.8.0: 將棄用級別提升為錯誤</li><li>1.9.0: 從公共 API 中移除棄用函數</li></ul></blockquote><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="移除-kotlingradlesubplugin-類別" tabindex="-1">移除 <code>KotlinGradleSubplugin</code> 類別 <a class="header-anchor" href="#移除-kotlingradlesubplugin-類別" aria-label="Permalink to &quot;移除 `KotlinGradleSubplugin` 類別&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48831" target="_blank" rel="noreferrer">KT-48831</a></p><p><strong>元件 (Component)</strong>: Gradle</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: 移除 <code>KotlinGradleSubplugin</code> 類別。請改用 <code>KotlinCompilerPluginSupportPlugin</code> 類別。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.6.0: 將棄用級別提升為錯誤</li><li>1.7.0: 移除棄用類別</li></ul></blockquote><h3 id="移除-useir-編譯器選項" tabindex="-1">移除 <code>useIR</code> 編譯器選項 <a class="header-anchor" href="#移除-useir-編譯器選項" aria-label="Permalink to &quot;移除 `useIR` 編譯器選項&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48847" target="_blank" rel="noreferrer">KT-48847</a></p><p><strong>元件 (Component)</strong>: Gradle</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: 移除已棄用且隱藏的 <code>useIR</code> 編譯器選項。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.5.0: 將棄用級別提升為警告</li><li>1.6.0: 隱藏此選項</li><li>1.7.0: 移除棄用選項</li></ul></blockquote><h3 id="棄用-kapt-use-worker-api-gradle-屬性" tabindex="-1">棄用 <code>kapt.use.worker.api</code> Gradle 屬性 <a class="header-anchor" href="#棄用-kapt-use-worker-api-gradle-屬性" aria-label="Permalink to &quot;棄用 `kapt.use.worker.api` Gradle 屬性&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48826" target="_blank" rel="noreferrer">KT-48826</a></p><p><strong>元件 (Component)</strong>: Gradle</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: 棄用 <code>kapt.use.worker.api</code> 屬性，該屬性允許透過 Gradle Workers API 執行 kapt（預設值：<code>true</code>）。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.6.20: 將棄用級別提升為警告</li><li><blockquote><p>= 1.8.0: 移除此屬性</p></blockquote></li></ul></blockquote><h3 id="移除-kotlin-experimental-coroutines-gradle-dsl-選項和-kotlin-coroutines-gradle-屬性" tabindex="-1">移除 <code>kotlin.experimental.coroutines</code> Gradle DSL 選項和 <code>kotlin.coroutines</code> Gradle 屬性 <a class="header-anchor" href="#移除-kotlin-experimental-coroutines-gradle-dsl-選項和-kotlin-coroutines-gradle-屬性" aria-label="Permalink to &quot;移除 `kotlin.experimental.coroutines` Gradle DSL 選項和 `kotlin.coroutines` Gradle 屬性&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-50494" target="_blank" rel="noreferrer">KT-50494</a></p><p><strong>元件 (Component)</strong>: Gradle</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: 移除 <code>kotlin.experimental.coroutines</code> Gradle DSL 選項和 <code>kotlin.coroutines</code> 屬性。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.6.20: 將棄用級別提升為警告</li><li>1.7.0: 移除 DSL 選項、其包含的 <code>experimental</code> 區塊和屬性</li></ul></blockquote><h3 id="棄用-useexperimentalannotation-編譯器選項" tabindex="-1">棄用 <code>useExperimentalAnnotation</code> 編譯器選項 <a class="header-anchor" href="#棄用-useexperimentalannotation-編譯器選項" aria-label="Permalink to &quot;棄用 `useExperimentalAnnotation` 編譯器選項&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47763" target="_blank" rel="noreferrer">KT-47763</a></p><p><strong>元件 (Component)</strong>: Gradle</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: 移除用於選擇在模組中使用 API 的隱藏 <code>useExperimentalAnnotation()</code> Gradle 函數。 可以改用 <code>optIn()</code> 函數。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.6.0: 隱藏棄用選項</li><li>1.7.0: 移除棄用選項</li></ul></blockquote><h3 id="棄用-kotlin-compiler-execution-strategy-系統屬性" tabindex="-1">棄用 <code>kotlin.compiler.execution.strategy</code> 系統屬性 <a class="header-anchor" href="#棄用-kotlin-compiler-execution-strategy-系統屬性" aria-label="Permalink to &quot;棄用 `kotlin.compiler.execution.strategy` 系統屬性&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-51830" target="_blank" rel="noreferrer">KT-51830</a></p><p><strong>元件 (Component)</strong>: Gradle</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: 棄用用於選擇編譯器執行策略的 <code>kotlin.compiler.execution.strategy</code> 系統屬性。 請改用 Gradle 屬性 <code>kotlin.compiler.execution.strategy</code> 或編譯任務屬性 <code>compilerExecutionStrategy</code>。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.7.0: 將棄用級別提升為警告</li><li><blockquote><p>1.7.0: 移除此屬性</p></blockquote></li></ul></blockquote><h3 id="移除-kotlinoptions-jdkhome-編譯器選項" tabindex="-1">移除 <code>kotlinOptions.jdkHome</code> 編譯器選項 <a class="header-anchor" href="#移除-kotlinoptions-jdkhome-編譯器選項" aria-label="Permalink to &quot;移除 `kotlinOptions.jdkHome` 編譯器選項&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46541" target="_blank" rel="noreferrer">KT-46541</a></p><p><strong>元件 (Component)</strong>: Gradle</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: 移除 <code>kotlinOptions.jdkHome</code> 編譯器選項，該選項用於將指定位置的自訂 JDK 包含到類別路徑中，而非預設的 <code>JAVA_HOME</code>。 請改用 <a href="/zh-Hant/kotlin/gradle-configure-project#gradle-java-toolchains-support">Java 工具鏈</a>。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.5.30: 將棄用級別提升為警告</li><li><blockquote><p>1.7.0: 移除此選項</p></blockquote></li></ul></blockquote><h3 id="移除-nostdlib-編譯器選項" tabindex="-1">移除 <code>noStdlib</code> 編譯器選項 <a class="header-anchor" href="#移除-nostdlib-編譯器選項" aria-label="Permalink to &quot;移除 `noStdlib` 編譯器選項&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-49011" target="_blank" rel="noreferrer">KT-49011</a></p><p><strong>元件 (Component)</strong>: Gradle</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: 移除 <code>noStdlib</code> 編譯器選項。Gradle 外掛使用 <code>kotlin.stdlib.default.dependency=true</code> 屬性來控制 Kotlin 標準函式庫是否存在。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.5.0: 將棄用級別提升為警告</li><li>1.7.0: 移除此選項</li></ul></blockquote><h3 id="移除-kotlin2js-和-kotlin-dce-plugin-外掛" tabindex="-1">移除 <code>kotlin2js</code> 和 <code>kotlin-dce-plugin</code> 外掛 <a class="header-anchor" href="#移除-kotlin2js-和-kotlin-dce-plugin-外掛" aria-label="Permalink to &quot;移除 `kotlin2js` 和 `kotlin-dce-plugin` 外掛&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48276" target="_blank" rel="noreferrer">KT-48276</a></p><p><strong>元件 (Component)</strong>: Gradle</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: 移除 <code>kotlin2js</code> 和 <code>kotlin-dce-plugin</code> 外掛。請改用新的 <code>org.jetbrains.kotlin.js</code> 外掛。 當 Kotlin/JS Gradle 外掛配置正確時，死程式碼消除 (DCE) 將會運作。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.4.0: 將棄用級別提升為警告</li><li>1.7.0: 移除外掛</li></ul></blockquote><h3 id="編譯任務的變更" tabindex="-1">編譯任務的變更 <a class="header-anchor" href="#編譯任務的變更" aria-label="Permalink to &quot;編譯任務的變更&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-32805" target="_blank" rel="noreferrer">KT-32805</a></p><p><strong>元件 (Component)</strong>: Gradle</p><p><strong>不相容變更型別 (Incompatible change type)</strong>: 原始碼 (source)</p><p><strong>簡要概述 (Short summary)</strong>: Kotlin 編譯任務不再繼承 Gradle <code>AbstractCompile</code> 任務，因此 <code>sourceCompatibility</code> 和 <code>targetCompatibility</code> 輸入在 Kotlin 使用者的腳本中不再可用。 <code>SourceTask.stableSources</code> 輸入不再可用。<code>sourceFilesExtensions</code> 輸入已移除。 已棄用的 <code>Gradle destinationDir: File</code> 輸出已替換為 <code>destinationDirectory: DirectoryProperty</code> 輸出。 <code>KotlinCompile</code> 任務的 <code>classpath</code> 屬性已棄用。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.7.0: 輸入不可用，輸出已替換，<code>classpath</code> 屬性已棄用</li></ul></blockquote>',64)]))}const h=o(a,[["render",l]]);export{d as __pageData,h as default};
