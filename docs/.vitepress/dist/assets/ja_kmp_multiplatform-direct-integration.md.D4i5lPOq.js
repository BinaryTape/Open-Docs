import{_ as r}from"./chunks/direct-integration-scheme.Cw1ubqmC.js";import{_ as d}from"./chunks/xcode-run-script-phase-1.BlwrlSQM.js";import{_ as c,a as h,b as g}from"./chunks/disable-sandboxing-in-xcode-project-settings.Hr8r5yJK.js";import{_ as u,C as l,c as m,o as k,j as t,G as s,ag as e,a as o,w as a}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"直接統合","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-direct-integration.md","filePath":"ja/kmp/multiplatform-direct-integration.md","lastUpdated":1755516278000}'),_={name:"ja/kmp/multiplatform-direct-integration.md"};function b(f,i,S,C,F,P){const n=l("tldr"),p=l("shortcut");return k(),m("div",null,[i[9]||(i[9]=t("h1",{id:"直接統合",tabindex:"-1"},[o("直接統合 "),t("a",{class:"header-anchor",href:"#直接統合","aria-label":'Permalink to "直接統合"'},"​")],-1)),s(n,null,{default:a(()=>i[0]||(i[0]=[o(" これはローカルな統合方法です。以下の場合に利用できます。"),t("br",null,null,-1),t("ul",null,[t("li",null,"ローカルマシンで既にiOSをターゲットとするKotlin Multiplatformプロジェクトをセットアップしている場合。"),t("li",null,[o("Kotlin MultiplatformプロジェクトにCocoaPodsの依存関係がない場合。"),t("br")])],-1),t("p",null,[t("a",{href:"./multiplatform-ios-integration-overview"},"最適な統合方法を選択する")],-1)])),_:1}),i[10]||(i[10]=e('<p>Kotlin MultiplatformプロジェクトとiOSプロジェクト間でコードを共有しながら同時に開発したい場合は、特別なスクリプトを使用して直接統合をセットアップできます。</p><p>このスクリプトは、XcodeでKotlinフレームワークをiOSプロジェクトに接続するプロセスを自動化します。</p><p><img src="'+r+'" alt="Direct integration diagram" width="700"></p><p>このスクリプトは、Xcode環境向けに特別に設計された<code>embedAndSignAppleFrameworkForXcode</code> Gradleタスクを使用します。セットアップ中に、iOSアプリビルドの実行スクリプトフェーズに追加します。その後、iOSアプリのビルドを実行する前に、Kotlinアーティファクトがビルドされ、派生データに含まれます。</p><p>一般的に、このスクリプトは次のことを行います。</p><ul><li>コンパイルされたKotlinフレームワークを、iOSプロジェクト構造内の正しいディレクトリにコピーします。</li><li>埋め込まれたフレームワークのコード署名プロセスを処理します。</li><li>Kotlinフレームワークのコード変更がXcodeのiOSアプリに反映されるようにします。</li></ul><h2 id="セットアップ方法" tabindex="-1">セットアップ方法 <a class="header-anchor" href="#セットアップ方法" aria-label="Permalink to &quot;セットアップ方法&quot;">​</a></h2><p>現在CocoaPodsプラグインを使用してKotlinフレームワークを接続している場合は、まず移行してください。プロジェクトにCocoaPodsの依存関係がない場合は、<a href="#connect-the-framework-to-your-project">このステップをスキップしてください</a>。</p><h3 id="cocoapodsプラグインからの移行" tabindex="-1">CocoaPodsプラグインからの移行 <a class="header-anchor" href="#cocoapodsプラグインからの移行" aria-label="Permalink to &quot;CocoaPodsプラグインからの移行&quot;">​</a></h3><p>CocoaPodsプラグインから移行するには：</p>',10)),t("ol",null,[t("li",null,[t("p",null,[i[2]||(i[2]=o("Xcodeで、")),i[3]||(i[3]=t("strong",null,"Product",-1)),i[4]||(i[4]=o(" | ")),i[5]||(i[5]=t("strong",null,"Clean Build Folder",-1)),i[6]||(i[6]=o(" または ")),s(p,null,{default:a(()=>i[1]||(i[1]=[o("Cmd + Shift + K")])),_:1}),i[7]||(i[7]=o(" ショートカットを使用してビルドディレクトリをクリーンアップします。"))])]),i[8]||(i[8]=e('<li><p>Podfileのあるディレクトリで、以下のコマンドを実行します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pod deintegrate</span></span></code></pre></div></li><li><p><code>build.gradle(.kts)</code>ファイルから<code>cocoapods {}</code>ブロックを削除します。</p></li><li><p><code>.podspec</code>ファイルとPodfileを削除します。</p></li>',3))]),i[11]||(i[11]=e('<h3 id="フレームワークをプロジェクトに接続する" tabindex="-1">フレームワークをプロジェクトに接続する <a class="header-anchor" href="#フレームワークをプロジェクトに接続する" aria-label="Permalink to &quot;フレームワークをプロジェクトに接続する&quot;">​</a></h3><p>マルチプラットフォームプロジェクトから生成されたKotlinフレームワークをXcodeプロジェクトに接続するには：</p><ol><li><p><code>embedAndSignAppleFrameworkForXcode</code>タスクは、<code>binaries.framework</code>構成オプションが宣言されている場合にのみ登録されます。Kotlin Multiplatformプロジェクトで、<code>build.gradle.kts</code>ファイル内のiOSターゲット宣言を確認してください。</p></li><li><p>Xcodeで、プロジェクト名をダブルクリックしてiOSプロジェクト設定を開きます。</p></li><li><p>左側の<strong>Targets</strong>セクションでターゲットを選択し、<strong>Build Phases</strong>タブに移動します。</p></li><li><p><strong>+</strong> をクリックし、<strong>New Run Script Phase</strong>を選択します。</p><p><img src="'+d+`" alt="Add run script phase" width="700"></p></li><li><p>以下のスクリプトを調整し、その結果を実行スクリプトフィールドに貼り付けます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;Path to the root of the multiplatform project&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Shared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:embedAndSignAppleFrameworkForXcode</span></span></code></pre></div><ul><li><code>cd</code>コマンドでは、Kotlin Multiplatformプロジェクトのルートへのパス（例: <code>$SRCROOT/..</code>）を指定します。</li><li><code>./gradlew</code>コマンドでは、共有モジュールの名前（例: <code>:shared</code>または<code>:composeApp</code>）を指定します。</li></ul><p><img src="`+c+'" alt="Add the script" width="700"></p></li><li><p><strong>Based on dependency analysis</strong>オプションを無効にします。</p><p>これにより、Xcodeはすべてのビルド中にスクリプトを実行し、出力依存関係の不足について毎回警告を発しなくなります。</p></li><li><p><strong>Run Script</strong>フェーズを<strong>Compile Sources</strong>フェーズの前に移動して、より上位に配置します。</p><p><img src="'+h+'" alt="Drag the Run Script phase" width="700"></p></li><li><p><strong>Build Settings</strong>タブで、<strong>Build Options</strong>の下にある<strong>User Script Sandboxing</strong>オプションを無効にします。</p><p><img src="'+g+'" alt="User Script Sandboxing" width="700"></p><blockquote><p>サンドボックスを最初に無効にせずにiOSプロジェクトをビルドした場合、Gradleデーモンの再起動が必要になることがあります。 サンドボックス化された可能性のあるGradleデーモンプロセスを停止します。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stop</span></span></code></pre></div><p style=""></p></blockquote></li><li><p>Xcodeでプロジェクトをビルドします。すべて正しく設定されていれば、プロジェクトは正常にビルドされます。</p></li></ol><blockquote style=""><p>デフォルトの<code>Debug</code>または<code>Release</code>とは異なるカスタムビルド構成を使用している場合は、<strong>Build Settings</strong>タブの<strong>User-Defined</strong>の下に<code>KOTLIN_FRAMEWORK_BUILD_TYPE</code>設定を追加し、<code>Debug</code>または<code>Release</code>に設定してください。</p></blockquote><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>Swiftパッケージマネージャーを使用している場合も、ローカル統合を活用できます。<a href="./multiplatform-spm-local-integration">ローカルパッケージにKotlinフレームワークの依存関係を追加する方法を学ぶ</a>。</p>',6))])}const w=u(_,[["render",b]]);export{B as __pageData,w as default};
