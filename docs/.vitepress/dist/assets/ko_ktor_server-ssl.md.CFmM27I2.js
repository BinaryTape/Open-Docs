import{_ as g,C as l,c as y,o as F,G as t,ag as p,j as s,w as e,a as i}from"./chunks/framework.Bksy39di.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-ssl.md","filePath":"ko/ktor/server-ssl.md","lastUpdated":1755457140000}'),c={name:"ko/ktor/server-ssl.md"};function u(C,a,B,m,f,v){const r=l("TopicTitle"),o=l("show-structure"),d=l("primary-label"),E=l("tldr"),k=l("code-block"),n=l("TabItem"),h=l("Tabs");return F(),y("div",null,[t(r,{labelRef:"server-plugin",title:"Ktor 서버의 SSL 및 인증서"}),t(o,{for:"chapter",depth:"2"}),t(d,{ref:"server-plugin"},null,512),t(E,null,{default:e(()=>a[0]||(a[0]=[s("p",null,[s("b",null,"필수 의존성"),i(": "),s("code",null,"io.ktor:ktor-network-tls-certificates")],-1),s("p",null,[s("b",null,"코드 예시"),i(": "),s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/ssl-engine-main"},"ssl-engine-main"),i(", "),s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/ssl-embedded-server"},"ssl-embedded-server")],-1)])),_:1}),a[7]||(a[7]=p('<p>대부분의 경우, Ktor 서비스는 Nginx 또는 Apache와 같은 리버스 프록시 뒤에 배치됩니다. 이는 리버스 프록시 서버가 SSL을 포함한 보안 문제를 처리한다는 것을 의미합니다.</p><p>필요한 경우, 인증서 경로를 제공하여 Ktor가 SSL을 직접 제공하도록 구성할 수 있습니다. Ktor는 인증서를 위한 저장소 시설로 <a href="https://docs.oracle.com/javase/8/docs/api/java/security/KeyStore.html" target="_blank" rel="noreferrer">Java KeyStore (JKS)</a>를 사용합니다. <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html" target="_blank" rel="noreferrer">keytool</a>을 사용하여 KeyStore에 저장된 인증서를 변환하고 관리할 수 있습니다. 이는 인증 기관에서 발급한 PEM 인증서를 Ktor에서 지원하는 JKS 형식으로 변환해야 할 때 유용할 수 있습니다.</p><blockquote><p>Ktor로 <code>https://</code> 및 <code>wss://</code> 요청을 처리하기 위한 무료 인증서를 얻으려면 _Let&#39;s Encrypt_를 사용할 수 있습니다.</p></blockquote><h2 id="self-signed" tabindex="-1">자체 서명 인증서 생성 <a class="header-anchor" href="#self-signed" aria-label="Permalink to &quot;자체 서명 인증서 생성 {id=&quot;self-signed&quot;}&quot;">​</a></h2><h3 id="self-signed-code" tabindex="-1">코드로 인증서 생성 <a class="header-anchor" href="#self-signed-code" aria-label="Permalink to &quot;코드로 인증서 생성 {id=&quot;self-signed-code&quot;}&quot;">​</a></h3><p>Ktor는 테스트 목적으로 자체 서명 인증서를 생성할 수 있는 기능을 제공하며, 이는 <a href="https://api.ktor.io/ktor-network/ktor-network-tls/ktor-network-tls-certificates/io.ktor.network.tls.certificates/build-key-store.html" target="_blank" rel="noreferrer">buildKeyStore</a> 함수를 호출하여 <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/security/KeyStore.html" target="_blank" rel="noreferrer">KeyStore</a> 인스턴스를 반환합니다. 이 함수를 사용하려면 빌드 스크립트에 <code>ktor-network-tls-certificates</code> 아티팩트를 추가해야 합니다.</p>',6)),t(h,{group:"languages"},{default:e(()=>[t(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[t(k,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-network-tls-certificates:$ktor_version")'})]),_:1}),t(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[t(k,{lang:"Groovy",code:'            implementation "io.ktor:ktor-network-tls-certificates:$ktor_version"'})]),_:1}),t(n,{title:"Maven","group-key":"maven"},{default:e(()=>[t(k,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-network-tls-certificates-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),a[8]||(a[8]=p(`<p>아래 코드 스니펫은 인증서를 생성하고 키스토어 파일에 저장하는 방법을 보여줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ApplicationEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">envConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyStoreFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build/keystore.jks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyStore </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildKeyStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        certificate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sampleAlias&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            domains </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keyStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">saveToFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keyStoreFile, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123456&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Ktor는 시작할 때 인증서를 필요로 하므로, 서버를 시작하기 전에 인증서를 생성해야 합니다. 전체 예시는 여기에서 찾을 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/ssl-embedded-server" target="_blank" rel="noreferrer">ssl-embedded-server</a>.</p><h3 id="self-signed-keytool" tabindex="-1">keytool을 사용하여 인증서 생성 <a class="header-anchor" href="#self-signed-keytool" aria-label="Permalink to &quot;keytool을 사용하여 인증서 생성 {id=&quot;self-signed-keytool&quot;}&quot;">​</a></h3><p><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html" target="_blank" rel="noreferrer">keytool</a>을 사용하여 자체 서명 인증서를 생성할 수 있습니다.</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keytool</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keystore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keystore.jks</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -alias</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sampleAlias</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -genkeypair</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keyalg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> RSA</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -keysize</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4096</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -validity</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -dname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;CN=localhost, OU=ktor, O=ktor, L=Unspecified, ST=Unspecified, C=US&#39;</span></span></code></pre></div><p>이 명령을 실행하면 <code>keytool</code>은 키스토어 비밀번호를 지정하도록 제안한 다음 JKS 파일을 생성합니다.</p><h2 id="convert-certificate" tabindex="-1">PEM 인증서를 JKS로 변환 <a class="header-anchor" href="#convert-certificate" aria-label="Permalink to &quot;PEM 인증서를 JKS로 변환 {id=&quot;convert-certificate&quot;}&quot;">​</a></h2><p>인증 기관이 PEM 형식으로 인증서를 발급하는 경우, <a href="#configure-ssl-ktor">Ktor에서 SSL을 구성하기</a> 전에 JKS 형식으로 변환해야 합니다. 이를 위해 <code>openssl</code> 및 <code>keytool</code> 유틸리티를 사용할 수 있습니다. 예를 들어, <code>key.pem</code> 파일에 개인 키가 있고 <code>cert.pem</code>에 공개 인증서가 있다면, 변환 과정은 다음과 같습니다.</p><ol><li><p><code>openssl</code>을 사용하여 PEM을 PKCS12 형식으로 변환하려면 다음 명령을 사용합니다.</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pkcs12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cert.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -inkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keystore.p12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sampleAlias&quot;</span></span></code></pre></div><p><code>key.pem</code>에 대한 암호와 <code>keystore.p12</code>에 대한 새 비밀번호를 입력하라는 메시지가 표시됩니다.</p></li><li><p><code>keytool</code>을 사용하여 PKCS12를 JKS 형식으로 변환합니다.</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keytool</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -importkeystore</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -srckeystore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keystore.p12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -srcstoretype</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pkcs12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -destkeystore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keystore.jks</span></span></code></pre></div><p><code>keystore.p12</code> 파일에 대한 비밀번호와 <code>keystore.jks</code>에 대한 새 비밀번호를 입력하라는 메시지가 표시됩니다. <code>keystore.jks</code>가 생성됩니다.</p></li></ol><h2 id="configure-ssl-ktor" tabindex="-1">Ktor에서 SSL 구성 <a class="header-anchor" href="#configure-ssl-ktor" aria-label="Permalink to &quot;Ktor에서 SSL 구성 {id=&quot;configure-ssl-ktor&quot;}&quot;">​</a></h2><p>Ktor에서 SSL 설정을 지정하는 방법은 <a href="./server-create-and-configure">Ktor 서버를 구성하는 방법</a>에 따라 달라집니다: 구성 파일을 사용하거나 <code>embeddedServer</code> 함수를 사용하여 코드에서 구성하는 방식입니다.</p><h3 id="config-file" tabindex="-1">구성 파일 <a class="header-anchor" href="#config-file" aria-label="Permalink to &quot;구성 파일 {id=&quot;config-file&quot;}&quot;">​</a></h3><p>서버가 <code>application.conf</code> 또는 <code>application.yaml</code> <a href="./server-configuration-file">구성 파일</a>에 구성된 경우, 다음 <a href="./server-configuration-file#predefined-properties">속성</a>을 사용하여 SSL을 활성화할 수 있습니다.</p>`,14)),s("ol",null,[s("li",null,[a[3]||(a[3]=s("p",null,[s("code",null,"ktor.deployment.sslPort"),i(" 속성을 사용하여 SSL 포트를 지정합니다.")],-1)),t(h,{group:"config"},{default:e(()=>[t(n,{title:"application.conf","group-key":"hocon"},{default:e(()=>a[1]||(a[1]=[s("div",{class:"language-shell vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"shell"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"ktor"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    deployment"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        sslPort"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 8443")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"application.yaml","group-key":"yaml"},{default:e(()=>a[2]||(a[2]=[s("div",{class:"language-yaml vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"yaml"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"ktor"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},":")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"    deployment"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},":")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"        sslPort"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"8443")])])])],-1)])),_:1})]),_:1})]),s("li",null,[a[6]||(a[6]=s("p",null,[i("별도의 "),s("code",null,"security"),i(" 그룹에 키스토어 설정을 제공합니다.")],-1)),t(h,{group:"config"},{default:e(()=>[t(n,{title:"application.conf","group-key":"hocon"},{default:e(()=>a[4]||(a[4]=[s("div",{class:"language-shell vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"shell"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"ktor"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    security"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        ssl"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            keyStore"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ="),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," keystore.jks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            keyAlias"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ="),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," sampleAlias")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            keyStorePassword"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ="),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," foobar")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            privateKeyPassword"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ="),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," foobar")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"application.yaml","group-key":"yaml"},{default:e(()=>a[5]||(a[5]=[s("div",{class:"language-yaml vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"yaml"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"ktor"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},":")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"    security"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},":")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"        ssl"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},":")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"            keyStore"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"keystore.jks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"            keyAlias"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"sampleAlias")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"            keyStorePassword"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"foobar")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"            privateKeyPassword"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},": "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"foobar")])])])],-1)])),_:1})]),_:1})])]),a[9]||(a[9]=p(`<p>전체 예시는 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/ssl-engine-main" target="_blank" rel="noreferrer">ssl-engine-main</a>을 참조하십시오.</p><h3 id="embedded-server" tabindex="-1">embeddedServer <a class="header-anchor" href="#embedded-server" aria-label="Permalink to &quot;embeddedServer {id=&quot;embedded-server&quot;}&quot;">​</a></h3><p><code>embeddedServer</code> 함수를 사용하여 서버를 실행하는 경우, <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/-application-engine/-configuration/index.html" target="_blank" rel="noreferrer">ApplicationEngine.Configuration</a>에서 <a href="./server-configuration-code#embedded-custom">사용자 지정 환경</a>을 구성하고 <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.engine/ssl-connector.html" target="_blank" rel="noreferrer">sslConnector</a>를 사용하여 SSL 설정을 제공해야 합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.network.tls.certificates.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.engine.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.netty.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.slf4j.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.io.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.security.KeyStore</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    embeddedServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Netty, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">applicationEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoggerFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ktor.application&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        envConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Application::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wait </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ApplicationEngine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">envConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyStoreFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build/keystore.jks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyStore </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildKeyStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        certificate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sampleAlias&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            domains </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keyStore.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">saveToFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keyStoreFile, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123456&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    connector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sslConnector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        keyStore </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyStore,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        keyAlias </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sampleAlias&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        keyStorePassword </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123456&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        privateKeyPassword </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8443</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        keyStorePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyStoreFile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>전체 예시는 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/ssl-embedded-server" target="_blank" rel="noreferrer">ssl-embedded-server</a>를 참조하십시오.</p>`,5))])}const A=g(c,[["render",u]]);export{S as __pageData,A as default};
