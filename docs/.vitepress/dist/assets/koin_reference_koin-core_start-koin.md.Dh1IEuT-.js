import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"启动 Koin","description":"","frontmatter":{"title":"启动 Koin"},"headers":[],"relativePath":"koin/reference/koin-core/start-koin.md","filePath":"koin/reference/koin-core/start-koin.md","lastUpdated":1750001831000}'),l={name:"koin/reference/koin-core/start-koin.md"};function t(p,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="启动-koin" tabindex="-1">启动 Koin <a class="header-anchor" href="#启动-koin" aria-label="Permalink to &quot;启动 Koin&quot;">​</a></h1><p>Koin 是一个 DSL、一个轻量级容器和一个实用 API。一旦你在 Koin 模块中声明了你的定义，你就准备好启动 Koin 容器了。</p><h3 id="startkoin-函数" tabindex="-1"><code>startKoin</code> 函数 <a class="header-anchor" href="#startkoin-函数" aria-label="Permalink to &quot;\`startKoin\` 函数&quot;">​</a></h3><p><code>startKoin</code> 函数是启动 Koin 容器的主要入口点。它需要一个 <em>Koin 模块列表</em> 来运行。模块被加载后，定义就准备好被 Koin 容器解析了。</p><p>.启动 Koin</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start a KoinApplication in Global context</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // declare used modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coffeeAppModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>一旦 <code>startKoin</code> 被调用，Koin 将读取你的所有模块和定义。然后 Koin 就可以通过任何 <code>get()</code> 或 <code>by inject()</code> 调用来检索所需的实例了。</p><p>你的 Koin 容器可以有几个选项：</p><ul><li><code>logger</code> - 用于启用日志记录 - 参阅 <a href="/koin#logging">日志记录</a> 部分</li><li><code>properties()</code>、<code>fileProperties()</code> 或 <code>environmentProperties()</code> - 用于从环境变量、koin.properties 文件、额外属性等加载属性 - 参阅 <a href="/koin#loading-properties">加载属性</a> 部分</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>startKoin</code> 不能被调用超过一次。如果你需要多个加载模块的时机，请使用 <code>loadKoinModules</code> 函数。</p></div><h3 id="扩展-koin-启动-有助于-kmp-及其他方面的重用" tabindex="-1">扩展 Koin 启动（有助于 KMP 及其他方面的重用） <a class="header-anchor" href="#扩展-koin-启动-有助于-kmp-及其他方面的重用" aria-label="Permalink to &quot;扩展 Koin 启动（有助于 KMP 及其他方面的重用）&quot;">​</a></h3><p>Koin 现在支持 KoinConfiguration 的可重用和可扩展配置对象。你可以提取共享配置，以便跨平台（Android、iOS、JVM 等）使用，或根据不同环境进行定制。这可以通过 <code>includes()</code> 函数完成。下面，我们可以轻松重用一个通用配置，并对其进行扩展以添加一些 Android 环境设置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KoinAppDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//can include external configuration extension</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        initKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            androidContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this@MainApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            androidLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="启动背后-koin-实例的幕后" tabindex="-1">启动背后 - Koin 实例的幕后 <a class="header-anchor" href="#启动背后-koin-实例的幕后" aria-label="Permalink to &quot;启动背后 - Koin 实例的幕后&quot;">​</a></h3><p>当我们启动 Koin 时，我们会创建一个 <code>KoinApplication</code> 实例，它代表 Koin 容器的配置实例。一旦启动，它将根据你的模块和选项生成一个 <code>Koin</code> 实例。这个 <code>Koin</code> 实例随后由 <code>GlobalContext</code> 持有，供任何 <code>KoinComponent</code> 类使用。</p><p><code>GlobalContext</code> 是 Koin 默认的 JVM 上下文策略。它由 <code>startKoin</code> 调用并注册到 <code>GlobalContext</code>。这将使我们能够注册不同类型的上下文，以支持 Koin 多平台 (Multiplatform)。</p><h3 id="在-startkoin-之后加载模块" tabindex="-1">在 <code>startKoin</code> 之后加载模块 <a class="header-anchor" href="#在-startkoin-之后加载模块" aria-label="Permalink to &quot;在 \`startKoin\` 之后加载模块&quot;">​</a></h3><p>你不能调用 <code>startKoin</code> 函数超过一次。但你可以直接使用 <code>loadKoinModules()</code> 函数。</p><p>这个函数对于想要使用 Koin 的 SDK 开发者来说很有用，因为他们不需要使用 <code>startKoin()</code> 函数，而只需在他们的库启动时使用 <code>loadKoinModules</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadKoinModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(module1,module2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.)</span></span></code></pre></div><h3 id="卸载模块" tabindex="-1">卸载模块 <a class="header-anchor" href="#卸载模块" aria-label="Permalink to &quot;卸载模块&quot;">​</a></h3><p>也可以卸载一批定义，然后使用给定函数释放它们的实例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unloadKoinModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(module1,module2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.)</span></span></code></pre></div><h3 id="停止-koin-关闭所有资源" tabindex="-1">停止 Koin - 关闭所有资源 <a class="header-anchor" href="#停止-koin-关闭所有资源" aria-label="Permalink to &quot;停止 Koin - 关闭所有资源&quot;">​</a></h3><p>你可以关闭所有 Koin 资源并丢弃实例和定义。为此，你可以从任何地方使用 <code>stopKoin()</code> 函数来停止 Koin 的 <code>GlobalContext</code>。否则，在 <code>KoinApplication</code> 实例上，只需调用 <code>close()</code>。</p><h2 id="日志记录" tabindex="-1">日志记录 <a class="header-anchor" href="#日志记录" aria-label="Permalink to &quot;日志记录&quot;">​</a></h2><p>Koin 有一个简单的日志 API，用于记录任何 Koin 活动（分配、查找等）。该日志 API 由下面的类表示：</p><p>Koin 日志器</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> level: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Level.INFO) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(level: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.DEBUG, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.INFO, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.WARNING, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.ERROR, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Koin 提供了一些日志实现，根据目标平台的功能：</p><ul><li><code>PrintLogger</code> - 直接输出到控制台（包含在 <code>koin-core</code> 中）</li><li><code>EmptyLogger</code> - 什么都不记录（包含在 <code>koin-core</code> 中）</li><li><code>SLF4JLogger</code> - 使用 SLF4J 记录日志。被 Ktor 和 Spark 使用（<code>koin-logger-slf4j</code> 项目）</li><li><code>AndroidLogger</code> - 记录到 Android Logger（包含在 <code>koin-android</code> 中）</li></ul><h3 id="在启动时设置日志记录" tabindex="-1">在启动时设置日志记录 <a class="header-anchor" href="#在启动时设置日志记录" aria-label="Permalink to &quot;在启动时设置日志记录&quot;">​</a></h3><p>默认情况下，Koin 使用 <code>EmptyLogger</code>。你可以直接使用 <code>PrintLogger</code>，如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LEVEL.INFO)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="加载属性" tabindex="-1">加载属性 <a class="header-anchor" href="#加载属性" aria-label="Permalink to &quot;加载属性&quot;">​</a></h2><p>你可以在启动时加载多种类型的属性：</p><ul><li>环境变量 - 加载 <em>系统</em> 属性</li><li>koin.properties 文件 - 从 <code>/src/main/resources/koin.properties</code> 文件加载属性</li><li>“额外”启动属性 - 在 <code>startKoin</code> 函数中传递的值映射</li></ul><h3 id="从模块读取属性" tabindex="-1">从模块读取属性 <a class="header-anchor" href="#从模块读取属性" aria-label="Permalink to &quot;从模块读取属性&quot;">​</a></h3><p>确保在 Koin 启动时加载属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Load properties from the default location</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // (i.e. \`/src/main/resources/koin.properties\`)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fileProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 Koin 模块中，你可以通过其键获取属性：</p><p>在 /src/main/resources/koin.properties 文件中</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Key - value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//service_url</span></span></code></pre></div><p>只需使用 <code>getProperty</code> 函数加载它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // use the &quot;server_url&quot; key to retrieve its value</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;server_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="koin-选项-功能标记-4-1-0" tabindex="-1">Koin 选项 - 功能标记 (4.1.0) <a class="header-anchor" href="#koin-选项-功能标记-4-1-0" aria-label="Permalink to &quot;Koin 选项 - 功能标记 (4.1.0)&quot;">​</a></h2><p>你的 Koin 应用程序现在可以通过一个专用的 <code>options</code> 部分激活一些实验性功能，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // activate ViewModel Scope factory feature</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        viewModelScopeFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,48)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
