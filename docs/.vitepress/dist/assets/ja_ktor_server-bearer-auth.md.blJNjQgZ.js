import{_ as c,C as e,c as u,o as E,j as a,G as i,ag as h,a as t,w as n}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-bearer-auth.md","filePath":"ja/ktor/server-bearer-auth.md","lastUpdated":1755457140000}'),g={name:"ja/ktor/server-bearer-auth.md"};function y(v,s,b,F,f,m){const p=e("show-structure"),o=e("Links"),k=e("tldr"),r=e("code-block"),l=e("TabItem"),d=e("Tabs");return E(),u("div",null,[s[5]||(s[5]=a("h1",{id:"ktorサーバーでのベアラー認証",tabindex:"-1"},[t("Ktorサーバーでのベアラー認証 "),a("a",{class:"header-anchor",href:"#ktorサーバーでのベアラー認証","aria-label":'Permalink to "Ktorサーバーでのベアラー認証"'},"​")],-1)),i(p,{for:"chapter",depth:"2"}),i(k,null,{default:n(()=>[s[3]||(s[3]=a("p",null,[a("b",null,"必要な依存関係"),t(": "),a("code",null,"io.ktor:ktor-server-auth")],-1)),s[4]||(s[4]=a("p",null,[a("b",null,"コード例"),t(": "),a("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-bearer"}," auth-bearer ")],-1)),a("p",null,[a("b",null,[i(o,{href:"/ktor/server-native",summary:"KtorはKotlin/Nativeをサポートしており、追加のランタイムや仮想マシンなしでサーバーを実行できます。"},{default:n(()=>s[0]||(s[0]=[t("ネイティブサーバー")])),_:1}),s[1]||(s[1]=t("のサポート"))]),s[2]||(s[2]=t(": ✅ "))])]),_:1}),s[6]||(s[6]=h('<p>ベアラー認証スキームは、アクセス制御と認証に使用される<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noreferrer">HTTPフレームワーク</a>の一部です。このスキームには、ベアラー・トークンと呼ばれるセキュリティトークンが関与します。ベアラー認証スキームは<a href="./server-oauth">OAuth</a>または<a href="./server-jwt">JWT</a>の一部として使用されますが、ベアラー・トークンを認可するためのカスタムロジックを提供することもできます。</p><p>Ktorでの認証に関する一般的な情報は、<a href="./server-auth">Ktorサーバーでの認証と認可</a>のセクションで確認できます。</p><blockquote><p>ベアラー認証は<a href="./server-ssl">HTTPS/TLS</a>経由でのみ使用すべきです。</p></blockquote><h2 id="add_dependencies" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係の追加 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>bearer</code>認証を有効にするには、ビルドスクリプトに<code>ktor-server-auth</code>アーティファクトを含める必要があります。</p>',5)),i(d,{group:"languages"},{default:n(()=>[i(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(r,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),i(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(r,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),i(l,{title:"Maven","group-key":"maven"},{default:n(()=>[i(r,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[7]||(s[7]=h(`<h2 id="flow" tabindex="-1">ベアラー認証フロー <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;ベアラー認証フロー {id=&quot;flow&quot;}&quot;">​</a></h2><p>一般的に、ベアラー認証フローは次のようになります。</p><ol><li>ユーザーが認証とアクセス認可に成功した後、サーバーはクライアントにアクセストークンを返します。</li><li>クライアントは<code>Bearer</code>スキームを使用して<code>Authorization</code>ヘッダーでトークンを渡して、保護されたリソースにリクエストを行うことができます。<div class="language-HTTP vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTTP</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http://localhost:8080/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Authorization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Bearer abc123</span></span></code></pre></div></li><li>サーバーはリクエストを受信し、トークンを<a href="#configure">検証</a>します。</li><li>検証後、サーバーは保護されたリソースの内容を応答します。</li></ol><h2 id="install" tabindex="-1">ベアラー認証のインストール <a class="header-anchor" href="#install" aria-label="Permalink to &quot;ベアラー認証のインストール {id=&quot;install&quot;}&quot;">​</a></h2><p><code>bearer</code>認証プロバイダーをインストールするには、<code>install</code>ブロック内で<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/bearer.html" target="_blank" rel="noreferrer">bearer</a>関数を呼び出します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bearer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure bearer authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>オプションで、<a href="#authenticate-route">指定されたルートを認証</a>するために使用できる<a href="./server-auth#provider-name">プロバイダー名</a>を指定できます。</p><h2 id="configure" tabindex="-1">ベアラー認証の構成 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;ベアラー認証の構成 {id=&quot;configure&quot;}&quot;">​</a></h2><p>Ktorでさまざまな認証プロバイダーを構成する方法の一般的なアイデアを得るには、<a href="./server-auth#configure">認証の構成</a>を参照してください。このセクションでは、<code>bearer</code>認証プロバイダーの構成の詳細について説明します。</p><h3 id="configure-provider" tabindex="-1">ステップ1：ベアラープロバイダーの構成 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;ステップ1：ベアラープロバイダーの構成 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p><code>bearer</code>認証プロバイダーは、その設定を<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-bearer-authentication-provider/-config/index.html" target="_blank" rel="noreferrer">BearerAuthenticationProvider.Configuration</a>クラスを介して公開します。以下の例では、次の設定が指定されています。</p><ul><li><code>realm</code>プロパティは、<code>WWW-Authenticate</code>ヘッダーで渡されるレルムを設定します。</li><li><code>authenticate</code>関数は、クライアントによって送信されたトークンをチェックし、認証が成功した場合は<code>UserIdPrincipal</code>を返し、認証が失敗した場合は<code>null</code>を返します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bearer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-bearer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { tokenCredential </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (tokenCredential.token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jetbrains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="authenticate-route" tabindex="-1">ステップ2：特定のリソースを保護 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;ステップ2：特定のリソースを保護 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p><code>bearer</code>プロバイダーを構成した後、**<a href="./server-auth#authenticate-route">authenticate</a>**関数を使用してアプリケーション内の特定のリソースを保護できます。認証が成功した場合、<code>call.principal</code>関数を使用してルートハンドラー内で認証された<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-id-principal/index.html" target="_blank" rel="noreferrer">UserIdPrincipal</a>を取得し、認証されたユーザーの名前を取得できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-bearer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()?.name}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,16))])}const q=c(g,[["render",y]]);export{C as __pageData,q as default};
