import{_ as r,a as o,b as d,c as E,d as g,e as c}from"./chunks/native-output-gutter-3.D2hCv83U.js";import{_ as u,C as h,c as y,o as F,ag as n,j as i,G as l,a as s,w as t}from"./chunks/framework.Bksy39di.js";const x=JSON.parse('{"title":"Kotlin/Native 入门","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/native-get-started.md","filePath":"kotlin/native-get-started.md","lastUpdated":1754307826000}'),b={name:"kotlin/native-get-started.md"};function m(v,a,C,A,f,D){const p=h("shortcut"),e=h("tab"),k=h("tabs");return F(),y("div",null,[a[13]||(a[13]=n(`<h1 id="kotlin-native-入门" tabindex="-1">Kotlin/Native 入门 <a class="header-anchor" href="#kotlin-native-入门" aria-label="Permalink to &quot;Kotlin/Native 入门&quot;">​</a></h1><p>在本教程中，您将学习如何创建 Kotlin/Native 应用程序。选择最适合您的工具来创建应用：</p><ul><li><strong><a href="#in-ide">IDE</a></strong>。在这里，您可以从版本控制系统克隆项目模板并在 IntelliJ IDEA 中使用它。</li><li><strong><a href="#using-gradle">Gradle 构建系统</a></strong>。为了更好地理解内部原理，您可以手动为项目创建构建文件。</li><li><strong><a href="#using-the-command-line-compiler">命令行工具</a></strong>。您可以使用 Kotlin/Native 编译器（它作为标准 Kotlin 发行版的一部分提供），并直接在命令行工具中创建应用。</li></ul><p>控制台编译可能看起来简单直接，但对于包含数百个文件和库的更大型项目来说，它的伸缩性不佳。对于此类项目，我们建议使用 IDE 或构建系统。</p><p>使用 Kotlin/Native，您可以为<a href="/kotlin/native-target-support">不同的目标平台</a>编译，包括 Linux、macOS 和 Windows。虽然可以进行跨平台编译（这意味着使用一个平台为另一个平台编译），但本教程中，您将以您正在编译的同一平台为目标。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您使用 Mac 并希望为 macOS 或其他 Apple 目标平台创建和运行应用程序，您还需要先安装 <a href="https://developer.apple.com/download/" target="_blank" rel="noreferrer">Xcode Command Line Tools</a>，启动它并接受许可条款。</p></div><h2 id="在-ide-中" tabindex="-1">在 IDE 中 <a class="header-anchor" href="#在-ide-中" aria-label="Permalink to &quot;在 IDE 中&quot;">​</a></h2><p>在本节中，您将学习如何使用 IntelliJ IDEA 创建 Kotlin/Native 应用程序。您可以使用 Community Edition 和 Ultimate Edition。</p><h3 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h3><ol><li><p>下载并安装最新版本的 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a>。</p></li><li><p>在 IntelliJ IDEA 中，通过选择 <strong>File</strong> | <strong>New</strong> | <strong>Project from Version Control</strong> 并使用此 URL 来克隆<a href="https://github.com/Kotlin/kmp-native-wizard" target="_blank" rel="noreferrer">项目模板</a>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/kmp-native-wizard</span></span></code></pre></div></li><li><p>打开 <code>gradle/libs.versions.toml</code> 文件，它是项目依赖项的版本目录。要创建 Kotlin/Native 应用程序，您需要 Kotlin Multiplatform Gradle 插件，它的版本与 Kotlin 相同。请确保使用最新的 Kotlin 版本：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[versions]</span></span>
<span class="line"><span>kotlin = &quot;2.2.10&quot;</span></span></code></pre></div></li><li><p>按照建议重新加载 Gradle 文件：</p><p><img src="`+r+'" alt="Load Gradle changes button" width="295"></p></li></ol><p>有关这些设置的更多信息，请参见 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html" target="_blank" rel="noreferrer">Multiplatform Gradle DSL 参考</a>。</p><h3 id="构建并运行应用程序" tabindex="-1">构建并运行应用程序 <a class="header-anchor" href="#构建并运行应用程序" aria-label="Permalink to &quot;构建并运行应用程序&quot;">​</a></h3><p>打开 <code>src/nativeMain/kotlin/</code> 目录中的 <code>Main.kt</code> 文件：</p><ul><li><code>src</code> 目录包含 Kotlin 源文件。</li><li><code>Main.kt</code> 文件包含使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html" target="_blank" rel="noreferrer"><code>println()</code></a> 函数打印“Hello, Kotlin/Native!”的代码。</li></ul><p>按下边栏中的绿色图标来运行代码：</p><p><img src="'+o+'" alt="Run the application" width="478"></p><p>IntelliJ IDEA 使用 Gradle 任务运行代码，并在 <strong>Run</strong> 标签页中输出结果：</p><p><img src="'+d+'" alt="Application output" width="331"></p><p>首次运行后，IDE 会在顶部创建相应的运行配置：</p><p><img src="'+E+'" alt="Gradle run configuration" width="503"></p><blockquote><p>IntelliJ IDEA Ultimate 版用户可以安装 <a href="https://plugins.jetbrains.com/plugin/12775-native-debugging-support" target="_blank" rel="noreferrer">Native Debugging Support</a> 插件，该插件允许调试已编译的原生可执行文件，并自动为导入的 Kotlin/Native 项目创建运行配置。</p></blockquote><p>您可以<a href="https://www.jetbrains.com/help/idea/compiling-applications.html#auto-build" target="_blank" rel="noreferrer">配置 IntelliJ IDEA</a> 以自动构建项目：</p><ol><li>转到 <strong>Settings | Build, Execution, Deployment | Compiler</strong>。</li><li>在 <strong>Compiler</strong> 页面上，选择 <strong>Build project automatically</strong>。</li><li>应用更改。</li></ol>',23)),i("p",null,[a[2]||(a[2]=s("现在，当您修改类文件或保存文件（")),l(p,null,{default:t(()=>a[0]||(a[0]=[s("Ctrl + S")])),_:1}),a[3]||(a[3]=s("/")),l(p,null,{default:t(()=>a[1]||(a[1]=[s("Cmd + S")])),_:1}),a[4]||(a[4]=s("）时，IntelliJ IDEA 会自动执行项目的增量构建。"))]),a[14]||(a[14]=n(`<h3 id="更新应用程序" tabindex="-1">更新应用程序 <a class="header-anchor" href="#更新应用程序" aria-label="Permalink to &quot;更新应用程序&quot;">​</a></h3><p>让我们为您的应用程序添加一个特性，让它能够计算您姓名中的字母数量：</p><ol><li><p>在 <code>Main.kt</code> 文件中，添加代码读取输入。使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/readln.html" target="_blank" rel="noreferrer"><code>readln()</code></a> 函数读取输入值并将其赋值给 <code>name</code> 变量：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 读取输入值。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, enter your name:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>要使用 Gradle 运行此应用，请在 <code>build.gradle.kts</code> 文件中指定 <code>System.in</code> 作为输入，然后加载 Gradle 更改：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nativeTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                entryPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                runTask?.standardInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>消除空白字符并计算字母：</p><ul><li>使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/replace.html" target="_blank" rel="noreferrer"><code>replace()</code></a> 函数移除姓名中的空格。</li><li>使用作用域函数 <a href="/kotlin/scope-functions#let"><code>let</code></a> 在对象上下文内运行该函数。</li><li>使用<a href="/kotlin/strings#string-templates">字符串模板</a>将姓名长度插入字符串中，方法是添加美元符号并用花括号将其括起来 – <code>\${it.length}</code>。<code>it</code> 是<a href="/kotlin/coding-conventions#lambda-parameters">lambda 实参</a>的默认名称。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 读取输入值。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, enter your name:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 计算姓名中的字母数量。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Your name contains \${it.length} letters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>运行应用程序。</p></li><li><p>输入您的姓名，然后查看结果：</p><p><img src="`+g+`" alt="Application output" width="422"></p></li></ol><p>现在我们只计算姓名中唯一的字母：</p><ol><li><p>在 <code>Main.kt</code> 文件中，为 <code>String</code> 声明新的<a href="/kotlin/extensions#extension-functions">扩展函数</a> <code>.countDistinctCharacters()</code>：</p><ul><li>使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/lowercase.html" target="_blank" rel="noreferrer"><code>.lowercase()</code></a> 函数将姓名转换为小写。</li><li>使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-list.html" target="_blank" rel="noreferrer"><code>toList()</code></a> 函数将输入字符串转换为字符 list。</li><li>使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/distinct.html" target="_blank" rel="noreferrer"><code>distinct()</code></a> 函数只选择姓名中不同的字符。</li><li>使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/count.html" target="_blank" rel="noreferrer"><code>count()</code></a> 函数计算不同的字符。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countDistinctCharacters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lowercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li><li><p>使用 <code>.countDistinctCharacters()</code> 函数计算姓名中唯一的字母：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countDistinctCharacters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lowercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 读取输入值。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, enter your name:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 计算姓名中的字母数量。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Your name contains \${it.length} letters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 打印唯一字母的数量。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Your name contains \${it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countDistinctCharacters</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()} unique letters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>运行应用程序。</p></li><li><p>输入您的姓名并查看结果：</p><p><img src="`+c+'" alt="Application output" width="422"></p></li></ol><h2 id="使用-gradle" tabindex="-1">使用 Gradle <a class="header-anchor" href="#使用-gradle" aria-label="Permalink to &quot;使用 Gradle&quot;">​</a></h2><p>在本节中，您将学习如何使用 <a href="https://gradle.org" target="_blank" rel="noreferrer">Gradle</a> 手动创建 Kotlin/Native 应用程序。它是 Kotlin/Native 和 Kotlin Multiplatform 项目的默认构建系统，也常用于 Java、Android 和其他生态系统。</p><h3 id="创建项目文件" tabindex="-1">创建项目文件 <a class="header-anchor" href="#创建项目文件" aria-label="Permalink to &quot;创建项目文件&quot;">​</a></h3>',8)),i("ol",null,[a[9]||(a[9]=i("li",null,[i("p",null,[s("开始之前，请安装兼容版本的 "),i("a",{href:"https://gradle.org/install/",target:"_blank",rel:"noreferrer"},"Gradle"),s("。请参见"),i("a",{href:"/kotlin/gradle-configure-project#apply-the-plugin"},"兼容性表格"),s("以检测 Kotlin Gradle 插件 (KGP) 与可用 Gradle 版本的兼容性。")])],-1)),i("li",null,[a[7]||(a[7]=i("p",null,[s("创建一个空项目目录。在其中，创建 "),i("code",null,"build.gradle(.kts)"),s(" 文件并包含以下内容：")],-1)),l(k,{group:"build-script"},{default:t(()=>[l(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[5]||(a[5]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle.kts")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"repositories"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    mavenCentral"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    macosArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {  "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// on macOS")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxArm64("native")'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // on Linux")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // mingwX64("native")'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // on Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        binaries"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            executable"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Wrapper"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "8.14"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Wrapper.DistributionType.BIN")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[6]||(a[6]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.multiplatform'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"repositories {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mavenCentral()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    macosArm64("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'native'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {  "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// on macOS")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // linuxArm64('native')"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // on Linux")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // mingwX64('native')"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // on Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            executable()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"wrapper {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '8.14'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'BIN'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[8]||(a[8]=n('<p>您可以使用不同的<a href="/kotlin/native-target-support">目标名称</a>，例如 <code>macosArm64</code>、<code>iosArm64</code>、<code>linuxArm64</code> 和 <code>mingwX64</code> 来定义编译代码的目标平台。这些目标名称可以选择将平台名称作为形参，在本例中为 <code>native</code>。平台名称用于在项目中生成源代码路径和任务名称。</p>',1))]),a[10]||(a[10]=n(`<li><p>在项目目录中创建一个空 <code>settings.gradle(.kts)</code> 文件。</p></li><li><p>创建 <code>src/nativeMain/kotlin</code> 目录，并在其中放置一个 <code>hello.kt</code> 文件，内容如下：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,2))]),a[15]||(a[15]=n(`<p>按照约定，所有源代码都位于 <code>src/&lt;target name&gt;[Main|Test]/kotlin</code> 目录中，其中 <code>Main</code> 用于源代码，<code>Test</code> 用于测试。<code>&lt;target name&gt;</code> 对应于目标平台（在本例中为 <code>native</code>），如构建文件中所指定。</p><h3 id="构建并运行项目" tabindex="-1">构建并运行项目 <a class="header-anchor" href="#构建并运行项目" aria-label="Permalink to &quot;构建并运行项目&quot;">​</a></h3><ol><li><p>在项目根目录中，运行构建命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nativeBinaries</span></span></code></pre></div><p>此命令会创建 <code>build/bin/native</code> 目录，其中包含两个子目录：<code>debugExecutable</code> 和 <code>releaseExecutable</code>。它们包含相应的二进制文件。</p><p>默认情况下，二进制文件的名称与项目目录的名称相同。</p></li><li><p>要运行项目，请执行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build/bin/native/debugExecutable/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;project_name&gt;.kexe</span></span></code></pre></div></li></ol><p>终端会打印“Hello, Kotlin/Native!”。</p><h3 id="在-ide-中打开项目" tabindex="-1">在 IDE 中打开项目 <a class="header-anchor" href="#在-ide-中打开项目" aria-label="Permalink to &quot;在 IDE 中打开项目&quot;">​</a></h3><p>现在，您可以在任何支持 Gradle 的 IDE 中打开项目。如果您使用 IntelliJ IDEA：</p><ol><li>选择 <strong>File</strong> | <strong>Open</strong>。</li><li>选择项目目录并点击 <strong>Open</strong>。IntelliJ IDEA 会自动检测它是否是 Kotlin/Native 项目。</li></ol><p>如果您遇到项目问题，IntelliJ IDEA 会在 <strong>Build</strong> 标签页中显示错误消息。</p><h2 id="使用命令行编译器" tabindex="-1">使用命令行编译器 <a class="header-anchor" href="#使用命令行编译器" aria-label="Permalink to &quot;使用命令行编译器&quot;">​</a></h2><p>在本节中，您将学习如何使用命令行工具中的 Kotlin 编译器创建 Kotlin/Native 应用程序。</p><h3 id="下载并安装编译器" tabindex="-1">下载并安装编译器 <a class="header-anchor" href="#下载并安装编译器" aria-label="Permalink to &quot;下载并安装编译器&quot;">​</a></h3><p>要安装编译器：</p><ol><li><p>转到 Kotlin 的 <a href="https://github.com/JetBrains/kotlin/releases/tag/v2.2.10" target="_blank" rel="noreferrer">GitHub 发布</a>页面，并向下滚动到 <strong>Assets</strong> 部分。</p></li><li><p>查找名称中包含 <code>kotlin-native</code> 的文件，并下载一个适合您操作系统的文件，例如 <code>kotlin-native-prebuilt-linux-x86_64-2.2.10.tar.gz</code>。</p></li><li><p>将存档解压到您选择的目录。</p></li><li><p>打开您的 shell 配置文件，并将编译器的 <code>/bin</code> 目录路径添加到 <code>PATH</code> 环境变量中：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&lt;path to the compiler&gt;/kotlin-native/bin:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>尽管编译器输出没有依赖项或虚拟机要求，但编译器本身需要 Java 1.8 或更高运行时。它支持 <a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noreferrer">JDK 8 (JAVA SE 8) 或更高版本</a>。</p></div><h3 id="创建程序" tabindex="-1">创建程序 <a class="header-anchor" href="#创建程序" aria-label="Permalink to &quot;创建程序&quot;">​</a></h3><p>选择一个工作目录并创建一个名为 <code>hello.kt</code> 的文件。使用以下代码更新它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="从控制台编译代码" tabindex="-1">从控制台编译代码 <a class="header-anchor" href="#从控制台编译代码" aria-label="Permalink to &quot;从控制台编译代码&quot;">​</a></h3><p>要编译应用程序，请使用已下载的编译器执行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc-native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span></span></code></pre></div><p><code>-o</code> 选项的值指定输出文件的名称，因此此调用会在 macOS 和 Linux 上生成 <code>hello.kexe</code> 二进制文件（在 Windows 上生成 <code>hello.exe</code>）。</p><p>有关可用选项的完整列表，请参见 <a href="/kotlin/compiler-reference">Kotlin 编译器选项</a>。</p><h3 id="运行程序" tabindex="-1">运行程序 <a class="header-anchor" href="#运行程序" aria-label="Permalink to &quot;运行程序&quot;">​</a></h3><p>要运行程序，请在命令行工具中导航到包含二进制文件的目录，然后运行以下命令：</p>`,24)),l(k,null,{default:t(()=>[l(e,{title:"macOS 和 Linux"},{default:t(()=>a[11]||(a[11]=[i("div",{class:"language-none vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"none"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",null,"./hello.kexe")])])])],-1)])),_:1}),l(e,{title:"Windows"},{default:t(()=>a[12]||(a[12]=[i("div",{class:"language-none vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"none"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",null,"./hello.exe")])])])],-1)])),_:1})]),_:1}),a[16]||(a[16]=n('<p>应用程序会打印“Hello, Kotlin/Native!”到标准输出。</p><h2 id="接下来" tabindex="-1">接下来？ <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来？&quot;">​</a></h2><ul><li>完成<a href="/kotlin/native-app-with-c-and-libcurl">使用 C 互操作和 libcurl 创建应用</a>教程，该教程解释了如何创建原生 HTTP 客户端以及如何与 C 库进行互操作。</li><li>学习如何<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html" target="_blank" rel="noreferrer">为实际的 Kotlin/Native 项目编写 Gradle 构建脚本</a>。</li><li>在<a href="/kotlin/gradle">文档</a>中阅读更多关于 Gradle 构建系统的信息。</li></ul>',3))])}const q=u(b,[["render",m]]);export{x as __pageData,q as default};
