import{_ as l}from"./chunks/gradle-console-rich-output.BeIOO7Zd.js";import{_ as p,C as t,c as h,o as k,ag as i,G as a,j as o}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"Kotlin 2.2.0 的新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew22.md","filePath":"zh-Hant/kotlin/whatsnew22.md","lastUpdated":1754307826000}'),r={name:"zh-Hant/kotlin/whatsnew22.md"};function d(c,s,g,E,y,u){const e=t("YouTubeVideo"),n=t("TopicTitle");return k(),h("div",null,[s[0]||(s[0]=i('<h1 id="kotlin-2-2-0-的新功能" tabindex="-1">Kotlin 2.2.0 的新功能 <a class="header-anchor" href="#kotlin-2-2-0-的新功能" aria-label="Permalink to &quot;Kotlin 2.2.0 的新功能&quot;">​</a></h1><p><em><a href="/zh-Hant/kotlin/releases#release-details">發佈日期：2025 年 6 月 23 日</a></em></p><p>Kotlin 2.2.0 版本現已推出！以下是主要亮點：</p><ul><li><strong>語言</strong>：預覽版中的新語言功能，包括<a href="#preview-of-context-parameters">上下文參數</a>。數個<a href="#stable-features-guard-conditions-non-local-break-and-continue-and-multi-dollar-interpolation">先前為實驗性的功能現已穩定</a>，例如守衛條件、非局部 <code>break</code> 和 <code>continue</code>，以及多美元符號插值。</li><li><strong>Kotlin 編譯器</strong>：<a href="#kotlin-compiler-unified-management-of-compiler-warnings">統一管理編譯器警告</a>。</li><li><strong>Kotlin/JVM</strong>：<a href="#changes-to-default-method-generation-for-interface-functions">介面函數預設方法生成的變更</a>。</li><li><strong>Kotlin/Native</strong>：<a href="#kotlin-native">LLVM 19 以及用於追蹤和調整記憶體消耗的新功能</a>。</li><li><strong>Kotlin/Wasm</strong>：<a href="#build-infrastructure-for-wasm-target-separated-from-javascript-target">分離的 Wasm 目標</a>以及為<a href="#per-project-binaryen-configuration">每個專案配置 Binaryen 的功能</a>。</li><li><strong>Kotlin/JS</strong>：<a href="#fix-for-copy-in-jsplainobject-interfaces">針對 <code>@JsPlainObject</code> 介面生成的 <code>copy()</code> 方法的修復</a>。</li><li><strong>Gradle</strong>：<a href="#binary-compatibility-validation-included-in-kotlin-gradle-plugin">Kotlin Gradle 插件中包含的二進位相容性驗證</a>。</li><li><strong>標準函式庫</strong>：<a href="#stable-base64-encoding-and-decoding">穩定的 Base64 和 HexFormat API</a>。</li><li><strong>文件</strong>：我們的<a href="https://surveys.jetbrains.com/s3/Kotlin-Docs-2025" target="_blank" rel="noreferrer">文件問卷調查已開放</a>，並且<a href="#documentation-updates">Kotlin 文件已顯著改進</a>。</li></ul><p>您還可以觀看這段 Kotlin 語言演進團隊討論新功能並回答問題的影片：</p>',5)),a(e,{src:"https://www.youtube.com/watch?v=jne3923lWtw",title:"Kotlin 2.2.0 的新功能"}),s[1]||(s[1]=i('<h2 id="ide-支援" tabindex="-1">IDE 支援 <a class="header-anchor" href="#ide-支援" aria-label="Permalink to &quot;IDE 支援&quot;">​</a></h2><p>支援 2.2.0 的 Kotlin 插件已捆綁在最新版本的 IntelliJ IDEA 和 Android Studio 中。 您無需更新 IDE 中的 Kotlin 插件。 您只需在構建腳本中將 <a href="/zh-Hant/kotlin/configure-build-for-eap#adjust-the-kotlin-version">Kotlin 版本</a>變更為 2.2.0。</p><p>有關詳細資訊，請參閱<a href="/zh-Hant/kotlin/releases#update-to-a-new-kotlin-version">更新到新版本</a>。</p><h2 id="語言" tabindex="-1">語言 <a class="header-anchor" href="#語言" aria-label="Permalink to &quot;語言&quot;">​</a></h2><p>此版本將<a href="#stable-features-guard-conditions-non-local-break-and-continue-and-multi-dollar-interpolation">守衛條件</a>、非局部 <code>break</code> 和 <code>continue</code>，以及多美元符號插值<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">晉升為穩定版</a>。此外，還以預覽版形式推出了多個功能，例如<a href="#preview-of-context-parameters">上下文參數</a>和<a href="#preview-of-context-sensitive-resolution">上下文敏感解析</a>。</p>',5)),a(n,{id:"上下文參數預覽",level:"3",title:"上下文參數預覽",labelRef:"experimental-general"}),s[2]||(s[2]=i(` <p>上下文參數允許函數和屬性宣告在周圍上下文中隱式可用的依賴。</p><p>使用上下文參數，您無需手動傳遞在多個函數呼叫集之間共享且很少變更的值，例如服務或依賴。</p><p>上下文參數取代了舊的實驗性功能，稱為上下文接收器。要從上下文接收器遷移到上下文參數，您可以使用 IntelliJ IDEA 中的輔助支援，如<a href="https://blog.jetbrains.com/kotlin/2025/04/update-on-context-parameters/" target="_blank" rel="noreferrer">部落格文章</a>中所述。</p><p>主要區別在於上下文參數不會作為接收器引入到函數主體中。因此，您需要使用上下文參數的名稱來存取其成員，這與上下文接收器不同，在上下文接收器中上下文是隱式可用的。</p><p>Kotlin 中的上下文參數在透過簡化依賴注入、改進 DSL 設計和作用域操作來管理依賴方面代表著顯著的改進。有關更多資訊，請參閱該功能的 <a href="https://github.com/Kotlin/KEEP/blob/context-parameters/proposals/context-parameters.md" target="_blank" rel="noreferrer">KEEP</a>。</p><h4 id="如何宣告上下文參數" tabindex="-1">如何宣告上下文參數 <a class="header-anchor" href="#如何宣告上下文參數" aria-label="Permalink to &quot;如何宣告上下文參數&quot;">​</a></h4><p>您可以使用 <code>context</code> 關鍵字，後跟參數列表來宣告屬性和函數的上下文參數，每個參數的形式為 <code>name: Type</code>。以下是一個依賴 <code>UserService</code> 介面的範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UserService 定義了上下文所需的依賴 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findUserById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 宣告帶有上下文參數的函數</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> outputMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用來自上下文的 log</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Log: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 宣告帶有上下文參數的屬性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstUser: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用來自上下文的 findUserById    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findUserById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>您可以使用 <code>_</code> 作為上下文參數名稱。在這種情況下，參數的值可用於解析，但在區塊內部無法透過名稱存取：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 &quot;_&quot; 作為上下文參數名稱</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> logWelcome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 從 UserService 找到合適的 log 函數</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outputMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="如何啟用上下文參數" tabindex="-1">如何啟用上下文參數 <a class="header-anchor" href="#如何啟用上下文參數" aria-label="Permalink to &quot;如何啟用上下文參數&quot;">​</a></h4><p>要在專案中啟用上下文參數，請在命令列中使用以下編譯器選項：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xcontext-parameters</span></span></code></pre></div><p>或者將其添加到 Gradle 構建檔案的 <code>compilerOptions {}</code> 區塊中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xcontext-parameters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>同時指定 <code>-Xcontext-receivers</code> 和 <code>-Xcontext-parameters</code> 編譯器選項會導致錯誤。</p></div><h4 id="留下您的回饋" tabindex="-1">留下您的回饋 <a class="header-anchor" href="#留下您的回饋" aria-label="Permalink to &quot;留下您的回饋&quot;">​</a></h4><p>此功能計劃在未來的 Kotlin 版本中穩定並改進。 我們感謝您在我們的問題追蹤器 <a href="https://youtrack.jetbrains.com/issue/KT-10468/Context-Parameters-expanding-extension-receivers-to-work-with-scopes" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p>`,19)),a(n,{id:"上下文敏感解析預覽",level:"3",title:"上下文敏感解析預覽",labelRef:"experimental-general"}),s[3]||(s[3]=i(` <p>Kotlin 2.2.0 在預覽版中引入了上下文敏感解析的實作。</p><p>以前，即使可以從上下文中推斷型別，您也必須寫出列舉項目或密封類別成員的完整名稱。 例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Problem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CONNECTION, AUTHENTICATION, DATABASE, UNKNOWN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(problem: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Problem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (problem) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Problem.CONNECTION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;connection&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Problem.AUTHENTICATION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;authentication&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Problem.DATABASE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;database&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Problem.UNKNOWN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;unknown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>現在，透過上下文敏感解析，您可以在已知預期型別的上下文中省略型別名稱：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Problem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CONNECTION, AUTHENTICATION, DATABASE, UNKNOWN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 根據已知問題類型解析列舉項目</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(problem: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Problem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (problem) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CONNECTION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;connection&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AUTHENTICATION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;authentication&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DATABASE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;database&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    UNKNOWN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;unknown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>編譯器使用此上下文型別資訊來解析正確的成員。此資訊除其他外，包括：</p><ul><li><code>when</code> 表達式的主體</li><li>顯式回傳型別</li><li>宣告的變數型別</li><li>型別檢查 (<code>is</code>) 和型別轉換 (<code>as</code>)</li><li>密封類別繼承結構的已知型別</li><li>參數的宣告型別</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>上下文敏感解析不適用於函數、帶有參數的屬性或帶有接收器的擴充屬性。</p></div><p>要在專案中試用上下文敏感解析，請在命令列中使用以下編譯器選項：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xcontext-sensitive-resolution</span></span></code></pre></div><p>或者將其添加到 Gradle 構建檔案的 <code>compilerOptions {}</code> 區塊中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xcontext-sensitive-resolution&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>我們計劃在未來的 Kotlin 版本中穩定並改進此功能，並感謝您在我們的問題追蹤器 <a href="https://youtrack.jetbrains.com/issue/KT-16768/Context-sensitive-resolution" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p>`,14)),a(n,{id:"註解使用站點目標功能預覽",level:"3",title:"註解使用站點目標功能預覽",labelRef:"experimental-general"}),s[4]||(s[4]=o("p",null,"Kotlin 2.2.0 引入了幾項功能，使處理註解使用站點目標更加方便。",-1)),a(n,{id:"屬性的-all-中繼目標",level:"4",title:"屬性的 `@all` 中繼目標",labelRef:"experimental-general"}),s[5]||(s[5]=i(`<p>Kotlin 允許您將註解附加到宣告的特定部分，稱為<a href="/zh-Hant/kotlin/annotations#annotation-use-site-targets">使用站點目標</a>。然而，單獨註解每個目標既複雜又容易出錯：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      // </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">建構子參數</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      // </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">支援欄位</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        // </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Getter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   // </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Kotlin</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 屬性參照</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondaryEmail: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>為簡化此過程，Kotlin 為屬性引入了新的 <code>@all</code> 中繼目標。 此功能會告訴編譯器將註解應用於屬性的所有相關部分。當您使用它時，<code>@all</code> 會嘗試將註解應用於：</p><ul><li><p><strong><code>param</code></strong>：建構子參數，如果它在主建構子中宣告。</p></li><li><p><strong><code>property</code></strong>：Kotlin 屬性本身。</p></li><li><p><strong><code>field</code></strong>：支援欄位，如果它存在。</p></li><li><p><strong><code>get</code></strong>：Getter 方法。</p></li><li><p><strong><code>set_param</code></strong>：Setter 方法的參數，如果屬性定義為 <code>var</code>。</p></li><li><p><strong><code>RECORD_COMPONENT</code></strong>：如果類別是 <code>@JvmRecord</code>，則註解會應用於 <a href="#improved-support-for-annotating-jvm-records">Java 記錄組件</a>。此行為模擬了 Java 處理記錄組件上註解的方式。</p></li></ul><p>編譯器只會將註解應用於給定屬性的目標。</p><p>在下面的範例中，<code>@Email</code> 註解應用於每個屬性的所有相關目標：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 將 @Email 應用於 param、property、field、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // get 和 set_param (如果是 var)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> val</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 將 @Email 應用於 property、field 和 getter </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // (沒有 param，因為它不在建構子中)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> val</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> secondaryEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? = </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以將 <code>@all</code> 中繼目標與任何屬性一起使用，無論是在主建構子內部還是外部。但是，您不能將 <code>@all</code> 中繼目標與<a href="https://kotlinlang.org/spec/syntax-and-grammar.html#grammar-rule-annotation" target="_blank" rel="noreferrer">多個註解</a>一起使用。</p><p>這項新功能簡化了語法、確保了一致性，並改善了與 Java 記錄的互通性。</p><p>要在專案中啟用 <code>@all</code> 中繼目標，請在命令列中使用以下編譯器選項：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xannotation-target-all</span></span></code></pre></div><p>或者將其添加到 Gradle 構建檔案的 <code>compilerOptions {}</code> 區塊中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xannotation-target-all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此功能目前處於預覽階段。請向我們的問題追蹤器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 報告任何問題。 有關 <code>@all</code> 中繼目標的更多資訊，請閱讀此 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/annotation-target-in-properties.md" target="_blank" rel="noreferrer">KEEP</a> 提案。</p>`,14)),a(n,{id:"註解使用站點目標的新預設規則",level:"4",title:"註解使用站點目標的新預設規則",labelRef:"experimental-general"}),s[6]||(s[6]=i(`<p>Kotlin 2.2.0 引入了新的預設規則，用於將註解傳播到參數、欄位和屬性。以前，註解預設僅應用於 <code>param</code>、<code>property</code> 或 <code>field</code> 之一，現在的預設行為更符合註解的預期。</p><p>如果有多個適用目標，則選擇一個或多個目標，如下所示：</p><ul><li>如果建構子參數目標 (<code>param</code>) 適用，則使用它。</li><li>如果屬性目標 (<code>property</code>) 適用，則使用它。</li><li>如果欄位目標 (<code>field</code>) 適用而 <code>property</code> 不適用，則使用 <code>field</code>。</li></ul><p>如果有多個目標，並且 <code>param</code>、<code>property</code> 或 <code>field</code> 都不適用，則註解會導致錯誤。</p><p>要啟用此功能，請將其添加到 Gradle 構建檔案的 <code>compilerOptions {}</code> 區塊中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xannotation-default-target=param-property&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>或者使用編譯器的命令列參數：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xannotation-default-target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">param-property</span></span></code></pre></div><p>如果您想使用舊行為，您可以：</p><ul><li><p>在特定情況下，明確定義必要的目標，例如，使用 <code>@param:Annotation</code> 而不是 <code>@Annotation</code>。</p></li><li><p>對於整個專案，請在 Gradle 構建檔案中使用此旗標：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xannotation-default-target=first-only&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>此功能目前處於預覽階段。請向我們的問題追蹤器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 報告任何問題。 有關註解使用站點目標的新預設規則的更多資訊，請閱讀此 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/annotation-target-in-properties.md" target="_blank" rel="noreferrer">KEEP</a> 提案。</p>`,11)),a(n,{id:"支援巢狀型別別名",level:"3",title:"支援巢狀型別別名",labelRef:"beta"}),s[7]||(s[7]=i(`<p>以前，您只能在 Kotlin 檔案的頂層宣告<a href="/zh-Hant/kotlin/type-aliases">型別別名</a>。這意味著即使是內部或領域特定型別別名也必須存在於使用它們的類別之外。</p><p>從 2.2.0 開始，您可以在其他宣告內部定義型別別名，只要它們不捕獲其外部類別的型別參數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dijkstra</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VisitedNodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> step</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(visited: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VisitedNodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>巢狀型別別名有一些額外的限制，例如無法提及型別參數。請查閱<a href="/zh-Hant/kotlin/type-aliases#nested-type-aliases">文件</a>以瞭解完整的規則集。</p><p>巢狀型別別名透過改善封裝、減少套件層級的雜亂並簡化內部實作，實現了更清晰、更易於維護的程式碼。</p><h4 id="如何啟用巢狀型別別名" tabindex="-1">如何啟用巢狀型別別名 <a class="header-anchor" href="#如何啟用巢狀型別別名" aria-label="Permalink to &quot;如何啟用巢狀型別別名&quot;">​</a></h4><p>要在專案中啟用巢狀型別別名，請在命令列中使用以下編譯器選項：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xnested-type-aliases</span></span></code></pre></div><p>或者將其添加到 Gradle 構建檔案的 <code>compilerOptions {}</code> 區塊中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xnested-type-aliases&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="分享您的回饋" tabindex="-1">分享您的回饋 <a class="header-anchor" href="#分享您的回饋" aria-label="Permalink to &quot;分享您的回饋&quot;">​</a></h4><p>巢狀型別別名目前處於 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">Beta</a> 階段。請向我們的問題追蹤器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 報告任何問題。有關此功能的更多資訊，請閱讀此 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/nested-typealias.md" target="_blank" rel="noreferrer">KEEP</a> 提案。</p><h3 id="穩定版功能-守衛條件、非局部-break-和-continue-以及多美元符號插值" tabindex="-1">穩定版功能：守衛條件、非局部 <code>break</code> 和 <code>continue</code>，以及多美元符號插值 <a class="header-anchor" href="#穩定版功能-守衛條件、非局部-break-和-continue-以及多美元符號插值" aria-label="Permalink to &quot;穩定版功能：守衛條件、非局部 \`break\` 和 \`continue\`，以及多美元符號插值&quot;">​</a></h3><p>在 Kotlin 2.1.0 中，以預覽版形式引入了幾項新的語言功能。 我們很高興地宣佈，以下語言功能在此版本中已<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">穩定</a>：</p><ul><li><a href="/zh-Hant/kotlin/whatsnew21#guard-conditions-in-when-with-a-subject">帶有主體的 <code>when</code> 表達式中的守衛條件</a></li><li><a href="/zh-Hant/kotlin/whatsnew21#non-local-break-and-continue">非局部 <code>break</code> 和 <code>continue</code></a></li><li><a href="/zh-Hant/kotlin/whatsnew21#multi-dollar-string-interpolation">多美元符號插值：改進字串字面值中 <code>$</code> 的處理</a></li></ul><p><a href="/zh-Hant/kotlin/kotlin-language-features-and-proposals">查看 Kotlin 語言設計功能和提案的完整列表</a>。</p>`,16)),a(n,{id:"kotlin-編譯器-統一管理編譯器警告",level:"2",title:"Kotlin 編譯器：統一管理編譯器警告",labelRef:"experimental-general"}),s[8]||(s[8]=i(`<p>Kotlin 2.2.0 引入了一個新的編譯器選項 <code>-Xwarning-level</code>。它旨在提供一種統一的方式來管理 Kotlin 專案中的編譯器警告。</p><p>以前，您只能應用一般的模組範圍規則，例如使用 <code>-nowarn</code> 禁用所有警告，使用 <code>-Werror</code> 將所有警告變為編譯錯誤，或使用 <code>-Wextra</code> 啟用額外編譯器檢查。針對特定警告進行調整的唯一選項是 <code>-Xsuppress-warning</code> 選項。</p><p>透過新解決方案，您可以覆寫一般規則並以一致的方式排除特定診斷。</p><h3 id="如何應用" tabindex="-1">如何應用 <a class="header-anchor" href="#如何應用" aria-label="Permalink to &quot;如何應用&quot;">​</a></h3><p>新的編譯器選項具有以下語法：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xwarning-level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DIAGNOSTIC_NAME:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warning</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><code>error</code>：將指定的警告提升為錯誤。</li><li><code>warning</code>：發出警告並預設啟用。</li><li><code>disabled</code>：完全抑制模組範圍內指定的警告。</li></ul><p>請記住，您只能使用新的編譯器選項配置<strong>警告</strong>的嚴重性層級。</p><h3 id="用例" tabindex="-1">用例 <a class="header-anchor" href="#用例" aria-label="Permalink to &quot;用例&quot;">​</a></h3><p>透過新解決方案，您可以透過將一般規則與特定規則結合，更好地微調專案中的警告報告。 選擇您的用例：</p><h4 id="抑制警告" tabindex="-1">抑制警告 <a class="header-anchor" href="#抑制警告" aria-label="Permalink to &quot;抑制警告&quot;">​</a></h4><table tabindex="0"><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><a href="/zh-Hant/kotlin/compiler-reference#nowarn"><code>-nowarn</code></a></td><td>在編譯期間抑制所有警告。</td></tr><tr><td><code>-Xwarning-level=DIAGNOSTIC_NAME:disabled</code></td><td>僅抑制指定的警告。</td></tr><tr><td><code>-nowarn -Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>抑制所有警告，除了指定的警告。</td></tr></tbody></table><h4 id="將警告提升為錯誤" tabindex="-1">將警告提升為錯誤 <a class="header-anchor" href="#將警告提升為錯誤" aria-label="Permalink to &quot;將警告提升為錯誤&quot;">​</a></h4><table tabindex="0"><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><a href="/zh-Hant/kotlin/compiler-reference#werror"><code>-Werror</code></a></td><td>將所有警告提升為編譯錯誤。</td></tr><tr><td><code>-Xwarning-level=DIAGNOSTIC_NAME:error</code></td><td>僅將指定警告提升為錯誤。</td></tr><tr><td><code>-Werror -Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>將所有警告提升為錯誤，除了指定的警告。</td></tr></tbody></table><h4 id="啟用額外編譯器警告" tabindex="-1">啟用額外編譯器警告 <a class="header-anchor" href="#啟用額外編譯器警告" aria-label="Permalink to &quot;啟用額外編譯器警告&quot;">​</a></h4><table tabindex="0"><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td><a href="/zh-Hant/kotlin/compiler-reference#wextra"><code>-Wextra</code></a></td><td>啟用所有額外的宣告、表達式和型別編譯器檢查，如果為 true 則會發出警告。</td></tr><tr><td><code>-Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>僅啟用指定額外的編譯器檢查。</td></tr><tr><td><code>-Wextra -Xwarning-level=DIAGNOSTIC_NAME:disabled</code></td><td>啟用所有額外的檢查，除了指定的檢查。</td></tr></tbody></table><h4 id="警告列表" tabindex="-1">警告列表 <a class="header-anchor" href="#警告列表" aria-label="Permalink to &quot;警告列表&quot;">​</a></h4><p>如果您有很多要從一般規則中排除的警告，您可以透過 <a href="/zh-Hant/kotlin/compiler-reference#argfile"><code>@argfile</code></a> 將它們列在單獨的檔案中。</p><h3 id="留下回饋" tabindex="-1">留下回饋 <a class="header-anchor" href="#留下回饋" aria-label="Permalink to &quot;留下回饋&quot;">​</a></h3><p>新的編譯器選項仍處於 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a> 階段。請向我們的問題追蹤器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 報告任何問題。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 2.2.0 為 JVM 帶來了許多更新。編譯器現在支援 Java 24 位元組碼，並引入了介面函數預設方法生成的變更。此版本還簡化了在 Kotlin 元資料中處理註解，改進了 Java 與內聯值類別的互通性，並包含了對註解 JVM 記錄的更好支援。</p><h3 id="介面函數預設方法生成的變更" tabindex="-1">介面函數預設方法生成的變更 <a class="header-anchor" href="#介面函數預設方法生成的變更" aria-label="Permalink to &quot;介面函數預設方法生成的變更&quot;">​</a></h3><p>從 Kotlin 2.2.0 開始，除非另行配置，否則介面中宣告的函數將被編譯為 JVM 預設方法。 此變更會影響 Kotlin 介面函數及其實作如何被編譯為位元組碼。</p><p>此行為由新的穩定編譯器選項 <code>-jvm-default</code> 控制，該選項取代了已棄用的 <code>-Xjvm-default</code> 選項。</p><p>您可以使用以下值控制 <code>-jvm-default</code> 選項的行為：</p><ul><li><code>enable</code> (預設)：在介面中生成預設實作，並在子類別和 <code>DefaultImpls</code> 類別中包含橋接函數。使用此模式可以保持與舊版 Kotlin 的二進位相容性。</li><li><code>no-compatibility</code>：僅在介面中生成預設實作。此模式跳過相容性橋接和 <code>DefaultImpls</code> 類別，使其適用於新程式碼。</li><li><code>disable</code>：禁用介面中的預設實作。僅生成橋接函數和 <code>DefaultImpls</code> 類別，符合 Kotlin 2.2.0 之前的行為。</li></ul><p>要配置 <code>-jvm-default</code> 編譯器選項，請在 Gradle Kotlin DSL 中設定 <code>jvmDefault</code> 屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmDefault </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JvmDefaultMode.NO_COMPATIBILITY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,29)),a(n,{id:"支援讀寫-kotlin-元資料中的註解",level:"3",title:"支援讀寫 Kotlin 元資料中的註解",labelRef:"experimental-general"}),s[9]||(s[9]=i(`<p>以前，您必須使用反射或位元組碼分析從編譯的 JVM 類別檔案中讀取註解，並根據簽名手動將它們與元資料項目匹配。 此過程容易出錯，特別是對於重載函數。</p><p>現在，在 Kotlin 2.2.0 中，<a href="/zh-Hant/kotlin/metadata-jvm"></a> 引入了對讀取儲存在 Kotlin 元資料中的註解的支援。</p><p>要使註解在您編譯檔案的元資料中可用，請添加以下編譯器選項：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xannotations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-in-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">metadata</span></span></code></pre></div><p>或者，將其添加到 Gradle 構建檔案的 <code>compilerOptions {}</code> 區塊中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xannotations-in-metadata&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>啟用此選項後，Kotlin 編譯器會將註解與 JVM 位元組碼一起寫入元資料，使其可被 <code>kotlin-metadata-jvm</code> 函式庫存取。</p><p>該函式庫提供了以下 API 以存取註解：</p><ul><li><code>KmClass.annotations</code></li><li><code>KmFunction.annotations</code></li><li><code>KmProperty.annotations</code></li><li><code>KmConstructor.annotations</code></li><li><code>KmPropertyAccessorAttributes.annotations</code></li><li><code>KmValueParameter.annotations</code></li><li><code>KmFunction.extensionReceiverAnnotations</code></li><li><code>KmProperty.extensionReceiverAnnotations</code></li><li><code>KmProperty.backingFieldAnnotations</code></li><li><code>KmProperty.delegateFieldAnnotations</code></li><li><code>KmEnumEntry.annotations</code></li></ul><p>這些 API 都是 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>的。 要啟用，請使用 <code>@OptIn(ExperimentalAnnotationsInMetadata::class)</code> 註解。</p><p>以下是從 Kotlin 元資料讀取註解的範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExperimentalAnnotationsInMetadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.metadata.ExperimentalAnnotationsInMetadata</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.metadata.jvm.KotlinClassMetadata</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Message class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Message</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> metadata </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Message::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Metadata::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kmClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (KotlinClassMetadata.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readStrict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(metadata) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KotlinClassMetadata.Class).kmClass</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kmClass.annotations)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 輸出：[@Label(value = StringValue(&quot;Message class&quot;))]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>如果您在專案中使用 <code>kotlin-metadata-jvm</code> 函式庫，我們建議測試和更新您的程式碼以支援註解。 否則，當元資料中的註解在未來的 Kotlin 版本中<a href="https://youtrack.jetbrains.com/issue/KT-75736" target="_blank" rel="noreferrer">預設啟用</a>時，您的專案可能會 產生無效或不完整的元資料。 如果您遇到任何問題，請在我們的<a href="https://youtrack.jetbrains.com/issue/KT-31857" target="_blank" rel="noreferrer">問題追蹤器</a>中報告。</p></div>`,13)),a(n,{id:"改進-java-與內聯值類別的互通性",level:"3",title:"改進 Java 與內聯值類別的互通性",labelRef:"experimental-general"}),s[10]||(s[10]=i(`<p>Kotlin 2.2.0 引入了一個新的實驗性註解：<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.jvm/-jvm-expose-boxed/" target="_blank" rel="noreferrer"><code>@JvmExposeBoxed</code></a>。此註解使從 Java 使用<a href="/zh-Hant/kotlin/inline-classes">內聯值類別</a>變得更容易。</p><p>預設情況下，Kotlin 編譯內聯值類別以使用<strong>解裝箱表示</strong>，這些表示性能更高，但從 Java 使用通常很困難甚至不可能。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PositiveInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在這種情況下，因為該類別是解裝箱的，所以 Java 沒有可呼叫的建構子。Java 也無法觸發 <code>init</code> 區塊以確保 <code>number</code> 是正數。</p><p>當您使用 <code>@JvmExposeBoxed</code> 註解類別時，Kotlin 會生成一個公共建構子，Java 可以直接呼叫該建構子，確保 <code>init</code> 區塊也運行。</p><p>您可以將 <code>@JvmExposeBoxed</code> 註解應用於類別、建構子或函數層級，以對公開給 Java 的內容進行細粒度控制。</p><p>例如，在以下程式碼中，擴充函數 <code>.timesTwoBoxed()</code> <strong>不</strong>可從 Java 存取：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timesTwoBoxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>為了能夠建立 <code>MyInt</code> 類別的實例並從 Java 程式碼呼叫 <code>.timesTwoBoxed()</code> 函數，請將 <code>@JvmExposeBoxed</code> 註解添加到類別和函數中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmExposeBoxed</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmExposeBoxed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timesTwoBoxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>透過這些註解，Kotlin 編譯器會為 <code>MyInt</code> 類別生成一個 Java 可存取的建構子。它還會為使用值類別裝箱形式的擴充函數生成一個重載。因此，以下 Java 程式碼將成功運行：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyInt input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyInt output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExampleKt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timesTwoBoxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input);</span></span></code></pre></div><p>如果您不想註解要公開的內聯值類別的每個部分，您可以有效地將註解應用於整個模組。要將此行為應用於模組，請使用 <code>-Xjvm-expose-boxed</code> 選項編譯它。使用此選項編譯的效果與模組中的每個宣告都帶有 <code>@JvmExposeBoxed</code> 註解相同。</p><p>此新註解不改變 Kotlin 在內部編譯或使用值類別的方式，並且所有現有編譯程式碼仍然有效。它只是添加了新功能以改進 Java 互通性。使用值類別的 Kotlin 程式碼的性能不受影響。</p><p><code>@JvmExposeBoxed</code> 註解對於函式庫作者非常有用，他們希望公開成員函數的裝箱變體並接收裝箱回傳型別。它消除了在內聯值類別（高效但僅限 Kotlin）和資料類別（Java 相容但始終裝箱）之間進行選擇的需要。</p><p>有關 <code>@JvmExposedBoxed</code> 註解的工作原理及其解決的問題的更詳細解釋，請參閱此 <a href="https://github.com/Kotlin/KEEP/blob/jvm-expose-boxed/proposals/jvm-expose-boxed.md" target="_blank" rel="noreferrer">KEEP</a> 提案。</p><h3 id="改進對註解-jvm-記錄的支援" tabindex="-1">改進對註解 JVM 記錄的支援 <a class="header-anchor" href="#改進對註解-jvm-記錄的支援" aria-label="Permalink to &quot;改進對註解 JVM 記錄的支援&quot;">​</a></h3><p>Kotlin 自 Kotlin 1.5.0 起就支援 <a href="/zh-Hant/kotlin/jvm-records">JVM 記錄</a>。現在，Kotlin 2.2.0 改進了 Kotlin 如何處理記錄組件上的註解，特別是關於 Java 的 <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/annotation/ElementType.html#RECORD_COMPONENT" target="_blank" rel="noreferrer"><code>RECORD_COMPONENT</code></a> 目標。</p><p>首先，如果您想使用 <code>RECORD_COMPONENT</code> 作為註解目標，您需要手動為 Kotlin (<code>@Target</code>) 和 Java 添加註解。這是因為 Kotlin 的 <code>@Target</code> 註解不支援 <code>RECORD_COMPONENT</code>。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.CLASS, AnnotationTarget.PROPERTY)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@java.lang.annotation.Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ElementType.CLASS, ElementType.RECORD_COMPONENT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exampleClass</span></span></code></pre></div><p>手動維護這兩個列表容易出錯，因此 Kotlin 2.2.0 引入了一個編譯器警告，如果 Kotlin 和 Java 目標不匹配。例如，如果您在 Java 目標列表中省略 <code>ElementType.CLASS</code>，編譯器會報告：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Incompatible annotation targets: Java target &#39;CLASS&#39; missing, corresponding to Kotlin targets &#39;CLASS&#39;.</span></span></code></pre></div><p>其次，Kotlin 在記錄中傳播註解的行為與 Java 不同。在 Java 中，記錄組件上的註解會自動應用於支援欄位、getter 和建構子參數。Kotlin 預設不這樣做，但您現在可以使用 <a href="#all-meta-target-for-properties"><code>@all:</code> 使用站點目標</a>來複製此行為。</p><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRecord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Positive</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> val</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>當您將 <code>@JvmRecord</code> 與 <code>@all:</code> 一起使用時，Kotlin 現在：</p><ul><li>將註解傳播到屬性、支援欄位、建構子參數和 getter。</li><li>如果註解支援 Java 的 <code>RECORD_COMPONENT</code>，也會將註解應用於記錄組件。</li></ul><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>從 2.2.0 開始，Kotlin/Native 使用 LLVM 19。此版本還帶來了幾項實驗性功能，旨在追蹤和調整記憶體消耗。</p>`,29)),a(n,{id:"按物件記憶體分配",level:"3",title:"按物件記憶體分配",labelRef:"experimental-opt-in"}),s[11]||(s[11]=i('<p>Kotlin/Native 的<a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/runtime/src/alloc/custom/README.md" target="_blank" rel="noreferrer">記憶體分配器</a>現在可以按物件預留記憶體。在某些情況下，這可能幫助您滿足嚴格的記憶體限制或減少應用程式啟動時的記憶體消耗。</p><p>新功能旨在取代 <code>-Xallocator=std</code> 編譯器選項，該選項啟用系統記憶體分配器而非預設分配器。現在，您無需切換記憶體分配器即可禁用緩衝（分配分頁）。</p><p>此功能目前為 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 要啟用它，請在 <code>gradle.properties</code> 檔案中設定以下選項：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.pagedAllocator=false</span></span></code></pre></div><p>請向我們的問題追蹤器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 報告任何問題。</p>',5)),a(n,{id:"支援執行時的-latin-1-編碼字串",level:"3",title:"支援執行時的 Latin-1 編碼字串",labelRef:"experimental-opt-in"}),s[12]||(s[12]=i(`<p>Kotlin 現在支援 Latin-1 編碼字串，類似於 <a href="https://openjdk.org/jeps/254" target="_blank" rel="noreferrer">JVM</a>。這應該有助於減少應用程式的二進位檔案大小並調整記憶體消耗。</p><p>預設情況下，Kotlin 中的字串使用 UTF-16 編碼儲存，其中每個字元由兩個位元組表示。在某些情況下，這會導致字串在二進位檔案中佔用的空間是原始碼的兩倍，並且從簡單的 ASCII 檔案讀取資料可能需要兩倍於將檔案儲存在磁碟上的記憶體。</p><p>相對地，<a href="https://en.wikipedia.org/wiki/ISO/IEC_8859-1" target="_blank" rel="noreferrer">Latin-1 (ISO 8859-1)</a> 編碼僅用一個位元組表示前 256 個 Unicode 字元。啟用 Latin-1 支援後，只要所有字元都在其範圍內，字串就會以 Latin-1 編碼儲存。否則，將使用預設的 UTF-16 編碼。</p><h4 id="如何啟用-latin-1-支援" tabindex="-1">如何啟用 Latin-1 支援 <a class="header-anchor" href="#如何啟用-latin-1-支援" aria-label="Permalink to &quot;如何啟用 Latin-1 支援&quot;">​</a></h4><p>此功能目前為 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 要啟用它，請在 <code>gradle.properties</code> 檔案中設定以下選項：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.latin1Strings=true</span></span></code></pre></div><h4 id="已知問題" tabindex="-1">已知問題 <a class="header-anchor" href="#已知問題" aria-label="Permalink to &quot;已知問題&quot;">​</a></h4><p>只要該功能處於實驗性階段，cinterop 擴充函數 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/pin.html" target="_blank" rel="noreferrer"><code>String.pin</code></a>、<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/use-pinned.html" target="_blank" rel="noreferrer"><code>String.usePinned</code></a> 和 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/ref-to.html" target="_blank" rel="noreferrer"><code>String.refTo</code></a> 的效率會降低。每次呼叫它們都可能觸發自動字串轉換為 UTF-16。</p><p>Kotlin 團隊非常感謝 Google 的同事，特別是 <a href="https://github.com/pyos" target="_blank" rel="noreferrer">Sonya Valchuk</a> 實作此功能。</p><p>有關 Kotlin 中記憶體消耗的更多資訊，請參閱<a href="/zh-Hant/kotlin/native-memory-manager#memory-consumption">文件</a>。</p><h3 id="改進對-apple-平台上記憶體消耗的追蹤" tabindex="-1">改進對 Apple 平台上記憶體消耗的追蹤 <a class="header-anchor" href="#改進對-apple-平台上記憶體消耗的追蹤" aria-label="Permalink to &quot;改進對 Apple 平台上記憶體消耗的追蹤&quot;">​</a></h3><p>從 Kotlin 2.2.0 開始，Kotlin 程式碼分配的記憶體現已標記。這可以幫助您在 Apple 平台上偵錯記憶體問題。</p><p>當檢查應用程式的高記憶體使用量時，您現在可以識別 Kotlin 程式碼保留了多少記憶體。Kotlin 的部分用識別碼標記，可以透過 Xcode Instruments 中的 VM Tracker 等工具進行追蹤。</p><p>此功能預設啟用，但僅在滿足以下<strong>所有</strong>條件時，才在 Kotlin/Native 預設記憶體分配器中可用：</p><ul><li><p><strong>標記啟用</strong>。記憶體應使用有效識別碼標記。Apple 建議數字介於 240 到 255 之間；預設值為 246。</p><p>如果您設定 <code>kotlin.native.binary.mmapTag=0</code> Gradle 屬性，則標記將被禁用。</p></li><li><p><strong>使用 mmap 分配</strong>。分配器應使用 <code>mmap</code> 系統呼叫將檔案映射到記憶體中。</p><p>如果您設定 <code>kotlin.native.binary.disableMmap=true</code> Gradle 屬性，則預設分配器將使用 <code>malloc</code> 而不是 <code>mmap</code>。</p></li><li><p><strong>分頁啟用</strong>。應啟用分配分頁（緩衝）。</p><p>如果您設定 <a href="#per-object-memory-allocation"><code>kotlin.native.binary.pagedAllocator=false</code></a> Gradle 屬性，則記憶體將改為按物件預留。</p></li></ul><p>有關 Kotlin 中記憶體消耗的更多資訊，請參閱<a href="/zh-Hant/kotlin/native-memory-manager#memory-consumption">文件</a>。</p><h3 id="llvm-從-16-更新到-19" tabindex="-1">LLVM 從 16 更新到 19 <a class="header-anchor" href="#llvm-從-16-更新到-19" aria-label="Permalink to &quot;LLVM 從 16 更新到 19&quot;">​</a></h3><p>在 Kotlin 2.2.0 中，我們將 LLVM 從版本 16 更新到 19。 新版本包括性能改進、錯誤修復和安全更新。</p><p>此更新不應影響您的程式碼，但如果您遇到任何問題，請向我們的<a href="http://kotl.in/issue" target="_blank" rel="noreferrer">問題追蹤器</a>報告。</p><h3 id="windows-7-目標已棄用" tabindex="-1">Windows 7 目標已棄用 <a class="header-anchor" href="#windows-7-目標已棄用" aria-label="Permalink to &quot;Windows 7 目標已棄用&quot;">​</a></h3><p>從 Kotlin 2.2.0 開始，最低支援的 Windows 版本已從 Windows 7 提升到 Windows 10。由於 Microsoft 已於 2025 年 1 月終止對 Windows 7 的支援，我們也決定棄用此舊版目標。</p><p>有關更多資訊，請參閱<a href="/zh-Hant/kotlin/native-target-support"></a>。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>在此版本中，<a href="#build-infrastructure-for-wasm-target-separated-from-javascript-target">Wasm 目標的構建基礎設施與 JavaScript 目標分離</a>。此外，您現在可以<a href="#per-project-binaryen-configuration">按專案配置 Binaryen 工具</a>。</p><h3 id="wasm-目標的構建基礎設施與-javascript-目標分離" tabindex="-1">Wasm 目標的構建基礎設施與 JavaScript 目標分離 <a class="header-anchor" href="#wasm-目標的構建基礎設施與-javascript-目標分離" aria-label="Permalink to &quot;Wasm 目標的構建基礎設施與 JavaScript 目標分離&quot;">​</a></h3><p>以前，<code>wasmJs</code> 目標與 <code>js</code> 目標共享相同的基礎設施。因此，兩個目標都託管在相同目錄 (<code>build/js</code>) 中，並使用相同的 NPM 任務和配置。</p><p>現在，<code>wasmJs</code> 目標擁有獨立於 <code>js</code> 目標的基礎設施。這允許 Wasm 任務和型別與 JavaScript 任務和型別不同，實現獨立配置。</p><p>此外，Wasm 相關的專案檔案和 NPM 依賴現在儲存在單獨的 <code>build/wasm</code> 目錄中。</p><p>已為 Wasm 引入了新的 NPM 相關任務，而現有的 JavaScript 任務現在僅專用於 JavaScript：</p><table tabindex="0"><thead><tr><th><strong>Wasm 任務</strong></th><th><strong>JavaScript 任務</strong></th></tr></thead><tbody><tr><td><code>kotlinWasmNpmInstall</code></td><td><code>kotlinNpmInstall</code></td></tr><tr><td><code>wasmRootPackageJson</code></td><td><code>rootPackageJson</code></td></tr></tbody></table><p>同樣，也添加了新的 Wasm 特定宣告：</p><table tabindex="0"><thead><tr><th><strong>Wasm 宣告</strong></th><th><strong>JavaScript 宣告</strong></th></tr></thead><tbody><tr><td><code>WasmNodeJsRootPlugin</code></td><td><code>NodeJsRootPlugin</code></td></tr><tr><td><code>WasmNodeJsPlugin</code></td><td><code>NodeJsPlugin</code></td></tr><tr><td><code>WasmYarnPlugin</code></td><td><code>YarnPlugin</code></td></tr><tr><td><code>WasmNodeJsRootExtension</code></td><td><code>NodeJsRootExtension</code></td></tr><tr><td><code>WasmNodeJsEnvSpec</code></td><td><code>NodeJsEnvSpec</code></td></tr><tr><td><code>WasmYarnRootEnvSpec</code></td><td><code>YarnRootEnvSpec</code></td></tr></tbody></table><p>您現在可以獨立於 JavaScript 目標使用 Wasm 目標，這簡化了配置過程。</p><p>此變更預設啟用，無需額外設定。</p><h3 id="按專案配置-binaryen" tabindex="-1">按專案配置 Binaryen <a class="header-anchor" href="#按專案配置-binaryen" aria-label="Permalink to &quot;按專案配置 Binaryen&quot;">​</a></h3><p>Binaryen 工具用於 Kotlin/Wasm <a href="/zh-Hant/kotlin/whatsnew20#optimized-production-builds-by-default-using-binaryen">優化生產構建</a>，以前在根專案中配置一次。</p><p>現在，您可以按專案或模組配置 Binaryen 工具。此變更符合 Gradle 的最佳實踐，並確保更好地支援<a href="https://docs.gradle.org/current/userguide/isolated_projects.html" target="_blank" rel="noreferrer">專案隔離</a>等功能，從而提高複雜構建中的構建性能和可靠性。</p><p>此外，您現在可以根據需要為不同的模組配置不同版本的 Binaryen。</p><p>此功能預設啟用。但是，如果您有 Binaryen 的自訂配置，您現在需要按專案應用它，而不是僅在根專案中。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>此版本改進了 <a href="#fix-for-copy-in-jsplainobject-interfaces"><code>@JsPlainObject</code> 介面中的 <code>copy()</code> 函數</a>、<a href="#support-for-type-aliases-in-files-with-jsmodule-annotation">帶有 <code>@JsModule</code> 註解檔案中的型別別名</a>以及其他 Kotlin/JS 功能。</p><h3 id="修復-jsplainobject-介面中的-copy" tabindex="-1">修復 <code>@JsPlainObject</code> 介面中的 <code>copy()</code> <a class="header-anchor" href="#修復-jsplainobject-介面中的-copy" aria-label="Permalink to &quot;修復 \`@JsPlainObject\` 介面中的 \`copy()\`&quot;">​</a></h3><p>Kotlin/JS 有一個實驗性插件，稱為 <code>js-plain-objects</code>，它為帶有 <code>@JsPlainObject</code> 註解的介面引入了一個 <code>copy()</code> 函數。您可以使用 <code>copy()</code> 函數來操作物件。</p><p>然而，<code>copy()</code> 的初始實作與繼承不相容，這導致 <code>@JsPlainObject</code> 介面擴展其他介面時出現問題。</p><p>為了避免對普通物件的限制，<code>copy()</code> 函數已從物件本身移動到其伴生物件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsPlainObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SomeUser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 此語法不再有效</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 35</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)      </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 這是正確的語法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user, age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 35</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此變更解決了繼承層次結構中的衝突並消除了歧義。 從 Kotlin 2.2.0 開始，它預設啟用。</p><h3 id="支援帶有-jsmodule-註解檔案中的型別別名" tabindex="-1">支援帶有 <code>@JsModule</code> 註解檔案中的型別別名 <a class="header-anchor" href="#支援帶有-jsmodule-註解檔案中的型別別名" aria-label="Permalink to &quot;支援帶有 \`@JsModule\` 註解檔案中的型別別名&quot;">​</a></h3><p>以前，帶有 <code>@JsModule</code> 註解以從 JavaScript 模組匯入宣告的檔案僅限於外部宣告。這意味著您不能在此類檔案中宣告 <code>typealias</code>。</p><p>從 Kotlin 2.2.0 開始，您可以在標記為 <code>@JsModule</code> 的檔案中宣告型別別名：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">somepackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> somepackage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SomeClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Any</span></span></code></pre></div><p>此變更減少了 Kotlin/JS 互通性限制的一個方面，並且計劃在未來版本中進行更多改進。</p><p>支援帶有 <code>@JsModule</code> 檔案中的型別別名預設啟用。</p><h3 id="支援多平台-expect-宣告中的-jsexport" tabindex="-1">支援多平台 <code>expect</code> 宣告中的 <code>@JsExport</code> <a class="header-anchor" href="#支援多平台-expect-宣告中的-jsexport" aria-label="Permalink to &quot;支援多平台 \`expect\` 宣告中的 \`@JsExport\`&quot;">​</a></h3><p>在 Kotlin 多平台專案中使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer"><code>expect/actual</code> 機制</a>時，無法將 <code>@JsExport</code> 註解用於通用程式碼中的 <code>expect</code> 宣告。</p><p>從此版本開始，您可以直接將 <code>@JsExport</code> 應用於 <code>expect</code> 宣告：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// commonMain</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 之前會產生錯誤，但現在可以正常運作 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WindowManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> acceptWindowManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(manager: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WindowManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// jsMain</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WindowManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您還必須在 JavaScript 來源集中用 <code>@JsExport</code> 註解對應的 <code>actual</code> 實作，並且它必須只使用可匯出型別。</p><p>此修復允許在 <code>commonMain</code> 中定義的共享程式碼正確匯出到 JavaScript。您現在可以將您的多平台程式碼公開給 JavaScript 消費者，而無需使用手動解決方案。</p><p>此變更預設啟用。</p><h3 id="能夠將-jsexport-與-promise-unit-型別一起使用" tabindex="-1">能夠將 <code>@JsExport</code> 與 <code>Promise&lt;Unit&gt;</code> 型別一起使用 <a class="header-anchor" href="#能夠將-jsexport-與-promise-unit-型別一起使用" aria-label="Permalink to &quot;能夠將 \`@JsExport\` 與 \`Promise&lt;Unit&gt;\` 型別一起使用&quot;">​</a></h3><p>以前，當您嘗試使用 <code>@JsExport</code> 註解匯出回傳 <code>Promise&lt;Unit&gt;</code> 型別的函數時，Kotlin 編譯器會產生錯誤。</p><p>雖然像 <code>Promise&lt;Int&gt;</code> 這樣的回傳型別可以正常運作，但使用 <code>Promise&lt;Unit&gt;</code> 會觸發「不可匯出型別」警告，即使它在 TypeScript 中正確映射到 <code>Promise&lt;void&gt;</code>。</p><p>此限制已被移除。現在，以下程式碼編譯時沒有錯誤：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 之前運作正常</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fooInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GlobalScope.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@promise </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 之前會產生錯誤，但現在可以正常運作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fooUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GlobalScope.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此變更移除了 Kotlin/JS 互通模型中不必要的限制。此修復預設啟用。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 2.2.0 完全相容於 Gradle 7.6.3 至 8.14。您也可以使用最新發佈的 Gradle 版本。但是，請注意，這樣做可能會導致棄用警告，並且某些新的 Gradle 功能可能無法運作。</p><p>在此版本中，Kotlin Gradle 插件對其診斷功能進行了多項改進。它還引入了<a href="#binary-compatibility-validation-included-in-kotlin-gradle-plugin">二進位相容性驗證</a>的實驗性整合，使函式庫開發更容易。</p>`,69)),a(n,{id:"二進位相容性驗證包含在-kotlin-gradle-插件中",level:"3",title:"二進位相容性驗證包含在 Kotlin Gradle 插件中",labelRef:"experimental-general"}),s[13]||(s[13]=i(`<p>為了更輕鬆地檢查函式庫版本之間的二進位相容性，我們正在實驗性地將 <a href="https://github.com/Kotlin/binary-compatibility-validator" target="_blank" rel="noreferrer">二進位相容性驗證器</a> 的功能移入 Kotlin Gradle 插件 (KGP) 中。您可以在玩具專案中試用，但我們暫不建議在生產環境中使用。</p><p>原始的 <a href="https://github.com/Kotlin/binary-compatibility-validator" target="_blank" rel="noreferrer">二進位相容性驗證器</a> 將在此實驗階段繼續維護。</p><p>Kotlin 函式庫可以使用兩種二進位格式之一：JVM 類別檔案或 <code>klib</code>。由於這些格式不相容，KGP 會分別處理它們。</p><p>要啟用二進位相容性驗證功能集，請將以下內容添加到 <code>build.gradle.kts</code> 檔案中的 <code>kotlin{}</code> 區塊中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.abi.ExperimentalAbiValidation::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    abiValidation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用 set() 函數以確保與舊版 Gradle 的相容性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        enabled.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果您的專案有多個模組需要檢查二進位相容性，請在每個模組中獨立配置此功能。每個模組都可以有自己的自訂配置。</p><p>啟用後，運行 <code>checkLegacyAbi</code> Gradle 任務以檢查二進位相容性問題。您可以在 IntelliJ IDEA 中或從專案目錄的命令列運行該任務：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gradlew checkLegacyAbi</span></span></code></pre></div><p>此任務會將當前程式碼的應用程式二進位介面 (ABI) 轉儲生成為 UTF-8 文字檔案。然後，該任務會將新轉儲與先前版本的轉儲進行比較。如果任務發現任何差異，它會將其報告為錯誤。審查錯誤後，如果您決定變更可接受，您可以透過運行 <code>updateLegacyAbi</code> Gradle 任務來更新參考 ABI 轉儲。</p><h4 id="過濾類別" tabindex="-1">過濾類別 <a class="header-anchor" href="#過濾類別" aria-label="Permalink to &quot;過濾類別&quot;">​</a></h4><p>此功能允許您在 ABI 轉儲中過濾類別。您可以透過名稱或部分名稱，或透過標記它們的註解（或註解名稱的部分）明確包含或排除類別。</p><p>例如，此範例排除了 <code>com.company</code> 套件中的所有類別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.abi.ExperimentalAbiValidation::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    abiValidation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        filters.excluded.byNames.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.company.**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>請查閱 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.dsl.abi/" target="_blank" rel="noreferrer">KGP API 參考</a> 以瞭解有關配置二進位相容性驗證器的更多資訊。</p><h4 id="多平台限制" tabindex="-1">多平台限制 <a class="header-anchor" href="#多平台限制" aria-label="Permalink to &quot;多平台限制&quot;">​</a></h4><p>在多平台專案中，如果您的主機不支援所有目標的交叉編譯，KGP 會嘗試透過檢查其他目標的 ABI 轉儲來推斷不支援目標的 ABI 變更。這種方法有助於避免如果您稍後切換到<strong>可以</strong>編譯所有目標的主機時出現錯誤的驗證失敗。</p><p>您可以更改此預設行為，使 KGP 不會推斷不支援目標的 ABI 變更，方法是將以下內容添加到您的 <code>build.gradle.kts</code> 檔案中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.abi.ExperimentalAbiValidation::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    abiValidation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        klib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            keepUnsupportedTargets </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然而，如果您的專案中有不支援的目標，運行 <code>checkLegacyAbi</code> 任務會失敗，因為該任務無法建立 ABI 轉儲。如果檢查失敗比因從其他目標推斷的 ABI 變更而錯過不相容的變更更重要，則此行為可能是可取的。</p><h3 id="支援-kotlin-gradle-插件在控制台中豐富輸出" tabindex="-1">支援 Kotlin Gradle 插件在控制台中豐富輸出 <a class="header-anchor" href="#支援-kotlin-gradle-插件在控制台中豐富輸出" aria-label="Permalink to &quot;支援 Kotlin Gradle 插件在控制台中豐富輸出&quot;">​</a></h3><p>在 Kotlin 2.2.0 中，我們支援 Gradle 構建過程中控制台中的顏色和其他豐富輸出，使報告的診斷資訊更容易閱讀和理解。</p><p>豐富輸出在 Linux 和 macOS 支援的終端模擬器中可用，我們正在努力為 Windows 添加支援。</p><p><img src="`+l+'" alt="Gradle console" width="600"></p><p>此功能預設啟用，但如果您想覆寫它，請將以下 Gradle 屬性添加到您的 <code>gradle.properties</code> 檔案中：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.gradle.console=plain</span></span></code></pre></div><p>有關此屬性及其選項的更多資訊，請參閱 Gradle 文件中關於<a href="https://docs.gradle.org/current/userguide/command_line_interface.html#sec:command_line_customizing_log_format" target="_blank" rel="noreferrer">自訂日誌格式</a>的部分。</p><h3 id="將-problems-api-整合到-kgp-診斷中" tabindex="-1">將 Problems API 整合到 KGP 診斷中 <a class="header-anchor" href="#將-problems-api-整合到-kgp-診斷中" aria-label="Permalink to &quot;將 Problems API 整合到 KGP 診斷中&quot;">​</a></h3><p>以前，Kotlin Gradle 插件 (KGP) 只能將警告和錯誤等診斷報告為純文字輸出到控制台或日誌中。</p><p>從 2.2.0 開始，KGP 引入了一種額外的報告機制：它現在使用 <a href="https://docs.gradle.org/current/kotlin-dsl/gradle/org.gradle.api.problems/index.html" target="_blank" rel="noreferrer">Gradle 的 Problems API</a>，這是一種標準化的方式，用於在構建過程中報告豐富、結構化的問題資訊。</p><p>現在，KGP 診斷更容易閱讀，並且在不同的介面中顯示更一致，例如 Gradle CLI 和 IntelliJ IDEA。</p><p>從 Gradle 8.6 或更高版本開始，此整合預設啟用。 由於 API 仍在發展中，請使用最新的 Gradle 版本以受益於最新的改進。</p><h3 id="kgp-與-warning-mode-的相容性" tabindex="-1">KGP 與 <code>--warning-mode</code> 的相容性 <a class="header-anchor" href="#kgp-與-warning-mode-的相容性" aria-label="Permalink to &quot;KGP 與 `--warning-mode` 的相容性&quot;">​</a></h3><p>Kotlin Gradle 插件 (KGP) 診斷報告問題時使用固定的嚴重性層級，這意味著 Gradle 的 <a href="https://docs.gradle.org/current/userguide/command_line_interface.html#sec:command_line_warnings" target="_blank" rel="noreferrer"><code>--warning-mode</code> 命令列選項</a> 對 KGP 顯示錯誤的方式沒有影響。</p><p>現在，KGP 診斷與 <code>--warning-mode</code> 選項相容，提供了更大的靈活性。例如，您可以將所有警告轉換為錯誤或完全禁用警告。</p><p>透過此變更，KGP 診斷會根據選定的警告模式調整輸出：</p><ul><li>當您設定 <code>--warning-mode=fail</code> 時，<code>Severity.Warning</code> 的診斷現在會提升為 <code>Severity.Error</code>。</li><li>當您設定 <code>--warning-mode=none</code> 時，<code>Severity.Warning</code> 的診斷不會被記錄。</li></ul><p>此行為從 2.2.0 開始預設啟用。</p><p>要忽略 <code>--warning-mode</code> 選項，請將以下 Gradle 屬性設定到您的 <code>gradle.properties</code> 檔案中：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.internal.diagnostics.ignoreWarningMode=true</span></span></code></pre></div>',39)),a(n,{id:"新的實驗性構建工具-api",level:"2",title:"新的實驗性構建工具 API",labelRef:"experimental-general"}),s[14]||(s[14]=i(`<p>您可以將 Kotlin 與各種構建系統一起使用，例如 Gradle、Maven、Amper 等。然而，將 Kotlin 整合到每個系統中以支援完整功能集，例如增量編譯以及與 Kotlin 編譯器插件、守護程序和 Kotlin 多平台的相容性，需要付出大量努力。</p><p>為簡化此過程，Kotlin 2.2.0 引入了一個新的實驗性構建工具 API (BTA)。BTA 是一個通用 API，作為構建系統和 Kotlin 編譯器生態系統之間的抽象層。透過這種方法，每個構建系統只需支援單一 BTA 入口點。</p><p>目前，BTA 僅支援 Kotlin/JVM。JetBrains 的 Kotlin 團隊已在 Kotlin Gradle 插件 (KGP) 和 <code>kotlin-maven-plugin</code> 中使用它。您可以透過這些插件試用 BTA，但 API 本身尚未準備好用於您自己的構建工具整合的一般使用。如果您對 BTA 提案感到好奇或想分享您的回饋，請參閱此 <a href="https://github.com/Kotlin/KEEP/issues/421" target="_blank" rel="noreferrer">KEEP</a> 提案。</p><p>要在以下情況下試用 BTA：</p><ul><li>KGP，將以下屬性添加到您的 <code>gradle.properties</code> 檔案中：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.compiler.runViaBuildToolsApi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><ul><li>Maven，您無需執行任何操作。它預設啟用。</li></ul><p>BTA 目前對 Maven 插件沒有直接好處，但它為更快地交付新功能奠定了堅實基礎，例如<a href="https://youtrack.jetbrains.com/issue/KT-77587/Maven-Introduce-Kotlin-daemon-support-and-make-it-enabled-by-default" target="_blank" rel="noreferrer">支援 Kotlin 守護程序</a>和<a href="https://youtrack.jetbrains.com/issue/KT-77086/Stabilize-incremental-compilation-in-Maven" target="_blank" rel="noreferrer">增量編譯的穩定化</a>。</p><p>對於 KGP，使用 BTA 已經具有以下好處：</p><ul><li><a href="#improved-in-process-compiler-execution-strategy">改進「進程內」編譯器執行策略</a></li><li><a href="#flexibility-to-configure-different-compiler-versions-from-kotlin">更靈活地從 Kotlin 配置不同編譯器版本</a></li></ul><h3 id="改進「進程內」編譯器執行策略" tabindex="-1">改進「進程內」編譯器執行策略 <a class="header-anchor" href="#改進「進程內」編譯器執行策略" aria-label="Permalink to &quot;改進「進程內」編譯器執行策略&quot;">​</a></h3><p>KGP 支援三種 <a href="/zh-Hant/kotlin/gradle-compilation-and-caches#defining-kotlin-compiler-execution-strategy">Kotlin 編譯器執行策略</a>。以前，「進程內」策略（在 Gradle 守護程序進程中執行編譯器）不支援增量編譯。</p><p>現在，使用 BTA，「進程內」策略<strong>確實</strong>支援增量編譯。要使用它，請將以下屬性添加到您的 <code>gradle.properties</code> 檔案中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.compiler.execution.strategy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=in-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span></span></code></pre></div><h3 id="從-kotlin-配置不同編譯器版本的靈活性" tabindex="-1">從 Kotlin 配置不同編譯器版本的靈活性 <a class="header-anchor" href="#從-kotlin-配置不同編譯器版本的靈活性" aria-label="Permalink to &quot;從 Kotlin 配置不同編譯器版本的靈活性&quot;">​</a></h3><p>有時您可能希望在程式碼中使用較新的 Kotlin 編譯器版本，同時保持 KGP 為舊版本 — 例如，在嘗試新語言功能的同時處理構建腳本棄用。或者您可能想更新 KGP 的版本，但保留舊的 Kotlin 編譯器版本。</p><p>BTA 使這一切成為可能。以下是您如何在 <code>build.gradle.kts</code> 檔案中配置它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.buildtools.api.ExperimentalBuildToolsApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0-SNAPSHOT&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalBuildToolsApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilerVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.1.21&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 與 2.2.0 不同的版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>BTA 支援配置 KGP 和 Kotlin 編譯器版本，可與前三個主要版本和一個後續主要版本一起使用。因此在 KGP 2.2.0 中，支援 Kotlin 編譯器版本 2.1.x、2.0.x 和 1.9.25。KGP 2.2.0 也與未來的 Kotlin 編譯器版本 2.2.x 和 2.3.x 相容。</p><p>然而，請記住，將不同編譯器版本與編譯器插件一起使用可能會導致 Kotlin 編譯器異常。Kotlin 團隊計劃在未來版本中解決這些問題。</p><p>透過這些插件試用 BTA，並在 <a href="https://youtrack.jetbrains.com/issue/KT-56574" target="_blank" rel="noreferrer">KGP</a> 和 <a href="https://youtrack.jetbrains.com/issue/KT-73012" target="_blank" rel="noreferrer">Maven 插件</a> 的專用 YouTrack 票證中向我們發送您的回饋。</p><h2 id="kotlin-標準函式庫" tabindex="-1">Kotlin 標準函式庫 <a class="header-anchor" href="#kotlin-標準函式庫" aria-label="Permalink to &quot;Kotlin 標準函式庫&quot;">​</a></h2><p>在 Kotlin 2.2.0 中，<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io.encoding/-base64/" target="_blank" rel="noreferrer"><code>Base64</code> API</a> 和 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.text/-hex-format/" target="_blank" rel="noreferrer"><code>HexFormat</code> API</a> 現已<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">穩定</a>。</p><h3 id="穩定的-base64-編碼和解碼" tabindex="-1">穩定的 Base64 編碼和解碼 <a class="header-anchor" href="#穩定的-base64-編碼和解碼" aria-label="Permalink to &quot;穩定的 Base64 編碼和解碼&quot;">​</a></h3><p>Kotlin 1.8.20 引入了對 <a href="/zh-Hant/kotlin/whatsnew1820#support-for-base64-encoding">Base64 編碼和解碼的實驗性支援</a>。 在 Kotlin 2.2.0 中，<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io.encoding/-base64/" target="_blank" rel="noreferrer">Base64 API</a> 現已<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">穩定</a>，並包含四種編碼方案，其中此版本新增了 <code>Base64.Pem</code>：</p><ul><li><p><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io.encoding/-base64/-default/" target="_blank" rel="noreferrer"><code>Base64.Default</code></a> 使用標準的 <a href="https://www.rfc-editor.org/rfc/rfc4648#section-4" target="_blank" rel="noreferrer">Base64 編碼方案</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>Base64.Default</code> 是 <code>Base64</code> 類別的伴生物件。 因此，您可以直接呼叫其函數，例如 <code>Base64.encode()</code> 和 <code>Base64.decode()</code>，而不是 <code>Base64.Default.encode()</code> 和 <code>Base64.Default.decode()</code>。</p></div></li><li><p><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io.encoding/-base64/-default/-url-safe.html" target="_blank" rel="noreferrer"><code>Base64.UrlSafe</code></a> 使用「<a href="https://www.rfc-editor.org/rfc/rfc4648#section-5" target="_blank" rel="noreferrer">URL 和檔案安全</a>」編碼方案。</p></li><li><p><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io.encoding/-base64/-default/-mime.html" target="_blank" rel="noreferrer"><code>Base64.Mime</code></a> 使用 <a href="https://www.rfc-editor.org/rfc/rfc2045#section-6.8" target="_blank" rel="noreferrer">MIME</a> 編碼方案，在編碼期間每 76 個字元插入一個行分隔符，並在解碼期間跳過非法字元。</p></li><li><p><code>Base64.Pem</code> 像 <code>Base64.Mime</code> 一樣編碼資料，但將行長度限制為 64 個字元。</p></li></ul><p>您可以使用 Base64 API 將二進位資料編碼為 Base64 字串，然後將其解碼回位元組。</p><p>以下是一個範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.Default.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foBytes) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Zm8=&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base64.encode(foBytes)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foobarBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foobarBytes) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Zm9vYmFy&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.Default.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Zm8=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foBytes</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base64.decode(&quot;Zm8=&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Zm9vYmFy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foobarBytes</span></span></code></pre></div><p>在 JVM 上，使用 <code>.encodingWith()</code> 和 <code>.decodingWith()</code> 擴充函數對帶有輸入和輸出串流的 Base64 進行編碼和解碼：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.io.encoding.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.io.ByteArrayOutputStream</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ByteArrayOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodingWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base64.Default)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    base64Output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World!!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 輸出：SGVsbG8gV29ybGQhIQ==</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="使用-hexformat-api-穩定進行十六進位解析和格式化" tabindex="-1">使用 <code>HexFormat</code> API 穩定進行十六進位解析和格式化 <a class="header-anchor" href="#使用-hexformat-api-穩定進行十六進位解析和格式化" aria-label="Permalink to &quot;使用 \`HexFormat\` API 穩定進行十六進位解析和格式化&quot;">​</a></h3><p>在 <a href="/zh-Hant/kotlin/whatsnew19#new-hexformat-class-to-format-and-parse-hexadecimals">Kotlin 1.9.0</a> 中引入的 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.text/-hex-format/" target="_blank" rel="noreferrer"><code>HexFormat</code> API</a> 現已<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">穩定</a>。您可以使用它在數值和十六進位字串之間進行轉換。</p><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">93</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關更多資訊，請參閱<a href="/zh-Hant/kotlin/whatsnew19#new-hexformat-class-to-format-and-parse-hexadecimals">新的 HexFormat 類別，用於格式化和解析十六進位數</a>。</p><h2 id="compose-編譯器" tabindex="-1">Compose 編譯器 <a class="header-anchor" href="#compose-編譯器" aria-label="Permalink to &quot;Compose 編譯器&quot;">​</a></h2><p>在此版本中，Compose 編譯器引入了對可組合函數參照的支援，並更改了幾個功能標誌的預設值。</p><h3 id="支援-composable-函數參照" tabindex="-1">支援 <code>@Composable</code> 函數參照 <a class="header-anchor" href="#支援-composable-函數參照" aria-label="Permalink to &quot;支援 \`@Composable\` 函數參照&quot;">​</a></h3><p>Compose 編譯器從 Kotlin 2.2.0 版本開始支援可組合函數參照的宣告和使用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (String) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My App&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>可組合函數參照在執行時的行為與可組合 lambda 物件略有不同。特別是，可組合 lambda 透過擴展 <code>ComposableLambda</code> 類別來實現對跳過更精細的控制。函數參照預計將實作 <code>KCallable</code> 介面，因此相同的優化不能應用於它們。</p><h3 id="pausablecomposition-功能標誌預設啟用" tabindex="-1"><code>PausableComposition</code> 功能標誌預設啟用 <a class="header-anchor" href="#pausablecomposition-功能標誌預設啟用" aria-label="Permalink to &quot;\`PausableComposition\` 功能標誌預設啟用&quot;">​</a></h3><p>從 Kotlin 2.2.0 開始，<code>PausableComposition</code> 功能標誌預設啟用。此標誌會調整 Compose 編譯器針對可重新啟動函數的輸出，允許執行時強制跳過行為，從而透過跳過每個函數來有效地暫停組合。這使得繁重的組合可以在幀之間分割，這將在未來的版本中用於預取。</p><p>要禁用此功能標誌，請將以下內容添加到您的 Gradle 配置中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composeCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    featureFlag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ComposeFeatureFlag.PausableComposition.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="optimizenonskippinggroups-功能標誌預設啟用" tabindex="-1"><code>OptimizeNonSkippingGroups</code> 功能標誌預設啟用 <a class="header-anchor" href="#optimizenonskippinggroups-功能標誌預設啟用" aria-label="Permalink to &quot;\`OptimizeNonSkippingGroups\` 功能標誌預設啟用&quot;">​</a></h3><p>從 Kotlin 2.2.0 開始，<code>OptimizeNonSkippingGroups</code> 功能標誌預設啟用。此優化透過移除為非跳過可組合函數生成的組呼叫來改進執行時性能。它不應導致任何可觀察的行為變化。</p><p>如果您遇到任何問題，可以透過禁用此功能標誌來驗證此變更是否導致問題。請向 <a href="https://issuetracker.google.com/issues/new?component=610764&amp;template=1424126" target="_blank" rel="noreferrer">Jetpack Compose 問題追蹤器</a> 報告任何問題。</p><p>要禁用 <code>OptimizeNonSkippingGroups</code> 標誌，請將以下內容添加到您的 Gradle 配置中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composeCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    featureFlag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ComposeFeatureFlag.OptimizeNonSkippingGroups.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="已棄用的功能標誌" tabindex="-1">已棄用的功能標誌 <a class="header-anchor" href="#已棄用的功能標誌" aria-label="Permalink to &quot;已棄用的功能標誌&quot;">​</a></h3><p><code>StrongSkipping</code> 和 <code>IntrinsicRemember</code> 功能標誌現已棄用，並將在未來版本中移除。如果您遇到任何導致您禁用這些功能標誌的問題，請向 <a href="https://issuetracker.google.com/issues/new?component=610764&amp;template=1424126" target="_blank" rel="noreferrer">Jetpack Compose 問題追蹤器</a> 報告。</p><h2 id="重大變更和棄用" tabindex="-1">重大變更和棄用 <a class="header-anchor" href="#重大變更和棄用" aria-label="Permalink to &quot;重大變更和棄用&quot;">​</a></h2><p>本節重點介紹值得注意的重要重大變更和棄用。有關此版本中所有重大變更和棄用的完整概述，請參閱我們的<a href="/zh-Hant/kotlin/compatibility-guide-22">相容性指南</a>。</p><ul><li><p>從 Kotlin 2.2.0 開始，對 <a href="/zh-Hant/kotlin/ant"></a> 構建系統的支援已棄用。Kotlin 對 Ant 的支援已很久沒有積極開發，並且由於其使用者群體相對較小，因此沒有進一步維護的計劃。</p><p>我們計劃在 2.3.0 中移除 Ant 支援。然而，Kotlin 仍然開放<a href="/zh-Hant/kotlin/contribute">貢獻</a>。如果您有興趣成為 Ant 的外部維護者，請在 <a href="https://youtrack.jetbrains.com/issue/KT-75875/" target="_blank" rel="noreferrer">此 YouTrack 問題</a> 中留下評論並將可見性設定為「jetbrains-team」。</p></li><li><p>Kotlin 2.2.0 <a href="/zh-Hant/kotlin/compatibility-guide-22#deprecate-kotlinoptions-dsl">將 Gradle 中 <code>kotlinOptions{}</code> 區塊的棄用等級提升為錯誤</a>。請改用 <code>compilerOptions{}</code> 區塊。有關更新構建腳本的指南，請參閱<a href="/zh-Hant/kotlin/gradle-compiler-options#migrate-from-kotlinoptions-to-compileroptions">從 <code>kotlinOptions{}</code> 遷移到 <code>compilerOptions{}</code></a>。</p></li><li><p>Kotlin 腳本仍然是 Kotlin 生態系統的重要組成部分，但我們專注於特定用例，例如自訂腳本編寫，以及 <code>gradle.kts</code> 和 <code>main.kts</code> 腳本，以提供更好的體驗。要瞭解更多資訊，請參閱我們更新的<a href="https://blog.jetbrains.com/kotlin/2024/11/state-of-kotlin-scripting-2024/" target="_blank" rel="noreferrer">部落格文章</a>。因此，Kotlin 2.2.0 棄用對以下內容的支援：</p><ul><li>REPL：要繼續透過 <code>kotlinc</code> 使用 REPL，請使用 <code>-Xrepl</code> 編譯器選項啟用。</li><li>JSR-223：由於此 <a href="https://jcp.org/en/jsr/detail?id=223" target="_blank" rel="noreferrer">JSR</a> 處於<strong>已撤銷</strong>狀態，JSR-223 實作將繼續與語言版本 1.9 一起運作，但未來將不會遷移以使用 K2 編譯器。</li><li><code>KotlinScriptMojo</code> Maven 插件：我們沒有看到此插件足夠的關注。如果您繼續使用它，您將會看到編譯器警告。</li></ul></li><li></li><li><p>在 Kotlin 2.2.0 中，<a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-kotlin-compile-tool/#" target="_blank" rel="noreferrer"><code>KotlinCompileTool</code></a> 中的 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-kotlin-compile-tool/set-source.html#" target="_blank" rel="noreferrer"><code>setSource()</code></a> 函數現在<a href="/zh-Hant/kotlin/compatibility-guide-22#correct-setsource-function-in-kotlincompiletool-to-replace-sources">取代了已配置的來源而不是添加它們</a>。如果您想添加來源而不取代現有來源，請使用 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-kotlin-compile-tool/source.html#" target="_blank" rel="noreferrer"><code>source()</code></a> 函數。</p></li><li><p><code>BaseKapt</code> 中 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-base-kapt/annotation-processor-option-providers.html#" target="_blank" rel="noreferrer"><code>annotationProcessorOptionProviders</code></a> 的型別已從 <a href="/zh-Hant/kotlin/compatibility-guide-22#deprecate-basekapt-annotationprocessoroptionproviders-property"><code>MutableList&lt;Any&gt;</code> 變更為 <code>MutableList&lt;CommandLineArgumentProvider&gt;</code></a>。如果您的程式碼目前將列表作為單一元素添加，請使用 <code>addAll()</code> 函數而不是 <code>add()</code> 函數。</p></li><li><p>繼廢棄了用於舊版 Kotlin/JS 後端的死程式碼消除 (DCE) 工具之後，所有與 DCE 相關的 DSL 現已從 Kotlin Gradle 插件中移除：</p><ul><li><code>org.jetbrains.kotlin.gradle.dsl.KotlinJsDce</code> 介面</li><li><code>org.jetbrains.kotlin.gradle.targets.js.dsl.KotlinJsBrowserDsl.dceTask(body: Action&lt;KotlinJsDce&gt;)</code> 函數</li><li><code>org.jetbrains.kotlin.gradle.dsl.KotlinJsDceCompilerToolOptions</code> 介面</li><li><code>org.jetbrains.kotlin.gradle.dsl.KotlinJsDceOptions</code> 介面</li></ul><p>目前的 <a href="/zh-Hant/kotlin/js-ir-compiler">JS IR 編譯器</a> 原生支援 DCE，而 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-export/" target="_blank" rel="noreferrer"><code>@JsExport</code></a> 註解允許指定在 DCE 期間保留哪些 Kotlin 函數和類別。</p></li><li><p>已棄用的 <code>kotlin-android-extensions</code> 插件已<a href="/zh-Hant/kotlin/compatibility-guide-22#deprecate-kotlin-android-extensions-plugin">在 Kotlin 2.2.0 中移除</a>。請改用 <code>kotlin-parcelize</code> 插件作為 <code>Parcelable</code> 實作生成器，並使用 Android Jetpack 的 <a href="https://developer.android.com/topic/libraries/view-binding" target="_blank" rel="noreferrer">視圖綁定</a> 作為合成視圖。</p></li><li><p>實驗性 <code>kotlinArtifacts</code> API 已<a href="/zh-Hant/kotlin/compatibility-guide-22#deprecate-kotlinartifacts-api">在 Kotlin 2.2.0 中棄用</a>。請使用 Kotlin Gradle 插件中可用的當前 DSL 來<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html" target="_blank" rel="noreferrer">構建最終原生二進位檔</a>。如果這不足以進行遷移，請在<a href="https://youtrack.jetbrains.com/issue/KT-74953" target="_blank" rel="noreferrer">此 YT 問題</a>中留下評論。</p></li><li><p>在 Kotlin 1.9.0 中棄用的 <code>KotlinCompilation.source</code> 現已<a href="/zh-Hant/kotlin/compatibility-guide-22#deprecate-kotlincompilation-source-api">從 Kotlin Gradle 插件中移除</a>。</p></li><li><p>實驗性通用化模式的參數已<a href="/zh-Hant/kotlin/compatibility-guide-22#deprecate-commonization-parameters">在 Kotlin 2.2.0 中棄用</a>。清除通用化快取以刪除無效的編譯構件。</p></li><li><p>已棄用的 <code>konanVersion</code> 屬性現已<a href="/zh-Hant/kotlin/compatibility-guide-22#deprecate-konanversion-in-cinteropprocess">從 <code>CInteropProcess</code> 任務中移除</a>。請改用 <code>CInteropProcess.kotlinNativeVersion</code>。</p></li><li><p>使用已棄用的 <code>destinationDir</code> 屬性現在將<a href="/zh-Hant/kotlin/compatibility-guide-22#deprecate-destinationdir-in-cinteropprocess">導致錯誤</a>。請改用 <code>CInteropProcess.destinationDirectory.set()</code>。</p></li></ul><h2 id="文件更新" tabindex="-1">文件更新 <a class="header-anchor" href="#文件更新" aria-label="Permalink to &quot;文件更新&quot;">​</a></h2><p>此版本帶來了顯著的文件變更，包括將 Kotlin 多平台文件遷移到 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">KMP 入口網站</a>。</p><p>此外，我們還啟動了一項文件問卷調查，創建了新的頁面和教學，並改進了現有的。</p><h3 id="kotlin-的文件問卷調查" tabindex="-1">Kotlin 的文件問卷調查 <a class="header-anchor" href="#kotlin-的文件問卷調查" aria-label="Permalink to &quot;Kotlin 的文件問卷調查&quot;">​</a></h3><p>我們正在尋求真實回饋，以改進 Kotlin 文件。</p><p>此問卷調查大約需要 15 分鐘完成，您的意見將有助於塑造 Kotlin 文件的未來。</p><p><a href="https://surveys.jetbrains.com/s3/Kotlin-Docs-2025" target="_blank" rel="noreferrer">在此處參與問卷調查</a>。</p><h3 id="新增和改進的教學" tabindex="-1">新增和改進的教學 <a class="header-anchor" href="#新增和改進的教學" aria-label="Permalink to &quot;新增和改進的教學&quot;">​</a></h3><ul><li><a href="/zh-Hant/kotlin/kotlin-tour-welcome">Kotlin 中級導覽</a> – 將您對 Kotlin 的理解提升到更高層次。了解何時使用擴充函數、介面、類別等。</li><li><a href="/zh-Hant/kotlin/spring-ai-guide">構建使用 Spring AI 的 Kotlin 應用程式</a> – 了解如何創建一個使用 OpenAI 和向量資料庫回答問題的 Kotlin 應用程式。</li><li><a href="/zh-Hant/kotlin/jvm-create-project-with-spring-boot"></a> – 了解如何使用 IntelliJ IDEA 的<strong>新專案</strong>精靈創建一個帶有 Gradle 的 Spring Boot 專案。</li><li><a href="/zh-Hant/kotlin/mapping-primitive-data-types-from-c">映射 Kotlin 和 C 教學系列</a> – 了解不同型別和結構如何在 Kotlin 和 C 之間映射。</li><li><a href="/zh-Hant/kotlin/native-app-with-c-and-libcurl">使用 C 互通和 libcurl 創建應用程式</a> – 創建一個簡單的 HTTP 客戶端，可以使用 libcurl C 函式庫原生運行。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/create-kotlin-multiplatform-library.html" target="_blank" rel="noreferrer">創建您的 Kotlin 多平台函式庫</a> – 了解如何使用 IntelliJ IDEA 創建和發布多平台函式庫。</li><li><a href="https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html" target="_blank" rel="noreferrer">使用 Ktor 和 Kotlin 多平台構建全棧應用程式</a> – 此教學現在使用 IntelliJ IDEA 而不是 Fleet，以及 Material 3 和最新版本的 Ktor 和 Kotlin。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-resource-environment.html" target="_blank" rel="noreferrer">管理 Compose 多平台應用程式中的本地資源環境</a> – 了解如何管理應用程式的資源環境，例如應用程式內主題和語言。</li></ul><h3 id="新增和改進的頁面" tabindex="-1">新增和改進的頁面 <a class="header-anchor" href="#新增和改進的頁面" aria-label="Permalink to &quot;新增和改進的頁面&quot;">​</a></h3><ul><li><a href="/zh-Hant/kotlin/kotlin-ai-apps-development-overview">Kotlin for AI 概述</a> – 探索 Kotlin 在構建 AI 驅動應用程式方面的功能。</li><li><a href="https://kotlinlang.org/docs/dokka-migration.html" target="_blank" rel="noreferrer">Dokka 遷移指南</a> – 了解如何遷移到 Dokka Gradle 插件的 v2。</li><li><a href="/zh-Hant/kotlin/metadata-jvm"></a> – 探索有關讀取、修改和生成針對 JVM 編譯的 Kotlin 類別的元資料的指南。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 整合</a> – 透過教學和範例專案，了解如何設定環境、添加 Pod 依賴，或將 Kotlin 專案作為 CocoaPod 依賴使用。</li><li>為支援 iOS 穩定版，Compose 多平台新增頁面： <ul><li>特別是<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-navigation.html" target="_blank" rel="noreferrer">導覽</a>和<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-navigation-deep-links.html" target="_blank" rel="noreferrer">深度連結</a>。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-layout.html" target="_blank" rel="noreferrer">在 Compose 中實作佈局</a>。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-localize-strings.html" target="_blank" rel="noreferrer">字串本地化</a>以及其他 i18n 頁面，例如支援從右到左的語言。</li></ul></li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-hot-reload.html" target="_blank" rel="noreferrer">Compose 熱重載</a> – 了解如何在桌面目標上使用 Compose 熱重載，以及如何將其添加到現有專案中。</li><li><a href="https://www.jetbrains.com/help/exposed/migrations.html" target="_blank" rel="noreferrer">Exposed 遷移</a> – 了解 Exposed 提供的用於管理資料庫結構變更的工具。</li></ul><h2 id="如何更新到-kotlin-2-2-0" tabindex="-1">如何更新到 Kotlin 2.2.0 <a class="header-anchor" href="#如何更新到-kotlin-2-2-0" aria-label="Permalink to &quot;如何更新到 Kotlin 2.2.0&quot;">​</a></h2><p>Kotlin 插件作為捆綁插件分發在 IntelliJ IDEA 和 Android Studio 中。</p><p>要更新到新的 Kotlin 版本，請在您的構建腳本中將 <a href="/zh-Hant/kotlin/releases#update-to-a-new-kotlin-version">Kotlin 版本</a> 變更為 2.2.0。</p>`,70))])}const C=p(r,[["render",d]]);export{b as __pageData,C as default};
