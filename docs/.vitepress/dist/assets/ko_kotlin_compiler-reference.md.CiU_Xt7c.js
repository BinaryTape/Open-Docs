import{_ as n,C as r,c as s,o as d,ag as a,G as i,j as o,a as l}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Kotlin 컴파일러 옵션","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/compiler-reference.md","filePath":"ko/kotlin/compiler-reference.md","lastUpdated":1754307826000}'),p={name:"ko/kotlin/compiler-reference.md"};function h(c,e,m,u,b,k){const t=r("TopicTitle");return d(),s("div",null,[e[0]||(e[0]=a('<h1 id="kotlin-컴파일러-옵션" tabindex="-1">Kotlin 컴파일러 옵션 <a class="header-anchor" href="#kotlin-컴파일러-옵션" aria-label="Permalink to &quot;Kotlin 컴파일러 옵션&quot;">​</a></h1><p>Kotlin의 각 릴리스에는 지원되는 타겟인 JVM, JavaScript, 그리고 <a href="/ko/kotlin/native-overview#target-platforms">지원되는 플랫폼</a>을 위한 네이티브 바이너리용 컴파일러가 포함되어 있습니다.</p><p>이 컴파일러는 다음에서 사용됩니다:</p><ul><li>IDE에서, Kotlin 프로젝트의 <strong>Compile</strong> 또는 <strong>Run</strong> 버튼을 클릭할 때.</li><li>Gradle에서, 콘솔 또는 IDE에서 <code>gradle build</code>를 호출할 때.</li><li>Maven에서, 콘솔 또는 IDE에서 <code>mvn compile</code> 또는 <code>mvn test-compile</code>을 호출할 때.</li></ul><p><a href="/ko/kotlin/command-line">명령줄 컴파일러 작업하기</a> 튜토리얼에 설명된 대로 명령줄에서 Kotlin 컴파일러를 수동으로 실행할 수도 있습니다.</p><h2 id="컴파일러-옵션" tabindex="-1">컴파일러 옵션 <a class="header-anchor" href="#컴파일러-옵션" aria-label="Permalink to &quot;컴파일러 옵션&quot;">​</a></h2><p>Kotlin 컴파일러는 컴파일 프로세스를 조정하기 위한 여러 옵션을 가지고 있습니다. 서로 다른 타겟에 대한 컴파일러 옵션은 각 옵션에 대한 설명과 함께 이 페이지에 나열되어 있습니다.</p><p>컴파일러 옵션과 해당 값(<em>컴파일러 인자</em>)을 설정하는 방법은 여러 가지가 있습니다:</p><ul><li><p>IntelliJ IDEA에서, <strong>Settings/Preferences</strong> | <strong>Build, Execution, Deployment</strong> | <strong>Compiler</strong> | <strong>Kotlin Compiler</strong>의 <strong>Additional command line parameters</strong> 텍스트 상자에 컴파일러 인자를 작성합니다.</p></li><li><p>Gradle을 사용하는 경우, Kotlin 컴파일 태스크의 <code>compilerOptions</code> 속성에 컴파일러 인자를 지정합니다. 자세한 내용은 <a href="/ko/kotlin/gradle-compiler-options#how-to-define-options">Gradle 컴파일러 옵션</a>을 참조하세요.</p></li><li><p>Maven을 사용하는 경우, Maven 플러그인 노드의 <code>&lt;configuration&gt;</code> 요소에 컴파일러 인자를 지정합니다. 자세한 내용은 <a href="/ko/kotlin/maven#specify-compiler-options">Maven</a>을 참조하세요.</p></li><li><p>명령줄 컴파일러를 실행하는 경우, 유틸리티 호출에 컴파일러 인자를 직접 추가하거나 <a href="#argfile">argfile</a>에 작성합니다.</p><p>예를 들어:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -include-runtime</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Windows에서, 구분 문자(공백, <code>=</code>, <code>;</code>, <code>,</code>)를 포함하는 컴파일러 인자를 전달할 때는 해당 인자를 큰따옴표(<code>&quot;</code>)로 묶으세요. <code>$ kotlinc.bat hello.kt -include-runtime -d &quot;My Folder\\hello.jar&quot;</code></p></div></li></ul><h2 id="공통-옵션" tabindex="-1">공통 옵션 <a class="header-anchor" href="#공통-옵션" aria-label="Permalink to &quot;공통 옵션&quot;">​</a></h2><p>다음 옵션은 모든 Kotlin 컴파일러에 공통적으로 적용됩니다.</p><h3 id="version" tabindex="-1">-version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;-version&quot;">​</a></h3><p>컴파일러 버전을 표시합니다.</p><h3 id="verbose" tabindex="-1">-verbose <a class="header-anchor" href="#verbose" aria-label="Permalink to &quot;-verbose&quot;">​</a></h3><p>컴파일 프로세스에 대한 세부 정보를 포함하는 상세 로깅 출력을 활성화합니다.</p><h3 id="script" tabindex="-1">-script <a class="header-anchor" href="#script" aria-label="Permalink to &quot;-script&quot;">​</a></h3><p>Kotlin 스크립트 파일을 평가합니다. 이 옵션으로 호출되면, 컴파일러는 주어진 인자들 중 첫 번째 Kotlin 스크립트(<code>*.kts</code>) 파일을 실행합니다.</p><h3 id="help-h" tabindex="-1">-help (-h) <a class="header-anchor" href="#help-h" aria-label="Permalink to &quot;-help (-h)&quot;">​</a></h3><p>사용 정보(&quot;usage information&quot;)를 표시하고 종료합니다. 표준 옵션만 표시됩니다. 고급 옵션을 표시하려면 <code>-X</code>를 사용하세요.</p>',19)),i(t,{id:"x",level:"3",title:"-X",labelRef:"experimental-general"}),e[1]||(e[1]=a('<p>고급 옵션에 대한 정보를 표시하고 종료합니다. 이 옵션들은 현재 불안정하며, 이름과 동작이 예고 없이 변경될 수 있습니다.</p><h3 id="kotlin-home-path" tabindex="-1">-kotlin-home <em>path</em> <a class="header-anchor" href="#kotlin-home-path" aria-label="Permalink to &quot;-kotlin-home _path_&quot;">​</a></h3><p>런타임 라이브러리 검색에 사용되는 Kotlin 컴파일러의 사용자 정의 경로를 지정합니다.</p><h3 id="p-plugin-pluginid-optionname-value" tabindex="-1">-P plugin:pluginId:optionName=value <a class="header-anchor" href="#p-plugin-pluginid-optionname-value" aria-label="Permalink to &quot;-P plugin:pluginId:optionName=value&quot;">​</a></h3><p>Kotlin 컴파일러 플러그인에 옵션을 전달합니다. 핵심 플러그인과 해당 옵션은 문서의 <a href="/ko/kotlin/components-stability#core-compiler-plugins">핵심 컴파일러 플러그인</a> 섹션에 나열되어 있습니다.</p><h3 id="language-version-version" tabindex="-1">-language-version <em>version</em> <a class="header-anchor" href="#language-version-version" aria-label="Permalink to &quot;-language-version _version_&quot;">​</a></h3><p>지정된 Kotlin 버전과의 소스 호환성을 제공합니다.</p><h3 id="api-version-version" tabindex="-1">-api-version <em>version</em> <a class="header-anchor" href="#api-version-version" aria-label="Permalink to &quot;-api-version _version_&quot;">​</a></h3><p>지정된 Kotlin 번들 라이브러리 버전의 선언만 사용하도록 허용합니다.</p><h3 id="progressive" tabindex="-1">-progressive <a class="header-anchor" href="#progressive" aria-label="Permalink to &quot;-progressive&quot;">​</a></h3><p>컴파일러의 <a href="/ko/kotlin/whatsnew13#progressive-mode">프로그레시브 모드</a>를 활성화합니다.</p><p>프로그레시브 모드에서는 불안정한 코드에 대한 사용 중단 및 버그 수정이 유예 기간 없이 즉시 적용됩니다. 프로그레시브 모드로 작성된 코드는 하위 호환성을 가지지만, 비-프로그레시브 모드로 작성된 코드는 프로그레시브 모드에서 컴파일 오류를 일으킬 수 있습니다.</p><h3 id="argfile" tabindex="-1">@argfile <a class="header-anchor" href="#argfile" aria-label="Permalink to &quot;@argfile&quot;">​</a></h3><p>주어진 파일에서 컴파일러 옵션을 읽습니다. 이러한 파일에는 값과 소스 파일 경로가 포함된 컴파일러 옵션이 포함될 수 있습니다. 옵션과 경로는 공백으로 구분해야 합니다. 예를 들어:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-include-runtime -d hello.jar hello.kt</span></span></code></pre></div><p>공백을 포함하는 값을 전달하려면 작은따옴표(<strong>&#39;</strong>) 또는 큰따옴표(<strong>&quot;</strong>)로 묶으세요. 값에 따옴표가 포함되어 있다면 백슬래시(<strong>\\</strong>)로 이스케이프하세요.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-include-runtime -d &#39;My folder&#39;</span></span></code></pre></div><p>예를 들어, 컴파일러 옵션과 소스 파일을 분리하기 위해 여러 인자 파일을 전달할 수도 있습니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @compiler.options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @classes</span></span></code></pre></div><p>파일이 현재 디렉터리와 다른 위치에 있는 경우 상대 경로를 사용하세요.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @options/compiler.options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span></span></code></pre></div><h3 id="opt-in-annotation" tabindex="-1">-opt-in <em>annotation</em> <a class="header-anchor" href="#opt-in-annotation" aria-label="Permalink to &quot;-opt-in _annotation_&quot;">​</a></h3><p>주어진 정규화된 이름의 요구 사항 어노테이션으로 <a href="/ko/kotlin/opt-in-requirements">옵트인</a>이 필요한 API의 사용을 활성화합니다.</p>',23)),i(t,{id:"xrepl",level:"3",title:"-Xrepl",labelRef:"experimental-general"}),e[2]||(e[2]=a('<p>Kotlin REPL을 활성화합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xrepl</span></span></code></pre></div>',2)),i(t,{id:"xannotation-target-all",level:"3",title:"-Xannotation-target-all",labelRef:"experimental-general"}),e[3]||(e[3]=a('<p>실험적인 어노테이션을 위한 <a href="/ko/kotlin/annotations#all-meta-target"><code>all</code> 사용 지점 타겟</a>을 활성화합니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xannotation-target-all</span></span></code></pre></div>',2)),i(t,{id:"xannotation-default-target-param-property",level:"3",title:"-Xannotation-default-target=param-property",labelRef:"experimental-general"}),e[4]||(e[4]=a('<p>어노테이션 사용 지점 타겟에 대한 새로운 실험적인 <a href="/ko/kotlin/annotations#defaults-when-no-use-site-targets-are-specified">기본 규칙</a>을 활성화합니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xannotation-default-target=param-property</span></span></code></pre></div><h3 id="경고-관리" tabindex="-1">경고 관리 <a class="header-anchor" href="#경고-관리" aria-label="Permalink to &quot;경고 관리&quot;">​</a></h3><h4 id="nowarn" tabindex="-1">-nowarn <a class="header-anchor" href="#nowarn" aria-label="Permalink to &quot;-nowarn&quot;">​</a></h4><p>컴파일 중 모든 경고를 억제합니다.</p><h4 id="werror" tabindex="-1">-Werror <a class="header-anchor" href="#werror" aria-label="Permalink to &quot;-Werror&quot;">​</a></h4><p>모든 경고를 컴파일 오류로 처리합니다.</p><h4 id="wextra" tabindex="-1">-Wextra <a class="header-anchor" href="#wextra" aria-label="Permalink to &quot;-Wextra&quot;">​</a></h4><p>참일 경우 경고를 발생하는 <a href="/ko/kotlin/whatsnew21#extra-compiler-checks">추가 선언, 표현식 및 타입 컴파일러 검사</a>를 활성화합니다.</p>',9)),i(t,{id:"xwarning-level",level:"4",title:"-Xwarning-level",labelRef:"experimental-general"}),e[5]||(e[5]=a('<p>특정 컴파일러 경고의 심각도 수준을 구성합니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xwarning-level=DIAGNOSTIC_NAME:(error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warning</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><code>error</code>: 지정된 경고만 오류로 높입니다.</li><li><code>warning</code>: 지정된 진단에 대해 경고를 발생시키며 기본적으로 활성화됩니다.</li><li><code>disabled</code>: 지정된 경고만 모듈 전체에서 억제합니다.</li></ul><p>모듈 전체 규칙과 특정 규칙을 결합하여 프로젝트에서 경고 보고를 조정할 수 있습니다:</p><table tabindex="0"><thead><tr><th>명령</th><th>설명</th></tr></thead><tbody><tr><td><code>-nowarn -Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>지정된 경고를 제외한 모든 경고를 억제합니다.</td></tr><tr><td><code>-Werror -Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>지정된 경고를 제외한 모든 경고를 오류로 높입니다.</td></tr><tr><td><code>-Wextra -Xwarning-level=DIAGNOSTIC_NAME:disabled</code></td><td>지정된 검사를 제외한 모든 추가 검사를 활성화합니다.</td></tr></tbody></table><p>일반 규칙에서 제외할 경고가 많은 경우, <a href="#argfile"><code>@argfile</code></a>을 사용하여 별도의 파일에 나열할 수 있습니다.</p><h2 id="kotlin-jvm-컴파일러-옵션" tabindex="-1">Kotlin/JVM 컴파일러 옵션 <a class="header-anchor" href="#kotlin-jvm-컴파일러-옵션" aria-label="Permalink to &quot;Kotlin/JVM 컴파일러 옵션&quot;">​</a></h2><p>JVM용 Kotlin 컴파일러는 Kotlin 소스 파일을 Java 클래스 파일로 컴파일합니다. Kotlin-JVM 컴파일을 위한 명령줄 도구는 <code>kotlinc</code>와 <code>kotlinc-jvm</code>입니다. Kotlin 스크립트 파일을 실행하는 데도 사용할 수 있습니다.</p><p><a href="#common-options">공통 옵션</a> 외에도 Kotlin/JVM 컴파일러는 아래 나열된 옵션을 가지고 있습니다.</p><h3 id="classpath-path-cp-path" tabindex="-1">-classpath <em>path</em> (-cp <em>path</em>) <a class="header-anchor" href="#classpath-path-cp-path" aria-label="Permalink to &quot;-classpath _path_ (-cp _path_)&quot;">​</a></h3><p>지정된 경로에서 클래스 파일을 검색합니다. 클래스패스 요소는 시스템 경로 구분 기호(Windows에서는 <strong>;</strong>, macOS/Linux에서는 <strong>:</strong>)로 구분합니다. 클래스패스는 파일 및 디렉터리 경로, ZIP 또는 JAR 파일을 포함할 수 있습니다.</p><h3 id="d-path" tabindex="-1">-d <em>path</em> <a class="header-anchor" href="#d-path" aria-label="Permalink to &quot;-d _path_&quot;">​</a></h3><p>생성된 클래스 파일을 지정된 위치에 배치합니다. 위치는 디렉터리, ZIP 또는 JAR 파일일 수 있습니다.</p><h3 id="include-runtime" tabindex="-1">-include-runtime <a class="header-anchor" href="#include-runtime" aria-label="Permalink to &quot;-include-runtime&quot;">​</a></h3><p>결과 JAR 파일에 Kotlin 런타임을 포함합니다. 결과 아카이브를 모든 Java 사용 가능한 환경에서 실행 가능하게 만듭니다.</p><h3 id="jdk-home-path" tabindex="-1">-jdk-home <em>path</em> <a class="header-anchor" href="#jdk-home-path" aria-label="Permalink to &quot;-jdk-home _path_&quot;">​</a></h3><p>기본 <code>JAVA_HOME</code>과 다른 경우 클래스패스에 포함할 사용자 정의 JDK 홈 디렉터리를 사용합니다.</p>',17)),i(t,{id:"xjdk-release-version",level:"3",title:"-Xjdk-release=version",labelRef:"experimental-general"}),e[6]||(e[6]=a('<p>생성된 JVM 바이트코드의 타겟 버전을 지정합니다. 클래스패스의 JDK API를 지정된 Java 버전으로 제한합니다. 자동으로 <a href="#jvm-target-version"><code>-jvm-target version</code></a>을 설정합니다. 가능한 값은 <code>1.8</code>, <code>9</code>, <code>10</code>, ..., <code>24</code>입니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>이 옵션은 각 JDK 배포판에 대해 효과가 <a href="https://youtrack.jetbrains.com/issue/KT-29974" target="_blank" rel="noreferrer">보장되지 않습니다</a>.</p></div><h3 id="jvm-target-version" tabindex="-1">-jvm-target <em>version</em> <a class="header-anchor" href="#jvm-target-version" aria-label="Permalink to &quot;-jvm-target _version_&quot;">​</a></h3><p>생성된 JVM 바이트코드의 타겟 버전을 지정합니다. 가능한 값은 <code>1.8</code>, <code>9</code>, <code>10</code>, ..., <code>24</code>입니다. 기본값은 <code>1.8</code>입니다.</p><h3 id="java-parameters" tabindex="-1">-java-parameters <a class="header-anchor" href="#java-parameters" aria-label="Permalink to &quot;-java-parameters&quot;">​</a></h3><p>메서드 파라미터에 대한 Java 1.8 리플렉션용 메타데이터를 생성합니다.</p><h3 id="module-name-name-jvm" tabindex="-1">-module-name <em>name</em> (JVM) <a class="header-anchor" href="#module-name-name-jvm" aria-label="Permalink to &quot;-module-name _name_ (JVM)&quot;">​</a></h3><p>생성된 <code>.kotlin_module</code> 파일의 사용자 정의 이름을 설정합니다.</p><h3 id="no-jdk" tabindex="-1">-no-jdk <a class="header-anchor" href="#no-jdk" aria-label="Permalink to &quot;-no-jdk&quot;">​</a></h3><p>Java 런타임을 클래스패스에 자동으로 포함하지 않습니다.</p><h3 id="no-reflect" tabindex="-1">-no-reflect <a class="header-anchor" href="#no-reflect" aria-label="Permalink to &quot;-no-reflect&quot;">​</a></h3><p>Kotlin 리플렉션(<code>kotlin-reflect.jar</code>)을 클래스패스에 자동으로 포함하지 않습니다.</p><h3 id="no-stdlib-jvm" tabindex="-1">-no-stdlib (JVM) <a class="header-anchor" href="#no-stdlib-jvm" aria-label="Permalink to &quot;-no-stdlib (JVM)&quot;">​</a></h3><p>Kotlin/JVM stdlib(<code>kotlin-stdlib.jar</code>) 및 Kotlin 리플렉션(<code>kotlin-reflect.jar</code>)을 클래스패스에 자동으로 포함하지 않습니다.</p><h3 id="script-templates-classnames" tabindex="-1">-script-templates <em>classnames[,]</em> <a class="header-anchor" href="#script-templates-classnames" aria-label="Permalink to &quot;-script-templates _classnames[,]_&quot;">​</a></h3><p>스크립트 정의 템플릿 클래스입니다. 정규화된 클래스 이름을 사용하고 쉼표(<strong>,</strong>)로 구분합니다.</p>',16)),i(t,{id:"xjvm-expose-boxed",level:"3",title:"-Xjvm-expose-boxed",labelRef:"experimental-general"}),e[7]||(e[7]=a('<p>모듈의 모든 인라인 값 클래스의 박스된 버전을, 해당 클래스를 사용하는 함수의 박스된 변형과 함께 생성하여, 이 둘 모두 Java에서 접근할 수 있도록 합니다. 자세한 내용은 Java에서 Kotlin 호출 가이드의 <a href="/ko/kotlin/java-to-kotlin-interop#inline-value-classes">인라인 값 클래스</a>를 참조하세요.</p><h3 id="jvm-default-mode" tabindex="-1">-jvm-default <em>mode</em> <a class="header-anchor" href="#jvm-default-mode" aria-label="Permalink to &quot;-jvm-default _mode_&quot;">​</a></h3><p>인터페이스에 선언된 함수가 JVM에서 기본 메서드로 컴파일되는 방식을 제어합니다.</p><table tabindex="0"><thead><tr><th>모드</th><th>설명</th></tr></thead><tbody><tr><td><code>enable</code></td><td>인터페이스에 기본 구현을 생성하고 서브클래스 및 <code>DefaultImpls</code> 클래스에 브리지 함수를 포함합니다. (기본값)</td></tr><tr><td><code>no-compatibility</code></td><td>호환성 브리지와 <code>DefaultImpls</code> 클래스를 건너뛰고 인터페이스에 기본 구현만 생성합니다.</td></tr><tr><td><code>disable</code></td><td>기본 메서드를 건너뛰고 호환성 브리지와 <code>DefaultImpls</code> 클래스만 생성합니다.</td></tr></tbody></table><h2 id="kotlin-js-컴파일러-옵션" tabindex="-1">Kotlin/JS 컴파일러 옵션 <a class="header-anchor" href="#kotlin-js-컴파일러-옵션" aria-label="Permalink to &quot;Kotlin/JS 컴파일러 옵션&quot;">​</a></h2><p>JS용 Kotlin 컴파일러는 Kotlin 소스 파일을 JavaScript 코드로 컴파일합니다. Kotlin-JS 컴파일을 위한 명령줄 도구는 <code>kotlinc-js</code>입니다.</p><p><a href="#common-options">공통 옵션</a> 외에도 Kotlin/JS 컴파일러는 아래 나열된 옵션을 가지고 있습니다.</p>',7)),e[8]||(e[8]=o("h3",{"es5|es2015":"",id:"target",tabindex:"-1"},[l("-target "),o("a",{class:"header-anchor",href:"#target","aria-label":'Permalink to "-target {es5|es2015}"'},"​")],-1)),e[9]||(e[9]=a('<p>지정된 ECMA 버전에 대한 JS 파일을 생성합니다.</p><h3 id="libraries-path" tabindex="-1">-libraries <em>path</em> <a class="header-anchor" href="#libraries-path" aria-label="Permalink to &quot;-libraries _path_&quot;">​</a></h3><p>.meta.js 및 .kjsm 파일을 포함하는 Kotlin 라이브러리 경로이며, 시스템 경로 구분 기호로 구분됩니다.</p><h3 id="main-call-nocall" tabindex="-1">-main <em>{call|noCall}</em> <a class="header-anchor" href="#main-call-nocall" aria-label="Permalink to &quot;-main _{call|noCall}_&quot;">​</a></h3><p>실행 시 <code>main</code> 함수를 호출해야 하는지 여부를 정의합니다.</p><h3 id="meta-info" tabindex="-1">-meta-info <a class="header-anchor" href="#meta-info" aria-label="Permalink to &quot;-meta-info&quot;">​</a></h3><p>메타데이터를 포함하는 <code>.meta.js</code> 및 <code>.kjsm</code> 파일을 생성합니다. JS 라이브러리를 생성할 때 이 옵션을 사용합니다.</p>',7)),e[10]||(e[10]=o("h3",{"umd|commonjs|amd|plain":"",id:"module-kind",tabindex:"-1"},[l("-module-kind "),o("a",{class:"header-anchor",href:"#module-kind","aria-label":'Permalink to "-module-kind {umd|commonjs|amd|plain}"'},"​")],-1)),e[11]||(e[11]=a('<p>컴파일러가 생성하는 JS 모듈의 종류:</p><ul><li><code>umd</code> - <a href="https://github.com/umdjs/umd" target="_blank" rel="noreferrer">Universal Module Definition</a> 모듈</li><li><code>commonjs</code> - <a href="http://www.commonjs.org/" target="_blank" rel="noreferrer">CommonJS</a> 모듈</li><li><code>amd</code> - <a href="https://en.wikipedia.org/wiki/Asynchronous_module_definition" target="_blank" rel="noreferrer">Asynchronous Module Definition</a> 모듈</li><li><code>plain</code> - 일반 JS 모듈</li></ul><p>다양한 JS 모듈 종류와 그 차이점에 대해 자세히 알아보려면 <a href="https://www.davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/" target="_blank" rel="noreferrer">이</a> 문서를 참조하세요.</p><h3 id="no-stdlib-js" tabindex="-1">-no-stdlib (JS) <a class="header-anchor" href="#no-stdlib-js" aria-label="Permalink to &quot;-no-stdlib (JS)&quot;">​</a></h3><p>기본 Kotlin/JS stdlib를 컴파일 종속성에 자동으로 포함하지 않습니다.</p><h3 id="output-filepath" tabindex="-1">-output <em>filepath</em> <a class="header-anchor" href="#output-filepath" aria-label="Permalink to &quot;-output _filepath_&quot;">​</a></h3><p>컴파일 결과의 대상 파일을 설정합니다. 값은 <code>.js</code> 파일의 경로와 파일 이름을 포함해야 합니다.</p><h3 id="output-postfix-filepath" tabindex="-1">-output-postfix <em>filepath</em> <a class="header-anchor" href="#output-postfix-filepath" aria-label="Permalink to &quot;-output-postfix _filepath_&quot;">​</a></h3><p>지정된 파일의 내용을 출력 파일 끝에 추가합니다.</p><h3 id="output-prefix-filepath" tabindex="-1">-output-prefix <em>filepath</em> <a class="header-anchor" href="#output-prefix-filepath" aria-label="Permalink to &quot;-output-prefix _filepath_&quot;">​</a></h3><p>지정된 파일의 내용을 출력 파일 시작 부분에 추가합니다.</p><h3 id="source-map" tabindex="-1">-source-map <a class="header-anchor" href="#source-map" aria-label="Permalink to &quot;-source-map&quot;">​</a></h3><p>소스 맵을 생성합니다.</p><h3 id="source-map-base-dirs-path" tabindex="-1">-source-map-base-dirs <em>path</em> <a class="header-anchor" href="#source-map-base-dirs-path" aria-label="Permalink to &quot;-source-map-base-dirs _path_&quot;">​</a></h3><p>지정된 경로를 기본 디렉터리로 사용합니다. 기본 디렉터리는 소스 맵에서 상대 경로를 계산하는 데 사용됩니다.</p><h3 id="source-map-embed-sources-always-never-inlining" tabindex="-1">-source-map-embed-sources <em>{always|never|inlining}</em> <a class="header-anchor" href="#source-map-embed-sources-always-never-inlining" aria-label="Permalink to &quot;-source-map-embed-sources _{always|never|inlining}_&quot;">​</a></h3><p>소스 파일을 소스 맵에 포함합니다.</p><h3 id="source-map-names-policy-simple-names-fully-qualified-names-no" tabindex="-1">-source-map-names-policy <em>{simple-names|fully-qualified-names|no}</em> <a class="header-anchor" href="#source-map-names-policy-simple-names-fully-qualified-names-no" aria-label="Permalink to &quot;-source-map-names-policy _{simple-names|fully-qualified-names|no}_&quot;">​</a></h3><p>Kotlin 코드에서 선언한 변수 및 함수 이름을 소스 맵에 추가합니다.</p><table tabindex="0"><thead><tr><th>설정</th><th>설명</th><th>예시 출력</th></tr></thead><tbody><tr><td><code>simple-names</code></td><td>변수 이름과 단순 함수 이름이 추가됩니다. (기본값)</td><td><code>main</code></td></tr><tr><td><code>fully-qualified-names</code></td><td>변수 이름과 정규화된 함수 이름이 추가됩니다.</td><td><code>com.example.kjs.playground.main</code></td></tr><tr><td><code>no</code></td><td>변수 또는 함수 이름이 추가되지 않습니다.</td><td>N/A</td></tr></tbody></table><h3 id="source-map-prefix" tabindex="-1">-source-map-prefix <a class="header-anchor" href="#source-map-prefix" aria-label="Permalink to &quot;-source-map-prefix&quot;">​</a></h3><p>소스 맵의 경로에 지정된 접두사를 추가합니다.</p><h2 id="kotlin-native-컴파일러-옵션" tabindex="-1">Kotlin/Native 컴파일러 옵션 <a class="header-anchor" href="#kotlin-native-컴파일러-옵션" aria-label="Permalink to &quot;Kotlin/Native 컴파일러 옵션&quot;">​</a></h2><p>Kotlin/Native 컴파일러는 Kotlin 소스 파일을 <a href="/ko/kotlin/native-overview#target-platforms">지원되는 플랫폼</a>을 위한 네이티브 바이너리로 컴파일합니다. Kotlin/Native 컴파일을 위한 명령줄 도구는 <code>kotlinc-native</code>입니다.</p><p><a href="#common-options">공통 옵션</a> 외에도 Kotlin/Native 컴파일러는 아래 나열된 옵션을 가지고 있습니다.</p><h3 id="enable-assertions-ea" tabindex="-1">-enable-assertions (-ea) <a class="header-anchor" href="#enable-assertions-ea" aria-label="Permalink to &quot;-enable-assertions (-ea)&quot;">​</a></h3><p>생성된 코드에서 런타임 어설션을 활성화합니다.</p><h3 id="g" tabindex="-1">-g <a class="header-anchor" href="#g" aria-label="Permalink to &quot;-g&quot;">​</a></h3><p>디버그 정보 생성을 활성화합니다. 이 옵션은 최적화 수준을 낮추므로 <a href="#opt"><code>-opt</code></a> 옵션과 함께 사용해서는 안 됩니다.</p><h3 id="generate-test-runner-tr" tabindex="-1">-generate-test-runner (-tr) <a class="header-anchor" href="#generate-test-runner-tr" aria-label="Permalink to &quot;-generate-test-runner (-tr)&quot;">​</a></h3><p>프로젝트에서 유닛 테스트를 실행하기 위한 애플리케이션을 생성합니다.</p><h3 id="generate-no-exit-test-runner-trn" tabindex="-1">-generate-no-exit-test-runner (-trn) <a class="header-anchor" href="#generate-no-exit-test-runner-trn" aria-label="Permalink to &quot;-generate-no-exit-test-runner (-trn)&quot;">​</a></h3><p>명시적인 프로세스 종료 없이 유닛 테스트를 실행하기 위한 애플리케이션을 생성합니다.</p><h3 id="include-binary-path-ib-path" tabindex="-1">-include-binary <em>path</em> (-ib <em>path</em>) <a class="header-anchor" href="#include-binary-path-ib-path" aria-label="Permalink to &quot;-include-binary _path_ (-ib _path_)&quot;">​</a></h3><p>생성된 klib 파일 내부에 외부 바이너리를 패킹합니다.</p><h3 id="library-path-l-path" tabindex="-1">-library <em>path</em> (-l <em>path</em>) <a class="header-anchor" href="#library-path-l-path" aria-label="Permalink to &quot;-library _path_ (-l _path_)&quot;">​</a></h3><p>라이브러리와 링크합니다. Kotlin/Native 프로젝트에서 라이브러리 사용에 대해 자세히 알아보려면 <a href="/ko/kotlin/native-libraries">Kotlin/Native 라이브러리</a>를 참조하세요.</p><h3 id="library-version-version-lv-version" tabindex="-1">-library-version <em>version</em> (-lv <em>version</em>) <a class="header-anchor" href="#library-version-version-lv-version" aria-label="Permalink to &quot;-library-version _version_ (-lv _version_)&quot;">​</a></h3><p>라이브러리 버전을 설정합니다.</p><h3 id="list-targets" tabindex="-1">-list-targets <a class="header-anchor" href="#list-targets" aria-label="Permalink to &quot;-list-targets&quot;">​</a></h3><p>사용 가능한 하드웨어 타겟을 나열합니다.</p><h3 id="manifest-path" tabindex="-1">-manifest <em>path</em> <a class="header-anchor" href="#manifest-path" aria-label="Permalink to &quot;-manifest _path_&quot;">​</a></h3><p>매니페스트 추가 파일을 제공합니다.</p><h3 id="module-name-name-native" tabindex="-1">-module-name <em>name</em> (Native) <a class="header-anchor" href="#module-name-name-native" aria-label="Permalink to &quot;-module-name _name_ (Native)&quot;">​</a></h3><p>컴파일 모듈의 이름을 지정합니다. 이 옵션은 Objective-C로 내보내진 선언에 대한 이름 접두사를 지정하는 데도 사용할 수 있습니다: <a href="/ko/kotlin/native-faq#how-do-i-specify-a-custom-objective-c-prefix-name-for-my-kotlin-framework">Kotlin 프레임워크에 대한 사용자 정의 Objective-C 접두사/이름을 어떻게 지정하나요?</a></p><h3 id="native-library-path-nl-path" tabindex="-1">-native-library <em>path</em> (-nl <em>path</em>) <a class="header-anchor" href="#native-library-path-nl-path" aria-label="Permalink to &quot;-native-library _path_ (-nl _path_)&quot;">​</a></h3><p>네이티브 비트코드 라이브러리를 포함합니다.</p><h3 id="no-default-libs" tabindex="-1">-no-default-libs <a class="header-anchor" href="#no-default-libs" aria-label="Permalink to &quot;-no-default-libs&quot;">​</a></h3><p>컴파일러와 함께 배포되는 미리 빌드된 <a href="/ko/kotlin/native-platform-libs">플랫폼 라이브러리</a>와 사용자 코드 링크를 비활성화합니다.</p><h3 id="nomain" tabindex="-1">-nomain <a class="header-anchor" href="#nomain" aria-label="Permalink to &quot;-nomain&quot;">​</a></h3><p><code>main</code> 진입점이 외부 라이브러리에 의해 제공된다고 가정합니다.</p><h3 id="nopack" tabindex="-1">-nopack <a class="header-anchor" href="#nopack" aria-label="Permalink to &quot;-nopack&quot;">​</a></h3><p>라이브러리를 klib 파일로 패킹하지 않습니다.</p><h3 id="linker-option" tabindex="-1">-linker-option <a class="header-anchor" href="#linker-option" aria-label="Permalink to &quot;-linker-option&quot;">​</a></h3><p>바이너리 빌드 중 링커에 인자를 전달합니다. 이는 일부 네이티브 라이브러리에 대해 링크하는 데 사용될 수 있습니다.</p><h3 id="linker-options-args" tabindex="-1">-linker-options <em>args</em> <a class="header-anchor" href="#linker-options-args" aria-label="Permalink to &quot;-linker-options _args_&quot;">​</a></h3><p>바이너리 빌드 중 링커에 여러 인자를 전달합니다. 인자를 공백으로 구분합니다.</p><h3 id="nostdlib" tabindex="-1">-nostdlib <a class="header-anchor" href="#nostdlib" aria-label="Permalink to &quot;-nostdlib&quot;">​</a></h3><p>stdlib와 링크하지 않습니다.</p><h3 id="opt" tabindex="-1">-opt <a class="header-anchor" href="#opt" aria-label="Permalink to &quot;-opt&quot;">​</a></h3><p>컴파일 최적화를 활성화하고 더 나은 런타임 성능을 가진 바이너리를 생성합니다. 이것은 최적화 수준을 낮추는 <a href="#g"><code>-g</code></a> 옵션과 함께 사용하는 것을 권장하지 않습니다.</p><h3 id="output-name-o-name" tabindex="-1">-output <em>name</em> (-o <em>name</em>) <a class="header-anchor" href="#output-name-o-name" aria-label="Permalink to &quot;-output _name_ (-o _name_)&quot;">​</a></h3><p>출력 파일의 이름을 설정합니다.</p><h3 id="entry-name-e-name" tabindex="-1">-entry <em>name</em> (-e <em>name</em>) <a class="header-anchor" href="#entry-name-e-name" aria-label="Permalink to &quot;-entry _name_ (-e _name_)&quot;">​</a></h3><p>정규화된 진입점 이름을 지정합니다.</p><h3 id="produce-output-p-output" tabindex="-1">-produce <em>output</em> (-p <em>output</em>) <a class="header-anchor" href="#produce-output-p-output" aria-label="Permalink to &quot;-produce _output_ (-p _output_)&quot;">​</a></h3><p>출력 파일 종류를 지정합니다:</p><ul><li><code>program</code></li><li><code>static</code></li><li><code>dynamic</code></li><li><code>framework</code></li><li><code>library</code></li><li><code>bitcode</code></li></ul><h3 id="repo-path-r-path" tabindex="-1">-repo <em>path</em> (-r <em>path</em>) <a class="header-anchor" href="#repo-path-r-path" aria-label="Permalink to &quot;-repo _path_ (-r _path_)&quot;">​</a></h3><p>라이브러리 검색 경로입니다. 자세한 내용은 <a href="/ko/kotlin/native-libraries#library-search-sequence">라이브러리 검색 순서</a>를 참조하세요.</p><h3 id="target-target" tabindex="-1">-target <em>target</em> <a class="header-anchor" href="#target-target" aria-label="Permalink to &quot;-target _target_&quot;">​</a></h3><p>하드웨어 타겟을 설정합니다. 사용 가능한 타겟 목록을 보려면 <a href="#list-targets"><code>-list-targets</code></a> 옵션을 사용하세요.</p>',72))])}const _=n(p,[["render",h]]);export{f as __pageData,_ as default};
