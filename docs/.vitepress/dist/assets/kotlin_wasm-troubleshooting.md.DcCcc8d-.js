import{_ as e,c as s,o as t,ag as i}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"故障排除","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/wasm-troubleshooting.md","filePath":"kotlin/wasm-troubleshooting.md","lastUpdated":1754307826000}'),o={name:"kotlin/wasm-troubleshooting.md"};function l(r,a,n,p,c,h){return t(),s("div",null,a[0]||(a[0]=[i(`<h1 id="故障排除" tabindex="-1">故障排除 <a class="header-anchor" href="#故障排除" aria-label="Permalink to &quot;故障排除&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasm 处于 <a href="/kotlin/components-stability">Alpha</a> 阶段。它可能随时更改。请在生产环境之前的场景中使用。 我们非常感谢您在 <a href="https://youtrack.jetbrains.com/issue/KT-56492" target="_blank" rel="noreferrer">YouTrack</a> 中提供反馈。</p></div><p>Kotlin/Wasm 依赖新的 <a href="https://webassembly.org/roadmap/" target="_blank" rel="noreferrer">WebAssembly 提案</a>，例如 <a href="#garbage-collection-proposal">垃圾回收</a> 和 <a href="#exception-handling-proposal">异常处理</a>，以在 WebAssembly 中引入改进和新特性。</p><p>然而，为确保这些特性正常工作，您需要一个支持这些新提案的环境。在某些情况下，您可能需要设置环境以使其与这些提案兼容。</p><h2 id="浏览器版本" tabindex="-1">浏览器版本 <a class="header-anchor" href="#浏览器版本" aria-label="Permalink to &quot;浏览器版本&quot;">​</a></h2><p>要在浏览器中运行使用 Kotlin/Wasm 构建的应用程序，您需要一个支持新的 <a href="https://github.com/WebAssembly/gc" target="_blank" rel="noreferrer">WebAssembly 垃圾回收 (WasmGC) 特性</a> 的浏览器版本。请检查浏览器版本是否默认支持新的 WasmGC，或者您是否需要对环境进行更改。</p><h3 id="chrome" tabindex="-1">Chrome <a class="header-anchor" href="#chrome" aria-label="Permalink to &quot;Chrome&quot;">​</a></h3><ul><li><p><strong>对于版本 119 或更高版本：</strong></p><p>默认情况下工作。</p></li><li><p><strong>对于更旧的版本：</strong></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>要在较旧的浏览器中运行应用程序，您需要 Kotlin 版本低于 1.9.20。</p></div><ol><li>在浏览器中，前往 <code>chrome://flags/#enable-webassembly-garbage-collection</code>。</li><li>启用 <strong>WebAssembly Garbage Collection</strong>。</li><li>重启浏览器。</li></ol></li></ul><h3 id="基于-chromium-的浏览器" tabindex="-1">基于 Chromium 的浏览器 <a class="header-anchor" href="#基于-chromium-的浏览器" aria-label="Permalink to &quot;基于 Chromium 的浏览器&quot;">​</a></h3><p>包括 Edge、Brave、Opera 或 Samsung Internet 等基于 Chromium 的浏览器。</p><ul><li><p><strong>对于版本 119 或更高版本：</strong></p><p>默认情况下工作。</p></li><li><p><strong>对于更旧的版本：</strong></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>要在较旧的浏览器中运行应用程序，您需要 Kotlin 版本低于 1.9.20。</p></div><p>使用 <code>--js-flags=--experimental-wasm-gc</code> 命令行实参运行应用程序。</p></li></ul><h3 id="firefox" tabindex="-1">Firefox <a class="header-anchor" href="#firefox" aria-label="Permalink to &quot;Firefox&quot;">​</a></h3><ul><li><p><strong>对于版本 120 或更高版本：</strong></p><p>默认情况下工作。</p></li><li><p><strong>对于版本 119：</strong></p><ol><li>在浏览器中，前往 <code>about:config</code>。</li><li>启用 <code>javascript.options.wasm_gc</code> 选项。</li><li>刷新页面。</li></ol></li></ul><h3 id="safari-webkit" tabindex="-1">Safari/WebKit <a class="header-anchor" href="#safari-webkit" aria-label="Permalink to &quot;Safari/WebKit&quot;">​</a></h3><ul><li><p><strong>对于版本 18.2 或更高版本：</strong></p><p>默认情况下工作。</p></li><li><p><strong>对于更旧的版本：</strong></p><p>不支持。</p></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Safari 18.2 适用于 iOS 18.2、iPadOS 18.2、visionOS 2.2、macOS 15.2、macOS Sonoma 和 macOS Ventura。 在 iOS 和 iPadOS 上，Safari 18.2 与操作系统捆绑在一起。要获取它，请将您的设备更新到 18.2 或更高版本。 更多信息，请参见 <a href="https://developer.apple.com/documentation/safari-release-notes/safari-18_2-release-notes#Overview" target="_blank" rel="noreferrer">Safari 发布说明</a>。</p></div><h2 id="wasm-提案支持" tabindex="-1">Wasm 提案支持 <a class="header-anchor" href="#wasm-提案支持" aria-label="Permalink to &quot;Wasm 提案支持&quot;">​</a></h2><p>Kotlin/Wasm 的改进基于 <a href="https://webassembly.org/roadmap/" target="_blank" rel="noreferrer">WebAssembly 提案</a>。您可以在此处找到有关 WebAssembly 垃圾回收和（传统）异常处理提案支持的详细信息。</p><h3 id="垃圾回收提案" tabindex="-1">垃圾回收提案 <a class="header-anchor" href="#垃圾回收提案" aria-label="Permalink to &quot;垃圾回收提案&quot;">​</a></h3><p>自 Kotlin 1.9.20 起，Kotlin 工具链使用最新版本的 <a href="https://github.com/WebAssembly/gc" target="_blank" rel="noreferrer">Wasm 垃圾回收</a> (WasmGC) 提案。</p><p>因此，我们强烈建议您将 Wasm 项目更新到最新版本的 Kotlin。我们还建议您使用支持 Wasm 环境的最新浏览器版本。</p><h3 id="异常处理提案" tabindex="-1">异常处理提案 <a class="header-anchor" href="#异常处理提案" aria-label="Permalink to &quot;异常处理提案&quot;">​</a></h3><p>Kotlin 工具链默认使用 <a href="https://github.com/WebAssembly/exception-handling/blob/master/proposals/exception-handling/legacy/Exceptions.md" target="_blank" rel="noreferrer">传统异常处理提案</a>，这使得在更广泛的环境中运行生成的 Wasm 二进制文件成为可能。</p><p>自 Kotlin 2.0.0 起，我们已在 Kotlin/Wasm 中引入了对新版本 Wasm <a href="https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/Exceptions.md" target="_blank" rel="noreferrer">异常处理提案</a> 的支持。</p><p>此更新确保新的异常处理提案与 Kotlin 要求保持一致，从而实现在仅支持最新版本提案的虚拟机上使用 Kotlin/Wasm。</p><p>新的异常处理提案使用 <code>-Xwasm-use-new-exception-proposal</code> 编译器选项激活。它默认关闭。</p><p> </p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>通过我们的 <a href="https://github.com/Kotlin/kotlin-wasm-examples#readme" target="_blank" rel="noreferrer">Kotlin/Wasm 示例</a> 了解有关项目设置、依赖项使用以及其他任务的更多信息。</p></div><h2 id="使用默认导入" tabindex="-1">使用默认导入 <a class="header-anchor" href="#使用默认导入" aria-label="Permalink to &quot;使用默认导入&quot;">​</a></h2><p><a href="/kotlin/wasm-js-interop">将 Kotlin/Wasm 代码导入 Javascript</a> 已转向具名导出，不再使用默认导出。</p><p>如果您仍然想使用默认导入，请生成一个新的 JavaScript 包装模块。创建一个包含以下代码片段的 <code>.mjs</code> 文件：</p><div class="language-Javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Specifies the path to the main .mjs file</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moduleExports </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./wasm-test.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { moduleExports </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre></div><p>您可以将新的 <code>.mjs</code> 文件放置在 resources 文件夹中，它将在构建过程中自动放置在主 <code>.mjs</code> 文件旁边。</p><p>您也可以将 <code>.mjs</code> 文件放置在自定义位置。在这种情况下，您需要手动将其移动到主 <code>.mjs</code> 文件旁边，或调整导入语句中的路径以匹配其位置。</p><h2 id="kotlin-wasm-编译缓慢" tabindex="-1">Kotlin/Wasm 编译缓慢 <a class="header-anchor" href="#kotlin-wasm-编译缓慢" aria-label="Permalink to &quot;Kotlin/Wasm 编译缓慢&quot;">​</a></h2><p>在处理 Kotlin/Wasm 项目时，您可能会遇到编译时间过长的问题。出现此问题是因为 Kotlin/Wasm 工具链在每次您进行更改时都会重新编译整个代码库。</p><p>为缓解此问题，Kotlin/Wasm 目标平台支持增量编译，这使编译器能够仅重新编译与上次编译更改相关的文件。</p><p>使用增量编译可缩短编译时间。目前它可将开发速度提高一倍，并计划在未来版本中进一步改进。</p><p>在当前设置中，Wasm 目标平台的增量编译默认禁用。要启用它，请将以下行添加到您项目的 <code>local.properties</code> 或 <code>gradle.properties</code> 文件中：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.incremental.wasm=true</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>试用 Kotlin/Wasm 增量编译并<a href="https://youtrack.jetbrains.com/issue/KT-72158/Kotlin-Wasm-incremental-compilation-feedback" target="_blank" rel="noreferrer">分享您的反馈</a>。 您的见解有助于使该特性尽快稳定并默认启用。</p></div>`,41)]))}const b=e(o,[["render",l]]);export{d as __pageData,b as default};
