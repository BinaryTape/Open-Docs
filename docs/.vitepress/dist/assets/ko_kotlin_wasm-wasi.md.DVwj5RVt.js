import{_ as a,a as e,b as t,c as i}from"./chunks/wasm-wasi-tests-results.B152b-mz.js";import{_ as l}from"./chunks/join-slack-channel.C908i2w7.js";import{_ as o,c as n,o as r,ag as p}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"Kotlin/Wasm 및 WASI 시작하기","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/wasm-wasi.md","filePath":"ko/kotlin/wasm-wasi.md","lastUpdated":1754307826000}'),d={name:"ko/kotlin/wasm-wasi.md"};function h(c,s,m,g,k,b){return r(),n("div",null,s[0]||(s[0]=[p('<h1 id="kotlin-wasm-및-wasi-시작하기" tabindex="-1">Kotlin/Wasm 및 WASI 시작하기 <a class="header-anchor" href="#kotlin-wasm-및-wasi-시작하기" aria-label="Permalink to &quot;Kotlin/Wasm 및 WASI 시작하기&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasm은 <a href="/ko/kotlin/components-stability">알파 버전</a>입니다. 언제든지 변경될 수 있습니다. <a href="https://slack-chats.kotlinlang.org/c/webassembly" target="_blank" rel="noreferrer">Kotlin/Wasm 커뮤니티에 참여하세요.</a></p></div><p>이 튜토리얼에서는 다양한 WebAssembly 가상 머신에서 <a href="https://wasi.dev/" target="_blank" rel="noreferrer">WebAssembly System Interface (WASI)</a>를 사용하여 간단한 <a href="/ko/kotlin/wasm-overview">Kotlin/Wasm</a> 애플리케이션을 실행하는 방법을 보여줍니다.</p><p><a href="https://nodejs.org/en" target="_blank" rel="noreferrer">Node.js</a>, <a href="https://deno.com/" target="_blank" rel="noreferrer">Deno</a>, <a href="https://wasmedge.org/" target="_blank" rel="noreferrer">WasmEdge</a> 가상 머신에서 실행되는 애플리케이션 예시를 찾을 수 있습니다. 결과물은 표준 WASI API를 사용하는 간단한 애플리케이션입니다.</p><p>현재 Kotlin/Wasm은 Preview 1으로도 알려진 WASI 0.1을 지원합니다. <a href="https://youtrack.jetbrains.com/issue/KT-64568" target="_blank" rel="noreferrer">WASI 0.2 지원은 향후 릴리스에서 예정되어 있습니다</a>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin/Wasm 툴체인은 Node.js 태스크(<code>wasmWasiNode*</code>)를 기본적으로 제공합니다. Deno 또는 WasmEdge를 활용하는 다른 태스크 변형은 프로젝트에 사용자 지정 태스크로 포함되어 있습니다.</p></div><h2 id="시작하기-전에" tabindex="-1">시작하기 전에 <a class="header-anchor" href="#시작하기-전에" aria-label="Permalink to &quot;시작하기 전에&quot;">​</a></h2><ol><li><p><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a>의 최신 버전을 다운로드하여 설치합니다.</p></li><li><p>IntelliJ IDEA에서 <strong>File | New | Project from Version Control</strong>을 선택하여 <a href="https://github.com/Kotlin/kotlin-wasm-wasi-template" target="_blank" rel="noreferrer">Kotlin/Wasm WASI 템플릿 저장소</a>를 복제합니다.</p><p>명령줄에서 복제할 수도 있습니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:Kotlin/kotlin-wasm-wasi-template.git</span></span></code></pre></div></li></ol><h2 id="애플리케이션-실행하기" tabindex="-1">애플리케이션 실행하기 <a class="header-anchor" href="#애플리케이션-실행하기" aria-label="Permalink to &quot;애플리케이션 실행하기&quot;">​</a></h2><ol><li><p><strong>View</strong> | <strong>Tool Windows</strong> | <strong>Gradle</strong>을 선택하여 <strong>Gradle</strong> 도구 창을 엽니다.</p><p>프로젝트가 로드되면 <strong>Gradle</strong> 도구 창에서 <strong>kotlin-wasm-wasi-example</strong> 아래의 Gradle 태스크를 찾을 수 있습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>태스크가 성공적으로 로드되려면 Gradle JVM으로 최소 Java 11이 필요합니다.</p></div></li><li><p><strong>kotlin-wasm-wasi-example</strong> | <strong>Tasks</strong> | <strong>kotlin node</strong>에서 다음 Gradle 태스크 중 하나를 선택하여 실행합니다.</p><ul><li><p>Node.js에서 애플리케이션을 실행하려면 <strong>wasmWasiNodeRun</strong>을 선택합니다.</p></li><li><p>Deno에서 애플리케이션을 실행하려면 <strong>wasmWasiDenoRun</strong>을 선택합니다.</p></li><li><p>WasmEdge에서 애플리케이션을 실행하려면 <strong>wasmWasiWasmEdgeRun</strong>을 선택합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Windows 플랫폼에서 Deno를 사용할 경우, <code>deno.exe</code>가 설치되어 있는지 확인하세요. 자세한 내용은 <a href="https://docs.deno.com/runtime/manual/getting_started/installation" target="_blank" rel="noreferrer">Deno 설치 문서</a>를 참조하세요.</p></div></li></ul><p><img src="'+a+'" alt="Kotlin/Wasm and WASI tasks" width="600"></p></li></ol><p>또는 <code> kotlin-wasm-wasi-template</code> 루트 디렉토리에서 터미널에 다음 명령 중 하나를 실행합니다:</p><ul><li><p>Node.js에서 애플리케이션을 실행하려면:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmWasiNodeRun</span></span></code></pre></div></li><li><p>Deno에서 애플리케이션을 실행하려면:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmWasiDenoRun</span></span></code></pre></div></li><li><p>WasmEdge에서 애플리케이션을 실행하려면:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmWasiWasmEdgeRun</span></span></code></pre></div></li></ul><p>애플리케이션이 성공적으로 빌드되면 터미널에 메시지가 표시됩니다:</p><p><img src="'+e+'" alt="Kotlin/Wasm and WASI app" width="600"></p><h2 id="애플리케이션-테스트하기" tabindex="-1">애플리케이션 테스트하기 <a class="header-anchor" href="#애플리케이션-테스트하기" aria-label="Permalink to &quot;애플리케이션 테스트하기&quot;">​</a></h2><p>다양한 가상 머신에서 Kotlin/Wasm 애플리케이션이 올바르게 작동하는지 테스트할 수도 있습니다.</p><p>Gradle 도구 창에서 <strong>kotlin-wasm-wasi-example</strong> | <strong>Tasks</strong> | <strong>verification</strong> 아래의 다음 Gradle 태스크 중 하나를 실행합니다:</p><ul><li>Node.js에서 애플리케이션을 테스트하려면 <strong>wasmWasiNodeTest</strong>를 선택합니다.</li><li>Deno에서 애플리케이션을 테스트하려면 <strong>wasmWasiDenoTest</strong>를 선택합니다.</li><li>WasmEdge에서 애플리케이션을 테스트하려면 <strong>wasmWasiWasmEdgeTest</strong>를 선택합니다.</li></ul><p><img src="'+t+'" alt="Kotlin/Wasm and WASI test tasks" width="600"></p><p>또는 <code> kotlin-wasm-wasi-template</code> 루트 디렉토리에서 터미널에 다음 명령 중 하나를 실행합니다:</p><ul><li><p>Node.js에서 애플리케이션을 테스트하려면:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmWasiNodeTest</span></span></code></pre></div></li><li><p>Deno에서 애플리케이션을 테스트하려면:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmWasiDenoTest</span></span></code></pre></div></li><li><p>WasmEdge에서 애플리케이션을 테스트하려면:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmWasiWasmEdgeTest</span></span></code></pre></div></li></ul><p>터미널에 테스트 결과가 표시됩니다:</p><p><img src="'+i+'" alt="Kotlin/Wasm and WASI test" width="600"></p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>Kotlin Slack의 Kotlin/Wasm 커뮤니티에 참여하세요:</p><p><a href="https://slack-chats.kotlinlang.org/c/webassembly"><img src="'+l+'" width="500" alt="Join the Kotlin/Wasm community" style=""></a></p><p>더 많은 Kotlin/Wasm 예시를 시도해 보세요:</p><ul><li><a href="https://github.com/JetBrains/compose-multiplatform/tree/master/examples/imageviewer" target="_blank" rel="noreferrer">Compose 이미지 뷰어</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/tree/master/examples/jetsnack" target="_blank" rel="noreferrer">Jetsnack 애플리케이션</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-nodejs-template" target="_blank" rel="noreferrer">Node.js 예시</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-compose-template" target="_blank" rel="noreferrer">Compose 예시</a></li></ul>',28)]))}const f=o(d,[["render",h]]);export{v as __pageData,f as default};
