import{_ as h}from"./chunks/native-gc-signposts.CmU4CX4K.js";import{_ as k,C as l,c as r,o,ag as i,j as a,G as t,a as n,w as d}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"Kotlin/Native 内存管理","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/native-memory-manager.md","filePath":"kotlin/native-memory-manager.md","lastUpdated":1754307826000}'),c={name:"kotlin/native-memory-manager.md"};function g(E,s,y,u,F,m){const p=l("shortcut"),e=l("TopicTitle");return o(),r("div",null,[s[9]||(s[9]=i('<h1 id="kotlin-native-内存管理" tabindex="-1">Kotlin/Native 内存管理 <a class="header-anchor" href="#kotlin-native-内存管理" aria-label="Permalink to &quot;Kotlin/Native 内存管理&quot;">​</a></h1><p>Kotlin/Native 使用现代内存管理器，类似于 JVM、Go 和其他主流技术，并包含以下特性：</p><ul><li>对象存储在共享堆中，可以从任何线程访问。</li><li>定期执行追踪式垃圾回收，以回收那些从“根”不可达的对象，例如局部变量和全局变量。</li></ul><h2 id="垃圾回收器" tabindex="-1">垃圾回收器 <a class="header-anchor" href="#垃圾回收器" aria-label="Permalink to &quot;垃圾回收器&quot;">​</a></h2><p>Kotlin/Native 的垃圾回收器 (GC) 算法正在不断演进。目前，它作为 Stop-the-world 标记-并发清除收集器运行，不将堆分离为分代。</p><p>GC 在单独的线程上执行，并根据内存压力启发式或通过计时器启动。或者，它也可以<a href="#enable-garbage-collection-manually">手动调用</a>。</p><p>GC 在多个线程中并行处理标记队列，包括应用程序线程、GC 线程和可选的标记线程。应用程序线程和至少一个 GC 线程参与标记过程。默认情况下，当 GC 标记堆中的对象时，应用程序线程必须暂停。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>你可以使用 <code>kotlin.native.binary.gcMarkSingleThreaded=true</code> 编译器选项禁用标记阶段的并行化。 然而，这可能会增加大型堆上的垃圾回收器暂停时间。</p></div><p>标记阶段完成后，GC 处理弱引用并置空指向未标记对象的引用点。默认情况下，弱引用并发处理，以减少 GC 暂停时间。</p><p>关于如何<a href="#monitor-gc-performance">监控</a>和<a href="#optimize-gc-performance">优化</a>垃圾回收，请参见相关内容。</p><h3 id="手动启用垃圾回收" tabindex="-1">手动启用垃圾回收 <a class="header-anchor" href="#手动启用垃圾回收" aria-label="Permalink to &quot;手动启用垃圾回收&quot;">​</a></h3><p>要强制启动垃圾回收器，请调用 <code>kotlin.native.internal.GC.collect()</code>。此方法会触发一次新的回收并等待其完成。</p><h3 id="监控-gc-性能" tabindex="-1">监控 GC 性能 <a class="header-anchor" href="#监控-gc-性能" aria-label="Permalink to &quot;监控 GC 性能&quot;">​</a></h3><p>要监控 GC 性能，你可以查看其日志并诊断问题。要启用日志记录，请在你的 Gradle 构建脚本中设置以下编译器选项：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-Xruntime-logs=gc=info</span></span></code></pre></div><p>目前，日志仅打印到 <code>stderr</code>。</p><p>在 Apple 平台上，你可以利用 Xcode Instruments 工具包来调试 iOS 应用性能。垃圾回收器会通过 Instruments 中可用的标示来报告暂停。标示可以在你的应用内启用自定义日志记录，让你检查 GC 暂停是否与应用程序冻结相对应。</p><p>要在你的应用中跟踪 GC 相关暂停：</p>',18)),a("ol",null,[s[7]||(s[7]=i('<li><p>要启用此特性，请在你的 <code>gradle.properties</code> 文件中设置以下编译器选项：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.enableSafepointSignposts=true</span></span></code></pre></div></li>',1)),a("li",null,[a("p",null,[s[1]||(s[1]=n("打开 Xcode，前往 ")),s[2]||(s[2]=a("strong",null,"Product",-1)),s[3]||(s[3]=n(" | ")),s[4]||(s[4]=a("strong",null,"Profile",-1)),s[5]||(s[5]=n(" 或按下 ")),t(p,null,{default:d(()=>s[0]||(s[0]=[n("Cmd + I")])),_:1}),s[6]||(s[6]=n("。此操作将编译你的应用并启动 Instruments。"))])]),s[8]||(s[8]=i('<li><p>在模板选择中，选择 <strong>os_signpost</strong>。</p></li><li><p>通过指定 <code>org.kotlinlang.native.runtime</code> 作为<strong>子系统</strong>和 <code>safepoint</code> 作为<strong>类别</strong>来配置它。</p></li><li><p>点击红色录制按钮以运行你的应用并开始录制标示事件：</p><p><img src="'+h+'" alt="将 GC 暂停作为标示进行跟踪" width="700"></p><p>在这里，最低图表上的每个蓝色斑点都代表一个单独的标示事件，即一次 GC 暂停。</p></li>',3))]),s[10]||(s[10]=i(`<h3 id="优化-gc-性能" tabindex="-1">优化 GC 性能 <a class="header-anchor" href="#优化-gc-性能" aria-label="Permalink to &quot;优化 GC 性能&quot;">​</a></h3><p>为了改进 GC 性能，你可以启用并发标记以减少 GC 暂停时间。这允许垃圾回收的标记阶段与应用程序线程同时运行。</p><p>此特性目前为<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。要启用它，请在你的 <code>gradle.properties</code> 文件中设置以下编译器选项：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.gc=cms</span></span></code></pre></div><h3 id="禁用垃圾回收" tabindex="-1">禁用垃圾回收 <a class="header-anchor" href="#禁用垃圾回收" aria-label="Permalink to &quot;禁用垃圾回收&quot;">​</a></h3><p>建议保持 GC 启用状态。然而，在某些情况下，例如出于测试目的或如果你遇到问题且程序生命周期较短，你可以禁用它。为此，请在你的 <code>gradle.properties</code> 文件中设置以下二进制选项：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.gc=noop</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>启用此选项后，GC 不会回收 Kotlin 对象，因此只要程序运行，内存消耗就会持续增长。请注意不要耗尽系统内存。</p></div><h2 id="内存消耗" tabindex="-1">内存消耗 <a class="header-anchor" href="#内存消耗" aria-label="Permalink to &quot;内存消耗&quot;">​</a></h2><p>Kotlin/Native 使用它自己的<a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/runtime/src/alloc/custom/README.md" target="_blank" rel="noreferrer">内存分配器</a>。它将系统内存划分为页，允许以连续顺序独立清除。每次分配都成为页内的一个内存块，并且页会跟踪块大小。不同页类型针对各种分配大小进行了优化。内存块的连续排列确保高效地迭代所有已分配块。</p><p>当线程分配内存时，它会根据分配大小搜索合适的页。线程维护一组用于不同大小类别的页。通常，给定大小的当前页可以容纳分配。如果不能，线程会从共享分配空间请求不同的页。此页可能已经可用、需要清除或必须首先创建。</p><p>Kotlin/Native 内存分配器具有防止内存分配突然激增的保护。它防止出现变异器开始快速分配大量垃圾而 GC 线程无法跟上，导致内存使用量无休止地增长的情况。在这种情况下，GC 会强制进入 Stop-the-world 阶段，直到迭代完成。</p><p>你可以自行监控内存消耗，检查内存泄漏，并调整内存消耗。</p><h3 id="监控内存消耗" tabindex="-1">监控内存消耗 <a class="header-anchor" href="#监控内存消耗" aria-label="Permalink to &quot;监控内存消耗&quot;">​</a></h3><p>要调试内存问题，你可以检查内存管理器指标。此外，还可以在 Apple 平台跟踪 Kotlin 的内存消耗。</p><h4 id="检查内存泄漏" tabindex="-1">检查内存泄漏 <a class="header-anchor" href="#检查内存泄漏" aria-label="Permalink to &quot;检查内存泄漏&quot;">​</a></h4><p>要访问内存管理器指标，请调用 <code>kotlin.native.internal.GC.lastGCInfo()</code>。此方法返回垃圾回收器上次运行的统计信息。这些统计信息可用于：</p><ul><li>调试使用全局变量时的内存泄漏</li><li>运行测试时检查泄漏</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.native.internal.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.test.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Resource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GC.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GC.lastGCInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.memoryUsageAfter[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;heap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.totalObjectsSizeBytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    global.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果你移除下一行，测试将失败</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    global.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> before </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用单独的函数是为了确保所有临时对象都被清除</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> after </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(before, after)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="在-apple-平台跟踪内存消耗" tabindex="-1">在 Apple 平台跟踪内存消耗 <a class="header-anchor" href="#在-apple-平台跟踪内存消耗" aria-label="Permalink to &quot;在 Apple 平台跟踪内存消耗&quot;">​</a></h4><p>在 Apple 平台上调试内存问题时，你可以查看 Kotlin 代码保留了多少内存。Kotlin 的份额使用标识符进行标记，并可以通过 Xcode Instruments 中的 VM Tracker 等工具进行跟踪。</p><p>此特性仅适用于默认的 Kotlin/Native 内存分配器，且 <em>所有</em> 以下条件均满足时：</p><ul><li><p><strong>标记已启用</strong>。内存应使用有效的标识符进行标记。Apple 建议使用 240 到 255 之间的数字；默认值为 246。</p><p>如果你设置了 <code>kotlin.native.binary.mmapTag=0</code> Gradle 属性，则标记被禁用。</p></li><li><p><strong>使用 mmap 进行分配</strong>。分配器应使用 <code>mmap</code> 系统调用将文件映射到内存中。</p><p>如果你设置了 <code>kotlin.native.binary.disableMmap=true</code> Gradle 属性，则默认分配器使用 <code>malloc</code> 而不是 <code>mmap</code>。</p></li><li><p><strong>分页已启用</strong>。应启用分配的分页（缓冲）。</p><p>如果你设置了 <a href="#disable-allocator-paging"><code>kotlin.native.binary.pagedAllocator=false</code></a> Gradle 属性，则内存改为按对象进行保留。</p></li></ul><h3 id="调整内存消耗" tabindex="-1">调整内存消耗 <a class="header-anchor" href="#调整内存消耗" aria-label="Permalink to &quot;调整内存消耗&quot;">​</a></h3><p>如果你遇到意外的高内存消耗，请尝试以下解决方案：</p><h4 id="更新-kotlin" tabindex="-1">更新 Kotlin <a class="header-anchor" href="#更新-kotlin" aria-label="Permalink to &quot;更新 Kotlin&quot;">​</a></h4><p>将 Kotlin 更新到最新版本。我们正在不断改进内存管理器，因此即使是简单的编译器更新也可能改进内存消耗。</p>`,27)),t(e,{id:"禁用分配器分页",level:"4",title:"禁用分配器分页",labelRef:"experimental-opt-in"}),s[11]||(s[11]=i('<p>你可以禁用分配的分页（缓冲），以便内存分配器按对象保留内存。在某些情况下，这可能有助于你满足严格的内存限制或减少应用程序启动时的内存消耗。</p><p>为此，请在你的 <code>gradle.properties</code> 文件中设置以下选项：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.pagedAllocator=false</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>禁用分配器分页后，<a href="#track-memory-consumption-on-apple-platforms">在 Apple 平台跟踪内存消耗</a>将不可能。</p></div>',4)),t(e,{id:"启用-latin-1-字符串支持",level:"4",title:"启用 Latin-1 字符串支持",labelRef:"experimental-opt-in"}),s[12]||(s[12]=i(`<p>默认情况下，Kotlin 中的字符串使用 UTF-16 编码存储，其中每个字符由两个字节表示。在某些情况下，这会导致字符串在二进制文件中占用的空间是源代码的两倍，并且读取数据占用两倍的内存。</p><p>为了减小应用程序的二进制大小并调整内存消耗，你可以启用 Latin-1 编码字符串的支持。<a href="https://en.wikipedia.org/wiki/ISO/IEC_8859-1" target="_blank" rel="noreferrer">Latin-1 (ISO 8859-1)</a> 编码仅用一个字节表示前 256 个 Unicode 字符。</p><p>要启用它，请在你的 <code>gradle.properties</code> 文件中设置以下选项：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.latin1Strings=true</span></span></code></pre></div><p>启用 Latin-1 支持后，只要所有字符都在其范围内，字符串就会以 Latin-1 编码存储。否则，将使用默认的 UTF-16 编码。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>尽管此特性是实验性的，但 cinterop 扩展函数 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/pin.html" target="_blank" rel="noreferrer"><code>String.pin</code></a>、 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/use-pinned.html" target="_blank" rel="noreferrer"><code>String.usePinned</code></a> 和 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/ref-to.html" target="_blank" rel="noreferrer"><code>String.refTo</code></a> 的效率会降低。 每次调用它们都可能触发自动字符串转换为 UTF-16。</p></div><p>如果这些选项都没有帮助，请在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中创建一个问题。</p><h2 id="后台的单元测试" tabindex="-1">后台的单元测试 <a class="header-anchor" href="#后台的单元测试" aria-label="Permalink to &quot;后台的单元测试&quot;">​</a></h2><p>在单元测试中，没有任何东西处理主线程队列，因此不要使用 <code>Dispatchers.Main</code>，除非它被模拟了。可以通过调用 <code>kotlinx-coroutines-test</code> 中的 <code>Dispatchers.setMain</code> 来模拟它。</p><p>如果你不依赖 <code>kotlinx.coroutines</code> 或者 <code>Dispatchers.setMain</code> 由于某种原因对你不起作用，请尝试以下变通方法来实现测试启动器：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testlauncher</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.CoreFoundation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.native.concurrent.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.native.internal.test.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.system.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mainBackground</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> worker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Worker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main-background&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    worker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TransferMode.SAFE, { args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">freeze</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testLauncherEntryPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        exitProcess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    CFRunLoopRun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CFRunLoopRun should never return&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后，使用 <code>-e testlauncher.mainBackground</code> 编译器选项编译测试二进制文件。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><ul><li><a href="/kotlin/native-migration-guide">从传统内存管理器迁移</a></li><li><a href="/kotlin/native-arc-integration">检查与 Swift/Objective-C ARC 集成的具体细节</a></li></ul>`,14))])}const f=k(c,[["render",g]]);export{v as __pageData,f as default};
