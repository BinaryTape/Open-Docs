import{_ as p,C as i,c as h,o as k,G as a,ag as r,w as o,a as d}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/server-routing.md","filePath":"zh-Hant/ktor/server-routing.md","lastUpdated":1755457140000}'),c={name:"zh-Hant/ktor/server-routing.md"};function E(g,s,u,y,F,C){const n=i("TopicTitle"),e=i("show-structure"),t=i("primary-label"),l=i("link-summary");return k(),h("div",null,[a(n,{labelRef:"server-plugin",title:"路由"}),a(e,{for:"chapter",depth:"2"}),a(t,{ref:"server-plugin"},null,512),a(l,null,{default:o(()=>s[0]||(s[0]=[d(" 路由是一個用於處理伺服器應用程式中傳入請求的核心外掛。 ")])),_:1}),s[1]||(s[1]=r(`<p>路由是 Ktor 核心的 <a href="./server-plugins">外掛</a>，用於處理伺服器應用程式中傳入的請求。當客戶端向特定 URL（例如 <code>/hello</code>）發出請求時，路由機制允許我們定義如何處理此請求。</p><h2 id="install_plugin" tabindex="-1">安裝路由 <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;安裝路由 {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p>路由外掛可以透過以下方式安裝：</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RoutingRoot) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>由於路由外掛在任何應用程式中都非常常見，因此有一個方便的 <code>routing</code> 函式，使安裝路由更加簡單。在下面的程式碼片段中，<code>install(RoutingRoot)</code> 被 <code>routing</code> 函式取代：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="define_route" tabindex="-1">定義路由處理器 <a class="header-anchor" href="#define_route" aria-label="Permalink to &quot;定義路由處理器 {id=&quot;define_route&quot;}&quot;">​</a></h2><p>在<a href="#install_plugin">安裝</a>路由外掛後，您可以在 <code>routing</code> 內部呼叫 <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.routing/route.html" target="_blank" rel="noreferrer">route</a> 函式來定義路由：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.http.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpMethod.Get) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Ktor 還提供了一系列函式，使定義路由處理器變得更加容易和簡潔。例如，您可以將先前的程式碼替換為一個 <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.routing/get.html" target="_blank" rel="noreferrer">get</a> 函式，現在它只需要接收 URL 和處理請求的程式碼：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>同樣地，Ktor 為所有其他動詞提供了函式，即 <code>put</code>、<code>post</code>、<code>head</code> 等。</p><p>總之，您需要指定以下設定來定義路由：</p><ul><li><p><strong>HTTP 動詞</strong></p><p>選擇 HTTP 動詞，例如 <code>GET</code>、<code>POST</code>、<code>PUT</code> 等。最方便的方式是使用專用的動詞函式，例如 <code>get</code>、<code>post</code>、<code>put</code> 等。</p></li><li><p><strong>路徑模式</strong></p><p>指定用於<a href="#match_url">匹配 URL 路徑</a>的路徑模式，例如 <code>/hello</code>、<code>/customer/{id}</code>。您可以將路徑模式直接傳遞給 <code>get</code>/<code>post</code>/等函式，或者您可以使用 <code>route</code> 函式來將<a href="#multiple_routes">路由處理器</a>分組並定義<a href="#nested_routes">巢狀路由</a>。</p></li><li><p><strong>處理器</strong></p><p>指定如何處理<a href="./server-requests">請求</a>和<a href="./server-responses">回應</a>。在處理器內部，您可以存取 <code>ApplicationCall</code>，處理客戶端請求，並傳送回應。</p></li></ul><h2 id="match_url" tabindex="-1">指定路徑模式 <a class="header-anchor" href="#match_url" aria-label="Permalink to &quot;指定路徑模式 {id=&quot;match_url&quot;}&quot;">​</a></h2><p>傳遞給 <a href="#define_route">routing</a> 函式（<code>route</code>、<code>get</code>、<code>post</code> 等）的路徑模式用於匹配 URL 的 <em>path</em> 元件。路徑可以包含由斜線 <code>/</code> 字元分隔的路徑區段序列。</p><blockquote><p>請注意，Ktor 區分帶有和不帶有結尾斜線的路徑。您可以透過<a href="./server-plugins#install">安裝</a> <code>IgnoreTrailingSlash</code> 外掛來更改此行為。</p></blockquote><p>以下是一些路徑範例：</p><ul><li><code>/hello</code> 包含單個路徑區段的路徑。</li><li><code>/order/shipment</code> 包含多個路徑區段的路徑。您可以按原樣將此類路徑傳遞給 <a href="#define_route">route/get/等</a> 函式，或者透過<a href="#multiple_routes">巢狀</a>多個 <code>route</code> 函式來組織子路由。</li><li><code>/user/{login}</code> 帶有 <code>login</code> <a href="#path_parameter">路徑參數</a>的路徑，其值可以在路由處理器內部存取。</li><li><code>/user/*</code> 帶有<a href="#wildcard">萬用字元</a>的路徑，可匹配任何路徑區段。</li><li><code>/user/{...}</code> 帶有<a href="#tailcard">尾部萬用字元</a>的路徑，可匹配 URL 路徑的所有其餘部分。</li><li><code>/user/{param...}</code> 包含<a href="#path_parameter_tailcard">帶有尾部萬用字元的路徑參數</a>的路徑。</li><li><code>Regex(&quot;/.+/hello&quot;)</code> 包含<a href="#regular_expression">正規表達式</a>的路徑，該正規表達式匹配路徑區段，直到並包括最後一個 <code>/hello</code> 的出現。</li></ul><h3 id="wildcard" tabindex="-1">萬用字元 <a class="header-anchor" href="#wildcard" aria-label="Permalink to &quot;萬用字元 {id=&quot;wildcard&quot;}&quot;">​</a></h3><p><em>萬用字元</em> (<code>*</code>) 匹配任何路徑區段，且不能缺失。例如，<code>/user/*</code> 匹配 <code>/user/john</code>，但不匹配 <code>/user</code>。</p><h3 id="tailcard" tabindex="-1">尾部萬用字元 <a class="header-anchor" href="#tailcard" aria-label="Permalink to &quot;尾部萬用字元 {id=&quot;tailcard&quot;}&quot;">​</a></h3><p><em>尾部萬用字元</em> (<code>{...}</code>) 匹配 URL 路徑的所有其餘部分，可以包含多個路徑區段，並且可以是空的。例如，<code>/user/{...}</code> 匹配 <code>/user/john/settings</code> 以及 <code>/user</code>。</p><h3 id="path_parameter" tabindex="-1">路徑參數 <a class="header-anchor" href="#path_parameter" aria-label="Permalink to &quot;路徑參數 {id=&quot;path_parameter&quot;}&quot;">​</a></h3><p><em>路徑參數</em> (<code>{param}</code>) 匹配一個路徑區段並將其作為名為 <code>param</code> 的參數捕獲。這個路徑區段是強制性的，但您可以透過添加問號使其成為可選的：<code>{param?}</code>。例如：</p><ul><li><code>/user/{login}</code> 匹配 <code>/user/john</code>，但不匹配 <code>/user</code>。</li><li><code>/user/{login?}</code> 匹配 <code>/user/john</code> 以及 <code>/user</code>。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>請注意，可選的路徑參數 <code>{param?}</code> 只能用於路徑的末尾。</p></div><p>要在路由處理器內部存取參數值，請使用 <code>call.parameters</code> 屬性。例如，在下面的程式碼片段中，對於 <code>/user/admin</code> 路徑，<code>call.parameters[&quot;login&quot;]</code> 將傳回 <em>admin</em>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user/{login}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (call.parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>如果請求包含查詢字串，<code>call.parameters</code> 也會包含此查詢字串的參數。要了解如何在處理器內部存取查詢字串及其參數，請參閱<a href="./server-requests#query_parameters">查詢參數</a>。</p></blockquote><h3 id="path_parameter_tailcard" tabindex="-1">帶有尾部萬用字元的路徑參數 <a class="header-anchor" href="#path_parameter_tailcard" aria-label="Permalink to &quot;帶有尾部萬用字元的路徑參數 {id=&quot;path_parameter_tailcard&quot;}&quot;">​</a></h3><p>帶有尾部萬用字元的路徑參數 (<code>{param...}</code>) 匹配 URL 路徑的所有其餘部分，並使用 <code>param</code> 作為鍵將每個路徑區段的多個值放入參數中。例如，<code>/user/{param...}</code> 匹配 <code>/user/john/settings</code>。 要在路由處理器內部存取路徑區段的值，請使用 <code>call.parameters.getAll(&quot;param&quot;)</code>。對於上述範例，<code>getAll</code> 函式將傳回一個包含 <em>john</em> 和 <em>settings</em> 值的陣列。</p><h3 id="regular_expression" tabindex="-1">正規表達式 <a class="header-anchor" href="#regular_expression" aria-label="Permalink to &quot;正規表達式 {id=&quot;regular_expression&quot;}&quot;">​</a></h3><p>正規表達式可以與所有定義路由處理器函式一起使用：<code>route</code>、<code>get</code>、<code>post</code> 等。</p><blockquote><p>要了解更多關於正規表達式的資訊，請參閱 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/" target="_blank" rel="noreferrer">Kotlin 文件</a>。</p></blockquote><p>讓我們編寫一個匹配任何以 <code>/hello</code> 結尾的路徑的路由。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.+/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>透過這個路由定義，任何以 <code>/hello</code> 結尾的路徑的傳入請求，例如 <code>/foo/hello</code>、<code>/bar/baz/hello</code> 等，都將被匹配。</p><h4 id="在處理器中存取路徑部分" tabindex="-1">在處理器中存取路徑部分 <a class="header-anchor" href="#在處理器中存取路徑部分" aria-label="Permalink to &quot;在處理器中存取路徑部分&quot;">​</a></h4><p>在正規表達式中，具名群組 (named groups) 是一種捕獲與模式匹配的字串特定部分並為其分配名稱的方法。 語法 <code>(?&lt;name&gt;pattern)</code> 用於定義具名群組，其中 <code>name</code> 是群組的名稱，<code>pattern</code> 是匹配該群組的正規表達式模式。</p><p>透過在路由函式中定義具名群組，您可以捕獲路徑的一部分，然後在處理器函式中，您可以使用 <code>call.parameters</code> 物件存取捕獲的參數。</p><p>例如，您可以定義一個路由，該路由匹配包含整數識別符號後跟 <code>/hello</code> 的路徑請求。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;(?&lt;id&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+)/hello&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在下面的程式碼中，<code>(?&lt;id&gt;\\d+)</code> 具名群組用於從請求路徑中捕獲整數識別符號 <code>id</code>，並且 <code>call.parameters</code> 屬性用於在處理器函式中存取捕獲的 <code>id</code> 參數。</p><p>非具名群組無法在正規表達式路由處理器內部存取，但您可以使用它們來匹配路徑。例如，路徑 <code>hello/world</code> 將被匹配，而 <code>hello/World</code> 則不會：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello/([a-z]+)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此外，整個路徑區段都需要被正規表達式消耗。例如，路徑模式 <code>get(Regex(&quot;[a-z]+&quot;))</code> 將不匹配路徑 <code>&quot;hello1&quot;</code>，但會匹配路徑 <code>hello/1</code> 的 <code>hello</code> 部分，並將 <code>/1</code> 留給下一個路由。</p><h2 id="multiple_routes" tabindex="-1">定義多個路由處理器 <a class="header-anchor" href="#multiple_routes" aria-label="Permalink to &quot;定義多個路由處理器 {id=&quot;multiple_routes&quot;}&quot;">​</a></h2><h3 id="group_by_verb" tabindex="-1">依動詞函式分組路由 <a class="header-anchor" href="#group_by_verb" aria-label="Permalink to &quot;依動詞函式分組路由 {id=&quot;group_by_verb&quot;}&quot;">​</a></h3><p>如果您想定義多個路由處理器（這在任何應用程式中都是如此），您可以直接將它們添加到 <code>routing</code> 函式中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/customer/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/customer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在這種情況下，每個路由都有自己的函式，並回應特定的端點和 HTTP 動詞。</p><h3 id="group_by_path" tabindex="-1">依路徑分組路由 <a class="header-anchor" href="#group_by_path" aria-label="Permalink to &quot;依路徑分組路由 {id=&quot;group_by_path&quot;}&quot;">​</a></h3><p>另一種方式是依路徑分組，您定義路徑，然後使用 <code>route</code> 函式將該路徑的動詞作為巢狀函式放置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/customer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="nested_routes" tabindex="-1">巢狀路由 <a class="header-anchor" href="#nested_routes" aria-label="Permalink to &quot;巢狀路由 {id=&quot;nested_routes&quot;}&quot;">​</a></h3><p>無論您如何分組，Ktor 還允許您將子路由作為 <code>route</code> 函式的參數。這對於定義邏輯上是其他資源子資源的資源非常有用。 以下範例展示了如何回應對 <code>/order/shipment</code> 的 <code>GET</code> 和 <code>POST</code> 請求：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/shipment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>因此，每次 <code>route</code> 呼叫都會生成一個獨立的路徑區段。</p><p>傳遞給 <a href="#define_route">routing</a> 函式（<code>route</code>、<code>get</code>、<code>post</code> 等）的路徑模式用於匹配 URL 的 <em>path</em> 元件。路徑可以包含由斜線 <code>/</code> 字元分隔的路徑區段序列。</p><h2 id="route_extension_function" tabindex="-1">路由擴充函式 <a class="header-anchor" href="#route_extension_function" aria-label="Permalink to &quot;路由擴充函式 {id=&quot;route_extension_function&quot;}&quot;">​</a></h2><p>一種常見的模式是在 <code>Route</code> 類型上使用擴充函式來定義實際的路由，這使我們能夠輕鬆存取動詞並消除將所有路由放在單個路由函式中的混亂。您可以獨立於您決定如何分組路由的方式應用此模式。因此，第一個範例可以以更簡潔的方式表示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOrdersRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    totalizeOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOrdersRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">totalizeOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order/{id}/total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關示範此方法的完整範例，請參閱 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/legacy-interactive-website" target="_blank" rel="noreferrer">legacy-interactive-website</a>。</p><blockquote><p>為了使我們的應用程式在可維護性方面能夠擴展，建議遵循某些<a href="./server-application-structure">結構化模式</a>。</p></blockquote><h2 id="trace_routes" tabindex="-1">追蹤路由 <a class="header-anchor" href="#trace_routes" aria-label="Permalink to &quot;追蹤路由 {id=&quot;trace_routes&quot;}&quot;">​</a></h2><p>配置<a href="./server-logging">日誌記錄</a>後，Ktor 會啟用路由追蹤，幫助您判斷某些路由為何沒有被執行。 例如，如果您<a href="./server-run">執行</a>應用程式並向指定端點發出請求，應用程式的輸出可能如下所示：</p><div class="language-Console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TRACE Application - Trace for [missing-page]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/, segment:0 -&gt; SUCCESS @ /</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  /, segment:0 -&gt; SUCCESS @ /</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    /(method:GET), segment:0 -&gt; FAILURE &quot;Not all segments matched&quot; @ /(method:GET)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matched routes:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  No results</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Route resolve result:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  FAILURE &quot;No matched subtrees found&quot; @ /</span></span></code></pre></div><blockquote><p>要在 <a href="./server-native">Native 伺服器</a>上啟用路由追蹤，請在<a href="./server-run">執行</a>應用程式時將 <em>TRACE</em> 值傳遞給 <code>KTOR_LOG_LEVEL</code> 環境變數。</p></blockquote>`,69))])}const b=p(c,[["render",E]]);export{q as __pageData,b as default};
