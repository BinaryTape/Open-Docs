import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"네이티브 배포","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-native-distribution.md","filePath":"ko/kmp/compose-native-distribution.md","lastUpdated":1755516278000}'),e={name:"ko/kmp/compose-native-distribution.md"};function l(p,s,h,k,d,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="네이티브-배포" tabindex="-1">네이티브 배포 <a class="header-anchor" href="#네이티브-배포" aria-label="Permalink to &quot;네이티브 배포&quot;">​</a></h1><p>여기서는 네이티브 배포에 대해 알아봅니다. 지원되는 모든 시스템에 대한 설치 프로그램 및 패키지를 생성하는 방법과 배포와 동일한 설정으로 애플리케이션을 로컬에서 실행하는 방법을 다룹니다.</p><p>다음 주제에 대한 자세한 내용은 계속해서 읽어보십시오.</p><ul><li><a href="#gradle-plugin">Compose Multiplatform Gradle 플러그인이란 무엇인가요</a>?</li><li>애플리케이션을 로컬에서 실행하는 것과 같은 <a href="#basic-tasks">기본 태스크</a>와 코드 압축 및 난독화와 같은 <a href="#minification-and-obfuscation">고급 태스크</a>에 대한 세부 정보.</li><li><a href="#including-jdk-modules">JDK 모듈을 포함하는 방법</a> 및 <code>ClassNotFoundException</code> 처리.</li><li><a href="#specifying-distribution-properties">배포 속성을 지정하는 방법</a>: 패키지 버전, JDK 버전, 출력 디렉터리, 런처 속성 및 메타데이터.</li><li>리소스 라이브러리, JVM 리소스 로딩, 또는 패키지된 애플리케이션에 파일을 추가하여 <a href="#managing-resources">리소스를 관리하는 방법</a>.</li><li>Gradle 소스 세트, Kotlin JVM 타겟, 또는 수동으로 <a href="#custom-source-sets">사용자 지정 소스 세트를 설정하는 방법</a>.</li><li>각 OS에 대해 <a href="#application-icon">애플리케이션 아이콘을 지정하는 방법</a>.</li><li>Linux에서 패키지 관리자의 이메일, macOS에서 Apple App Store의 앱 카테고리와 같은 <a href="#platform-specific-options">플랫폼별 옵션</a>.</li><li><a href="#macos-specific-configuration">macOS별 구성</a>: 코드 서명, 공증 및 <code>Info.plist</code>.</li></ul><h2 id="gradle-플러그인" tabindex="-1">Gradle 플러그인 <a class="header-anchor" href="#gradle-플러그인" aria-label="Permalink to &quot;Gradle 플러그인&quot;">​</a></h2><p>이 가이드는 주로 Compose Multiplatform Gradle 플러그인을 사용하여 Compose 애플리케이션을 패키징하는 데 중점을 둡니다. <code>org.jetbrains.compose</code> 플러그인은 기본 패키징, 난독화 및 macOS 코드 서명 작업을 제공합니다.</p><p>이 플러그인은 <code>jpackage</code>를 사용하여 애플리케이션을 네이티브 배포로 패키징하고 애플리케이션을 로컬에서 실행하는 프로세스를 단순화합니다. 배포 가능한 애플리케이션은 자체 포함된(self-contained) 설치 가능한 바이너리로, 대상 시스템에 JDK가 설치되어 있지 않아도 필요한 모든 Java 런타임 구성 요소를 포함합니다.</p><p>패키지 크기를 최소화하기 위해 Gradle 플러그인은 <a href="https://openjdk.org/jeps/282" target="_blank" rel="noreferrer">jlink</a> 도구를 사용하여 배포 가능한 패키지에 필요한 Java 모듈만 번들링하도록 합니다. 그러나 필요한 모듈을 지정하려면 Gradle 플러그인을 구성해야 합니다. 자세한 내용은 <a href="#including-jdk-modules">JDK 모듈 포함</a> 섹션을 참조하십시오.</p><p>대안으로 JetBrains에서 개발하지 않은 외부 도구인 <a href="https://www.hydraulic.software" target="_blank" rel="noreferrer">Conveyor</a>를 사용할 수 있습니다. Conveyor는 온라인 업데이트, 교차 빌딩 및 기타 다양한 기능을 지원하지만, 오픈 소스가 아닌 프로젝트에는 <a href="https://hydraulic.software/pricing.html" target="_blank" rel="noreferrer">라이선스</a>가 필요합니다. 자세한 내용은 <a href="https://conveyor.hydraulic.dev/latest/tutorial/hare/jvm" target="_blank" rel="noreferrer">Conveyor 문서</a>를 참조하십시오.</p><h2 id="기본-태스크" tabindex="-1">기본 태스크 <a class="header-anchor" href="#기본-태스크" aria-label="Permalink to &quot;기본 태스크&quot;">​</a></h2><p>Compose Multiplatform Gradle 플러그인의 기본 구성 가능 단위는 <code>application</code>입니다 (더 이상 사용되지 않는 <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Gradle application</a> 플러그인과 혼동하지 마십시오).</p><p><code>application</code> DSL 메서드는 최종 바이너리 세트에 대한 공유 구성을 정의합니다. 이는 JDK 배포판과 함께 파일 컬렉션을 다양한 형식의 압축된 바이너리 설치 프로그램 세트로 패키징할 수 있음을 의미합니다.</p><p>지원되는 운영 체제에서 사용 가능한 형식은 다음과 같습니다.</p><ul><li><strong>macOS</strong>: <code>.dmg</code> (<code>TargetFormat.Dmg</code>), <code>.pkg</code> (<code>TargetFormat.Pkg</code>)</li><li><strong>Windows</strong>: <code>.exe</code> (<code>TargetFormat.Exe</code>), <code>.msi</code> (<code>TargetFormat.Msi</code>)</li><li><strong>Linux</strong>: <code>.deb</code> (<code>TargetFormat.Deb</code>), <code>.rpm</code> (<code>TargetFormat.Rpm</code>)</li></ul><p>다음은 기본적인 데스크톱 구성이 포함된 <code>build.gradle.kts</code> 파일의 예시입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.compose.desktop.application.dsl.TargetFormat</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compose.desktop.currentOs)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;example.MainKt&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            targetFormats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Exe)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>프로젝트를 빌드하면 플러그인은 다음 태스크를 생성합니다.</p><table><tr><td>Gradle 태스크</td><td>설명</td></tr><tr><td><code>package&lt;FormatName&gt;</code></td><td>애플리케이션을 해당 <code>FormatName</code> 바이너리로 패키징합니다. 교차 컴파일은 현재 지원되지 않으므로, 호환되는 OS를 사용해야만 특정 형식을 빌드할 수 있습니다. 예를 들어, <code>.dmg</code> 바이너리를 빌드하려면 macOS에서 <code>packageDmg</code> 태스크를 실행해야 합니다. 만약 현재 OS와 호환되지 않는 태스크가 있다면, 기본적으로 건너뛰어집니다.</td></tr><tr><td><code>packageDistributionForCurrentOS</code></td><td>애플리케이션에 대한 모든 패키지 태스크를 집계합니다. 이는 <a href="https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:task_categories">수명 주기 태스크</a>입니다.</td></tr><tr><td><code>packageUberJarForCurrentOS</code></td><td>현재 운영 체제에 대한 모든 의존성을 포함하는 단일 JAR 파일을 생성합니다. 이 태스크는 <code>compose.desktop.currentOS</code>가 <code>compile</code>, <code>implementation</code>, 또는 <code>runtime</code> 의존성으로 사용될 것을 예상합니다.</td></tr><tr><td><code>run</code></td><td><code>mainClass</code>에 지정된 진입점에서 애플리케이션을 로컬에서 실행합니다. <code>run</code> 태스크는 전체 런타임을 사용하여 비패키지 JVM 애플리케이션을 시작합니다. 이 접근 방식은 압축된 런타임으로 컴팩트 바이너리 이미지를 생성하는 것보다 빠르고 디버깅하기 쉽습니다. 최종 바이너리 이미지를 실행하려면 대신 <code>runDistributable</code> 태스크를 사용하십시오.</td></tr><tr><td><code>createDistributable</code></td><td>설치 프로그램을 생성하지 않고 최종 애플리케이션 이미지를 생성합니다.</td></tr><tr><td><code>runDistributable</code></td><td>사전 패키지된 애플리케이션 이미지를 실행합니다.</td></tr></table><p>사용 가능한 모든 태스크는 Gradle 도구 창에 나열됩니다. 태스크를 실행하면 Gradle은 <code>\${project.buildDir}/compose/binaries</code> 디렉터리에 출력 바이너리를 생성합니다.</p><h2 id="jdk-모듈-포함" tabindex="-1">JDK 모듈 포함 <a class="header-anchor" href="#jdk-모듈-포함" aria-label="Permalink to &quot;JDK 모듈 포함&quot;">​</a></h2><p>배포 가능한 크기를 줄이기 위해 Gradle 플러그인은 필요한 JDK 모듈만 번들링하는 데 도움이 되는 <a href="https://openjdk.org/jeps/282" target="_blank" rel="noreferrer">jlink</a>를 사용합니다.</p><p>현재 Gradle 플러그인은 필요한 JDK 모듈을 자동으로 결정하지 않습니다. 이는 컴파일 문제를 일으키지 않지만, 필요한 모듈을 제공하지 않으면 런타임에 <code>ClassNotFoundException</code>이 발생할 수 있습니다.</p><p>패키지된 애플리케이션 또는 <code>runDistributable</code> 태스크를 실행할 때 <code>ClassNotFoundException</code>이 발생하면, <code>modules</code> DSL 메서드를 사용하여 추가 JDK 모듈을 포함할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Alternatively: includeAllModules = true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>필요한 모듈을 수동으로 지정하거나 <code>suggestModules</code>를 실행할 수 있습니다. <code>suggestModules</code> 태스크는 <a href="https://docs.oracle.com/javase/9/tools/jdeps.htm" target="_blank" rel="noreferrer">jdeps</a> 정적 분석 도구를 사용하여 누락될 수 있는 모듈을 결정합니다. 이 도구의 출력이 불완전하거나 불필요한 모듈을 나열할 수 있다는 점에 유의하십시오.</p><p>배포 가능 파일의 크기가 중요한 요소가 아니고 무시할 수 있다면, <code>includeAllModules</code> DSL 속성을 사용하여 모든 런타임 모듈을 포함하도록 선택할 수 있습니다.</p><h2 id="배포-속성-지정" tabindex="-1">배포 속성 지정 <a class="header-anchor" href="#배포-속성-지정" aria-label="Permalink to &quot;배포 속성 지정&quot;">​</a></h2><h3 id="패키지-버전" tabindex="-1">패키지 버전 <a class="header-anchor" href="#패키지-버전" aria-label="Permalink to &quot;패키지 버전&quot;">​</a></h3><p>네이티브 배포 패키지에는 특정 패키지 버전이 있어야 합니다. 패키지 버전을 지정하려면 다음 DSL 속성을 가장 높은 우선순위부터 가장 낮은 우선순위 순으로 사용할 수 있습니다.</p><ul><li><code>nativeDistributions.&lt;os&gt;.&lt;packageFormat&gt;PackageVersion</code>은 단일 패키지 형식에 대한 버전을 지정합니다.</li><li><code>nativeDistributions.&lt;os&gt;.packageVersion</code>은 단일 대상 OS에 대한 버전을 지정합니다.</li><li><code>nativeDistributions.packageVersion</code>은 모든 패키지에 대한 버전을 지정합니다.</li></ul><p>macOS에서는 다음 DSL 속성을 사용하여 빌드 버전을 지정할 수도 있습니다(다시 가장 높은 우선순위부터 가장 낮은 우선순위 순으로 나열됨).</p><ul><li><code>nativeDistributions.macOS.&lt;packageFormat&gt;PackageBuildVersion</code>은 단일 패키지 형식에 대한 빌드 버전을 지정합니다.</li><li><code>nativeDistributions.macOS.packageBuildVersion</code>은 모든 macOS 패키지에 대한 빌드 버전을 지정합니다.</li></ul><p>빌드 버전을 지정하지 않으면 Gradle은 패키지 버전을 대신 사용합니다. macOS 버전 관리에 대한 자세한 내용은 <a href="https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleshortversionstring" target="_blank" rel="noreferrer"><code>CFBundleShortVersionString</code></a> 및 <a href="https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleversion" target="_blank" rel="noreferrer"><code>CFBundleVersion</code></a> 문서를 참조하십시오.</p><p>다음은 우선순위 순으로 패키지 버전을 지정하기 위한 템플릿입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Version for all packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for all macOS packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the dmg package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              dmgPackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the pkg package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              pkgPackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Build version for all macOS packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              packageBuildVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Build version for the dmg package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              dmgPackageBuildVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Build version for the pkg package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              pkgPackageBuildVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for all Windows packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the msi package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              msiPackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the exe package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              exePackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            linux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for all Linux packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the deb package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              debPackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the rpm package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              rpmPackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>패키지 버전을 정의하려면 다음 규칙을 따르십시오.</p><table><tr><td>파일 형식</td><td>버전 형식</td><td>세부 정보</td></tr><tr><td><code>dmg</code>, <code>pkg</code></td><td><code>MAJOR[.MINOR][.PATCH]</code></td><td><ul><li><code>MAJOR</code>는 0보다 큰 정수입니다.</li><li><code>MINOR</code>는 선택적 음이 아닌 정수입니다.</li><li><code>PATCH</code>는 선택적 음이 아닌 정수입니다.</li></ul></td></tr><tr><td><code>msi</code>, <code>exe</code></td><td><code>MAJOR.MINOR.BUILD</code></td><td><ul><li><code>MAJOR</code>는 최대값 255를 가진 음이 아닌 정수입니다.</li><li><code>MINOR</code>는 최대값 255를 가진 음이 아닌 정수입니다.</li><li><code>BUILD</code>는 최대값 65535를 가진 음이 아닌 정수입니다.</li></ul></td></tr><tr><td><code>deb</code></td><td><code>[EPOCH:]UPSTREAM_VERSION[-DEBIAN_REVISION]</code></td><td><ul><li><code>EPOCH</code>는 선택적 음이 아닌 정수입니다.</li><li><code>UPSTREAM_VERSION</code>: <ul><li>영숫자와 <code>.</code>, <code>+</code>, <code>-</code>, <code>~</code> 문자만 포함할 수 있습니다.</li><li>숫자로 시작해야 합니다.</li></ul></li><li><code>DEBIAN_REVISION</code>: <ul><li>선택 사항</li><li>영숫자와 <code>.</code>, <code>+</code>, <code>~</code> 문자만 포함할 수 있습니다.</li></ul></li></ul> 자세한 내용은 <a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html#version">Debian 문서</a>를 참조하십시오. </td></tr><tr><td><code>rpm</code></td><td>모든 형식</td><td>버전은 <code>-</code> (대시) 문자를 포함해서는 안 됩니다.</td></tr></table><h3 id="jdk-버전" tabindex="-1">JDK 버전 <a class="header-anchor" href="#jdk-버전" aria-label="Permalink to &quot;JDK 버전&quot;">​</a></h3><p>플러그인은 <a href="https://openjdk.java.net/projects/jdk/17/" target="_blank" rel="noreferrer">JDK 17</a> 이상 버전을 요구하는 <code>jpackage</code>를 사용합니다. JDK 버전을 지정할 때는 다음 요구 사항 중 하나 이상을 충족하는지 확인하십시오.</p><ul><li><code>JAVA_HOME</code> 환경 변수가 호환되는 JDK 버전을 가리킵니다.</li><li><code>javaHome</code> 속성이 DSL을 통해 설정됩니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        javaHome </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JDK_17&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="출력-디렉터리" tabindex="-1">출력 디렉터리 <a class="header-anchor" href="#출력-디렉터리" aria-label="Permalink to &quot;출력 디렉터리&quot;">​</a></h3><p>네이티브 배포판에 사용자 지정 출력 디렉터리를 사용하려면 다음과 같이 <code>outputBaseDir</code> 속성을 구성하십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            outputBaseDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.layout.buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customOutputDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="런처-속성" tabindex="-1">런처 속성 <a class="header-anchor" href="#런처-속성" aria-label="Permalink to &quot;런처 속성&quot;">​</a></h3><p>애플리케이션 시작 프로세스를 사용자 지정하려면 다음 속성을 구성할 수 있습니다.</p><table><tr><td>속성</td><td>설명</td></tr><tr><td><code>mainClass</code></td><td><code>main</code> 메서드를 포함하는 클래스의 정규화된 이름입니다.</td></tr><tr><td><code>args</code></td><td>애플리케이션의 <code>main</code> 메서드에 대한 인수입니다.</td></tr><tr><td><code>jvmArgs</code></td><td>애플리케이션의 JVM에 대한 인수입니다.</td></tr></table><p>다음은 구성 예시입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MainKt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-customArgument&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xmx2G&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="메타데이터" tabindex="-1">메타데이터 <a class="header-anchor" href="#메타데이터" aria-label="Permalink to &quot;메타데이터&quot;">​</a></h3><p><code>nativeDistributions</code> DSL 블록 내에서 다음 속성을 구성할 수 있습니다.</p><table><tr><td>속성</td><td>설명</td><td>기본값</td></tr><tr><td><code>packageName</code></td><td>애플리케이션 이름입니다.</td><td>Gradle 프로젝트의 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html#getName--">이름</a></td></tr><tr><td><code>packageVersion</code></td><td>애플리케이션 버전입니다.</td><td>Gradle 프로젝트의 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html#getVersion--">버전</a></td></tr><tr><td><code>description</code></td><td>애플리케이션 설명입니다.</td><td>없음</td></tr><tr><td><code>copyright</code></td><td>애플리케이션의 저작권 정보입니다.</td><td>없음</td></tr><tr><td><code>vendor</code></td><td>애플리케이션 공급업체입니다.</td><td>없음</td></tr><tr><td><code>licenseFile</code></td><td>애플리케이션의 라이선스 파일입니다.</td><td>없음</td></tr></table><p>다음은 구성 예시입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            packageName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ExampleApp&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0.1-SNAPSHOT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Compose Multiplatform App&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            copyright </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;© 2024 My Name. All rights reserved.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            vendor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Example vendor&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            licenseFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;LICENSE.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="리소스-관리" tabindex="-1">리소스 관리 <a class="header-anchor" href="#리소스-관리" aria-label="Permalink to &quot;리소스 관리&quot;">​</a></h2><p>리소스를 패키징하고 로드하려면 Compose Multiplatform 리소스 라이브러리, JVM 리소스 로딩, 또는 패키지된 애플리케이션에 파일을 추가하는 방법을 사용할 수 있습니다.</p><h3 id="리소스-라이브러리" tabindex="-1">리소스 라이브러리 <a class="header-anchor" href="#리소스-라이브러리" aria-label="Permalink to &quot;리소스 라이브러리&quot;">​</a></h3><p>프로젝트에 리소스를 설정하는 가장 간단한 방법은 리소스 라이브러리를 사용하는 것입니다. 리소스 라이브러리를 사용하면 지원되는 모든 플랫폼에서 공통 코드 내 리소스에 접근할 수 있습니다. 자세한 내용은 <a href="./compose-multiplatform-resources">멀티플랫폼 리소스</a>를 참조하십시오.</p><h3 id="jvm-리소스-로딩" tabindex="-1">JVM 리소스 로딩 <a class="header-anchor" href="#jvm-리소스-로딩" aria-label="Permalink to &quot;JVM 리소스 로딩&quot;">​</a></h3><p>데스크톱용 Compose Multiplatform은 JVM 플랫폼에서 작동하므로 <code>java.lang.Class</code> API를 사용하여 <code>.jar</code> 파일에서 리소스를 로드할 수 있습니다. <code>src/main/resources</code> 디렉터리에 있는 파일은 <a href="https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/Class.html#getResource(java.lang.String)" target="_blank" rel="noreferrer"><code>Class::getResource</code></a> 또는 <a href="https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/Class.html#getResourceAsStream(java.lang.String)" target="_blank" rel="noreferrer"><code>Class::getResourceAsStream</code></a>을 통해 접근할 수 있습니다.</p><h3 id="패키지된-애플리케이션에-파일-추가" tabindex="-1">패키지된 애플리케이션에 파일 추가 <a class="header-anchor" href="#패키지된-애플리케이션에-파일-추가" aria-label="Permalink to &quot;패키지된 애플리케이션에 파일 추가&quot;">​</a></h3><p><code>.jar</code> 파일에서 리소스를 로드하는 것이 덜 실용적인 시나리오가 있습니다. 예를 들어, 대상별 자산이 있어서 macOS 패키지에만 파일을 포함하고 Windows 패키지에는 포함하지 않으려는 경우입니다.</p><p>이러한 경우 Gradle 플러그인을 구성하여 설치 디렉터리에 추가 리소스 파일을 포함할 수 있습니다. 다음과 같이 DSL을 사용하여 루트 리소스 디렉터리를 지정하십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MainKt&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            targetFormats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            appResourcesRootDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.layout.projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>위 예시에서 루트 리소스 디렉터리는 <code>&lt;PROJECT_DIR&gt;/resources</code>로 정의됩니다.</p><p>Gradle 플러그인은 다음과 같이 리소스 하위 디렉터리에서 파일을 포함합니다.</p><ol><li><p><strong>공통 리소스:</strong><code>&lt;RESOURCES_ROOT_DIR&gt;/common</code>에 있는 파일은 대상 OS나 아키텍처에 관계없이 모든 패키지에 포함됩니다.</p></li><li><p><strong>OS별 리소스:</strong><code>&lt;RESOURCES_ROOT_DIR&gt;/&lt;OS_NAME&gt;</code>에 있는 파일은 특정 운영 체제용으로 빌드된 패키지에만 포함됩니다. <code>&lt;OS_NAME&gt;</code>에 유효한 값은 <code>windows</code>, <code>macos</code>, <code>linux</code>입니다.</p></li><li><p><strong>OS 및 아키텍처별 리소스:</strong><code>&lt;RESOURCES_ROOT_DIR&gt;/&lt;OS_NAME&gt;-&lt;ARCH_NAME&gt;</code>에 있는 파일은 특정 운영 체제 및 CPU 아키텍처 조합용으로 빌드된 패키지에만 포함됩니다. <code>&lt;ARCH_NAME&gt;</code>에 유효한 값은 <code>x64</code>와 <code>arm64</code>입니다. 예를 들어, <code>&lt;RESOURCES_ROOT_DIR&gt;/macos-arm64</code>의 파일은 Apple Silicon Mac용 패키지에만 포함됩니다.</p></li></ol><p>포함된 리소스는 <code>compose.application.resources.dir</code> 시스템 속성을 사용하여 접근할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.io.File</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resourcesDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose.application.resources.dir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resourcesDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resource.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="사용자-지정-소스-세트" tabindex="-1">사용자 지정 소스 세트 <a class="header-anchor" href="#사용자-지정-소스-세트" aria-label="Permalink to &quot;사용자 지정 소스 세트&quot;">​</a></h2><p><code>org.jetbrains.kotlin.jvm</code> 또는 <code>org.jetbrains.kotlin.multiplatform</code> 플러그인을 사용하는 경우 기본 구성을 사용할 수 있습니다.</p><ul><li><code>org.jetbrains.kotlin.jvm</code>을 사용한 구성은 <code>main</code> <a href="https://docs.gradle.org/current/userguide/java_plugin.html#source_sets" target="_blank" rel="noreferrer">소스 세트</a>의 내용을 포함합니다.</li><li><code>org.jetbrains.kotlin.multiplatform</code>을 사용한 구성은 단일 <a href="./multiplatform-dsl-reference#targets">JVM 타겟</a>의 내용을 포함합니다. 여러 JVM 타겟을 정의하는 경우 기본 구성은 비활성화됩니다. 이 경우 플러그인을 수동으로 구성하거나 단일 타겟을 지정해야 합니다(아래 참조).</li></ul><p>기본 구성이 모호하거나 불충분한 경우 여러 가지 방법으로 사용자 지정할 수 있습니다.</p><p>Gradle <a href="https://docs.gradle.org/current/userguide/java_plugin.html#source_sets" target="_blank" rel="noreferrer">소스 세트</a> 사용:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customSourceSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customSourceSet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customSourceSet)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin <a href="./multiplatform-dsl-reference#targets">JVM 타겟</a> 사용:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customJvmTarget&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlin.targets[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customJvmTarget&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>수동으로:</p><ul><li><code>disableDefaultConfiguration</code>을 사용하여 기본 설정을 비활성화합니다.</li><li><code>fromFiles</code>를 사용하여 포함할 파일을 지정합니다.</li><li><code>mainJar</code> 파일 속성을 지정하여 메인 클래스를 포함하는 <code>.jar</code> 파일을 가리킵니다.</li><li><code>dependsOn</code>을 사용하여 모든 플러그인 태스크에 태스크 의존성을 추가합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        disableDefaultConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        fromFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;libs/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**/*.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainJar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mainJarTask&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="애플리케이션-아이콘" tabindex="-1">애플리케이션 아이콘 <a class="header-anchor" href="#애플리케이션-아이콘" aria-label="Permalink to &quot;애플리케이션 아이콘&quot;">​</a></h2><p>앱 아이콘이 다음 OS별 형식으로 사용 가능한지 확인하십시오.</p><ul><li>macOS용 <code>.icns</code></li><li>Windows용 <code>.ico</code></li><li>Linux용 <code>.png</code></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iconFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;icon.icns&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iconFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;icon.ico&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            linux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iconFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;icon.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="플랫폼별-옵션" tabindex="-1">플랫폼별 옵션 <a class="header-anchor" href="#플랫폼별-옵션" aria-label="Permalink to &quot;플랫폼별 옵션&quot;">​</a></h2><p>플랫폼별 설정은 해당 DSL 블록을 사용하여 구성할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Options for macOS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Options for Windows</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            linux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Options for Linux</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>다음 표는 지원되는 모든 플랫폼별 옵션을 설명합니다. 문서화되지 않은 속성은 <strong>사용하지 않는 것이 좋습니다</strong>.</p><table><tr><td>플랫폼</td><td>옵션</td><td width="500">설명</td></tr><tr><td rowspan="3">모든 플랫폼</td><td><code>iconFile.set(File(&quot;PATH_TO_ICON&quot;))</code></td><td>애플리케이션에 대한 플랫폼별 아이콘 경로를 지정합니다. 자세한 내용은 <a href="#application-icon">애플리케이션 아이콘</a> 섹션을 참조하십시오.</td></tr><tr><td><code>packageVersion = &quot;1.0.0&quot;</code></td><td>플랫폼별 패키지 버전을 설정합니다. 자세한 내용은 <a href="#package-version">패키지 버전</a> 섹션을 참조하십시오.</td></tr><tr><td><code>installationPath = &quot;PATH_TO_INST_DIR&quot;</code></td><td>기본 설치 디렉터리에 대한 절대 또는 상대 경로를 지정합니다. Windows에서는 <code>dirChooser = true</code>를 사용하여 설치 중 경로 사용자 지정을 활성화할 수도 있습니다.</td></tr><tr><td rowspan="8">Linux</td><td><code>packageName = &quot;custom-package-name&quot;</code></td><td>기본 애플리케이션 이름을 재정의합니다.</td></tr><tr><td><code>debMaintainer = &quot;maintainer@example.com&quot;</code></td><td>패키지 관리자의 이메일을 지정합니다.</td></tr><tr><td><code>menuGroup = &quot;my-example-menu-group&quot;</code></td><td>애플리케이션에 대한 메뉴 그룹을 정의합니다.</td></tr><tr><td><code>appRelease = &quot;1&quot;</code></td><td>rpm 패키지의 릴리스 값 또는 deb 패키지의 개정(revision) 값을 설정합니다.</td></tr><tr><td><code>appCategory = &quot;CATEGORY&quot;</code></td><td>rpm 패키지의 그룹 값 또는 deb 패키지의 섹션 값을 할당합니다.</td></tr><tr><td><code>rpmLicenseType = &quot;TYPE_OF_LICENSE&quot;</code></td><td>rpm 패키지의 라이선스 유형을 나타냅니다.</td></tr><tr><td><code>debPackageVersion = &quot;DEB_VERSION&quot;</code></td><td>deb 특정 패키지 버전을 설정합니다. 자세한 내용은 <a href="#package-version">패키지 버전</a> 섹션을 참조하십시오.</td></tr><tr><td><code>rpmPackageVersion = &quot;RPM_VERSION&quot;</code></td><td>rpm 특정 패키지 버전을 설정합니다. 자세한 내용은 <a href="#package-version">패키지 버전</a> 섹션을 참조하십시오.</td></tr><tr><td rowspan="15">macOS</td><td><code>bundleID</code></td><td> 영숫자(<code>A-Z</code>, <code>a-z</code>, <code>0-9</code>), 하이픈(<code>-</code>), 그리고 점(<code>.</code>)만 포함할 수 있는 고유한 애플리케이션 식별자를 지정합니다. 역방향 DNS 표기법(<code>com.mycompany.myapp</code>)을 사용하는 것이 좋습니다. </td></tr><tr><td><code>packageName</code></td><td>애플리케이션 이름입니다.</td></tr><tr><td><code>dockName</code></td><td> 메뉴 바, &quot;About &lt;App&gt;&quot; 메뉴 항목, 및 독(dock)에 표시되는 애플리케이션 이름입니다. 기본값은 <code>packageName</code>입니다. </td></tr><tr><td><code>minimumSystemVersion</code></td><td> 애플리케이션을 실행하는 데 필요한 최소 macOS 버전입니다. 자세한 내용은 <a href="https://developer.apple.com/documentation/bundleresources/information_property_list/lsminimumsystemversion"><code>LSMinimumSystemVersion</code></a>을 참조하십시오. </td></tr><tr><td><code>signing</code>, <code>notarization</code>, <code>provisioningProfile</code>, <code>runtimeProvisioningProfile</code></td><td><a href="https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Signing_and_notarization_on_macOS"> macOS용 배포판 서명 및 공증</a> 튜토리얼을 참조하십시오. </td></tr><tr><td><code>appStore = true</code></td><td>Apple App Store용으로 앱을 빌드하고 서명할지 여부를 지정합니다. JDK 17 이상이 필요합니다.</td></tr><tr><td><code>appCategory</code></td><td> Apple App Store용 앱 카테고리입니다. App Store용으로 빌드할 때 기본값은 <code>public.app-category.utilities</code>이고, 그렇지 않으면 <code>Unknown</code>입니다. 유효한 카테고리 목록은 <a href="https://developer.apple.com/documentation/bundleresources/information_property_list/lsapplicationcategorytype"><code>LSApplicationCategoryType</code></a>를 참조하십시오. </td></tr><tr><td><code>entitlementsFile.set(File(&quot;PATH_ENT&quot;))</code></td><td> 서명 시 사용되는 권한(entitlements)이 포함된 파일의 경로를 지정합니다. 사용자 지정 파일을 제공할 때, Java 애플리케이션에 필요한 권한을 추가해야 합니다. App Store용으로 빌드할 때 사용되는 기본 파일은 <a href="https://github.com/openjdk/jdk/blob/master/src/jdk.jpackage/macosx/classes/jdk/jpackage/internal/resources/sandbox.plist"><code>sandbox.plist</code></a>를 참조하십시오. 이 기본 파일은 JDK 버전에 따라 다를 수 있습니다. 파일을 지정하지 않으면 플러그인은 <code>jpackage</code>가 제공하는 기본 권한을 사용합니다. 자세한 내용은 <a href="https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Signing_and_notarization_on_macOS"> macOS용 배포판 서명 및 공증</a> 튜토리얼을 참조하십시오. </td></tr><tr><td><code>runtimeEntitlementsFile.set(File(&quot;PATH_R_ENT&quot;))</code></td><td> JVM 런타임 서명 시 사용되는 권한이 포함된 파일의 경로를 지정합니다. 사용자 지정 파일을 제공할 때, Java 애플리케이션에 필요한 권한을 추가해야 합니다. App Store용으로 빌드할 때 사용되는 기본 파일은 <a href="https://github.com/openjdk/jdk/blob/master/src/jdk.jpackage/macosx/classes/jdk/jpackage/internal/resources/sandbox.plist"><code>sandbox.plist</code></a>를 참조하십시오. 이 기본 파일은 JDK 버전에 따라 다를 수 있습니다. 파일을 지정하지 않으면 플러그인은 <code>jpackage</code>가 제공하는 기본 권한을 사용합니다. 자세한 내용은 <a href="https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Signing_and_notarization_on_macOS"> macOS용 배포판 서명 및 공증</a> 튜토리얼을 참조하십시오. </td></tr><tr><td><code>dmgPackageVersion = &quot;DMG_VERSION&quot;</code></td><td> DMG 특정 패키지 버전을 설정합니다. 자세한 내용은 <a href="#package-version">패키지 버전</a> 섹션을 참조하십시오. </td></tr><tr><td><code>pkgPackageVersion = &quot;PKG_VERSION&quot;</code></td><td> PKG 특정 패키지 버전을 설정합니다. 자세한 내용은 <a href="#package-version">패키지 버전</a> 섹션을 참조하십시오. </td></tr><tr><td><code>packageBuildVersion = &quot;DMG_VERSION&quot;</code></td><td> 패키지 빌드 버전을 설정합니다. 자세한 내용은 <a href="#package-version">패키지 버전</a> 섹션을 참조하십시오. </td></tr><tr><td><code>dmgPackageBuildVersion = &quot;DMG_VERSION&quot;</code></td><td> DMG 특정 패키지 빌드 버전을 설정합니다. 자세한 내용은 <a href="#package-version">패키지 버전</a> 섹션을 참조하십시오. </td></tr><tr><td><code>pkgPackageBuildVersion = &quot;PKG_VERSION&quot;</code></td><td> PKG 특정 패키지 빌드 버전을 설정합니다. 자세한 내용은 <a href="#package-version">패키지 버전</a> 섹션을 참조하십시오. </td></tr><tr><td><code>infoPlist</code></td><td><a href="#information-property-list-on-macos">macOS의 <code>Info.plist</code></a> 섹션을 참조하십시오.</td></tr><tr><td rowspan="7">Windows</td><td><code>console = true</code></td><td>애플리케이션에 콘솔 런처를 추가합니다.</td></tr><tr><td><code>dirChooser = true</code></td><td>설치 중 설치 경로 사용자 지정을 활성화합니다.</td></tr><tr><td><code>perUserInstall = true</code></td><td>애플리케이션을 사용자별로 설치하는 것을 활성화합니다.</td></tr><tr><td><code>menuGroup = &quot;start-menu-group&quot;</code></td><td>지정된 시작 메뉴 그룹에 애플리케이션을 추가합니다.</td></tr><tr><td><code>upgradeUuid = &quot;UUID&quot;</code></td><td>사용자가 설치된 버전보다 최신 버전이 있을 때 설치 프로그램을 통해 애플리케이션을 업데이트할 수 있도록 하는 고유 ID를 지정합니다. 이 값은 단일 애플리케이션에 대해 일정하게 유지되어야 합니다. 자세한 내용은 <a href="https://wixtoolset.org/documentation/manual/v3/howtos/general/generate_guids.html">How To: GUID 생성</a>을 참조하십시오.</td></tr><tr><td><code>msiPackageVersion = &quot;MSI_VERSION&quot;</code></td><td>MSI 특정 패키지 버전을 설정합니다. 자세한 내용은 <a href="#package-version">패키지 버전</a> 섹션을 참조하십시오.</td></tr><tr><td><code>exePackageVersion = &quot;EXE_VERSION&quot;</code></td><td>EXE 특정 패키지 버전을 설정합니다. 자세한 내용은 <a href="#package-version">패키지 버전</a> 섹션을 참조하십시오.</td></tr></table><h2 id="macos별-구성" tabindex="-1">macOS별 구성 <a class="header-anchor" href="#macos별-구성" aria-label="Permalink to &quot;macOS별 구성&quot;">​</a></h2><h3 id="macos에서-코드-서명-및-공증" tabindex="-1">macOS에서 코드 서명 및 공증 <a class="header-anchor" href="#macos에서-코드-서명-및-공증" aria-label="Permalink to &quot;macOS에서 코드 서명 및 공증&quot;">​</a></h3><p>최신 macOS 버전은 인터넷에서 다운로드한 서명되지 않은 애플리케이션의 실행을 허용하지 않습니다. 이러한 애플리케이션을 실행하려고 하면 다음과 같은 오류가 발생합니다. &quot;YourApp is damaged and can&#39;t be open. You should eject the disk image&quot; (YourApp이 손상되어 열 수 없습니다. 디스크 이미지를 추출해야 합니다).</p><p>애플리케이션을 서명하고 공증하는 방법은 <a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README">튜토리얼</a>을 참조하십시오.</p><h3 id="macos의-정보-속성-목록" tabindex="-1">macOS의 정보 속성 목록 <a class="header-anchor" href="#macos의-정보-속성-목록" aria-label="Permalink to &quot;macOS의 정보 속성 목록&quot;">​</a></h3><p>DSL은 필수적인 플랫폼별 사용자 지정을 지원하지만, 제공되는 기능을 넘어설 수 있는 경우가 여전히 있을 수 있습니다. DSL에 표현되지 않은 <code>Info.plist</code> 값을 지정해야 하는 경우, 원시 XML 스니펫을 해결 방법으로 포함할 수 있습니다. 이 XML은 애플리케이션의 <code>Info.plist</code>에 추가됩니다.</p><h4 id="예시-딥-링크" tabindex="-1">예시: 딥 링크 <a class="header-anchor" href="#예시-딥-링크" aria-label="Permalink to &quot;예시: 딥 링크&quot;">​</a></h4><ol><li><code>build.gradle.kts</code> 파일에 사용자 지정 URL 스키마를 정의합니다.</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MainKt&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            targetFormats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TargetFormat.Dmg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            packageName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Deep Linking Example App&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                bundleID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.compose.examples.deeplinking&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                infoPlist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    extraKeysRawXml </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> macExtraPlistKeys</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> macExtraPlistKeys: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;key&gt;CFBundleURLTypes&lt;/key&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;array&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &lt;dict&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &lt;key&gt;CFBundleURLName&lt;/key&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &lt;string&gt;Example deep link&lt;/string&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &lt;array&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &lt;string&gt;compose&lt;/string&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &lt;/array&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &lt;/dict&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;/array&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span></code></pre></div><ol start="2"><li><code>src/main/main.kt</code> 파일에서 <code>java.awt.Desktop</code> 클래스를 사용하여 URI 핸들러를 설정합니다.</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.material.MaterialTheme</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.material.Text</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.runtime.getValue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.runtime.mutableStateOf</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.runtime.setValue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.ui.window.singleWindowApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.awt.Desktop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Desktop.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDesktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setOpenURIHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Open URI: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.uri</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UnsupportedOperationException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setOpenURIHandler is unsupported&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleWindowApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li><code>runDistributable</code> 태스크를 실행합니다. <code>./gradlew runDistributable</code>.</li></ol><p>결과적으로 <code>compose://foo/bar</code>와 같은 링크는 이제 브라우저에서 애플리케이션으로 리디렉션될 수 있습니다.</p><h2 id="코드-압축-및-난독화" tabindex="-1">코드 압축 및 난독화 <a class="header-anchor" href="#코드-압축-및-난독화" aria-label="Permalink to &quot;코드 압축 및 난독화&quot;">​</a></h2><p>Compose Multiplatform Gradle 플러그인에는 <a href="https://www.guardsquare.com/proguard" target="_blank" rel="noreferrer">ProGuard</a>에 대한 내장 지원이 포함되어 있습니다. ProGuard는 코드 압축 및 난독화를 위한 <a href="https://github.com/Guardsquare/proguard" target="_blank" rel="noreferrer">오픈 소스 도구</a>입니다.</p><p>각 <em>기본</em> (ProGuard 없음) 패키징 태스크에 대해 Gradle 플러그인은 <em>릴리스</em> (ProGuard 포함) 태스크를 제공합니다.</p><table><tr><td width="400">Gradle 태스크</td><td>설명</td></tr><tr><td><p>기본: <code>createDistributable</code></p><p>릴리스: <code>createReleaseDistributable</code></p></td><td>번들된 JDK 및 리소스를 사용하여 애플리케이션 이미지를 생성합니다.</td></tr><tr><td><p>기본: <code>runDistributable</code></p><p>릴리스: <code>runReleaseDistributable</code></p></td><td>번들된 JDK 및 리소스를 사용하여 애플리케이션 이미지를 실행합니다.</td></tr><tr><td><p>기본: <code>run</code></p><p>릴리스: <code>runRelease</code></p></td><td>Gradle JDK를 사용하여 비패키지 애플리케이션 <code>.jar</code>를 실행합니다.</td></tr><tr><td><p>기본: <code>package&lt;FORMAT_NAME&gt;</code></p><p>릴리스: <code>packageRelease&lt;FORMAT_NAME&gt;</code></p></td><td>애플리케이션 이미지를 <code>&lt;FORMAT_NAME&gt;</code> 파일로 패키징합니다.</td></tr><tr><td><p>기본: <code>packageDistributionForCurrentOS</code></p><p>릴리스: <code>packageReleaseDistributionForCurrentOS</code></p></td><td>애플리케이션 이미지를 현재 OS와 호환되는 형식으로 패키징합니다.</td></tr><tr><td><p>기본: <code>packageUberJarForCurrentOS</code></p><p>릴리스: <code>packageReleaseUberJarForCurrentOS</code></p></td><td>애플리케이션 이미지를 우버 (팻) <code>.jar</code>로 패키징합니다.</td></tr><tr><td><p>기본: <code>notarize&lt;FORMAT_NAME&gt;</code></p><p>릴리스: <code>notarizeRelease&lt;FORMAT_NAME&gt;</code></p></td><td>공증을 위해 <code>&lt;FORMAT_NAME&gt;</code> 애플리케이션 이미지를 업로드합니다 (macOS 전용).</td></tr><tr><td><p>기본: <code>checkNotarizationStatus</code></p><p>릴리스: <code>checkReleaseNotarizationStatus</code></p></td><td>공증 성공 여부를 확인합니다 (macOS 전용).</td></tr></table><p>기본 구성은 미리 정의된 일부 ProGuard 규칙을 활성화합니다.</p><ul><li>애플리케이션 이미지는 코드 압축되어 사용되지 않는 클래스가 제거됩니다.</li><li><code>compose.desktop.application.mainClass</code>가 진입점으로 사용됩니다.</li><li>Compose 런타임이 계속 작동하도록 여러 <code>keep</code> 규칙이 포함됩니다.</li></ul><p>대부분의 경우, 압축된 애플리케이션을 얻기 위해 추가 구성은 필요하지 않습니다. 그러나 ProGuard는 리플렉션을 통해 클래스가 사용되는 경우와 같이 특정 사용을 바이트코드에서 추적하지 못할 수 있습니다. ProGuard 처리 후에만 발생하는 문제가 발생하면 사용자 지정 규칙을 추가해야 할 수 있습니다.</p><p>사용자 지정 구성 파일을 지정하려면 다음과 같이 DSL을 사용하십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildTypes.release.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proguard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            configurationFiles.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose-desktop.pro&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ProGuard 규칙 및 구성 옵션에 대한 자세한 내용은 Guardsquare <a href="https://www.guardsquare.com/manual/configuration/usage" target="_blank" rel="noreferrer">매뉴얼</a>을 참조하십시오.</p><p>난독화는 기본적으로 비활성화되어 있습니다. 활성화하려면 Gradle DSL을 통해 다음 속성을 설정하십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildTypes.release.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proguard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            obfuscate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ProGuard의 최적화는 기본적으로 활성화되어 있습니다. 비활성화하려면 Gradle DSL을 통해 다음 속성을 설정하십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildTypes.release.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proguard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            optimize.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>우버 JAR 생성은 기본적으로 비활성화되어 있으며, ProGuard는 각 입력 <code>.jar</code>에 대해 해당하는 <code>.jar</code> 파일을 생성합니다. 활성화하려면 Gradle DSL을 통해 다음 속성을 설정하십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildTypes.release.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proguard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            joinOutputJars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="다음-단계는" tabindex="-1">다음 단계는? <a class="header-anchor" href="#다음-단계는" aria-label="Permalink to &quot;다음 단계는?&quot;">​</a></h2><p><a href="https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials#desktop" target="_blank" rel="noreferrer">데스크톱 구성 요소</a>에 대한 튜토리얼을 살펴보십시오.</p>`,120)]))}const c=i(e,[["render",l]]);export{E as __pageData,c as default};
