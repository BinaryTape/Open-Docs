import{_ as o}from"./chunks/ios-integration-scheme.BWILfhhI.js";import{_ as e,c as r,o as t,ag as i}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"iOS 통합 방법","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/multiplatform-ios-integration-overview.md","filePath":"ko/kmp/multiplatform-ios-integration-overview.md","lastUpdated":1755516278000}'),s={name:"ko/kmp/multiplatform-ios-integration-overview.md"};function p(l,a,n,c,d,m){return t(),r("div",null,a[0]||(a[0]=[i('<h1 id="ios-통합-방법" tabindex="-1">iOS 통합 방법 <a class="header-anchor" href="#ios-통합-방법" aria-label="Permalink to &quot;iOS 통합 방법&quot;">​</a></h1><p>Kotlin 멀티플랫폼 공유 모듈을 iOS 앱에 통합할 수 있습니다. 이를 위해 공유 모듈에서 <a href="https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/WhatAreFrameworks.html" target="_blank" rel="noreferrer">iOS 프레임워크</a>를 생성한 다음, 이를 iOS 프로젝트에 의존성으로 추가합니다.</p><p><img src="'+o+'" alt="iOS 통합 방식"></p><p>이 프레임워크를 로컬 또는 원격 의존성으로 사용할 수 있습니다. 전체 코드베이스를 완전히 제어하고 공통 코드가 변경될 때 최종 애플리케이션에 즉시 업데이트를 반영하려면 로컬 통합을 선택하세요.</p><p>최종 애플리케이션의 코드베이스를 공통 코드베이스와 명시적으로 분리하려면 원격 통합을 설정하세요. 이 경우 공유 코드는 일반적인 서드파티 의존성처럼 최종 애플리케이션에 통합됩니다.</p><h2 id="로컬-통합" tabindex="-1">로컬 통합 <a class="header-anchor" href="#로컬-통합" aria-label="Permalink to &quot;로컬 통합&quot;">​</a></h2><p>로컬 설정에는 두 가지 주요 통합 옵션이 있습니다. Kotlin 빌드를 iOS 빌드의 일부로 만드는 특별한 스크립트를 통한 직접 통합을 사용할 수 있습니다. Kotlin 멀티플랫폼 프로젝트에 Pod 의존성이 있다면 CocoaPods 통합 방식을 사용하세요.</p><h3 id="직접-통합" tabindex="-1">직접 통합 <a class="header-anchor" href="#직접-통합" aria-label="Permalink to &quot;직접 통합&quot;">​</a></h3><p>Xcode 프로젝트에 특별한 스크립트를 추가하여 Kotlin 멀티플랫폼 프로젝트에서 iOS 프레임워크를 직접 연결할 수 있습니다. 이 스크립트는 프로젝트 빌드 설정의 빌드 단계에 통합됩니다.</p><p>이 통합 방식은 Kotlin 멀티플랫폼 프로젝트에서 CocoaPods 의존성을 <strong>가져오지 않는</strong> 경우에 적합합니다.</p><p>Android Studio에서 프로젝트를 생성하는 경우, 이 설정을 자동으로 생성하려면 <strong>Regular framework</strong> 옵션을 선택하세요. <a href="https://kmp.jetbrains.com/" target="_blank" rel="noreferrer">Kotlin 멀티플랫폼 웹 위자드</a>를 사용하는 경우 직접 통합이 기본적으로 적용됩니다.</p><p>자세한 내용은 <a href="./multiplatform-direct-integration">직접 통합</a>을 참조하세요.</p><h3 id="로컬-팟스펙-podspec-을-사용한-cocoapods-통합" tabindex="-1">로컬 팟스펙(podspec)을 사용한 CocoaPods 통합 <a class="header-anchor" href="#로컬-팟스펙-podspec-을-사용한-cocoapods-통합" aria-label="Permalink to &quot;로컬 팟스펙(podspec)을 사용한 CocoaPods 통합&quot;">​</a></h3><p>Swift 및 Objective-C 프로젝트의 인기 있는 의존성 관리자인 <a href="https://cocoapods.org/" target="_blank" rel="noreferrer">CocoaPods</a>를 통해 Kotlin 멀티플랫폼 프로젝트에서 iOS 프레임워크를 연결할 수 있습니다.</p><p>이 통합 방식은 다음 경우에 적합합니다.</p><ul><li>CocoaPods를 사용하는 iOS 프로젝트와 함께 모노 리포지토리(mono repository) 설정을 가지고 있는 경우</li><li>Kotlin 멀티플랫폼 프로젝트에서 CocoaPods 의존성을 가져오는 경우</li></ul><p>로컬 CocoaPods 의존성을 사용하는 워크플로(workflow)를 설정하려면 스크립트를 수동으로 편집하거나 Android Studio의 위자드를 사용하여 프로젝트를 생성할 수 있습니다.</p><p>자세한 내용은 <a href="./multiplatform-cocoapods-overview">CocoaPods 개요 및 설정</a>을 참조하세요.</p><h2 id="원격-통합" tabindex="-1">원격 통합 <a class="header-anchor" href="#원격-통합" aria-label="Permalink to &quot;원격 통합&quot;">​</a></h2><p>원격 통합의 경우, 프로젝트는 Swift Package Manager (SPM) 또는 CocoaPods 의존성 관리자를 사용하여 Kotlin 멀티플랫폼 프로젝트에서 iOS 프레임워크를 연결할 수 있습니다.</p><h3 id="xcframeworks를-사용한-swift-package-manager" tabindex="-1">XCFrameworks를 사용한 Swift Package Manager <a class="header-anchor" href="#xcframeworks를-사용한-swift-package-manager" aria-label="Permalink to &quot;XCFrameworks를 사용한 Swift Package Manager&quot;">​</a></h3><p>XCFrameworks를 사용하여 Swift Package Manager (SPM) 의존성을 설정함으로써 Kotlin 멀티플랫폼 프로젝트에서 iOS 프레임워크를 연결할 수 있습니다.</p><p>자세한 내용은 <a href="./multiplatform-spm-export">Swift 패키지 내보내기 설정</a>을 참조하세요.</p><h3 id="xcframeworks를-사용한-cocoapods-통합" tabindex="-1">XCFrameworks를 사용한 CocoaPods 통합 <a class="header-anchor" href="#xcframeworks를-사용한-cocoapods-통합" aria-label="Permalink to &quot;XCFrameworks를 사용한 CocoaPods 통합&quot;">​</a></h3><p>Kotlin CocoaPods Gradle 플러그인을 사용하여 XCFrameworks를 빌드한 다음, CocoaPods를 통해 프로젝트의 공유 부분을 모바일 앱과 별도로 배포할 수 있습니다.</p><p>자세한 내용은 <a href="./multiplatform-build-native-binaries#build-frameworks">최종 네이티브 바이너리 빌드</a>를 참조하세요.</p>',26)]))}const u=e(s,[["render",p]]);export{k as __pageData,u as default};
