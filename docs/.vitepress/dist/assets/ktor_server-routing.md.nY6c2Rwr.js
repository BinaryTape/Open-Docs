import{_ as p,C as i,c as h,o as k,G as a,ag as r,w as o,a as d}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-routing.md","filePath":"ktor/server-routing.md","lastUpdated":1755457140000}'),c={name:"ktor/server-routing.md"};function E(g,s,u,y,F,C){const n=i("TopicTitle"),e=i("show-structure"),t=i("primary-label"),l=i("link-summary");return k(),h("div",null,[a(n,{labelRef:"server-plugin",title:"路由"}),a(e,{for:"chapter",depth:"2"}),a(t,{ref:"server-plugin"},null,512),a(l,null,{default:o(()=>s[0]||(s[0]=[d(" 路由是处理服务器应用程序中传入请求的核心插件。 ")])),_:1}),s[1]||(s[1]=r(`<p>路由是 Ktor 用于处理服务器应用程序中传入请求的核心 <a href="./server-plugins">插件</a>。当客户端向特定 URL（例如，<code>/hello</code>）发出请求时，路由机制允许我们定义如何处理此请求。</p><h2 id="install_plugin" tabindex="-1">安装路由 <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;安装路由 {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p>可以通过以下方式安装路由插件：</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RoutingRoot) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>鉴于路由插件在任何应用程序中都非常常见，Ktor 提供了一个便捷的 <code>routing</code> 函数，使得安装路由变得更简单。在下面的代码片段中，<code>install(RoutingRoot)</code> 被 <code>routing</code> 函数取代：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="define_route" tabindex="-1">定义路由处理程序 <a class="header-anchor" href="#define_route" aria-label="Permalink to &quot;定义路由处理程序 {id=&quot;define_route&quot;}&quot;">​</a></h2><p><a href="#install_plugin">安装</a>路由插件后，你可以在 <code>routing</code> 内部调用 <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.routing/route.html" target="_blank" rel="noreferrer">route</a> 函数来定义路由：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.http.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpMethod.Get) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Ktor 还提供了一系列函数，使得定义路由处理程序更加容易和简洁。例如，你可以用一个 <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.routing/get.html" target="_blank" rel="noreferrer">get</a> 函数来替换之前的代码，该函数现在只需要接收 URL 和处理请求的代码：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>类似地，Ktor 为所有其他动词（即 <code>put</code>、<code>post</code>、<code>head</code> 等）都提供了函数。</p><p>总而言之，你需要指定以下设置来定义一个路由：</p><ul><li><p><strong>HTTP 动词</strong></p><p>选择 HTTP 动词，例如 <code>GET</code>、<code>POST</code>、<code>PUT</code> 等。最方便的方式是使用专门的动词函数，例如 <code>get</code>、<code>post</code>、<code>put</code> 等。</p></li><li><p><strong>路径模式</strong></p><p>指定一个用于 <a href="#match_url">匹配 URL 路径</a> 的路径模式，例如 <code>/hello</code>、<code>/customer/{id}</code>。你可以将路径模式直接传递给 <code>get</code>/<code>post</code>/<code>etc.</code> 函数，或者使用 <code>route</code> 函数来分组 <a href="#multiple_routes">路由处理程序</a> 并定义 <a href="#nested_routes">嵌套路由</a>。</p></li><li><p><strong>处理程序</strong></p><p>指定如何处理 <a href="./server-requests">请求</a> 和 <a href="./server-responses">响应</a>。在处理程序内部，你可以访问 <code>ApplicationCall</code>，处理客户端请求并发送响应。</p></li></ul><h2 id="match_url" tabindex="-1">指定路径模式 <a class="header-anchor" href="#match_url" aria-label="Permalink to &quot;指定路径模式 {id=&quot;match_url&quot;}&quot;">​</a></h2><p>传递给 <a href="#define_route">路由</a> 函数（<code>route</code>、<code>get</code>、<code>post</code> 等）的路径模式用于匹配 URL 的 <em>路径</em> 部分。路径可以包含由斜杠 <code>/</code> 字符分隔的一系列路径段。</p><blockquote><p>注意，Ktor 区分带尾部斜杠和不带尾部斜杠的路径。你可以通过 <a href="./server-plugins#install">安装</a> <code>IgnoreTrailingSlash</code> 插件来改变此行为。</p><p type="note"></p></blockquote><p>下面是几个路径示例：</p><ul><li><code>/hello</code><br> 包含单个路径段的路径。</li><li><code>/order/shipment</code><br> 包含多个路径段的路径。你可以将此类路径原样传递给 <a href="#define_route">route/get/etc.</a> 函数，或者通过 <a href="#multiple_routes">嵌套</a> 多个 <code>route</code> 函数来组织子路由。</li><li><code>/user/{login}</code><br> 带 <code>login</code> <a href="#path_parameter">路径参数</a> 的路径，其值可在路由处理程序内部访问。</li><li><code>/user/*</code><br> 带 <a href="#wildcard">通配符</a> 的路径，匹配任何路径段。</li><li><code>/user/{...}</code><br> 带 <a href="#tailcard">尾部通配符</a> 的路径，匹配 URL 路径的其余所有部分。</li><li><code>/user/{param...}</code><br> 包含带 <a href="#path_parameter_tailcard">尾部通配符的路径参数</a> 的路径。</li><li><code>Regex(&quot;/.+/hello&quot;)</code><br> 包含 <a href="#regular_expression">正则表达式</a> 的路径，匹配路径段直到并包括最后一次出现的 <code>/hello</code>。</li></ul><h3 id="wildcard" tabindex="-1">通配符 <a class="header-anchor" href="#wildcard" aria-label="Permalink to &quot;通配符 {id=&quot;wildcard&quot;}&quot;">​</a></h3><p><em>通配符</em>（<code>*</code>）匹配任何路径段且不能为空。例如，<code>/user/*</code> 匹配 <code>/user/john</code>，但不匹配 <code>/user</code>。</p><h3 id="tailcard" tabindex="-1">尾部通配符 <a class="header-anchor" href="#tailcard" aria-label="Permalink to &quot;尾部通配符 {id=&quot;tailcard&quot;}&quot;">​</a></h3><p><em>尾部通配符</em>（<code>{...}</code>）匹配 URL 路径的其余所有部分，可以包含多个路径段，并且可以为空。例如，<code>/user/{...}</code> 匹配 <code>/user/john/settings</code> 以及 <code>/user</code>。</p><h3 id="path_parameter" tabindex="-1">路径参数 <a class="header-anchor" href="#path_parameter" aria-label="Permalink to &quot;路径参数 {id=&quot;path_parameter&quot;}&quot;">​</a></h3><p><em>路径参数</em>（<code>{param}</code>）匹配一个路径段并将其捕获为名为 <code>param</code> 的参数。此路径段是强制性的，但你可以通过添加问号使其可选：<code>{param?}</code>。例如：</p><ul><li><code>/user/{login}</code> 匹配 <code>/user/john</code>，但不匹配 <code>/user</code>。</li><li><code>/user/{login?}</code> 匹配 <code>/user/john</code> 以及 <code>/user</code>。<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>请注意，可选的路径参数 <code>{param?}</code> 只能用在路径的末尾。</p></div></li></ul><p>要访问路由处理程序内的参数值，请使用 <code>call.parameters</code> 属性。例如，在下面的代码片段中，<code>call.parameters[&quot;login&quot;]</code> 对于 <code>/user/admin</code> 路径将返回 <em>admin</em>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user/{login}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (call.parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>如果请求包含查询字符串，<code>call.parameters</code> 也包含此查询字符串的参数。要了解如何在处理程序内部访问查询字符串及其参数，请参见 <a href="./server-requests#query_parameters">查询参数</a>。</p></blockquote><h3 id="path_parameter_tailcard" tabindex="-1">带尾部通配符的路径参数 <a class="header-anchor" href="#path_parameter_tailcard" aria-label="Permalink to &quot;带尾部通配符的路径参数 {id=&quot;path_parameter_tailcard&quot;}&quot;">​</a></h3><p>带尾部通配符的路径参数（<code>{param...}</code>）匹配 URL 路径的其余所有部分，并将每个路径段的多个值以 <code>param</code> 为键放入参数中。例如，<code>/user/{param...}</code> 匹配 <code>/user/john/settings</code>。 要访问路由处理程序内部的路径段值，请使用 <code>call.parameters.getAll(&quot;param&quot;)</code>。对于上述示例，<code>getAll</code> 函数将返回一个包含 <em>john</em> 和 <em>settings</em> 值的数组。</p><h3 id="regular_expression" tabindex="-1">正则表达式 <a class="header-anchor" href="#regular_expression" aria-label="Permalink to &quot;正则表达式 {id=&quot;regular_expression&quot;}&quot;">​</a></h3><p>正则表达式可以与所有定义路由处理程序的函数一起使用：<code>route</code>、<code>get</code>、<code>post</code> 等。</p><blockquote><p>要了解更多关于正则表达式的信息，请参见 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/" target="_blank" rel="noreferrer">Kotlin 文档</a>。</p></blockquote><p>让我们编写一个匹配任何以 <code>/hello</code> 结尾的路径的路由。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.+/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过此路由定义，任何传入的以 <code>/hello</code> 结尾的路径请求，例如 <code>/foo/hello</code>、<code>/bar/baz/hello</code> 等，都将被匹配。</p><h4 id="在处理程序中访问路径部分" tabindex="-1">在处理程序中访问路径部分 <a class="header-anchor" href="#在处理程序中访问路径部分" aria-label="Permalink to &quot;在处理程序中访问路径部分&quot;">​</a></h4><p>在正则表达式中，命名组是一种捕获与模式匹配的字符串特定部分并为其分配名称的方式。 语法 <code>(?&lt;name&gt;pattern)</code> 用于定义命名组，其中 <code>name</code> 是组的名称，<code>pattern</code> 是匹配该组的正则表达式模式。</p><p>通过在路由函数中定义命名组，你可以捕获路径的一部分，然后在处理程序函数中，可以使用 <code>call.parameters</code> 对象访问捕获的参数。</p><p>例如，你可以定义一个路由，匹配包含整数标识符后跟 <code>/hello</code> 的路径请求。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;(?&lt;id&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+)/hello&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在下面的代码中，<code>(?&lt;id&gt;\\d+)</code> 命名组用于从请求路径中捕获整数标识符 <code>id</code>，并且 <code>call.parameters</code> 属性用于在处理程序函数中访问捕获的 <code>id</code> 参数。</p><p>未命名的组不能在正则表达式路由处理程序内部访问，但你可以使用它们来匹配路径。例如，路径 <code>hello/world</code> 将被匹配，而 <code>hello/World</code> 则不会：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello/([a-z]+)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此外，整个路径段需要被正则表达式消耗。例如，路径模式 <code>get(Regex(&quot;[a-z]+&quot;))</code> 不会匹配路径 <code>&quot;hello1&quot;</code>，但会匹配路径 <code>hello/1</code> 中的 <code>hello</code> 部分，并将 <code>/1</code> 留给下一个路由。</p><h2 id="multiple_routes" tabindex="-1">定义多个路由处理程序 <a class="header-anchor" href="#multiple_routes" aria-label="Permalink to &quot;定义多个路由处理程序 {id=&quot;multiple_routes&quot;}&quot;">​</a></h2><h3 id="group_by_verb" tabindex="-1">按动词函数分组路由 <a class="header-anchor" href="#group_by_verb" aria-label="Permalink to &quot;按动词函数分组路由 {id=&quot;group_by_verb&quot;}&quot;">​</a></h3><p>如果你想定义多个路由处理程序，这在任何应用程序中都是常见情况，你只需将它们添加到 <code>routing</code> 函数中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/customer/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/customer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这种情况下，每个路由都有自己的函数，并响应特定的端点和 HTTP 动词。</p><h3 id="group_by_path" tabindex="-1">按路径分组路由 <a class="header-anchor" href="#group_by_path" aria-label="Permalink to &quot;按路径分组路由 {id=&quot;group_by_path&quot;}&quot;">​</a></h3><p>另一种方法是按路径分组，即你定义路径，然后将该路径的动词作为嵌套函数放置，使用 <code>route</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/customer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="nested_routes" tabindex="-1">嵌套路由 <a class="header-anchor" href="#nested_routes" aria-label="Permalink to &quot;嵌套路由 {id=&quot;nested_routes&quot;}&quot;">​</a></h3><p>无论你如何分组，Ktor 还允许你将子路由作为参数传递给 <code>route</code> 函数。这对于定义逻辑上是其他资源的子资源的资源很有用。以下示例展示了如何响应 <code>/order/shipment</code> 的 <code>GET</code> 和 <code>POST</code> 请求：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/shipment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>因此，每个 <code>route</code> 调用都会生成一个单独的路径段。</p><h2 id="route_extension_function" tabindex="-1">路由扩展函数 <a class="header-anchor" href="#route_extension_function" aria-label="Permalink to &quot;路由扩展函数 {id=&quot;route_extension_function&quot;}&quot;">​</a></h2><p>一种常见的模式是在 <code>Route</code> 类型上使用扩展函数来定义实际的路由，这使得我们可以轻松访问动词，并避免将所有路由都放在一个 <code>routing</code> 函数中造成的混乱。你可以独立于你决定如何分组路由来应用此模式。因此，第一个示例可以用更清晰的方式表示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOrdersRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    totalizeOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOrdersRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">totalizeOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order/{id}/total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有关演示此方法的完整示例，请参见 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/legacy-interactive-website" target="_blank" rel="noreferrer">legacy-interactive-website</a>。</p><blockquote><p>为了使我们的应用程序在可维护性方面实现可伸缩性，建议遵循某些 <a href="./server-application-structure">结构化模式</a>。</p><p type="note"></p></blockquote><h2 id="trace_routes" tabindex="-1">追踪路由 <a class="header-anchor" href="#trace_routes" aria-label="Permalink to &quot;追踪路由 {id=&quot;trace_routes&quot;}&quot;">​</a></h2><p>配置了 <a href="./server-logging">日志</a> 后，Ktor 会启用路由追踪，帮助你确定某些路由未被执行的原因。例如，如果你 <a href="./server-run">运行</a> 应用程序并向指定的端点发出请求，应用程序的输出可能如下所示：</p><div class="language-Console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TRACE Application - Trace for [missing-page]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/, segment:0 -&gt; SUCCESS @ /</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  /, segment:0 -&gt; SUCCESS @ /</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    /(method:GET), segment:0 -&gt; FAILURE &quot;Not all segments matched&quot; @ /(method:GET)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matched routes:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  No results</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Route resolve result:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  FAILURE &quot;No matched subtrees found&quot; @ /</span></span></code></pre></div><blockquote><p>要在 <a href="./server-native">原生服务器</a> 上启用路由追踪，在 <a href="./server-run">运行</a> 应用程序时将 <em>TRACE</em> 值传递给 <code>KTOR_LOG_LEVEL</code> 环境变量。</p><p type="note"></p></blockquote>`,67))])}const b=p(c,[["render",E]]);export{q as __pageData,b as default};
