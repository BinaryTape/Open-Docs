import{_ as o,c as r,o as t,ag as a}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"リソースの概要","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-multiplatform-resources.md","filePath":"ja/kmp/compose-multiplatform-resources.md","lastUpdated":1755516278000}'),l={name:"ja/kmp/compose-multiplatform-resources.md"};function s(p,e,i,m,c,u){return t(),r("div",null,e[0]||(e[0]=[a('<h1 id="リソースの概要" tabindex="-1">リソースの概要 <a class="header-anchor" href="#リソースの概要" aria-label="Permalink to &quot;リソースの概要&quot;">​</a></h1><p>Compose Multiplatformは、<code>compose-multiplatform-resources</code>という特別なライブラリとGradleプラグインのサポートを提供し、すべてのサポートされているプラットフォームの共通コードでリソースにアクセスできるようにします。リソースとは、画像、フォント、文字列など、アプリケーションで使用できる静的なコンテンツです。</p><p>Compose Multiplatformでリソースを扱う際は、現在の状況を考慮してください：</p><ul><li>ほとんどすべてのリソースは呼び出し元のスレッドで同期的に読み込まれます。唯一の例外は、非同期で読み込まれる生ファイルとWebリソースです。</li><li>長い動画のような大容量の生ファイルをストリームとして読み込むことは、まだサポートされていません。 例えば、<a href="https://github.com/Kotlin/kotlinx-io" target="_blank" rel="noreferrer"><code>kotlinx-io</code></a>ライブラリのようなシステムAPIに個別のファイルを渡すには、<a href="./compose-multiplatform-resources-usage#accessing-multiplatform-resources-from-external-libraries"><code>getUri()</code></a>関数を使用してください。</li><li>1.6.10以降、Kotlin 2.0.0以降およびGradle 7.6以降を使用している限り、リソースを任意のモジュールまたはソースセットに配置できます。</li></ul><p>Compose Multiplatformでリソースを扱う方法を学ぶには、以下の主要なセクションを参照してください：</p><ul><li><p><a href="./compose-multiplatform-resources-setup">マルチプラットフォームリソースのセットアップと構成</a></p><p><code>resources</code> ライブラリの依存関係を追加し、アプリがアクセスできるすべてのリソースを設定します。</p></li><li><p><a href="./compose-multiplatform-resources-usage">アプリでマルチプラットフォームリソースを使用する</a></p><p>自動生成されたアクセサーを使用して、UIコードで直接リソースにアクセスする方法を学びます。</p></li><li><p><a href="./compose-resource-environment">ローカルリソース環境</a></p><p>アプリ内テーマや言語など、アプリのリソース環境を管理します。</p></li></ul>',6)]))}const d=o(l,[["render",s]]);export{f as __pageData,d as default};
