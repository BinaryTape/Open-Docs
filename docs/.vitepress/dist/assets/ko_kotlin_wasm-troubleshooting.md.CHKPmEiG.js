import{_ as e,c as s,o as t,ag as i}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"문제 해결","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/wasm-troubleshooting.md","filePath":"ko/kotlin/wasm-troubleshooting.md","lastUpdated":1754307826000}'),o={name:"ko/kotlin/wasm-troubleshooting.md"};function l(r,a,n,p,c,h){return t(),s("div",null,a[0]||(a[0]=[i(`<h1 id="문제-해결" tabindex="-1">문제 해결 <a class="header-anchor" href="#문제-해결" aria-label="Permalink to &quot;문제 해결&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasm은 <a href="/ko/kotlin/components-stability">알파</a> 단계입니다. 언제든지 변경될 수 있습니다. 프로덕션 환경 이전 단계에서 사용해 주세요. <a href="https://youtrack.jetbrains.com/issue/KT-56492" target="_blank" rel="noreferrer">YouTrack</a>을 통해 의견을 주시면 감사하겠습니다.</p></div><p>Kotlin/Wasm은 WebAssembly 내에서 개선 사항과 새로운 기능을 도입하기 위해 <a href="#garbage-collection-proposal">가비지 컬렉션</a> 및 <a href="#exception-handling-proposal">예외 처리</a>와 같은 새로운 <a href="https://webassembly.org/roadmap/" target="_blank" rel="noreferrer">WebAssembly 제안</a>에 의존합니다.</p><p>하지만 이러한 기능이 제대로 작동하도록 하려면 새로운 제안을 지원하는 환경이 필요합니다. 경우에 따라서는 해당 제안과 호환되도록 환경을 설정해야 할 수도 있습니다.</p><h2 id="브라우저-버전" tabindex="-1">브라우저 버전 <a class="header-anchor" href="#브라우저-버전" aria-label="Permalink to &quot;브라우저 버전&quot;">​</a></h2><p>Kotlin/Wasm으로 빌드된 애플리케이션을 브라우저에서 실행하려면 새로운 <a href="https://github.com/WebAssembly/gc" target="_blank" rel="noreferrer">WebAssembly 가비지 컬렉션 (WasmGC) 기능</a>을 지원하는 브라우저 버전이 필요합니다. 브라우저 버전이 새로운 WasmGC를 기본적으로 지원하는지 또는 환경을 변경해야 하는지 확인하세요.</p><h3 id="크롬" tabindex="-1">크롬 <a class="header-anchor" href="#크롬" aria-label="Permalink to &quot;크롬&quot;">​</a></h3><ul><li><p><strong>버전 119 이상:</strong></p><p>기본적으로 작동합니다.</p></li><li><p><strong>이전 버전의 경우:</strong></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>이전 브라우저에서 애플리케이션을 실행하려면 Kotlin 버전 1.9.20 이전 버전이 필요합니다.</p></div><ol><li>브라우저에서 <code>chrome://flags/#enable-webassembly-garbage-collection</code>으로 이동하세요.</li><li><strong>WebAssembly Garbage Collection</strong>을 활성화하세요.</li><li>브라우저를 다시 시작하세요.</li></ol></li></ul><h3 id="크로미움-기반" tabindex="-1">크로미움 기반 <a class="header-anchor" href="#크로미움-기반" aria-label="Permalink to &quot;크로미움 기반&quot;">​</a></h3><p>Edge, Brave, Opera, Samsung Internet과 같은 크로미움 기반 브라우저를 포함합니다.</p><ul><li><p><strong>버전 119 이상:</strong></p><p>기본적으로 작동합니다.</p></li><li><p><strong>이전 버전의 경우:</strong></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>이전 브라우저에서 애플리케이션을 실행하려면 Kotlin 버전 1.9.20 이전 버전이 필요합니다.</p></div><p>애플리케이션을 <code>--js-flags=--experimental-wasm-gc</code> 명령줄 인자로 실행하세요.</p></li></ul><h3 id="파이어폭스" tabindex="-1">파이어폭스 <a class="header-anchor" href="#파이어폭스" aria-label="Permalink to &quot;파이어폭스&quot;">​</a></h3><ul><li><p><strong>버전 120 이상:</strong></p><p>기본적으로 작동합니다.</p></li><li><p><strong>버전 119:</strong></p><ol><li>브라우저에서 <code>about:config</code>로 이동하세요.</li><li><code>javascript.options.wasm_gc</code> 옵션을 활성화하세요.</li><li>페이지를 새로고침하세요.</li></ol></li></ul><h3 id="사파리-webkit" tabindex="-1">사파리/WebKit <a class="header-anchor" href="#사파리-webkit" aria-label="Permalink to &quot;사파리/WebKit&quot;">​</a></h3><ul><li><p><strong>버전 18.2 이상:</strong></p><p>기본적으로 작동합니다.</p></li><li><p><strong>이전 버전의 경우:</strong></p><p>지원되지 않습니다.</p></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Safari 18.2는 iOS 18.2, iPadOS 18.2, visionOS 2.2, macOS 15.2, macOS Sonoma, macOS Ventura에서 사용할 수 있습니다. iOS 및 iPadOS에서는 Safari 18.2가 운영 체제와 함께 번들로 제공됩니다. 사용하려면 기기를 버전 18.2 이상으로 업데이트하세요. 자세한 내용은 <a href="https://developer.apple.com/documentation/safari-release-notes/safari-18_2-release-notes#Overview" target="_blank" rel="noreferrer">Safari 릴리스 노트</a>를 참조하세요.</p></div><h2 id="wasm-제안-지원" tabindex="-1">Wasm 제안 지원 <a class="header-anchor" href="#wasm-제안-지원" aria-label="Permalink to &quot;Wasm 제안 지원&quot;">​</a></h2><p>Kotlin/Wasm 개선 사항은 <a href="https://webassembly.org/roadmap/" target="_blank" rel="noreferrer">WebAssembly 제안</a>을 기반으로 합니다. 여기에서는 WebAssembly의 가비지 컬렉션 및 (레거시) 예외 처리 제안에 대한 지원 세부 정보를 확인할 수 있습니다.</p><h3 id="가비지-컬렉션-제안" tabindex="-1">가비지 컬렉션 제안 <a class="header-anchor" href="#가비지-컬렉션-제안" aria-label="Permalink to &quot;가비지 컬렉션 제안&quot;">​</a></h3><p>Kotlin 1.9.20부터 Kotlin 툴체인은 <a href="https://github.com/WebAssembly/gc" target="_blank" rel="noreferrer">Wasm 가비지 컬렉션 (WasmGC) 제안</a>의 최신 버전을 사용합니다.</p><p>이러한 이유로, Wasm 프로젝트를 최신 Kotlin 버전으로 업데이트할 것을 강력히 권장합니다. 또한 Wasm 환경과 함께 최신 버전의 브라우저를 사용할 것을 권장합니다.</p><h3 id="예외-처리-제안" tabindex="-1">예외 처리 제안 <a class="header-anchor" href="#예외-처리-제안" aria-label="Permalink to &quot;예외 처리 제안&quot;">​</a></h3><p>Kotlin 툴체인은 기본적으로 <a href="https://github.com/WebAssembly/exception-handling/blob/master/proposals/exception-handling/legacy/Exceptions.md" target="_blank" rel="noreferrer">레거시 예외 처리 제안</a>을 사용하며, 이는 생성된 Wasm 바이너리를 더 넓은 범위의 환경에서 실행할 수 있도록 합니다.</p><p>Kotlin 2.0.0부터 Kotlin/Wasm 내에 Wasm <a href="https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/Exceptions.md" target="_blank" rel="noreferrer">예외 처리 제안</a>의 새로운 버전에 대한 지원이 도입되었습니다.</p><p>이 업데이트는 새로운 예외 처리 제안이 Kotlin 요구 사항과 일치하도록 보장하며, 해당 제안의 최신 버전만 지원하는 가상 머신에서 Kotlin/Wasm을 사용할 수 있도록 합니다.</p><p>새로운 예외 처리 제안은 <code>-Xwasm-use-new-exception-proposal</code> 컴파일러 옵션을 사용하여 활성화됩니다. 기본적으로 비활성화되어 있습니다.</p><p> </p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="https://github.com/Kotlin/kotlin-wasm-examples#readme" target="_blank" rel="noreferrer">Kotlin/Wasm 예제</a>를 통해 프로젝트 설정, 종속성 사용 및 기타 작업에 대해 자세히 알아보세요.</p></div><h2 id="기본-임포트-사용" tabindex="-1">기본 임포트 사용 <a class="header-anchor" href="#기본-임포트-사용" aria-label="Permalink to &quot;기본 임포트 사용&quot;">​</a></h2><p><a href="/ko/kotlin/wasm-js-interop">JavaScript로 Kotlin/Wasm 코드 임포트하기</a>는 명명된 내보내기(named exports) 방식으로 전환되었으며, 기본 내보내기(default exports) 방식에서는 벗어났습니다.</p><p>기본 임포트를 계속 사용하려면 새로운 JavaScript 래퍼 모듈을 생성하세요. 다음 스니펫으로 <code>.mjs</code> 파일을 생성하세요:</p><div class="language-Javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Specifies the path to the main .mjs file</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moduleExports </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./wasm-test.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { moduleExports </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre></div><p>새로운 <code>.mjs</code> 파일을 <code>resources</code> 폴더에 배치하면 빌드 프로세스 중에 자동으로 주 <code>.mjs</code> 파일 옆에 배치됩니다.</p><p><code>.mjs</code> 파일을 사용자 지정 위치에 둘 수도 있습니다. 이 경우 수동으로 주 <code>.mjs</code> 파일 옆으로 이동하거나 임포트 문(import statement)의 경로를 해당 위치와 일치하도록 조정해야 합니다.</p><h2 id="kotlin-wasm-컴파일-속도-저하" tabindex="-1">Kotlin/Wasm 컴파일 속도 저하 <a class="header-anchor" href="#kotlin-wasm-컴파일-속도-저하" aria-label="Permalink to &quot;Kotlin/Wasm 컴파일 속도 저하&quot;">​</a></h2><p>Kotlin/Wasm 프로젝트 작업 시 컴파일 시간이 느려질 수 있습니다. 이는 Kotlin/Wasm 툴체인이 변경 사항이 있을 때마다 전체 코드베이스를 재컴파일하기 때문입니다.</p><p>이 문제를 완화하기 위해 Kotlin/Wasm 타겟은 증분 컴파일(incremental compilation)을 지원하며, 이는 마지막 컴파일 이후 변경된 파일만 컴파일러가 다시 컴파일할 수 있도록 합니다.</p><p>증분 컴파일을 사용하면 컴파일 시간을 단축할 수 있습니다. 현재로서는 개발 속도를 두 배로 높여주며, 향후 릴리스에서 추가 개선이 예정되어 있습니다.</p><p>현재 설정에서는 Wasm 타겟의 증분 컴파일이 기본적으로 비활성화되어 있습니다. 활성화하려면 프로젝트의 <code>local.properties</code> 또는 <code>gradle.properties</code> 파일에 다음 줄을 추가하세요:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.incremental.wasm=true</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasm 증분 컴파일을 사용해 보고 <a href="https://youtrack.jetbrains.com/issue/KT-72158/Kotlin-Wasm-incremental-compilation-feedback" target="_blank" rel="noreferrer">피드백을 공유해 주세요</a>. 여러분의 의견은 이 기능을 더 빨리 안정화하고 기본적으로 활성화하는 데 도움이 됩니다.</p></div>`,41)]))}const b=e(o,[["render",l]]);export{m as __pageData,b as default};
