import{_ as r}from"./chunks/direct-integration-scheme.Cw1ubqmC.js";import{_ as d}from"./chunks/xcode-run-script-phase-1.BlwrlSQM.js";import{_ as c,a as h,b as g}from"./chunks/disable-sandboxing-in-xcode-project-settings.Hr8r5yJK.js";import{_ as u,C as l,c as m,o as k,j as t,G as s,ag as e,a as o,w as a}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"直接整合","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/multiplatform-direct-integration.md","filePath":"zh-Hant/kmp/multiplatform-direct-integration.md","lastUpdated":1755516278000}'),_={name:"zh-Hant/kmp/multiplatform-direct-integration.md"};function b(f,i,C,F,S,P){const n=l("tldr"),p=l("shortcut");return k(),m("div",null,[i[9]||(i[9]=t("h1",{id:"直接整合",tabindex:"-1"},[o("直接整合 "),t("a",{class:"header-anchor",href:"#直接整合","aria-label":'Permalink to "直接整合"'},"​")],-1)),s(n,null,{default:a(()=>i[0]||(i[0]=[o(" 這是一種本地整合方法。如果您符合以下條件，此方法可能適合您："),t("br",null,null,-1),t("ul",null,[t("li",null,"您已在本地機器上設定了以 iOS 為目標的 Kotlin Multiplatform 專案。"),t("li",null,[o("您的 Kotlin Multiplatform 專案沒有 CocoaPods 依賴項。"),t("br")])],-1),t("p",null,[t("a",{href:"./multiplatform-ios-integration-overview"},"選擇最適合您的整合方法")],-1)])),_:1}),i[10]||(i[10]=e('<p>如果您希望透過在 Kotlin Multiplatform 專案和 iOS 專案之間共用程式碼，來同時開發這兩個專案，您可以透過一個特殊腳本設定直接整合。</p><p>此腳本自動化了在 Xcode 中將 Kotlin 框架連接到 iOS 專案的過程：</p><p><img src="'+r+'" alt="直接整合圖" width="700"></p><p>該腳本使用專為 Xcode 環境設計的 <code>embedAndSignAppleFrameworkForXcode</code> Gradle 任務。在設定過程中，您將其添加到 iOS 應用程式建置的執行腳本階段。之後，Kotlin 成品將在執行 iOS 應用程式建置之前被建置並包含在派生數據中。</p><p>一般而言，該腳本：</p><ul><li>將編譯後的 Kotlin 框架複製到 iOS 專案結構中正確的目錄。</li><li>處理嵌入式框架的程式碼簽署過程。</li><li>確保 Kotlin 框架中的程式碼變更反映在 Xcode 中的 iOS 應用程式中。</li></ul><h2 id="如何設定" tabindex="-1">如何設定 <a class="header-anchor" href="#如何設定" aria-label="Permalink to &quot;如何設定&quot;">​</a></h2><p>如果您目前正在使用 CocoaPods 插件連接您的 Kotlin 框架，請先遷移。如果您的專案沒有 CocoaPods 依賴項，請<a href="#connect-the-framework-to-your-project">跳過此步驟</a>。</p><h3 id="從-cocoapods-插件遷移" tabindex="-1">從 CocoaPods 插件遷移 <a class="header-anchor" href="#從-cocoapods-插件遷移" aria-label="Permalink to &quot;從 CocoaPods 插件遷移&quot;">​</a></h3><p>要從 CocoaPods 插件遷移：</p>',10)),t("ol",null,[t("li",null,[t("p",null,[i[2]||(i[2]=o("在 Xcode 中，使用 ")),i[3]||(i[3]=t("strong",null,"Product",-1)),i[4]||(i[4]=o(" | ")),i[5]||(i[5]=t("strong",null,"Clean Build Folder",-1)),i[6]||(i[6]=o(" 或透過 ")),s(p,null,{default:a(()=>i[1]||(i[1]=[o("Cmd + Shift + K")])),_:1}),i[7]||(i[7]=o(" 快捷鍵清理建置目錄。"))])]),i[8]||(i[8]=e('<li><p>在包含 Podfile 的目錄中，運行以下命令：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pod deintegrate</span></span></code></pre></div></li><li><p>從您的 <code>build.gradle(.kts)</code> 文件中移除 <code>cocoapods {}</code> 區塊。</p></li><li><p>刪除 <code>.podspec</code> 文件和 Podfile。</p></li>',3))]),i[11]||(i[11]=e('<h3 id="連接框架到您的專案" tabindex="-1">連接框架到您的專案 <a class="header-anchor" href="#連接框架到您的專案" aria-label="Permalink to &quot;連接框架到您的專案&quot;">​</a></h3><p>要將從 multiplatform 專案生成的 Kotlin 框架連接到您的 Xcode 專案：</p><ol><li><p>只有當 <code>binaries.framework</code> 組態選項被聲明時，<code>embedAndSignAppleFrameworkForXcode</code> 任務才會註冊。在您的 Kotlin Multiplatform 專案中，檢查 <code>build.gradle.kts</code> 文件中的 iOS 目標聲明。</p></li><li><p>在 Xcode 中，雙擊專案名稱打開 iOS 專案設定。</p></li><li><p>在左側的 <strong>Targets</strong> 部分，選擇您的目標，然後導航到 <strong>Build Phases</strong> 標籤。</p></li><li><p>點擊 <strong>+</strong> 並選擇 <strong>New Run Script Phase</strong>。</p><p><img src="'+d+`" alt="新增執行腳本階段" width="700"></p></li><li><p>調整以下腳本並將結果貼上到執行腳本欄位中：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;Path to the root of the multiplatform project&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Shared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:embedAndSignAppleFrameworkForXcode</span></span></code></pre></div><ul><li>在 <code>cd</code> 命令中，指定您的 Kotlin Multiplatform 專案的根目錄路徑，例如 <code>$SRCROOT/..</code>。</li><li>在 <code>./gradlew</code> 命令中，指定共用模組的名稱，例如 <code>:shared</code> 或 <code>:composeApp</code>。</li></ul><p><img src="`+c+'" alt="新增腳本" width="700"></p></li><li><p>禁用 <strong>Based on dependency analysis</strong> 選項。</p><p>這可確保 Xcode 在每次建置期間都執行該腳本，並且不會每次都警告缺少輸出依賴項。</p></li><li><p>將 <strong>Run Script</strong> 階段向上移動，並將其放在 <strong>Compile Sources</strong> 階段之前。</p><p><img src="'+h+'" alt="拖曳執行腳本階段" width="700"></p></li><li><p>在 <strong>Build Settings</strong> 標籤上，禁用 <strong>Build Options</strong> 下的 <strong>User Script Sandboxing</strong> 選項：</p><p><img src="'+g+'" alt="使用者腳本沙盒化" width="700"></p><blockquote><p>如果您在未先禁用沙盒化的情況下建置了 iOS 專案，這可能需要重新啟動您的 Gradle Daemon。 停止可能已被沙盒化的 Gradle Daemon 進程：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stop</span></span></code></pre></div><p style=""></p></blockquote></li><li><p>在 Xcode 中建置專案。如果一切設定正確，專案將成功建置。</p></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您有不同於預設 <code>Debug</code> 或 <code>Release</code> 的自訂建置組態，請在 <strong>Build Settings</strong> 標籤上，在 <strong>User-Defined</strong> 下添加 <code>KOTLIN_FRAMEWORK_BUILD_TYPE</code> 設定，並將其設置為 <code>Debug</code> 或 <code>Release</code>。</p></div><h2 id="接下來" tabindex="-1">接下來？ <a class="header-anchor" href="#接下來" aria-label="Permalink to &quot;接下來？&quot;">​</a></h2><p>您在使用 Swift Package Manager 時，也可以利用本地整合。<a href="./multiplatform-spm-local-integration">了解如何在本地套件中添加對 Kotlin 框架的依賴項</a>。</p>',6))])}const w=u(_,[["render",b]]);export{A as __pageData,w as default};
