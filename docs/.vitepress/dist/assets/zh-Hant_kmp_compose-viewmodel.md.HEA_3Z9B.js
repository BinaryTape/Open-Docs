import{_ as i,c as a,o as e,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"通用 ViewModel","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/compose-viewmodel.md","filePath":"zh-Hant/kmp/compose-viewmodel.md","lastUpdated":1755516278000}'),n={name:"zh-Hant/kmp/compose-viewmodel.md"};function t(p,s,h,k,o,d){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="通用-viewmodel" tabindex="-1">通用 ViewModel <a class="header-anchor" href="#通用-viewmodel" aria-label="Permalink to &quot;通用 ViewModel&quot;">​</a></h1><p>Android 的 <a href="https://developer.android.com/topic/libraries/architecture/viewmodel" target="_blank" rel="noreferrer">ViewModel</a> 方法可用於建構 UI，並可透過 Compose Multiplatform 在通用程式碼中實作。</p><h2 id="將通用-viewmodel-加入您的專案" tabindex="-1">將通用 ViewModel 加入您的專案 <a class="header-anchor" href="#將通用-viewmodel-加入您的專案" aria-label="Permalink to &quot;將通用 ViewModel 加入您的專案&quot;">​</a></h2><p>若要使用多平台 <code>ViewModel</code> 實作，請將以下依賴項加入您的 <code>commonMain</code> 原始碼集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose:2.9.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="在通用程式碼中使用-viewmodel" tabindex="-1">在通用程式碼中使用 ViewModel <a class="header-anchor" href="#在通用程式碼中使用-viewmodel" aria-label="Permalink to &quot;在通用程式碼中使用 ViewModel&quot;">​</a></h2><p>Compose Multiplatform 實作了通用 <code>ViewModelStoreOwner</code> 介面，因此總體而言，在通用程式碼中使用 <code>ViewModel</code> 類別與 Android 最佳實踐沒有太大區別。</p><p>使用 <a href="https://github.com/JetBrains/compose-multiplatform/tree/0e38f58b42d23ff6d0ad30b119d34fa1cd6ccedb/examples/nav_cupcake" target="_blank" rel="noreferrer">導航範例</a>：</p><ol><li>宣告 ViewModel 類別：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.lifecycle.ViewModel</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.lifecycle.viewmodel.compose.viewModel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _uiState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MutableStateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderUiState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pickupOptions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pickupOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uiState: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderUiState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _uiState.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asStateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>將 ViewModel 加入您的可組合函式：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CupcakeApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   viewModel: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderViewModel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 <code>ViewModel</code> 中執行協程時，請記住 <code>ViewModel.viewModelScope</code> 值綁定到 <code>Dispatchers.Main.immediate</code> 值，該值在桌面端預設情況下可能不可用。為了讓 ViewModel 協程與 Compose Multiplatform 正常運作，請將 <code>kotlinx-coroutines-swing</code> 依賴項加入您的專案。請參閱 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html" target="_blank" rel="noreferrer">Dispatchers.Main 文件</a>以了解詳細資訊。</p></div><p>在非 JVM 平台，物件無法使用型別反射實例化。 因此在通用程式碼中，您不能不帶參數呼叫 <code>viewModel()</code> 函式：每次建立 <code>ViewModel</code> 實例時，您至少需要提供一個初始化器作為參數。</p><p>如果只提供一個初始化器，函式庫會在內部建立一個預設工廠。 但是您可以實作您自己的工廠，並呼叫通用 <code>viewModel(...)</code> 函式更明確的版本，就像 <a href="https://developer.android.com/topic/libraries/architecture/viewmodel#jetpack-compose" target="_blank" rel="noreferrer">使用 Jetpack Compose</a> 一樣。</p>`,15)]))}const E=i(n,[["render",t]]);export{c as __pageData,E as default};
