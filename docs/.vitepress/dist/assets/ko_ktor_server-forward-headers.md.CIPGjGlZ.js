import{_ as m}from"./chunks/forwarded-headers.CS4yn2xX.js";import{_ as f,C as d,c as v,o as y,G as t,ag as k,j as r,w as i,a as o}from"./chunks/framework.Bksy39di.js";const P=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-forward-headers.md","filePath":"ko/ktor/server-forward-headers.md","lastUpdated":1755457140000}'),F={name:"ko/ktor/server-forward-headers.md"};function w(b,e,E,q,H,_){const u=d("TopicTitle"),h=d("show-structure"),c=d("primary-label"),n=d("Links"),g=d("tldr"),a=d("code-block"),s=d("TabItem"),l=d("Tabs"),p=d("list");return y(),v("div",null,[t(u,{labelRef:"server-plugin",title:"포워디드 헤더"}),t(h,{for:"chapter",depth:"2"}),t(c,{ref:"server-plugin"},null,512),t(g,null,{default:i(()=>[e[3]||(e[3]=r("p",null,[r("b",null,"필수 의존성"),o(": "),r("code",null,"io.ktor:ktor-server-forwarded-header")],-1)),e[4]||(e[4]=r("p",null,[r("b",null,"코드 예시"),o(": "),r("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/forwarded-header"}," forwarded-header ")],-1)),r("p",null,[r("b",null,[t(n,{href:"/ktor/server-native",summary:"Ktor supports Kotlin/Native and allows you to run a server without an additional runtime or virtual machine."},{default:i(()=>e[0]||(e[0]=[o("네이티브 서버")])),_:1}),e[1]||(e[1]=o(" 지원"))]),e[2]||(e[2]=o(": ✅ "))])]),_:1}),e[29]||(e[29]=k('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-forwarded-header/io.ktor.server.plugins.forwardedheaders/-forwarded-headers.html" target="_blank" rel="noreferrer">ForwardedHeaders</a> 및 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-forwarded-header/io.ktor.server.plugins.forwardedheaders/-x-forwarded-headers.html" target="_blank" rel="noreferrer">XForwardedHeaders</a> 플러그인을 사용하면 Ktor 서버가 리버스 프록시 뒤에 배치될 때 리버스 프록시 헤더를 처리하여 원본 <a href="./server-requests">요청</a>에 대한 정보를 얻을 수 있습니다. 이는 <a href="./server-logging">로깅</a> 목적에 유용할 수 있습니다.</p><ul><li><code>ForwardedHeaders</code>는 <code>Forwarded</code> 헤더 (<a href="https://tools.ietf.org/html/rfc7239" target="_blank" rel="noreferrer">RFC 7239</a>)를 처리합니다.</li><li><code>XForwardedHeaders</code>는 다음 <code>X-Forwarded-</code> 헤더를 처리합니다. <ul><li><code>X-Forwarded-Host</code>/<code>X-Forwarded-Server</code></li><li><code>X-Forwarded-For</code></li><li><code>X-Forwarded-By</code></li><li><code>X-Forwarded-Proto</code>/<code>X-Forwarded-Protocol</code></li><li><code>X-Forwarded-SSL</code>/<code>Front-End-Https</code></li></ul></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>Forwarded</code> 헤더 조작을 방지하려면, 애플리케이션이 리버스 프록시 연결만 허용하는 경우에 이 플러그인들을 설치하세요.</p></div><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>ForwardedHeaders</code>/<code>XForwardedHeaders</code> 플러그인을 사용하려면 빌드 스크립트에 <code>ktor-server-forwarded-header</code> 아티팩트를 포함해야 합니다.</p>',5)),t(l,{group:"languages"},{default:i(()=>[t(s,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:i(()=>[t(a,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-forwarded-header:$ktor_version")'})]),_:1}),t(s,{title:"Gradle (Groovy)","group-key":"groovy"},{default:i(()=>[t(a,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-forwarded-header:$ktor_version"'})]),_:1}),t(s,{title:"Maven","group-key":"maven"},{default:i(()=>[t(a,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-forwarded-header-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),e[30]||(e[30]=r("h2",{id:"install_plugin",tabindex:"-1"},[o("플러그인 설치 "),r("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "플러그인 설치 {id="install_plugin"}"'},"​")],-1)),t(l,null,{default:i(()=>[t(s,{title:"ForwardedHeader"},{default:i(()=>[r("p",null,[e[6]||(e[6]=o(" 애플리케이션에 ")),e[7]||(e[7]=r("code",null,"ForwardedHeaders",-1)),e[8]||(e[8]=o(" 플러그인을 ")),e[9]||(e[9]=r("a",{href:"#install"},"설치",-1)),e[10]||(e[10]=o("하려면, 지정된 ")),t(n,{href:"/ktor/server-modules",summary:"Modules allow you to structure your application by grouping routes."},{default:i(()=>e[5]||(e[5]=[o("모듈")])),_:1}),e[11]||(e[11]=o(" 내의 ")),e[12]||(e[12]=r("code",null,"install",-1)),e[13]||(e[13]=o(" 함수에 전달하세요. 아래 코드 스니펫은 ")),e[14]||(e[14]=r("code",null,"ForwardedHeaders",-1)),e[15]||(e[15]=o("을(를) 설치하는 방법을 보여줍니다... "))]),t(p,null,{default:i(()=>e[16]||(e[16]=[r("li",null,[o(" ... "),r("code",null,"embeddedServer"),o(" 함수 호출 내에서. ")],-1),r("li",null,[o(" ... "),r("code",null,"Application"),o(" 클래스의 확장 함수인 명시적으로 정의된 "),r("code",null,"module"),o(" 내에서. ")],-1)])),_:1}),t(l,null,{default:i(()=>[t(s,{title:"embeddedServer"},{default:i(()=>[t(a,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.forwardedheaders.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(ForwardedHeaders)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),t(s,{title:"module"},{default:i(()=>[t(a,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.forwardedheaders.*
            // ...
            fun Application.module() {
                install(ForwardedHeaders)
                // ...
            }`})]),_:1})]),_:1})]),_:1}),t(s,{title:"XForwardedHeader"},{default:i(()=>[r("p",null,[e[18]||(e[18]=o(" 애플리케이션에 ")),e[19]||(e[19]=r("code",null,"XForwardedHeaders",-1)),e[20]||(e[20]=o(" 플러그인을 ")),e[21]||(e[21]=r("a",{href:"#install"},"설치",-1)),e[22]||(e[22]=o("하려면, 지정된 ")),t(n,{href:"/ktor/server-modules",summary:"Modules allow you to structure your application by grouping routes."},{default:i(()=>e[17]||(e[17]=[o("모듈")])),_:1}),e[23]||(e[23]=o(" 내의 ")),e[24]||(e[24]=r("code",null,"install",-1)),e[25]||(e[25]=o(" 함수에 전달하세요. 아래 코드 스니펫은 ")),e[26]||(e[26]=r("code",null,"XForwardedHeaders",-1)),e[27]||(e[27]=o("을(를) 설치하는 방법을 보여줍니다... "))]),t(p,null,{default:i(()=>e[28]||(e[28]=[r("li",null,[o(" ... "),r("code",null,"embeddedServer"),o(" 함수 호출 내에서. ")],-1),r("li",null,[o(" ... "),r("code",null,"Application"),o(" 클래스의 확장 함수인 명시적으로 정의된 "),r("code",null,"module"),o(" 내에서. ")],-1)])),_:1}),t(l,null,{default:i(()=>[t(s,{title:"embeddedServer"},{default:i(()=>[t(a,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.forwardedheaders.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(XForwardedHeaders)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),t(s,{title:"module"},{default:i(()=>[t(a,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.forwardedheaders.*
            // ...
            fun Application.module() {
                install(XForwardedHeaders)
                // ...
            }`})]),_:1})]),_:1})]),_:1})]),_:1}),e[31]||(e[31]=k(`<p><code>ForwardedHeaders</code>/<code>XForwardedHeaders</code>를 설치한 후에는 <a href="#request_info">call.request.origin</a> 속성을 사용하여 원본 요청에 대한 정보를 얻을 수 있습니다.</p><h2 id="request_info" tabindex="-1">요청 정보 가져오기 <a class="header-anchor" href="#request_info" aria-label="Permalink to &quot;요청 정보 가져오기 {id=&quot;request_info&quot;}&quot;">​</a></h2><h3 id="proxy_request_info" tabindex="-1">프록시 요청 정보 <a class="header-anchor" href="#proxy_request_info" aria-label="Permalink to &quot;프록시 요청 정보 {id=&quot;proxy_request_info&quot;}&quot;">​</a></h3><p>프록시 요청에 대한 정보를 얻으려면 <a href="./server-routing#define_route">라우트 핸들러</a> 내에서 <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.request/-application-request/local.html" target="_blank" rel="noreferrer">call.request.local</a> 속성을 사용하세요. 아래 코드 스니펫은 프록시 주소와 요청이 이루어진 호스트에 대한 정보를 얻는 방법을 보여줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> remoteHost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.request.local.remoteHost</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serverHost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.request.local.serverHost</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="original-request-information" tabindex="-1">원본 요청 정보 <a class="header-anchor" href="#original-request-information" aria-label="Permalink to &quot;원본 요청 정보 {id=&quot;original-request-information&quot;}&quot;">​</a></h3><p>원본 요청에 대한 정보를 읽으려면 <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.plugins/origin.html" target="_blank" rel="noreferrer">call.request.origin</a> 속성을 사용하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originRemoteHost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.request.origin.remoteHost</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originServerHost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.request.origin.serverHost</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>아래 표는 <code>ForwardedHeaders</code>/<code>XForwardedHeaders</code> 설치 여부에 따라 <code>call.request.origin</code>이 노출하는 다양한 속성의 값을 보여줍니다.</p><p><img src="`+m+'" alt="Request diagram" width="706"></p><table tabindex="0"><thead><tr><th>속성</th><th>ForwardedHeaders 미설치 시</th><th>ForwardedHeaders 설치 시</th></tr></thead><tbody><tr><td><code>origin.localHost</code></td><td><em>웹 서버</em></td><td><em>웹 서버</em></td></tr><tr><td><code>origin.localPort</code></td><td><em>8080</em></td><td><em>8080</em></td></tr><tr><td><code>origin.serverHost</code></td><td><em>웹 서버</em></td><td><em>프록시</em></td></tr><tr><td><code>origin.serverPort</code></td><td><em>8080</em></td><td><em>80</em></td></tr><tr><td><code>origin.remoteHost</code></td><td><em>프록시</em></td><td><em>클라이언트</em></td></tr><tr><td><code>origin.remotePort</code></td><td><em>32864</em></td><td><em>32864</em></td></tr></tbody></table><blockquote><p>전체 예시는 다음에서 찾을 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/forwarded-header" target="_blank" rel="noreferrer">forwarded-header</a>.</p></blockquote><h2 id="configure" tabindex="-1">ForwardedHeaders 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;ForwardedHeaders 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><p>요청이 여러 프록시를 통과하는 경우 <code>ForwardedHeaders</code>/<code>XForwardedHeaders</code>를 구성해야 할 수 있습니다. 이 경우, <code>X-Forwarded-For</code>에는 각 연속적인 프록시의 모든 IP 주소가 포함됩니다. 예를 들어:</p><div class="language-HTTP vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTTP</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">X-Forwarded-For</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;client&gt;, &lt;proxy1&gt;, &lt;proxy2&gt;</span></span></code></pre></div><p>기본적으로 <code>XForwardedHeader</code>는 <code>X-Forwarded-For</code>의 첫 번째 항목을 <code>call.request.origin.remoteHost</code> 속성에 할당합니다. <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For#selecting_an_ip_address" target="_blank" rel="noreferrer">IP 주소 선택</a>을 위한 사용자 지정 로직을 제공할 수도 있습니다. <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-forwarded-header/io.ktor.server.plugins.forwardedheaders/-x-forwarded-headers-config/index.html" target="_blank" rel="noreferrer">XForwardedHeadersConfig</a>는 이를 위해 다음 API를 노출합니다.</p><ul><li><code>useFirstProxy</code> 및 <code>useLastProxy</code>는 각각 IP 주소 목록에서 첫 번째 또는 마지막 값을 가져오도록 허용합니다.</li><li><code>skipLastProxies</code>는 오른쪽부터 지정된 수의 항목을 건너뛰고 다음 항목을 가져옵니다. 예를 들어, <code>proxiesCount</code> 매개변수가 <code>3</code>과 같으면, 아래 헤더에 대해 <code>origin.remoteHost</code>는 <code>10.0.0.123</code>을 반환합니다.<div class="language-HTTP vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTTP</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">X-Forwarded-For</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10.0.0.123, proxy-1, proxy-2, proxy-3</span></span></code></pre></div></li><li><code>skipKnownProxies</code>는 목록에서 지정된 항목을 제거하고 마지막 항목을 가져옵니다. 예를 들어, 이 함수에 <code>listOf(&quot;proxy-1&quot;, &quot;proxy-3&quot;)</code>을 전달하면, 아래 헤더에 대해 <code>origin.remoteHost</code>는 <code>proxy-2</code>를 반환합니다.<div class="language-HTTP vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTTP</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">X-Forwarded-For</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10.0.0.123, proxy-1, proxy-2, proxy-3</span></span></code></pre></div></li><li><code>extractEdgeProxy</code>는 <code>X-Forward-*</code> 헤더에서 값을 추출하기 위한 사용자 지정 로직을 제공할 수 있도록 허용합니다.</li></ul>',17))])}const X=f(F,[["render",w]]);export{P as __pageData,X as default};
