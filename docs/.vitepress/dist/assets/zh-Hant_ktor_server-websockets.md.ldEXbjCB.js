import{_ as F,C as t,c as b,o as m,G as a,ag as o,j as i,w as n,a as e}from"./chunks/framework.Bksy39di.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/server-websockets.md","filePath":"zh-Hant/ktor/server-websockets.md","lastUpdated":1755457140000}'),v={name:"zh-Hant/ktor/server-websockets.md"};function C(f,s,S,B,w,q){const r=t("TopicTitle"),d=t("show-structure"),E=t("primary-label"),p=t("Links"),c=t("tldr"),g=t("link-summary"),y=t("snippet"),l=t("code-block"),k=t("TabItem"),h=t("Tabs"),u=t("list");return m(),b("div",null,[a(r,{labelRef:"server-plugin",title:"Ktor 伺服器中的 WebSocket"}),a(d,{for:"chapter",depth:"2"}),a(E,{ref:"server-plugin"},null,512),a(c,null,{default:n(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"所需相依性"),e(": "),i("code",null,"io.ktor:ktor-server-websockets")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"程式碼範例"),e(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/server-websockets"}," server-websockets ")],-1)),i("p",null,[i("b",null,[a(p,{href:"/ktor/server-native",summary:"Ktor 支援 Kotlin/Native 並允許您在沒有額外執行時或虛擬機器的情況下執行伺服器。"},{default:n(()=>s[0]||(s[0]=[e("原生伺服器")])),_:1}),s[1]||(s[1]=e(" 支援"))]),s[2]||(s[2]=e(": ✅ "))])]),_:1}),a(g,null,{default:n(()=>s[5]||(s[5]=[e(" WebSocket 外掛程式允許您在伺服器和用戶端之間建立多向通訊會話。 ")])),_:1}),a(y,{id:"websockets-description"},{default:n(()=>s[6]||(s[6]=[i("p",null,"WebSocket 是一種協定，透過單一 TCP 連線在用戶的瀏覽器和伺服器之間提供全雙工通訊會話。它對於建立需要從伺服器即時傳輸資料到伺服器以及從伺服器接收即時資料的應用程式特別有用。",-1),i("p",null,"Ktor 同時支援伺服器端和用戶端的 WebSocket 協定。",-1)])),_:1}),s[19]||(s[19]=o('<p>Ktor 允許您：</p><ul><li>配置基本的 WebSocket 設定，例如訊框大小、ping 週期等。</li><li>處理 WebSocket 會話，用於伺服器和用戶端之間交換訊息。</li><li>新增 WebSocket 擴充功能。例如，您可以使用 <a href="./server-websocket-deflate">Deflate</a> 擴充功能或實作 <a href="./server-websocket-extensions">自訂擴充功能</a>。</li></ul><blockquote><p>若要了解用戶端 WebSocket 支援，請參閱 <a href="./client-websockets">WebSocket 用戶端外掛程式</a>。</p></blockquote><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>對於單向通訊會話，請考慮使用 <a href="./server-server-sent-events">Server-Sent Events (SSE)</a>。SSE 在伺服器需要向用戶端傳送基於事件的更新時特別有用。</p></div><h2 id="add_dependencies" tabindex="-1">新增相依性 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;新增相依性 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p> 若要使用 <code>WebSockets</code>，您需要將 <code>ktor-server-websockets</code> artifact 加入到建置腳本中： </p>',6)),a(h,{group:"languages"},{default:n(()=>[a(k,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-websockets:$ktor_version")'})]),_:1}),a(k,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-websockets:$ktor_version"'})]),_:1}),a(k,{title:"Maven","group-key":"maven"},{default:n(()=>[a(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-websockets-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[20]||(s[20]=i("h2",{id:"install_plugin",tabindex:"-1"},[e("安裝 WebSockets "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "安裝 WebSockets {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[8]||(s[8]=e(" 若要將 ")),s[9]||(s[9]=i("code",null,"WebSockets",-1)),s[10]||(s[10]=e(" 外掛程式")),s[11]||(s[11]=i("a",{href:"#install"},"安裝",-1)),s[12]||(s[12]=e("到應用程式中，請在指定的")),a(p,{href:"/ktor/server-modules",summary:"模組允許您透過分組路由來組織應用程式。"},{default:n(()=>s[7]||(s[7]=[e("模組")])),_:1}),s[13]||(s[13]=e("中將其傳遞給 ")),s[14]||(s[14]=i("code",null,"install",-1)),s[15]||(s[15]=e(" 函式。以下程式碼片段展示如何安裝 ")),s[16]||(s[16]=i("code",null,"WebSockets",-1)),s[17]||(s[17]=e(" ... "))]),a(u,null,{default:n(()=>s[18]||(s[18]=[i("li",null,[e(" ... 在 "),i("code",null,"embeddedServer"),e(" 函式呼叫內部。 ")],-1),i("li",null,[e(" ... 在明確定義的 "),i("code",null,"module"),e(" 內部，它是 "),i("code",null,"Application"),e(" 類別的擴充函式。 ")],-1)])),_:1}),a(h,null,{default:n(()=>[a(k,{title:"embeddedServer"},{default:n(()=>[a(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.websocket.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(WebSockets)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),a(k,{title:"module"},{default:n(()=>[a(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.websocket.*
            // ...
            fun Application.module() {
                install(WebSockets)
                // ...
            }`})]),_:1})]),_:1}),s[21]||(s[21]=o(`<h2 id="configure" tabindex="-1">配置 WebSockets <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置 WebSockets {id=&quot;configure&quot;}&quot;">​</a></h2><p>您可以選擇在 <code>install</code> 區塊內部配置此外掛程式，透過傳遞 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-websockets/io.ktor.server.websocket/-web-sockets/-web-socket-options/index.html" target="_blank" rel="noreferrer">WebSocketOptions</a>：</p><ul><li>使用 <code>pingPeriod</code> 屬性來指定 ping 之間的持續時間。</li><li>使用 <code>timeout</code> 屬性來設定逾時時間，達到該時間後連線將被關閉。</li><li>使用 <code>maxFrameSize</code> 屬性來設定可接收或傳送的最大訊框大小。</li><li>使用 <code>masking</code> 屬性來指定是否啟用遮罩。</li><li>使用 <code>contentConverter</code> 屬性來設定用於序列化/反序列化的轉換器。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebSockets) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pingPeriod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.seconds</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    timeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.seconds</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    maxFrameSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Long.MAX_VALUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    masking </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="handle-sessions" tabindex="-1">處理 WebSocket 會話 <a class="header-anchor" href="#handle-sessions" aria-label="Permalink to &quot;處理 WebSocket 會話 {id=&quot;handle-sessions&quot;}&quot;">​</a></h2><h3 id="api-overview" tabindex="-1">API 概述 <a class="header-anchor" href="#api-overview" aria-label="Permalink to &quot;API 概述 {id=&quot;api-overview&quot;}&quot;">​</a></h3><p>一旦您安裝並配置了 <code>WebSockets</code> 外掛程式，您就可以定義一個端點來處理 WebSocket 會話。若要在伺服器上定義 WebSocket 端點，請在 <a href="./server-routing#define_route">路由</a> 區塊內部呼叫 <code>webSocket</code> 函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    webSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/echo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // Handle a WebSocket session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此範例中，當使用 <a href="./server-configuration-file">預設配置</a> 時，伺服器接受 <code>ws://localhost:8080/echo</code> 的 WebSocket 請求。</p><p>在 <code>webSocket</code> 區塊內部，您定義 WebSocket 會話的處理常式，該處理常式由 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-websockets/io.ktor.server.websocket/-default-web-socket-server-session/index.html" target="_blank" rel="noreferrer">DefaultWebSocketServerSession</a> 類別表示。 以下函式和屬性在此區塊內可用：</p><ul><li>使用 <code>send</code> 函式將文字內容傳送給用戶端。</li><li>使用 <code>incoming</code> 和 <code>outgoing</code> 屬性來存取用於接收和傳送 WebSocket 訊框的頻道。訊框由 <code>Frame</code> 類別表示。</li><li>使用 <code>close</code> 函式傳送帶有指定原因的關閉訊框。</li></ul><p>處理會話時，您可以檢查訊框類型，例如：</p><ul><li><code>Frame.Text</code> 是一個文字訊框。對於此訊框類型，您可以使用 <code>Frame.Text.readText()</code> 讀取其內容。</li><li><code>Frame.Binary</code> 是一個二進位訊框。對於此類型，您可以使用 <code>Frame.Binary.readBytes()</code> 讀取其內容。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>請注意，<code>incoming</code> 頻道不包含控制訊框，例如 ping/pong 或關閉訊框。 若要處理控制訊框並重新組合分段訊框，請使用 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-websockets/io.ktor.server.websocket/web-socket-raw.html" target="_blank" rel="noreferrer">webSocketRaw</a> 函式來處理 WebSocket 會話。</p></div><blockquote><p>若要取得用戶端資訊（例如用戶端的 IP 位址），請使用 <code>call</code> 屬性。了解 <a href="./server-requests#request_information">一般請求資訊</a>。</p></blockquote><p>下面，我們將看看使用此 API 的範例。</p><h3 id="handle-single-session" tabindex="-1">範例：處理單一會話 <a class="header-anchor" href="#handle-single-session" aria-label="Permalink to &quot;範例：處理單一會話 {id=&quot;handle-single-session&quot;}&quot;">​</a></h3><p>下面的範例展示如何建立 <code>echo</code> WebSocket 端點以處理與一個用戶端的會話：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    webSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/echo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Please enter your name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> incoming) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? Frame.Text ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">continue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> receivedText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (receivedText.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bye&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ignoreCase </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CloseReason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CloseReason.Codes.NORMAL, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Client said BYE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Frame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hi, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$receivedText</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如需完整範例，請參閱 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/server-websockets" target="_blank" rel="noreferrer">server-websockets</a>。</p><h3 id="handle-multiple-session" tabindex="-1">範例：處理多個會話 <a class="header-anchor" href="#handle-multiple-session" aria-label="Permalink to &quot;範例：處理多個會話 {id=&quot;handle-multiple-session&quot;}&quot;">​</a></h3><p>為了有效管理多個 WebSocket 會話並處理廣播，您可以利用 Kotlin 的 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-shared-flow/" target="_blank" rel="noreferrer"><code>SharedFlow</code></a>。 這種方法提供了一種可擴展且併發友好的方法，用於管理 WebSocket 通訊。以下是實作此模式的方法：</p><ol><li>定義一個用於廣播訊息的 <code>SharedFlow</code>：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messageResponseFlow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MutableSharedFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MessageResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sharedFlow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messageResponseFlow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asSharedFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><ol start="2"><li>在您的 WebSocket 路由中，實作廣播和訊息處理邏輯：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        webSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/ws&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You are connected to WebSocket!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> job </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                sharedFlow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.message)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            runCatching</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                incoming.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consumeEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Frame.Text) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> receivedText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messageResponse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MessageResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(receivedText)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        messageResponseFlow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(messageResponse)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onFailure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;WebSocket exception: \${exception.localizedMessage}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">also</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                job.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cancel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span></code></pre></div><p><code>runCatching</code> 區塊處理傳入訊息並將它們發射到 <code>SharedFlow</code>，然後廣播給所有收集器。</p><p>透過使用此模式，您可以有效地管理多個 WebSocket 會話，而無需手動追蹤個別連線。這種方法對於具有許多併發 WebSocket 連線的應用程式具有良好的擴展性，並提供一種簡潔、響應式的方式來處理訊息廣播。</p><p>如需完整範例，請參閱 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/server-websockets-sharedflow" target="_blank" rel="noreferrer">server-websockets-sharedflow</a>。</p><h2 id="websocket-api" tabindex="-1">WebSocket API 與 Ktor <a class="header-anchor" href="#websocket-api" aria-label="Permalink to &quot;WebSocket API 與 Ktor {id=&quot;websocket-api&quot;}&quot;">​</a></h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" target="_blank" rel="noreferrer">WebSocket API 中的標準事件</a> 以以下方式對應到 Ktor：</p><ul><li><code>onConnect</code> 發生在區塊的開頭。</li><li><code>onMessage</code> 發生在成功讀取訊息（例如，使用 <code>incoming.receive()</code>）或使用 <code>for(frame in incoming)</code> 進行掛起迭代之後。</li><li><code>onClose</code> 發生在 <code>incoming</code> 頻道關閉時。這將完成掛起迭代，或在嘗試接收訊息時拋出 <code>ClosedReceiveChannelException</code>。</li><li><code>onError</code> 等同於其他例外。</li></ul><p>在 <code>onClose</code> 和 <code>onError</code> 中，<code>closeReason</code> 屬性會被設定。</p><p>在以下範例中，無限迴圈只會在發生例外（無論是 <code>ClosedReceiveChannelException</code> 還是其他例外）時才會退出：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">webSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/echo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;onConnect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> incoming){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Frame.Text).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;onMessage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            received </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            outgoing.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Frame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClosedReceiveChannelException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;onClose \${closeReason.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Throwable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;onError \${closeReason.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,35))])}const _=F(v,[["render",C]]);export{x as __pageData,_ as default};
