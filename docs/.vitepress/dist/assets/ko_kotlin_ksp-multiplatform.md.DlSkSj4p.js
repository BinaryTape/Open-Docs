import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"Kotlin Multiplatform와 KSP","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/ksp-multiplatform.md","filePath":"ko/kotlin/ksp-multiplatform.md","lastUpdated":1754307826000}'),e={name:"ko/kotlin/ksp-multiplatform.md"};function l(p,s,k,h,o,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="kotlin-multiplatform와-ksp" tabindex="-1">Kotlin Multiplatform와 KSP <a class="header-anchor" href="#kotlin-multiplatform와-ksp" aria-label="Permalink to &quot;Kotlin Multiplatform와 KSP&quot;">​</a></h1><p>빠른 시작을 위해, KSP 프로세서를 정의하는 <a href="https://github.com/google/ksp/tree/main/examples/multiplatform" target="_blank" rel="noreferrer">샘플 Kotlin Multiplatform 프로젝트</a>를 참조하세요.</p><p>KSP 1.0.1부터는 멀티플랫폼 프로젝트에 KSP를 적용하는 것이 단일 플랫폼, JVM 프로젝트에 적용하는 것과 유사합니다. 주요 차이점은 의존성(dependencies)에 <code>ksp(...)</code> 설정을 작성하는 대신, 컴파일 전에 어떤 컴파일 타겟이 심볼 처리(symbol processing)를 필요로 하는지 지정하기 위해 <code>add(ksp&lt;Target&gt;)</code> 또는 <code>add(ksp&lt;SourceSet&gt;)</code>를 사용한다는 것입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.devtools.ksp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kspCommonMainMetadata&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:test-processor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kspJvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:test-processor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kspJvmTest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:test-processor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Not doing anything because there&#39;s no test source set for JVM</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // There is no processing for the Linux x64 main source set, because kspLinuxX64 isn&#39;t specified</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // add(&quot;kspLinuxX64Test&quot;, project(&quot;:test-processor&quot;))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="컴파일-및-처리" tabindex="-1">컴파일 및 처리 <a class="header-anchor" href="#컴파일-및-처리" aria-label="Permalink to &quot;컴파일 및 처리&quot;">​</a></h2><p>멀티플랫폼 프로젝트에서는 각 플랫폼에 대해 Kotlin 컴파일이 여러 번(<code>main</code>, <code>test</code> 또는 기타 빌드 플레이버) 발생할 수 있습니다. 심볼 처리 또한 마찬가지입니다. Kotlin 컴파일 태스크가 있고 이에 해당하는 <code>ksp&lt;Target&gt;</code> 또는 <code>ksp&lt;SourceSet&gt;</code> 설정이 지정될 때마다 심볼 처리 태스크가 생성됩니다.</p><p>예를 들어, 위 <code>build.gradle.kts</code>에서는 common/metadata, JVM main, Linux x64 main, Linux x64 test의 4가지 컴파일 태스크와 common/metadata, JVM main, Linux x64 test의 3가지 심볼 처리 태스크가 있습니다.</p><h2 id="ksp-1-0-1-이상에서-ksp-설정-피하기" tabindex="-1">KSP 1.0.1 이상에서 <code>ksp(...)</code> 설정 피하기 <a class="header-anchor" href="#ksp-1-0-1-이상에서-ksp-설정-피하기" aria-label="Permalink to &quot;KSP 1.0.1 이상에서 \`ksp(...)\` 설정 피하기&quot;">​</a></h2><p>KSP 1.0.1 이전에는 하나의 통합된 <code>ksp(...)</code> 설정만 사용할 수 있었습니다. 따라서 프로세서는 모든 컴파일 타겟에 적용되거나 전혀 적용되지 않았습니다. <code>ksp(...)</code> 설정은 메인 소스 세트뿐만 아니라, 기존의 단일 플랫폼 프로젝트에서도 테스트 소스 세트가 존재할 경우에도 적용됩니다. 이는 빌드 시간에 불필요한 오버헤드를 발생시켰습니다.</p><p>KSP 1.0.1부터는 위 예시에서 보여준 것처럼 타겟별 설정이 제공됩니다. 향후에는:</p><ol><li>멀티플랫폼 프로젝트의 경우, <code>ksp(...)</code> 설정은 사용 중단(deprecated)되고 제거될 예정입니다.</li><li>단일 플랫폼 프로젝트의 경우, <code>ksp(...)</code> 설정은 기본 메인 컴파일에만 적용됩니다. <code>test</code>와 같은 다른 타겟은 프로세서를 적용하려면 <code>kspTest(...)</code>를 지정해야 합니다.</li></ol><p>KSP 1.0.1부터는 더 효율적인 동작으로 전환하기 위한 얼리 액세스 플래그(early access flag) <code>-DallowAllTargetConfiguration=false</code>가 제공됩니다. 현재 동작이 성능 문제를 일으키는 경우, 시도해 보세요. 해당 플래그의 기본값은 KSP 2.0에서 <code>true</code>에서 <code>false</code>로 변경될 예정입니다.</p>`,12)]))}const c=i(e,[["render",l]]);export{E as __pageData,c as default};
