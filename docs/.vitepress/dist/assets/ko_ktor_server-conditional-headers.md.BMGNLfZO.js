import{_ as c,C as a,c as E,o as y,G as s,ag as p,j as e,w as n,a as t}from"./chunks/framework.Bksy39di.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-conditional-headers.md","filePath":"ko/ktor/server-conditional-headers.md","lastUpdated":1755457140000}'),m={name:"ko/ktor/server-conditional-headers.md"};function f(v,i,C,_,F,b){const k=a("TopicTitle"),h=a("primary-label"),r=a("Links"),g=a("tldr"),o=a("code-block"),l=a("TabItem"),d=a("Tabs"),u=a("list");return y(),E("div",null,[s(k,{labelRef:"server-plugin",title:"조건부 헤더"}),s(h,{ref:"server-plugin"},null,512),s(g,null,{default:n(()=>[i[3]||(i[3]=e("p",null,[e("b",null,"필수 의존성"),t(": "),e("code",null,"io.ktor:ktor-server-conditional-headers")],-1)),i[4]||(i[4]=e("p",null,[e("b",null,"코드 예시"),t(": "),e("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/conditional-headers"}," conditional-headers ")],-1)),e("p",null,[e("b",null,[s(r,{href:"/ktor/server-native",summary:"Ktor supports Kotlin/Native and allows you to run a server without an additional runtime or virtual machine."},{default:n(()=>i[0]||(i[0]=[t("네이티브 서버")])),_:1}),i[1]||(i[1]=t(" 지원"))]),i[2]||(i[2]=t(": ✅ "))])]),_:1}),i[17]||(i[17]=p('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-conditional-headers/io.ktor.server.plugins.conditionalheaders/-conditional-headers.html" target="_blank" rel="noreferrer">ConditionalHeaders</a> 플러그인은 마지막 요청 이후 콘텐츠 본문이 변경되지 않은 경우 이를 다시 보내는 것을 방지합니다. 이는 다음 헤더를 사용하여 달성됩니다:</p><ul><li><code>Last-Modified</code> 응답 헤더는 리소스 수정 시간을 포함합니다. 예를 들어, 클라이언트 요청에 <code>If-Modified-Since</code> 값이 포함된 경우, Ktor는 지정된 날짜 이후에 리소스가 수정된 경우에만 전체 응답을 보냅니다. <a href="./server-static-content">정적 파일</a>의 경우, Ktor는 <code>ConditionalHeaders</code>를 <a href="#install_plugin">설치</a>한 후 <code>Last-Modified</code> 헤더를 자동으로 추가합니다.</li><li><code>Etag</code> 응답 헤더는 특정 리소스 버전의 식별자입니다. 예를 들어, 클라이언트 요청에 <code>If-None-Match</code> 값이 포함된 경우, 이 값이 <code>Etag</code>와 일치하면 Ktor는 전체 응답을 보내지 않습니다. <code>ConditionalHeaders</code>를 <a href="#configure">구성</a>할 때 <code>Etag</code> 값을 지정할 수 있습니다.</li></ul><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>ConditionalHeaders</code>을(를) 사용하려면 빌드 스크립트에 <code>ktor-server-conditional-headers</code> 아티팩트를 포함해야 합니다: </p>',4)),s(d,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(o,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-conditional-headers:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(o,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-conditional-headers:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(o,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-conditional-headers-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),i[18]||(i[18]=e("h2",{id:"install_plugin",tabindex:"-1"},[t("ConditionalHeaders 설치 "),e("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "ConditionalHeaders 설치 {id="install_plugin"}"'},"​")],-1)),e("p",null,[i[6]||(i[6]=t(" 애플리케이션에 ")),i[7]||(i[7]=e("code",null,"ConditionalHeaders",-1)),i[8]||(i[8]=t(" 플러그인을 ")),i[9]||(i[9]=e("a",{href:"#install"},"설치",-1)),i[10]||(i[10]=t("하려면, 지정된 ")),s(r,{href:"/ktor/server-modules",summary:"Modules allow you to structure your application by grouping routes."},{default:n(()=>i[5]||(i[5]=[t("모듈")])),_:1}),i[11]||(i[11]=t("에서 ")),i[12]||(i[12]=e("code",null,"install",-1)),i[13]||(i[13]=t(" 함수에 전달하세요. 아래 코드 스니펫은 ")),i[14]||(i[14]=e("code",null,"ConditionalHeaders",-1)),i[15]||(i[15]=t("을(를) 설치하는 방법을 보여줍니다... "))]),s(u,null,{default:n(()=>i[16]||(i[16]=[e("li",null,[t(" ... "),e("code",null,"embeddedServer"),t(" 함수 호출 내에서. ")],-1),e("li",null,[t(" ... "),e("code",null,"Application"),t(" 클래스의 확장 함수인 명시적으로 정의된 "),e("code",null,"module"),t(" 내에서. ")],-1)])),_:1}),s(d,null,{default:n(()=>[s(l,{title:"embeddedServer"},{default:n(()=>[s(o,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.conditionalheaders.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(ConditionalHeaders)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),s(l,{title:"module"},{default:n(()=>[s(o,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.conditionalheaders.*
            // ...
            fun Application.module() {
                install(ConditionalHeaders)
                // ...
            }`})]),_:1})]),_:1}),i[19]||(i[19]=p(`<p><code>ConditionalHeaders</code> 플러그인은 특정 <a href="#install-route">경로에 설치</a>될 수도 있습니다. 이는 다양한 애플리케이션 리소스에 대해 다른 <code>ConditionalHeaders</code> 구성을 필요로 할 때 유용할 수 있습니다. </p><h2 id="configure" tabindex="-1">헤더 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;헤더 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><p><code>ConditionalHeaders</code>을(를) 구성하려면 <code>install</code> 블록 내에서 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-conditional-headers/io.ktor.server.plugins.conditionalheaders/-conditional-headers-config/version.html" target="_blank" rel="noreferrer">version</a> 함수를 호출해야 합니다. 이 함수는 주어진 <code>ApplicationCall</code>과 <code>OutgoingContent</code>에 대한 리소스 버전 목록에 접근할 수 있도록 합니다. <a href="https://api.ktor.io/ktor-http/io.ktor.http.content/-entity-tag-version/index.html" target="_blank" rel="noreferrer">EntityTagVersion</a>과 <a href="https://api.ktor.io/ktor-http/io.ktor.http.content/-last-modified-version/index.html" target="_blank" rel="noreferrer">LastModifiedVersion</a> 클래스 객체를 사용하여 필요한 버전을 지정할 수 있습니다.</p><p>아래 코드 스니펫은 CSS에 대해 <code>Etag</code> 및 <code>Last-Modified</code> 헤더를 추가하는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ConditionalHeaders) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/main/kotlin/com/example/Application.kt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, outgoingContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (outgoingContent.contentType?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withoutParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ContentType.Text.CSS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                EntityTagVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lastModified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hashCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                LastModifiedVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lastModified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>전체 예시는 다음에서 찾을 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/conditional-headers" target="_blank" rel="noreferrer">conditional-headers</a>.</p>`,6))])}const A=c(m,[["render",f]]);export{S as __pageData,A as default};
