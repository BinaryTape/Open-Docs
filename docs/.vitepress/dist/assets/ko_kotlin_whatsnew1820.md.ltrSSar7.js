import{_ as r}from"./chunks/default-hierarchy-example.DgJqkpuk.js";import{_ as o,a as d}from"./chunks/comparison-of-full-and-precise-backups.BbJYXOYw.js";import{_ as E,C as p,c,o as g,ag as e,G as l,j as s,w as t,a as i}from"./chunks/framework.Bksy39di.js";const K=JSON.parse('{"title":"Kotlin 1.8.20의 새로운 기능","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/whatsnew1820.md","filePath":"ko/kotlin/whatsnew1820.md","lastUpdated":1754307826000}'),y={name:"ko/kotlin/whatsnew1820.md"};function u(F,a,b,m,C,f){const k=p("YouTubeVideo"),n=p("tab"),h=p("tabs");return g(),c("div",null,[a[13]||(a[13]=e('<h1 id="kotlin-1-8-20의-새로운-기능" tabindex="-1">Kotlin 1.8.20의 새로운 기능 <a class="header-anchor" href="#kotlin-1-8-20의-새로운-기능" aria-label="Permalink to &quot;Kotlin 1.8.20의 새로운 기능&quot;">​</a></h1><p><em><a href="/ko/kotlin/releases#release-details">출시일: 2023년 4월 25일</a></em></p><p>Kotlin 1.8.20 릴리스가 공개되었으며, 다음은 주요 하이라이트입니다.</p><ul><li><a href="#new-kotlin-k2-compiler-updates">새로운 Kotlin K2 컴파일러 업데이트</a></li><li><a href="#new-kotlin-wasm-target">새로운 실험적 Kotlin/Wasm 타겟</a></li><li><a href="#new-jvm-incremental-compilation-by-default-in-gradle">Gradle에서 기본적으로 새로운 JVM 증분 컴파일</a></li><li><a href="#update-for-kotlin-native-targets">Kotlin/Native 타겟 업데이트</a></li><li><a href="#preview-of-gradle-composite-builds-support-in-kotlin-multiplatform">Kotlin Multiplatform에서 Gradle 컴포짓 빌드 지원 미리 보기</a></li><li><a href="#improved-output-for-gradle-errors-in-xcode">Xcode에서 Gradle 오류 출력 개선</a></li><li><a href="#support-for-the-autocloseable-interface">표준 라이브러리에서 <code>AutoCloseable</code> 인터페이스에 대한 실험적 지원</a></li><li><a href="#support-for-base64-encoding">표준 라이브러리에서 Base64 인코딩에 대한 실험적 지원</a></li></ul><p>이 비디오에서 변경 사항에 대한 간략한 개요를 확인할 수도 있습니다.</p>',5)),l(k,{src:"https://www.youtube.com/v/R1JpkpPzyBU",title:"What's new in Kotlin 1.8.20"}),a[14]||(a[14]=e(`<h2 id="ide-지원" tabindex="-1">IDE 지원 <a class="header-anchor" href="#ide-지원" aria-label="Permalink to &quot;IDE 지원&quot;">​</a></h2><p>1.8.20을 지원하는 Kotlin 플러그인은 다음 IDE에서 사용할 수 있습니다.</p><table tabindex="0"><thead><tr><th>IDE</th><th>지원 버전</th></tr></thead><tbody><tr><td>IntelliJ IDEA</td><td>2022.2.x, 2022.3.x, 2023.1.x</td></tr><tr><td>Android Studio</td><td>Flamingo (222)</td></tr></tbody></table><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin 아티팩트와 의존성을 올바르게 다운로드하려면 <a href="#configure-gradle-settings">Gradle 설정을 구성</a>하여 Maven Central 저장소를 사용하도록 해야 합니다.</p></div><h2 id="새로운-kotlin-k2-컴파일러-업데이트" tabindex="-1">새로운 Kotlin K2 컴파일러 업데이트 <a class="header-anchor" href="#새로운-kotlin-k2-컴파일러-업데이트" aria-label="Permalink to &quot;새로운 Kotlin K2 컴파일러 업데이트&quot;">​</a></h2><p>Kotlin 팀은 K2 컴파일러의 안정화 작업을 계속하고 있습니다. <a href="/ko/kotlin/whatsnew17#new-kotlin-k2-compiler-for-the-jvm-in-alpha">Kotlin 1.7.0 발표</a>에서 언급했듯이, 여전히 <strong>알파(Alpha)</strong> 상태입니다. 이번 릴리스에서는 <a href="https://youtrack.jetbrains.com/issue/KT-52604" target="_blank" rel="noreferrer">K2 베타(Beta)</a>로 가는 길에 추가 개선 사항을 도입합니다.</p><p>1.8.20 릴리스부터 Kotlin K2 컴파일러는 다음 기능을 포함합니다.</p><ul><li>직렬화(serialization) 플러그인의 프리뷰 버전이 있습니다.</li><li><a href="/ko/kotlin/js-ir-compiler">JS IR 컴파일러</a>에 대한 알파(Alpha) 지원을 제공합니다.</li><li>향후 릴리스될 <a href="https://blog.jetbrains.com/kotlin/2023/02/k2-kotlin-2-0/" target="_blank" rel="noreferrer">새로운 언어 버전인 Kotlin 2.0</a>을 소개합니다.</li></ul><p>다음 비디오에서 새로운 컴파일러와 그 이점에 대해 자세히 알아보세요.</p><ul><li><a href="https://www.youtube.com/watch?v=iTdJJq_LyoY" target="_blank" rel="noreferrer">모두가 새로운 Kotlin K2 컴파일러에 대해 알아야 할 것</a></li><li><a href="https://www.youtube.com/watch?v=db19VFLZqJM" target="_blank" rel="noreferrer">새로운 Kotlin K2 컴파일러: 전문가 리뷰</a></li></ul><h3 id="kotlin-k2-컴파일러-활성화-방법" tabindex="-1">Kotlin K2 컴파일러 활성화 방법 <a class="header-anchor" href="#kotlin-k2-컴파일러-활성화-방법" aria-label="Permalink to &quot;Kotlin K2 컴파일러 활성화 방법&quot;">​</a></h3><p>Kotlin K2 컴파일러를 활성화하고 테스트하려면 다음 컴파일러 옵션과 함께 새 언어 버전을 사용하세요.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-language-version</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span></span></code></pre></div><p><code>build.gradle(.kts)</code> 파일에서 지정할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       languageSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           languageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이전의 <code>-Xuse-k2</code> 컴파일러 옵션은 더 이상 사용되지 않습니다.</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>새로운 K2 컴파일러의 알파 버전은 JVM 및 JS IR 프로젝트에서만 작동합니다. Kotlin/Native 또는 다른 멀티플랫폼 프로젝트는 아직 지원하지 않습니다.</p></div><h3 id="새로운-k2-컴파일러에-대한-피드백-남기기" tabindex="-1">새로운 K2 컴파일러에 대한 피드백 남기기 <a class="header-anchor" href="#새로운-k2-컴파일러에-대한-피드백-남기기" aria-label="Permalink to &quot;새로운 K2 컴파일러에 대한 피드백 남기기&quot;">​</a></h3><p>피드백을 보내주시면 감사하겠습니다!</p><ul><li>Kotlin Slack의 K2 개발자에게 직접 피드백을 제공하세요 – <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*ju6cbn*_ga*MTA3MTk5NDkzMC4xNjQ2MDY3MDU4*_ga_9J976DJZ68*MTY1ODMzNzA3OS4xMDAuMS4xNjU4MzQwODEwLjYw" target="_blank" rel="noreferrer">초대 받기</a> 및 <a href="https://kotlinlang.slack.com/archives/C03PK0PE257" target="_blank" rel="noreferrer">#k2-early-adopters</a> 채널에 참여하세요.</li><li>새로운 K2 컴파일러를 사용하면서 발생한 모든 문제는 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">이슈 트래커</a>에 보고해 주세요.</li><li>JetBrains가 K2 사용에 대한 익명 데이터를 수집할 수 있도록 <a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer"><strong>사용 통계 보내기</strong> 옵션</a>을 활성화하세요.</li></ul><h2 id="언어" tabindex="-1">언어 <a class="header-anchor" href="#언어" aria-label="Permalink to &quot;언어&quot;">​</a></h2><p>Kotlin이 계속 발전함에 따라, 1.8.20에서는 새로운 언어 기능의 프리뷰 버전을 소개합니다.</p><ul><li><a href="#a-modern-and-performant-replacement-of-the-enum-class-values-function">Enum 클래스 <code>values</code> 함수의 현대적이고 고성능 대체</a></li><li><a href="#preview-of-data-objects-for-symmetry-with-data-classes">데이터 클래스와의 대칭성을 위한 데이터 객체</a></li><li><a href="#preview-of-lifting-restriction-on-secondary-constructors-with-bodies-in-inline-classes">인라인 클래스에서 본문(body)이 있는 보조 생성자에 대한 제한 해제 미리 보기</a></li></ul><h3 id="enum-클래스-values-함수의-현대적이고-고성능-대체" tabindex="-1">Enum 클래스 <code>values</code> 함수의 현대적이고 고성능 대체 <a class="header-anchor" href="#enum-클래스-values-함수의-현대적이고-고성능-대체" aria-label="Permalink to &quot;Enum 클래스 \`values\` 함수의 현대적이고 고성능 대체&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>이 기능은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. 언제든지 삭제되거나 변경될 수 있습니다. 옵트인(opt-in)이 필요합니다(아래 세부 정보 참조). 평가 목적으로만 사용하세요. <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>을 통해 피드백을 주시면 감사하겠습니다.</p></div><p>Enum 클래스에는 정의된 enum 상수의 배열을 반환하는 합성(synthetic) <code>values()</code> 함수가 있습니다. 그러나 배열을 사용하면 Kotlin 및 Java에서 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/enum-entries.md#examples-of-performance-issues" target="_blank" rel="noreferrer">숨겨진 성능 문제</a>가 발생할 수 있습니다. 또한 대부분의 API는 컬렉션을 사용하므로 결국 변환이 필요합니다. 이러한 문제를 해결하기 위해 <code>values()</code> 함수 대신 사용해야 하는 Enum 클래스용 <code>entries</code> 속성을 도입했습니다. <code>entries</code> 속성을 호출하면 미리 할당된 불변(immutable) enum 상수 목록을 반환합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>values()</code> 함수는 여전히 지원되지만, 대신 <code>entries</code> 속성을 사용하는 것을 권장합니다.</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    RED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF0000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ORANGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Orange&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF7F00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    YELLOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Yellow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FFFF00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findByRgb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Color.entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.rgb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb }</span></span></code></pre></div><h4 id="entries-속성을-활성화하는-방법" tabindex="-1"><code>entries</code> 속성을 활성화하는 방법 <a class="header-anchor" href="#entries-속성을-활성화하는-방법" aria-label="Permalink to &quot;\`entries\` 속성을 활성화하는 방법&quot;">​</a></h4><p>이 기능을 사용해 보려면 <code>@OptIn(ExperimentalStdlibApi)</code>로 옵트인하고 <code>-language-version 1.9</code> 컴파일러 옵션을 활성화하세요. Gradle 프로젝트에서는 <code>build.gradle(.kts)</code> 파일에 다음을 추가하여 활성화할 수 있습니다.</p>`,30)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[0]||(a[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[1]||(a[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[15]||(a[15]=e(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>IntelliJ IDEA 2023.1부터는 이 기능을 옵트인한 경우, 적절한 IDE 검사가 <code>values()</code>에서 <code>entries</code>로의 변환을 알리고 빠른 수정(quick-fix)을 제공합니다.</p></div><p>제안에 대한 자세한 내용은 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/enum-entries.md" target="_blank" rel="noreferrer">KEEP 노트</a>를 참조하세요.</p><h3 id="데이터-클래스와의-대칭성을-위한-데이터-객체-미리-보기" tabindex="-1">데이터 클래스와의 대칭성을 위한 데이터 객체 미리 보기 <a class="header-anchor" href="#데이터-클래스와의-대칭성을-위한-데이터-객체-미리-보기" aria-label="Permalink to &quot;데이터 클래스와의 대칭성을 위한 데이터 객체 미리 보기&quot;">​</a></h3><p>데이터 객체를 사용하면 싱글턴(singleton) 의미 체계와 깔끔한 <code>toString()</code> 표현을 가진 객체를 선언할 수 있습니다. 다음 코드 조각에서 <code>data</code> 키워드를 객체 선언에 추가하면 <code>toString()</code> 출력의 가독성이 어떻게 향상되는지 확인할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyDataObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// org.example.MyObject@1f32e575</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyDataObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyDataObject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>특히 <code>sealed</code> 계층(예: <code>sealed class</code> 또는 <code>sealed interface</code> 계층)의 경우, <code>data objects</code>는 <code>data class</code> 선언과 함께 편리하게 사용될 수 있기 때문에 매우 적합합니다. 이 코드 조각에서 <code>EndOfFile</code>을 일반 <code>object</code> 대신 <code>data object</code>로 선언하면 수동으로 오버라이드할 필요 없이 깔끔한 <code>toString</code>을 얻을 수 있습니다. 이는 동반하는 데이터 클래스 정의와의 대칭성을 유지합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EndOfFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number(number=7)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EndOfFile) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EndOfFile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="데이터-객체의-의미-체계" tabindex="-1">데이터 객체의 의미 체계 <a class="header-anchor" href="#데이터-객체의-의미-체계" aria-label="Permalink to &quot;데이터 객체의 의미 체계&quot;">​</a></h4><p><a href="/ko/kotlin/whatsnew1720#improved-string-representations-for-singletons-and-sealed-class-hierarchies-with-data-objects">Kotlin 1.7.20</a>의 첫 번째 프리뷰 버전 이후, 데이터 객체의 의미 체계가 개선되었습니다. 컴파일러는 이제 자동으로 다음과 같은 편리한 함수들을 생성합니다.</p><h5 id="tostring" tabindex="-1">toString <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;toString&quot;">​</a></h5><p>데이터 객체의 <code>toString()</code> 함수는 객체의 간단한 이름을 반환합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyDataObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyDataObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyDataObject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="equals-및-hashcode" tabindex="-1">equals 및 hashCode <a class="header-anchor" href="#equals-및-hashcode" aria-label="Permalink to &quot;equals 및 hashCode&quot;">​</a></h5><p><code>data object</code>의 <code>equals()</code> 함수는 <code>data object</code> 타입을 가진 모든 객체가 동일하다고 간주되도록 보장합니다. 대부분의 경우, 런타임에는 데이터 객체의 단일 인스턴스만 존재할 것입니다(결국 <code>data object</code>는 싱글턴을 선언합니다). 그러나 동일한 타입의 다른 객체가 런타임에 생성되는 예외적인 경우(예: <code>java.lang.reflect</code>를 통한 플랫폼 리플렉션, 또는 이 API를 내부적으로 사용하는 JVM 직렬화 라이브러리를 통해)에는 객체가 동일하게 처리되도록 보장합니다.</p><p><code>data object</code>는 구조적으로(<code>==</code> 연산자를 사용하여)만 비교하고, 참조적으로(<code>===</code> 연산자)는 절대 비교하지 마세요. 이는 런타임에 데이터 객체의 인스턴스가 두 개 이상 존재할 때 발생할 수 있는 함정을 피하는 데 도움이 됩니다. 다음 코드 조각은 이 특정 예외적인 경우를 보여줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.lang.reflect.Constructor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySingleton</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> evilTwin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createInstanceViaReflection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MySingleton) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MySingleton</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(evilTwin) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MySingleton</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 라이브러리가 MySingleton의 두 번째 인스턴스를 강제로 생성하더라도, \`equals\` 메서드는 true를 반환합니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MySingleton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> evilTwin) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // data object를 === 로 비교하지 마세요.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MySingleton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> evilTwin) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createInstanceViaReflection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MySingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Kotlin 리플렉션은 data object의 인스턴스화를 허용하지 않습니다.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 이것은 &quot;강제로&quot;(즉, Java 플랫폼 리플렉션) 새로운 MySingleton 인스턴스를 생성합니다.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 직접 시도하지 마세요!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (MySingleton.javaClass.declaredConstructors[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { isAccessible </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MySingleton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>생성된 <code>hashCode()</code> 함수의 동작은 <code>equals()</code> 함수의 동작과 일관되므로, <code>data object</code>의 모든 런타임 인스턴스는 동일한 해시 코드를 가집니다.</p><h5 id="데이터-객체에-대한-copy-및-componentn-함수-없음" tabindex="-1">데이터 객체에 대한 <code>copy</code> 및 <code>componentN</code> 함수 없음 <a class="header-anchor" href="#데이터-객체에-대한-copy-및-componentn-함수-없음" aria-label="Permalink to &quot;데이터 객체에 대한 \`copy\` 및 \`componentN\` 함수 없음&quot;">​</a></h5><p><code>data object</code>와 <code>data class</code> 선언은 종종 함께 사용되며 일부 유사점이 있지만, <code>data object</code>에 대해서는 생성되지 않는 함수들이 있습니다.</p><p><code>data object</code> 선언은 싱글턴 객체로 사용되도록 의도되었으므로 <code>copy()</code> 함수는 생성되지 않습니다. 싱글턴 패턴은 클래스의 인스턴스화를 단일 인스턴스로 제한하며, 인스턴스 복사본 생성을 허용하는 것은 해당 제한을 위반할 것입니다.</p><p>또한 <code>data class</code>와 달리 <code>data object</code>에는 데이터 속성이 없습니다. 이러한 객체를 비구조화(destructure)하려는 시도는 의미가 없으므로 <code>componentN()</code> 함수는 생성되지 않습니다.</p><p>이 기능에 대한 여러분의 피드백을 <a href="https://youtrack.jetbrains.com/issue/KT-4107" target="_blank" rel="noreferrer">YouTrack</a>으로 보내주시면 감사하겠습니다.</p><h4 id="데이터-객체-미리-보기를-활성화하는-방법" tabindex="-1">데이터 객체 미리 보기를 활성화하는 방법 <a class="header-anchor" href="#데이터-객체-미리-보기를-활성화하는-방법" aria-label="Permalink to &quot;데이터 객체 미리 보기를 활성화하는 방법&quot;">​</a></h4><p>이 기능을 사용해 보려면 <code>-language-version 1.9</code> 컴파일러 옵션을 활성화하세요. Gradle 프로젝트에서는 <code>build.gradle(.kts)</code> 파일에 다음을 추가하여 활성화할 수 있습니다.</p>`,24)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[2]||(a[2]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[3]||(a[3]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[16]||(a[16]=e(`<h3 id="인라인-클래스에서-본문이-있는-보조-생성자에-대한-제한-해제-미리-보기" tabindex="-1">인라인 클래스에서 본문이 있는 보조 생성자에 대한 제한 해제 미리 보기 <a class="header-anchor" href="#인라인-클래스에서-본문이-있는-보조-생성자에-대한-제한-해제-미리-보기" aria-label="Permalink to &quot;인라인 클래스에서 본문이 있는 보조 생성자에 대한 제한 해제 미리 보기&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>이 기능은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. 언제든지 삭제되거나 변경될 수 있습니다. 옵트인(opt-in)이 필요합니다(아래 세부 정보 참조). 평가 목적으로만 사용하세요. <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>을 통해 피드백을 주시면 감사하겠습니다.</p></div><p>Kotlin 1.8.20은 <a href="/ko/kotlin/inline-classes">인라인 클래스</a>에서 본문(body)이 있는 보조 생성자 사용에 대한 제한을 해제합니다.</p><p>기존 인라인 클래스는 명확한 초기화 의미 체계를 위해 <code>init</code> 블록이나 보조 생성자 없이 공개 주 생성자만 허용했습니다. 결과적으로, 기본 값을 캡슐화하거나 제약이 있는 값을 나타내는 인라인 클래스를 생성하는 것이 불가능했습니다.</p><p>이러한 문제는 Kotlin 1.4.30에서 <code>init</code> 블록에 대한 제한이 해제되면서 해결되었습니다. 이제 한 단계 더 나아가 프리뷰 모드에서 본문이 있는 보조 생성자를 허용합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fullName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Kotlin 1.4.30부터 허용:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fullName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Full name shouldn&#39;t be empty&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Kotlin 1.8.20부터 프리뷰 가능:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $lastName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lastName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Last name shouldn&#39;t be empty&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="본문이-있는-보조-생성자를-활성화하는-방법" tabindex="-1">본문이 있는 보조 생성자를 활성화하는 방법 <a class="header-anchor" href="#본문이-있는-보조-생성자를-활성화하는-방법" aria-label="Permalink to &quot;본문이 있는 보조 생성자를 활성화하는 방법&quot;">​</a></h4><p>이 기능을 사용해 보려면 <code>-language-version 1.9</code> 컴파일러 옵션을 활성화하세요. Gradle 프로젝트에서는 <code>build.gradle(.kts)</code> 파일에 다음을 추가하여 활성화할 수 있습니다.</p>`,8)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[4]||(a[4]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[5]||(a[5]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[17]||(a[17]=e(`<p>이 기능을 사용해 보시고 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>에 모든 보고서를 제출하여 Kotlin 1.9.0에서 이 기능을 기본값으로 만드는 데 도움을 주시기를 권장합니다.</p><p>Kotlin 인라인 클래스의 개발에 대한 자세한 내용은 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/inline-classes.md" target="_blank" rel="noreferrer">이 KEEP</a>을 참조하세요.</p><h2 id="새로운-kotlin-wasm-타겟" tabindex="-1">새로운 Kotlin/Wasm 타겟 <a class="header-anchor" href="#새로운-kotlin-wasm-타겟" aria-label="Permalink to &quot;새로운 Kotlin/Wasm 타겟&quot;">​</a></h2><p>Kotlin/Wasm (Kotlin WebAssembly)은 이번 릴리스에서 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>으로 전환됩니다. Kotlin 팀은 <a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a>가 유망한 기술이라고 생각하며, 이를 통해 Kotlin의 모든 이점을 활용할 수 있는 더 나은 방법을 찾고자 합니다.</p><p>WebAssembly 이진 형식은 자체 가상 머신을 사용하여 실행되므로 플랫폼에 독립적입니다. 거의 모든 최신 브라우저가 이미 WebAssembly 1.0을 지원합니다. WebAssembly를 실행하기 위한 환경을 설정하려면 Kotlin/Wasm 타겟이 사용하는 실험적 가비지 컬렉션 모드를 활성화하기만 하면 됩니다. 자세한 지침은 <a href="#how-to-enable-kotlin-wasm">Kotlin/Wasm 활성화 방법</a>에서 찾을 수 있습니다.</p><p>새로운 Kotlin/Wasm 타겟의 다음과 같은 장점을 강조하고자 합니다.</p><ul><li>Kotlin/Wasm은 LLVM을 사용할 필요가 없으므로 <code>wasm32</code> Kotlin/Native 타겟에 비해 컴파일 속도가 더 빠릅니다.</li><li><a href="https://github.com/WebAssembly/gc" target="_blank" rel="noreferrer">Wasm 가비지 컬렉션</a> 덕분에 <code>wasm32</code> 타겟에 비해 JS와의 상호 운용성 및 브라우저 통합이 더 쉽습니다.</li><li>Wasm은 압축되고 파싱하기 쉬운 바이트코드를 가지고 있어 Kotlin/JS 및 JavaScript에 비해 애플리케이션 시작이 잠재적으로 더 빠릅니다.</li><li>Wasm은 정적 타입 언어이므로 Kotlin/JS 및 JavaScript에 비해 애플리케이션 런타임 성능이 향상됩니다.</li></ul><p>1.8.20 릴리스부터 실험 프로젝트에서 Kotlin/Wasm을 사용할 수 있습니다. Kotlin 표준 라이브러리(<code>stdlib</code>)와 테스트 라이브러리(<code>kotlin.test</code>)를 Kotlin/Wasm용으로 즉시 제공합니다. IDE 지원은 향후 릴리스에서 추가될 예정입니다.</p><p><a href="https://www.youtube.com/watch?v=-pqz9sKXatw" target="_blank" rel="noreferrer">이 YouTube 비디오에서 Kotlin/Wasm에 대해 자세히 알아보세요</a>.</p><h3 id="kotlin-wasm-활성화-방법" tabindex="-1">Kotlin/Wasm 활성화 방법 <a class="header-anchor" href="#kotlin-wasm-활성화-방법" aria-label="Permalink to &quot;Kotlin/Wasm 활성화 방법&quot;">​</a></h3><p>Kotlin/Wasm을 활성화하고 테스트하려면 <code>build.gradle.kts</code> 파일을 업데이트하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.8.20&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="https://github.com/Kotlin/kotlin-wasm-examples" target="_blank" rel="noreferrer">Kotlin/Wasm 예제 GitHub 저장소</a>를 확인하세요.</p></div><p>Kotlin/Wasm 프로젝트를 실행하려면 타겟 환경의 설정을 업데이트해야 합니다.</p>`,14)),l(h,null,{default:t(()=>[l(n,{title:"Chrome"},{default:t(()=>a[6]||(a[6]=[s("ul",null,[s("li",null,[s("p",null,"버전 109의 경우:"),s("p",null,[s("code",null,"--js-flags=--experimental-wasm-gc"),i(" 명령줄 인수를 사용하여 애플리케이션을 실행합니다.")])]),s("li",null,[s("p",null,"버전 110 이상:"),s("ol",null,[s("li",null,[i("브라우저에서 "),s("code",null,"chrome://flags/#enable-webassembly-garbage-collection"),i("으로 이동합니다.")]),s("li",null,[s("strong",null,"WebAssembly Garbage Collection"),i("을 활성화합니다.")]),s("li",null,"브라우저를 다시 시작합니다.")])])],-1)])),_:1}),l(n,{title:"Firefox"},{default:t(()=>a[7]||(a[7]=[s("p",null,"버전 109 이상:",-1),s("ol",null,[s("li",null,[i("브라우저에서 "),s("code",null,"about:config"),i("로 이동합니다.")]),s("li",null,[s("code",null,"javascript.options.wasm_function_references"),i(" 및 "),s("code",null,"javascript.options.wasm_gc"),i(" 옵션을 활성화합니다.")]),s("li",null,"브라우저를 다시 시작합니다.")],-1)])),_:1}),l(n,{title:"Edge"},{default:t(()=>a[8]||(a[8]=[s("p",null,"버전 109 이상:",-1),s("p",null,[s("code",null,"--js-flags=--experimental-wasm-gc"),i(" 명령줄 인수를 사용하여 애플리케이션을 실행합니다.")],-1)])),_:1})]),_:1}),a[18]||(a[18]=e(`<h3 id="kotlin-wasm에-대한-피드백-남기기" tabindex="-1">Kotlin/Wasm에 대한 피드백 남기기 <a class="header-anchor" href="#kotlin-wasm에-대한-피드백-남기기" aria-label="Permalink to &quot;Kotlin/Wasm에 대한 피드백 남기기&quot;">​</a></h3><p>피드백을 보내주시면 감사하겠습니다!</p><ul><li>Kotlin Slack의 개발자에게 직접 피드백을 제공하세요 – <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*ju6cbn*_ga*MTA3MTk5NDkzMC4xNjQ2MDY3MDU4*_ga_9J976DJZ68*MTY1ODMzNzA3OS4xMDAuMS4xNjU4MzQwODEwLjYw" target="_blank" rel="noreferrer">초대 받기</a> 및 <a href="https://kotlinlang.slack.com/archives/CDFP59223" target="_blank" rel="noreferrer">#webassembly</a> 채널에 참여하세요.</li><li>Kotlin/Wasm을 사용하면서 발생한 모든 문제는 <a href="https://youtrack.jetbrains.com/issue/KT-56492" target="_blank" rel="noreferrer">이 YouTrack 이슈</a>에 보고해 주세요.</li></ul><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.8.20은 <a href="#preview-of-java-synthetic-property-references">Java 합성(synthetic) 속성 참조 미리 보기</a> 및 <a href="#support-for-the-jvm-ir-backend-in-kapt-stub-generating-task-by-default">kapt 스텁(stub) 생성 태스크에서 JVM IR 백엔드 기본 지원</a>을 도입합니다.</p><h3 id="java-합성-속성-참조-미리-보기" tabindex="-1">Java 합성 속성 참조 미리 보기 <a class="header-anchor" href="#java-합성-속성-참조-미리-보기" aria-label="Permalink to &quot;Java 합성 속성 참조 미리 보기&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>이 기능은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. 언제든지 삭제되거나 변경될 수 있습니다. 평가 목적으로만 사용하세요. <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>을 통해 피드백을 주시면 감사하겠습니다.</p></div><p>Kotlin 1.8.20은 Java 합성 속성에 대한 참조를 생성하는 기능을 도입합니다. 예를 들어, 다음 Java 코드와 같습니다.</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin은 항상 <code>age</code>가 합성 속성인 <code>person.age</code>를 작성할 수 있도록 허용했습니다. 이제 <code>Person::age</code> 및 <code>person::age</code>에 대한 참조도 생성할 수 있습니다. <code>name</code>에 대해서도 동일하게 작동합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> persons </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sofie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Peter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    persons</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Java 합성 속성 참조 호출:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Person::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Kotlin 속성 구문을 통해 Java getter 호출:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person.name) }</span></span></code></pre></div><h4 id="java-합성-속성-참조를-활성화하는-방법" tabindex="-1">Java 합성 속성 참조를 활성화하는 방법 <a class="header-anchor" href="#java-합성-속성-참조를-활성화하는-방법" aria-label="Permalink to &quot;Java 합성 속성 참조를 활성화하는 방법&quot;">​</a></h4><p>이 기능을 사용해 보려면 <code>-language-version 1.9</code> 컴파일러 옵션을 활성화하세요. Gradle 프로젝트에서는 <code>build.gradle(.kts)</code> 파일에 다음을 추가하여 활성화할 수 있습니다.</p>`,13)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[9]||(a[9]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[10]||(a[10]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[19]||(a[19]=e(`<h3 id="kapt-스텁-생성-태스크에서-jvm-ir-백엔드-기본-지원" tabindex="-1">kapt 스텁 생성 태스크에서 JVM IR 백엔드 기본 지원 <a class="header-anchor" href="#kapt-스텁-생성-태스크에서-jvm-ir-백엔드-기본-지원" aria-label="Permalink to &quot;kapt 스텁 생성 태스크에서 JVM IR 백엔드 기본 지원&quot;">​</a></h3><p>Kotlin 1.7.20에서 우리는 <a href="/ko/kotlin/whatsnew1720#support-for-the-jvm-ir-backend-in-kapt-stub-generating-task">kapt 스텁 생성 태스크에서 JVM IR 백엔드 지원</a>을 도입했습니다. 이번 릴리스부터는 이 지원이 기본적으로 작동합니다. 더 이상 <code>gradle.properties</code>에 <code>kapt.use.jvm.ir=true</code>를 지정하여 활성화할 필요가 없습니다. 이 기능에 대한 여러분의 피드백을 <a href="https://youtrack.jetbrains.com/issue/KT-49682" target="_blank" rel="noreferrer">YouTrack</a>으로 보내주시면 감사하겠습니다.</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.8.20에는 Kotlin/Native 타겟 지원 변경 사항, Objective-C와의 상호 운용성, CocoaPods Gradle 플러그인 개선 사항 등 다양한 업데이트가 포함되어 있습니다.</p><ul><li><a href="#update-for-kotlin-native-targets">Kotlin/Native 타겟 업데이트</a></li><li><a href="#deprecation-of-the-legacy-memory-manager">레거시 메모리 관리자 지원 중단</a></li><li><a href="#support-for-objective-c-headers-with-import-directives"><code>@import</code> 지시어를 사용하는 Objective-C 헤더 지원</a></li><li><a href="#support-for-the-link-only-mode-in-cocoapods-gradle-plugin">Cocoapods Gradle 플러그인에서 링크 전용 모드 지원</a></li><li><a href="#import-objective-c-extensions-as-class-members-in-uikit">UIKit에서 Objective-C 확장을 클래스 멤버로 임포트</a></li><li><a href="#reimplementation-of-compiler-cache-management-in-the-compiler">컴파일러에서 컴파일러 캐시 관리 재구현</a></li><li><a href="#deprecation-of-uselibraries-in-cocoapods-gradle-plugin">Cocoapods Gradle 플러그인에서 <code>useLibraries()</code> 지원 중단</a></li></ul><h3 id="kotlin-native-타겟-업데이트" tabindex="-1">Kotlin/Native 타겟 업데이트 <a class="header-anchor" href="#kotlin-native-타겟-업데이트" aria-label="Permalink to &quot;Kotlin/Native 타겟 업데이트&quot;">​</a></h3><p>Kotlin 팀은 Kotlin/Native에서 지원하는 타겟 목록을 재검토하고, 이를 티어(tier)로 분할하고, Kotlin 1.8.20부터 일부 타겟에 대한 지원을 중단하기로 결정했습니다. 지원 및 지원 중단 예정 타겟의 전체 목록은 <a href="/ko/kotlin/native-target-support">Kotlin/Native 타겟 지원</a> 섹션을 참조하세요.</p><p>다음 타겟은 Kotlin 1.8.20에서 지원 중단 예정이며 1.9.20에서 제거될 예정입니다.</p><ul><li><code>iosArm32</code></li><li><code>watchosX86</code></li><li><code>wasm32</code></li><li><code>mingwX86</code></li><li><code>linuxArm32Hfp</code></li><li><code>linuxMips32</code></li><li><code>linuxMipsel32</code></li></ul><p>나머지 타겟의 경우, 이제 Kotlin/Native 컴파일러에서 타겟이 얼마나 잘 지원되고 테스트되는지에 따라 세 가지 지원 티어가 있습니다. 타겟은 다른 티어로 이동할 수 있습니다. 예를 들어, <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin Multiplatform</a>에 중요하므로 향후 <code>iosArm64</code>에 대한 완전한 지원을 제공하기 위해 최선을 다할 것입니다.</p><p>라이브러리 작성자라면 이러한 타겟 티어가 CI 도구에서 어떤 타겟을 테스트하고 어떤 타겟을 건너뛸지 결정하는 데 도움이 될 수 있습니다. Kotlin 팀은 <a href="/ko/kotlin/coroutines-guide">kotlinx.coroutines</a>와 같은 공식 Kotlin 라이브러리를 개발할 때 동일한 접근 방식을 사용할 것입니다.</p><p>이러한 변경 사항의 이유에 대해 자세히 알아보려면 <a href="https://blog.jetbrains.com/kotlin/2023/02/update-regarding-kotlin-native-targets/" target="_blank" rel="noreferrer">블로그 게시물</a>을 확인하세요.</p><h3 id="레거시-메모리-관리자-지원-중단" tabindex="-1">레거시 메모리 관리자 지원 중단 <a class="header-anchor" href="#레거시-메모리-관리자-지원-중단" aria-label="Permalink to &quot;레거시 메모리 관리자 지원 중단&quot;">​</a></h3><p>1.8.20부터 레거시 메모리 관리자는 더 이상 사용되지 않으며 1.9.20에서 제거될 예정입니다. <a href="/ko/kotlin/native-memory-manager">새로운 메모리 관리자</a>는 1.7.20부터 기본적으로 활성화되었으며, 추가적인 안정성 업데이트 및 성능 개선이 이루어지고 있습니다.</p><p>여전히 레거시 메모리 관리자를 사용하고 있다면, <code>gradle.properties</code>에서 <code>kotlin.native.binary.memoryModel=strict</code> 옵션을 제거하고 <a href="/ko/kotlin/native-migration-guide">마이그레이션 가이드</a>에 따라 필요한 변경 사항을 적용하세요.</p><p>새로운 메모리 관리자는 <code>wasm32</code> 타겟을 지원하지 않습니다. 이 타겟은 <a href="#update-for-kotlin-native-targets">이번 릴리스부터</a> 지원 중단 예정이며 1.9.20에서 제거될 예정입니다.</p><h3 id="import-지시어를-사용하는-objective-c-헤더-지원" tabindex="-1"><code>@import</code> 지시어를 사용하는 Objective-C 헤더 지원 <a class="header-anchor" href="#import-지시어를-사용하는-objective-c-헤더-지원" aria-label="Permalink to &quot;\`@import\` 지시어를 사용하는 Objective-C 헤더 지원&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>이 기능은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. 언제든지 삭제되거나 변경될 수 있습니다. 옵트인(opt-in)이 필요합니다(아래 세부 정보 참조). 평가 목적으로만 사용하세요. <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>을 통해 피드백을 주시면 감사하겠습니다.</p></div><p>Kotlin/Native는 이제 <code>@import</code> 지시어를 사용하는 Objective-C 헤더를 임포트할 수 있습니다. 이 기능은 자동 생성된 Objective-C 헤더를 가진 Swift 라이브러리나 Swift로 작성된 CocoaPods 의존성 클래스를 사용할 때 유용합니다.</p><p>이전에는 cinterop 도구가 <code>-fmodules</code> 옵션에 대한 지원이 부족했기 때문에 <code>@import</code> 지시어를 통해 Objective-C 모듈에 의존하는 헤더를 분석하지 못했습니다.</p><p>Kotlin 1.8.20부터 <code>@import</code>를 사용하여 Objective-C 헤더를 사용할 수 있습니다. 이를 위해 정의 파일에서 <code>compilerOpts</code>로 <code>-fmodules</code> 옵션을 컴파일러에 전달하세요. <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 통합</a>을 사용하는 경우, <code>pod()</code> 함수의 구성 블록에서 cinterop 옵션을 다음과 같이 지정하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        summary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CocoaPods test library&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        homepage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/JetBrains/kotlin&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ios.deploymentTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;13.5&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        pod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PodName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            extraOpts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-compiler-option&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-fmodules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이것은 <a href="https://youtrack.jetbrains.com/issue/KT-39120" target="_blank" rel="noreferrer">매우 기대되었던 기능</a>이며, 향후 릴리스에서 이 기능을 기본값으로 만드는 데 도움이 되도록 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>에 대한 여러분의 피드백을 환영합니다.</p><h3 id="cocoapods-gradle-플러그인에서-링크-전용-모드-지원" tabindex="-1">Cocoapods Gradle 플러그인에서 링크 전용 모드 지원 <a class="header-anchor" href="#cocoapods-gradle-플러그인에서-링크-전용-모드-지원" aria-label="Permalink to &quot;Cocoapods Gradle 플러그인에서 링크 전용 모드 지원&quot;">​</a></h3><p>Kotlin 1.8.20부터 동적 프레임워크와 함께 Pod 의존성을 링크에만 사용하고 cinterop 바인딩을 생성하지 않을 수 있습니다. 이는 cinterop 바인딩이 이미 생성된 경우에 유용할 수 있습니다.</p><p>라이브러리와 앱이라는 두 개의 모듈이 있는 프로젝트를 고려해 보세요. 라이브러리는 Pod에 의존하지만 프레임워크를 생성하지 않고 <code>.klib</code>만 생성합니다. 앱은 라이브러리에 의존하고 동적 프레임워크를 생성합니다. 이 경우, 이 프레임워크를 라이브러리가 의존하는 Pod와 연결해야 하지만, 라이브러리에 대해 cinterop 바인딩이 이미 생성되었으므로 cinterop 바인딩이 필요하지 않습니다.</p><p>이 기능을 활성화하려면 Pod에 대한 의존성을 추가할 때 <code>linkOnly</code> 옵션 또는 빌더 속성을 사용하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    summary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CocoaPods test library&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    homepage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/JetBrains/kotlin&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alamofire&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, linkOnly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;5.7.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>이 옵션을 정적 프레임워크와 함께 사용하면 Pod가 정적 프레임워크 링크에 사용되지 않으므로 Pod 의존성이 완전히 제거됩니다.</p></div><h3 id="uikit에서-objective-c-확장을-클래스-멤버로-임포트" tabindex="-1">UIKit에서 Objective-C 확장을 클래스 멤버로 임포트 <a class="header-anchor" href="#uikit에서-objective-c-확장을-클래스-멤버로-임포트" aria-label="Permalink to &quot;UIKit에서 Objective-C 확장을 클래스 멤버로 임포트&quot;">​</a></h3><p>Xcode 14.1부터 일부 Objective-C 클래스의 메서드가 카테고리 멤버로 이동되었습니다. 이로 인해 다른 Kotlin API가 생성되었고, 이 메서드들은 메서드 대신 Kotlin 확장으로 임포트되었습니다.</p><p>이로 인해 UIKit을 사용하여 메서드를 오버라이드할 때 문제가 발생했을 수 있습니다. 예를 들어, Kotlin에서 <code>UIVIew</code>를 서브클래싱할 때 <code>drawRect()</code> 또는 <code>layoutSubviews()</code> 메서드를 오버라이드하는 것이 불가능해졌습니다.</p><p>1.8.20부터 NSView 및 UIView 클래스와 동일한 헤더에 선언된 카테고리 멤버는 이 클래스들의 멤버로 임포트됩니다. 이는 NSView 및 UIView에서 서브클래싱된 메서드가 다른 메서드와 마찬가지로 쉽게 오버라이드될 수 있음을 의미합니다.</p><p>모든 것이 잘 진행된다면, 모든 Objective-C 클래스에 대해 이 동작을 기본적으로 활성화할 계획입니다.</p><h3 id="컴파일러에서-컴파일러-캐시-관리-재구현" tabindex="-1">컴파일러에서 컴파일러 캐시 관리 재구현 <a class="header-anchor" href="#컴파일러에서-컴파일러-캐시-관리-재구현" aria-label="Permalink to &quot;컴파일러에서 컴파일러 캐시 관리 재구현&quot;">​</a></h3><p>컴파일러 캐시의 발전을 가속화하기 위해 컴파일러 캐시 관리를 Kotlin Gradle 플러그인에서 Kotlin/Native 컴파일러로 이동했습니다. 이는 컴파일 시간 및 컴파일러 캐시 유연성 개선을 포함한 여러 중요한 개선 작업의 장애물을 제거합니다.</p><p>문제가 발생하여 이전 동작으로 돌아가야 하는 경우, <code>kotlin.native.cacheOrchestration=gradle</code> Gradle 속성을 사용하세요.</p><p><a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>에서 이에 대한 피드백을 주시면 감사하겠습니다.</p><h3 id="cocoapods-gradle-플러그인에서-uselibraries-지원-중단" tabindex="-1">Cocoapods Gradle 플러그인에서 <code>useLibraries()</code> 지원 중단 <a class="header-anchor" href="#cocoapods-gradle-플러그인에서-uselibraries-지원-중단" aria-label="Permalink to &quot;Cocoapods Gradle 플러그인에서 \`useLibraries()\` 지원 중단&quot;">​</a></h3><p>Kotlin 1.8.20은 정적 라이브러리용 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 통합</a>에 사용되는 <code>useLibraries()</code> 함수의 지원 중단 주기를 시작합니다.</p><p>우리는 정적 라이브러리를 포함하는 Pod에 대한 의존성을 허용하기 위해 <code>useLibraries()</code> 함수를 도입했습니다. 시간이 지남에 따라 이 경우는 매우 드물어졌습니다. 대부분의 Pod는 소스로 배포되며, Objective-C 프레임워크 또는 XCFramework는 이진 배포에 일반적인 선택입니다.</p><p>이 함수가 인기가 없으며 Kotlin CocoaPods Gradle 플러그인 개발을 복잡하게 만드는 문제를 발생시키므로, 지원을 중단하기로 결정했습니다.</p><p>프레임워크 및 XCFrameworks에 대한 자세한 내용은 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html" target="_blank" rel="noreferrer">최종 네이티브 이진 파일 빌드</a>를 참조하세요.</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>Kotlin 1.8.20은 Kotlin Multiplatform에 대한 다음 업데이트를 통해 개발자 경험을 개선하고자 합니다.</p><ul><li><a href="#new-approach-to-source-set-hierarchy">소스 세트 계층 설정의 새로운 접근 방식</a></li><li><a href="#preview-of-gradle-composite-builds-support-in-kotlin-multiplatform">Kotlin Multiplatform에서 Gradle 컴포짓 빌드 지원 미리 보기</a></li><li><a href="#improved-output-for-gradle-errors-in-xcode">Xcode에서 Gradle 오류 출력 개선</a></li></ul><h3 id="소스-세트-계층-설정의-새로운-접근-방식" tabindex="-1">소스 세트 계층 설정의 새로운 접근 방식 <a class="header-anchor" href="#소스-세트-계층-설정의-새로운-접근-방식" aria-label="Permalink to &quot;소스 세트 계층 설정의 새로운 접근 방식&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>소스 세트 계층에 대한 새로운 접근 방식은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. 향후 Kotlin 릴리스에서 사전 통지 없이 변경될 수 있습니다. 옵트인(opt-in)이 필요합니다(아래 세부 정보 참조). <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>을 통해 피드백을 주시면 감사하겠습니다.</p></div><p>Kotlin 1.8.20은 멀티플랫폼 프로젝트에서 소스 세트 계층을 설정하는 새로운 방법인 기본 타겟 계층을 제공합니다. 이 새로운 접근 방식은 <a href="#why-replace-shortcuts">설계상의 결함</a>이 있는 <code>ios</code>와 같은 타겟 바로가기(shortcut)를 대체하기 위한 것입니다.</p><p>기본 타겟 계층의 아이디어는 간단합니다. 프로젝트가 컴파일되는 모든 타겟을 명시적으로 선언하면 Kotlin Gradle 플러그인이 지정된 타겟을 기반으로 공유 소스 세트를 자동으로 생성합니다.</p><h4 id="프로젝트-설정" tabindex="-1">프로젝트 설정 <a class="header-anchor" href="#프로젝트-설정" aria-label="Permalink to &quot;프로젝트 설정&quot;">​</a></h4><p>간단한 멀티플랫폼 모바일 앱의 다음 예시를 고려해 보세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 기본 타겟 계층 활성화:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targetHierarchy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>기본 타겟 계층을 모든 가능한 타겟과 그 공유 소스 세트에 대한 템플릿으로 생각할 수 있습니다. 코드에서 최종 타겟인 <code>android</code>, <code>iosArm64</code>, <code>iosSimulatorArm64</code>를 선언하면 Kotlin Gradle 플러그인이 템플릿에서 적합한 공유 소스 세트를 찾아 생성해 줍니다. 결과 계층은 다음과 같습니다.</p>`,54)),a[20]||(a[20]=s("p",null,[s("img",{src:r,alt:"기본 타겟 계층 사용 예시",thumbnail:"true",width:"350","thumbnail-same-file":"true"})],-1)),a[21]||(a[21]=e('<p>녹색 소스 세트는 실제로 프로젝트에 생성되어 존재하며, 기본 템플릿의 회색 소스 세트는 무시됩니다. 보시다시피, Kotlin Gradle 플러그인은 예를 들어 <code>watchos</code> 타겟이 프로젝트에 없으므로 <code>watchos</code> 소스 세트를 생성하지 않았습니다.</p><p><code>watchosArm64</code>와 같은 watchOS 타겟을 추가하면 <code>watchos</code> 소스 세트가 생성되고 <code>apple</code>, <code>native</code>, <code>common</code> 소스 세트의 코드가 <code>watchosArm64</code>로도 컴파일됩니다.</p><p>기본 타겟 계층에 대한 완전한 스키마는 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#default-hierarchy-template" target="_blank" rel="noreferrer">문서</a>에서 찾을 수 있습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>이 예시에서 <code>apple</code> 및 <code>native</code> 소스 세트는 <code>iosArm64</code> 및 <code>iosSimulatorArm64</code> 타겟으로만 컴파일됩니다. 따라서 이름에도 불구하고 전체 iOS API에 접근할 수 있습니다. 이는 <code>native</code>와 같은 소스 세트의 경우 직관적이지 않을 수 있습니다. 이 소스 세트에서는 모든 네이티브 타겟에서 사용 가능한 API만 접근할 수 있을 것으로 예상할 수 있기 때문입니다. 이 동작은 향후 변경될 수 있습니다.</p></div>',4)),a[22]||(a[22]=s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"바로가기를-대체하는-이유",tabindex:"-1"},[i("바로가기를 대체하는 이유 "),s("a",{class:"header-anchor",href:"#바로가기를-대체하는-이유","aria-label":'Permalink to "바로가기를 대체하는 이유 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[23]||(a[23]=e('<p>소스 세트 계층을 생성하는 것은 장황하고 오류가 발생하기 쉬우며 초보자에게는 불친절할 수 있습니다. 이전 솔루션은 계층의 일부를 생성하는 <code>ios</code>와 같은 바로가기를 도입하는 것이었습니다. 그러나 바로가기를 사용해 본 결과 큰 설계상의 결함이 있음이 입증되었습니다. 바로가기는 변경하기 어렵습니다.</p><p>예를 들어 <code>ios</code> 바로가기는 <code>iosArm64</code> 및 <code>iosX64</code> 타겟만 생성하는데, 이는 혼란을 줄 수 있고 <code>iosSimulatorArm64</code> 타겟도 필요한 M1 기반 호스트에서 작업할 때 문제를 일으킬 수 있습니다. 그러나 <code>iosSimulatorArm64</code> 타겟을 추가하는 것은 사용자 프로젝트에 매우 혼란스러운 변경이 될 수 있습니다.</p><ul><li><code>iosMain</code> 소스 세트에서 사용되는 모든 의존성은 <code>iosSimulatorArm64</code> 타겟을 지원해야 합니다. 그렇지 않으면 의존성 해결이 실패합니다.</li><li><code>iosMain</code>에서 사용되는 일부 네이티브 API는 새 타겟을 추가할 때 사라질 수 있습니다(물론 <code>iosSimulatorArm64</code>의 경우에는 그럴 가능성이 낮습니다).</li><li>Intel 기반 MacBook에서 작은 토이 프로젝트를 작성하는 경우와 같이, 이 변경 사항이 필요하지 않을 수도 있습니다.</li></ul><p>바로가기가 계층 구성 문제를 해결하지 못한다는 것이 명확해졌고, 그래서 우리는 어느 시점부터 새로운 바로가기 추가를 중단했습니다.</p><p>기본 타겟 계층은 언뜻 바로가기와 비슷하게 보일 수 있지만, 중요한 차이점이 있습니다. <strong>사용자는 타겟 집합을 명시적으로 지정해야 합니다.</strong> 이 집합은 프로젝트가 어떻게 컴파일되고 게시되며 의존성 해결에 어떻게 참여하는지를 정의합니다. 이 집합이 고정되어 있으므로 Kotlin Gradle 플러그인의 기본 구성 변경은 생태계에 훨씬 적은 혼란을 야기해야 하며, 도구 지원 마이그레이션을 제공하는 것이 훨씬 쉬울 것입니다.</p><h4 id="기본-계층을-활성화하는-방법" tabindex="-1">기본 계층을 활성화하는 방법 <a class="header-anchor" href="#기본-계층을-활성화하는-방법" aria-label="Permalink to &quot;기본 계층을 활성화하는 방법&quot;">​</a></h4><p>이 새로운 기능은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. Kotlin Gradle 빌드 스크립트의 경우 <code>@OptIn(ExperimentalKotlinGradlePluginApi::class)</code>로 옵트인해야 합니다.</p><p>자세한 내용은 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#default-hierarchy-template" target="_blank" rel="noreferrer">계층적 프로젝트 구조</a>를 참조하세요.</p><h4 id="피드백-남기기" tabindex="-1">피드백 남기기 <a class="header-anchor" href="#피드백-남기기" aria-label="Permalink to &quot;피드백 남기기&quot;">​</a></h4><p>이는 멀티플랫폼 프로젝트에 대한 중요한 변경 사항입니다. 더 나은 기능을 만들 수 있도록 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">피드백</a>을 주시면 감사하겠습니다.</p><h3 id="kotlin-multiplatform에서-gradle-컴포짓-빌드-지원-미리-보기" tabindex="-1">Kotlin Multiplatform에서 Gradle 컴포짓 빌드 지원 미리 보기 <a class="header-anchor" href="#kotlin-multiplatform에서-gradle-컴포짓-빌드-지원-미리-보기" aria-label="Permalink to &quot;Kotlin Multiplatform에서 Gradle 컴포짓 빌드 지원 미리 보기&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>이 기능은 Kotlin Gradle 플러그인 1.8.20부터 Gradle 빌드에서 지원됩니다. IDE 지원의 경우, IntelliJ IDEA 2023.1 Beta 2 (231.8109.2) 이상 및 모든 Kotlin IDE 플러그인과 함께 Kotlin Gradle 플러그인 1.8.20을 사용하세요.</p></div><p>1.8.20부터 Kotlin Multiplatform은 <a href="https://docs.gradle.org/current/userguide/composite_builds.html" target="_blank" rel="noreferrer">Gradle 컴포짓 빌드</a>를 지원합니다. 컴포짓 빌드를 사용하면 별도의 프로젝트 빌드 또는 동일한 프로젝트의 일부를 단일 빌드에 포함할 수 있습니다.</p><p>일부 기술적인 문제로 인해 Kotlin Multiplatform에서 Gradle 컴포짓 빌드를 사용하는 것은 부분적으로만 지원되었습니다. Kotlin 1.8.20은 더 다양한 프로젝트에서 작동해야 하는 개선된 지원 미리 보기를 포함합니다. 이를 시도하려면 <code>gradle.properties</code>에 다음 옵션을 추가하세요.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.import.enableKgpDependencyResolution=true</span></span></code></pre></div><p>이 옵션은 새로운 임포트 모드의 미리 보기를 활성화합니다. 컴포짓 빌드 지원 외에도, 주요 버그 수정 및 임포트 안정성을 위한 개선 사항이 포함되어 있어 멀티플랫폼 프로젝트에서 더 원활한 임포트 경험을 제공합니다.</p><h4 id="알려진-문제" tabindex="-1">알려진 문제 <a class="header-anchor" href="#알려진-문제" aria-label="Permalink to &quot;알려진 문제&quot;">​</a></h4><p>여전히 안정화가 필요한 미리 보기 버전이며, 그 과정에서 임포트 관련 문제가 발생할 수 있습니다. 다음은 Kotlin 1.8.20 최종 릴리스 전에 해결할 계획인 몇 가지 알려진 문제입니다.</p><ul><li>IntelliJ IDEA 2023.1 EAP용 Kotlin 1.8.20 플러그인은 아직 사용할 수 없습니다. 그럼에도 불구하고, 이 IDE에서 Kotlin Gradle 플러그인 버전을 1.8.20으로 설정하고 컴포짓 빌드를 시도할 수 있습니다.</li><li>프로젝트에 <code>rootProject.name</code>이 지정된 빌드가 포함된 경우, 컴포짓 빌드가 Kotlin 메타데이터를 해결하지 못할 수 있습니다. 해결 방법 및 자세한 내용은 <a href="https://youtrack.jetbrains.com/issue/KT-56536" target="_blank" rel="noreferrer">이 Youtrack 이슈</a>를 참조하세요.</li></ul><p>이를 시도해 보시고 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>에 모든 보고서를 제출하여 Kotlin 1.9.0에서 기본값으로 만드는 데 도움을 주시기를 권장합니다.</p><h3 id="xcode에서-gradle-오류-출력-개선" tabindex="-1">Xcode에서 Gradle 오류 출력 개선 <a class="header-anchor" href="#xcode에서-gradle-오류-출력-개선" aria-label="Permalink to &quot;Xcode에서 Gradle 오류 출력 개선&quot;">​</a></h3><p>Xcode에서 멀티플랫폼 프로젝트를 빌드하는 데 문제가 있었다면 &quot;Command PhaseScriptExecution failed with a nonzero exit code&quot; 오류가 발생했을 수 있습니다. 이 메시지는 Gradle 호출이 실패했음을 알리지만, 문제를 감지하는 데는 그다지 도움이 되지 않습니다.</p><p>Kotlin 1.8.20부터 Xcode는 Kotlin/Native 컴파일러의 출력을 파싱할 수 있습니다. 또한 Gradle 빌드가 실패할 경우, Xcode에서 근본 원인 예외(root cause exception)로 인한 추가 오류 메시지를 볼 수 있습니다. 대부분의 경우, 이는 근본적인 문제를 식별하는 데 도움이 될 것입니다.</p><p><img src="'+o+`" alt="Xcode에서 Gradle 오류 출력 개선" width="700"></p><p>새로운 동작은 Xcode 통합을 위한 표준 Gradle 태스크(예: 멀티플랫폼 프로젝트의 iOS 프레임워크를 Xcode의 iOS 애플리케이션에 연결할 수 있는 <code>embedAndSignAppleFrameworkForXcode</code>)에 대해 기본적으로 활성화됩니다. 또한 <code>kotlin.native.useXcodeMessageStyle</code> Gradle 속성을 사용하여 활성화(또는 비활성화)할 수 있습니다.</p><h2 id="kotlin-javascript" tabindex="-1">Kotlin/JavaScript <a class="header-anchor" href="#kotlin-javascript" aria-label="Permalink to &quot;Kotlin/JavaScript&quot;">​</a></h2><p>Kotlin 1.8.20은 TypeScript 정의를 생성하는 방식을 변경합니다. 또한 디버깅 경험을 개선하기 위해 설계된 변경 사항도 포함됩니다.</p><ul><li><a href="#removal-of-dukat-integration-from-gradle-plugin">Gradle 플러그인에서 Dukat 통합 제거</a></li><li><a href="#kotlin-variable-and-function-names-in-source-maps">소스 맵의 Kotlin 변수 및 함수 이름</a></li><li><a href="#opt-in-for-generation-of-typescript-definition-files">TypeScript 정의 파일 생성에 대한 옵트인</a></li></ul><h3 id="gradle-플러그인에서-dukat-통합-제거" tabindex="-1">Gradle 플러그인에서 Dukat 통합 제거 <a class="header-anchor" href="#gradle-플러그인에서-dukat-통합-제거" aria-label="Permalink to &quot;Gradle 플러그인에서 Dukat 통합 제거&quot;">​</a></h3><p>Kotlin 1.8.20에서 우리는 Kotlin/JavaScript Gradle 플러그인에서 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a> Dukat 통합을 제거했습니다. Dukat 통합은 TypeScript 선언 파일(<code>.d.ts</code>)을 Kotlin 외부 선언으로 자동 변환하는 것을 지원했습니다.</p><p><a href="https://github.com/Kotlin/dukat" target="_blank" rel="noreferrer">Dukat 도구</a>를 대신 사용하여 TypeScript 선언 파일(<code>.d.ts</code>)을 Kotlin 외부 선언으로 계속 변환할 수 있습니다.</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Dukat 도구는 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. 언제든지 삭제되거나 변경될 수 있습니다.</p></div><h3 id="소스-맵의-kotlin-변수-및-함수-이름" tabindex="-1">소스 맵의 Kotlin 변수 및 함수 이름 <a class="header-anchor" href="#소스-맵의-kotlin-변수-및-함수-이름" aria-label="Permalink to &quot;소스 맵의 Kotlin 변수 및 함수 이름&quot;">​</a></h3><p>디버깅을 돕기 위해, 변수 및 함수에 대해 Kotlin 코드에서 선언한 이름을 소스 맵에 추가하는 기능을 도입했습니다. 1.8.20 이전에는 이러한 이름이 소스 맵에서 사용할 수 없었으므로 디버거에서는 항상 생성된 JavaScript의 변수 및 함수 이름을 보았습니다.</p><p><code>build.gradle.kts</code> 파일에서 <code>sourceMapNamesPolicy</code>를 사용하거나 <code>-source-map-names-policy</code> 컴파일러 옵션을 사용하여 추가되는 내용을 구성할 수 있습니다. 아래 표는 가능한 설정을 나열합니다.</p><table tabindex="0"><thead><tr><th>설정</th><th>설명</th><th>예시 출력</th></tr></thead><tbody><tr><td><code>simple-names</code></td><td>변수 이름과 간단한 함수 이름이 추가됩니다. (기본값)</td><td><code>main</code></td></tr><tr><td><code>fully-qualified-names</code></td><td>변수 이름과 완전한 자격의 함수 이름이 추가됩니다.</td><td><code>com.example.kjs.playground.main</code></td></tr><tr><td><code>no</code></td><td>변수 또는 함수 이름이 추가되지 않습니다.</td><td>N/A</td></tr></tbody></table><p><code>build.gradle.kts</code> 파일의 예시 구성은 다음과 같습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Kotlin2JsCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilercompileOptions.sourceMapNamesPolicy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.JsSourceMapNamesPolicy.SOURCE_MAP_NAMES_POLICY_FQ_NAMES) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or SOURCE_MAP_NAMES_POLICY_NO, or SOURCE_MAP_NAMES_POLICY_SIMPLE_NAMES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Chromium 기반 브라우저에서 제공하는 것과 같은 디버깅 도구는 소스 맵에서 원본 Kotlin 이름을 가져와 스택 트레이스의 가독성을 향상시킬 수 있습니다. 즐거운 디버깅 되세요!</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>소스 맵에 변수 및 함수 이름 추가 기능은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. 언제든지 삭제되거나 변경될 수 있습니다.</p></div><h3 id="typescript-정의-파일-생성에-대한-옵트인" tabindex="-1">TypeScript 정의 파일 생성에 대한 옵트인 <a class="header-anchor" href="#typescript-정의-파일-생성에-대한-옵트인" aria-label="Permalink to &quot;TypeScript 정의 파일 생성에 대한 옵트인&quot;">​</a></h3><p>이전에는 실행 파일을 생성하는 프로젝트(<code>binaries.executable()</code>)가 있는 경우, Kotlin/JS IR 컴파일러가 <code>@JsExport</code>로 표시된 모든 최상위 선언을 수집하여 <code>.d.ts</code> 파일에 TypeScript 정의를 자동으로 생성했습니다.</p><p>모든 프로젝트에 유용한 것은 아니므로 Kotlin 1.8.20에서는 이 동작을 변경했습니다. TypeScript 정의를 생성하려면 Gradle 빌드 파일에서 명시적으로 구성해야 합니다. <a href="/ko/kotlin/js-project-setup#execution-environments"><code>js</code> 섹션</a>의 <code>build.gradle.kts.file</code>에 <code>generateTypeScriptDefinitions()</code>를 추가하세요. 예를 들어:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        generateTypeScriptDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>TypeScript 정의(<code>.d.ts</code>) 생성은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. 언제든지 삭제되거나 변경될 수 있습니다.</p></div><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.8.20은 <a href="https://youtrack.jetbrains.com/issue/KT-55751" target="_blank" rel="noreferrer">멀티플랫폼 플러그인의 일부 특수 케이스</a>를 제외하고 Gradle 6.8부터 7.6까지 완벽하게 호환됩니다. 최신 Gradle 릴리스 버전까지도 사용할 수 있지만, 그렇게 할 경우 지원 중단 경고가 발생하거나 일부 새로운 Gradle 기능이 작동하지 않을 수 있다는 점을 유의해야 합니다.</p><p>이번 버전에는 다음과 같은 변경 사항이 있습니다.</p><ul><li><a href="#new-gradle-plugins-versions-alignment">새로운 Gradle 플러그인 버전 정렬</a></li><li><a href="#new-jvm-incremental-compilation-by-default-in-gradle">Gradle에서 기본적으로 새로운 JVM 증분 컴파일</a></li><li><a href="#precise-backup-of-compilation-tasks-outputs">컴파일 태스크 출력의 정밀 백업</a></li><li><a href="#lazy-kotlin-jvm-tasks-creation-for-all-gradle-versions">모든 Gradle 버전에 대한 지연 Kotlin/JVM 태스크 생성</a></li><li><a href="#non-default-location-of-compile-tasks-destinationdirectory">컴파일 태스크의 <code>destinationDirectory</code> 비기본 위치</a></li><li><a href="#ability-to-opt-out-from-reporting-compiler-arguments-to-an-http-statistics-service">HTTP 통계 서비스에 컴파일러 인수를 보고하지 않는 옵트아웃 기능</a></li></ul><h3 id="새로운-gradle-플러그인-버전-정렬" tabindex="-1">새로운 Gradle 플러그인 버전 정렬 <a class="header-anchor" href="#새로운-gradle-플러그인-버전-정렬" aria-label="Permalink to &quot;새로운 Gradle 플러그인 버전 정렬&quot;">​</a></h3><p>Gradle은 함께 작동해야 하는 의존성이 항상 <a href="https://docs.gradle.org/current/userguide/dependency_version_alignment.html#aligning_versions_natively_with_gradle" target="_blank" rel="noreferrer">버전이 정렬되도록</a> 하는 방법을 제공합니다. Kotlin 1.8.20도 이 접근 방식을 채택했습니다. 기본적으로 작동하므로 활성화하기 위해 구성을 변경하거나 업데이트할 필요가 없습니다. 또한 <a href="/ko/kotlin/whatsnew18#resolution-of-kotlin-gradle-plugins-transitive-dependencies">Kotlin Gradle 플러그인의 전이적 의존성 해결을 위한 이 해결 방법</a>에 더 이상 의존할 필요가 없습니다.</p><p><a href="https://youtrack.jetbrains.com/issue/KT-54691" target="_blank" rel="noreferrer">YouTrack</a>에서 이 기능에 대한 여러분의 피드백을 주시면 감사하겠습니다.</p><h3 id="gradle에서-기본적으로-새로운-jvm-증분-컴파일" tabindex="-1">Gradle에서 기본적으로 새로운 JVM 증분 컴파일 <a class="header-anchor" href="#gradle에서-기본적으로-새로운-jvm-증분-컴파일" aria-label="Permalink to &quot;Gradle에서 기본적으로 새로운 JVM 증분 컴파일&quot;">​</a></h3><p><a href="/ko/kotlin/whatsnew17#a-new-approach-to-incremental-compilation">Kotlin 1.7.0부터 사용 가능했던</a> 증분 컴파일에 대한 새로운 접근 방식이 이제 기본적으로 작동합니다. 더 이상 활성화하기 위해 <code>gradle.properties</code>에 <code>kotlin.incremental.useClasspathSnapshot=true</code>를 지정할 필요가 없습니다.</p><p>이에 대한 여러분의 피드백을 주시면 감사하겠습니다. <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack에 이슈를 제기</a>할 수 있습니다.</p><h3 id="컴파일-태스크-출력의-정밀-백업" tabindex="-1">컴파일 태스크 출력의 정밀 백업 <a class="header-anchor" href="#컴파일-태스크-출력의-정밀-백업" aria-label="Permalink to &quot;컴파일 태스크 출력의 정밀 백업&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>컴파일 태스크 출력의 정밀 백업은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. 사용하려면 <code>gradle.properties</code>에 <code>kotlin.compiler.preciseCompilationResultsBackup=true</code>를 추가하세요. <a href="https://kotl.in/issue/experimental-ic-optimizations" target="_blank" rel="noreferrer">YouTrack</a>을 통해 피드백을 주시면 감사하겠습니다.</p></div><p>Kotlin 1.8.20부터 정밀 백업을 활성화할 수 있습니다. 이 기능은 <a href="/ko/kotlin/gradle-compilation-and-caches#incremental-compilation">증분 컴파일</a>에서 Kotlin이 다시 컴파일하는 클래스만 백업합니다. 완전 백업과 정밀 백업 모두 컴파일 오류 후 빌드를 증분적으로 다시 실행하는 데 도움이 됩니다. 정밀 백업은 완전 백업에 비해 빌드 시간을 절약합니다. 완전 백업은 특히 큰 프로젝트에서 또는 많은 태스크가 백업을 수행할 때, 그리고 프로젝트가 느린 HDD에 있는 경우 <strong>상당한</strong> 빌드 시간을 소요할 수 있습니다.</p><p>이 최적화는 실험적입니다. <code>gradle.properties</code> 파일에 <code>kotlin.compiler.preciseCompilationResultsBackup</code> Gradle 속성을 추가하여 활성화할 수 있습니다.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.compiler.preciseCompilationResultsBackup=true</span></span></code></pre></div>`,60)),a[24]||(a[24]=s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"jetbrains에서-정밀-백업-사용-예시",tabindex:"-1"},[i("JetBrains에서 정밀 백업 사용 예시 "),s("a",{class:"header-anchor",href:"#jetbrains에서-정밀-백업-사용-예시","aria-label":'Permalink to "JetBrains에서 정밀 백업 사용 예시 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[25]||(a[25]=e('<p>다음 차트에서 완전 백업과 비교한 정밀 백업 사용 예시를 확인할 수 있습니다.</p><p><img src="'+d+'" alt="완전 백업과 정밀 백업 비교" width="700"></p><p>첫 번째 및 두 번째 차트는 Kotlin 프로젝트에서 정밀 백업이 Kotlin Gradle 플러그인 빌드에 미치는 영향을 보여줍니다.</p><ol><li>많은 모듈이 의존하는 모듈에 작은 <a href="https://en.wikipedia.org/wiki/Application_binary_interface" target="_blank" rel="noreferrer">ABI</a> 변경(새로운 public 메서드 추가)을 적용한 후.</li><li>다른 모듈이 의존하지 않는 모듈에 작은 비-ABI 변경(private 함수 추가)을 적용한 후.</li></ol><p>세 번째 차트는 많은 모듈이 의존하는 Kotlin/JS 모듈에 작은 비-ABI 변경(private 함수 추가)을 적용한 후 <a href="https://www.jetbrains.com/space/" target="_blank" rel="noreferrer">Space</a> 프로젝트에서 웹 프론트엔드를 빌드하는 데 정밀 백업이 미치는 영향을 보여줍니다.</p><p>이 측정은 Apple M1 Max CPU가 장착된 컴퓨터에서 수행되었으며, 컴퓨터마다 약간 다른 결과가 나올 수 있습니다. 성능에 영향을 미치는 요소는 다음을 포함하되 이에 국한되지 않습니다.</p><ul><li><a href="/ko/kotlin/gradle-compilation-and-caches#the-kotlin-daemon-and-how-to-use-it-with-gradle">Kotlin 데몬</a> 및 <a href="https://docs.gradle.org/current/userguide/gradle_daemon.html" target="_blank" rel="noreferrer">Gradle 데몬</a>의 웜업(warm-up) 정도.</li><li>디스크 속도.</li><li>CPU 모델 및 사용률.</li><li>변경 사항이 영향을 미치는 모듈 및 모듈의 크기.</li><li>변경 사항이 ABI 변경인지 비-ABI 변경인지 여부.</li></ul>',7)),a[26]||(a[26]=s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"빌드-보고서를-통한-최적화-평가",tabindex:"-1"},[i("빌드 보고서를 통한 최적화 평가 "),s("a",{class:"header-anchor",href:"#빌드-보고서를-통한-최적화-평가","aria-label":'Permalink to "빌드 보고서를 통한 최적화 평가 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[27]||(a[27]=e(`<p>프로젝트 및 시나리오에 대한 최적화의 영향을 컴퓨터에서 추정하려면 <a href="/ko/kotlin/gradle-compilation-and-caches#build-reports">Kotlin 빌드 보고서</a>를 사용할 수 있습니다. <code>gradle.properties</code> 파일에 다음 속성을 추가하여 텍스트 파일 형식으로 보고서를 활성화하세요.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.output=file</span></span></code></pre></div><p>정밀 백업 활성화 전 보고서의 관련 부분 예시는 다음과 같습니다.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Task &#39;:kotlin-gradle-plugin:compileCommonKotlin&#39; finished in 0.59 s</span></span>
<span class="line"><span>&lt;...&gt;</span></span>
<span class="line"><span>Time metrics:</span></span>
<span class="line"><span> Total Gradle task time: 0.59 s</span></span>
<span class="line"><span> Task action before worker execution: 0.24 s</span></span>
<span class="line"><span>  Backup output: 0.22 s // 이 숫자에 주목하세요.</span></span>
<span class="line"><span>&lt;...&gt;</span></span></code></pre></div><p>정밀 백업 활성화 후 보고서의 관련 부분 예시는 다음과 같습니다.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Task &#39;:kotlin-gradle-plugin:compileCommonKotlin&#39; finished in 0.46 s</span></span>
<span class="line"><span>&lt;...&gt;</span></span>
<span class="line"><span>Time metrics:</span></span>
<span class="line"><span> Total Gradle task time: 0.46 s</span></span>
<span class="line"><span> Task action before worker execution: 0.07 s</span></span>
<span class="line"><span>  Backup output: 0.05 s // 시간이 줄었습니다.</span></span>
<span class="line"><span> Run compilation in Gradle worker: 0.32 s</span></span>
<span class="line"><span>  Clear jar cache: 0.00 s</span></span>
<span class="line"><span>  Precise backup output: 0.00 s // 정밀 백업과 관련됨</span></span>
<span class="line"><span>  Cleaning up the backup stash: 0.00 s // 정밀 백업과 관련됨</span></span>
<span class="line"><span>&lt;...&gt;</span></span></code></pre></div><h3 id="모든-gradle-버전에-대한-지연-kotlin-jvm-태스크-생성" tabindex="-1">모든 Gradle 버전에 대한 지연 Kotlin/JVM 태스크 생성 <a class="header-anchor" href="#모든-gradle-버전에-대한-지연-kotlin-jvm-태스크-생성" aria-label="Permalink to &quot;모든 Gradle 버전에 대한 지연 Kotlin/JVM 태스크 생성&quot;">​</a></h3><p>Gradle 7.3 이상에서 <code>org.jetbrains.kotlin.gradle.jvm</code> 플러그인을 사용하는 프로젝트의 경우, Kotlin Gradle 플러그인은 더 이상 <code>compileKotlin</code> 태스크를 즉시 생성 및 구성하지 않습니다. 하위 Gradle 버전에서는 단순히 모든 태스크를 등록하고 드라이 런(dry run)에서는 구성하지 않습니다. Gradle 7.3 이상을 사용할 때도 동일한 동작이 적용됩니다.</p><h3 id="컴파일-태스크의-destinationdirectory-비기본-위치" tabindex="-1">컴파일 태스크의 <code>destinationDirectory</code> 비기본 위치 <a class="header-anchor" href="#컴파일-태스크의-destinationdirectory-비기본-위치" aria-label="Permalink to &quot;컴파일 태스크의 \`destinationDirectory\` 비기본 위치&quot;">​</a></h3><p>다음 중 하나를 수행하는 경우 빌드 스크립트를 일부 추가 코드로 업데이트하세요.</p><ul><li>Kotlin/JVM <code>KotlinJvmCompile</code>/<code>KotlinCompile</code> 태스크의 <code>destinationDirectory</code> 위치를 오버라이드합니다.</li><li>지원 중단된 Kotlin/JS/Non-IR <a href="/ko/kotlin/gradle-plugin-variants">변형</a>을 사용하고 <code>Kotlin2JsCompile</code> 태스크의 <code>destinationDirectory</code>를 오버라이드합니다.</li></ul><p>JAR 파일에서 <code>sourceSets.main.outputs</code>에 <code>sourceSets.main.kotlin.classesDirectories</code>를 명시적으로 추가해야 합니다.</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jar(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Jar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    from sourceSets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">outputs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    from sourceSets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classesDirectories</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="http-통계-서비스에-컴파일러-인수를-보고하지-않는-옵트아웃-기능" tabindex="-1">HTTP 통계 서비스에 컴파일러 인수를 보고하지 않는 옵트아웃 기능 <a class="header-anchor" href="#http-통계-서비스에-컴파일러-인수를-보고하지-않는-옵트아웃-기능" aria-label="Permalink to &quot;HTTP 통계 서비스에 컴파일러 인수를 보고하지 않는 옵트아웃 기능&quot;">​</a></h3><p>이제 Kotlin Gradle 플러그인이 HTTP <a href="/ko/kotlin/gradle-compilation-and-caches#build-reports">빌드 보고서</a>에 컴파일러 인수를 포함할지 여부를 제어할 수 있습니다. 때로는 플러그인이 이러한 인수를 보고할 필요가 없을 수도 있습니다. 프로젝트에 모듈이 많으면 보고서의 컴파일러 인수가 매우 커지고 그다지 도움이 되지 않을 수 있습니다. 이제 이를 비활성화하여 메모리를 절약할 수 있는 방법이 있습니다. <code>gradle.properties</code> 또는 <code>local.properties</code>에서 <code>kotlin.build.report.include_compiler_arguments=(true|false)</code> 속성을 사용하세요.</p><p><a href="https://youtrack.jetbrains.com/issue/KT-55323/" target="_blank" rel="noreferrer">YouTrack</a>에서 이 기능에 대한 여러분의 피드백을 주시면 감사하겠습니다.</p><h2 id="표준-라이브러리" tabindex="-1">표준 라이브러리 <a class="header-anchor" href="#표준-라이브러리" aria-label="Permalink to &quot;표준 라이브러리&quot;">​</a></h2><p>Kotlin 1.8.20은 Kotlin/Native 개발에 특히 유용한 몇 가지 새로운 기능을 포함하여 다양한 새로운 기능을 추가합니다.</p><ul><li><a href="#support-for-the-autocloseable-interface"><code>AutoCloseable</code> 인터페이스 지원</a></li><li><a href="#support-for-base64-encoding">Base64 인코딩 및 디코딩 지원</a></li><li><a href="#support-for-volatile-in-kotlin-native">Kotlin/Native에서 <code>@Volatile</code> 지원</a></li><li><a href="#bug-fix-for-stack-overflow-when-using-regex-in-kotlin-native">Kotlin/Native에서 정규식 사용 시 스택 오버플로우 버그 수정</a></li></ul><h3 id="autocloseable-인터페이스-지원" tabindex="-1"><code>AutoCloseable</code> 인터페이스 지원 <a class="header-anchor" href="#autocloseable-인터페이스-지원" aria-label="Permalink to &quot;\`AutoCloseable\` 인터페이스 지원&quot;">​</a></h3><blockquote><p>새로운 <code>AutoCloseable</code> 인터페이스는 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>이며, 사용하려면 <code>@OptIn(ExperimentalStdlibApi::class)</code> 또는 컴파일러 인수 <code>-opt-in=kotlin.ExperimentalStdlibApi</code>로 옵트인해야 합니다.</p></blockquote><p style=""></p><p><code>AutoCloseable</code> 인터페이스가 공통 표준 라이브러리에 추가되어 모든 라이브러리에서 리소스를 닫기 위한 하나의 공통 인터페이스를 사용할 수 있습니다. Kotlin/JVM에서 <code>AutoCloseable</code> 인터페이스는 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html" target="_blank" rel="noreferrer"><code>java.lang.AutoClosable</code></a>의 별칭입니다.</p><p>또한 확장 함수 <code>use()</code>가 이제 포함되어, 선택된 리소스에서 주어진 블록 함수를 실행한 다음 예외 발생 여부와 관계없이 올바르게 닫습니다.</p><p>공통 표준 라이브러리에는 <code>AutoCloseable</code> 인터페이스를 구현하는 public 클래스가 없습니다. 아래 예시에서는 <code>XMLWriter</code> 인터페이스를 정의하고, 이 인터페이스를 구현하는 리소스가 있다고 가정합니다. 예를 들어, 이 리소스는 파일을 열고 XML 콘텐츠를 작성한 다음 닫는 클래스일 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AutoCloseable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> writeBooksTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    writer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { xml </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xml.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bookstore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;category&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fiction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Harry Potter and the Prisoner of Azkaban&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;J. K. Rowling&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1999&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;29.99&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;category&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;programming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin in Action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dmitry Jemerov&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Svetlana Isakova&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2017&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;25.19&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="base64-인코딩-지원" tabindex="-1">Base64 인코딩 지원 <a class="header-anchor" href="#base64-인코딩-지원" aria-label="Permalink to &quot;Base64 인코딩 지원&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>새로운 인코딩 및 디코딩 기능은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>이며, 사용하려면 <code>@OptIn(ExperimentalEncodingApi::class)</code> 또는 컴파일러 인수 <code>-opt-in=kotlin.io.encoding.ExperimentalEncodingApi</code>로 옵트인해야 합니다.</p></div><p>Base64 인코딩 및 디코딩에 대한 지원이 추가되었습니다. 서로 다른 인코딩 스키마를 사용하고 다른 동작을 보여주는 3개의 클래스 인스턴스를 제공합니다. 표준 <a href="https://www.rfc-editor.org/rfc/rfc4648#section-4" target="_blank" rel="noreferrer">Base64 인코딩 스키마</a>에는 <code>Base64.Default</code> 인스턴스를 사용하세요.</p><p><a href="https://www.rfc-editor.org/rfc/rfc4648#section-5" target="_blank" rel="noreferrer">&quot;URL 및 파일 이름 안전&quot;</a> 인코딩 스키마에는 <code>Base64.UrlSafe</code> 인스턴스를 사용하세요.</p><p><a href="https://www.rfc-editor.org/rfc/rfc2045#section-6.8" target="_blank" rel="noreferrer">MIME</a> 인코딩 스키마에는 <code>Base64.Mime</code> 인스턴스를 사용하세요. <code>Base64.Mime</code> 인스턴스를 사용하면 모든 인코딩 함수는 76자마다 줄 구분자를 삽입합니다. 디코딩의 경우, 모든 불법 문자는 건너뛰어지며 예외를 발생시키지 않습니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>Base64.Default</code> 인스턴스는 <code>Base64</code> 클래스의 동반 객체입니다. 결과적으로 <code>Base64.Default.encode()</code> 및 <code>Base64.Default.decode()</code> 대신 <code>Base64.encode()</code> 및 <code>Base64.decode()</code>를 통해 함수를 호출할 수 있습니다.</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.Default.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foBytes) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Zm8=&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 또는:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base64.encode(foBytes)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foobarBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foobarBytes) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Zm9vYmFy&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.Default.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Zm8=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foBytes</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 또는:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base64.decode(&quot;Zm8=&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Zm9vYmFy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foobarBytes</span></span></code></pre></div><p>바이트를 기존 버퍼로 인코딩 또는 디코딩하고, 제공된 <code>Appendable</code> 타입 객체에 인코딩 결과를 추가하는 추가 함수를 사용할 수 있습니다.</p><p>Kotlin/JVM에서는 입력 및 출력 스트림으로 Base64 인코딩 및 디코딩을 수행할 수 있도록 <code>encodingWith()</code> 및 <code>decodingWith()</code> 확장 함수도 추가했습니다.</p><h3 id="kotlin-native에서-volatile-지원" tabindex="-1">Kotlin/Native에서 <code>@Volatile</code> 지원 <a class="header-anchor" href="#kotlin-native에서-volatile-지원" aria-label="Permalink to &quot;Kotlin/Native에서 \`@Volatile\` 지원&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin/Native에서 <code>@Volatile</code>은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. 언제든지 삭제되거나 변경될 수 있습니다. 옵트인(opt-in)이 필요합니다(아래 세부 정보 참조). 평가 목적으로만 사용하세요. <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>을 통해 피드백을 주시면 감사하겠습니다.</p></div><p><code>var</code> 속성에 <code>@Volatile</code>을 어노테이션하면, 백킹 필드가 마킹되어 이 필드에 대한 모든 읽기 또는 쓰기가 원자적이며, 쓰기는 항상 다른 스레드에 가시화됩니다.</p><p>1.8.20 이전에는 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-volatile/" target="_blank" rel="noreferrer"><code>kotlin.jvm.Volatile</code> 어노테이션</a>이 공통 표준 라이브러리에서 사용할 수 있었습니다. 그러나 이 어노테이션은 JVM에서만 유효합니다. Kotlin/Native에서 사용하면 무시되어 오류가 발생할 수 있습니다.</p><p>1.8.20에서는 JVM과 Kotlin/Native 모두에서 사용할 수 있는 공통 어노테이션 <code>kotlin.concurrent.Volatile</code>을 도입했습니다.</p><h4 id="활성화-방법" tabindex="-1">활성화 방법 <a class="header-anchor" href="#활성화-방법" aria-label="Permalink to &quot;활성화 방법&quot;">​</a></h4><p>이 기능을 사용해 보려면 <code>@OptIn(ExperimentalStdlibApi)</code>로 옵트인하고 <code>-language-version 1.9</code> 컴파일러 옵션을 활성화하세요. Gradle 프로젝트에서는 <code>build.gradle(.kts)</code> 파일에 다음을 추가하여 활성화할 수 있습니다.</p>`,42)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[11]||(a[11]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[12]||(a[12]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[28]||(a[28]=e(`<h3 id="kotlin-native에서-정규식-사용-시-스택-오버플로우-버그-수정" tabindex="-1">Kotlin/Native에서 정규식 사용 시 스택 오버플로우 버그 수정 <a class="header-anchor" href="#kotlin-native에서-정규식-사용-시-스택-오버플로우-버그-수정" aria-label="Permalink to &quot;Kotlin/Native에서 정규식 사용 시 스택 오버플로우 버그 수정&quot;">​</a></h3><p>이전 Kotlin 버전에서는 정규식 패턴이 매우 간단하더라도 정규식 입력에 많은 수의 문자가 포함된 경우 충돌이 발생할 수 있었습니다. 1.8.20에서는 이 문제가 해결되었습니다. 자세한 내용은 <a href="https://youtrack.jetbrains.com/issue/KT-46211" target="_blank" rel="noreferrer">KT-46211</a>을 참조하세요.</p><h2 id="직렬화-업데이트" tabindex="-1">직렬화 업데이트 <a class="header-anchor" href="#직렬화-업데이트" aria-label="Permalink to &quot;직렬화 업데이트&quot;">​</a></h2><p>Kotlin 1.8.20은 <a href="#prototype-serialization-compiler-plugin-for-kotlin-k2-compiler">Kotlin K2 컴파일러용 알파(Alpha) 지원</a>과 <a href="#prohibit-implicit-serializer-customization-via-companion-object">동반 객체를 통한 암시적 직렬 변환기 사용자 정의 금지</a>를 제공합니다.</p><h3 id="kotlin-k2-컴파일러용-프로토타입-직렬화-컴파일러-플러그인" tabindex="-1">Kotlin K2 컴파일러용 프로토타입 직렬화 컴파일러 플러그인 <a class="header-anchor" href="#kotlin-k2-컴파일러용-프로토타입-직렬화-컴파일러-플러그인" aria-label="Permalink to &quot;Kotlin K2 컴파일러용 프로토타입 직렬화 컴파일러 플러그인&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>K2용 직렬화 컴파일러 플러그인 지원은 <a href="/ko/kotlin/components-stability#stability-levels-explained">알파(Alpha)</a> 상태입니다. 사용하려면 <a href="#how-to-enable-the-kotlin-k2-compiler">Kotlin K2 컴파일러를 활성화</a>하세요.</p></div><p>1.8.20부터 직렬화 컴파일러 플러그인이 Kotlin K2 컴파일러와 함께 작동합니다. 사용해 보시고 <a href="#leave-your-feedback-on-the-new-k2-compiler">피드백을 공유</a>해 주세요!</p><h3 id="동반-객체를-통한-암시적-직렬-변환기-사용자-정의-금지" tabindex="-1">동반 객체를 통한 암시적 직렬 변환기 사용자 정의 금지 <a class="header-anchor" href="#동반-객체를-통한-암시적-직렬-변환기-사용자-정의-금지" aria-label="Permalink to &quot;동반 객체를 통한 암시적 직렬 변환기 사용자 정의 금지&quot;">​</a></h3><p>현재 <code>@Serializable</code> 어노테이션으로 클래스를 직렬화 가능하게 선언하는 동시에, 동반 객체에 <code>@Serializer</code> 어노테이션으로 사용자 정의 직렬 변환기를 선언하는 것이 가능합니다.</p><p>예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Serializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Foo::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // KSerializer&lt;Foo&gt;의 사용자 정의 구현</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 경우 <code>@Serializable</code> 어노테이션에서 어떤 직렬 변환기가 사용되는지 명확하지 않습니다. 실제로는 <code>Foo</code> 클래스에 사용자 정의 직렬 변환기가 사용됩니다.</p><p>이러한 혼란을 방지하기 위해 Kotlin 1.8.20에서는 이러한 시나리오가 감지될 때 컴파일러 경고를 도입했습니다. 이 경고는 이 문제를 해결하기 위한 가능한 마이그레이션 경로를 포함합니다.</p><p>코드에서 이러한 구문을 사용하는 경우, 다음으로 업데이트하는 것을 권장합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Foo.Companion::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // @Serializer(Foo::class)를 사용하든 안 하든 상관 없음</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // KSerializer&lt;Foo&gt;의 사용자 정의 구현</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 접근 방식을 사용하면 <code>Foo</code> 클래스가 동반 객체에 선언된 사용자 정의 직렬 변환기를 사용하는 것이 명확해집니다. 자세한 내용은 <a href="https://youtrack.jetbrains.com/issue/KT-54441" target="_blank" rel="noreferrer">YouTrack 티켓</a>을 참조하세요.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin 2.0에서는 컴파일 경고를 컴파일러 오류로 승격할 계획입니다. 이 경고가 표시되면 코드를 마이그레이션하는 것을 권장합니다.</p></div><h2 id="문서-업데이트" tabindex="-1">문서 업데이트 <a class="header-anchor" href="#문서-업데이트" aria-label="Permalink to &quot;문서 업데이트&quot;">​</a></h2><p>Kotlin 문서에는 몇 가지 주목할 만한 변경 사항이 있었습니다.</p><ul><li><a href="/ko/kotlin/jvm-get-started-spring-boot">Spring Boot 및 Kotlin 시작하기</a> – 데이터베이스를 사용하여 간단한 애플리케이션을 생성하고 Spring Boot 및 Kotlin 기능에 대해 자세히 알아보세요.</li><li><a href="/ko/kotlin/scope-functions">스코프 함수</a> – 표준 라이브러리의 유용한 스코프 함수로 코드를 단순화하는 방법을 알아보세요.</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 통합</a> – CocoaPods와 함께 작업할 환경을 설정합니다.</li></ul><h2 id="kotlin-1-8-20-설치" tabindex="-1">Kotlin 1.8.20 설치 <a class="header-anchor" href="#kotlin-1-8-20-설치" aria-label="Permalink to &quot;Kotlin 1.8.20 설치&quot;">​</a></h2><h3 id="ide-버전-확인" tabindex="-1">IDE 버전 확인 <a class="header-anchor" href="#ide-버전-확인" aria-label="Permalink to &quot;IDE 버전 확인&quot;">​</a></h3><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2022.2 및 2022.3은 Kotlin 플러그인을 버전 1.8.20으로 자동 업데이트를 제안합니다. IntelliJ IDEA 2023.1에는 Kotlin 플러그인 1.8.20이 내장되어 있습니다.</p><p>Android Studio Flamingo (222) 및 Giraffe (223)는 다음 릴리스에서 Kotlin 1.8.20을 지원할 예정입니다.</p><p>새로운 명령줄 컴파일러는 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.8.20" target="_blank" rel="noreferrer">GitHub 릴리스 페이지</a>에서 다운로드할 수 있습니다.</p><h3 id="gradle-설정-구성" tabindex="-1">Gradle 설정 구성 <a class="header-anchor" href="#gradle-설정-구성" aria-label="Permalink to &quot;Gradle 설정 구성&quot;">​</a></h3><p>Kotlin 아티팩트와 의존성을 올바르게 다운로드하려면 <code>settings.gradle(.kts)</code> 파일을 업데이트하여 Maven Central 저장소를 사용하도록 해야 합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pluginManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        gradlePluginPortal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>저장소가 지정되지 않으면 Gradle은 사용 중단된 JCenter 저장소를 사용하며, 이로 인해 Kotlin 아티팩트 관련 문제가 발생할 수 있습니다.</p>`,29))])}const D=E(y,[["render",u]]);export{K as __pageData,D as default};
