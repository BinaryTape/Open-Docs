import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"@Module을 사용한 모듈","description":"","frontmatter":{"title":"\\\\@Module을 사용한 모듈"},"headers":[],"relativePath":"ko/koin/reference/koin-annotations/modules.md","filePath":"ko/koin/reference/koin-annotations/modules.md","lastUpdated":1748402269000}'),e={name:"ko/koin/reference/koin-annotations/modules.md"};function p(t,s,h,k,d,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="module을-사용한-모듈" tabindex="-1">@Module을 사용한 모듈 <a class="header-anchor" href="#module을-사용한-모듈" aria-label="Permalink to &quot;\\@Module을 사용한 모듈&quot;">​</a></h1><p>정의를 사용할 때, 이를 모듈로 구성하거나 구성하지 않을 수 있습니다. 심지어 모듈을 전혀 사용하지 않고 &quot;기본&quot;으로 생성된 모듈을 사용할 수도 있습니다.</p><h2 id="모듈-없음-생성된-기본-모듈-사용" tabindex="-1">모듈 없음 - 생성된 기본 모듈 사용 <a class="header-anchor" href="#모듈-없음-생성된-기본-모듈-사용" aria-label="Permalink to &quot;모듈 없음 - 생성된 기본 모듈 사용&quot;">​</a></h2><p>어떤 모듈도 지정하고 싶지 않다면, Koin은 모든 정의를 담을 기본 모듈을 제공합니다. <code>defaultModule</code>은 바로 사용할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use Koin Generation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.koin.ksp.generated.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        defaultModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          defaultModule</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>org.koin.ksp.generated.*</code> 임포트를 사용하는 것을 잊지 마세요.</p></div><h2 id="module을-사용한-클래스-모듈" tabindex="-1">@Module을 사용한 클래스 모듈 <a class="header-anchor" href="#module을-사용한-클래스-모듈" aria-label="Permalink to &quot;@Module을 사용한 클래스 모듈&quot;">​</a></h2><p>모듈을 선언하려면, <code>@Module</code> 어노테이션으로 클래스에 태그를 지정하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Module</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModule</span></span></code></pre></div><p>Koin에 모듈을 로드하려면, 모든 <code>@Module</code> 클래스에 대해 생성되는 <code>.module</code> 확장 함수를 사용하세요. <code>MyModule().module</code>과 같이 모듈의 새 인스턴스를 생성하기만 하면 됩니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use Koin Generation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.koin.ksp.generated.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          MyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><code>org.koin.ksp.generated.*</code> 임포트를 사용하는 것을 잊지 마세요.</p></blockquote><h2 id="componentscan을-사용한-컴포넌트-스캔" tabindex="-1">@ComponentScan을 사용한 컴포넌트 스캔 <a class="header-anchor" href="#componentscan을-사용한-컴포넌트-스캔" aria-label="Permalink to &quot;@ComponentScan을 사용한 컴포넌트 스캔&quot;">​</a></h2><p>어노테이션이 지정된 컴포넌트를 스캔하여 모듈로 수집하려면, 모듈에 <code>@ComponentScan</code> 어노테이션을 사용하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Module</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ComponentScan</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModule</span></span></code></pre></div><p>이는 현재 패키지와 하위 패키지에서 어노테이션이 지정된 컴포넌트를 스캔합니다. <code>@ComponentScan(&quot;com.my.package&quot;)</code>와 같이 특정 패키지를 스캔하도록 지정할 수 있습니다.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>@ComponentScan</code> 어노테이션을 사용할 때, KSP는 동일한 패키지에 대해 모든 Gradle 모듈을 가로질러 탐색합니다. (1.4부터)</p></div><h2 id="클래스-모듈-내-정의" tabindex="-1">클래스 모듈 내 정의 <a class="header-anchor" href="#클래스-모듈-내-정의" aria-label="Permalink to &quot;클래스 모듈 내 정의&quot;">​</a></h2><p>클래스 모듈 내에 직접 정의를 하려면, 정의 어노테이션으로 함수에 어노테이션을 지정할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// given </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// class MyComponent(val myDependency : MyDependency)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Module</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  @Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myDependency : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyDependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myDependency)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>@InjectedParam, @Property는 함수 멤버에서도 사용할 수 있습니다.</p></blockquote><h2 id="모듈-포함하기" tabindex="-1">모듈 포함하기 <a class="header-anchor" href="#모듈-포함하기" aria-label="Permalink to &quot;모듈 포함하기&quot;">​</a></h2><p>다른 클래스 모듈을 자신의 모듈에 포함하려면, <code>@Module</code> 어노테이션의 <code>includes</code> 속성을 사용하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Module</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModuleA</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(includes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ModuleA::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModuleB</span></span></code></pre></div><p>이런 식으로 루트 모듈을 실행하기만 하면 됩니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use Koin Generation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.koin.ksp.generated.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // will load ModuleB &amp; ModuleA</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          ModuleB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,26)]))}const g=i(e,[["render",p]]);export{r as __pageData,g as default};
