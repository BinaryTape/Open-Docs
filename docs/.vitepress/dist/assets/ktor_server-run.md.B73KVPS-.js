import{_ as k,C as n,c as g,o as c,j as e,G as s,ag as l,a as i,w as t}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"运行","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-run.md","filePath":"ktor/server-run.md","lastUpdated":1755457140000}'),u={name:"ktor/server-run.md"};function E(v,a,m,y,f,b){const h=n("show-structure"),p=n("link-summary"),r=n("TabItem"),o=n("code-block"),d=n("Tabs");return c(),g("div",null,[a[7]||(a[7]=e("h1",{id:"运行",tabindex:"-1"},[i("运行 "),e("a",{class:"header-anchor",href:"#运行","aria-label":'Permalink to "运行"'},"​")],-1)),s(h,{for:"chapter",depth:"2"}),s(p,null,{default:t(()=>a[0]||(a[0]=[i(" 了解如何运行 Ktor 服务器应用程序。 ")])),_:1}),a[8]||(a[8]=l('<p>运行 Ktor 服务器应用程序时，请考虑以下具体事项：</p><ul><li><a href="./server-create-and-configure">创建服务器</a> 的方式会影响您在运行 <a href="#package">打包的 Ktor 应用程序</a> 时是否可以通过传递命令行实参来覆盖服务器形参。</li><li>使用 <a href="./server-create-and-configure#engine-main">EngineMain</a> 启动服务器时，Gradle/Maven 构建脚本应指定主类名。</li><li>在 <a href="./server-war">servlet 容器</a> 中运行您的应用程序需要特定的 servlet 配置。</li></ul><p>在本主题中，我们将探讨这些配置细节，并向您展示如何在 IntelliJ IDEA 中以及作为打包应用程序运行 Ktor 应用程序。</p><h2 id="specifics" tabindex="-1">配置细节 <a class="header-anchor" href="#specifics" aria-label="Permalink to &quot;配置细节 {id=&quot;specifics&quot;}&quot;">​</a></h2><h3 id="code-vs-config" tabindex="-1">配置：代码与配置文件 <a class="header-anchor" href="#code-vs-config" aria-label="Permalink to &quot;配置：代码与配置文件 {id=&quot;code-vs-config&quot;}&quot;">​</a></h3><p>运行 Ktor 应用程序取决于您用于 <a href="./server-create-and-configure">创建服务器</a> 的方式——<code>embeddedServer</code> 或 <code>EngineMain</code>：</p><ul><li>对于 <code>embeddedServer</code>，服务器形参（例如主机地址和端口）是在代码中配置的，因此在运行应用程序时无法更改这些形参。</li><li>对于 <code>EngineMain</code>，Ktor 从使用 <code>HOCON</code> 或 <code>YAML</code> 格式的外部文件加载其配置。使用这种方法，您可以从命令行运行 <a href="#package">打包的应用程序</a>，并通过传递相应的 <a href="./server-configuration-file#command-line">命令行实参</a> 来覆盖所需的服务器形参。</li></ul><h3 id="gradle-maven" tabindex="-1">启动 EngineMain：Gradle 和 Maven 细节 <a class="header-anchor" href="#gradle-maven" aria-label="Permalink to &quot;启动 EngineMain：Gradle 和 Maven 细节 {id=&quot;gradle-maven&quot;}&quot;">​</a></h3><p>如果您使用 <code>EngineMain</code> 创建服务器，则需要指定 <code>main</code> 函数来启动具有所需 <a href="./server-engines">引擎</a> 的服务器。 下面的 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">示例</a> 演示了用于使用 Netty 引擎运行服务器的 <code>main</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.ktor.server.netty.EngineMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args)</span></span></code></pre></div><p>要在不配置 <code>main</code> 函数中的引擎的情况下使用 Gradle/Maven 运行 Ktor 服务器，您需要在构建脚本中指定主类名，如下所示：</p>',11)),s(r,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>a[1]||(a[1]=[e("div",{class:"language-kotlin vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"kotlin"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"application"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mainClass."),e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"io.ktor.server.netty.EngineMain"'),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(r,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>a[2]||(a[2]=[e("div",{class:"language-groovy vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"groovy"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"mainClassName "),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "io.ktor.server.netty.EngineMain"')])])])],-1)])),_:1}),s(r,{title:"Maven","group-key":"maven"},{default:t(()=>a[3]||(a[3]=[e("div",{class:"language-xml vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"xml"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),e("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"properties"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    <"),e("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"main.class"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">io.ktor.server.netty.EngineMain</"),e("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"main.class"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),i(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"</"),e("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"properties"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")])])])],-1)])),_:1}),a[9]||(a[9]=l('<h3 id="war-细节" tabindex="-1">WAR 细节 <a class="header-anchor" href="#war-细节" aria-label="Permalink to &quot;WAR 细节&quot;">​</a></h3><p>Ktor 允许您直接在应用程序中 <a href="./server-create-and-configure">创建和启动服务器</a>，并使用所需的引擎（例如 Netty、Jetty 或 Tomcat）。在这种情况下，您的应用程序可以控制引擎设置、连接和 SSL 选项。</p><p>与此方法相反，servlet 容器应该控制应用程序生命周期和连接设置。Ktor 提供了一个特殊的 <code>ServletApplicationEngine</code> 引擎，它将应用程序的控制权委托给 servlet 容器。关于如何配置应用程序，请参见 <a href="./server-war#configure-war">配置 War</a>。</p><h2 id="run" tabindex="-1">运行应用程序 <a class="header-anchor" href="#run" aria-label="Permalink to &quot;运行应用程序 {id=&quot;run&quot;}&quot;">​</a></h2><blockquote><p>开发过程中重启服务器可能需要一些时间。Ktor 允许您通过使用 <a href="./server-auto-reload">自动重新加载</a> 来克服此限制，它会在代码更改时重新加载应用程序类并提供快速反馈循环。</p></blockquote><h3 id="gradle-maven-run" tabindex="-1">使用 Gradle/Maven 运行应用程序 <a class="header-anchor" href="#gradle-maven-run" aria-label="Permalink to &quot;使用 Gradle/Maven 运行应用程序 {id=&quot;gradle-maven-run&quot;}&quot;">​</a></h3><p>要使用 Gradle 或 Maven 运行 Ktor 应用程序，请使用相应的插件：</p><ul><li>Gradle 的 <a href="./server-packaging">Application</a> 插件。对于 <a href="./server-native">Native 服务器</a>，请使用 <a href="https://plugins.gradle.org/plugin/org.jetbrains.kotlin.multiplatform" target="_blank" rel="noreferrer">Kotlin Multiplatform</a> 插件。</li><li>Maven 的 <a href="https://www.mojohaus.org/exec-maven-plugin/" target="_blank" rel="noreferrer">Exec</a> 插件。</li></ul><blockquote><p>关于如何在 IntelliJ IDEA 中运行 Ktor 应用程序，请参见 IntelliJ IDEA 文档中的 <a href="https://www.jetbrains.com/help/idea/ktor.html#run_ktor_app" target="_blank" rel="noreferrer">运行 Ktor 应用程序</a> 部分。</p></blockquote><h3 id="package" tabindex="-1">运行打包应用程序 <a class="header-anchor" href="#package" aria-label="Permalink to &quot;运行打包应用程序 {id=&quot;package&quot;}&quot;">​</a></h3><p>在部署应用程序之前，您需要通过 <a href="./server-deployment#packaging">打包</a> 部分中描述的其中一种方式将其打包。 从结果包运行 Ktor 应用程序取决于包类型，并可能如下所示：</p>',11)),e("ul",null,[a[5]||(a[5]=l('<li><p>要运行打包在 Fat JAR 中并覆盖已配置端口的 Ktor 服务器，请执行以下命令：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sample-app.jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -port=8080</span></span></code></pre></div></li>',1)),e("li",null,[a[4]||(a[4]=e("p",null,[i("要运行使用 Gradle "),e("a",{href:"./server-packaging"},"Application"),i(" 插件打包的应用程序，请运行相应的可执行文件：")],-1)),s(d,{group:"os"},{default:t(()=>[s(r,{title:"Linux/macOS","group-key":"unix"},{default:t(()=>[s(o,{code:"./ktor-sample"})]),_:1}),s(r,{title:"Windows","group-key":"windows"},{default:t(()=>[s(o,{code:"ktor-sample.bat"})]),_:1})]),_:1})]),a[6]||(a[6]=e("li",null,[e("p",null,[i("要运行 servlet Ktor 应用程序，请使用 "),e("a",{href:"./server-war#run"},"Gretty"),i(" 插件的 "),e("code",null,"run"),i(" 任务。")])],-1))])])}const F=k(u,[["render",E]]);export{C as __pageData,F as default};
