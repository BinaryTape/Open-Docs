import{_ as o,C as i,c as d,o as c,G as a,ag as E,w as e,j as t,a as n}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-request-retry.md","filePath":"ko/ktor/client-request-retry.md","lastUpdated":1755457140000}'),g={name:"ko/ktor/client-request-retry.md"};function y(u,s,F,q,C,m){const l=i("TopicTitle"),p=i("show-structure"),h=i("primary-label"),r=i("tldr"),k=i("link-summary");return c(),d("div",null,[a(l,{labelRef:"client-plugin",title:"실패한 요청 재시도"}),a(p,{for:"chapter",depth:"2"}),a(h,{ref:"client-plugin"},null,512),a(r,null,{default:e(()=>s[0]||(s[0]=[t("p",null,[t("b",null,"코드 예시"),n(": "),t("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-retry"}," client-retry ")],-1)])),_:1}),a(k,null,{default:e(()=>s[1]||(s[1]=[n(" `HttpRequestRetry` 플러그인을 사용하여 실패한 요청에 대한 재시도 정책을 구성할 수 있습니다. ")])),_:1}),s[2]||(s[2]=E(`<p>기본적으로 Ktor 클라이언트는 네트워크 또는 서버 오류로 인해 실패한 <a href="./client-requests">요청</a>을 재시도하지 않습니다. <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-request-retry" target="_blank" rel="noreferrer">HttpRequestRetry</a> 플러그인을 사용하여 실패한 요청에 대한 재시도 정책을 다양한 방법으로 구성할 수 있습니다. 예를 들어, 재시도 횟수를 지정하거나, 요청 재시도 조건을 구성하거나, 재시도 전에 요청을 수정할 수 있습니다.</p><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>HttpRequestRetry</code>는 <a href="./client-dependencies">ktor-client-core</a> 아티팩트만 필요하며 특정 의존성을 요구하지 않습니다.</p><h2 id="install_plugin" tabindex="-1">HttpRequestRetry 설치 <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;HttpRequestRetry 설치 {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p><code>HttpRequestRetry</code>를 설치하려면 <a href="./client-create-and-configure#configure-client">클라이언트 구성 블록</a> 내의 <code>install</code> 함수에 전달하면 됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpRequestRetry)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configure_retry" tabindex="-1">HttpRequestRetry 구성 <a class="header-anchor" href="#configure_retry" aria-label="Permalink to &quot;HttpRequestRetry 구성 {id=&quot;configure_retry&quot;}&quot;">​</a></h2><h3 id="basic_config" tabindex="-1">기본 재시도 구성 <a class="header-anchor" href="#basic_config" aria-label="Permalink to &quot;기본 재시도 구성 {id=&quot;basic_config&quot;}&quot;">​</a></h3><p>아래 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-retry" target="_blank" rel="noreferrer">실행 가능한 예시</a>는 기본 재시도 정책을 구성하는 방법을 보여줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpRequestRetry) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        retryOnServerErrors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxRetries </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        exponentialDelay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>retryOnServerErrors</code> 함수는 서버로부터 <code>5xx</code> 응답을 받은 경우 요청 재시도를 활성화하며 재시도 횟수를 지정합니다.</li><li><code>exponentialDelay</code>는 재시도 간에 지수적 지연을 지정하며, 이는 지수 백오프(Exponential backoff) 알고리즘을 사용하여 계산됩니다.</li></ul><p>지원되는 구성 옵션에 대한 자세한 내용은 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-request-retry-config" target="_blank" rel="noreferrer">HttpRequestRetryConfig</a>에서 확인할 수 있습니다.</p><h3 id="conditions" tabindex="-1">재시도 조건 구성 <a class="header-anchor" href="#conditions" aria-label="Permalink to &quot;재시도 조건 구성 {id=&quot;conditions&quot;}&quot;">​</a></h3><p>요청 재시도 조건을 구성하거나 지연 로직을 지정할 수 있는 구성 설정도 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpRequestRetry) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    maxRetries </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    retryIf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { request, response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.status.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    retryOnExceptionIf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { request, cause </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cause </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NetworkError </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    delayMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { retry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        retry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3, 6, 9 등 초 단위로 재시도</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="modify" tabindex="-1">재시도 전에 요청 수정 <a class="header-anchor" href="#modify" aria-label="Permalink to &quot;재시도 전에 요청 수정 {id=&quot;modify&quot;}&quot;">​</a></h3><p>재시도 전에 요청을 수정해야 하는 경우 <code>modifyRequest</code>를 사용하십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpRequestRetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 재시도 조건</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modifyRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        request.headers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x-retry-count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, retryCount.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,18))])}const b=o(g,[["render",y]]);export{_ as __pageData,b as default};
