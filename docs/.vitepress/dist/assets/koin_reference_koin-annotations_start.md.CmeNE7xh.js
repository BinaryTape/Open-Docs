import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Koin 注解入门","description":"","frontmatter":{"title":"Koin 注解入门"},"headers":[],"relativePath":"koin/reference/koin-annotations/start.md","filePath":"koin/reference/koin-annotations/start.md","lastUpdated":1750001831000}'),e={name:"koin/reference/koin-annotations/start.md"};function l(p,s,h,k,o,r){return n(),a("div",null,s[0]||(s[0]=[t(`<p>Koin 注解项目的目标是帮助开发者以一种非常快速直观的方式声明 Koin 定义，并为你生成所有底层的 Koin DSL。借助 Kotlin 编译器，其目标是帮助开发者体验提升效率并加速 🚀。</p><h2 id="入门" tabindex="-1">入门 <a class="header-anchor" href="#入门" aria-label="Permalink to &quot;入门&quot;">​</a></h2><p>对 Koin 不熟悉？首先了解一下 <a href="https://insert-koin.io/docs/quickstart/kotlin" target="_blank" rel="noreferrer">Koin 入门</a></p><p>使用定义和模块注解为你的组件打上标签，然后使用常规的 Koin API。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为你的组件打上标签以声明一个定义</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明一个模块并扫描注解</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Module</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ComponentScan</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModule</span></span></code></pre></div><p>按照如下方式使用 <code>org.koin.ksp.generated.*</code> 导入，以便能够使用生成的代码：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 Koin 生成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.koin.ksp.generated.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        printLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 在这里使用你的模块，配合模块类上生成的 &quot;.module&quot; 扩展属性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          MyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 像往常一样使用你的 Koin API</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>就是这样，你可以在 Koin 中配合<a href="https://insert-koin.io/docs/reference/introduction" target="_blank" rel="noreferrer">常规 Koin API</a> 使用你的新定义了。</p><h2 id="ksp-选项" tabindex="-1">KSP 选项 <a class="header-anchor" href="#ksp-选项" aria-label="Permalink to &quot;KSP 选项&quot;">​</a></h2><p>Koin 编译器提供了一些配置选项。遵循官方文档，你可以为你的项目添加以下选项：<a href="https://kotlinlang.org/docs/ksp-quickstart.html#pass-options-to-processors" target="_blank" rel="noreferrer">Ksp 快速入门文档</a></p><h3 id="编译时安全-在编译时检查你的-koin-配置-自-1-3-0-起" tabindex="-1">编译时安全 - 在编译时检查你的 Koin 配置（自 1.3.0 起） <a class="header-anchor" href="#编译时安全-在编译时检查你的-koin-配置-自-1-3-0-起" aria-label="Permalink to &quot;编译时安全 - 在编译时检查你的 Koin 配置（自 1.3.0 起）&quot;">​</a></h3><p>Koin 注解允许编译器插件在编译时验证你的 Koin 配置。可以通过以下 KSP 选项激活此功能，将其添加到你的 Gradle 模块中：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 build.gradle 或 build.gradle.kts 中</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ksp {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arg(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;KOIN_CONFIG_CHECK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>编译器将检查你的配置中使用的所有依赖是否都已声明，并且所有使用的模块都可访问。</p><h3 id="使用-provided-绕过编译时安全检查-自-1-4-0-起" tabindex="-1">使用 @Provided 绕过编译时安全检查（自 1.4.0 起） <a class="header-anchor" href="#使用-provided-绕过编译时安全检查-自-1-4-0-起" aria-label="Permalink to &quot;使用 @Provided 绕过编译时安全检查（自 1.4.0 起）&quot;">​</a></h3><p>除了编译器忽略的类型（Android 常见类型）之外，编译器插件可以验证你的 Koin 配置在编译时是否正确。如果你想将某个参数排除在检查之外，你可以在参数上使用 <code>@Provided</code> 以表明此类型是当前 Koin 注解配置外部提供的。</p><p>以下示例表明 <code>MyProvidedComponent</code> 已在 Koin 中声明：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyProvidedComponent</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Factory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPresenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Provided</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provided : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyProvidedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="禁用默认模块-自-1-3-0-起" tabindex="-1">禁用默认模块（自 1.3.0 起） <a class="header-anchor" href="#禁用默认模块-自-1-3-0-起" aria-label="Permalink to &quot;禁用默认模块（自 1.3.0 起）&quot;">​</a></h3><p>默认情况下，Koin 编译器会检测任何未绑定到模块的定义，并将其放入一个“默认模块”中，这是一个在项目根目录生成的 Koin 模块。你可以使用以下选项禁用默认模块的使用和生成：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 build.gradle 或 build.gradle.kts 中</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ksp {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arg(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;KOIN_DEFAULT_MODULE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;false&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-kmp-设置" tabindex="-1">Kotlin KMP 设置 <a class="header-anchor" href="#kotlin-kmp-设置" aria-label="Permalink to &quot;Kotlin KMP 设置&quot;">​</a></h3><p>请按照官方文档中描述的 KSP 设置进行操作：<a href="https://kotlinlang.org/docs/ksp-multiplatform.html" target="_blank" rel="noreferrer">KSP 与 Kotlin Multiplatform</a></p><p>你还可以查看 <a href="https://github.com/InsertKoinIO/hello-kmp/tree/annotations" target="_blank" rel="noreferrer">Hello Koin KMP</a> 项目，它包含了 Koin 注解的基本设置。</p><h3 id="pro-guard" tabindex="-1">Pro-Guard <a class="header-anchor" href="#pro-guard" aria-label="Permalink to &quot;Pro-Guard&quot;">​</a></h3><p>如果你打算将 Koin 注解应用程序嵌入为 SDK，请查阅以下 ProGuard 规则：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 保留注解定义</span></span>
<span class="line"><span>-keep class org.koin.core.annotation.** { *; }</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 保留使用 Koin 注解标记的类</span></span>
<span class="line"><span>-keep @org.koin.core.annotation.* class * { *; }</span></span></code></pre></div>`,28)]))}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
