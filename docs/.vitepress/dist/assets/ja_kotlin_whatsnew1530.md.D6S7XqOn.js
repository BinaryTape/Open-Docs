import{_ as r,C as k,c as o,o as d,ag as e,G as l,j as i,w as t,a as s}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin 1.5.30の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew1530.md","filePath":"ja/kotlin/whatsnew1530.md","lastUpdated":1755514048000}'),E={name:"ja/kotlin/whatsnew1530.md"};function g(c,a,y,u,F,m){const p=k("YouTubeVideo"),n=k("tab"),h=k("tabs");return d(),o("div",null,[a[18]||(a[18]=e('<h1 id="kotlin-1-5-30の新機能" tabindex="-1">Kotlin 1.5.30の新機能 <a class="header-anchor" href="#kotlin-1-5-30の新機能" aria-label="Permalink to &quot;Kotlin 1.5.30の新機能&quot;">​</a></h1><p><em><a href="/ja/kotlin/releases#release-details">リリース日: 2021年8月24日</a></em></p><p>Kotlin 1.5.30では、将来の変更点のプレビューを含む言語のアップデート、プラットフォームサポートやツールにおける様々な改善、そして新しい標準ライブラリの関数が提供されます。</p><p>主な改善点は以下の通りです。</p><ul><li>実験的な<code>sealed when</code>文、オプトイン要件の使用変更など、言語機能の改善</li><li>Appleシリコンのネイティブサポート</li><li>Kotlin/JS IRバックエンドがベータ版に到達</li><li>Gradleプラグインの体験向上</li></ul><p>変更点の概要については、<a href="https://blog.jetbrains.com/kotlin/2021/08/kotlin-1-5-30-released/" target="_blank" rel="noreferrer">リリースブログの投稿</a>とこちらの動画でもご確認いただけます。</p>',6)),l(p,{src:"https://www.youtube.com/v/rNbb3A9IdOo",title:"Kotlin 1.5.30"}),a[19]||(a[19]=e(`<h2 id="言語機能" tabindex="-1">言語機能 <a class="header-anchor" href="#言語機能" aria-label="Permalink to &quot;言語機能&quot;">​</a></h2><p>Kotlin 1.5.30では、将来の言語変更のプレビューが提供され、オプトイン要件メカニズムと型推論に改善がもたらされます。</p><ul><li><a href="#exhaustive-when-statements-for-sealed-and-boolean-subjects">sealedおよびBooleanのwhen文の網羅性</a></li><li><a href="#suspending-functions-as-supertypes">スーパークラスとしてのサスペンド関数</a></li><li><a href="#requiring-opt-in-on-implicit-usages-of-experimental-apis">実験的なAPIの暗黙的な使用に対するオプトインの要求</a></li><li><a href="#changes-to-using-opt-in-requirement-annotations-with-different-targets">異なるターゲットを持つオプトイン要件アノテーションの使用変更</a></li><li><a href="#improvements-to-type-inference-for-recursive-generic-types">再帰的なジェネリック型の型推論の改善</a></li><li><a href="#eliminating-builder-inference-restrictions">ビルダー推論の制限の解消</a></li></ul><h3 id="sealedおよびbooleanのwhen文の網羅性" tabindex="-1">sealedおよびBooleanのwhen文の網羅性 <a class="header-anchor" href="#sealedおよびbooleanのwhen文の網羅性" aria-label="Permalink to &quot;sealedおよびBooleanのwhen文の網羅性&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>sealed (網羅的な) <code>when</code>文のサポートは<a href="/ja/kotlin/components-stability">実験的</a>です。これはいつでも変更または廃止される可能性があります。 オプトインが必要です（詳細は下記参照）。評価目的でのみ使用してください。<a href="https://youtrack.jetbrains.com/issue/KT-12380" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをお待ちしております。</p></div><p><em>網羅的な</em> <a href="/ja/kotlin/control-flow#when-expressions-and-statements"><code>when</code></a>文は、対象となるすべての可能な型または値、あるいは特定の型に対するブランチを含み、残りのケースをカバーするために<code>else</code>ブランチを含みます。</p><p><code>when</code>式の動作と一貫性を持たせるため、非網羅的な<code>when</code>文をまもなく禁止する予定です。円滑な移行を確実にするため、sealedクラスまたはBooleanを持つ非網羅的な<code>when</code>文について警告を報告するようにコンパイラを設定できます。このような警告はKotlin 1.6でデフォルトで表示され、後にエラーになります。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Enumはすでに警告が表示されます。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OFF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mode.ON</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x) { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Mode.ON </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ON&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// WARNING: Non exhaustive &#39;when&#39; statements on sealed classes/interfaces </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will be prohibited in 1.7, add an &#39;OFF&#39; or &#39;else&#39; branch instead</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y) {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// WARNING: Non exhaustive &#39;when&#39; statements on Booleans will be prohibited </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// in 1.7, add a &#39;false&#39; or &#39;else&#39; branch instead</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin 1.5.30でこの機能を有効にするには、言語バージョン<code>1.6</code>を使用してください。<a href="/ja/kotlin/whatsnew13#progressive-mode">プログレッシブモード</a>を有効にすることで、警告をエラーに変更することもできます。</p>`,10)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"all"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"apply"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "1.6"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            //progressiveMode = true"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // false by default")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"all {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '1.6'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            //progressiveMode = true"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // false by default")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[20]||(a[20]=e(`<h3 id="スーパークラスとしてのサスペンド関数" tabindex="-1">スーパークラスとしてのサスペンド関数 <a class="header-anchor" href="#スーパークラスとしてのサスペンド関数" aria-label="Permalink to &quot;スーパークラスとしてのサスペンド関数&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>スーパークラスとしてのサスペンド関数のサポートは<a href="/ja/kotlin/components-stability">実験的</a>です。これはいつでも変更または廃止される可能性があります。 オプトインが必要です（詳細は下記参照）。評価目的でのみ使用してください。<a href="https://youtrack.jetbrains.com/issue/KT-18707" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをお待ちしております。</p></div><p>Kotlin 1.5.30では、いくつかの制限付きで<code>suspend</code>関数型をスーパークラスとして使用できる機能のプレビューが提供されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この機能を有効にするには、<code>-language-version 1.6</code>コンパイラオプションを使用してください。</p>`,5)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[2]||(a[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"all"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"apply"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "1.6"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[3]||(a[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"all {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '1.6'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[21]||(a[21]=e(`<p>この機能には以下の制限があります。</p><ul><li>通常の関数型と<code>suspend</code>関数型をスーパークラスとして混在させることはできません。これはJVMバックエンドにおける<code>suspend</code>関数型の実装詳細に起因します。これらはマーカーインターフェースを持つ通常の関数型として表現されるため、どのスーパークラスがサスペンド型で、どのスーパークラスが通常型であるかを区別する方法がありません。</li><li>複数の<code>suspend</code>関数型をスーパークラスとして使用することはできません。型チェックがある場合、複数の通常の関数型をスーパークラスとして使用することもできません。</li></ul><h3 id="実験的なapiの暗黙的な使用に対するオプトインの要求" tabindex="-1">実験的なAPIの暗黙的な使用に対するオプトインの要求 <a class="header-anchor" href="#実験的なapiの暗黙的な使用に対するオプトインの要求" aria-label="Permalink to &quot;実験的なAPIの暗黙的な使用に対するオプトインの要求&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>オプトイン要件メカニズムは<a href="/ja/kotlin/components-stability">実験的</a>です。 これはいつでも変更される可能性があります。<a href="/ja/kotlin/opt-in-requirements">オプトイン方法を確認</a>してください。 評価目的でのみ使用してください。<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをお待ちしております。</p></div><p>ライブラリの作者は、実験的なAPIが<a href="/ja/kotlin/opt-in-requirements#create-opt-in-requirement-annotations">オプトインを必要とする</a>ものとしてマークし、その実験的な状態をユーザーに知らせることができます。APIが使用された際にコンパイラが警告またはエラーを発生させ、それを抑制するために<a href="/ja/kotlin/opt-in-requirements#opt-in-to-api">明示的な同意</a>が必要となります。</p><p>Kotlin 1.5.30では、コンパイラはシグネチャに実験的な型を持つすべての宣言を実験的として扱います。つまり、実験的なAPIの暗黙的な使用に対してもオプトインを要求します。例えば、関数の戻り値の型が実験的なAPI要素としてマークされている場合、その関数の使用には、宣言が明示的にオプトインを必要としないとマークされていても、オプトインが必要です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Library code</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RequiresOptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;This API is experimental.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationRetention.BINARY)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.CLASS)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyDateTime</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Opt-in requirement annotation</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@MyDateTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateProvider</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // A class requiring opt-in</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Client code</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Warning: experimental API usage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createDateSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dateSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createDateSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Also warning: experimental API usage</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="/ja/kotlin/opt-in-requirements">オプトイン要件</a>の詳細を確認してください。</p><h3 id="異なるターゲットを持つオプトイン要件アノテーションの使用変更" tabindex="-1">異なるターゲットを持つオプトイン要件アノテーションの使用変更 <a class="header-anchor" href="#異なるターゲットを持つオプトイン要件アノテーションの使用変更" aria-label="Permalink to &quot;異なるターゲットを持つオプトイン要件アノテーションの使用変更&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>オプトイン要件メカニズムは<a href="/ja/kotlin/components-stability">実験的</a>です。 これはいつでも変更される可能性があります。<a href="/ja/kotlin/opt-in-requirements">オプトイン方法を確認</a>してください。 評価目的でのみ使用してください。<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをお待ちしております。</p></div><p>Kotlin 1.5.30では、異なる<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-target/" target="_blank" rel="noreferrer">ターゲット</a>に対してオプトイン要件アノテーションを使用および宣言するための新しいルールが導入されます。コンパイラは、コンパイル時に処理するのが非現実的なユースケースに対してエラーを報告するようになりました。Kotlin 1.5.30では以下の通りです。</p><ul><li>使用箇所でローカル変数と値パラメータをオプトイン要件アノテーションでマークすることは禁止されています。</li><li>オーバーライドのマークは、その基本宣言もマークされている場合にのみ許可されます。</li><li>バッキングフィールドとゲッターをマークすることは禁止されています。代わりに基本プロパティをマークできます。</li><li>オプトイン要件アノテーション宣言サイトでの<code>TYPE</code>および<code>TYPE_PARAMETER</code>アノテーションターゲットの設定は禁止されています。</li></ul><p><a href="/ja/kotlin/opt-in-requirements">オプトイン要件</a>の詳細を確認してください。</p><h3 id="再帰的なジェネリック型の型推論の改善" tabindex="-1">再帰的なジェネリック型の型推論の改善 <a class="header-anchor" href="#再帰的なジェネリック型の型推論の改善" aria-label="Permalink to &quot;再帰的なジェネリック型の型推論の改善&quot;">​</a></h3><p>KotlinおよびJavaでは、型パラメータで自身を参照する再帰的なジェネリック型を定義できます。Kotlin 1.5.30では、Kotlinコンパイラは、対応する型パラメータが再帰的なジェネリック型である場合、その上限のみに基づいて型引数を推論できるようになりました。これにより、JavaでビルダーAPIを作成する際によく使用される再帰的なジェネリック型を用いた様々なパターンを作成することが可能になります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin 1.5.20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostgreSQLContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(DockerImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgres:13-alpine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withDatabaseName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withInitScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sql/schema.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin 1.5.30</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostgreSQLContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DockerImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgres:13-alpine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withDatabaseName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withInitScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sql/schema.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>改善を有効にするには、<code>-Xself-upper-bound-inference</code>または<code>-language-version 1.6</code>コンパイラオプションを渡します。新たにサポートされたユースケースの他の例については、<a href="https://youtrack.jetbrains.com/issue/KT-40804" target="_blank" rel="noreferrer">こちらのYouTrackチケット</a>を参照してください。</p><h3 id="ビルダー推論の制限の解消" tabindex="-1">ビルダー推論の制限の解消 <a class="header-anchor" href="#ビルダー推論の制限の解消" aria-label="Permalink to &quot;ビルダー推論の制限の解消&quot;">​</a></h3><p>ビルダー推論は、ラムダ引数内の他の呼び出しからの型情報に基づいて、呼び出しの型引数を推論できる特殊な型推論です。これは、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/build-list.html" target="_blank" rel="noreferrer"><code>buildList()</code></a>や<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/sequence.html" target="_blank" rel="noreferrer"><code>sequence()</code></a>のような汎用ビルダー関数を呼び出す際に役立ちます。例: <code>buildList { add(&quot;string&quot;) }</code>。</p><p>このようなラムダ引数内では、これまでビルダー推論が推論しようとする型情報の使用に制限がありました。つまり、それを指定することはできても、取得することはできませんでした。例えば、明示的に型引数を指定しない限り、<code>buildList()</code>のラムダ引数内で<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/get.html" target="_blank" rel="noreferrer"><code>get()</code></a>を呼び出すことはできませんでした。</p><p>Kotlin 1.5.30では、<code>-Xunrestricted-builder-inference</code>コンパイラオプションによってこれらの制限が解消されます。このオプションを追加することで、汎用ビルダー関数のラムダ引数内でこれまで禁止されていた呼び出しが可能になります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@kotlin.ExperimentalStdlibApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        removeAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@kotlin.ExperimentalStdlibApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>また、<code>-language-version 1.6</code>コンパイラオプションでもこの機能を有効にできます。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.5.30では、Kotlin/JVMに以下の機能が追加されます。</p><ul><li><a href="#instantiation-of-annotation-classes">アノテーションクラスのインスタンス化</a></li><li><a href="#improved-nullability-annotation-support-configuration">null許容アノテーションサポート設定の改善</a></li></ul><p>JVMプラットフォームにおけるKotlin Gradleプラグインの更新については、<a href="#gradle">Gradle</a>セクションを参照してください。</p><h3 id="アノテーションクラスのインスタンス化" tabindex="-1">アノテーションクラスのインスタンス化 <a class="header-anchor" href="#アノテーションクラスのインスタンス化" aria-label="Permalink to &quot;アノテーションクラスのインスタンス化&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>アノテーションクラスのインスタンス化は<a href="/ja/kotlin/components-stability">実験的</a>です。これはいつでも変更または廃止される可能性があります。 オプトインが必要です（詳細は下記参照）。評価目的でのみ使用してください。<a href="https://youtrack.jetbrains.com/issue/KT-45395" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをお待ちしております。</p></div><p>Kotlin 1.5.30では、<a href="/ja/kotlin/annotations">アノテーションクラス</a>のコンストラクタを任意のコードで呼び出して、結果のインスタンスを取得できるようになりました。この機能は、アノテーションインターフェースの実装を許可するJavaの慣習と同じユースケースをカバーします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InfoMarker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(marker: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InfoMarker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (args.size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        processInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAnnotationReflective</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        processInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InfoMarker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この機能を有効にするには、<code>-language-version 1.6</code>コンパイラオプションを使用してください。非<code>val</code>パラメータやセカンダリコンストラクタとは異なるメンバーを定義する制限など、現在のアノテーションクラスのすべての制限はそのまま残ることに注意してください。</p><p>アノテーションクラスのインスタンス化の詳細については、<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/annotation-instantiation.md" target="_blank" rel="noreferrer">こちらのKEEP</a>を参照してください。</p><h3 id="null許容アノテーションサポート設定の改善" tabindex="-1">null許容アノテーションサポート設定の改善 <a class="header-anchor" href="#null許容アノテーションサポート設定の改善" aria-label="Permalink to &quot;null許容アノテーションサポート設定の改善&quot;">​</a></h3><p>Kotlinコンパイラは、様々な種類の<a href="/ja/kotlin/java-interop#nullability-annotations">null許容アノテーション</a>を読み取り、Javaからのnull許容情報を取得できます。この情報により、Javaコードを呼び出す際にKotlinでnull許容の不一致を報告できるようになります。</p><p>Kotlin 1.5.30では、特定の種類のnull許容アノテーションからの情報に基づいて、コンパイラがnull許容の不一致を報告するかどうかを指定できます。コンパイラオプション<code>-Xnullability-annotations=@&lt;package-name&gt;:&lt;report-level&gt;</code>を使用するだけです。引数には、完全修飾されたnull許容アノテーションパッケージと、以下のレポートレベルのいずれかを指定します。</p><ul><li><code>ignore</code>でnull許容の不一致を無視</li><li><code>warn</code>で警告を報告</li><li><code>strict</code>でエラーを報告</li></ul><p>サポートされている<a href="/ja/kotlin/java-interop#nullability-annotations">null許容アノテーションの完全なリスト</a>と、それらの完全修飾パッケージ名を確認してください。</p><p>新しくサポートされた<a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noreferrer">RxJava</a> 3のnull許容アノテーションのエラー報告を有効にする例を以下に示します: <code>-Xnullability-annotations=@io.reactivex.rxjava3.annotations:strict</code>。なお、このようなnull許容の不一致はすべてデフォルトで警告となります。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Nativeは様々な変更と改善を受けました。</p><ul><li><a href="#apple-silicon-support">Appleシリコンのサポート</a></li><li><a href="#improved-kotlin-dsl-for-the-cocoapods-gradle-plugin">CocoaPods GradleプラグインのKotlin DSLの改善</a></li><li><a href="#experimental-interoperability-with-swift-5-5-async-await">Swift 5.5 async/awaitとの実験的な相互運用性</a></li><li><a href="#improved-swift-objective-c-mapping-for-objects-and-companion-objects">オブジェクトとコンパニオンオブジェクトに対するSwift/Objective-Cマッピングの改善</a></li><li><a href="#deprecation-of-linkage-against-dlls-without-import-libraries-for-mingw-targets">MinGWターゲット向けのインポートライブラリなしDLLへのリンクの非推奨化</a></li></ul><h3 id="appleシリコンのサポート" tabindex="-1">Appleシリコンのサポート <a class="header-anchor" href="#appleシリコンのサポート" aria-label="Permalink to &quot;Appleシリコンのサポート&quot;">​</a></h3><p>Kotlin 1.5.30は、<a href="https://support.apple.com/en-us/HT211814" target="_blank" rel="noreferrer">Appleシリコン</a>のネイティブサポートを導入します。</p><p>これまで、Kotlin/Nativeコンパイラとツールは、Appleシリコンホストで動作するために<a href="https://developer.apple.com/documentation/apple-silicon/about-the-rosetta-translation-environment" target="_blank" rel="noreferrer">Rosettaトランスレーション環境</a>を必要としていました。Kotlin 1.5.30では、トランスレーション環境はもはや不要となり、コンパイラとツールは追加のアクションを必要とせずにAppleシリコンハードウェア上で実行できます。</p><p>また、KotlinコードをAppleシリコン上でネイティブに実行できるようにする新しいターゲットも導入しました。</p><ul><li><code>macosArm64</code></li><li><code>iosSimulatorArm64</code></li><li><code>watchosSimulatorArm64</code></li><li><code>tvosSimulatorArm64</code></li></ul><p>これらはIntelベースとAppleシリコンの両方のホストで利用可能です。既存のすべてのターゲットもAppleシリコンホストで利用できます。</p><p>Kotlin 1.5.30では、<code>kotlin-multiplatform</code> GradleプラグインにおいてAppleシリコンターゲットの基本的なサポートのみを提供していることに注意してください。特に、新しいシミュレータターゲットは、<code>ios</code>、<code>tvos</code>、<code>watchos</code>のターゲットショートカットには含まれていません。 私たちは引き続き、新しいターゲットでのユーザーエクスペリエンスを向上させるために取り組んでいきます。</p><h3 id="cocoapods-gradleプラグインのkotlin-dslの改善" tabindex="-1">CocoaPods GradleプラグインのKotlin DSLの改善 <a class="header-anchor" href="#cocoapods-gradleプラグインのkotlin-dslの改善" aria-label="Permalink to &quot;CocoaPods GradleプラグインのKotlin DSLの改善&quot;">​</a></h3><h4 id="kotlin-nativeフレームワークの新しいパラメータ" tabindex="-1">Kotlin/Nativeフレームワークの新しいパラメータ <a class="header-anchor" href="#kotlin-nativeフレームワークの新しいパラメータ" aria-label="Permalink to &quot;Kotlin/Nativeフレームワークの新しいパラメータ&quot;">​</a></h4><p>Kotlin 1.5.30では、Kotlin/Nativeフレームワーク向けのCocoaPods GradleプラグインDSLが改善されました。フレームワーク名に加えて、Pod設定で他のパラメータを指定できるようになりました。</p><ul><li>フレームワークの動的または静的バージョンを指定</li><li>依存関係を明示的にエクスポートを有効化</li><li>Bitcode埋め込みを有効化</li></ul><p>新しいDSLを使用するには、プロジェクトをKotlin 1.5.30に更新し、<code>build.gradle(.kts)</code>ファイルの<code>cocoapods</code>セクションでパラメータを指定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    frameworkName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyFramework&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // このプロパティは非推奨です</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将来のバージョンで削除されます</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // フレームワーク設定の新しいDSL:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // すべてのFrameworkプロパティがサポートされています</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // フレームワーク名の設定。このプロパティを使用してください。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 非推奨の &#39;frameworkName&#39; の代わりに</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyFramework&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 動的フレームワークのサポート</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        isStatic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 依存関係のエクスポート</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:anotherKMMModule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        transitiveExport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // これはデフォルトです。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Bitcodeの埋め込み</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        embedBitcode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BITCODE)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="xcode構成のカスタム名のサポート" tabindex="-1">Xcode構成のカスタム名のサポート <a class="header-anchor" href="#xcode構成のカスタム名のサポート" aria-label="Permalink to &quot;Xcode構成のカスタム名のサポート&quot;">​</a></h4><p>Kotlin CocoaPods Gradleプラグインは、Xcodeビルド構成でのカスタム名をサポートします。これは、Xcodeで<code>Staging</code>のような特別なビルド構成名を使用している場合にも役立ちます。</p><p>カスタム名を指定するには、<code>build.gradle(.kts)</code>ファイルの<code>cocoapods</code>セクションで<code>xcodeConfigurationToNativeBuildType</code>パラメータを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // カスタムXcode構成をNativeBuildTypeにマッピング</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xcodeConfigurationToNativeBuildType[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CUSTOM_DEBUG&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NativeBuildType.DEBUG</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xcodeConfigurationToNativeBuildType[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CUSTOM_RELEASE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NativeBuildType.RELEASE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このパラメータはPodspecファイルには表示されません。XcodeがGradleビルドプロセスを実行すると、Kotlin CocoaPods Gradleプラグインが必要なネイティブビルドタイプを選択します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>Debug</code>と<code>Release</code>の構成はデフォルトでサポートされているため、宣言する必要はありません。</p></div><h3 id="swift-5-5-async-awaitとの実験的な相互運用性" tabindex="-1">Swift 5.5 async/awaitとの実験的な相互運用性 <a class="header-anchor" href="#swift-5-5-async-awaitとの実験的な相互運用性" aria-label="Permalink to &quot;Swift 5.5 async/awaitとの実験的な相互運用性&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Swift async/awaitとの並行処理の相互運用性は<a href="/ja/kotlin/components-stability">実験的</a>です。これはいつでも変更または廃止される可能性があります。 評価目的でのみ使用してください。<a href="https://youtrack.jetbrains.com/issue/KT-47610" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをお待ちしております。</p></div><p>Kotlin 1.4.0で<a href="/ja/kotlin/whatsnew14#support-for-kotlin-s-suspending-functions-in-swift-and-objective-c">Kotlinのサスペンド関数をObjective-CおよびSwiftから呼び出すサポート</a>を追加しましたが、Swift 5.5の新機能である<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md" target="_blank" rel="noreferrer">asyncおよびawait修飾子による並行処理</a>に対応するために、それを改善しています。</p><p>Kotlin/Nativeコンパイラは、null許容の戻り値型を持つサスペンド関数のために、生成されたObjective-Cヘッダーに<code>_Nullable_result</code>属性を出力するようになりました。これにより、Swiftから適切なnull許容性を持つ<code>async</code>関数としてこれらを呼び出すことが可能になります。</p><p>この機能は実験的であり、将来的にKotlinとSwiftの両方の変更によって影響を受ける可能性があることに注意してください。今のところ、私たちはいくつかの制限があるこの機能のプレビューを提供しており、皆様のご意見をぜひお聞かせください。現在の状態の詳細とフィードバックは、<a href="https://youtrack.jetbrains.com/issue/KT-47610" target="_blank" rel="noreferrer">こちらのYouTrackイシュー</a>に残してください。</p><h3 id="オブジェクトとコンパニオンオブジェクトに対するswift-objective-cマッピングの改善" tabindex="-1">オブジェクトとコンパニオンオブジェクトに対するSwift/Objective-Cマッピングの改善 <a class="header-anchor" href="#オブジェクトとコンパニオンオブジェクトに対するswift-objective-cマッピングの改善" aria-label="Permalink to &quot;オブジェクトとコンパニオンオブジェクトに対するSwift/Objective-Cマッピングの改善&quot;">​</a></h3><p>オブジェクトとコンパニオンオブジェクトの取得が、ネイティブiOS開発者にとってより直感的な方法でできるようになりました。例えば、Kotlinで以下のオブジェクトがある場合:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Some value&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Some value&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Swiftでそれらにアクセスするには、<code>shared</code>と<code>companion</code>プロパティを使用できます。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyObject.shared</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyObject.shared.x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyClass.companion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyClass.Companion.shared</span></span></code></pre></div><p><a href="/ja/kotlin/native-objc-interop">Swift/Objective-C相互運用性</a>の詳細を確認してください。</p><h3 id="mingwターゲット向けのインポートライブラリなしdllへのリンクの非推奨化" tabindex="-1">MinGWターゲット向けのインポートライブラリなしDLLへのリンクの非推奨化 <a class="header-anchor" href="#mingwターゲット向けのインポートライブラリなしdllへのリンクの非推奨化" aria-label="Permalink to &quot;MinGWターゲット向けのインポートライブラリなしDLLへのリンクの非推奨化&quot;">​</a></h3><p><a href="https://lld.llvm.org/" target="_blank" rel="noreferrer">LLD</a>はLLVMプロジェクトのリンカであり、デフォルトのld.bfdよりも優れたパフォーマンスという利点から、MinGWターゲットのKotlin/NativeでLLDの使用を開始する予定です。</p><p>しかしながら、LLDの最新安定版はMinGW (Windows) ターゲット向けのDLLへの直接リンクをサポートしていません。そのようなリンクには<a href="https://stackoverflow.com/questions/3573475/how-does-the-import-library-work-details/3573527#3573527" target="_blank" rel="noreferrer">インポートライブラリ</a>の使用が必要です。Kotlin/Native 1.5.30ではそれらは不要ですが、将来的にMinGWのデフォルトリンカとなるLLDとは互換性がないことをお知らせするために警告を追加しています。</p><p>LLDリンカへの移行に関するご意見や懸念事項は、<a href="https://youtrack.jetbrains.com/issue/KT-47605" target="_blank" rel="noreferrer">こちらのYouTrackイシュー</a>で共有してください。</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>1.5.30では、Kotlin Multiplatformに以下の注目すべきアップデートがもたらされます。</p><ul><li><a href="#ability-to-use-custom-cinterop-libraries-in-shared-native-code">共有ネイティブコードでカスタム<code>cinterop</code>ライブラリを使用する機能</a></li><li><a href="#support-for-xcframeworks">XCFrameworksのサポート</a></li><li><a href="#new-default-publishing-setup-for-android-artifacts">Androidアーティファクトの新しいデフォルト公開設定</a></li></ul><h3 id="共有ネイティブコードでカスタムcinteropライブラリを使用する機能" tabindex="-1">共有ネイティブコードでカスタムcinteropライブラリを使用する機能 <a class="header-anchor" href="#共有ネイティブコードでカスタムcinteropライブラリを使用する機能" aria-label="Permalink to &quot;共有ネイティブコードでカスタムcinteropライブラリを使用する機能&quot;">​</a></h3><p>Kotlin Multiplatformは、共有ソースセットでプラットフォーム依存の相互運用ライブラリを使用する<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#connect-platform-specific-libraries" target="_blank" rel="noreferrer">オプション</a>を提供します。1.5.30より前は、Kotlin/Nativeディストリビューションに同梱されている<a href="/ja/kotlin/native-platform-libs">プラットフォームライブラリ</a>でのみ動作していました。1.5.30からは、カスタム<code>cinterop</code>ライブラリでも使用できるようになります。この機能を有効にするには、<code>gradle.properties</code>に<code>kotlin.mpp.enableCInteropCommonization=true</code>プロパティを追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.enableGranularSourceSetsMetadata=true</span></span>
<span class="line"><span>kotlin.native.enableDependencyPropagation=false</span></span>
<span class="line"><span>kotlin.mpp.enableCInteropCommonization=true</span></span></code></pre></div><h3 id="xcframeworksのサポート" tabindex="-1">XCFrameworksのサポート <a class="header-anchor" href="#xcframeworksのサポート" aria-label="Permalink to &quot;XCFrameworksのサポート&quot;">​</a></h3><p>すべてのKotlin Multiplatformプロジェクトは、XCFrameworksを出力フォーマットとして使用できるようになりました。Appleはユニバーサル（fat）フレームワークの代替としてXCFrameworksを導入しました。XCFrameworksを使用すると、次のことができます。</p><ul><li>すべてのターゲットプラットフォームとアーキテクチャのロジックを単一のバンドルにまとめることができます。</li><li>アプリケーションをApp Storeに公開する前に、不要なアーキテクチャをすべて削除する必要がありません。</li></ul><p>XCFrameworksは、Apple M1デバイスとシミュレータでKotlinフレームワークを使用したい場合に役立ちます。</p><p>XCFrameworksを使用するには、<code>build.gradle(.kts)</code>スクリプトを更新してください。</p>`,87)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[4]||(a[4]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFramework")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," xcf "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," XCFramework"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    ios"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"framework"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"add"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    watchos"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"framework"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"add"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    tvos"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"framework"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"add"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[5]||(a[5]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFrameworkConfig")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.multiplatform'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    def"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," xcf "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," XCFrameworkConfig"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(project)")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ios {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"framework {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"add(it)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    watchos {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"framework {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"add(it)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    tvos {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"framework {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"add(it)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[22]||(a[22]=e('<p>XCFrameworksを宣言すると、以下の新しいGradleタスクが登録されます。</p><ul><li><code>assembleXCFramework</code></li><li><code>assembleDebugXCFramework</code>（さらに<a href="/ja/kotlin/native-ios-symbolication">dSYMsを含む</a>デバッグアーティファクト）</li><li><code>assembleReleaseXCFramework</code></li></ul><p>XCFrameworksの詳細については、<a href="https://developer.apple.com/videos/play/wwdc2019/416/" target="_blank" rel="noreferrer">このWWDCビデオ</a>を参照してください。</p><h3 id="androidアーティファクトの新しいデフォルト公開設定" tabindex="-1">Androidアーティファクトの新しいデフォルト公開設定 <a class="header-anchor" href="#androidアーティファクトの新しいデフォルト公開設定" aria-label="Permalink to &quot;Androidアーティファクトの新しいデフォルト公開設定&quot;">​</a></h3><p><code>maven-publish</code> Gradleプラグインを使用すると、ビルドスクリプトで<a href="https://developer.android.com/studio/build/build-variants" target="_blank" rel="noreferrer">Androidバリアント</a>名を指定することで、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-publish-lib-setup.html#publish-an-android-library" target="_blank" rel="noreferrer">Androidターゲット向けマルチプラットフォームライブラリ</a>を公開できます。Kotlin Gradleプラグインは自動的に公開物を生成します。</p><p>1.5.30より前は、生成された公開<a href="https://docs.gradle.org/current/userguide/publishing_gradle_module_metadata.html" target="_blank" rel="noreferrer">メタデータ</a>には、公開されたすべてのAndroidバリアントのビルドタイプ属性が含まれており、ライブラリのコンシューマが使用するのと同じビルドタイプとのみ互換性がありました。Kotlin 1.5.30では、新しいデフォルトの公開設定が導入されます。</p><ul><li>プロジェクトが公開するすべてのAndroidバリアントが同じビルドタイプ属性を持つ場合、公開されたバリアントにはビルドタイプ属性がなくなり、任意のビルドタイプと互換性を持つようになります。</li><li>公開されたバリアントが異なるビルドタイプ属性を持つ場合、<code>release</code>値を持つもののみがビルドタイプ属性なしで公開されます。これにより、リリースバリアントはコンシューマ側で任意のビルドタイプと互換性を持つようになりますが、非リリースバリアントは一致するコンシューマビルドタイプとのみ互換性を持つことになります。</li></ul><p>オプトアウトしてすべてのバリアントのビルドタイプ属性を保持するには、このGradleプロパティを設定します: <code>kotlin.android.buildTypeAttribute.keep=true</code>。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin 1.5.30では、Kotlin/JSに2つの主要な改善がもたらされます。</p><ul><li><a href="#js-ir-compiler-backend-reaches-beta">JS IRコンパイラバックエンドがベータ版に到達</a></li><li><a href="#better-debugging-experience-for-applications-with-the-kotlin-js-ir-backend">Kotlin/JS IRバックエンドを使用するアプリケーションのデバッグ体験の向上</a></li></ul><h3 id="js-irコンパイラバックエンドがベータ版に到達" tabindex="-1">JS IRコンパイラバックエンドがベータ版に到達 <a class="header-anchor" href="#js-irコンパイラバックエンドがベータ版に到達" aria-label="Permalink to &quot;JS IRコンパイラバックエンドがベータ版に到達&quot;">​</a></h3><p>Kotlin/JS向けの<a href="/ja/kotlin/whatsnew14#unified-backends-and-extensibility">IRベースのコンパイラバックエンド</a>は、1.4.0で<a href="/ja/kotlin/components-stability">アルファ版</a>として導入されましたが、ベータ版に到達しました。</p><p>以前、新しいバックエンドにプロジェクトを移行するのに役立つ<a href="/ja/kotlin/js-ir-migration">JS IRバックエンドの移行ガイド</a>を公開しました。今回は、IntelliJ IDEAに直接必要な変更を表示する<a href="https://plugins.jetbrains.com/plugin/17183-kotlin-js-inspection-pack/" target="_blank" rel="noreferrer">Kotlin/JS Inspection Pack</a> IDEプラグインをご紹介します。</p><h3 id="kotlin-js-irバックエンドを使用するアプリケーションのデバッグ体験の向上" tabindex="-1">Kotlin/JS IRバックエンドを使用するアプリケーションのデバッグ体験の向上 <a class="header-anchor" href="#kotlin-js-irバックエンドを使用するアプリケーションのデバッグ体験の向上" aria-label="Permalink to &quot;Kotlin/JS IRバックエンドを使用するアプリケーションのデバッグ体験の向上&quot;">​</a></h3><p>Kotlin 1.5.30では、Kotlin/JS IRバックエンド用のJavaScriptソースマップ生成が導入されます。これにより、IRバックエンドが有効な場合のKotlin/JSのデバッグ体験が向上し、ブレークポイント、ステップ実行、適切なソース参照付きの読みやすいスタックトレースを含む完全なデバッグサポートが提供されます。</p><p>ブラウザまたはIntelliJ IDEA UltimateでKotlin/JSをデバッグする方法については、<a href="/ja/kotlin/js-debugging">こちら</a>を参照してください。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p><a href="https://youtrack.jetbrains.com/issue/KT-45778" target="_blank" rel="noreferrer">Kotlin Gradleプラグインのユーザーエクスペリエンスを向上させる</a>という私たちのミッションの一環として、以下の機能を実装しました。</p><ul><li><a href="#support-for-java-toolchains">Javaツールチェインのサポート</a><ul><li>これには、<a href="#ability-to-specify-jdk-home-with-useskotlinjavatoolchain-interface">古いGradleバージョン向けに<code>UsesKotlinJavaToolchain</code>インターフェースを使用してJDKホームを指定する機能</a>が含まれます</li></ul></li><li><a href="#easier-way-to-explicitly-specify-kotlin-daemon-jvm-arguments">KotlinデーモンのJVM引数を明示的に指定するより簡単な方法</a></li></ul><h3 id="javaツールチェインのサポート" tabindex="-1">Javaツールチェインのサポート <a class="header-anchor" href="#javaツールチェインのサポート" aria-label="Permalink to &quot;Javaツールチェインのサポート&quot;">​</a></h3><p>Gradle 6.7では、「Javaツールチェインサポート」機能が導入されました。 この機能を使用すると、次のことができます。</p><ul><li>Gradleのものとは異なるJDKやJREを使用して、コンパイル、テスト、実行可能ファイルを実行できます。</li><li>未リリースの言語バージョンでコードをコンパイルおよびテストできます。</li></ul><p>ツールチェインサポートにより、GradleはローカルJDKを自動検出し、ビルドに必要な不足しているJDKをインストールできます。これでGradle自体は任意のJDK上で動作しながら、<a href="/ja/kotlin/gradle-compilation-and-caches#gradle-build-cache-support">ビルドキャッシュ機能</a>を再利用できます。</p><p>Kotlin Gradleプラグインは、Kotlin/JVMコンパイルタスクでJavaツールチェインをサポートします。 Javaツールチェインは以下の通りです。</p><ul><li><p>JVMターゲットで利用可能な<a href="/ja/kotlin/gradle-compiler-options#attributes-specific-to-jvm"><code>jdkHome</code>オプション</a>を設定します。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><a href="https://youtrack.jetbrains.com/issue/KT-46541" target="_blank" rel="noreferrer"><code>jdkHome</code>オプションを直接設定する機能は非推奨になりました</a>。</p></div></li><li><p>ユーザーが<code>jvmTarget</code>オプションを明示的に設定しなかった場合、<a href="/ja/kotlin/gradle-compiler-options#attributes-specific-to-jvm"><code>kotlinOptions.jvmTarget</code></a>をツールチェインのJDKバージョンに設定します。 ツールチェインが設定されていない場合、<code>jvmTarget</code>フィールドはデフォルト値を使用します。<a href="/ja/kotlin/gradle-configure-project#check-for-jvm-target-compatibility-of-related-compile-tasks">JVMターゲットの互換性</a>の詳細を確認してください。</p></li><li><p><a href="/ja/kotlin/kapt#run-kapt-tasks-in-parallel"><code>kapt</code>ワーカー</a>がどのJDKで実行されるかに影響します。</p></li></ul><p>ツールチェインを設定するには、以下のコードを使用します。プレースホルダー<code>&lt;MAJOR_JDK_VERSION&gt;</code>を使用したいJDKバージョンに置き換えてください。</p>',27)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[6]||(a[6]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    jvmToolchain"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        ("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," as"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," JavaToolchainSpec).languageVersion."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(JavaLanguageVersion."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"of"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"MAJOR_JDK_VERSION"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'// "8"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[7]||(a[7]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    jvmToolchain {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageVersion"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"set("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"JavaLanguageVersion."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"of("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"MAJOR_JDK_VERSION"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'// "8"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[23]||(a[23]=e(`<p><code>kotlin</code>拡張機能を通じてツールチェインを設定すると、Javaコンパイルタスクのツールチェインも更新されることに注意してください。</p><p><code>java</code>拡張機能を通じてツールチェインを設定することもでき、Kotlinコンパイルタスクはそれを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    toolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MAJOR_JDK_VERSION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;8&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>KotlinCompile</code>タスクのJDKバージョン設定については、<a href="/ja/kotlin/gradle-configure-project#set-jdk-version-with-the-task-dsl">Task DSLでJDKバージョンを設定する</a>に関するドキュメントを参照してください。</p><p>Gradle 6.1から6.6のバージョンでは、<a href="#ability-to-specify-jdk-home-with-useskotlinjavatoolchain-interface">JDKホームを設定するために<code>UsesKotlinJavaToolchain</code>インターフェースを使用</a>してください。</p><h3 id="useskotlinjavatoolchainインターフェースを使用してjdkホームを指定する機能" tabindex="-1">UsesKotlinJavaToolchainインターフェースを使用してJDKホームを指定する機能 <a class="header-anchor" href="#useskotlinjavatoolchainインターフェースを使用してjdkホームを指定する機能" aria-label="Permalink to &quot;UsesKotlinJavaToolchainインターフェースを使用してJDKホームを指定する機能&quot;">​</a></h3><p><a href="/ja/kotlin/gradle-compiler-options"><code>kotlinOptions</code></a>を介してJDK設定をサポートするすべてのKotlinタスクが、<code>UsesKotlinJavaToolchain</code>インターフェースを実装するようになりました。JDKホームを設定するには、JDKへのパスを記述し、<code>&lt;JDK_VERSION&gt;</code>プレースホルダーを置き換えてください。</p>`,7)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[8]||(a[8]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"project.tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"UsesKotlinJavaToolchain"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        it.kotlinJavaToolchain.jdk."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"use"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "/path/to/local/jdk"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            JavaVersion."),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"LOCAL_JDK_VERSION"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        )")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[9]||(a[9]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"project"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"UsesKotlinJavaToolchain."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        it"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlinJavaToolchain"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"jdk"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"use(")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"            '/path/to/local/jdk'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            JavaVersion.<"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"LOCAL_JDK_VERSION"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        )")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[24]||(a[24]=e('<p>Gradle 6.1から6.6のバージョンでは、<code>UsesKotlinJavaToolchain</code>インターフェースを使用してください。Gradle 6.7以降では、代わりに<a href="#support-for-java-toolchains">Javaツールチェイン</a>を使用してください。</p><p>この機能を使用する場合、<a href="/ja/kotlin/kapt#run-kapt-tasks-in-parallel">kaptタスクワーカー</a>は<a href="https://docs.gradle.org/current/userguide/worker_api.html#changing_the_isolation_mode" target="_blank" rel="noreferrer">プロセス分離モード</a>のみを使用し、<code>kapt.workers.isolation</code>プロパティは無視されることに注意してください。</p><h3 id="kotlinデーモンのjvm引数を明示的に指定するより簡単な方法" tabindex="-1">KotlinデーモンのJVM引数を明示的に指定するより簡単な方法 <a class="header-anchor" href="#kotlinデーモンのjvm引数を明示的に指定するより簡単な方法" aria-label="Permalink to &quot;KotlinデーモンのJVM引数を明示的に指定するより簡単な方法&quot;">​</a></h3><p>Kotlin 1.5.30では、KotlinデーモンのJVM引数に新しいロジックが導入されました。以下のリストの各オプションは、それ以前のオプションを上書きします。</p>',4)),i("ul",null,[a[17]||(a[17]=e('<li><p>何も指定されていない場合、Kotlinデーモンは（以前と同様に）Gradleデーモンから引数を継承します。例えば、<code>gradle.properties</code>ファイルでは次のようになります。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.gradle.jvmargs=-Xmx1500m -Xms=500m</span></span></code></pre></div></li><li><p>GradleデーモンのJVM引数に<code>kotlin.daemon.jvm.options</code>システムプロパティがある場合、以前と同様に使用します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.gradle.jvmargs=-Dkotlin.daemon.jvm.options=-Xmx1500m -Xms=500m</span></span></code></pre></div></li><li><p><code>gradle.properties</code>ファイルに<code>kotlin.daemon.jvmargs</code>プロパティを追加できます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.daemon.jvmargs=-Xmx1500m -Xms=500m</span></span></code></pre></div></li>',3)),i("li",null,[a[12]||(a[12]=i("p",null,[i("code",null,"kotlin"),s("拡張機能で引数を指定できます。")],-1)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[10]||(a[10]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinDaemonJvmArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," listOf"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[11]||(a[11]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinDaemonJvmArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i("li",null,[a[15]||(a[15]=i("p",null,"特定のタスクの引数を指定できます。",-1)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[13]||(a[13]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"matching"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," { it.name "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "compileKotlin"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," &&"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," it "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"is"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," CompileUsingKotlinDaemon }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        ("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," as"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," CompileUsingKotlinDaemon).kotlinDaemonJvmArguments."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"listOf"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[14]||(a[14]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .matching {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        it"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"name "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "compileKotlin"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," &&"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," it "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"instanceof"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," CompileUsingKotlinDaemon")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        kotlinDaemonJvmArguments"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"set(["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx1g"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms512m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"])")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[16]||(a[16]=i("div",{class:"note custom-block"},[i("p",{class:"custom-block-title"},"NOTE"),i("p",null,[s("この場合、タスク実行時に新しいKotlinデーモンインスタンスが起動する可能性があります。"),i("a",{href:"/ja/kotlin/gradle-compilation-and-caches#setting-kotlin-daemon-s-jvm-arguments"},"KotlinデーモンのJVM引数との相互作用"),s("について詳しく確認してください。")])],-1))])]),a[25]||(a[25]=e(`<p>Kotlinデーモンの詳細については、<a href="/ja/kotlin/gradle-compilation-and-caches#the-kotlin-daemon-and-how-to-use-it-with-gradle">KotlinデーモンとGradleでの使用方法</a>を参照してください。</p><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><p>Kotlin 1.5.30では、標準ライブラリの<code>Duration</code>と<code>Regex</code> APIに改善がもたらされます。</p><ul><li><a href="#changing-duration-tostring-output"><code>Duration.toString()</code>の出力変更</a></li><li><a href="#parsing-duration-from-string">StringからDurationをパース</a></li><li><a href="#matching-with-regex-at-a-particular-position">特定の箇所でのRegexによるマッチング</a></li><li><a href="#splitting-regex-to-a-sequence">Regexをシーケンスに分割</a></li></ul><h3 id="duration-tostring-の出力変更" tabindex="-1">Duration.toString()の出力変更 <a class="header-anchor" href="#duration-tostring-の出力変更" aria-label="Permalink to &quot;Duration.toString()の出力変更&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Duration APIは<a href="/ja/kotlin/components-stability">実験的</a>です。これはいつでも変更または廃止される可能性があります。 評価目的でのみ使用してください。<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをお待ちしております。</p></div><p>Kotlin 1.5.30より前では、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-string.html" target="_blank" rel="noreferrer"><code>Duration.toString()</code></a>関数は、その引数の文字列表現を、最もコンパクトで読みやすい数値となる単位で返していました。 今後は、各数値コンポーネントがそれぞれの単位で表現された文字列値を返します。 各コンポーネントは、数値の後に単位の略称（<code>d</code>、<code>h</code>、<code>m</code>、<code>s</code>）が続きます。例:</p><table tabindex="0"><thead><tr><th><strong>関数呼び出しの例</strong></th><th><strong>以前の出力</strong></th><th><strong>現在の出力</strong></th></tr></thead><tbody><tr><td>Duration.days(45).toString()</td><td><code>45.0d</code></td><td><code>45d</code></td></tr><tr><td>Duration.days(1.5).toString()</td><td><code>36.0h</code></td><td><code>1d 12h</code></td></tr><tr><td>Duration.minutes(1230).toString()</td><td><code>20.5h</code></td><td><code>20h 30m</code></td></tr><tr><td>Duration.minutes(2415).toString()</td><td><code>40.3h</code></td><td><code>1d 16h 15m</code></td></tr><tr><td>Duration.minutes(920).toString()</td><td><code>920m</code></td><td><code>15h 20m</code></td></tr><tr><td>Duration.seconds(1.546).toString()</td><td><code>1.55s</code></td><td><code>1.546s</code></td></tr><tr><td>Duration.milliseconds(25.12).toString()</td><td><code>25.1ms</code></td><td><code>25.12ms</code></td></tr></tbody></table><p>負の期間の表現方法も変更されました。負の期間はマイナス記号（<code>-</code>）が接頭辞として付加され、複数のコンポーネントから構成される場合は括弧で囲まれます: <code>-12m</code>および<code>-(1h 30m)</code>。</p><p>1秒未満の短い期間は、秒未満の単位（例: <code>ms</code> (ミリ秒)、<code>us</code> (マイクロ秒)、<code>ns</code> (ナノ秒)）を持つ単一の数値として表現されることに注意してください: <code>140.884ms</code>、<code>500us</code>、<code>24ns</code>。それらを表現するために科学的記数法はもはや使用されません。</p><p>期間を単一の単位で表現したい場合は、オーバーロードされた<code>Duration.toString(unit, decimals)</code>関数を使用してください。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>シリアライゼーションやデータ交換を含む特定のケースでは、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-iso-string.html" target="_blank" rel="noreferrer"><code>Duration.toIsoString()</code></a>を使用することをお勧めします。<code>Duration.toIsoString()</code>は、<code>Duration.toString()</code>の代わりに、より厳密な<a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank" rel="noreferrer">ISO-8601</a>形式を使用します。</p></div><h3 id="stringからdurationをパース" tabindex="-1">StringからDurationをパース <a class="header-anchor" href="#stringからdurationをパース" aria-label="Permalink to &quot;StringからDurationをパース&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Duration APIは<a href="/ja/kotlin/components-stability">実験的</a>です。これはいつでも変更または廃止される可能性があります。 評価目的でのみ使用してください。<a href="https://github.com/Kotlin/KEEP/issues/190" target="_blank" rel="noreferrer">こちらのイシュー</a>でのフィードバックをお待ちしております。</p></div><p>Kotlin 1.5.30では、Duration APIに新しい関数が追加されました。</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/parse.html" target="_blank" rel="noreferrer"><code>parse()</code></a>は、以下の出力のパースをサポートします。 <ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-string.html" target="_blank" rel="noreferrer"><code>toString()</code></a>。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-string.html" target="_blank" rel="noreferrer"><code>toString(unit, decimals)</code></a>。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-iso-string.html" target="_blank" rel="noreferrer"><code>toIsoString()</code></a>。</li></ul></li><li><code>toIsoString()</code>によって生成されたフォーマットからのみパースする<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/parse-iso-string.html" target="_blank" rel="noreferrer"><code>parseIsoString()</code></a>。</li><li>上記関数と同様に動作しますが、無効な期間フォーマットの場合に<code>IllegalArgumentException</code>をスローする代わりに<code>null</code>を返す<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/parse-or-null.html" target="_blank" rel="noreferrer"><code>parseOrNull()</code></a>と<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/parse-iso-string-or-null.html" target="_blank" rel="noreferrer"><code>parseIsoStringOrNull()</code></a>。</li></ul><p><code>parse()</code>と<code>parseOrNull()</code>の使用例をいくつか示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.Duration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.ExperimentalTime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ExperimentalTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isoFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;PT1H30M&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> singleUnitFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.5h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> invalidFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1 hour 30 minutes&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isoFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(defaultFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(singleUnitFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //println(Duration.parse(invalidFormatString))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // throws exception</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(invalidFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;null&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>そして、<code>parseIsoString()</code>と<code>parseIsoStringOrNull()</code>の使用例をいくつか示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.Duration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.ExperimentalTime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ExperimentalTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isoFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;PT1H30M&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseIsoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isoFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //println(Duration.parseIsoString(defaultFormatString))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // throws exception</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseIsoStringOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(defaultFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;null&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="特定の箇所でのregexによるマッチング" tabindex="-1">特定の箇所でのRegexによるマッチング <a class="header-anchor" href="#特定の箇所でのregexによるマッチング" aria-label="Permalink to &quot;特定の箇所でのRegexによるマッチング&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>Regex.matchAt()</code>と<code>Regex.matchesAt()</code>関数は<a href="/ja/kotlin/components-stability">実験的</a>です。これらはいつでも変更または廃止される可能性があります。 評価目的でのみ使用してください。<a href="https://youtrack.jetbrains.com/issue/KT-34021" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをお待ちしております。</p></div><p>新しい<code>Regex.matchAt()</code>と<code>Regex.matchesAt()</code>関数は、<code>String</code>または<code>CharSequence</code>の特定の箇所で正規表現が完全に一致するかどうかをチェックする方法を提供します。</p><p><code>matchesAt()</code>はブール値を返します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> releaseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin 1.5.30 is released!&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 正規表現: 1桁の数字、ドット、1桁の数字、ドット、1桁以上の数字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> versionRegex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchesAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;false&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchesAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>matchAt()</code>は一致が見つかればその一致を返し、見つからなければ<code>null</code>を返します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> releaseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin 1.5.30 is released!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> versionRegex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;null&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1.5.30&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="regexをシーケンスに分割" tabindex="-1">Regexをシーケンスに分割 <a class="header-anchor" href="#regexをシーケンスに分割" aria-label="Permalink to &quot;Regexをシーケンスに分割&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>Regex.splitToSequence()</code>と<code>CharSequence.splitToSequence(Regex)</code>関数は<a href="/ja/kotlin/components-stability">実験的</a>です。これらはいつでも変更または廃止される可能性があります。 評価目的でのみ使用してください。<a href="https://youtrack.jetbrains.com/issue/KT-23351" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをお待ちしております。</p></div><p>新しい<code>Regex.splitToSequence()</code>関数は、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/split.html" target="_blank" rel="noreferrer"><code>split()</code></a>の遅延評価版です。指定された正規表現に一致する箇所で文字列を分割しますが、その結果は<a href="/ja/kotlin/sequences">Sequence</a>として返されるため、この結果に対するすべての操作は遅延実行されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorsText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;green, red , brown&amp;blue, orange, pink&amp;green&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s]+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mixedColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splitToSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(colorsText)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mixedColor) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;brown&amp;blue&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>同様の関数が<code>CharSequence</code>にも追加されました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mixedColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorsText.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splitToSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex)</span></span></code></pre></div><h2 id="serialization-1-3-0-rc" tabindex="-1">Serialization 1.3.0-RC <a class="header-anchor" href="#serialization-1-3-0-rc" aria-label="Permalink to &quot;Serialization 1.3.0-RC&quot;">​</a></h2><p><code>kotlinx.serialization</code> <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.3.0-RC" target="_blank" rel="noreferrer">1.3.0-RC</a>が、新しいJSONシリアライゼーション機能を備えて登場しました。</p><ul><li>Java IOストリームのシリアライゼーション</li><li>デフォルト値に対するプロパティレベルの制御</li><li>null値をシリアライゼーションから除外するオプション</li><li>ポリモーフィックシリアライゼーションにおけるカスタムクラス識別子</li></ul><p>詳細については、<a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.3.0-RC" target="_blank" rel="noreferrer">変更履歴</a>を参照してください。</p>`,37))])}const v=r(E,[["render",g]]);export{C as __pageData,v as default};
