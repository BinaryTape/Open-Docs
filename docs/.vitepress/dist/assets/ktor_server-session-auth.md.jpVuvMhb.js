import{_ as E,C as h,c,o as g,j as i,G as a,ag as p,a as e,w as n}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-session-auth.md","filePath":"ktor/server-session-auth.md","lastUpdated":1755457140000}'),u={name:"ktor/server-session-auth.md"};function y(F,s,v,b,m,f){const r=h("show-structure"),o=h("Links"),d=h("tldr"),t=h("code-block"),l=h("TabItem"),k=h("Tabs");return g(),c("div",null,[s[7]||(s[7]=i("h1",{id:"ktor-server-中的会话认证",tabindex:"-1"},[e("Ktor Server 中的会话认证 "),i("a",{class:"header-anchor",href:"#ktor-server-中的会话认证","aria-label":'Permalink to "Ktor Server 中的会话认证"'},"​")],-1)),a(r,{for:"chapter",depth:"2"}),a(d,null,{default:n(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必需的依赖项"),e(": "),i("code",null,"io.ktor:ktor-server-auth"),e(", "),i("code",null,"io.ktor:ktor-server-sessions")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"代码示例"),e(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session"}," auth-form-session ")],-1)),i("p",null,[i("b",null,[a(o,{href:"/ktor/server-native",summary:"Ktor 支持 Kotlin/Native，并允许你无需额外的运行时或虚拟机即可运行服务器。"},{default:n(()=>s[0]||(s[0]=[e("原生服务器")])),_:1}),s[1]||(s[1]=e("支持"))]),s[2]||(s[2]=e(": ✖️ "))])]),_:1}),s[8]||(s[8]=p('<p><a href="./server-sessions">会话</a> 提供了一种在不同 HTTP 请求之间持久化数据的机制。典型的用例包括存储已登录用户的 ID、购物车的内容，或者在客户端保留用户偏好设置。</p><p>在 Ktor 中，已经拥有关联会话的用户可以使用 <code>session</code> 提供程序进行认证。例如，当用户首次使用 <a href="./server-form-based-auth">web 表单</a> 登录时，你可以将用户名保存到 cookie 会话中，并在后续请求中使用 <code>session</code> 提供程序授权该用户。</p><blockquote><p>你可以在 <a href="./server-auth">Ktor Server 中的认证与授权</a> 部分获取关于 Ktor 中认证和授权的通用信息。</p></blockquote><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>为了启用 <code>session</code> 认证，你需要将以下 artifact 包含在构建脚本中：</p>',5)),i("ul",null,[i("li",null,[s[5]||(s[5]=i("p",null,[e("添加 "),i("code",null,"ktor-server-sessions"),e(" 依赖项用于使用会话：")],-1)),a(k,{group:"languages"},{default:n(()=>[a(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(t,{lang:"Kotlin",code:'              implementation("io.ktor:ktor-server-sessions:$ktor_version")'})]),_:1}),a(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(t,{lang:"Groovy",code:'              implementation "io.ktor:ktor-server-sessions:$ktor_version"'})]),_:1}),a(l,{title:"Maven","group-key":"maven"},{default:n(()=>[a(t,{lang:"XML",code:`              <dependency>
                  <groupId>io.ktor</groupId>
                  <artifactId>ktor-server-sessions-jvm</artifactId>
                  <version>\${ktor_version}</version>
              </dependency>`})]),_:1})]),_:1})]),i("li",null,[s[6]||(s[6]=i("p",null,[e("添加 "),i("code",null,"ktor-server-auth"),e(" 依赖项用于认证：")],-1)),a(k,{group:"languages"},{default:n(()=>[a(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(t,{lang:"Kotlin",code:'              implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),a(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(t,{lang:"Groovy",code:'              implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),a(l,{title:"Maven","group-key":"maven"},{default:n(()=>[a(t,{lang:"XML",code:`              <dependency>
                  <groupId>io.ktor</groupId>
                  <artifactId>ktor-server-auth-jvm</artifactId>
                  <version>\${ktor_version}</version>
              </dependency>`})]),_:1})]),_:1})])]),s[9]||(s[9]=p(`<h2 id="flow" tabindex="-1">会话认证流程 <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;会话认证流程 {id=&quot;flow&quot;}&quot;">​</a></h2><p>带有会话的认证流程可能会有所不同，取决于用户在你的应用程序中如何被认证。让我们看看它在 <a href="./server-form-based-auth">基于表单的认证</a> 中会是什么样子：</p><ol><li>客户端向服务器发出包含 web 表单数据（包括用户名和密码）的请求。</li><li>服务器验证客户端发送的凭据，将用户名保存到 cookie 会话中，并响应请求的内容以及一个包含用户名的 cookie。</li><li>客户端使用 cookie 向受保护的资源发出后续请求。</li><li>根据收到的 cookie 数据，Ktor 检测此用户是否存在 cookie 会话，并且，可选地，对收到的会话数据执行额外的验证。在验证成功的情况下，服务器响应请求的内容。</li></ol><h2 id="install" tabindex="-1">安装会话认证 <a class="header-anchor" href="#install" aria-label="Permalink to &quot;安装会话认证 {id=&quot;install&quot;}&quot;">​</a></h2><p>为了安装 <code>session</code> 认证提供程序，请在 <code>install</code> 代码块内调用 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/session.html" target="_blank" rel="noreferrer">session</a> 函数，并传入所需的会话类型：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.sessions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 配置会话认证</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configure" tabindex="-1">配置会话认证 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置会话认证 {id=&quot;configure&quot;}&quot;">​</a></h2><p>本节演示了如何使用 <a href="./server-form-based-auth">基于表单的认证</a> 认证用户，将此用户的信息保存到 cookie 会话中，然后在使用 <code>session</code> 提供程序的后续请求中授权该用户。</p><blockquote><p>有关完整示例，请参见 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session" target="_blank" rel="noreferrer">auth-form-session</a>。</p></blockquote><h3 id="data-class" tabindex="-1">步骤 1：创建数据类 <a class="header-anchor" href="#data-class" aria-label="Permalink to &quot;步骤 1：创建数据类 {id=&quot;data-class&quot;}&quot;">​</a></h3><p>首先，你需要创建一个数据类用于存储会话数据：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="install-session" tabindex="-1">步骤 2：安装并配置会话 <a class="header-anchor" href="#install-session" aria-label="Permalink to &quot;步骤 2：安装并配置会话 {id=&quot;install-session&quot;}&quot;">​</a></h3><p>创建数据类后，你需要安装并配置 <code>Sessions</code> 插件。以下示例安装并配置了一个 cookie 会话，带有指定的 cookie 路径和过期时间。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user_session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.maxAgeInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>要了解更多关于配置会话的信息，请参见 <a href="./server-sessions#configuration_overview">会话配置概述</a>。</p></blockquote><h3 id="configure-session-auth" tabindex="-1">步骤 3：配置会话认证 <a class="header-anchor" href="#configure-session-auth" aria-label="Permalink to &quot;步骤 3：配置会话认证 {id=&quot;configure-session-auth&quot;}&quot;">​</a></h3><p><code>session</code> 认证提供程序通过 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-session-authentication-provider/-config/index.html" target="_blank" rel="noreferrer"><code>SessionAuthenticationProvider.Config</code></a> 类公开其设置。在以下示例中，指定了以下设置：</p><ul><li><code>validate()</code> 函数检测 <a href="#data-class">会话实例</a>，并在认证成功的情况下返回 <code>Any</code> 类型的 principal。</li><li><code>challenge()</code> 函数指定了认证失败时执行的操作。例如，你可以重定向回登录页面或发送一个 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-unauthorized-response/index.html" target="_blank" rel="noreferrer"><code>UnauthorizedResponse</code></a>。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { session </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(session.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        challenge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondRedirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="save-session" tabindex="-1">步骤 4：在会话中保存用户数据 <a class="header-anchor" href="#save-session" aria-label="Permalink to &quot;步骤 4：在会话中保存用户数据 {id=&quot;save-session&quot;}&quot;">​</a></h3><p>要将已登录用户的信息保存到会话中，请使用 <a href="./server-sessions#use_sessions"><code>call.sessions.set()</code></a> 函数。</p><p>以下示例展示了一个使用 web 表单的简单认证流程：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()?.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userName, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondRedirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>有关基于表单的认证流程的更多详细信息，请参考 <a href="./server-form-based-auth">基于表单的认证</a> 文档。</p></blockquote><h3 id="authenticate-route" tabindex="-1">步骤 5：保护特定资源 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;步骤 5：保护特定资源 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p>配置 <code>session</code> 提供程序后，你可以在你的应用程序中使用 <a href="./server-auth#authenticate-route"><code>authenticate()</code></a> 函数保护特定资源。</p><p>认证成功后，你可以通过在路由处理程序内使用 <code>call.principal()</code> 函数来检索已认证的 principal（在这种情况下，是 <a href="#data-class"><code>UserSession</code></a> 实例）：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userSession?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${userSession?.name}! Visit count is \${userSession?.count}.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>有关完整示例，请参见 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session" target="_blank" rel="noreferrer">auth-form-session</a>。</p></blockquote>`,30))])}const _=E(u,[["render",y]]);export{q as __pageData,_ as default};
