import{_ as i,a,b as n,c as l}from"./chunks/expect-di-framework.p8QbgfKZ.js";import{_ as t,c as p,o as h,ag as e}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"使用平台特有的 API","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-connect-to-apis.md","filePath":"kmp/multiplatform-connect-to-apis.md","lastUpdated":1755516278000}'),k={name:"kmp/multiplatform-connect-to-apis.md"};function d(r,s,o,c,g,E){return h(),p("div",null,s[0]||(s[0]=[e('<h1 id="使用平台特有的-api" tabindex="-1">使用平台特有的 API <a class="header-anchor" href="#使用平台特有的-api" aria-label="Permalink to &quot;使用平台特有的 API&quot;">​</a></h1><p><code>[//]: # (title: 使用平台特有的 API)</code></p><p>在本文中，你将学习如何在开发多平台应用程序和库时使用平台特有的 API。</p><h2 id="kotlin-多平台库" tabindex="-1">Kotlin 多平台库 <a class="header-anchor" href="#kotlin-多平台库" aria-label="Permalink to &quot;Kotlin 多平台库&quot;">​</a></h2><p>在编写使用平台特有的 API 的代码之前，检测你是否可以使用多平台库来替代。这类库提供一个通用的 Kotlin API，该 API 在不同平台上有不同的实现。</p><p>已经有许多可用的库，你可以使用它们来实现网络、日志记录和分析功能，以及访问设备功能等。关于更多信息，请参见 <a href="https://github.com/terrakok/kmm-awesome" target="_blank" rel="noreferrer">此精选列表</a>。</p><h2 id="期望与实际函数及属性" tabindex="-1">期望与实际函数及属性 <a class="header-anchor" href="#期望与实际函数及属性" aria-label="Permalink to &quot;期望与实际函数及属性&quot;">​</a></h2><p>Kotlin 提供一种语言机制，用于在开发通用逻辑时访问平台特有的 API：<a href="./multiplatform-expect-actual">期望与实际声明</a>。</p><p>通过此机制，多平台模块的公共源代码集定义一个期望声明，并且每个平台源代码集都必须提供与该期望声明对应的实际声明。编译器确保公共源代码集中用 <code>expect</code> 关键字标记的每个声明都在所有目标平台源代码集中具有用 <code>actual</code> 关键字标记的对应声明。</p><p>这适用于大多数 Kotlin 声明，例如函数、类、接口、枚举、属性和注解。本节侧重于使用期望与实际函数及属性。</p><p><img src="'+i+`" alt="使用期望与实际函数及属性" width="700"></p><p>在此示例中，你将在公共源代码集中定义一个期望的 <code>platform()</code> 函数，并在平台源代码集中提供实际实现。在为特定平台生成代码时，Kotlin 编译器会合并期望与实际声明。它会生成一个 <code>platform()</code> 函数及其实际实现。期望与实际声明应在同一个包中定义，并在结果平台代码中合并为 <em>一个声明</em>。在生成的平台代码中，对期望 <code>platform()</code> 函数的任何调用都将调用正确的实际实现。</p><h3 id="示例-生成一个-uuid" tabindex="-1">示例：生成一个 UUID <a class="header-anchor" href="#示例-生成一个-uuid" aria-label="Permalink to &quot;示例：生成一个 UUID&quot;">​</a></h3><p>假设你正在使用 Kotlin Multiplatform 开发 iOS 和 Android 应用程序，并且想要生成一个通用唯一标识符 (UUID)。</p><p>为此，在你的 Kotlin Multiplatform 模块的公共源代码集中，用 <code>expect</code> 关键字声明期望函数 <code>randomUUID()</code>。<strong>不要</strong> 包含任何实现代码。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在公共源代码集中：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span></code></pre></div><p>在每个平台特有的源代码集（iOS 和 Android）中，为公共模块中期望的 <code>randomUUID()</code> 函数提供实际实现。使用 <code>actual</code> 关键字来标记这些实际实现。</p><p><img src="`+a+`" alt="使用期望与实际声明生成 UUID" width="700"></p><p>以下代码片段展示了 Android 和 iOS 的实现。平台特有的代码使用 <code>actual</code> 关键字和相同的函数名称：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 android 源代码集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.util.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 iOS 源代码集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.Foundation.NSUUID</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NSUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UUIDString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Android 实现使用 Android 上可用的 API，而 iOS 实现使用 iOS 上可用的 API。你可以从 Kotlin/Native 代码访问 iOS API。</p><p>在为 Android 生成结果平台代码时，Kotlin 编译器自动合并期望与实际声明，并生成一个 <code>randomUUID()</code> 函数及其 Android 特有的实际实现。iOS 也重复同样的过程。</p><p>为简化起见，本示例和以下示例使用简化的源代码集名称 “common”、“ios” 和 “android”。通常，这表示 <code>commonMain</code>、<code>iosMain</code> 和 <code>androidMain</code>，并且类似的逻辑可以定义在测试源代码集 <code>commonTest</code>、<code>iosTest</code> 和 <code>androidTest</code> 中。</p><p>与期望与实际函数类似，期望与实际属性允许你在不同平台使用不同的值。期望与实际函数及属性对于简单情况最有用。</p><h2 id="通用代码中的接口" tabindex="-1">通用代码中的接口 <a class="header-anchor" href="#通用代码中的接口" aria-label="Permalink to &quot;通用代码中的接口&quot;">​</a></h2><p>如果平台特有的逻辑过大且复杂，你可以通过在通用代码中定义一个接口来表示它，然后在平台源代码集中提供不同的实现，从而简化你的代码。</p><p><img src="`+n+`" alt="使用接口" width="700"></p><p>平台源代码集中的实现使用它们对应的依赖项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 commonMain 源代码集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 androidMain 源代码集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android.os.Build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Android \${Build.VERSION.SDK_INT}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 iosMain 源代码集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.UIKit.UIDevice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.systemVersion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当需要通用接口时，为了注入合适的平台实现，你可以选择以下选项之一，每个选项都将在下面详细解释：</p><ul><li><a href="#expected-and-actual-functions">使用期望与实际函数</a></li><li><a href="#different-entry-points">通过不同入口点提供实现</a></li><li><a href="#dependency-injection-framework">使用依赖注入框架</a></li></ul><h3 id="期望与实际函数" tabindex="-1">期望与实际函数 <a class="header-anchor" href="#期望与实际函数" aria-label="Permalink to &quot;期望与实际函数&quot;">​</a></h3><p>定义一个返回此接口值的期望函数，然后定义返回其子类的实际函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 commonMain 源代码集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 androidMain 源代码集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 iosMain 源代码集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>当你在通用代码中调用 <code>platform()</code> 函数时，它可以使用 <code>Platform</code> 类型的对象。当你在 Android 上运行此通用代码时，<code>platform()</code> 调用将返回 <code>AndroidPlatform</code> 类的一个实例。当你在 iOS 上运行它时，<code>platform()</code> 将返回 <code>IOSPlatform</code> 类的一个实例。</p><h3 id="不同入口点" tabindex="-1">不同入口点 <a class="header-anchor" href="#不同入口点" aria-label="Permalink to &quot;不同入口点&quot;">​</a></h3><p>如果你控制入口点，则无需使用期望与实际声明即可构造每个平台构件的实现。为此，在共享 Kotlin Multiplatform 模块中定义平台实现，但在平台模块中实例化它们：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 共享 Kotlin Multiplatform 模块</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 commonMain 源代码集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // application logic</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 androidMain 源代码集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 iosMain 源代码集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 androidApp 平台模块中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android.app.Application</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mysharedpackage.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 iosApp 平台模块中（在 Swift 中）：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> iOSApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 Android 上，你应该创建一个 <code>AndroidPlatform</code> 实例并将其传递给 <code>application()</code> 函数，而在 iOS 上，你应该类似地创建并传递一个 <code>IOSPlatform</code> 实例。这些入口点不必是你的应用程序的入口点，但你可以在这里调用共享模块的特定功能。</p><p>通过期望与实际函数或直接通过入口点提供正确的实现对于简单场景效果良好。然而，如果你的项目中使用依赖注入框架，我们建议在简单情况下也使用它以确保一致性。</p><h3 id="依赖注入框架" tabindex="-1">依赖注入框架 <a class="header-anchor" href="#依赖注入框架" aria-label="Permalink to &quot;依赖注入框架&quot;">​</a></h3><p>现代应用程序通常使用依赖注入 (DI) 框架来创建松散耦合架构。DI 框架允许根据当前环境将依赖项注入组件。</p><p>任何支持 Kotlin Multiplatform 的 DI 框架都可以帮助你为不同平台注入不同的依赖项。</p><p>例如，<a href="https://insert-koin.io/" target="_blank" rel="noreferrer">Koin</a> 是一个支持 Kotlin Multiplatform 的依赖注入框架：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在公共源代码集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.koin.dsl.module</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platformModule: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 androidMain 源代码集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platformModule: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 iosMain 源代码集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platformModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这里，Koin DSL 创建定义用于注入组件的模块。你在通用代码中使用 <code>expect</code> 关键字声明一个模块，然后使用 <code>actual</code> 关键字为每个平台提供一个平台特有的实现。框架负责在运行时选择正确的实现。</p><p>当你使用 DI 框架时，你会通过此框架注入所有依赖项。同样的逻辑也适用于处理平台依赖项。如果你的项目中已经使用了 DI，我们建议继续使用它，而不是手动使用期望与实际函数。这样，你可以避免混合两种不同的依赖注入方式。</p><p>你也不必总是在 Kotlin 中实现通用接口。你可以在另一种语言（例如 Swift）中，在不同的 <em>平台模块</em> 中完成。如果你选择这种方法，你应该然后使用 DI 框架从 iOS 平台模块提供实现：</p><p><img src="`+l+'" alt="使用依赖注入框架" width="700"></p><p>这种方法仅在你将实现放在平台模块中时有效。它并不是很可伸缩，因为你的 Kotlin Multiplatform 模块无法自给自足，并且你需要在不同的模块中实现通用接口。</p><h2 id="下一步是什么" tabindex="-1">下一步是什么？ <a class="header-anchor" href="#下一步是什么" aria-label="Permalink to &quot;下一步是什么？&quot;">​</a></h2><ul><li>观看 <a href="https://youtu.be/bSNumV04y_w" target="_blank" rel="noreferrer">在 KMP 应用程序中使用平台特有的 API</a> 的视频演练。</li><li>关于期望/实际机制的更多示例和信息，请参见 <a href="./multiplatform-expect-actual">期望与实际声明</a>。</li></ul>',63)]))}const u=t(k,[["render",d]]);export{m as __pageData,u as default};
