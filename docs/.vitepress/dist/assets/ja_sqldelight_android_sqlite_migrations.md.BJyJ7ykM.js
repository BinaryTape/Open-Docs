import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"マイグレーション","description":"","frontmatter":{},"headers":[],"relativePath":"ja/sqldelight/android_sqlite/migrations.md","filePath":"ja/sqldelight/android_sqlite/migrations.md","lastUpdated":1748435462000}'),t={name:"ja/sqldelight/android_sqlite/migrations.md"};function l(h,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="マイグレーション" tabindex="-1">マイグレーション <a class="header-anchor" href="#マイグレーション" aria-label="Permalink to &quot;マイグレーション&quot;">​</a></h1><p><code>.sq</code>ファイルは、空のデータベースで最新のスキーマを作成する方法を常に記述します。データベースが現在古いバージョンである場合、マイグレーションファイルはそれらのデータベースを最新の状態に更新します。マイグレーションファイルは、<code>.sq</code>ファイルと同じ<code>sqldelight</code>フォルダーに保存されます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src</span></span>
<span class="line"><span>└─ main</span></span>
<span class="line"><span>   └─ sqdelight</span></span>
<span class="line"><span>      ├─ com/example/hockey</span></span>
<span class="line"><span>      |  ├─ Team.sq</span></span>
<span class="line"><span>      |  └─ Player.sq</span></span>
<span class="line"><span>      └─ migrations</span></span>
<span class="line"><span>         ├─ 1.sqm</span></span>
<span class="line"><span>         └─ 2.sqm</span></span></code></pre></div><p>ドライバがサポートしている場合、マイグレーションはトランザクション内で実行されます。一部のドライバではクラッシュの原因となる可能性があるため、マイグレーションを<code>BEGIN/END TRANSACTION</code>で囲むべきではありません。</p><h2 id="バージョニング" tabindex="-1">バージョニング <a class="header-anchor" href="#バージョニング" aria-label="Permalink to &quot;バージョニング&quot;">​</a></h2><p>スキーマの最初のバージョンは1です。マイグレーションファイルは<code>&lt;version to upgrade from&gt;.sqm</code>という名前で付けられます。バージョン2にマイグレーションするには、マイグレーションステートメントを<code>1.sqm</code>に記述します。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ADD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COLUMN draft_year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INTEGER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ADD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COLUMN draft_order </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INTEGER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>これらのSQLステートメントは、<code>Database.Schema.migrate()</code>メソッドによって実行されます。マイグレーションファイルは、<code>.sq</code>ファイルと同じソースセットに配置されます。</p><h2 id="マイグレーションの検証" tabindex="-1">マイグレーションの検証 <a class="header-anchor" href="#マイグレーションの検証" aria-label="Permalink to &quot;マイグレーションの検証&quot;">​</a></h2><p><code>verifySqlDelightMigration</code>タスクがGradleプロジェクトに追加され、<code>check</code>タスクの一部として実行されます。SqlDelightのソースセット（例: <code>src/main/sqldelight</code>）にある<code>&lt;version number&gt;.db</code>という名前の<code>.db</code>ファイルに対して、<code>&lt;version number&gt;.sqm</code>から始まるすべてのマイグレーションが適用され、そのマイグレーションが最新のスキーマを持つデータベースを生成することを確認します。</p><p>最新のスキーマから<code>.db</code>ファイルを生成するには、<a href="/ja/sqldelight/android_sqlite/gradle.md">gradle.md</a>で説明されているように<code>schemaOutputDirectory</code>を指定すると利用可能になる<code>generate&lt;source set name&gt;&lt;database name&gt;Schema</code>タスクを実行します。これは、最初のマイグレーションを作成する前に行うのが良いでしょう。例えば、プロジェクトが<code>main</code>ソースセットと<code>&quot;MyDatabase&quot;</code>というカスタム名を使用している場合、<code>generateMainMyDatabaseSchema</code>タスクを実行する必要があります。</p><p>ほとんどのユースケースでは、データベースの初期バージョンのスキーマを表す<code>1.db</code>ファイルのみを持つことが有利です。複数の<code>.db</code>ファイルを持つことは可能ですが、その場合、各<code>.db</code>ファイルにそれぞれのマイグレーションが適用されることになり、多くの不要な作業が発生します。</p><h2 id="コードマイグレーション" tabindex="-1">コードマイグレーション <a class="header-anchor" href="#コードマイグレーション" aria-label="Permalink to &quot;コードマイグレーション&quot;">​</a></h2><p>コードからマイグレーションを実行し、データマイグレーションを実行したい場合は、<code>Database.Schema.migrate</code> APIを使用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Database.Schema.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">migrate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    driver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> database,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oldVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    newVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Database.Schema.version,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    AfterVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { driver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> driver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;INSERT INTO test (value) VALUES(&#39;hello&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>以下の例では、1.sqm、2.sqm、3.sqm、4.sqm、5.sqmをマイグレーションとして持っている場合、上記のコールバックはデータベースがバージョン4のときに3.sqmが完了した後に発生します。コールバックの後、4.sqmから再開し、残りのマイグレーション（このケースでは4.sqmと5.sqm）を完了し、最終的なデータベースバージョンは6となります。</p><p><code>AndroidSqliteDriver</code>を使用している場合、ドライバーの作成時にこれらのコールバックを渡すことができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> driver: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SqlDriver</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidSqliteDriver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    schema </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Database.Schema,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test.db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    callback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AndroidSqliteDriver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        schema </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Database.Schema,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        AfterVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { driver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> driver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;INSERT INTO test (value) VALUES(&#39;hello&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,18)]))}const c=i(t,[["render",l]]);export{o as __pageData,c as default};
