import{_ as h,C as t,c as k,o as r,j as s,G as n,ag as l,a,w as e}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"CocoaPods Gradle 플러그인 DSL 참조","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/multiplatform-cocoapods-dsl-reference.md","filePath":"ko/kmp/multiplatform-cocoapods-dsl-reference.md","lastUpdated":1755516278000}'),c={name:"ko/kmp/multiplatform-cocoapods-dsl-reference.md"},E={tabindex:"0"};function g(u,i,y,F,m,C){const o=t("tldr"),d=t("list"),p=t("code-block");return r(),k("div",null,[i[12]||(i[12]=s("h1",{id:"cocoapods-gradle-플러그인-dsl-참조",tabindex:"-1"},[a("CocoaPods Gradle 플러그인 DSL 참조 "),s("a",{class:"header-anchor",href:"#cocoapods-gradle-플러그인-dsl-참조","aria-label":'Permalink to "CocoaPods Gradle 플러그인 DSL 참조"'},"​")],-1)),n(o,null,{default:e(()=>i[0]||(i[0]=[s("ul",null,[s("li",null,[a("Pod 의존성을 추가하기 전에, "),s("a",{href:"./multiplatform-cocoapods-overview#set-up-an-environment-to-work-with-cocoapods"},"초기 구성을 완료하세요"),a(".")]),s("li",null,[s("a",{href:"https://github.com/Kotlin/kmp-with-cocoapods-multitarget-xcode-sample",target:"_blank",rel:"noreferrer"},"Kotlin 프로젝트에서 다양한 Pod 의존성이 설정된 샘플 프로젝트"),a("를 참조하세요.")]),s("li",null,[s("a",{href:"https://github.com/Kotlin/kmp-with-cocoapods-multitarget-xcode-sample",target:"_blank",rel:"noreferrer"},"여러 타겟을 가진 Xcode 프로젝트가 Kotlin 라이브러리에 의존하는 샘플 프로젝트"),a("를 확인하세요.")])],-1)])),_:1}),i[13]||(i[13]=l("",23)),s("table",E,[i[11]||(i[11]=s("thead",null,[s("tr",null,[s("th",null,[s("strong",null,"이름")]),s("th",null,[s("strong",null,"설명")])])],-1)),s("tbody",null,[i[6]||(i[6]=s("tr",null,[s("td",null,[s("code",null,"version")]),s("td",null,"라이브러리 버전입니다. 라이브러리의 최신 버전을 사용하려면 매개변수를 생략합니다.")],-1)),s("tr",null,[i[3]||(i[3]=s("td",null,[s("code",null,"source")],-1)),s("td",null,[i[2]||(i[2]=a("다음에서 Pod를 구성합니다: ")),n(d,null,{default:e(()=>i[1]||(i[1]=[s("li",null,[s("code",null,"git()"),a("을 사용하는 Git 리포지토리. "),s("code",null,"git()"),a(" 뒤의 블록에서 특정 커밋을 사용하려면 "),s("code",null,"commit"),a("을, 특정 태그를 사용하려면 "),s("code",null,"tag"),a("를, 리포지토리의 특정 브랜치를 사용하려면 "),s("code",null,"branch"),a("를 지정할 수 있습니다.")],-1),s("li",null,[s("code",null,"path()"),a("를 사용하는 로컬 리포지토리")],-1)])),_:1})])]),i[7]||(i[7]=s("tr",null,[s("td",null,[s("code",null,"packageName")]),s("td",null,"패키지 이름을 지정합니다.")],-1)),s("tr",null,[i[5]||(i[5]=s("td",null,[s("code",null,"extraOpts")],-1)),s("td",null,[i[4]||(i[4]=a("Pod 라이브러리에 대한 옵션 목록을 지정합니다. 예를 들어, 특정 플래그: ")),n(p,{lang:"Kotlin",code:'extraOpts = listOf("-compiler-option")'})])]),i[8]||(i[8]=s("tr",null,[s("td",null,[s("code",null,"linkOnly")]),s("td",null,"CocoaPods 플러그인에 cinterop 바인딩을 생성하지 않고 동적 프레임워크와 함께 Pod 의존성을 사용하도록 지시합니다. 정적 프레임워크와 함께 사용하면 이 옵션은 Pod 의존성을 완전히 제거합니다.")],-1)),i[9]||(i[9]=s("tr",null,[s("td",null,[s("code",null,"interopBindingDependencies")]),s("td",null,"다른 Pod에 대한 의존성 목록을 포함합니다. 이 목록은 새 Pod에 대한 Kotlin 바인딩을 빌드할 때 사용됩니다.")],-1)),i[10]||(i[10]=s("tr",null,[s("td",null,[s("code",null,"useInteropBindingFrom()")]),s("td",null,"의존성으로 사용되는 기존 Pod의 이름을 지정합니다. 이 Pod는 함수 실행 전에 선언되어야 합니다. 이 함수는 CocoaPods 플러그인에 새 Pod에 대한 바인딩을 빌드할 때 기존 Pod의 Kotlin 바인딩을 사용하도록 지시합니다.")],-1))])]),i[14]||(i[14]=l("",3))])}const B=h(c,[["render",g]]);export{q as __pageData,B as default};
