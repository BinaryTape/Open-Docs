import{_ as i,a as n,b as o}from"./chunks/compose-hot-reload-hello.B2T097lK.js";import{_ as p}from"./chunks/gradle-sync.fCQp85Nh.js";import{_ as h}from"./chunks/compose-hot-reload-gutter-run.m_A5v9gh.js";import{_ as k,C as a,c as r,o as d,G as t,ag as c}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/compose-hot-reload.md","filePath":"zh-Hant/kmp/compose-hot-reload.md","lastUpdated":1755516278000}'),g={name:"zh-Hant/kmp/compose-hot-reload.md"};function E(m,s,u,y,C,F){const e=a("TopicTitle"),l=a("primary-label");return d(),r("div",null,[t(e,{labelRef:"alpha",title:"Compose Hot Reload"}),t(l,{ref:"alpha"},null,512),s[0]||(s[0]=c('<p>Compose Hot Reload 可協助您在處理 Compose Multiplatform 專案時，視覺化並試驗使用者介面 (UI) 的變更。</p><p>目前，Compose Hot Reload 僅在您的多平台專案中包含桌面目標時可用。我們正在探索未來新增對其他目標的支援。同時，使用桌面應用程式作為您的沙盒，可讓您快速試驗通用程式碼中的 UI 變更，而不會中斷您的工作流程。</p><p><img src="'+i+'" alt="Compose Hot Reload" width="500"></p><h2 id="將-compose-hot-reload-加入您的專案" tabindex="-1">將 Compose Hot Reload 加入您的專案 <a class="header-anchor" href="#將-compose-hot-reload-加入您的專案" aria-label="Permalink to &quot;將 Compose Hot Reload 加入您的專案&quot;">​</a></h2><p>Compose Hot Reload 可以透過兩種方式新增：</p><ul><li><a href="#from-scratch">在 IntelliJ IDEA 或 Android Studio 中從頭開始建立專案</a></li><li><a href="#to-an-existing-project">將其作為 Gradle 外掛程式新增到現有專案</a></li></ul><h3 id="從頭開始" tabindex="-1">從頭開始 <a class="header-anchor" href="#從頭開始" aria-label="Permalink to &quot;從頭開始&quot;">​</a></h3><p>本節將引導您完成在 IntelliJ IDEA 和 Android Studio 中建立包含桌面目標的多平台專案的步驟。當您的專案建立後，Compose Hot Reload 會自動加入。</p><ol><li>在 <a href="./quickstart">快速入門</a> 中，完成 <a href="./quickstart#set-up-the-environment">為 Kotlin Multiplatform 開發設定環境</a> 的說明。</li><li>在 IntelliJ IDEA 中，選取 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>。</li><li>在左側面板中，選取 <strong>Kotlin Multiplatform</strong>。</li><li>在 <strong>New Project</strong> 視窗中指定 <strong>Name</strong>、<strong>Group</strong> 和 <strong>Artifact</strong> 欄位。</li><li>選取 <strong>Desktop</strong> 目標並點擊 <strong>Create</strong>。 <img src="'+n+`" alt="Create multiplatform project with desktop target" width="700"></li></ol><h3 id="加入到現有專案" tabindex="-1">加入到現有專案 <a class="header-anchor" href="#加入到現有專案" aria-label="Permalink to &quot;加入到現有專案&quot;">​</a></h3><p>本節將引導您完成將 Compose Hot Reload 加入到現有多平台專案的步驟。這些步驟以 <a href="./compose-multiplatform-create-first-app">建立具有共享邏輯和 UI 的應用程式</a> 教學課程中的專案作為參考。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>若要尋找最新版本的 Compose Hot Reload，請參閱 <a href="https://github.com/JetBrains/compose-hot-reload/releases" target="_blank" rel="noreferrer">Releases</a>。</p></div><ol><li><p>在您的專案中，更新版本目錄。在 <code>gradle/libs.versions.toml</code> 中，新增以下程式碼：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">composeHotReload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.compose.hot-reload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composeHotReload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>若要了解如何使用版本目錄集中管理專案中的依賴項，請參閱我們的 <a href="https://kotlinlang.org/gradle-best-practices.html" target="_blank" rel="noreferrer">Gradle 最佳實踐</a>。</p></blockquote></li><li><p>在父專案的 <code>build.gradle.kts</code> (<code>ComposeDemo/build.gradle.kts</code>) 中，將以下程式碼新增到您的 <code>plugins {}</code> 區塊：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.composeHotReload) apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>這可防止 Compose Hot Reload 外掛程式在您的每個子專案中多次載入。</p></li><li><p>在包含您的多平台應用程式的子專案的 <code>build.gradle.kts</code> (<code>ComposeDemo/composeApp/build.gradle.kts</code>) 中，將以下程式碼新增到您的 <code>plugins {}</code> 區塊：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.composeHotReload)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>若要使用 Compose Hot Reload 的完整功能，您的專案必須在 <a href="https://github.com/JetBrains/JetBrainsRuntime" target="_blank" rel="noreferrer">JetBrains Runtime</a> (JBR) 上執行，這是一個支援增強類別重定義的 OpenJDK 分支。 Compose Hot Reload 可以為您的專案自動提供相容的 JBR。為此，請將以下 Gradle 外掛程式新增到您的 <code>settings.gradle.kts</code> 檔案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.gradle.toolchains.foojay-resolver-convention&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.10.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>點擊 <strong>Sync Gradle Changes</strong> 按鈕以同步化 Gradle 檔案： <img src="`+p+`" alt="Synchronize Gradle files" width="50"></p></li></ol><h2 id="使用-compose-hot-reload" tabindex="-1">使用 Compose Hot Reload <a class="header-anchor" href="#使用-compose-hot-reload" aria-label="Permalink to &quot;使用 Compose Hot Reload&quot;">​</a></h2><ol><li><p>在 <code>desktopMain</code> 目錄中，開啟 <code>main.kt</code> 檔案並更新 <code>main()</code> 函數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        onCloseRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exitApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        alwaysOnTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composedemo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>透過將 <code>alwaysOnTop</code> 變數設定為 <code>true</code>，生成的桌面應用程式會保持在所有視窗之上，使您更容易編輯程式碼並即時查看變更。</p></li><li><p>在 <code>commonMain</code> 目錄中，開啟 <code>App.kt</code> 檔案並更新 <code>Button</code> 可組合項：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">showContent }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>現在，按鈕的文字由 <code>greet()</code> 函數控制。</p></li><li><p>在 <code>commonMain</code> 目錄中，開啟 <code>Greeting.kt</code> 檔案並更新 <code>greet()</code> 函數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div></li><li><p>在 <code>desktopMain</code> 目錄中，開啟 <code>main.kt</code> 檔案並點擊編輯器邊欄中的 <strong>Run</strong> 圖示。選取 <strong>Run &#39;composeApp [desktop]&#39; with Compose Hot Reload (Alpha)</strong>。</p><p><img src="`+h+'" alt="Run Compose Hot Reload from gutter" width="350"></p><p><img src="'+o+'" alt="First Compose Hot Reload on desktop app" width="500"></p></li><li><p>更新從 <code>greet()</code> 函數返回的字串，然後儲存檔案以查看桌面應用程式自動更新。</p><p><img src="'+i+'" alt="Compose Hot Reload" width="500"></p></li></ol><p>恭喜！您已經看到 Compose Hot Reload 的實際運作。現在您可以試驗更改文字、圖像、格式、UI 結構等，而無需在每次更改後重新啟動桌面執行設定。</p><h2 id="尋求協助" tabindex="-1">尋求協助 <a class="header-anchor" href="#尋求協助" aria-label="Permalink to &quot;尋求協助&quot;">​</a></h2><p>如果您在使用 Compose Hot Reload 時遇到任何問題，請透過 <a href="https://github.com/JetBrains/compose-hot-reload/issues" target="_blank" rel="noreferrer">建立 GitHub 問題</a> 告知我們。</p>',18))])}const R=k(g,[["render",E]]);export{B as __pageData,R as default};
