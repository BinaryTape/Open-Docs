import{_ as i,a,b as n,c as t}from"./chunks/convert-java-to-kotlin.BPRm1iLF.js";import{_ as l,c as p,o as h,ag as e}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"JavaとKotlinを1つのプロジェクトで混在させる – チュートリアル","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/mixing-java-kotlin-intellij.md","filePath":"ja/kotlin/mixing-java-kotlin-intellij.md","lastUpdated":1754307826000}'),k={name:"ja/kotlin/mixing-java-kotlin-intellij.md"};function r(o,s,E,d,g,c){return h(),p("div",null,s[0]||(s[0]=[e('<h1 id="javaとkotlinを1つのプロジェクトで混在させる-–-チュートリアル" tabindex="-1">JavaとKotlinを1つのプロジェクトで混在させる – チュートリアル <a class="header-anchor" href="#javaとkotlinを1つのプロジェクトで混在させる-–-チュートリアル" aria-label="Permalink to &quot;JavaとKotlinを1つのプロジェクトで混在させる – チュートリアル&quot;">​</a></h1><p>KotlinはJavaとの優れた相互運用性を提供し、最新のIDEはそれをさらに向上させます。 このチュートリアルでは、IntelliJ IDEAでKotlinとJavaの両方のソースコードを同じプロジェクトで使う方法を学習します。 IntelliJ IDEAで新しいKotlinプロジェクトを開始する方法については、<a href="/ja/kotlin/jvm-get-started">IntelliJ IDEAでの開始方法</a>を参照してください。</p><h2 id="既存のkotlinプロジェクトにjavaソースコードを追加する" tabindex="-1">既存のKotlinプロジェクトにJavaソースコードを追加する <a class="header-anchor" href="#既存のkotlinプロジェクトにjavaソースコードを追加する" aria-label="Permalink to &quot;既存のKotlinプロジェクトにJavaソースコードを追加する&quot;">​</a></h2><p>KotlinプロジェクトにJavaクラスを追加するのは非常に簡単です。新しいJavaファイルを作成するだけです。 プロジェクト内のディレクトリまたはパッケージを選択し、<strong>File</strong> | <strong>New</strong> | <strong>Java Class</strong> に移動するか、<strong>Alt + Insert</strong>/<strong>Cmd + N</strong> ショートカットを使用します。</p><p><img src="'+i+`" alt="新しいJavaクラスの追加" width="400"></p><p>すでにJavaクラスがある場合は、それらをプロジェクトディレクトリにコピーするだけでかまいません。</p><p>これで、追加の操作なしでKotlinからJavaクラスを利用したり、その逆を行ったりすることができます。</p><p>例えば、以下のJavaクラスを追加すると：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> placeOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A new order is placed by &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlinから、他のKotlinの型と同様に呼び出すことができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Phase&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customer.name)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">placeOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><h2 id="既存のjavaプロジェクトにkotlinソースコードを追加する" tabindex="-1">既存のJavaプロジェクトにKotlinソースコードを追加する <a class="header-anchor" href="#既存のjavaプロジェクトにkotlinソースコードを追加する" aria-label="Permalink to &quot;既存のJavaプロジェクトにKotlinソースコードを追加する&quot;">​</a></h2><p>既存のJavaプロジェクトにKotlinファイルを追加するのもほぼ同じです。</p><p><img src="`+a+'" alt="新しいKotlinファイルクラスの追加" width="400"></p><p>このプロジェクトにKotlinファイルを初めて追加する場合、IntelliJ IDEAは必要なKotlinランタイムを自動的に追加します。</p><p><img src="'+n+'" alt="Kotlinランタイムのバンドル" width="350"></p><p>また、<strong>Tools</strong> | <strong>Kotlin</strong> | <strong>Configure Kotlin in Project</strong> から手動でKotlinランタイム設定を開くこともできます。</p><h2 id="j2kで既存のjavaファイルをkotlinに変換する" tabindex="-1">J2Kで既存のJavaファイルをKotlinに変換する <a class="header-anchor" href="#j2kで既存のjavaファイルをkotlinに変換する" aria-label="Permalink to &quot;J2Kで既存のJavaファイルをKotlinに変換する&quot;">​</a></h2><p>Kotlinプラグインには、JavaファイルをKotlinに自動変換するJavaからKotlinへのコンバーター（<em>J2K</em>）も同梱されています。 ファイルでJ2Kを使用するには、そのコンテキストメニューまたはIntelliJ IDEAの<strong>Code</strong>メニューで<strong>Convert Java File to Kotlin File</strong>をクリックします。</p><p><img src="'+t+'" alt="JavaからKotlinへ変換" width="500"></p><p>このコンバーターは完璧ではありませんが、ほとんどのJavaのボイラープレートコードをKotlinに変換するのに十分な働きをします。ただし、手動での調整が時々必要になります。</p>',21)]))}const F=l(k,[["render",r]]);export{m as __pageData,F as default};
