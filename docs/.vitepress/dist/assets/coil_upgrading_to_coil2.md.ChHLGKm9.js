import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"升级到 Coil 2.x","description":"","frontmatter":{},"headers":[],"relativePath":"coil/upgrading_to_coil2.md","filePath":"coil/upgrading_to_coil2.md","lastUpdated":1753369988000}'),l={name:"coil/upgrading_to_coil2.md"};function t(h,s,p,k,d,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="升级到-coil-2-x" tabindex="-1">升级到 Coil 2.x <a class="header-anchor" href="#升级到-coil-2-x" aria-label="Permalink to &quot;升级到 Coil 2.x&quot;">​</a></h1><p>这是一份简短的指南，旨在强调从 Coil 1.x 升级到 2.x 时的主要变化以及如何处理它们。本升级指南不涵盖所有二进制或源不兼容的更改，但它涵盖了最重要的更改。</p><h2 id="最低-api-21" tabindex="-1">最低 API 21 <a class="header-anchor" href="#最低-api-21" aria-label="Permalink to &quot;最低 API 21&quot;">​</a></h2><p>Coil 2.x 要求最低 API 21。这也是 Compose 和 OkHttp 4.x 所要求的最低 API。</p><h2 id="imagerequest-默认缩放" tabindex="-1">ImageRequest 默认缩放 <a class="header-anchor" href="#imagerequest-默认缩放" aria-label="Permalink to &quot;ImageRequest 默认缩放&quot;">​</a></h2><p>Coil 2.x 将 <code>ImageRequest</code> 的默认缩放从 <code>Scale.FILL</code> 更改为 <code>Scale.FIT</code>。这样做是为了与 <code>ImageView</code> 的默认 <code>ScaleType</code> 和 <code>Image</code> 的默认 <code>ContentScale</code> 保持一致。如果您将 <code>ImageView</code> 设置为 <code>ImageRequest.target</code>，缩放仍然会进行自动检测。</p><h2 id="size-重构" tabindex="-1">Size 重构 <a class="header-anchor" href="#size-重构" aria-label="Permalink to &quot;Size 重构&quot;">​</a></h2><p><code>Size</code> 的 <code>width</code> 和 <code>height</code> 现在是两个 <code>Dimension</code> 类型，而不是 <code>Int</code> 像素值。<code>Dimension</code> 可以是像素值，也可以是 <code>Dimension.Undefined</code>，后者表示未定义/无边界的约束。例如，如果 <code>size</code> 是 <code>Size(400, Dimension.Undefined)</code>，这意味着图像的宽度应缩放为 400 像素，而无论其高度如何。您可以使用 <code>pxOrElse</code> 扩展函数来获取像素值（如果存在），否则使用备用值：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size.width.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pxOrElse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Use the pixel value.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此更改旨在改善对目标具有一个无边界维度的情况的支持（例如，如果 <code>View</code> 的一个维度是 <code>ViewGroup.LayoutParams.WRAP_CONTENT</code>，或 Compose 中的 <code>Constraints.Infinity</code>）。</p><h2 id="compose" tabindex="-1">Compose <a class="header-anchor" href="#compose" aria-label="Permalink to &quot;Compose&quot;">​</a></h2><p>Coil 2.x 大幅重构了 Compose 集成，以增加功能、提高稳定性和改善性能。</p><p>在 Coil 1.x 中，您会使用 <code>rememberImagePainter</code> 来加载图像：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> painter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberImagePainter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    painter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> painter,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>在 Coil 2.x 中，<code>rememberImagePainter</code> 已更改为 <code>rememberAsyncImagePainter</code>，并进行了以下更改：</p><ul><li>用于配置 <code>ImageRequest</code> 的尾随 lambda 参数已移除。</li><li>在 Coil 2.x 中，<code>rememberAsyncImagePainter</code> 默认使用 <code>ContentScale.Fit</code>，以与 <code>Image</code> 保持一致，而在 Coil 1.x 中，它默认使用 <code>ContentScale.Crop</code>。因此，如果您在 <code>Image</code> 上设置了自定义的 <code>ContentScale</code>，您现在也需要将其传递给 <code>rememberAsyncImagePainter</code>。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> painter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberAsyncImagePainter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalContext.current)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    painter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> painter,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>此外，Coil 现在提供了 <code>AsyncImage</code> 和 <code>SubcomposeAsyncImage</code> 可组合函数，它们增加了新功能并解决了 <code>rememberAsyncImagePainter</code> 的一些设计限制。请在此处查看完整的 Compose 文档 <a href="./compose">compose.md</a>。</p><h2 id="磁盘缓存" tabindex="-1">磁盘缓存 <a class="header-anchor" href="#磁盘缓存" aria-label="Permalink to &quot;磁盘缓存&quot;">​</a></h2><p>Coil 2.x 拥有自己的公共磁盘缓存类，可以通过 <code>imageLoader.diskCache</code> 访问。Coil 1.x 依赖于 OkHttp 的磁盘缓存，但现在不再需要。</p><p>在 1.x 中配置磁盘缓存，您会使用 <code>CoilUtils.createDefaultCache</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">okHttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        OkHttpClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CoilUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDefaultCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>在 Coil 2.x 中，当与 <code>ImageLoader</code> 一起使用时，您不应该在 <code>OkHttpClient</code> 上设置 <code>Cache</code> 对象。相反，应像这样配置磁盘缓存对象：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">diskCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        DiskCache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.cacheDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image_cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>进行此更改是为了增加功能并提高性能：</p><ul><li>支持图像解码时的线程中断。 <ul><li>线程中断允许快速取消解码操作。这对于快速滚动列表尤其重要。</li><li>通过使用自定义磁盘缓存，Coil 能够确保网络源在解码之前完全写入磁盘。这是必要的，因为数据写入磁盘不能被中断——只有解码步骤可以被中断。OkHttp 的 <code>Cache</code> 不应与 Coil 2.0 一起使用，因为它无法保证所有数据在解码之前都写入磁盘。</li></ul></li><li>避免为不支持 <code>InputStream</code> 或需要直接访问 <code>File</code> 的解码 API（例如 <code>ImageDecoder</code>、<code>MediaMetadataRetriever</code>）进行缓冲/创建临时文件。</li><li>添加公共读写 <code>DiskCache</code> API。</li></ul><p>在 Coil 2.x 中，<code>Cache-Control</code> 和其他缓存头仍然受支持——除了 <code>Vary</code> 头，因为缓存只检查 URL 是否匹配。此外，只有响应码在 [200..300) 范围内的响应才会被缓存。</p><p>从 Coil 1.x 升级到 2.x 时，任何现有的磁盘缓存都将被清除，因为内部格式已更改。</p><h2 id="图像管道重构" tabindex="-1">图像管道重构 <a class="header-anchor" href="#图像管道重构" aria-label="Permalink to &quot;图像管道重构&quot;">​</a></h2><p>Coil 2.x 重构了图像管道类，使其更加灵活。以下是这些更改的概要列表：</p><ul><li>引入了一个新类 <code>Keyer</code>，它计算请求的内存缓存键。它取代了 <code>Fetcher.key</code>。</li><li><code>Mapper</code>、<code>Keyer</code>、<code>Fetcher</code> 和 <code>Decoder</code> 可以返回 <code>null</code>，以委托给列表中的下一个元素。</li><li>在 <code>Mapper.map</code> 的签名中添加了 <code>Options</code>。</li><li>引入了 <code>Fetcher.Factory</code> 和 <code>Decoder.Factory</code>。使用这些工厂来确定特定的 <code>Fetcher</code>/<code>Decoder</code> 是否适用。如果该 <code>Fetcher</code>/<code>Decoder</code> 不适用，则返回 <code>null</code>。</li></ul><h2 id="移除位图池化" tabindex="-1">移除位图池化 <a class="header-anchor" href="#移除位图池化" aria-label="Permalink to &quot;移除位图池化&quot;">​</a></h2><p>Coil 2.x 移除了位图池化及其相关类（<code>BitmapPool</code>、<code>PoolableViewTarget</code>）。请参阅 <a href="https://github.com/coil-kt/coil/discussions/1186#discussioncomment-2305528" target="_blank" rel="noreferrer">此处</a> 了解移除的原因。</p>`,33)]))}const E=i(l,[["render",t]]);export{r as __pageData,E as default};
