import{_ as l,C as a,c as h,o as k,j as s,G as n,ag as r,a as t,w as o}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-events.md","filePath":"ko/ktor/server-events.md","lastUpdated":1755457140000}'),d={name:"ko/ktor/server-events.md"};function E(c,i,g,y,u,F){const e=a("show-structure"),p=a("tldr");return k(),h("div",null,[i[1]||(i[1]=s("h1",{id:"애플리케이션-모니터링",tabindex:"-1"},[t("애플리케이션 모니터링 "),s("a",{class:"header-anchor",href:"#애플리케이션-모니터링","aria-label":'Permalink to "애플리케이션 모니터링"'},"​")],-1)),n(e,{for:"chapter",depth:"2"}),n(p,null,{default:o(()=>i[0]||(i[0]=[s("p",null,[s("b",null,"코드 예시"),t(": "),s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/events"}," events ")],-1)])),_:1}),i[2]||(i[2]=r(`<p>Ktor는 이벤트를 사용하여 서버 애플리케이션을 모니터링하는 기능을 제공합니다. 애플리케이션의 라이프사이클(애플리케이션 시작, 중지 등)과 관련된 미리 정의된 이벤트를 처리하거나, 특정 케이스를 처리하기 위해 사용자 정의 이벤트를 사용할 수 있습니다. 또한 <a href="./server-custom-plugins#handle-app-events">MonitoringEvent</a> 훅을 사용하여 사용자 정의 플러그인에 대한 이벤트를 처리할 수도 있습니다.</p><h2 id="event-definition" tabindex="-1">이벤트 정의 <a class="header-anchor" href="#event-definition" aria-label="Permalink to &quot;이벤트 정의 {id=&quot;event-definition&quot;}&quot;">​</a></h2><p>각 이벤트는 <a href="https://api.ktor.io/ktor-shared/ktor-events/io.ktor.events/-event-definition/index.html" target="_blank" rel="noreferrer">EventDefinition</a> 클래스 인스턴스로 표현됩니다. 이 클래스에는 이벤트로 전달되는 값의 타입을 지정하는 <code>T</code> 타입 파라미터가 있습니다. 이 값은 <a href="#handle-events-application">이벤트 핸들러</a>에서 람다 인자로 접근할 수 있습니다. 예를 들어, 대부분의 <a href="#predefined-events">미리 정의된 이벤트</a>는 <code>Application</code>을 파라미터로 받아 이벤트 핸들러 내에서 애플리케이션 속성에 접근할 수 있도록 합니다.</p><p><a href="#custom-events">사용자 정의 이벤트</a>의 경우, 해당 이벤트에 필요한 타입 파라미터를 전달할 수 있습니다. 아래 코드 스니펫은 <code>ApplicationCall</code> 인스턴스를 받는 사용자 정의 <code>NotFoundEvent</code>를 생성하는 방법을 보여줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NotFoundEvent: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EventDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApplicationCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><a href="#custom-events">사용자 정의 이벤트</a> 섹션에서는 서버가 리소스에 대해 <code>404 Not Found</code> 상태 코드를 반환할 때 사용자 정의 플러그인에서 이 이벤트를 발생하는 방법을 보여줍니다.</p><h3 id="predefined-events" tabindex="-1">미리 정의된 애플리케이션 이벤트 <a class="header-anchor" href="#predefined-events" aria-label="Permalink to &quot;미리 정의된 애플리케이션 이벤트 {id=&quot;predefined-events&quot;}&quot;">​</a></h3><p>Ktor는 애플리케이션의 라이프사이클과 관련된 다음 미리 정의된 이벤트를 제공합니다.</p><ul><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-starting.html" target="_blank" rel="noreferrer">ApplicationStarting</a></li><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-started.html" target="_blank" rel="noreferrer">ApplicationStarted</a></li><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-server-ready.html" target="_blank" rel="noreferrer">ServerReady</a></li><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-stop-preparing.html" target="_blank" rel="noreferrer">ApplicationStopPreparing</a></li><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-stopping.html" target="_blank" rel="noreferrer">ApplicationStopping</a></li><li><a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application-stopped.html" target="_blank" rel="noreferrer">ApplicationStopped</a></li></ul><p>예를 들어, 애플리케이션 리소스를 해제하기 위해 <code>ApplicationStopped</code> 이벤트에 구독할 수 있습니다.</p><h2 id="handle-events-application" tabindex="-1">애플리케이션에서 이벤트 처리 <a class="header-anchor" href="#handle-events-application" aria-label="Permalink to &quot;애플리케이션에서 이벤트 처리 {id=&quot;handle-events-application&quot;}&quot;">​</a></h2><p>지정된 <code>Application</code> 인스턴스에 대한 이벤트를 처리하려면 <code>monitor</code> 속성을 사용하세요. 이 속성은 애플리케이션 이벤트를 처리할 수 있는 다음 함수들을 노출하는 <a href="https://api.ktor.io/ktor-shared/ktor-events/io.ktor.events/-events/index.html" target="_blank" rel="noreferrer">Events</a> 인스턴스에 접근할 수 있도록 합니다.</p><ul><li><code>subscribe</code>: <a href="#event-definition">EventDefinition</a>으로 지정된 이벤트에 구독합니다.</li><li><code>unsubscribe</code>: <a href="#event-definition">EventDefinition</a>으로 지정된 이벤트에서 구독을 해지합니다.</li><li><code>raise</code>: <a href="#event-definition">EventDefinition</a>으로 지정된 이벤트를 지정된 값으로 발생시킵니다. <blockquote><p><a href="#custom-events">사용자 정의 이벤트</a> 섹션에서는 사용자 정의 이벤트를 발생시키는 방법을 보여줍니다.</p></blockquote></li></ul><p><code>subscribe</code> / <code>unsubscribe</code> 함수는 <code>T</code> 값을 람다 인자로 갖는 <code>EventDefinition</code> 인스턴스를 받습니다. 아래 예시는 <code>ApplicationStarted</code> 이벤트에 구독하고 이벤트 핸들러에서 메시지를 <a href="./server-logging">로그</a>하는 방법을 보여줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStarted) { application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.environment.log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server is started&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 예시에서는 <code>ApplicationStopped</code> 이벤트를 처리하는 방법을 볼 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStopped) { application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.environment.log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server is stopped&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Release resources and unsubscribe from events</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStarted) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStopped) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>전체 예시는 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/events" target="_blank" rel="noreferrer">events</a>를 참조하세요.</p><h2 id="handle-events-plugin" tabindex="-1">사용자 정의 플러그인에서 이벤트 처리 <a class="header-anchor" href="#handle-events-plugin" aria-label="Permalink to &quot;사용자 정의 플러그인에서 이벤트 처리 {id=&quot;handle-events-plugin&quot;}&quot;">​</a></h2><p><code>MonitoringEvent</code> 훅을 사용하여 <a href="./server-custom-plugins#handle-app-events">사용자 정의 플러그인</a>에서 이벤트를 처리할 수 있습니다. 아래 예시는 <code>ApplicationMonitoringPlugin</code> 플러그인을 생성하고 <code>ApplicationStarted</code> 및 <code>ApplicationStopped</code> 이벤트를 처리하는 방법을 보여줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.events.EventDefinition</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.http.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.hooks.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ApplicationMonitoringPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApplicationPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ApplicationMonitoringPlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MonitoringEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStarted)) { application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server is started&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MonitoringEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStopped)) { application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Server is stopped&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Release resources and unsubscribe from events</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStarted) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        application.monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unsubscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationStopped) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>전체 예시는 다음에서 찾을 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/events" target="_blank" rel="noreferrer">events</a>.</p><h2 id="custom-events" tabindex="-1">사용자 정의 이벤트 <a class="header-anchor" href="#custom-events" aria-label="Permalink to &quot;사용자 정의 이벤트 {id=&quot;custom-events&quot;}&quot;">​</a></h2><p>이 섹션에서는 서버가 리소스에 대해 <code>404 Not Found</code> 상태 코드를 반환할 때 발생하는 사용자 정의 이벤트를 생성하는 방법을 살펴보겠습니다.</p><ol><li><p>먼저, <a href="#event-definition">이벤트 정의</a>를 생성해야 합니다. 아래 코드 스니펫은 <code>ApplicationCall</code>을 파라미터로 받는 사용자 정의 <code>NotFoundEvent</code> 이벤트를 생성하는 방법을 보여줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NotFoundEvent: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EventDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApplicationCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EventDefinition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li><li><p>이벤트를 발생시키려면 <code>Events.raise</code> 함수를 호출합니다. 아래 예시는 호출의 상태 코드가 <code>404</code>일 경우 새로 생성된 이벤트를 발생시키기 위해 <code>ResponseSent</code> <a href="./server-custom-plugins#other">훅</a>을 처리하는 방법을 보여줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.events.EventDefinition</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.http.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.hooks.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ApplicationMonitoringPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createApplicationPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ApplicationMonitoringPlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ResponseSent) { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (call.response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpStatusCode.NotFound) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            this@createApplicationPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.application.monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">raise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NotFoundEvent, call)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>애플리케이션에서 생성된 이벤트를 처리하려면 플러그인을 <a href="./server-plugins#install">설치</a>합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationMonitoringPlugin)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>그런 다음, <code>Events.subscribe</code>를 사용하여 이벤트에 구독합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ApplicationMonitoringPlugin)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    monitor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(NotFoundEvent) { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No page was found for the URI: \${call.request.uri}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>전체 예시는 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/events" target="_blank" rel="noreferrer">events</a>를 참조하세요.</p>`,26))])}const C=l(d,[["render",E]]);export{b as __pageData,C as default};
