import{_ as i,c as a,o as l,ag as n}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"真偽値","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/booleans.md","filePath":"ja/kotlin/booleans.md","lastUpdated":1754307826000}'),e={name:"ja/kotlin/booleans.md"};function p(t,s,h,k,o,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="真偽値" tabindex="-1">真偽値 <a class="header-anchor" href="#真偽値" aria-label="Permalink to &quot;真偽値&quot;">​</a></h1><p><code>Boolean</code>型は、<code>true</code>と<code>false</code>の2つの値を持つ真偽値オブジェクトを表します。 <code>Boolean</code>型には、<code>Boolean?</code>として宣言される<a href="/ja/kotlin/null-safety">null許容型</a>があります。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JVM上では、プリミティブな<code>boolean</code>型として格納される真偽値は、通常8ビットを使用します。</p></div><p>真偽値に対する組み込みの操作には以下が含まれます。</p><ul><li><code>||</code> – 論理和 (論理OR)</li><li><code>&amp;&amp;</code> – 論理積 (論理AND)</li><li><code>!</code> – 論理否定 (論理NOT)</li></ul><p>例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myTrue: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFalse: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolNull: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myTrue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFalse)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myTrue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFalse)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myTrue)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(boolNull)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>||</code>および<code>&amp;&amp;</code>演算子は遅延評価で動作します。これは以下のことを意味します。</p><ul><li>最初のオペランドが<code>true</code>の場合、<code>||</code>演算子は2番目のオペランドを評価しません。</li><li>最初のオペランドが<code>false</code>の場合、<code>&amp;&amp;</code>演算子は2番目のオペランドを評価しません。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JVM上では、真偽値オブジェクトへのnull許容参照は、<a href="/ja/kotlin/numbers#boxing-and-caching-numbers-on-the-java-virtual-machine">数値</a>の場合と同様に、Javaクラスでボックス化されます。</p></div>`,10)]))}const E=i(e,[["render",p]]);export{r as __pageData,E as default};
