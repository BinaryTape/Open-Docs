import{_ as e,c as o,o as r,ag as a}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"關鍵概念","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/koog/key-concepts.md","filePath":"zh-Hant/koog/key-concepts.md","lastUpdated":1754431054000}'),n={name:"zh-Hant/koog/key-concepts.md"};function l(s,t,i,g,p,h){return r(),o("div",null,t[0]||(t[0]=[a('<h1 id="關鍵概念" tabindex="-1">關鍵概念 <a class="header-anchor" href="#關鍵概念" aria-label="Permalink to &quot;關鍵概念&quot;">​</a></h1><h2 id="代理" tabindex="-1">代理 <a class="header-anchor" href="#代理" aria-label="Permalink to &quot;代理&quot;">​</a></h2><ul><li><p><strong>代理 (Agent)</strong>：一種 AI 實體，能夠與工具互動、處理複雜的工作流程並與使用者溝通。</p></li><li><p><strong>LLM (大型語言模型)</strong>：驅動代理功能的底層 AI 模型。</p></li><li><p><strong>訊息 (Message)</strong>：代理系統中的一個通訊單位，代表從使用者、助理或系統傳遞的資料。</p></li><li><p><strong>提示 (Prompt)</strong>：提供給 LLM 的對話歷史，由來自使用者、助理和系統的訊息組成。</p></li><li><p><strong>系統提示 (System prompt)</strong>：提供給代理的指令，用於引導其行為、定義其角色並提供其任務所需的關鍵資訊。</p></li><li><p><strong>上下文 (Context)</strong>：LLM 互動發生的環境，可存取對話歷史和工具。</p></li><li><p><strong>LLM 會話 (LLM session)</strong>：與 LLM 互動的一種結構化方式，包含對話歷史、可用工具以及發出請求的方法。</p></li></ul><h2 id="代理工作流程" tabindex="-1">代理工作流程 <a class="header-anchor" href="#代理工作流程" aria-label="Permalink to &quot;代理工作流程&quot;">​</a></h2><ul><li><strong>策略 (Strategy)</strong>：為代理定義的工作流程，由連續的子圖組成。 策略定義了代理如何處理輸入、與工具互動以及產生輸出。 策略圖由透過邊連接的節點組成，這些邊代表節點之間的轉移。</li></ul><h3 id="策略圖" tabindex="-1">策略圖 <a class="header-anchor" href="#策略圖" aria-label="Permalink to &quot;策略圖&quot;">​</a></h3><ul><li><p><strong>圖 (Graph)</strong>：由邊連接的節點結構，定義了代理策略工作流程。</p></li><li><p><strong>節點 (Node)</strong>：代理策略工作流程的基本建構塊，代表特定的操作或轉換。</p></li><li><p><strong>邊 (Edge)</strong>：代理圖中節點之間的連接，定義了操作流程，通常附帶條件，指定何時沿著每條邊進行。</p></li><li><p><strong>條件 (Conditions)</strong>：決定何時沿著特定邊進行的規則。</p></li><li><p><strong>子圖 (Subgraph)</strong>：代理策略中一個自我包含的處理單元，擁有自己的一套工具、上下文和職責。有關子圖操作的資訊可以封裝在子圖內，也可以使用 AgentMemory 功能在子圖之間傳輸。</p></li></ul><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><ul><li><p><strong>工具 (Tool)</strong>：代理可以用來執行特定任務或存取外部系統的函數。代理了解可用的工具及其引數，但缺乏對其實現細節的了解。</p></li><li><p><strong>工具呼叫 (Tool call)</strong>：LLM 發出的請求，使用提供的引數執行特定工具。其功能類似於函數呼叫。</p></li><li><p><strong>工具描述符 (Tool descriptor)</strong>：工具中繼資料，包含其名稱、描述和參數。</p></li><li><p><strong>工具註冊表 (Tool registry)</strong>：代理可用的工具列表。此註冊表通知代理有關可用工具的資訊。</p></li><li><p><strong>工具結果 (Tool result)</strong>：執行工具所產生的輸出。例如，如果該工具是一個方法，結果將是其回傳值。</p></li></ul><h2 id="歷史壓縮" tabindex="-1">歷史壓縮 <a class="header-anchor" href="#歷史壓縮" aria-label="Permalink to &quot;歷史壓縮&quot;">​</a></h2><ul><li><strong>歷史壓縮 (History compression)</strong>：透過應用各種壓縮策略來減少對話歷史大小的過程，以管理 Token 使用量。 欲了解更多，請參閱 <a href="./history-compression">History compression</a>。</li></ul><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h2><ul><li><strong>功能 (Feature)</strong>：擴展和增強 AI 代理功能的元件。</li></ul><h3 id="eventhandler-功能" tabindex="-1">EventHandler 功能 <a class="header-anchor" href="#eventhandler-功能" aria-label="Permalink to &quot;EventHandler 功能&quot;">​</a></h3><ul><li><strong>EventHandler</strong>：一個功能，可以監控和回應各種代理事件，提供用於追蹤代理生命週期、處理錯誤以及在整個工作流程中處理工具呼叫的鉤子。</li></ul><h3 id="agentmemory-功能" tabindex="-1">AgentMemory 功能 <a class="header-anchor" href="#agentmemory-功能" aria-label="Permalink to &quot;AgentMemory 功能&quot;">​</a></h3><ul><li><p><strong>AgentMemory</strong>：一個功能，讓 AI 代理能夠在對話中儲存、檢索和使用資訊。欲了解更多，請參閱 <a href="./agent-memory">AgentMemory</a>。</p></li><li><p><strong>概念 (Concept)</strong>：AgentMemory 功能中，具有相關中繼資料的資訊類別，包含關鍵字、描述和事實類型。概念是 AgentMemory 系統的基本建構塊，代理可以記憶和回憶。 欲了解更多，請參閱 <a href="./agent-memory">AgentMemory</a>。</p></li><li><p><strong>事實 (Fact)</strong>：儲存在 AgentMemory 系統中的單一資訊片段。 事實與概念相關聯，可以具有單一值或多個值。 欲了解更多，請參閱 <a href="./agent-memory">AgentMemory</a>。</p></li><li><p><strong>記憶範圍 (Memory scope)</strong>：事實相關的上下文。欲了解更多，請參閱 <a href="./agent-memory">AgentMemory</a>。</p></li></ul>',17)]))}const c=e(n,[["render",l]]);export{m as __pageData,c as default};
