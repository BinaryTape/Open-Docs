import{_ as y,C as k,c as u,o as F,G as s,ag as p,j as i,w as n,a}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-serialization.md","filePath":"ko/ktor/client-serialization.md","lastUpdated":1755457140000}'),C={name:"ko/ktor/client-serialization.md"};function _(b,t,m,v,f,B){const r=k("TopicTitle"),h=k("show-structure"),d=k("primary-label"),g=k("tldr"),c=k("link-summary"),e=k("code-block"),l=k("TabItem"),o=k("Tabs"),E=k("Links");return F(),u("div",null,[s(r,{labelRef:"client-plugin",title:"Ktor Client에서 콘텐츠 협상 및 직렬화"}),s(h,{for:"chapter",depth:"2"}),s(d,{ref:"client-plugin"},null,512),s(g,null,{default:n(()=>t[0]||(t[0]=[i("p",null,[i("b",null,"필수 의존성"),a(": "),i("code",null,"io.ktor:ktor-client-content-negotiation")],-1),i("p",null,[i("b",null,"코드 예시"),a(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-json-kotlinx"}," client-json-kotlinx ")],-1)])),_:1}),s(c,null,{default:n(()=>t[1]||(t[1]=[a(" ContentNegotiation 플러그인은 클라이언트와 서버 간의 미디어 타입 협상, 그리고 요청을 보내고 응답을 받을 때 특정 형식으로 콘텐츠를 직렬화/역직렬화하는 두 가지 주요 목적을 제공합니다. ")])),_:1}),t[11]||(t[11]=p('<p><a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-content-negotiation/io.ktor.client.plugins.contentnegotiation/-content-negotiation" target="_blank" rel="noreferrer">ContentNegotiation</a> 플러그인은 두 가지 주요 목적을 제공합니다:</p><ul><li>클라이언트와 서버 간의 미디어 타입 협상. 이를 위해 <code>Accept</code> 및 <code>Content-Type</code> 헤더를 사용합니다.</li><li><a href="./client-requests">요청</a>을 보내고 <a href="./client-responses">응답</a>을 받을 때 특정 형식으로 콘텐츠를 직렬화/역직렬화. Ktor는 기본적으로 JSON, XML, CBOR, ProtoBuf 형식을 지원합니다. XML 직렬 변환기는 <a href="./client-engines">JVM</a>에서만 지원됩니다.</li></ul><blockquote><p>서버에서는 Ktor가 콘텐츠 직렬화/역직렬화를 위해 <a href="./server-serialization">ContentNegotiation</a> 플러그인을 제공합니다.</p></blockquote><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><h3 id="add_content_negotiation_dependency" tabindex="-1">ContentNegotiation <a class="header-anchor" href="#add_content_negotiation_dependency" aria-label="Permalink to &quot;ContentNegotiation {id=&quot;add_content_negotiation_dependency&quot;}&quot;">​</a></h3><p><code>ContentNegotiation</code>을(를) 사용하려면 빌드 스크립트에 <code>ktor-client-content-negotiation</code> 아티팩트를 포함해야 합니다: </p>',6)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-content-negotiation:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-content-negotiation:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-content-negotiation-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),i("p",null,[t[3]||(t[3]=a(" Ktor 클라이언트에 필요한 아티팩트에 대한 자세한 내용은 ")),s(E,{href:"/ktor/client-dependencies",summary:"기존 프로젝트에 클라이언트 의존성을 추가하는 방법을 알아보세요."},{default:n(()=>t[2]||(t[2]=[a("클라이언트 의존성 추가하기")])),_:1}),t[4]||(t[4]=a("에서 확인할 수 있습니다. "))]),t[12]||(t[12]=p('<p>특정 형식의 직렬 변환기는 추가 아티팩트를 필요로 합니다. 예를 들어, kotlinx.serialization은 JSON을 위해 <code>ktor-serialization-kotlinx-json</code> 의존성을 필요로 합니다. 포함된 아티팩트에 따라 Ktor는 자동으로 기본 직렬 변환기를 선택합니다. 필요한 경우, 직렬 변환기를 명시적으로 <a href="#configure_serializer">지정</a>하고 구성할 수 있습니다.</p><h3 id="serialization_dependency" tabindex="-1">직렬화 <a class="header-anchor" href="#serialization_dependency" aria-label="Permalink to &quot;직렬화 {id=&quot;serialization_dependency&quot;}&quot;">​</a></h3><p>kotlinx.serialization 변환기를 사용하기 전에 <a href="https://github.com/Kotlin/kotlinx.serialization#setup" target="_blank" rel="noreferrer">설정</a> 섹션에 설명된 대로 Kotlin serialization 플러그인을 추가해야 합니다.</p><h4 id="add_json_dependency" tabindex="-1">JSON <a class="header-anchor" href="#add_json_dependency" aria-label="Permalink to &quot;JSON {id=&quot;add_json_dependency&quot;}&quot;">​</a></h4><p>JSON 데이터를 직렬화/역직렬화하려면 다음 라이브러리 중 하나를 선택할 수 있습니다: kotlinx.serialization, Gson, 또는 Jackson.</p>',5)),s(o,{group:"json-libraries"},{default:n(()=>[s(l,{title:"kotlinx.serialization","group-key":"kotlinx"},{default:n(()=>[t[5]||(t[5]=i("p",null,[a("빌드 스크립트에 "),i("code",null,"ktor-serialization-kotlinx-json"),a(" 아티팩트를 추가합니다:")],-1)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-json:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-json-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1}),s(l,{title:"Gson","group-key":"gson"},{default:n(()=>[t[6]||(t[6]=i("p",null,[a("빌드 스크립트에 "),i("code",null,"ktor-serialization-gson"),a(" 아티팩트를 추가합니다:")],-1)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-gson:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-gson:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-gson-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1}),s(l,{title:"Jackson","group-key":"jackson"},{default:n(()=>[t[7]||(t[7]=i("p",null,[a("빌드 스크립트에 "),i("code",null,"ktor-serialization-jackson"),a(" 아티팩트를 추가합니다:")],-1)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-jackson:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-jackson:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-jackson-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1})]),_:1}),t[13]||(t[13]=i("h4",{id:"add_xml_dependency",tabindex:"-1"},[a("XML "),i("a",{class:"header-anchor",href:"#add_xml_dependency","aria-label":'Permalink to "XML {id="add_xml_dependency"}"'},"​")],-1)),t[14]||(t[14]=i("p",null,[a("XML을 직렬화/역직렬화하려면 빌드 스크립트에 "),i("code",null,"ktor-serialization-kotlinx-xml"),a("을 추가합니다:")],-1)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-xml:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-xml:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-xml-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),t[15]||(t[15]=p('<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>XML 직렬화는 <a href="https://github.com/pdvrieze/xmlutil/issues/83" target="_blank" rel="noreferrer"><code>jsNode</code> 타겟에서 지원되지 않습니다</a>.</p></div><h4 id="add_cbor_dependency" tabindex="-1">CBOR <a class="header-anchor" href="#add_cbor_dependency" aria-label="Permalink to &quot;CBOR {id=&quot;add_cbor_dependency&quot;}&quot;">​</a></h4><p>CBOR을 직렬화/역직렬화하려면 빌드 스크립트에 <code>ktor-serialization-kotlinx-cbor</code>을 추가합니다:</p>',3)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-cbor-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),t[16]||(t[16]=i("h4",{id:"add_protobuf_dependency",tabindex:"-1"},[a("ProtoBuf "),i("a",{class:"header-anchor",href:"#add_protobuf_dependency","aria-label":'Permalink to "ProtoBuf {id="add_protobuf_dependency"}"'},"​")],-1)),t[17]||(t[17]=i("p",null,[a("ProtoBuf를 직렬화/역직렬화하려면 빌드 스크립트에 "),i("code",null,"ktor-serialization-kotlinx-protobuf"),a("을 추가합니다:")],-1)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-protobuf-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),t[18]||(t[18]=p(`<h2 id="install_plugin" tabindex="-1">ContentNegotiation 설치 <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;ContentNegotiation 설치 {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p><code>ContentNegotiation</code>을 설치하려면 <a href="./client-create-and-configure#configure-client">클라이언트 구성 블록</a> 내부의 <code>install</code> 함수에 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이제 필요한 JSON 직렬 변환기를 <a href="#configure_serializer">구성</a>할 수 있습니다.</p><h2 id="configure_serializer" tabindex="-1">직렬 변환기 구성 <a class="header-anchor" href="#configure_serializer" aria-label="Permalink to &quot;직렬 변환기 구성 {id=&quot;configure_serializer&quot;}&quot;">​</a></h2><h3 id="register_json" tabindex="-1">JSON 직렬 변환기 <a class="header-anchor" href="#register_json" aria-label="Permalink to &quot;JSON 직렬 변환기 {id=&quot;register_json&quot;}&quot;">​</a></h3>`,6)),s(o,{group:"json-libraries"},{default:n(()=>[s(l,{title:"kotlinx.serialization","group-key":"kotlinx"},{default:n(()=>t[8]||(t[8]=[i("p",null,[a("애플리케이션에 JSON 직렬 변환기를 등록하려면 "),i("code",null,"json"),a(" 메서드를 호출합니다:")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.plugins.contentnegotiation."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.kotlinx.json."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CIO) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(ContentNegotiation) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        json"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),i("p",null,[i("code",null,"json"),a(" 생성자에서 "),i("a",{href:"https://kotlinlang.org/api/kotlinx.serialization/kotlinx-serialization-json/kotlinx.serialization.json/-json-builder/",target:"_blank",rel:"noreferrer"},"JsonBuilder"),a(" API에 접근할 수 있습니다. 예를 들어:")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CIO) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(ContentNegotiation) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        json"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Json"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            prettyPrint "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            isLenient "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        })")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),i("p",null,[a("전체 예시는 "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-json-kotlinx",target:"_blank",rel:"noreferrer"},"client-json-kotlinx"),a("에서 찾을 수 있습니다.")],-1)])),_:1}),s(l,{title:"Gson","group-key":"gson"},{default:n(()=>t[9]||(t[9]=[i("p",null,[a("애플리케이션에 Gson 직렬 변환기를 등록하려면 "),i("a",{href:"https://api.ktor.io/ktor-shared/ktor-serialization/ktor-serialization-gson/io.ktor.serialization.gson/gson.html",target:"_blank",rel:"noreferrer"},"gson"),a(" 메서드를 호출합니다:")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.plugins.contentnegotiation."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.gson."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CIO) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(ContentNegotiation) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        gson"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),i("p",null,[i("code",null,"gson"),a(" 메서드는 "),i("a",{href:"https://www.javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/com/google/gson/GsonBuilder.html",target:"_blank",rel:"noreferrer"},"GsonBuilder"),a("에서 제공하는 직렬화 설정을 조정할 수도 있습니다.")],-1)])),_:1}),s(l,{title:"Jackson","group-key":"jackson"},{default:n(()=>t[10]||(t[10]=[i("p",null,[a("애플리케이션에 Jackson 직렬 변환기를 등록하려면 "),i("a",{href:"https://api.ktor.io/ktor-shared/ktor-serialization/ktor-serialization-jackson/io.ktor.serialization.jackson/jackson.html",target:"_blank",rel:"noreferrer"},"jackson"),a(" 메서드를 호출합니다:")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.plugins.contentnegotiation."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.jackson."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CIO) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(ContentNegotiation) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        jackson"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),i("p",null,[i("code",null,"jackson"),a(" 메서드는 "),i("a",{href:"https://fasterxml.github.io/jackson-databind/javadoc/2.9/com/fasterxml/jackson/databind/ObjectMapper.html",target:"_blank",rel:"noreferrer"},"ObjectMapper"),a("에서 제공하는 직렬화 설정을 조정할 수도 있습니다.")],-1)])),_:1})]),_:1}),t[19]||(t[19]=p(`<h3 id="register_xml" tabindex="-1">XML 직렬 변환기 <a class="header-anchor" href="#register_xml" aria-label="Permalink to &quot;XML 직렬 변환기 {id=&quot;register_xml&quot;}&quot;">​</a></h3><p>애플리케이션에 XML 직렬 변환기를 등록하려면 <code>xml</code> 메서드를 호출합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.xml.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        xml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>xml</code> 메서드를 사용하면 XML 직렬화 설정에도 접근할 수 있습니다. 예를 들어:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.xml.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nl.adaptivety.xmlutil.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nl.adaptivety.xmlutil.serialization.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        xml</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(format </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            xmlDeclMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> XmlDeclMode.Charset</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="register_cbor" tabindex="-1">CBOR 직렬 변환기 <a class="header-anchor" href="#register_cbor" aria-label="Permalink to &quot;CBOR 직렬 변환기 {id=&quot;register_cbor&quot;}&quot;">​</a></h3><p>애플리케이션에 CBOR 직렬 변환기를 등록하려면 <code>cbor</code> 메서드를 호출합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.cbor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cbor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>cbor</code> 메서드를 사용하면 <a href="https://kotlinlang.org/api/kotlinx.serialization/kotlinx-serialization-cbor/kotlinx.serialization.cbor/-cbor-builder/" target="_blank" rel="noreferrer">CborBuilder</a>에서 제공하는 CBOR 직렬화 설정에 접근할 수 있습니다. 예를 들어:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.cbor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.cbor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cbor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cbor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ignoreUnknownKeys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="register_protobuf" tabindex="-1">ProtoBuf 직렬 변환기 <a class="header-anchor" href="#register_protobuf" aria-label="Permalink to &quot;ProtoBuf 직렬 변환기 {id=&quot;register_protobuf&quot;}&quot;">​</a></h3><p>애플리케이션에 ProtoBuf 직렬 변환기를 등록하려면 <code>protobuf</code> 메서드를 호출합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.protobuf.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        protobuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>protobuf</code> 메서드를 사용하면 <a href="https://kotlinlang.org/api/kotlinx.serialization/kotlinx-serialization-protobuf/kotlinx.serialization.protobuf/-proto-buf-builder/" target="_blank" rel="noreferrer">ProtoBufBuilder</a>에서 제공하는 ProtoBuf 직렬화 설정에 접근할 수 있습니다. 예를 들어:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.contentnegotiation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.protobuf.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.protobuf.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        protobuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProtoBuf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            encodeDefaults </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="receive_send_data" tabindex="-1">데이터 수신 및 전송 <a class="header-anchor" href="#receive_send_data" aria-label="Permalink to &quot;데이터 수신 및 전송 {id=&quot;receive_send_data&quot;}&quot;">​</a></h2><h3 id="create_data_class" tabindex="-1">데이터 클래스 생성 <a class="header-anchor" href="#create_data_class" aria-label="Permalink to &quot;데이터 클래스 생성 {id=&quot;create_data_class&quot;}&quot;">​</a></h3><p>데이터를 수신하고 전송하려면 데이터 클래스가 필요합니다. 예를 들어:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>kotlinx.serialization을 사용하는 경우, 이 클래스에 <code>@Serializable</code> 어노테이션이 있는지 확인해야 합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>다음 유형의 직렬화/역직렬화는 kotlinx.serialization 라이브러리에서 지원됩니다:</p><ul><li><a href="./https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/builtin-classes">내장 클래스</a></li><li><a href="https://kotlinlang.org/docs/sequences.html" target="_blank" rel="noreferrer">시퀀스</a>의 역직렬화</li><li><a href="https://kotlinlang.org/docs/flow.html" target="_blank" rel="noreferrer">플로우</a>의 직렬화</li></ul><h3 id="send_data" tabindex="-1">데이터 전송 <a class="header-anchor" href="#send_data" aria-label="Permalink to &quot;데이터 전송 {id=&quot;send_data&quot;}&quot;">​</a></h3><p><a href="./client-requests">요청</a> 본문 내에서 <a href="#create_data_class">클래스 인스턴스</a>를 JSON으로 보내려면, <code>setBody</code> 함수를 사용하여 이 인스턴스를 할당하고 <code>contentType</code>을 호출하여 콘텐츠 타입을 <code>application/json</code>으로 설정합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8080/customer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contentType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentType.Application.Json)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Brains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>데이터를 XML 또는 CBOR로 보내려면 <code>contentType</code>을 각각 <code>ContentType.Application.Xml</code> 또는 <code>ContentType.Application.Cbor</code>로 설정합니다.</p><h3 id="receive_data" tabindex="-1">데이터 수신 <a class="header-anchor" href="#receive_data" aria-label="Permalink to &quot;데이터 수신 {id=&quot;receive_data&quot;}&quot;">​</a></h3><p>서버가 <code>application/json</code>, <code>application/xml</code> 또는 <code>application/cbor</code> 콘텐츠가 포함된 <a href="./client-responses">응답</a>을 보낼 때, 응답 페이로드(<code>body</code> 함수)를 수신하는 데 사용되는 함수의 매개변수로 <a href="#create_data_class">데이터 클래스</a>를 지정하여 역직렬화할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customer: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Customer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8080/customer/3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>전체 예시는 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-json-kotlinx" target="_blank" rel="noreferrer">client-json-kotlinx</a>에서 찾을 수 있습니다.</p>`,31))])}const z=y(C,[["render",_]]);export{A as __pageData,z as default};
