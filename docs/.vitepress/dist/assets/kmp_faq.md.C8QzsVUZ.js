import{_ as o}from"./chunks/kotlin-native-and-jvm-binaries.1l992XkT.js";import{_ as t,c as e,o as i,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"常见问题","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/faq.md","filePath":"kmp/faq.md","lastUpdated":1755516278000}'),r={name:"kmp/faq.md"};function p(m,a,n,s,f,d){return i(),e("div",null,a[0]||(a[0]=[l('<h1 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h1><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><h3 id="什么是-kotlin-multiplatform" tabindex="-1">什么是 Kotlin Multiplatform？ <a class="header-anchor" href="#什么是-kotlin-multiplatform" aria-label="Permalink to &quot;什么是 Kotlin Multiplatform？&quot;">​</a></h3><p><a href="https://www.jetbrains.com/kotlin-multiplatform/" target="_blank" rel="noreferrer">Kotlin Multiplatform</a> (KMP) 是 JetBrains 推出的一项开源技术，用于灵活的跨平台开发。它允许你为各种平台创建应用程序，并在这些平台之间高效复用代码，同时保留原生编程的优势。借助 Kotlin Multiplatform，你可以开发适用于 Android、iOS、桌面、Web、服务端以及其他平台的应用。</p><h3 id="我可以使用-kotlin-multiplatform-共享-ui-吗" tabindex="-1">我可以使用 Kotlin Multiplatform 共享 UI 吗？ <a class="header-anchor" href="#我可以使用-kotlin-multiplatform-共享-ui-吗" aria-label="Permalink to &quot;我可以使用 Kotlin Multiplatform 共享 UI 吗？&quot;">​</a></h3><p>可以，你可以使用 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 共享 UI。它是 JetBrains 基于 Kotlin 和 <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> 开发的声明式 UI 框架。此框架允许你为 iOS、Android、桌面和 Web 等平台创建共享 UI 组件，帮助你在不同设备和平台间保持一致的用户界面。</p><p>要了解更多信息，请参见 <a href="#compose-multiplatform">Compose Multiplatform</a> 部分。</p><h3 id="kotlin-multiplatform-支持哪些平台" tabindex="-1">Kotlin Multiplatform 支持哪些平台？ <a class="header-anchor" href="#kotlin-multiplatform-支持哪些平台" aria-label="Permalink to &quot;Kotlin Multiplatform 支持哪些平台？&quot;">​</a></h3><p>Kotlin Multiplatform 支持 Android、iOS、桌面、Web、服务端以及其他平台。关于 <a href="./supported-platforms">支持的平台</a> 的更多信息。</p><h3 id="我应该在哪个-ide-中开发我的跨平台应用" tabindex="-1">我应该在哪个 IDE 中开发我的跨平台应用？ <a class="header-anchor" href="#我应该在哪个-ide-中开发我的跨平台应用" aria-label="Permalink to &quot;我应该在哪个 IDE 中开发我的跨平台应用？&quot;">​</a></h3><p>我们建议使用 Android Studio IDE 来处理 Kotlin Multiplatform 项目。关于 <a href="./recommended-ides">推荐的 IDE 和代码编辑器</a> 中提供了更多替代方案。</p><h3 id="如何创建新的-kotlin-multiplatform-项目" tabindex="-1">如何创建新的 Kotlin Multiplatform 项目？ <a class="header-anchor" href="#如何创建新的-kotlin-multiplatform-项目" aria-label="Permalink to &quot;如何创建新的 Kotlin Multiplatform 项目？&quot;">​</a></h3><p><a href="./get-started">创建 Kotlin Multiplatform 应用</a> 教程提供了创建 Kotlin Multiplatform 项目的分步说明。你可以决定共享什么——仅共享逻辑，或者逻辑和 UI 都共享。</p><h3 id="我有一个现有的-android-应用程序。如何将其迁移到-kotlin-multiplatform" tabindex="-1">我有一个现有的 Android 应用程序。如何将其迁移到 Kotlin Multiplatform？ <a class="header-anchor" href="#我有一个现有的-android-应用程序。如何将其迁移到-kotlin-multiplatform" aria-label="Permalink to &quot;我有一个现有的 Android 应用程序。如何将其迁移到 Kotlin Multiplatform？&quot;">​</a></h3><p><a href="./multiplatform-integrate-in-existing-app">让你的 Android 应用程序在 iOS 上运行</a> 分步教程解释了如何让你的 Android 应用程序在 iOS 上使用原生 UI 运行。如果你还想使用 Compose Multiplatform 共享 UI，请参见 <a href="#i-have-an-existing-android-application-that-uses-jetpack-compose-what-should-i-do-to-migrate-it-to-other-platforms">相应的答案</a>。</p><h3 id="我在哪里可以找到完整的示例进行尝试" tabindex="-1">我在哪里可以找到完整的示例进行尝试？ <a class="header-anchor" href="#我在哪里可以找到完整的示例进行尝试" aria-label="Permalink to &quot;我在哪里可以找到完整的示例进行尝试？&quot;">​</a></h3><p>这里有一个 <a href="./multiplatform-samples">真实案例列表</a>。</p><h3 id="我在哪里可以找到真实-kotlin-multiplatform-应用程序的列表-有哪些公司在生产环境中使用-kmp" tabindex="-1">我在哪里可以找到真实 Kotlin Multiplatform 应用程序的列表？有哪些公司在生产环境中使用 KMP？ <a class="header-anchor" href="#我在哪里可以找到真实-kotlin-multiplatform-应用程序的列表-有哪些公司在生产环境中使用-kmp" aria-label="Permalink to &quot;我在哪里可以找到真实 Kotlin Multiplatform 应用程序的列表？有哪些公司在生产环境中使用 KMP？&quot;">​</a></h3><p>请查阅我们的 <a href="./case-studies">案例研究列表</a>，了解其他已在生产环境采用 Kotlin Multiplatform 的公司的经验。</p><h3 id="哪些操作系统可以与-kotlin-multiplatform-配合使用" tabindex="-1">哪些操作系统可以与 Kotlin Multiplatform 配合使用？ <a class="header-anchor" href="#哪些操作系统可以与-kotlin-multiplatform-配合使用" aria-label="Permalink to &quot;哪些操作系统可以与 Kotlin Multiplatform 配合使用？&quot;">​</a></h3><p>如果你要处理共享代码或平台特有代码（iOS 除外），你可以在 IDE 支持的任何操作系统上工作。</p><p>了解更多关于 <a href="./recommended-ides">推荐 IDE</a> 的信息。</p><p>如果你想编写 iOS 特有代码并在模拟器或真实设备上运行 iOS 应用程序，请使用装有 macOS 的 Mac。这是因为根据 Apple 的要求，iOS 模拟器只能在 macOS 上运行，而不能在其他操作系统（例如 Microsoft Windows 或 Linux）上运行。</p><h3 id="如何在-kotlin-multiplatform-项目中编写并发代码" tabindex="-1">如何在 Kotlin Multiplatform 项目中编写并发代码？ <a class="header-anchor" href="#如何在-kotlin-multiplatform-项目中编写并发代码" aria-label="Permalink to &quot;如何在 Kotlin Multiplatform 项目中编写并发代码？&quot;">​</a></h3><p>你仍然可以使用协程和流在 Kotlin Multiplatform 项目中编写异步代码。如何调用这些代码取决于你从何处调用它们。从 Kotlin 代码中调用挂起函数和流已被广泛记录，尤其是对于 Android。从 <a href="https://kotlinlang.org/docs/native-arc-integration.html#completion-handlers" target="_blank" rel="noreferrer">Swift 代码中调用它们</a> 需要更多一些工作，更多详细信息请参见 <a href="https://youtrack.jetbrains.com/issue/KT-47610" target="_blank" rel="noreferrer">KT-47610</a>。</p><p>目前从 Swift 调用挂起函数和流的最佳方法是使用像 <a href="https://github.com/rickclephas/KMP-NativeCoroutines" target="_blank" rel="noreferrer">KMP-NativeCoroutines</a> 这样的插件和库，结合 Swift 的 <code>async</code>/<code>await</code> 或像 Combine 和 RxSwift 这样的库。</p><p>要了解如何使用它们，请参见 <a href="./multiplatform-upgrade-app">在 iOS 和 Android 之间共享更多逻辑</a>。</p><h3 id="什么是-kotlin-native-它与-kotlin-multiplatform-有何关系" tabindex="-1">什么是 Kotlin/Native，它与 Kotlin Multiplatform 有何关系？ <a class="header-anchor" href="#什么是-kotlin-native-它与-kotlin-multiplatform-有何关系" aria-label="Permalink to &quot;什么是 Kotlin/Native，它与 Kotlin Multiplatform 有何关系？&quot;">​</a></h3><p><a href="https://kotlinlang.org/docs/native-overview.html" target="_blank" rel="noreferrer">Kotlin/Native</a> 是一种将 Kotlin 代码编译为原生二进制文件的技术，这些二进制文件无需虚拟机即可运行。它包括一个基于 <a href="https://llvm.org/" target="_blank" rel="noreferrer">LLVM</a> 的 Kotlin 编译器后端以及 Kotlin 标准库的原生实现。</p><p>Kotlin/Native 主要旨在允许为那些不希望或无法使用虚拟机的平台进行编译，例如嵌入式设备和 iOS。当你需要生成一个不需要额外运行时或虚拟机的自包含程序时，它特别适用。</p><p>例如，在移动应用程序中，用 Kotlin 编写的共享代码通过 Kotlin/JVM 编译为 Android 的 JVM 字节码，并通过 Kotlin/Native 编译为 iOS 的原生二进制文件。这使得与 Kotlin Multiplatform 在两个平台上的集成无缝。</p><p><img src="'+o+'" alt="Kotlin/Native and Kotlin/JVM binaries" width="350"></p><h3 id="如何加快-kotlin-multiplatform-模块对原生平台-ios、macos、linux-的编译速度" tabindex="-1">如何加快 Kotlin Multiplatform 模块对原生平台（iOS、macOS、Linux）的编译速度？ <a class="header-anchor" href="#如何加快-kotlin-multiplatform-模块对原生平台-ios、macos、linux-的编译速度" aria-label="Permalink to &quot;如何加快 Kotlin Multiplatform 模块对原生平台（iOS、macOS、Linux）的编译速度？&quot;">​</a></h3><p>请参见这些 <a href="https://kotlinlang.org/docs/native-improving-compilation-time.html" target="_blank" rel="noreferrer">提高 Kotlin/Native 编译时间</a> 的技巧。</p><h2 id="compose-multiplatform" tabindex="-1">Compose Multiplatform <a class="header-anchor" href="#compose-multiplatform" aria-label="Permalink to &quot;Compose Multiplatform&quot;">​</a></h2><h3 id="什么是-compose-multiplatform" tabindex="-1">什么是 Compose Multiplatform？ <a class="header-anchor" href="#什么是-compose-multiplatform" aria-label="Permalink to &quot;什么是 Compose Multiplatform？&quot;">​</a></h3><p><a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 是 JetBrains 开发的一个现代声明式和反应式 UI 框架，它提供了一种用少量 Kotlin 代码构建用户界面的简单方法。它还允许你一次编写 UI，并在任何支持的平台（iOS、Android、桌面（Windows、macOS、Linux）和 Web）上运行它。</p><h3 id="它与-jetpack-compose-for-android-有何关系" tabindex="-1">它与 Jetpack Compose for Android 有何关系？ <a class="header-anchor" href="#它与-jetpack-compose-for-android-有何关系" aria-label="Permalink to &quot;它与 Jetpack Compose for Android 有何关系？&quot;">​</a></h3><p>Compose Multiplatform 大部分 API 与 Google 开发的 Android UI 框架 <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> 共享。事实上，当你使用 Compose Multiplatform 面向 Android 时，你的应用只是在 Jetpack Compose 上运行。Compose Multiplatform 面向的其他平台可能在底层实现细节上与 Android 上的 Jetpack Compose 不同，但它们仍然为你提供相同的 API。</p><p>有关详细信息，请参见 <a href="./compose-multiplatform-and-jetpack-compose">框架互相关系概述</a>。</p><h3 id="我可以在哪些平台之间共享我的-ui" tabindex="-1">我可以在哪些平台之间共享我的 UI？ <a class="header-anchor" href="#我可以在哪些平台之间共享我的-ui" aria-label="Permalink to &quot;我可以在哪些平台之间共享我的 UI？&quot;">​</a></h3><p>我们希望你能够选择在任何流行的平台组合之间共享 UI——Android、iOS、桌面（Linux、macOS、Windows）和 Web（基于 Wasm）。目前 Compose Multiplatform 仅对 Android、iOS 和桌面稳定。有关更多详细信息，请参见 <a href="./supported-platforms">支持的平台</a>。</p><h3 id="我可以在生产环境中使用-compose-multiplatform-吗" tabindex="-1">我可以在生产环境中使用 Compose Multiplatform 吗？ <a class="header-anchor" href="#我可以在生产环境中使用-compose-multiplatform-吗" aria-label="Permalink to &quot;我可以在生产环境中使用 Compose Multiplatform 吗？&quot;">​</a></h3><p>Compose Multiplatform 的 Android、iOS 和桌面目标是稳定的。你可以在生产环境中使用它们。</p><p>基于 WebAssembly 的 Compose Multiplatform for Web 版本处于 Alpha 阶段，这意味着它正在积极开发中。你可以谨慎使用，并预计会遇到迁移问题。它的 UI 与 Compose Multiplatform for iOS、Android 和桌面相同。</p><h3 id="如何创建新的-compose-multiplatform-项目" tabindex="-1">如何创建新的 Compose Multiplatform 项目？ <a class="header-anchor" href="#如何创建新的-compose-multiplatform-项目" aria-label="Permalink to &quot;如何创建新的 Compose Multiplatform 项目？&quot;">​</a></h3><p><a href="./compose-multiplatform-create-first-app">创建包含共享逻辑和 UI 的 Compose Multiplatform 应用</a> 教程提供了为 Android、iOS 和桌面创建包含 Compose Multiplatform 的 Kotlin Multiplatform 项目的分步说明。你还可以观看 Kotlin 开发者布道师 Sebastian Aigner 在 YouTube 上创建的 <a href="https://www.youtube.com/watch?v=5_W5YKPShZ4" target="_blank" rel="noreferrer">视频教程</a>。</p><h3 id="我应该使用哪个-ide-来构建-compose-multiplatform-应用" tabindex="-1">我应该使用哪个 IDE 来构建 Compose Multiplatform 应用？ <a class="header-anchor" href="#我应该使用哪个-ide-来构建-compose-multiplatform-应用" aria-label="Permalink to &quot;我应该使用哪个 IDE 来构建 Compose Multiplatform 应用？&quot;">​</a></h3><p>我们建议使用 Android Studio IDE。有关更多详细信息，请参见 <a href="./recommended-ides">推荐的 IDE 和代码编辑器</a>。</p><h3 id="我可以试玩演示应用程序吗-我在哪里可以找到它" tabindex="-1">我可以试玩演示应用程序吗？我在哪里可以找到它？ <a class="header-anchor" href="#我可以试玩演示应用程序吗-我在哪里可以找到它" aria-label="Permalink to &quot;我可以试玩演示应用程序吗？我在哪里可以找到它？&quot;">​</a></h3><p>你可以试玩我们的 <a href="./multiplatform-samples">示例</a>。</p><h3 id="compose-multiplatform-是否提供组件" tabindex="-1">Compose Multiplatform 是否提供组件？ <a class="header-anchor" href="#compose-multiplatform-是否提供组件" aria-label="Permalink to &quot;Compose Multiplatform 是否提供组件？&quot;">​</a></h3><p>是的，Compose Multiplatform 完全支持 <a href="https://m3.material.io/" target="_blank" rel="noreferrer">Material 3</a> 组件。</p><h3 id="我可以在多大程度上自定义-material-组件的外观" tabindex="-1">我可以在多大程度上自定义 Material 组件的外观？ <a class="header-anchor" href="#我可以在多大程度上自定义-material-组件的外观" aria-label="Permalink to &quot;我可以在多大程度上自定义 Material 组件的外观？&quot;">​</a></h3><p>你可以使用 Material 的主题功能来自定义颜色、字体和边距。如果你想创建独特设计，可以创建自定义组件和布局。</p><h3 id="我可以在现有-kotlin-multiplatform-应用中共享-ui-吗" tabindex="-1">我可以在现有 Kotlin Multiplatform 应用中共享 UI 吗？ <a class="header-anchor" href="#我可以在现有-kotlin-multiplatform-应用中共享-ui-吗" aria-label="Permalink to &quot;我可以在现有 Kotlin Multiplatform 应用中共享 UI 吗？&quot;">​</a></h3><p>如果你的应用程序使用原生 API 作为其 UI（这是最常见的情况），你可以逐步将某些部分重写为 Compose Multiplatform，因为它为此提供了互操作性。你可以使用一个特殊的互操作视图来替换原生 UI，该视图封装了用 Compose 编写的通用 UI。</p><h3 id="我有一个使用-jetpack-compose-的现有-android-应用程序。我应该如何将其迁移到其他平台" tabindex="-1">我有一个使用 Jetpack Compose 的现有 Android 应用程序。我应该如何将其迁移到其他平台？ <a class="header-anchor" href="#我有一个使用-jetpack-compose-的现有-android-应用程序。我应该如何将其迁移到其他平台" aria-label="Permalink to &quot;我有一个使用 Jetpack Compose 的现有 Android 应用程序。我应该如何将其迁移到其他平台？&quot;">​</a></h3><p>应用的迁移包括两个部分：迁移 UI 和迁移逻辑。迁移的复杂程度取决于你的应用程序的复杂性以及你使用的 Android 特有库的数量。你可以将大部分屏幕迁移到 Compose Multiplatform 而无需更改。所有 Jetpack Compose 组件都受支持。然而，某些 API 仅在 Android 目标中工作——它们可能是 Android 特有的，或者尚未移植到其他平台。例如，资源处理是 Android 特有的，因此你需要迁移到 <a href="./compose-multiplatform-resources">Compose Multiplatform 资源库</a> 或使用社区解决方案。Android <a href="https://developer.android.com/jetpack/androidx/releases/navigation" target="_blank" rel="noreferrer">导航库</a> 也是 Android 特有的，但有可用的 <a href="./compose-navigation-routing">社区替代方案</a>。有关仅适用于 Android 的组件的更多信息，请参见当前的 <a href="./compose-android-only-components">Android 特有 API 列表</a>。</p><p>你需要 <a href="./multiplatform-integrate-in-existing-app">将业务逻辑迁移到 Kotlin Multiplatform</a>。当你尝试将代码移动到共享模块时，使用 Android 依赖项的部分将停止编译，你需要重写它们。</p><ul><li>你可以重写使用 Android 特有依赖项的代码，转而使用多平台库。有些库可能已经支持 Kotlin Multiplatform，因此无需更改。你可以查看 <a href="https://github.com/terrakok/kmp-awesome" target="_blank" rel="noreferrer">KMP-awesome</a> 库列表。</li><li>或者，你可以将通用代码与平台特有逻辑分离，并 <a href="./multiplatform-connect-to-apis">提供通用接口</a>，这些接口根据平台有不同的实现。在 Android 上，实现可以使用你现有的功能，而在其他平台（如 iOS）上，你需要为通用接口提供新的实现。</li></ul><h3 id="我可以将-compose-屏幕集成到现有的-ios-应用中吗" tabindex="-1">我可以将 Compose 屏幕集成到现有的 iOS 应用中吗？ <a class="header-anchor" href="#我可以将-compose-屏幕集成到现有的-ios-应用中吗" aria-label="Permalink to &quot;我可以将 Compose 屏幕集成到现有的 iOS 应用中吗？&quot;">​</a></h3><p>可以。Compose Multiplatform 支持不同的集成场景。有关与 iOS UI 框架集成的更多信息，请参见 <a href="./compose-swiftui-integration">与 SwiftUI 集成</a> 和 <a href="./compose-uikit-integration">与 UIKit 集成</a>。</p><h3 id="我可以将-uikit-或-swiftui-组件集成到-compose-屏幕中吗" tabindex="-1">我可以将 UIKit 或 SwiftUI 组件集成到 Compose 屏幕中吗？ <a class="header-anchor" href="#我可以将-uikit-或-swiftui-组件集成到-compose-屏幕中吗" aria-label="Permalink to &quot;我可以将 UIKit 或 SwiftUI 组件集成到 Compose 屏幕中吗？&quot;">​</a></h3><p>可以。请参见 <a href="./compose-swiftui-integration">与 SwiftUI 集成</a> 和 <a href="./compose-uikit-integration">与 UIKit 集成</a>。</p><h3 id="当我的移动操作系统更新并改变系统组件的视觉样式或行为时-会发生什么" tabindex="-1">当我的移动操作系统更新并改变系统组件的视觉样式或行为时，会发生什么？ <a class="header-anchor" href="#当我的移动操作系统更新并改变系统组件的视觉样式或行为时-会发生什么" aria-label="Permalink to &quot;当我的移动操作系统更新并改变系统组件的视觉样式或行为时，会发生什么？&quot;">​</a></h3><p>操作系统更新后，你的 UI 将保持不变，因为所有组件都绘制在画布上。如果你在屏幕中嵌入了原生 iOS 组件，更新可能会影响它们的外观。</p><h2 id="未来计划" tabindex="-1">未来计划 <a class="header-anchor" href="#未来计划" aria-label="Permalink to &quot;未来计划&quot;">​</a></h2><h3 id="kotlin-multiplatform-的演进计划是什么" tabindex="-1">Kotlin Multiplatform 的演进计划是什么？ <a class="header-anchor" href="#kotlin-multiplatform-的演进计划是什么" aria-label="Permalink to &quot;Kotlin Multiplatform 的演进计划是什么？&quot;">​</a></h3><p>我们 JetBrains 投入了大量精力，旨在为多平台开发提供最佳体验，并消除多平台用户现有的痛点。我们计划改进核心 Kotlin Multiplatform 技术、与 Apple 生态系统的集成、工具链以及我们的 Compose Multiplatform UI 框架。<a href="https://blog.jetbrains.com/kotlin/2024/10/kotlin-multiplatform-development-roadmap-for-2025/" target="_blank" rel="noreferrer">查看我们的路线图</a>。</p><h3 id="compose-multiplatform-何时会稳定" tabindex="-1">Compose Multiplatform 何时会稳定？ <a class="header-anchor" href="#compose-multiplatform-何时会稳定" aria-label="Permalink to &quot;Compose Multiplatform 何时会稳定？&quot;">​</a></h3><p>Compose Multiplatform 对 Android、iOS 和桌面是稳定的，而 Web 平台支持处于 Alpha 阶段。我们正在努力实现 Web 平台的稳定版本，具体日期将另行公布。</p><p>有关稳定状态的更多信息，请参见 <a href="./supported-platforms">支持的平台</a>。</p><h3 id="kotlin-和-compose-multiplatform-对-web-目标的未来支持如何" tabindex="-1">Kotlin 和 Compose Multiplatform 对 Web 目标的未来支持如何？ <a class="header-anchor" href="#kotlin-和-compose-multiplatform-对-web-目标的未来支持如何" aria-label="Permalink to &quot;Kotlin 和 Compose Multiplatform 对 Web 目标的未来支持如何？&quot;">​</a></h3><p>我们目前正将资源集中在 WebAssembly (Wasm) 上，它展现出巨大的潜力。你可以尝试我们的新 <a href="https://kotlinlang.org/docs/wasm-overview.html" target="_blank" rel="noreferrer">Kotlin/Wasm 后端</a> 和由 Wasm 驱动的 <a href="https://kotl.in/wasm-compose-example" target="_blank" rel="noreferrer">Compose Multiplatform for Web</a>。</p><p>至于 JS 目标，Kotlin/JS 后端已达到稳定状态。在 Compose Multiplatform 中，由于资源限制，我们已将重点从 JS Canvas 转移到 Wasm，我们认为 Wasm 更具前景。</p><p>我们还提供 Compose HTML，它以前被称为 Compose Multiplatform for web。这是一个用于在 Kotlin/JS 中操作 DOM 的额外库，它不旨在共享跨平台的 UI。</p><h3 id="有没有改善多平台开发工具链的计划" tabindex="-1">有没有改善多平台开发工具链的计划？ <a class="header-anchor" href="#有没有改善多平台开发工具链的计划" aria-label="Permalink to &quot;有没有改善多平台开发工具链的计划？&quot;">​</a></h3><p>有，我们深知目前多平台工具链面临的挑战，并正在积极改进多个领域。</p><h3 id="你们会提供-swift-互操作吗" tabindex="-1">你们会提供 Swift 互操作吗？ <a class="header-anchor" href="#你们会提供-swift-互操作吗" aria-label="Permalink to &quot;你们会提供 Swift 互操作吗？&quot;">​</a></h3><p>会。我们目前正在调查各种方法，以提供与 Swift 的直接互操作性，重点是将 Kotlin 代码导出到 Swift。</p>',81)]))}const k=t(r,[["render",p]]);export{c as __pageData,k as default};
