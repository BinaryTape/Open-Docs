import{_ as r,a as k,b as h}from"./chunks/variable-optimised-out.gsL8I0ER.js";import{_ as d,a as g,b as c,c as E,d as u,e as y}from"./chunks/flow-debug-4.C9ixceil.js";import{_ as F,C as o,c as m,o as b,ag as l,j as i,a,G as t,w as n}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"使用 IntelliJ IDEA 偵錯 Kotlin Flow – 教學課程","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/debug-flow-with-idea.md","filePath":"zh-Hant/kotlin/debug-flow-with-idea.md","lastUpdated":1754307826000}'),f={name:"zh-Hant/kotlin/debug-flow-with-idea.md"};function C(_,s,B,x,D,v){const e=o("tab"),p=o("tabs");return b(),m("div",null,[s[6]||(s[6]=l('<h1 id="使用-intellij-idea-偵錯-kotlin-flow-–-教學課程" tabindex="-1">使用 IntelliJ IDEA 偵錯 Kotlin Flow – 教學課程 <a class="header-anchor" href="#使用-intellij-idea-偵錯-kotlin-flow-–-教學課程" aria-label="Permalink to &quot;使用 IntelliJ IDEA 偵錯 Kotlin Flow – 教學課程&quot;">​</a></h1><p>本教學課程示範如何建立 Kotlin Flow 並使用 IntelliJ IDEA 偵錯。</p><p>本教學課程假設您已具備 <a href="/zh-Hant/kotlin/coroutines-guide">協程</a> 和 <a href="/zh-Hant/kotlin/flow#flows">Kotlin Flow</a> 概念的基礎知識。</p><h2 id="建立-kotlin-flow" tabindex="-1">建立 Kotlin Flow <a class="header-anchor" href="#建立-kotlin-flow" aria-label="Permalink to &quot;建立 Kotlin Flow&quot;">​</a></h2><p>建立一個具有慢速發射器和慢速收集器的 Kotlin <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flow.html" target="_blank" rel="noreferrer">flow</a>：</p>',5)),i("ol",null,[s[4]||(s[4]=i("li",null,[i("p",null,[a("在 IntelliJ IDEA 中開啟一個 Kotlin 專案。如果您沒有專案，請"),i("a",{href:"/zh-Hant/kotlin/jvm-get-started#create-a-project"},"建立一個"),a("。")])],-1)),i("li",null,[s[2]||(s[2]=i("p",null,[a("若要在 Gradle 專案中使用 "),i("code",null,"kotlinx.coroutines"),a(" 函式庫，請將以下依賴項新增至 "),i("code",null,"build.gradle(.kts)"),a("：")],-1)),t(p,{group:"build-script"},{default:n(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[3]||(s[3]=i("p",null,[a("對於其他建置系統，請參閱 "),i("a",{href:"https://github.com/Kotlin/kotlinx.coroutines#using-in-your-projects",target:"_blank",rel:"noreferrer"},[i("code",null,"kotlinx.coroutines"),a(" README")]),a(" 中的說明。")],-1))]),s[5]||(s[5]=l(`<li><p>開啟 <code>src/main/kotlin</code> 中的 <code>Main.kt</code> 檔案。</p><p><code>src</code> 目錄包含 Kotlin 原始碼檔案和資源。<code>Main.kt</code> 檔案包含將印出 <code>Hello World!</code> 的範例程式碼。</p></li><li><p>建立傳回三個數字流的 <code>simple()</code> 函數：</p><ul><li>使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html" target="_blank" rel="noreferrer"><code>delay()</code></a> 函數模仿耗費 CPU 的阻塞程式碼。它會暫停協程 100 毫秒而不會阻塞執行緒。</li><li>使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow-collector/emit.html" target="_blank" rel="noreferrer"><code>emit()</code></a> 函數在 <code>for</code> 迴圈中產生值。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.flow.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.system.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>更改 <code>main()</code> 函數中的程式碼：</p><ul><li>使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html" target="_blank" rel="noreferrer"><code>runBlocking()</code></a> 區塊來包裝協程。</li><li>使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html" target="_blank" rel="noreferrer"><code>collect()</code></a> 函數收集發射的值。</li><li>使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html" target="_blank" rel="noreferrer"><code>delay()</code></a> 函數模仿耗費 CPU 的程式碼。它會暫停協程 300 毫秒而不會阻塞執行緒。</li><li>使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html" target="_blank" rel="noreferrer"><code>println()</code></a> 函數印出從流中收集的值。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>點擊 <strong>Build Project</strong> (建置專案) 來建置程式碼。</p><p><img src="`+r+'" alt="Build an application"></p></li>',4))]),s[7]||(s[7]=l('<h2 id="偵錯協程" tabindex="-1">偵錯協程 <a class="header-anchor" href="#偵錯協程" aria-label="Permalink to &quot;偵錯協程&quot;">​</a></h2><ol><li><p>在呼叫 <code>emit()</code> 函數的行上設定斷點：</p><p><img src="'+d+'" alt="Build a console application"></p></li><li><p>點擊畫面頂部執行組態旁的 <strong>Debug</strong> (偵錯) 來以偵錯模式執行程式碼。</p><p><img src="'+k+'" alt="Build a console application"></p><p><strong>Debug</strong> (偵錯) 工具視窗隨即出現：</p><ul><li><strong>Frames</strong> (堆疊影格) 索引標籤包含呼叫堆疊。</li><li><strong>Variables</strong> (變數) 索引標籤包含當前上下文中的變數。它告訴我們流正在發射第一個值。</li><li><strong>Coroutines</strong> (協程) 索引標籤包含有關執行中或已暫停協程的資訊。</li></ul><p><img src="'+g+'" alt="Debug the coroutine"></p></li><li><p>點擊 <strong>Debug</strong> (偵錯) 工具視窗中的 <strong>Resume Program</strong> (繼續程式) 以繼續偵錯工作階段。程式會停在相同的斷點。</p><p><img src="'+c+'" alt="Debug the coroutine"></p><p>現在流發射第二個值。</p><p><img src="'+E+'" alt="Debug the coroutine"></p></li></ol><h3 id="優化移除的變數" tabindex="-1">優化移除的變數 <a class="header-anchor" href="#優化移除的變數" aria-label="Permalink to &quot;優化移除的變數&quot;">​</a></h3><p>如果您使用 <code>suspend</code> 函數，在偵錯器中，您可能會在變數名稱旁邊看到「was optimized out」(已優化移除) 的文字：</p><p><img src="'+h+`" alt="Variable &quot;a&quot; was optimized out"></p><p>此文字表示變數的生命週期已縮短，並且該變數已不再存在。 由於您看不到它們的值，因此很難偵錯帶有優化變數的程式碼。 您可以使用 <code>-Xdebug</code> 編譯器選項停用此行為。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><strong>切勿在生產環境中使用此標誌</strong>：<code>-Xdebug</code> 可能會<a href="https://youtrack.jetbrains.com/issue/KT-48678/Coroutine-debugger-disable-was-optimised-out-compiler-feature#focus=Comments-27-6015585.0-0" target="_blank" rel="noreferrer">導致記憶體洩漏</a>。</p></div><h2 id="新增一個並行執行的協程" tabindex="-1">新增一個並行執行的協程 <a class="header-anchor" href="#新增一個並行執行的協程" aria-label="Permalink to &quot;新增一個並行執行的協程&quot;">​</a></h2><ol><li><p>開啟 <code>src/main/kotlin</code> 中的 <code>Main.kt</code> 檔案。</p></li><li><p>增強程式碼以並行執行發射器和收集器：</p><ul><li>新增一個對 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/buffer.html" target="_blank" rel="noreferrer"><code>buffer()</code></a> 函數的呼叫，以並行執行發射器和收集器。<code>buffer()</code> 會儲存發射的值並在單獨的協程中執行流收集器。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>點擊 <strong>Build Project</strong> (建置專案) 來建置程式碼。</p></li></ol><h2 id="偵錯帶有兩個協程的-kotlin-flow" tabindex="-1">偵錯帶有兩個協程的 Kotlin Flow <a class="header-anchor" href="#偵錯帶有兩個協程的-kotlin-flow" aria-label="Permalink to &quot;偵錯帶有兩個協程的 Kotlin Flow&quot;">​</a></h2><ol><li><p>在 <code>println(value)</code> 處設定一個新斷點。</p></li><li><p>點擊畫面頂部執行組態旁的 <strong>Debug</strong> (偵錯) 來以偵錯模式執行程式碼。</p><p><img src="`+u+'" alt="Build a console application"></p><p><strong>Debug</strong> (偵錯) 工具視窗隨即出現。</p><p>在 <strong>Coroutines</strong> (協程) 索引標籤中，您可以看到有兩個協程正在並行執行。由於 <code>buffer()</code> 函數，流收集器和發射器在單獨的協程中執行。 <code>buffer()</code> 函數會緩衝從流中發射的值。 發射器協程處於 <strong>RUNNING</strong> (執行中) 狀態，而收集器協程處於 <strong>SUSPENDED</strong> (已暫停) 狀態。</p></li><li><p>點擊 <strong>Debug</strong> (偵錯) 工具視窗中的 <strong>Resume Program</strong> (繼續程式) 以繼續偵錯工作階段。</p><p><img src="'+y+'" alt="Debugging coroutines"></p><p>現在收集器協程處於 <strong>RUNNING</strong> (執行中) 狀態，而發射器協程處於 <strong>SUSPENDED</strong> (已暫停) 狀態。</p><p>您可以深入探究每個協程來偵錯您的程式碼。</p></li></ol>',11))])}const T=F(f,[["render",C]]);export{I as __pageData,T as default};
