import{_ as t,c as r,o as e,ag as l}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"兼容性指南：Kotlin 1.3","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/compatibility-guide-13.md","filePath":"kotlin/compatibility-guide-13.md","lastUpdated":1754307826000}'),a={name:"kotlin/compatibility-guide-13.md"};function n(s,o,i,p,c,g){return e(),r("div",null,o[0]||(o[0]=[l('<h1 id="兼容性指南-kotlin-1-3" tabindex="-1">兼容性指南：Kotlin 1.3 <a class="header-anchor" href="#兼容性指南-kotlin-1-3" aria-label="Permalink to &quot;兼容性指南：Kotlin 1.3&quot;">​</a></h1><p><em><a href="/kotlin/kotlin-evolution-principles">保持语言现代性</a></em> 和 <em><a href="/kotlin/kotlin-evolution-principles">舒适的更新</a></em> 是 Kotlin 语言设计中的基本原则。前者指出应移除阻碍语言演进的结构，后者则要求这种移除应提前充分沟通，以使代码迁移尽可能顺畅。</p><p>虽然大多数语言变更已通过更新日志或编译器警告等其他渠道公布，但本文档将它们全部汇总，为从 Kotlin 1.2 迁移到 Kotlin 1.3 提供完整参考。</p><h2 id="基本术语" tabindex="-1">基本术语 <a class="header-anchor" href="#基本术语" aria-label="Permalink to &quot;基本术语&quot;">​</a></h2><p>本文档中，我们引入了几种兼容性：</p><ul><li><em>源代码</em>: 源代码不兼容的变更会阻止过去正常编译（无错误或警告）的代码继续编译。</li><li><em>二进制</em>: 如果互换两个二进制 artifact 不会导致加载或链接错误，则称它们二进制兼容。</li><li><em>行为</em>: 如果同一程序在应用变更前后表现出不同的行为，则称该变更行为不兼容。</li></ul><p>请记住，这些定义仅适用于纯 Kotlin。从其他语言（例如 Java）视角来看的 Kotlin 代码兼容性超出了本文档的范围。</p><h2 id="不兼容的变更" tabindex="-1">不兼容的变更 <a class="header-anchor" href="#不兼容的变更" aria-label="Permalink to &quot;不兼容的变更&quot;">​</a></h2><h3 id="构造函数实参关于-clinit-调用的求值顺序" tabindex="-1">构造函数实参关于 <code>&lt;clinit&gt;</code> 调用的求值顺序 <a class="header-anchor" href="#构造函数实参关于-clinit-调用的求值顺序" aria-label="Permalink to &quot;构造函数实参关于 `&lt;clinit&gt;` 调用的求值顺序&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-19532" target="_blank" rel="noreferrer">KT-19532</a></p><p><strong>组件</strong>: Kotlin/JVM</p><p><strong>不兼容的变更类型</strong>: 行为</p><p><strong>简述</strong>: 1.3 中关于类初始化的求值顺序已变更</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.3: 旧行为（详见问题）</li><li><blockquote><p>= 1.3: 行为已变更，可以使用 <code>-Xnormalize-constructor-calls=disable</code> 临时恢复到 1.3 之前的行为。对该标志的支持将在下一个主要版本中移除。</p></blockquote></li></ul></blockquote><h3 id="注解构造函数形参上缺少-getter-目标注解" tabindex="-1">注解构造函数形参上缺少 getter 目标注解 <a class="header-anchor" href="#注解构造函数形参上缺少-getter-目标注解" aria-label="Permalink to &quot;注解构造函数形参上缺少 getter 目标注解&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-25287" target="_blank" rel="noreferrer">KT-25287</a></p><p><strong>组件</strong>: Kotlin/JVM</p><p><strong>不兼容的变更类型</strong>: 行为</p><p><strong>简述</strong>: 1.3 中注解构造函数形参上的 getter 目标注解将正确写入 classfile</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.3: 注解构造函数形参上的 getter 目标注解未应用</li><li><blockquote><p>=1.3: 注解构造函数形参上的 getter 目标注解已正确应用并写入生成的代码</p></blockquote></li></ul></blockquote><h3 id="类构造函数的-get-注解中缺少错误报告" tabindex="-1">类构造函数的 <code>@get:</code> 注解中缺少错误报告 <a class="header-anchor" href="#类构造函数的-get-注解中缺少错误报告" aria-label="Permalink to &quot;类构造函数的 `@get:` 注解中缺少错误报告&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-19628" target="_blank" rel="noreferrer">KT-19628</a></p><p><strong>组件</strong>: 核心语言</p><p><strong>不兼容的变更类型</strong>: 源代码</p><p><strong>简述</strong>: 1.3 中 getter 目标注解中的错误将正确报告</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.2: getter 目标注解中的编译错误未报告，导致不正确的代码正常编译。</li><li>1.2.x: 错误仅由工具报告，编译器仍会在没有任何警告的情况下编译此类代码</li><li><blockquote><p>=1.3: 错误也由编译器报告，导致错误代码被拒绝</p></blockquote></li></ul></blockquote><h3 id="访问带有-notnull-注解的-java-类型时的可空性断言" tabindex="-1">访问带有 @NotNull 注解的 Java 类型时的可空性断言 <a class="header-anchor" href="#访问带有-notnull-注解的-java-类型时的可空性断言" aria-label="Permalink to &quot;访问带有 @NotNull 注解的 Java 类型时的可空性断言&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-20830" target="_blank" rel="noreferrer">KT-20830</a></p><p><strong>组件</strong>: Kotlin/JVM</p><p><strong>不兼容的变更类型</strong>: 行为</p><p><strong>简述</strong>: 对带有非空注解的 Java 类型生成的可空性断言将更具侵略性，导致在此处传递 <code>null</code> 的代码更快失败。</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.3: 当涉及类型推断时，编译器可能会漏掉此类断言，从而允许在针对二进制 artifact 编译期间进行潜在的 <code>null</code> 传播（详见问题）。</li><li><blockquote><p>=1.3: 编译器生成了缺失的断言。这可能会导致（错误地）在此处传递 <code>null</code> 的代码更快失败。可以使用 <code>-XXLanguage:-StrictJavaNullabilityAssertions</code> 临时恢复到 1.3 之前的行为。对该标志的支持将在下一个主要版本中移除。</p></blockquote></li></ul></blockquote><h3 id="枚举成员上的不健全智能类型转换" tabindex="-1">枚举成员上的不健全智能类型转换 <a class="header-anchor" href="#枚举成员上的不健全智能类型转换" aria-label="Permalink to &quot;枚举成员上的不健全智能类型转换&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-20772" target="_blank" rel="noreferrer">KT-20772</a></p><p><strong>组件</strong>: 核心语言</p><p><strong>不兼容的变更类型</strong>: 源代码</p><p><strong>简述</strong>: 枚举项成员上的智能类型转换将正确地仅应用于该枚举项</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.3: 枚举项成员上的智能类型转换可能导致其他枚举项的相同成员上的不健全智能类型转换。</li><li><blockquote><p>=1.3: 智能类型转换将正确地仅应用于枚举项的成员。<code>-XXLanguage:-SoundSmartcastForEnumEntries</code> 将临时恢复旧行为。对该标志的支持将在下一个主要版本中移除。</p></blockquote></li></ul></blockquote><h3 id="val-幕后字段在-getter-中的重新赋值" tabindex="-1">val 幕后字段在 getter 中的重新赋值 <a class="header-anchor" href="#val-幕后字段在-getter-中的重新赋值" aria-label="Permalink to &quot;val 幕后字段在 getter 中的重新赋值&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-16681" target="_blank" rel="noreferrer">KT-16681</a></p><p><strong>组件</strong>: 核心语言</p><p><strong>不兼容的变更类型</strong>: 源代码</p><p><strong>简述</strong>: 在 getter 中重新赋值 <code>val</code> 属性的幕后字段现在已被禁止</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.2: Kotlin 编译器允许在 <code>val</code> 的 getter 中修改幕后字段。这不仅违反了 Kotlin 语义，还会生成行为不当的 JVM 字节码，从而重新赋值 <code>final</code> 字段。</li><li>1.2.X: 对重新赋值 <code>val</code> 幕后字段的代码报告弃用警告</li><li><blockquote><p>=1.3: 弃用警告提升为错误</p></blockquote></li></ul></blockquote><h3 id="for-循环迭代前对数组的捕获" tabindex="-1">for 循环迭代前对数组的捕获 <a class="header-anchor" href="#for-循环迭代前对数组的捕获" aria-label="Permalink to &quot;for 循环迭代前对数组的捕获&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-21354" target="_blank" rel="noreferrer">KT-21354</a></p><p><strong>组件</strong>: Kotlin/JVM</p><p><strong>不兼容的变更类型</strong>: 源代码</p><p><strong>简述</strong>: 如果 for 循环区间中的表达式是循环体中更新的局部变量，此变更会影响循环执行。这与迭代其他容器（例如区间、字符序列和集合）不一致。</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.2: 所描述的代码模式可正常编译，但对局部变量的更新会影响循环执行</li><li>1.2.X: 如果 for 循环中的区间表达式是数组类型的局部变量并在循环体中赋值，则报告弃用警告</li><li>1.3: 在此类情况下变更行为，以与其他容器保持一致</li></ul></blockquote><h3 id="枚举项中的嵌套分类器" tabindex="-1">枚举项中的嵌套分类器 <a class="header-anchor" href="#枚举项中的嵌套分类器" aria-label="Permalink to &quot;枚举项中的嵌套分类器&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-16310" target="_blank" rel="noreferrer">KT-16310</a></p><p><strong>组件</strong>: 核心语言</p><p><strong>不兼容的变更类型</strong>: 源代码</p><p><strong>简述</strong>: 从 Kotlin 1.3 开始，禁止在枚举项中嵌套分类器（类、object、接口、注解类、枚举类）</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.2: 枚举项中的嵌套分类器可正常编译，但可能在运行时失败并抛出异常</li><li>1.2.X: 对嵌套分类器报告弃用警告</li><li><blockquote><p>=1.3: 弃用警告提升为错误</p></blockquote></li></ul></blockquote><h3 id="数据类覆盖-copy" tabindex="-1">数据类覆盖 copy <a class="header-anchor" href="#数据类覆盖-copy" aria-label="Permalink to &quot;数据类覆盖 copy&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-19618" target="_blank" rel="noreferrer">KT-19618</a></p><p><strong>组件</strong>: 核心语言</p><p><strong>不兼容的变更类型</strong>: 源代码</p><p><strong>简述</strong>: 从 Kotlin 1.3 开始，禁止数据类覆盖 <code>copy()</code></p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.2: 覆盖 <code>copy()</code> 的数据类可正常编译，但可能在运行时失败/表现出奇怪的行为</li><li>1.2.X: 对覆盖 <code>copy()</code> 的数据类报告弃用警告</li><li><blockquote><p>=1.3: 弃用警告提升为错误</p></blockquote></li></ul></blockquote><h3 id="继承-throwable-且捕获外部类泛型参数的内部类" tabindex="-1">继承 Throwable 且捕获外部类泛型参数的内部类 <a class="header-anchor" href="#继承-throwable-且捕获外部类泛型参数的内部类" aria-label="Permalink to &quot;继承 Throwable 且捕获外部类泛型参数的内部类&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-17981" target="_blank" rel="noreferrer">KT-17981</a></p><p><strong>组件</strong>: 核心语言</p><p><strong>不兼容的变更类型</strong>: 源代码</p><p><strong>简述</strong>: 从 Kotlin 1.3 开始，不允许内部类继承 <code>Throwable</code></p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.2: 继承 <code>Throwable</code> 的内部类可正常编译。如果此类内部类恰好捕获了泛型参数，则可能导致在运行时失败的奇怪代码模式。</li><li>1.2.X: 对继承 <code>Throwable</code> 的内部类报告弃用警告</li><li><blockquote><p>=1.3: 弃用警告提升为错误</p></blockquote></li></ul></blockquote><h3 id="关于涉及伴生对象复杂类层次结构的可见性规则" tabindex="-1">关于涉及伴生对象复杂类层次结构的可见性规则 <a class="header-anchor" href="#关于涉及伴生对象复杂类层次结构的可见性规则" aria-label="Permalink to &quot;关于涉及伴生对象复杂类层次结构的可见性规则&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-21515" target="_blank" rel="noreferrer">KT-21515</a>, <a href="https://youtrack.jetbrains.com/issue/KT-25333" target="_blank" rel="noreferrer">KT-25333</a></p><p><strong>组件</strong>: 核心语言</p><p><strong>不兼容的变更类型</strong>: 源代码</p><p><strong>简述</strong>: 从 Kotlin 1.3 开始，对于涉及伴生对象和嵌套分类器的复杂类层次结构，短名称的可见性规则更加严格。</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.2: 旧的可见性规则（详见问题）</li><li>1.2.X: 对不再可访问的短名称报告弃用警告。工具建议通过添加全限定名进行自动迁移。</li><li><blockquote><p>=1.3: 弃用警告提升为错误。问题代码应添加全限定符或显式导入</p></blockquote></li></ul></blockquote><h3 id="vararg-注解的非常量形参" tabindex="-1">vararg 注解的非常量形参 <a class="header-anchor" href="#vararg-注解的非常量形参" aria-label="Permalink to &quot;vararg 注解的非常量形参&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-23153" target="_blank" rel="noreferrer">KT-23153</a></p><p><strong>组件</strong>: 核心语言</p><p><strong>不兼容的变更类型</strong>: 源代码</p><p><strong>简述</strong>: 从 Kotlin 1.3 开始，禁止将非常量值设置为 vararg 注解形参</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.2: 编译器允许为 vararg 注解形参传递非常量值，但实际上在字节码生成期间会丢弃该值，导致非显而易见的行为</li><li>1.2.X: 对此类代码模式报告弃用警告</li><li><blockquote><p>=1.3: 弃用警告提升为错误</p></blockquote></li></ul></blockquote><h3 id="局部注解类" tabindex="-1">局部注解类 <a class="header-anchor" href="#局部注解类" aria-label="Permalink to &quot;局部注解类&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-23277" target="_blank" rel="noreferrer">KT-23277</a></p><p><strong>组件</strong>: 核心语言</p><p><strong>不兼容的变更类型</strong>: 源代码</p><p><strong>简述</strong>: 从 Kotlin 1.3 开始，不支持局部注解类</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.2: 编译器可正常编译局部注解类</li><li>1.2.X: 对局部注解类报告弃用警告</li><li><blockquote><p>=1.3: 弃用警告提升为错误</p></blockquote></li></ul></blockquote><h3 id="局部委托属性上的智能类型转换" tabindex="-1">局部委托属性上的智能类型转换 <a class="header-anchor" href="#局部委托属性上的智能类型转换" aria-label="Permalink to &quot;局部委托属性上的智能类型转换&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-22517" target="_blank" rel="noreferrer">KT-22517</a></p><p><strong>组件</strong>: 核心语言</p><p><strong>不兼容的变更类型</strong>: 源代码</p><p><strong>简述</strong>: 从 Kotlin 1.3 开始，不允许对局部委托属性进行智能类型转换</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.2: 编译器允许对局部委托属性进行智能类型转换，这在委托行为不当的情况下可能导致不健全智能类型转换</li><li>1.2.X: 局部委托属性上的智能类型转换被报告为已弃用（编译器发出警告）</li><li><blockquote><p>=1.3: 弃用警告提升为错误</p></blockquote></li></ul></blockquote><h3 id="mod-操作符约定" tabindex="-1">mod 操作符约定 <a class="header-anchor" href="#mod-操作符约定" aria-label="Permalink to &quot;mod 操作符约定&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-24197" target="_blank" rel="noreferrer">KT-24197</a></p><p><strong>组件</strong>: 核心语言</p><p><strong>不兼容的变更类型</strong>: 源代码</p><p><strong>简述</strong>: 从 Kotlin 1.3 开始，禁止声明 <code>mod</code> 操作符，以及解析为此类声明的调用</p><p><strong>弃用周期</strong>:</p><ul><li>1.1.X, 1.2.X: 对 <code>operator mod</code> 的声明以及解析到它的调用报告警告</li><li>1.3.X: 将警告提升为错误，但仍允许解析到 <code>operator mod</code> 声明</li><li>1.4.X: 不再将调用解析到 <code>operator mod</code></li></ul></blockquote><h3 id="以具名形式向-vararg-传递单个元素" tabindex="-1">以具名形式向 vararg 传递单个元素 <a class="header-anchor" href="#以具名形式向-vararg-传递单个元素" aria-label="Permalink to &quot;以具名形式向 vararg 传递单个元素&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-20588" target="_blank" rel="noreferrer">KT-20588</a>, <a href="https://youtrack.jetbrains.com/issue/KT-20589" target="_blank" rel="noreferrer">KT-20589</a>。另请参见 <a href="https://youtrack.jetbrains.com/issue/KT-20171" target="_blank" rel="noreferrer">KT-20171</a></p><p><strong>组件</strong>: 核心语言</p><p><strong>不兼容的变更类型</strong>: 源代码</p><p><strong>简述</strong>: 在 Kotlin 1.3 中，向 vararg 赋值单个元素已被弃用，应替换为连续的展开和数组构造。</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.2: 以具名形式向 vararg 赋值单个值元素可正常编译，并被视为向数组赋值<em>单个</em>元素，导致向 vararg 赋值数组时出现非显而易见的行为</li><li>1.2.X: 对此类赋值报告弃用警告，建议用户切换到连续的展开和数组构造。</li><li>1.3.X: 警告提升为错误</li><li><blockquote><p>= 1.4: 变更向 vararg 赋值单个元素的语义，使数组赋值等同于数组展开的赋值</p></blockquote></li></ul></blockquote><h3 id="目标为-expression-的注解的保留策略" tabindex="-1">目标为 EXPRESSION 的注解的保留策略 <a class="header-anchor" href="#目标为-expression-的注解的保留策略" aria-label="Permalink to &quot;目标为 EXPRESSION 的注解的保留策略&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-13762" target="_blank" rel="noreferrer">KT-13762</a></p><p><strong>组件</strong>: 核心语言</p><p><strong>不兼容的变更类型</strong>: 源代码</p><p><strong>简述</strong>: 从 Kotlin 1.3 开始，目标为 <code>EXPRESSION</code> 的注解只允许 <code>SOURCE</code> 保留策略</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.2: 目标为 <code>EXPRESSION</code> 且保留策略非 <code>SOURCE</code> 的注解是允许的，但在使用点被静默忽略</li><li>1.2.X: 对此类注解的声明报告弃用警告</li><li><blockquote><p>=1.3: 警告提升为错误</p></blockquote></li></ul></blockquote><h3 id="目标为-parameter-的注解不应适用于形参的类型" tabindex="-1">目标为 PARAMETER 的注解不应适用于形参的类型 <a class="header-anchor" href="#目标为-parameter-的注解不应适用于形参的类型" aria-label="Permalink to &quot;目标为 PARAMETER 的注解不应适用于形参的类型&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-9580" target="_blank" rel="noreferrer">KT-9580</a></p><p><strong>组件</strong>: 核心语言</p><p><strong>不兼容的变更类型</strong>: 源代码</p><p><strong>简述</strong>: 从 Kotlin 1.3 开始，当目标为 <code>PARAMETER</code> 的注解应用于形参类型时，将正确报告关于错误注解目标的错误</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.2: 上述代码模式可正常编译；注解被静默忽略且不存在于字节码中</li><li>1.2.X: 对此类用法报告弃用警告</li><li><blockquote><p>=1.3: 警告提升为错误</p></blockquote></li></ul></blockquote><h3 id="当索引超出范围时-array-copyofrange-抛出异常而不是扩大返回的数组" tabindex="-1">当索引超出范围时 Array.copyOfRange 抛出异常而不是扩大返回的数组 <a class="header-anchor" href="#当索引超出范围时-array-copyofrange-抛出异常而不是扩大返回的数组" aria-label="Permalink to &quot;当索引超出范围时 Array.copyOfRange 抛出异常而不是扩大返回的数组&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-19489" target="_blank" rel="noreferrer">KT-19489</a></p><p><strong>组件</strong>: kotlin-stdlib (JVM)</p><p><strong>不兼容的变更类型</strong>: 行为</p><p><strong>简述</strong>: 从 Kotlin 1.3 开始，确保 <code>Array.copyOfRange</code> 的 <code>toIndex</code> 实参（表示要复制的区间的排他性末尾）不大于数组大小，如果大于则抛出 <code>IllegalArgumentException</code>。</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.3: 如果 <code>Array.copyOfRange</code> 调用中的 <code>toIndex</code> 大于数组大小，区间中缺失的元素将填充 <code>null</code>，违反 Kotlin 类型系统的健全性。</li><li><blockquote><p>=1.3: 检测 <code>toIndex</code> 是否在数组边界内，如果不在则抛出异常</p></blockquote></li></ul></blockquote><h3 id="步长为-int-min-value-和-long-min-value-的-int-和-long-数列已被禁用-不允许实例化" tabindex="-1">步长为 Int.MIN_VALUE 和 Long.MIN_VALUE 的 Int 和 Long 数列已被禁用，不允许实例化 <a class="header-anchor" href="#步长为-int-min-value-和-long-min-value-的-int-和-long-数列已被禁用-不允许实例化" aria-label="Permalink to &quot;步长为 Int.MIN_VALUE 和 Long.MIN_VALUE 的 Int 和 Long 数列已被禁用，不允许实例化&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-17176" target="_blank" rel="noreferrer">KT-17176</a></p><p><strong>组件</strong>: kotlin-stdlib (JVM)</p><p><strong>不兼容的变更类型</strong>: 行为</p><p><strong>简述</strong>: 从 Kotlin 1.3 开始，禁止整数数列的步长值为其整数类型 (<code>Long</code> 或 <code>Int</code>) 的最小负值，因此调用 <code>IntProgression.fromClosedRange(0, 1, step = Int.MIN_VALUE)</code> 将抛出 <code>IllegalArgumentException</code></p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.3: 过去可以创建步长为 <code>Int.MIN_VALUE</code> 的 <code>IntProgression</code>，它会产生两个值 <code>[0, -2147483648]</code>，这种行为非显而易见</li><li><blockquote><p>=1.3: 如果步长是其整数类型的最小负值，则抛出 <code>IllegalArgumentException</code></p></blockquote></li></ul></blockquote><h3 id="非常长序列操作中的索引溢出检测" tabindex="-1">非常长序列操作中的索引溢出检测 <a class="header-anchor" href="#非常长序列操作中的索引溢出检测" aria-label="Permalink to &quot;非常长序列操作中的索引溢出检测&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-16097" target="_blank" rel="noreferrer">KT-16097</a></p><p><strong>组件</strong>: kotlin-stdlib (JVM)</p><p><strong>不兼容的变更类型</strong>: 行为</p><p><strong>简述</strong>: 从 Kotlin 1.3 开始，确保 <code>index</code>、<code>count</code> 和类似方法不会在长序列上溢出。受影响方法的完整列表请参见问题。</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.3: 在非常长的序列上调用此类方法可能由于整数溢出而产生负结果</li><li><blockquote><p>=1.3: 在此类方法中检测溢出并立即抛出异常</p></blockquote></li></ul></blockquote><h3 id="统一各平台空匹配正则表达式的-split-结果" tabindex="-1">统一各平台空匹配正则表达式的 split 结果 <a class="header-anchor" href="#统一各平台空匹配正则表达式的-split-结果" aria-label="Permalink to &quot;统一各平台空匹配正则表达式的 split 结果&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-21049" target="_blank" rel="noreferrer">KT-21049</a></p><p><strong>组件</strong>: kotlin-stdlib (JVM)</p><p><strong>不兼容的变更类型</strong>: 行为</p><p><strong>简述</strong>: 从 Kotlin 1.3 开始，统一 <code>split</code> 方法在所有平台上通过空匹配正则表达式的行为</p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.3: 所描述调用的行为在 JS、JRE 6、JRE 7 与 JRE 8+ 之间存在差异</li><li><blockquote><p>=1.3: 统一各平台上的行为</p></blockquote></li></ul></blockquote><h3 id="编译器分发版中已停用的弃用构件" tabindex="-1">编译器分发版中已停用的弃用构件 <a class="header-anchor" href="#编译器分发版中已停用的弃用构件" aria-label="Permalink to &quot;编译器分发版中已停用的弃用构件&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-23799" target="_blank" rel="noreferrer">KT-23799</a></p><p><strong>组件</strong>: 其他</p><p><strong>不兼容的变更类型</strong>: 二进制</p><p><strong>简述</strong>: Kotlin 1.3 停用以下弃用的二进制构件：</p><ul><li><code>kotlin-runtime</code>: 改用 <code>kotlin-stdlib</code></li><li><code>kotlin-stdlib-jre7/8</code>: 改用 <code>kotlin-stdlib-jdk7/8</code></li><li>编译器分发版中的 <code>kotlin-jslib</code>: 改用 <code>kotlin-stdlib-js</code></li></ul><p><strong>弃用周期</strong>:</p><ul><li>1.2.X: 这些构件被标记为已弃用，编译器在使用这些构件时报告警告</li><li><blockquote><p>=1.3: 这些构件已停用</p></blockquote></li></ul></blockquote><h3 id="stdlib-中的注解" tabindex="-1">stdlib 中的注解 <a class="header-anchor" href="#stdlib-中的注解" aria-label="Permalink to &quot;stdlib 中的注解&quot;">​</a></h3><blockquote><p><strong>问题</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-21784" target="_blank" rel="noreferrer">KT-21784</a></p><p><strong>组件</strong>: kotlin-stdlib (JVM)</p><p><strong>不兼容的变更类型</strong>: 二进制</p><p><strong>简述</strong>: Kotlin 1.3 从 stdlib 中移除了 <code>org.jetbrains.annotations</code> 包中的注解，并将它们移动到编译器附带的单独构件中：<code>annotations-13.0.jar</code> 和 <code>mutability-annotations-compat.jar</code></p><p><strong>弃用周期</strong>:</p><ul><li>&lt;1.3: 注解与 stdlib 构件一起发布</li><li><blockquote><p>=1.3: 注解在单独的构件中发布</p></blockquote></li></ul></blockquote>',56)]))}const b=t(a,[["render",n]]);export{d as __pageData,b as default};
