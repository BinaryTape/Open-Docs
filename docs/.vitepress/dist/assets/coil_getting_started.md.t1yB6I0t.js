import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"快速入门","description":"","frontmatter":{},"headers":[],"relativePath":"coil/getting_started.md","filePath":"coil/getting_started.md","lastUpdated":1753369988000}'),l={name:"coil/getting_started.md"};function o(n,i,p,h,k,d){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="快速入门" tabindex="-1">快速入门 <a class="header-anchor" href="#快速入门" aria-label="Permalink to &quot;快速入门&quot;">​</a></h1><h2 id="compose-ui" tabindex="-1">Compose UI <a class="header-anchor" href="#compose-ui" aria-label="Permalink to &quot;Compose UI&quot;">​</a></h2><p>一个典型的 Compose UI 项目需要导入：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.coil-kt.coil3:coil-compose:3.3.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.coil-kt.coil3:coil-network-okhttp:3.3.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>导入后，你可以使用 <code>AsyncImage</code> 从网络加载图片：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>!!! 注意 如果你使用 Compose Multiplatform，你需要使用 Ktor 而不是 OkHttp。具体操作请参阅<a href="./network#ktor-network-engines">此处</a>。</p><h2 id="android-views" tabindex="-1">Android Views <a class="header-anchor" href="#android-views" aria-label="Permalink to &quot;Android Views&quot;">​</a></h2><p>如果你使用 Android Views 而不是 Compose UI，请导入：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.coil-kt.coil3:coil:3.3.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.coil-kt.coil3:coil-network-okhttp:3.3.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>导入后，你可以使用 <code>ImageView.load</code> 扩展函数从网络加载图片：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imageView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="配置单例-imageloader" tabindex="-1">配置单例 ImageLoader <a class="header-anchor" href="#配置单例-imageloader" aria-label="Permalink to &quot;配置单例 ImageLoader&quot;">​</a></h2><p>默认情况下，Coil 包含一个单例 <code>ImageLoader</code>。<code>ImageLoader</code> 通过获取、解码、缓存并返回结果来执行传入的 <code>ImageRequest</code>。你不需要配置 <code>ImageLoader</code>；如果你不进行配置，Coil 将使用默认配置创建单例 <code>ImageLoader</code>。</p><p>你可以通过多种方式进行配置（<strong>请选择其中一种</strong>）：</p><ul><li>在应用程序的入口点（应用程序的根 <code>@Composable</code>）附近调用 <code>setSingletonImageLoaderFactory</code>。<strong>这最适用于 Compose Multiplatform 应用程序。</strong></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSingletonImageLoaderFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>在 Android 中，在你的 <a href="https://developer.android.com/reference/android/app/Application" target="_blank" rel="noreferrer"><code>Application</code></a> 上实现 <code>SingletonImageLoader.Factory</code>。<strong>这最适用于 Android 应用程序。</strong></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), SingletonImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> newImageLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImageLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>在应用程序的入口点（例如 Android 上的 <code>Application.onCreate</code> 中）附近调用 <code>SingletonImageLoader.setSafe</code>。这是最灵活的方式。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SingletonImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSafe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>!!! 注意 如果你正在编写依赖 Coil 的库，则不应获取/设置单例 <code>ImageLoader</code>。相反，你应该依赖 <code>io.coil-kt.coil3:coil-core</code>，创建自己的 <code>ImageLoader</code>，并手动传递它。如果你在库中设置了单例 <code>ImageLoader</code>，则可能会覆盖使用你库的应用程序所设置的 <code>ImageLoader</code>（如果它们也使用 Coil）。</p><h2 id="构件" tabindex="-1">构件 <a class="header-anchor" href="#构件" aria-label="Permalink to &quot;构件&quot;">​</a></h2><p>以下是 Coil 发布到 <code>mavenCentral()</code> 的主要构件列表：</p><ul><li><code>io.coil-kt.coil3:coil</code>：默认构件，依赖于 <code>io.coil-kt.coil3:coil-core</code>。它包含一个单例 <code>ImageLoader</code> 及相关的扩展函数。</li><li><code>io.coil-kt.coil3:coil-core</code>：<code>io.coil-kt.coil3:coil</code> 的一个子集，<strong>不</strong>包含单例 <code>ImageLoader</code> 及相关的扩展函数。</li><li><code>io.coil-kt.coil3:coil-compose</code>：默认的 <a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer">Compose UI</a> 构件，依赖于 <code>io.coil-kt.coil3:coil</code> 和 <code>io.coil-kt.coil3:coil-compose-core</code>。它包含使用单例 <code>ImageLoader</code> 的 <code>AsyncImage</code>、<code>rememberAsyncImagePainter</code> 和 <code>SubcomposeAsyncImage</code> 的重载。</li><li><code>io.coil-kt.coil3:coil-compose-core</code>：<code>io.coil-kt.coil3:coil-compose</code> 的一个子集，不包含依赖于单例 <code>ImageLoader</code> 的函数。</li><li><code>io.coil-kt.coil3:coil-network-okhttp</code>：包含使用 <a href="https://github.com/square/okhttp" target="_blank" rel="noreferrer">OkHttp</a> 从网络获取图片的支持。</li><li><code>io.coil-kt.coil3:coil-network-ktor2</code>：包含使用 <a href="https://github.com/ktorio/ktor" target="_blank" rel="noreferrer">Ktor 2</a> 从网络获取图片的支持。</li><li><code>io.coil-kt.coil3:coil-network-ktor3</code>：包含使用 <a href="https://github.com/ktorio/ktor" target="_blank" rel="noreferrer">Ktor 3</a> 从网络获取图片的支持。</li><li><code>io.coil-kt.coil3:coil-network-cache-control</code>：包含在从网络获取图片时，支持遵守 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noreferrer"><code>Cache-Control</code> 头部</a>的特性。</li><li><code>io.coil-kt.coil3:coil-gif</code>：包含两个<a href="https://coil-kt.github.io/coil/api/coil-core/coil3.decode/-decoder" target="_blank" rel="noreferrer">解码器</a>以支持解码 GIF。更多详情请参阅 <a href="./gifs">GIFs</a>。</li><li><code>io.coil-kt.coil3:coil-svg</code>：包含一个<a href="https://coil-kt.github.io/coil/api/coil-core/coil3.decode/-decoder" target="_blank" rel="noreferrer">解码器</a>以支持解码 SVG。更多详情请参阅 <a href="./svgs">SVGs</a>。</li><li><code>io.coil-kt.coil3:coil-video</code>：包含一个<a href="https://coil-kt.github.io/coil/api/coil-core/coil3.decode/-decoder" target="_blank" rel="noreferrer">解码器</a>以支持解码 <a href="https://developer.android.com/guide/topics/media/media-formats#video-codecs" target="_blank" rel="noreferrer">Android 支持的任何视频格式</a>中的帧。更多详情请参阅 <a href="./videos">videos</a>。</li><li><code>io.coil-kt.coil3:coil-test</code>：包含支持测试的类。更多详情请参阅 <a href="./testing">testing</a>。</li><li><code>io.coil-kt.coil3:coil-bom</code>：包含一个<a href="https://docs.gradle.org/7.2/userguide/platforms.html#sub:bom_import" target="_blank" rel="noreferrer">材料清单 (bill of materials)</a>。导入 <code>coil-bom</code> 允许你依赖其他 Coil 构件而无需指定版本。</li></ul>`,25)]))}const g=s(l,[["render",o]]);export{c as __pageData,g as default};
