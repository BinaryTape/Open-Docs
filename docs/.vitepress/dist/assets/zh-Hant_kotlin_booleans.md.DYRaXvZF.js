import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"布林型別","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/booleans.md","filePath":"zh-Hant/kotlin/booleans.md","lastUpdated":1754307826000}'),e={name:"zh-Hant/kotlin/booleans.md"};function t(p,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="布林型別" tabindex="-1">布林型別 <a class="header-anchor" href="#布林型別" aria-label="Permalink to &quot;布林型別&quot;">​</a></h1><p>類型 <code>Boolean</code> 代表可以有兩個值的布林物件：<code>true</code> 和 <code>false</code>。 <code>Boolean</code> 有一個宣告為 <code>Boolean?</code> 的<a href="/zh-Hant/kotlin/null-safety">可空</a>對應型別。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在 JVM 上，儲存為原始 <code>boolean</code> 型別的布林值通常使用 8 位元。</p></div><p>針對布林值的內建操作包含：</p><ul><li><code>||</code> – 析取 (邏輯 <em>或</em>)</li><li><code>&amp;&amp;</code> – 合取 (邏輯 <em>且</em>)</li><li><code>!</code> – 否定 (邏輯 <em>非</em>)</li></ul><p>範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myTrue: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFalse: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolNull: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myTrue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFalse)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myTrue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFalse)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myTrue)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(boolNull)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>||</code> 和 <code>&amp;&amp;</code> 運算子以惰性方式運作，這表示：</p><ul><li>如果第一個運算元是 <code>true</code>，<code>||</code> 運算子不會評估第二個運算元。</li><li>如果第一個運算元是 <code>false</code>，<code>&amp;&amp;</code> 運算子不會評估第二個運算元。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在 JVM 上，布林物件的可空參照會被裝箱到 Java 類別中，就像<a href="/zh-Hant/kotlin/numbers#boxing-and-caching-numbers-on-the-java-virtual-machine">數字</a>一樣。</p></div>`,10)]))}const E=i(e,[["render",t]]);export{r as __pageData,E as default};
