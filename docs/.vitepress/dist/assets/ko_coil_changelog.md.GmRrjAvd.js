import{_ as i,c as o,o as l,ag as a}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"변경 로그","description":"","frontmatter":{},"headers":[],"relativePath":"ko/coil/changelog.md","filePath":"ko/coil/changelog.md","lastUpdated":1753460095000}'),c={name:"ko/coil/changelog.md"};function r(t,e,s,d,n,h){return l(),o("div",null,e[0]||(e[0]=[a(`<h1 id="변경-로그" tabindex="-1">변경 로그 <a class="header-anchor" href="#변경-로그" aria-label="Permalink to &quot;변경 로그&quot;">​</a></h1><h2 id="_3-3-0-2025년-7월-22일" tabindex="-1">[3.3.0] - 2025년 7월 22일 <a class="header-anchor" href="#_3-3-0-2025년-7월-22일" aria-label="Permalink to &quot;[3.3.0] - 2025년 7월 22일&quot;">​</a></h2><ul><li><strong>신규</strong>: 앱이 백그라운드 상태일 때 Android에서 <code>MemoryCache.maxSize</code>를 제한하는 새로운 API를 도입합니다. <ul><li><code>ImageLoader.Builder.memoryCacheMaxSizePercentWhileInBackground</code>가 설정된 경우, 앱이 백그라운드 상태일 때 <code>ImageLoader</code>의 메모리 캐시가 최대 크기의 일정 비율로 제한됩니다. 이 설정은 현재 기본적으로 비활성화되어 있습니다.</li><li>앱이 백그라운드 상태가 되면 메모리 캐시에서 이미지가 잘라내어져 제한된 최대 크기에 도달하지만, 최근 잘라낸 이미지에 대한 메모리 캐시의 약한 참조는 영향을 받지 않습니다. 즉, 이미지가 현재 다른 곳(예: <code>AsyncImage</code>, <code>ImageView</code> 등)에서 참조되고 있다면 메모리 캐시에 여전히 존재합니다.</li><li>이 API는 백그라운드 메모리 사용량을 줄이고, 앱이 더 일찍 종료되는 것을 방지하며, 사용자 기기의 메모리 압박을 줄이는 데 도움이 됩니다.</li></ul></li><li><strong>신규</strong>: <code>SvgDecoder</code>에 <code>Svg.Parser</code> 인수를 추가합니다. <ul><li>이를 통해 기본 SVG 파서가 요구 사항을 충족하지 않을 경우 사용자 지정 SVG 파서를 사용할 수 있습니다.</li></ul></li><li>사용자 지정 밀도 승수를 제공하는 것을 지원하기 위해 <code>SvgDecoder</code>에 <code>density</code> 인수를 추가합니다.</li><li><code>Uri</code>를 복사하고 수정하는 것을 지원하기 위해 <code>Uri.Builder</code>를 추가합니다.</li><li>테스트에서 Coil의 <code>Dispatchers.main.immediate</code> 사용을 오버라이드하는 것을 지원하기 위해 <code>ImageLoader.Builder.mainCoroutineContext</code>를 추가합니다.</li><li><code>start</code> 이미지가 애니메이션 끝에서 참조 해제될 때 <code>CrossfadePainter.intrinsicSize</code>가 변경되는 문제를 수정합니다. 이는 <code>CrossfadeDrawable</code>의 동작과 일치합니다.</li><li>Java에서 <code>ImageLoaders.executeBlocking</code>에 접근할 수 없는 문제를 수정합니다.</li><li><code>coil-network-ktor3</code>에서 <code>kotlinx.io</code>의 Okio 상호 운용 모듈을 사용합니다.</li><li><code>kotlinx-datetime</code>을 <code>0.7.1</code>로 업데이트합니다. <ul><li>이 릴리스에는 <code>coil-network-cache-control</code> 모듈에만 영향을 미치는 바이너리 호환되지 않는 변경 사항이 포함되어 있습니다. 자세한 내용은 <a href="https://github.com/Kotlin/kotlinx-datetime?tab=readme-ov-file#deprecation-of-instant" target="_blank" rel="noreferrer">여기</a>를 참조하세요.</li></ul></li><li>Kotlin을 2.2.0으로 업데이트합니다.</li><li>Compose를 1.8.2로 업데이트합니다.</li><li>Okio를 3.15.0으로 업데이트합니다.</li><li>Skiko를 0.9.4.2로 업데이트합니다.</li></ul><h2 id="_3-2-0-2025년-5월-13일" tabindex="-1">[3.2.0] - 2025년 5월 13일 <a class="header-anchor" href="#_3-2-0-2025년-5월-13일" aria-label="Permalink to &quot;[3.2.0] - 2025년 5월 13일&quot;">​</a></h2><p><code>3.1.0</code> 이후 변경 사항:</p><ul><li><strong>중요</strong>: Compose <code>1.8.0</code>이 Java 11 바이트코드를 요구함에 따라 <code>coil-compose</code> 및 <code>coil-compose-core</code>도 이제 Java 11 바이트코드를 요구합니다. 활성화하는 방법은 <a href="/ko/coil/faq/">여기</a>를 참조하세요.</li><li><code>AsyncImagePreviewHandler</code>의 함수형 생성자가 <code>AsyncImagePainter.State.Loading</code> 대신 <code>AsyncImagePainter.State.Success</code>를 반환하도록 변경합니다.</li><li><code>ConstraintsSizeResolver#size()</code>에서 취소 문제를 수정합니다.</li><li>R8로 빌드할 때 <code>PlatformContext</code> 누락 경고를 수정합니다.</li><li>기본 <code>FakeImageLoaderEngine</code> 응답이 반환될 때 <code>FakeImageLoaderEngine</code>이 <code>Transition.Factory.NONE</code>을 설정하지 않는 문제를 수정합니다.</li><li><code>ColorImage</code>에서 실험적(experimental) 주석을 제거합니다.</li><li><code>CacheControlCacheStrategy</code>에서 네트워크 헤더를 지연 방식으로 파싱합니다.</li><li><code>CircleCropTransformation</code> 및 <code>RoundedCornersTransformation</code>이 공통 코드를 공유하도록 리팩터링합니다.</li><li><code>ExifOrientationStrategy</code>가 <code>RESPECT_PERFORMANCE</code>가 아닌 경우 내부적으로 <code>BitmapFactory</code>를 사용하도록 대체합니다.</li><li>Kotlin을 2.1.20으로 업데이트합니다.</li><li>Compose를 1.8.0으로 업데이트합니다.</li><li>Okio를 3.11.0으로 업데이트합니다.</li><li>Skiko를 0.9.4로 업데이트합니다.</li><li>Coroutines를 1.10.2로 업데이트합니다.</li><li><code>accompanist-drawablepainter</code>를 0.37.3으로 업데이트합니다.</li></ul><p><code>3.2.0-rc02</code> 이후 변경 사항:</p><ul><li><code>ExifOrientationStrategy</code>가 <code>RESPECT_PERFORMANCE</code>가 아닌 경우 내부적으로 <code>BitmapFactory</code>를 사용하도록 대체합니다.</li><li>Compose를 1.8.0으로 업데이트합니다.</li><li><code>accompanist-drawablepainter</code>를 0.37.3으로 업데이트합니다.</li></ul><h2 id="_3-2-0-rc02-2025년-4월-26일" tabindex="-1">[3.2.0-rc02] - 2025년 4월 26일 <a class="header-anchor" href="#_3-2-0-rc02-2025년-4월-26일" aria-label="Permalink to &quot;[3.2.0-rc02] - 2025년 4월 26일&quot;">​</a></h2><ul><li>비-JVM 타겟에서 <code>KtorNetworkFetcherFactory</code> (Ktor 3)를 사용하여 이미지를 로드할 때 이미지 요청이 <code>ClosedByteChannelException</code>으로 실패하는 문제를 수정합니다.</li></ul><h2 id="_3-2-0-rc01-2025년-4월-24일" tabindex="-1">[3.2.0-rc01] - 2025년 4월 24일 <a class="header-anchor" href="#_3-2-0-rc01-2025년-4월-24일" aria-label="Permalink to &quot;[3.2.0-rc01] - 2025년 4월 24일&quot;">​</a></h2><ul><li><strong>중요</strong>: <code>coil-compose</code> 및 <code>coil-compose-core</code>도 이제 Compose <code>1.8.0</code>이 요구함에 따라 Java 11 바이트코드를 요구합니다. 활성화하는 방법은 <a href="/ko/coil/faq/">여기</a>를 참조하세요.</li><li><code>AsyncImagePreviewHandler</code>의 함수형 생성자가 <code>AsyncImagePainter.State.Loading</code> 대신 <code>AsyncImagePainter.State.Success</code>를 반환하도록 변경합니다.</li><li><code>ConstraintsSizeResolver#size()</code>에서 취소 문제를 수정합니다.</li><li>R8로 빌드할 때 <code>PlatformContext</code> 누락 경고를 수정합니다.</li><li>기본 <code>FakeImageLoaderEngine</code> 응답이 반환될 때 <code>FakeImageLoaderEngine</code>이 <code>Transition.Factory.NONE</code>을 설정하지 않는 문제를 수정합니다.</li><li><code>ColorImage</code>에서 실험적(experimental) 주석을 제거합니다.</li><li><code>CacheControlCacheStrategy</code>에서 네트워크 헤더를 지연 방식으로 파싱합니다.</li><li><code>CircleCropTransformation</code> 및 <code>RoundedCornersTransformation</code>이 공통 코드를 공유하도록 리팩터링합니다.</li><li><code>coil-network-ktor2</code> 및 <code>coil-network-ktor3</code>에서 <code>kotlinx.io</code>의 Okio 상호 운용 모듈을 사용합니다.</li><li>Kotlin을 2.1.20으로 업데이트합니다.</li><li>Compose를 1.8.0-rc01으로 업데이트합니다.</li><li>Okio를 3.11.0으로 업데이트합니다.</li><li>Skiko를 0.9.4로 업데이트합니다.</li><li>Coroutines를 1.10.2로 업데이트합니다.</li></ul><h2 id="_3-1-0-2025년-2월-4일" tabindex="-1">[3.1.0] - 2025년 2월 4일 <a class="header-anchor" href="#_3-1-0-2025년-2월-4일" aria-label="Permalink to &quot;[3.1.0] - 2025년 2월 4일&quot;">​</a></h2><ul><li><code>AsyncImage</code> 성능을 개선합니다. <ul><li>컴포저블이 인스턴스화되거나 재사용되는지에 따라 런타임 성능이 25%에서 40% 향상됩니다. 할당량도 35%에서 48% 감소합니다. 더 자세한 정보는 <a href="https://github.com/coil-kt/coil/pull/2795" target="_blank" rel="noreferrer">여기</a>를 참조하세요.</li></ul></li><li><code>ColorImage</code>를 추가하고 <code>FakeImage</code>를 지원 중단합니다. <ul><li><code>ColorImage</code>는 테스트 및 미리보기에서 가짜 값을 반환하는 데 유용합니다. <code>FakeImage</code>와 동일한 사용 사례를 해결하지만, <code>coil-test</code> 대신 <code>coil-core</code>에서 더 쉽게 접근할 수 있습니다.</li></ul></li><li><code>coil-compose-core</code>의 <code>Dispatchers.Main.immediate</code>에 대한 의존성을 제거합니다. <ul><li>이는 <code>AsyncImagePainter</code>가 Paparazzi 및 Roborazzi 스크린샷 테스트에서 <code>ImageRequest</code>를 동기적으로 실행하지 않던 경우도 수정합니다.</li></ul></li><li><code>data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</code> 형식의 <a href="https://www.ietf.org/rfc/rfc2397.txt" target="_blank" rel="noreferrer">데이터 URI</a>에 대한 지원을 추가합니다.</li><li>GIF의 메타데이터에서 인코딩된 반복 횟수를 사용하는 것을 지원하기 위해 <code>AnimatedImageDecoder.ENCODED_LOOP_COUNT</code>를 추가합니다.</li><li>사용자 지정 확장 기능을 지원하기 위해 <code>NetworkRequest</code>에 <code>Extras</code>를 추가합니다.</li><li><code>DiskCache.Builder.cleanupCoroutineContext</code>를 추가하고 <code>DiskCache.Builder.cleanupDispatcher</code>를 지원 중단합니다.</li><li>API 29 이상에서 <code>android.graphics.ImageDecoder</code> 사용을 선택적으로 비활성화하기 위해 <code>ImageLoader.Builder.imageDecoderEnabled</code>를 추가합니다.</li><li><code>ImageRequest</code>의 데이터 유형에 등록된 <code>Keyer</code>가 없으면 경고를 기록합니다.</li><li><code>CrossfadePainter</code>를 공개 API로 만듭니다.</li><li>모든 멀티플랫폼 타겟에서 <code>Transformation</code>을 지원합니다.</li><li><code>CacheControlCacheStrategy</code>에서 <code>Expires</code> 헤더 값으로 0을 지원합니다.</li><li><code>AsyncImage</code>/<code>SubcomposeAsyncImage</code>/<code>rememberAsyncImage</code>가 <code>ContentScale</code>이 <code>None</code>으로 변경되거나 <code>None</code>에서 변경될 때 새 <code>ImageRequest</code>를 시작하지 않는 문제를 수정합니다.</li><li>Kotlin을 2.1.10으로 업데이트합니다. <ul><li>참고: 이 릴리스는 <a href="https://kotlinlang.org/docs/whatsnew21.html#llvm-update-from-11-1-0-to-16-0-0" target="_blank" rel="noreferrer">LLVM 업데이트</a>로 인해 Kotlin/Native를 사용하는 경우 Kotlin 2.1.0 이상으로 컴파일해야 합니다.</li></ul></li><li>Compose를 1.7.3으로 업데이트합니다.</li><li><code>androidx.core</code>를 1.15.0으로 업데이트합니다.</li></ul><h2 id="_3-0-4-2024년-11월-25일" tabindex="-1">[3.0.4] - 2024년 11월 25일 <a class="header-anchor" href="#_3-0-4-2024년-11월-25일" aria-label="Permalink to &quot;[3.0.4] - 2024년 11월 25일&quot;">​</a></h2><ul><li>Android Studio 미리보기에서 벡터 드로어블이 렌더링되지 않는 문제를 수정합니다.</li><li>크기가 <code>maxBitmapSize</code>를 초과하는 요청에 대해 잠재적인 메모리 캐시 미스 문제를 수정합니다.</li><li>Android에서 <code>FakeImage</code>가 렌더링되지 않는 문제를 수정합니다.</li><li><code>AsyncImage</code>/<code>rememberAsyncImagePainter</code>/<code>SubcomposeAsyncImage</code>와 함께 사용될 때 요청의 <code>Transformation</code>이 변경되면 새 이미지 요청을 시작하지 않는 문제를 수정합니다.</li><li><code>ScaleDrawable</code> 및 <code>CrossfadeDrawable</code>이 틴트 상태를 따르지 않는 문제를 수정합니다.</li><li><code>ImageDecoder</code>가 부분적인 이미지 소스를 디코딩할 수 있도록 허용합니다. 이는 <code>BitmapFactory</code>의 동작과 일치합니다.</li><li>디코딩 후 <code>Bitmap.prepareToDraw()</code>가 호출되지 않는 문제를 수정합니다.</li><li><code>SvgDecoder</code>는 래스터화되지 않은 이미지에 대해 <code>isSampled = true</code>를 반환해서는 안 됩니다.</li><li>즉시 메인 디스패처를 사용할 수 없는 경우 Compose에서 <code>Dispatchers.Unconfined</code>를 사용하도록 대체합니다. 이는 미리보기/테스트 환경에서만 사용됩니다.</li><li>Ktor 2를 <code>2.3.13</code>으로 업데이트합니다.</li></ul><h2 id="_3-0-3-2024년-11월-14일" tabindex="-1">[3.0.3] - 2024년 11월 14일 <a class="header-anchor" href="#_3-0-3-2024년-11월-14일" aria-label="Permalink to &quot;[3.0.3] - 2024년 11월 14일&quot;">​</a></h2><ul><li><code>ImageView</code>의 <code>ScaleType</code>에 따라 <code>ImageRequest.scale</code>이 설정되는 문제를 수정합니다.</li><li><code>DiskCache</code>가 파일을 삭제한 후 항목 제거를 추적하지 않는 엣지 케이스를 수정합니다.</li><li>오류 기록 시 예외(throwable)를 <code>Logger</code>로 전달합니다.</li><li><code>kotlin-stdlib-jdk7</code> 및 <code>kotlin-stdlib-jdk8</code>를 <code>kotlin-stdlib</code>로 대체하지 않도록 합니다.</li></ul><h2 id="_3-0-2-2024년-11월-9일" tabindex="-1">[3.0.2] - 2024년 11월 9일 <a class="header-anchor" href="#_3-0-2-2024년-11월-9일" aria-label="Permalink to &quot;[3.0.2] - 2024년 11월 9일&quot;">​</a></h2><ul><li>Android에서 사용자 지정 <code>CacheStrategy</code>로 <code>OkHttpNetworkFetcherFactory</code>를 호출할 때 충돌이 발생하는 문제를 수정합니다.</li><li><code>CacheControlCacheStrategy</code>가 캐시 항목의 수명을 잘못 계산하는 문제를 수정합니다.</li><li><code>ImageRequest.bitmapConfig</code>가 <code>ARGB_8888</code> 또는 <code>HARDWARE</code>인 경우에만 API 28 이상에서 적용되는 문제를 수정합니다.</li></ul><h2 id="_3-0-1-2024년-11월-7일" tabindex="-1">[3.0.1] - 2024년 11월 7일 <a class="header-anchor" href="#_3-0-1-2024년-11월-7일" aria-label="Permalink to &quot;[3.0.1] - 2024년 11월 7일&quot;">​</a></h2><ul><li>하드웨어 비트맵 기반 <code>BitmapImage</code>로 <code>Image.toBitmap</code>을 호출할 때 충돌이 발생하는 문제를 수정합니다.</li><li><code>AsyncImageModelEqualityDelegate.Default</code>가 <code>ImageRequest</code>가 아닌 모델에 대해 등가성(equality) 비교를 잘못하는 문제를 수정합니다.</li></ul><h2 id="_3-0-0-2024년-11월-4일" tabindex="-1">[3.0.0] - 2024년 11월 4일 <a class="header-anchor" href="#_3-0-0-2024년-11월-4일" aria-label="Permalink to &quot;[3.0.0] - 2024년 11월 4일&quot;">​</a></h2><p>Coil 3.0.0은 <a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>에 대한 완전한 지원을 포함하는 Coil의 다음 주요 릴리스입니다.</p><p><a href="/ko/coil/upgrading_to_coil3/">3.0.0의 모든 개선 사항 및 중요 변경 사항에 대한 전체 목록은 업그레이드 가이드</a>를 참조하세요.</p><p><code>3.0.0-rc02</code> 이후 변경 사항:</p><ul><li>남아있는 지원 중단된 메서드를 제거합니다.</li></ul><h2 id="_3-0-0-rc02-2024년-10월-28일" tabindex="-1">[3.0.0-rc02] - 2024년 10월 28일 <a class="header-anchor" href="#_3-0-0-rc02-2024년-10월-28일" aria-label="Permalink to &quot;[3.0.0-rc02] - 2024년 10월 28일&quot;">​</a></h2><p><a href="/ko/coil/upgrading_to_coil3/">3.x의 모든 개선 사항 및 중요 변경 사항에 대한 전체 목록은 업그레이드 가이드</a>를 참조하세요. <code>3.0.0-rc01</code> 이후 변경 사항:</p><ul><li><code>BlackholeDecoder</code>를 추가합니다. 이는 <a href="/ko/coil/faq/">디스크 캐시 전용 사전 로드</a>를 단순화합니다.</li><li><code>ConstraintsSizeResolver</code> 및 <code>DrawScopeSizeResolver</code>에 대한 <code>remember</code> 함수를 추가합니다.</li><li><code>AsyncImage</code>의 파라미터에서 <code>EqualityDelegate</code>를 제거합니다. 대신 <code>LocalAsyncImageModelEqualityDelegate</code>를 통해 설정되어야 합니다.</li><li>상위 컴포저블이 <code>IntrinsicSize</code>를 사용할 때 <code>AsyncImage</code>가 렌더링되지 않는 문제를 수정합니다.</li><li><code>AsyncImagePainter</code>에 자식 페인터가 없을 때 <code>AsyncImage</code>가 사용 가능한 제약 조건을 채우는 문제를 수정합니다.</li><li><code>EqualityDelegate</code>가 무시되어 상태가 관찰될 때 <code>rememberAsyncImagePainter</code>가 무한히 다시 구성되는 문제를 수정합니다.</li><li>특수 문자가 포함된 <code>File</code>/<code>Path</code> 경로 파싱 문제를 수정합니다.</li><li><code>VideoFrameDecoder</code>에서 사용자 지정 <code>FileSystem</code> 구현을 사용하는 문제를 수정합니다.</li><li>Ktor를 <code>3.0.0</code>으로 업데이트합니다.</li><li><code>androidx.annotation</code>을 <code>1.9.0</code>으로 업데이트합니다.</li></ul><h2 id="_3-0-0-rc01-2024년-10월-8일" tabindex="-1">[3.0.0-rc01] - 2024년 10월 8일 <a class="header-anchor" href="#_3-0-0-rc01-2024년-10월-8일" aria-label="Permalink to &quot;[3.0.0-rc01] - 2024년 10월 8일&quot;">​</a></h2><p><a href="/ko/coil/upgrading_to_coil3/">3.x의 모든 개선 사항 및 중요 변경 사항에 대한 전체 목록은 업그레이드 가이드</a>를 참조하세요. <code>3.0.0-alpha10</code> 이후 변경 사항:</p><ul><li><strong>BREAKING</strong>: 기본적으로 <code>addLastModifiedToFileCacheKey</code>를 비활성화하고 요청별로 설정할 수 있도록 허용합니다. 이 동작은 동일한 플래그로 다시 활성화할 수 있습니다.</li><li><strong>신규</strong>: <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noreferrer"><code>Cache-Control</code> 헤더</a> 지원을 구현하는 새로운 <code>coil-network-cache-control</code> 아티팩트를 도입합니다.</li><li><strong>신규</strong>: <code>SvgDecoder.Factory</code>에 <code>scaleToDensity</code> 속성을 추가합니다. 이 속성은 고유 치수를 가진 SVG가 기기 밀도에 의해 곱해지도록 보장합니다 (Android에서만 지원됨).</li><li><code>ExifOrientationPolicy</code>의 이름을 <code>ExifOrientationStrategy</code>로 변경합니다.</li><li>가져올 때 <code>MemoryCache</code>에서 공유할 수 없는 이미지를 제거합니다.</li><li><code>ConstraintsSizeResolver</code>를 공개 API로 만듭니다.</li><li><code>setSingletonImageLoaderFactory</code>를 안정화합니다.</li><li><code>coil-network-ktor3</code>에서 최적화된 JVM I/O 함수를 복원합니다.</li><li>MIME 유형 목록에 <code>pdf</code>를 추가합니다.</li><li>컴파일 SDK를 35로 업데이트합니다.</li><li>Kotlin을 2.0.20으로 업데이트합니다.</li><li>Okio를 3.9.1으로 업데이트합니다.</li></ul><h2 id="_3-0-0-alpha10-2024년-8월-7일" tabindex="-1">[3.0.0-alpha10] - 2024년 8월 7일 <a class="header-anchor" href="#_3-0-0-alpha10-2024년-8월-7일" aria-label="Permalink to &quot;[3.0.0-alpha10] - 2024년 8월 7일&quot;">​</a></h2><ul><li><strong>BREAKING</strong>: <code>ImageLoader.Builder.networkObserverEnabled</code>를 <code>NetworkFetcher</code>에 대한 <code>ConnectivityChecker</code> 인터페이스로 대체합니다. <ul><li>네트워크 옵저버를 비활성화하려면 <code>KtorNetworkFetcherFactory</code>/<code>OkHttpNetworkFetcherFactory</code>의 생성자에 <code>ConnectivityChecker.ONLINE</code>을 전달하세요.</li></ul></li><li><strong>신규</strong>: 모든 플랫폼에서 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-images-resources.html" target="_blank" rel="noreferrer">Compose Multiplatform 리소스</a> 로드를 지원합니다. 리소스를 로드하려면 <code>Res.getUri</code>를 사용하세요:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;drawable/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><code>ImageLoader</code> 및 <code>ImageRequest</code>에 <code>maxBitmapSize</code> 속성을 추가합니다. <ul><li>이 속성의 기본값은 4096x4096이며, 할당된 비트맵의 차원에 대한 안전한 상한을 제공합니다. 이는 <code>Size.ORIGINAL</code>을 사용하여 매우 큰 이미지를 실수로 로드하여 메모리 부족 예외가 발생하는 것을 방지하는 데 도움이 됩니다.</li></ul></li><li><code>ExifOrientationPolicy</code>를 사용자 지정 정책을 지원하는 인터페이스로 전환합니다.</li><li>Windows 파일 경로의 <code>Uri</code> 처리 문제를 수정합니다.</li><li><code>Image</code> API에서 <code>@ExperimentalCoilApi</code>를 제거합니다.</li><li>Kotlin을 2.0.10으로 업데이트합니다.</li></ul><h2 id="_3-0-0-alpha09-2024년-7월-23일" tabindex="-1">[3.0.0-alpha09] - 2024년 7월 23일 <a class="header-anchor" href="#_3-0-0-alpha09-2024년-7월-23일" aria-label="Permalink to &quot;[3.0.0-alpha09] - 2024년 7월 23일&quot;">​</a></h2><ul><li><strong>BREAKING</strong>: <code>io.coil-kt.coil3:coil-network-ktor</code> 아티팩트의 이름을 Ktor 2.x에 의존하는 <code>io.coil-kt.coil3:coil-network-ktor2</code>로 변경합니다. 또한 Ktor 3.x에 의존하는 <code>io.coil-kt.coil3:coil-network-ktor3</code>를 도입합니다. <code>wasmJs</code> 지원은 Ktor 3.x에서만 사용 가능합니다.</li><li><strong>신규</strong>: 이미지 요청을 수동으로 다시 시작하기 위해 <code>AsyncImagePainter.restart()</code>를 추가합니다.</li><li><code>NetworkClient</code> 및 관련 클래스에서 <code>@ExperimentalCoilApi</code>를 제거합니다.</li><li>불필요한 <code>Extras</code> 및 <code>Map</code> 할당을 방지하도록 <code>ImageRequest</code>를 최적화합니다.</li></ul><h2 id="_2-7-0-2024년-7월-17일" tabindex="-1">[2.7.0] - 2024년 7월 17일 <a class="header-anchor" href="#_2-7-0-2024년-7월-17일" aria-label="Permalink to &quot;[2.7.0] - 2024년 7월 17일&quot;">​</a></h2><ul><li><code>ImageLoader.execute</code>, <code>AsyncImage</code>, <code>SubcomposeAsyncImage</code> 및 <code>rememberAsyncImagePainter</code>의 성능을 개선하기 위해 내부 코루틴 사용을 약간 최적화합니다. (<a href="https://github.com/coil-kt/coil/pull/2205" target="_blank" rel="noreferrer">#2205</a>)</li><li>청크된 응답에 대한 중복 네트워크 호출 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/2363" target="_blank" rel="noreferrer">#2363</a>)</li><li>Kotlin을 2.0.0으로 업데이트합니다.</li><li>Compose UI를 1.6.8로 업데이트합니다.</li><li>Okio를 3.9.0으로 업데이트합니다.</li></ul><h2 id="_3-0-0-alpha08-2024년-7월-8일" tabindex="-1">[3.0.0-alpha08] - 2024년 7월 8일 <a class="header-anchor" href="#_3-0-0-alpha08-2024년-7월-8일" aria-label="Permalink to &quot;[3.0.0-alpha08] - 2024년 7월 8일&quot;">​</a></h2><ul><li><strong>BREAKING</strong>: <code>ImageRequest</code> 및 <code>ImageLoader</code>의 <code>dispatcher</code> 메서드 이름을 <code>coroutineContext</code>로 변경합니다. 예를 들어, <code>ImageRequest.Builder.dispatcher</code>는 이제 <code>ImageRequest.Builder.coroutineContext</code>입니다. 이 메서드는 이제 모든 <code>CoroutineContext</code>를 허용하며 더 이상 <code>Dispatcher</code>를 요구하지 않으므로 이름이 변경되었습니다.</li><li>수정: 경쟁 조건으로 인해 발생할 수 있는 <code>IllegalStateException: Reading a state that was created after the snapshot was taken or in a snapshot that has not yet been applied</code> 문제를 수정합니다. <ul><li>참고: 이로 인해 <code>Dispatchers.Main.immediate</code>에 대한 약한 의존성이 다시 도입됩니다. 결과적으로 JVM에서 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-swing/" target="_blank" rel="noreferrer"><code>kotlinx-coroutines-swing</code></a>에 대한 의존성을 다시 추가해야 합니다. 임포트되지 않은 경우 <code>ImageRequest</code>는 즉시 디스패치되지 않으며, <code>ImageRequest.placeholder</code>를 설정하거나 메모리 캐시에서 해결하기 전에 한 프레임의 지연이 발생합니다.</li></ul></li></ul><h2 id="_3-0-0-alpha07-2024년-6월-26일" tabindex="-1">[3.0.0-alpha07] - 2024년 6월 26일 <a class="header-anchor" href="#_3-0-0-alpha07-2024년-6월-26일" aria-label="Permalink to &quot;[3.0.0-alpha07] - 2024년 6월 26일&quot;">​</a></h2><ul><li><strong>BREAKING</strong>: <code>AsyncImagePainter</code>는 기본적으로 <code>onDraw</code>를 더 이상 기다리지 않고 <code>Size.ORIGINAL</code>을 사용합니다. <ul><li>이는 <a href="https://github.com/coil-kt/coil/issues/1910" target="_blank" rel="noreferrer">Roborazzi/Paparazzi와의 호환성 문제</a>를 수정하고 전반적인 테스트 안정성을 향상시킵니다.</li><li><code>onDraw</code>를 다시 기다리려면 <code>DrawScopeSizeResolver</code>를 <code>ImageRequest.sizeResolver</code>로 설정하세요.</li></ul></li><li><strong>BREAKING</strong>: 멀티플랫폼 <code>Image</code> API를 리팩터링합니다. 특히 <code>asCoilImage</code>의 이름이 <code>asImage</code>로 변경되었습니다.</li><li><strong>BREAKING</strong>: <code>AsyncImagePainter.state</code>가 <code>StateFlow&lt;AsyncImagePainter.State&gt;</code>로 변경되었습니다. 해당 값을 관찰하려면 <code>collectAsState</code>를 사용하세요. 이는 성능을 향상시킵니다.</li><li><strong>BREAKING</strong>: <code>AsyncImagePainter.imageLoader</code> 및 <code>AsyncImagePainter.request</code>가 <code>StateFlow&lt;AsyncImagePainter.Inputs&gt;</code>로 결합되었습니다. 해당 값을 관찰하려면 <code>collectAsState</code>를 사용하세요. 이는 성능을 향상시킵니다.</li><li><strong>BREAKING</strong>: 리소스 축소 최적화를 방해하므로 <code>android.resource://example.package.name/drawable/image</code> URI에 대한 지원을 제거합니다. <ul><li>여전히 해당 기능이 필요한 경우 <a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/androidInstrumentedTest/kotlin/coil3/map/ResourceUriMapper.kt" target="_blank" rel="noreferrer">컴포넌트 레지스트리에 <code>ResourceUriMapper</code>를 수동으로 포함</a>할 수 있습니다.</li></ul></li><li><strong>신규</strong>: <code>AsyncImagePreviewHandler</code>를 도입하여 <code>AsyncImagePainter</code>의 미리보기 렌더링 동작을 제어하는 것을 지원합니다. <ul><li>미리보기 동작을 오버라이드하려면 <code>LocalAsyncImagePreviewHandler</code>를 사용하세요.</li><li>이 변경 및 기타 <code>coil-compose</code> 개선의 일환으로, <code>AsyncImagePainter</code>는 이제 <code>ImageRequest.placeholder</code>를 표시하는 것으로 기본 설정하는 대신 기본적으로 <code>ImageRequest</code> 실행을 시도합니다. 미리보기 환경에서는 <a href="https://developer.android.com/develop/ui/compose/tooling/previews#preview-limitations" target="_blank" rel="noreferrer">네트워크 또는 파일을 사용하는 요청이 실패할 것으로 예상</a>되지만, Android 리소스는 작동해야 합니다.</li></ul></li><li><strong>신규</strong>: 프레임 인덱스별 비디오 이미지 추출을 지원합니다. (<a href="https://github.com/coil-kt/coil/pull/2183" target="_blank" rel="noreferrer">#2183</a>)</li><li><strong>신규</strong>: 모든 <code>CoroutineDispatcher</code> 메서드에 <code>CoroutineContext</code> 전달을 지원합니다. (<a href="https://github.com/coil-kt/coil/pull/2241" target="_blank" rel="noreferrer">#2241</a>).</li><li><strong>신규</strong>: JS 및 WASM JS에서 약한 참조 메모리 캐시를 지원합니다.</li><li>Compose에서 <code>Dispatchers.Main.immediate</code>로 디스패치하지 않도록 합니다. 부작용으로 JVM에서 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-swing/" target="_blank" rel="noreferrer"><code>kotlinx-coroutines-swing</code></a>를 더 이상 임포트할 필요가 없습니다.</li><li>성능 향상을 위해 Compose에서 <code>async</code>를 호출하고 디스포저블을 생성하지 않도록 합니다 (@mlykotom님께 감사드립니다!). (<a href="https://github.com/coil-kt/coil/pull/2205" target="_blank" rel="noreferrer">#2205</a>)</li><li>전역 <code>ImageLoader</code>의 추가 데이터를 <code>Options</code>로 전달하는 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/2223" target="_blank" rel="noreferrer">#2223</a>)</li><li><code>crossfade(false)</code>가 비-Android 타겟에서 작동하지 않는 문제를 수정합니다.</li><li>VP8X 기능 플래그 바이트 오프셋 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/2199" target="_blank" rel="noreferrer">#2199</a>).</li><li>비-Android 타겟의 <code>SvgDecoder</code>가 그리기 시간에 이미지를 렌더링하는 대신 비트맵으로 렌더링하도록 전환합니다. 이는 성능을 향상시킵니다. <ul><li>이 동작은 <code>SvgDecoder(renderToBitmap)</code>을 사용하여 제어할 수 있습니다.</li></ul></li><li><code>ScaleDrawable</code>을 <code>coil-gif</code>에서 <code>coil-core</code>로 이동합니다.</li><li>Kotlin을 2.0.0으로 업데이트합니다.</li><li>Compose를 1.6.11으로 업데이트합니다.</li><li>Okio를 3.9.0으로 업데이트합니다.</li><li>Skiko를 0.8.4로 업데이트합니다.</li><li><a href="/ko/coil/upgrading_to_coil3/">3.x의 중요 변경 사항에 대한 전체 목록은 업그레이드 가이드</a>를 참조하세요.</li></ul><h2 id="_3-0-0-alpha06-2024년-2월-29일" tabindex="-1">[3.0.0-alpha06] - 2024년 2월 29일 <a class="header-anchor" href="#_3-0-0-alpha06-2024년-2월-29일" aria-label="Permalink to &quot;[3.0.0-alpha06] - 2024년 2월 29일&quot;">​</a></h2><ul><li>Skiko를 0.7.93으로 다운그레이드합니다.</li><li><a href="/ko/coil/upgrading_to_coil3/">3.x의 중요 변경 사항에 대한 전체 목록은 업그레이드 가이드</a>를 참조하세요.</li></ul><h2 id="_3-0-0-alpha05-2024년-2월-28일" tabindex="-1">[3.0.0-alpha05] - 2024년 2월 28일 <a class="header-anchor" href="#_3-0-0-alpha05-2024년-2월-28일" aria-label="Permalink to &quot;[3.0.0-alpha05] - 2024년 2월 28일&quot;">​</a></h2><ul><li><strong>신규</strong>: <code>wasmJs</code> 타겟을 지원합니다.</li><li>비-Android 플랫폼에서 <code>Bitmap</code>으로 백업되지 않은 <code>Image</code>를 그리는 것을 지원하기 위해 <code>DrawablePainter</code> 및 <code>DrawableImage</code>를 생성합니다. <ul><li><code>Image</code> API는 실험적이며 알파 릴리스 간에 변경될 가능성이 있습니다.</li></ul></li><li><code>ContentPainterModifier</code>가 <code>Modifier.Node</code>를 구현하도록 업데이트합니다.</li><li>수정: 컴포넌트 콜백 및 네트워크 옵저버를 백그라운드 스레드에서 지연 등록하도록 합니다. 이는 일반적으로 메인 스레드에서 발생하는 느린 초기화 문제를 수정합니다.</li><li>수정: <code>ImageLoader.Builder.placeholder/error/fallback</code>을 <code>ImageRequest</code>가 사용하지 않는 문제를 수정합니다.</li><li>Compose를 1.6.0으로 업데이트합니다.</li><li>Coroutines를 1.8.0으로 업데이트합니다.</li><li>Okio를 3.8.0으로 업데이트합니다.</li><li>Skiko를 0.7.94로 업데이트합니다.</li><li><a href="/ko/coil/upgrading_to_coil3/">3.x의 중요 변경 사항에 대한 전체 목록은 업그레이드 가이드</a>를 참조하세요.</li></ul><h2 id="_2-6-0-2024년-2월-23일" tabindex="-1">[2.6.0] - 2024년 2월 23일 <a class="header-anchor" href="#_2-6-0-2024년-2월-23일" aria-label="Permalink to &quot;[2.6.0] - 2024년 2월 23일&quot;">​</a></h2><ul><li><code>rememberAsyncImagePainter</code>, <code>AsyncImage</code> 및 <code>SubcomposeAsyncImage</code>를 <a href="https://developer.android.com/jetpack/compose/performance/stability#functions" target="_blank" rel="noreferrer">재시작 및 스킵 가능하도록</a> 만듭니다. 이는 컴포저블의 인수가 변경되지 않는 한 다시 구성되는 것을 방지하여 성능을 향상시킵니다. <ul><li><code>rememberAsyncImagePainter</code>, <code>AsyncImage</code> 및 <code>SubcomposeAsyncImage</code>에 선택적 <code>modelEqualityDelegate</code> 인수를 추가하여 <code>model</code>이 다시 구성을 트리거할지 여부를 제어합니다.</li></ul></li><li><code>ContentPainterModifier</code>가 <code>Modifier.Node</code>를 구현하도록 업데이트합니다.</li><li>수정: 컴포넌트 콜백 및 네트워크 옵저버를 백그라운드 스레드에서 지연 등록하도록 합니다. 이는 일반적으로 메인 스레드에서 발생하는 느린 초기화 문제를 수정합니다.</li><li>수정: <code>ImageRequest.listener</code> 또는 <code>ImageRequest.target</code>이 변경되면 <code>rememberAsyncImagePainter</code>, <code>AsyncImage</code> 및 <code>SubcomposeAsyncImage</code>에서 새 이미지 요청을 다시 시작하는 것을 방지합니다.</li><li>수정: <code>AsyncImagePainter</code>에서 이미지 요청을 두 번 관찰하지 않도록 합니다.</li><li>Kotlin을 1.9.22로 업데이트합니다.</li><li>Compose를 1.6.1로 업데이트합니다.</li><li>Okio를 3.8.0으로 업데이트합니다.</li><li><code>androidx.collection</code>을 1.4.0으로 업데이트합니다.</li><li><code>androidx.lifecycle</code>을 2.7.0으로 업데이트합니다.</li></ul><h2 id="_3-0-0-alpha04-2024년-2월-1일" tabindex="-1">[3.0.0-alpha04] - 2024년 2월 1일 <a class="header-anchor" href="#_3-0-0-alpha04-2024년-2월-1일" aria-label="Permalink to &quot;[3.0.0-alpha04] - 2024년 2월 1일&quot;">​</a></h2><ul><li><strong>Breaking</strong>: <code>OkHttpNetworkFetcherFactory</code> 및 <code>KtorNetworkFetcherFactory</code>의 공개 API에서 <code>Lazy</code>를 제거합니다.</li><li><code>OkHttpNetworkFetcherFactory</code>에서 <code>OkHttpClient</code> 대신 <code>Call.Factory</code>를 노출합니다.</li><li><code>NetworkResponseBody</code>가 <code>ByteString</code>을 래핑하도록 전환합니다.</li><li>Compose를 1.5.12로 다운그레이드합니다.</li><li><a href="/ko/coil/upgrading_to_coil3/">중요 변경 사항에 대한 전체 목록은 업그레이드 가이드</a>를 참조하세요.</li></ul><h2 id="_3-0-0-alpha03-2024년-1월-20일" tabindex="-1">[3.0.0-alpha03] - 2024년 1월 20일 <a class="header-anchor" href="#_3-0-0-alpha03-2024년-1월-20일" aria-label="Permalink to &quot;[3.0.0-alpha03] - 2024년 1월 20일&quot;">​</a></h2><ul><li><strong>Breaking</strong>: <code>coil-network</code>의 이름이 <code>coil-network-ktor</code>로 변경되었습니다. 또한 OkHttp에 의존하고 Ktor 엔진을 지정할 필요가 없는 새로운 <code>coil-network-okhttp</code> 아티팩트가 있습니다. <ul><li>어떤 아티팩트를 임포트하는지에 따라 <code>KtorNetworkFetcherFactory</code> 또는 <code>OkHttpNetworkFetcherFactory</code>를 사용하여 <code>Fetcher.Factory</code>를 수동으로 참조할 수 있습니다.</li></ul></li><li>Apple 플랫폼에서 <code>NSUrl</code> 로드를 지원합니다.</li><li><code>AsyncImage</code>에 <code>clipToBounds</code> 파라미터를 추가합니다.</li><li><a href="/ko/coil/upgrading_to_coil3/">중요 변경 사항에 대한 전체 목록은 업그레이드 가이드</a>를 참조하세요.</li></ul><h2 id="_3-0-0-alpha02-2024년-1월-10일" tabindex="-1">[3.0.0-alpha02] - 2024년 1월 10일 <a class="header-anchor" href="#_3-0-0-alpha02-2024년-1월-10일" aria-label="Permalink to &quot;[3.0.0-alpha02] - 2024년 1월 10일&quot;">​</a></h2><ul><li><strong>Breaking</strong>: <code>coil-gif</code>, <code>coil-network</code>, <code>coil-svg</code>, <code>coil-video</code>의 패키지가 업데이트되어 모든 클래스가 각각 <code>coil.gif</code>, <code>coil.network</code>, <code>coil.svg</code>, <code>coil.video</code>의 일부가 되었습니다. 이는 다른 아티팩트와의 클래스 이름 충돌을 방지하는 데 도움이 됩니다.</li><li><strong>Breaking</strong>: <code>ImageDecoderDecoder</code>의 이름이 <code>AnimatedImageDecoder</code>로 변경되었습니다.</li><li><strong>신규</strong>: <code>coil-gif</code>, <code>coil-network</code>, <code>coil-svg</code>, <code>coil-video</code>의 구성 요소가 이제 각 <code>ImageLoader</code>의 <code>ComponentRegistry</code>에 자동으로 추가됩니다. <ul><li>분명히 말하자면, <code>3.0.0-alpha01</code>과 달리 <strong><code>ComponentRegistry</code>에 <code>NetworkFetcher.Factory()</code>를 수동으로 추가할 필요가 없습니다.</strong> 단순히 <code>io.coil-kt.coil3:coil-network:[version]</code> 및 <a href="https://ktor.io/docs/http-client-engines.html#dependencies" target="_blank" rel="noreferrer">Ktor 엔진</a>을 임포트하는 것만으로도 네트워크 이미지를 로드하기에 충분합니다.</li><li>이러한 구성 요소를 <code>ComponentRegistry</code>에 수동으로 추가해도 안전합니다. 수동으로 추가된 모든 구성 요소는 자동으로 추가된 구성 요소보다 우선합니다.</li><li>원하는 경우 <code>ImageLoader.Builder.serviceLoaderEnabled(false)</code>를 사용하여 이 동작을 비활성화할 수 있습니다.</li></ul></li><li><strong>신규</strong>: 모든 플랫폼에서 <code>coil-svg</code>를 지원합니다. Android에서는 <a href="https://bigbadaboom.github.io/androidsvg/" target="_blank" rel="noreferrer">AndroidSVG</a>에 의해, 비-Android 플랫폼에서는 <a href="https://api.skia.org/classSkSVGDOM.html" target="_blank" rel="noreferrer">SVGDOM</a>에 의해 구동됩니다.</li><li>Coil은 이제 Android의 <a href="https://developer.android.com/reference/android/graphics/ImageDecoder" target="_blank" rel="noreferrer"><code>ImageDecoder</code></a> API를 내부적으로 사용하며, 이는 파일, 리소스 또는 콘텐츠 URI에서 직접 디코딩할 때 성능 이점이 있습니다.</li><li>수정: 여러 <code>coil3.Uri</code> 파싱 문제를 수정합니다.</li><li><a href="/ko/coil/upgrading_to_coil3/">중요 변경 사항에 대한 전체 목록은 업그레이드 가이드</a>를 참조하세요.</li></ul><h2 id="_3-0-0-alpha01-2023년-12월-30일" tabindex="-1">[3.0.0-alpha01] - 2023년 12월 30일 <a class="header-anchor" href="#_3-0-0-alpha01-2023년-12월-30일" aria-label="Permalink to &quot;[3.0.0-alpha01] - 2023년 12월 30일&quot;">​</a></h2><ul><li><strong>신규</strong>: <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>을 지원합니다. Coil은 이제 Android, JVM, iOS, macOS 및 Javascript를 지원하는 Kotlin 멀티플랫폼 라이브러리입니다.</li><li>Coil의 Maven 좌표는 <code>io.coil-kt.coil3</code>로 업데이트되었고, 임포트는 <code>coil3</code>로 업데이트되었습니다. 이를 통해 Coil 3은 바이너리 호환성 문제 없이 Coil 2와 나란히 실행될 수 있습니다. 예를 들어, <code>io.coil-kt:coil:[version]</code>은 이제 <code>io.coil-kt.coil3:coil:[version]</code>입니다.</li><li><code>coil-base</code> 및 <code>coil-compose-base</code> 아티팩트의 이름이 각각 <code>coil-core</code> 및 <code>coil-compose-core</code>로 변경되어 Coroutines, Ktor 및 AndroidX에서 사용되는 명명 규칙과 일치하도록 합니다.</li><li><a href="/ko/coil/upgrading_to_coil3/">중요 변경 사항에 대한 전체 목록은 업그레이드 가이드</a>를 참조하세요.</li></ul><h2 id="_2-5-0-2023년-10월-30일" tabindex="-1">[2.5.0] - 2023년 10월 30일 <a class="header-anchor" href="#_2-5-0-2023년-10월-30일" aria-label="Permalink to &quot;[2.5.0] - 2023년 10월 30일&quot;">​</a></h2><ul><li><strong>신규</strong>: <code>coil-video</code>에서 <code>MediaDataSource</code> 구현 디코딩을 지원하기 위해 <code>MediaDataSourceFetcher.Factory</code>를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/1795" target="_blank" rel="noreferrer">#1795</a>)</li><li><code>SHIFT6m</code> 기기를 하드웨어 비트맵 차단 목록에 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/1812" target="_blank" rel="noreferrer">#1812</a>)</li><li>수정: 제한 없는 차원을 가진 크기를 반환하는 페인터에 대비합니다. (<a href="https://github.com/coil-kt/coil/pull/1826" target="_blank" rel="noreferrer">#1826</a>)</li><li>수정: 캐시된 헤더에 비-ASCII 문자가 포함된 경우 <code>304 Not Modified</code> 이후 디스크 캐시 로드가 실패하는 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/1839" target="_blank" rel="noreferrer">#1839</a>)</li><li>수정: <code>FakeImageEngine</code>이 인터셉터 체인의 요청을 업데이트하지 않는 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/1905" target="_blank" rel="noreferrer">#1905</a>)</li><li>컴파일 SDK를 34로 업데이트합니다.</li><li>Kotlin을 1.9.10으로 업데이트합니다.</li><li>Coroutines를 1.7.3으로 업데이트합니다.</li><li><code>accompanist-drawablepainter</code>를 0.32.0으로 업데이트합니다.</li><li><code>androidx.annotation</code>을 1.7.0으로 업데이트합니다.</li><li><code>androidx.compose.foundation</code>을 1.5.4로 업데이트합니다.</li><li><code>androidx.core</code>를 1.12.0으로 업데이트합니다.</li><li><code>androidx.exifinterface:exifinterface</code>를 1.3.6으로 업데이트합니다.</li><li><code>androidx.lifecycle</code>을 2.6.2로 업데이트합니다.</li><li><code>com.squareup.okhttp3</code>를 4.12.0으로 업데이트합니다.</li><li><code>com.squareup.okio</code>를 3.6.0으로 업데이트합니다.</li></ul><h2 id="_2-4-0-2023년-5월-21일" tabindex="-1">[2.4.0] - 2023년 5월 21일 <a class="header-anchor" href="#_2-4-0-2023년-5월-21일" aria-label="Permalink to &quot;[2.4.0] - 2023년 5월 21일&quot;">​</a></h2><ul><li><code>DiskCache</code>의 <code>get</code>/<code>edit</code> 이름을 <code>openSnapshot</code>/<code>openEditor</code>로 변경합니다.</li><li><code>AsyncImagePainter</code>에서 <code>ColorDrawable</code>을 <code>ColorPainter</code>로 자동으로 변환하지 않도록 합니다.</li><li>간단한 <code>AsyncImage</code> 오버로드에 <code>@NonRestartableComposable</code> 주석을 추가합니다.</li><li>수정: <code>ImageSource</code>에서 <code>Context.cacheDir</code>을 지연 방식으로 호출합니다.</li><li>수정: <code>coil-bom</code> 게시 문제를 수정합니다.</li><li>수정: 하드웨어 비트맵이 비활성화된 경우 비트맵 구성을 항상 <code>ARGB_8888</code>로 설정하는 문제를 수정합니다.</li><li>Kotlin을 1.8.21으로 업데이트합니다.</li><li>Coroutines를 1.7.1으로 업데이트합니다.</li><li><code>accompanist-drawablepainter</code>를 0.30.1으로 업데이트합니다.</li><li><code>androidx.compose.foundation</code>을 1.4.3으로 업데이트합니다.</li><li><code>androidx.profileinstaller:profileinstaller</code>를 1.3.1으로 업데이트합니다.</li><li><code>com.squareup.okhttp3</code>를 4.11.0으로 업데이트합니다.</li></ul><h2 id="_2-3-0-2023년-3월-25일" tabindex="-1">[2.3.0] - 2023년 3월 25일 <a class="header-anchor" href="#_2-3-0-2023년-3월-25일" aria-label="Permalink to &quot;[2.3.0] - 2023년 3월 25일&quot;">​</a></h2><ul><li><strong>신규</strong>: <code>FakeImageLoaderEngine</code>을 포함하는 새로운 <code>coil-test</code> 아티팩트를 도입합니다. 이 클래스는 테스트에서 일관되고 동기적인(메인 스레드에서) 응답을 보장하기 위해 이미지 로더 응답을 하드코딩하는 데 유용합니다. 자세한 내용은 <a href="/ko/coil/testing">여기</a>를 참조하세요.</li><li><strong>신규</strong>: <code>coil-base</code> (Coil의 자식 모듈) 및 <code>coil-compose-base</code> (Coil-Compose의 자식 모듈)에 <a href="https://developer.android.com/topic/performance/baselineprofiles/overview" target="_blank" rel="noreferrer">베이스라인 프로필</a>을 추가합니다. <ul><li>이는 Coil의 런타임 성능을 개선하며, 앱에서 Coil이 어떻게 사용되는지에 따라 <a href="https://github.com/coil-kt/coil/tree/main/coil-benchmark/benchmark_output.md" target="_blank" rel="noreferrer">더 나은 프레임 타이밍</a>을 제공해야 합니다.</li></ul></li><li>수정: 인코딩된 데이터가 포함된 <code>file://</code> URI 파싱 문제를 수정합니다. <a href="https://github.com/coil-kt/coil/pull/1601" target="_blank" rel="noreferrer">#1601</a></li><li>수정: <code>DiskCache</code>가 존재하지 않는 디렉토리가 전달된 경우 최대 크기를 올바르게 계산하도록 수정합니다. <a href="https://github.com/coil-kt/coil/pull/1620" target="_blank" rel="noreferrer">#1620</a></li><li><code>Coil.reset</code>을 공개 API로 만듭니다. <a href="https://github.com/coil-kt/coil/pull/1506" target="_blank" rel="noreferrer">#1506</a></li><li>Java 기본 메서드 생성을 활성화합니다. <a href="https://github.com/coil-kt/coil/pull/1491" target="_blank" rel="noreferrer">#1491</a></li><li>Kotlin을 1.8.10으로 업데이트합니다.</li><li><code>accompanist-drawablepainter</code>를 0.30.0으로 업데이트합니다.</li><li><code>androidx.annotation</code>을 1.6.0으로 업데이트합니다.</li><li><code>androidx.appcompat:appcompat-resources</code>를 1.6.1으로 업데이트합니다.</li><li><code>androidx.compose.foundation</code>을 1.4.0으로 업데이트합니다.</li><li><code>androidx.core</code>를 1.9.0으로 업데이트합니다.</li><li><code>androidx.exifinterface:exifinterface</code>를 1.3.6으로 업데이트합니다.</li><li><code>androidx.lifecycle</code>을 2.6.1으로 업데이트합니다.</li><li><code>okio</code>를 3.3.0으로 업데이트합니다.</li></ul><h2 id="_2-2-2-2022년-10월-1일" tabindex="-1">[2.2.2] - 2022년 10월 1일 <a class="header-anchor" href="#_2-2-2-2022년-10월-1일" aria-label="Permalink to &quot;[2.2.2] - 2022년 10월 1일&quot;">​</a></h2><ul><li>이미지 로더가 시스템 콜백을 등록하기 전에 완전히 초기화되도록 합니다. <a href="https://github.com/coil-kt/coil/pull/1465" target="_blank" rel="noreferrer">#1465</a></li><li>API 30 이상에서 밴딩을 방지하기 위해 <code>VideoFrameDecoder</code>에 선호하는 비트맵 구성을 설정합니다. <a href="https://github.com/coil-kt/coil/pull/1487" target="_blank" rel="noreferrer">#1487</a></li><li><code>FileUriMapper</code>에서 <code>#</code>가 포함된 경로 파싱 문제를 수정합니다. <a href="https://github.com/coil-kt/coil/pull/1466" target="_blank" rel="noreferrer">#1466</a></li><li>디스크 캐시에서 비-ASCII 헤더가 포함된 응답을 읽는 문제를 수정합니다. <a href="https://github.com/coil-kt/coil/pull/1468" target="_blank" rel="noreferrer">#1468</a></li><li>에셋 하위 폴더 내에서 비디오 디코딩 문제를 수정합니다. <a href="https://github.com/coil-kt/coil/pull/1489" target="_blank" rel="noreferrer">#1489</a></li><li><code>androidx.annotation</code>을 1.5.0으로 업데이트합니다.</li></ul><h2 id="_2-2-1-2022년-9월-8일" tabindex="-1">[2.2.1] - 2022년 9월 8일 <a class="header-anchor" href="#_2-2-1-2022년-9월-8일" aria-label="Permalink to &quot;[2.2.1] - 2022년 9월 8일&quot;">​</a></h2><ul><li>수정: <code>RoundedCornersTransformation</code>이 이제 <code>input</code> 비트맵을 올바르게 스케일링합니다.</li><li><code>kotlin-parcelize</code> 플러그인에 대한 의존성을 제거합니다.</li><li>컴파일 SDK를 33으로 업데이트합니다.</li><li><a href="https://github.com/coil-kt/coil/issues/1423" target="_blank" rel="noreferrer">#1423</a> 문제를 해결하기 위해 <code>androidx.appcompat:appcompat-resources</code>를 1.4.2로 다운그레이드합니다.</li></ul><h2 id="_2-2-0-2022년-8월-16일" tabindex="-1">[2.2.0] - 2022년 8월 16일 <a class="header-anchor" href="#_2-2-0-2022년-8월-16일" aria-label="Permalink to &quot;[2.2.0] - 2022년 8월 16일&quot;">​</a></h2><ul><li><strong>신규</strong>: 비디오 프레임을 비디오 길이의 백분율로 지정하는 것을 지원하기 위해 <code>coil-video</code>에 <code>ImageRequest.videoFramePercent</code>를 추가합니다.</li><li><strong>신규</strong>: <code>BitmapFactoryDecoder</code>가 EXIF 방향 데이터를 처리하는 방법을 구성하기 위해 <code>ExifOrientationPolicy</code>를 추가합니다.</li><li>수정: <code>RoundedCornersTransformation</code>에 정의되지 않은 차원을 가진 크기가 전달된 경우 예외를 발생시키지 않도록 합니다.</li><li>수정: GIF의 프레임 지연을 하나의 부호 있는 바이트 대신 두 개의 부호 없는 바이트로 읽도록 합니다.</li><li>Kotlin을 1.7.10으로 업데이트합니다.</li><li>Coroutines를 1.6.4로 업데이트합니다.</li><li>Compose를 1.2.1으로 업데이트합니다.</li><li>OkHttp를 4.10.0으로 업데이트합니다.</li><li>Okio를 3.2.0으로 업데이트합니다.</li><li><code>accompanist-drawablepainter</code>를 0.25.1으로 업데이트합니다.</li><li><code>androidx.annotation</code>을 1.4.0으로 업데이트합니다.</li><li><code>androidx.appcompat:appcompat-resources</code>를 1.5.0으로 업데이트합니다.</li><li><code>androidx.core</code>를 1.8.0으로 업데이트합니다.</li></ul><h2 id="_2-1-0-2022년-5월-17일" tabindex="-1">[2.1.0] - 2022년 5월 17일 <a class="header-anchor" href="#_2-1-0-2022년-5월-17일" aria-label="Permalink to &quot;[2.1.0] - 2022년 5월 17일&quot;">​</a></h2><ul><li><strong>신규</strong>: <code>ByteArray</code> 로드를 지원합니다. (<a href="https://github.com/coil-kt/coil/pull/1202" target="_blank" rel="noreferrer">#1202</a>)</li><li><strong>신규</strong>: <code>ImageRequest.Builder.css</code>를 사용하여 SVG에 사용자 지정 CSS 규칙을 설정하는 것을 지원합니다. (<a href="https://github.com/coil-kt/coil/pull/1210" target="_blank" rel="noreferrer">#1210</a>)</li><li>수정: <code>GenericViewTarget</code>의 private 메서드를 protected로 전환합니다. (<a href="https://github.com/coil-kt/coil/pull/1273" target="_blank" rel="noreferrer">#1273</a>)</li><li>컴파일 SDK를 32로 업데이트합니다. (<a href="https://github.com/coil-kt/coil/pull/1268" target="_blank" rel="noreferrer">#1268</a>)</li></ul><h2 id="_2-0-0-2022년-5월-10일" tabindex="-1">[2.0.0] - 2022년 5월 10일 <a class="header-anchor" href="#_2-0-0-2022년-5월-10일" aria-label="Permalink to &quot;[2.0.0] - 2022년 5월 10일&quot;">​</a></h2><p>Coil 2.0.0은 라이브러리의 주요 반복 버전이며 브레이킹 변경 사항을 포함합니다. 업그레이드 방법은 <a href="/ko/coil/upgrading/">업그레이드 가이드</a>를 참조하세요.</p><ul><li><strong>신규</strong>: <code>coil-compose</code>에 <code>AsyncImage</code>를 도입합니다. 자세한 내용은 <a href="/ko/coil/compose/">문서</a>를 참조하세요.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 네트워크에서 이미지를 표시합니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 플레이스홀더, 원형 자르기 및 교차 페이드 애니메이션을 사용하여 네트워크에서 이미지를 표시합니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalContext.current)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    placeholder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(R.drawable.placeholder),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(R.string.description),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CircleShape)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><strong>신규</strong>: 공개 <code>DiskCache</code> API를 도입합니다. <ul><li>디스크 캐시를 구성하려면 <code>ImageLoader.Builder.diskCache</code> 및 <code>DiskCache.Builder</code>를 사용하세요.</li><li>Coil 2.0에서는 OkHttp의 <code>Cache</code>를 사용해서는 안 됩니다. 자세한 내용은 <a href="/ko/coil/upgrading_to_coil2/">여기</a>를 참조하세요.</li><li><code>Cache-Control</code> 및 기타 캐시 헤더는 여전히 지원됩니다. 단, 캐시가 URL 일치 여부만 확인하므로 <code>Vary</code> 헤더는 제외됩니다. 또한, 응답 코드가 [200..300) 범위 내에 있는 응답만 캐시됩니다.</li><li>2.0으로 업그레이드할 때 기존 디스크 캐시가 지워지고 다시 빌드됩니다.</li></ul></li><li>최소 지원 API는 이제 21입니다.</li><li><code>ImageRequest</code>의 기본 <code>Scale</code>은 이제 <code>Scale.FIT</code>입니다. <ul><li>이는 <code>ImageRequest.scale</code>을 기본 <code>Scale</code>을 가진 다른 클래스와 일관되게 만들기 위해 변경되었습니다.</li><li><code>ImageViewTarget</code>을 사용하는 요청은 여전히 <code>Scale</code>이 자동으로 감지됩니다.</li></ul></li><li>이미지 파이프라인 클래스를 재작업합니다: <ul><li><code>Mapper</code>, <code>Fetcher</code>, <code>Decoder</code>가 더 유연하게 리팩터링되었습니다.</li><li><code>Fetcher.key</code>가 새로운 <code>Keyer</code> 인터페이스로 대체되었습니다. <code>Keyer</code>는 입력 데이터에서 캐시 키를 생성합니다.</li><li><code>Decoder</code>가 Okio의 파일 시스템 API를 사용하여 <code>File</code>을 직접 읽을 수 있도록 <code>ImageSource</code>를 추가합니다.</li></ul></li><li>Jetpack Compose 통합을 재작업합니다: <ul><li><code>rememberImagePainter</code> 및 <code>ImagePainter</code>의 이름이 각각 <code>rememberAsyncImagePainter</code> 및 <code>AsyncImagePainter</code>로 변경되었습니다.</li><li><code>LocalImageLoader</code>를 지원 중단합니다. 자세한 내용은 지원 중단 메시지를 참조하세요.</li></ul></li><li>런타임 not-null 어설션 생성을 비활성화합니다. <ul><li>Java를 사용하는 경우, not-null 주석이 달린 인수에 null을 전달해도 더 이상 <code>NullPointerException</code>이 즉시 발생하지 않습니다. Kotlin의 컴파일 시점 null 안전성이 이러한 발생을 방지합니다.</li><li>이 변경으로 라이브러리 크기가 더 작아집니다.</li></ul></li><li><code>Size</code>는 이제 너비와 높이에 대한 두 개의 <code>Dimension</code> 값으로 구성됩니다. <code>Dimension</code>은 양수 픽셀 값이거나 <code>Dimension.Undefined</code>일 수 있습니다. 자세한 내용은 <a href="/ko/coil/upgrading/">여기</a>를 참조하세요.</li><li><code>BitmapPool</code> 및 <code>PoolableViewTarget</code>이 라이브러리에서 제거되었습니다.</li><li><code>VideoFrameFileFetcher</code> 및 <code>VideoFrameUriFetcher</code>가 라이브러리에서 제거되었습니다. 대신 모든 데이터 소스를 지원하는 <code>VideoFrameDecoder</code>를 사용하세요.</li><li><a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/BlurTransformation.kt" target="_blank" rel="noreferrer"><code>BlurTransformation</code></a> 및 <a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/GrayscaleTransformation.kt" target="_blank" rel="noreferrer"><code>GrayscaleTransformation</code></a>이 라이브러리에서 제거되었습니다. 사용하는 경우 코드를 프로젝트에 복사할 수 있습니다.</li><li><code>Transition.transition</code>이 전환 완료 시까지 일시 중단할 필요가 없으므로 일시 중단되지 않는 함수로 변경됩니다.</li><li>진행 중인 <code>BitmapFactory</code> 작업의 최대 수를 제한하는 <code>bitmapFactoryMaxParallelism</code> 지원을 추가합니다. 이 값은 기본적으로 4이며, UI 성능을 향상시킵니다.</li><li><code>interceptorDispatcher</code>, <code>fetcherDispatcher</code>, <code>decoderDispatcher</code> 및 <code>transformationDispatcher</code> 지원을 추가합니다.</li><li>공통 <code>ViewTarget</code> 로직을 처리하는 <code>GenericViewTarget</code>를 추가합니다.</li><li>기본 지원 데이터 유형에 <code>ByteBuffer</code>를 추가합니다.</li><li><code>Disposable</code>이 리팩터링되어 기본 <code>ImageRequest</code>의 작업을 노출합니다.</li><li><code>MemoryCache</code> API를 재작업합니다.</li><li><code>ImageRequest.fallback</code>이 null인 경우 <code>ImageRequest.error</code>가 <code>Target</code>에 설정됩니다.</li><li><code>Transformation.key</code>가 <code>Transformation.cacheKey</code>로 대체됩니다.</li><li>Kotlin을 1.6.10으로 업데이트합니다.</li><li>Compose를 1.1.1으로 업데이트합니다.</li><li>OkHttp를 4.9.3으로 업데이트합니다.</li><li>Okio를 3.0.0으로 업데이트합니다.</li></ul><p><code>2.0.0-rc03</code> 이후 변경 사항:</p><ul><li><code>Dimension.Original</code>을 <code>Dimension.Undefined</code>로 전환합니다. <ul><li>이는 크기 시스템의 일부 엣지 케이스(<a href="https://github.com/coil-kt/coil/issues/1246" target="_blank" rel="noreferrer">예시</a>)를 수정하기 위해 비-픽셀 차원의 의미를 약간 변경합니다.</li></ul></li><li>ContentScale이 None인 경우 <code>Size.ORIGINAL</code>로 이미지를 로드합니다.</li><li><code>ImageView.load</code> 빌더 인수를 마지막이 아닌 먼저 적용하는 문제를 수정합니다.</li><li>응답이 수정되지 않은 경우 HTTP 헤더를 결합하지 않는 문제를 수정합니다.</li></ul><h2 id="_2-0-0-rc03-2022년-4월-11일" tabindex="-1">[2.0.0-rc03] - 2022년 4월 11일 <a class="header-anchor" href="#_2-0-0-rc03-2022년-4월-11일" aria-label="Permalink to &quot;[2.0.0-rc03] - 2022년 4월 11일&quot;">​</a></h2><ul><li><code>ScaleResolver</code> 인터페이스를 제거합니다.</li><li><code>Size</code> 생성자를 함수로 전환합니다.</li><li><code>Dimension.Pixels</code>의 <code>toString</code>이 픽셀 값만 반환하도록 변경합니다.</li><li><code>SystemCallbacks.onTrimMemory</code>에서 드물게 발생하는 충돌에 대비합니다.</li><li>Coroutines를 1.6.1으로 업데이트합니다.</li></ul><h2 id="_2-0-0-rc02-2022년-3월-20일" tabindex="-1">[2.0.0-rc02] - 2022년 3월 20일 <a class="header-anchor" href="#_2-0-0-rc02-2022년-3월-20일" aria-label="Permalink to &quot;[2.0.0-rc02] - 2022년 3월 20일&quot;">​</a></h2><ul><li><code>ImageRequest</code>의 기본 크기를 <code>Size.ORIGINAL</code> 대신 현재 디스플레이 크기로 되돌립니다.</li><li><code>DiskCache.Builder</code>가 실험적으로 표시되는 문제를 수정합니다. <code>DiskCache</code>의 메서드만 실험적입니다.</li><li>한 차원이 <code>WRAP_CONTENT</code>인 <code>ImageView</code>에 이미지를 로드할 때, 이미지가 제한된 차원에 맞춰지지 않고 원본 크기로 로드되는 경우를 수정합니다.</li><li><code>MemoryCache.Key</code>, <code>MemoryCache.Value</code> 및 <code>Parameters.Entry</code>에서 컴포넌트 함수를 제거합니다.</li></ul><h2 id="_2-0-0-rc01-2022년-3월-2일" tabindex="-1">[2.0.0-rc01] - 2022년 3월 2일 <a class="header-anchor" href="#_2-0-0-rc01-2022년-3월-2일" aria-label="Permalink to &quot;[2.0.0-rc01] - 2022년 3월 2일&quot;">​</a></h2><p><code>1.4.0</code> 이후 주요 변경 사항:</p><ul><li>최소 지원 API는 이제 21입니다.</li><li>Jetpack Compose 통합을 재작업합니다. <ul><li><code>rememberImagePainter</code>의 이름이 <code>rememberAsyncImagePainter</code>로 변경되었습니다.</li><li><code>AsyncImage</code> 및 <code>SubcomposeAsyncImage</code> 지원을 추가합니다. 자세한 내용은 <a href="/ko/coil/compose/">문서</a>를 참조하세요.</li><li><code>LocalImageLoader</code>를 지원 중단합니다. 자세한 내용은 지원 중단 메시지를 참조하세요.</li></ul></li><li>Coil 2.0은 자체 디스크 캐시 구현을 가지고 있으며 더 이상 OkHttp에 디스크 캐싱을 의존하지 않습니다. <ul><li>디스크 캐시를 구성하려면 <code>ImageLoader.Builder.diskCache</code> 및 <code>DiskCache.Builder</code>를 사용하세요.</li><li>Coil 2.0에서 OkHttp의 <code>Cache</code>를 사용<strong>해서는 안 됩니다</strong>. 스레드가 캐시에 쓰는 도중 인터럽트된 경우 캐시가 손상될 수 있기 때문입니다.</li><li><code>Cache-Control</code> 및 기타 캐시 헤더는 여전히 지원됩니다. 단, 캐시가 URL 일치 여부만 확인하므로 <code>Vary</code> 헤더는 제외됩니다. 또한, 응답 코드가 [200..300) 범위 내에 있는 응답만 캐시됩니다.</li><li>2.0으로 업그레이드할 때 기존 디스크 캐시가 지워집니다.</li></ul></li><li><code>ImageRequest</code>의 기본 <code>Scale</code>은 이제 <code>Scale.FIT</code>입니다. <ul><li>이는 <code>ImageRequest.scale</code>을 기본 <code>Scale</code>을 가진 다른 클래스와 일관되게 만들기 위해 변경되었습니다.</li><li><code>ImageViewTarget</code>을 사용하는 요청은 여전히 <code>Scale</code>이 자동으로 감지됩니다.</li></ul></li><li><code>ImageRequest</code>의 기본 크기는 이제 <code>Size.ORIGINAL</code>입니다.</li><li>이미지 파이프라인 클래스를 재작업합니다: <ul><li><code>Mapper</code>, <code>Fetcher</code>, <code>Decoder</code>가 더 유연하게 리팩터링되었습니다.</li><li><code>Fetcher.key</code>가 새로운 <code>Keyer</code> 인터페이스로 대체되었습니다. <code>Keyer</code>는 입력 데이터에서 캐시 키를 생성합니다.</li><li><code>Decoder</code>가 Okio의 파일 시스템 API를 사용하여 <code>File</code>을 직접 읽을 수 있도록 <code>ImageSource</code>를 추가합니다.</li></ul></li><li>런타임 not-null 어설션 생성을 비활성화합니다. <ul><li>Java를 사용하는 경우, not-null 주석이 달린 파라미터에 null을 전달해도 더 이상 <code>NullPointerException</code>이 즉시 발생하지 않습니다. Kotlin을 사용하는 경우 본질적으로 변화가 없습니다.</li><li>이 변경으로 라이브러리 크기가 더 작아집니다.</li></ul></li><li><code>Size</code>는 이제 너비와 높이에 대한 두 개의 <code>Dimension</code> 값으로 구성됩니다. <code>Dimension</code>은 양수 픽셀 값이거나 <code>Dimension.Original</code>일 수 있습니다.</li><li><code>BitmapPool</code> 및 <code>PoolableViewTarget</code>이 라이브러리에서 제거되었습니다.</li><li><code>VideoFrameFileFetcher</code> 및 <code>VideoFrameUriFetcher</code>가 라이브러리에서 제거되었습니다. 대신 모든 데이터 소스를 지원하는 <code>VideoFrameDecoder</code>를 사용하세요.</li><li><a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/BlurTransformation.kt" target="_blank" rel="noreferrer"><code>BlurTransformation</code></a> 및 <a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/GrayscaleTransformation.kt" target="_blank" rel="noreferrer"><code>GrayscaleTransformation</code></a>이 라이브러리에서 제거되었습니다. 사용하는 경우 코드를 프로젝트에 복사할 수 있습니다.</li><li><code>Transition.transition</code>이 전환 완료 시까지 일시 중단할 필요가 없으므로 일시 중단되지 않는 함수로 변경됩니다.</li><li>진행 중인 <code>BitmapFactory</code> 작업의 최대 수를 제한하는 <code>bitmapFactoryMaxParallelism</code> 지원을 추가합니다. 이 값은 기본적으로 4이며, UI 성능을 향상시킵니다.</li><li><code>interceptorDispatcher</code>, <code>fetcherDispatcher</code>, <code>decoderDispatcher</code> 및 <code>transformationDispatcher</code> 지원을 추가합니다.</li><li>공통 <code>ViewTarget</code> 로직을 처리하는 <code>GenericViewTarget</code>를 추가합니다.</li><li>기본 지원 데이터 유형에 <code>ByteBuffer</code>를 추가합니다.</li><li><code>Disposable</code>이 리팩터링되어 기본 <code>ImageRequest</code>의 작업을 노출합니다.</li><li><code>MemoryCache</code> API를 재작업합니다.</li><li><code>ImageRequest.fallback</code>이 null인 경우 <code>ImageRequest.error</code>가 <code>Target</code>에 설정됩니다.</li><li><code>Transformation.key</code>가 <code>Transformation.cacheKey</code>로 대체됩니다.</li><li>Kotlin을 1.6.10으로 업데이트합니다.</li><li>Compose를 1.1.1으로 업데이트합니다.</li><li>OkHttp를 4.9.3으로 업데이트합니다.</li><li>Okio를 3.0.0으로 업데이트합니다.</li></ul><p><code>2.0.0-alpha09</code> 이후 변경 사항:</p><ul><li><code>-Xjvm-default=all</code> 컴파일러 플래그를 제거합니다.</li><li><code>must-revalidate</code>/<code>e-tag</code>를 사용하는 여러 요청이 동시에 실행될 때 이미지 로드 실패 문제를 수정합니다.</li><li><code>&lt;svg</code> 태그 뒤에 새 줄 문자가 있는 경우 <code>DecodeUtils.isSvg</code>가 false를 반환하는 문제를 수정합니다.</li><li><code>LocalImageLoader.provides</code> 지원 중단 메시지를 더 명확하게 합니다.</li><li>Compose를 1.1.1으로 업데이트합니다.</li><li><code>accompanist-drawablepainter</code>를 0.23.1으로 업데이트합니다.</li></ul><h2 id="_2-0-0-alpha09-2022년-2월-16일" tabindex="-1">[2.0.0-alpha09] - 2022년 2월 16일 <a class="header-anchor" href="#_2-0-0-alpha09-2022년-2월-16일" aria-label="Permalink to &quot;[2.0.0-alpha09] - 2022년 2월 16일&quot;">​</a></h2><ul><li><code>AsyncImage</code>가 잘못된 제약 조건을 생성하는 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/1134" target="_blank" rel="noreferrer">#1134</a>)</li><li><code>AsyncImagePainter</code>에 <code>ContentScale</code> 인수를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/1144" target="_blank" rel="noreferrer">#1144</a>) <ul><li>이는 이미지가 올바른 크기로 로드되도록 <code>Image</code>에 설정된 값과 동일하게 설정되어야 합니다.</li></ul></li><li><code>ImageRequest</code>에 대한 <code>Scale</code>을 지연 방식으로 해결하는 것을 지원하기 위해 <code>ScaleResolver</code>를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/1134" target="_blank" rel="noreferrer">#1134</a>) <ul><li><code>ImageRequest.scale</code>은 <code>ImageRequest.scaleResolver.scale()</code>로 대체되어야 합니다.</li></ul></li><li>Compose를 1.1.0으로 업데이트합니다.</li><li><code>accompanist-drawablepainter</code>를 0.23.0으로 업데이트합니다.</li><li><code>androidx.lifecycle</code>을 2.4.1으로 업데이트합니다.</li></ul><h2 id="_2-0-0-alpha08-2022년-2월-7일" tabindex="-1">[2.0.0-alpha08] - 2022년 2월 7일 <a class="header-anchor" href="#_2-0-0-alpha08-2022년-2월-7일" aria-label="Permalink to &quot;[2.0.0-alpha08] - 2022년 2월 7일&quot;">​</a></h2><ul><li><code>DiskCache</code> 및 <code>ImageSource</code>가 Okio의 <code>FileSystem</code> API를 사용하도록 업데이트합니다. (<a href="https://github.com/coil-kt/coil/pull/1115" target="_blank" rel="noreferrer">#1115</a>)</li></ul><h2 id="_2-0-0-alpha07-2022년-1월-30일" tabindex="-1">[2.0.0-alpha07] - 2022년 1월 30일 <a class="header-anchor" href="#_2-0-0-alpha07-2022년-1월-30일" aria-label="Permalink to &quot;[2.0.0-alpha07] - 2022년 1월 30일&quot;">​</a></h2><ul><li><code>AsyncImage</code> 성능을 크게 개선하고 <code>AsyncImage</code>를 <code>AsyncImage</code> 및 <code>SubcomposeAsyncImage</code>로 분할합니다. (<a href="https://github.com/coil-kt/coil/pull/1048" target="_blank" rel="noreferrer">#1048</a>) <ul><li><code>SubcomposeAsyncImage</code>는 <code>loading</code>/<code>success</code>/<code>error</code>/<code>content</code> 슬롯 API를 제공하며 성능이 낮은 서브컴포지션을 사용합니다.</li><li><code>AsyncImage</code>는 <code>placeholder</code>/<code>error</code>/<code>fallback</code> 인수를 제공하여 로드 중이거나 요청이 실패했을 때 그려지는 <code>Painter</code>를 덮어씁니다. <code>AsyncImage</code>는 서브컴포지션을 사용하지 않으며 <code>SubcomposeAsyncImage</code>보다 훨씬 더 나은 성능을 가집니다.</li><li><code>SubcomposeAsyncImage.content</code>에서 <code>AsyncImagePainter.State</code> 인수를 제거합니다. 필요한 경우 <code>painter.state</code>를 사용하세요.</li><li><code>AsyncImage</code> 및 <code>SubcomposeAsyncImage</code> 모두에 <code>onLoading</code>/<code>onSuccess</code>/<code>onError</code> 콜백을 추가합니다.</li></ul></li><li><code>LocalImageLoader</code>를 지원 중단합니다. (<a href="https://github.com/coil-kt/coil/pull/1101" target="_blank" rel="noreferrer">#1101</a>)</li><li><code>ImageRequest.tags</code> 지원을 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/1066" target="_blank" rel="noreferrer">#1066</a>)</li><li><code>DecodeUtils</code>의 <code>isGif</code>, <code>isWebP</code>, <code>isAnimatedWebP</code>, <code>isHeif</code> 및 <code>isAnimatedHeif</code>를 coil-gif로 이동합니다. coil-svg에 <code>isSvg</code>를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/1117" target="_blank" rel="noreferrer">#1117</a>)</li><li><code>FetchResult</code> 및 <code>DecodeResult</code>를 비-데이터 클래스로 전환합니다. (<a href="https://github.com/coil-kt/coil/pull/1114" target="_blank" rel="noreferrer">#1114</a>)</li><li>사용되지 않는 <code>DiskCache.Builder</code> 컨텍스트 인수를 제거합니다. (<a href="https://github.com/coil-kt/coil/pull/1099" target="_blank" rel="noreferrer">#1099</a>)</li><li>원본 크기를 가진 비트맵 리소스의 스케일링 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/1072" target="_blank" rel="noreferrer">#1072</a>)</li><li><code>ImageDecoderDecoder</code>에서 <code>ImageDecoder</code>를 닫지 못하는 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/1109" target="_blank" rel="noreferrer">#1109</a>)</li><li>드로어블을 비트맵으로 변환할 때 잘못된 스케일링 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/1084" target="_blank" rel="noreferrer">#1084</a>)</li><li>Compose를 1.1.0-rc03으로 업데이트합니다.</li><li><code>accompanist-drawablepainter</code>를 0.22.1-rc로 업데이트합니다.</li><li><code>androidx.appcompat:appcompat-resources</code>를 1.4.1으로 업데이트합니다.</li></ul><h2 id="_2-0-0-alpha06-2021년-12월-24일" tabindex="-1">[2.0.0-alpha06] - 2021년 12월 24일 <a class="header-anchor" href="#_2-0-0-alpha06-2021년-12월-24일" aria-label="Permalink to &quot;[2.0.0-alpha06] - 2021년 12월 24일&quot;">​</a></h2><ul><li>버퍼링이나 임시 파일 없이 에셋, 리소스 및 콘텐츠 URI에서 디코딩을 지원하기 위해 <code>ImageSource.Metadata</code>를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/1060" target="_blank" rel="noreferrer">#1060</a>)</li><li><code>AsyncImage</code>가 양의 제약 조건을 가질 때까지 이미지 요청 실행을 지연합니다. (<a href="https://github.com/coil-kt/coil/pull/1028" target="_blank" rel="noreferrer">#1028</a>)</li><li><code>loading</code>, <code>success</code>, <code>error</code>가 모두 설정된 경우 <code>AsyncImage</code>에 <code>DefaultContent</code>를 사용하는 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/1026" target="_blank" rel="noreferrer">#1026</a>)</li><li>플랫폼 <code>LruCache</code> 대신 androidx <code>LruCache</code>를 사용합니다. (<a href="https://github.com/coil-kt/coil/pull/1047" target="_blank" rel="noreferrer">#1047</a>)</li><li>Kotlin을 1.6.10으로 업데이트합니다.</li><li>Coroutines를 1.6.0으로 업데이트합니다.</li><li>Compose를 1.1.0-rc01으로 업데이트합니다.</li><li><code>accompanist-drawablepainter</code>를 0.22.0-rc로 업데이트합니다.</li><li><code>androidx.collection</code>을 1.2.0으로 업데이트합니다.</li></ul><h2 id="_2-0-0-alpha05-2021년-11월-28일" tabindex="-1">[2.0.0-alpha05] - 2021년 11월 28일 <a class="header-anchor" href="#_2-0-0-alpha05-2021년-11월-28일" aria-label="Permalink to &quot;[2.0.0-alpha05] - 2021년 11월 28일&quot;">​</a></h2><ul><li><strong>중요</strong>: 이미지의 원본 크기를 어느 한 차원에 사용할 수 있도록 <code>Size</code>를 리팩터링합니다. <ul><li><code>Size</code>는 이제 너비와 높이에 대한 두 개의 <code>Dimension</code> 값으로 구성됩니다. <code>Dimension</code>은 양수 픽셀 값이거나 <code>Dimension.Original</code>일 수 있습니다.</li><li>이 변경은 한 차원이 고정 픽셀 값일 때 무제한 너비/높이 값(예: <code>wrap_content</code>, <code>Constraints.Infinity</code>)을 더 잘 지원하기 위해 이루어졌습니다.</li></ul></li><li>수정: <code>AsyncImage</code>에 대한 검사 모드(미리보기)를 지원합니다.</li><li>수정: <code>imageLoader.memoryCache</code>가 null인 경우 <code>SuccessResult.memoryCacheKey</code>는 항상 <code>null</code>이어야 합니다.</li><li><code>ImageLoader</code>, <code>SizeResolver</code> 및 <code>ViewSizeResolver</code>의 생성자와 유사한 <code>invoke</code> 함수를 최상위 함수로 전환합니다.</li><li><code>CrossfadeDrawable</code>의 시작 및 끝 드로어블을 공개 API로 만듭니다.</li><li><code>ImageLoader</code>의 플레이스홀더/오류/폴백 드로어블을 변경합니다.</li><li><code>SuccessResult</code> 생성자에 기본 인수를 추가합니다.</li><li><code>androidx.collection-ktx</code> 대신 <code>androidx.collection</code>에 의존합니다.</li><li>OkHttp를 4.9.3으로 업데이트합니다.</li></ul><h2 id="_2-0-0-alpha04-2021년-11월-22일" tabindex="-1">[2.0.0-alpha04] - 2021년 11월 22일 <a class="header-anchor" href="#_2-0-0-alpha04-2021년-11월-22일" aria-label="Permalink to &quot;[2.0.0-alpha04] - 2021년 11월 22일&quot;">​</a></h2><ul><li><strong>신규</strong>: <code>coil-compose</code>에 <code>AsyncImage</code>를 추가합니다. <ul><li><code>AsyncImage</code>는 <code>ImageRequest</code>를 비동기적으로 실행하고 결과를 렌더링하는 컴포저블입니다.</li><li><strong><code>AsyncImage</code>는 대부분의 사용 사례에서 <code>rememberImagePainter</code>를 대체하기 위함입니다.</strong></li><li>API는 최종 버전이 아니며 최종 2.0 릴리스 전에 변경될 수 있습니다.</li><li><code>Image</code>와 유사한 API를 가지며 <code>Alignment</code>, <code>ContentScale</code>, <code>alpha</code>, <code>ColorFilter</code>, <code>FilterQuality</code>와 동일한 인수를 지원합니다.</li><li><code>content</code>, <code>loading</code>, <code>success</code>, <code>error</code> 인수를 사용하여 각 <code>AsyncImagePainter</code> 상태에 대해 그려지는 내용을 덮어쓰는 것을 지원합니다.</li><li>이미지 크기 및 스케일 해결과 관련된 <code>rememberImagePainter</code>의 여러 디자인 문제를 수정합니다.</li><li>예시 사용:</li></ul></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 이미지만 그립니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`null\`을 피하고 가능한 경우 현지화된 문자열을 설정합니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 원형 자르기, 교차 페이드 및 \`loading\` 상태 덮어쓰기를 사용하여 이미지를 그립니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalContext.current)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CircleShape),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    loading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        CircularProgressIndicator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 원형 자르기, 교차 페이드 및 모든 상태 덮어쓰기를 사용하여 이미지를 그립니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalContext.current)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CircleShape),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AsyncImagePainter.State.Loading) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        CircularProgressIndicator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        AsyncImageContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 이미지를 그립니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>중요</strong>: <code>ImagePainter</code>의 이름을 <code>AsyncImagePainter</code>로, <code>rememberImagePainter</code>의 이름을 <code>rememberAsyncImagePainter</code>로 변경합니다. <ul><li><code>ExecuteCallback</code>은 더 이상 지원되지 않습니다. <code>AsyncImagePainter</code>가 <code>onDraw</code>가 호출될 때까지 기다리는 것을 건너뛰도록 하려면 <code>ImageRequest.size(OriginalSize)</code> (또는 다른 크기)를 대신 설정하세요.</li><li><code>rememberAsyncImagePainter</code>에 선택적 <code>FilterQuality</code> 인수를 추가합니다.</li></ul></li><li><code>DiskCache</code>의 정리 작업에 코루틴을 사용하고 <code>DiskCache.Builder.cleanupDispatcher</code>를 추가합니다.</li><li><code>ImageLoader.Builder.placeholder</code>를 사용하여 설정된 플레이스홀더의 Compose 미리보기 문제를 수정합니다.</li><li>더 효율적인 코드를 생성하기 위해 <code>LocalImageLoader.current</code>에 <code>@ReadOnlyComposable</code>을 표시합니다.</li><li>Compose를 1.1.0-beta03으로 업데이트하고 <code>compose.ui</code> 대신 <code>compose.foundation</code>에 의존합니다.</li><li><code>androidx.appcompat-resources</code>를 1.4.0으로 업데이트합니다.</li></ul><h2 id="_2-0-0-alpha03-2021년-11월-12일" tabindex="-1">[2.0.0-alpha03] - 2021년 11월 12일 <a class="header-anchor" href="#_2-0-0-alpha03-2021년-11월-12일" aria-label="Permalink to &quot;[2.0.0-alpha03] - 2021년 11월 12일&quot;">​</a></h2><ul><li>Android 29 이상에서 음악 썸네일을 로드하는 기능을 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/967" target="_blank" rel="noreferrer">#967</a>)</li><li>수정: 현재 패키지의 리소스를 로드하기 위해 <code>context.resources</code>를 사용합니다. (<a href="https://github.com/coil-kt/coil/pull/968" target="_blank" rel="noreferrer">#968</a>)</li><li>수정: <code>clear</code> -&gt; <code>dispose</code> 교체 표현식을 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/970" target="_blank" rel="noreferrer">#970</a>)</li><li>Compose를 1.0.5로 업데이트합니다.</li><li><code>accompanist-drawablepainter</code>를 0.20.2로 업데이트합니다.</li><li>Okio를 3.0.0으로 업데이트합니다.</li><li><code>androidx.annotation</code>을 1.3.0으로 업데이트합니다.</li><li><code>androidx.core</code>를 1.7.0으로 업데이트합니다.</li><li><code>androidx.lifecycle</code>을 2.4.0으로 업데이트합니다. <ul><li><code>lifecycle-common-java8</code>이 <code>lifecycle-common</code>에 병합되었으므로 해당 의존성을 제거합니다.</li></ul></li></ul><h2 id="_2-0-0-alpha02-2021년-10월-24일" tabindex="-1">[2.0.0-alpha02] - 2021년 10월 24일 <a class="header-anchor" href="#_2-0-0-alpha02-2021년-10월-24일" aria-label="Permalink to &quot;[2.0.0-alpha02] - 2021년 10월 24일&quot;">​</a></h2><ul><li><a href="https://docs.gradle.org/7.2/useruserguide/platforms.html#sub:bom_import" target="_blank" rel="noreferrer">BOM(Bill of Materials)</a>을 포함하는 새로운 <code>coil-bom</code> 아티팩트를 추가합니다. <ul><li><code>coil-bom</code>을 임포트하면 버전을 지정하지 않고 다른 Coil 아티팩트에 의존할 수 있습니다.</li></ul></li><li><code>ExecuteCallback.Immediate</code>를 사용할 때 이미지 로드 실패 문제를 수정합니다.</li><li>Okio를 3.0.0-alpha.11로 업데이트합니다. <ul><li>이는 Okio 3.0.0-alpha.11과의 호환성 문제도 해결합니다.</li></ul></li><li>Kotlin을 1.5.31으로 업데이트합니다.</li><li>Compose를 1.0.4로 업데이트합니다.</li></ul><h2 id="_2-0-0-alpha01-2021년-10월-11일" tabindex="-1">[2.0.0-alpha01] - 2021년 10월 11일 <a class="header-anchor" href="#_2-0-0-alpha01-2021년-10월-11일" aria-label="Permalink to &quot;[2.0.0-alpha01] - 2021년 10월 11일&quot;">​</a></h2><p>Coil 2.0.0은 라이브러리의 다음 주요 반복 버전이며 새로운 기능, 성능 개선, API 개선 및 다양한 버그 수정이 포함되어 있습니다. 이 릴리스는 2.0.0 안정 버전 릴리스 전까지 향후 알파 릴리스와 바이너리/소스 비호환일 수 있습니다.</p><ul><li><strong>중요</strong>: 최소 지원 API는 이제 21입니다.</li><li><strong>중요</strong>: <code>-Xjvm-default=all</code>을 활성화합니다. <ul><li>이는 Kotlin의 기본 인터페이스 메서드 지원을 사용하는 대신 Java 8 기본 메서드를 생성합니다. 자세한 내용은 <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer">이 블로그 게시물</a>을 참조하세요.</li><li><strong>빌드 파일에도 <code>-Xjvm-default=all</code> 또는 <code>-Xjvm-default=all-compatibility</code>를 추가해야 합니다.</strong> 방법은 <a href="/ko/coil/faq/">여기</a>를 참조하세요.</li></ul></li><li><strong>중요</strong>: Coil은 이제 자체 디스크 캐시 구현을 가지고 있으며 더 이상 OkHttp에 디스크 캐싱을 의존하지 않습니다. <ul><li>이 변경은 다음을 위해 이루어졌습니다. <ul><li>이미지 디코딩 중 스레드 인터럽션 지원을 강화합니다. 이는 이미지 요청이 빠르게 시작되고 중지될 때 성능을 향상시킵니다.</li><li><code>File</code>로 백업된 <code>ImageSource</code> 노출을 지원합니다. 이는 Android API가 디코딩을 위해 <code>File</code>을 요구할 때 (예: <code>MediaMetadataRetriever</code>) 불필요한 복사를 방지합니다.</li><li>디스크 캐시 파일에서 직접 읽기/쓰기를 지원합니다.</li></ul></li><li>디스크 캐시를 구성하려면 <code>ImageLoader.Builder.diskCache</code> 및 <code>DiskCache.Builder</code>를 사용하세요.</li><li>Coil 2.0에서는 OkHttp의 <code>Cache</code>를 사용<strong>해서는 안 됩니다</strong>. 스레드가 캐시에 쓰는 도중 인터럽트된 경우 캐시가 손상될 수 있기 때문입니다.</li><li><code>Cache-Control</code> 및 기타 캐시 헤더는 여전히 지원됩니다. 단, 캐시가 URL 일치 여부만 확인하므로 <code>Vary</code> 헤더는 제외됩니다. 또한, 응답 코드가 [200..300) 범위 내에 있는 응답만 캐시됩니다.</li><li>캐시 헤더 지원은 <code>ImageLoader.Builder.respectCacheHeaders</code>를 사용하여 활성화 또는 비활성화할 수 있습니다.</li><li>2.0으로 업그레이드할 때 기존 디스크 캐시가 지워지고 다시 빌드됩니다.</li></ul></li><li><strong>중요</strong>: <code>ImageRequest</code>의 기본 <code>Scale</code>은 이제 <code>Scale.FIT</code>입니다. <ul><li>이는 <code>ImageRequest.scale</code>을 기본 <code>Scale</code>을 가진 다른 클래스와 일관되게 만들기 위해 변경되었습니다.</li><li><code>ImageViewTarget</code>을 사용하는 요청은 여전히 스케일이 자동으로 감지됩니다.</li></ul></li><li>이미지 파이프라인 클래스에 대한 주요 변경 사항: <ul><li><code>Mapper</code>, <code>Fetcher</code>, <code>Decoder</code>가 더 유연하게 리팩터링되었습니다.</li><li><code>Fetcher.key</code>가 새로운 <code>Keyer</code> 인터페이스로 대체되었습니다. <code>Keyer</code>는 입력 데이터에서 캐시 키를 생성합니다.</li><li><code>Decoder</code>가 <code>File</code>을 직접 디코딩할 수 있도록 <code>ImageSource</code>를 추가합니다.</li></ul></li><li><code>BitmapPool</code> 및 <code>PoolableViewTarget</code>이 라이브러리에서 제거되었습니다. 비트맵 풀링이 제거된 이유는 다음과 같습니다. <ul><li>API 23 이하에서 가장 효과적이며 최신 Android 릴리스에서는 효과가 감소했습니다.</li><li>비트맵 풀링을 제거하면 Coil이 변경 불가능한 비트맵을 사용할 수 있으며, 이는 성능 이점이 있습니다.</li><li>비트맵 풀을 관리하는 데 런타임 오버헤드가 있습니다.</li><li>비트맵 풀링은 비트맵이 풀링 대상인지 추적해야 하므로 Coil의 API에 설계 제한을 만듭니다. 비트맵 풀링을 제거하면 Coil이 더 많은 곳에서 결과 <code>Drawable</code>을 노출할 수 있습니다(예: <code>Listener</code>, <code>Disposable</code>). 또한, 이는 Coil이 <code>ImageView</code>를 지울 필요가 없다는 것을 의미하며, 이는 <a href="https://github.com/coil-kt/coil/issues/650" target="_blank" rel="noreferrer">문제를 야기</a>할 수 있습니다.</li><li>비트맵 풀링은 <a href="https://github.com/coil-kt/coil/issues/546" target="_blank" rel="noreferrer">오류 발생 가능성</a>이 높습니다. 새 비트맵을 할당하는 것이 여전히 사용 중일 수 있는 비트맵을 재사용하려는 시도보다 훨씬 안전합니다.</li></ul></li><li><code>MemoryCache</code>가 더 유연하게 리팩터링되었습니다.</li><li>런타임 not-null 어설션 생성을 비활성화합니다. <ul><li>Java를 사용하는 경우, not-null 주석이 달린 파라미터에 null을 전달해도 더 이상 <code>NullPointerException</code>이 즉시 발생하지 않습니다. Kotlin을 사용하는 경우 본질적으로 변화가 없습니다.</li><li>이 변경으로 라이브러리 크기가 더 작아집니다.</li></ul></li><li><code>VideoFrameFileFetcher</code> 및 <code>VideoFrameUriFetcher</code>가 라이브러리에서 제거되었습니다. 대신 모든 데이터 소스를 지원하는 <code>VideoFrameDecoder</code>를 사용하세요.</li><li>진행 중인 <code>BitmapFactory</code> 작업의 최대 수를 제한하는 <code>bitmapFactoryMaxParallelism</code> 지원을 추가합니다. 이 값은 기본적으로 4이며, UI 성능을 향상시킵니다.</li><li><code>interceptorDispatcher</code>, <code>fetcherDispatcher</code>, <code>decoderDispatcher</code> 및 <code>transformationDispatcher</code> 지원을 추가합니다.</li><li><code>Disposable</code>이 리팩터링되어 기본 <code>ImageRequest</code>의 작업을 노출합니다.</li><li><code>Transition.transition</code>이 전환 완료 시까지 일시 중단할 필요가 없으므로 일시 중단되지 않는 함수로 변경됩니다.</li><li>공통 <code>ViewTarget</code> 로직을 처리하는 <code>GenericViewTarget</code>를 추가합니다.</li><li>라이브러리에서 <a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/BlurTransformation.kt" target="_blank" rel="noreferrer"><code>BlurTransformation</code></a> 및 <a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/GrayscaleTransformation.kt" target="_blank" rel="noreferrer"><code>GrayscaleTransformation</code></a>이 제거되었습니다. <ul><li>사용하는 경우 코드를 프로젝트에 복사할 수 있습니다.</li></ul></li><li><code>ImageRequest.error</code>이 null인 경우 <code>ImageRequest.fallback</code>가 <code>Target</code>에 설정됩니다.</li><li><code>Transformation.key</code>가 <code>Transformation.cacheKey</code>로 대체됩니다.</li><li><code>ImageRequest.Listener</code>는 <code>onSuccess</code> 및 <code>onError</code>에서 각각 <code>SuccessResult</code>/<code>ErrorResult</code>를 반환합니다.</li><li>기본 지원 데이터 유형에 <code>ByteBuffer</code>를 추가합니다.</li><li>여러 클래스에서 <code>toString</code> 구현을 제거합니다.</li><li>OkHttp를 4.9.2로 업데이트합니다.</li><li>Okio를 3.0.0-alpha.10으로 업데이트합니다.</li></ul><h2 id="_1-4-0-2021년-10월-6일" tabindex="-1">[1.4.0] - 2021년 10월 6일 <a class="header-anchor" href="#_1-4-0-2021년-10월-6일" aria-label="Permalink to &quot;[1.4.0] - 2021년 10월 6일&quot;">​</a></h2><ul><li><strong>신규</strong>: <code>ImagePainter.State.Success</code> 및 <code>ImagePainter.State.Error</code>에 <code>ImageResult</code>를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/887" target="_blank" rel="noreferrer">#887</a>) <ul><li>이는 <code>ImagePainter.State.Success</code> 및 <code>ImagePainter.State.Error</code>의 서명에 대한 바이너리 비호환 변경이지만, 이 API는 실험적(experimental)으로 표시되어 있습니다.</li></ul></li><li><code>View.isShown</code>이 <code>true</code>인 경우에만 <code>CrossfadeTransition</code>을 실행합니다. 이전에는 <code>View.isVisible</code>만 확인했습니다. (<a href="https://github.com/coil-kt/coil/pull/898" target="_blank" rel="noreferrer">#898</a>)</li><li>반올림 문제로 인해 스케일링 승수가 1보다 약간 작은 경우 잠재적인 메모리 캐시 미스 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/899" target="_blank" rel="noreferrer">#899</a>)</li><li>인라인되지 않은(non-inlined) <code>ComponentRegistry</code> 메서드를 공개 API로 만듭니다. (<a href="https://github.com/coil-kt/coil/pull/925" target="_blank" rel="noreferrer">#925</a>)</li><li><code>accompanist-drawablepainter</code>에 의존하고 Coil의 사용자 지정 <code>DrawablePainter</code> 구현을 제거합니다. (<a href="https://github.com/coil-kt/coil/pull/845" target="_blank" rel="noreferrer">#845</a>)</li><li>디슈거링(desugaring) 문제에 대비하기 위해 Java 8 메서드 사용을 제거합니다. (<a href="https://github.com/coil-kt/coil/pull/924" target="_blank" rel="noreferrer">#924</a>)</li><li><code>ImagePainter.ExecuteCallback</code>을 안정적인 API로 승격합니다. (<a href="https://github.com/coil-kt/coil/pull/927" target="_blank" rel="noreferrer">#927</a>)</li><li>컴파일 SDK를 31로 업데이트합니다.</li><li>Kotlin을 1.5.30으로 업데이트합니다.</li><li>Coroutines를 1.5.2로 업데이트합니다.</li><li>Compose를 1.0.3으로 업데이트합니다.</li></ul><h2 id="_1-3-2-2021년-8월-4일" tabindex="-1">[1.3.2] - 2021년 8월 4일 <a class="header-anchor" href="#_1-3-2-2021년-8월-4일" aria-label="Permalink to &quot;[1.3.2] - 2021년 8월 4일&quot;">​</a></h2><ul><li><code>coil-compose</code>는 이제 <code>compose.foundation</code> 대신 <code>compose.ui</code>에 의존합니다. <ul><li><code>compose.ui</code>는 <code>compose.foundation</code>의 하위 집합이므로 더 작은 의존성입니다.</li></ul></li><li>Jetpack Compose를 1.0.1으로 업데이트합니다.</li><li>Kotlin을 1.5.21으로 업데이트합니다.</li><li>Coroutines를 1.5.1으로 업데이트합니다.</li><li><code>androidx.exifinterface:exifinterface</code>를 1.3.3으로 업데이트합니다.</li></ul><h2 id="_1-3-1-2021년-7월-28일" tabindex="-1">[1.3.1] - 2021년 7월 28일 <a class="header-anchor" href="#_1-3-1-2021년-7월-28일" aria-label="Permalink to &quot;[1.3.1] - 2021년 7월 28일&quot;">​</a></h2><ul><li>Jetpack Compose를 <code>1.0.0</code>으로 업데이트합니다. Compose 팀의 <a href="https://android-developers.googleblog.com/2021/07/jetpack-compose-announcement.html" target="_blank" rel="noreferrer">안정 버전 릴리스</a>에 큰 축하를 보냅니다!</li><li><code>androidx.appcompat:appcompat-resources</code>를 1.3.1으로 업데이트합니다.</li></ul><h2 id="_1-3-0-2021년-7월-10일" tabindex="-1">[1.3.0] - 2021년 7월 10일 <a class="header-anchor" href="#_1-3-0-2021년-7월-10일" aria-label="Permalink to &quot;[1.3.0] - 2021년 7월 10일&quot;">​</a></h2><ul><li><strong>신규</strong>: <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> 지원을 추가합니다. 이는 <a href="https://github.com/google/accompanist/" target="_blank" rel="noreferrer">Accompanist</a>의 Coil 통합을 기반으로 하지만, 여러 변경 사항이 있습니다. 자세한 내용은 <a href="/ko/coil/compose/">문서</a>를 참조하세요.</li><li><code>Transformation</code>에 대한 자동 비트맵 변환을 활성화/비활성화하기 위해 <code>allowConversionToBitmap</code>을 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/775" target="_blank" rel="noreferrer">#775</a>)</li><li>임계값 미만일 경우 GIF의 프레임 지연을 재작성하는 것을 활성화하기 위해 <code>ImageDecoderDecoder</code> 및 <code>GifDecoder</code>에 <code>enforceMinimumFrameDelay</code>를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/783" target="_blank" rel="noreferrer">#783</a>) <ul><li>이는 기본적으로 비활성화되어 있지만, 향후 릴리스에서는 기본적으로 활성화될 예정입니다.</li></ul></li><li><code>ImageLoader</code>의 내부 네트워크 옵저버를 활성화/비활성화하는 지원을 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/741" target="_blank" rel="noreferrer">#741</a>)</li><li><code>BitmapFactoryDecoder</code>에 의해 디코딩된 비트맵의 밀도 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/776" target="_blank" rel="noreferrer">#776</a>)</li><li>Licensee가 Coil의 라이선스 URL을 찾지 못하는 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/774" target="_blank" rel="noreferrer">#774</a>)</li><li><code>androidx.core:core-ktx</code>를 1.6.0으로 업데이트합니다.</li></ul><h2 id="_1-2-2-2021년-6월-4일" tabindex="-1">[1.2.2] - 2021년 6월 4일 <a class="header-anchor" href="#_1-2-2-2021년-6월-4일" aria-label="Permalink to &quot;[1.2.2] - 2021년 6월 4일&quot;">​</a></h2><ul><li>공유 상태를 가진 드로어블을 비트맵으로 변환하는 동안 경쟁 조건이 발생하는 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/771" target="_blank" rel="noreferrer">#771</a>)</li><li><code>ImageLoader.Builder.fallback</code>이 <code>fallback</code> 드로어블 대신 <code>error</code> 드로어블을 설정하는 문제를 수정합니다.</li><li><code>ResourceUriFetcher</code>가 잘못된 데이터 소스를 반환하는 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/770" target="_blank" rel="noreferrer">#770</a>)</li><li>API 26 및 27에서 사용 가능한 파일 디스크립터가 없는 경우 로그 확인 문제를 수정합니다.</li><li>플랫폼 벡터 드로어블 지원에 대한 잘못된 버전 확인 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/751" target="_blank" rel="noreferrer">#751</a>)</li><li>Kotlin (1.5.10)을 업데이트합니다.</li><li>Coroutines (1.5.0)을 업데이트합니다.</li><li><code>androidx.appcompat:appcompat-resources</code>를 1.3.0으로 업데이트합니다.</li><li><code>androidx.core:core-ktx</code>를 1.5.0으로 업데이트합니다.</li></ul><h2 id="_1-2-1-2021년-4월-27일" tabindex="-1">[1.2.1] - 2021년 4월 27일 <a class="header-anchor" href="#_1-2-1-2021년-4월-27일" aria-label="Permalink to &quot;[1.2.1] - 2021년 4월 27일&quot;">​</a></h2><ul><li>수정: <code>VideoFrameUriFetcher</code>가 http/https URI를 처리하려는 시도 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/734" target="_blank" rel="noreferrer">#734</a>)</li></ul><h2 id="_1-2-0-2021년-4월-12일" tabindex="-1">[1.2.0] - 2021년 4월 12일 <a class="header-anchor" href="#_1-2-0-2021년-4월-12일" aria-label="Permalink to &quot;[1.2.0] - 2021년 4월 12일&quot;">​</a></h2><ul><li><strong>중요</strong>: <code>SvgDecoder</code>에서 SVG의 뷰 경계를 사용하여 가로세로 비율을 계산합니다. (<a href="https://github.com/coil-kt/coil/pull/688" target="_blank" rel="noreferrer">#688</a>) <ul><li>이전에는 <code>SvgDecoder</code>가 SVG의 <code>width</code>/<code>height</code> 요소를 사용하여 가로세로 비율을 결정했지만, 이는 SVG 사양을 올바르게 따르지 않습니다.</li><li>이전 동작으로 되돌리려면 <code>SvgDecoder</code>를 생성할 때 <code>useViewBoundsAsIntrinsicSize = false</code>를 설정하세요.</li></ul></li><li><strong>신규</strong>: 모든 소스에서 비디오 프레임 디코딩을 지원하기 위해 <code>VideoFrameDecoder</code>를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/689" target="_blank" rel="noreferrer">#689</a>)</li><li><strong>신규</strong>: MIME 유형만 사용하는 대신 소스의 내용을 사용하여 자동 SVG 감지를 지원합니다. (<a href="https://github.com/coil-kt/coil/pull/654" target="_blank" rel="noreferrer">#654</a>)</li><li><strong>신규</strong>: <code>ImageLoader.newBuilder()</code>를 사용하여 리소스 공유를 지원합니다. (<a href="https://github.com/coil-kt/coil/pull/653" target="_blank" rel="noreferrer">#653</a>) <ul><li>중요하게도, 이는 <code>ImageLoader</code> 인스턴스 간에 메모리 캐시를 공유할 수 있도록 합니다.</li></ul></li><li><strong>신규</strong>: <code>AnimatedTransformation</code>을 사용하여 애니메이션 이미지 변환을 지원합니다. (<a href="https://github.com/coil-kt/coil/pull/659" target="_blank" rel="noreferrer">#659</a>)</li><li><strong>신규</strong>: 애니메이션 드로어블에 대한 시작/끝 콜백 지원을 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/676" target="_blank" rel="noreferrer">#676</a>)</li></ul><hr><ul><li>HEIF/HEIC 파일의 EXIF 데이터 파싱 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/664" target="_blank" rel="noreferrer">#664</a>)</li><li>비트맵 풀링이 비활성화된 경우 <code>EmptyBitmapPool</code> 구현을 사용하지 않는 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/638" target="_blank" rel="noreferrer">#638</a>) <ul><li>이 수정이 없으면 비트맵 풀링은 여전히 제대로 비활성화되었지만, 더 무거운 <code>BitmapPool</code> 구현을 사용했습니다.</li></ul></li><li><code>MovieDrawable.getOpacity</code>가 잘못 투명을 반환하는 경우를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/682" target="_blank" rel="noreferrer">#682</a>)</li><li>기본 임시 디렉토리가 존재하지 않는 경우에 대비합니다. (<a href="https://github.com/coil-kt/coil/pull/683" target="_blank" rel="noreferrer">#683</a>)</li></ul><hr><ul><li>JVM IR 백엔드를 사용하여 빌드합니다. (<a href="https://github.com/coil-kt/coil/pull/670" target="_blank" rel="noreferrer">#670</a>)</li><li>Kotlin (1.4.32)을 업데이트합니다.</li><li>Coroutines (1.4.3)을 업데이트합니다.</li><li>OkHttp (3.12.13)을 업데이트합니다.</li><li><code>androidx.lifecycle:lifecycle-common-java8</code>을 2.3.1으로 업데이트합니다.</li></ul><h2 id="_1-1-1-2021년-1월-11일" tabindex="-1">[1.1.1] - 2021년 1월 11일 <a class="header-anchor" href="#_1-1-1-2021년-1월-11일" aria-label="Permalink to &quot;[1.1.1] - 2021년 1월 11일&quot;">​</a></h2><ul><li><code>ViewSizeResolver.size</code>가 코루틴을 두 번 이상 재개하여 <code>IllegalStateException</code>을 발생시킬 수 있는 경우를 수정합니다.</li><li>메인 스레드에서 호출될 때 <code>HttpFetcher</code>가 영원히 블로킹하는 문제를 수정합니다. <ul><li><code>ImageRequest.dispatcher(Dispatchers.Main.immediate)</code>를 사용하여 메인 스레드에서 강제로 실행되는 요청은 <code>ImageRequest.networkCachePolicy</code>가 <code>CachePolicy.DISABLED</code> 또는 <code>CachePolicy.WRITE_ONLY</code>로 설정되지 않은 한 <code>NetworkOnMainThreadException</code>과 함께 실패합니다.</li></ul></li><li>비디오에 회전 메타데이터가 있는 경우 <code>VideoFrameFetcher</code>에서 비디오 프레임을 회전시킵니다.</li><li>Kotlin (1.4.21)을 업데이트합니다.</li><li>Coroutines (1.4.2)를 업데이트합니다.</li><li>Okio (2.10.0)을 업데이트합니다.</li><li><code>androidx.exifinterface:exifinterface</code> (1.3.2)를 업데이트합니다.</li></ul><h2 id="_1-1-0-2020년-11월-24일" tabindex="-1">[1.1.0] - 2020년 11월 24일 <a class="header-anchor" href="#_1-1-0-2020년-11월-24일" aria-label="Permalink to &quot;[1.1.0] - 2020년 11월 24일&quot;">​</a></h2><ul><li><strong>중요</strong>: <code>CENTER</code> 및 <code>MATRIX</code> <code>ImageView</code> 스케일 유형을 <code>OriginalSize</code>로 해결하도록 변경합니다. (<a href="https://github.com/coil-kt/coil/pull/587" target="_blank" rel="noreferrer">#587</a>) <ul><li>이 변경은 요청의 크기가 명시적으로 지정되지 않은 경우 암시적 크기 해결 알고리즘에만 영향을 미칩니다.</li><li>이 변경은 이미지 요청의 시각적 결과가 <code>ImageView.setImageResource</code>/<code>ImageView.setImageURI</code>와 일관되도록 보장하기 위해 이루어졌습니다. 이전 동작으로 되돌리려면 요청을 생성할 때 <code>ViewSizeResolver</code>를 설정하세요.</li></ul></li><li><strong>중요</strong>: 뷰의 레이아웃 파라미터가 <code>WRAP_CONTENT</code>인 경우 <code>ViewSizeResolver</code>에서 디스플레이 크기를 반환합니다. (<a href="https://github.com/coil-kt/coil/pull/562" target="_blank" rel="noreferrer">#562</a>) <ul><li>이전에는 뷰가 완전히 레이아웃된 경우에만 디스플레이 크기를 반환했습니다. 이 변경으로 일반적인 동작이 더 일관되고 직관적입니다.</li></ul></li><li>알파 사전 곱셈을 제어하는 기능을 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/569" target="_blank" rel="noreferrer">#569</a>)</li><li><code>CrossfadeDrawable</code>에서 정확한 고유 크기를 선호하는 것을 지원합니다. (<a href="https://github.com/coil-kt/coil/pull/585" target="_blank" rel="noreferrer">#585</a>)</li><li>버전을 포함한 전체 GIF 헤더를 확인합니다. (<a href="https://github.com/coil-kt/coil/pull/564" target="_blank" rel="noreferrer">#564</a>)</li><li>비어 있는 비트맵 풀 구현을 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/561" target="_blank" rel="noreferrer">#561</a>)</li><li><code>EventListener.Factory</code>를 함수형 인터페이스로 만듭니다. (<a href="https://github.com/coil-kt/coil/pull/575" target="_blank" rel="noreferrer">#575</a>)</li><li><code>EventListener</code>를 안정화합니다. (<a href="https://github.com/coil-kt/coil/pull/574" target="_blank" rel="noreferrer">#574</a>)</li><li><code>ImageRequest.Builder.placeholderMemoryCacheKey</code>에 <code>String</code> 오버로드를 추가합니다.</li><li><code>ViewSizeResolver</code> 생성자에 <code>@JvmOverloads</code>를 추가합니다.</li><li>수정: <code>CrossfadeDrawable</code>에서 시작/끝 드로어블을 변경합니다. (<a href="https://github.com/coil-kt/coil/pull/572" target="_blank" rel="noreferrer">#572</a>)</li><li>수정: 두 번째 로드 시 GIF가 재생되지 않는 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/534" target="_blank" rel="noreferrer">#577</a>)</li><li>Kotlin (1.4.20)을 업데이트하고 <code>kotlin-parcelize</code> 플러그인으로 마이그레이션합니다.</li><li>Coroutines (1.4.1)을 업데이트합니다.</li></ul><h2 id="_1-0-0-2020년-10월-22일" tabindex="-1">[1.0.0] - 2020년 10월 22일 <a class="header-anchor" href="#_1-0-0-2020년-10월-22일" aria-label="Permalink to &quot;[1.0.0] - 2020년 10월 22일&quot;">​</a></h2><p><code>0.13.0</code> 이후 변경 사항:</p><ul><li><code>Context.imageLoader</code> 확장 함수를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/534" target="_blank" rel="noreferrer">#534</a>)</li><li><code>ImageLoader.executeBlocking</code> 확장 함수를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/537" target="_blank" rel="noreferrer">#537</a>)</li><li>이전 싱글턴 이미지 로더가 교체된 경우 종료되지 않도록 합니다. (<a href="https://github.com/coil-kt/coil/pull/533" target="_blank" rel="noreferrer">#533</a>)</li></ul><p><code>1.0.0-rc3</code> 이후 변경 사항:</p><ul><li>수정: <code>ActivityManager</code> 누락/잘못된 경우에 대비합니다. (<a href="https://github.com/coil-kt/coil/pull/541" target="_blank" rel="noreferrer">#541</a>)</li><li>수정: OkHttp가 성공하지 못한 응답을 캐시할 수 있도록 허용합니다. (<a href="https://github.com/coil-kt/coil/pull/551" target="_blank" rel="noreferrer">#551</a>)</li><li>Kotlin을 1.4.10으로 업데이트합니다.</li><li>Okio를 2.9.0으로 업데이트합니다.</li><li><code>androidx.exifinterface:exifinterface</code>를 1.3.1으로 업데이트합니다.</li></ul><h2 id="_1-0-0-rc3-2020년-9월-21일" tabindex="-1">[1.0.0-rc3] - 2020년 9월 21일 <a class="header-anchor" href="#_1-0-0-rc3-2020년-9월-21일" aria-label="Permalink to &quot;[1.0.0-rc3] - 2020년 9월 21일&quot;">​</a></h2><ul><li>불안정성으로 인해 <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer"><code>-Xjvm-default=all</code></a> 컴파일러 플래그 사용을 되돌립니다. <ul><li><strong>이는 이전 릴리스 후보 버전과의 소스 호환은 되지만 바이너리 호환은 되지 않는 변경입니다.</strong></li></ul></li><li><code>Context.imageLoader</code> 확장 함수를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/534" target="_blank" rel="noreferrer">#534</a>)</li><li><code>ImageLoader.executeBlocking</code> 확장 함수를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/537" target="_blank" rel="noreferrer">#537</a>)</li><li>이전 싱글턴 이미지 로더가 교체된 경우 종료되지 않도록 합니다. (<a href="https://github.com/coil-kt/coil/pull/533" target="_blank" rel="noreferrer">#533</a>)</li><li>AndroidX 의존성을 업데이트합니다: <ul><li><code>androidx.exifinterface:exifinterface</code> -&gt; 1.3.0</li></ul></li></ul><h2 id="_1-0-0-rc2-2020년-9월-3일" tabindex="-1">[1.0.0-rc2] - 2020년 9월 3일 <a class="header-anchor" href="#_1-0-0-rc2-2020년-9월-3일" aria-label="Permalink to &quot;[1.0.0-rc2] - 2020년 9월 3일&quot;">​</a></h2><ul><li><strong>이 릴리스는 Kotlin 1.4.0 이상을 요구합니다.</strong></li><li><a href="#0130---september-3-2020">0.13.0</a>의 모든 변경 사항이 포함되어 있습니다.</li><li><code>stdlib-jdk8</code> 대신 기본 Kotlin <code>stdlib</code>에 의존합니다.</li></ul><h2 id="_0-13-0-2020년-9월-3일" tabindex="-1">[0.13.0] - 2020년 9월 3일 <a class="header-anchor" href="#_0-13-0-2020년-9월-3일" aria-label="Permalink to &quot;[0.13.0] - 2020년 9월 3일&quot;">​</a></h2><ul><li><strong>중요</strong>: 기본적으로 인터셉터 체인을 메인 스레드에서 실행합니다. (<a href="https://github.com/coil-kt/coil/pull/513" target="_blank" rel="noreferrer">#513</a>) <ul><li>이는 <code>0.11.0</code> 이하 버전에서 메모리 캐시가 메인 스레드에서 동기적으로 확인되던 동작을 대부분 복원합니다.</li><li><code>ImageRequest.dispatcher</code>에서 메모리 캐시를 확인하던 <code>0.12.0</code>과 동일한 동작으로 되돌리려면 <code>ImageLoader.Builder.launchInterceptorChainOnMainThread(false)</code>를 설정하세요.</li><li>자세한 내용은 <a href="https://coil-kt.github.io/coil/api/coil-core/coil3/-image-loader/-builder/launch-interceptor-chain-on-main-thread/" target="_blank" rel="noreferrer"><code>launchInterceptorChainOnMainThread</code></a>를 참조하세요.</li></ul></li></ul><hr><ul><li>수정: 분리된 프래그먼트의 <code>ViewTarget</code>에서 요청이 시작될 때 잠재적인 메모리 누수 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/518" target="_blank" rel="noreferrer">#518</a>)</li><li>수정: 리소스 URI를 로드하기 위해 <code>ImageRequest.context</code>를 사용합니다. (<a href="https://github.com/coil-kt/coil/pull/517" target="_blank" rel="noreferrer">#517</a>)</li><li>수정: 후속 요청이 디스크 캐시에 저장되지 않는 원인이 될 수 있는 경쟁 조건 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/510" target="_blank" rel="noreferrer">#510</a>)</li><li>수정: API 18에서 <code>blockCountLong</code> 및 <code>blockSizeLong</code>을 사용합니다.</li></ul><hr><ul><li><code>ImageLoaderFactory</code>를 함수형 인터페이스로 만듭니다.</li><li><code>ImageLoader.Builder.addLastModifiedToFileCacheKey</code>를 추가하여 <code>File</code>에서 로드된 이미지의 메모리 캐시 키에 최종 수정 타임스탬프를 추가/제거할 수 있도록 합니다.</li></ul><hr><ul><li>Kotlin을 1.4.0으로 업데이트합니다.</li><li>Coroutines를 1.3.9로 업데이트합니다.</li><li>Okio를 2.8.0으로 업데이트합니다.</li></ul><h2 id="_1-0-0-rc1-2020년-8월-18일" tabindex="-1">[1.0.0-rc1] - 2020년 8월 18일 <a class="header-anchor" href="#_1-0-0-rc1-2020년-8월-18일" aria-label="Permalink to &quot;[1.0.0-rc1] - 2020년 8월 18일&quot;">​</a></h2><ul><li><strong>이 릴리스는 Kotlin 1.4.0 이상을 요구합니다.</strong></li><li>Kotlin을 1.4.0으로 업데이트하고 <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer"><code>-Xjvm-default=all</code></a>을 활성화합니다. <ul><li><strong><a href="/ko/coil/faq/">여기</a>에서 빌드 파일에 <code>-Xjvm-default=all</code>을 활성화하는 방법을 참조하세요.</strong></li><li>이는 기본 Kotlin 인터페이스 메서드에 대해 Java 8 기본 메서드를 생성합니다.</li></ul></li><li>0.12.0에 있는 모든 지원 중단된 메서드를 제거합니다.</li><li>Coroutines를 1.3.9로 업데이트합니다.</li></ul><h2 id="_0-12-0-2020년-8월-18일" tabindex="-1">[0.12.0] - 2020년 8월 18일 <a class="header-anchor" href="#_0-12-0-2020년-8월-18일" aria-label="Permalink to &quot;[0.12.0] - 2020년 8월 18일&quot;">​</a></h2><ul><li><strong>Breaking</strong>: <code>LoadRequest</code> 및 <code>GetRequest</code>가 <code>ImageRequest</code>로 대체되었습니다: <ul><li><code>ImageLoader.execute(LoadRequest)</code> -&gt; <code>ImageLoader.enqueue(ImageRequest)</code></li><li><code>ImageLoader.execute(GetRequest)</code> -&gt; <code>ImageLoader.execute(ImageRequest)</code></li><li><code>ImageRequest</code>는 <code>equals</code>/<code>hashCode</code>를 구현합니다.</li></ul></li><li><strong>Breaking</strong>: 여러 클래스 이름이 변경되거나 패키지가 변경되었습니다: <ul><li><code>coil.request.RequestResult</code> -&gt; <code>coil.request.ImageResult</code></li><li><code>coil.request.RequestDisposable</code> -&gt; <code>coil.request.Disposable</code></li><li><code>coil.bitmappool.BitmapPool</code> -&gt; <code>coil.bitmap.BitmapPool</code></li><li><code>coil.DefaultRequestOptions</code> -&gt; <code>coil.request.DefaultRequestOptions</code></li></ul></li><li><strong>Breaking</strong>: <a href="https://github.com/coil-kt/coil/blob/f52addd039f0195b66f93cb0f1cad59b0832f784/coil-core/src/main/java/coil/collection/SparseIntArraySet.kt" target="_blank" rel="noreferrer"><code>SparseIntArraySet</code></a>이 공개 API에서 제거되었습니다.</li><li><strong>Breaking</strong>: <code>TransitionTarget</code>는 더 이상 <code>ViewTarget</code>를 구현하지 않습니다.</li><li><strong>Breaking</strong>: <code>ImageRequest.Listener.onSuccess</code>의 서명이 <code>DataSource</code> 대신 <code>ImageResult.Metadata</code>를 반환하도록 변경되었습니다.</li><li><strong>Breaking</strong>: <code>LoadRequest.aliasKeys</code> 지원을 제거합니다. 이 API는 메모리 캐시에 대한 직접 읽기/쓰기 접근으로 더 잘 처리됩니다.</li></ul><hr><ul><li><strong>중요</strong>: 메모리 캐시의 값은 더 이상 동기적으로 해결되지 않습니다 (메인 스레드에서 호출된 경우). <ul><li>이 변경은 백그라운드 디스패처에서 <code>Interceptor</code>를 실행하는 것을 지원하기 위해서도 필요했습니다.</li><li>이 변경은 또한 메인 스레드에서 더 많은 작업을 이동하여 성능을 향상시킵니다.</li></ul></li><li><strong>중요</strong>: <code>Mappers</code>는 이제 백그라운드 디스패처에서 실행됩니다. 부작용으로 자동 비트맵 샘플링은 더 이상 <strong>자동으로</strong> 지원되지 않습니다. 동일한 효과를 얻으려면 이전 요청의 <code>MemoryCache.Key</code>를 후속 요청의 <code>placeholderMemoryCacheKey</code>로 사용하세요. <a href="/ko/coil/recipes/">예시는 여기</a>를 참조하세요. <ul><li><code>placeholderMemoryCacheKey</code> API는 서로 다른 데이터(예: 작거나 큰 이미지에 대한 다른 URL)를 가진 두 이미지 요청을 &quot;연결&quot;할 수 있는 더 많은 자유를 제공합니다.</li></ul></li><li><strong>중요</strong>: Coil의 <code>ImageView</code> 확장 함수가 <code>coil.api</code> 패키지에서 <code>coil</code> 패키지로 이동했습니다. <ul><li><code>import coil.api.load</code> -&gt; <code>import coil.load</code>로 리팩터링하려면 찾기 및 바꾸기를 사용하세요. 안타깝게도 Kotlin의 <code>ReplaceWith</code> 기능을 사용하여 임포트를 대체하는 것은 불가능합니다.</li></ul></li><li><strong>중요</strong>: 드로어블이 동일한 이미지가 아닌 경우 표준 교차 페이드(crossfade)를 사용합니다.</li><li><strong>중요</strong>: API 24 이상에서는 변경 불가능한 비트맵을 선호합니다.</li><li><strong>중요</strong>: <code>MeasuredMapper</code>는 새로운 <code>Interceptor</code> 인터페이스를 선호하여 지원 중단되었습니다. <code>MeasuredMapper</code>를 <code>Interceptor</code>로 변환하는 방법에 대한 예시는 <a href="https://gist.github.com/colinrtwhite/90267704091467451e46b21b95154299" target="_blank" rel="noreferrer">여기</a>를 참조하세요. <ul><li><code>Interceptor</code>는 훨씬 덜 제한적인 API로, 더 넓은 범위의 사용자 지정 로직을 허용합니다.</li></ul></li><li><strong>중요</strong>: <code>ImageRequest.data</code>는 이제 null이 아닙니다. 데이터를 설정하지 않고 <code>ImageRequest</code>를 생성하면 <code>NullRequestData</code>를 데이터로 반환합니다.</li></ul><hr><ul><li><strong>신규</strong>: <code>ImageLoader</code>의 <code>MemoryCache</code>에 대한 직접 읽기/쓰기 접근 지원을 추가합니다. 자세한 내용은 <a href="/ko/coil/getting_started/">문서</a>를 참조하세요.</li><li><strong>신규</strong>: <code>Interceptor</code> 지원을 추가합니다. 자세한 내용은 <a href="/ko/coil/image_pipeline/">문서</a>를 참조하세요. Coil의 <code>Interceptor</code> 설계는 <a href="https://github.com/square/okhttp" target="_blank" rel="noreferrer">OkHttp</a>에서 크게 영감을 받았습니다!</li><li><strong>신규</strong>: <code>ImageLoader.Builder.bitmapPoolingEnabled</code>를 사용하여 비트맵 풀링을 활성화/비활성화하는 기능을 추가합니다. <ul><li>비트맵 풀링은 API 23 이하에서 가장 효과적이지만, API 24 이상에서도 여전히 유용할 수 있습니다 (적극적으로 <code>Bitmap.recycle</code>을 호출하여).</li></ul></li><li><strong>신규</strong>: 디코딩 중 스레드 인터럽션 지원을 추가합니다.</li></ul><hr><ul><li>콘텐츠 유형 헤더에서 여러 세그먼트 파싱 문제를 수정합니다.</li><li>비트맵 참조 카운팅을 재작업하여 더 강력하게 만듭니다.</li><li>API 19 미만 기기에서 WebP 디코딩 문제를 수정합니다.</li><li><code>EventListener</code> API에서 <code>FetchResult</code> 및 <code>DecodeResult</code>를 노출합니다.</li></ul><hr><ul><li>SDK 30으로 컴파일합니다.</li><li>Coroutines를 1.3.8으로 업데이트합니다.</li><li>OkHttp를 3.12.12로 업데이트합니다.</li><li>Okio를 2.7.0으로 업데이트합니다.</li><li>AndroidX 의존성을 업데이트합니다: <ul><li><code>androidx.appcompat:appcompat-resources</code> -&gt; 1.2.0</li><li><code>androidx.core:core-ktx</code> -&gt; 1.3.1</li></ul></li></ul><h2 id="_0-11-0-2020년-5월-14일" tabindex="-1">[0.11.0] - 2020년 5월 14일 <a class="header-anchor" href="#_0-11-0-2020년-5월-14일" aria-label="Permalink to &quot;[0.11.0] - 2020년 5월 14일&quot;">​</a></h2><ul><li><strong>Breaking</strong>: <strong>이 버전은 기존의 모든 지원 중단된 함수를 제거합니다.</strong><ul><li>이를 통해 Coil의 <code>ContentProvider</code>를 제거하여 앱 시작 시 어떤 코드도 실행하지 않도록 할 수 있습니다.</li></ul></li><li><strong>Breaking</strong>: <code>SparseIntArraySet.size</code>를 <code>val</code>로 전환합니다. (<a href="https://github.com/coil-kt/coil/pull/380" target="_blank" rel="noreferrer">#380</a>)</li><li><strong>Breaking</strong>: <code>Parameters.count()</code>를 확장 함수로 이동합니다. (<a href="https://github.com/coil-kt/coil/pull/403" target="_blank" rel="noreferrer">#403</a>)</li><li><strong>Breaking</strong>: <code>BitmapPool.maxSize</code>를 Int로 만듭니다. (<a href="https://github.com/coil-kt/coil/pull/404" target="_blank" rel="noreferrer">#404</a>)</li></ul><hr><ul><li><strong>중요</strong>: <code>ImageLoader.shutdown()</code>을 선택적으로 만듭니다 (<code>OkHttpClient</code>와 유사). (<a href="https://github.com/coil-kt/coil/pull/385" target="_blank" rel="noreferrer">#385</a>)</li></ul><hr><ul><li>수정: AGP 4.1 호환성 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/386" target="_blank" rel="noreferrer">#386</a>)</li><li>수정: <code>GONE</code> 뷰 측정 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/397" target="_blank" rel="noreferrer">#397</a>)</li></ul><hr><ul><li>기본 메모리 캐시 크기를 20%로 줄입니다. (<a href="https://github.com/coil-kt/coil/pull/390" target="_blank" rel="noreferrer">#390</a>) <ul><li>기존 동작으로 되돌리려면 <code>ImageLoaderBuilder.availableMemoryPercentage(0.25)</code>를 설정하세요.</li></ul></li><li>Coroutines를 1.3.6으로 업데이트합니다.</li><li>OkHttp를 3.12.11으로 업데이트합니다.</li></ul><h2 id="_0-10-1-2020년-4월-26일" tabindex="-1">[0.10.1] - 2020년 4월 26일 <a class="header-anchor" href="#_0-10-1-2020년-4월-26일" aria-label="Permalink to &quot;[0.10.1] - 2020년 4월 26일&quot;">​</a></h2><ul><li>API 23 이하에서 대용량 PNG 디코딩 시 OOM(메모리 부족) 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/372" target="_blank" rel="noreferrer">#372</a>). <ul><li>이는 PNG 파일의 EXIF 방향 디코딩을 비활성화합니다. PNG EXIF 방향은 거의 사용되지 않으며, PNG EXIF 데이터를 읽으려면 (비어 있더라도) 전체 파일을 메모리로 버퍼링해야 하므로 성능에 좋지 않습니다.</li></ul></li><li><code>SparseIntArraySet</code>의 사소한 Java 호환성 개선.</li></ul><hr><ul><li>Okio를 2.6.0으로 업데이트합니다.</li></ul><h2 id="_0-10-0-2020년-4월-20일" tabindex="-1">[0.10.0] - 2020년 4월 20일 <a class="header-anchor" href="#_0-10-0-2020년-4월-20일" aria-label="Permalink to &quot;[0.10.0] - 2020년 4월 20일&quot;">​</a></h2><h3 id="주요-내용" tabindex="-1">주요 내용 <a class="header-anchor" href="#주요-내용" aria-label="Permalink to &quot;주요 내용&quot;">​</a></h3><ul><li><p><strong>이 버전은 대부분의 DSL API를 비권장하고 빌더를 직접 사용하는 것을 선호합니다.</strong> 변경 사항은 다음과 같습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.9.5 (이전)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImageLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bitmapPoolPercentage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> disposable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(imageView)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drawable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.10.0 (신규)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bitmapPoolPercentage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoadRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(imageView)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> disposable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GetRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drawable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request).drawable</span></span></code></pre></div><ul><li><code>io.coil-kt:coil</code> 아티팩트를 사용하는 경우 <code>Coil.execute(request)</code>를 호출하여 싱글턴 <code>ImageLoader</code>로 요청을 실행할 수 있습니다.</li></ul></li><li><p><strong><code>ImageLoader</code>는 이제 약한 참조 메모리 캐시를 가집니다.</strong> 이 캐시는 강한 참조 메모리 캐시에서 제거된 이미지에 대한 약한 참조를 추적합니다.</p><ul><li>이는 이미지에 대한 강한 참조가 여전히 존재하는 경우 <code>ImageLoader</code>의 메모리 캐시에서 이미지가 항상 반환됨을 의미합니다.</li><li>일반적으로 이는 메모리 캐시를 훨씬 더 예측 가능하게 만들고 적중률을 높여야 합니다.</li><li>이 동작은 <code>ImageLoaderBuilder.trackWeakReferences</code>로 활성화/비활성화할 수 있습니다.</li></ul></li><li><p>비디오 파일에서 특정 프레임을 디코딩하기 위한 새로운 아티팩트 **<code>io.coil-kt:coil-video</code>**를 추가합니다. <a href="/ko/coil/videos/">자세한 내용은 여기</a>를 참조하세요.</p></li><li><p>메트릭 추적을 위한 새로운 <a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/main/java/coil/EventListener.kt" target="_blank" rel="noreferrer">EventListener</a> API를 추가합니다.</p></li><li><p>싱글턴 초기화를 단순화하기 위해 <code>Application</code>에서 구현될 수 있는 <a href="https://github.com/coil-kt/coil/blob/main/coil/src/main/java/coil/ImageLoaderFactory.kt" target="_blank" rel="noreferrer">ImageLoaderFactory</a>를 추가합니다.</p></li></ul><hr><h3 id="전체-릴리스-노트" tabindex="-1">전체 릴리스 노트 <a class="header-anchor" href="#전체-릴리스-노트" aria-label="Permalink to &quot;전체 릴리스 노트&quot;">​</a></h3><ul><li><strong>중요</strong>: 빌더 구문을 선호하여 DSL 구문을 비권장합니다. (<a href="https://github.com/coil-kt/coil/pull/267" target="_blank" rel="noreferrer">#267</a>)</li><li><strong>중요</strong>: <code>Coil</code> 및 <code>ImageLoader</code> 확장 함수를 비권장합니다. (<a href="https://github.com/coil-kt/coil/pull/322" target="_blank" rel="noreferrer">#322</a>)</li><li><strong>Breaking</strong>: <code>ImageLoader.execute(GetRequest)</code>에서 봉인된(sealed) <code>RequestResult</code> 타입을 반환합니다. (<a href="https://github.com/coil-kt/coil/pull/349" target="_blank" rel="noreferrer">#349</a>)</li><li><strong>Breaking</strong>: <code>ExperimentalCoil</code>의 이름을 <code>ExperimentalCoilApi</code>로 변경합니다. <code>@Experimental</code>에서 <code>@RequiresOptIn</code>으로 마이그레이션합니다. (<a href="https://github.com/coil-kt/coil/pull/306" target="_blank" rel="noreferrer">#306</a>)</li><li><strong>Breaking</strong>: <code>CoilLogger</code>를 <code>Logger</code> 인터페이스로 대체합니다. (<a href="https://github.com/coil-kt/coil/pull/316" target="_blank" rel="noreferrer">#316</a>)</li><li><strong>Breaking</strong>: <code>destWidth</code>/<code>destHeight</code> 이름을 <code>dstWidth</code>/<code>dstHeight</code>로 변경합니다. (<a href="https://github.com/coil-kt/coil/pull/275" target="_blank" rel="noreferrer">#275</a>)</li><li><strong>Breaking</strong>: <code>MovieDrawable</code>의 생성자 파라미터를 재정렬합니다. (<a href="https://github.com/coil-kt/coil/pull/272" target="_blank" rel="noreferrer">#272</a>)</li><li><strong>Breaking</strong>: <code>Request.Listener</code>의 메서드는 이제 데이터만 받는 대신 전체 <code>Request</code> 객체를 받습니다.</li><li><strong>Breaking</strong>: <code>GetRequestBuilder</code>는 이제 생성자에 <code>Context</code>를 요구합니다.</li><li><strong>Breaking</strong>: <code>Request</code>의 여러 속성이 이제 nullable입니다.</li><li><strong>동작 변경</strong>: 기본적으로 캐시 키에 파라미터 값을 포함합니다. (<a href="https://github.com/coil-kt/coil/pull/319" target="_blank" rel="noreferrer">#319</a>)</li><li><strong>동작 변경</strong>: <code>Request.Listener.onStart()</code> 타이밍을 <code>Target.onStart()</code> 직후에 호출되도록 약간 조정합니다. (<a href="https://github.com/coil-kt/coil/pull/348" target="_blank" rel="noreferrer">#348</a>)</li></ul><hr><ul><li><strong>신규</strong>: <code>WeakMemoryCache</code> 구현을 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/295" target="_blank" rel="noreferrer">#295</a>)</li><li><strong>신규</strong>: 비디오 프레임 디코딩을 지원하기 위해 <code>coil-video</code>를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/122" target="_blank" rel="noreferrer">#122</a>)</li><li><strong>신규</strong>: <a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/main/java/coil/EventListener.kt" target="_blank" rel="noreferrer"><code>EventListener</code></a>를 도입합니다. (<a href="https://github.com/coil-kt/coil/pull/314" target="_blank" rel="noreferrer">#314</a>)</li><li><strong>신규</strong>: <a href="https://github.com/coil-kt/coil/blob/main/coil/src/main/java/coil/ImageLoaderFactory.kt" target="_blank" rel="noreferrer"><code>ImageLoaderFactory</code></a>를 도입합니다. (<a href="https://github.com/coil-kt/coil/pull/311" target="_blank" rel="noreferrer">#311</a>)</li><li><strong>신규</strong>: Android 11에서 애니메이션 HEIF 이미지 시퀀스를 지원합니다. (<a href="https://github.com/coil-kt/coil/pull/297" target="_blank" rel="noreferrer">#297</a>)</li><li><strong>신규</strong>: Java 호환성을 개선합니다. (<a href="https://github.com/coil-kt/coil/pull/262" target="_blank" rel="noreferrer">#262</a>)</li><li><strong>신규</strong>: 기본 <code>CachePolicy</code> 설정을 지원합니다. (<a href="https://github.com/coil-kt/coil/pull/307" target="_blank" rel="noreferrer">#307</a>)</li><li><strong>신규</strong>: 기본 <code>Bitmap.Config</code> 설정을 지원합니다. (<a href="https://github.com/coil-kt/coil/pull/342" target="_blank" rel="noreferrer">#342</a>)</li><li><strong>신규</strong>: 단일 메모리 캐시 항목을 지우기 위해 <code>ImageLoader.invalidate(key)</code>를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/55" target="_blank" rel="noreferrer">#55</a>)</li><li><strong>신규</strong>: 캐시된 이미지가 재사용되지 않는 이유를 설명하는 디버그 로그를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/346" target="_blank" rel="noreferrer">#346</a>)</li><li><strong>신규</strong>: get 요청에 대한 <code>error</code> 및 <code>fallback</code> 드로어블을 지원합니다.</li></ul><hr><ul><li>수정: <code>Transformation</code>이 입력 비트맵 크기를 줄일 때 메모리 캐시 미스 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/357" target="_blank" rel="noreferrer">#357</a>)</li><li>수정: <code>BlurTransformation</code>에서 반지름이 RenderScript 최대값 미만인지 확인합니다. (<a href="https://github.com/coil-kt/coil/pull/291" target="_blank" rel="noreferrer">#291</a>)</li><li>수정: 고색상 심도 이미지 디코딩 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/358" target="_blank" rel="noreferrer">#358</a>)</li><li>수정: Android 11 이상에서 <code>ImageDecoderDecoder</code> 충돌 우회 문제를 비활성화합니다. (<a href="https://github.com/coil-kt/coil/pull/298" target="_blank" rel="noreferrer">#298</a>)</li><li>수정: API 23 미만에서 EXIF 데이터를 읽지 못하는 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/331" target="_blank" rel="noreferrer">#331</a>)</li><li>수정: Android R SDK와의 비호환성 문제를 수정합니다. (<a href="https://github.com/coil-kt/coil/pull/337" target="_blank" rel="noreferrer">#337</a>)</li><li>수정: <code>ImageView</code>에 일치하는 <code>SizeResolver</code>가 있는 경우에만 부정확한 크기를 활성화합니다. (<a href="https://github.com/coil-kt/coil/pull/344" target="_blank" rel="noreferrer">#344</a>)</li><li>수정: 캐시된 이미지가 요청된 크기에서 최대 1픽셀 오차를 가질 수 있도록 허용합니다. (<a href="https://coil-kt/coil/pull/360" target="_blank" rel="noreferrer">#360</a>)</li><li>수정: 뷰가 보이지 않으면 교차 페이드 전환을 건너뜁니다. (<a href="https://coil-kt/coil/pull/361" target="_blank" rel="noreferrer">#361</a>)</li></ul><hr><ul><li><code>CoilContentProvider</code>를 비권장합니다. (<a href="https://coil-kt/coil/pull/293" target="_blank" rel="noreferrer">#293</a>)</li><li>여러 <code>ImageLoader</code> 메서드에 <code>@MainThread</code> 주석을 추가합니다.</li><li>라이프사이클이 현재 시작된 경우 <code>LifecycleCoroutineDispatcher</code> 생성을 방지합니다. (<a href="https://coil-kt/coil/pull/356" target="_blank" rel="noreferrer">#356</a>)</li><li><code>OriginalSize.toString()</code>에 전체 패키지 이름을 사용합니다.</li><li>소프트웨어 비트맵 디코딩 시 사전 할당합니다. (<a href="https://coil-kt/coil/pull/354" target="_blank" rel="noreferrer">#354</a>)</li></ul><hr><ul><li>Kotlin을 1.3.72로 업데이트합니다.</li><li>Coroutines를 1.3.5로 업데이트합니다.</li><li>OkHttp를 3.12.10으로 업데이트합니다.</li><li>Okio를 2.5.0으로 업데이트합니다.</li><li>AndroidX 의존성을 업데이트합니다: <ul><li><code>androidx.exifinterface:exifinterface</code> -&gt; 1.2.0</li></ul></li></ul><h2 id="_0-9-5-2020년-2월-6일" tabindex="-1">[0.9.5] - 2020년 2월 6일 <a class="header-anchor" href="#_0-9-5-2020년-2월-6일" aria-label="Permalink to &quot;[0.9.5] - 2020년 2월 6일&quot;">​</a></h2><ul><li>수정: 하드웨어 가속 여부를 확인하기 전에 뷰가 첨부되었는지 확인합니다. 이는 하드웨어 비트맵을 요청할 때 메모리 캐시를 놓칠 수 있는 경우를 수정합니다.</li></ul><hr><ul><li>AndroidX 의존성을 업데이트합니다: <ul><li><code>androidx.core:core-ktx</code> -&gt; 1.2.0</li></ul></li></ul><h2 id="_0-9-4-2020년-2월-3일" tabindex="-1">[0.9.4] - 2020년 2월 3일 <a class="header-anchor" href="#_0-9-4-2020년-2월-3일" aria-label="Permalink to &quot;[0.9.4] - 2020년 2월 3일&quot;">​</a></h2><ul><li>수정: <code>ImageDecoderDecoder</code>에서 다운샘플링 시 가로세로 비율을 유지합니다. @zhanghai님께 감사드립니다.</li></ul><hr><ul><li>이전에는 비트맵이 요청에서 지정된 구성과 같거나 그보다 큰 구성인 한 메모리 캐시에서 반환되었습니다. 예를 들어, <code>ARGB_8888</code> 비트맵을 요청하면 <code>RGBA_F16</code> 비트맵이 메모리 캐시에서 반환될 수 있었습니다. 이제 캐시된 구성과 요청된 구성이 같아야 합니다.</li><li><code>CrossfadeDrawable</code> 및 <code>CrossfadeTransition</code>에서 <code>scale</code> 및 <code>durationMillis</code>를 공개 API로 만듭니다.</li></ul><h2 id="_0-9-3-2020년-2월-1일" tabindex="-1">[0.9.3] - 2020년 2월 1일 <a class="header-anchor" href="#_0-9-3-2020년-2월-1일" aria-label="Permalink to &quot;[0.9.3] - 2020년 2월 1일&quot;">​</a></h2><ul><li>수정: <code>ScaleDrawable</code> 내부의 자식 드로어블이 중앙에 위치하도록 이동합니다.</li><li>수정: GIF 및 SVG가 경계를 완전히 채우지 못하는 경우를 수정합니다.</li></ul><hr><ul><li><code>HttpUrl.get()</code> 호출을 백그라운드 스레드로 지연합니다.</li><li><code>BitmapFactory</code> null 비트맵 오류 메시지를 개선합니다.</li><li>하드웨어 비트맵 블랙리스트에 3개의 기기를 추가합니다. (<a href="https://github.com/coil-kt/coil/pull/264" target="_blank" rel="noreferrer">#264</a>)</li></ul><hr><ul><li>AndroidX 의존성을 업데이트합니다: <ul><li><code>androidx.lifecycle:lifecycle-common-java8</code> -&gt; 2.2.0</li></ul></li></ul><h2 id="_0-9-2-2020년-1월-19일" tabindex="-1">[0.9.2] - 2020년 1월 19일 <a class="header-anchor" href="#_0-9-2-2020년-1월-19일" aria-label="Permalink to &quot;[0.9.2] - 2020년 1월 19일&quot;">​</a></h2><ul><li>수정: API 19 미만에서 GIF 디코딩 문제를 수정합니다. @mario님께 감사드립니다.</li><li>수정: 래스터화된 벡터 드로어블이 샘플링된 것으로 표시되지 않는 문제를 수정합니다.</li><li>수정: <code>Movie</code> 치수가 0 이하인 경우 예외를 발생시키도록 합니다.</li><li>수정: 메모리 캐시 이벤트에 대해 <code>CrossfadeTransition</code>이 다시 시작되지 않는 문제를 수정합니다.</li><li>수정: 허용되지 않는 경우 하드웨어 비트맵을 모든 타겟 메서드에 반환하는 것을 방지합니다.</li><li>수정: <code>MovieDrawable</code>이 경계의 중앙에 자체적으로 위치하지 않는 문제를 수정합니다.</li></ul><hr><ul><li><code>CrossfadeDrawable</code>에서 자동 스케일링을 제거합니다.</li><li><code>BitmapPool.trimMemory</code>를 공개 API로 만듭니다.</li><li><code>AnimatedImageDrawable</code>을 <code>ScaleDrawable</code>로 감싸 경계를 채우도록 합니다.</li><li><code>RequestBuilder.setParameter</code>에 <code>@JvmOverloads</code>를 추가합니다.</li><li>SVG의 뷰 박스가 설정되지 않은 경우 SVG의 뷰 박스를 크기로 설정합니다.</li><li>상태 및 레벨 변경을 <code>CrossfadeDrawable</code> 자식에게 전달합니다.</li></ul><hr><ul><li>OkHttp를 3.12.8으로 업데이트합니다.</li></ul><h2 id="_0-9-1-2019년-12월-30일" tabindex="-1">[0.9.1] - 2019년 12월 30일 <a class="header-anchor" href="#_0-9-1-2019년-12월-30일" aria-label="Permalink to &quot;[0.9.1] - 2019년 12월 30일&quot;">​</a></h2><ul><li>수정: <code>LoadRequestBuilder.crossfade(false)</code> 호출 시 충돌 문제를 수정합니다.</li></ul><h2 id="_0-9-0-2019년-12월-30일" tabindex="-1">[0.9.0] - 2019년 12월 30일 <a class="header-anchor" href="#_0-9-0-2019년-12월-30일" aria-label="Permalink to &quot;[0.9.0] - 2019년 12월 30일&quot;">​</a></h2><ul><li><strong>Breaking</strong>: <code>Transformation.transform</code>은 이제 <code>Size</code> 파라미터를 포함합니다. 이는 <code>Target</code>의 크기에 따라 출력 <code>Bitmap</code>의 크기를 변경하는 변환을 지원하기 위함입니다. 변환을 사용하는 요청은 이제 <a href="/ko/coil/getting_started/">이미지 샘플링</a>에서도 제외됩니다.</li><li><strong>Breaking</strong>: <code>Transformation</code>은 이제 모든 유형의 <code>Drawable</code>에 적용됩니다. 이전에는 입력 <code>Drawable</code>이 <code>BitmapDrawable</code>이 아닌 경우 <code>Transformation</code>이 건너뛰어졌습니다. 이제 <code>Drawable</code>은 <code>Transformation</code>을 적용하기 전에 <code>Bitmap</code>으로 렌더링됩니다.</li><li><strong>Breaking</strong>: <code>ImageLoader.load</code>에 <code>null</code> 데이터를 전달하는 것은 이제 오류로 처리되며 <code>Target.onError</code> 및 <code>Request.Listener.onError</code>를 <code>NullRequestDataException</code>과 함께 호출합니다. 이 변경은 데이터가 <code>null</code>일 때 <code>fallback</code> 드로어블을 설정하는 것을 지원하기 위해 이루어졌습니다. 이전에는 요청이 조용히 무시되었습니다.</li><li><strong>Breaking</strong>: <code>RequestDisposable.isDisposed</code>는 이제 <code>val</code>입니다.</li></ul><hr><ul><li><strong>신규</strong>: 사용자 지정 전환을 지원합니다. <a href="/ko/coil/transitions/">자세한 내용은 여기</a>를 참조하세요. 전환은 API가 인큐베이팅 중이므로 실험적으로 표시됩니다.</li><li><strong>신규</strong>: <code>LoadRequest</code>가 진행 중인 동안 일시 중단하는 것을 지원하기 위해 <code>RequestDisposable.await</code>를 추가합니다.</li><li><strong>신규</strong>: 요청 데이터가 null일 때 <code>fallback</code> 드로어블을 설정하는 것을 지원합니다.</li><li><strong>신규</strong>: <code>Precision</code>을 추가합니다. 이는 출력 <code>Drawable</code>의 크기를 정확하게 만들면서 스케일링을 지원하는 타겟(예: <code>ImageViewTarget</code>)에 대한 스케일링 최적화를 가능하게 합니다. 자세한 내용은 <a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/main/java/coil/size/Precision.kt" target="_blank" rel="noreferrer">문서</a>를 참조하세요.</li><li><strong>신규</strong>: 여러 캐시 키를 일치시키는 것을 지원하기 위해 <code>RequestBuilder.aliasKeys</code>를 추가합니다.</li></ul><hr><ul><li>수정: <code>RequestDisposable</code>를 스레드 안전하게 만듭니다.</li><li>수정: <code>RoundedCornersTransformation</code>이 이제 타겟 크기에 맞춰 자른 다음 모서리를 둥글게 처리합니다.</li><li>수정: <code>CircleCropTransformation</code>이 이제 중앙에서 자릅니다.</li><li>수정: <a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/main/java/coil/memory/HardwareBitmapService.kt" target="_blank" rel="noreferrer">하드웨어 비트맵 블랙리스트</a>에 여러 기기를 추가합니다.</li><li>수정: 드로어블을 비트맵으로 변환할 때 가로세로 비율을 유지합니다.</li><li>수정: <code>Scale.FIT</code> 사용 시 잠재적인 메모리 캐시 미스 문제를 수정합니다.</li><li>수정: <code>Parameters</code> 반복 순서가 확정적인지 확인합니다.</li><li>수정: <code>Parameters</code> 및 <code>ComponentRegistry</code> 생성 시 방어적 복사를 수행합니다.</li><li>수정: <code>RealBitmapPool</code>의 <code>maxSize</code>가 0 이상인지 확인합니다.</li><li>수정: <code>CrossfadeDrawable</code>이 애니메이션 중이 아니거나 완료된 경우 시작 드로어블을 표시합니다.</li><li>수정: 고유 크기가 정의되지 않은 자식을 처리하도록 <code>CrossfadeDrawable</code>을 조정합니다.</li><li>수정: <code>MovieDrawable</code>이 제대로 스케일링되지 않는 문제를 수정합니다.</li></ul><hr><ul><li>Kotlin을 1.3.61으로 업데이트합니다.</li><li>Kotlin Coroutines를 1.3.3으로 업데이트합니다.</li><li>Okio를 2.4.3으로 업데이트합니다.</li><li>AndroidX 의존성을 업데이트합니다: <ul><li><code>androidx.exifinterface:exifinterface</code> -&gt; 1.1.0</li></ul></li></ul><h2 id="_0-8-0-2019년-10월-22일" tabindex="-1">[0.8.0] - 2019년 10월 22일 <a class="header-anchor" href="#_0-8-0-2019년-10월-22일" aria-label="Permalink to &quot;[0.8.0] - 2019년 10월 22일&quot;">​</a></h2><ul><li><strong>Breaking</strong>: <code>SvgDrawable</code>이 제거되었습니다. 대신 SVG는 이제 <code>SvgDecoder</code>에 의해 <code>BitmapDrawable</code>로 사전 렌더링됩니다. 이로 인해 SVG는 <strong>메인 스레드에서 렌더링하는 데 드는 비용이 크게 절감됩니다.</strong> 또한 <code>SvgDecoder</code>는 이제 생성자에 <code>Context</code>를 요구합니다.</li><li><strong>Breaking</strong>: <code>SparseIntArraySet</code> 확장 함수가 <code>coil.extension</code> 패키지로 이동했습니다.</li></ul><hr><ul><li><strong>신규</strong>: 요청별 네트워크 헤더 설정 지원을 추가합니다. <a href="https://github.com/coil-kt/coil/pull/120" target="_blank" rel="noreferrer">자세한 내용은 여기</a>를 참조하세요.</li><li><strong>신규</strong>: 이미지 파이프라인을 통해 사용자 지정 데이터를 전달하는 것을 지원하는 새로운 <code>Parameters</code> API를 추가합니다.</li><li><strong>신규</strong>: <code>RoundedCornersTransformation</code>에서 개별 코너 반지름을 지원합니다. @khatv911님께 감사드립니다.</li><li><strong>신규</strong>: 선제적으로 리소스를 해제하는 것을 지원하기 위해 <code>ImageView.clear()</code>를 추가합니다.</li><li><strong>신규</strong>: 다른 패키지에서 리소스를 로드하는 것을 지원합니다.</li><li><strong>신규</strong>: <code>ViewSizeResolver</code>에 <code>subtractPadding</code> 속성을 추가하여 측정 시 뷰의 패딩을 빼는 것을 활성화/비활성화할 수 있도록 합니다.</li><li><strong>신규</strong>: <code>HttpUrlFetcher</code> MIME 유형 감지를 개선합니다.</li><li><strong>신규</strong>: <code>MovieDrawable</code> 및 <code>CrossfadeDrawable</code>에 <code>Animatable2Compat</code> 지원을 추가합니다.</li><li><strong>신규</strong>: GIF의 반복 횟수를 설정하기 위해 <code>RequestBuilder&lt;*&gt;.repeatCount</code>를 추가합니다.</li><li><strong>신규</strong>: <code>BitmapPool</code> 생성 기능을 공개 API로 추가합니다.</li><li><strong>신규</strong>: <code>Request.Listener</code> 메서드에 <code>@MainThread</code> 주석을 추가합니다.</li></ul><hr><ul><li>수정: <code>CoilContentProvider</code>를 테스트를 위해 보이도록 만듭니다.</li><li>수정: 리소스 캐시 키에 야간 모드를 포함합니다.</li><li>수정: <code>ImageDecoder</code> 네이티브 충돌을 우회하기 위해 소스를 임시적으로 디스크에 씁니다.</li><li>수정: 연락처 표시 사진 URI를 올바르게 처리합니다.</li><li>수정: <code>CrossfadeDrawable</code>의 자식에게 틴트를 전달합니다.</li><li>수정: 소스를 닫지 않는 여러 경우를 수정합니다.</li><li>수정: 손상되거나 불완전한 하드웨어 비트맵 구현을 가진 기기 블랙리스트를 추가합니다.</li></ul><hr><ul><li>SDK 29에 대해 컴파일합니다.</li><li>Kotlin Coroutines를 1.3.2로 업데이트합니다.</li><li>OkHttp를 3.12.6으로 업데이트합니다.</li><li>Okio를 2.4.1으로 업데이트합니다.</li><li><code>coil-base</code>에 대해 <code>appcompat-resources</code>를 선택적 <code>compileOnly</code> 의존성으로 변경합니다. <code>appcompat-resources</code>는 훨씬 더 작은 아티팩트입니다.</li></ul><h2 id="_0-7-0-2019년-9월-8일" tabindex="-1">[0.7.0] - 2019년 9월 8일 <a class="header-anchor" href="#_0-7-0-2019년-9월-8일" aria-label="Permalink to &quot;[0.7.0] - 2019년 9월 8일&quot;">​</a></h2><ul><li><strong>Breaking</strong>: <code>ImageLoaderBuilder.okHttpClient(OkHttpClient.Builder.() -&gt; Unit)</code>는 이제 <code>ImageLoaderBuilder.okHttpClient(() -&gt; OkHttpClient)</code>입니다. 초기화 프로그램도 이제 백그라운드 스레드에서 지연 호출됩니다. <strong>사용자 지정 <code>OkHttpClient</code>를 설정하는 경우 디스크 캐싱을 활성화하려면 <code>OkHttpClient.cache</code>를 설정해야 합니다.</strong> 사용자 지정 <code>OkHttpClient</code>를 설정하지 않으면 Coil은 디스크 캐싱이 활성화된 기본 <code>OkHttpClient</code>를 생성합니다. 기본 Coil 캐시는 <code>CoilUtils.createDefaultCache(context)</code>를 사용하여 생성할 수 있습니다. 예:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImageLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    okHttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        OkHttpClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CoilUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDefaultCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>Breaking</strong>: <code>Fetcher.key</code>는 더 이상 기본 구현을 가지지 않습니다.</li><li><strong>Breaking</strong>: 이전에는 첫 번째 적용 가능한 <code>Mapper</code>만 호출되었습니다. 이제 모든 적용 가능한 <code>Mapper</code>가 호출됩니다. API 변경은 없습니다.</li><li><strong>Breaking</strong>: 사소한 이름 지정 파라미터 이름 변경: <code>url</code> -&gt; <code>uri</code>, <code>factory</code> -&gt; <code>initializer</code>.</li></ul><hr><ul><li><strong>신규</strong>: SVG를 자동으로 디코딩하는 <code>SvgDecoder</code>를 포함하는 <code>coil-svg</code> 아티팩트. <a href="https://github.com/BigBadaboom/androidsvg" target="_blank" rel="noreferrer">AndroidSVG</a>에 의해 구동됩니다. @rharter님께 감사드립니다.</li><li><strong>신규</strong>: <code>load(String)</code> 및 <code>get(String)</code>은 이제 지원되는 모든 Uri 스킴을 허용합니다. 예: 이제 <code>imageView.load(&quot;file:///path/to/file.jpg&quot;)</code>를 사용할 수 있습니다.</li><li><strong>신규</strong>: <code>ImageLoader</code>를 <code>Call.Factory</code>를 사용하도록 리팩터링합니다. 이는 <code>ImageLoaderBuilder.okHttpClient { OkHttpClient() }</code>를 사용하여 네트워킹 리소스의 지연 초기화를 가능하게 합니다. @ZacSweers님께 감사드립니다.</li><li><strong>신규</strong>: 요청에 대한 디코더를 명시적으로 설정하기 위한 <code>RequestBuilder.decoder</code>를 추가합니다.</li><li><strong>신규</strong>: <code>ImageLoader</code>에 대해 기본적으로 하드웨어 비트맵을 활성화/비활성화하기 위한 <code>ImageLoaderBuilder.allowHardware</code>를 추가합니다.</li><li><strong>신규</strong>: <code>ImageDecoderDecoder</code>에서 소프트웨어 렌더링을 지원합니다.</li></ul><hr><ul><li>수정: 벡터 드로어블 로드에 대한 여러 버그.</li><li>수정: <code>WRAP_CONTENT</code> 뷰 치수를 지원합니다.</li><li>수정: 8192바이트보다 긴 EXIF 데이터 파싱을 지원합니다.</li><li>수정: 교차 페이드 시 가로세로 비율이 다른 드로어블을 늘리지 않도록 합니다.</li><li>수정: 예외로 인해 네트워크 옵저버 등록 실패에 대비합니다.</li><li>수정: <code>MovieDrawable</code>의 0으로 나누기 오류를 수정합니다. @R12rus님께 감사드립니다.</li><li>수정: 중첩된 Android 에셋 파일을 지원합니다. @JaCzekanski님께 감사드립니다.</li><li>수정: Android O 및 O_MR1에서 파일 디스크립터 고갈에 대비합니다.</li><li>수정: 메모리 캐시 비활성화 시 충돌하지 않도록 합니다. @hansenji님께 감사드립니다.</li><li>수정: <code>Target.cancel</code>이 항상 메인 스레드에서 호출되도록 합니다.</li></ul><hr><ul><li>Kotlin을 1.3.50으로 업데이트합니다.</li><li>Kotlin Coroutines를 1.3.0으로 업데이트합니다.</li><li>OkHttp를 3.12.4로 업데이트합니다.</li><li>Okio를 2.4.0으로 업데이트합니다.</li><li>AndroidX 의존성을 최신 안정 버전으로 업데이트합니다: <ul><li><code>androidx.appcompat:appcompat</code> -&gt; 1.1.0</li><li><code>androidx.core:core-ktx</code> -&gt; 1.1.0</li><li><code>androidx.lifecycle:lifecycle-common-java8</code> -&gt; 2.1.0</li></ul></li><li><code>appcompat</code>을 <code>appcompat-resources</code>로 대체합니다(선택적 <code>compileOnly</code> 의존성으로). <code>appcompat-resources</code>는 훨씬 더 작은 아티팩트입니다.</li></ul><h2 id="_0-6-1-2019년-8월-16일" tabindex="-1">[0.6.1] - 2019년 8월 16일 <a class="header-anchor" href="#_0-6-1-2019년-8월-16일" aria-label="Permalink to &quot;[0.6.1] - 2019년 8월 16일&quot;">​</a></h2><ul><li>신규: <code>RequestBuilder</code>에 <code>transformations(List&lt;Transformation&gt;)</code>를 추가합니다.</li><li>수정: 파일 URI의 캐시 키에 최종 수정 날짜를 추가합니다.</li><li>수정: 뷰 치수가 최소 1px로 평가되도록 합니다.</li><li>수정: <code>MovieDrawable</code>의 캔버스를 프레임 간에 지웁니다.</li><li>수정: 에셋을 올바르게 엽니다.</li></ul>`,237)]))}const g=i(c,[["render",r]]);export{k as __pageData,g as default};
