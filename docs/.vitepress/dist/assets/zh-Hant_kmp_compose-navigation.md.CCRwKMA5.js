import{_ as t,C as e,c as l,o as p,ag as a,j as h,a as i,G as o,w as r}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Compose 中的導航","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/compose-navigation.md","filePath":"zh-Hant/kmp/compose-navigation.md","lastUpdated":1755516278000}'),k={name:"zh-Hant/kmp/compose-navigation.md"};function d(g,s,c,E,y,u){const n=e("shortcut");return p(),l("div",null,[s[3]||(s[3]=a(`<h1 id="compose-中的導航" tabindex="-1">Compose 中的導航 <a class="header-anchor" href="#compose-中的導航" aria-label="Permalink to &quot;Compose 中的導航&quot;">​</a></h1><p><a href="https://developer.android.com/guide/navigation" target="_blank" rel="noreferrer">Android 的 Navigation 函式庫</a> 支援 Jetpack Compose 中的導航。Compose Multiplatform 團隊為 AndroidX Navigation 函式庫貢獻多平台支援。</p><p>除了應用程式中內容片段之間的實際導航之外，此函式庫解決基本的導航問題：</p><ul><li>在目的地之間以型別安全的方式傳遞資料。</li><li>透過維護清晰且可存取的導航歷史記錄，輕鬆追蹤使用者在應用程式中的旅程。</li><li>支援深度連結機制，該機制允許在一般工作流程之外將使用者導航至應用程式中的特定位置。</li><li>在導航時支援統一的動畫和轉場效果，並允許常見模式（例如只需最少額外工作即可實現返回手勢）。</li></ul><p>如果您對基礎知識感到足夠熟悉，請繼續閱讀<a href="./compose-navigation-routing">導航與路由</a>，以了解如何在跨平台專案中利用 Navigation 函式庫。否則，請繼續閱讀以了解此函式庫運作的基本概念。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>您可以在我們的 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose.html" target="_blank" rel="noreferrer">最新功能</a> 中追蹤 Navigation 函式庫多平台版本的變更，或在 <a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/CHANGELOG">Compose Multiplatform 更新日誌</a> 中追蹤特定的 EAP 發行版本。</p></div><h2 id="compose-導航的基本概念" tabindex="-1">Compose 導航的基本概念 <a class="header-anchor" href="#compose-導航的基本概念" aria-label="Permalink to &quot;Compose 導航的基本概念&quot;">​</a></h2><p>Navigation 函式庫使用以下概念將導航使用案例對應到：</p><ul><li>一個<strong>導航圖</strong>描述了應用程式中所有可能的目的地以及它們之間的連接。導航圖可以巢狀化以適應應用程式中的子流程。</li><li>一個<strong>目的地</strong>是導航圖中可以導航到的節點。這可以是 Composable、巢狀導航圖或對話方塊。當使用者導航到目的地時，應用程式會顯示其內容。</li><li>一個<strong>路由</strong>識別一個目的地並定義導航到它所需的引數，但它不描述 UI。如此一來，資料與表示分離，這讓您可以使每個 UI 實作片段獨立於整體應用程式結構。例如，這使得在您的專案中測試和重新排列 Composable 變得更容易。</li></ul><p>請記住這些概念，Navigation 函式庫實作基本規則來引導您的導航架構：</p><ul><li>應用程式將使用者的路徑表示為一個目的地堆疊，或<strong>返回堆疊</strong>。預設情況下，每當使用者導航到新目的地時，該目的地會被新增到堆疊的頂部。您可以利用返回堆疊使導航更直接：無需直接來回導航，您可以將目前目的地從堆疊頂部彈出，並自動返回到前一個目的地。</li><li>每個目的地都可以擁有一組與其關聯的<strong>深度連結</strong>：當應用程式從作業系統接收連結時，應導向該目的地的 URI 模式。</li></ul><h2 id="基本導航範例" tabindex="-1">基本導航範例 <a class="header-anchor" href="#基本導航範例" aria-label="Permalink to &quot;基本導航範例&quot;">​</a></h2><p>若要使用 Navigation 函式庫，請將以下依賴項新增至您的 <code>commonMain</code> 原始碼集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.androidx.navigation:navigation-compose:2.9.0-beta05&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Compose Multiplatform 1.8.2 需要 Navigation 函式庫版本 2.9.0-beta05。</p></div><p>設定導航所需步驟的順序如下：</p><ol><li>定義您的路由。 為每個目的地建立一個<a href="https://kotlinlang.org/docs/serialization.html" target="_blank" rel="noreferrer">可序列化</a>的物件或資料類別，以容納對應目的地所需的引數。</li><li>建立一個 <code>NavController</code>，它將是您的導航介面，在 Composable 階層中足夠高，以便所有 Composable 都能存取它。 <code>NavController</code> 負責維護應用程式的返回堆疊，並提供在導航圖中目的地之間轉換的方法。</li><li>設計您的導航圖，選擇其中一個路由作為起始目的地。 為此，建立一個 <code>NavHost</code> Composable，它包含導航圖（描述所有可導航的目的地）。</li></ol><p>以下是在應用程式內導航基礎的簡單範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creates routes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Profile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FriendsList</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creates the NavController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberNavController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creates the NavHost with the navigation graph consisting of supplied destinations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navController, startDestination </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Profile) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProfileScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FriendsList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FriendsListScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // You can add more destinations similarly</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="navigation-函式庫的主要類別" tabindex="-1">Navigation 函式庫的主要類別 <a class="header-anchor" href="#navigation-函式庫的主要類別" aria-label="Permalink to &quot;Navigation 函式庫的主要類別&quot;">​</a></h3><p>Navigation 函式庫提供以下核心型別：</p><ul><li><code>NavController</code>。 提供核心導航功能的 API：目的地之間的轉換、處理深度連結、管理返回堆疊等。 </li><li><code>NavHost</code>。根據導航圖顯示目前目的地內容的 Composable。 每個 <code>NavHost</code> 都有一個必需的 <code>startDestination</code> 參數：此目的地對應於使用者啟動應用程式時應看到的第一個畫面。</li><li><code>NavGraph</code>。 描述應用程式中所有可能的目的地以及它們之間的連接。導航圖通常定義為返回 <code>NavGraph</code> 的建構器 lambda，例如在 <code>NavHost</code> 宣告中。</li></ul><p>除了核心型別功能之外，Navigation 元件提供動畫和轉場效果、深度連結支援、型別安全、<code>ViewModel</code> 支援，以及其他用於處理應用程式導航的品質生活功能。</p><h2 id="導航使用案例" tabindex="-1">導航使用案例 <a class="header-anchor" href="#導航使用案例" aria-label="Permalink to &quot;導航使用案例&quot;">​</a></h2><h3 id="前往目的地" tabindex="-1">前往目的地 <a class="header-anchor" href="#前往目的地" aria-label="Permalink to &quot;前往目的地&quot;">​</a></h3><p>若要導航到目的地，請呼叫 <code>NavController.navigate()</code> 函式。繼續上述範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { navController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">navigate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Profile) }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Go to profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="將引數傳遞給目的地" tabindex="-1">將引數傳遞給目的地 <a class="header-anchor" href="#將引數傳遞給目的地" aria-label="Permalink to &quot;將引數傳遞給目的地&quot;">​</a></h3><p>在設計導航圖時，您可以將路由定義為帶有參數的資料類別，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>若要將引數傳遞給目的地，請在導航到目的地時將引數傳遞給對應的類別建構函式。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { navController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">navigate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Go to profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然後在目的地檢索資料：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { backStackEntry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> profile: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Profile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> backStackEntry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Use \`profile.name\` wherever a user&#39;s name is needed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="導航時檢索複雜資料" tabindex="-1">導航時檢索複雜資料 <a class="header-anchor" href="#導航時檢索複雜資料" aria-label="Permalink to &quot;導航時檢索複雜資料&quot;">​</a></h3><p>在目的地之間導航時，請考慮僅傳遞之間所需的最小資訊。一般而言，反映應用程式狀態的檔案或複雜物件應儲存在資料層：當使用者到達目的地時，UI 應從單一事實來源載入實際資料。</p><p>例如：</p><ul><li><strong>不要</strong>傳遞整個使用者設定檔；<strong>請</strong>傳遞使用者 ID 以在目的地檢索設定檔。</li><li><strong>不要</strong>傳遞圖片物件；<strong>請</strong>傳遞 URI 或檔案名稱，以便從目的地來源載入圖片。</li><li><strong>不要</strong>傳遞應用程式狀態或 ViewModels；<strong>請</strong>僅傳遞目的地畫面運作所需的資訊。</li></ul><p>這種方法有助於防止在配置變更期間的資料遺失，以及在參照物件更新或變異時的任何不一致。</p><p>請參閱 <a href="https://developer.android.com/topic/architecture/data-layer" target="_blank" rel="noreferrer">Android 關於資料層的文章</a>，以獲取有關在應用程式中正確實作資料層的指導。</p><h3 id="管理返回堆疊" tabindex="-1">管理返回堆疊 <a class="header-anchor" href="#管理返回堆疊" aria-label="Permalink to &quot;管理返回堆疊&quot;">​</a></h3><p>返回堆疊由 <code>NavController</code> 類別控制。如同任何其他堆疊，<code>NavController</code> 將新項目推入堆疊頂部並從頂部彈出：</p><ul><li>當應用程式啟動時，返回堆疊中顯示的第一個項目是 <code>NavHost</code> 中定義的起始目的地。</li><li>每個 <code>NavController.navigate()</code> 呼叫預設將給定目的地推送到堆疊頂部。</li><li>使用返回手勢、返回按鈕或 <code>NavController.popBackStack()</code> 方法會將目前目的地從堆疊中彈出，並將使用者返回到前一個目的地。如果使用者透過深度連結到達目前目的地，彈出堆疊會將他們返回到上一個應用程式。或者，<code>NavController.navigateUp()</code> 函式僅在 <code>NavController</code> 的上下文中在應用程式內導航使用者。</li></ul><p>Navigation 函式庫允許在處理返回堆疊方面具有一些靈活性。您可以：</p><ul><li>指定返回堆疊中的特定目的地並導航到它，彈出堆疊中位於該目的地之上（在其之後出現）的所有內容。</li><li>導航到目的地 X，同時將返回堆疊彈出至目的地 Y（透過向 <code>.navigate()</code> 呼叫新增 <code>popUpTo()</code> 引數）。</li><li>處理彈出空的返回堆疊（這會讓使用者停留在空白畫面）。</li><li>為應用程式的不同部分維護多個返回堆疊。例如，對於帶有底部導航的應用程式，您可以在每個分頁中維護單獨的巢狀圖，同時在分頁之間切換時儲存和恢復導航狀態。或者，您可以為每個分頁建立單獨的 NavHosts，這會使設定稍微複雜一些，但在某些情況下可能更容易追蹤。</li></ul><p>請參閱 <a href="https://developer.android.com/guide/navigation/backstack" target="_blank" rel="noreferrer">Jetpack Compose 關於返回堆疊的說明文件</a> 以了解詳細資訊和使用案例。</p><h3 id="深度連結" tabindex="-1">深度連結 <a class="header-anchor" href="#深度連結" aria-label="Permalink to &quot;深度連結&quot;">​</a></h3><p>Navigation 函式庫可讓您將特定的 URI、動作或 MIME 型別與目的地關聯。此關聯稱為<strong>深度連結</strong>。</p><p>預設情況下，深度連結不會暴露給外部應用程式：您需要為每個目標發行版向作業系統註冊適當的 URI 方案。</p><p>有關建立、註冊和處理深度連結的詳細資訊，請參閱 <a href="./compose-navigation-deep-links">深度連結</a>。</p><h3 id="返回手勢" tabindex="-1">返回手勢 <a class="header-anchor" href="#返回手勢" aria-label="Permalink to &quot;返回手勢&quot;">​</a></h3>`,51)),h("p",null,[s[1]||(s[1]=i("多平台 Navigation 函式庫將每個平台上的返回手勢轉換為導航到前一個畫面（例如，在 iOS 上這是簡單的向後滑動，而在桌面上則是 ")),o(n,null,{default:r(()=>s[0]||(s[0]=[i("Esc")])),_:1}),s[2]||(s[2]=i(" 鍵）。"))]),s[4]||(s[4]=a(`<p>預設情況下，在 iOS 上，返回手勢會觸發類似原生的滑動轉場到另一個畫面的動畫。如果您使用 <code>enterTransition</code> 或 <code>exitTransition</code> 引數自訂 NavHost 動畫，預設動畫將不會觸發：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    navController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navController,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    startDestination </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Profile,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Explicitly specifying transitions turns off default animations</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // in favor of the selected ones </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    enterTransition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slideInHorizontally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    exitTransition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slideOutVertically</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span></code></pre></div><p>在 Android 上，您可以在<a href="https://developer.android.com/guide/navigation/custom-back/predictive-back-gesture#opt-predictive" target="_blank" rel="noreferrer">資訊清單檔案</a>中啟用或禁用返回手勢處理程式。</p><p>在 iOS 上，處理程式預設為啟用。若要禁用它，請在 ViewController 配置中設定此旗標：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { enableBackGesture </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="其他導航解決方案" tabindex="-1">其他導航解決方案 <a class="header-anchor" href="#其他導航解決方案" aria-label="Permalink to &quot;其他導航解決方案&quot;">​</a></h2><p>如果基於 Compose 的導航實作不適合您，有第三方替代方案可供評估：</p><table tabindex="0"><thead><tr><th>名稱</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://voyager.adriel.cafe" target="_blank" rel="noreferrer">Voyager</a></td><td>實用的導航方法</td></tr><tr><td><a href="https://arkivanov.github.io/Decompose/" target="_blank" rel="noreferrer">Decompose</a></td><td>涵蓋完整生命週期和任何潛在依賴注入的進階導航方法</td></tr><tr><td><a href="https://slackhq.github.io/circuit/" target="_blank" rel="noreferrer">Circuit</a></td><td>一種由 Compose 驅動的 Kotlin 應用程式架構，具備導航和進階狀態管理。</td></tr><tr><td><a href="https://bumble-tech.github.io/appyx/" target="_blank" rel="noreferrer">Appyx</a></td><td>帶手勢控制的模型驅動導航</td></tr><tr><td><a href="https://tlaster.github.io/PreCompose/" target="_blank" rel="noreferrer">PreCompose</a></td><td>受 Jetpack Lifecycle、ViewModel、LiveData 和 Navigation 啟發的導航和視圖模型</td></tr></tbody></table><h2 id="接下來" tabindex="-1">接下來 <a class="header-anchor" href="#接下來" aria-label="Permalink to &quot;接下來&quot;">​</a></h2><p>Compose 導航在 Android 開發者入口網站上有深入涵蓋。儘管此說明文件有時使用僅限 Android 的範例，但基本指導和導航原則對於多平台是相同的：</p><ul><li><a href="https://developer.android.com/develop/ui/compose/navigation" target="_blank" rel="noreferrer">使用 Compose 進行導航概述</a>。</li><li><a href="https://developer.android.com/guide/navigation" target="_blank" rel="noreferrer">Jetpack Navigation 起始頁面</a>，其中包含關於導航圖、在其中移動以及其他導航使用案例的子頁面。</li></ul>`,11))])}const b=t(k,[["render",d]]);export{m as __pageData,b as default};
