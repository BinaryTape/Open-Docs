import{_ as c,C as e,c as u,o as E,j as a,G as i,ag as h,a as t,w as n}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/server-bearer-auth.md","filePath":"zh-Hant/ktor/server-bearer-auth.md","lastUpdated":1755457140000}'),g={name:"zh-Hant/ktor/server-bearer-auth.md"};function y(v,s,b,F,f,m){const p=e("show-structure"),o=e("Links"),k=e("tldr"),r=e("code-block"),l=e("TabItem"),d=e("Tabs");return E(),u("div",null,[s[5]||(s[5]=a("h1",{id:"ktor-server-中的-bearer-認證",tabindex:"-1"},[t("Ktor Server 中的 Bearer 認證 "),a("a",{class:"header-anchor",href:"#ktor-server-中的-bearer-認證","aria-label":'Permalink to "Ktor Server 中的 Bearer 認證"'},"​")],-1)),i(p,{for:"chapter",depth:"2"}),i(k,null,{default:n(()=>[s[3]||(s[3]=a("p",null,[a("b",null,"所需依賴項"),t(": "),a("code",null,"io.ktor:ktor-server-auth")],-1)),s[4]||(s[4]=a("p",null,[a("b",null,"程式碼範例"),t(": "),a("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-bearer"}," auth-bearer ")],-1)),a("p",null,[a("b",null,[i(o,{href:"/ktor/server-native",summary:"Ktor 支援 Kotlin/Native，允許您在不需額外執行時或虛擬機器的情況下執行伺服器。"},{default:n(()=>s[0]||(s[0]=[t("原生伺服器")])),_:1}),s[1]||(s[1]=t("支援"))]),s[2]||(s[2]=t(": ✅ "))])]),_:1}),s[6]||(s[6]=h('<p>Bearer 認證方案是 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noreferrer">HTTP 框架</a> 的一部分，用於存取控制與認證。此方案涉及稱為 Bearer 權杖（bearer tokens）的安全權杖。Bearer 認證方案作為 <a href="./server-oauth">OAuth</a> 或 <a href="./server-jwt">JWT</a> 的一部分使用，但您也可以提供自訂邏輯來授權 Bearer 權杖。</p><p>您可以在 <a href="./server-auth">Ktor Server 中的認證與授權</a> 部分取得有關 Ktor 中認證的一般資訊。</p><blockquote><p>Bearer 認證應僅透過 <a href="./server-ssl">HTTPS/TLS</a> 使用。</p></blockquote><h2 id="add_dependencies" tabindex="-1">新增依賴項 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;新增依賴項 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>若要啟用 <code>bearer</code> 認證，您需要將 <code>ktor-server-auth</code> artifact 包含在建構腳本中：</p>',5)),i(d,{group:"languages"},{default:n(()=>[i(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(r,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),i(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(r,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),i(l,{title:"Maven","group-key":"maven"},{default:n(()=>[i(r,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[7]||(s[7]=h(`<h2 id="flow" tabindex="-1">Bearer 認證流程 <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;Bearer 認證流程 {id=&quot;flow&quot;}&quot;">​</a></h2><p>通常，Bearer 認證流程可能如下所示：</p><ol><li>使用者成功認證並授權存取後，伺服器會將存取權杖傳回給客戶端。</li><li>客戶端可以使用 <code>Bearer</code> 模式，在 <code>Authorization</code> 標頭中傳遞權杖，向受保護資源發出請求。</li></ol><div class="language-HTTP vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTTP</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http://localhost:8080/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Authorization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Bearer abc123</span></span></code></pre></div><ol start="3"><li>伺服器接收請求並<a href="#configure">驗證</a>權杖。</li><li>驗證後，伺服器回應受保護資源的內容。</li></ol><h2 id="install" tabindex="-1">安裝 Bearer 認證 <a class="header-anchor" href="#install" aria-label="Permalink to &quot;安裝 Bearer 認證 {id=&quot;install&quot;}&quot;">​</a></h2><p>若要安裝 <code>bearer</code> 認證提供者，請在 <code>install</code> 區塊內呼叫 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/bearer.html" target="_blank" rel="noreferrer">bearer</a> 函數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bearer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure bearer authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以選擇指定一個 <a href="./server-auth#provider-name">提供者名稱</a>，該名稱可用於<a href="#authenticate-route">認證指定路由</a>。</p><h2 id="configure" tabindex="-1">配置 Bearer 認證 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置 Bearer 認證 {id=&quot;configure&quot;}&quot;">​</a></h2><p>若要了解如何在 Ktor 中配置不同的認證提供者，請參閱 <a href="./server-auth#configure">配置認證</a>。在本節中，我們將探討 <code>bearer</code> 認證提供者的配置細節。</p><h3 id="configure-provider" tabindex="-1">步驟 1：配置 Bearer 提供者 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;步驟 1：配置 Bearer 提供者 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p><code>bearer</code> 認證提供者透過 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-bearer-authentication-provider/-config/index.html" target="_blank" rel="noreferrer">BearerAuthenticationProvider.Configuration</a> 類別公開其設定。在下面的範例中，指定了以下設定：</p><ul><li><code>realm</code> 屬性設定要在 <code>WWW-Authenticate</code> 標頭中傳遞的 realm。</li><li><code>authenticate</code> 函數檢查客戶端傳送的權杖，並在認證成功的情況下傳回 <code>UserIdPrincipal</code>，或在認證失敗時傳回 <code>null</code>。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bearer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-bearer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { tokenCredential </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (tokenCredential.token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jetbrains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="authenticate-route" tabindex="-1">步驟 2：保護特定資源 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;步驟 2：保護特定資源 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p>配置完 <code>bearer</code> 提供者後，您可以使用 <strong><a href="./server-auth#authenticate-route">authenticate</a></strong> 函數來保護應用程式中的特定資源。在認證成功的情況下，您可以在路由處理程式內部使用 <code>call.principal</code> 函數擷取已認證的 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-id-principal/index.html" target="_blank" rel="noreferrer">UserIdPrincipal</a>，並取得已認證使用者的名稱。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-bearer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()?.name}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,18))])}const C=c(g,[["render",y]]);export{_ as __pageData,C as default};
