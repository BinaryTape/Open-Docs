import{_ as a,a as l,b as t,c as i,d as o,e as r,f as s,g as n,h,i as d,j as p,k as c}from"./chunks/ki-shell-dependency.DOxXXxVC.js";import{_ as m,c as g,o as u,ag as k}from"./chunks/framework.Bksy39di.js";const S=JSON.parse('{"title":"執行程式碼片段","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/run-code-snippets.md","filePath":"zh-Hant/kotlin/run-code-snippets.md","lastUpdated":1754307826000}'),b={name:"zh-Hant/kotlin/run-code-snippets.md"};function f(_,e,P,q,y,w){return u(),g("div",null,e[0]||(e[0]=[k('<h1 id="執行程式碼片段" tabindex="-1">執行程式碼片段 <a class="header-anchor" href="#執行程式碼片段" aria-label="Permalink to &quot;執行程式碼片段&quot;">​</a></h1><p>Kotlin 程式碼通常以專案的形式組織，並在 IDE、文字編輯器或其他工具中進行操作。然而， 如果您想快速了解某個函式的運作方式或找出某個運算式的值，則無需建立新專案 並建置它。請查看以下三種在不同環境中即時執行 Kotlin 程式碼的便捷方式：</p><ul><li>IDE 中的<a href="#ide-scratches-and-worksheets">暫存檔和工作表</a>。</li><li>瀏覽器中的 <a href="#browser-kotlin-playground">Kotlin Playground</a>。</li><li>命令列中的 <a href="#command-line-ki-shell">ki shell</a>。</li></ul><h2 id="ide-暫存檔和工作表" tabindex="-1">IDE：暫存檔和工作表 <a class="header-anchor" href="#ide-暫存檔和工作表" aria-label="Permalink to &quot;IDE：暫存檔和工作表&quot;">​</a></h2><p>IntelliJ IDEA 和 Android Studio 支援 Kotlin <a href="https://www.jetbrains.com/help/idea/kotlin-repl.html#efb8fb32" target="_blank" rel="noreferrer">暫存檔和工作表</a>。</p><ul><li><p><em>暫存檔</em>（或簡稱 <em>scratches</em>）讓您可以在專案的同一 IDE 視窗中建立程式碼草稿，並即時執行它們。 暫存檔不與專案綁定；您可以從作業系統上任何 IntelliJ IDEA 視窗存取並執行所有暫存檔。</p><p>要建立 Kotlin 暫存檔，請按一下 <strong>File</strong> | <strong>New</strong> | <strong>Scratch File</strong> 並選擇 <strong>Kotlin</strong> 型別。</p></li><li><p><em>工作表</em> 是專案檔：它們儲存在專案目錄中並與專案模組綁定。 工作表適用於編寫不構成軟體單元，但仍應一同儲存在專案中的程式碼片段，例如教學或示範材料。</p><p>要在專案目錄中建立 Kotlin 工作表，請在專案樹中右鍵點擊該目錄並選擇 <strong>New</strong> | <strong>Kotlin Class/File</strong> | <strong>Kotlin Worksheet</strong>。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin 工作表在 <a href="https://blog.jetbrains.com/idea/2024/11/k2-mode-becomes-stable/" target="_blank" rel="noreferrer">K2 模式</a>中不支援。我們正在努力提供具有類似功能的替代方案。</p></div></li></ul><p>語法高亮、程式碼補齊以及其他 IntelliJ IDEA 程式碼編輯功能在暫存檔和工作表中均受支援。無需宣告 <code>main()</code> 函式 — 您編寫的所有程式碼都將像在 <code>main()</code> 主體中一樣執行。</p><p>在暫存檔或工作表中完成程式碼編寫後，請按一下 <strong>Run</strong>。 執行結果將顯示在程式碼對應的行中。</p><p><img src="'+a+'" alt="Run scratch" width="700"></p><h3 id="互動模式" tabindex="-1">互動模式 <a class="header-anchor" href="#互動模式" aria-label="Permalink to &quot;互動模式&quot;">​</a></h3><p>IDE 可以自動從暫存檔和工作表中執行程式碼。要一停止 鍵入即可獲得執行結果，請開啟 <strong>Interactive mode</strong>。</p><p><img src="'+l+'" alt="Scratch interactive mode" width="700"></p><h3 id="使用模組" tabindex="-1">使用模組 <a class="header-anchor" href="#使用模組" aria-label="Permalink to &quot;使用模組&quot;">​</a></h3><p>您可以在暫存檔和工作表中，使用 Kotlin 專案中的類別或函式。</p><p>工作表會自動存取其所在模組中的類別和函式。</p><p>要在暫存檔中使用專案中的類別或函式，請像往常一樣，使用 <code>import</code> 陳述式將它們匯入到暫存檔中。然後編寫您的程式碼，並在 <strong>Use classpath of module</strong> 列表中選取適當的模組來執行。</p><p>暫存檔和工作表都使用已連接模組的編譯版本。因此，如果您修改了模組的原始碼檔案， 當您重新建置模組時，這些變更將傳播到暫存檔和工作表。 要在每次執行暫存檔或工作表之前自動重新建置模組，請選取 <strong>Make module before Run</strong>。</p><p><img src="'+t+'" alt="Scratch select module" width="700"></p><h3 id="作為-repl-執行" tabindex="-1">作為 REPL 執行 <a class="header-anchor" href="#作為-repl-執行" aria-label="Permalink to &quot;作為 REPL 執行&quot;">​</a></h3><p>若要評估暫存檔或工作表中的每個特定運算式，請選取 <strong>Use REPL</strong> 來執行。程式碼行 將按順序執行，並提供每個呼叫的結果。 您可以稍後在同一檔案中透過其自動生成的 <code>res*</code> 名稱（它們顯示在對應的行中）來使用這些結果。</p><p><img src="'+i+'" alt="Scratch REPL" width="700"></p><h2 id="瀏覽器-kotlin-playground" tabindex="-1">瀏覽器：Kotlin Playground <a class="header-anchor" href="#瀏覽器-kotlin-playground" aria-label="Permalink to &quot;瀏覽器：Kotlin Playground&quot;">​</a></h2><p><a href="https://play.kotlinlang.org/" target="_blank" rel="noreferrer">Kotlin Playground</a> 是一個線上應用程式，用於在瀏覽器中編寫、執行和分享 Kotlin 程式碼。</p><h3 id="編寫和編輯程式碼" tabindex="-1">編寫和編輯程式碼 <a class="header-anchor" href="#編寫和編輯程式碼" aria-label="Permalink to &quot;編寫和編輯程式碼&quot;">​</a></h3><p>在 Playground 的編輯器區域，您可以像在原始碼檔案中一樣編寫程式碼：</p><ul><li>以任意順序新增您自己的類別、函式和頂層宣告。</li><li>在 <code>main()</code> 函式的主體中編寫可執行部分。</li></ul><p>與典型的 Kotlin 專案一樣，Playground 中的 <code>main()</code> 函式可以有 <code>args</code> 參數或完全沒有參數。 要在執行時傳遞程式引數，請將它們寫入 <strong>Program arguments</strong> 欄位。</p><p><img src="'+o+'" alt="Playground: code completion" width="700"></p><p>當您輸入時，Playground 會高亮顯示程式碼並顯示程式碼補齊選項。它會自動匯入來自標準函式庫和 <a href="/zh-Hant/kotlin/coroutines-overview"><code>kotlinx.coroutines</code></a> 的宣告。</p><h3 id="選擇執行環境" tabindex="-1">選擇執行環境 <a class="header-anchor" href="#選擇執行環境" aria-label="Permalink to &quot;選擇執行環境&quot;">​</a></h3><p>Playground 提供了自訂執行環境的方式：</p><ul><li>多個 Kotlin 版本，包括未來版本的可用<a href="/zh-Hant/kotlin/eap">預覽版本</a>。</li><li>用於執行程式碼的多個後端：JVM、JS（傳統或 <a href="/zh-Hant/kotlin/js-ir-compiler">IR 編譯器</a>，或 Canvas），或 JUnit。</li></ul><p><img src="'+r+'" alt="Playground: environment setup" width="700"></p><p>對於 JS 後端，您還可以查看生成的 JS 程式碼。</p><p><img src="'+s+'" alt="Playground: generated JS" width="700"></p><h3 id="線上分享程式碼" tabindex="-1">線上分享程式碼 <a class="header-anchor" href="#線上分享程式碼" aria-label="Permalink to &quot;線上分享程式碼&quot;">​</a></h3><p>使用 Playground 與他人分享您的程式碼 — 按一下 <strong>Copy link</strong> 並將其傳送給任何您想展示程式碼的人。</p><p>您還可以將 Playground 中的程式碼片段嵌入到其他網站中，甚至使其可執行。按一下 <strong>Share code</strong> 以 將您的範例嵌入到任何網頁或 <a href="https://medium.com/" target="_blank" rel="noreferrer">Medium</a> 文章中。</p><p><img src="'+n+'" alt="Playground: share code" width="700"></p><h2 id="命令列-ki-shell" tabindex="-1">命令列：ki shell <a class="header-anchor" href="#命令列-ki-shell" aria-label="Permalink to &quot;命令列：ki shell&quot;">​</a></h2><p><a href="https://github.com/Kotlin/kotlin-interactive-shell" target="_blank" rel="noreferrer">ki shell</a>（<em>Kotlin 互動式 Shell</em>）是一個命令列 工具程式，用於在終端機中執行 Kotlin 程式碼。它適用於 Linux、macOS 和 Windows。</p><p>ki shell 提供了基本的程式碼評估功能，以及進階功能，例如：</p><ul><li>程式碼補齊</li><li>型別檢查</li><li>外部依賴項</li><li>程式碼片段的貼上模式</li><li>腳本支援</li></ul><p>有關更多詳細資訊，請參閱 <a href="https://github.com/Kotlin/kotlin-interactive-shell" target="_blank" rel="noreferrer">ki shell GitHub 儲存庫</a>。</p><h3 id="安裝和執行-ki-shell" tabindex="-1">安裝和執行 ki shell <a class="header-anchor" href="#安裝和執行-ki-shell" aria-label="Permalink to &quot;安裝和執行 ki shell&quot;">​</a></h3><p>要安裝 ki shell，請從 <a href="https://github.com/Kotlin/kotlin-interactive-shell" target="_blank" rel="noreferrer">GitHub</a> 下載其最新版本，並將其 解壓縮到您選擇的目錄中。</p><p>在 macOS 上，您也可以透過執行以下命令來使用 Homebrew 安裝 ki shell：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ki</span></span></code></pre></div><p>要啟動 ki shell，請在 Linux 和 macOS 上執行 <code>bin/ki.sh</code>（如果 ki shell 是透過 Homebrew 安裝的，則只需 <code>ki</code>），或在 Windows 上執行 <code>bin\\ki.bat</code>。</p><p>shell 執行後，您可以立即開始在終端機中編寫 Kotlin 程式碼。鍵入 <code>:help</code>（或 <code>:h</code>）以查看 ki shell 中可用的命令。</p><h3 id="程式碼補齊和高亮顯示" tabindex="-1">程式碼補齊和高亮顯示 <a class="header-anchor" href="#程式碼補齊和高亮顯示" aria-label="Permalink to &quot;程式碼補齊和高亮顯示&quot;">​</a></h3><p>當您按下 <strong>Tab</strong> 鍵時，ki shell 會顯示程式碼補齊選項。它還會在您鍵入時提供語法高亮顯示。 您可以透過輸入 <code>:syntax off</code> 來禁用此功能。</p><p><img src="'+h+'" alt="ki shell highlighting and completion" width="700"></p><p>當您按下 <strong>Enter</strong> 鍵時，ki shell 會評估輸入的行並列印結果。運算式的值會 以自動生成的名稱（如 <code>res*</code>）作為變數列印出來。您可以稍後在您執行的程式碼中使用這些變數。 如果輸入的結構不完整（例如，一個帶有條件但沒有主體的 <code>if</code>），shell 會列印 三個點並等待剩餘部分。</p><p><img src="'+d+'" alt="ki shell results" width="700"></p><h3 id="檢查運算式的型別" tabindex="-1">檢查運算式的型別 <a class="header-anchor" href="#檢查運算式的型別" aria-label="Permalink to &quot;檢查運算式的型別&quot;">​</a></h3><p>對於複雜的運算式或您不熟悉的 API，ki shell 提供了 <code>:type</code>（或 <code>:t</code>）命令，用於顯示 運算式的型別：</p><p><img src="'+p+'" alt="ki shell type" width="700"></p><h3 id="載入程式碼" tabindex="-1">載入程式碼 <a class="header-anchor" href="#載入程式碼" aria-label="Permalink to &quot;載入程式碼&quot;">​</a></h3><p>如果您需要的程式碼儲存在其他地方，有兩種方法可以載入並在 ki shell 中使用它：</p><ul><li>使用 <code>:load</code>（或 <code>:l</code>）命令載入原始碼檔案。</li><li>使用 <code>:paste</code>（或 <code>:p</code>）命令在貼上模式下複製並貼上程式碼片段。</li></ul><p width="700">![ki shell load file](ki-700]</p><p><code>ls</code> 命令顯示可用的符號（變數和函式）。</p><h3 id="新增外部依賴項" tabindex="-1">新增外部依賴項 <a class="header-anchor" href="#新增外部依賴項" aria-label="Permalink to &quot;新增外部依賴項&quot;">​</a></h3><p>除了標準函式庫，ki shell 還支援外部依賴項。 這使您無需建立整個專案即可嘗試其中的第三方函式庫。</p><p>要在 ki shell 中新增第三方函式庫，請使用 <code>:dependsOn</code> 命令。預設情況下，ki shell 與 Maven Central 配合使用， 但如果使用 <code>:repository</code> 命令連接其他儲存庫，您也可以使用它們：</p><p><img src="'+c+'" alt="ki shell external dependency" width="700"></p>',67)]))}const v=m(b,[["render",f]]);export{S as __pageData,v as default};
