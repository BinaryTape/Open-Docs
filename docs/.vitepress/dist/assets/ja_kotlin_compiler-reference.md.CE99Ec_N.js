import{_ as n,C as r,c as s,o as d,ag as e,G as i,j as o,a as l}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Kotlinコンパイラのオプション","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/compiler-reference.md","filePath":"ja/kotlin/compiler-reference.md","lastUpdated":1754307826000}'),p={name:"ja/kotlin/compiler-reference.md"};function h(c,a,m,u,b,k){const t=r("TopicTitle");return d(),s("div",null,[a[0]||(a[0]=e('<h1 id="kotlinコンパイラのオプション" tabindex="-1">Kotlinコンパイラのオプション <a class="header-anchor" href="#kotlinコンパイラのオプション" aria-label="Permalink to &quot;Kotlinコンパイラのオプション&quot;">​</a></h1><p>Kotlinの各リリースには、サポートされているターゲット（JVM、JavaScript、<a href="/ja/kotlin/native-overview#target-platforms">対応プラットフォーム</a>用のネイティブバイナリ）向けのコンパイラが含まれています。</p><p>これらのコンパイラは、以下によって使用されます。</p><ul><li>IDEで、Kotlinプロジェクトの<strong>コンパイル</strong>ボタンまたは<strong>実行</strong>ボタンをクリックしたとき。</li><li>Gradleで、コンソールまたはIDEで<code>gradle build</code>を呼び出したとき。</li><li>Mavenで、コンソールまたはIDEで<code>mvn compile</code>または<code>mvn test-compile</code>を呼び出したとき。</li></ul><p>Kotlinコンパイラは、<a href="/ja/kotlin/command-line">コマンドラインコンパイラでの作業</a>チュートリアルで説明されているように、コマンドラインから手動で実行することもできます。</p><h2 id="コンパイラのオプション" tabindex="-1">コンパイラのオプション <a class="header-anchor" href="#コンパイラのオプション" aria-label="Permalink to &quot;コンパイラのオプション&quot;">​</a></h2><p>Kotlinコンパイラには、コンパイルプロセスを調整するための多数のオプションがあります。 異なるターゲット向けのコンパイラオプションは、それぞれの説明とともにこのページにリストされています。</p><p>コンパイラのオプションとその値（<em>コンパイラ引数</em>）を設定するには、いくつかの方法があります。</p><ul><li>IntelliJ IDEAで、<strong>Settings/Preferences</strong> | <strong>Build, Execution, Deployment</strong> | <strong>Compiler</strong> | <strong>Kotlin Compiler</strong> の<strong>Additional command line parameters</strong>テキストボックスにコンパイラ引数を入力します。</li><li>Gradleを使用している場合は、Kotlinコンパイルタスクの<code>compilerOptions</code>プロパティにコンパイラ引数を指定します。詳細については、<a href="/ja/kotlin/gradle-compiler-options#how-to-define-options">Gradleコンパイラオプション</a>を参照してください。</li><li>Mavenを使用している場合は、Mavenプラグインノードの<code>&lt;configuration&gt;</code>要素にコンパイラ引数を指定します。詳細については、<a href="/ja/kotlin/maven#specify-compiler-options">Maven</a>を参照してください。</li><li>コマンドラインコンパイラを実行する場合は、ユーティリティ呼び出しに直接コンパイラ引数を追加するか、<a href="#argfile">引数ファイル</a>に記述します。</li></ul><p>例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -include-runtime</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Windowsでは、区切り文字（空白、<code>=</code>、<code>;</code>、<code>,</code>）を含むコンパイラ引数を渡す場合、これらの引数を二重引用符（<code>&quot;</code>）で囲みます。 <code>$ kotlinc.bat hello.kt -include-runtime -d &quot;My Folder\\hello.jar&quot;</code></p></div><h2 id="共通オプション" tabindex="-1">共通オプション <a class="header-anchor" href="#共通オプション" aria-label="Permalink to &quot;共通オプション&quot;">​</a></h2><p>以下のオプションは、すべてのKotlinコンパイラに共通です。</p><h3 id="version" tabindex="-1">-version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;-version&quot;">​</a></h3><p>コンパイラのバージョンを表示します。</p><h3 id="verbose" tabindex="-1">-verbose <a class="header-anchor" href="#verbose" aria-label="Permalink to &quot;-verbose&quot;">​</a></h3><p>コンパイルプロセスの詳細を含む、詳細なログ出力を有効にします。</p><h3 id="script" tabindex="-1">-script <a class="header-anchor" href="#script" aria-label="Permalink to &quot;-script&quot;">​</a></h3><p>Kotlinスクリプトファイルを評価します。このオプションを指定して呼び出すと、コンパイラは指定された引数の中から最初のKotlinスクリプト（<code>*.kts</code>）ファイルを実行します。</p><h3 id="help-h" tabindex="-1">-help (-h) <a class="header-anchor" href="#help-h" aria-label="Permalink to &quot;-help (-h)&quot;">​</a></h3><p>使用法情報を表示して終了します。標準オプションのみが表示されます。 高度なオプションを表示するには、<code>-X</code>を使用します。</p>',22)),i(t,{id:"x",level:"3",title:"-X",labelRef:"experimental-general"}),a[1]||(a[1]=e('<p>高度なオプションに関する情報を表示して終了します。これらのオプションは現在不安定です。名前や動作は予告なく変更される場合があります。</p><h3 id="kotlin-home-path" tabindex="-1">-kotlin-home <em>path</em> <a class="header-anchor" href="#kotlin-home-path" aria-label="Permalink to &quot;-kotlin-home _path_&quot;">​</a></h3><p>ランタイムライブラリの検出に使用されるKotlinコンパイラへのカスタムパスを指定します。</p><h3 id="p-plugin-pluginid-optionname-value" tabindex="-1">-P plugin:pluginId:optionName=value <a class="header-anchor" href="#p-plugin-pluginid-optionname-value" aria-label="Permalink to &quot;-P plugin:pluginId:optionName=value&quot;">​</a></h3><p>Kotlinコンパイラプラグインにオプションを渡します。 コアプラグインとそのオプションは、ドキュメントの<a href="/ja/kotlin/components-stability#core-compiler-plugins">Core compiler plugins</a>セクションにリストされています。</p><h3 id="language-version-version" tabindex="-1">-language-version <em>version</em> <a class="header-anchor" href="#language-version-version" aria-label="Permalink to &quot;-language-version _version_&quot;">​</a></h3><p>指定されたKotlinバージョンとのソース互換性を提供します。</p><h3 id="api-version-version" tabindex="-1">-api-version <em>version</em> <a class="header-anchor" href="#api-version-version" aria-label="Permalink to &quot;-api-version _version_&quot;">​</a></h3><p>指定されたKotlinバンドルライブラリのバージョンからの宣言のみの使用を許可します。</p><h3 id="progressive" tabindex="-1">-progressive <a class="header-anchor" href="#progressive" aria-label="Permalink to &quot;-progressive&quot;">​</a></h3><p>コンパイラの<a href="/ja/kotlin/whatsnew13#progressive-mode">プログレッシブモード</a>を有効にします。</p><p>プログレッシブモードでは、不安定なコードに対する非推奨化とバグ修正が、段階的な移行サイクルを経ずに直ちに適用されます。 プログレッシブモードで書かれたコードは後方互換性がありますが、非プログレッシブモードで書かれたコードは、プログレッシブモードでコンパイルエラーを引き起こす可能性があります。</p><h3 id="argfile" tabindex="-1">@argfile <a class="header-anchor" href="#argfile" aria-label="Permalink to &quot;@argfile&quot;">​</a></h3><p>指定されたファイルからコンパイラオプションを読み取ります。このようなファイルには、値とソースファイルへのパスを持つコンパイラオプションを含めることができます。オプションとパスは空白で区切る必要があります。例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-include-runtime -d hello.jar hello.kt</span></span></code></pre></div><p>空白を含む値を渡すには、一重引用符（<strong>&#39;</strong>）または二重引用符（<strong>&quot;</strong>）で囲みます。値に引用符が含まれる場合は、バックスラッシュ（<strong>\\</strong>）でエスケープします。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-include-runtime -d &#39;My folder&#39;</span></span></code></pre></div><p>複数の引数ファイルを渡すこともできます。例えば、コンパイラオプションとソースファイルを分離するためです。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @compiler.options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @classes</span></span></code></pre></div><p>ファイルが現在のディレクトリとは異なる場所にある場合は、相対パスを使用します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @options/compiler.options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span></span></code></pre></div><h3 id="opt-in-annotation" tabindex="-1">-opt-in <em>annotation</em> <a class="header-anchor" href="#opt-in-annotation" aria-label="Permalink to &quot;-opt-in _annotation_&quot;">​</a></h3><p>指定された完全修飾名を持つ要件アノテーションで、<a href="/ja/kotlin/opt-in-requirements">オプトインが必要な</a>APIの使用を有効にします。</p>',23)),i(t,{id:"xrepl",level:"3",title:"-Xrepl",labelRef:"experimental-general"}),a[2]||(a[2]=e('<p>Kotlin REPLをアクティブにします。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xrepl</span></span></code></pre></div>',2)),i(t,{id:"xannotation-target-all",level:"3",title:"-Xannotation-target-all",labelRef:"experimental-general"}),a[3]||(a[3]=e('<p>アノテーションの実験的な<a href="/ja/kotlin/annotations#all-meta-target"><code>all</code>ユースサイトターゲット</a>を有効にします。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xannotation-target-all</span></span></code></pre></div>',2)),i(t,{id:"xannotation-default-target-param-property",level:"3",title:"-Xannotation-default-target=param-property",labelRef:"experimental-general"}),a[4]||(a[4]=e('<p>アノテーションのユースサイトターゲットの新しい実験的な<a href="/ja/kotlin/annotations#defaults-when-no-use-site-targets-are-specified">デフォルト設定ルール</a>を有効にします。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xannotation-default-target=param-property</span></span></code></pre></div><h3 id="警告管理" tabindex="-1">警告管理 <a class="header-anchor" href="#警告管理" aria-label="Permalink to &quot;警告管理&quot;">​</a></h3><h4 id="nowarn" tabindex="-1">-nowarn <a class="header-anchor" href="#nowarn" aria-label="Permalink to &quot;-nowarn&quot;">​</a></h4><p>コンパイル中のすべての警告を抑制します。</p><h4 id="werror" tabindex="-1">-Werror <a class="header-anchor" href="#werror" aria-label="Permalink to &quot;-Werror&quot;">​</a></h4><p>すべての警告をコンパイルエラーとして扱います。</p><h4 id="wextra" tabindex="-1">-Wextra <a class="header-anchor" href="#wextra" aria-label="Permalink to &quot;-Wextra&quot;">​</a></h4><p>真の場合に警告を発する<a href="/ja/kotlin/whatsnew21#extra-compiler-checks">追加の宣言、式、および型コンパイラチェック</a>を有効にします。</p>',9)),i(t,{id:"xwarning-level",level:"4",title:"-Xwarning-level",labelRef:"experimental-general"}),a[5]||(a[5]=e('<p>特定のコンパイラ警告の重大度レベルを設定します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xwarning-level=DIAGNOSTIC_NAME:(error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warning</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><code>error</code>: 指定された警告のみをエラーに昇格させます。</li><li><code>warning</code>: 指定された診断に対して警告を発し、デフォルトで有効になっています。</li><li><code>disabled</code>: 指定された警告のみをモジュール全体で抑制します。</li></ul><p>プロジェクト内の警告レポートは、モジュール全体のルールと特定のルールを組み合わせて調整できます。</p><table tabindex="0"><thead><tr><th>コマンド</th><th>説明</th></tr></thead><tbody><tr><td><code>-nowarn -Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>指定された警告を除くすべての警告を抑制します。</td></tr><tr><td><code>-Werror -Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>指定された警告を除くすべての警告をエラーに昇格させます。</td></tr><tr><td><code>-Wextra -Xwarning-level=DIAGNOSTIC_NAME:disabled</code></td><td>指定されたチェックを除くすべての追加チェックを有効にします。</td></tr></tbody></table><p>一般的なルールから除外する警告が多数ある場合は、<a href="#argfile"><code>@argfile</code></a>を使用して別のファイルにリストできます。</p><h2 id="kotlin-jvmコンパイラのオプション" tabindex="-1">Kotlin/JVMコンパイラのオプション <a class="header-anchor" href="#kotlin-jvmコンパイラのオプション" aria-label="Permalink to &quot;Kotlin/JVMコンパイラのオプション&quot;">​</a></h2><p>Kotlin/JVMコンパイラは、KotlinソースファイルをJavaクラスファイルにコンパイルします。KotlinからJVMへのコンパイルのためのコマンドラインツールは、<code>kotlinc</code>および<code>kotlinc-jvm</code>です。これらを使用してKotlinスクリプトファイルを実行することもできます。</p><p><a href="#common-options">共通オプション</a>に加えて、Kotlin/JVMコンパイラは以下のオプションを持っています。</p><h3 id="classpath-path-cp-path" tabindex="-1">-classpath <em>path</em> (-cp <em>path</em>) <a class="header-anchor" href="#classpath-path-cp-path" aria-label="Permalink to &quot;-classpath _path_ (-cp _path_)&quot;">​</a></h3><p>指定されたパスでクラスファイルを検索します。クラスパスの要素はシステムパス区切り文字（Windowsでは**;<strong>、macOS/Linuxでは</strong>😗*）で区切ります。 クラスパスには、ファイルやディレクトリのパス、ZIPファイル、またはJARファイルを含めることができます。</p><h3 id="d-path" tabindex="-1">-d <em>path</em> <a class="header-anchor" href="#d-path" aria-label="Permalink to &quot;-d _path_&quot;">​</a></h3><p>生成されたクラスファイルを指定された場所に配置します。場所はディレクトリ、ZIPファイル、またはJARファイルにすることができます。</p><h3 id="include-runtime" tabindex="-1">-include-runtime <a class="header-anchor" href="#include-runtime" aria-label="Permalink to &quot;-include-runtime&quot;">​</a></h3><p>結果のJARファイルにKotlinランタイムを含めます。これにより、結果のアーカイブはJavaが有効な任意の環境で実行可能になります。</p><h3 id="jdk-home-path" tabindex="-1">-jdk-home <em>path</em> <a class="header-anchor" href="#jdk-home-path" aria-label="Permalink to &quot;-jdk-home _path_&quot;">​</a></h3><p>デフォルトの<code>JAVA_HOME</code>と異なる場合、カスタムのJDKホームディレクトリをクラスパスに含めるように指定します。</p>',17)),i(t,{id:"xjdk-release-version",level:"3",title:"-Xjdk-release=version",labelRef:"experimental-general"}),a[6]||(a[6]=e('<p>生成されるJVMバイトコードのターゲットバージョンを指定します。クラスパス内のJDKのAPIを指定されたJavaバージョンに制限します。<a href="#jvm-target-version"><code>-jvm-target version</code></a>を自動的に設定します。 指定可能な値は<code>1.8</code>、<code>9</code>、<code>10</code>、...、<code>24</code>です。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>このオプションは、各JDKディストリビューションに対して<a href="https://youtrack.jetbrains.com/issue/KT-29974" target="_blank" rel="noreferrer">有効である保証はありません</a>。</p></div><h3 id="jvm-target-version" tabindex="-1">-jvm-target <em>version</em> <a class="header-anchor" href="#jvm-target-version" aria-label="Permalink to &quot;-jvm-target _version_&quot;">​</a></h3><p>生成されるJVMバイトコードのターゲットバージョンを指定します。指定可能な値は<code>1.8</code>、<code>9</code>、<code>10</code>、...、<code>24</code>です。 デフォルト値は<code>1.8</code>です。</p><h3 id="java-parameters" tabindex="-1">-java-parameters <a class="header-anchor" href="#java-parameters" aria-label="Permalink to &quot;-java-parameters&quot;">​</a></h3><p>メソッドパラメータに関するJava 1.8リフレクションのメタデータを生成します。</p><h3 id="module-name-name-jvm" tabindex="-1">-module-name <em>name</em> (JVM) <a class="header-anchor" href="#module-name-name-jvm" aria-label="Permalink to &quot;-module-name _name_ (JVM)&quot;">​</a></h3><p>生成される<code>.kotlin_module</code>ファイルにカスタム名を指定します。</p><h3 id="no-jdk" tabindex="-1">-no-jdk <a class="header-anchor" href="#no-jdk" aria-label="Permalink to &quot;-no-jdk&quot;">​</a></h3><p>Javaランタイムをクラスパスに自動的に含めません。</p><h3 id="no-reflect" tabindex="-1">-no-reflect <a class="header-anchor" href="#no-reflect" aria-label="Permalink to &quot;-no-reflect&quot;">​</a></h3><p>Kotlinリフレクション（<code>kotlin-reflect.jar</code>）をクラスパスに自動的に含めません。</p><h3 id="no-stdlib-jvm" tabindex="-1">-no-stdlib (JVM) <a class="header-anchor" href="#no-stdlib-jvm" aria-label="Permalink to &quot;-no-stdlib (JVM)&quot;">​</a></h3><p>Kotlin/JVM stdlib（<code>kotlin-stdlib.jar</code>）およびKotlinリフレクション（<code>kotlin-reflect.jar</code>）をクラスパスに自動的に含めません。</p><h3 id="script-templates-classnames" tabindex="-1">-script-templates <em>classnames[,]</em> <a class="header-anchor" href="#script-templates-classnames" aria-label="Permalink to &quot;-script-templates _classnames[,]_&quot;">​</a></h3><p>スクリプト定義テンプレートクラス。完全修飾クラス名を使用し、コンマ（<strong>，</strong>）で区切ります。</p>',16)),i(t,{id:"xjvm-expose-boxed",level:"3",title:"-Xjvm-expose-boxed",labelRef:"experimental-general"}),a[7]||(a[7]=e('<p>モジュール内のすべてのインライン値クラスのボックス化されたバージョンと、それらを使用する関数のボックス化されたバリアントを生成し、Javaから両方にアクセスできるようにします。詳細については、JavaからKotlinを呼び出すガイドの<a href="/ja/kotlin/java-to-kotlin-interop#inline-value-classes">インライン値クラス</a>を参照してください。</p><h3 id="jvm-default-mode" tabindex="-1">-jvm-default <em>mode</em> <a class="header-anchor" href="#jvm-default-mode" aria-label="Permalink to &quot;-jvm-default _mode_&quot;">​</a></h3><p>インターフェースで宣言された関数がJVM上でデフォルトメソッドとしてどのようにコンパイルされるかを制御します。</p><table tabindex="0"><thead><tr><th>モード</th><th>説明</th></tr></thead><tbody><tr><td><code>enable</code></td><td>インターフェースにデフォルト実装を生成し、サブクラスと<code>DefaultImpls</code>クラスにブリッジ関数を含めます。（デフォルト）</td></tr><tr><td><code>no-compatibility</code></td><td>互換性ブリッジと<code>DefaultImpls</code>クラスをスキップし、インターフェースにのみデフォルト実装を生成します。</td></tr><tr><td><code>disable</code></td><td>デフォルトメソッドをスキップし、互換性ブリッジと<code>DefaultImpls</code>クラスのみを生成します。</td></tr></tbody></table><h2 id="kotlin-jsコンパイラのオプション" tabindex="-1">Kotlin/JSコンパイラのオプション <a class="header-anchor" href="#kotlin-jsコンパイラのオプション" aria-label="Permalink to &quot;Kotlin/JSコンパイラのオプション&quot;">​</a></h2><p>Kotlin/JSコンパイラは、KotlinソースファイルをJavaScriptコードにコンパイルします。KotlinからJSへのコンパイルのためのコマンドラインツールは、<code>kotlinc-js</code>です。</p><p><a href="#common-options">共通オプション</a>に加えて、Kotlin/JSコンパイラは以下のオプションを持っています。</p>',7)),a[8]||(a[8]=o("h3",{"es5|es2015":"",id:"target",tabindex:"-1"},[l("-target "),o("a",{class:"header-anchor",href:"#target","aria-label":'Permalink to "-target {es5|es2015}"'},"​")],-1)),a[9]||(a[9]=e('<p>指定されたECMAバージョン向けにJSファイルを生成します。</p><h3 id="libraries-path" tabindex="-1">-libraries <em>path</em> <a class="header-anchor" href="#libraries-path" aria-label="Permalink to &quot;-libraries _path_&quot;">​</a></h3><p><code>.meta.js</code>ファイルと<code>.kjsm</code>ファイルを含むKotlinライブラリへのパス。システムパス区切り文字で区切ります。</p><h3 id="main-call-nocall" tabindex="-1">-main <em>{call|noCall}</em> <a class="header-anchor" href="#main-call-nocall" aria-label="Permalink to &quot;-main _{call|noCall}_&quot;">​</a></h3><p>実行時に<code>main</code>関数を呼び出すかどうかを定義します。</p><h3 id="meta-info" tabindex="-1">-meta-info <a class="header-anchor" href="#meta-info" aria-label="Permalink to &quot;-meta-info&quot;">​</a></h3><p>メタデータを含む<code>.meta.js</code>ファイルと<code>.kjsm</code>ファイルを生成します。JSライブラリを作成する際にこのオプションを使用します。</p>',7)),a[10]||(a[10]=o("h3",{"umd|commonjs|amd|plain":"",id:"module-kind",tabindex:"-1"},[l("-module-kind "),o("a",{class:"header-anchor",href:"#module-kind","aria-label":'Permalink to "-module-kind {umd|commonjs|amd|plain}"'},"​")],-1)),a[11]||(a[11]=e('<p>コンパイラによって生成されるJSモジュールの種類：</p><ul><li><code>umd</code> - <a href="https://github.com/umdjs/umd" target="_blank" rel="noreferrer">Universal Module Definition</a>モジュール</li><li><code>commonjs</code> - <a href="http://www.commonjs.org/" target="_blank" rel="noreferrer">CommonJS</a>モジュール</li><li><code>amd</code> - <a href="https://en.wikipedia.org/wiki/Asynchronous_module_definition" target="_blank" rel="noreferrer">Asynchronous Module Definition</a>モジュール</li><li><code>plain</code> - プレーンJSモジュール</li></ul><p>異なる種類のJSモジュールとその違いについては、<a href="https://www.davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/" target="_blank" rel="noreferrer">この記事</a>を参照してください。</p><h3 id="no-stdlib-js" tabindex="-1">-no-stdlib (JS) <a class="header-anchor" href="#no-stdlib-js" aria-label="Permalink to &quot;-no-stdlib (JS)&quot;">​</a></h3><p>デフォルトのKotlin/JS stdlibをコンパイル依存関係に自動的に含めません。</p><h3 id="output-filepath" tabindex="-1">-output <em>filepath</em> <a class="header-anchor" href="#output-filepath" aria-label="Permalink to &quot;-output _filepath_&quot;">​</a></h3><p>コンパイル結果の出力先ファイルを指定します。値はファイル名を含む<code>.js</code>ファイルへのパスである必要があります。</p><h3 id="output-postfix-filepath" tabindex="-1">-output-postfix <em>filepath</em> <a class="header-anchor" href="#output-postfix-filepath" aria-label="Permalink to &quot;-output-postfix _filepath_&quot;">​</a></h3><p>指定されたファイルのコンテンツを出力ファイルの末尾に追加します。</p><h3 id="output-prefix-filepath" tabindex="-1">-output-prefix <em>filepath</em> <a class="header-anchor" href="#output-prefix-filepath" aria-label="Permalink to &quot;-output-prefix _filepath_&quot;">​</a></h3><p>指定されたファイルのコンテンツを出力ファイルの先頭に追加します。</p><h3 id="source-map" tabindex="-1">-source-map <a class="header-anchor" href="#source-map" aria-label="Permalink to &quot;-source-map&quot;">​</a></h3><p>ソースマップを生成します。</p><h3 id="source-map-base-dirs-path" tabindex="-1">-source-map-base-dirs <em>path</em> <a class="header-anchor" href="#source-map-base-dirs-path" aria-label="Permalink to &quot;-source-map-base-dirs _path_&quot;">​</a></h3><p>指定されたパスをベースディレクトリとして使用します。ベースディレクトリはソースマップ内の相対パスを計算するために使用されます。</p><h3 id="source-map-embed-sources-always-never-inlining" tabindex="-1">-source-map-embed-sources <em>{always|never|inlining}</em> <a class="header-anchor" href="#source-map-embed-sources-always-never-inlining" aria-label="Permalink to &quot;-source-map-embed-sources _{always|never|inlining}_&quot;">​</a></h3><p>ソースファイルをソースマップに埋め込みます。</p><h3 id="source-map-names-policy-simple-names-fully-qualified-names-no" tabindex="-1">-source-map-names-policy <em>{simple-names|fully-qualified-names|no}</em> <a class="header-anchor" href="#source-map-names-policy-simple-names-fully-qualified-names-no" aria-label="Permalink to &quot;-source-map-names-policy _{simple-names|fully-qualified-names|no}_&quot;">​</a></h3><p>Kotlinコードで宣言した変数名と関数名をソースマップに追加します。</p><table tabindex="0"><thead><tr><th>設定</th><th>説明</th><th>出力例</th></tr></thead><tbody><tr><td><code>simple-names</code></td><td>変数名と単純な関数名が追加されます。（デフォルト）</td><td><code>main</code></td></tr><tr><td><code>fully-qualified-names</code></td><td>変数名と完全修飾関数名が追加されます。</td><td><code>com.example.kjs.playground.main</code></td></tr><tr><td><code>no</code></td><td>変数名または関数名は追加されません。</td><td>N/A</td></tr></tbody></table><h3 id="source-map-prefix" tabindex="-1">-source-map-prefix <a class="header-anchor" href="#source-map-prefix" aria-label="Permalink to &quot;-source-map-prefix&quot;">​</a></h3><p>ソースマップ内のパスに指定されたプレフィックスを追加します。</p><h2 id="kotlin-nativeコンパイラのオプション" tabindex="-1">Kotlin/Nativeコンパイラのオプション <a class="header-anchor" href="#kotlin-nativeコンパイラのオプション" aria-label="Permalink to &quot;Kotlin/Nativeコンパイラのオプション&quot;">​</a></h2><p>Kotlin/Nativeコンパイラは、Kotlinソースファイルを<a href="/ja/kotlin/native-overview#target-platforms">対応プラットフォーム</a>向けのネイティブバイナリにコンパイルします。Kotlin/Nativeコンパイルのためのコマンドラインツールは、<code>kotlinc-native</code>です。</p><p><a href="#common-options">共通オプション</a>に加えて、Kotlin/Nativeコンパイラは以下のオプションを持っています。</p><h3 id="enable-assertions-ea" tabindex="-1">-enable-assertions (-ea) <a class="header-anchor" href="#enable-assertions-ea" aria-label="Permalink to &quot;-enable-assertions (-ea)&quot;">​</a></h3><p>生成されたコードでランタイムアサーションを有効にします。</p><h3 id="g" tabindex="-1">-g <a class="header-anchor" href="#g" aria-label="Permalink to &quot;-g&quot;">​</a></h3><p>デバッグ情報の出力を有効にします。このオプションは最適化レベルを下げ、<a href="#opt"><code>-opt</code></a>オプションと組み合わせて使用すべきではありません。</p><h3 id="generate-test-runner-tr" tabindex="-1">-generate-test-runner (-tr) <a class="header-anchor" href="#generate-test-runner-tr" aria-label="Permalink to &quot;-generate-test-runner (-tr)&quot;">​</a></h3><p>プロジェクトから単体テストを実行するためのアプリケーションを生成します。</p><h3 id="generate-no-exit-test-runner-trn" tabindex="-1">-generate-no-exit-test-runner (-trn) <a class="header-anchor" href="#generate-no-exit-test-runner-trn" aria-label="Permalink to &quot;-generate-no-exit-test-runner (-trn)&quot;">​</a></h3><p>明示的なプロセス終了なしで単体テストを実行するためのアプリケーションを生成します。</p><h3 id="include-binary-path-ib-path" tabindex="-1">-include-binary <em>path</em> (-ib <em>path</em>) <a class="header-anchor" href="#include-binary-path-ib-path" aria-label="Permalink to &quot;-include-binary _path_ (-ib _path_)&quot;">​</a></h3><p>生成されたklibファイル内に外部バイナリをパックします。</p><h3 id="library-path-l-path" tabindex="-1">-library <em>path</em> (-l <em>path</em>) <a class="header-anchor" href="#library-path-l-path" aria-label="Permalink to &quot;-library _path_ (-l _path_)&quot;">​</a></h3><p>ライブラリとリンクします。Kotlin/Nativeプロジェクトでのライブラリの使用については、<a href="/ja/kotlin/native-libraries">Kotlin/Nativeライブラリ</a>を参照してください。</p><h3 id="library-version-version-lv-version" tabindex="-1">-library-version <em>version</em> (-lv <em>version</em>) <a class="header-anchor" href="#library-version-version-lv-version" aria-label="Permalink to &quot;-library-version _version_ (-lv _version_)&quot;">​</a></h3><p>ライブラリのバージョンを設定します。</p><h3 id="list-targets" tabindex="-1">-list-targets <a class="header-anchor" href="#list-targets" aria-label="Permalink to &quot;-list-targets&quot;">​</a></h3><p>利用可能なハードウェアターゲットをリスト表示します。</p><h3 id="manifest-path" tabindex="-1">-manifest <em>path</em> <a class="header-anchor" href="#manifest-path" aria-label="Permalink to &quot;-manifest _path_&quot;">​</a></h3><p>マニフェストアデンドファイルを提供します。</p><h3 id="module-name-name-native" tabindex="-1">-module-name <em>name</em> (Native) <a class="header-anchor" href="#module-name-name-native" aria-label="Permalink to &quot;-module-name _name_ (Native)&quot;">​</a></h3><p>コンパイルモジュールの名前を指定します。 このオプションは、Objective-Cにエクスポートされる宣言の名前プレフィックスを指定するためにも使用できます。 <a href="/ja/kotlin/native-faq#how-do-i-specify-a-custom-objective-c-prefix-name-for-my-kotlin-framework">KotlinフレームワークのカスタムObjective-Cプレフィックス/名前を指定するにはどうすればよいですか？</a></p><h3 id="native-library-path-nl-path" tabindex="-1">-native-library <em>path</em> (-nl <em>path</em>) <a class="header-anchor" href="#native-library-path-nl-path" aria-label="Permalink to &quot;-native-library _path_ (-nl _path_)&quot;">​</a></h3><p>ネイティブビットコードライブラリを含めます。</p><h3 id="no-default-libs" tabindex="-1">-no-default-libs <a class="header-anchor" href="#no-default-libs" aria-label="Permalink to &quot;-no-default-libs&quot;">​</a></h3><p>コンパイラと一緒に配布されるビルド済みの<a href="/ja/kotlin/native-platform-libs">プラットフォームライブラリ</a>とユーザーコードのリンクを無効にします。</p><h3 id="nomain" tabindex="-1">-nomain <a class="header-anchor" href="#nomain" aria-label="Permalink to &quot;-nomain&quot;">​</a></h3><p><code>main</code>エントリポイントが外部ライブラリによって提供されるものと仮定します。</p><h3 id="nopack" tabindex="-1">-nopack <a class="header-anchor" href="#nopack" aria-label="Permalink to &quot;-nopack&quot;">​</a></h3><p>ライブラリをklibファイルにパックしません。</p><h3 id="linker-option" tabindex="-1">-linker-option <a class="header-anchor" href="#linker-option" aria-label="Permalink to &quot;-linker-option&quot;">​</a></h3><p>バイナリビルド中にリンカに引数を渡します。これは、一部のネイティブライブラリとリンクするために使用できます。</p><h3 id="linker-options-args" tabindex="-1">-linker-options <em>args</em> <a class="header-anchor" href="#linker-options-args" aria-label="Permalink to &quot;-linker-options _args_&quot;">​</a></h3><p>バイナリビルド中にリンカに複数の引数を渡します。引数は空白で区切ります。</p><h3 id="nostdlib" tabindex="-1">-nostdlib <a class="header-anchor" href="#nostdlib" aria-label="Permalink to &quot;-nostdlib&quot;">​</a></h3><p>stdlibとリンクしません。</p><h3 id="opt" tabindex="-1">-opt <a class="header-anchor" href="#opt" aria-label="Permalink to &quot;-opt&quot;">​</a></h3><p>コンパイル最適化を有効にし、より良いランタイムパフォーマンスを持つバイナリを生成します。 最適化レベルを下げる<a href="#g"><code>-g</code></a>オプションと組み合わせて使用することは推奨されません。</p><h3 id="output-name-o-name" tabindex="-1">-output <em>name</em> (-o <em>name</em>) <a class="header-anchor" href="#output-name-o-name" aria-label="Permalink to &quot;-output _name_ (-o _name_)&quot;">​</a></h3><p>出力ファイルの名前を設定します。</p><h3 id="entry-name-e-name" tabindex="-1">-entry <em>name</em> (-e <em>name</em>) <a class="header-anchor" href="#entry-name-e-name" aria-label="Permalink to &quot;-entry _name_ (-e _name_)&quot;">​</a></h3><p>修飾されたエントリポイント名を指定します。</p><h3 id="produce-output-p-output" tabindex="-1">-produce <em>output</em> (-p <em>output</em>) <a class="header-anchor" href="#produce-output-p-output" aria-label="Permalink to &quot;-produce _output_ (-p _output_)&quot;">​</a></h3><p>出力ファイルの種類を指定します。</p><ul><li><code>program</code></li><li><code>static</code></li><li><code>dynamic</code></li><li><code>framework</code></li><li><code>library</code></li><li><code>bitcode</code></li></ul><h3 id="repo-path-r-path" tabindex="-1">-repo <em>path</em> (-r <em>path</em>) <a class="header-anchor" href="#repo-path-r-path" aria-label="Permalink to &quot;-repo _path_ (-r _path_)&quot;">​</a></h3><p>ライブラリ検索パス。詳細については、<a href="/ja/kotlin/native-libraries#library-search-sequence">ライブラリ検索シーケンス</a>を参照してください。</p><h3 id="target-target" tabindex="-1">-target <em>target</em> <a class="header-anchor" href="#target-target" aria-label="Permalink to &quot;-target _target_&quot;">​</a></h3><p>ハードウェアターゲットを設定します。利用可能なターゲットのリストを表示するには、<a href="#list-targets"><code>-list-targets</code></a>オプションを使用します。</p>',72))])}const _=n(p,[["render",h]]);export{f as __pageData,_ as default};
