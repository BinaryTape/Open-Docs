import{_ as t,c as r,o as e,ag as a}from"./chunks/framework.Bksy39di.js";const h=JSON.parse('{"title":"Kotlin 2.0 兼容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/compatibility-guide-20.md","filePath":"kotlin/compatibility-guide-20.md","lastUpdated":1754307826000}'),n={name:"kotlin/compatibility-guide-20.md"};function l(s,o,i,p,g,c){return e(),r("div",null,o[0]||(o[0]=[a('<h1 id="kotlin-2-0-兼容性指南" tabindex="-1">Kotlin 2.0 兼容性指南 <a class="header-anchor" href="#kotlin-2-0-兼容性指南" aria-label="Permalink to &quot;Kotlin 2.0 兼容性指南&quot;">​</a></h1><p><em><a href="/kotlin/kotlin-evolution-principles">保持语言现代化</a></em> 和 <em><a href="/kotlin/kotlin-evolution-principles">舒适的更新</a></em> 是 Kotlin 语言设计的核心原则。前者指出，阻碍语言演进的结构应该被移除；后者则强调，这种移除应提前充分沟通，以使代码迁移尽可能顺畅。</p><p>虽然大部分语言变更已通过其他渠道（例如更新的变更日志或编译器警告）发布，但本文档提供了从 Kotlin 1.9 到 Kotlin 2.0 迁移的完整参考。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin K2 编译器作为 Kotlin 2.0 的一部分引入。关于新编译器的优势、迁移期间可能遇到的变更以及如何回滚到之前的编译器，请参见 <a href="/kotlin/k2-compiler-migration-guide">K2 编译器迁移指南</a>。</p></div><h2 id="基本术语" tabindex="-1">基本术语 <a class="header-anchor" href="#基本术语" aria-label="Permalink to &quot;基本术语&quot;">​</a></h2><p>本文档介绍了多种兼容性：</p><ul><li><em>源</em>：源不兼容变更指导致过去能正常编译（无错误或警告）的代码无法再编译。</li><li><em>二进制</em>：如果互换两个二进制 artifact 不会导致加载或链接错误，则称它们是二进制兼容的。</li><li><em>行为</em>：如果相同的程序在应用变更前后表现出不同的行为，则称该变更为行为不兼容。</li></ul><p>请注意，这些定义仅适用于纯 Kotlin。Kotlin 代码与其他语言（例如 Java）的兼容性不在本文档的讨论范围之内。</p><h2 id="语言" tabindex="-1">语言 <a class="header-anchor" href="#语言" aria-label="Permalink to &quot;语言&quot;">​</a></h2><h3 id="废弃在投影接收者上使用合成-setter" tabindex="-1">废弃在投影接收者上使用合成 setter <a class="header-anchor" href="#废弃在投影接收者上使用合成-setter" aria-label="Permalink to &quot;废弃在投影接收者上使用合成 setter&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-54309" target="_blank" rel="noreferrer">KT-54309</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>简要概述</strong>：如果您使用 Java 类的合成 setter 赋值一个与该类的投影类型冲突的类型，则会触发错误。</p><p><strong>废弃周期</strong>：</p><ul><li>1.8.20：当合成属性 setter 在逆变位置具有投影形参类型，导致调用点实参类型不兼容时，报告警告。</li><li>2.0.0：将警告提升为错误。</li></ul></blockquote><h3 id="更正当调用-java-子类中重载的带有内联类形参的函数时的名字修饰" tabindex="-1">更正当调用 Java 子类中重载的带有内联类形参的函数时的名字修饰 <a class="header-anchor" href="#更正当调用-java-子类中重载的带有内联类形参的函数时的名字修饰" aria-label="Permalink to &quot;更正当调用 Java 子类中重载的带有内联类形参的函数时的名字修饰&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-56545" target="_blank" rel="noreferrer">KT-56545</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：在函数调用中采用正确的名字修饰行为；要恢复到之前的行为，请使用 <code>-XXLanguage:-MangleCallsToJavaMethodsWithValueClasses</code> 编译器选项。</li></ul></blockquote><h3 id="更正逆变捕获类型的类型近似算法" tabindex="-1">更正逆变捕获类型的类型近似算法 <a class="header-anchor" href="#更正逆变捕获类型的类型近似算法" aria-label="Permalink to &quot;更正逆变捕获类型的类型近似算法&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-49404" target="_blank" rel="noreferrer">KT-49404</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>1.8.20：对有问题的调用报告警告</li><li>2.0.0：将警告提升为错误</li></ul></blockquote><h3 id="禁止在属性初始化前访问属性值" tabindex="-1">禁止在属性初始化前访问属性值 <a class="header-anchor" href="#禁止在属性初始化前访问属性值" aria-label="Permalink to &quot;禁止在属性初始化前访问属性值&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-56408" target="_blank" rel="noreferrer">KT-56408</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：当属性在受影响的上下文中使用前被访问时，报告错误。</li></ul></blockquote><h3 id="当导入的同名类存在歧义时报告错误" tabindex="-1">当导入的同名类存在歧义时报告错误 <a class="header-anchor" href="#当导入的同名类存在歧义时报告错误" aria-label="Permalink to &quot;当导入的同名类存在歧义时报告错误&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-57750" target="_blank" rel="noreferrer">KT-57750</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：当解析存在于通过星号导入的多个包中的类名时，报告错误。</li></ul></blockquote><h3 id="默认通过-invokedynamic-和-lambdametafactory-生成-kotlin-lambda-表达式" tabindex="-1">默认通过 invokedynamic 和 LambdaMetafactory 生成 Kotlin lambda 表达式 <a class="header-anchor" href="#默认通过-invokedynamic-和-lambdametafactory-生成-kotlin-lambda-表达式" aria-label="Permalink to &quot;默认通过 invokedynamic 和 LambdaMetafactory 生成 Kotlin lambda 表达式&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-45375" target="_blank" rel="noreferrer">KT-45375</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：实现新行为；lambda 表达式默认使用 <code>invokedynamic</code> 和 <code>LambdaMetafactory</code> 生成。</li></ul></blockquote><h3 id="禁止当需要表达式时-if-条件只有一个分支" tabindex="-1">禁止当需要表达式时 if 条件只有一个分支 <a class="header-anchor" href="#禁止当需要表达式时-if-条件只有一个分支" aria-label="Permalink to &quot;禁止当需要表达式时 if 条件只有一个分支&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-57871" target="_blank" rel="noreferrer">KT-57871</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：如果 <code>if</code> 条件只有一个分支，则报告错误。</li></ul></blockquote><h3 id="禁止通过传递泛型类型的星投影来违反自身上界" tabindex="-1">禁止通过传递泛型类型的星投影来违反自身上界 <a class="header-anchor" href="#禁止通过传递泛型类型的星投影来违反自身上界" aria-label="Permalink to &quot;禁止通过传递泛型类型的星投影来违反自身上界&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-61718" target="_blank" rel="noreferrer">KT-61718</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：当通过传递泛型类型的星投影违反自身上界时，报告错误。</li></ul></blockquote><h3 id="近似私有内联函数的返回类型中的匿名类型" tabindex="-1">近似私有内联函数的返回类型中的匿名类型 <a class="header-anchor" href="#近似私有内联函数的返回类型中的匿名类型" aria-label="Permalink to &quot;近似私有内联函数的返回类型中的匿名类型&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-54862" target="_blank" rel="noreferrer">KT-54862</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>1.9.0：如果推断的返回类型包含匿名类型，则对私有内联函数报告警告。</li><li>2.0.0：将此类私有内联函数的返回类型近似为超类型。</li></ul></blockquote><h3 id="变更重载解析行为-以优先处理本地扩展函数调用而非本地函数类型属性的-invoke-约定" tabindex="-1">变更重载解析行为，以优先处理本地扩展函数调用而非本地函数类型属性的 invoke 约定 <a class="header-anchor" href="#变更重载解析行为-以优先处理本地扩展函数调用而非本地函数类型属性的-invoke-约定" aria-label="Permalink to &quot;变更重载解析行为，以优先处理本地扩展函数调用而非本地函数类型属性的 invoke 约定&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-37592" target="_blank" rel="noreferrer">KT-37592</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：新的重载解析行为；函数调用始终优先于 invoke 约定。</li></ul></blockquote><h3 id="当由于二进制依赖项中的超类型变更导致继承成员冲突时报告错误" tabindex="-1">当由于二进制依赖项中的超类型变更导致继承成员冲突时报告错误 <a class="header-anchor" href="#当由于二进制依赖项中的超类型变更导致继承成员冲突时报告错误" aria-label="Permalink to &quot;当由于二进制依赖项中的超类型变更导致继承成员冲突时报告错误&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-51194" target="_blank" rel="noreferrer">KT-51194</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>1.7.0：对从二进制依赖项的超类型中发生继承成员冲突的声明报告警告 CONFLICTING_INHERITED_MEMBERS_WARNING。</li><li>2.0.0：将警告提升为错误：CONFLICTING_INHERITED_MEMBERS。</li></ul></blockquote><h3 id="忽略不型变类型中形参上的-unsafevariance-注解" tabindex="-1">忽略不型变类型中形参上的 @UnsafeVariance 注解 <a class="header-anchor" href="#忽略不型变类型中形参上的-unsafevariance-注解" aria-label="Permalink to &quot;忽略不型变类型中形参上的 @UnsafeVariance 注解&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-57609" target="_blank" rel="noreferrer">KT-57609</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：实现新行为；当报告逆变形参中的类型不匹配错误时，将忽略 <code>@UnsafeVariance</code> 注解。</li></ul></blockquote><h3 id="变更伴生对象成员的调用外部引用的类型" tabindex="-1">变更伴生对象成员的调用外部引用的类型 <a class="header-anchor" href="#变更伴生对象成员的调用外部引用的类型" aria-label="Permalink to &quot;变更伴生对象成员的调用外部引用的类型&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-54316" target="_blank" rel="noreferrer">KT-54316</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>1.8.20：当伴生对象函数引用类型被推断为非绑定引用时，报告警告。</li><li>2.0.0：变更行为，以便在所有使用上下文中，伴生对象函数引用都被推断为绑定引用。</li></ul></blockquote><h3 id="禁止私有内联函数暴露匿名类型" tabindex="-1">禁止私有内联函数暴露匿名类型 <a class="header-anchor" href="#禁止私有内联函数暴露匿名类型" aria-label="Permalink to &quot;禁止私有内联函数暴露匿名类型&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-33917" target="_blank" rel="noreferrer">KT-33917</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>1.3.0：对从私有内联函数返回的匿名对象的自身成员调用报告警告。</li><li>2.0.0：将此类私有内联函数的返回类型近似为超类型，并且不解析对匿名对象成员的调用。</li></ul></blockquote><h3 id="报告-while-循环中断后不健全智能类型转换的错误" tabindex="-1">报告 while 循环中断后不健全智能类型转换的错误 <a class="header-anchor" href="#报告-while-循环中断后不健全智能类型转换的错误" aria-label="Permalink to &quot;报告 while 循环中断后不健全智能类型转换的错误&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-22379" target="_blank" rel="noreferrer">KT-22379</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：实现新行为；通过切换到语言版本 1.9 可以恢复旧行为。</li></ul></blockquote><h3 id="当交集类型变量被赋值一个不是该交集类型子类型的值时报告错误" tabindex="-1">当交集类型变量被赋值一个不是该交集类型子类型的值时报告错误 <a class="header-anchor" href="#当交集类型变量被赋值一个不是该交集类型子类型的值时报告错误" aria-label="Permalink to &quot;当交集类型变量被赋值一个不是该交集类型子类型的值时报告错误&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-53752" target="_blank" rel="noreferrer">KT-53752</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：当交集类型变量被赋值一个不是该交集类型子类型的值时，报告错误。</li></ul></blockquote><h3 id="要求当用-sam-构造函数构造的接口包含一个需要选择启用的方法时选择启用" tabindex="-1">要求当用 SAM 构造函数构造的接口包含一个需要选择启用的方法时选择启用 <a class="header-anchor" href="#要求当用-sam-构造函数构造的接口包含一个需要选择启用的方法时选择启用" aria-label="Permalink to &quot;要求当用 SAM 构造函数构造的接口包含一个需要选择启用的方法时选择启用&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-52628" target="_blank" rel="noreferrer">KT-52628</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>1.7.20：对通过 SAM 构造函数使用 <code>OptIn</code> 的情况报告警告。</li><li>2.0.0：对通过 SAM 构造函数使用 <code>OptIn</code> 的情况将警告提升为错误（如果 <code>OptIn</code> 标记的严重性为警告，则继续报告警告）。</li></ul></blockquote><h3 id="禁止类型别名构造函数中违反上界" tabindex="-1">禁止类型别名构造函数中违反上界 <a class="header-anchor" href="#禁止类型别名构造函数中违反上界" aria-label="Permalink to &quot;禁止类型别名构造函数中违反上界&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-54066" target="_blank" rel="noreferrer">KT-54066</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>1.8.0：对类型别名构造函数中违反上界的情况引入警告。</li><li>2.0.0：在 K2 编译器中将警告提升为错误。</li></ul></blockquote><h3 id="使解构变量的真实类型与指定时的显式类型保持一致" tabindex="-1">使解构变量的真实类型与指定时的显式类型保持一致 <a class="header-anchor" href="#使解构变量的真实类型与指定时的显式类型保持一致" aria-label="Permalink to &quot;使解构变量的真实类型与指定时的显式类型保持一致&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-57011" target="_blank" rel="noreferrer">KT-57011</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：实现新行为；解构变量的真实类型现在与指定时的显式类型保持一致。</li></ul></blockquote><h3 id="要求当调用具有需要选择启用的默认值形参类型的构造函数时选择启用" tabindex="-1">要求当调用具有需要选择启用的默认值形参类型的构造函数时选择启用 <a class="header-anchor" href="#要求当调用具有需要选择启用的默认值形参类型的构造函数时选择启用" aria-label="Permalink to &quot;要求当调用具有需要选择启用的默认值形参类型的构造函数时选择启用&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-55111" target="_blank" rel="noreferrer">KT-55111</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>1.8.20：对具有需要选择启用形参类型的构造函数调用报告警告。</li><li>2.0.0：将警告提升为错误（如果 <code>OptIn</code> 标记的严重性为警告，则继续报告警告）。</li></ul></blockquote><h3 id="在同一作用域级别具有相同名称的属性和枚举条目之间存在歧义时报告错误" tabindex="-1">在同一作用域级别具有相同名称的属性和枚举条目之间存在歧义时报告错误 <a class="header-anchor" href="#在同一作用域级别具有相同名称的属性和枚举条目之间存在歧义时报告错误" aria-label="Permalink to &quot;在同一作用域级别具有相同名称的属性和枚举条目之间存在歧义时报告错误&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-52802" target="_blank" rel="noreferrer">KT-52802</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>1.7.20：当编译器在同一作用域级别解析为属性而非枚举条目时，报告警告。</li><li>2.0.0：当 K2 编译器在同一作用域级别同时遇到具有相同名称的属性和枚举条目时，报告歧义（在旧编译器中保留警告不变）。</li></ul></blockquote><h3 id="变更限定符解析行为以优先选择伴生属性而非枚举条目" tabindex="-1">变更限定符解析行为以优先选择伴生属性而非枚举条目 <a class="header-anchor" href="#变更限定符解析行为以优先选择伴生属性而非枚举条目" aria-label="Permalink to &quot;变更限定符解析行为以优先选择伴生属性而非枚举条目&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-47310" target="_blank" rel="noreferrer">KT-47310</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：实现新解析行为；伴生属性优先于枚举条目。</li></ul></blockquote><h3 id="解析-invoke-调用接收者类型和-invoke-函数类型-如同它们以脱糖形式编写" tabindex="-1">解析 invoke 调用接收者类型和 invoke 函数类型，如同它们以脱糖形式编写 <a class="header-anchor" href="#解析-invoke-调用接收者类型和-invoke-函数类型-如同它们以脱糖形式编写" aria-label="Permalink to &quot;解析 invoke 调用接收者类型和 invoke 函数类型，如同它们以脱糖形式编写&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-58260" target="_blank" rel="noreferrer">KT-58260</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：独立解析 invoke 调用接收者类型和 invoke 函数类型，如同它们以脱糖形式编写。</li></ul></blockquote><h3 id="禁止通过非私有内联函数暴露私有类成员" tabindex="-1">禁止通过非私有内联函数暴露私有类成员 <a class="header-anchor" href="#禁止通过非私有内联函数暴露私有类成员" aria-label="Permalink to &quot;禁止通过非私有内联函数暴露私有类成员&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-55179" target="_blank" rel="noreferrer">KT-55179</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>1.9.0：当从内部内联函数调用私有类伴生对象成员时，报告 <code>PRIVATE_CLASS_MEMBER_FROM_INLINE_WARNING</code> 警告。</li><li>2.0.0：将此警告提升为 <code>PRIVATE_CLASS_MEMBER_FROM_INLINE</code> 错误。</li></ul></blockquote><h3 id="更正投影泛型类型中确定非空类型的可空性" tabindex="-1">更正投影泛型类型中确定非空类型的可空性 <a class="header-anchor" href="#更正投影泛型类型中确定非空类型的可空性" aria-label="Permalink to &quot;更正投影泛型类型中确定非空类型的可空性&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-54663" target="_blank" rel="noreferrer">KT-54663</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：实现新行为；投影类型会考虑所有原地非空类型。</li></ul></blockquote><h3 id="变更前缀自增的推断类型-以匹配-getter-的返回类型而非-inc-操作符的返回类型" tabindex="-1">变更前缀自增的推断类型，以匹配 getter 的返回类型而非 inc() 操作符的返回类型 <a class="header-anchor" href="#变更前缀自增的推断类型-以匹配-getter-的返回类型而非-inc-操作符的返回类型" aria-label="Permalink to &quot;变更前缀自增的推断类型，以匹配 getter 的返回类型而非 inc() 操作符的返回类型&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-57178" target="_blank" rel="noreferrer">KT-57178</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：实现新行为；前缀自增的推断类型已更改为匹配 getter 的返回类型，而非 <code>inc()</code> 操作符的返回类型。</li></ul></blockquote><h3 id="强制当从超类中声明的泛型内部类继承内部类时进行边界检测" tabindex="-1">强制当从超类中声明的泛型内部类继承内部类时进行边界检测 <a class="header-anchor" href="#强制当从超类中声明的泛型内部类继承内部类时进行边界检测" aria-label="Permalink to &quot;强制当从超类中声明的泛型内部类继承内部类时进行边界检测&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-61749" target="_blank" rel="noreferrer">KT-61749</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：当泛型内部超类的类型形参上界被违反时，报告错误。</li></ul></blockquote><h3 id="禁止当预期类型是带有函数类型形参的函数类型时-对带有-sam-类型的可调用引用进行赋值" tabindex="-1">禁止当预期类型是带有函数类型形参的函数类型时，对带有 SAM 类型的可调用引用进行赋值 <a class="header-anchor" href="#禁止当预期类型是带有函数类型形参的函数类型时-对带有-sam-类型的可调用引用进行赋值" aria-label="Permalink to &quot;禁止当预期类型是带有函数类型形参的函数类型时，对带有 SAM 类型的可调用引用进行赋值&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-64342" target="_blank" rel="noreferrer">KT-64342</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：当预期类型是带有函数类型形参的函数类型时，对带有 SAM 类型的可调用引用报告编译错误。</li></ul></blockquote><h3 id="考虑伴生对象作用域以解析伴生对象上的注解" tabindex="-1">考虑伴生对象作用域以解析伴生对象上的注解 <a class="header-anchor" href="#考虑伴生对象作用域以解析伴生对象上的注解" aria-label="Permalink to &quot;考虑伴生对象作用域以解析伴生对象上的注解&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-64299" target="_blank" rel="noreferrer">KT-64299</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：实现新行为；现在在伴生对象上的注解解析期间不再忽略伴生对象作用域。</li></ul></blockquote><h3 id="变更安全调用和约定操作符组合的求值语义" tabindex="-1">变更安全调用和约定操作符组合的求值语义 <a class="header-anchor" href="#变更安全调用和约定操作符组合的求值语义" aria-label="Permalink to &quot;变更安全调用和约定操作符组合的求值语义&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-41034" target="_blank" rel="noreferrer">KT-41034</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>废弃周期</strong>：</p><ul><li>1.4.0：对每个不正确的调用报告警告。</li><li>2.0.0：实现新解析行为。</li></ul></blockquote><h3 id="要求具有幕后字段和自定义-setter-的属性立即初始化" tabindex="-1">要求具有幕后字段和自定义 setter 的属性立即初始化 <a class="header-anchor" href="#要求具有幕后字段和自定义-setter-的属性立即初始化" aria-label="Permalink to &quot;要求具有幕后字段和自定义 setter 的属性立即初始化&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-58589" target="_blank" rel="noreferrer">KT-58589</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>废弃周期</strong>：</p><ul><li>1.9.20：对没有主构造函数的情况引入 <code>MUST_BE_INITIALIZED</code> 警告。</li><li>2.0.0：将警告提升为错误。</li></ul></blockquote><h3 id="禁止在-invoke-操作符约定调用中对任意表达式进行-unit-转换" tabindex="-1">禁止在 invoke 操作符约定调用中对任意表达式进行 Unit 转换 <a class="header-anchor" href="#禁止在-invoke-操作符约定调用中对任意表达式进行-unit-转换" aria-label="Permalink to &quot;禁止在 invoke 操作符约定调用中对任意表达式进行 Unit 转换&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-61182" target="_blank" rel="noreferrer">KT-61182</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：当 Unit 转换应用于变量和 invoke 解析中的任意表达式时，报告错误；使用 <code>-XXLanguage:+UnitConversionsOnArbitraryExpressions</code> 编译器选项可保留受影响表达式的旧行为。</li></ul></blockquote><h3 id="禁止当字段通过安全调用访问时对非空-java-字段进行可空赋值" tabindex="-1">禁止当字段通过安全调用访问时对非空 Java 字段进行可空赋值 <a class="header-anchor" href="#禁止当字段通过安全调用访问时对非空-java-字段进行可空赋值" aria-label="Permalink to &quot;禁止当字段通过安全调用访问时对非空 Java 字段进行可空赋值&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-62998" target="_blank" rel="noreferrer">KT-62998</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：当可空值被赋值给非空 Java 字段时，报告错误。</li></ul></blockquote><h3 id="要求当覆盖包含原始类型形参的-java-方法时使用星投影类型" tabindex="-1">要求当覆盖包含原始类型形参的 Java 方法时使用星投影类型 <a class="header-anchor" href="#要求当覆盖包含原始类型形参的-java-方法时使用星投影类型" aria-label="Permalink to &quot;要求当覆盖包含原始类型形参的 Java 方法时使用星投影类型&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-57600" target="_blank" rel="noreferrer">KT-57600</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：实现新行为；原始类型形参的覆盖被禁止。</li></ul></blockquote><h3 id="变更当-v-具有伴生对象时-v-foo-引用的解析" tabindex="-1">变更当 V 具有伴生对象时 (V)::foo 引用的解析 <a class="header-anchor" href="#变更当-v-具有伴生对象时-v-foo-引用的解析" aria-label="Permalink to &quot;变更当 V 具有伴生对象时 (V)::foo 引用的解析&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-47313" target="_blank" rel="noreferrer">KT-47313</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>废弃周期</strong>：</p><ul><li>1.6.0：对当前绑定到伴生对象实例的可调用引用报告警告。</li><li>2.0.0：实现新行为；在类型周围添加圆括号不再使其成为该类型的伴生对象实例的引用。</li></ul></blockquote><h3 id="禁止在实际公共内联函数中隐式访问非公共-api" tabindex="-1">禁止在实际公共内联函数中隐式访问非公共 API <a class="header-anchor" href="#禁止在实际公共内联函数中隐式访问非公共-api" aria-label="Permalink to &quot;禁止在实际公共内联函数中隐式访问非公共 API&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-54997" target="_blank" rel="noreferrer">KT-54997</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>1.8.20：当公共内联函数中隐式访问非公共 API 时，报告编译警告。</li><li>2.0.0：将警告提升为错误。</li></ul></blockquote><h3 id="禁止在属性-getter-上使用点-get-注解" tabindex="-1">禁止在属性 getter 上使用点 get 注解 <a class="header-anchor" href="#禁止在属性-getter-上使用点-get-注解" aria-label="Permalink to &quot;禁止在属性 getter 上使用点 get 注解&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-57422" target="_blank" rel="noreferrer">KT-57422</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>1.9.0：对 getter 上的使用点 <code>get</code> 注解报告警告（在渐进模式下为错误）。</li><li>2.0.0：将警告提升为 <code>INAPPLICABLE_TARGET_ON_PROPERTY</code> 错误；使用 <code>-XXLanguage:-ProhibitUseSiteGetTargetAnnotations</code> 可恢复为警告。</li></ul></blockquote><h3 id="阻止构建器推断-lambda-函数中类型形参的隐式推断到上界" tabindex="-1">阻止构建器推断 lambda 函数中类型形参的隐式推断到上界 <a class="header-anchor" href="#阻止构建器推断-lambda-函数中类型形参的隐式推断到上界" aria-label="Permalink to &quot;阻止构建器推断 lambda 函数中类型形参的隐式推断到上界&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-47986" target="_blank" rel="noreferrer">KT-47986</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>1.7.20：当类型实参的类型形参无法推断到声明的上界时，报告警告（在渐进模式下为错误）。</li><li>2.0.0：将警告提升为错误。</li></ul></blockquote><h3 id="在公共签名中近似本地类型时保持可空性" tabindex="-1">在公共签名中近似本地类型时保持可空性 <a class="header-anchor" href="#在公共签名中近似本地类型时保持可空性" aria-label="Permalink to &quot;在公共签名中近似本地类型时保持可空性&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-53982" target="_blank" rel="noreferrer">KT-53982</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>1.8.0：柔性类型通过柔性超类型近似；当声明被推断为非空类型但应为可空类型时，报告警告，提示显式指定类型以避免 NPEs。</li><li>2.0.0：可空类型通过可空超类型近似。</li></ul></blockquote><h3 id="移除-false-和-false-为了智能类型转换目的的特殊处理" tabindex="-1">移除 false &amp;&amp; ... 和 false || ... 为了智能类型转换目的的特殊处理 <a class="header-anchor" href="#移除-false-和-false-为了智能类型转换目的的特殊处理" aria-label="Permalink to &quot;移除 false &amp;&amp; ... 和 false || ... 为了智能类型转换目的的特殊处理&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-65776" target="_blank" rel="noreferrer">KT-65776</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：实现新行为；对 <code>false &amp;&amp; ...</code> 和 <code>false || ...</code> 不再有特殊处理。</li></ul></blockquote><h3 id="禁止枚举中的内联开放函数" tabindex="-1">禁止枚举中的内联开放函数 <a class="header-anchor" href="#禁止枚举中的内联开放函数" aria-label="Permalink to &quot;禁止枚举中的内联开放函数&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-34372" target="_blank" rel="noreferrer">KT-34372</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>废弃周期</strong>：</p><ul><li>1.8.0：对枚举中的内联开放函数报告警告。</li><li>2.0.0：将警告提升为错误。</li></ul></blockquote><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="gradle-中的可见性变更" tabindex="-1">Gradle 中的可见性变更 <a class="header-anchor" href="#gradle-中的可见性变更" aria-label="Permalink to &quot;Gradle 中的可见性变更&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-64653" target="_blank" rel="noreferrer">KT-64653</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>简要概述</strong>：此前，某些旨在用于特定 DSL 上下文的 Kotlin DSL 函数和属性会无意中泄漏到其他 DSL 上下文。我们已添加 <code>@KotlinGradlePluginDsl</code> 注解，这阻止了 Kotlin Gradle 插件 DSL 函数和属性暴露到不打算可用的级别。以下级别彼此分离：</p><ul><li>Kotlin 扩展</li><li>Kotlin 目标</li><li>Kotlin 编译项</li><li>Kotlin 编译任务</li></ul><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：对于大多数常见情况，如果您的构建脚本配置不正确，编译器会报告警告并提供修复建议；否则，编译器会报告错误。</li></ul></blockquote><h3 id="废弃-kotlinoptions-dsl" tabindex="-1">废弃 kotlinOptions DSL <a class="header-anchor" href="#废弃-kotlinoptions-dsl" aria-label="Permalink to &quot;废弃 kotlinOptions DSL&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-63419" target="_blank" rel="noreferrer">KT-63419</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>简要概述</strong>：通过 <code>kotlinOptions</code> DSL 和相关 <code>KotlinCompile&lt;KotlinOptions&gt;</code> 任务接口配置编译器选项的能力已被废弃。</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：报告警告。</li></ul></blockquote><h3 id="废弃-kotlincompilation-dsl-中的-compileroptions" tabindex="-1">废弃 KotlinCompilation DSL 中的 compilerOptions <a class="header-anchor" href="#废弃-kotlincompilation-dsl-中的-compileroptions" aria-label="Permalink to &quot;废弃 KotlinCompilation DSL 中的 compilerOptions&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-65568" target="_blank" rel="noreferrer">KT-65568</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>简要概述</strong>：在 <code>KotlinCompilation</code> DSL 中配置 <code>compilerOptions</code> 属性的能力已被废弃。</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：报告警告。</li></ul></blockquote><h3 id="废弃-cinteropprocess-处理的旧方式" tabindex="-1">废弃 CInteropProcess 处理的旧方式 <a class="header-anchor" href="#废弃-cinteropprocess-处理的旧方式" aria-label="Permalink to &quot;废弃 CInteropProcess 处理的旧方式&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-62795" target="_blank" rel="noreferrer">KT-62795</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>简要概述</strong>：<code>CInteropProcess</code> 任务和 <code>CInteropSettings</code> 类现在使用 <code>definitionFile</code> 属性，而不是 <code>defFile</code> 和 <code>defFileProperty</code>。</p><p>这消除了当 <code>defFile</code> 动态生成时，在 <code>CInteropProcess</code> 任务和生成 <code>defFile</code> 的任务之间添加额外 <code>dependsOn</code> 关联的需要。</p><p>在 Kotlin/Native 项目中，Gradle 现在会在构建过程后期，连接的任务运行后惰性验证 <code>definitionFile</code> 属性的存在。</p><p><strong>废弃周期</strong>：</p><ul><li>2.0.0：<code>defFile</code> 和 <code>defFileProperty</code> 形参被废弃。</li></ul></blockquote><h3 id="移除-kotlin-usek2-gradle-属性" tabindex="-1">移除 kotlin.useK2 Gradle 属性 <a class="header-anchor" href="#移除-kotlin-usek2-gradle-属性" aria-label="Permalink to &quot;移除 kotlin.useK2 Gradle 属性&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-64379" target="_blank" rel="noreferrer">KT-64379</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：<code>kotlin.useK2</code> Gradle 属性已被移除。在 Kotlin 1.9.* 中，它可用于启用 K2 编译器。在 Kotlin 2.0.0 及更高版本中，K2 编译器默认启用，因此该属性不再有效果，也无法用于切换回之前的编译器。</p><p><strong>废弃周期</strong>：</p><ul><li>1.8.20：<code>kotlin.useK2</code> Gradle 属性被废弃。</li><li>2.0.0：<code>kotlin.useK2</code> Gradle 属性被移除。</li></ul></blockquote><h3 id="移除已废弃的平台插件-id" tabindex="-1">移除已废弃的平台插件 ID <a class="header-anchor" href="#移除已废弃的平台插件-id" aria-label="Permalink to &quot;移除已废弃的平台插件 ID&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-65187" target="_blank" rel="noreferrer">KT-65187</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>简要概述</strong>：对这些平台插件 ID 的支持已被移除：</p><ul><li><code>kotlin-platform-android</code></li><li><code>kotlin-platform-jvm</code></li><li><code>kotlin-platform-js</code></li><li><code>org.jetbrains.kotlin.platform.android</code></li><li><code>org.jetbrains.kotlin.platform.jvm</code></li><li><code>org.jetbrains.kotlin.platform.js</code></li></ul><p><strong>废弃周期</strong>：</p><ul><li>1.3：平台插件 ID 被废弃。</li><li>2.0.0：平台插件 ID 不再受支持。</li></ul></blockquote><h3 id="移除-outputfile-javascript-编译器选项" tabindex="-1">移除 outputFile JavaScript 编译器选项 <a class="header-anchor" href="#移除-outputfile-javascript-编译器选项" aria-label="Permalink to &quot;移除 outputFile JavaScript 编译器选项&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-61116" target="_blank" rel="noreferrer">KT-61116</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源</p><p><strong>简要概述</strong>：<code>outputFile</code> JavaScript 编译器选项已被移除。取而代之，您可以使用 <code>Kotlin2JsCompile</code> 任务的 <code>destinationDirectory</code> 属性来指定编译后的 JavaScript 输出文件写入的目录。</p><p><strong>废弃周期</strong>：</p><ul><li>1.9.25：<code>outputFile</code> 编译器选项被废弃。</li><li>2.0.0：<code>outputFile</code> 编译器选项被移除。</li></ul></blockquote>',106)]))}const d=t(n,[["render",l]]);export{h as __pageData,d as default};
