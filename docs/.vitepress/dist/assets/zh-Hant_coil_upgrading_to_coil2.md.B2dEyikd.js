import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"升級到 Coil 2.x","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/coil/upgrading_to_coil2.md","filePath":"zh-Hant/coil/upgrading_to_coil2.md","lastUpdated":1753369988000}'),l={name:"zh-Hant/coil/upgrading_to_coil2.md"};function t(h,s,p,k,d,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="升級到-coil-2-x" tabindex="-1">升級到 Coil 2.x <a class="header-anchor" href="#升級到-coil-2-x" aria-label="Permalink to &quot;升級到 Coil 2.x&quot;">​</a></h1><p>這是一份簡短指南，重點說明從 Coil 1.x 升級到 2.x 時的主要變更以及如何處理這些變更。本升級指南未涵蓋所有二進位或原始碼不相容的變更，但它涵蓋了最重要的變更。</p><h2 id="最低-api-21" tabindex="-1">最低 API 21 <a class="header-anchor" href="#最低-api-21" aria-label="Permalink to &quot;最低 API 21&quot;">​</a></h2><p>Coil 2.x 需要最低 API 21。這也是 Compose 和 OkHttp 4.x 所需的最低 API。</p><h2 id="imagerequest-預設縮放" tabindex="-1">ImageRequest 預設縮放 <a class="header-anchor" href="#imagerequest-預設縮放" aria-label="Permalink to &quot;ImageRequest 預設縮放&quot;">​</a></h2><p>Coil 2.x 將 <code>ImageRequest</code> 的預設縮放從 <code>Scale.FILL</code> 變更為 <code>Scale.FIT</code>。這樣做的目的是為了與 <code>ImageView</code> 的預設 <code>ScaleType</code> 和 <code>Image</code> 的預設 <code>ContentScale</code> 保持一致。如果您將 <code>ImageView</code> 設定為 <code>ImageRequest.target</code>，縮放比例仍會自動偵測。</p><h2 id="size-重構" tabindex="-1">Size 重構 <a class="header-anchor" href="#size-重構" aria-label="Permalink to &quot;Size 重構&quot;">​</a></h2><p><code>Size</code> 的 <code>width</code> 和 <code>height</code> 現在是兩個 <code>Dimension</code>，而不是 <code>Int</code> 像素值。<code>Dimension</code> 可以是像素值或 <code>Dimension.Undefined</code>，後者表示未定義/無邊界的約束。例如，如果大小是 <code>Size(400, Dimension.Undefined)</code>，這表示影像應該按其寬度縮放為 400 像素，不論其高度如何。您可以使用 <code>pxOrElse</code> 擴展函數來取得像素值（如果存在），否則使用備用值：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size.width.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pxOrElse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用像素值。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>這項變更旨在改進對目標具有一個無邊界維度（例如，如果一個維度是 <code>View</code> 的 <code>ViewGroup.LayoutParams.WRAP_CONTENT</code> 或 Compose 中的 <code>Constraints.Infinity</code>）情況的支援。</p><h2 id="compose" tabindex="-1">Compose <a class="header-anchor" href="#compose" aria-label="Permalink to &quot;Compose&quot;">​</a></h2><p>Coil 2.x 大幅重構了 Compose 整合，以新增功能、提高穩定性並改善效能。</p><p>在 Coil 1.x 中，您會使用 <code>rememberImagePainter</code> 來載入影像：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> painter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberImagePainter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    painter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> painter,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>在 Coil 2.x 中，<code>rememberImagePainter</code> 已變更為 <code>rememberAsyncImagePainter</code>，並有以下變更：</p><ul><li>用於配置 <code>ImageRequest</code> 的尾隨 lambda 參數已移除。</li><li>在 Coil 2.x 中，<code>rememberAsyncImagePainter</code> 預設使用 <code>ContentScale.Fit</code> 以與 <code>Image</code> 保持一致，而在 Coil 1.x 中它會預設為 <code>ContentScale.Crop</code>。因此，如果您在 <code>Image</code> 上設定了自訂 <code>ContentScale</code>，您現在也需要將其傳遞給 <code>rememberAsyncImagePainter</code>。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> painter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberAsyncImagePainter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalContext.current)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    painter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> painter,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>此外，Coil 現在擁有 <code>AsyncImage</code> 和 <code>SubcomposeAsyncImage</code> 可組合函數，它們新增了新功能並解決了 <code>rememberAsyncImagePainter</code> 的一些設計限制。請查看<a href="./compose">此處</a>完整的 Compose 文件。</p><h2 id="磁碟快取" tabindex="-1">磁碟快取 <a class="header-anchor" href="#磁碟快取" aria-label="Permalink to &quot;磁碟快取&quot;">​</a></h2><p>Coil 2.x 擁有自己的公共磁碟快取類別，可以使用 <code>imageLoader.diskCache</code> 存取。Coil 1.x 依賴於 OkHttp 的磁碟快取，但它現在不再需要。</p><p>在 1.x 中配置磁碟快取時，您會使用 <code>CoilUtils.createDefaultCache</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">okHttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        OkHttpClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CoilUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDefaultCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>在 Coil 2.x 中，當與 <code>ImageLoader</code> 一起使用時，您不應在 <code>OkHttpClient</code> 上設定 <code>Cache</code> 物件。而是像這樣配置磁碟快取物件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">diskCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        DiskCache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.cacheDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image_cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>這項變更旨在新增功能並提高效能：</p><ul><li>支援在解碼影像時執行緒中斷。 <ul><li>執行緒中斷允許快速取消解碼操作。這對於快速滾動列表尤其重要。</li><li>透過使用自訂磁碟快取，Coil 能夠確保網路來源在解碼前完整讀取到磁碟。這是必要的，因為將資料寫入磁碟的過程無法中斷——只有解碼步驟可以中斷。OkHttp 的 <code>Cache</code> 不應與 Coil 2.0 一起使用，因為無法保證所有資料在解碼前寫入磁碟。</li></ul></li><li>避免為不支援 <code>InputStream</code> 或需要直接存取 <code>File</code> 的解碼 API 進行緩衝/建立臨時檔案（例如 <code>ImageDecoder</code>、<code>MediaMetadataRetriever</code>）。</li><li>新增公共讀/寫 <code>DiskCache</code> API。</li></ul><p>在 Coil 2.x 中，<code>Cache-Control</code> 和其他快取標頭仍然支援——除了 <code>Vary</code> 標頭，因為快取只檢查 URL 是否匹配。此外，只有響應碼在 [200..300) 範圍內的響應才會被快取。</p><p>從 Coil 1.x 升級到 2.x 時，任何現有的磁碟快取都將被清除，因為內部格式已更改。</p><h2 id="影像管線重構" tabindex="-1">影像管線重構 <a class="header-anchor" href="#影像管線重構" aria-label="Permalink to &quot;影像管線重構&quot;">​</a></h2><p>Coil 2.x 重構了影像管線類別，使其更具彈性。以下是變更的高層次清單：</p><ul><li>引入一個新類別 <code>Keyer</code>，它計算請求的記憶體快取鍵。它取代了 <code>Fetcher.key</code>。</li><li><code>Mapper</code>、<code>Keyer</code>、<code>Fetcher</code> 和 <code>Decoder</code> 可以返回 <code>null</code> 以委派給元件清單中的下一個元素。</li><li>將 <code>Options</code> 添加到 <code>Mapper.map</code> 的簽名中。</li><li>引入 <code>Fetcher.Factory</code> 和 <code>Decoder.Factory</code>。使用這些工廠來判斷特定的 <code>Fetcher</code>/<code>Decoder</code> 是否適用。如果該 <code>Fetcher</code>/<code>Decoder</code> 不適用，則返回 <code>null</code>。</li></ul><h2 id="移除位元圖池" tabindex="-1">移除位元圖池 <a class="header-anchor" href="#移除位元圖池" aria-label="Permalink to &quot;移除位元圖池&quot;">​</a></h2><p>Coil 2.x 移除了位元圖池及其相關類別 (<code>BitmapPool</code>、<code>PoolableViewTarget</code>)。請參閱<a href="https://github.com/coil-kt/coil/discussions/1186#discussioncomment-2305528" target="_blank" rel="noreferrer">此處</a>了解其移除原因。</p>`,33)]))}const E=i(l,[["render",t]]);export{r as __pageData,E as default};
