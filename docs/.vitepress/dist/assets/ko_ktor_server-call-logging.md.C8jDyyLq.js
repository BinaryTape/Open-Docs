import{_ as c,C as n,c as y,o as m,G as a,ag as k,j as i,w as t,a as l}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-call-logging.md","filePath":"ko/ktor/server-call-logging.md","lastUpdated":1755457140000}'),v={name:"ko/ktor/server-call-logging.md"};function F(C,s,f,b,_,q){const h=n("TopicTitle"),d=n("show-structure"),g=n("primary-label"),p=n("Links"),u=n("tldr"),e=n("code-block"),o=n("TabItem"),r=n("Tabs"),E=n("list");return m(),y("div",null,[a(h,{labelRef:"server-plugin",title:"호출 로깅"}),a(d,{for:"chapter",depth:"2"}),a(g,{ref:"server-plugin"},null,512),a(u,null,{default:t(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"필수 의존성"),l(": "),i("code",null,"io.ktor:ktor-server-call-logging")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"코드 예시"),l(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/logging"}," logging ")],-1)),i("p",null,[i("b",null,[a(p,{href:"/ktor/server-native",summary:"Ktor supports Kotlin/Native and allows you to run a server without an additional runtime or virtual machine."},{default:t(()=>s[0]||(s[0]=[l("네이티브 서버")])),_:1}),s[1]||(s[1]=l(" 지원"))]),s[2]||(s[2]=l(": ✖️ "))])]),_:1}),s[17]||(s[17]=k('<p>Ktor는 <a href="http://www.slf4j.org/" target="_blank" rel="noreferrer">SLF4J</a> 라이브러리를 사용하여 애플리케이션 이벤트를 로깅하는 기능을 제공합니다. 일반적인 로깅 설정에 대한 자세한 내용은 <a href="./server-logging">Ktor 서버의 로깅</a> 토픽에서 확인할 수 있습니다.</p><p><code>CallLogging</code> 플러그인을 사용하면 들어오는 클라이언트 요청을 로깅할 수 있습니다.</p><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>CallLogging</code>을(를) 사용하려면 빌드 스크립트에 <code>ktor-server-call-logging</code> 아티팩트를 포함해야 합니다. </p>',4)),a(r,{group:"languages"},{default:t(()=>[a(o,{title:"그레이들 (코틀린)","group-key":"kotlin"},{default:t(()=>[a(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-call-logging:$ktor_version")'})]),_:1}),a(o,{title:"그레이들 (그루비)","group-key":"groovy"},{default:t(()=>[a(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-call-logging:$ktor_version"'})]),_:1}),a(o,{title:"메이븐","group-key":"maven"},{default:t(()=>[a(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-call-logging-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[18]||(s[18]=i("h2",{id:"install_plugin",tabindex:"-1"},[l("CallLogging 설치 "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "CallLogging 설치 {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[6]||(s[6]=l(" 애플리케이션에 ")),s[7]||(s[7]=i("code",null,"CallLogging",-1)),s[8]||(s[8]=l(" 플러그인을 ")),s[9]||(s[9]=i("a",{href:"#install"},"설치",-1)),s[10]||(s[10]=l("하려면, 지정된 ")),a(p,{href:"/ktor/server-modules",summary:"Modules allow you to structure your application by grouping routes."},{default:t(()=>s[5]||(s[5]=[l("모듈")])),_:1}),s[11]||(s[11]=l("의 ")),s[12]||(s[12]=i("code",null,"install",-1)),s[13]||(s[13]=l(" 함수에 전달하세요. 아래 코드 스니펫은 ")),s[14]||(s[14]=i("code",null,"CallLogging",-1)),s[15]||(s[15]=l("을(를) 설치하는 방법을 보여줍니다... "))]),a(E,null,{default:t(()=>s[16]||(s[16]=[i("li",null,[l(" ... "),i("code",null,"embeddedServer"),l(" 함수 호출 내에서. ")],-1),i("li",null,[l(" ... "),i("code",null,"Application"),l(" 클래스의 확장 함수인 명시적으로 정의된 "),i("code",null,"module"),l(" 내에서. ")],-1)])),_:1}),a(r,null,{default:t(()=>[a(o,{title:"embeddedServer"},{default:t(()=>[a(e,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.calllogging.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(CallLogging)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),a(o,{title:"module"},{default:t(()=>[a(e,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.calllogging.*
            // ...
            fun Application.module() {
                install(CallLogging)
                // ...
            }`})]),_:1})]),_:1}),s[19]||(s[19]=k(`<h2 id="configure" tabindex="-1">로깅 설정 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;로깅 설정 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><p><code>CallLogging</code>은(는) 다양한 방법으로 구성할 수 있습니다. 로깅 레벨 지정, 특정 조건에 따른 요청 필터링, 로그 메시지 사용자 지정 등이 가능합니다. 사용 가능한 구성 설정은 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-call-logging/io.ktor.server.plugins.calllogging/-call-logging-config/index.html" target="_blank" rel="noreferrer">CallLoggingConfig</a>에서 확인할 수 있습니다.</p><h3 id="logging_level" tabindex="-1">로깅 레벨 설정 <a class="header-anchor" href="#logging_level" aria-label="Permalink to &quot;로깅 레벨 설정 {id=&quot;logging_level&quot;}&quot;">​</a></h3><p>기본적으로 Ktor는 <code>Level.INFO</code> 로깅 레벨을 사용합니다. 이를 변경하려면 <code>level</code> 속성을 사용하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Level.INFO</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="filter" tabindex="-1">로그 요청 필터링 <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;로그 요청 필터링 {id=&quot;filter&quot;}&quot;">​</a></h3><p><code>filter</code> 속성을 사용하면 요청 필터링을 위한 조건을 추가할 수 있습니다. 아래 예시에서는 <code>/api/v1</code>로 전송된 요청만 로그에 기록됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="format" tabindex="-1">로그 메시지 형식 사용자 지정 <a class="header-anchor" href="#format" aria-label="Permalink to &quot;로그 메시지 형식 사용자 지정 {id=&quot;format&quot;}&quot;">​</a></h3><p><code>format</code> 함수를 사용하여 요청/응답과 관련된 모든 데이터를 로그에 기록할 수 있습니다. 아래 예시는 각 요청에 대한 응답 상태, 요청 HTTP 메서드 및 <code>User-Agent</code> 헤더 값을 로깅하는 방법을 보여줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpMethod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.request.httpMethod.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userAgent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.request.headers[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User-Agent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;Status: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, HTTP method: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$httpMethod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, User agent: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$userAgent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>전체 예시는 다음에서 확인할 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/logging" target="_blank" rel="noreferrer">logging</a>.</p><h3 id="mdc" tabindex="-1">호출 파라미터를 MDC에 추가 <a class="header-anchor" href="#mdc" aria-label="Permalink to &quot;호출 파라미터를 MDC에 추가 {id=&quot;mdc&quot;}&quot;">​</a></h3><p><code>CallLogging</code> 플러그인은 MDC(Mapped Diagnostic Context)를 지원합니다. <code>mdc</code> 함수를 사용하여 지정된 이름으로 원하는 컨텍스트 값을 MDC에 추가할 수 있습니다. 예를 들어, 아래 코드 스니펫에서는 <code>name</code> 쿼리 파라미터가 MDC에 추가됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mdc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name-parameter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.request.queryParameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>ApplicationCall</code> 수명 주기 동안 추가된 값에 접근할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.slf4j.MDC</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MDC.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name-parameter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,17))])}const D=c(v,[["render",F]]);export{B as __pageData,D as default};
