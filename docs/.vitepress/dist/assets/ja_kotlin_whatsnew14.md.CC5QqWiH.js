import{_ as p,a as r,b as d,c as o,d as E,e as g,f as c,g as y,h as F,i as u,j as C}from"./chunks/migration-inspection-wn.BTS-bWVS.js";import{_ as m,C as k,c as b,o as f,ag as e,G as n,w as l,j as i,a as s}from"./chunks/framework.Bksy39di.js";const P=JSON.parse('{"title":"Kotlin 1.4.0 の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew14.md","filePath":"ja/kotlin/whatsnew14.md","lastUpdated":1754307826000}'),B={name:"ja/kotlin/whatsnew14.md"};function A(v,a,D,q,x,S){const t=k("tab"),h=k("tabs");return f(),b("div",null,[a[6]||(a[6]=e(`<h1 id="kotlin-1-4-0-の新機能" tabindex="-1">Kotlin 1.4.0 の新機能 <a class="header-anchor" href="#kotlin-1-4-0-の新機能" aria-label="Permalink to &quot;Kotlin 1.4.0 の新機能&quot;">​</a></h1><p><em><a href="/ja/kotlin/releases#release-details">公開日: 2020年8月17日</a></em></p><p>Kotlin 1.4.0 では、すべてのコンポーネントにおいて多数の改善が施されており、<a href="https://blog.jetbrains.com/kotlin/2020/08/kotlin-1-4-released-with-a-focus-on-quality-and-performance/" target="_blank" rel="noreferrer">品質とパフォーマンスに焦点が当てられています</a>。 以下に、Kotlin 1.4.0 における最も重要な変更点のリストを示します。</p><h2 id="言語機能と改善" tabindex="-1">言語機能と改善 <a class="header-anchor" href="#言語機能と改善" aria-label="Permalink to &quot;言語機能と改善&quot;">​</a></h2><p>Kotlin 1.4.0 には、さまざまな言語機能と改善が導入されています。これらには以下が含まれます。</p><ul><li><a href="#sam-conversions-for-kotlin-interfaces">Kotlin インターフェースの SAM 変換</a></li><li><a href="#explicit-api-mode-for-library-authors">ライブラリ作者向け明示的 API モード</a></li><li><a href="#mixing-named-and-positional-arguments">名前付き引数と位置指定引数の混在</a></li><li><a href="#trailing-comma">末尾のコンマ</a></li><li><a href="#callable-reference-improvements">呼び出し可能参照の改善</a></li><li><a href="#using-break-and-continue-inside-when-expressions-included-in-loops">ループ内の <code>when</code> 式での <code>break</code> と <code>continue</code> の使用</a></li></ul><h3 id="kotlin-インターフェースの-sam-変換" tabindex="-1">Kotlin インターフェースの SAM 変換 <a class="header-anchor" href="#kotlin-インターフェースの-sam-変換" aria-label="Permalink to &quot;Kotlin インターフェースの SAM 変換&quot;">​</a></h3><p>Kotlin 1.4.0 より前は、SAM (Single Abstract Method) 変換は<a href="/ja/kotlin/java-interop#sam-conversions">Kotlin から Java のメソッドと Java インターフェースを操作する場合にのみ</a>適用できました。これからは、Kotlin インターフェースに対しても SAM 変換を使用できます。 これを行うには、Kotlin インターフェースを <code>fun</code> 修飾子で関数型として明示的にマークします。</p><p>SAM 変換は、単一の抽象メソッドを持つインターフェースがパラメーターとして期待される場合に、ラムダを引数として渡すと適用されます。この場合、コンパイラはラムダを抽象メンバー関数を実装するクラスのインスタンスに自動的に変換します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntPredicate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isEven </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntPredicate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Is 7 even? - \${isEven.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="/ja/kotlin/fun-interfaces">Kotlin の関数型インターフェースと SAM 変換の詳細についてはこちら</a>をご覧ください。</p><h3 id="ライブラリ作者向け明示的-api-モード" tabindex="-1">ライブラリ作者向け明示的 API モード <a class="header-anchor" href="#ライブラリ作者向け明示的-api-モード" aria-label="Permalink to &quot;ライブラリ作者向け明示的 API モード&quot;">​</a></h3><p>Kotlin コンパイラは、ライブラリ作者向けに <em>明示的 API モード</em> を提供します。このモードでは、コンパイラが追加のチェックを実行し、ライブラリの API をより明確で一貫性のあるものにするのに役立ちます。これにより、ライブラリのパブリック API に公開される宣言に以下の要件が追加されます。</p><ul><li>デフォルトの可視性によってパブリック API に公開される場合、宣言には可視性修飾子が必要です。 これにより、意図せずパブリック API に宣言が公開されることを防ぎます。</li><li>パブリック API に公開されるプロパティと関数には、明示的な型指定が必要です。 これにより、API ユーザーが使用する API メンバーの型を確実に認識できるようになります。</li></ul><p>設定に応じて、これらの明示的な API はエラー（<em>strict</em> モード）または警告（<em>warning</em> モード）を生成する可能性があります。 可読性と常識のために、特定の種類の宣言はこのようなチェックから除外されます。</p><ul><li>プライマリコンストラクタ</li><li>データクラスのプロパティ</li><li>プロパティのゲッターとセッター</li><li><code>override</code> メソッド</li></ul><p>明示的 API モードは、モジュールのプロダクションソースのみを分析します。</p><p>モジュールを明示的 API モードでコンパイルするには、以下の行を Gradle ビルドスクリプトに追加します。</p>`,18)),n(h,{group:"build-script"},{default:l(()=>[n(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // for strict mode")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    explicitApi"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // or")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApi "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ExplicitApiMode.Strict")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // for warning mode")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    explicitApiWarning"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // or")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApi "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ExplicitApiMode.Warning")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // for strict mode")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApi()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // or")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApi "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'strict'")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // for warning mode")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApiWarning()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // or")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApi "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'warning'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[7]||(a[7]=e(`<p>コマンドラインコンパイラを使用する場合、<code>-Xexplicit-api</code> コンパイラオプションに <code>strict</code> または <code>warning</code> の値を指定して明示的 API モードに切り替えます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xexplicit-api</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warning}</span></span></code></pre></div><p><a href="https://github.com/Kotlin/KEEP/blob/master/proposals/explicit-api-mode.md" target="_blank" rel="noreferrer">KEEP で明示的 API モードの詳細を確認してください</a>。</p><h3 id="名前付き引数と位置指定引数の混在" tabindex="-1">名前付き引数と位置指定引数の混在 <a class="header-anchor" href="#名前付き引数と位置指定引数の混在" aria-label="Permalink to &quot;名前付き引数と位置指定引数の混在&quot;">​</a></h3><p>Kotlin 1.3 では、<a href="/ja/kotlin/functions#named-arguments">名前付き引数</a>で関数を呼び出す際、名前なしの引数 (位置指定引数) を最初の名前付き引数の前にすべて配置する必要がありました。例えば、<code>f(1, y = 2)</code> は呼び出せましたが、<code>f(x = 1, 2)</code> は呼び出せませんでした。</p><p>すべての引数が正しい位置にあるのに、途中の引数に名前を指定したい場合に、これは非常に煩わしいことでした。特に、ブール値や <code>null</code> 値がどの属性に属するかを明確にするのに役立ちました。</p><p>Kotlin 1.4 では、このような制限はありません。位置指定引数セットの途中で引数に名前を指定できるようになりました。さらに、位置指定引数と名前付き引数を、正しい順序を保つ限り、好きなように混在させることができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reformat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    str: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uppercaseFirstLetter: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    wordSeparator: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Function call with a named argument in the middle</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reformat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is a String!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, uppercaseFirstLetter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="末尾のコンマ" tabindex="-1">末尾のコンマ <a class="header-anchor" href="#末尾のコンマ" aria-label="Permalink to &quot;末尾のコンマ&quot;">​</a></h3><p>Kotlin 1.4 では、引数やパラメータリスト、<code>when</code> エントリ、分割宣言のコンポーネントなどの列挙において、末尾のコンマを追加できるようになりました。 末尾のコンマを使用すると、コンマの追加や削除なしに新しい項目を追加したり、その順序を変更したりできます。</p><p>これは、パラメータや値に複数行構文を使用する場合に特に役立ちます。末尾のコンマを追加すると、パラメータや値の行を簡単にスワップできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reformat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    str: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uppercaseFirstLetter: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    wordSeparator: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Character</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//trailing comma</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;green&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//trailing comma</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="呼び出し可能参照の改善" tabindex="-1">呼び出し可能参照の改善 <a class="header-anchor" href="#呼び出し可能参照の改善" aria-label="Permalink to &quot;呼び出し可能参照の改善&quot;">​</a></h3><p>Kotlin 1.4 は、呼び出し可能参照の使用に関してより多くのケースをサポートします。</p><ul><li>デフォルト値を持つパラメータを含む関数への参照</li><li><code>Unit</code> を返す関数内の関数参照</li><li>関数の引数の数に基づいて適応する参照</li><li>呼び出し可能参照での <code>suspend</code> 変換</li></ul><h4 id="デフォルト値を持つパラメータを含む関数への参照" tabindex="-1">デフォルト値を持つパラメータを含む関数への参照 <a class="header-anchor" href="#デフォルト値を持つパラメータを含む関数への参照" aria-label="Permalink to &quot;デフォルト値を持つパラメータを含む関数への参照&quot;">​</a></h4><p>デフォルト値を持つパラメータを含む関数への呼び出し可能参照を使用できるようになりました。関数 <code>foo</code> への呼び出し可能参照が引数を取らない場合、デフォルト値 <code>0</code> が使用されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以前は、<code>apply</code> または <code>foo</code> 関数のいずれかに別のオーバーロードを記述する必要がありました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// some new overload</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> applyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="unit-を返す関数における関数参照" tabindex="-1">Unit を返す関数における関数参照 <a class="header-anchor" href="#unit-を返す関数における関数参照" aria-label="Permalink to &quot;Unit を返す関数における関数参照&quot;">​</a></h4><p>Kotlin 1.4 では、<code>Unit</code> を返す関数内で任意の型を返す関数への呼び出し可能参照を使用できます。 Kotlin 1.4 より前は、この場合ラムダ引数しか使用できませんでした。現在はラムダ引数と呼び出し可能参照の両方を使用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) { }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> returnsInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">returnsInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this was the only way to do it  before 1.4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">returnsInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// starting from 1.4, this also works</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="関数の引数の数に基づいて適応する参照" tabindex="-1">関数の引数の数に基づいて適応する参照 <a class="header-anchor" href="#関数の引数の数に基づいて適応する参照" aria-label="Permalink to &quot;関数の引数の数に基づいて適応する参照&quot;">​</a></h4><p>可変長引数 (<code>vararg</code>) を渡す際に、関数への呼び出し可能参照を適応できるようになりました。 渡された引数リストの最後に、同じ型の任意の数のパラメータを渡すことができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vararg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    use0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    use1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    use2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="呼び出し可能参照での-suspend-変換" tabindex="-1">呼び出し可能参照での suspend 変換 <a class="header-anchor" href="#呼び出し可能参照での-suspend-変換" aria-label="Permalink to &quot;呼び出し可能参照での suspend 変換&quot;">​</a></h4><p>ラムダに対する suspend 変換に加えて、Kotlin はバージョン 1.4.0 以降、呼び出し可能参照に対する suspend 変換もサポートします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> takeSuspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    takeSuspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK before 1.4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    takeSuspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// In Kotlin 1.4, it also works</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="ループ内の-when-式での-break-と-continue-の使用" tabindex="-1">ループ内の <code>when</code> 式での <code>break</code> と <code>continue</code> の使用 <a class="header-anchor" href="#ループ内の-when-式での-break-と-continue-の使用" aria-label="Permalink to &quot;ループ内の \`when\` 式での \`break\` と \`continue\` の使用&quot;">​</a></h3><p>Kotlin 1.3 では、ループ内の <code>when</code> 式内で修飾子なしの <code>break</code> および <code>continue</code> を使用できませんでした。これは、これらのキーワードが <code>when</code> 式における<a href="https://en.wikipedia.org/wiki/Switch_statement#Fallthrough" target="_blank" rel="noreferrer">フォールスルー動作</a>の可能性のために予約されていたためです。</p><p>そのため、ループ内の <code>when</code> 式で <code>break</code> および <code>continue</code> を使用したい場合は、<a href="/ja/kotlin/returns#break-and-continue-labels">ラベルを付ける</a>必要があり、非常に面倒でした。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xs: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LOOP@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xs) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@LOOP</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            17</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@LOOP</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin 1.4 では、ループ内の <code>when</code> 式でラベルなしの <code>break</code> と <code>continue</code> を使用できます。これらは、最も近い囲むループを終了するか、次のステップに進むという期待通りの動作をします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xs: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xs) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> continue</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            17</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> break</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>when</code> 内のフォールスルー動作については、今後の設計で検討されます。</p><h2 id="ide-の新機能" tabindex="-1">IDE の新機能 <a class="header-anchor" href="#ide-の新機能" aria-label="Permalink to &quot;IDE の新機能&quot;">​</a></h2><p>Kotlin 1.4 では、IntelliJ IDEA の新しいツールを使用して Kotlin 開発を簡素化できます。</p><ul><li><a href="#new-flexible-project-wizard">新しい柔軟なプロジェクトウィザード</a></li><li><a href="#coroutine-debugger">コルーチンデバッガー</a></li></ul><h3 id="新しい柔軟なプロジェクトウィザード" tabindex="-1">新しい柔軟なプロジェクトウィザード <a class="header-anchor" href="#新しい柔軟なプロジェクトウィザード" aria-label="Permalink to &quot;新しい柔軟なプロジェクトウィザード&quot;">​</a></h3><p>柔軟な新しい Kotlin プロジェクトウィザードを使用すると、さまざまな種類の Kotlin プロジェクト（UI なしでは構成が難しいマルチプラットフォームプロジェクトを含む）を簡単に作成および構成できます。</p><p><img src="`+p+'" alt="Kotlin Project Wizard – Multiplatform project"></p><p>新しい Kotlin プロジェクトウィザードはシンプルで柔軟性があります。</p><ol><li><em>プロジェクトのテンプレートを選択します</em>。これは、達成したいことに応じて選択します。今後、さらにテンプレートが追加される予定です。</li><li><em>ビルドシステムを選択します</em>。Gradle (Kotlin または Groovy DSL)、Maven、または IntelliJ IDEA から選択できます。 Kotlin プロジェクトウィザードは、選択したプロジェクトテンプレートでサポートされているビルドシステムのみを表示します。</li><li>メイン画面で<em>プロジェクト構造を直接プレビューします</em>。</li></ol><p>その後、プロジェクトの作成を完了するか、オプションで次の画面で<em>プロジェクトを構成します</em>。</p><ol start="4"><li>このプロジェクトテンプレートでサポートされている<em>モジュールとターゲットを追加/削除します</em>。</li><li>例えば、ターゲット JVM バージョン、ターゲットテンプレート、テストフレームワークなど、<em>モジュールとターゲットの設定を構成します</em>。</li></ol><p><img src="'+r+'" alt="Kotlin Project Wizard - Configure targets"></p><p>今後、Kotlin Project Wizard は、さらに多くの構成オプションとテンプレートを追加することで、さらに柔軟になる予定です。</p><p>これらのチュートリアルを試して、新しい Kotlin プロジェクトウィザードを試すことができます。</p><ul><li><a href="/ja/kotlin/jvm-get-started">Kotlin/JVM をベースにしたコンソールアプリケーションの作成</a></li><li><a href="/ja/kotlin/js-react">React 用 Kotlin/JS アプリケーションの作成</a></li><li><a href="/ja/kotlin/native-get-started">Kotlin/Native アプリケーションの作成</a></li></ul><h3 id="コルーチンデバッガー" tabindex="-1">コルーチンデバッガー <a class="header-anchor" href="#コルーチンデバッガー" aria-label="Permalink to &quot;コルーチンデバッガー&quot;">​</a></h3><p>多くの人がすでに非同期プログラミングに<a href="/ja/kotlin/coroutines-guide">コルーチン</a>を使用しています。 しかし、Kotlin 1.4 以前では、デバッグとなるとコルーチンを扱うのは本当に大変でした。コルーチンはスレッド間を飛び回るため、特定のコルーチンが何をしているのかを理解し、そのコンテキストをチェックするのが困難でした。場合によっては、ブレークポイントでのステップ追跡が機能しないこともありました。その結果、コルーチンを使用するコードのデバッグには、ロギングや精神的な努力に頼るしかありませんでした。</p><p>Kotlin 1.4 では、Kotlin プラグインに搭載された新機能により、コルーチンのデバッグが格段に便利になりました。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>デバッグは <code>kotlinx-coroutines-core</code> のバージョン 1.3.8 以降で動作します。</p></div><p><strong>デバッグツールウィンドウ</strong>に新しい<strong>コルーチン</strong>タブが追加されました。このタブでは、現在実行中のコルーチンと中断されているコルーチンの両方に関する情報を見つけることができます。コルーチンは実行中のディスパッチャによってグループ化されています。</p><p><img src="'+d+'" alt="Debugging coroutines"></p><p>これで以下のことが可能になりました。</p><ul><li>各コルーチンの状態を簡単に確認できます。</li><li>実行中および中断中のコルーチンのローカル変数とキャプチャされた変数の値を確認できます。</li><li>完全なコルーチン作成スタックと、コルーチン内の呼び出しスタックを確認できます。スタックには、標準のデバッグでは失われる可能性のある変数値を持つすべてのフレームが含まれます。</li></ul><p>各コルーチンの状態とそのスタックを含む完全なレポートが必要な場合は、<strong>コルーチン</strong>タブ内で右クリックし、<strong>コルーチンのダンプを取得</strong>をクリックします。現在、コルーチンのダンプはかなり単純ですが、今後の Kotlin バージョンでより読みやすく、役立つようにしていく予定です。</p><p><img src="'+o+`" alt="Coroutines Dump"></p><p>コルーチンのデバッグの詳細については、<a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-rc-debugging-coroutines/" target="_blank" rel="noreferrer">このブログ記事</a>と <a href="https://www.jetbrains.com/help/idea/debug-kotlin-coroutines.html" target="_blank" rel="noreferrer">IntelliJ IDEA ドキュメント</a>をご覧ください。</p><h2 id="新しいコンパイラ" tabindex="-1">新しいコンパイラ <a class="header-anchor" href="#新しいコンパイラ" aria-label="Permalink to &quot;新しいコンパイラ&quot;">​</a></h2><p>新しい Kotlin コンパイラは非常に高速になり、サポートされているすべてのプラットフォームを統合し、コンパイラ拡張のための API を提供します。これは長期的なプロジェクトであり、Kotlin 1.4.0 ではすでにいくつかのステップを完了しました。</p><ul><li><a href="#new-more-powerful-type-inference-algorithm">新しいより強力な型推論アルゴリズム</a>がデフォルトで有効になりました。</li><li><a href="#unified-backends-and-extensibility">新しい JVM および JS IR バックエンド</a>。これらは安定化され次第、デフォルトになる予定です。</li></ul><h3 id="新しいより強力な型推論アルゴリズム" tabindex="-1">新しいより強力な型推論アルゴリズム <a class="header-anchor" href="#新しいより強力な型推論アルゴリズム" aria-label="Permalink to &quot;新しいより強力な型推論アルゴリズム&quot;">​</a></h3><p>Kotlin 1.4 は、新しい、より強力な型推論アルゴリズムを使用します。この新しいアルゴリズムは、Kotlin 1.3 でコンパイラオプションを指定することで試すことができましたが、現在はデフォルトで使用されています。新しいアルゴリズムで修正された問題の完全なリストは、<a href="https://youtrack.jetbrains.com/issues/KT?q=Tag:%20fixed-in-new-inference%20" target="_blank" rel="noreferrer">YouTrack</a>で確認できます。以下に、最も注目すべき改善点をいくつか紹介します。</p><ul><li><a href="#more-cases-where-type-is-inferred-automatically">型が自動的に推論されるケースの増加</a></li><li><a href="#smart-casts-for-a-lambda-s-last-expression">ラムダの最後の式のスマートキャスト</a></li><li><a href="#smart-casts-for-callable-references">呼び出し可能参照のスマートキャスト</a></li><li><a href="#better-inference-for-delegated-properties">委譲プロパティの推論の改善</a></li><li><a href="#sam-conversion-for-java-interfaces-with-different-arguments">異なる引数を持つ Java インターフェースの SAM 変換</a></li><li><a href="#java-sam-interfaces-in-kotlin">Kotlin の Java SAM インターフェース</a></li></ul><h4 id="型が自動的に推論されるケースの増加" tabindex="-1">型が自動的に推論されるケースの増加 <a class="header-anchor" href="#型が自動的に推論されるケースの増加" aria-label="Permalink to &quot;型が自動的に推論されるケースの増加&quot;">​</a></h4><p>新しい推論アルゴリズムは、以前のアルゴリズムでは明示的に指定する必要があった多くのケースで型を推論します。例えば、以下の例では、ラムダパラメータ <code>it</code> の型が <code>String?</code> に正しく推論されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rulesMap: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;weak&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;medium&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNullOrBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;strong&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;^[a-zA-Z0-9]+$&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rulesMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weak&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rulesMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;strong&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rulesMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;strong&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin 1.3 では、これを機能させるために明示的なラムダパラメータを導入するか、<code>to</code> を明示的なジェネリック引数を持つ <code>Pair</code> コンストラクタに置き換える必要がありました。</p><h4 id="ラムダの最後の式のスマートキャスト" tabindex="-1">ラムダの最後の式のスマートキャスト <a class="header-anchor" href="#ラムダの最後の式のスマートキャスト" aria-label="Permalink to &quot;ラムダの最後の式のスマートキャスト&quot;">​</a></h4><p>Kotlin 1.3 では、期待される型を指定しない限り、ラムダ内の最後の式はスマートキャストされませんでした。したがって、以下の例では、Kotlin 1.3 は <code>String?</code> を <code>result</code> 変数の型として推論します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> currentValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    str </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// the Kotlin compiler knows that str is not null here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The type of &#39;result&#39; is String? in Kotlin 1.3 and String in Kotlin 1.4</span></span></code></pre></div><p>Kotlin 1.4 では、新しい推論アルゴリズムのおかげで、ラムダ内の最後の式がスマートキャストされ、このより正確な型がラムダの結果型を推論するために使用されます。したがって、<code>result</code> 変数の型は <code>String</code> になります。</p><p>Kotlin 1.3 では、このようなケースを機能させるために明示的なキャスト（<code>!!</code> や <code>as String</code> のような型キャスト）を追加する必要があることがよくありましたが、現在はこれらのキャストは不要になりました。</p><h4 id="呼び出し可能参照のスマートキャスト" tabindex="-1">呼び出し可能参照のスマートキャスト <a class="header-anchor" href="#呼び出し可能参照のスマートキャスト" aria-label="Permalink to &quot;呼び出し可能参照のスマートキャスト&quot;">​</a></h4><p>Kotlin 1.3 では、スマートキャストされた型のメンバー参照にアクセスできませんでした。Kotlin 1.4 ではアクセスできるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.reflect.KFunction</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> meow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;meow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> woof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;woof&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animal: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kFunction: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (animal) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">meow</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Dog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">woof</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kFunction.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>animal</code> 変数が特定の型 <code>Cat</code> と <code>Dog</code> にスマートキャストされた後、異なるメンバー参照 <code>animal::meow</code> と <code>animal::woof</code> を使用できます。型チェックの後、サブタイプに対応するメンバー参照にアクセスできます。</p><h4 id="委譲プロパティの推論の改善" tabindex="-1">委譲プロパティの推論の改善 <a class="header-anchor" href="#委譲プロパティの推論の改善" aria-label="Permalink to &quot;委譲プロパティの推論の改善&quot;">​</a></h4><p>委譲プロパティの型は、<code>by</code> キーワードに続く委譲式を分析する際に考慮されませんでした。たとえば、以下のコードは以前はコンパイルされませんでしたが、現在はコンパイラが <code>old</code> および <code>new</code> パラメータの型を <code>String?</code> として正しく推論します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.properties.Delegates</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prop: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Delegates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { p, old, new </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$old</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> → </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xyz&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="異なる引数を持つ-java-インターフェースの-sam-変換" tabindex="-1">異なる引数を持つ Java インターフェースの SAM 変換 <a class="header-anchor" href="#異なる引数を持つ-java-インターフェースの-sam-変換" aria-label="Permalink to &quot;異なる引数を持つ Java インターフェースの SAM 変換&quot;">​</a></h4><p>Kotlin は当初から Java インターフェースの SAM 変換をサポートしていましたが、既存の Java ライブラリを扱う際に時々煩わしい、サポートされていないケースが1つありました。2つの SAM インターフェースをパラメータとして取る Java メソッドを呼び出す場合、両方の引数がラムダであるか、通常のオブジェクトである必要がありました。片方の引数をラムダとして渡し、もう片方をオブジェクトとして渡すことはできませんでした。</p><p>新しいアルゴリズムはこの問題を修正し、どんな場合でも SAM インターフェースの代わりにラムダを渡すことができるようになりました。これは自然に期待される動作です。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// FILE: A.java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Runnable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Runnable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// FILE: test.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r1: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r1) {}  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Works in Kotlin 1.4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="kotlin-の-java-sam-インターフェース" tabindex="-1">Kotlin の Java SAM インターフェース <a class="header-anchor" href="#kotlin-の-java-sam-インターフェース" aria-label="Permalink to &quot;Kotlin の Java SAM インターフェース&quot;">​</a></h4><p>Kotlin 1.4 では、Kotlin で Java SAM インターフェースを使用し、それらに SAM 変換を適用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.lang.Runnable</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin 1.3 では、SAM 変換を実行するには、上記の <code>foo</code> 関数を Java コードで宣言する必要がありました。</p><h3 id="統合されたバックエンドと拡張性" tabindex="-1">統合されたバックエンドと拡張性 <a class="header-anchor" href="#統合されたバックエンドと拡張性" aria-label="Permalink to &quot;統合されたバックエンドと拡張性&quot;">​</a></h3><p>Kotlin には、実行可能ファイルを生成するバックエンドが 3 つあります。Kotlin/JVM、Kotlin/JS、Kotlin/Native です。Kotlin/JVM と Kotlin/JS は、それぞれ独立して開発されたため、多くのコードを共有していません。Kotlin/Native は、Kotlin コードの中間表現 (IR) を中心に構築された新しいインフラストラクチャに基づいています。</p><p>現在、Kotlin/JVM と Kotlin/JS を同じ IR に移行しています。その結果、3 つのバックエンドすべてが多くのロジックを共有し、統一されたパイプラインを持っています。これにより、ほとんどの機能、最適化、バグ修正をすべてのプラットフォームに対して一度だけ実装できます。新しい IR ベースのバックエンドはどちらも <a href="/ja/kotlin/components-stability">Alpha</a> 段階にあります。</p><p>共通のバックエンドインフラストラクチャは、マルチプラットフォームコンパイラ拡張の道も開きます。パイプラインにプラグインして、カスタム処理と変換を追加できます。これにより、すべてのプラットフォームで自動的に動作します。</p><p>現在アルファ版の新しい <a href="#new-jvm-ir-backend">JVM IR</a> と <a href="#new-js-ir-backend">JS IR</a> バックエンドを試していただき、フィードバックを共有していただくことをお勧めします。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.4.0 には、JVM 固有の改善がいくつか含まれています。</p><ul><li><a href="#new-jvm-ir-backend">新しい JVM IR バックエンド</a></li><li><a href="#new-modes-for-generating-default-methods">インターフェースのデフォルトメソッド生成の新しいモード</a></li><li><a href="#unified-exception-type-for-null-checks">null チェックの例外型の統一</a></li><li><a href="#type-annotations-in-the-jvm-bytecode">JVM バイトコードの型アノテーション</a></li></ul><h3 id="新しい-jvm-ir-バックエンド" tabindex="-1">新しい JVM IR バックエンド <a class="header-anchor" href="#新しい-jvm-ir-バックエンド" aria-label="Permalink to &quot;新しい JVM IR バックエンド&quot;">​</a></h3><p>Kotlin/JS とともに、Kotlin/JVM も<a href="#unified-backends-and-extensibility">統合 IR バックエンド</a>に移行しています。これにより、ほとんどの機能とバグ修正をすべてのプラットフォームに対して一度だけ実装できます。これにより、すべてのプラットフォームで動作するマルチプラットフォーム拡張を作成することで、ユーザーも恩恵を受けることができます。</p><p>Kotlin 1.4.0 では、そのような拡張のパブリック API はまだ提供されていませんが、<a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> を含むパートナーと緊密に連携しており、彼らはすでに新しいバックエンドを使用してコンパイラプラグインを構築しています。</p><p>現在アルファ版の新しい Kotlin/JVM バックエンドを試していただき、<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">課題トラッカー</a>に課題や機能リクエストを提出していただくことをお勧めします。これにより、コンパイラパイプラインを統合し、Jetpack Compose のようなコンパイラ拡張を Kotlin コミュニティに迅速に提供できるようになります。</p><p>新しい JVM IR バックエンドを有効にするには、Gradle ビルドスクリプトに以下の追加コンパイラオプションを指定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlinOptions.useIR </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><a href="https://developer.android.com/jetpack/compose/setup?hl=en" target="_blank" rel="noreferrer">Jetpack Compose を有効にする</a>と、<code>kotlinOptions</code> でコンパイラオプションを指定しなくても、新しい JVM バックエンドが自動的に有効になります。</p></div><p>コマンドラインコンパイラを使用する場合は、<code>-Xuse-ir</code> コンパイラオプションを追加します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>新しい JVM IR バックエンドでコンパイルされたコードは、新しいバックエンドを有効にしている場合にのみ使用できます。そうでない場合は、エラーが発生します。 このことを考慮すると、ライブラリ作者がプロダクションで新しいバックエンドに切り替えることはお勧めしません。</p></div><h3 id="デフォルトメソッド生成の新しいモード" tabindex="-1">デフォルトメソッド生成の新しいモード <a class="header-anchor" href="#デフォルトメソッド生成の新しいモード" aria-label="Permalink to &quot;デフォルトメソッド生成の新しいモード&quot;">​</a></h3><p>Kotlin コードを JVM 1.8 以降のターゲットにコンパイルする場合、Kotlin インターフェースの非抽象メソッドを Java の <code>default</code> メソッドにコンパイルできました。この目的のために、そのようなメソッドをマークするための <code>@JvmDefault</code> アノテーションと、このアノテーションの処理を有効にする <code>-Xjvm-default</code> コンパイラオプションを含むメカニズムがありました。</p><p>1.4.0 では、デフォルトメソッドを生成するための新しいモードとして <code>-Xjvm-default=all</code> を追加しました。これは、Kotlin インターフェースの <em>すべて</em> の非抽象メソッドを <code>default</code> Java メソッドにコンパイルします。<code>default</code> なしでコンパイルされたインターフェースを使用するコードとの互換性のために、<code>all-compatibility</code> モードも追加しました。</p><p>Java 相互運用におけるデフォルトメソッドの詳細については、<a href="/ja/kotlin/java-to-kotlin-interop#default-methods-in-interfaces">相互運用ドキュメント</a>および<a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer">このブログ記事</a>を参照してください。</p><h3 id="null-チェックの例外型の統一" tabindex="-1">null チェックの例外型の統一 <a class="header-anchor" href="#null-チェックの例外型の統一" aria-label="Permalink to &quot;null チェックの例外型の統一&quot;">​</a></h3><p>Kotlin 1.4.0 以降、すべてのランタイム null チェックは <code>KotlinNullPointerException</code>、<code>IllegalStateException</code>、<code>IllegalArgumentException</code>、および <code>TypeCastException</code> の代わりに <code>java.lang.NullPointerException</code> をスローします。これは、<code>!!</code> 演算子、メソッドのプレアンブルでのパラメータ null チェック、プラットフォーム型式 null チェック、および null 許容でない型を伴う <code>as</code> 演算子に適用されます。 <code>lateinit</code> null チェックおよび <code>checkNotNull</code> や <code>requireNotNull</code> などの明示的なライブラリ関数呼び出しには適用されません。</p><p>この変更により、Kotlin コンパイラまたはさまざまな種類のバイトコード処理ツール（Android の <a href="https://developer.android.com/studio/build/shrink-code" target="_blank" rel="noreferrer">R8 オプティマイザ</a>など）によって実行できる null チェック最適化の数が増加します。</p><p>開発者の視点からは、状況はそれほど変わらないことに注意してください。Kotlin コードは以前と同じエラーメッセージで例外をスローします。例外の型は変わりますが、渡される情報は同じです。</p><h3 id="jvm-バイトコードの型アノテーション" tabindex="-1">JVM バイトコードの型アノテーション <a class="header-anchor" href="#jvm-バイトコードの型アノテーション" aria-label="Permalink to &quot;JVM バイトコードの型アノテーション&quot;">​</a></h3><p>Kotlin は JVM バイトコード (ターゲットバージョン 1.8+) で型アノテーションを生成できるようになり、ランタイム時に Java リフレクションで利用できるようになりました。 バイトコードに型アノテーションを出力するには、次の手順に従います。</p><ol><li>宣言されたアノテーションが適切なアノテーションターゲット (Java の <code>ElementType.TYPE_USE</code> または Kotlin の <code>AnnotationTarget.TYPE</code>) と保持ポリシー (<code>AnnotationRetention.RUNTIME</code>) を持っていることを確認します。</li><li>アノテーションクラスの宣言を JVM バイトコードのターゲットバージョン 1.8+ でコンパイルします。これは <code>-jvm-target=1.8</code> コンパイラオプションで指定できます。</li><li>アノテーションを使用するコードを JVM バイトコードのターゲットバージョン 1.8+ (<code>-jvm-target=1.8</code>) でコンパイルし、<code>-Xemit-jvm-type-annotations</code> コンパイラオプションを追加します。</li></ol><p>標準ライブラリの型アノテーションは、標準ライブラリがターゲットバージョン 1.6 でコンパイルされているため、現時点ではバイトコードには出力されないことに注意してください。</p><p>これまでのところ、基本的なケースのみがサポートされています。</p><ul><li>メソッドパラメータ、メソッド戻り値の型、プロパティの型に対する型アノテーション</li><li>型引数の不変の射影、例えば <code>Smth&lt;@Ann Foo&gt;</code>、<code>Array&lt;@Ann Foo&gt;</code></li></ul><p>以下の例では、<code>String</code> 型の <code>@Foo</code> アノテーションはバイトコードに出力され、ライブラリコードで使用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.TYPE)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;OK&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>JS プラットフォームでは、Kotlin 1.4.0 は以下の改善を提供します。</p><ul><li><a href="#new-gradle-dsl">新しい Gradle DSL</a></li><li><a href="#new-js-ir-backend">新しい JS IR バックエンド</a></li></ul><h3 id="新しい-gradle-dsl" tabindex="-1">新しい Gradle DSL <a class="header-anchor" href="#新しい-gradle-dsl" aria-label="Permalink to &quot;新しい Gradle DSL&quot;">​</a></h3><p><code>kotlin.js</code> Gradle プラグインには、調整された Gradle DSL が付属しており、多数の新しい構成オプションを提供し、<code>kotlin-multiplatform</code> プラグインが使用する DSL により密接に連携しています。最も影響の大きい変更点には以下が含まれます。</p><ul><li><code>binaries.executable()</code> を介した実行可能ファイルの作成を明示的に切り替えるトグル。 <a href="/ja/kotlin/js-project-setup#execution-environments">Kotlin/JS とその環境の実行の詳細についてはこちら</a>を参照してください。</li><li><code>cssSupport</code> を介して Gradle 設定内から webpack の CSS およびスタイルローダーを構成できます。 <a href="/ja/kotlin/js-project-setup#css">CSS およびスタイルローダーの使用の詳細についてはこちら</a>を参照してください。</li><li>npm 依存関係の管理が改善され、必須のバージョン番号または <a href="https://docs.npmjs.com/about-semantic-versioning" target="_blank" rel="noreferrer">semver</a> バージョン範囲がサポートされ、<code>devNpm</code>、<code>optionalNpm</code>、<code>peerNpm</code> を使用した <em>開発</em>、<em>ピア</em>、および <em>オプション</em> の npm 依存関係がサポートされます。 <a href="/ja/kotlin/js-project-setup#npm-dependencies">Gradle から直接 npm パッケージの依存関係管理の詳細についてはこちら</a>を参照してください。</li><li>Kotlin 外部宣言のジェネレーターである <a href="https://github.com/Kotlin/dukat" target="_blank" rel="noreferrer">Dukat</a> の統合が強化されました。外部宣言は、ビルド時に生成することも、Gradle タスクを介して手動で生成することもできるようになりました。</li></ul><h3 id="新しい-js-ir-バックエンド" tabindex="-1">新しい JS IR バックエンド <a class="header-anchor" href="#新しい-js-ir-バックエンド" aria-label="Permalink to &quot;新しい JS IR バックエンド&quot;">​</a></h3><p><a href="/ja/kotlin/js-ir-compiler">Kotlin/JS 用の IR バックエンド</a>は、現在 <a href="/ja/kotlin/components-stability">Alpha</a> 安定性であり、生成されるコードサイズのデッドコード除去による削減、JavaScript および TypeScript との相互運用性の改善などに焦点を当てた、Kotlin/JS ターゲットに特有の新しい機能を提供します。</p><p>Kotlin/JS IR バックエンドを有効にするには、<code>gradle.properties</code> でキー <code>kotlin.js.compiler=ir</code> を設定するか、Gradle ビルドスクリプトの <code>js</code> 関数に <code>IR</code> コンパイラタイプを渡します。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    js(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or: LEGACY, BOTH</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    binaries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">executable()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>新しいバックエンドの構成方法に関する詳細については、<a href="/ja/kotlin/js-ir-compiler">Kotlin/JS IR コンパイラドキュメント</a>を参照してください。</p><p>新しい <a href="/ja/kotlin/js-to-kotlin-interop#jsexport-annotation"><code>@JsExport</code></a> アノテーションと、<strong><a href="/ja/kotlin/js-ir-compiler#preview-generation-of-typescript-declaration-files-d-ts">Kotlin コードから TypeScript 定義 (.d.ts) を生成する機能</a></strong> により、Kotlin/JS IR コンパイラバックエンドは JavaScript &amp; TypeScript の相互運用性を向上させます。これにより、Kotlin/JS コードを既存のツールと統合したり、<strong>ハイブリッドアプリケーション</strong>を作成したり、マルチプラットフォームプロジェクトでコード共有機能を活用したりすることも容易になります。</p><p><a href="/ja/kotlin/js-ir-compiler">Kotlin/JS IR コンパイラバックエンドで利用可能な機能の詳細はこちら</a>。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>1.4.0 では、Kotlin/Native に以下のものを含む、数多くの新機能と改善が追加されました。</p><ul><li><a href="#support-for-kotlin-s-suspending-functions-in-swift-and-objective-c">Swift および Objective-C でのサスペンド関数のサポート</a></li><li><a href="#objective-c-generics-support-by-default">Objective-C ジェネリクスのデフォルトサポート</a></li><li><a href="#exception-handling-in-objective-c-swift-interop">Objective-C/Swift 相互運用における例外処理</a></li><li><a href="#generate-release-dsyms-on-apple-targets-by-default">Apple ターゲットでのリリース .dSYMs のデフォルト生成</a></li><li><a href="#performance-improvements">パフォーマンスの改善</a></li><li><a href="#simplified-management-of-cocoapods-dependencies">CocoaPods 依存関係の管理の簡素化</a></li></ul><h3 id="swift-および-objective-c-での-kotlin-のサスペンド関数のサポート" tabindex="-1">Swift および Objective-C での Kotlin のサスペンド関数のサポート <a class="header-anchor" href="#swift-および-objective-c-での-kotlin-のサスペンド関数のサポート" aria-label="Permalink to &quot;Swift および Objective-C での Kotlin のサスペンド関数のサポート&quot;">​</a></h3><p>1.4.0 では、Swift および Objective-C でのサスペンド関数の基本的なサポートを追加しました。Kotlin モジュールを Apple フレームワークにコンパイルすると、サスペンド関数はコールバックを持つ関数 (Swift/Objective-C の用語では <code>completionHandler</code>) として利用可能になります。生成されたフレームワークのヘッダーにそのような関数がある場合、Swift または Objective-C コードからそれらを呼び出すことができ、オーバーライドすることも可能です。</p><p>たとえば、次のような Kotlin 関数を記述した場合:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> queryData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span></code></pre></div><p>...Swift からは次のように呼び出せます。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">queryData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { result, error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ERROR: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(e)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="/ja/kotlin/native-objc-interop">Swift および Objective-C でサスペンド関数を使用する方法の詳細についてはこちら</a>。</p><h3 id="objective-c-ジェネリクスのデフォルトサポート" tabindex="-1">Objective-C ジェネリクスのデフォルトサポート <a class="header-anchor" href="#objective-c-ジェネリクスのデフォルトサポート" aria-label="Permalink to &quot;Objective-C ジェネリクスのデフォルトサポート&quot;">​</a></h3><p>以前のバージョンの Kotlin では、Objective-C 相互運用におけるジェネリクスが実験的にサポートされていました。1.4.0 以降、Kotlin/Native は Kotlin コードからジェネリクスを含む Apple フレームワークをデフォルトで生成します。場合によっては、これが既存の Objective-C または Swift コードによる Kotlin フレームワークの呼び出しを壊す可能性があります。ジェネリクスなしでフレームワークヘッダーを記述するには、<code>-Xno-objc-generics</code> コンパイラオプションを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinNativeTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-Xno-objc-generics&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="/ja/kotlin/native-objc-interop#generics">Objective-C との相互運用に関するドキュメント</a>に記載されているすべての詳細と制限は引き続き有効であることに注意してください。</p><h3 id="objective-c-swift-相互運用における例外処理" tabindex="-1">Objective-C/Swift 相互運用における例外処理 <a class="header-anchor" href="#objective-c-swift-相互運用における例外処理" aria-label="Permalink to &quot;Objective-C/Swift 相互運用における例外処理&quot;">​</a></h3><p>1.4.0 では、Kotlin から生成される Swift API を、例外の変換方法に関してわずかに変更しました。Kotlin と Swift の間には、エラー処理に根本的な違いがあります。Kotlin の例外はすべてチェックされませんが、Swift にはチェックされるエラーしかありません。したがって、Swift コードが予期される例外を認識できるようにするには、Kotlin 関数は <code>@Throws</code> アノテーションで潜在的な例外クラスのリストを指定してマークする必要があります。</p><p>Swift または Objective-C フレームワークにコンパイルすると、<code>@Throws</code> アノテーションを持つ、または継承する関数は、Objective-C では <code>NSError*</code> を生成するメソッドとして、Swift では <code>throws</code> メソッドとして表現されます。</p><p>以前は、<code>RuntimeException</code> および <code>Error</code> 以外の例外はすべて <code>NSError</code> として伝播されました。この動作は変更され、<code>NSError</code> は <code>@Throws</code> アノテーションのパラメータとして指定されたクラス（またはそのサブクラス）のインスタンスである例外に対してのみスローされるようになりました。Swift/Objective-C に到達するその他の Kotlin 例外は未処理と見なされ、プログラムを終了させます。</p><h3 id="apple-ターゲットでのリリース-dsyms-のデフォルト生成" tabindex="-1">Apple ターゲットでのリリース .dSYMs のデフォルト生成 <a class="header-anchor" href="#apple-ターゲットでのリリース-dsyms-のデフォルト生成" aria-label="Permalink to &quot;Apple ターゲットでのリリース .dSYMs のデフォルト生成&quot;">​</a></h3><p>1.4.0 以降、Kotlin/Native コンパイラは、デフォルトで Darwin プラットフォーム上のリリースバイナリ用に<a href="https://developer.apple.com/documentation/xcode/building_your_app_to_include_debugging_information" target="_blank" rel="noreferrer">デバッグシンボルファイル</a> (<code>.dSYM</code>s) を生成します。これは <code>-Xadd-light-debug=disable</code> コンパイラオプションで無効にできます。他のプラットフォームでは、このオプションはデフォルトで無効になっています。Gradle でこのオプションを切り替えるには、以下を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinNativeTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-Xadd-light-debug={enable|disable}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="/ja/kotlin/native-ios-symbolication">クラッシュレポートのシンボル化の詳細についてはこちら</a>。</p><h3 id="パフォーマンスの改善" tabindex="-1">パフォーマンスの改善 <a class="header-anchor" href="#パフォーマンスの改善" aria-label="Permalink to &quot;パフォーマンスの改善&quot;">​</a></h3><p>Kotlin/Native は、開発プロセスと実行の両方を高速化する数多くのパフォーマンス改善を受けました。 以下にいくつかの例を示します。</p><ul><li><p>オブジェクト割り当ての速度を向上させるため、システムアロケータの代替として <a href="https://github.com/microsoft/mimalloc" target="_blank" rel="noreferrer">mimalloc</a> メモリマネージャを提供するようになりました。mimalloc は、いくつかのベンチマークで最大 2 倍高速に動作します。 現在、Kotlin/Native での mimalloc の使用は実験的です。<code>-Xallocator=mimalloc</code> コンパイラオプションを使用して切り替えることができます。</p></li><li><p>C 相互運用ライブラリの構築方法を見直しました。新しいツールにより、Kotlin/Native は以前より最大 4 倍高速に相互運用ライブラリを生成し、成果物のサイズは以前の 25% から 30% に縮小されました。</p></li><li><p>GC の最適化により、全体的なランタイムパフォーマンスが向上しました。この改善は、寿命の長いオブジェクトが多数存在するプロジェクトで特に顕著になります。<code>HashMap</code> と <code>HashSet</code> コレクションは、冗長なボクシングを回避することで高速に動作するようになりました。</p></li><li><p>1.3.70 では、Kotlin/Native コンパイルのパフォーマンスを向上させるための 2 つの新機能が導入されました。<a href="https://blog.jetbrains.com/kotlin/2020/03/kotlin-1-3-70-released/#kotlin-native" target="_blank" rel="noreferrer">プロジェクトの依存関係のキャッシュと Gradle デーモンからのコンパイラの実行</a>です。 それ以来、私たちは多数の課題を修正し、これらの機能の全体的な安定性を向上させました。</p></li></ul><h3 id="cocoapods-依存関係の管理の簡素化" tabindex="-1">CocoaPods 依存関係の管理の簡素化 <a class="header-anchor" href="#cocoapods-依存関係の管理の簡素化" aria-label="Permalink to &quot;CocoaPods 依存関係の管理の簡素化&quot;">​</a></h3><p>以前は、CocoaPods 依存関係マネージャーとプロジェクトを統合すると、iOS、macOS、watchOS、または tvOS のプロジェクト部分は Xcode でのみビルドでき、マルチプラットフォームプロジェクトの他の部分とは別でした。これらの他の部分は IntelliJ IDEA でビルドできました。</p><p>さらに、CocoaPods に保存されている Objective-C ライブラリ (Pod ライブラリ) に依存関係を追加するたびに、IntelliJ IDEA から Xcode に切り替え、<code>pod install</code> を呼び出し、Xcode でビルドを実行する必要がありました。</p><p>これで、IntelliJ IDEA で直接 Pod 依存関係を管理できるようになりました。これにより、コードのハイライトや補完など、コード操作にIntelliJ IDEA が提供する利点を享受できます。また、Xcode に切り替えることなく、Gradle を使用して Kotlin プロジェクト全体をビルドすることもできます。これは、Swift/Objective-C コードを記述したり、シミュレーターやデバイスでアプリケーションを実行したりする必要がある場合にのみ Xcode に行く必要があることを意味します。</p><p>また、ローカルに保存されている Pod ライブラリも操作できるようになりました。</p><p>必要に応じて、次の間に依存関係を追加できます。</p><ul><li>Kotlin プロジェクトと、CocoaPods リポジトリにリモートで保存されている Pod ライブラリ、またはマシンにローカルで保存されている Pod ライブラリ。</li><li>Kotlin Pod (CocoaPods 依存関係として使用される Kotlin プロジェクト) と、1つ以上のターゲットを持つ Xcode プロジェクト。</li></ul><p>初期設定を完了し、<code>cocoapods</code> に新しい依存関係を追加する場合は、IntelliJ IDEA でプロジェクトを再インポートするだけです。新しい依存関係は自動的に追加されます。追加の手順は不要です。</p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-libraries.html" target="_blank" rel="noreferrer">依存関係の追加方法についてはこちら</a>。</p><h2 id="kotlin-マルチプラットフォーム" tabindex="-1">Kotlin マルチプラットフォーム <a class="header-anchor" href="#kotlin-マルチプラットフォーム" aria-label="Permalink to &quot;Kotlin マルチプラットフォーム&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>マルチプラットフォームプロジェクトのサポートは <a href="/ja/kotlin/components-stability">Alpha</a> 段階です。将来的には互換性のない変更が発生し、手動での移行が必要になる場合があります。 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> でのフィードバックをお待ちしております。</p></div><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin マルチプラットフォーム</a>は、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#targets" target="_blank" rel="noreferrer">異なるプラットフォーム</a>向けに同じコードを記述・保守する時間を削減し、ネイティブプログラミングの柔軟性と利点を維持します。私たちはマルチプラットフォーム機能と改善に引き続き努力を注いでいます。</p><ul><li><a href="#sharing-code-in-several-targets-with-the-hierarchical-project-structure">階層型プロジェクト構造での複数ターゲット間でのコード共有</a></li><li><a href="#leveraging-native-libs-in-the-hierarchical-structure">階層構造におけるネイティブライブラリの活用</a></li><li><a href="#specifying-dependencies-only-once">kotlinx 依存関係の指定は一度で済むように</a></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>マルチプラットフォームプロジェクトには Gradle 6.0 以降が必要です。</p></div><h3 id="階層型プロジェクト構造での複数ターゲット間でのコード共有" tabindex="-1">階層型プロジェクト構造での複数ターゲット間でのコード共有 <a class="header-anchor" href="#階層型プロジェクト構造での複数ターゲット間でのコード共有" aria-label="Permalink to &quot;階層型プロジェクト構造での複数ターゲット間でのコード共有&quot;">​</a></h3><p>新しい階層型プロジェクト構造のサポートにより、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-discover-project.html" target="_blank" rel="noreferrer">マルチプラットフォームプロジェクト</a>内で<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#targets" target="_blank" rel="noreferrer">複数のプラットフォーム</a>間でコードを共有できます。</p><p>以前は、マルチプラットフォームプロジェクトに追加されたコードは、1つのターゲットに限定され、他のプラットフォームでは再利用できないプラットフォーム固有のソースセットに配置されるか、プロジェクト内のすべてのプラットフォームで共有される <code>commonMain</code> や <code>commonTest</code> などの共通ソースセットに配置されるかのいずれかでした。共通ソースセットでは、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">プラットフォーム固有の <code>actual</code> 実装が必要な <code>expect</code> 宣言</a>を使用することによってのみ、プラットフォーム固有の API を呼び出すことができました。</p><p>これにより、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-on-all-platforms" target="_blank" rel="noreferrer">すべてのプラットフォームでコードを共有する</a>のは容易でしたが、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-on-similar-platforms" target="_blank" rel="noreferrer">一部のターゲット間でのみ共有する</a>のは容易ではありませんでした。特に、多くの共通ロジックとサードパーティ API を再利用できる可能性のある類似のターゲット間ではそうでした。</p><p>たとえば、iOS をターゲットとする一般的なマルチプラットフォームプロジェクトでは、iOS 関連のターゲットが 2 つあります。1つは iOS ARM64 デバイス用、もう1つは x64 シミュレーター用です。これらは個別のプラットフォーム固有のソースセットを持っていますが、実際にはデバイスとシミュレーターで異なるコードが必要となることはほとんどなく、その依存関係も非常に似ています。そのため、iOS 固有のコードはそれらの間で共有できるはずです。</p><p>明らかに、この設定では、Kotlin/Native コードが iOS デバイスとシミュレーターの両方に共通する API を直接呼び出すことができる、<em>2 つの iOS ターゲット用の共有ソースセット</em>を持つことが望ましいでしょう。</p><p><img src="`+E+`" alt="Code shared for iOS targets" width="300"></p><p>これで、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-on-similar-platforms" target="_blank" rel="noreferrer">階層型プロジェクト構造のサポート</a>により、これが可能になります。このサポートは、各ソースセットで使用されるターゲットに基づいて、利用可能な API と言語機能を推測して適応させます。</p><p>一般的なターゲットの組み合わせの場合、ターゲットショートカットを使用して階層構造を作成できます。 たとえば、<code>ios()</code> ショートカットを使用して、上記の2つの iOS ターゲットと共有ソースセットを作成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iOS device and simulator targets; iosMain and iosTest source sets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ターゲットのその他の組み合わせについては、<code>dependsOn</code> 関係を使用して<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#manual-configuration" target="_blank" rel="noreferrer">手動で階層を作成します</a>。</p><p><img src="`+g+'" alt="Hierarchical structure"></p>',190)),n(h,{group:"build-script"},{default:l(()=>[n(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[2]||(a[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," desktopMain "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," creating"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(commonMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," linuxX64Main "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," mingwX64Main "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," macosX64Main "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[3]||(a[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        desktopMain {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(commonMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        linuxX64Main {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        mingwX64Main {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        macosX64Main {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[8]||(a[8]=e('<p>階層型プロジェクト構造のおかげで、ライブラリはターゲットのサブセットに対して共通 API を提供することもできます。<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-in-libraries" target="_blank" rel="noreferrer">ライブラリでのコード共有</a>について詳しく学びましょう。</p><h3 id="階層構造におけるネイティブライブラリの活用" tabindex="-1">階層構造におけるネイティブライブラリの活用 <a class="header-anchor" href="#階層構造におけるネイティブライブラリの活用" aria-label="Permalink to &quot;階層構造におけるネイティブライブラリの活用&quot;">​</a></h3><p>Foundation、UIKit、POSIX などのプラットフォーム依存ライブラリを、複数のネイティブターゲット間で共有されるソースセットで使用できます。これにより、プラットフォーム固有の依存関係に制限されることなく、より多くのネイティブコードを共有できます。</p><p>追加の手順は不要で、すべて自動的に行われます。IntelliJ IDEA は、共有コードで使用できる共通の宣言を検出するのに役立ちます。</p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#connect-platform-specific-libraries" target="_blank" rel="noreferrer">プラットフォーム依存ライブラリの使用方法について詳しく学びましょう</a>。</p><h3 id="依存関係の指定は一度で済むように" tabindex="-1">依存関係の指定は一度で済むように <a class="header-anchor" href="#依存関係の指定は一度で済むように" aria-label="Permalink to &quot;依存関係の指定は一度で済むように&quot;">​</a></h3><p>これからは、同じライブラリの異なるバリアントへの依存関係を、それが使用される共有およびプラットフォーム固有のソースセットで指定する代わりに、共有ソースセットで一度だけ指定するべきです。</p>',7)),n(h,{group:"build-script"},{default:l(()=>[n(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[4]||(a[4]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," commonMain "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"                implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[5]||(a[5]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        commonMain {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependencies {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                implementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[9]||(a[9]=e('<p><code>-common</code>、<code>-native</code>などのプラットフォームを指定するサフィックスを持つ kotlinx ライブラリの成果物名を使用しないでください。これらはサポートされなくなりました。代わりに、上記の例では <code>kotlinx-coroutines-core</code> のようなライブラリの基本成果物名を使用してください。</p><p>ただし、この変更は現在以下には影響しません。</p><ul><li><code>stdlib</code> ライブラリ – Kotlin 1.4.0 以降、<a href="#dependency-on-the-standard-library-added-by-default">stdlib 依存関係は自動的に追加されます</a>。</li><li><code>kotlin.test</code> ライブラリ – 引き続き <code>test-common</code> および <code>test-annotations-common</code> を使用する必要があります。これらの依存関係は後で対処されます。</li></ul><p>特定のプラットフォームにのみ依存関係が必要な場合は、引き続き <code>-jvm</code> や <code>-js</code> などのサフィックスを持つ標準および kotlinx ライブラリのプラットフォーム固有のバリアントを使用できます（例: <code>kotlinx-coroutines-core-jvm</code>）。</p><p><a href="/ja/kotlin/gradle-configure-project#configure-dependencies">依存関係の構成について詳しく学びましょう</a>。</p><h2 id="gradle-プロジェクトの改善" tabindex="-1">Gradle プロジェクトの改善 <a class="header-anchor" href="#gradle-プロジェクトの改善" aria-label="Permalink to &quot;Gradle プロジェクトの改善&quot;">​</a></h2><p><a href="#kotlin-multiplatform">Kotlin Multiplatform</a>、<a href="#kotlin-jvm">Kotlin/JVM</a>、<a href="#kotlin-native">Kotlin/Native</a>、<a href="#kotlin-js">Kotlin/JS</a> に固有の Gradle プロジェクトの機能と改善に加えて、すべての Kotlin Gradle プロジェクトに適用されるいくつかの変更点があります。</p><ul><li><a href="#dependency-on-the-standard-library-added-by-default">標準ライブラリへの依存関係がデフォルトで追加されるように</a></li><li><a href="#minimum-gradle-version-for-kotlin-projects">Kotlin プロジェクトには新しいバージョンの Gradle が必要</a></li><li><a href="#improved-gradle-kts-support-in-the-ide">IDE における Kotlin Gradle DSL のサポートの改善</a></li></ul><h3 id="標準ライブラリへの依存関係がデフォルトで追加されるように" tabindex="-1">標準ライブラリへの依存関係がデフォルトで追加されるように <a class="header-anchor" href="#標準ライブラリへの依存関係がデフォルトで追加されるように" aria-label="Permalink to &quot;標準ライブラリへの依存関係がデフォルトで追加されるように&quot;">​</a></h3><p>マルチプラットフォームプロジェクトを含む、すべての Kotlin Gradle プロジェクトで <code>stdlib</code> ライブラリへの依存関係を宣言する必要がなくなりました。 依存関係はデフォルトで追加されます。</p><p>自動的に追加される標準ライブラリは、Kotlin Gradle プラグインと同じバージョンになります。これらは同じバージョン管理を採用しているためです。</p><p>プラットフォーム固有のソースセットには対応するプラットフォーム固有のライブラリバリアントが使用され、残りの部分には共通の標準ライブラリが追加されます。Kotlin Gradle プラグインは、Gradle ビルドスクリプトの <code>kotlinOptions.jvmTarget</code> <a href="/ja/kotlin/gradle-compiler-options">コンパイラオプション</a>に応じて適切な JVM 標準ライブラリを選択します。</p><p><a href="/ja/kotlin/gradle-configure-project#dependency-on-the-standard-library">デフォルトの動作を変更する方法はこちら</a>。</p><h3 id="kotlin-プロジェクトには新しいバージョンの-gradle-が必要" tabindex="-1">Kotlin プロジェクトには新しいバージョンの Gradle が必要 <a class="header-anchor" href="#kotlin-プロジェクトには新しいバージョンの-gradle-が必要" aria-label="Permalink to &quot;Kotlin プロジェクトには新しいバージョンの Gradle が必要&quot;">​</a></h3><p>Kotlin プロジェクトで新機能を利用するには、Gradle を<a href="https://gradle.org/releases/" target="_blank" rel="noreferrer">最新バージョン</a>に更新してください。マルチプラットフォームプロジェクトには Gradle 6.0 以降が必要ですが、その他の Kotlin プロジェクトは Gradle 5.4 以降で動作します。</p><h3 id="ide-における-gradle-kts-サポートの改善" tabindex="-1">IDE における *.gradle.kts サポートの改善 <a class="header-anchor" href="#ide-における-gradle-kts-サポートの改善" aria-label="Permalink to &quot;IDE における *.gradle.kts サポートの改善&quot;">​</a></h3><p>1.4.0 では、Gradle Kotlin DSL スクリプト (<code>*.gradle.kts</code> ファイル) の IDE サポートの改善を継続しました。新しいバージョンでは、以下の点が強化されています。</p><ul><li><p>パフォーマンス向上のための<em>スクリプト設定の明示的な読み込み</em>。以前は、ビルドスクリプトに対する変更は自動的にバックグラウンドで読み込まれていました。パフォーマンスを向上させるため、1.4.0 ではビルドスクリプト設定の自動読み込みを無効にしました。IDE は、明示的に適用した場合にのみ変更を読み込みます。</p><p>Gradle 6.0 より前のバージョンでは、エディタで<strong>設定を読み込む</strong>をクリックして、スクリプト設定を手動で読み込む必要があります。</p><p><img src="'+c+'" alt="*.gradle.kts – Load Configuration"></p><p>Gradle 6.0 以降では、<strong>Gradle の変更を読み込む</strong>をクリックするか、Gradle プロジェクトを再インポートすることで、変更を明示的に適用できます。</p><p>IntelliJ IDEA 2020.1 以降と Gradle 6.0 以降では、さらに<strong>スクリプト設定を読み込む</strong>アクションが追加されました。これは、プロジェクト全体を更新することなくスクリプト設定への変更を読み込みます。これにより、プロジェクト全体を再インポートするよりもはるかに時間が短縮されます。</p><p><img src="'+y+'" alt="*.gradle.kts – Load Script Changes and Load Gradle Changes"></p><p>新しく作成されたスクリプト、または新しい Kotlin プラグインでプロジェクトを初めて開く場合も、<strong>スクリプト設定を読み込む</strong>必要があります。</p><p>Gradle 6.0 以降では、以前の実装で個別に読み込まれていたのとは対照的に、すべてのスクリプトを一度に読み込むことができるようになりました。各リクエストで Gradle 設定フェーズが実行される必要があるため、大規模な Gradle プロジェクトではリソースを大量に消費する可能性があります。</p><p>現在、このような読み込みは <code>build.gradle.kts</code> と <code>settings.gradle.kts</code> ファイルに限定されています（関連する<a href="https://github.com/gradle/gradle/issues/12640" target="_blank" rel="noreferrer">課題</a>に投票してください）。 <code>init.gradle.kts</code> または適用された<a href="https://docs.gradle.org/current/userguide/plugins.html#sec:script_plugins" target="_blank" rel="noreferrer">スクリプトプラグイン</a>のハイライトを有効にするには、古いメカニズム（スタンドアロンスクリプトへの追加）を使用してください。それらのスクリプトの設定は、必要なときに個別に読み込まれます。 また、そのようなスクリプトの自動リロードを有効にすることもできます。</p><p><img src="'+F+`" alt="*.gradle.kts – Add to standalone scripts"></p></li><li><p><em>エラー報告の改善</em>。以前は、Gradle Daemon からのエラーは別のログファイルでしか確認できませんでした。現在は、Gradle Daemon がエラーに関するすべての情報を直接返し、ビルドツールウィンドウに表示します。これにより、時間と労力の両方を節約できます。</p></li></ul><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><p>Kotlin 1.4.0 における Kotlin 標準ライブラリの最も重要な変更点のリストを以下に示します。</p><ul><li><a href="#common-exception-processing-api">共通例外処理 API</a></li><li><a href="#new-functions-for-arrays-and-collections">配列とコレクションの新しい関数</a></li><li><a href="#functions-for-string-manipulations">文字列操作のための関数</a></li><li><a href="#bit-operations">ビット操作</a></li><li><a href="#delegated-properties-improvements">委譲プロパティの改善</a></li><li><a href="#converting-from-ktype-to-java-type">KType から Java Type への変換</a></li><li><a href="#proguard-configurations-for-kotlin-reflection">Kotlin リフレクション用の Proguard 設定</a></li><li><a href="#improving-the-existing-api">既存 API の改善</a></li><li><a href="#module-info-descriptors-for-stdlib-artifacts">stdlib 成果物用の module-info ディスクリプタ</a></li><li><a href="#deprecations">非推奨</a></li><li><a href="#exclusion-of-the-deprecated-experimental-coroutines">非推奨の実験的コルーチンの除外</a></li></ul><h3 id="共通例外処理-api" tabindex="-1">共通例外処理 API <a class="header-anchor" href="#共通例外処理-api" aria-label="Permalink to &quot;共通例外処理 API&quot;">​</a></h3><p>以下の API 要素が共通ライブラリに移動されました。</p><ul><li>このスローアブルの詳細な説明をスタックトレースとともに返す <code>Throwable.stackTraceToString()</code> 拡張関数、およびこの説明を標準エラー出力に出力する <code>Throwable.printStackTrace()</code>。</li><li>例外を配信するために抑制された例外を指定できる <code>Throwable.addSuppressed()</code> 関数、およびすべての抑制された例外のリストを返す <code>Throwable.suppressedExceptions</code> プロパティ。</li><li>関数がプラットフォームメソッドにコンパイルされる際に（JVM またはネイティブプラットフォームで）チェックされる例外型を列挙する <code>@Throws</code> アノテーション。</li></ul><h3 id="配列とコレクションの新しい関数" tabindex="-1">配列とコレクションの新しい関数 <a class="header-anchor" href="#配列とコレクションの新しい関数" aria-label="Permalink to &quot;配列とコレクションの新しい関数&quot;">​</a></h3><h4 id="コレクション" tabindex="-1">コレクション <a class="header-anchor" href="#コレクション" aria-label="Permalink to &quot;コレクション&quot;">​</a></h4><p>1.4.0 では、標準ライブラリに<strong>コレクション</strong>を操作するための便利な関数が多数含まれています。</p><ul><li><p><code>setOfNotNull()</code> は、指定された引数の中から null でないすべての項目で構成されるセットを作成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOfNotNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>シーケンス用の <code>shuffled()</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> until </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shuffled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//five random even numbers below 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>onEach()</code> と <code>flatMap()</code> の <code>*Indexed()</code> の対応関数。 これらがコレクション要素に適用する操作は、要素インデックスをパラメータとして持ちます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onEachIndexed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        index, item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMapIndexed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { index, item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) item.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlin)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>randomOrNull()</code>、<code>reduceOrNull()</code>、<code>reduceIndexedOrNull()</code> の <code>*OrNull()</code> の対応関数。 これらは空のコレクションでは <code>null</code> を返します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> empty </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     empty.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reduceOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     //empty.reduce { a, b -&gt; a + b }</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Exception: Empty collection can&#39;t be reduced.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>runningFold()</code>、その同義語である <code>scan()</code>、および <code>runningReduce()</code> は、<code>fold()</code> および <code>reduce()</code> と同様に、与えられた操作をコレクション要素に順次適用します。 違いは、これらの新しい関数がすべての中間結果のシーケンスを返す点です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> runningReduceSum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runningReduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { sum, item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> runningFoldSum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runningFold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { sum, item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(runningReduceSum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(runningFoldSum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>sumOf()</code> はセレクタ関数を取り、コレクションのすべての要素に対するその値の合計を返します。 <code>sumOf()</code> は、<code>Int</code>、<code>Long</code>、<code>Double</code>、<code>UInt</code>、<code>ULong</code> 型の合計を生成できます。JVM では、<code>BigInteger</code> と <code>BigDecimal</code> も利用可能です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cake&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Coffee&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tea&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> total </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sumOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it.count } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Double</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sumOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.count } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Int</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You&#39;ve ordered </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> items that cost </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>min()</code> と <code>max()</code> 関数は、Kotlin コレクション API 全体で使用されている命名規則に準拠するために <code>minOrNull()</code> と <code>maxOrNull()</code> に名前が変更されました。関数名の <code>*OrNull</code> 接尾辞は、レシーバーコレクションが空の場合に <code>null</code> を返すことを意味します。<code>minBy()</code>、<code>maxBy()</code>、<code>minWith()</code>、<code>maxWith()</code> も同様で、1.4 では <code>*OrNull()</code> の同義語が追加されました。</p></li><li><p>新しい <code>minOf()</code> および <code>maxOf()</code> 拡張関数は、コレクションアイテムに対する指定されたセレクタ関数の最小値および最大値を返します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cake&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Coffee&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tea&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> highestPrice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.price }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The most expensive item in the order costs </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$highestPrice</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>Comparator</code> を引数として取る <code>minOfWith()</code> と <code>maxOfWith()</code>、および空のコレクションで <code>null</code> を返すこれら 4 つの関数の <code>*OrNull()</code> バージョンもあります。</p></li><li><p><code>flatMap</code> および <code>flatMapTo</code> の新しいオーバーロードにより、レシーバー型と一致しない戻り値の型を持つ変換を使用できるようになりました。具体的には、次のとおりです。</p><ul><li><code>Iterable</code>、<code>Array</code>、<code>Map</code> で <code>Sequence</code> への変換</li><li><code>Sequence</code> で <code>Iterable</code> への変換</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lettersList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lettersSeq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lettersList)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lettersSeq.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>ミュータブルリストから要素を削除するための <code>removeFirst()</code> と <code>removeLast()</code> ショートカット、およびこれらの関数の <code>*orNull()</code> 対応関数。</p></li></ul><h4 id="配列" tabindex="-1">配列 <a class="header-anchor" href="#配列" aria-label="Permalink to &quot;配列&quot;">​</a></h4><p>異なるコンテナ型を扱う際に一貫したエクスペリエンスを提供するために、<strong>配列</strong>用の新しい関数も追加しました。</p><ul><li><code>shuffle()</code> は配列の要素をランダムな順序に並べ替えます。</li><li><code>onEach()</code> は各配列要素に対して指定されたアクションを実行し、配列自体を返します。</li><li><code>associateWith()</code> と <code>associateWithTo()</code> は配列要素をキーとしてマップを構築します。</li><li>配列のサブ範囲に対する <code>reverse()</code> は、サブ範囲内の要素の順序を逆転させます。</li><li>配列のサブ範囲に対する <code>sortDescending()</code> は、サブ範囲内の要素を降順にソートします。</li><li>配列のサブ範囲に対する <code>sort()</code> と <code>sortWith()</code> は、共通ライブラリで利用できるようになりました。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> language </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> letters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;k&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;o&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;l&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileExt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> letters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { language </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterNot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;aeuio&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prefix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, separator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(language) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;kotlin&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fileExt) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;.kt&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    letters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shuffle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    letters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    letters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortDescending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(letters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contentToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [k, o, t, l, i, n]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>さらに、<code>CharArray</code>/<code>ByteArray</code> と <code>String</code> の間の変換のための新しい関数があります。</p><ul><li><code>ByteArray.decodeToString()</code> と <code>String.encodeToByteArray()</code></li><li><code>CharArray.concatToString()</code> と <code>String.toCharArray()</code></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kotlin&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concatToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="arraydeque" tabindex="-1">ArrayDeque <a class="header-anchor" href="#arraydeque" aria-label="Permalink to &quot;ArrayDeque&quot;">​</a></h4><p>また、両端キューの実装である <code>ArrayDeque</code> クラスも追加しました。 両端キューを使用すると、キューの先頭または末尾のいずれかに要素を追加または削除することが償却定数時間で可能です。コードでキューまたはスタックが必要な場合は、デフォルトで両端キューを使用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deque </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayDeque</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addLast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deque) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [0, 1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">last</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeLast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deque) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, 2, 3]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>ArrayDeque</code> の実装は、内部でサイズ変更可能な配列を使用しています。内容を円形バッファである <code>Array</code> に格納し、<code>Array</code> がいっぱいになった場合にのみサイズを変更します。</p><h3 id="文字列操作のための関数" tabindex="-1">文字列操作のための関数 <a class="header-anchor" href="#文字列操作のための関数" aria-label="Permalink to &quot;文字列操作のための関数&quot;">​</a></h3><p>1.4.0 の標準ライブラリには、文字列操作 API にいくつかの改善が含まれています。</p><ul><li><p><code>StringBuilder</code> には、<code>set()</code>、<code>setRange()</code>、<code>deleteAt()</code>、<code>deleteRange()</code>、<code>appendRange()</code> など、便利な新しい拡張関数が追加されました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bye Kotlin 1.3.72&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li><li><p><code>StringBuilder</code> の既存関数の一部は、共通ライブラリで利用可能です。これらには、<code>append()</code>、<code>insert()</code>、<code>substring()</code>、<code>setLength()</code> などが含まれます。</p></li><li><p>新しい関数 <code>Appendable.appendLine()</code> と <code>StringBuilder.appendLine()</code> が共通ライブラリに追加されました。これらは、これらのクラスの JVM 専用の <code>appendln()</code> 関数を置き換えるものです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buildString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        appendLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        appendLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h3 id="ビット操作" tabindex="-1">ビット操作 <a class="header-anchor" href="#ビット操作" aria-label="Permalink to &quot;ビット操作&quot;">​</a></h3><p>ビット操作のための新しい関数です。</p><ul><li><code>countOneBits()</code></li><li><code>countLeadingZeroBits()</code></li><li><code>countTrailingZeroBits()</code></li><li><code>takeHighestOneBit()</code></li><li><code>takeLowestOneBit()</code></li><li><code>rotateLeft()</code> および <code>rotateRight()</code> (実験的)</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1010000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countOneBits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countTrailingZeroBits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">takeHighestOneBit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="委譲プロパティの改善" tabindex="-1">委譲プロパティの改善 <a class="header-anchor" href="#委譲プロパティの改善" aria-label="Permalink to &quot;委譲プロパティの改善&quot;">​</a></h3><p>1.4.0 では、Kotlin の委譲プロパティの使用体験を向上させるための新機能を追加しました。</p><ul><li>プロパティを別のプロパティに委譲できるようになりました。</li><li>新しいインターフェース <code>PropertyDelegateProvider</code> は、単一の宣言でデリゲートプロバイダを作成するのに役立ちます。</li><li><code>ReadWriteProperty</code> は <code>ReadOnlyProperty</code> を拡張するようになり、読み取り専用プロパティにも両方を使用できるようになりました。</li></ul><p>新しい API に加えて、結果のバイトコードサイズを削減する最適化を行いました。これらの最適化については、<a href="https://blog.jetbrains.com/kotlin/2019/12/what-to-expect-in-kotlin-1-4-and-beyond/#delegated-properties" target="_blank" rel="noreferrer">このブログ記事</a>で説明されています。</p><p><a href="/ja/kotlin/delegated-properties">委譲プロパティの詳細についてはこちら</a>。</p><h3 id="ktype-から-java-type-への変換" tabindex="-1">KType から Java Type への変換 <a class="header-anchor" href="#ktype-から-java-type-への変換" aria-label="Permalink to &quot;KType から Java Type への変換&quot;">​</a></h3><p>stdlib の新しい拡張プロパティ <code>KType.javaType</code> (現在は実験的) は、<code>kotlin-reflect</code> 依存関係全体を使用せずに Kotlin 型から <code>java.lang.reflect.Type</code> を取得するのに役立ちます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.reflect.javaType</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.reflect.typeOf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accessReifiedTypeArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> typeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin type: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$kType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Java type: \${kType.javaType}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   accessReifiedTypeArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Kotlin type: kotlin.String</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Java type: class java.lang.String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   accessReifiedTypeArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Kotlin type: kotlin.collections.List&lt;kotlin.String&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Java type: java.util.List&lt;java.lang.String&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-リフレクション用の-proguard-設定" tabindex="-1">Kotlin リフレクション用の Proguard 設定 <a class="header-anchor" href="#kotlin-リフレクション用の-proguard-設定" aria-label="Permalink to &quot;Kotlin リフレクション用の Proguard 設定&quot;">​</a></h3><p>1.4.0 以降、Kotlin リフレクション用の Proguard/R8 設定が <code>kotlin-reflect.jar</code> に組み込まれました。これにより、R8 または Proguard を使用するほとんどの Android プロジェクトは、追加の設定なしで kotlin-reflect で動作するはずです。 kotlin-reflect 内部用の Proguard ルールをコピー＆ペーストする必要がなくなりました。ただし、リフレクトするすべての API は明示的にリストする必要があることに注意してください。</p><h3 id="既存-api-の改善" tabindex="-1">既存 API の改善 <a class="header-anchor" href="#既存-api-の改善" aria-label="Permalink to &quot;既存 API の改善&quot;">​</a></h3><ul><li><p>いくつかの関数は null レシーバーでも動作するようになりました。たとえば、次のとおりです。</p><ul><li>文字列に対する <code>toBoolean()</code></li><li>配列に対する <code>contentEquals()</code>、<code>contentHashcode()</code>、<code>contentToString()</code></li></ul></li><li><p><code>Double</code> と <code>Float</code> の <code>NaN</code>、<code>NEGATIVE_INFINITY</code>、<code>POSITIVE_INFINITY</code> は <code>const</code> として定義されるようになり、アノテーション引数として使用できるようになりました。</p></li><li><p><code>Double</code> と <code>Float</code> の新しい定数 <code>SIZE_BITS</code> と <code>SIZE_BYTES</code> は、バイナリ形式で型のインスタンスを表現するために使用されるビット数とバイト数を格納します。</p></li><li><p><code>maxOf()</code> と <code>minOf()</code> のトップレベル関数は可変長引数 (<code>vararg</code>) を受け入れられるようになりました。</p></li></ul><h3 id="stdlib-成果物用の-module-info-ディスクリプタ" tabindex="-1">stdlib 成果物用の module-info ディスクリプタ <a class="header-anchor" href="#stdlib-成果物用の-module-info-ディスクリプタ" aria-label="Permalink to &quot;stdlib 成果物用の module-info ディスクリプタ&quot;">​</a></h3><p>Kotlin 1.4.0 は、デフォルトの標準ライブラリ成果物に <code>module-info.java</code> モジュール情報を追加します。これにより、<a href="https://docs.oracle.com/en/java/javase/11/tools/jlink.html" target="_blank" rel="noreferrer">jlink ツール</a>で使用できるようになります。jlink ツールは、アプリに必要なプラットフォームモジュールのみを含むカスタム Java ランタイムイメージを生成します。 以前は、Kotlin 標準ライブラリ成果物で jlink を使用できましたが、それを行うには別の成果物（&quot;modular&quot; 分類子を持つもの）を使用する必要があり、全体的なセットアップは単純ではありませんでした。 Android では、<code>module-info</code> を含む jar ファイルを正しく処理できる Android Gradle プラグインのバージョン 3.2 以降を使用していることを確認してください。</p><h3 id="非推奨" tabindex="-1">非推奨 <a class="header-anchor" href="#非推奨" aria-label="Permalink to &quot;非推奨&quot;">​</a></h3><h4 id="double-と-float-の-toshort-と-tobyte" tabindex="-1">Double と Float の toShort() と toByte() <a class="header-anchor" href="#double-と-float-の-toshort-と-tobyte" aria-label="Permalink to &quot;Double と Float の toShort() と toByte()&quot;">​</a></h4><p><code>Double</code> と <code>Float</code> の関数 <code>toShort()</code> および <code>toByte()</code> は、値の範囲が狭く、変数のサイズが小さいため、予期しない結果につながる可能性があるため非推奨になりました。</p><p>浮動小数点数を <code>Byte</code> または <code>Short</code> に変換するには、2段階変換を使用します。まず <code>Int</code> に変換し、次にターゲット型に再変換します。</p><h4 id="浮動小数点配列の-contains-、indexof-、lastindexof" tabindex="-1">浮動小数点配列の contains()、indexOf()、lastIndexOf() <a class="header-anchor" href="#浮動小数点配列の-contains-、indexof-、lastindexof" aria-label="Permalink to &quot;浮動小数点配列の contains()、indexOf()、lastIndexOf()&quot;">​</a></h4><p><code>FloatArray</code> および <code>DoubleArray</code> の拡張関数 <code>contains()</code>、<code>indexOf()</code>、および <code>lastIndexOf()</code> は非推奨になりました。これらは、<a href="https://en.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noreferrer">IEEE 754</a> 標準の等価性を使用しており、これが一部のコーナーケースで全順序の等価性と矛盾するためです。<a href="https://youtrack.jetbrains.com/issue/KT-28753" target="_blank" rel="noreferrer">この課題</a>で詳細を参照してください。</p><h4 id="min-および-max-コレクション関数" tabindex="-1">min() および max() コレクション関数 <a class="header-anchor" href="#min-および-max-コレクション関数" aria-label="Permalink to &quot;min() および max() コレクション関数&quot;">​</a></h4><p><code>min()</code> および <code>max()</code> コレクション関数は、その動作をより適切に反映する <code>minOrNull()</code> および <code>maxOrNull()</code> を優先して非推奨になりました。空のコレクションで <code>null</code> を返します。 詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-38854" target="_blank" rel="noreferrer">この課題</a>を参照してください。</p><h3 id="非推奨の実験的コルーチンの除外" tabindex="-1">非推奨の実験的コルーチンの除外 <a class="header-anchor" href="#非推奨の実験的コルーチンの除外" aria-label="Permalink to &quot;非推奨の実験的コルーチンの除外&quot;">​</a></h3><p><code>kotlin.coroutines.experimental</code> API は、1.3.0 で kotlin.coroutines を優先して非推奨になりました。1.4.0 では、<code>kotlin.coroutines.experimental</code> を標準ライブラリから削除することで、非推奨化サイクルを完了します。JVM でまだ使用しているユーザーのために、実験的コルーチン API をすべて含む互換性アーティファクト <code>kotlin-coroutines-experimental-compat.jar</code> を提供しています。これは Maven に公開され、標準ライブラリと一緒に Kotlin ディストリビューションに含まれています。</p><h2 id="安定版-json-シリアライゼーション" tabindex="-1">安定版 JSON シリアライゼーション <a class="header-anchor" href="#安定版-json-シリアライゼーション" aria-label="Permalink to &quot;安定版 JSON シリアライゼーション&quot;">​</a></h2><p>Kotlin 1.4.0 では、<a href="https://github.com/Kotlin/kotlinx.serialization" target="_blank" rel="noreferrer">kotlinx.serialization</a> の最初の安定版である 1.0.0-RC を出荷しています。これで、<code>kotlinx-serialization-core</code> (以前は <code>kotlinx-serialization-runtime</code> として知られていました) の JSON シリアライゼーション API が安定版になったことを発表できることを嬉しく思います。その他のシリアライゼーション形式用のライブラリは、コアライブラリの一部の高度な部分と同様に、実験的なままです。</p><p>JSON シリアライゼーションの API を大幅に再構築し、より一貫性があり、使いやすいものにしました。これからは、JSON シリアライゼーション API を後方互換性のある方法で開発を継続します。 ただし、以前のバージョンを使用していた場合は、1.0.0-RC に移行する際にコードの一部を書き直す必要があります。 これを支援するために、<code>kotlinx.serialization</code> の完全なドキュメントセットである**<a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serialization-guide.md" target="_blank" rel="noreferrer">Kotlin シリアライゼーションガイド</a>**も提供しています。これは、最も重要な機能の使用プロセスをガイドし、直面する可能性のある課題に対処するのに役立ちます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><strong>注</strong>: <code>kotlinx-serialization</code> 1.0.0-RC は Kotlin コンパイラ 1.4 でのみ動作します。それ以前のコンパイラバージョンは互換性がありません。</p></div><h2 id="スクリプティングと-repl" tabindex="-1">スクリプティングと REPL <a class="header-anchor" href="#スクリプティングと-repl" aria-label="Permalink to &quot;スクリプティングと REPL&quot;">​</a></h2><p>1.4.0 では、Kotlin のスクリプティングは、他の更新とともに、多くの機能とパフォーマンスの改善の恩恵を受けています。 主な変更点は次のとおりです。</p><ul><li><a href="#new-dependencies-resolution-api">新しい依存関係解決 API</a></li><li><a href="#new-repl-api">新しい REPL API</a></li><li><a href="#compiled-scripts-cache">コンパイル済みスクリプトキャッシュ</a></li><li><a href="#artifacts-renaming">成果物名の変更</a></li></ul><p>Kotlin のスクリプティングに慣れていただくために、<a href="https://github.com/Kotlin/kotlin-script-examples" target="_blank" rel="noreferrer">サンプルプロジェクト</a>を用意しました。 これには、標準スクリプト (<code>*.main.kts</code>) の例と、Kotlin Scripting API およびカスタムスクリプト定義の使用例が含まれています。<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">課題トラッカー</a>を使用して、ぜひ試してフィードバックを共有してください。</p><h3 id="新しい依存関係解決-api" tabindex="-1">新しい依存関係解決 API <a class="header-anchor" href="#新しい依存関係解決-api" aria-label="Permalink to &quot;新しい依存関係解決 API&quot;">​</a></h3><p>1.4.0 では、外部依存関係（Maven アーティファクトなど）を解決するための新しい API を導入し、その実装も行いました。この API は、新しいアーティファクト <code>kotlin-scripting-dependencies</code> と <code>kotlin-scripting-dependencies-maven</code> で公開されています。 以前の <code>kotlin-script-util</code> ライブラリの依存関係解決機能は非推奨になりました。</p><h3 id="新しい-repl-api" tabindex="-1">新しい REPL API <a class="header-anchor" href="#新しい-repl-api" aria-label="Permalink to &quot;新しい REPL API&quot;">​</a></h3><p>新しい実験的な REPL API は、Kotlin Scripting API の一部になりました。また、公開されたアーティファクトにはいくつかの実装があり、一部にはコード補完などの高度な機能があります。この API は<a href="https://blog.jetbrains.com/kotlin/2020/05/kotlin-kernel-for-jupyter-notebook-v0-8/" target="_blank" rel="noreferrer">Kotlin Jupyter カーネル</a>で使用されており、独自のカスタムシェルや REPL で試すことができるようになりました。</p><h3 id="コンパイル済みスクリプトキャッシュ" tabindex="-1">コンパイル済みスクリプトキャッシュ <a class="header-anchor" href="#コンパイル済みスクリプトキャッシュ" aria-label="Permalink to &quot;コンパイル済みスクリプトキャッシュ&quot;">​</a></h3><p>Kotlin Scripting API は、コンパイル済みスクリプトキャッシュを実装する機能を提供するようになり、変更されていないスクリプトのその後の実行を大幅に高速化します。デフォルトの高度なスクリプト実装 <code>kotlin-main-kts</code> には、すでに独自のキャッシュがあります。</p><h3 id="成果物名の変更" tabindex="-1">成果物名の変更 <a class="header-anchor" href="#成果物名の変更" aria-label="Permalink to &quot;成果物名の変更&quot;">​</a></h3><p>成果物名の混乱を避けるため、<code>kotlin-scripting-jsr223-embeddable</code> と <code>kotlin-scripting-jvm-host-embeddable</code> をそれぞれ <code>kotlin-scripting-jsr223</code> と <code>kotlin-scripting-jvm-host</code> に変更しました。これらの成果物は <code>kotlin-compiler-embeddable</code> 成果物に依存しており、バンドルされたサードパーティライブラリをシェーディングして使用上の競合を回避しています。この名前変更により、スクリプティング成果物については、(一般的に安全な) <code>kotlin-compiler-embeddable</code> の使用をデフォルトにしています。 何らかの理由で、シェーディングされていない <code>kotlin-compiler</code> に依存する成果物が必要な場合は、<code>-unshaded</code> サフィックスを持つ成果物バージョン (<code>kotlin-scripting-jsr223-unshaded</code> など) を使用してください。この名前変更は、直接使用されることになっているスクリプティング成果物にのみ影響し、他の成果物の名前は変更されていません。</p><h2 id="kotlin-1-4-0-への移行" tabindex="-1">Kotlin 1.4.0 への移行 <a class="header-anchor" href="#kotlin-1-4-0-への移行" aria-label="Permalink to &quot;Kotlin 1.4.0 への移行&quot;">​</a></h2><p>Kotlin プラグインの移行ツールは、プロジェクトを以前のバージョンの Kotlin から 1.4.0 に移行するのに役立ちます。</p><p>Kotlin のバージョンを <code>1.4.0</code> に変更し、Gradle または Maven プロジェクトを再インポートするだけです。すると、IDE から移行に関する問い合わせがあります。</p><p>同意すると、移行コードインスペクションが実行され、コードがチェックされ、動作しない、または 1.4.0 で推奨されないものに対する修正が提案されます。</p><p><img src="`+u+'" alt="Run migration" width="300"></p><p>コードインスペクションにはさまざまな<a href="https://www.jetbrains.com/help/idea/configuring-inspection-severities.html" target="_blank" rel="noreferrer">重要度レベル</a>があり、どの提案を受け入れるか、どの提案を無視するかを決定するのに役立ちます。</p><p><img src="'+C+'" alt="Migration inspections"></p><p>Kotlin 1.4.0 は<a href="/ja/kotlin/kotlin-evolution-principles#language-and-tooling-releases">機能リリース</a>であるため、言語に互換性のない変更をもたらす可能性があります。そのような変更の詳細なリストは、**<a href="/ja/kotlin/compatibility-guide-14">Kotlin 1.4 の互換性ガイド</a>**を参照してください。</p>',94))])}const I=m(B,[["render",A]]);export{P as __pageData,I as default};
