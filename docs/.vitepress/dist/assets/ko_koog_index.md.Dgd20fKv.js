import{_ as a,c as i,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"개요","description":"","frontmatter":{},"headers":[],"relativePath":"ko/koog/index.md","filePath":"ko/koog/index.md","lastUpdated":1755146406000}'),e={name:"ko/koog/index.md"};function t(p,s,o,h,r,k){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="개요" tabindex="-1">개요 <a class="header-anchor" href="#개요" aria-label="Permalink to &quot;개요&quot;">​</a></h1><p>Koog는 완전히 관용적인 Kotlin으로 AI 에이전트를 빌드하고 실행하도록 설계된 Kotlin 기반 프레임워크입니다. 이 프레임워크를 통해 도구와 상호작용하고, 복잡한 워크플로를 처리하며, 사용자와 소통할 수 있는 에이전트를 생성할 수 있습니다.</p><p>이 프레임워크는 다음 유형의 에이전트를 지원합니다.</p><ul><li>최소한의 구성으로 단일 입력을 처리하고 응답을 제공하는 단일 실행 에이전트입니다. 이 유형의 에이전트는 작업을 완료하고 응답을 제공하기 위해 단일 도구 호출 주기 내에서 작동합니다.</li><li>사용자 지정 전략 및 구성을 지원하는 고급 기능을 갖춘 복잡한 워크플로 에이전트입니다.</li></ul><h2 id="주요-기능" tabindex="-1">주요 기능 <a class="header-anchor" href="#주요-기능" aria-label="Permalink to &quot;주요 기능&quot;">​</a></h2><p>Koog의 주요 기능은 다음과 같습니다.</p><ul><li><strong>순수 Kotlin 구현</strong>: 자연스럽고 관용적인 Kotlin으로 AI 에이전트를 전적으로 빌드합니다.</li><li><strong>MCP 통합</strong>: 향상된 모델 관리를 위해 Model Control Protocol에 연결합니다.</li><li><strong>임베딩 기능</strong>: 시맨틱 검색 및 지식 검색을 위해 벡터 임베딩을 사용합니다.</li><li><strong>사용자 지정 도구 생성</strong>: 외부 시스템 및 API에 접근하는 도구로 에이전트를 확장합니다.</li><li><strong>기성 구성 요소</strong>: 일반적인 AI 엔지니어링 문제에 대한 사전 구축된 솔루션으로 개발 속도를 높입니다.</li><li><strong>지능형 히스토리 압축</strong>: 다양한 사전 구축된 전략을 사용하여 대화 컨텍스트를 유지하면서 토큰 사용을 최적화합니다.</li><li><strong>강력한 스트리밍 API</strong>: 스트리밍 지원 및 병렬 도구 호출을 통해 응답을 실시간으로 처리합니다.</li><li><strong>영구 에이전트 메모리</strong>: 세션 및 다른 에이전트 간에 지식 유지를 가능하게 합니다.</li><li><strong>포괄적인 트레이싱</strong>: 상세하고 구성 가능한 트레이싱을 통해 에이전트 실행을 디버그하고 모니터링합니다.</li><li><strong>유연한 그래프 워크플로</strong>: 직관적인 그래프 기반 워크플로를 사용하여 복잡한 에이전트 동작을 설계합니다.</li><li><strong>모듈형 기능 시스템</strong>: 구성 가능한 아키텍처를 통해 에이전트 기능을 사용자 지정합니다.</li><li><strong>확장 가능한 아키텍처</strong>: 간단한 챗봇부터 엔터프라이즈 애플리케이션까지 워크로드를 처리합니다.</li><li><strong>멀티플랫폼</strong>: Kotlin Multiplatform을 사용하여 JVM, JS, WasmJS 타겟 모두에서 에이전트를 실행합니다.</li></ul><h1 id="사용-가능한-llm-제공업체-및-플랫폼" tabindex="-1">사용 가능한 LLM 제공업체 및 플랫폼 <a class="header-anchor" href="#사용-가능한-llm-제공업체-및-플랫폼" aria-label="Permalink to &quot;사용 가능한 LLM 제공업체 및 플랫폼&quot;">​</a></h1><p>에이전트 기능을 구현하는 데 사용할 수 있는 LLM 제공업체 및 플랫폼은 다음과 같습니다.</p><ul><li>Google</li><li>OpenAI</li><li>Anthropic</li><li>OpenRouter</li><li>Ollama</li></ul><h1 id="설치" tabindex="-1">설치 <a class="header-anchor" href="#설치" aria-label="Permalink to &quot;설치&quot;">​</a></h1><p>Koog를 사용하려면 빌드 구성에 필요한 모든 종속성을 포함해야 합니다.</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><h3 id="gradle-kotlin-dsl" tabindex="-1">Gradle (Kotlin DSL) <a class="header-anchor" href="#gradle-kotlin-dsl" aria-label="Permalink to &quot;Gradle (Kotlin DSL)&quot;">​</a></h3><ol><li><p><code>build.gradle.kts</code> 파일에 종속성을 추가합니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>dependencies {</span></span>
<span class="line"><span>    implementation(&quot;ai.koog:koog-agents:LATEST_VERSION&quot;)</span></span>
<span class="line"><span>}</span></span></code></pre></div></li><li><p>저장소 목록에 <code>mavenCentral()</code>이 있는지 확인하세요.</p></li></ol><h3 id="gradle-groovy" tabindex="-1">Gradle (Groovy) <a class="header-anchor" href="#gradle-groovy" aria-label="Permalink to &quot;Gradle (Groovy)&quot;">​</a></h3><ol><li><p><code>build.gradle</code> 파일에 종속성을 추가합니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>dependencies {</span></span>
<span class="line"><span>    implementation &#39;ai.koog:koog-agents:LATEST_VERSION&#39;</span></span>
<span class="line"><span>}</span></span></code></pre></div></li><li><p>저장소 목록에 <code>mavenCentral()</code>이 있는지 확인하세요.</p></li></ol><h2 id="maven" tabindex="-1">Maven <a class="header-anchor" href="#maven" aria-label="Permalink to &quot;Maven&quot;">​</a></h2><ol><li><p><code>pom.xml</code> 파일에 종속성을 추가합니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;ai.koog&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;koog-agents&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;LATEST_VERSION&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div></li><li><p>저장소 목록에 <code>mavenCentral</code>이 있는지 확인하세요.</p></li></ol><h1 id="빠른-시작-예시" tabindex="-1">빠른 시작 예시 <a class="header-anchor" href="#빠른-시작-예시" aria-label="Permalink to &quot;빠른 시작 예시&quot;">​</a></h1><p>AI 에이전트를 시작하는 데 도움이 되도록 단일 실행 에이전트의 간단한 예시가 있습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>예시를 실행하기 전에 해당 API 키를 환경 변수로 할당하세요. 자세한 내용은 <a href="./single-run-agents">시작하기</a>를 참조하세요.</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OPENAI_API_KEY&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or Anthropic, Google, OpenRouter, etc.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apiKey), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or Anthropic, Google, OpenRouter, etc.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            systemPrompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You are a helpful assistant. Answer user questions concisely.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Chat.GPT4o</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello! How can you help me?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>자세한 내용은 <a href="./single-run-agents">시작하기</a>를 참조하세요.</p>`,24)]))}const c=a(e,[["render",t]]);export{g as __pageData,c as default};
