import{_ as o,c as i,o as l,ag as a}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"変更履歴","description":"","frontmatter":{},"headers":[],"relativePath":"ja/coil/changelog.md","filePath":"ja/coil/changelog.md","lastUpdated":1753460095000}'),c={name:"ja/coil/changelog.md"};function d(r,e,t,n,s,h){return l(),i("div",null,e[0]||(e[0]=[a(`<h1 id="変更履歴" tabindex="-1">変更履歴 <a class="header-anchor" href="#変更履歴" aria-label="Permalink to &quot;変更履歴&quot;">​</a></h1><h2 id="_3-3-0-2025年7月22日" tabindex="-1">[3.3.0] - 2025年7月22日 <a class="header-anchor" href="#_3-3-0-2025年7月22日" aria-label="Permalink to &quot;[3.3.0] - 2025年7月22日&quot;">​</a></h2><ul><li><strong>新機能</strong>: アプリがバックグラウンドにある間、Androidで<code>MemoryCache.maxSize</code>を制限する新しいAPIを導入しました。 <ul><li><code>ImageLoader.Builder.memoryCacheMaxSizePercentWhileInBackground</code>が設定されている場合、アプリがバックグラウンドにある間、<code>ImageLoader</code>のメモリキャッシュはその最大サイズの一定の割合に制限されます。この設定は現在、デフォルトで無効になっています。</li><li>アプリがバックグラウンドにあるときに、メモリキャッシュから画像がトリミングされ、制限された最大サイズに達します。ただし、最近トリミングされた画像へのメモリキャッシュの弱参照（weak references）は影響を受けません。これは、画像が現在他の場所で参照されている場合（例: <code>AsyncImage</code>、<code>ImageView</code>など）、メモリキャッシュに引き続き存在することを意味します。</li><li>このAPIは、バックグラウンドでのメモリ使用量を削減し、アプリが強制終了されるのを防ぎ、ユーザーのデバイスのメモリ負荷を軽減するのに役立ちます。</li></ul></li><li><strong>新機能</strong>: <code>SvgDecoder</code>に<code>Svg.Parser</code>引数を追加しました。 <ul><li>これにより、デフォルトのSVGパーサーがニーズに合わない場合、カスタムのSVGパーサーを使用できるようになります。</li></ul></li><li><code>SvgDecoder</code>に<code>density</code>引数を追加し、カスタムの密度乗数を指定できるようにしました。</li><li><code>Uri.Builder</code>を追加し、<code>Uri</code>のコピーと変更をサポートしました。</li><li><code>ImageLoader.Builder.mainCoroutineContext</code>を追加し、テストでCoilの<code>Dispatchers.main.immediate</code>の使用をオーバーライドできるようにしました。</li><li><code>CrossfadePainter.intrinsicSize</code>が、アニメーションの最後に<code>start</code>画像が参照解除されたときに変更される問題を修正しました。これは<code>CrossfadeDrawable</code>の動作と一致します。</li><li><code>ImageLoaders.executeBlocking</code>がJavaからアクセスできない問題を修正しました。</li><li><code>coil-network-ktor3</code>で<code>kotlinx.io</code>のOkio相互運用モジュールを使用するようにしました。</li><li><code>kotlinx-datetime</code>を<code>0.7.1</code>に更新しました。 <ul><li>このリリースには、<code>coil-network-cache-control</code>モジュールのみに影響するバイナリ互換性のない変更が含まれています。詳細については<a href="https://github.com/Kotlin/kotlinx-datetime?tab=readme-ov-file#deprecation-of-instant" target="_blank" rel="noreferrer">こちら</a>を参照してください。</li></ul></li><li>Kotlinを2.2.0に更新しました。</li><li>Composeを1.8.2に更新しました。</li><li>Okioを3.15.0に更新しました。</li><li>Skikoを0.9.4.2に更新しました。</li></ul><h2 id="_3-2-0-2025年5月13日" tabindex="-1">[3.2.0] - 2025年5月13日 <a class="header-anchor" href="#_3-2-0-2025年5月13日" aria-label="Permalink to &quot;[3.2.0] - 2025年5月13日&quot;">​</a></h2><p><code>3.1.0</code>からの変更点:</p><ul><li><strong>重要</strong>: <code>coil-compose</code>と<code>coil-compose-core</code>は、Compose <code>1.8.0</code>がJava 11のバイトコードを要求するため、Java 11のバイトコードを必要とするようになりました。有効にする方法については<a href="/ja/coil/faq/">こちら</a>を参照してください。</li><li><code>AsyncImagePreviewHandler</code>の関数型コンストラクタが、<code>AsyncImagePainter.State.Loading</code>ではなく<code>AsyncImagePainter.State.Success</code>を返すように変更しました。</li><li><code>ConstraintsSizeResolver#size()</code>におけるキャンセルを修正しました。</li><li>R8でビルドする際の<code>PlatformContext</code>の欠落に関する警告を修正しました。</li><li>デフォルトの<code>FakeImageLoaderEngine</code>のレスポンスが返されたときに、<code>FakeImageLoaderEngine</code>が<code>Transition.Factory.NONE</code>を設定しない問題を修正しました。</li><li><code>ColorImage</code>から実験的アノテーションを削除しました。</li><li><code>CacheControlCacheStrategy</code>でネットワークヘッダーを遅延的にパースするようにしました。</li><li><code>CircleCropTransformation</code>と<code>RoundedCornersTransformation</code>をリファクタリングし、共通のコードを共有するようにしました。</li><li><code>ExifOrientationStrategy</code>が<code>RESPECT_PERFORMANCE</code>ではない場合、内部で<code>BitmapFactory</code>を使用するようにフォールバックしました。</li><li>Kotlinを2.1.20に更新しました。</li><li>Composeを1.8.0に更新しました。</li><li>Okioを3.11.0に更新しました。</li><li>Skikoを0.9.4に更新しました。</li><li>Coroutinesを1.10.2に更新しました。</li><li><code>accompanist-drawablepainter</code>を0.37.3に更新しました。</li></ul><p><code>3.2.0-rc02</code>からの変更点:</p><ul><li><code>ExifOrientationStrategy</code>が<code>RESPECT_PERFORMANCE</code>ではない場合、内部で<code>BitmapFactory</code>を使用するようにフォールバックしました。</li><li>Composeを1.8.0に更新しました。</li><li><code>accompanist-drawablepainter</code>を0.37.3に更新しました。</li></ul><h2 id="_3-2-0-rc02-2025年4月26日" tabindex="-1">[3.2.0-rc02] - 2025年4月26日 <a class="header-anchor" href="#_3-2-0-rc02-2025年4月26日" aria-label="Permalink to &quot;[3.2.0-rc02] - 2025年4月26日&quot;">​</a></h2><ul><li>非JVMターゲットで<code>KtorNetworkFetcherFactory</code>（Ktor 3）を使用して画像をロードする際に、<code>ClosedByteChannelException</code>で画像リクエストが失敗する問題を修正しました。</li></ul><h2 id="_3-2-0-rc01-2025年4月24日" tabindex="-1">[3.2.0-rc01] - 2025年4月24日 <a class="header-anchor" href="#_3-2-0-rc01-2025年4月24日" aria-label="Permalink to &quot;[3.2.0-rc01] - 2025年4月24日&quot;">​</a></h2><ul><li><strong>重要</strong>: <code>coil-compose</code>と<code>coil-compose-core</code>は、Compose <code>1.8.0</code>がJava 11のバイトコードを要求するため、Java 11のバイトコードを必要とするようになりました。有効にする方法については<a href="/ja/coil/faq/">こちら</a>を参照してください。</li><li><code>AsyncImagePreviewHandler</code>の関数型コンストラクタが、<code>AsyncImagePainter.State.Loading</code>ではなく<code>AsyncImagePainter.State.Success</code>を返すように変更しました。</li><li><code>ConstraintsSizeResolver#size()</code>におけるキャンセルを修正しました。</li><li>R8でビルドする際の<code>PlatformContext</code>の欠落に関する警告を修正しました。</li><li>デフォルトの<code>FakeImageLoaderEngine</code>のレスポンスが返されたときに、<code>FakeImageLoaderEngine</code>が<code>Transition.Factory.NONE</code>を設定しない問題を修正しました。</li><li><code>ColorImage</code>から実験的アノテーションを削除しました。</li><li><code>CacheControlCacheStrategy</code>でネットワークヘッダーを遅延的にパースするようにしました。</li><li><code>CircleCropTransformation</code>と<code>RoundedCornersTransformation</code>をリファクタリングし、共通のコードを共有するようにしました。</li><li><code>coil-network-ktor2</code>と<code>coil-network-ktor3</code>で<code>kotlinx.io</code>のOkio相互運用モジュールを使用するようにしました。</li><li>Kotlinを2.1.20に更新しました。</li><li>Composeを1.8.0-rc01に更新しました。</li><li>Okioを3.11.0に更新しました。</li><li>Skikoを0.9.4に更新しました。</li><li>Coroutinesを1.10.2に更新しました。</li></ul><h2 id="_3-1-0-2025年2月4日" tabindex="-1">[3.1.0] - 2025年2月4日 <a class="header-anchor" href="#_3-1-0-2025年2月4日" aria-label="Permalink to &quot;[3.1.0] - 2025年2月4日&quot;">​</a></h2><ul><li><code>AsyncImage</code>のパフォーマンスを改善しました。 <ul><li>コンポーザブルがインスタンス化されるか再利用されるかによって、実行時パフォーマンスが25%から40%改善されました。アロケーションも35%から48%削減されました。詳細については<a href="https://github.com/coil-kt/coil/pull/2795" target="_blank" rel="noreferrer">こちら</a>を参照してください。</li></ul></li><li><code>ColorImage</code>を追加し、<code>FakeImage</code>を非推奨にしました。 <ul><li><code>ColorImage</code>は、テストやプレビューで偽の値を返すのに便利です。<code>FakeImage</code>と同じユースケースを解決しますが、<code>coil-test</code>ではなく<code>coil-core</code>でより簡単にアクセスできます。</li></ul></li><li><code>coil-compose-core</code>の<code>Dispatchers.Main.immedate</code>への依存を削除しました。 <ul><li>これにより、<code>AsyncImagePainter</code>がPaparazziおよびRoborazziのスクリーンショットテストで<code>ImageRequest</code>を同期的に実行しないケースも修正されました。</li></ul></li><li><code>data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</code>形式の<a href="https://www.ietf.org/rfc/rfc2397.txt" target="_blank" rel="noreferrer">データURI</a>のサポートを追加しました。</li><li>GIFのメタデータでエンコードされた繰り返し回数を使用するために、<code>AnimatedImageDecoder.ENCODED_LOOP_COUNT</code>を追加しました。</li><li>カスタム拡張をサポートするために、<code>NetworkRequest</code>に<code>Extras</code>を追加しました。</li><li><code>DiskCache.Builder.cleanupCoroutineContext</code>を追加し、<code>DiskCache.Builder.cleanupDispatcher</code>を非推奨にしました。</li><li>API 29以上で<code>android.graphics.ImageDecoder</code>の使用をオプションで無効にするために、<code>ImageLoader.Builder.imageDecoderEnabled</code>を追加しました。</li><li><code>ImageRequest</code>のデータ型に登録された<code>Keyer</code>がない場合、警告をログ出力するようにしました。</li><li><code>CrossfadePainter</code>を公開しました。</li><li>すべてのマルチプラットフォームターゲットで<code>Transformation</code>をサポートしました。</li><li><code>CacheControlCacheStrategy</code>で<code>Expires</code>ヘッダー値として0をサポートしました。</li><li><code>AsyncImage</code>/<code>SubcomposeAsyncImage</code>/<code>rememberAsyncImage</code>が、<code>ContentScale</code>が<code>None</code>に変更された場合に新しい<code>ImageRequest</code>を起動しない問題を修正しました。</li><li>Kotlinを2.1.10に更新しました。 <ul><li>注: このリリースでは、<a href="https://kotlinlang.org/docs/whatsnew21.html#llvm-update-from-11-1-0-to-16-0-0" target="_blank" rel="noreferrer">LLVMの更新</a>により、Kotlin Nativeを使用する場合、Kotlin 2.1.0以降でのコンパイルが必要です。</li></ul></li><li>Composeを1.7.3に更新しました。</li><li><code>androidx.core</code>を1.15.0に更新しました。</li></ul><h2 id="_3-0-4-2024年11月25日" tabindex="-1">[3.0.4] - 2024年11月25日 <a class="header-anchor" href="#_3-0-4-2024年11月25日" aria-label="Permalink to &quot;[3.0.4] - 2024年11月25日&quot;">​</a></h2><ul><li>Android Studioのプレビューでベクタードローアブルがレンダリングされない問題を修正しました。</li><li><code>maxBitmapSize</code>を超えるリクエストに対するメモリキャッシュミスの可能性を修正しました。</li><li>Androidで<code>FakeImage</code>がレンダリングされない問題を修正しました。</li><li><code>AsyncImage</code>/<code>rememberAsyncImagePainter</code>/<code>SubcomposeAsyncImage</code>と一緒に使用した場合、リクエストの<code>Transformation</code>が変更されたときに新しい画像リクエストが起動しない問題を修正しました。</li><li><code>ScaleDrawable</code>と<code>CrossfadeDrawable</code>がtintの状態を尊重しない問題を修正しました。</li><li><code>ImageDecoder</code>が部分的な画像ソースをデコードできるようにしました。これは<code>BitmapFactory</code>の動作と一致します。</li><li>デコード後に<code>Bitmap.prepareToDraw()</code>が呼び出されない問題を修正しました。</li><li><code>SvgDecoder</code>は、非ラスター化画像に対して<code>isSampled = true</code>を返すべきではありません。</li><li>Composeで即時メインディスパッチャーが利用できない場合、<code>Dispatchers.Unconfined</code>を使用するようにフォールバックしました。これはプレビュー/テスト環境でのみ使用されます。</li><li>Ktor 2を<code>2.3.13</code>に更新しました。</li></ul><h2 id="_3-0-3-2024年11月14日" tabindex="-1">[3.0.3] - 2024年11月14日 <a class="header-anchor" href="#_3-0-3-2024年11月14日" aria-label="Permalink to &quot;[3.0.3] - 2024年11月14日&quot;">​</a></h2><ul><li><code>ImageView</code>の<code>ScaleType</code>に基づいて<code>ImageRequest.scale</code>を設定する問題を修正しました。</li><li><code>DiskCache</code>がファイル削除後のエントリの削除を正しく追跡しないエッジケースを修正しました。</li><li>エラーをログ出力する際に、<code>Logger</code>にthrowableを渡すようにしました。</li><li><code>kotlin-stdlib-jdk7</code>および<code>kotlin-stdlib-jdk8</code>を<code>kotlin-stdlib</code>で置き換えないようにしました。</li></ul><h2 id="_3-0-2-2024年11月9日" tabindex="-1">[3.0.2] - 2024年11月9日 <a class="header-anchor" href="#_3-0-2-2024年11月9日" aria-label="Permalink to &quot;[3.0.2] - 2024年11月9日&quot;">​</a></h2><ul><li>Androidでカスタムの<code>CacheStrategy</code>を指定して<code>OkHttpNetworkFetcherFactory</code>を呼び出すとクラッシュする問題を修正しました。</li><li><code>CacheControlCacheStrategy</code>がキャッシュエントリの経過時間を誤って計算する問題を修正しました。</li><li><code>ImageRequest.bitmapConfig</code>が<code>ARGB_8888</code>または<code>HARDWARE</code>であった場合に、API 28以上でのみ尊重される問題を修正しました。</li></ul><h2 id="_3-0-1-2024年11月7日" tabindex="-1">[3.0.1] - 2024年11月7日 <a class="header-anchor" href="#_3-0-1-2024年11月7日" aria-label="Permalink to &quot;[3.0.1] - 2024年11月7日&quot;">​</a></h2><ul><li>ハードウェアビットマップを基盤とする<code>BitmapImage</code>で<code>Image.toBitmap</code>を呼び出すとクラッシュする問題を修正しました。</li><li><code>AsyncImageModelEqualityDelegate.Default</code>が非<code>ImageRequest</code>モデルに対して等価性を誤って比較する問題を修正しました。</li></ul><h2 id="_3-0-0-2024年11月4日" tabindex="-1">[3.0.0] - 2024年11月4日 <a class="header-anchor" href="#_3-0-0-2024年11月4日" aria-label="Permalink to &quot;[3.0.0] - 2024年11月4日&quot;">​</a></h2><p>Coil 3.0.0は、<a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>を完全にサポートするCoilの次のメジャーリリースです。</p><p><a href="/ja/coil/upgrading_to_coil3/">3.0.0における改善点と重要な変更点の完全なリストについては、アップグレードガイド</a>をご覧ください。</p><p><code>3.0.0-rc02</code>からの変更点:</p><ul><li>残りの非推奨メソッドを削除しました。</li></ul><h2 id="_3-0-0-rc02-2024年10月28日" tabindex="-1">[3.0.0-rc02] - 2024年10月28日 <a class="header-anchor" href="#_3-0-0-rc02-2024年10月28日" aria-label="Permalink to &quot;[3.0.0-rc02] - 2024年10月28日&quot;">​</a></h2><p><a href="/ja/coil/upgrading_to_coil3/">3.xにおける改善点と重要な変更点の完全なリストについては、アップグレードガイド</a>をご覧ください。<code>3.0.0-rc01</code>からの変更点:</p><ul><li><code>BlackholeDecoder</code>を追加しました。これにより、<a href="/ja/coil/faq/">ディスクキャッシュのみのプリロード</a>が簡素化されます。</li><li><code>ConstraintsSizeResolver</code>と<code>DrawScopeSizeResolver</code>の<code>remember</code>関数を追加しました。</li><li><code>AsyncImage</code>の引数から<code>EqualityDelegate</code>を削除しました。代わりに、<code>LocalAsyncImageModelEqualityDelegate</code>を通じて設定されるべきです。</li><li>親コンポーザブルが<code>IntrinsicSize</code>を使用している場合に<code>AsyncImage</code>がレンダリングされない問題を修正しました。</li><li><code>AsyncImagePainter</code>に子ペインタがない場合、<code>AsyncImage</code>が利用可能な制約を満たす問題を修正しました。</li><li><code>EqualityDelegate</code>が無視されたために、<code>rememberAsyncImagePainter</code>がその状態が監視されると無限に再コンポーズされる問題を修正しました。</li><li>特殊文字を含む<code>File</code>/<code>Path</code>パスのパースを修正しました。</li><li><code>VideoFrameDecoder</code>でカスタムの<code>FileSystem</code>実装を使用する問題を修正しました。</li><li>Ktorを<code>3.0.0</code>に更新しました。</li><li><code>androidx.annotation</code>を<code>1.9.0</code>に更新しました。</li></ul><h2 id="_3-0-0-rc01-2024年10月8日" tabindex="-1">[3.0.0-rc01] - 2024年10月8日 <a class="header-anchor" href="#_3-0-0-rc01-2024年10月8日" aria-label="Permalink to &quot;[3.0.0-rc01] - 2024年10月8日&quot;">​</a></h2><p><a href="/ja/coil/upgrading_to_coil3/">3.xにおける改善点と重要な変更点の完全なリストについては、アップグレードガイド</a>をご覧ください。<code>3.0.0-alpha10</code>からの変更点:</p><ul><li><strong>破壊的変更</strong>: <code>addLastModifiedToFileCacheKey</code>をデフォルトで無効にし、リクエストごとに設定できるようにしました。同じフラグでこの動作を再度有効にすることができます。</li><li><strong>新機能</strong>: 新しい<code>coil-network-cache-control</code>アーティファクトを導入しました。これは、<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noreferrer"><code>Cache-Control</code>ヘッダー</a>のサポートを実装します。</li><li><strong>新機能</strong>: <code>SvgDecoder.Factory</code>に<code>scaleToDensity</code>プロパティを追加しました。このプロパティは、固有の寸法を持つSVGがデバイスの密度（Androidのみでサポート）で乗算されることを保証します。</li><li><code>ExifOrientationPolicy</code>を<code>ExifOrientationStrategy</code>に名前変更しました。</li><li><code>MemoryCache</code>から共有できない画像を削除しました。</li><li><code>ConstraintsSizeResolver</code>を公開しました。</li><li><code>setSingletonImageLoaderFactory</code>を安定化しました。</li><li><code>coil-network-ktor3</code>で最適化されたJVM I/O関数を復元しました。</li><li>MIMEタイプリストに<code>pdf</code>を追加しました。</li><li>コンパイルSDKを35に更新しました。</li><li>Kotlinを2.0.20に更新しました。</li><li>Okioを3.9.1に更新しました。</li></ul><h2 id="_3-0-0-alpha10-2024年8月7日" tabindex="-1">[3.0.0-alpha10] - 2024年8月7日 <a class="header-anchor" href="#_3-0-0-alpha10-2024年8月7日" aria-label="Permalink to &quot;[3.0.0-alpha10] - 2024年8月7日&quot;">​</a></h2><ul><li><strong>破壊的変更</strong>: <code>ImageLoader.Builder.networkObserverEnabled</code>を<code>NetworkFetcher</code>用の<code>ConnectivityChecker</code>インターフェースに置き換えました。 <ul><li>ネットワークオブザーバーを無効にするには、<code>KtorNetworkFetcherFactory</code>/<code>OkHttpNetworkFetcherFactory</code>のコンストラクタに<code>ConnectivityChecker.ONLINE</code>を渡します。</li></ul></li><li><strong>新機能</strong>: すべてのプラットフォームで<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-images-resources.html" target="_blank" rel="noreferrer">Compose Multiplatformリソース</a>の読み込みをサポートしました。リソースをロードするには、<code>Res.getUri</code>を使用します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;drawable/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><code>ImageLoader</code>と<code>ImageRequest</code>に<code>maxBitmapSize</code>プロパティを追加しました。 <ul><li>このプロパティはデフォルトで4096x4096であり、アロケートされたビットマップの寸法に安全な上限を提供します。これは、<code>Size.ORIGINAL</code>で非常に大きな画像を誤ってロードし、メモリ不足例外を引き起こすのを防ぐのに役立ちます。</li></ul></li><li><code>ExifOrientationPolicy</code>をカスタムポリシーをサポートするインターフェースに変換しました。</li><li>Windowsのファイルパスの<code>Uri</code>処理を修正しました。</li><li><code>Image</code> APIから<code>@ExperimentalCoilApi</code>を削除しました。</li><li>Kotlinを2.0.10に更新しました。</li></ul><h2 id="_3-0-0-alpha09-2024年7月23日" tabindex="-1">[3.0.0-alpha09] - 2024年7月23日 <a class="header-anchor" href="#_3-0-0-alpha09-2024年7月23日" aria-label="Permalink to &quot;[3.0.0-alpha09] - 2024年7月23日&quot;">​</a></h2><ul><li><strong>破壊的変更</strong>: <code>io.coil-kt.coil3:coil-network-ktor</code>アーティファクトを<code>io.coil-kt.coil3:coil-network-ktor2</code>に名前変更しました。これはKtor 2.xに依存します。さらに、<code>io.coil-kt.coil3:coil-network-ktor3</code>を導入しました。これはKtor 3.xに依存します。<code>wasmJs</code>のサポートはKtor 3.xでのみ利用可能です。</li><li><strong>新機能</strong>: <code>AsyncImagePainter.restart()</code>を追加し、画像リクエストを手動で再開できるようにしました。</li><li><code>NetworkClient</code>および関連クラスから<code>@ExperimentalCoilApi</code>を削除しました。</li><li><code>ImageRequest</code>を最適化し、不要な<code>Extras</code>と<code>Map</code>のアロケーションを回避しました。</li></ul><h2 id="_2-7-0-2024年7月17日" tabindex="-1">[2.7.0] - 2024年7月17日 <a class="header-anchor" href="#_2-7-0-2024年7月17日" aria-label="Permalink to &quot;[2.7.0] - 2024年7月17日&quot;">​</a></h2><ul><li><code>ImageLoader.execute</code>、<code>AsyncImage</code>、<code>SubcomposeAsyncImage</code>、および<code>rememberAsyncImagePainter</code>のパフォーマンスを向上させるために、内部コルーチンの使用をわずかに最適化しました。(<a href="https://github.com/coil-kt/coil/pull/2205" target="_blank" rel="noreferrer">#2205</a>)</li><li>チャンク化されたレスポンスに対する重複したネットワーク呼び出しを修正しました。(<a href="https://github.com/coil-kt/coil/pull/2363" target="_blank" rel="noreferrer">#2363</a>)</li><li>Kotlinを2.0.0に更新しました。</li><li>Compose UIを1.6.8に更新しました。</li><li>Okioを3.9.0に更新しました。</li></ul><h2 id="_3-0-0-alpha08-2024年7月8日" tabindex="-1">[3.0.0-alpha08] - 2024年7月8日 <a class="header-anchor" href="#_3-0-0-alpha08-2024年7月8日" aria-label="Permalink to &quot;[3.0.0-alpha08] - 2024年7月8日&quot;">​</a></h2><ul><li><strong>破壊的変更</strong>: <code>ImageRequest</code>と<code>ImageLoader</code>の<code>dispatcher</code>メソッドを<code>coroutineContext</code>に名前変更しました。たとえば、<code>ImageRequest.Builder.dispatcher</code>は<code>ImageRequest.Builder.coroutineContext</code>になりました。メソッドが任意の<code>CoroutineContext</code>を受け入れ、もはや<code>Dispatcher</code>を必要としないため、名前が変更されました。</li><li>修正: 競合状態により発生する可能性のある<code>IllegalStateException: Reading a state that was created after the snapshot was taken or in a snapshot that has not yet been applied</code>を修正しました。 <ul><li>注: これにより、<code>Dispatchers.Main.immediate</code>へのソフトな依存関係が再導入されます。結果として、JVMで<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-swing/" target="_blank" rel="noreferrer"><code>kotlinx-coroutines-swing</code></a>への依存関係を再追加する必要があります。インポートされない場合、<code>ImageRequest</code>はすぐにディスパッチされず、<code>ImageRequest.placeholder</code>を設定するまで、またはメモリキャッシュから解決するまでに1フレームの遅延が発生します。</li></ul></li></ul><h2 id="_3-0-0-alpha07-2024年6月26日" tabindex="-1">[3.0.0-alpha07] - 2024年6月26日 <a class="header-anchor" href="#_3-0-0-alpha07-2024年6月26日" aria-label="Permalink to &quot;[3.0.0-alpha07] - 2024年6月26日&quot;">​</a></h2><ul><li><strong>破壊的変更</strong>: <code>AsyncImagePainter</code>はデフォルトで<code>onDraw</code>を待たなくなり、代わりに<code>Size.ORIGINAL</code>を使用します。 <ul><li>これにより、<a href="https://github.com/coil-kt/coil/issues/1910" target="_blank" rel="noreferrer">Roborazzi/Paparazziとの互換性の問題</a>が修正され、全体的なテストの信頼性が向上します。</li><li><code>onDraw</code>を待つ以前の動作に戻すには、<code>ImageRequest.sizeResolver</code>として<code>DrawScopeSizeResolver</code>を設定してください。</li></ul></li><li><strong>破壊的変更</strong>: マルチプラットフォーム<code>Image</code> APIをリファクタリングしました。特に、<code>asCoilImage</code>が<code>asImage</code>に名前変更されました。</li><li><strong>破壊的変更</strong>: <code>AsyncImagePainter.state</code>が<code>StateFlow&lt;AsyncImagePainter.State&gt;</code>に変更されました。その値を監視するには<code>collectAsState</code>を使用してください。これによりパフォーマンスが向上します。</li><li><strong>破壊的変更</strong>: <code>AsyncImagePainter.imageLoader</code>と<code>AsyncImagePainter.request</code>が<code>StateFlow&lt;AsyncImagePainter.Inputs&gt;</code>に統合されました。その値を監視するには<code>collectAsState</code>を使用してください。これによりパフォーマンスが向上します。</li><li><strong>破壊的変更</strong>: リソース縮小の最適化を妨げるため、<code>android.resource://example.package.name/drawable/image</code> URIのサポートを削除しました。 <ul><li>その機能がまだ必要な場合は、<a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/androidInstrumentedTest/kotlin/coil3/map/ResourceUriMapper.kt" target="_blank" rel="noreferrer">コンポーネントレジストリに<code>ResourceUriMapper</code>を手動で含める</a>ことができます。</li></ul></li><li><strong>新機能</strong>: <code>AsyncImagePreviewHandler</code>を導入し、<code>AsyncImagePainter</code>のプレビューレンダリング動作を制御できるようにしました。 <ul><li>プレビュー動作をオーバーライドするには、<code>LocalAsyncImagePreviewHandler</code>を使用してください。</li><li>この変更および他の<code>coil-compose</code>の改善の一環として、<code>AsyncImagePainter</code>はデフォルトで<code>ImageRequest.placeholder</code>を表示する代わりに、<code>ImageRequest</code>の実行を試みるようになりました。プレビュー環境では<a href="https://developer.android.com/develop/ui/compose/tooling/previews#preview-limitations" target="_blank" rel="noreferrer">ネットワークまたはファイルを使用するリクエストは失敗することが予想されます</a>が、Androidリソースは動作するはずです。</li></ul></li><li><strong>新機能</strong>: フレームインデックスによるビデオ画像抽出をサポートしました。(<a href="https://github.com/coil-kt/coil/pull/2183" target="_blank" rel="noreferrer">#2183</a>)</li><li><strong>新機能</strong>: 任意の<code>CoroutineDispatcher</code>メソッドに<code>CoroutineContext</code>を渡すのをサポートしました。(<a href="https://github.com/coil-kt/coil/pull/2241" target="_blank" rel="noreferrer">#2241</a>)。</li><li><strong>新機能</strong>: JSおよびWASM JSで弱参照メモリキャッシュをサポートしました。</li><li>Composeで<code>Dispatchers.Main.immediate</code>にディスパッチしないようにしました。副作用として、JVMでは<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-swing/" target="_blank" rel="noreferrer"><code>kotlinx-coroutines-swing</code></a>をインポートする必要がなくなりました。</li><li>パフォーマンス向上のため、<code>async</code>を呼び出してComposeでディスポーザブルを作成しないようにしました（@mlykotomに感謝！）。(<a href="https://github.com/coil-kt/coil/pull/2205" target="_blank" rel="noreferrer">#2205</a>)</li><li>グローバルな<code>ImageLoader</code>のextrasを<code>Options</code>に渡す問題を修正しました。(<a href="https://github.com/coil-kt/coil/pull/2223" target="_blank" rel="noreferrer">#2223</a>)</li><li>非Androidターゲットで<code>crossfade(false)</code>が機能しない問題を修正しました。</li><li>VP8X機能フラグのバイトオフセットを修正しました。(<a href="https://github.com/coil-kt/coil/pull/2199" target="_blank" rel="noreferrer">#2199</a>)。</li><li>非Androidターゲット上の<code>SvgDecoder</code>を、描画時に画像をレンダリングする代わりにビットマップにレンダリングするように変換しました。これによりパフォーマンスが向上します。 <ul><li>この動作は<code>SvgDecoder(renderToBitmap)</code>を使用して制御できます。</li></ul></li><li><code>ScaleDrawable</code>を<code>coil-gif</code>から<code>coil-core</code>に移動しました。</li><li>Kotlinを2.0.0に更新しました。</li><li>Composeを1.6.11に更新しました。</li><li>Okioを3.9.0に更新しました。</li><li>Skikoを0.8.4に更新しました。</li><li><a href="/ja/coil/upgrading_to_coil3/">3.xにおける重要な変更点の完全なリストについては、アップグレードガイドをご覧ください。</a></li></ul><h2 id="_3-0-0-alpha06-2024年2月29日" tabindex="-1">[3.0.0-alpha06] - 2024年2月29日 <a class="header-anchor" href="#_3-0-0-alpha06-2024年2月29日" aria-label="Permalink to &quot;[3.0.0-alpha06] - 2024年2月29日&quot;">​</a></h2><ul><li>Skikoを0.7.93にダウングレードしました。</li><li><a href="/ja/coil/upgrading_to_coil3/">3.xにおける重要な変更点の完全なリストについては、アップグレードガイドをご覧ください。</a></li></ul><h2 id="_3-0-0-alpha05-2024年2月28日" tabindex="-1">[3.0.0-alpha05] - 2024年2月28日 <a class="header-anchor" href="#_3-0-0-alpha05-2024年2月28日" aria-label="Permalink to &quot;[3.0.0-alpha05] - 2024年2月28日&quot;">​</a></h2><ul><li><strong>新機能</strong>: <code>wasmJs</code>ターゲットをサポートしました。</li><li>非Androidプラットフォームで<code>Bitmap</code>にバックアップされていない<code>Image</code>を描画するために、<code>DrawablePainter</code>と<code>DrawableImage</code>を作成しました。 <ul><li><code>Image</code> APIは実験的であり、アルファリリース間で変更される可能性があります。</li></ul></li><li><code>ContentPainterModifier</code>を<code>Modifier.Node</code>を実装するように更新しました。</li><li>修正: コンポーネントコールバックとネットワークオブザーバーの登録をバックグラウンドスレッドで遅延的に行いました。これにより、通常メインスレッドで発生していた初期化の遅延が解消されます。</li><li>修正: <code>ImageLoader.Builder.placeholder/error/fallback</code>が<code>ImageRequest</code>によって使用されない問題を修正しました。</li><li>Composeを1.6.0に更新しました。</li><li>Coroutinesを1.8.0に更新しました。</li><li>Okioを3.8.0に更新しました。</li><li>Skikoを0.7.94に更新しました。</li><li><a href="/ja/coil/upgrading_to_coil3/">3.xにおける重要な変更点の完全なリストについては、アップグレードガイドをご覧ください。</a></li></ul><h2 id="_2-6-0-2024年2月23日" tabindex="-1">[2.6.0] - 2024年2月23日 <a class="header-anchor" href="#_2-6-0-2024年2月23日" aria-label="Permalink to &quot;[2.6.0] - 2024年2月23日&quot;">​</a></h2><ul><li><code>rememberAsyncImagePainter</code>、<code>AsyncImage</code>、<code>SubcomposeAsyncImage</code>を<a href="https://developer.android.com/jetpack/compose/performance/stability#functions" target="_blank" rel="noreferrer">再起動可能でスキップ可能</a>にしました。これにより、コンポーザブルの引数が変更されない限り、再コンポーズを回避することでパフォーマンスが向上します。 <ul><li><code>rememberAsyncImagePainter</code>、<code>AsyncImage</code>、および<code>SubcomposeAsyncImage</code>にオプションの<code>modelEqualityDelegate</code>引数を追加しました。これは、<code>model</code>が再コンポーズをトリガーするかどうかを制御するためです。</li></ul></li><li><code>ContentPainterModifier</code>を<code>Modifier.Node</code>を実装するように更新しました。</li><li>修正: コンポーネントコールバックとネットワークオブザーバーの登録をバックグラウンドスレッドで遅延的に行いました。これにより、通常メインスレッドで発生していた初期化の遅延が解消されます。</li><li>修正: <code>rememberAsyncImagePainter</code>、<code>AsyncImage</code>、および<code>SubcomposeAsyncImage</code>で<code>ImageRequest.listener</code>または<code>ImageRequest.target</code>が変更された場合、新しい画像リクエストを再起動しないようにしました。</li><li>修正: <code>AsyncImagePainter</code>で画像リクエストを2回監視しないようにしました。</li><li>Kotlinを1.9.22に更新しました。</li><li>Composeを1.6.1に更新しました。</li><li>Okioを3.8.0に更新しました。</li><li><code>androidx.collection</code>を1.4.0に更新しました。</li><li><code>androidx.lifecycle</code>を2.7.0に更新しました。</li></ul><h2 id="_3-0-0-alpha04-2024年2月1日" tabindex="-1">[3.0.0-alpha04] - 2024年2月1日 <a class="header-anchor" href="#_3-0-0-alpha04-2024年2月1日" aria-label="Permalink to &quot;[3.0.0-alpha04] - 2024年2月1日&quot;">​</a></h2><ul><li><strong>破壊的変更</strong>: <code>OkHttpNetworkFetcherFactory</code>と<code>KtorNetworkFetcherFactory</code>の公開APIから<code>Lazy</code>を削除しました。</li><li><code>OkHttpNetworkFetcherFactory</code>で<code>OkHttpClient</code>の代わりに<code>Call.Factory</code>を公開しました。</li><li><code>NetworkResponseBody</code>を<code>ByteString</code>をラップするように変換しました。</li><li>Composeを1.5.12にダウングレードしました。</li><li><a href="/ja/coil/upgrading_to_coil3/">重要な変更点の完全なリストについては、アップグレードガイドをご覧ください。</a></li></ul><h2 id="_3-0-0-alpha03-2024年1月20日" tabindex="-1">[3.0.0-alpha03] - 2024年1月20日 <a class="header-anchor" href="#_3-0-0-alpha03-2024年1月20日" aria-label="Permalink to &quot;[3.0.0-alpha03] - 2024年1月20日&quot;">​</a></h2><ul><li><strong>破壊的変更</strong>: <code>coil-network</code>が<code>coil-network-ktor</code>に名前変更されました。さらに、OkHttpに依存し、Ktorエンジンを指定する必要のない新しい<code>coil-network-okhttp</code>アーティファクトが追加されました。 <ul><li>インポートするアーティファクトに応じて、<code>KtorNetworkFetcherFactory</code>または<code>OkHttpNetworkFetcherFactory</code>を使用して<code>Fetcher.Factory</code>を手動で参照できます。</li></ul></li><li>Appleプラットフォームでの<code>NSUrl</code>のロードに対応しました。</li><li><code>AsyncImage</code>に<code>clipToBounds</code>パラメータを追加しました。</li><li><a href="/ja/coil/upgrading_to_coil3/">重要な変更点の完全なリストについては、アップグレードガイドをご覧ください。</a></li></ul><h2 id="_3-0-0-alpha02-2024年1月10日" tabindex="-1">[3.0.0-alpha02] - 2024年1月10日 <a class="header-anchor" href="#_3-0-0-alpha02-2024年1月10日" aria-label="Permalink to &quot;[3.0.0-alpha02] - 2024年1月10日&quot;">​</a></h2><ul><li><strong>破壊的変更</strong>: <code>coil-gif</code>、<code>coil-network</code>、<code>coil-svg</code>、<code>coil-video</code>のパッケージが更新され、すべてのクラスがそれぞれ<code>coil.gif</code>、<code>coil.network</code>、<code>coil.svg</code>、<code>coil.video</code>の一部になりました。これにより、他のアーティファクトとのクラス名衝突を回避できます。</li><li><strong>破壊的変更</strong>: <code>ImageDecoderDecoder</code>が<code>AnimatedImageDecoder</code>に名前変更されました。</li><li><strong>新機能</strong>: <code>coil-gif</code>、<code>coil-network</code>、<code>coil-svg</code>、<code>coil-video</code>のコンポーネントが、各<code>ImageLoader</code>の<code>ComponentRegistry</code>に自動的に追加されるようになりました。 <ul><li>明確にするために、<code>3.0.0-alpha01</code>とは異なり、<strong><code>NetworkFetcher.Factory()</code>を手動で<code>ComponentRegistry</code>に追加する必要はありません</strong>。<code>io.coil-kt.coil3:coil-network:[version]</code>と<a href="https://ktor.io/docs/http-client-engines.html#dependencies" target="_blank" rel="noreferrer">Ktorエンジン</a>をインポートするだけで、ネットワーク画像をロードするのに十分です。</li><li>これらのコンポーネントを<code>ComponentRegistry</code>に手動で追加することも安全です。手動で追加されたコンポーネントは、自動的に追加されるコンポーネントよりも優先されます。</li><li>優先する場合は、<code>ImageLoader.Builder.serviceLoaderEnabled(false)</code>を使用してこの動作を無効にできます。</li></ul></li><li><strong>新機能</strong>: すべてのプラットフォームで<code>coil-svg</code>をサポートしました。Androidでは<a href="https://bigbadaboom.github.io/androidsvg/" target="_blank" rel="noreferrer">AndroidSVG</a>、非Androidプラットフォームでは<a href="https://api.skia.org/classSkSVGDOM.html" target="_blank" rel="noreferrer">SVGDOM</a>によってサポートされています。</li><li>Coilは内部でAndroidの<a href="https://developer.android.com/reference/android/graphics/ImageDecoder" target="_blank" rel="noreferrer"><code>ImageDecoder</code></a> APIを使用するようになりました。これは、ファイル、リソース、またはコンテンツURIから直接デコードする際にパフォーマンス上の利点があります。</li><li>修正: 複数の<code>coil3.Uri</code>パースに関する修正。</li><li><a href="/ja/coil/upgrading_to_coil3/">重要な変更点の完全なリストについては、アップグレードガイドをご覧ください。</a></li></ul><h2 id="_3-0-0-alpha01-2023年12月30日" tabindex="-1">[3.0.0-alpha01] - 2023年12月30日 <a class="header-anchor" href="#_3-0-0-alpha01-2023年12月30日" aria-label="Permalink to &quot;[3.0.0-alpha01] - 2023年12月30日&quot;">​</a></h2><ul><li><strong>新機能</strong>: <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>のサポート。CoilはAndroid、JVM、iOS、macOS、JavaScriptをサポートするKotlin Multiplatformライブラリになりました。</li><li>CoilのMaven座標が<code>io.coil-kt.coil3</code>に更新され、そのインポートが<code>coil3</code>に更新されました。これにより、Coil 3をCoil 2とバイナリ互換性の問題なく並行して実行できます。例えば、<code>io.coil-kt:coil:[version]</code>は<code>io.coil-kt.coil3:coil:[version]</code>になりました。</li><li><code>coil-base</code>および<code>coil-compose-base</code>アーティファクトは、Coroutines、Ktor、およびAndroidXで使用される命名規則に合わせるため、それぞれ<code>coil-core</code>および<code>coil-compose-core</code>に名前変更されました。</li><li><a href="/ja/coil/upgrading_to_coil3/">重要な変更点の完全なリストについては、アップグレードガイドをご覧ください。</a></li></ul><h2 id="_2-5-0-2023年10月30日" tabindex="-1">[2.5.0] - 2023年10月30日 <a class="header-anchor" href="#_2-5-0-2023年10月30日" aria-label="Permalink to &quot;[2.5.0] - 2023年10月30日&quot;">​</a></h2><ul><li><strong>新機能</strong>: <code>MediaDataSourceFetcher.Factory</code>を追加し、<code>coil-video</code>で<code>MediaDataSource</code>実装のデコードをサポートしました。(<a href="https://github.com/coil-kt/coil/pull/1795" target="_blank" rel="noreferrer">#1795</a>)</li><li><code>SHIFT6m</code>デバイスをハードウェアビットマップのブラックリストに追加しました。(<a href="https://github.com/coil-kt/coil/pull/1812" target="_blank" rel="noreferrer">#1812</a>)</li><li>修正: 一辺が境界なしのサイズを返すペインタを防ぐようにしました。(<a href="https://github.com/coil-kt/coil/pull/1826" target="_blank" rel="noreferrer">#1826</a>)</li><li>修正: キャッシュされたヘッダーに非ASCII文字が含まれている場合、<code>304 Not Modified</code>後にディスクキャッシュのロードが失敗する問題を修正しました。(<a href="https://github.com/coil-kt/coil/pull/1839" target="_blank" rel="noreferrer">#1839</a>)</li><li>修正: <code>FakeImageEngine</code>がインターセプタチェーンのリクエストを更新しない問題を修正しました。(<a href="https://github.com/coil-kt/coil/pull/1905" target="_blank" rel="noreferrer">#1905</a>)</li><li>コンパイルSDKを34に更新しました。</li><li>Kotlinを1.9.10に更新しました。</li><li>Coroutinesを1.7.3に更新しました。</li><li><code>accompanist-drawablepainter</code>を0.32.0に更新しました。</li><li><code>androidx.annotation</code>を1.7.0に更新しました。</li><li><code>androidx.compose.foundation</code>を1.5.4に更新しました。</li><li><code>androidx.core</code>を1.12.0に更新しました。</li><li><code>androidx.exifinterface:exifinterface</code>を1.3.6に更新しました。</li><li><code>androidx.lifecycle</code>を2.6.2に更新しました。</li><li><code>com.squareup.okhttp3</code>を4.12.0に更新しました。</li><li><code>com.squareup.okio</code>を3.6.0に更新しました。</li></ul><h2 id="_2-4-0-2023年5月21日" tabindex="-1">[2.4.0] - 2023年5月21日 <a class="header-anchor" href="#_2-4-0-2023年5月21日" aria-label="Permalink to &quot;[2.4.0] - 2023年5月21日&quot;">​</a></h2><ul><li><code>DiskCache</code>の<code>get</code>/<code>edit</code>を<code>openSnapshot</code>/<code>openEditor</code>に名前変更しました。</li><li><code>AsyncImagePainter</code>で<code>ColorDrawable</code>を<code>ColorPainter</code>に自動変換しないようにしました。</li><li>シンプルな<code>AsyncImage</code>オーバーロードに<code>@NonRestartableComposable</code>アノテーションを付けました。</li><li>修正: <code>ImageSource</code>で<code>Context.cacheDir</code>を遅延呼び出しするようにしました。</li><li>修正: <code>coil-bom</code>の公開を修正しました。</li><li>修正: ハードウェアビットマップが無効な場合、常にビットマップ設定を<code>ARGB_8888</code>に設定する問題を修正しました。</li><li>Kotlinを1.8.21に更新しました。</li><li>Coroutinesを1.7.1に更新しました。</li><li><code>accompanist-drawablepainter</code>を0.30.1に更新しました。</li><li><code>androidx.compose.foundation</code>を1.4.3に更新しました。</li><li><code>androidx.profileinstaller:profileinstaller</code>を1.3.1に更新しました。</li><li><code>com.squareup.okhttp3</code>を4.11.0に更新しました。</li></ul><h2 id="_2-3-0-2023年3月25日" tabindex="-1">[2.3.0] - 2023年3月25日 <a class="header-anchor" href="#_2-3-0-2023年3月25日" aria-label="Permalink to &quot;[2.3.0] - 2023年3月25日&quot;">​</a></h2><ul><li><strong>新機能</strong>: <code>FakeImageLoaderEngine</code>を含む新しい<code>coil-test</code>アーティファクトを導入しました。このクラスは、テストで一貫性のある同期的な（メインスレッドからの）応答を保証するために、画像ローダーの応答をハードコーディングするのに役立ちます。詳細については<a href="/ja/coil/testing">こちら</a>を参照してください。</li><li><strong>新機能</strong>: <code>coil-base</code>（<code>coil</code>の子モジュール）と<code>coil-compose-base</code>（<code>coil-compose</code>の子モジュール）に<a href="https://developer.android.com/topic/performance/baselineprofiles/overview" target="_blank" rel="noreferrer">ベースラインプロファイル</a>を追加しました。 <ul><li>これにより、Coilの実行時パフォーマンスが向上し、アプリでのCoilの使用方法に応じて<a href="https://github.com/coil-kt/coil/tree/main/coil-benchmark/benchmark_output.md" target="_blank" rel="noreferrer">フレームタイミングが改善される</a>はずです。</li></ul></li><li>修正: エンコードされたデータを含む<code>file://</code> URIのパースを修正しました。 <a href="https://github.com/coil-kt/coil/pull/1601" target="_blank" rel="noreferrer">#1601</a></li><li>修正: <code>DiskCache</code>が、存在しないディレクトリを渡された場合でも最大サイズを正しく計算するように修正しました。 <a href="https://github.com/coil-kt/coil/pull/1620" target="_blank" rel="noreferrer">#1620</a></li><li><code>Coil.reset</code>を公開APIにしました。 <a href="https://github.com/coil-kt/coil/pull/1506" target="_blank" rel="noreferrer">#1506</a></li><li>Javaデフォルトメソッド生成を有効にしました。 <a href="https://github.com/coil-kt/coil/pull/1491" target="_blank" rel="noreferrer">#1491</a></li><li>Kotlinを1.8.10に更新しました。</li><li><code>accompanist-drawablepainter</code>を0.30.0に更新しました。</li><li><code>androidx.annotation</code>を1.6.0に更新しました。</li><li><code>androidx.appcompat:appcompat-resources</code>を1.6.1に更新しました。</li><li><code>androidx.compose.foundation</code>を1.4.0に更新しました。</li><li><code>androidx.core</code>を1.9.0に更新しました。</li><li><code>androidx.exifinterface:exifinterface</code>を1.3.6に更新しました。</li><li><code>androidx.lifecycle</code>を2.6.1に更新しました。</li><li><code>okio</code>を3.3.0に更新しました。</li></ul><h2 id="_2-2-2-2022年10月1日" tabindex="-1">[2.2.2] - 2022年10月1日 <a class="header-anchor" href="#_2-2-2-2022年10月1日" aria-label="Permalink to &quot;[2.2.2] - 2022年10月1日&quot;">​</a></h2><ul><li>システムコールバックを登録する前に、画像ローダーが完全に初期化されていることを確認するようにしました。 <a href="https://github.com/coil-kt/coil/pull/1465" target="_blank" rel="noreferrer">#1465</a></li><li>API 30以上で<code>VideoFrameDecoder</code>で推奨ビットマップ設定を設定するようにしました。 <a href="https://github.com/coil-kt/coil/pull/1487" target="_blank" rel="noreferrer">#1487</a></li><li><code>FileUriMapper</code>で<code>#</code>を含むパスのパースを修正しました。 <a href="https://github.com/coil-kt/coil/pull/1466" target="_blank" rel="noreferrer">#1466</a></li><li>ディスクキャッシュから非ASCIIヘッダーを持つ応答を読み取る問題を修正しました。 <a href="https://github.com/coil-kt/coil/pull/1468" target="_blank" rel="noreferrer">#1468</a></li><li>アセットのサブフォルダ内のビデオをデコードする問題を修正しました。 <a href="https://github.com/coil-kt/coil/pull/1489" target="_blank" rel="noreferrer">#1489</a></li><li><code>androidx.annotation</code>を1.5.0に更新しました。</li></ul><h2 id="_2-2-1-2022年9月8日" tabindex="-1">[2.2.1] - 2022年9月8日 <a class="header-anchor" href="#_2-2-1-2022年9月8日" aria-label="Permalink to &quot;[2.2.1] - 2022年9月8日&quot;">​</a></h2><ul><li>修正: <code>RoundedCornersTransformation</code>が<code>input</code>ビットマップを正しくスケーリングするようになりました。</li><li><code>kotlin-parcelize</code>プラグインへの依存関係を削除しました。</li><li>コンパイルSDKを33に更新しました。</li><li><code>androidx.appcompat:appcompat-resources</code>を1.4.2にダウングレードし、<a href="https://github.com/coil-kt/coil/issues/1423" target="_blank" rel="noreferrer">#1423</a>の回避策としました。</li></ul><h2 id="_2-2-0-2022年8月16日" tabindex="-1">[2.2.0] - 2022年8月16日 <a class="header-anchor" href="#_2-2-0-2022年8月16日" aria-label="Permalink to &quot;[2.2.0] - 2022年8月16日&quot;">​</a></h2><ul><li><strong>新機能</strong>: <code>coil-video</code>に<code>ImageRequest.videoFramePercent</code>を追加し、ビデオの持続時間の割合としてビデオフレームを指定できるようにしました。</li><li><strong>新機能</strong>: <code>ExifOrientationPolicy</code>を追加し、<code>BitmapFactoryDecoder</code>がEXIFオリエンテーションデータをどのように処理するかを設定できるようにしました。</li><li>修正: 未定義の寸法を持つサイズが渡された場合に<code>RoundedCornersTransformation</code>で例外をスローしないようにしました。</li><li>修正: GIFのフレーム遅延を1バイトの符号付きバイトではなく、2バイトの符号なしバイトとして読み取るようにしました。</li><li>Kotlinを1.7.10に更新しました。</li><li>Coroutinesを1.6.4に更新しました。</li><li>Composeを1.2.1に更新しました。</li><li>OkHttpを4.10.0に更新しました。</li><li>Okioを3.2.0に更新しました。</li><li><code>accompanist-drawablepainter</code>を0.25.1に更新しました。</li><li><code>androidx.annotation</code>を1.4.0に更新しました。</li><li><code>androidx.appcompat:appcompat-resources</code>を1.5.0に更新しました。</li><li><code>androidx.core</code>を1.8.0に更新しました。</li></ul><h2 id="_2-1-0-2022年5月17日" tabindex="-1">[2.1.0] - 2022年5月17日 <a class="header-anchor" href="#_2-1-0-2022年5月17日" aria-label="Permalink to &quot;[2.1.0] - 2022年5月17日&quot;">​</a></h2><ul><li><strong>新機能</strong>: <code>ByteArray</code>のロードに対応しました。(<a href="https://github.com/coil-kt/coil/pull/1202" target="_blank" rel="noreferrer">#1202</a>)</li><li><strong>新機能</strong>: <code>ImageRequest.Builder.css</code>を使用してSVGにカスタムCSSルールを設定するのをサポートしました。(<a href="https://github.com/coil-kt/coil/pull/1210" target="_blank" rel="noreferrer">#1210</a>)</li><li>修正: <code>GenericViewTarget</code>のプライベートメソッドをprotectedに変換しました。(<a href="https://github.com/coil-kt/coil/pull/1273" target="_blank" rel="noreferrer">#1273</a>)</li><li>コンパイルSDKを32に更新しました。(<a href="https://github.com/coil-kt/coil/pull/1268" target="_blank" rel="noreferrer">#1268</a>)</li></ul><h2 id="_2-0-0-2022年5月10日" tabindex="-1">[2.0.0] - 2022年5月10日 <a class="header-anchor" href="#_2-0-0-2022年5月10日" aria-label="Permalink to &quot;[2.0.0] - 2022年5月10日&quot;">​</a></h2><p>Coil 2.0.0はライブラリのメジャーイテレーションであり、破壊的変更を含みます。アップグレード方法については<a href="/ja/coil/upgrading/">アップグレードガイド</a>をご覧ください。</p><ul><li><strong>新機能</strong>: <code>coil-compose</code>に<code>AsyncImage</code>を導入しました。詳細については<a href="/ja/coil/compose/">ドキュメント</a>をご覧ください。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ネットワークから画像を表示します。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ネットワークからプレースホルダー、円形トリミング、クロスフェードアニメーション付きで画像を表示します。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalContext.current)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    placeholder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(R.drawable.placeholder),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(R.string.description),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CircleShape)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><strong>新機能</strong>: 公開<code>DiskCache</code> APIを導入しました。 <ul><li><code>ImageLoader.Builder.diskCache</code>と<code>DiskCache.Builder</code>を使用してディスクキャッシュを設定します。</li><li>Coil 2.0ではOkHttpの<code>Cache</code>を使用すべきではありません。詳細については<a href="/ja/coil/upgrading_to_coil2/">こちら</a>をご覧ください。</li><li><code>Cache-Control</code>およびその他のキャッシュヘッダーは引き続きサポートされます。ただし、<code>Vary</code>ヘッダーはキャッシュがURLの一致のみをチェックするため除きます。さらに、応答コードが[200..300)の範囲にある応答のみがキャッシュされます。</li><li>2.0にアップグレードする際に、既存のディスクキャッシュはクリアされます。</li></ul></li><li>最小サポートAPIが21になりました。</li><li><code>ImageRequest</code>のデフォルトの<code>Scale</code>が<code>Scale.FIT</code>になりました。 <ul><li>これは、<code>ImageRequest.scale</code>をデフォルトの<code>Scale</code>を持つ他のクラスと一致させるために変更されました。</li><li><code>ImageViewTarget</code>を持つリクエストは、引き続き<code>Scale</code>が自動検出されます。</li></ul></li><li>画像パイプラインクラスを再設計しました。 <ul><li><code>Mapper</code>、<code>Fetcher</code>、<code>Decoder</code>はより柔軟になるようにリファクタリングされました。</li><li><code>Fetcher.key</code>は新しい<code>Keyer</code>インターフェースに置き換えられました。<code>Keyer</code>は入力データからキャッシュキーを作成します。</li><li><code>Decoder</code>がOkioのファイルシステムAPIを使用して<code>File</code>を直接読み取れるように<code>ImageSource</code>を追加しました。</li></ul></li><li>Jetpack Compose統合を再設計しました。 <ul><li><code>rememberImagePainter</code>と<code>ImagePainter</code>は、それぞれ<code>rememberAsyncImagePainter</code>と<code>AsyncImagePainter</code>に名前変更されました。</li><li><code>LocalImageLoader</code>を非推奨にしました。詳細については非推奨メッセージをご覧ください。</li></ul></li><li>ランタイムのnullでないアサーションの生成を無効にしました。 <ul><li>Javaを使用している場合、nullでないとアノテーションされた引数にnullを渡しても、直ちに<code>NullPointerException</code>がスローされなくなります。Kotlinのコンパイル時のnull安全性はこれを防ぎます。</li><li>この変更により、ライブラリのサイズが小さくなります。</li></ul></li><li><code>Size</code>は、その幅と高さの2つの<code>Dimension</code>値で構成されるようになりました。<code>Dimension</code>は、正のピクセル値または<code>Dimension.Undefined</code>のいずれかになります。詳細については<a href="/ja/coil/upgrading/">こちら</a>をご覧ください。</li><li><code>BitmapPool</code>と<code>PoolableViewTarget</code>はライブラリから削除されました。</li><li><code>VideoFrameFileFetcher</code>と<code>VideoFrameUriFetcher</code>はライブラリから削除されました。代わりに、すべてのデータソースをサポートする<code>VideoFrameDecoder</code>を使用してください。</li><li><a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/BlurTransformation.kt" target="_blank" rel="noreferrer"><code>BlurTransformation</code></a>と<a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/GrayscaleTransformation.kt" target="_blank" rel="noreferrer"><code>GrayscaleTransformation</code></a>はライブラリから削除されました。使用している場合は、そのコードをプロジェクトにコピーできます。</li><li><code>Transition.transition</code>は、遷移が完了するまで中断する必要がなくなったため、非中断関数に変更されました。</li><li>進行中の<code>BitmapFactory</code>操作の最大数を制限する<code>bitmapFactoryMaxParallelism</code>のサポートを追加しました。この値はデフォルトで4であり、UIパフォーマンスを向上させます。</li><li><code>interceptorDispatcher</code>、<code>fetcherDispatcher</code>、<code>decoderDispatcher</code>、および<code>transformationDispatcher</code>のサポートを追加しました。</li><li>共通の<code>ViewTarget</code>ロジックを処理する<code>GenericViewTarget</code>を追加しました。</li><li><code>ByteBuffer</code>をデフォルトでサポートされるデータ型に追加しました。</li><li><code>Disposable</code>はリファクタリングされ、基になる<code>ImageRequest</code>のジョブを公開します。</li><li><code>MemoryCache</code> APIを再設計しました。</li><li><code>ImageRequest.error</code>は、<code>ImageRequest.fallback</code>がnullの場合に<code>Target</code>に設定されるようになりました。</li><li><code>Transformation.key</code>は<code>Transformation.cacheKey</code>に置き換えられました。</li><li>Kotlinを1.6.10に更新しました。</li><li>Composeを1.1.1に更新しました。</li><li>OkHttpを4.9.3に更新しました。</li><li>Okioを3.0.0に更新しました。</li></ul><p><code>2.0.0-rc03</code>からの変更点:</p><ul><li><code>Dimension.Original</code>を<code>Dimension.Undefined</code>に変換しました。 <ul><li>これは、サイズシステムにおけるいくつかのエッジケース（<a href="https://github.com/coil-kt/coil/issues/1246" target="_blank" rel="noreferrer">例</a>）を修正するために、非ピクセル次元のセマンティクスをわずかに変更します。</li></ul></li><li><code>ContentScale</code>が<code>None</code>の場合、画像を<code>Size.ORIGINAL</code>でロードするようにしました。</li><li><code>ImageView.load</code>ビルダー引数を最後に設定するのではなく、最初に適用する問題を修正しました。</li><li>応答が変更されていない場合、HTTPヘッダーを結合しない問題を修正しました。</li></ul><h2 id="_2-0-0-rc03-2022年4月11日" tabindex="-1">[2.0.0-rc03] - 2022年4月11日 <a class="header-anchor" href="#_2-0-0-rc03-2022年4月11日" aria-label="Permalink to &quot;[2.0.0-rc03] - 2022年4月11日&quot;">​</a></h2><ul><li><code>ScaleResolver</code>インターフェースを削除しました。</li><li><code>Size</code>コンストラクタを関数に変換しました。</li><li><code>Dimension.Pixels</code>の<code>toString</code>がピクセル値のみを返すように変更しました。</li><li><code>SystemCallbacks.onTrimMemory</code>でのまれなクラッシュを防ぐようにしました。</li><li>Coroutinesを1.6.1に更新しました。</li></ul><h2 id="_2-0-0-rc02-2022年3月20日" tabindex="-1">[2.0.0-rc02] - 2022年3月20日 <a class="header-anchor" href="#_2-0-0-rc02-2022年3月20日" aria-label="Permalink to &quot;[2.0.0-rc02] - 2022年3月20日&quot;">​</a></h2><ul><li><code>ImageRequest</code>のデフォルトサイズを<code>Size.ORIGINAL</code>ではなく、現在のディスプレイのサイズに戻しました。</li><li><code>DiskCache.Builder</code>が実験的とマークされている問題を修正しました。<code>DiskCache</code>のメソッドのみが実験的です。</li><li><code>ImageView</code>に<code>WRAP_CONTENT</code>の次元を持つ画像をロードすると、境界のある次元に収まるのではなく、元のサイズで画像がロードされるケースを修正しました。</li><li><code>MemoryCache.Key</code>、<code>MemoryCache.Value</code>、<code>Parameters.Entry</code>からコンポーネント関数を削除しました。</li></ul><h2 id="_2-0-0-rc01-2022年3月2日" tabindex="-1">[2.0.0-rc01] - 2022年3月2日 <a class="header-anchor" href="#_2-0-0-rc01-2022年3月2日" aria-label="Permalink to &quot;[2.0.0-rc01] - 2022年3月2日&quot;">​</a></h2><p><code>1.4.0</code>からの主な変更点:</p><ul><li>最小サポートAPIが21になりました。</li><li>Jetpack Compose統合を再設計しました。 <ul><li><code>rememberImagePainter</code>は<code>rememberAsyncImagePainter</code>に名前変更されました。</li><li><code>AsyncImage</code>と<code>SubcomposeAsyncImage</code>のサポートを追加しました。詳細については<a href="/ja/coil/compose/">ドキュメント</a>をご覧ください。</li><li><code>LocalImageLoader</code>を非推奨にしました。詳細については非推奨メッセージをご覧ください。</li></ul></li><li>Coil 2.0は独自のディスクキャッシュ実装を持ち、ディスクキャッシュにOkHttpに依存しなくなりました。 <ul><li><code>ImageLoader.Builder.diskCache</code>と<code>DiskCache.Builder</code>を使用してディスクキャッシュを設定します。</li><li>スレッドが書き込み中に中断された場合、キャッシュが破損する可能性があるため、Coil 2.0でOkHttpの<code>Cache</code>を使用<strong>すべきではありません</strong>。</li><li><code>Cache-Control</code>およびその他のキャッシュヘッダーは引き続きサポートされます。ただし、<code>Vary</code>ヘッダーはキャッシュがURLの一致のみをチェックするため除きます。さらに、応答コードが[200..300)の範囲にある応答のみがキャッシュされます。</li><li>2.0にアップグレードする際に、既存のディスクキャッシュはクリアされます。</li></ul></li><li><code>ImageRequest</code>のデフォルトの<code>Scale</code>が<code>Scale.FIT</code>になりました。 <ul><li>これは、<code>ImageRequest.scale</code>をデフォルトの<code>Scale</code>を持つ他のクラスと一致させるために変更されました。</li><li><code>ImageViewTarget</code>を持つリクエストは、引き続き<code>Scale</code>が自動検出されます。</li></ul></li><li><code>ImageRequest</code>のデフォルトサイズが<code>Size.ORIGINAL</code>になりました。</li><li>画像パイプラインクラスを再設計しました。 <ul><li><code>Mapper</code>、<code>Fetcher</code>、<code>Decoder</code>はより柔軟になるようにリファクタリングされました。</li><li><code>Fetcher.key</code>は新しい<code>Keyer</code>インターフェースに置き換えられました。<code>Keyer</code>は入力データからキャッシュキーを作成します。</li><li><code>Decoder</code>がOkioのファイルシステムAPIを使用して<code>File</code>を直接読み取れるように<code>ImageSource</code>を追加しました。</li></ul></li><li>ラン</li></ul>`,87)]))}const k=o(c,[["render",d]]);export{g as __pageData,k as default};
