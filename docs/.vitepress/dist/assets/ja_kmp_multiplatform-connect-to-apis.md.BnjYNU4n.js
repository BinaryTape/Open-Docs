import{_ as i,a,b as n,c as t}from"./chunks/expect-di-framework.p8QbgfKZ.js";import{_ as l,c as e,o as p,ag as h}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"プラットフォーム固有のAPIの使用","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-connect-to-apis.md","filePath":"ja/kmp/multiplatform-connect-to-apis.md","lastUpdated":1755516278000}'),k={name:"ja/kmp/multiplatform-connect-to-apis.md"};function d(o,s,c,r,g,E){return p(),e("div",null,s[0]||(s[0]=[h('<h1 id="プラットフォーム固有のapiの使用" tabindex="-1">プラットフォーム固有のAPIの使用 <a class="header-anchor" href="#プラットフォーム固有のapiの使用" aria-label="Permalink to &quot;プラットフォーム固有のAPIの使用&quot;">​</a></h1><p>この記事では、マルチプラットフォームアプリケーションとライブラリを開発する際に、プラットフォーム固有のAPIを使用する方法を学びます。</p><h2 id="kotlinマルチプラットフォームライブラリ" tabindex="-1">Kotlinマルチプラットフォームライブラリ <a class="header-anchor" href="#kotlinマルチプラットフォームライブラリ" aria-label="Permalink to &quot;Kotlinマルチプラットフォームライブラリ&quot;">​</a></h2><p>プラットフォーム固有のAPIを使用するコードを記述する前に、代わりにマルチプラットフォームライブラリを使用できるかどうかを確認してください。 この種のライブラリは、異なるプラットフォーム向けに異なる実装を持つ共通Kotlin APIを提供します。</p><p>ネットワーキング、ロギング、アナリティクスを実装したり、デバイス機能にアクセスしたりするために使用できる多くのライブラリがすでに利用可能です。 詳細については、<a href="https://github.com/terrakok/kmm-awesome" target="_blank" rel="noreferrer">このキュレーションされたリスト</a>を参照してください。</p><h2 id="expected-および-actual-関数とプロパティ" tabindex="-1">expected および actual 関数とプロパティ <a class="header-anchor" href="#expected-および-actual-関数とプロパティ" aria-label="Permalink to &quot;expected および actual 関数とプロパティ&quot;">​</a></h2><p>Kotlinは、共通ロジックを開発する際にプラットフォーム固有のAPIにアクセスするための言語メカニズムを提供します。<a href="./multiplatform-expect-actual">expected および actual 宣言</a>です。</p><p>このメカニズムにより、マルチプラットフォームモジュールの共通ソースセットは<code>expected</code>宣言を定義し、各プラットフォームソースセットは<code>expected</code>宣言に対応する<code>actual</code>宣言を提供する必要があります。コンパイラは、共通ソースセットで<code>expect</code>キーワードでマークされたすべての宣言が、対象となるすべてのプラットフォームソースセットで<code>actual</code>キーワードでマークされた対応する宣言を持つことを保証します。</p><p>これは、関数、クラス、インターフェース、列挙型、プロパティ、アノテーションなど、ほとんどのKotlin宣言に適用されます。このセクションでは、<code>expected</code> および <code>actual</code> 関数とプロパティの使用に焦点を当てます。</p><p><img src="'+i+`" alt="Expected および actual 関数とプロパティの使用" width="700"></p><p>この例では、共通ソースセットで<code>expected</code>な<code>platform()</code>関数を定義し、プラットフォームソースセットで<code>actual</code>な実装を提供します。特定のプラットフォームのコードを生成する際、Kotlinコンパイラは<code>expected</code> および <code>actual</code> 宣言をマージします。その<code>actual</code>な実装を持つ1つの<code>platform()</code>関数が生成されます。<code>expected</code> および <code>actual</code> 宣言は同じパッケージで定義され、結果として生成されるプラットフォームコードでは_1つの宣言_にマージされる必要があります。生成されたプラットフォームコードにおける<code>expected</code>な<code>platform()</code>関数の任意の呼び出しは、正しい<code>actual</code>な実装を呼び出します。</p><h3 id="例-uuidの生成" tabindex="-1">例: UUIDの生成 <a class="header-anchor" href="#例-uuidの生成" aria-label="Permalink to &quot;例: UUIDの生成&quot;">​</a></h3><p>Kotlin Multiplatformを使用してiOSおよびAndroidアプリケーションを開発しており、universally unique identifier (UUID) を生成したいと仮定しましょう。</p><p>そのためには、Kotlin Multiplatformモジュールの共通ソースセットで、<code>expect</code>キーワードを使用して<code>randomUUID()</code>関数を<code>expected</code>として宣言します。実装コードを<strong>含めないでください</strong>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 共通ソースセット内:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span></code></pre></div><p>各プラットフォーム固有のソースセット（iOSとAndroid）で、共通モジュールで<code>expected</code>とされる<code>randomUUID()</code>関数の<code>actual</code>な実装を提供します。これらの<code>actual</code>な実装をマークするために<code>actual</code>キーワードを使用します。</p><p><img src="`+a+`" alt="expected および actual 宣言によるUUIDの生成" width="700"></p><p>次のスニペットは、AndroidとiOSの実装を示しています。プラットフォーム固有のコードは<code>actual</code>キーワードを使用し、関数に同じ名前を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Androidソースセット内:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.util.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iOSソースセット内:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.Foundation.NSUUID</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NSUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UUIDString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Androidの実装はAndroidで利用可能なAPIを使用し、iOSの実装はiOSで利用可能なAPIを使用します。 Kotlin/NativeコードからiOS APIにアクセスできます。</p><p>Android向けの最終的なプラットフォームコードを生成する際、Kotlinコンパイラは<code>expected</code> および <code>actual</code> 宣言を自動的にマージし、<code>actual</code>なAndroid固有の実装を持つ単一の<code>randomUUID()</code>関数を生成します。同じプロセスがiOSでも繰り返されます。</p><p>簡潔にするため、この例および以下の例では、「common」、「ios」、「android」という簡略化されたソースセット名を使用します。 通常、これは<code>commonMain</code>、<code>iosMain</code>、<code>androidMain</code>を意味し、同様のロジックはテストソースセットである<code>commonTest</code>、<code>iosTest</code>、<code>androidTest</code>でも定義できます。</p><p><code>expected</code> および <code>actual</code> 関数と同様に、<code>expected</code> および <code>actual</code> プロパティを使用すると、異なるプラットフォームで異なる値を使用できます。<code>expected</code> および <code>actual</code> 関数とプロパティは、シンプルなケースで最も役立ちます。</p><h2 id="共通コード内のインターフェース" tabindex="-1">共通コード内のインターフェース <a class="header-anchor" href="#共通コード内のインターフェース" aria-label="Permalink to &quot;共通コード内のインターフェース&quot;">​</a></h2><p>プラットフォーム固有のロジックが大きすぎて複雑な場合、共通コードでそれを表すインターフェースを定義し、その後プラットフォームソースセットで異なる実装を提供することで、コードを簡素化できます。</p><p><img src="`+n+`" alt="インターフェースの使用" width="700"></p><p>プラットフォームソースセットの実装は、それぞれの対応する依存関係を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// commonMain ソースセット内:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// androidMain ソースセット内:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android.os.Build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Android \${Build.VERSION.SDK_INT}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iosMain ソースセット内:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.UIKit.UIDevice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.systemVersion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>共通インターフェースが必要な場合に適切なプラットフォーム実装を注入するには、以下のいずれかのオプションを選択できます。それぞれのオプションは、以下でさらに詳しく説明します。</p><ul><li><a href="#expected-and-actual-functions"><code>expected</code> および <code>actual</code> 関数の使用</a></li><li><a href="#different-entry-points">異なるエントリポイントによる実装の提供</a></li><li><a href="#dependency-injection-framework">依存性注入フレームワークの使用</a></li></ul><h3 id="expected-および-actual-関数" tabindex="-1">expected および actual 関数 <a class="header-anchor" href="#expected-および-actual-関数" aria-label="Permalink to &quot;expected および actual 関数&quot;">​</a></h3><p>このインターフェースの値を返す<code>expected</code>関数を定義し、そのサブクラスを返す<code>actual</code>関数を定義します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// commonMain ソースセット内:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// androidMain ソースセット内:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iosMain ソースセット内:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>共通コードで<code>platform()</code>関数を呼び出すと、<code>Platform</code>型のオブジェクトを扱えます。 この共通コードをAndroidで実行すると、<code>platform()</code>の呼び出しは<code>AndroidPlatform</code>クラスのインスタンスを返します。 iOSで実行すると、<code>platform()</code>は<code>IOSPlatform</code>クラスのインスタンスを返します。</p><h3 id="異なるエントリポイント" tabindex="-1">異なるエントリポイント <a class="header-anchor" href="#異なるエントリポイント" aria-label="Permalink to &quot;異なるエントリポイント&quot;">​</a></h3><p>エントリポイントを制御する場合、<code>expected</code> および <code>actual</code> 宣言を使用せずに各プラットフォーム成果物の実装を構築できます。 そのためには、プラットフォーム実装を共有Kotlin Multiplatformモジュールで定義しますが、それらをプラットフォームモジュールでインスタンス化します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 共有Kotlin Multiplatformモジュール</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// commonMain ソースセット内:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // application logic</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// androidMain ソースセット内:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iosMain ソースセット内:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// androidApp プラットフォームモジュール内:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android.app.Application</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mysharedpackage.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iosApp プラットフォームモジュール内 (Swift):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> iOSApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Androidでは、<code>AndroidPlatform</code>のインスタンスを作成して<code>application()</code>関数に渡す必要があります。一方iOSでは、同様に<code>IOSPlatform</code>のインスタンスを作成して渡す必要があります。これらのエントリポイントはアプリケーションのエントリポイントである必要はありませんが、ここで共有モジュールの特定の機能を呼び出すことができます。</p><p><code>expected</code> および <code>actual</code> 関数を使用するか、またはエントリポイントを直接介して適切な実装を提供する方法は、シンプルなシナリオにはうまく機能します。 しかし、プロジェクトで依存性注入フレームワークを使用している場合、一貫性を確保するためにシンプルなケースでもそれを使用することをお勧めします。</p><h3 id="依存性注入フレームワーク" tabindex="-1">依存性注入フレームワーク <a class="header-anchor" href="#依存性注入フレームワーク" aria-label="Permalink to &quot;依存性注入フレームワーク&quot;">​</a></h3><p>最新のアプリケーションは通常、疎結合アーキテクチャを構築するために依存性注入 (DI) フレームワークを使用します。 DIフレームワークは、現在の環境に基づいてコンポーネントに依存関係を注入できます。</p><p>Kotlin Multiplatformをサポートする任意のDIフレームワークは、異なるプラットフォーム向けに異なる依存関係を注入するのに役立ちます。</p><p>例えば、<a href="https://insert-koin.io/" target="_blank" rel="noreferrer">Koin</a>はKotlin Multiplatformをサポートする依存性注入フレームワークです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 共通ソースセット内:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.koin.dsl.module</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platformModule: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// androidMain ソースセット内:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platformModule: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iosMain ソースセット内:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platformModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ここでは、Koin DSLが注入するコンポーネントを定義するモジュールを作成します。共通コードで<code>expect</code>キーワードを使用してモジュールを宣言し、その後<code>actual</code>キーワードを使用して各プラットフォーム向けにプラットフォーム固有の実装を提供します。フレームワークが実行時に正しい実装を選択する役割を担います。</p><p>DIフレームワークを使用する場合、すべての依存関係をこのフレームワークを介して注入します。同じロジックがプラットフォーム依存関係の処理にも適用されます。プロジェクトにDIをすでに導入している場合は、<code>expected</code> および <code>actual</code> 関数を手動で使用するよりも、DIを継続して使用することをお勧めします。この方法により、依存関係を注入する2つの異なる方法を混在させることを避けられます。</p><p>また、共通インターフェースを常にKotlinで実装する必要はありません。Swiftのような別の言語で、異なる_プラットフォームモジュール_で行うこともできます。このアプローチを選択する場合、DIフレームワークを使用してiOSプラットフォームモジュールから実装を提供する必要があります。</p><p><img src="`+t+'" alt="依存性注入フレームワークの使用" width="700"></p><p>このアプローチは、実装をプラットフォームモジュールに配置した場合にのみ機能します。Kotlin Multiplatformモジュールが自己完結型にならないため、あまりスケーラブルではありません。共通インターフェースを別のモジュールで実装する必要があるためです。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li><a href="https://youtu.be/bSNumV04y_w" target="_blank" rel="noreferrer">KMPアプリでのプラットフォーム固有APIの使用</a>のビデオチュートリアルをご覧ください。</li><li><code>expect</code>/<code>actual</code>メカニズムに関するさらに多くの例と情報については、<a href="./multiplatform-expect-actual">expected および actual 宣言</a>を参照してください。</li></ul>',62)]))}const m=l(k,[["render",d]]);export{F as __pageData,m as default};
