import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"가시성 한정자","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/visibility-modifiers.md","filePath":"ko/kotlin/visibility-modifiers.md","lastUpdated":1754307826000}'),e={name:"ko/kotlin/visibility-modifiers.md"};function t(p,s,h,k,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="가시성-한정자" tabindex="-1">가시성 한정자 <a class="header-anchor" href="#가시성-한정자" aria-label="Permalink to &quot;가시성 한정자&quot;">​</a></h1><p>클래스, 객체, 인터페이스, 생성자, 함수뿐만 아니라 프로퍼티와 해당 세터도 <em>가시성 한정자</em>를 가질 수 있습니다. 게터는 항상 프로퍼티와 동일한 가시성을 가집니다.</p><p>Kotlin에는 <code>private</code>, <code>protected</code>, <code>internal</code>, <code>public</code>의 네 가지 가시성 한정자가 있습니다. 기본 가시성은 <code>public</code>입니다.</p><p>이 페이지에서는 한정자가 다양한 선언 범위 유형에 어떻게 적용되는지 알아봅니다.</p><h2 id="패키지" tabindex="-1">패키지 <a class="header-anchor" href="#패키지" aria-label="Permalink to &quot;패키지&quot;">​</a></h2><p>함수, 프로퍼티, 클래스, 객체, 인터페이스는 패키지 내에 직접 &quot;최상위 수준&quot;으로 선언될 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file name: example.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span></code></pre></div><ul><li>가시성 한정자를 사용하지 않으면 <code>public</code>이 기본적으로 사용되며, 이는 선언이 어디서든 가시적임을 의미합니다.</li><li>선언을 <code>private</code>으로 표시하면 해당 선언을 포함하는 파일 내부에서만 가시적입니다.</li><li><code>internal</code>로 표시하면 동일한 <a href="#modules">모듈</a> 내 어디서든 가시적입니다.</li><li><code>protected</code> 한정자는 최상위 수준 선언에는 사용할 수 없습니다.</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>다른 패키지에서 가시적인 최상위 수준 선언을 사용하려면 이를 <a href="/ko/kotlin/packages#imports">임포트</a>해야 합니다.</p></div><p>예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file name: example.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// visible inside example.kt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // property is visible everywhere</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // setter is visible only in example.kt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // visible inside the same module</span></span></code></pre></div><h2 id="클래스-멤버" tabindex="-1">클래스 멤버 <a class="header-anchor" href="#클래스-멤버" aria-label="Permalink to &quot;클래스 멤버&quot;">​</a></h2><p>클래스 내부에 선언된 멤버의 경우:</p><ul><li><code>private</code>은 멤버가 해당 클래스 내부에서만(모든 멤버 포함) 가시적임을 의미합니다.</li><li><code>protected</code>는 멤버가 <code>private</code>으로 표시된 것과 동일한 가시성을 가지지만, 서브클래스에서도 가시적임을 의미합니다.</li><li><code>internal</code>은 선언 클래스를 보는 <em>이 모듈 내</em>의 모든 클라이언트가 해당 <code>internal</code> 멤버를 볼 수 있음을 의미합니다.</li><li><code>public</code>은 선언 클래스를 보는 모든 클라이언트가 해당 <code>public</code> 멤버를 볼 수 있음을 의미합니다.</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin에서 외부 클래스는 내부 클래스의 <code>private</code> 멤버를 볼 수 없습니다.</p></div><p><code>protected</code> 또는 <code>internal</code> 멤버를 오버라이드할 때 가시성을 명시적으로 지정하지 않으면, 오버라이드하는 멤버도 원본과 동일한 가시성을 가집니다.</p><p>예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // public by default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Nested</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Subclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // a is not visible</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // b, c and d are visible</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Nested and e are visible</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // &#39;b&#39; is protected</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // &#39;c&#39; is internal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Unrelated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // o.a, o.b are not visible</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // o.c and o.d are visible (same module)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Outer.Nested is not visible, and Nested::e is not visible either </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="생성자" tabindex="-1">생성자 <a class="header-anchor" href="#생성자" aria-label="Permalink to &quot;생성자&quot;">​</a></h3><p>클래스의 주 생성자 가시성을 지정하려면 다음 구문을 사용합니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>명시적인 <code>constructor</code> 키워드를 추가해야 합니다.</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span></code></pre></div><p>여기서는 생성자가 <code>private</code>입니다. 기본적으로 모든 생성자는 <code>public</code>이며, 이는 클래스가 가시적인 모든 곳에서 생성자가 가시적임을 의미합니다(이는 <code>internal</code> 클래스의 생성자가 동일한 모듈 내에서만 가시적임을 의미합니다).</p><p>봉인된 클래스의 경우 생성자는 기본적으로 <code>protected</code>입니다. 더 자세한 내용은 <a href="/ko/kotlin/sealed-classes#constructors">봉인된 클래스</a>를 참조하세요.</p><h3 id="지역-선언" tabindex="-1">지역 선언 <a class="header-anchor" href="#지역-선언" aria-label="Permalink to &quot;지역 선언&quot;">​</a></h3><p>지역 변수, 함수, 클래스는 가시성 한정자를 가질 수 없습니다.</p><h2 id="모듈" tabindex="-1">모듈 <a class="header-anchor" href="#모듈" aria-label="Permalink to &quot;모듈&quot;">​</a></h2><p><code>internal</code> 가시성 한정자는 멤버가 동일한 모듈 내에서 가시적임을 의미합니다. 더 구체적으로, 모듈은 함께 컴파일된 Kotlin 파일 집합을 의미합니다. 예를 들어:</p><ul><li>IntelliJ IDEA 모듈.</li><li>Maven 프로젝트.</li><li>Gradle 소스 세트(<code>test</code> 소스 세트가 <code>main</code>의 내부 선언에 접근할 수 있다는 예외 포함).</li><li><code>&lt;kotlinc&gt;</code> Ant 태스크의 한 번의 호출로 컴파일된 파일 집합.</li></ul>`,29)]))}const g=i(e,[["render",t]]);export{c as __pageData,g as default};
