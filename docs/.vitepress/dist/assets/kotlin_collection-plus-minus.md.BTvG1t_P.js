import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"加减操作符","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/collection-plus-minus.md","filePath":"kotlin/collection-plus-minus.md","lastUpdated":1754307826000}'),l={name:"kotlin/collection-plus-minus.md"};function e(p,s,h,k,o,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="加减操作符" tabindex="-1">加减操作符 <a class="header-anchor" href="#加减操作符" aria-label="Permalink to &quot;加减操作符&quot;">​</a></h1><p>在 Kotlin 中，为集合定义了 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/plus.html" target="_blank" rel="noreferrer"><code>plus</code></a> (<code>+</code>) 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/minus.html" target="_blank" rel="noreferrer"><code>minus</code></a> (<code>-</code>) 操作符。 它们将一个集合作为第一个操作数；第二个操作数可以是元素或另一个集合。 返回值为一个新的只读集合：</p><ul><li><code>plus</code> 的结果包含原始集合<strong>以及</strong>第二个操作数中的元素。</li><li><code>minus</code> 的结果包含原始集合中的元素，<strong>但不包含</strong>第二个操作数中的元素。 如果它是一个元素，<code>minus</code> 会移除其<strong>首次</strong>出现项；如果它是一个集合，则会移除其元素中的<strong>所有</strong>出现项。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plusList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;five&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> minusList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(plusList)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(minusList)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>关于 Map 的 <code>plus</code> 和 <code>minus</code> 操作符的详情，请参见 <a href="/kotlin/map-operations">Map 特有的操作</a>。 增广赋值操作符 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/plus-assign.html" target="_blank" rel="noreferrer"><code>plusAssign</code></a> (<code>+=</code>) 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/minus-assign.html" target="_blank" rel="noreferrer"><code>minusAssign</code></a> (<code>-=</code>) 也为集合定义了。然而，对于只读集合，它们实际上会使用 <code>plus</code> 或 <code>minus</code> 操作符，并尝试将结果赋值给同一个变量。因此，它们仅适用于 <code>var</code> 声明的只读集合。 对于可变集合，如果集合是 <code>val</code> 声明的，它们会修改集合。更多详情请参见 <a href="/kotlin/collection-write">集合写入操作</a>。</p>`,5)]))}const E=i(l,[["render",e]]);export{c as __pageData,E as default};
