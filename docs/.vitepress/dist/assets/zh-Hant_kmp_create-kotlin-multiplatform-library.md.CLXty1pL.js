import{_ as p,a as l,b as h,c as k,d as r}from"./chunks/publish-maven-local-gradle-task.BGdngNQl.js";import{_ as o,a as d,b as c,c as g}from"./chunks/youtube.DH2NfHCv.js";import{_ as E,C as t,c as y,o as m,j as i,G as a,ag as u,a as b,w as F}from"./chunks/framework.Bksy39di.js";const M=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/create-kotlin-multiplatform-library.md","filePath":"zh-Hant/kmp/create-kotlin-multiplatform-library.md","lastUpdated":1755516278000}'),f={name:"zh-Hant/kmp/create-kotlin-multiplatform-library.md"};function v(C,s,A,D,B,_){const n=t("secondary-label"),e=t("tldr");return m(),y("div",null,[s[1]||(s[1]=i("h1",{id:"建立您的-kotlin-多平台程式庫-–-教學",tabindex:"-1"},[b("建立您的 Kotlin 多平台程式庫 – 教學 "),i("a",{class:"header-anchor",href:"#建立您的-kotlin-多平台程式庫-–-教學","aria-label":'Permalink to "建立您的 Kotlin 多平台程式庫 – 教學"'},"​")],-1)),a(n,{ref:"IntelliJ IDEA"},null,512),a(n,{ref:"Android Studio"},null,512),a(e,null,{default:F(()=>s[0]||(s[0]=[i("p",null,"本教學使用 IntelliJ IDEA，但您也可以在 Android Studio 中遵循此教學 — 這兩個 IDE 共享相同的核心功能和 Kotlin 多平台支援。",-1)])),_:1}),s[2]||(s[2]=u('<p>在本教學中，您將學習如何在 IntelliJ IDEA 中建立一個多平台程式庫， 將該程式庫發佈到本地 Maven 儲存庫，並將其作為依賴項加入另一個專案。</p><p>本教學基於我們的<a href="https://github.com/Kotlin/multiplatform-library-template" target="_blank" rel="noreferrer">多平台程式庫範本</a>， 該範本是一個包含產生費波那契數列函數的簡單程式庫。</p><h2 id="設定環境" tabindex="-1">設定環境 <a class="header-anchor" href="#設定環境" aria-label="Permalink to &quot;設定環境&quot;">​</a></h2><p><a href="./quickstart">安裝所有必要的工具並將其更新到最新版本</a>。</p><h2 id="建立專案" tabindex="-1">建立專案 <a class="header-anchor" href="#建立專案" aria-label="Permalink to &quot;建立專案&quot;">​</a></h2><ol><li><p>在 IntelliJ IDEA 中，選擇 <strong>File</strong> | <strong>New</strong> | <strong>Project from Version Control</strong>。</p></li><li><p>輸入<a href="https://github.com/Kotlin/multiplatform-library-template" target="_blank" rel="noreferrer">多平台程式庫範本專案</a>的 URL：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/multiplatform-library-template</span></span></code></pre></div></li><li><p>點擊 <strong>Clone</strong>。</p></li></ol><h2 id="檢查專案結構" tabindex="-1">檢查專案結構 <a class="header-anchor" href="#檢查專案結構" aria-label="Permalink to &quot;檢查專案結構&quot;">​</a></h2><p>Kotlin 多平台程式庫範本專案為開發 Kotlin 多平台程式庫提供了一個基礎結構。此範本有助於建立可在各種平台上運作的程式庫。</p><p>在範本專案中，<code>library</code> 作為核心模組，包含多平台程式庫的主要原始碼和建置資源。</p><p><img src="'+p+`" alt="Multiplatform library project structure" width="350"></p><p><code>library</code> 模組的結構旨在容納共享程式碼以及平台特定實作。 以下是其主要原始碼 (<code>src</code>) 中內容的詳細說明：</p><ul><li><strong><code>commonMain</code>：</strong> 包含在所有目標平台之間共享的 Kotlin 程式碼。您可以在此處放置不依賴任何平台特定 API 的程式碼。</li><li><strong><code>androidMain</code>、<code>iosMain</code>、<code>jvmMain</code> 和 <code>linuxX64Main</code>：</strong> 包含 Android、iOS、JVM 和 Linux 平台的特定程式碼。您可以在此處實作這些平台獨有的功能。</li><li><strong><code>commonTest</code>、<code>androidUnitTest</code>、<code>iosTest</code>、<code>jvmTest</code> 和 <code>linuxX64Test</code>：</strong> 分別包含共享 <code>commonMain</code> 程式碼的測試以及 Android、iOS、JVM 和 Linux 平台的特定測試。</li></ul><p>讓我們專注於在所有平台之間共享的 <code>library</code> 程式碼。在 <code>src/commonMain/kotlin</code> 目錄中， 您可以找到 <code>CustomFibi.kt</code> 檔案，其中包含定義費波那契數列產生器的 Kotlin 多平台程式碼：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.github.kotlin.fibonacci</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Defines the function to generate the Fibonacci sequence</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateFibi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Declares the expected values for \`firstElement\` and \`secondElement\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span></code></pre></div><p><code>firstElement</code> 和 <code>secondElement</code> 屬性是平台特定程式碼可以實作的預留位置。 每個目標應通過在其各自的原始碼集中使用 <code>actual</code> 關鍵字來提供實際值。</p><p><code>expect</code> 宣告與 <code>actual</code> 實作<a href="./multiplatform-connect-to-apis#expected-and-actual-functions-and-properties">匹配</a>。 當編寫需要平台特定行為的跨平台程式碼時，此機制非常有用。</p><p>在本案例中，多平台程式庫範本包含了 <code>firstElement</code> 和 <code>secondElement</code> 屬性的平台特定實作。<code>androidMain</code>、<code>iosMain</code>、<code>jvmMain</code> 和 <code>linuxX64Main</code> 目錄包含提供這些屬性值的 <code>actual</code> 宣告。</p><p>例如，以下是 <code>androidMain/kotlin/fibiprops.android.kt</code> 中包含的 Android 實作：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.github.kotlin.fibonacci</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div><p>其他平台遵循相同的模式，<code>firstElement</code> 和 <code>secondElement</code> 屬性的值有所不同。</p><h2 id="添加新平台" tabindex="-1">添加新平台 <a class="header-anchor" href="#添加新平台" aria-label="Permalink to &quot;添加新平台&quot;">​</a></h2><p>現在您已熟悉範本中共享程式碼和平台特定程式碼的工作方式，讓我們通過為額外平台添加支援來擴展專案。</p><p>使用 <a href="./multiplatform-connect-to-apis#expected-and-actual-functions-and-properties"><code>expect</code>/<code>actual</code> 機制</a>配置對 <a href="https://kotlinlang.org/docs/wasm-overview.html" target="_blank" rel="noreferrer">Kotlin/Wasm</a> 平台的支援。您可以為 <code>firstElement</code> 和 <code>secondElement</code> 屬性實作平台特定功能。</p><h3 id="將-kotlin-wasm-目標添加到您的專案" tabindex="-1">將 Kotlin/Wasm 目標添加到您的專案 <a class="header-anchor" href="#將-kotlin-wasm-目標添加到您的專案" aria-label="Permalink to &quot;將 Kotlin/Wasm 目標添加到您的專案&quot;">​</a></h3><ol><li><p>在 <code>library/build.gradle.kts</code> 檔案中，添加 Kotlin/Wasm 目標 (<code>wasmJs</code>) 和原始碼集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.ExperimentalWasmDsl::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmJsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Wasm-specific dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>點擊建置檔案中出現的 <strong>Sync Gradle Changes</strong> 圖示 (<img src="`+l+'" alt="Gradle sync icon" width="30" type="joined">) 來同步 Gradle 檔案。或者，點擊 Gradle 工具視窗中的重新整理按鈕。</p></li></ol><h3 id="為-wasm-建立平台特定程式碼" tabindex="-1">為 Wasm 建立平台特定程式碼 <a class="header-anchor" href="#為-wasm-建立平台特定程式碼" aria-label="Permalink to &quot;為 Wasm 建立平台特定程式碼&quot;">​</a></h3><p>添加 Wasm 目標後，您需要一個 Wasm 目錄來存放 <code>firstElement</code> 和 <code>secondElement</code> 的平台特定實作：</p><ol><li><p>右鍵點擊 <code>library/src</code> 目錄，然後選擇 <strong>New | Directory</strong>。</p></li><li><p>從 <strong>Gradle Source Sets</strong> 列表中選擇 <strong>wasmJsMain/kotlin</strong>。</p><p><img src="'+h+`" alt="Gradle source sets list" width="450"></p></li><li><p>右鍵點擊新建立的 <code>wasmJsMain/kotlin</code> 目錄，然後選擇 <strong>New | Kotlin Class/File</strong>。</p></li><li><p>輸入 <strong>fibiprops.wasm</strong> 作為檔案名稱，然後選擇 <strong>File</strong>。</p></li><li><p>將以下程式碼添加到 <code>fibiprops.wasm.kt</code> 檔案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.github.kotlin.fibonacci</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre></div><p>此程式碼設定了 Wasm 特定實作，將 <code>firstElement</code> 的 <code>actual</code> 值定義為 <code>3</code>，將 <code>secondElement</code> 定義為 <code>5</code>。</p></li></ol><h3 id="建置專案" tabindex="-1">建置專案 <a class="header-anchor" href="#建置專案" aria-label="Permalink to &quot;建置專案&quot;">​</a></h3><p>確保您的專案使用新平台正確編譯：</p><ol><li><p>透過選擇 <strong>View</strong> | <strong>Tool Windows</strong> | <strong>Gradle</strong> 打開 Gradle 工具視窗。</p></li><li><p>在 <strong>multiplatform-library-template</strong> | <strong>library</strong> | <strong>Tasks</strong> | <strong>build</strong> 中，執行 <strong>build</strong> 任務。</p><p><img src="`+k+`" alt="Gradle tool window" width="450"></p><p>或者，在 <code>multiplatform-library-template</code> 根目錄下的終端機中執行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div></li></ol><p>您可以在 <strong>Build</strong> 工具視窗中看到成功的輸出。</p><h2 id="將您的程式庫發佈到本地-maven-儲存庫" tabindex="-1">將您的程式庫發佈到本地 Maven 儲存庫 <a class="header-anchor" href="#將您的程式庫發佈到本地-maven-儲存庫" aria-label="Permalink to &quot;將您的程式庫發佈到本地 Maven 儲存庫&quot;">​</a></h2><p>您的多平台程式庫已準備好本地發佈，以便您可以在同一台機器上的其他專案中使用它。</p><p>要發佈您的程式庫，請使用 <a href="https://docs.gradle.org/current/userguide/publishing_maven.html" target="_blank" rel="noreferrer"><code>maven-publish</code></a> Gradle 外掛程式，如下所示：</p><ol><li><p>在 <code>library/build.gradle.kts</code> 檔案中，找到 <code>plugins { }</code> 區塊並應用 <code>maven-publish</code> 外掛程式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // Add the following line:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;maven-publish&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div></li><li><p>找到 <code>mavenPublishing { }</code> 區塊並註解掉 <code>signAllPublications()</code> 方法，以指示該發佈僅限本地：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavenPublishing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Comment out the following method:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // signAllPublications()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>點擊建置檔案中出現的 <strong>Sync Gradle Changes</strong> 圖示 (<img src="`+l+'" alt="Gradle sync icon" width="30" type="joined">) 來同步 Gradle 檔案。或者，點擊 Gradle 工具視窗中的重新整理按鈕。</p></li><li><p>在 Gradle 工具視窗中，轉到 <strong>multiplatform-library-template</strong> | <strong>Tasks</strong> | <strong>publishing</strong> 並執行 <strong>publishToMavenLocal</strong> Gradle 任務。</p><p><img src="'+r+`" alt="Multiplatform library Gradle tool window" width="450"></p><p>或者，在 <code>multiplatform-library-template</code> 根目錄下的終端機中執行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishToMavenLocal</span></span></code></pre></div></li></ol><p>您的程式庫已發佈到本地 Maven 儲存庫。</p><p>要找到您已發佈的程式庫，請使用您的檔案總管或終端機，並導航到您使用者主目錄中的 <code>.m2\\repository\\io\\github\\kotlin\\library\\1.0.0\\</code>。</p><h2 id="將您的程式庫作為依賴項加入另一個專案" tabindex="-1">將您的程式庫作為依賴項加入另一個專案 <a class="header-anchor" href="#將您的程式庫作為依賴項加入另一個專案" aria-label="Permalink to &quot;將您的程式庫作為依賴項加入另一個專案&quot;">​</a></h2><p>將您的多平台程式庫發佈到本地 Maven 儲存庫後，您可以在同一台機器上的其他 Kotlin 專案中使用它。</p><p>在您的消費者專案的 <code>build.gradle.kts</code> 檔案中，添加對已發佈程式庫的依賴項：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenLocal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.github.kotlin:library:1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>repositories{}</code> 區塊告知 Gradle 從本地 Maven 儲存庫解析程式庫，並使其在共享程式碼中可用。</p><p><code>implementation</code> 依賴項由您的程式庫在其 <code>build.gradle.kts</code> 檔案中指定的群組和版本組成。</p><p>如果您將其添加到另一個多平台專案，您可以將其添加到共享或平台特定原始碼集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // For all platforms</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.github.kotlin:library:1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Or for specific platforms</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmJsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.github.kotlin:library:1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>同步消費者專案並開始使用您的程式庫！</p><h2 id="接下來" tabindex="-1">接下來 <a class="header-anchor" href="#接下來" aria-label="Permalink to &quot;接下來&quot;">​</a></h2><p>我們鼓勵您進一步探索多平台開發：</p><ul><li><a href="./multiplatform-publish-libraries">將您的程式庫發佈到 Maven Central</a></li><li><a href="https://kotlinlang.org/docs/api-guidelines-introduction.html" target="_blank" rel="noreferrer">查看程式庫作者指南</a></li></ul><p>加入社群：</p><ul><li><img src="`+o+'" alt="GitHub" width="25" type="joined"> <strong>Compose Multiplatform GitHub</strong>：關注<a href="https://github.com/JetBrains/compose-multiplatform" target="_blank" rel="noreferrer">儲存庫</a>並貢獻</li><li><img src="'+d+'" alt="Slack" width="25" type="joined"> <strong>Kotlin Slack</strong>：獲取<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">邀請</a>並加入 <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 頻道</li><li><img src="'+c+'" alt="Stack Overflow" width="25" type="joined"> <strong>Stack Overflow</strong>：訂閱 <a href="https://stackoverflow.com/questions/tagged/kotlin-multiplatform" target="_blank" rel="noreferrer">&quot;kotlin-multiplatform&quot; 標籤</a></li><li><img src="'+g+'" alt="YouTube" width="25" type="joined"> <strong>Kotlin YouTube 頻道</strong>：訂閱並觀看關於<a href="https://www.youtube.com/playlist?list=PLlFc5cFwUnmy_oVc9YQzjasSNoAk4hk_C" target="_blank" rel="noreferrer">Kotlin 多平台</a>的影片</li></ul>',52))])}const P=E(f,[["render",v]]);export{M as __pageData,P as default};
