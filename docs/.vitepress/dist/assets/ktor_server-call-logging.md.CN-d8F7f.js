import{_ as c,C as n,c as y,o as m,G as a,ag as k,j as i,w as t,a as l}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-call-logging.md","filePath":"ktor/server-call-logging.md","lastUpdated":1755457140000}'),v={name:"ktor/server-call-logging.md"};function F(C,s,f,b,_,q){const h=n("TopicTitle"),d=n("show-structure"),g=n("primary-label"),p=n("Links"),E=n("tldr"),e=n("code-block"),o=n("TabItem"),r=n("Tabs"),u=n("list");return m(),y("div",null,[a(h,{labelRef:"server-plugin",title:"调用日志"}),a(d,{for:"chapter",depth:"2"}),a(g,{ref:"server-plugin"},null,512),a(E,null,{default:t(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必需的依赖项"),l(": "),i("code",null,"io.ktor:ktor-server-call-logging")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"代码示例"),l(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/logging"}," logging ")],-1)),i("p",null,[i("b",null,[a(p,{href:"/ktor/server-native",summary:"Ktor 支持 Kotlin/Native 并允许你运行服务器而无需额外的运行时或虚拟机。"},{default:t(()=>s[0]||(s[0]=[l("原生服务器")])),_:1}),s[1]||(s[1]=l("支持"))]),s[2]||(s[2]=l(": ✖️ "))])]),_:1}),s[17]||(s[17]=k('<p>Ktor 提供了使用 <a href="http://www.slf4j.org/" target="_blank" rel="noreferrer">SLF4J</a> 库记录应用程序事件的能力。你可以从 <a href="./server-logging">Ktor 服务器中的日志记录</a> 主题了解通用日志配置。</p><p><code>CallLogging</code> 插件允许你记录传入的客户端请求。</p><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p> 要使用 <code>CallLogging</code>，你需要将 <code>ktor-server-call-logging</code> artifact 包含到构建脚本中: </p>',4)),a(r,{group:"languages"},{default:t(()=>[a(o,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[a(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-call-logging:$ktor_version")'})]),_:1}),a(o,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[a(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-call-logging:$ktor_version"'})]),_:1}),a(o,{title:"Maven","group-key":"maven"},{default:t(()=>[a(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-call-logging-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[18]||(s[18]=i("h2",{id:"install_plugin",tabindex:"-1"},[l("安装 CallLogging "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "安装 CallLogging {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[6]||(s[6]=l(" 要将 ")),s[7]||(s[7]=i("code",null,"CallLogging",-1)),s[8]||(s[8]=l(" 插件")),s[9]||(s[9]=i("a",{href:"#install"},"安装",-1)),s[10]||(s[10]=l("到应用程序，请在指定的 ")),a(p,{href:"/ktor/server-modules",summary:"模块允许你通过分组路由来组织应用程序。"},{default:t(()=>s[5]||(s[5]=[l("模块")])),_:1}),s[11]||(s[11]=l(" 中将其传递给 ")),s[12]||(s[12]=i("code",null,"install",-1)),s[13]||(s[13]=l(" 函数。下面的代码片段展示了如何安装 ")),s[14]||(s[14]=i("code",null,"CallLogging",-1)),s[15]||(s[15]=l(" ... "))]),a(u,null,{default:t(()=>s[16]||(s[16]=[i("li",null,[l(" ... 在 "),i("code",null,"embeddedServer"),l(" 函数调用内部。 ")],-1),i("li",null,[l(" ... 在显式定义的 "),i("code",null,"module"),l(" 内部，该 "),i("code",null,"module"),l(" 是 "),i("code",null,"Application"),l(" 类的扩展函数。 ")],-1)])),_:1}),a(r,null,{default:t(()=>[a(o,{title:"embeddedServer"},{default:t(()=>[a(e,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.calllogging.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(CallLogging)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),a(o,{title:"module"},{default:t(()=>[a(e,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.calllogging.*
            // ...
            fun Application.module() {
                install(CallLogging)
                // ...
            }`})]),_:1})]),_:1}),s[19]||(s[19]=k(`<h2 id="configure" tabindex="-1">配置日志设置 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置日志设置 {id=&quot;configure&quot;}&quot;">​</a></h2><p>你可以通过多种方式配置 <code>CallLogging</code>：指定日志级别、根据指定条件过滤请求、自定义日志消息等等。你可以在 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-call-logging/io.ktor.server.plugins.call-logging/-call-logging-config/index.html" target="_blank" rel="noreferrer">CallLoggingConfig</a> 中查看可用的配置设置。</p><h3 id="logging_level" tabindex="-1">设置日志级别 <a class="header-anchor" href="#logging_level" aria-label="Permalink to &quot;设置日志级别 {id=&quot;logging_level&quot;}&quot;">​</a></h3><p>默认情况下，Ktor 使用 <code>Level.INFO</code> 日志级别。要更改它，请使用 <code>level</code> 属性:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Level.INFO</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="filter" tabindex="-1">过滤日志请求 <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;过滤日志请求 {id=&quot;filter&quot;}&quot;">​</a></h3><p><code>filter</code> 属性允许你添加过滤请求的条件。在下面的示例中，只有发往 <code>/api/v1</code> 的请求才会被记录到日志中:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="format" tabindex="-1">自定义日志消息格式 <a class="header-anchor" href="#format" aria-label="Permalink to &quot;自定义日志消息格式 {id=&quot;format&quot;}&quot;">​</a></h3><p>通过使用 <code>format</code> 函数，你可以将与请求/响应相关的任何数据放入日志中。下面的示例展示了如何记录每个请求的响应状态、请求 HTTP 方法和 <code>User-Agent</code> 标头值。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpMethod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.request.httpMethod.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userAgent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.request.headers[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User-Agent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;Status: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, HTTP method: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$httpMethod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, User agent: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$userAgent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以在这里找到完整示例: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/logging" target="_blank" rel="noreferrer">logging</a>。</p><h3 id="mdc" tabindex="-1">将调用参数放入 MDC <a class="header-anchor" href="#mdc" aria-label="Permalink to &quot;将调用参数放入 MDC {id=&quot;mdc&quot;}&quot;">​</a></h3><p><code>CallLogging</code> 插件支持 MDC (Mapped Diagnostic Context)。你可以使用 <code>mdc</code> 函数将所需上下文值以指定名称放入 MDC。例如，在下面的代码片段中，将 <code>name</code> 查询参数添加到 MDC:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mdc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name-parameter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.request.queryParameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以在 <code>ApplicationCall</code> 的生命周期内访问添加的值:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.slf4j.MDC</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MDC.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name-parameter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,17))])}const D=c(v,[["render",F]]);export{B as __pageData,D as default};
