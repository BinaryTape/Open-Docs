import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"LLM 會話與手動歷史記錄管理","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/koog/sessions.md","filePath":"zh-Hant/koog/sessions.md","lastUpdated":1755146406000}'),e={name:"zh-Hant/koog/sessions.md"};function t(p,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="llm-會話與手動歷史記錄管理" tabindex="-1">LLM 會話與手動歷史記錄管理 <a class="header-anchor" href="#llm-會話與手動歷史記錄管理" aria-label="Permalink to &quot;LLM 會話與手動歷史記錄管理&quot;">​</a></h1><p>本頁提供關於 LLM 會話的詳細資訊，包括如何使用讀取和寫入會話、管理對話歷史記錄，以及向語言模型發出請求。</p><h2 id="簡介" tabindex="-1">簡介 <a class="header-anchor" href="#簡介" aria-label="Permalink to &quot;簡介&quot;">​</a></h2><p>LLM 會話是一個基本概念，它提供了一種結構化方式來與語言模型 (LLMs) 互動。它們管理對話歷史記錄、處理對 LLM 的請求，並為執行工具和處理回應提供一致的介面。</p><h2 id="理解-llm-會話" tabindex="-1">理解 LLM 會話 <a class="header-anchor" href="#理解-llm-會話" aria-label="Permalink to &quot;理解 LLM 會話&quot;">​</a></h2><p>LLM 會話代表了與語言模型互動的上下文。它封裝了：</p><ul><li>對話歷史記錄 (提示)</li><li>可用的工具</li><li>向 LLM 發出請求的方法</li><li>更新對話歷史記錄的方法</li><li>執行工具的方法</li></ul><p>會話由 <code>AIAgentLLMContext</code> 類別管理，該類別提供建立讀取和寫入會話的方法。</p><h3 id="會話類型" tabindex="-1">會話類型 <a class="header-anchor" href="#會話類型" aria-label="Permalink to &quot;會話類型&quot;">​</a></h3><p>Koog 框架提供兩種會話類型：</p><ol><li><p><strong>寫入會話</strong> (<code>AIAgentLLMWriteSession</code>)：允許修改提示和工具、發出 LLM 請求並執行工具。在寫入會話中所做的更改會被持久化回 LLM 上下文。</p></li><li><p><strong>讀取會話</strong> (<code>AIAgentLLMReadSession</code>)：提供對提示和工具的唯讀存取。它們對於檢查當前狀態而無需進行更改非常有用。</p></li></ol><p>關鍵區別在於寫入會話可以修改對話歷史記錄，而讀取會話則不能。</p><h3 id="會話生命週期" tabindex="-1">會話生命週期 <a class="header-anchor" href="#會話生命週期" aria-label="Permalink to &quot;會話生命週期&quot;">​</a></h3><p>會話具有明確定義的生命週期：</p><ol><li><strong>建立</strong>：使用 <code>llm.writeSession { ... }</code> 或 <code>llm.readSession { ... }</code> 建立會話。</li><li><strong>活躍階段</strong>：當 lambda 區塊正在執行時，會話處於活躍狀態。</li><li><strong>終止</strong>：當 lambda 區塊完成時，會話會自動關閉。</li></ol><p>會話實作了 <code>AutoCloseable</code> 介面，確保即使發生例外情況，它們也能正確清理。</p><h2 id="使用-llm-會話" tabindex="-1">使用 LLM 會話 <a class="header-anchor" href="#使用-llm-會話" aria-label="Permalink to &quot;使用 LLM 會話&quot;">​</a></h2><h3 id="建立會話" tabindex="-1">建立會話 <a class="header-anchor" href="#建立會話" aria-label="Permalink to &quot;建立會話&quot;">​</a></h3><p>會話使用 <code>AIAgentLLMContext</code> 類別上的擴展函數建立：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creating a write session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Session code here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creating a read session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Session code here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>這些函數接受一個 lambda 區塊，該區塊在會話的上下文內執行。當區塊完成時，會話會自動關閉。</p><h3 id="會話範圍與執行緒安全" tabindex="-1">會話範圍與執行緒安全 <a class="header-anchor" href="#會話範圍與執行緒安全" aria-label="Permalink to &quot;會話範圍與執行緒安全&quot;">​</a></h3><p>會話使用讀寫鎖來確保執行緒安全：</p><ul><li>多個讀取會話可以同時處於活躍狀態。</li><li>一次只能有一個寫入會話處於活躍狀態。</li><li>寫入會話會阻塞所有其他會話（包括讀取和寫入）。</li></ul><p>這確保了對話歷史記錄不會因並發修改而損壞。</p><h3 id="存取會話屬性" tabindex="-1">存取會話屬性 <a class="header-anchor" href="#存取會話屬性" aria-label="Permalink to &quot;存取會話屬性&quot;">​</a></h3><p>在會話內部，您可以存取提示和工具：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messageCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prompt.messages.size</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> availableTools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tools.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.name }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在寫入會話中，您也可以修改這些屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Modify the prompt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updatePrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;New user message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Modify the tools</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newTools</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關更多資訊，請參閱 <a href="https://api.koog.ai/agents/agents-core/ai.koog.agents.core.agent.session/-a-i-agent-l-l-m-read-session/index.html" target="_blank" rel="noreferrer">AIAgentLLMReadSession</a> 和 <a href="https://api.koog.ai/agents/agents-core/ai.koog.agents.core.agent.session/-a-i-agent-l-l-m-write-session/index.html" target="_blank" rel="noreferrer">AIAgentLLMWriteSession</a> 的詳細 API 參考。</p><h2 id="發出-llm-請求" tabindex="-1">發出 LLM 請求 <a class="header-anchor" href="#發出-llm-請求" aria-label="Permalink to &quot;發出 LLM 請求&quot;">​</a></h2><h3 id="基本請求方法" tabindex="-1">基本請求方法 <a class="header-anchor" href="#基本請求方法" aria-label="Permalink to &quot;基本請求方法&quot;">​</a></h3><p>發出 LLM 請求最常用的方法有：</p><ol><li><p><code>requestLLM()</code>：向 LLM 發出帶有當前提示和工具的請求，返回單個回應。</p></li><li><p><code>requestLLMMultiple()</code>：向 LLM 發出帶有當前提示和工具的請求，返回多個回應。</p></li><li><p><code>requestLLMWithoutTools()</code>：向 LLM 發出帶有當前提示但不帶任何工具的請求，返回單個回應。</p></li><li><p><code>requestLLMForceOneTool</code>：向 LLM 發出帶有當前提示和工具的請求，強制使用一個工具。</p></li><li><p><code>requestLLMOnlyCallingTools</code>：向 LLM 發出應僅使用工具處理的請求。</p></li></ol><p>範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a request with tools enabled</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a request without tools</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responseWithoutTools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLMWithoutTools</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a request that returns multiple responses</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responses </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLMMultiple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="請求的工作方式" tabindex="-1">請求的工作方式 <a class="header-anchor" href="#請求的工作方式" aria-label="Permalink to &quot;請求的工作方式&quot;">​</a></h3><p>當您明確呼叫其中一個請求方法時，就會發出 LLM 請求。需要理解的關鍵點是：</p><ol><li><strong>明確調用</strong>：只有當您呼叫 <code>requestLLM()</code>、<code>requestLLMWithoutTools()</code> 等方法時，請求才會發生。</li><li><strong>即時執行</strong>：當您呼叫請求方法時，請求會立即發出，並且該方法會阻塞，直到收到回應。</li><li><strong>自動歷史記錄更新</strong>：在寫入會話中，回應會自動添加到對話歷史記錄中。</li><li><strong>無隱式請求</strong>：系統不會發出隱式請求；您需要明確呼叫請求方法。</li></ol><h3 id="帶工具的請求方法" tabindex="-1">帶工具的請求方法 <a class="header-anchor" href="#帶工具的請求方法" aria-label="Permalink to &quot;帶工具的請求方法&quot;">​</a></h3><p>當發出啟用工具的請求時，LLM 可能會以工具呼叫而不是文本回應的形式回應。請求方法會透明地處理此問題：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The response might be a tool call or a text response</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Message.Tool.Call) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Handle tool call</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Handle text response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>實際上，您通常不需要手動檢查回應類型，因為代理圖會自動處理此路由。</p><h3 id="結構化和串流請求" tabindex="-1">結構化和串流請求 <a class="header-anchor" href="#結構化和串流請求" aria-label="Permalink to &quot;結構化和串流請求&quot;">​</a></h3><p>對於更進階的用例，平台提供了用於結構化和串流請求的方法：</p><ol><li><p><code>requestLLMStructured()</code>：請求 LLM 以特定的結構化格式提供回應。</p></li><li><p><code>requestLLMStructuredOneShot()</code>：類似於 <code>requestLLMStructured()</code>，但沒有重試或修正。</p></li><li><p><code>requestLLMStreaming()</code>：向 LLM 發出串流請求，返回回應區塊的流程。</p></li></ol><p>範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a structured request</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> structuredResponse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLMStructured</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JokeRating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a streaming request</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responseStream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLMStreaming</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    responseStream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { chunk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Process each chunk as it arrives</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="管理對話歷史記錄" tabindex="-1">管理對話歷史記錄 <a class="header-anchor" href="#管理對話歷史記錄" aria-label="Permalink to &quot;管理對話歷史記錄&quot;">​</a></h2><h3 id="更新提示" tabindex="-1">更新提示 <a class="header-anchor" href="#更新提示" aria-label="Permalink to &quot;更新提示&quot;">​</a></h3><p>在寫入會話中，您可以使用 <code>updatePrompt</code> 方法更新提示（對話歷史記錄）：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updatePrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Add a system message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        system</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You are a helpful assistant.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Add a user message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, can you help me with a coding question?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Add an assistant message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        assistant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Of course! What&#39;s your question?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Add a tool result</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myToolResult)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您還可以使用 <code>rewritePrompt</code> 方法完全重寫提示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rewritePrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { oldPrompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Create a new prompt based on the old one</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oldPrompt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filteredMessages)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="回應時自動更新歷史記錄" tabindex="-1">回應時自動更新歷史記錄 <a class="header-anchor" href="#回應時自動更新歷史記錄" aria-label="Permalink to &quot;回應時自動更新歷史記錄&quot;">​</a></h3><p>當您在寫入會話中發出 LLM 請求時，回應會自動添加到對話歷史記錄中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add a user message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updatePrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;What&#39;s the capital of France?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a request – the response is automatically added to the history</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The prompt now includes both the user message and the model&#39;s response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>這種自動歷史記錄更新是寫入會話的關鍵功能，確保對話自然流動。</p><h3 id="歷史記錄壓縮" tabindex="-1">歷史記錄壓縮 <a class="header-anchor" href="#歷史記錄壓縮" aria-label="Permalink to &quot;歷史記錄壓縮&quot;">​</a></h3><p>對於長時間運行的對話，歷史記錄可能會變得很大並消耗大量令牌。平台提供了壓縮歷史記錄的方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Compress the history using a TLDR approach</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    replaceHistoryWithTLDR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HistoryCompressionStrategy.WholeHistory, preserveMemory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您還可以使用策略圖中的 <code>nodeLLMCompressHistory</code> 節點在特定點壓縮歷史記錄。</p><p>有關歷史記錄壓縮和壓縮策略的更多資訊，請參閱 <a href="./history-compression">歷史記錄壓縮</a>。</p><h2 id="在會話中執行工具" tabindex="-1">在會話中執行工具 <a class="header-anchor" href="#在會話中執行工具" aria-label="Permalink to &quot;在會話中執行工具&quot;">​</a></h2><h3 id="呼叫工具" tabindex="-1">呼叫工具 <a class="header-anchor" href="#呼叫工具" aria-label="Permalink to &quot;呼叫工具&quot;">​</a></h3><p>寫入會話提供了幾種呼叫工具的方法：</p><ol><li><p><code>callTool(tool, args)</code>：透過參考呼叫工具。</p></li><li><p><code>callTool(toolName, args)</code>：透過名稱呼叫工具。</p></li><li><p><code>callTool(toolClass, args)</code>：透過類別呼叫工具。</p></li><li><p><code>callToolRaw(toolName, args)</code>：透過名稱呼叫工具並返回原始字串結果。</p></li></ol><p>範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Call a tool by reference</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myTool, myArgs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Call a tool by name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myToolName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myArgs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Call a tool by class</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyTool::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myArgs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Call a tool and get the raw result</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rawResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callToolRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myToolName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myArgs)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="並行工具執行" tabindex="-1">並行工具執行 <a class="header-anchor" href="#並行工具執行" aria-label="Permalink to &quot;並行工具執行&quot;">​</a></h3><p>為了並行執行多個工具，寫入會話在 <code>Flow</code> 上提供了擴展函數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Run tools in parallel</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    parseDataToArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toParallelToolCalls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyTool::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Process each result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Run tools in parallel and get raw results</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    parseDataToArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toParallelToolCallsRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyTool::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { rawResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Process each raw result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>這對於高效處理大量資料很有用。</p><h2 id="最佳實踐" tabindex="-1">最佳實踐 <a class="header-anchor" href="#最佳實踐" aria-label="Permalink to &quot;最佳實踐&quot;">​</a></h2><p>使用 LLM 會話時，請遵循以下最佳實踐：</p><ol><li><p><strong>使用正確的會話類型</strong>：當您需要修改對話歷史記錄時使用寫入會話，而當您只需要讀取它時使用讀取會話。</p></li><li><p><strong>保持會話簡短</strong>：會話應專注於特定任務並盡快關閉以釋放資源。</p></li><li><p><strong>處理例外</strong>：確保在會話中處理例外情況，以防止資源洩漏。</p></li><li><p><strong>管理歷史記錄大小</strong>：對於長時間運行的對話，使用歷史記錄壓縮來減少令牌使用量。</p></li><li><p><strong>偏好高階抽象</strong>：在可能的情況下，使用基於節點的 API。例如，使用 <code>nodeLLMRequest</code> 而不是直接操作會話。</p></li><li><p><strong>注意執行緒安全</strong>：請記住，寫入會話會阻塞其他會話，因此請盡量縮短寫入操作。</p></li><li><p><strong>使用結構化請求處理複雜資料</strong>：當您需要 LLM 返回結構化資料時，請使用 <code>requestLLMStructured</code> 而不是解析自由格式文本。</p></li><li><p><strong>使用串流處理長回應</strong>：對於長回應，使用 <code>requestLLMStreaming</code> 在回應到達時處理它。</p></li></ol><h2 id="故障排除" tabindex="-1">故障排除 <a class="header-anchor" href="#故障排除" aria-label="Permalink to &quot;故障排除&quot;">​</a></h2><h3 id="會話已關閉" tabindex="-1">會話已關閉 <a class="header-anchor" href="#會話已關閉" aria-label="Permalink to &quot;會話已關閉&quot;">​</a></h3><p>如果您看到類似於 <code>Cannot use session after it was closed</code> 的錯誤，表示您正在嘗試在會話的 lambda 區塊完成後使用它。請確保所有會話操作都在會話區塊內執行。</p><h3 id="歷史記錄過大" tabindex="-1">歷史記錄過大 <a class="header-anchor" href="#歷史記錄過大" aria-label="Permalink to &quot;歷史記錄過大&quot;">​</a></h3><p>如果您的歷史記錄變得太大並消耗過多令牌，請使用歷史記錄壓縮技術：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    replaceHistoryWithTLDR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HistoryCompressionStrategy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FromLastNMessages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), preserveMemory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關更多資訊，請參閱 <a href="./history-compression">歷史記錄壓縮</a></p><h3 id="找不到工具" tabindex="-1">找不到工具 <a class="header-anchor" href="#找不到工具" aria-label="Permalink to &quot;找不到工具&quot;">​</a></h3><p>如果您看到有關找不到工具的錯誤，請檢查：</p><ul><li>工具是否在工具註冊表中正確註冊。</li><li>您是否使用了正確的工具名稱或類別。</li></ul><h2 id="api-文件" tabindex="-1">API 文件 <a class="header-anchor" href="#api-文件" aria-label="Permalink to &quot;API 文件&quot;">​</a></h2><p>有關更多資訊，請參閱完整的 <a href="https://api.koog.ai/agents/agents-core/ai.koog.agents.core.agent.session/-a-i-agent-l-l-m-session/index.html" target="_blank" rel="noreferrer">AIAgentLLMSession</a> 和 <a href="https://api.koog.ai/agents/agents-core/ai.koog.agents.core.agent.context/-a-i-agent-l-l-m-context/index.html" target="_blank" rel="noreferrer">AIAgentLLMContext</a> 參考。</p>`,89)]))}const g=i(e,[["render",t]]);export{E as __pageData,g as default};
