import{_ as r}from"./chunks/direct-integration-scheme.Cw1ubqmC.js";import{_ as d,a as c,b as m}from"./chunks/disable-sandboxing-in-xcode-project-settings.Hr8r5yJK.js";import{_ as u,C as o,c as g,o as h,j as s,G as t,ag as e,a as n,w as l}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"直接集成","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-direct-integration.md","filePath":"kmp/multiplatform-direct-integration.md","lastUpdated":1755516278000}'),f={name:"kmp/multiplatform-direct-integration.md"};function k(_,a,b,S,C,w){const p=o("tldr"),i=o("shortcut");return h(),g("div",null,[a[9]||(a[9]=s("h1",{id:"直接集成",tabindex:"-1"},[n("直接集成 "),s("a",{class:"header-anchor",href:"#直接集成","aria-label":'Permalink to "直接集成"'},"​")],-1)),t(p,null,{default:l(()=>a[0]||(a[0]=[n(" 这是一个本地集成方法。它适用于以下情况："),s("br",null,null,-1),s("ul",null,[s("li",null,"你已在本地机器上设置好面向 iOS 的 Kotlin Multiplatform 项目。"),s("li",null,[n("你的 Kotlin Multiplatform 项目没有 CocoaPods 依赖项。"),s("br")])],-1),s("p",null,[s("a",{href:"./multiplatform-ios-integration-overview"},"选择最适合你的集成方法")],-1)])),_:1}),a[10]||(a[10]=e('<p>如果你想在 Kotlin Multiplatform 项目和 iOS 项目之间共享代码，从而同时开发它们，你可以使用一个特殊脚本设置直接集成。</p><p>该脚本可自动完成将 Kotlin framework 连接到 Xcode 中的 iOS 项目的过程：</p><p><img src="'+r+'" alt="直接集成图" width="700"></p><p>该脚本使用专门为 Xcode 环境设计的 <code>embedAndSignAppleFrameworkForXcode</code> Gradle 任务。 在设置过程中，你会将其添加到 iOS 应用构建的运行脚本阶段。之后，在运行 iOS 应用构建之前，Kotlin artifact 会被构建并包含在派生数据中。</p><p>一般来说，该脚本：</p><ul><li>将编译后的 Kotlin framework 复制到 iOS project 结构内的正确目录中。</li><li>处理嵌入式 framework 的代码签名过程。</li><li>确保 Kotlin framework 中的代码更改反映在 Xcode 中的 iOS 应用中。</li></ul><h2 id="如何设置" tabindex="-1">如何设置 <a class="header-anchor" href="#如何设置" aria-label="Permalink to &quot;如何设置&quot;">​</a></h2><p>如果你当前正在使用 CocoaPods 插件连接你的 Kotlin framework，请先进行迁移。 如果你的 project 没有 CocoaPods 依赖项，<a href="#connect-the-framework-to-your-project">跳过此步骤</a>。</p><h3 id="从-cocoapods-插件迁移" tabindex="-1">从 CocoaPods 插件迁移 <a class="header-anchor" href="#从-cocoapods-插件迁移" aria-label="Permalink to &quot;从 CocoaPods 插件迁移&quot;">​</a></h3><p>要从 CocoaPods 插件迁移：</p>',10)),s("ol",null,[s("li",null,[s("p",null,[a[2]||(a[2]=n("在 Xcode 中，使用 ")),a[3]||(a[3]=s("strong",null,"Product",-1)),a[4]||(a[4]=n(" | ")),a[5]||(a[5]=s("strong",null,"Clean Build Folder",-1)),a[6]||(a[6]=n(" 或 ")),t(i,null,{default:l(()=>a[1]||(a[1]=[n("Cmd + Shift + K")])),_:1}),a[7]||(a[7]=n(" 快捷键清理构建目录。"))])]),a[8]||(a[8]=e('<li><p>在包含 Podfile 的目录中，运行以下命令：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div></li>',1))]),a[11]||(a[11]=e(`<p>pod deintegrate</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>3.  从你的 \`build.gradle(.kts)\` 文件中移除 \`cocoapods {}\` 代码块。</span></span>
<span class="line"><span>4.  删除 \`.podspec\` 文件和 Podfile。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>### 将 framework 连接到你的 project</span></span>
<span class="line"><span></span></span>
<span class="line"><span>要将多平台 project 生成的 Kotlin framework 连接到你的 Xcode project：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1.  \`embedAndSignAppleFrameworkForXcode\` 任务仅在声明 \`binaries.framework\` 配置选项时注册。在你的 Kotlin Multiplatform 项目中，检查 \`build.gradle.kts\` 文件中的 iOS 目标声明。</span></span>
<span class="line"><span>2.  在 Xcode 中，双击 project 名称打开 iOS project 设置。</span></span>
<span class="line"><span>3.  在左侧的 **Targets** 部分，选择你的目标，然后导航到 **Build Phases** 标签页。</span></span>
<span class="line"><span>4.  点击 **+** 并选择 **New Run Script Phase**。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>![添加运行脚本阶段](xcode-run-script-phase-1.png){width=700}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>5.  调整以下脚本，并将结果粘贴到运行脚本字段中：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`bash</span></span>
<span class="line"><span>cd &quot;&lt;Path to the root of the multiplatform project&gt;&quot;</span></span>
<span class="line"><span>./gradlew :&lt;Shared module name&gt;:embedAndSignAppleFrameworkForXcode</span></span></code></pre></div><ul><li>在 <code>cd</code> 命令中，指定你的 Kotlin Multiplatform 项目的根路径，例如 <code>$SRCROOT/..</code>。</li><li>在 <code>./gradlew</code> 命令中，指定共享模块的名称，例如 <code>:shared</code> 或 <code>:composeApp</code>。</li></ul><p><img src="`+d+'" alt="添加脚本" width="700"></p><ol start="6"><li>禁用 <strong>Based on dependency analysis</strong> 选项。</li></ol><p>这可确保 Xcode 在每次构建期间都运行脚本，并且不会每次都警告缺少输出依赖项。 7. 将 <strong>Run Script</strong> 阶段上移，放置在 <strong>Compile Sources</strong> 阶段之前。</p><p><img src="'+c+'" alt="拖动运行脚本阶段" width="700"></p><ol start="8"><li>在 <strong>Build Settings</strong> 标签页上，在 <strong>Build Options</strong> 下禁用 <strong>User Script Sandboxing</strong> 选项：</li></ol><p><img src="'+m+'" alt="用户脚本沙盒" width="700"></p><blockquote><p>如果你在未首先禁用沙盒的情况下构建了 iOS project，这可能需要重启你的 Gradle daemon。停止可能已被沙盒化的 Gradle daemon 进程：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stop</span></span></code></pre></div><p style=""></p></blockquote><ol start="9"><li>在 Xcode 中构建 project。如果一切设置正确，project 将成功构建。</li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果你的构建配置与默认的 <code>Debug</code> 或 <code>Release</code> 不同，请在 <strong>Build Settings</strong> 标签页的 <strong>User-Defined</strong> 下添加 <code>KOTLIN_FRAMEWORK_BUILD_TYPE</code> 设置，并将其设为 <code>Debug</code> 或 <code>Release</code>。</p></div><h2 id="接下来是什么" tabindex="-1">接下来是什么？ <a class="header-anchor" href="#接下来是什么" aria-label="Permalink to &quot;接下来是什么？&quot;">​</a></h2><p>在使用 Swift package manager 时，你也可以利用本地集成。 <a href="./multiplatform-spm-local-integration">了解如何在本地 package 中添加对 Kotlin framework 的依赖项</a>。</p>',14))])}const O=u(f,[["render",k]]);export{A as __pageData,O as default};
