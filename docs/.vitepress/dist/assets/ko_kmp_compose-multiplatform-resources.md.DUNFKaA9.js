import{_ as o,c as r,o as t,ag as a}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"리소스 개요","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-multiplatform-resources.md","filePath":"ko/kmp/compose-multiplatform-resources.md","lastUpdated":1755516278000}'),l={name:"ko/kmp/compose-multiplatform-resources.md"};function s(p,e,i,m,c,u){return t(),r("div",null,e[0]||(e[0]=[a('<h1 id="리소스-개요" tabindex="-1">리소스 개요 <a class="header-anchor" href="#리소스-개요" aria-label="Permalink to &quot;리소스 개요&quot;">​</a></h1><p>Compose Multiplatform는 지원되는 모든 플랫폼의 공통 코드에서 리소스에 액세스하기 위한 특별한 <code>compose-multiplatform-resources</code> 라이브러리와 Gradle 플러그인 지원을 제공합니다. 리소스는 이미지, 폰트, 문자열과 같이 애플리케이션에서 사용할 수 있는 정적 콘텐츠입니다.</p><p>Compose Multiplatform에서 리소스와 함께 작업할 때 다음 조건을 고려하십시오.</p><ul><li>거의 모든 리소스는 호출자 스레드에서 동기적으로 읽힙니다. 유일한 예외는 비동기적으로 읽히는 원시 파일 및 웹 리소스입니다.</li><li>긴 비디오와 같은 큰 원시 파일을 스트림으로 읽는 것은 아직 지원되지 않습니다. 예를 들어 <code>kotlinx-io</code> 라이브러리와 같은 시스템 API에 개별 파일을 전달하려면 <a href="./compose-multiplatform-resources-usage#accessing-multiplatform-resources-from-external-libraries"><code>getUri()</code></a> 함수를 사용하십시오.</li><li>1.6.10부터 Kotlin 2.0.0 이상 및 Gradle 7.6 이상을 사용하는 한, 리소스를 모든 모듈 또는 소스 세트에 배치할 수 있습니다.</li></ul><p>Compose Multiplatform에서 리소스 작업 방법을 배우려면 다음 주요 섹션을 참조하십시오.</p><ul><li><p><a href="./compose-multiplatform-resources-setup">멀티플랫폼 리소스 설정 및 구성</a></p><p><code>resources</code> 라이브러리 종속성을 추가하고 앱에서 액세스할 수 있어야 하는 모든 리소스를 설정합니다.</p></li><li><p><a href="./compose-multiplatform-resources-usage">앱에서 멀티플랫폼 리소스 사용</a></p><p>자동으로 생성된 접근자를 사용하여 UI 코드에서 리소스에 직접 액세스하는 방법을 배우십시오.</p></li><li><p><a href="./compose-resource-environment">로컬 리소스 환경</a></p><p>인앱 테마 및 언어와 같은 앱의 리소스 환경을 관리합니다.</p></li></ul>',6)]))}const n=o(l,[["render",s]]);export{f as __pageData,n as default};
