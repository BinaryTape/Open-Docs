import{_ as o,c as r,o as t,ag as a}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"资源概览","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/compose-multiplatform-resources.md","filePath":"kmp/compose-multiplatform-resources.md","lastUpdated":1755516278000}'),l={name:"kmp/compose-multiplatform-resources.md"};function s(p,e,i,m,c,u){return t(),r("div",null,e[0]||(e[0]=[a('<h1 id="资源概览" tabindex="-1">资源概览 <a class="header-anchor" href="#资源概览" aria-label="Permalink to &quot;资源概览&quot;">​</a></h1><p>Compose Multiplatform 提供了一个专门的 <code>compose-multiplatform-resources</code> 库和 Gradle 插件支持，用于在所有支持的平台上的公共代码中访问资源。资源是静态内容，例如图像、字体和字符串，你可以在应用程序中使用它们。</p><p>在 Compose Multiplatform 中使用资源时，请考虑以下当前条件：</p><ul><li>几乎所有资源都在调用者线程中同步读取。唯一的例外是原始文件和 Web 资源，它们是异步读取的。</li><li>尚不支持以流的形式读取大型原始文件，例如长视频。使用 <a href="./compose-multiplatform-resources-usage#accessing-multiplatform-resources-from-external-libraries"><code>getUri()</code></a> 函数将独立文件传递给系统 API，例如 <a href="https://github.com/Kotlin/kotlinx-io" target="_blank" rel="noreferrer">kotlinx-io</a> 库。</li><li>从 1.6.10 开始，只要你使用 Kotlin 2.0.0 或更高版本以及 Gradle 7.6 或更高版本，就可以将资源放置在任何模块或源代码集中。</li></ul><p>要了解如何在 Compose Multiplatform 中使用资源，请参考以下主要章节：</p><ul><li><p><a href="./compose-multiplatform-resources-setup">多平台资源的设置与配置</a></p><p>添加 <code>resources</code> 库依赖项，并设置你的应用应该能够访问的所有资源。</p></li><li><p><a href="./compose-multiplatform-resources-usage">在应用中使用多平台资源</a></p><p>了解如何使用自动生成的访问器直接在你的 UI 代码中访问资源。</p></li><li><p><a href="./compose-resource-environment">本地资源环境</a></p><p>管理你的应用资源环境，例如应用内主题和语言。</p></li></ul>',6)]))}const d=o(l,[["render",s]]);export{f as __pageData,d as default};
