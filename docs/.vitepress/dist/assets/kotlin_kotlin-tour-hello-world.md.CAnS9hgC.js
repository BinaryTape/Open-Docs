import{_ as p}from"./chunks/icon-1.K8qzZaho.js";import{_ as h}from"./chunks/icon-2-todo.CF_tKCD9.js";import{_ as k}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as o}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as r}from"./chunks/icon-5-todo.CqROQ9Y8.js";import{_ as d}from"./chunks/icon-6-todo.Bq5TIrqo.js";import{_ as c}from"./chunks/icon-7-todo.D-C90RBD.js";import{_ as g,C as t,c as E,o as y,j as s,G as l,ag as u,a as i,w as m}from"./chunks/framework.Bksy39di.js";const N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/kotlin-tour-hello-world.md","filePath":"kotlin/kotlin-tour-hello-world.md","lastUpdated":1754307826000}'),F={name:"kotlin/kotlin-tour-hello-world.md"};function C(b,a,v,_,A,f){const n=t("no-index"),e=t("tldr");return y(),E("div",null,[a[1]||(a[1]=s("h1",{id:"hello-world",tabindex:"-1"},[i("Hello world "),s("a",{class:"header-anchor",href:"#hello-world","aria-label":'Permalink to "Hello world"'},"​")],-1)),l(n),l(e,null,{default:m(()=>a[0]||(a[0]=[s("p",null,[s("img",{src:p,width:"20",alt:"First step"}),i(),s("strong",null,"Hello world"),s("br"),s("img",{src:h,width:"20",alt:"Second step"}),i(),s("a",{href:"/kotlin/kotlin-tour-basic-types"},"基本类型"),s("br"),s("img",{src:k,width:"20",alt:"Third step"}),i(),s("a",{href:"/kotlin/kotlin-tour-collections"},"集合"),s("br"),s("img",{src:o,width:"20",alt:"Fourth step"}),i(),s("a",{href:"/kotlin/kotlin-tour-control-flow"},"控制流"),s("br"),s("img",{src:r,width:"20",alt:"Fifth step"}),i(),s("a",{href:"/kotlin/kotlin-tour-functions"},"函数"),s("br"),s("img",{src:d,width:"20",alt:"Sixth step"}),i(),s("a",{href:"/kotlin/kotlin-tour-classes"},"类"),s("br"),s("img",{src:c,width:"20",alt:"Final step"}),i(),s("a",{href:"/kotlin/kotlin-tour-null-safety"},"空安全")],-1)])),_:1}),a[2]||(a[2]=u(`<p>这是一个打印“Hello, world!”的简单程序：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Hello, world!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 Kotlin 中：</p><ul><li><code>fun</code> 用于声明一个函数</li><li><code>main()</code> 函数是程序的起点</li><li>函数的主体写在花括号 <code>{}</code> 内</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html" target="_blank" rel="noreferrer"><code>println()</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/print.html" target="_blank" rel="noreferrer"><code>print()</code></a> 函数将它们的实参打印到标准输出</li></ul><p>函数是执行特定任务的一组指令。创建函数后，你可以随时使用它来执行该任务，而无需重复编写指令。函数将在后面的章节中更详细地讨论。在此之前，所有示例都使用 <code>main()</code> 函数。</p><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p>所有程序都需要能够存储数据，而变量正是为此而生。在 Kotlin 中，你可以声明：</p><ul><li>用 <code>val</code> 声明只读变量</li><li>用 <code>var</code> 声明可变变量</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>只读变量一旦赋值后，就不能再更改它的值了。</p></div><p>要赋值，请使用赋值操作符 <code>=</code>。</p><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> popcorn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // There are 5 boxes of popcorn</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hotdog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // There are 7 hotdogs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // There are 10 customers in the queue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Some customers leave the queue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    customers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customers)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>变量可以声明在 <code>main()</code> 函数之外，在程序的开头。以这种方式声明的变量被称为顶层声明。</p></div><p>由于 <code>customers</code> 是一个可变变量，它可以在声明后重新赋值。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>我们建议默认将所有变量声明为只读 (<code>val</code>)。只有在你确实需要时才使用可变变量 (<code>var</code>)。这样，你就不太可能意外地更改不打算更改的内容。</p></div><h2 id="字符串模板" tabindex="-1">字符串模板 <a class="header-anchor" href="#字符串模板" aria-label="Permalink to &quot;字符串模板&quot;">​</a></h2><p>了解如何将变量内容打印到标准输出会很有用。你可以使用<strong>字符串模板</strong>来完成此操作。你可以使用模板表达式来访问存储在变量及其他对象中的数据，并将其转换为字符串。字符串值是双引号 <code>&quot;&quot;</code> 中的字符序列。模板表达式总是以美元符号 <code>$</code> 开头。</p><p>要在模板表达式中求值一段代码，请在美元符号 <code>$</code> 后面将代码放在花括号 <code>{}</code> 内。</p><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;There are </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$customers</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> customers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // There are 10 customers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;There are \${customers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} customers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // There are 11 customers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有关更多信息，请参阅 <a href="/kotlin/strings#string-templates">字符串模板</a>。</p><p>你会注意到变量没有声明任何类型。Kotlin 已经推断出类型本身是 <code>Int</code>。本教程将在<a href="/kotlin/kotlin-tour-basic-types">下一章</a>中解释不同的 Kotlin 基本类型以及如何声明它们。</p><h2 id="练习" tabindex="-1">练习 <a class="header-anchor" href="#练习" aria-label="Permalink to &quot;练习&quot;">​</a></h2><details class="details custom-block"><summary>练习</summary><p>补全代码，使程序将 <code>&quot;Mary is 20 years old&quot;</code> 打印到标准输出：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mary&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Write your code here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><details class="details custom-block"><summary>示例解决方案</summary><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mary&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$age</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> years old&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details></details>`,24))])}const S=g(F,[["render",C]]);export{N as __pageData,S as default};
