import{_ as l,C as a,c as o,o as r,j as e,G as i,ag as h,a as t,w as d}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"Heroku","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/heroku.md","filePath":"ja/ktor/heroku.md","lastUpdated":1755457140000}'),k={name:"ja/ktor/heroku.md"};function c(u,s,g,E,y,b){const p=a("show-structure"),n=a("link-summary");return r(),o("div",null,[s[1]||(s[1]=e("h1",{id:"heroku",tabindex:"-1"},[t("Heroku "),e("a",{class:"header-anchor",href:"#heroku","aria-label":'Permalink to "Heroku"'},"​")],-1)),i(p,{for:"chapter",depth:"2"}),i(n,null,{default:d(()=>s[0]||(s[0]=[t("KtorアプリケーションをHerokuに準備してデプロイする方法を学びましょう。")])),_:1}),s[2]||(s[2]=h(`<p>このチュートリアルでは、KtorアプリケーションをHerokuに準備してデプロイする方法を説明します。</p><h2 id="prerequisites" tabindex="-1">前提条件 <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;前提条件 {id=&quot;prerequisites&quot;}&quot;">​</a></h2><p>このチュートリアルを開始する前に、以下の前提条件が満たされていることを確認してください。</p><ul><li>Herokuアカウントを持っていること。</li><li>お使いのマシンに<a href="https://devcenter.heroku.com/articles/heroku-cli" target="_blank" rel="noreferrer">Heroku CLI</a>がインストールされていること。</li></ul><h2 id="create-sample-app" tabindex="-1">サンプルアプリケーションの作成 <a class="header-anchor" href="#create-sample-app" aria-label="Permalink to &quot;サンプルアプリケーションの作成 {id=&quot;create-sample-app&quot;}&quot;">​</a></h2><p><a href="./server-create-a-new-project">新しいKtorプロジェクトの作成、開く、実行</a>で説明されているように、サンプルアプリケーションを作成します。</p><blockquote><p>Ktorには、<a href="./server-create-and-configure">サーバーを作成および設定</a>する2つのアプローチがあります。コードで設定するか、構成ファイルを使用するかです。デプロイにおける唯一の違いは、着信リクエストをリッスンするために使用する<a href="#port">ポートを指定する</a>方法です。</p></blockquote><h2 id="prepare-app" tabindex="-1">アプリケーションの準備 <a class="header-anchor" href="#prepare-app" aria-label="Permalink to &quot;アプリケーションの準備 {id=&quot;prepare-app&quot;}&quot;">​</a></h2><h3 id="port" tabindex="-1">ステップ1: ポートの構成 <a class="header-anchor" href="#port" aria-label="Permalink to &quot;ステップ1: ポートの構成 {id=&quot;port&quot;}&quot;">​</a></h3><p>まず、着信リクエストをリッスンするために使用するポートを指定する必要があります。Herokuは<code>PORT</code>環境変数を使用するため、この変数の値を使用するようにアプリケーションを構成する必要があります。<a href="./server-create-and-configure">Ktorサーバーを構成する</a>方法に応じて、以下のいずれかを実行します。</p><ul><li><p>サーバー構成がコードで指定されている場合、<code>System.getenv</code>を使用して環境変数の値を取得できます。<code>src/main/kotlin/com/example</code>フォルダーに配置されている<code>Application.kt</code>ファイルを開き、以下に示すように<code>embeddedServer</code>関数の<code>port</code>パラメーター値を変更します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   embeddedServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Netty, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PORT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wait </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>サーバー構成が<code>application.conf</code>ファイルで指定されている場合、<code>\${ENV}</code>構文を使用して環境変数を<code>port</code>パラメーターに割り当てることができます。<code>src/main/resources</code>に配置されている<code>application.conf</code>ファイルを開き、以下に示すように更新します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ktor {</span></span>
<span class="line"><span>    deployment {</span></span>
<span class="line"><span>        port = 8080</span></span>
<span class="line"><span>        port = \${?PORT}</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div></li></ul><h3 id="stage" tabindex="-1">ステップ2: stageタスクの追加 <a class="header-anchor" href="#stage" aria-label="Permalink to &quot;ステップ2: stageタスクの追加 {id=&quot;stage&quot;}&quot;">​</a></h3><p><code>build.gradle.kts</code>ファイルを開き、HerokuがHerokuのプラットフォームで実行される実行可能ファイルを作成するために使用するカスタム<code>stage</code>タスクを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;installDist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>installDist</code>タスクはGradleの<a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">アプリケーションプラグイン</a>に含まれており、これはすでにサンプルプロジェクトに追加されていることに注意してください。</p><h3 id="procfile" tabindex="-1">ステップ3: Procfileの作成 <a class="header-anchor" href="#procfile" aria-label="Permalink to &quot;ステップ3: Procfileの作成 {id=&quot;procfile&quot;}&quot;">​</a></h3><p>プロジェクトのルートに<a href="https://devcenter.heroku.com/articles/procfile" target="_blank" rel="noreferrer">Procfile</a>を作成し、以下の内容を追加します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>web: ./build/install/ktor-get-started-sample/bin/ktor-get-started-sample</span></span></code></pre></div><p>このファイルは、<a href="#stage">stage</a>タスクによって生成されたアプリケーションの実行可能ファイルへのパスを指定し、Herokuがアプリケーションを起動できるようにします。 <code>ktor-get-started-sample</code>をプロジェクト名に置き換える必要がある場合があります。</p><h2 id="deploy-app" tabindex="-1">アプリケーションのデプロイ <a class="header-anchor" href="#deploy-app" aria-label="Permalink to &quot;アプリケーションのデプロイ {id=&quot;deploy-app&quot;}&quot;">​</a></h2><p>Gitを使用してアプリケーションをHerokuにデプロイするには、ターミナルを開いて以下の手順に従ってください。</p><ol><li><p><a href="#prepare-app">前のセクション</a>で行った変更をローカルでコミットします。</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Prepare app for deploying&quot;</span></span></code></pre></div></li><li><p>Heroku CLIにログインします。</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">heroku</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span></code></pre></div></li><li><p><code>heroku create</code>コマンドを使用してHerokuアプリケーションを作成します。 <code>ktor-sample-heroku</code>をアプリケーションの名前に置き換える必要があります。</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">heroku</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ktor-sample-heroku</span></span></code></pre></div><p>このコマンドは2つのことを行います。</p><ul><li>新しいHerokuアプリケーションを作成します。これは<a href="https://dashboard.heroku.com/apps/" target="_blank" rel="noreferrer">Webダッシュボード</a>で利用可能です。</li><li>ローカルリポジトリに<code>heroku</code>という新しいGitリモートを追加します。</li></ul></li><li><p>アプリケーションをデプロイするには、変更を<code>heroku main</code>にプッシュします...</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> heroku</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><p>...そして、Herokuがアプリケーションをビルドして公開するまで待ちます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>...</span></span>
<span class="line"><span>remote: https://ktor-sample-heroku.herokuapp.com/ deployed to Heroku</span></span>
<span class="line"><span>remote:</span></span>
<span class="line"><span>remote: Verifying deploy... done.</span></span></code></pre></div></li></ol>`,22))])}const v=l(k,[["render",c]]);export{F as __pageData,v as default};
