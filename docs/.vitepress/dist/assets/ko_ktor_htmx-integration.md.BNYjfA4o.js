import{_ as o,C as l,c as g,o as u,G as t,ag as k,j as e,w as a,a as i}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/htmx-integration.md","filePath":"ko/ktor/htmx-integration.md","lastUpdated":1755457140000}'),y={name:"ko/ktor/htmx-integration.md"};function F(H,s,x,m,f,T){const h=l("TopicTitle"),r=l("show-structure"),d=l("primary-label"),E=l("tldr"),n=l("def"),p=l("deflist");return u(),g("div",null,[t(h,{labelRef:"experimental",title:"HTMX 통합"}),t(r,{for:"chapter",depth:"2"}),t(d,{ref:"experimental"},null,512),t(E,null,{default:a(()=>s[0]||(s[0]=[e("p",null,[e("b",null,"필수 의존성"),i(": "),e("code",null,"io.ktor:ktor-htmx"),i(", "),e("code",null,"io.ktor:ktor-htmx-html"),i(", "),e("code",null,"io.ktor:ktor-server-htmx")],-1),e("p",null,[e("b",null,"코드 예시"),i(": "),e("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/htmx-integration"}," htmx-integration ")],-1)])),_:1}),s[29]||(s[29]=k('<p><a href="https://htmx.org/" target="_blank" rel="noreferrer">HTMX</a>는 HTML 속성을 사용하여 동적인 클라이언트 측 동작을 가능하게 하는 경량 JavaScript 라이브러리입니다. HTMX는 JavaScript를 작성할 필요 없이 AJAX, CSS 트랜지션, 웹소켓 및 서버 전송 이벤트(Server-Sent Events)를 포함한 다양한 기능을 지원합니다.</p><p>Ktor는 서버 및 클라이언트 환경 모두에서 통합을 간소화하는 공유 모듈 집합을 통해 HTMX에 대한 실험적이고 최상위 수준의 지원을 제공합니다. 이 모듈들은 HTMX 헤더 작업, Kotlin DSL을 사용한 HTML 속성 정의, 그리고 서버에서 HTMX 관련 라우팅 로직 처리를 위한 도구를 제공합니다.</p><h2 id="모듈-개요" tabindex="-1">모듈 개요 <a class="header-anchor" href="#모듈-개요" aria-label="Permalink to &quot;모듈 개요&quot;">​</a></h2><p>Ktor의 HTMX 지원은 다음 세 가지 실험적 모듈을 통해 제공됩니다:</p><table tabindex="0"><thead><tr><th>모듈</th><th>설명</th></tr></thead><tbody><tr><td><code>ktor-htmx</code></td><td>코어 정의 및 헤더 상수</td></tr><tr><td><code>ktor-htmx-html</code></td><td>Kotlin HTML DSL과의 통합</td></tr><tr><td><code>ktor-server-htmx</code></td><td>HTMX 특정 요청을 위한 라우팅 지원</td></tr></tbody></table><p>모든 API는 <code>@ExperimentalKtorApi</code>로 표시되어 있으며, <code>@OptIn(ExperimentalKtorApi::class)</code>를 통해 옵트인(opt-in)해야 합니다.</p><h2 id="htmx-헤더" tabindex="-1">HTMX 헤더 <a class="header-anchor" href="#htmx-헤더" aria-label="Permalink to &quot;HTMX 헤더&quot;">​</a></h2><p>코어 <code>ktor-htmx</code> 모듈의 사전 정의된 상수를 사용하여 HTMX 헤더에 타입-세이프 방식으로 접근하거나 설정할 수 있습니다. 이러한 상수들은 트리거, 히스토리 복원 또는 콘텐츠 스와핑과 같은 HTMX 동작을 감지할 때 &#39;매직 스트링(magic string)&#39;을 사용하는 것을 방지하는 데 도움을 줍니다.</p><h3 id="요청-헤더" tabindex="-1">요청 헤더 <a class="header-anchor" href="#요청-헤더" aria-label="Permalink to &quot;요청 헤더&quot;">​</a></h3><p>애플리케이션에서 HTMX 요청 헤더를 읽거나 매치하기 위해 <code>HxRequestHeaders</code> 객체를 사용하세요:</p>',10)),t(p,{type:"wide"},{default:a(()=>[t(n,{title:"HxRequestHeaders.Request"},{default:a(()=>s[1]||(s[1]=[i("HTMX 요청인 경우 항상 "),e("code",null,"true",-1)])),_:1}),t(n,{title:"HxRequestHeaders.Target"},{default:a(()=>s[2]||(s[2]=[i("타겟 요소의 ID")])),_:1}),t(n,{title:"HxRequestHeaders.Trigger"},{default:a(()=>s[3]||(s[3]=[i("트리거된 요소의 ID")])),_:1}),t(n,{title:"HxRequestHeaders.TriggerName"},{default:a(()=>s[4]||(s[4]=[i("트리거된 요소의 이름")])),_:1}),t(n,{title:"HxRequestHeaders.Boosted"},{default:a(()=>s[5]||(s[5]=[e("code",null,"hx-boost",-1),i("를 통한 요청을 나타냄")])),_:1}),t(n,{title:"HxRequestHeaders.CurrentUrl"},{default:a(()=>s[6]||(s[6]=[i("현재 브라우저 URL")])),_:1}),t(n,{title:"HxRequestHeaders.HistoryRestoreRequest"},{default:a(()=>s[7]||(s[7]=[i("히스토리 복원용")])),_:1}),t(n,{title:"HxRequestHeaders.Prompt"},{default:a(()=>s[8]||(s[8]=[e("code",null,"hx-prompt",-1),i("에 대한 사용자 응답")])),_:1})]),_:1}),s[30]||(s[30]=e("h3",{id:"응답-헤더",tabindex:"-1"},[i("응답 헤더 "),e("a",{class:"header-anchor",href:"#응답-헤더","aria-label":'Permalink to "응답 헤더"'},"​")],-1)),s[31]||(s[31]=e("p",null,[e("code",null,"HxResponseHeaders"),i(" 객체를 사용하여 HTMX 응답 헤더에 대한 상수에 접근할 수 있습니다:")],-1)),t(p,{type:"wide"},{default:a(()=>[t(n,{title:"HxResponseHeaders.Location"},{default:a(()=>s[9]||(s[9]=[i("페이지를 다시 로드하지 않는 클라이언트 측 리다이렉트")])),_:1}),t(n,{title:"HxResponseHeaders.PushUrl"},{default:a(()=>s[10]||(s[10]=[i("URL을 히스토리 스택에 푸시")])),_:1}),t(n,{title:"HxResponseHeaders.Redirect"},{default:a(()=>s[11]||(s[11]=[i("클라이언트 측 리다이렉트")])),_:1}),t(n,{title:"HxResponseHeaders.Refresh"},{default:a(()=>s[12]||(s[12]=[i("전체 페이지 강제 새로고침")])),_:1}),t(n,{title:"HxResponseHeaders.ReplaceUrl"},{default:a(()=>s[13]||(s[13]=[i("현재 URL 교체")])),_:1}),t(n,{title:"HxResponseHeaders.Reswap"},{default:a(()=>s[14]||(s[14]=[i("응답이 스와핑되는 방식 제어")])),_:1}),t(n,{title:"HxResponseHeaders.Retarget"},{default:a(()=>s[15]||(s[15]=[i("콘텐츠 업데이트의 타겟 업데이트")])),_:1}),t(n,{title:"HxResponseHeaders.Reselect"},{default:a(()=>s[16]||(s[16]=[i("스와핑할 응답의 부분 선택")])),_:1}),t(n,{title:"HxResponseHeaders.Trigger"},{default:a(()=>s[17]||(s[17]=[i("클라이언트 측 이벤트 트리거")])),_:1}),t(n,{title:"HxResponseHeaders.TriggerAfterSettle"},{default:a(()=>s[18]||(s[18]=[i("정착(settle) 후 이벤트 트리거")])),_:1}),t(n,{title:"HxResponseHeaders.TriggerAfterSwap"},{default:a(()=>s[19]||(s[19]=[i("스와핑 후 이벤트 트리거")])),_:1})]),_:1}),s[32]||(s[32]=e("h2",{id:"스와프-모드",tabindex:"-1"},[i("스와프 모드 "),e("a",{class:"header-anchor",href:"#스와프-모드","aria-label":'Permalink to "스와프 모드"'},"​")],-1)),s[33]||(s[33]=e("p",null,[i("코어 "),e("code",null,"ktor-htmx"),i(" 모듈의 "),e("code",null,"HxSwap"),i(" 객체를 사용하여 다양한 HTMX 스와프 모드에 대한 상수에 접근할 수 있습니다.")],-1)),t(p,{type:"medium"},{default:a(()=>[t(n,{title:"HxSwap.innerHtml"},{default:a(()=>s[20]||(s[20]=[i("내부 HTML 교체 (기본값)")])),_:1}),t(n,{title:"HxSwap.outerHtml "},{default:a(()=>s[21]||(s[21]=[i("전체 요소 교체")])),_:1}),t(n,{title:"HxSwap.textContent"},{default:a(()=>s[22]||(s[22]=[i("텍스트 내용만 교체")])),_:1}),t(n,{title:"HxSwap.beforeBegin"},{default:a(()=>s[23]||(s[23]=[i("타겟 요소 이전에 삽입")])),_:1}),t(n,{title:"HxSwap.afterBegin"},{default:a(()=>s[24]||(s[24]=[i("첫 번째 자식으로 삽입")])),_:1}),t(n,{title:"HxSwap.beforeEnd"},{default:a(()=>s[25]||(s[25]=[i("마지막 자식으로 삽입")])),_:1}),t(n,{title:"HxSwap.afterEnd"},{default:a(()=>s[26]||(s[26]=[i("타겟 요소 이후에 삽입")])),_:1}),t(n,{title:"HxSwap.delete"},{default:a(()=>s[27]||(s[27]=[i("타겟 요소 삭제")])),_:1}),t(n,{title:"HxSwap.none"},{default:a(()=>s[28]||(s[28]=[i("콘텐츠 추가 안 함")])),_:1})]),_:1}),s[34]||(s[34]=k(`<h2 id="html-dsl-확장" tabindex="-1">HTML DSL 확장 <a class="header-anchor" href="#html-dsl-확장" aria-label="Permalink to &quot;HTML DSL 확장&quot;">​</a></h2><p><code>ktor-htmx-html</code> 모듈은 Kotlin의 HTML DSL에 확장 함수를 추가하여, HTMX 속성을 HTML 요소에 직접 추가할 수 있도록 합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKtorApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            attributes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                get</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/data&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;#result&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                swap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HxSwap.outerHtml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                trigger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;click&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Load Data&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>위 예시는 HTMX 속성을 포함한 HTML을 생성합니다:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hx-get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/data&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hx-target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#result-div&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hx-swap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;outerHTML&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hx-trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Load Data&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="서버-측-라우팅" tabindex="-1">서버 측 라우팅 <a class="header-anchor" href="#서버-측-라우팅" aria-label="Permalink to &quot;서버 측 라우팅&quot;">​</a></h2><p><code>ktor-server-htmx</code> 모듈은 <code>hx</code> DSL 블록을 통해 HTMX를 인식하는 라우팅을 제공합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKtorApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 일반 라우트 (HTMX 및 비 HTMX 요청 모두)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Regular response&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // HTMX 요청만 매치 (HX-Request 헤더가 존재)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HTMX response&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 특정 타겟을 가진 HTMX 요청 매치</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        hx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#result-div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Response for #result-div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 특정 트리거를 가진 HTMX 요청 매치</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#load-button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Response for #load-button clicks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이러한 기능들은 애플리케이션이 클라이언트가 전송한 HTMX 헤더에 따라 다르게 응답할 수 있도록 합니다.</p>`,9))])}const b=o(y,[["render",F]]);export{q as __pageData,b as default};
