import{_ as p,C as n,c as d,o as c,ag as s,j as t,a as l,G as a,w as i}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"プラットフォームライブラリ","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/native-platform-libs.md","filePath":"ja/kotlin/native-platform-libs.md","lastUpdated":1754307826000}'),u={name:"ja/kotlin/native-platform-libs.md"};function m(k,e,b,f,h,v){const o=n("tab"),r=n("tabs");return c(),d("div",null,[e[8]||(e[8]=s('<h1 id="プラットフォームライブラリ" tabindex="-1">プラットフォームライブラリ <a class="header-anchor" href="#プラットフォームライブラリ" aria-label="Permalink to &quot;プラットフォームライブラリ&quot;">​</a></h1><p>オペレーティングシステムのネイティブサービスへのアクセスを提供するために、Kotlin/Nativeディストリビューションには、各ターゲットに固有のビルド済みライブラリのセットが含まれています。これらは_プラットフォームライブラリ_と呼ばれます。</p><p>プラットフォームライブラリのパッケージはデフォルトで利用可能です。これらを使用するために追加のリンクオプションを指定する必要はありません。Kotlin/Nativeコンパイラは、どのプラットフォームライブラリがアクセスされているかを自動的に検出し、必要なものをリンクします。</p><p>しかし、コンパイラディストリビューション内のプラットフォームライブラリは、ネイティブライブラリへの単なるラッパーとバインディングに過ぎません。つまり、ネイティブライブラリ自体（<code>.so</code>、<code>.a</code>、<code>.dylib</code>、<code>.dll</code>など）をローカルマシンにインストールする必要があります。</p><h2 id="posixバインディング" tabindex="-1">POSIXバインディング <a class="header-anchor" href="#posixバインディング" aria-label="Permalink to &quot;POSIXバインディング&quot;">​</a></h2><p>Kotlinは、AndroidとiOSを含むすべてのUNIXベースおよびWindowsベースのターゲット向けにPOSIXプラットフォームライブラリを提供します。これらのプラットフォームライブラリには、<a href="https://en.wikipedia.org/wiki/POSIX" target="_blank" rel="noreferrer">POSIX標準</a>に準拠したプラットフォームの実装へのバインディングが含まれています。</p><p>ライブラリを使用するには、プロジェクトにインポートします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.posix.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>platform.posix</code>の内容は、POSIXの実装のバリエーションによりプラットフォーム間で異なります。</p></div><p>各サポートされているプラットフォームの<code>posix.def</code>ファイルの内容は、以下で確認できます。</p><ul><li><a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/platformLibs/src/platform/ios/posix.def" target="_blank" rel="noreferrer">iOS</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/platformLibs/src/platform/osx/posix.def" target="_blank" rel="noreferrer">macOS</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/platformLibs/src/platform/tvos/posix.def" target="_blank" rel="noreferrer">tvOS</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/platformLibs/src/platform/watchos/posix.def" target="_blank" rel="noreferrer">watchOS</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/platformLibs/src/platform/linux/posix.def" target="_blank" rel="noreferrer">Linux</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/platformLibs/src/platform/mingw/posix.def" target="_blank" rel="noreferrer">Windows (MinGW)</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/platformLibs/src/platform/android/posix.def" target="_blank" rel="noreferrer">Android</a></li></ul><p>POSIXプラットフォームライブラリは、<a href="/ja/kotlin/wasm-overview">WebAssembly</a>ターゲットでは利用できません。</p><h2 id="主要なネイティブライブラリ" tabindex="-1">主要なネイティブライブラリ <a class="header-anchor" href="#主要なネイティブライブラリ" aria-label="Permalink to &quot;主要なネイティブライブラリ&quot;">​</a></h2><p>Kotlin/Nativeは、OpenGL、zlib、Foundationなど、様々なプラットフォームで一般的に使用される主要なネイティブライブラリのバインディングを提供します。</p><p>Appleプラットフォームでは、Objective-C APIとの<a href="/ja/kotlin/native-objc-interop">相互運用性</a>を可能にするために、<code>objc</code>ライブラリが含まれています。</p><p>Kotlin/Nativeターゲットで利用可能なネイティブライブラリは、セットアップに応じて、コンパイラディストリビューション内で探索できます。</p>',16)),t("ul",null,[e[7]||(e[7]=t("li",null,[t("p",null,[t("a",{href:"/ja/kotlin/native-get-started#download-and-install-the-compiler"},"スタンドアロンのKotlin/Nativeコンパイラをインストール"),l("した場合：")]),t("ol",null,[t("li",null,[l("コンパイラディストリビューションを含む解凍されたアーカイブ（例: "),t("code",null,"kotlin-native-prebuilt-macos-aarch64-2.1.0"),l("）に移動します。")]),t("li",null,[t("code",null,"klib/platform"),l("ディレクトリに移動します。")]),t("li",null,"対応するターゲットのフォルダを選択します。")])],-1)),t("li",null,[e[6]||(e[6]=t("p",null,"IDEでKotlinプラグインを使用している場合（IntelliJ IDEAおよびAndroid Studioにバンドルされています）：",-1)),t("ol",null,[t("li",null,[e[2]||(e[2]=t("p",null,[l("コマンドラインツールで、以下のコマンドを実行して"),t("code",null,".konan"),l("フォルダに移動します。")],-1)),a(r,null,{default:i(()=>[a(o,{title:"macOSおよびLinux"},{default:i(()=>e[0]||(e[0]=[t("div",{class:"language-none vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"none"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",null,"~/.konan/")])])])],-1)])),_:1}),a(o,{title:"Windows"},{default:i(()=>e[1]||(e[1]=[t("div",{class:"language-none vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"none"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",null,"%\\USERPROFILE%\\.konan")])])])],-1)])),_:1})]),_:1})]),e[3]||(e[3]=t("li",null,[t("p",null,[l("Kotlin/Nativeコンパイラディストリビューション（例: "),t("code",null,"kotlin-native-prebuilt-macos-aarch64-2.1.0"),l("）を開きます。")])],-1)),e[4]||(e[4]=t("li",null,[t("p",null,[t("code",null,"klib/platform"),l("ディレクトリに移動します。")])],-1)),e[5]||(e[5]=t("li",null,[t("p",null,"対応するターゲットのフォルダを選択します。")],-1))])])]),e[9]||(e[9]=s('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>各サポートされているプラットフォームライブラリの定義ファイルを探索したい場合は、コンパイラディストリビューションフォルダ内で<code>konan/platformDef</code>ディレクトリに移動し、必要なターゲットを選択してください。</p></div><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p><a href="/ja/kotlin/native-objc-interop">Swift/Objective-Cとの相互運用性についてさらに学ぶ</a></p>',3))])}const x=p(u,[["render",m]]);export{_ as __pageData,x as default};
