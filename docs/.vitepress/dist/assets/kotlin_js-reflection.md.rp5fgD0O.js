import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Kotlin/JS 反射","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/js-reflection.md","filePath":"kotlin/js-reflection.md","lastUpdated":1754307826000}'),e={name:"kotlin/js-reflection.md"};function n(h,s,k,p,r,o){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="kotlin-js-反射" tabindex="-1">Kotlin/JS 反射 <a class="header-anchor" href="#kotlin-js-反射" aria-label="Permalink to &quot;Kotlin/JS 反射&quot;">​</a></h1><p>Kotlin/JS 为 Kotlin <a href="/kotlin/reflection">反射 API</a> 提供有限支持。API 中唯一支持的部分是：</p><ul><li><a href="/kotlin/reflection#class-references">类引用</a> (<code>::class</code>)</li><li><a href="#ktype-and-typeof"><code>KType</code> 和 <code>typeof()</code></a></li><li><a href="#kclass-and-createinstance"><code>KClass</code> 和 <code>createInstance()</code></a></li></ul><h2 id="类引用" tabindex="-1">类引用 <a class="header-anchor" href="#类引用" aria-label="Permalink to &quot;类引用&quot;">​</a></h2><p><code>::class</code> 语法返回实例的类引用，或给定类型对应的类。 在 Kotlin/JS 中，<code>::class</code> 表达式的值是一个精简的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/" target="_blank" rel="noreferrer"><code>KClass</code></a> 实现，仅支持：</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/simple-name.html" target="_blank" rel="noreferrer"><code>simpleName</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/is-instance.html" target="_blank" rel="noreferrer"><code>isInstance()</code></a> 成员。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/cast.html" target="_blank" rel="noreferrer"><code>cast()</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/safe-cast.html" target="_blank" rel="noreferrer"><code>safeCast()</code></a> 扩展函数。</li></ul><p>此外，你可以使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/js.html" target="_blank" rel="noreferrer"><code>KClass.js</code></a> 访问与该类对应的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-class/index.html" target="_blank" rel="noreferrer"><code>JsClass</code></a> 实例。 <code>JsClass</code> 实例本身是对构造函数的引用。 这可用于与期望接收构造函数引用的 JS 函数进行互操作。</p><h2 id="ktype-和-typeof" tabindex="-1">KType 和 typeof() <a class="header-anchor" href="#ktype-和-typeof" aria-label="Permalink to &quot;KType 和 typeof()&quot;">​</a></h2><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/type-of.html" target="_blank" rel="noreferrer"><code>typeof()</code></a> 函数构造一个 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-type/" target="_blank" rel="noreferrer"><code>KType</code></a> 实例，用于给定类型。 <code>KType</code> API 在 Kotlin/JS 中完全支持，除了 Java 特有的部分。</p><h2 id="kclass-和-createinstance" tabindex="-1">KClass 和 createInstance() <a class="header-anchor" href="#kclass-和-createinstance" aria-label="Permalink to &quot;KClass 和 createInstance()&quot;">​</a></h2><p>来自 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/" target="_blank" rel="noreferrer"><code>KClass</code></a> 接口的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/create-instance.html" target="_blank" rel="noreferrer"><code>createInstance()</code></a> 函数创建指定类的新实例，这对于获取 Kotlin 类的运行时引用很有用。</p><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>以下是 Kotlin/JS 中反射用法的示例。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shape</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accessReifiedTypeArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.simpleName) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 &quot;Rectangle&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Shape::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.simpleName) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 &quot;Shape&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Shape::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.js.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 &quot;Shape&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Shape::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 &quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Rectangle::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 &quot;false&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rShape </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Shape::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 Rectangle &quot;r&quot; 转换为 Shape</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    accessReifiedTypeArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过 typeOf() 访问类型。打印 &quot;Rectangle&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,14)]))}const g=i(e,[["render",n]]);export{c as __pageData,g as default};
