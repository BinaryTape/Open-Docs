import{_ as e}from"./chunks/icon-1-done.ZX9lW-aj.js";import{_ as r}from"./chunks/icon-2-done.DCMUaFG5.js";import{_ as o}from"./chunks/icon-3.BwKvTetO.js";import{_ as d}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as E,C as k,c as g,o as c,j as s,G as t,ag as n,a,w as l}from"./chunks/framework.Bksy39di.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/mapping-function-pointers-from-c.md","filePath":"ko/kotlin/mapping-function-pointers-from-c.md","lastUpdated":1754307826000}'),y={name:"ko/kotlin/mapping-function-pointers-from-c.md"};function F(u,i,C,m,f,A){const h=k("tldr"),p=k("shortcut");return c(),g("div",null,[i[10]||(i[10]=s("h1",{id:"c의-함수-포인터-매핑-–-튜토리얼",tabindex:"-1"},[a("C의 함수 포인터 매핑 – 튜토리얼 "),s("a",{class:"header-anchor",href:"#c의-함수-포인터-매핑-–-튜토리얼","aria-label":'Permalink to "C의 함수 포인터 매핑 – 튜토리얼"'},"​")],-1)),t(h,null,{default:l(()=>i[0]||(i[0]=[s("p",null,[a("이 문서는 "),s("strong",null,"Kotlin과 C 매핑"),a(" 튜토리얼 시리즈의 세 번째 부분입니다. 진행하기 전에 이전 단계를 완료했는지 확인하세요.")],-1),s("p",null,[s("img",{src:e,width:"20",alt:"First step"}),a(),s("a",{href:"/ko/kotlin/mapping-primitive-data-types-from-c"},"C의 기본 데이터 타입 매핑"),s("br"),s("img",{src:r,width:"20",alt:"Second step"}),a(),s("a",{href:"/ko/kotlin/mapping-struct-union-types-from-c"},"C의 구조체 및 유니온 타입 매핑"),s("br"),s("img",{src:o,width:"20",alt:"Third step"}),a(),s("strong",null,"함수 포인터 매핑"),s("br"),s("img",{src:d,width:"20",alt:"Fourth step"}),a(),s("a",{href:"/ko/kotlin/mapping-strings-from-c"},"C의 문자열 매핑"),s("br")],-1)])),_:1}),i[11]||(i[11]=n(`<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>C 라이브러리 임포트는 <a href="/ko/kotlin/native-c-interop-stability">베타(Beta)</a> 버전입니다. cinterop 도구로 C 라이브러리에서 생성된 모든 Kotlin 선언에는 <code>@ExperimentalForeignApi</code> 어노테이션이 있어야 합니다. Kotlin/Native와 함께 제공되는 네이티브 플랫폼 라이브러리(예: Foundation, UIKit, POSIX)는 일부 API에 대해서만 옵트인(opt-in)이 필요합니다.</p></div><p>Kotlin에서 C 함수 포인터가 어떻게 보이는지 살펴보고, Kotlin/Native 및 <a href="/ko/kotlin/gradle-configure-project#targeting-multiple-platforms">멀티플랫폼</a> Gradle 빌드의 고급 C 상호 운용성(interop) 관련 사용 사례를 살펴보겠습니다.</p><p>이 튜토리얼에서는 다음을 수행합니다:</p><ul><li><a href="#pass-kotlin-function-as-a-c-function-pointer">Kotlin 함수를 C 함수 포인터로 전달하는 방법 배우기</a></li><li><a href="#use-the-c-function-pointer-from-kotlin">Kotlin에서 C 함수 포인터 사용하기</a></li></ul><h2 id="c의-함수-포인터-타입-매핑" tabindex="-1">C의 함수 포인터 타입 매핑 <a class="header-anchor" href="#c의-함수-포인터-타입-매핑" aria-label="Permalink to &quot;C의 함수 포인터 타입 매핑&quot;">​</a></h2><p>Kotlin과 C 간의 매핑을 이해하기 위해, 함수 포인터를 매개변수로 받는 함수와 함수 포인터를 반환하는 두 가지 함수를 선언해 보겠습니다.</p><p>시리즈의 <a href="/ko/kotlin/mapping-primitive-data-types-from-c">첫 번째 부분</a>에서 이미 필요한 파일이 포함된 C 라이브러리를 생성했습니다. 이 단계에서는 <code>---</code> 구분자 뒤의 <code>interop.def</code> 파일에서 선언을 업데이트하세요:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyFun)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyFun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyFun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">supply_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFun;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>interop.def</code> 파일은 애플리케이션을 IDE에서 컴파일, 실행 또는 열기 위해 필요한 모든 것을 제공합니다.</p><h2 id="c-라이브러리에-대해-생성된-kotlin-api-검사" tabindex="-1">C 라이브러리에 대해 생성된 Kotlin API 검사 <a class="header-anchor" href="#c-라이브러리에-대해-생성된-kotlin-api-검사" aria-label="Permalink to &quot;C 라이브러리에 대해 생성된 Kotlin API 검사&quot;">​</a></h2><p>C 함수 포인터가 Kotlin/Native에 어떻게 매핑되는지 확인하고 프로젝트를 업데이트해 보겠습니다:</p>`,11)),s("ol",null,[i[9]||(i[9]=n(`<li><p><code>src/nativeMain/kotlin</code>에서 <a href="/ko/kotlin/mapping-struct-union-types-from-c">이전 튜토리얼</a>의 <code>hello.kt</code> 파일을 다음 내용으로 업데이트하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.ExperimentalForeignApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    accept_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* fix me*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> useMe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> supply_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,1)),s("li",null,[s("p",null,[i[3]||(i[3]=a("IntelliJ IDEA의 ")),i[4]||(i[4]=s("a",{href:"https://www.jetbrains.com/help/rider/Navigation_and_Search__Go_to_Declaration.html",target:"_blank",rel:"noreferrer"},"선언으로 이동(Go to declaration)",-1)),i[5]||(i[5]=a(" 명령 (")),t(p,null,{default:l(()=>i[1]||(i[1]=[a("Cmd + B")])),_:1}),i[6]||(i[6]=a("/")),t(p,null,{default:l(()=>i[2]||(i[2]=[a("Ctrl + B")])),_:1}),i[7]||(i[7]=a(")을 사용하여 다음 C 함수에 대해 생성된 API로 이동하세요:"))]),i[8]||(i[8]=n(`<div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Int): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.cinterop.CPointer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlinx.cinterop.CFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlin.Int) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlin.Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* from: interop.MyFun? */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> supply_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.cinterop.CPointer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlinx.cinterop.CFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlin.Int) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlin.Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* from: interop.MyFun? */</span></span></code></pre></div>`,1))])]),i[12]||(i[12]=n(`<p>보시다시피, C 함수 포인터는 Kotlin에서 <code>CPointer&lt;CFunction&lt;...&gt;&gt;</code>를 사용하여 표현됩니다. <code>accept_fun()</code> 함수는 선택적 함수 포인터를 매개변수로 받고, <code>supply_fun()</code>은 함수 포인터를 반환합니다.</p><p><code>CFunction&lt;(Int) -&gt; Int&gt;</code>는 함수 시그니처를 나타내며, <code>CPointer&lt;CFunction&lt;...&gt;&gt;?</code>는 널러블(nullable) 함수 포인터를 나타냅니다. 모든 <code>CPointer&lt;CFunction&lt;...&gt;&gt;</code> 타입에는 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/invoke.html" target="_blank" rel="noreferrer"><code>.invoke()</code></a> 연산자 확장 함수가 제공되어, 함수 포인터를 일반 Kotlin 함수처럼 호출할 수 있습니다.</p><h2 id="kotlin-함수를-c-함수-포인터로-전달하기" tabindex="-1">Kotlin 함수를 C 함수 포인터로 전달하기 <a class="header-anchor" href="#kotlin-함수를-c-함수-포인터로-전달하기" aria-label="Permalink to &quot;Kotlin 함수를 C 함수 포인터로 전달하기&quot;">​</a></h2><p>이제 Kotlin 코드에서 C 함수를 사용해 볼 차례입니다. <code>accept_fun()</code> 함수를 호출하고 C 함수 포인터를 Kotlin 람다에 전달하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.staticCFunction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.ExperimentalForeignApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    accept_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">staticCFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 호출은 Kotlin/Native의 <code>staticCFunction {}</code> 헬퍼 함수를 사용하여 Kotlin 람다 함수를 C 함수 포인터로 래핑합니다. 이 함수는 바인딩되지 않고 캡처하지 않는 람다 함수만 허용합니다. 예를 들어, 함수에서 로컬 변수를 캡처할 수 없고 전역적으로 보이는 선언만 캡처할 수 있습니다.</p><p>함수가 예외를 던지지 않는지 확인하세요. <code>staticCFunction {}</code>에서 예외를 던지면 비결정적 부작용이 발생합니다.</p><h2 id="kotlin에서-c-함수-포인터-사용하기" tabindex="-1">Kotlin에서 C 함수 포인터 사용하기 <a class="header-anchor" href="#kotlin에서-c-함수-포인터-사용하기" aria-label="Permalink to &quot;Kotlin에서 C 함수 포인터 사용하기&quot;">​</a></h2><p>다음 단계는 <code>supply_fun()</code> 호출에서 반환된 C 함수 포인터를 호출하는 것입니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.ExperimentalForeignApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.invoke</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFun2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functionFromC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> supply_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No function is returned&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    functionFromC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin은 함수 포인터 반환 타입을 널러블 <code>CPointer&lt;CFunction&lt;&gt;</code> 객체로 변환합니다. 먼저 명시적으로 <code>null</code>을 확인해야 하며, 그래서 위 코드에서 <a href="/ko/kotlin/null-safety">엘비스 연산자(Elvis operator)</a>가 사용되었습니다. cinterop 도구를 사용하면 C 함수 포인터를 일반 Kotlin 함수 호출처럼 호출할 수 있습니다: <code>functionFromC(42)</code>.</p><h2 id="kotlin-코드-업데이트" tabindex="-1">Kotlin 코드 업데이트 <a class="header-anchor" href="#kotlin-코드-업데이트" aria-label="Permalink to &quot;Kotlin 코드 업데이트&quot;">​</a></h2><p>이제 모든 정의를 살펴보았으니, 프로젝트에서 사용해 보세요. <code>hello.kt</code> 파일의 코드는 다음과 같을 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.ExperimentalForeignApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.invoke</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.staticCFunction</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cFunctionPointer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> staticCFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    accept_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cFunctionPointer)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> funFromC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> supply_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No function is returned&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    funFromC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>모든 것이 예상대로 작동하는지 확인하려면, <a href="/ko/kotlin/native-get-started#build-and-run-the-application">IDE에서</a> <code>runDebugExecutableNative</code> Gradle 태스크를 실행하거나 다음 명령을 사용하여 코드를 실행하세요:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runDebugExecutableNative</span></span></code></pre></div><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>시리즈의 다음 부분에서는 Kotlin과 C 사이에 문자열이 어떻게 매핑되는지 알아봅니다:</p><p><strong><a href="/ko/kotlin/mapping-strings-from-c">다음 부분으로 진행하기</a></strong></p><h3 id="더-보기" tabindex="-1">더 보기 <a class="header-anchor" href="#더-보기" aria-label="Permalink to &quot;더 보기&quot;">​</a></h3><p><a href="/ko/kotlin/native-c-interop">C와의 상호 운용성(Interoperability with C)</a> 문서에서 더 고급 시나리오에 대해 자세히 알아보세요.</p>`,21))])}const I=E(y,[["render",F]]);export{x as __pageData,I as default};
