import{_ as o,C as l,c as g,o as u,G as t,ag as k,j as e,w as a,a as i}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/htmx-integration.md","filePath":"ktor/htmx-integration.md","lastUpdated":1755457140000}'),y={name:"ktor/htmx-integration.md"};function F(H,s,x,m,f,T){const h=l("TopicTitle"),r=l("show-structure"),d=l("primary-label"),E=l("tldr"),n=l("def"),p=l("deflist");return u(),g("div",null,[t(h,{labelRef:"experimental",title:"HTMX 集成"}),t(r,{for:"chapter",depth:"2"}),t(d,{ref:"experimental"},null,512),t(E,null,{default:a(()=>s[0]||(s[0]=[e("p",null,[e("b",null,"必需的依赖项"),i(": "),e("code",null,"io.ktor:ktor-htmx"),i(", "),e("code",null,"io.ktor:ktor-htmx-html"),i(", "),e("code",null,"io.ktor:ktor-server-htmx")],-1),e("p",null,[e("b",null,"代码示例"),i(": "),e("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/htmx-integration"}," htmx-integration ")],-1)])),_:1}),s[29]||(s[29]=k('<p><a href="https://htmx.org/" target="_blank" rel="noreferrer">HTMX</a> 是一个轻量级的 JavaScript 库，它使用 HTML 属性实现动态客户端行为。它支持 AJAX、CSS 过渡（CSS transitions）、WebSockets 和服务器发送事件（Server-Sent Events）等特性，而无需编写 JavaScript。</p><p>Ktor 通过一组共享模块为 HTMX 提供了实验性的、一流的支持，这些模块简化了在服务器和客户端上下文中的集成。这些模块提供了用于处理 HTMX 标头、使用 Kotlin DSL 声明 HTML 属性以及在服务器端处理 HTMX 特有路由逻辑的工具。</p><h2 id="模块概览" tabindex="-1">模块概览 <a class="header-anchor" href="#模块概览" aria-label="Permalink to &quot;模块概览&quot;">​</a></h2><p>Ktor 对 HTMX 的支持通过以下三个实验性的模块提供：</p><table tabindex="0"><thead><tr><th>模块</th><th>描述</th></tr></thead><tbody><tr><td><code>ktor-htmx</code></td><td>核心定义和标头常量</td></tr><tr><td><code>ktor-htmx-html</code></td><td>与 Kotlin HTML DSL 的集成</td></tr><tr><td><code>ktor-server-htmx</code></td><td>对 HTMX 特有请求的路由支持</td></tr></tbody></table><p>所有 API 都标记为 <code>@ExperimentalKtorApi</code>，并通过 <code>@OptIn(ExperimentalKtorApi::class)</code> 启用。</p><h2 id="htmx-标头" tabindex="-1">HTMX 标头 <a class="header-anchor" href="#htmx-标头" aria-label="Permalink to &quot;HTMX 标头&quot;">​</a></h2><p>你可以使用核心 <code>ktor-htmx</code> 模块中预定义的常量，以类型安全的方式访问或设置 HTMX 标头。这些常量有助于你在检测 HTMX 行为（例如触发器、历史恢复或内容交换）时避免使用魔术字符串。</p><h3 id="请求标头" tabindex="-1">请求标头 <a class="header-anchor" href="#请求标头" aria-label="Permalink to &quot;请求标头&quot;">​</a></h3><p>在你的应用程序中，可以使用 <code>HxRequestHeaders</code> 对象来读取或匹配 HTMX 请求标头：</p>',10)),t(p,{type:"wide"},{default:a(()=>[t(n,{title:"HxRequestHeaders.Request"},{default:a(()=>s[1]||(s[1]=[i("对于 HTMX 请求始终为 "),e("code",null,"true",-1)])),_:1}),t(n,{title:"HxRequestHeaders.Target"},{default:a(()=>s[2]||(s[2]=[i("目标元素的 ID")])),_:1}),t(n,{title:"HxRequestHeaders.Trigger"},{default:a(()=>s[3]||(s[3]=[i("触发元素的 ID")])),_:1}),t(n,{title:"HxRequestHeaders.TriggerName"},{default:a(()=>s[4]||(s[4]=[i("触发元素的名称")])),_:1}),t(n,{title:"HxRequestHeaders.Boosted"},{default:a(()=>s[5]||(s[5]=[i("指示请求是否通过 hx-boost")])),_:1}),t(n,{title:"HxRequestHeaders.CurrentUrl"},{default:a(()=>s[6]||(s[6]=[i("当前浏览器 URL")])),_:1}),t(n,{title:"HxRequestHeaders.HistoryRestoreRequest"},{default:a(()=>s[7]||(s[7]=[i("用于历史恢复")])),_:1}),t(n,{title:"HxRequestHeaders.Prompt"},{default:a(()=>s[8]||(s[8]=[i("用户对 hx-prompt 的响应")])),_:1})]),_:1}),s[30]||(s[30]=e("h3",{id:"响应标头",tabindex:"-1"},[i("响应标头 "),e("a",{class:"header-anchor",href:"#响应标头","aria-label":'Permalink to "响应标头"'},"​")],-1)),s[31]||(s[31]=e("p",null,[i("你可以使用 "),e("code",null,"HxResponseHeaders"),i(" 对象来访问 HTMX 响应标头的常量：")],-1)),t(p,{type:"wide"},{default:a(()=>[t(n,{title:"HxResponseHeaders.Location"},{default:a(()=>s[9]||(s[9]=[i("无需页面重新加载的客户端重定向")])),_:1}),t(n,{title:"HxResponseHeaders.PushUrl"},{default:a(()=>s[10]||(s[10]=[i("将 URL 推入历史栈")])),_:1}),t(n,{title:"HxResponseHeaders.Redirect"},{default:a(()=>s[11]||(s[11]=[i("客户端重定向")])),_:1}),t(n,{title:"HxResponseHeaders.Refresh"},{default:a(()=>s[12]||(s[12]=[i("强制完全刷新页面")])),_:1}),t(n,{title:"HxResponseHeaders.ReplaceUrl"},{default:a(()=>s[13]||(s[13]=[i("替换当前 URL")])),_:1}),t(n,{title:"HxResponseHeaders.Reswap"},{default:a(()=>s[14]||(s[14]=[i("控制响应如何交换")])),_:1}),t(n,{title:"HxResponseHeaders.Retarget"},{default:a(()=>s[15]||(s[15]=[i("更新内容更新的目标")])),_:1}),t(n,{title:"HxResponseHeaders.Reselect"},{default:a(()=>s[16]||(s[16]=[i("选择响应的哪一部分进行交换")])),_:1}),t(n,{title:"HxResponseHeaders.Trigger"},{default:a(()=>s[17]||(s[17]=[i("触发客户端事件")])),_:1}),t(n,{title:"HxResponseHeaders.TriggerAfterSettle"},{default:a(()=>s[18]||(s[18]=[i("在 settle 后触发事件")])),_:1}),t(n,{title:"HxResponseHeaders.TriggerAfterSwap"},{default:a(()=>s[19]||(s[19]=[i("在 swap 后触发事件")])),_:1})]),_:1}),s[32]||(s[32]=e("h2",{id:"交换模式",tabindex:"-1"},[i("交换模式 "),e("a",{class:"header-anchor",href:"#交换模式","aria-label":'Permalink to "交换模式"'},"​")],-1)),s[33]||(s[33]=e("p",null,[i("你可以使用核心 "),e("code",null,"ktor-htmx"),i(" 模块中的 "),e("code",null,"HxSwap"),i(" 对象来访问不同 HTMX 交换模式的常量。")],-1)),t(p,{type:"medium"},{default:a(()=>[t(n,{title:"HxSwap.innerHtml"},{default:a(()=>s[20]||(s[20]=[i("替换内部 HTML (默认)")])),_:1}),t(n,{title:"HxSwap.outerHtml "},{default:a(()=>s[21]||(s[21]=[i("替换整个元素")])),_:1}),t(n,{title:"HxSwap.textContent"},{default:a(()=>s[22]||(s[22]=[i("仅替换文本内容")])),_:1}),t(n,{title:"HxSwap.beforeBegin"},{default:a(()=>s[23]||(s[23]=[i("在目标元素之前插入")])),_:1}),t(n,{title:"HxSwap.afterBegin"},{default:a(()=>s[24]||(s[24]=[i("作为第一个子元素插入")])),_:1}),t(n,{title:"HxSwap.beforeEnd"},{default:a(()=>s[25]||(s[25]=[i("作为最后一个子元素插入")])),_:1}),t(n,{title:"HxSwap.afterEnd"},{default:a(()=>s[26]||(s[26]=[i("在目标元素之后插入")])),_:1}),t(n,{title:"HxSwap.delete"},{default:a(()=>s[27]||(s[27]=[i("删除目标元素")])),_:1}),t(n,{title:"HxSwap.none"},{default:a(()=>s[28]||(s[28]=[i("不追加内容")])),_:1})]),_:1}),s[34]||(s[34]=k(`<h2 id="html-dsl-扩展" tabindex="-1">HTML DSL 扩展 <a class="header-anchor" href="#html-dsl-扩展" aria-label="Permalink to &quot;HTML DSL 扩展&quot;">​</a></h2><p><code>ktor-htmx-html</code> 模块为 Kotlin 的 HTML DSL 增加了扩展函数，允许你直接向 HTML 元素添加 HTMX 属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKtorApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            attributes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                get</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/data&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;#result&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                swap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HxSwap.outerHtml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                trigger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;click&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Load Data&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上述示例生成带 HTMX 属性的 HTML：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hx-get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/data&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hx-target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#result-div&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hx-swap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;outerHTML&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hx-trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Load Data&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="服务器端路由" tabindex="-1">服务器端路由 <a class="header-anchor" href="#服务器端路由" aria-label="Permalink to &quot;服务器端路由&quot;">​</a></h2><p><code>ktor-server-htmx</code> 模块通过 <code>hx</code> DSL 代码块提供 HTMX 感知路由：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKtorApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 常规路由（HTMX 和非 HTMX 请求都匹配）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Regular response&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 仅匹配 HTMX 请求（存在 HX-Request 标头）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HTMX response&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 匹配具有特定目标（target）的 HTMX 请求</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        hx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#result-div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Response for #result-div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 匹配具有特定触发器（trigger）的 HTMX 请求</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#load-button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Response for #load-button clicks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这些特性允许你的应用程序根据客户端发送的 HTMX 标头做出不同的响应。</p>`,9))])}const q=o(y,[["render",F]]);export{b as __pageData,q as default};
