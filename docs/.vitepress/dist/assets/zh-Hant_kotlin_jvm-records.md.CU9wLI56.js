import{_ as e,C as t,c as l,o as n,ag as i,G as o}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"在 Kotlin 中使用 Java 記錄","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/jvm-records.md","filePath":"zh-Hant/kotlin/jvm-records.md","lastUpdated":1754307826000}'),h={name:"zh-Hant/kotlin/jvm-records.md"};function p(r,a,d,k,c,g){const s=t("TopicTitle");return n(),l("div",null,[a[0]||(a[0]=i(`<h1 id="在-kotlin-中使用-java-記錄" tabindex="-1">在 Kotlin 中使用 Java 記錄 <a class="header-anchor" href="#在-kotlin-中使用-java-記錄" aria-label="Permalink to &quot;在 Kotlin 中使用 Java 記錄&quot;">​</a></h1><p><em>記錄</em> 是 Java 中用於儲存不可變資料的<a href="https://openjdk.java.net/jeps/395" target="_blank" rel="noreferrer">類別</a>。記錄攜帶一組固定值 – 即 <em>記錄元件</em>。 它們在 Java 中擁有簡潔的語法，並省去您撰寫樣板程式碼的麻煩：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> record Person (String name, int age) {}</span></span></code></pre></div><p>編譯器會自動生成一個繼承自 <a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Record.html" target="_blank" rel="noreferrer"><code>java.lang.Record</code></a> 的 final 類別，並包含以下成員：</p><ul><li>一個用於每個記錄元件的私有 final 欄位</li><li>一個包含所有欄位參數的公有建構函式</li><li>一組用於實作結構相等性的方法：<code>equals()</code>、<code>hashCode()</code>、<code>toString()</code></li><li>一個用於讀取每個記錄元件的公有方法</li></ul><p>記錄與 Kotlin 的<a href="/zh-Hant/kotlin/data-classes">資料類別</a>非常相似。</p><h2 id="在-kotlin-程式碼中使用-java-記錄" tabindex="-1">在 Kotlin 程式碼中使用 Java 記錄 <a class="header-anchor" href="#在-kotlin-程式碼中使用-java-記錄" aria-label="Permalink to &quot;在 Kotlin 程式碼中使用 Java 記錄&quot;">​</a></h2><p>您可以像在 Kotlin 中使用具有屬性的類別一樣，使用在 Java 中宣告元件的記錄類別。 若要存取記錄元件，只需使用其名稱，就像您處理 <a href="/zh-Hant/kotlin/properties">Kotlin 屬性</a>一樣：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newPerson </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newPerson.name</span></span></code></pre></div><h2 id="在-kotlin-中宣告記錄" tabindex="-1">在 Kotlin 中宣告記錄 <a class="header-anchor" href="#在-kotlin-中宣告記錄" aria-label="Permalink to &quot;在 Kotlin 中宣告記錄&quot;">​</a></h2><p>Kotlin 僅支援資料類別的記錄宣告，且該資料類別必須符合<a href="#requirements">要求</a>。</p><p>若要在 Kotlin 中宣告記錄類別，請使用 <code>@JvmRecord</code> 註解：</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>將 <code>@JvmRecord</code> 應用於現有類別不是一個二進位相容變更。它會改變類別屬性存取器的命名慣例。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRecord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>此 JVM 專用註解啟用產生：</p><ul><li>類別檔案中對應於類別屬性的記錄元件</li><li>根據 Java 記錄命名慣例命名的屬性存取器方法</li></ul><p>資料類別提供了 <code>equals()</code>、<code>hashCode()</code> 和 <code>toString()</code> 方法實作。</p><h3 id="要求" tabindex="-1">要求 <a class="header-anchor" href="#要求" aria-label="Permalink to &quot;要求&quot;">​</a></h3><p>若要使用 <code>@JvmRecord</code> 註解宣告資料類別，它必須符合以下要求：</p><ul><li>該類別必須位於目標為 JVM 16 位元組碼（如果啟用 <code>-Xjvm-enable-preview</code> 編譯器選項，則為 15）的模組中。</li><li>該類別不能顯式繼承任何其他類別（包括 <code>Any</code>），因為所有 JVM 記錄都隱式繼承 <code>java.lang.Record</code>。然而，該類別可以實作介面。</li><li>該類別不能宣告任何帶有支援欄位的屬性 – 除非它們是從相應的主要建構函式參數初始化的。</li><li>該類別不能宣告任何帶有支援欄位的可變屬性。</li><li>該類別不能是局部（local）的。</li><li>該類別的主要建構函式必須與類別本身具有相同的可見性。</li></ul><h3 id="啟用-jvm-記錄" tabindex="-1">啟用 JVM 記錄 <a class="header-anchor" href="#啟用-jvm-記錄" aria-label="Permalink to &quot;啟用 JVM 記錄&quot;">​</a></h3><p>JVM 記錄需要生成的 JVM 位元組碼目標版本為 <code>16</code> 或更高。</p><p>若要顯式指定它，請在 <a href="/zh-Hant/kotlin/gradle-compiler-options#attributes-specific-to-jvm">Gradle</a> 或 <a href="/zh-Hant/kotlin/maven#attributes-specific-to-jvm">Maven</a> 中使用 <code>jvmTarget</code> 編譯器選項。</p>`,23)),o(s,{id:"在-kotlin-中註解記錄元件",level:"2",title:"在 Kotlin 中註解記錄元件",labelRef:"experimental-general"}),a[1]||(a[1]=i(`<p>在 Java 中，記錄元件上的<a href="/zh-Hant/kotlin/annotations">註解</a>會自動傳播到支援欄位、getter、setter 和建構函式參數。 您可以透過使用 <a href="/zh-Hant/kotlin/annotations#all-meta-target"><code>all</code></a> 使用點目標在 Kotlin 中複製此行為。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>若要使用 <code>all</code> 使用點目標，您必須選擇加入。您可以透過使用 <code>-Xannotation-target-all</code> 編譯器選項或將以下內容新增至您的 <code>build.gradle.kts</code> 檔案來實現： <code>kotlin kotlin { compilerOptions { freeCompilerArgs.add(&quot;-Xannotation-target-all&quot;) } } </code></p></div><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRecord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Positive</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> val</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>當您將 <code>@JvmRecord</code> 與 <code>@all:</code> 一起使用時，Kotlin：</p><ul><li>將註解傳播到屬性、支援欄位、建構函式參數、getter 和 setter。</li><li>如果註解支援 Java 的 <code>RECORD_COMPONENT</code>，也會將註解應用於記錄元件。</li></ul><h2 id="使註解適用於記錄元件" tabindex="-1">使註解適用於記錄元件 <a class="header-anchor" href="#使註解適用於記錄元件" aria-label="Permalink to &quot;使註解適用於記錄元件&quot;">​</a></h2><p>若要使<a href="/zh-Hant/kotlin/annotations">註解</a>同時適用於 Kotlin 屬性<strong>和</strong> Java 記錄元件，請將以下中繼註解新增至您的註解宣告：</p><ul><li>針對 Kotlin：<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-target/index.html" target="_blank" rel="noreferrer"><code>@Target</code></a></li><li>針對 Java 記錄元件：<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Target.html" target="_blank" rel="noreferrer"><code>@java.lang.annotation.Target</code></a></li></ul><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.CLASS, AnnotationTarget.PROPERTY)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@java.lang.annotation.Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ElementType.CLASS, ElementType.RECORD_COMPONENT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exampleClass</span></span></code></pre></div><p>您現在可以將 <code>@ExampleClass</code> 應用於 Kotlin 類別和屬性，以及 Java 類別和記錄元件。</p><h2 id="進一步討論" tabindex="-1">進一步討論 <a class="header-anchor" href="#進一步討論" aria-label="Permalink to &quot;進一步討論&quot;">​</a></h2><p>請參閱此<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/jvm-records.md" target="_blank" rel="noreferrer">JVM 記錄的語言提案</a>，以獲取更多技術細節和討論。</p>`,14))])}const m=e(h,[["render",p]]);export{v as __pageData,m as default};
