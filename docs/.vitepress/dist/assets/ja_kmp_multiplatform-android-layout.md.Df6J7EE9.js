import{_ as d,c as a,o as i,ag as e}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"Androidソースセットレイアウト","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-android-layout.md","filePath":"ja/kmp/multiplatform-android-layout.md","lastUpdated":1755516278000}'),n={name:"ja/kmp/multiplatform-android-layout.md"};function s(o,t,r,l,h,c){return i(),a("div",null,t[0]||(t[0]=[e(`<h1 id="androidソースセットレイアウト" tabindex="-1">Androidソースセットレイアウト <a class="header-anchor" href="#androidソースセットレイアウト" aria-label="Permalink to &quot;Androidソースセットレイアウト&quot;">​</a></h1><p>新しいAndroidソースセットレイアウトはKotlin 1.8.0で導入され、1.9.0でデフォルトになりました。このガイドに従って、非推奨のレイアウトと新しいレイアウトの主な違いを理解し、プロジェクトを移行する方法を確認してください。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>すべての提案を実装する必要はありません。ご自身のプロジェクトに適用できるもののみで構いません。</p></div><h2 id="互換性を確認する" tabindex="-1">互換性を確認する <a class="header-anchor" href="#互換性を確認する" aria-label="Permalink to &quot;互換性を確認する&quot;">​</a></h2><p>新しいレイアウトにはAndroid Gradleプラグイン7.0以降が必要であり、Android Studio 2022.3以降でサポートされています。Android Gradleプラグインのバージョンを確認し、必要であればアップグレードしてください。</p><h2 id="kotlinソースセットの名前を変更する" tabindex="-1">Kotlinソースセットの名前を変更する <a class="header-anchor" href="#kotlinソースセットの名前を変更する" aria-label="Permalink to &quot;Kotlinソースセットの名前を変更する&quot;">​</a></h2><p>該当する場合、プロジェクト内のソースセットの名前を、以下のパターンに従って変更してください。</p><table tabindex="0"><thead><tr><th>以前のソースセットレイアウト</th><th>新しいソースセットレイアウト</th></tr></thead><tbody><tr><td><code>targetName</code> + <code>AndroidSourceSet.name</code></td><td><code>targetName</code> + <code>AndroidVariantType</code></td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code> は <code>{KotlinSourceSet.name}</code> に以下のようにマッピングされます。</p><table tabindex="0"><thead><tr><th></th><th>以前のソースセットレイアウト</th><th>新しいソースセットレイアウト</th></tr></thead><tbody><tr><td>main</td><td>androidMain</td><td>androidMain</td></tr><tr><td>test</td><td>androidTest</td><td>android<b>Unit</b>Test</td></tr><tr><td>androidTest</td><td>android<b>Android</b>Test</td><td>android<b>Instrumented</b>Test</td></tr></tbody></table><h2 id="ソースファイルを移動する" tabindex="-1">ソースファイルを移動する <a class="header-anchor" href="#ソースファイルを移動する" aria-label="Permalink to &quot;ソースファイルを移動する&quot;">​</a></h2><p>該当する場合、ソースファイルを新しいディレクトリに、以下のパターンに従って移動してください。</p><table tabindex="0"><thead><tr><th>以前のソースセットレイアウト</th><th>新しいソースセットレイアウト</th></tr></thead><tbody><tr><td>レイアウトには追加の <code>/kotlin</code> SourceDirectories がありました</td><td><code>src/{KotlinSourceSet.name}/kotlin</code></td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code> は <code>{SourceDirectories included}</code> に以下のようにマッピングされます。</p><table tabindex="0"><thead><tr><th></th><th>以前のソースセットレイアウト</th><th>新しいソースセットレイアウト</th></tr></thead><tbody><tr><td>main</td><td>src/androidMain/kotlin<br>src/main/kotlin<br>src/main/java</td><td>src/androidMain/kotlin<br>src/main/kotlin<br>src/main/java</td></tr><tr><td>test</td><td>src/androidTest/kotlin<br>src/test/kotlin<br>src/test/java</td><td>src/android<b>Unit</b>Test/kotlin<br>src/test/kotlin<br>src/test/java</td></tr><tr><td>androidTest</td><td>src/android<b>Android</b>Test/kotlin<br>src/androidTest/java</td><td>src/android<b>Instrumented</b>Test/kotlin<br>src/androidTest/java, <b>src/androidTest/kotlin</b></td></tr></tbody></table><h2 id="androidmanifest-xml-ファイルを移動する" tabindex="-1">AndroidManifest.xml ファイルを移動する <a class="header-anchor" href="#androidmanifest-xml-ファイルを移動する" aria-label="Permalink to &quot;AndroidManifest.xml ファイルを移動する&quot;">​</a></h2><p><code>AndroidManifest.xml</code> ファイルがプロジェクトにある場合、それを新しいディレクトリに、以下のパターンに従って移動してください。</p><table tabindex="0"><thead><tr><th>以前のソースセットレイアウト</th><th>新しいソースセットレイアウト</th></tr></thead><tbody><tr><td>src/{<b>Android</b>SourceSet.name}/AndroidManifest.xml</td><td>src/{<b>Kotlin</b>SourceSet.name}/AndroidManifest.xml</td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code> は <code>{AndroidManifest.xml location}</code> に以下のようにマッピングされます。</p><table tabindex="0"><thead><tr><th></th><th>以前のソースセットレイアウト</th><th>新しいソースセットレイアウト</th></tr></thead><tbody><tr><td>main</td><td>src/main/AndroidManifest.xml</td><td>src/<b>android</b>Main/AndroidManifest.xml</td></tr><tr><td>debug</td><td>src/debug/AndroidManifest.xml</td><td>src/<b>android</b>Debug/AndroidManifest.xml</td></tr></tbody></table><h2 id="androidと共通テストの関係を確認する" tabindex="-1">Androidと共通テストの関係を確認する <a class="header-anchor" href="#androidと共通テストの関係を確認する" aria-label="Permalink to &quot;Androidと共通テストの関係を確認する&quot;">​</a></h2><p>新しいAndroidソースセットレイアウトは、Androidインスツルメンテッドテスト (新しいレイアウトでは <code>androidInstrumentedTest</code> に名前が変更されました) と共通テストの関係を変更します。</p><p>以前は、<code>androidAndroidTest</code> と <code>commonTest</code> 間の <code>dependsOn</code> 関係がデフォルトでした。これは次のことを意味しました：</p><ul><li><code>commonTest</code> のコードは <code>androidAndroidTest</code> で利用可能でした。</li><li><code>commonTest</code> の <code>expect</code> 宣言には、<code>androidAndroidTest</code> で対応する <code>actual</code> 実装が必要でした。</li><li><code>commonTest</code> で宣言されたテストは、Androidインスツルメンテッドテストとしても実行されていました。</li></ul><p>新しいAndroidソースセットレイアウトでは、<code>dependsOn</code> 関係はデフォルトでは追加されません。以前の動作を希望する場合、<code>build.gradle.kts</code> ファイルで以下の関係を手動で宣言してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> androidInstrumentedTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonTest)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="androidフレーバーの実装を調整する" tabindex="-1">Androidフレーバーの実装を調整する <a class="header-anchor" href="#androidフレーバーの実装を調整する" aria-label="Permalink to &quot;Androidフレーバーの実装を調整する&quot;">​</a></h2><p>以前は、Kotlin Gradleプラグインは、<code>debug</code> および <code>release</code> ビルドタイプや <code>demo</code> や <code>full</code> のようなカスタムフレーバーを含むAndroidソースセットに対応するソースセットを積極的に作成していました。これにより、<code>val androidDebug by getting { ... }</code> のような式を使用することで、ソースセットがアクセス可能でした。</p><p>新しいAndroidソースセットレイアウトは、Androidの <a href="https://developer.android.com/reference/tools/gradle-api/8.0/com/android/build/api/variant/AndroidComponentsExtension#onVariants(com.android.build.api.variant.VariantSelector,kotlin.Function1)" target="_blank" rel="noreferrer"><code>onVariants</code></a> を利用してソースセットを作成します。これにより、そのような式は無効になり、<code>org.gradle.api.UnknownDomainObjectException: KotlinSourceSet with name &#39;androidDebug&#39; not found</code> のようなエラーが発生します。</p><p>これを回避するには、<code>build.gradle.kts</code> ファイルで新しい <code>invokeWhenCreated()</code> API を使用してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invokeWhenCreated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidFreeDebug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,31)]))}const b=d(n,[["render",s]]);export{k as __pageData,b as default};
