import{_ as k}from"./chunks/accessing-sourse-sets.FkWDOZ3N.js";import{_ as r,C as p,c as d,o,ag as h,G as n,j as s,w as t,a}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin 2.0.20의 새로운 기능","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/whatsnew2020.md","filePath":"ko/kotlin/whatsnew2020.md","lastUpdated":1754307826000}'),c={name:"ko/kotlin/whatsnew2020.md"};function E(g,i,y,u,m,b){const e=p("tab"),l=p("tabs");return o(),d("div",null,[i[4]||(i[4]=h(`<h1 id="kotlin-2-0-20의-새로운-기능" tabindex="-1">Kotlin 2.0.20의 새로운 기능 <a class="header-anchor" href="#kotlin-2-0-20의-새로운-기능" aria-label="Permalink to &quot;Kotlin 2.0.20의 새로운 기능&quot;">​</a></h1><p><em><a href="/ko/kotlin/releases#release-details">출시일: 2024년 8월 22일</a></em></p><p>Kotlin 2.0.20 릴리스가 출시되었습니다! 이 버전에는 Kotlin K2 컴파일러가 안정화(Stable)되었다고 발표했던 Kotlin 2.0.0 버전에 대한 성능 개선 및 버그 수정 사항이 포함되어 있습니다. 이번 릴리스의 주요 내용은 다음과 같습니다.</p><ul><li><a href="#data-class-copy-function-to-have-the-same-visibility-as-constructor">데이터 클래스 <code>copy</code> 함수의 가시성을 생성자와 동일하게 변경</a></li><li><a href="#static-accessors-for-source-sets-from-the-default-target-hierarchy">기본 타겟 계층 구조의 소스 세트에 대한 정적 접근자가 이제 멀티플랫폼 프로젝트에서 사용 가능</a></li><li><a href="#concurrent-marking-in-garbage-collector">가비지 컬렉터에서 Kotlin/Native에 대한 동시 마킹이 가능해짐</a></li><li><a href="#new-location-of-experimentalwasmdsl-annotation">Kotlin/Wasm의 <code>@ExperimentalWasmDsl</code> 어노테이션 위치 변경</a></li><li><a href="#gradle">Gradle 버전 8.6–8.8 지원 추가</a></li><li><a href="#option-to-share-jvm-artifacts-between-projects-as-class-files">새로운 옵션을 통해 JVM 아티팩트를 클래스 파일로 Gradle 프로젝트 간에 공유 가능</a></li><li><a href="#compose-compiler">Compose 컴파일러 업데이트</a></li><li><a href="#support-for-uuids-in-the-common-kotlin-standard-library">공용 Kotlin 표준 라이브러리에 UUID 지원 추가</a></li></ul><h2 id="ide-지원" tabindex="-1">IDE 지원 <a class="header-anchor" href="#ide-지원" aria-label="Permalink to &quot;IDE 지원&quot;">​</a></h2><p>2.0.20을 지원하는 Kotlin 플러그인은 최신 IntelliJ IDEA 및 Android Studio에 번들로 제공됩니다. IDE에서 Kotlin 플러그인을 업데이트할 필요가 없습니다. 빌드 스크립트에서 Kotlin 버전을 2.0.20으로 변경하기만 하면 됩니다.</p><p>자세한 내용은 <a href="/ko/kotlin/releases#update-to-a-new-kotlin-version">새 릴리스로 업데이트</a>를 참조하세요.</p><h2 id="언어" tabindex="-1">언어 <a class="header-anchor" href="#언어" aria-label="Permalink to &quot;언어&quot;">​</a></h2><p>Kotlin 2.0.20은 데이터 클래스의 일관성을 개선하고 실험적인 컨텍스트 리시버 기능을 대체하기 위한 변경 사항을 도입하기 시작합니다.</p><h3 id="데이터-클래스-copy-함수의-가시성을-생성자와-동일하게-변경" tabindex="-1">데이터 클래스 <code>copy</code> 함수의 가시성을 생성자와 동일하게 변경 <a class="header-anchor" href="#데이터-클래스-copy-함수의-가시성을-생성자와-동일하게-변경" aria-label="Permalink to &quot;데이터 클래스 \`copy\` 함수의 가시성을 생성자와 동일하게 변경&quot;">​</a></h3><p>현재 <code>private</code> 생성자를 사용하여 데이터 클래스를 만들면 자동으로 생성되는 <code>copy()</code> 함수의 가시성이 동일하지 않습니다. 이는 나중에 코드에서 문제를 일으킬 수 있습니다. 향후 Kotlin 릴리스에서는 <code>copy()</code> 함수의 기본 가시성이 생성자와 동일하도록 동작을 도입할 예정입니다. 이 변경 사항은 코드를 최대한 원활하게 마이그레이션할 수 있도록 점진적으로 도입될 것입니다.</p><p>마이그레이션 계획은 Kotlin 2.0.20부터 시작되며, 향후 가시성이 변경될 코드에 대해 경고를 발행합니다. 예를 들어:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Triggers a warning in 2.0.20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PositiveInteger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PositiveInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PositiveInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> positiveNumber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PositiveInteger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Triggers a warning in 2.0.20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> negativeNumber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> positiveNumber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Warning: Non-public primary constructor is exposed via the generated &#39;copy()&#39; method of the &#39;data&#39; class.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The generated &#39;copy()&#39; will change its visibility in future releases.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>마이그레이션 계획에 대한 최신 정보는 <a href="https://youtrack.jetbrains.com/issue/KT-11914" target="_blank" rel="noreferrer">YouTrack</a>의 해당 이슈를 참조하세요.</p><p>이 동작에 대한 더 많은 제어권을 제공하기 위해 Kotlin 2.0.20에서는 두 가지 어노테이션을 도입했습니다.</p><ul><li><code>@ConsistentCopyVisibility</code>: 나중에 기본값으로 만들기 전에 이 동작을 지금 옵트인합니다.</li><li><code>@ExposedCopyVisibility</code>: 이 동작을 옵트아웃하고 선언 위치에서 경고를 억제합니다. 이 어노테이션을 사용하더라도 컴파일러는 <code>copy()</code> 함수가 호출될 때 경고를 계속 보고합니다.</li></ul><p>개별 클래스에서가 아니라 전체 모듈에 대해 2.0.20에서 새 동작을 옵트인하려면 <code>-Xconsistent-data-class-copy-visibility</code> 컴파일러 옵션을 사용할 수 있습니다. 이 옵션은 모듈의 모든 데이터 클래스에 <code>@ConsistentCopyVisibility</code> 어노테이션을 추가하는 것과 동일한 효과를 가집니다.</p><h3 id="컨텍스트-리시버를-컨텍스트-파라미터로-단계적으로-교체" tabindex="-1">컨텍스트 리시버를 컨텍스트 파라미터로 단계적으로 교체 <a class="header-anchor" href="#컨텍스트-리시버를-컨텍스트-파라미터로-단계적으로-교체" aria-label="Permalink to &quot;컨텍스트 리시버를 컨텍스트 파라미터로 단계적으로 교체&quot;">​</a></h3><p>Kotlin 1.6.20에서는 <a href="/ko/kotlin/whatsnew1620#prototype-of-context-receivers-for-kotlin-jvm">컨텍스트 리시버</a>를 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a> 기능으로 도입했습니다. 커뮤니티 피드백을 수렴한 후, 이 접근 방식을 계속하지 않고 다른 방향으로 나아가기로 결정했습니다.</p><p>향후 Kotlin 릴리스에서는 컨텍스트 리시버가 컨텍스트 파라미터로 대체될 것입니다. 컨텍스트 파라미터는 아직 설계 단계에 있으며, <a href="https://github.com/Kotlin/KEEP/blob/context-parameters/proposals/context-parameters.md" target="_blank" rel="noreferrer">KEEP</a>에서 제안서를 찾을 수 있습니다.</p><p>컨텍스트 파라미터의 구현은 컴파일러에 상당한 변경이 필요하므로, 컨텍스트 리시버와 컨텍스트 파라미터를 동시에 지원하지 않기로 결정했습니다. 이 결정은 구현을 크게 단순화하고 불안정한 동작의 위험을 최소화합니다.</p><p>컨텍스트 리시버가 이미 많은 개발자에 의해 사용되고 있음을 이해합니다. 따라서 컨텍스트 리시버 지원을 점진적으로 제거하기 시작할 것입니다. 마이그레이션 계획은 Kotlin 2.0.20부터 시작되며, <code>-Xcontext-receivers</code> 컴파일러 옵션과 함께 컨텍스트 리시버가 사용될 때 코드에 경고를 발행합니다. 예를 들어:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyContext</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyContext)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Warning: Experimental context receivers are deprecated and will be superseded by context parameters. </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Please don&#39;t use context receivers. You can either pass parameters explicitly or use members with extensions.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 경고는 향후 Kotlin 릴리스에서 오류가 될 것입니다.</p><p>코드에서 컨텍스트 리시버를 사용하는 경우, 다음 중 하나를 사용하도록 코드를 마이그레이션하는 것을 권장합니다.</p><ul><li><p>명시적 파라미터.</p><table><tr><td>Before</td><td>After</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContextReceiverType)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(explicitContext: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ContextReceiverType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    explicitContext.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table></li><li><p>확장 멤버 함수 (가능한 경우).</p><table><tr><td>Before</td><td>After</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContextReceiverType)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContextReceiverType)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContextReceiverType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContextReceiverType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table></li></ul><p>또는 컴파일러에서 컨텍스트 파라미터가 지원되는 Kotlin 릴리스까지 기다릴 수 있습니다. 컨텍스트 파라미터는 처음에는 실험적 기능으로 도입될 예정입니다.</p><h2 id="kotlin-멀티플랫폼" tabindex="-1">Kotlin 멀티플랫폼 <a class="header-anchor" href="#kotlin-멀티플랫폼" aria-label="Permalink to &quot;Kotlin 멀티플랫폼&quot;">​</a></h2><p>Kotlin 2.0.20은 멀티플랫폼 프로젝트의 소스 세트 관리 기능을 개선하고, Gradle의 최근 변경 사항으로 인해 일부 Gradle Java 플러그인과의 호환성 지원을 중단합니다.</p><h3 id="기본-타겟-계층-구조의-소스-세트에-대한-정적-접근자" tabindex="-1">기본 타겟 계층 구조의 소스 세트에 대한 정적 접근자 <a class="header-anchor" href="#기본-타겟-계층-구조의-소스-세트에-대한-정적-접근자" aria-label="Permalink to &quot;기본 타겟 계층 구조의 소스 세트에 대한 정적 접근자&quot;">​</a></h3><p>Kotlin 1.9.20부터는 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#default-hierarchy-template" target="_blank" rel="noreferrer">기본 계층 템플릿</a>이 모든 Kotlin 멀티플랫폼 프로젝트에 자동으로 적용됩니다. 그리고 기본 계층 템플릿의 모든 소스 세트에 대해 Kotlin Gradle 플러그인은 타입-세이프(type-safe) 접근자를 제공했습니다. 그렇게 하면 <code>by getting</code> 또는 <code>by creating</code> 구성 없이도 지정된 모든 타겟에 대한 소스 세트에 접근할 수 있게 됩니다.</p><p>Kotlin 2.0.20은 IDE 경험을 더욱 향상시키는 것을 목표로 합니다. 이제 <code>sourceSets {}</code> 블록에서 기본 계층 템플릿의 모든 소스 세트에 대한 정적 접근자를 제공합니다. 이 변경 사항으로 인해 이름으로 소스 세트에 접근하는 것이 더 쉽고 예측 가능해질 것이라고 생각합니다.</p><p>이제 각 소스 세트에는 샘플이 포함된 자세한 KDoc 주석과 해당 타겟을 먼저 선언하지 않고 소스 세트에 접근하려고 할 경우 경고와 함께 진단 메시지가 제공됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mingwX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">languageSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            progressiveMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        jvmMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        linuxX64Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        linuxArm64Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Warning: accessing source set without registering the target</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosX64Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+k+`" alt="Accessing the source sets by name" width="700"></p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html" target="_blank" rel="noreferrer">Kotlin 멀티플랫폼의 계층적 프로젝트 구조</a>에 대해 자세히 알아보세요.</p><h3 id="kotlin-멀티플랫폼-gradle-플러그인과-gradle-java-플러그인-호환성-지원-중단-예정" tabindex="-1">Kotlin 멀티플랫폼 Gradle 플러그인과 Gradle Java 플러그인 호환성 지원 중단 예정 <a class="header-anchor" href="#kotlin-멀티플랫폼-gradle-플러그인과-gradle-java-플러그인-호환성-지원-중단-예정" aria-label="Permalink to &quot;Kotlin 멀티플랫폼 Gradle 플러그인과 Gradle Java 플러그인 호환성 지원 중단 예정&quot;">​</a></h3><p>Kotlin 2.0.20에서는 Kotlin 멀티플랫폼 Gradle 플러그인과 다음 Gradle Java 플러그인 중 하나를 동일한 프로젝트에 적용할 때 사용 중단(deprecation) 경고를 도입합니다: <a href="https://docs.gradle.org/current/userguide/java_plugin.html" target="_blank" rel="noreferrer">Java</a>, <a href="https://docs.gradle.org/current/userguide/java_library_plugin.html" target="_blank" rel="noreferrer">Java Library</a>, 및 <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a>. 경고는 멀티플랫폼 프로젝트의 다른 Gradle 플러그인이 Gradle Java 플러그인을 적용할 때도 나타납니다. 예를 들어, <a href="https://docs.spring.io/spring-boot/gradle-plugin/index.html" target="_blank" rel="noreferrer">Spring Boot Gradle Plugin</a>은 자동으로 Application 플러그인을 적용합니다.</p><p>이 사용 중단 경고는 Kotlin 멀티플랫폼의 프로젝트 모델과 Gradle의 Java 에코시스템 플러그인 간의 근본적인 호환성 문제 때문에 추가되었습니다. Gradle의 Java 에코시스템 플러그인은 현재 다른 플러그인이 다음을 수행할 수 있다는 점을 고려하지 않습니다.</p><ul><li>Java 에코시스템 플러그인과 다른 방식으로 JVM 타겟을 게시하거나 컴파일할 수도 있습니다.</li><li>동일한 프로젝트에 JVM 및 Android와 같이 두 개의 다른 JVM 타겟을 가질 수 있습니다.</li><li>잠재적으로 여러 비-JVM 타겟을 포함하는 복잡한 멀티플랫폼 프로젝트 구조를 가질 수 있습니다.</li></ul><p>안타깝게도 Gradle은 현재 이러한 문제를 해결할 API를 제공하지 않습니다.</p><p>이전에 Kotlin 멀티플랫폼에서는 Java 에코시스템 플러그인과의 통합을 돕기 위해 일부 해결 방법을 사용했습니다. 그러나 이러한 해결 방법은 호환성 문제를 진정으로 해결하지 못했으며, Gradle 8.8 릴리스 이후에는 이러한 해결 방법이 더 이상 불가능합니다. 자세한 내용은 <a href="https://youtrack.jetbrains.com/issue/KT-66542/Gradle-JVM-target-with-withJava-produces-a-deprecation-warning" target="_blank" rel="noreferrer">YouTrack 이슈</a>를 참조하세요.</p><p>이 호환성 문제를 정확히 어떻게 해결할지는 아직 알 수 없지만, Kotlin 멀티플랫폼 프로젝트에서 Java 소스 컴파일을 계속 지원하기 위해 최선을 다하고 있습니다. 최소한, 멀티플랫폼 프로젝트 내에서 Java 소스 컴파일과 Gradle의 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaBasePlugin.html" target="_blank" rel="noreferrer"><code>java-base</code></a> 플러그션 사용을 지원할 것입니다.</p><p>그동안 멀티플랫폼 프로젝트에서 이 사용 중단 경고가 표시된다면 다음을 권장합니다.</p><ol><li>프로젝트에 Gradle Java 플러그인이 실제로 필요한지 확인합니다. 필요하지 않다면 제거를 고려합니다.</li><li>Gradle Java 플러그인이 단일 태스크에만 사용되는지 확인합니다. 그렇다면 플러그인을 크게 노력 없이 제거할 수 있을 것입니다. 예를 들어, 태스크가 Javadoc JAR 파일을 생성하기 위해 Gradle Java 플러그인을 사용하는 경우, 대신 Javadoc 태스크를 수동으로 정의할 수 있습니다.</li></ol><p>그렇지 않고, Kotlin 멀티플랫폼 Gradle 플러그인과 이 Gradle Java 플러그인들을 멀티플랫폼 프로젝트에서 모두 사용하려면 다음을 권장합니다.</p><ol><li>멀티플랫폼 프로젝트에 별도의 서브프로젝트를 생성합니다.</li><li>별도의 서브프로젝트에 Gradle Java 플러그인을 적용합니다.</li><li>별도의 서브프로젝트에 상위 멀티플랫폼 프로젝트에 대한 의존성을 추가합니다.</li></ol><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>별도의 서브프로젝트는 멀티플랫폼 프로젝트가 <strong>아니어야</strong> 하며, 멀티플랫폼 프로젝트에 대한 의존성을 설정하는 용도로만 사용해야 합니다.</p></div><p>예를 들어, <code>my-main-project</code>라는 멀티플랫폼 프로젝트가 있고 JVM 애플리케이션을 실행하기 위해 <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a> Gradle 플러그인을 사용하려는 경우를 생각해 봅시다.</p><p><code>subproject-A</code>라는 서브프로젝트를 생성한 후, 상위 프로젝트 구조는 다음과 같을 것입니다.</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── build.gradle.kts</span></span>
<span class="line"><span>├── settings.gradle</span></span>
<span class="line"><span>├── subproject-A</span></span>
<span class="line"><span>    └── build.gradle.kts</span></span>
<span class="line"><span>    └── src</span></span>
<span class="line"><span>        └── Main.java</span></span></code></pre></div><p>서브프로젝트의 <code>build.gradle.kts</code> 파일에서 <code>plugins {}</code> 블록에 Application 플러그인을 적용합니다.</p>`,52)),n(l,{group:"build-script"},{default:t(()=>[n(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>i[0]||(i[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    id"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"application"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>i[1]||(i[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'application'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[5]||(i[5]=s("p",null,[a("서브프로젝트의 "),s("code",null,"build.gradle.kts"),a(" 파일에 상위 멀티플랫폼 프로젝트에 대한 의존성을 추가합니다.")],-1)),n(l,{group:"build-script"},{default:t(()=>[n(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>i[2]||(i[2]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"project"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'":my-main-project"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// The name of your parent multiplatform project")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>i[3]||(i[3]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation project("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"':my-main-project'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// The name of your parent multiplatform project")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[6]||(i[6]=h(`<p>이제 상위 프로젝트가 두 플러그인과 함께 작동하도록 설정되었습니다.</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native는 가비지 컬렉터와 Swift/Objective-C에서 Kotlin 중단 함수를 호출하는 기능에 대한 개선 사항을 받았습니다.</p><h3 id="가비지-컬렉터의-동시-마킹" tabindex="-1">가비지 컬렉터의 동시 마킹 <a class="header-anchor" href="#가비지-컬렉터의-동시-마킹" aria-label="Permalink to &quot;가비지 컬렉터의 동시 마킹&quot;">​</a></h3><p>Kotlin 2.0.20에서 JetBrains 팀은 Kotlin/Native 런타임 성능 향상을 위한 또 다른 단계를 밟았습니다. 가비지 컬렉터(GC)에서 동시 마킹(concurrent marking)에 대한 실험적(Experimental) 지원을 추가했습니다.</p><p>기본적으로 GC가 힙에서 객체를 마킹할 때 애플리케이션 스레드는 일시 중지되어야 합니다. 이는 Compose Multiplatform으로 구축된 UI 애플리케이션과 같이 지연 시간에 민감한 애플리케이션의 성능에 중요한 GC 일시 중지 시간(pause time)의 지속 시간에 크게 영향을 미칩니다.</p><p>이제 가비지 컬렉션의 마킹 단계는 애플리케이션 스레드와 동시에 실행될 수 있습니다. 이는 GC 일시 중지 시간을 크게 단축하고 앱 응답성을 향상시키는 데 도움이 될 것입니다.</p><h4 id="활성화-방법" tabindex="-1">활성화 방법 <a class="header-anchor" href="#활성화-방법" aria-label="Permalink to &quot;활성화 방법&quot;">​</a></h4><p>이 기능은 현재 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. 활성화하려면 <code>gradle.properties</code> 파일에 다음 옵션을 설정합니다.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.gc=cms</span></span></code></pre></div><p>문제 발생 시 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>을 통해 보고해 주시면 감사하겠습니다.</p><h3 id="비트코드-임베딩-지원-제거" tabindex="-1">비트코드 임베딩 지원 제거 <a class="header-anchor" href="#비트코드-임베딩-지원-제거" aria-label="Permalink to &quot;비트코드 임베딩 지원 제거&quot;">​</a></h3><p>Kotlin 2.0.20부터 Kotlin/Native 컴파일러는 더 이상 비트코드 임베딩을 지원하지 않습니다. 비트코드 임베딩은 Xcode 14에서 지원 중단(deprecated)되었고 Xcode 15에서는 모든 Apple 타겟에 대해 제거되었습니다.</p><p>이제 프레임워크 구성의 <code>embedBitcode</code> 파라미터뿐만 아니라 <code>-Xembed-bitcode</code> 및 <code>-Xembed-bitcode-marker</code> 명령줄 인수도 지원 중단됩니다.</p><p>이전 버전의 Xcode를 사용하지만 Kotlin 2.0.20으로 업그레이드하려면 Xcode 프로젝트에서 비트코드 임베딩을 비활성화해야 합니다.</p><h3 id="signposts를-사용한-gc-성능-모니터링-변경-사항" tabindex="-1">Signposts를 사용한 GC 성능 모니터링 변경 사항 <a class="header-anchor" href="#signposts를-사용한-gc-성능-모니터링-변경-사항" aria-label="Permalink to &quot;Signposts를 사용한 GC 성능 모니터링 변경 사항&quot;">​</a></h3><p>Kotlin 2.0.0에서는 Xcode Instruments를 통해 Kotlin/Native 가비지 컬렉터(GC)의 성능을 모니터링할 수 있게 되었습니다. Instruments에는 GC 일시 중지를 이벤트로 표시할 수 있는 Signposts 도구가 포함되어 있습니다. 이는 iOS 앱에서 GC 관련 멈춤을 확인할 때 유용합니다.</p><p>이 기능은 기본적으로 활성화되어 있었지만, 불행히도 애플리케이션이 Xcode Instruments와 동시에 실행될 때 때때로 충돌을 일으켰습니다. Kotlin 2.0.20부터는 다음 컴파일러 옵션을 사용하여 명시적 옵트인(opt-in)이 필요합니다.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-Xbinary=enableSafepointSignposts=true</span></span></code></pre></div><p>GC 성능 분석에 대한 자세한 내용은 <a href="/ko/kotlin/native-memory-manager#monitor-gc-performance">문서</a>를 참조하세요.</p><h3 id="비-메인-스레드에서-swift-objective-c로부터-kotlin-중단-함수를-호출할-수-있는-기능" tabindex="-1">비-메인 스레드에서 Swift/Objective-C로부터 Kotlin 중단 함수를 호출할 수 있는 기능 <a class="header-anchor" href="#비-메인-스레드에서-swift-objective-c로부터-kotlin-중단-함수를-호출할-수-있는-기능" aria-label="Permalink to &quot;비-메인 스레드에서 Swift/Objective-C로부터 Kotlin 중단 함수를 호출할 수 있는 기능&quot;">​</a></h3><p>이전에는 Kotlin/Native에 기본 제한이 있어 Swift 및 Objective-C에서 Kotlin 중단 함수를 메인 스레드에서만 호출할 수 있었습니다. Kotlin 2.0.20은 이 제한을 해제하여 Swift/Objective-C에서 Kotlin <code>suspend</code> 함수를 모든 스레드에서 실행할 수 있도록 허용합니다.</p><p>이전에 <code>kotlin.native.binary.objcExportSuspendFunctionLaunchThreadRestriction=none</code> 바이너리 옵션을 사용하여 비-메인 스레드에 대한 기본 동작을 변경했다면, 이제 <code>gradle.properties</code> 파일에서 해당 옵션을 제거할 수 있습니다.</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>Kotlin 2.0.20에서 Kotlin/Wasm은 명명된 익스포트(named exports)로의 마이그레이션을 계속하며 <code>@ExperimentalWasmDsl</code> 어노테이션의 위치를 변경합니다.</p><h3 id="기본-익스포트-사용-시-오류-발생" tabindex="-1">기본 익스포트 사용 시 오류 발생 <a class="header-anchor" href="#기본-익스포트-사용-시-오류-발생" aria-label="Permalink to &quot;기본 익스포트 사용 시 오류 발생&quot;">​</a></h3><p>명명된 익스포트로의 마이그레이션의 일환으로, 이전에 JavaScript에서 Kotlin/Wasm 익스포트에 대한 기본 임포트(default import)를 사용할 때 경고 메시지가 콘솔에 출력되었습니다.</p><p>명명된 익스포트를 완전히 지원하기 위해, 이 경고는 이제 오류로 상향 조정되었습니다. 기본 임포트를 사용하면 다음 오류 메시지가 발생합니다.</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Do not use default import. Use the corresponding named import instead.</span></span></code></pre></div><p>이 변경 사항은 명명된 익스포트로 마이그레이션하기 위한 사용 중단(deprecation) 주기(cycle)의 일부입니다. 각 단계에서 예상할 수 있는 내용은 다음과 같습니다.</p><ul><li><strong>2.0.0 버전</strong>: 기본 익스포트를 통한 엔티티 익스포트가 사용 중단됨을 설명하는 경고 메시지가 콘솔에 출력됩니다.</li><li><strong>2.0.20 버전</strong>: 해당 명명된 임포트를 사용하도록 요청하는 오류가 발생합니다.</li><li><strong>2.1.0 버전</strong>: 기본 임포트 사용이 완전히 제거됩니다.</li></ul><h3 id="experimentalwasmdsl-어노테이션의-새-위치" tabindex="-1"><code>@ExperimentalWasmDsl</code> 어노테이션의 새 위치 <a class="header-anchor" href="#experimentalwasmdsl-어노테이션의-새-위치" aria-label="Permalink to &quot;\`@ExperimentalWasmDsl\` 어노테이션의 새 위치&quot;">​</a></h3><p>이전에는 WebAssembly(Wasm) 기능을 위한 <code>@ExperimentalWasmDsl</code> 어노테이션이 Kotlin Gradle 플러그인 내의 다음 위치에 있었습니다.</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.jetbrains.kotlin.gradle.targets.js.dsl.ExperimentalWasmDsl</span></span></code></pre></div><p>2.0.20에서는 <code>@ExperimentalWasmDsl</code> 어노테이션이 다음으로 위치가 변경되었습니다.</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.jetbrains.kotlin.gradle.ExperimentalWasmDsl</span></span></code></pre></div><p>이전 위치는 이제 사용 중단(deprecated)되었으며 확인되지 않은 참조로 인해 빌드 실패를 초래할 수 있습니다.</p><p><code>@ExperimentalWasmDsl</code> 어노테이션의 새 위치를 반영하려면 Gradle 빌드 스크립트에서 import 문을 업데이트해야 합니다. 새 <code>@ExperimentalWasmDsl</code> 위치에 대해 명시적 import를 사용하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.ExperimentalWasmDsl</span></span></code></pre></div><p>또는 이전 패키지에서 이 스타 import 문을 제거하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.targets.js.dsl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS는 JavaScript에서 정적 멤버를 지원하고 JavaScript에서 Kotlin 컬렉션을 생성하기 위한 몇 가지 실험적(Experimental) 기능을 도입합니다.</p><h3 id="javascript에서-kotlin-정적-멤버-사용-지원" tabindex="-1">JavaScript에서 Kotlin 정적 멤버 사용 지원 <a class="header-anchor" href="#javascript에서-kotlin-정적-멤버-사용-지원" aria-label="Permalink to &quot;JavaScript에서 Kotlin 정적 멤버 사용 지원&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>이 기능은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. 언제든지 삭제되거나 변경될 수 있습니다. 평가 목적으로만 사용하세요. <a href="https://youtrack.jetbrains.com/issue/KT-18891/JS-provide-a-way-to-declare-static-members-JsStatic" target="_blank" rel="noreferrer">YouTrack</a>에 대한 피드백을 주시면 감사하겠습니다.</p></div><p>Kotlin 2.0.20부터 <code>@JsStatic</code> 어노테이션을 사용할 수 있습니다. 이 어노테이션은 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-static/" target="_blank" rel="noreferrer">@JvmStatic</a>과 유사하게 작동하며, 대상 선언에 대해 추가 정적 메서드를 생성하도록 컴파일러에 지시합니다. 이는 Kotlin 코드의 정적 멤버를 JavaScript에서 직접 사용하는 데 도움이 됩니다.</p><p><code>@JsStatic</code> 어노테이션은 이름이 지정된 객체(named objects)에 정의된 함수뿐만 아니라 클래스와 인터페이스 내부에 선언된 동반 객체(companion objects)에도 사용할 수 있습니다. 컴파일러는 객체의 정적 메서드와 객체 자체의 인스턴스 메서드를 모두 생성합니다. 예를 들어:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @JsStatic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callNonStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이제 <code>callStatic()</code>은 JavaScript에서 정적(static)인 반면 <code>callNonStatic()</code>은 그렇지 않습니다.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Works, accessing the static function</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callNonStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error, not a static function in the generated JavaScript</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Companion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Instance method remains</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Companion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callNonStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The only way it works</span></span></code></pre></div><p>또한 <code>@JsStatic</code> 어노테이션을 객체 또는 동반 객체의 프로퍼티에 적용하여 해당 getter 및 setter 메서드를 해당 객체 또는 동반 객체를 포함하는 클래스의 정적 멤버로 만들 수 있습니다.</p><h3 id="javascript에서-kotlin-컬렉션을-생성할-수-있는-기능" tabindex="-1">JavaScript에서 Kotlin 컬렉션을 생성할 수 있는 기능 <a class="header-anchor" href="#javascript에서-kotlin-컬렉션을-생성할-수-있는-기능" aria-label="Permalink to &quot;JavaScript에서 Kotlin 컬렉션을 생성할 수 있는 기능&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>이 기능은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. 언제든지 삭제되거나 변경될 수 있습니다. 평가 목적으로만 사용하세요. <a href="https://youtrack.jetbrains.com/issue/KT-69133/Kotlin-JS-Add-support-for-collection-instantiation-in-JavaScript" target="_blank" rel="noreferrer">YouTrack</a>에 대한 피드백을 주시면 감사하겠습니다.</p></div><p>Kotlin 2.0.0은 Kotlin 컬렉션을 JavaScript(및 TypeScript)로 익스포트하는 기능을 도입했습니다. 이제 JetBrains 팀은 컬렉션 상호 운용성을 개선하기 위한 또 다른 단계를 밟고 있습니다. Kotlin 2.0.20부터 JavaScript/TypeScript 측에서 Kotlin 컬렉션을 직접 생성할 수 있습니다.</p><p>JavaScript에서 Kotlin 컬렉션을 생성하여 익스포트된 생성자(constructors) 또는 함수에 인수로 전달할 수 있습니다. 익스포트된 선언 내에서 컬렉션을 언급하는 즉시 Kotlin은 JavaScript/TypeScript에서 사용할 수 있는 컬렉션 팩토리(factory)를 생성합니다.</p><p>다음 익스포트된 함수를 살펴보세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consumeMutableMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MutableMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span></span></code></pre></div><p><code>MutableMap</code> 컬렉션이 언급되었으므로, Kotlin은 JavaScript/TypeScript에서 사용할 수 있는 팩토리 메서드를 포함하는 객체를 생성합니다. 이 팩토리 메서드는 JavaScript <code>Map</code>에서 <code>MutableMap</code>을 생성합니다.</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { consumeMutableMap } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;an-awesome-kotlin-module&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { KtMutableMap } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;an-awesome-kotlin-module/kotlin-kotlin-stdlib&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consumeMutableMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    KtMutableMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromJsMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;First&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Second&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>이 기능은 <code>Set</code>, <code>Map</code>, <code>List</code> Kotlin 컬렉션 타입 및 해당 변경 가능한 counterpart(mutable counterparts)에서 사용할 수 있습니다.</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 2.0.20은 Gradle 6.8.3부터 8.6까지 완벽하게 호환됩니다. Gradle 8.7 및 8.8도 지원되지만 한 가지 예외가 있습니다. Kotlin 멀티플랫폼 Gradle 플러그인을 사용하는 경우 JVM 타겟에서 <code>withJava()</code> 함수를 호출하는 멀티플랫폼 프로젝트에서 사용 중단(deprecation) 경고가 나타날 수 있습니다. 이 문제는 가능한 한 빨리 해결할 계획입니다.</p><p>자세한 내용은 <a href="https://youtrack.jetbrains.com/issue/KT-66542/Gradle-JVM-target-with-withJava-produces-a-deprecation-warning" target="_blank" rel="noreferrer">YouTrack</a>의 이슈를 참조하세요.</p><p>또한 최신 Gradle 릴리스까지의 Gradle 버전을 사용할 수 있지만, 그렇게 하면 사용 중단 경고가 발생하거나 일부 새로운 Gradle 기능이 작동하지 않을 수 있음을 염두에 두십시오.</p><p>이 버전은 JVM 기록 파일 기반의 이전 점진적 컴파일(incremental compilation) 접근 방식에 대한 지원 중단 프로세스를 시작하는 것과 같은 변경 사항과 프로젝트 간에 JVM 아티팩트를 공유하는 새로운 방식을 제공합니다.</p><h3 id="jvm-기록-파일-기반-점진적-컴파일-지원-중단" tabindex="-1">JVM 기록 파일 기반 점진적 컴파일 지원 중단 <a class="header-anchor" href="#jvm-기록-파일-기반-점진적-컴파일-지원-중단" aria-label="Permalink to &quot;JVM 기록 파일 기반 점진적 컴파일 지원 중단&quot;">​</a></h3><p>Kotlin 2.0.20에서는 JVM 기록 파일 기반의 점진적 컴파일 접근 방식이 Kotlin 1.8.20부터 기본적으로 활성화된 새로운 점진적 컴파일 접근 방식에 찬성하여 지원 중단(deprecated)되었습니다.</p><p>JVM 기록 파일 기반의 점진적 컴파일 접근 방식은 <a href="https://docs.gradle.org/current/userguide/build_cache.html" target="_blank" rel="noreferrer">Gradle의 빌드 캐시</a>와 함께 작동하지 않고 컴파일 회피(compilation avoidance)를 지원하지 않는 등의 제한 사항을 겪었습니다. 이와 대조적으로, 새로운 점진적 컴파일 접근 방식은 이러한 제한 사항을 극복했으며 도입 이후 잘 작동하고 있습니다.</p><p>새로운 점진적 컴파일 접근 방식이 지난 두 주요 Kotlin 릴리스에서 기본적으로 사용되었으므로, <code>kotlin.incremental.useClasspathSnapshot</code> Gradle 속성은 Kotlin 2.0.20에서 지원 중단됩니다. 따라서 이 속성을 사용하여 옵트아웃(opt out)하는 경우 사용 중단 경고가 표시될 것입니다.</p><h3 id="jvm-아티팩트를-클래스-파일로-프로젝트-간에-공유하는-옵션" tabindex="-1">JVM 아티팩트를 클래스 파일로 프로젝트 간에 공유하는 옵션 <a class="header-anchor" href="#jvm-아티팩트를-클래스-파일로-프로젝트-간에-공유하는-옵션" aria-label="Permalink to &quot;JVM 아티팩트를 클래스 파일로 프로젝트 간에 공유하는 옵션&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>이 기능은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. 언제든지 삭제되거나 변경될 수 있습니다. 평가 목적으로만 사용하세요. <a href="https://youtrack.jetbrains.com/issue/KT-61861/Gradle-Kotlin-compilations-depend-on-packed-artifacts" target="_blank" rel="noreferrer">YouTrack</a>에 대한 피드백을 주시면 감사하겠습니다. 옵트인(opt-in)이 필요합니다 (아래 세부 정보 참조).</p></div><p>Kotlin 2.0.20에서는 JAR 파일과 같은 Kotlin/JVM 컴파일 출력이 프로젝트 간에 공유되는 방식을 변경하는 새로운 접근 방식을 도입합니다. 이 접근 방식을 사용하면 Gradle의 <code>apiElements</code> 구성은 이제 컴파일된 <code>.class</code> 파일을 포함하는 디렉터리에 대한 접근을 제공하는 보조 변형(secondary variant)을 가집니다. 구성되면 프로젝트는 컴파일 중에 압축된 JAR 아티팩트를 요청하는 대신 이 디렉터리를 사용합니다. 이는 특히 점진적 빌드에서 JAR 파일이 압축 및 압축 해제되는 횟수를 줄여줍니다.</p><p>저희 테스트에 따르면 이 새로운 접근 방식은 Linux 및 macOS 호스트에서 빌드 성능 향상을 제공할 수 있습니다. 그러나 Windows 호스트에서는 Windows가 파일 작업 시 I/O 작업을 처리하는 방식 때문에 성능 저하가 관찰되었습니다.</p><p>이 새로운 접근 방식을 사용해 보려면 <code>gradle.properties</code> 파일에 다음 속성을 추가합니다.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.jvm.addClassesVariant=true</span></span></code></pre></div><p>기본적으로 이 속성은 <code>false</code>로 설정되어 있으며 Gradle의 <code>apiElements</code> 변형은 압축된 JAR 아티팩트를 요청합니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Gradle에는 Java 전용 프로젝트에서 컴파일 중에 컴파일된 <code>.class</code> 파일을 포함하는 디렉터리 <strong>대신</strong> 압축된 JAR 아티팩트만 노출하도록 사용할 수 있는 관련 속성이 있습니다. <code>none org.gradle.java.compile-classpath-packaging=true </code> 이 속성과 그 목적에 대한 자세한 내용은 <a href="https://docs.gradle.org/current/userguide/java_library_plugin.html#sub:java_library_known_issues_windows_performance" target="_blank" rel="noreferrer">대규모 멀티 프로젝트의 Windows에서 상당한 빌드 성능 저하</a>에 대한 Gradle 문서를 참조하세요.</p></div><p>이 새로운 접근 방식에 대한 피드백을 주시면 감사하겠습니다. 사용하면서 성능 향상을 경험하셨습니까? <a href="https://youtrack.jetbrains.com/issue/KT-61861/Gradle-Kotlin-compilations-depend-on-packed-artifacts" target="_blank" rel="noreferrer">YouTrack</a>에 댓글을 추가하여 알려주세요.</p><h3 id="kotlin-gradle-플러그인의-의존성-동작을-java-test-fixtures-플러그인과-정렬" tabindex="-1">Kotlin Gradle 플러그인의 의존성 동작을 <code>java-test-fixtures</code> 플러그인과 정렬 <a class="header-anchor" href="#kotlin-gradle-플러그인의-의존성-동작을-java-test-fixtures-플러그인과-정렬" aria-label="Permalink to &quot;Kotlin Gradle 플러그인의 의존성 동작을 \`java-test-fixtures\` 플러그인과 정렬&quot;">​</a></h3><p>Kotlin 2.0.20 이전에는 프로젝트에서 <a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures" target="_blank" rel="noreferrer"><code>java-test-fixtures</code> 플러그인</a>을 사용하는 경우 Gradle과 Kotlin Gradle 플러그인 간에 의존성 전파 방식에 차이가 있었습니다.</p><p>Kotlin Gradle 플러그인은 의존성을 다음과 같이 전파했습니다.</p><ul><li><code>java-test-fixtures</code> 플러그인의 <code>implementation</code> 및 <code>api</code> 의존성 타입에서 <code>test</code> 소스 세트 컴파일 클래스패스로.</li><li>메인 소스 세트의 <code>implementation</code> 및 <code>api</code> 의존성 타입에서 <code>java-test-fixtures</code> 플러그인의 소스 세트 컴파일 클래스패스로.</li></ul><p>그러나 Gradle은 <code>api</code> 의존성 타입에서만 의존성을 전파했습니다.</p><p>이러한 동작의 차이로 인해 일부 프로젝트에서는 클래스패스에서 리소스 파일이 여러 번 발견되는 문제가 발생했습니다.</p><p>Kotlin 2.0.20부터 Kotlin Gradle 플러그인의 동작은 Gradle의 <code>java-test-fixtures</code> 플러그인과 정렬되어 이 문제 또는 다른 Gradle 플러그인에 대해 더 이상 발생하지 않습니다.</p><p>이 변경 사항의 결과로 <code>test</code> 및 <code>testFixtures</code> 소스 세트의 일부 의존성에 더 이상 접근할 수 없게 될 수 있습니다. 이런 경우, 의존성 선언 타입을 <code>implementation</code>에서 <code>api</code>로 변경하거나, 영향을 받는 소스 세트에 새 의존성 선언을 추가해야 합니다.</p><h3 id="컴파일-태스크에-아티팩트에-대한-태스크-의존성이-없는-드문-경우에-대한-태스크-의존성-추가" tabindex="-1">컴파일 태스크에 아티팩트에 대한 태스크 의존성이 없는 드문 경우에 대한 태스크 의존성 추가 <a class="header-anchor" href="#컴파일-태스크에-아티팩트에-대한-태스크-의존성이-없는-드문-경우에-대한-태스크-의존성-추가" aria-label="Permalink to &quot;컴파일 태스크에 아티팩트에 대한 태스크 의존성이 없는 드문 경우에 대한 태스크 의존성 추가&quot;">​</a></h3><p>2.0.20 이전에는 컴파일 태스크에 아티팩트 입력 중 하나에 대한 태스크 의존성이 누락되는 시나리오가 발견되었습니다. 이는 종속 컴파일 태스크의 결과가 불안정하다는 것을 의미했습니다. 때로는 아티팩트가 제때 생성되었지만, 때로는 그렇지 않았기 때문입니다.</p><p>이 문제를 해결하기 위해 Kotlin Gradle 플러그인은 이제 이러한 시나리오에서 필요한 태스크 의존성을 자동으로 추가합니다.</p><p>매우 드문 경우에, 이 새로운 동작이 순환 의존성(circular dependency) 오류를 일으킬 수 있다는 것을 발견했습니다. 예를 들어, 한 컴파일이 다른 컴파일의 모든 내부 선언을 볼 수 있고, 생성된 아티팩트가 두 컴파일 태스크의 출력에 의존하는 경우 다음과 같은 오류가 표시될 수 있습니다.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FAILURE: Build failed with an exception.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>What went wrong:</span></span>
<span class="line"><span>Circular dependency between the following tasks:</span></span>
<span class="line"><span>:lib:compileKotlinJvm</span></span>
<span class="line"><span>--- :lib:jvmJar</span></span>
<span class="line"><span>     \\--- :lib:compileKotlinJvm (*)</span></span>
<span class="line"><span>(*) - details omitted (listed previously)</span></span></code></pre></div><p>이 순환 의존성 오류를 해결하기 위해 <code>archivesTaskOutputAsFriendModule</code>이라는 Gradle 속성을 추가했습니다.</p><p>기본적으로 이 속성은 태스크 의존성을 추적하기 위해 <code>true</code>로 설정됩니다. 컴파일 태스크에서 아티팩트 사용을 비활성화하여 태스크 의존성이 필요 없도록 하려면 <code>gradle.properties</code> 파일에 다음을 추가합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.build.archivesTaskOutputAsFriendModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div><p>자세한 내용은 <a href="https://youtrack.jetbrains.com/issue/KT-69330" target="_blank" rel="noreferrer">YouTrack</a>의 이슈를 참조하세요.</p><h2 id="compose-컴파일러" tabindex="-1">Compose 컴파일러 <a class="header-anchor" href="#compose-컴파일러" aria-label="Permalink to &quot;Compose 컴파일러&quot;">​</a></h2><p>Kotlin 2.0.20에서 Compose 컴파일러는 몇 가지 개선 사항을 얻었습니다.</p><h3 id="_2-0-0에서-도입된-불필요한-리컴포지션-문제-해결" tabindex="-1">2.0.0에서 도입된 불필요한 리컴포지션 문제 해결 <a class="header-anchor" href="#_2-0-0에서-도입된-불필요한-리컴포지션-문제-해결" aria-label="Permalink to &quot;2.0.0에서 도입된 불필요한 리컴포지션 문제 해결&quot;">​</a></h3><p>Compose 컴파일러 2.0.0에는 비-JVM 타겟을 사용하는 멀티플랫폼 프로젝트에서 타입의 안정성을 잘못 추론하는 문제가 있습니다. 이는 불필요한 (또는 심지어 무한한) 리컴포지션(recompositions)으로 이어질 수 있습니다. Kotlin 2.0.0용으로 제작된 Compose 앱은 2.0.10 버전 이상으로 업데이트하는 것을 강력히 권장합니다.</p><p>앱이 Compose 컴파일러 2.0.10 이상으로 빌드되었지만 2.0.0 버전으로 빌드된 의존성을 사용하는 경우, 이러한 오래된 의존성은 여전히 리컴포지션 문제를 일으킬 수 있습니다. 이를 방지하려면 의존성을 앱과 동일한 Compose 컴파일러로 빌드된 버전으로 업데이트하세요.</p><h3 id="컴파일러-옵션을-구성하는-새로운-방법" tabindex="-1">컴파일러 옵션을 구성하는 새로운 방법 <a class="header-anchor" href="#컴파일러-옵션을-구성하는-새로운-방법" aria-label="Permalink to &quot;컴파일러 옵션을 구성하는 새로운 방법&quot;">​</a></h3><p>최상위 파라미터의 혼란을 피하기 위해 새로운 옵션 구성 메커니즘을 도입했습니다. Compose 컴파일러 팀이 <code>composeCompiler {}</code> 블록에 대한 최상위 항목을 생성하거나 제거하여 기능을 테스트하는 것이 더 어렵습니다. 따라서 강력한 스키핑 모드(strong skipping mode) 및 비-스키핑 그룹 최적화(non-skipping group optimizations)와 같은 옵션은 이제 <code>featureFlags</code> 속성을 통해 활성화됩니다. 이 속성은 결국 기본값이 될 새로운 Compose 컴파일러 옵션을 테스트하는 데 사용될 것입니다.</p><p>이 변경 사항은 Compose 컴파일러 Gradle 플러그인에도 적용되었습니다. 향후 기능 플래그를 구성하려면 다음 구문을 사용하세요 (이 코드는 모든 기본값을 변경합니다).</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composeCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    featureFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.IntrinsicRemember.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.OptimizeNonSkippingGroups,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.StrongSkipping.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>또는 Compose 컴파일러를 직접 구성하는 경우 다음 구문을 사용하세요.</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-P plugin:androidx.compose.compiler.plugins.kotlin:featureFlag=IntrinsicRemember</span></span></code></pre></div><p>따라서 <code>enableIntrinsicRemember</code>, <code>enableNonSkippingGroupOptimization</code>, <code>enableStrongSkippingMode</code> 속성은 사용 중단(deprecated)되었습니다.</p><p>이 새로운 접근 방식에 대한 여러분의 피드백을 <a href="https://youtrack.jetbrains.com/issue/KT-68651/Compose-provide-a-single-place-in-extension-to-configure-all-compose-flags" target="_blank" rel="noreferrer">YouTrack</a>에 남겨주시면 감사하겠습니다.</p><h3 id="강력한-스키핑-모드-기본적으로-활성화" tabindex="-1">강력한 스키핑 모드 기본적으로 활성화 <a class="header-anchor" href="#강력한-스키핑-모드-기본적으로-활성화" aria-label="Permalink to &quot;강력한 스키핑 모드 기본적으로 활성화&quot;">​</a></h3><p>Compose 컴파일러의 강력한 스키핑 모드(Strong skipping mode)가 이제 기본적으로 활성화됩니다.</p><p>강력한 스키핑 모드는 어떤 컴포저블을 스킵할 수 있는지에 대한 규칙을 변경하는 Compose 컴파일러 구성 옵션입니다. 강력한 스키핑 모드가 활성화되면 불안정한 파라미터가 있는 컴포저블도 이제 스킵될 수 있습니다. 강력한 스키핑 모드는 또한 컴포저블 함수에서 사용되는 람다를 자동으로 기억하므로, 더 이상 리컴포지션을 피하기 위해 람다를 <code>remember</code>로 래핑할 필요가 없습니다.</p><p>자세한 내용은 <a href="https://developer.android.com/develop/ui/compose/performance/stability/strongskipping" target="_blank" rel="noreferrer">강력한 스키핑 모드 문서</a>를 참조하세요.</p><h3 id="컴포지션-트레이스-마커-기본적으로-활성화" tabindex="-1">컴포지션 트레이스 마커 기본적으로 활성화 <a class="header-anchor" href="#컴포지션-트레이스-마커-기본적으로-활성화" aria-label="Permalink to &quot;컴포지션 트레이스 마커 기본적으로 활성화&quot;">​</a></h3><p><code>includeTraceMarkers</code> 옵션은 이제 Compose 컴파일러 Gradle 플러그인에서 기본적으로 <code>true</code>로 설정되어 컴파일러 플러그인의 기본값과 일치합니다. 이를 통해 Android Studio 시스템 트레이스 프로파일러에서 컴포저블 함수를 볼 수 있습니다. 컴포지션 트레이싱에 대한 자세한 내용은 <a href="https://medium.com/androiddevelopers/jetpack-compose-composition-tracing-9ec2b3aea535" target="_blank" rel="noreferrer">Android 개발자 블로그 게시물</a>을 참조하세요.</p><h3 id="비-스키핑-그룹-최적화" tabindex="-1">비-스키핑 그룹 최적화 <a class="header-anchor" href="#비-스키핑-그룹-최적화" aria-label="Permalink to &quot;비-스키핑 그룹 최적화&quot;">​</a></h3><p>이번 릴리스에는 새로운 컴파일러 옵션이 포함되어 있습니다. 활성화되면 스킵할 수 없고 다시 시작할 수 없는 컴포저블 함수는 더 이상 컴포저블 본문 주위에 그룹을 생성하지 않습니다. 이는 할당(allocations)을 줄여 성능을 향상시킵니다. 이 옵션은 실험적(experimental)이며 기본적으로 비활성화되어 있지만, <a href="#new-way-to-configure-compiler-options">위에서</a> 보여진 바와 같이 <code>OptimizeNonSkippingGroups</code> 기능 플래그를 통해 활성화할 수 있습니다.</p><p>이 기능 플래그는 이제 더 광범위한 테스트를 위해 준비되었습니다. 기능을 활성화할 때 발견된 모든 문제는 <a href="https://goo.gle/compose-feedback" target="_blank" rel="noreferrer">Google 이슈 트래커</a>에 제출할 수 있습니다.</p><h3 id="추상-컴포저블-함수의-기본-파라미터-지원" tabindex="-1">추상 컴포저블 함수의 기본 파라미터 지원 <a class="header-anchor" href="#추상-컴포저블-함수의-기본-파라미터-지원" aria-label="Permalink to &quot;추상 컴포저블 함수의 기본 파라미터 지원&quot;">​</a></h3><p>이제 추상 컴포저블 함수에 기본 파라미터(default parameters)를 추가할 수 있습니다.</p><p>이전에는 Compose 컴파일러가 유효한 Kotlin 코드임에도 불구하고 이 작업을 시도할 때 오류를 보고했습니다. 이제 Compose 컴파일러에서 이를 지원하며, 제한이 제거되었습니다. 이는 기본 <code>Modifier</code> 값을 포함하는 데 특히 유용합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Composables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(modifier: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Modifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>열린(open) 컴포저블 함수의 기본 파라미터는 2.0.20에서 여전히 제한됩니다. 이 제한은 향후 릴리스에서 해결될 것입니다.</p><h2 id="표준-라이브러리" tabindex="-1">표준 라이브러리 <a class="header-anchor" href="#표준-라이브러리" aria-label="Permalink to &quot;표준 라이브러리&quot;">​</a></h2><p>표준 라이브러리는 이제 실험적(Experimental) 기능으로 범용 고유 식별자(UUID)를 지원하며, Base64 디코딩에 일부 변경 사항이 포함되어 있습니다.</p><h3 id="공용-kotlin-표준-라이브러리의-uuid-지원" tabindex="-1">공용 Kotlin 표준 라이브러리의 UUID 지원 <a class="header-anchor" href="#공용-kotlin-표준-라이브러리의-uuid-지원" aria-label="Permalink to &quot;공용 Kotlin 표준 라이브러리의 UUID 지원&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>이 기능은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>입니다. 옵트인(opt-in)하려면 <code>@ExperimentalUuidApi</code> 어노테이션 또는 컴파일러 옵션 <code>-opt-in=kotlin.uuid.ExperimentalUuidApi</code>를 사용하세요.</p></div><p>Kotlin 2.0.20은 항목을 고유하게 식별하는 문제를 해결하기 위해 공용 Kotlin 표준 라이브러리에 <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier" target="_blank" rel="noreferrer">UUID (범용 고유 식별자)</a>를 나타내는 클래스를 도입합니다.</p><p>또한, 이 기능은 다음 UUID 관련 작업에 대한 API를 제공합니다.</p><ul><li>UUID 생성.</li><li>문자열 표현에서 UUID 파싱 및 포맷팅.</li><li>지정된 128비트 값으로 UUID 생성.</li><li>UUID의 128비트 접근.</li></ul><p>다음 코드 예제는 이러한 작업을 보여줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Constructs a byte array for UUID creation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> byteArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> byteArrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0x55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x84</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xE2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x9B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x41</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xD4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0xA7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x44</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x44</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(byteArray)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromULongs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x550E8400E29B41D4u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xA716446655440000u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;550e8400-e29b-41d4-a716-446655440000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid1)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 550e8400-e29b-41d4-a716-446655440000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid3)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Accesses UUID bits</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLongs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mostSignificantBits, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ((mostSignificantBits shr </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) and </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(version)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Generates a random UUID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> randomUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> randomUuid)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre></div><p><code>java.util.UUID</code>를 사용하는 API와의 호환성을 유지하기 위해 Kotlin/JVM에는 <code>java.util.UUID</code>와 <code>kotlin.uuid.Uuid</code> 간에 변환하기 위한 두 가지 확장 함수인 <code>.toJavaUuid()</code> 및 <code>.toKotlinUuid()</code>가 있습니다. 예를 들어:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseHex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;550e8400e29b41d4a716446655440000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Converts Kotlin UUID to java.util.UUID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinUuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toJavaUuid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;550e8400-e29b-41d4-a716-446655440000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Converts Java UUID to kotlin.uuid.Uuid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaUuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toKotlinUuid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>이 기능과 제공된 API는 여러 플랫폼 간에 코드 공유를 허용하여 멀티플랫폼 소프트웨어 개발을 단순화합니다. UUID는 또한 고유 식별자 생성이 어려운 환경에 이상적입니다.</p><p>UUID를 포함하는 몇 가지 사용 사례는 다음과 같습니다.</p><ul><li>데이터베이스 레코드에 고유 ID 할당.</li><li>웹 세션 식별자 생성.</li><li>고유 식별 또는 추적을 요구하는 모든 시나리오.</li></ul><h3 id="hexformat의-minlength-지원" tabindex="-1"><code>HexFormat</code>의 <code>minLength</code> 지원 <a class="header-anchor" href="#hexformat의-minlength-지원" aria-label="Permalink to &quot;\`HexFormat\`의 \`minLength\` 지원&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-hex-format/" target="_blank" rel="noreferrer"><code>HexFormat</code> 클래스</a> 및 그 속성들은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적(Experimental)</a>입니다. 옵트인하려면 <code>@OptIn(ExperimentalStdlibApi::class)</code> 어노테이션 또는 컴파일러 옵션 <code>-opt-in=kotlin.ExperimentalStdlibApi</code>를 사용하세요.</p></div><p>Kotlin 2.0.20은 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-hex-format/number.html" target="_blank" rel="noreferrer"><code>HexFormat.number</code></a>를 통해 접근할 수 있는 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-hex-format/-number-hex-format/" target="_blank" rel="noreferrer"><code>NumberHexFormat</code> 클래스</a>에 새로운 <code>minLength</code> 속성을 추가합니다. 이 속성을 사용하면 숫자 값의 16진수 표현에서 최소 자릿수를 지정하여 필요한 길이를 충족하도록 0으로 패딩할 수 있습니다. 또한 <code>removeLeadingZeros</code> 속성을 사용하여 선행 0을 제거할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">93</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HexFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        number.minLength </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        number.removeLeadingZeros </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;005d&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>minLength</code> 속성은 파싱에 영향을 미치지 않습니다. 그러나 이제 파싱은 추가적인 선행 숫자가 0인 경우 타입의 너비보다 많은 숫자를 가진 16진수 문자열을 허용합니다.</p><h3 id="base64-디코더-동작-변경" tabindex="-1">Base64 디코더 동작 변경 <a class="header-anchor" href="#base64-디코더-동작-변경" aria-label="Permalink to &quot;Base64 디코더 동작 변경&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io.encoding/-base64/" target="_blank" rel="noreferrer"><code>Base64</code> 클래스</a> 및 관련 기능은 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적(Experimental)</a>입니다. 옵트인하려면 <code>@OptIn(ExperimentalEncodingApi::class)</code> 어노테이션 또는 컴파일러 옵션 <code>-opt-in=kotlin.io.encoding.ExperimentalEncodingApi</code>를 사용하세요.</p></div><p>Kotlin 2.0.20에서 Base64 디코더의 동작에 두 가지 변경 사항이 도입되었습니다.</p><ul><li><a href="#the-base64-decoder-now-requires-padding">Base64 디코더는 이제 패딩을 요구합니다</a></li><li><a href="#withpadding-function-for-padding-configuration">패딩 구성을 위한 <code>withPadding</code> 함수가 추가되었습니다</a></li></ul><h4 id="base64-디코더는-이제-패딩을-요구합니다" tabindex="-1">Base64 디코더는 이제 패딩을 요구합니다 <a class="header-anchor" href="#base64-디코더는-이제-패딩을-요구합니다" aria-label="Permalink to &quot;Base64 디코더는 이제 패딩을 요구합니다&quot;">​</a></h4><p>Base64 인코더는 이제 기본적으로 패딩을 추가하며, 디코더는 패딩을 요구하고 디코딩 시 0이 아닌 패드 비트를 금지합니다.</p><h4 id="패딩-구성을-위한-withpadding-함수" tabindex="-1">패딩 구성을 위한 <code>withPadding</code> 함수 <a class="header-anchor" href="#패딩-구성을-위한-withpadding-함수" aria-label="Permalink to &quot;패딩 구성을 위한 \`withPadding\` 함수&quot;">​</a></h4><p>Base64 인코딩 및 디코딩의 패딩 동작을 제어하기 위해 새로운 <code>.withPadding()</code> 함수가 도입되었습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base64.PaddingOption.ABSENT_OPTIONAL)</span></span></code></pre></div><p>이 함수를 사용하면 다양한 패딩 옵션을 가진 <code>Base64</code> 인스턴스를 생성할 수 있습니다.</p><table tabindex="0"><thead><tr><th style="text-align:left;"><code>PaddingOption</code></th><th style="text-align:left;">인코딩 시</th><th style="text-align:left;">디코딩 시</th></tr></thead><tbody><tr><td style="text-align:left;"><code>PRESENT</code></td><td style="text-align:left;">패딩 추가</td><td style="text-align:left;">패딩 필수</td></tr><tr><td style="text-align:left;"><code>ABSENT</code></td><td style="text-align:left;">패딩 생략</td><td style="text-align:left;">패딩 허용 안됨</td></tr><tr><td style="text-align:left;"><code>PRESENT_OPTIONAL</code></td><td style="text-align:left;">패딩 추가</td><td style="text-align:left;">패딩 선택 사항</td></tr><tr><td style="text-align:left;"><code>ABSENT_OPTIONAL</code></td><td style="text-align:left;">패딩 생략</td><td style="text-align:left;">패딩 선택 사항</td></tr></tbody></table><p>다양한 패딩 옵션을 가진 <code>Base64</code> 인스턴스를 생성하여 데이터를 인코딩하고 디코딩할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.io.encoding.Base64</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.io.encoding.ExperimentalEncodingApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalEncodingApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Example data to encode</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fooba&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Creates a Base64 instance with URL-safe alphabet and PRESENT padding</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Present </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base64.PaddingOption.PRESENT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedDataPresent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Present.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encoded data with PRESENT padding: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$encodedDataPresent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Encoded data with PRESENT padding: Zm9vYmE=</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Creates a Base64 instance with URL-safe alphabet and ABSENT padding</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Absent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base64.PaddingOption.ABSENT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedDataAbsent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Absent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encoded data with ABSENT padding: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$encodedDataAbsent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Encoded data with ABSENT padding: Zm9vYmE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Decodes the data back</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decodedDataPresent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Present.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedDataPresent)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Decoded data with PRESENT padding: \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(decodedDataPresent)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Decoded data with PRESENT padding: fooba</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decodedDataAbsent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Absent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedDataAbsent)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Decoded data with ABSENT padding: \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(decodedDataAbsent)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Decoded data with ABSENT padding: fooba</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="문서-업데이트" tabindex="-1">문서 업데이트 <a class="header-anchor" href="#문서-업데이트" aria-label="Permalink to &quot;문서 업데이트&quot;">​</a></h2><p>Kotlin 문서는 몇 가지 주목할 만한 변경 사항을 받았습니다.</p><ul><li><a href="/ko/kotlin/standard-input">표준 입력 페이지</a> 개선 - Java Scanner 및 <code>readln()</code> 사용법을 알아보세요.</li><li><a href="/ko/kotlin/k2-compiler-migration-guide">K2 컴파일러 마이그레이션 가이드</a> 개선 - 성능 향상, Kotlin 라이브러리와의 호환성 및 사용자 정의 컴파일러 플러그인 처리 방법을 알아보세요.</li><li><a href="/ko/kotlin/exceptions">예외 페이지</a> 개선 - 예외, 예외를 throw하고 catch하는 방법을 알아보세요.</li><li><a href="/ko/kotlin/jvm-test-using-junit">JVM에서 JUnit을 사용한 테스트 코드 - 튜토리얼</a> 개선 - JUnit을 사용하여 테스트를 만드는 방법을 알아보세요.</li><li><a href="/ko/kotlin/native-objc-interop">Swift/Objective-C와의 상호 운용성 페이지</a> 개선 - Swift/Objective-C 코드에서 Kotlin 선언을 사용하고 Kotlin 코드에서 Objective-C 선언을 사용하는 방법을 알아보세요.</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-spm-export.html" target="_blank" rel="noreferrer">Swift 패키지 익스포트 설정 페이지</a> 개선 - Swift 패키지 관리자(Swift package manager) 의존성에서 사용할 수 있는 Kotlin/Native 출력을 설정하는 방법을 알아보세요.</li></ul><h2 id="kotlin-2-0-20-설치" tabindex="-1">Kotlin 2.0.20 설치 <a class="header-anchor" href="#kotlin-2-0-20-설치" aria-label="Permalink to &quot;Kotlin 2.0.20 설치&quot;">​</a></h2><p>IntelliJ IDEA 2023.3 및 Android Studio Iguana (2023.2.1) Canary 15부터 Kotlin 플러그인은 IDE에 포함된 번들 플러그인으로 배포됩니다. 이는 더 이상 JetBrains Marketplace에서 플러그인을 설치할 수 없음을 의미합니다.</p><p>새로운 Kotlin 버전으로 업데이트하려면 빌드 스크립트에서 Kotlin 버전을 <a href="/ko/kotlin/releases#update-to-a-new-kotlin-version">2.0.20으로 변경</a>하세요.</p>`,160))])}const f=r(c,[["render",E]]);export{C as __pageData,f as default};
