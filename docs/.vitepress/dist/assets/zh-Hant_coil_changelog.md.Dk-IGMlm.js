import{_ as i,c as l,o,ag as a}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"更新日誌","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/coil/changelog.md","filePath":"zh-Hant/coil/changelog.md","lastUpdated":1753460095000}'),c={name:"zh-Hant/coil/changelog.md"};function t(r,e,s,d,n,h){return o(),l("div",null,e[0]||(e[0]=[a(`<h1 id="更新日誌" tabindex="-1">更新日誌 <a class="header-anchor" href="#更新日誌" aria-label="Permalink to &quot;更新日誌&quot;">​</a></h1><h2 id="_3-3-0-2025-年-7-月-22-日" tabindex="-1">[3.3.0] - 2025 年 7 月 22 日 <a class="header-anchor" href="#_3-3-0-2025-年-7-月-22-日" aria-label="Permalink to &quot;[3.3.0] - 2025 年 7 月 22 日&quot;">​</a></h2><ul><li><strong>新功能</strong>：引入一個新 API，用於限制應用程式在背景執行時 Android 上 <code>MemoryCache.maxSize</code> 的大小。 <ul><li>如果設定了 <code>ImageLoader.Builder.memoryCacheMaxSizePercentWhileInBackground</code>，則 <code>ImageLoader</code> 的記憶體快取在應用程式於背景執行時將被限制為其最大大小的百分比。此設定目前預設為停用。</li><li>當應用程式進入背景時，影像將從記憶體快取中被裁剪 (trimmed)，以達到受限制的最大大小，但記憶體快取對最近裁剪的影像的弱引用不受影響。這表示如果一個影像目前在其他地方被引用（例如 <code>AsyncImage</code>、<code>ImageView</code> 等），它仍將存在於記憶體快取中。</li><li>這個 API 有助於減少背景記憶體使用量，防止應用程式過早被終止，並有助於減輕使用者設備上的記憶體壓力。</li></ul></li><li><strong>新功能</strong>：為 <code>SvgDecoder</code> 增加了 <code>Svg.Parser</code> 參數。 <ul><li>這允許在使用預設 SVG 解析器無法滿足需求時，使用自訂的 SVG 解析器。</li></ul></li><li>為 <code>SvgDecoder</code> 增加了 <code>density</code> 參數，以支援提供自訂的密度乘數。</li><li>增加 <code>Uri.Builder</code> 以支援複製和修改 <code>Uri</code>s。</li><li>增加 <code>ImageLoader.Builder.mainCoroutineContext</code> 以支援在測試中覆寫 Coil 對 <code>Dispatchers.main.immediate</code> 的使用。</li><li>修正 <code>CrossfadePainter.intrinsicSize</code> 在動畫結束時 <code>start</code> 影像被解除引用時發生變化的問題。這與 <code>CrossfadeDrawable</code> 的行為一致。</li><li>修正 <code>ImageLoaders.executeBlocking</code> 無法從 Java 存取的問題。</li><li>在 <code>coil-network-ktor3</code> 中使用 <code>kotlinx.io</code> 的 Okio 互通模組。</li><li>更新 <code>kotlinx-datetime</code> 至 <code>0.7.1</code>。 <ul><li>此版本包含二進制不相容的變更，僅影響 <code>coil-network-cache-control</code> 模組。請參閱 <a href="https://github.com/Kotlin/kotlinx-datetime?tab=readme-ov-file#deprecation-of-instant" target="_blank" rel="noreferrer">此處</a> 以獲取更多資訊。</li></ul></li><li>將 Kotlin 更新至 2.2.0。</li><li>將 Compose 更新至 1.8.2。</li><li>將 Okio 更新至 3.15.0。</li><li>將 Skiko 更新至 0.9.4.2。</li></ul><h2 id="_3-2-0-2025-年-5-月-13-日" tabindex="-1">[3.2.0] - 2025 年 5 月 13 日 <a class="header-anchor" href="#_3-2-0-2025-年-5-月-13-日" aria-label="Permalink to &quot;[3.2.0] - 2025 年 5 月 13 日&quot;">​</a></h2><p>自 <code>3.1.0</code> 以來的變更：</p><ul><li><strong>重要</strong>：由於 Compose <code>1.8.0</code> 的要求，<code>coil-compose</code> 和 <code>coil-compose-core</code> 現在需要 Java 11 位元碼。請參閱 <a href="/zh-Hant/coil/faq/">此處</a> 了解如何啟用它。</li><li>將 <code>AsyncImagePreviewHandler</code> 的函式建構子更改為返回 <code>AsyncImagePainter.State.Success</code> 而不是 <code>AsyncImagePainter.State.Loading</code>。</li><li>修正 <code>ConstraintsSizeResolver#size()</code> 中的取消問題。</li><li>修正使用 R8 建置時缺少 <code>PlatformContext</code> 的警告。</li><li>修正 <code>FakeImageLoaderEngine</code> 在返回預設 <code>FakeImageLoaderEngine</code> 響應時未設定 <code>Transition.Factory.NONE</code> 的問題。</li><li>移除 <code>ColorImage</code> 上的實驗性註解。</li><li>在 <code>CacheControlCacheStrategy</code> 中延遲解析網路標頭。</li><li>重構 <code>CircleCropTransformation</code> 和 <code>RoundedCornersTransformation</code> 以共享通用程式碼。</li><li>如果 <code>ExifOrientationStrategy</code> 不是 <code>RESPECT_PERFORMANCE</code>，則內部會回退 (fall back) 到使用 <code>BitmapFactory</code>。</li><li>將 Kotlin 更新至 2.1.20。</li><li>將 Compose 更新至 1.8.0。</li><li>將 Okio 更新至 3.11.0。</li><li>將 Skiko 更新至 0.9.4。</li><li>將 Coroutines 更新至 1.10.2。</li><li>將 <code>accompanist-drawablepainter</code> 更新至 0.37.3。</li></ul><p>自 <code>3.2.0-rc02</code> 以來的變更：</p><ul><li>如果 <code>ExifOrientationStrategy</code> 不是 <code>RESPECT_PERFORMANCE</code>，則內部會回退到使用 <code>BitmapFactory</code>。</li><li>將 Compose 更新至 1.8.0。</li><li>將 <code>accompanist-drawablepainter</code> 更新至 0.37.3。</li></ul><h2 id="_3-2-0-rc02-2025-年-4-月-26-日" tabindex="-1">[3.2.0-rc02] - 2025 年 4 月 26 日 <a class="header-anchor" href="#_3-2-0-rc02-2025-年-4-月-26-日" aria-label="Permalink to &quot;[3.2.0-rc02] - 2025 年 4 月 26 日&quot;">​</a></h2><ul><li>修正在使用 <code>KtorNetworkFetcherFactory</code> (Ktor 3) 載入非 JVM 目標上的影像時，影像請求因 <code>ClosedByteChannelException</code> 而失敗的問題。</li></ul><h2 id="_3-2-0-rc01-2025-年-4-月-24-日" tabindex="-1">[3.2.0-rc01] - 2025 年 4 月 24 日 <a class="header-anchor" href="#_3-2-0-rc01-2025-年-4-月-24-日" aria-label="Permalink to &quot;[3.2.0-rc01] - 2025 年 4 月 24 日&quot;">​</a></h2><ul><li><strong>重要</strong>：由於 Compose <code>1.8.0</code> 的要求，<code>coil-compose</code> 和 <code>coil-compose-core</code> 現在需要 Java 11 位元碼。請參閱 <a href="/zh-Hant/coil/faq/">此處</a> 了解如何啟用它。</li><li>將 <code>AsyncImagePreviewHandler</code> 的函式建構子更改為返回 <code>AsyncImagePainter.State.Success</code> 而不是 <code>AsyncImagePainter.State.Loading</code>。</li><li>修正 <code>ConstraintsSizeResolver#size()</code> 中的取消問題。</li><li>修正使用 R8 建置時缺少 <code>PlatformContext</code> 的警告。</li><li>修正 <code>FakeImageLoaderEngine</code> 在返回預設 <code>FakeImageLoaderEngine</code> 響應時未設定 <code>Transition.Factory.NONE</code> 的問題。</li><li>移除 <code>ColorImage</code> 上的實驗性註解。</li><li>在 <code>CacheControlCacheStrategy</code> 中延遲解析網路標頭。</li><li>重構 <code>CircleCropTransformation</code> 和 <code>RoundedCornersTransformation</code> 以共享通用程式碼。</li><li>在 <code>coil-network-ktor2</code> 和 <code>coil-network-ktor3</code> 中使用 <code>kotlinx.io</code> 的 Okio 互通模組。</li><li>將 Kotlin 更新至 2.1.20。</li><li>將 Compose 更新至 1.8.0-rc01。</li><li>將 Okio 更新至 3.11.0。</li><li>將 Skiko 更新至 0.9.4。</li><li>將 Coroutines 更新至 1.10.2。</li></ul><h2 id="_3-1-0-2025-年-2-月-4-日" tabindex="-1">[3.1.0] - 2025 年 2 月 4 日 <a class="header-anchor" href="#_3-1-0-2025-年-2-月-4-日" aria-label="Permalink to &quot;[3.1.0] - 2025 年 2 月 4 日&quot;">​</a></h2><ul><li>提升 <code>AsyncImage</code> 效能。 <ul><li>執行時效能提升了 25% 至 40%，具體取決於可組合項 (composable) 是被實例化還是重複使用。記憶體分配 (allocations) 也減少了 35% 至 48%。更多資訊請參閱 <a href="https://github.com/coil-kt/coil/pull/2795" target="_blank" rel="noreferrer">此處</a>。</li></ul></li><li>增加 <code>ColorImage</code> 並棄用 <code>FakeImage</code>。 <ul><li><code>ColorImage</code> 對於在測試和預覽中返回假值很有用。它解決了與 <code>FakeImage</code> 相同的用例，但在 <code>coil-core</code> 中比在 <code>coil-test</code> 中更容易存取。</li></ul></li><li>移除 <code>coil-compose-core</code> 對 <code>Dispatchers.Main.immediate</code> 的依賴。 <ul><li>這也修正了在 Paparazzi 和 Roborazzi 截圖測試中，<code>AsyncImagePainter</code> 無法同步執行 <code>ImageRequest</code> 的情況。</li></ul></li><li>增加對 <a href="https://www.ietf.org/rfc/rfc2397.txt" target="_blank" rel="noreferrer">資料 URI (data URIs)</a> 的支援，格式為：<code>data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</code>。</li><li>增加 <code>AnimatedImageDecoder.ENCODED_LOOP_COUNT</code> 以支援在 GIF 的中繼資料中使用編碼的重複計數。</li><li>為 <code>NetworkRequest</code> 增加了 <code>Extras</code> 以支援自訂擴充。</li><li>增加 <code>DiskCache.Builder.cleanupCoroutineContext</code> 並棄用 <code>DiskCache.Builder.cleanupDispatcher</code>。</li><li>增加 <code>ImageLoader.Builder.imageDecoderEnabled</code> 以選擇性停用在 API 29 及以上版本使用 <code>android.graphics.ImageDecoder</code>。</li><li>如果 <code>ImageRequest</code> 的資料類型沒有註冊的 <code>Keyer</code>，則記錄一個警告。</li><li>將 <code>CrossfadePainter</code> 設為公開。</li><li>在所有多平台目標上支援 <code>Transformation</code>。</li><li>在 <code>CacheControlCacheStrategy</code> 中支援將 0 作為 <code>Expires</code> 標頭值。</li><li>修正 <code>AsyncImage</code>/<code>SubcomposeAsyncImage</code>/<code>rememberAsyncImage</code> 在其 <code>ContentScale</code> 變更為 <code>None</code> 或從 <code>None</code> 變更時，不啟動新的 <code>ImageRequest</code> 的問題。</li><li>將 Kotlin 更新至 2.1.10。 <ul><li>注意：如果您使用 Kotlin native，此版本需要使用 Kotlin 2.1.0 或更高版本編譯，原因是一個 <a href="https://kotlinlang.org/docs/whatsnew21.html#llvm-update-from-11-1-0-to-16-0-0" target="_blank" rel="noreferrer">LLVM 更新</a>。</li></ul></li><li>將 Compose 更新至 1.7.3。</li><li>將 <code>androidx.core</code> 更新至 1.15.0。</li></ul><h2 id="_3-0-4-2024-年-11-月-25-日" tabindex="-1">[3.0.4] - 2024 年 11 月 25 日 <a class="header-anchor" href="#_3-0-4-2024-年-11-月-25-日" aria-label="Permalink to &quot;[3.0.4] - 2024 年 11 月 25 日&quot;">​</a></h2><ul><li>修正向量繪圖 (vector drawables) 未在 Android Studio 預覽中呈現的問題。</li><li>修正請求大小超過 <code>maxBitmapSize</code> 時可能出現的記憶體快取遺失問題。</li><li>修正 <code>FakeImage</code> 未在 Android 上呈現的問題。</li><li>修正當 <code>AsyncImage</code>/<code>rememberAsyncImagePainter</code>/<code>SubcomposeAsyncImage</code> 使用時，請求的 <code>Transformation</code> 發生變更時，不啟動新的影像請求的問題。</li><li>修正 <code>ScaleDrawable</code> 和 <code>CrossfadeDrawable</code> 不尊重色調狀態 (tint states) 的問題。</li><li>允許 <code>ImageDecoder</code> 解碼部分影像來源。這與 <code>BitmapFactory</code> 中的行為一致。</li><li>修正解碼後未呼叫 <code>Bitmap.prepareToDraw()</code> 的問題。</li><li><code>SvgDecoder</code> 不應對非點陣圖影像 (non-rasterized images) 返回 <code>isSampled = true</code>。</li><li>如果立即主調度器 (immediate main dispatcher) 不可用，則在 Compose 中回退到 <code>Dispatchers.Unconfined</code>。這僅用於預覽/測試環境。</li><li>將 Ktor 2 更新至 <code>2.3.13</code>。</li></ul><h2 id="_3-0-3-2024-年-11-月-14-日" tabindex="-1">[3.0.3] - 2024 年 11 月 14 日 <a class="header-anchor" href="#_3-0-3-2024-年-11-月-14-日" aria-label="Permalink to &quot;[3.0.3] - 2024 年 11 月 14 日&quot;">​</a></h2><ul><li>修正根據 <code>ImageView</code> 的 <code>ScaleType</code> 設定 <code>ImageRequest.scale</code> 的問題。</li><li>修正 <code>DiskCache</code> 在刪除檔案後不會追蹤條目移除的邊緣情況。</li><li>在記錄錯誤時，將可拋出物件 (throwable) 傳遞給 <code>Logger</code>。</li><li>不要將 <code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code> 替換為 <code>kotlin-stdlib</code>。</li></ul><h2 id="_3-0-2-2024-年-11-月-9-日" tabindex="-1">[3.0.2] - 2024 年 11 月 9 日 <a class="header-anchor" href="#_3-0-2-2024-年-11-月-9-日" aria-label="Permalink to &quot;[3.0.2] - 2024 年 11 月 9 日&quot;">​</a></h2><ul><li>修正 Android 上使用自訂 <code>CacheStrategy</code> 呼叫 <code>OkHttpNetworkFetcherFactory</code> 時崩潰的問題。</li><li>修正 <code>CacheControlCacheStrategy</code> 錯誤計算快取條目年齡的問題。</li><li>修正 <code>ImageRequest.bitmapConfig</code> 僅在 API 28 或更高版本上，且為 <code>ARGB_8888</code> 或 <code>HARDWARE</code> 時才被尊重的問題。</li></ul><h2 id="_3-0-1-2024-年-11-月-7-日" tabindex="-1">[3.0.1] - 2024 年 11 月 7 日 <a class="header-anchor" href="#_3-0-1-2024-年-11-月-7-日" aria-label="Permalink to &quot;[3.0.1] - 2024 年 11 月 7 日&quot;">​</a></h2><ul><li>修正呼叫 <code>Image.toBitmap</code> 時，如果使用硬體位圖支援的 <code>BitmapImage</code> 會崩潰的問題。</li><li>修正 <code>AsyncImageModelEqualityDelegate.Default</code> 對非 <code>ImageRequest</code> 模型比較相等性時出錯的問題。</li></ul><h2 id="_3-0-0-2024-年-11-月-4-日" tabindex="-1">[3.0.0] - 2024 年 11 月 4 日 <a class="header-anchor" href="#_3-0-0-2024-年-11-月-4-日" aria-label="Permalink to &quot;[3.0.0] - 2024 年 11 月 4 日&quot;">​</a></h2><p>Coil 3.0.0 是 Coil 的下一個主要版本，完整支援 <a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>。</p><p><a href="/zh-Hant/coil/upgrading_to_coil3/">有關 3.0.0 中的所有改進和重要變更，請查閱升級指南</a>。</p><p>自 <code>3.0.0-rc02</code> 以來的變更：</p><ul><li>移除所有剩餘的棄用方法。</li></ul><h2 id="_3-0-0-rc02-2024-年-10-月-28-日" tabindex="-1">[3.0.0-rc02] - 2024 年 10 月 28 日 <a class="header-anchor" href="#_3-0-0-rc02-2024-年-10-月-28-日" aria-label="Permalink to &quot;[3.0.0-rc02] - 2024 年 10 月 28 日&quot;">​</a></h2><p><a href="/zh-Hant/coil/upgrading_to_coil3/">有關 3.x 中的所有改進和重要變更，請查閱升級指南</a>。自 <code>3.0.0-rc01</code> 以來的變更：</p><ul><li>增加 <code>BlackholeDecoder</code>。這簡化了 <a href="/zh-Hant/coil/faq/">僅磁碟快取的預載</a>。</li><li>為 <code>ConstraintsSizeResolver</code> 和 <code>DrawScopeSizeResolver</code> 增加了 <code>remember</code> 函式。</li><li>移除 <code>EqualityDelegate</code> 作為 <code>AsyncImage</code> 的參數。相反，它應透過 <code>LocalAsyncImageModelEqualityDelegate</code> 設定。</li><li>修正當父級可組合項使用 <code>IntrinsicSize</code> 時，<code>AsyncImage</code> 不呈現的問題。</li><li>修正 <code>AsyncImage</code> 填充可用約束的問題，當 <code>AsyncImagePainter</code> 沒有子繪圖器 (child painter) 時。</li><li>修正 <code>rememberAsyncImagePainter</code> 因 <code>EqualityDelegate</code> 被忽略而導致其狀態被觀察時無限重組的問題。</li><li>修正解析包含特殊字元的 <code>File</code>/<code>Path</code> 路徑的問題。</li><li>修正 <code>VideoFrameDecoder</code> 使用自訂 <code>FileSystem</code> 實作的問題。</li><li>將 Ktor 更新至 <code>3.0.0</code>。</li><li>將 <code>androidx.annotation</code> 更新至 <code>1.9.0</code>。</li></ul><h2 id="_3-0-0-rc01-2024-年-10-月-8-日" tabindex="-1">[3.0.0-rc01] - 2024 年 10 月 8 日 <a class="header-anchor" href="#_3-0-0-rc01-2024-年-10-月-8-日" aria-label="Permalink to &quot;[3.0.0-rc01] - 2024 年 10 月 8 日&quot;">​</a></h2><p><a href="/zh-Hant/coil/upgrading_to_coil3/">有關 3.x 中的所有改進和重要變更，請查閱升級指南</a>。自 <code>3.0.0-alpha10</code> 以來的變更：</p><ul><li><strong>破壞性變更</strong>：預設停用 <code>addLastModifiedToFileCacheKey</code>，並允許每個請求單獨設定。可以使用相同的旗標重新啟用此行為。</li><li><strong>新功能</strong>：引入新的 <code>coil-network-cache-control</code> Artifact，它實現了 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noreferrer"><code>Cache-Control</code> 標頭</a> 支援。</li><li><strong>新功能</strong>：為 <code>SvgDecoder.Factory</code> 增加了 <code>scaleToDensity</code> 屬性。此屬性確保具有固有尺寸的 SVG 會乘以設備的密度（僅在 Android 上支援）。</li><li>將 <code>ExifOrientationPolicy</code> 重命名為 <code>ExifOrientationStrategy</code>。</li><li>在獲取時從 <code>MemoryCache</code> 中移除不可共享的影像。</li><li>將 <code>ConstraintsSizeResolver</code> 設為公開。</li><li>穩定 <code>setSingletonImageLoaderFactory</code>。</li><li>在 <code>coil-network-ktor3</code> 中恢復優化的 JVM I/O 函式。</li><li>將 <code>pdf</code> 加入 MIME 類型列表。</li><li>將編譯 SDK 更新至 35。</li><li>將 Kotlin 更新至 2.0.20。</li><li>將 Okio 更新至 3.9.1。</li></ul><h2 id="_3-0-0-alpha10-2024-年-8-月-7-日" tabindex="-1">[3.0.0-alpha10] - 2024 年 8 月 7 日 <a class="header-anchor" href="#_3-0-0-alpha10-2024-年-8-月-7-日" aria-label="Permalink to &quot;[3.0.0-alpha10] - 2024 年 8 月 7 日&quot;">​</a></h2><ul><li><strong>破壞性變更</strong>：將 <code>ImageLoader.Builder.networkObserverEnabled</code> 替換為 <code>NetworkFetcher</code> 的 <code>ConnectivityChecker</code> 介面。 <ul><li>要停用網路觀察器 (network observer)，請將 <code>ConnectivityChecker.ONLINE</code> 傳遞給 <code>KtorNetworkFetcherFactory</code>/<code>OkHttpNetworkFetcherFactory</code> 的建構子。</li></ul></li><li><strong>新功能</strong>：在所有平台上支援載入 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-images-resources.html" target="_blank" rel="noreferrer">Compose Multiplatform 資源</a>。要載入資源，請使用 <code>Res.getUri</code>：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;drawable/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li>為 <code>ImageLoader</code> 和 <code>ImageRequest</code> 增加 <code>maxBitmapSize</code> 屬性。 <ul><li>此屬性預設為 4096x4096，並為分配的位圖尺寸提供安全的上限。這有助於避免意外地使用 <code>Size.ORIGINAL</code> 載入非常大的影像並導致記憶體不足例外。</li></ul></li><li>將 <code>ExifOrientationPolicy</code> 轉換為一個介面以支援自訂策略。</li><li>修正 <code>Uri</code> 處理 Windows 檔案路徑的問題。</li><li>從 <code>Image</code> API 中移除 <code>@ExperimentalCoilApi</code>。</li><li>將 Kotlin 更新至 2.0.10。</li></ul><h2 id="_3-0-0-alpha09-2024-年-7-月-23-日" tabindex="-1">[3.0.0-alpha09] - 2024 年 7 月 23 日 <a class="header-anchor" href="#_3-0-0-alpha09-2024-年-7-月-23-日" aria-label="Permalink to &quot;[3.0.0-alpha09] - 2024 年 7 月 23 日&quot;">​</a></h2><ul><li><strong>破壞性變更</strong>：將 <code>io.coil-kt.coil3:coil-network-ktor</code> Artifact 重命名為 <code>io.coil-kt.coil3:coil-network-ktor2</code>，它依賴於 Ktor 2.x。此外，引入 <code>io.coil-kt.coil3:coil-network-ktor3</code>，它依賴於 Ktor 3.x。<code>wasmJs</code> 支援僅在 Ktor 3.x 中可用。</li><li><strong>新功能</strong>：增加 <code>AsyncImagePainter.restart()</code> 以手動重新啟動影像請求。</li><li>從 <code>NetworkClient</code> 和相關類別中移除 <code>@ExperimentalCoilApi</code>。</li><li>優化 <code>ImageRequest</code> 以避免不必要的 <code>Extras</code> 和 <code>Map</code> 記憶體分配。</li></ul><h2 id="_2-7-0-2024-年-7-月-17-日" tabindex="-1">[2.7.0] - 2024 年 7 月 17 日 <a class="header-anchor" href="#_2-7-0-2024-年-7-月-17-日" aria-label="Permalink to &quot;[2.7.0] - 2024 年 7 月 17 日&quot;">​</a></h2><ul><li>輕微優化內部協程 (coroutines) 使用，以提升 <code>ImageLoader.execute</code>、<code>AsyncImage</code>、<code>SubcomposeAsyncImage</code> 和 <code>rememberAsyncImagePainter</code> 的效能。(<a href="https://github.com/coil-kt/coil/pull/2205" target="_blank" rel="noreferrer">#2205</a>)</li><li>修正分塊響應 (chunked responses) 的重複網路呼叫問題。(<a href="https://github.com/coil-kt/coil/pull/2363" target="_blank" rel="noreferrer">#2363</a>)</li><li>將 Kotlin 更新至 2.0.0。</li><li>將 Compose UI 更新至 1.6.8。</li><li>將 Okio 更新至 3.9.0。</li></ul><h2 id="_3-0-0-alpha08-2024-年-7-月-8-日" tabindex="-1">[3.0.0-alpha08] - 2024 年 7 月 8 日 <a class="header-anchor" href="#_3-0-0-alpha08-2024-年-7-月-8-日" aria-label="Permalink to &quot;[3.0.0-alpha08] - 2024 年 7 月 8 日&quot;">​</a></h2><ul><li><strong>破壞性變更</strong>：將 <code>ImageRequest</code> 和 <code>ImageLoader</code> 的 <code>dispatcher</code> 方法重命名為 <code>coroutineContext</code>。例如，<code>ImageRequest.Builder.dispatcher</code> 現在是 <code>ImageRequest.Builder.coroutineContext</code>。此重命名是因為該方法現在接受任何 <code>CoroutineContext</code> 並且不再需要 <code>Dispatcher</code>。</li><li>修正：修正可能因競態條件 (race condition) 導致的 <code>IllegalStateException: Reading a state that was created after the snapshot was taken or in a snapshot that has not yet been applied</code> 錯誤。 <ul><li>注意：這重新引入了對 <code>Dispatchers.Main.immediate</code> 的軟依賴。因此，您應該在 JVM 上重新添加對 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-swing/" target="_blank" rel="noreferrer"><code>kotlinx-coroutines-swing</code></a> 的依賴。如果未匯入，則 <code>ImageRequest</code> 將不會立即分派，並且在設定 <code>ImageRequest.placeholder</code> 或從記憶體快取解析之前會有一幀的延遲。</li></ul></li></ul><h2 id="_3-0-0-alpha07-2024-年-6-月-26-日" tabindex="-1">[3.0.0-alpha07] - 2024 年 6 月 26 日 <a class="header-anchor" href="#_3-0-0-alpha07-2024-年-6-月-26-日" aria-label="Permalink to &quot;[3.0.0-alpha07] - 2024 年 6 月 26 日&quot;">​</a></h2><ul><li><strong>破壞性變更</strong>：<code>AsyncImagePainter</code> 預設不再等待 <code>onDraw</code>，而是使用 <code>Size.ORIGINAL</code>。 <ul><li>這修正了 <a href="https://github.com/coil-kt/coil/issues/1910" target="_blank" rel="noreferrer">與 Roborazzi/Paparazzi 的相容性問題</a>，並整體提升了測試的可靠性。</li><li>要恢復等待 <code>onDraw</code> 的行為，請將 <code>DrawScopeSizeResolver</code> 設定為您的 <code>ImageRequest.sizeResolver</code>。</li></ul></li><li><strong>破壞性變更</strong>：重構多平台 <code>Image</code> API。值得注意的是，<code>asCoilImage</code> 已重命名為 <code>asImage</code>。</li><li><strong>破壞性變更</strong>：<code>AsyncImagePainter.state</code> 已變更為 <code>StateFlow&lt;AsyncImagePainter.State&gt;</code>。使用 <code>collectAsState</code> 觀察其值。這提升了效能。</li><li><strong>破壞性變更</strong>：<code>AsyncImagePainter.imageLoader</code> 和 <code>AsyncImagePainter.request</code> 已合併為 <code>StateFlow&lt;AsyncImagePainter.Inputs&gt;</code>。使用 <code>collectAsState</code> 觀察其值。這提升了效能。</li><li><strong>破壞性變更</strong>：移除對 <code>android.resource://example.package.name/drawable/image</code> URI 的支援，因為它會阻止資源縮小優化。 <ul><li>如果您仍然需要其功能，可以 <a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/androidInstrumentedTest/kotlin/coil3/map/ResourceUriMapper.kt" target="_blank" rel="noreferrer">手動將 <code>ResourceUriMapper</code> 包含到您的元件註冊表 (component registry) 中</a>。</li></ul></li><li><strong>新功能</strong>：引入 <code>AsyncImagePreviewHandler</code> 以支援控制 <code>AsyncImagePainter</code> 的預覽渲染行為。 <ul><li>使用 <code>LocalAsyncImagePreviewHandler</code> 來覆寫預覽行為。</li><li>作為此變更和其他 <code>coil-compose</code> 改進的一部分，<code>AsyncImagePainter</code> 現在預設嘗試執行 <code>ImageRequest</code>，而不是預設顯示 <code>ImageRequest.placeholder</code>。<a href="https://developer.android.com/develop/ui/compose/tooling/previews#preview-limitations" target="_blank" rel="noreferrer">在預覽環境中，使用網路或檔案的請求預計會失敗</a>，但 Android 資源應該可以運作。</li></ul></li><li><strong>新功能</strong>：支援按幀索引提取視訊影像。(<a href="https://github.com/coil-kt/coil/pull/2183" target="_blank" rel="noreferrer">#2183</a>)</li><li><strong>新功能</strong>：支援將 <code>CoroutineContext</code> 傳遞給任何 <code>CoroutineDispatcher</code> 方法。(<a href="https://github.com/coil-kt/coil/pull/2241" target="_blank" rel="noreferrer">#2241</a>)。</li><li><strong>新功能</strong>：在 JS 和 WASM JS 上支援弱引用記憶體快取。</li><li>在 Compose 中不分派到 <code>Dispatchers.Main.immediate</code>。作為副作用，<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-swing/" target="_blank" rel="noreferrer"><code>kotlinx-coroutines-swing</code></a> 不再需要在 JVM 上匯入。</li><li>在 Compose 中不呼叫 <code>async</code> 並建立一個一次性對象 (disposable) 以提升效能（感謝 @mlykotom！）。(<a href="https://github.com/coil-kt/coil/pull/2205" target="_blank" rel="noreferrer">#2205</a>)</li><li>修正將全域 <code>ImageLoader</code> 額外參數傳遞給 <code>Options</code> 的問題。(<a href="https://github.com/coil-kt/coil/pull/2223" target="_blank" rel="noreferrer">#2223</a>)</li><li>修正 <code>crossfade(false)</code> 在非 Android 目標上無效的問題。</li><li>修正 VP8X 特徵旗標位元組偏移 (<a href="https://github.com/coil-kt/coil/pull/2199" target="_blank" rel="noreferrer">#2199</a>)。</li><li>將非 Android 目標上的 <code>SvgDecoder</code> 轉換為渲染到位圖，而不是在繪圖時渲染影像。這提升了效能。 <ul><li>此行為可以使用 <code>SvgDecoder(renderToBitmap)</code> 控制。</li></ul></li><li>將 <code>ScaleDrawable</code> 從 <code>coil-gif</code> 移動到 <code>coil-core</code>。</li><li>將 Kotlin 更新至 2.0.0。</li><li>將 Compose 更新至 1.6.11。</li><li>將 Okio 更新至 3.9.0。</li><li>將 Skiko 更新至 0.8.4。</li><li><a href="/zh-Hant/coil/upgrading_to_coil3/">有關 3.x 中的所有重要變更，請查閱升級指南。</a></li></ul><h2 id="_3-0-0-alpha06-2024-年-2-月-29-日" tabindex="-1">[3.0.0-alpha06] - 2024 年 2 月 29 日 <a class="header-anchor" href="#_3-0-0-alpha06-2024-年-2-月-29-日" aria-label="Permalink to &quot;[3.0.0-alpha06] - 2024 年 2 月 29 日&quot;">​</a></h2><ul><li>將 Skiko 降級至 0.7.93。</li><li><a href="/zh-Hant/coil/upgrading_to_coil3/">有關 3.x 中的所有重要變更，請查閱升級指南。</a></li></ul><h2 id="_3-0-0-alpha05-2024-年-2-月-28-日" tabindex="-1">[3.0.0-alpha05] - 2024 年 2 月 28 日 <a class="header-anchor" href="#_3-0-0-alpha05-2024-年-2-月-28-日" aria-label="Permalink to &quot;[3.0.0-alpha05] - 2024 年 2 月 28 日&quot;">​</a></h2><ul><li><strong>新功能</strong>：支援 <code>wasmJs</code> 目標。</li><li>建立 <code>DrawablePainter</code> 和 <code>DrawableImage</code>，以支援在非 Android 平台上繪製非由 <code>Bitmap</code> 支援的 <code>Image</code>。 <ul><li><code>Image</code> API 仍處於實驗階段，在 Alpha 版本之間可能會有所變更。</li></ul></li><li>更新 <code>ContentPainterModifier</code> 以實作 <code>Modifier.Node</code>。</li><li>修正：在背景執行緒上延遲註冊元件回呼和網路觀察器。這修正了通常會在主執行緒上發生的緩慢初始化問題。</li><li>修正：修正 <code>ImageLoader.Builder.placeholder/error/fallback</code> 未被 <code>ImageRequest</code> 使用的問題。</li><li>將 Compose 更新至 1.6.0。</li><li>將 Coroutines 更新至 1.8.0。</li><li>將 Okio 更新至 3.8.0。</li><li>將 Skiko 更新至 0.7.94。</li><li><a href="/zh-Hant/coil/upgrading_to_coil3/">有關 3.x 中的所有重要變更，請查閱升級指南。</a></li></ul><h2 id="_2-6-0-2024-年-2-月-23-日" tabindex="-1">[2.6.0] - 2024 年 2 月 23 日 <a class="header-anchor" href="#_2-6-0-2024-年-2-月-23-日" aria-label="Permalink to &quot;[2.6.0] - 2024 年 2 月 23 日&quot;">​</a></h2><ul><li>將 <code>rememberAsyncImagePainter</code>、<code>AsyncImage</code> 和 <code>SubcomposeAsyncImage</code> 設為 <a href="https://developer.android.com/jetpack/compose/performance/stability#functions" target="_blank" rel="noreferrer">可重新啟動和可跳過</a>。這透過避免重新組合 (recomposition)，除非可組合項的其中一個參數發生變更，從而提升了效能。 <ul><li>為 <code>rememberAsyncImagePainter</code>、<code>AsyncImage</code> 和 <code>SubcomposeAsyncImage</code> 增加了可選的 <code>modelEqualityDelegate</code> 參數，以控制 <code>model</code> 是否會觸發重新組合。</li></ul></li><li>更新 <code>ContentPainterModifier</code> 以實作 <code>Modifier.Node</code>。</li><li>修正：在背景執行緒上延遲註冊元件回呼和網路觀察器。這修正了通常會在主執行緒上發生的緩慢初始化問題。</li><li>修正：避免在 <code>rememberAsyncImagePainter</code>、<code>AsyncImage</code> 和 <code>SubcomposeAsyncImage</code> 中，如果 <code>ImageRequest.listener</code> 或 <code>ImageRequest.target</code> 發生變更時重新啟動新的影像請求。</li><li>修正：不要在 <code>AsyncImagePainter</code> 中觀察影像請求兩次。</li><li>將 Kotlin 更新至 1.9.22。</li><li>將 Compose 更新至 1.6.1。</li><li>將 Okio 更新至 3.8.0。</li><li>將 <code>androidx.collection</code> 更新至 1.4.0。</li><li>將 <code>androidx.lifecycle</code> 更新至 2.7.0。</li></ul><h2 id="_3-0-0-alpha04-2024-年-2-月-1-日" tabindex="-1">[3.0.0-alpha04] - 2024 年 2 月 1 日 <a class="header-anchor" href="#_3-0-0-alpha04-2024-年-2-月-1-日" aria-label="Permalink to &quot;[3.0.0-alpha04] - 2024 年 2 月 1 日&quot;">​</a></h2><ul><li><strong>破壞性變更</strong>：從 <code>OkHttpNetworkFetcherFactory</code> 和 <code>KtorNetworkFetcherFactory</code> 的公開 API 中移除 <code>Lazy</code>。</li><li>在 <code>OkHttpNetworkFetcherFactory</code> 中公開 <code>Call.Factory</code> 而非 <code>OkHttpClient</code>。</li><li>將 <code>NetworkResponseBody</code> 轉換為包裹 <code>ByteString</code>。</li><li>將 Compose 降級至 1.5.12。</li><li><a href="/zh-Hant/coil/upgrading_to_coil3/">有關所有重要變更，請查閱升級指南。</a></li></ul><h2 id="_3-0-0-alpha03-2024-年-1-月-20-日" tabindex="-1">[3.0.0-alpha03] - 2024 年 1 月 20 日 <a class="header-anchor" href="#_3-0-0-alpha03-2024-年-1-月-20-日" aria-label="Permalink to &quot;[3.0.0-alpha03] - 2024 年 1 月 20 日&quot;">​</a></h2><ul><li><strong>破壞性變更</strong>：<code>coil-network</code> 已重命名為 <code>coil-network-ktor</code>。此外，新增了一個 <code>coil-network-okhttp</code> Artifact，它依賴於 OkHttp 且不需要指定 Ktor 引擎。 <ul><li>根據您匯入的 Artifact，您可以手動使用 <code>KtorNetworkFetcherFactory</code> 或 <code>OkHttpNetworkFetcherFactory</code> 來引用 <code>Fetcher.Factory</code>。</li></ul></li><li>支援在 Apple 平台上載入 <code>NSUrl</code>。</li><li>為 <code>AsyncImage</code> 增加 <code>clipToBounds</code> 參數。</li><li><a href="/zh-Hant/coil/upgrading_to_coil3/">有關所有重要變更，請查閱升級指南。</a></li></ul><h2 id="_3-0-0-alpha02-2024-年-1-月-10-日" tabindex="-1">[3.0.0-alpha02] - 2024 年 1 月 10 日 <a class="header-anchor" href="#_3-0-0-alpha02-2024-年-1-月-10-日" aria-label="Permalink to &quot;[3.0.0-alpha02] - 2024 年 1 月 10 日&quot;">​</a></h2><ul><li><strong>破壞性變更</strong>：<code>coil-gif</code>、<code>coil-network</code>、<code>coil-svg</code> 和 <code>coil-video</code> 的套件已更新，使其所有類別都分別屬於 <code>coil.gif</code>、<code>coil.network</code>、<code>coil.svg</code> 和 <code>coil.video</code>。這有助於避免與其他 Artifact 的類別名稱衝突。</li><li><strong>破壞性變更</strong>：<code>ImageDecoderDecoder</code> 已重命名為 <code>AnimatedImageDecoder</code>。</li><li><strong>新功能</strong>：<code>coil-gif</code>、<code>coil-network</code>、<code>coil-svg</code> 和 <code>coil-video</code> 的元件現在會自動添加到每個 <code>ImageLoader</code> 的 <code>ComponentRegistry</code> 中。 <ul><li>需要說明的是，與 <code>3.0.0-alpha01</code> 不同，<strong>您不需要手動將 <code>NetworkFetcher.Factory()</code> 添加到您的 <code>ComponentRegistry</code> 中</strong>。只需匯入 <code>io.coil-kt.coil3:coil-network:[version]</code> 和 <a href="https://ktor.io/docs/http-client-engines.html#dependencies" target="_blank" rel="noreferrer">一個 Ktor 引擎</a> 就足以載入網路影像。</li><li>手動將這些元件添加到 <code>ComponentRegistry</code> 也是安全的。任何手動添加的元件優先於自動添加的元件。</li><li>如果需要，可以使用 <code>ImageLoader.Builder.serviceLoaderEnabled(false)</code> 停用此行為。</li></ul></li><li><strong>新功能</strong>：在所有平台上支援 <code>coil-svg</code>。它在 Android 上由 <a href="https://bigbadaboom.github.io/androidsvg/" target="_blank" rel="noreferrer">AndroidSVG</a> 提供支援，在非 Android 平台上由 <a href="https://api.skia.org/classSkSVGDOM.html" target="_blank" rel="noreferrer">SVGDOM</a> 提供支援。</li><li>Coil 現在內部使用 Android 的 <a href="https://developer.android.com/reference/android/graphics/ImageDecoder" target="_blank" rel="noreferrer"><code>ImageDecoder</code></a> API，這在直接從檔案、資源或內容 URI 解碼時具有效能優勢。</li><li>修正：多個 <code>coil3.Uri</code> 解析修正。</li><li><a href="/zh-Hant/coil/upgrading_to_coil3/">有關所有重要變更，請查閱升級指南。</a></li></ul><h2 id="_3-0-0-alpha01-2023-年-12-月-30-日" tabindex="-1">[3.0.0-alpha01] - 2023 年 12 月 30 日 <a class="header-anchor" href="#_3-0-0-alpha01-2023-年-12-月-30-日" aria-label="Permalink to &quot;[3.0.0-alpha01] - 2023 年 12 月 30 日&quot;">​</a></h2><ul><li><strong>新功能</strong>：<a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 支援。Coil 現在是一個 Kotlin Multiplatform 函式庫，支援 Android、JVM、iOS、macOS 和 Javascript。</li><li>Coil 的 Maven 座標已更新為 <code>io.coil-kt.coil3</code>，其匯入已更新為 <code>coil3</code>。這使得 Coil 3 可以與 Coil 2 並行運行，而不會產生二進制相容性問題。例如，<code>io.coil-kt:coil:[version]</code> 現在是 <code>io.coil-kt.coil3:coil:[version]</code>。</li><li><code>coil-base</code> 和 <code>coil-compose-base</code> Artifact 已分別重命名為 <code>coil-core</code> 和 <code>coil-compose-core</code>，以與 Coroutines、Ktor 和 AndroidX 使用的命名慣例保持一致。</li><li><a href="/zh-Hant/coil/upgrading_to_coil3/">有關所有重要變更，請查閱升級指南。</a></li></ul><h2 id="_2-5-0-2023-年-10-月-30-日" tabindex="-1">[2.5.0] - 2023 年 10 月 30 日 <a class="header-anchor" href="#_2-5-0-2023-年-10-月-30-日" aria-label="Permalink to &quot;[2.5.0] - 2023 年 10 月 30 日&quot;">​</a></h2><ul><li><strong>新功能</strong>：在 <code>coil-video</code> 中增加 <code>MediaDataSourceFetcher.Factory</code> 以支援解碼 <code>MediaDataSource</code> 實作。(<a href="https://github.com/coil-kt/coil/pull/1795" target="_blank" rel="noreferrer">#1795</a>)</li><li>將 <code>SHIFT6m</code> 裝置添加到硬體位圖黑名單。(<a href="https://github.com/coil-kt/coil/pull/1812" target="_blank" rel="noreferrer">#1812</a>)</li><li>修正：防範繪圖器 (painters) 返回具有一個無界維度 (unbounded dimension) 的尺寸。(<a href="https://github.com/coil-kt/coil/pull/1826" target="_blank" rel="noreferrer">#1826</a>)</li><li>修正：當快取標頭包含非 ASCII 字元時，磁碟快取在 <code>304 Not Modified</code> 後載入失敗。(<a href="https://github.com/coil-kt/coil/pull/1839" target="_blank" rel="noreferrer">#1839</a>)</li><li>修正：<code>FakeImageEngine</code> 未更新攔截器鏈的請求。(<a href="https://github.com/coil-kt/coil/pull/1905" target="_blank" rel="noreferrer">#1905</a>)</li><li>將編譯 SDK 更新至 34。</li><li>將 Kotlin 更新至 1.9.10。</li><li>將 Coroutines 更新至 1.7.3。</li><li>將 <code>accompanist-drawablepainter</code> 更新至 0.32.0。</li><li>將 <code>androidx.annotation</code> 更新至 1.7.0。</li><li>將 <code>androidx.compose.foundation</code> 更新至 1.5.4。</li><li>將 <code>androidx.core</code> 更新至 1.12.0。</li><li>將 <code>androidx.exifinterface:exifinterface</code> 更新至 1.3.6。</li><li>將 <code>androidx.lifecycle</code> 更新至 2.6.2。</li><li>將 <code>com.squareup.okhttp3</code> 更新至 4.12.0。</li><li>將 <code>com.squareup.okio</code> 更新至 3.6.0。</li></ul><h2 id="_2-4-0-2023-年-5-月-21-日" tabindex="-1">[2.4.0] - 2023 年 5 月 21 日 <a class="header-anchor" href="#_2-4-0-2023-年-5-月-21-日" aria-label="Permalink to &quot;[2.4.0] - 2023 年 5 月 21 日&quot;">​</a></h2><ul><li>將 <code>DiskCache</code> 的 <code>get</code>/<code>edit</code> 重命名為 <code>openSnapshot</code>/<code>openEditor</code>。</li><li>不要在 <code>AsyncImagePainter</code> 中自動將 <code>ColorDrawable</code> 轉換為 <code>ColorPainter</code>。</li><li>使用 <code>@NonRestartableComposable</code> 註解簡單的 <code>AsyncImage</code> 重載。</li><li>修正：在 <code>ImageSource</code> 中惰性呼叫 <code>Context.cacheDir</code>。</li><li>修正：修正發布 <code>coil-bom</code>。</li><li>修正：修正當硬體位圖停用時，總是將位圖設定為 <code>ARGB_8888</code> 的問題。</li><li>將 Kotlin 更新至 1.8.21。</li><li>將 Coroutines 更新至 1.7.1。</li><li>將 <code>accompanist-drawablepainter</code> 更新至 0.30.1。</li><li>將 <code>androidx.compose.foundation</code> 更新至 1.4.3。</li><li>將 <code>androidx.profileinstaller:profileinstaller</code> 更新至 1.3.1。</li><li>將 <code>com.squareup.okhttp3</code> 更新至 4.11.0。</li></ul><h2 id="_2-3-0-2023-年-3-月-25-日" tabindex="-1">[2.3.0] - 2023 年 3 月 25 日 <a class="header-anchor" href="#_2-3-0-2023-年-3-月-25-日" aria-label="Permalink to &quot;[2.3.0] - 2023 年 3 月 25 日&quot;">​</a></h2><ul><li><strong>新功能</strong>：引入一個新的 <code>coil-test</code> Artifact，其中包括 <code>FakeImageLoaderEngine</code>。此類別對於硬編碼影像載入器響應非常有用，可確保測試中響應的一致性和同步性（從主執行緒）。請參閱 <a href="/zh-Hant/coil/testing">此處</a> 以獲取更多資訊。</li><li><strong>新功能</strong>：為 <code>coil-base</code> (Coil 的子模組) 和 <code>coil-compose-base</code> (Coil-Compose 的子模組) 增加 <a href="https://developer.android.com/topic/performance/baselineprofiles/overview" target="_blank" rel="noreferrer">基準設定檔 (baseline profiles)</a>。 <ul><li>這提升了 Coil 的運行時效能，並應根據您的應用程式如何使用 Coil 提供 <a href="https://github.com/coil-kt/coil/tree/main/coil-benchmark/benchmark_output.md" target="_blank" rel="noreferrer">更好的幀時間</a>。</li></ul></li><li>修正：修正解析包含編碼資料的 <code>file://</code> URI 的問題。 <a href="https://github.com/coil-kt/coil/pull/1601" target="_blank" rel="noreferrer">#1601</a></li><li>修正：<code>DiskCache</code> 現在會正確計算其最大大小，如果傳遞給它的目錄不存在。 <a href="https://github.com/coil-kt/coil/pull/1620" target="_blank" rel="noreferrer">#1620</a></li><li>將 <code>Coil.reset</code> 設為公開 API。 <a href="https://github.com/coil-kt/coil/pull/1506" target="_blank" rel="noreferrer">#1506</a></li><li>啟用 Java 預設方法生成。 <a href="https://github.com/coil-kt/coil/pull/1491" target="_blank" rel="noreferrer">#1491</a></li><li>將 Kotlin 更新至 1.8.10。</li><li>將 <code>accompanist-drawablepainter</code> 更新至 0.30.0。</li><li>將 <code>androidx.annotation</code> 更新至 1.6.0。</li><li>將 <code>androidx.appcompat:appcompat-resources</code> 更新至 1.6.1。</li><li>將 <code>androidx.compose.foundation</code> 更新至 1.4.0。</li><li>將 <code>androidx.core</code> 更新至 1.9.0。</li><li>將 <code>androidx.exifinterface:exifinterface</code> 更新至 1.3.6。</li><li>將 <code>androidx.lifecycle</code> 更新至 2.6.1。</li><li>將 <code>okio</code> 更新至 3.3.0。</li></ul><h2 id="_2-2-2-2022-年-10-月-1-日" tabindex="-1">[2.2.2] - 2022 年 10 月 1 日 <a class="header-anchor" href="#_2-2-2-2022-年-10-月-1-日" aria-label="Permalink to &quot;[2.2.2] - 2022 年 10 月 1 日&quot;">​</a></h2><ul><li>確保影像載入器在註冊其系統回呼之前完全初始化。 <a href="https://github.com/coil-kt/coil/pull/1465" target="_blank" rel="noreferrer">#1465</a></li><li>在 API 30+ 上，在 <code>VideoFrameDecoder</code> 中設定首選位圖設定，以避免條帶。 <a href="https://github.com/coil-kt/coil/pull/1487" target="_blank" rel="noreferrer">#1487</a></li><li>修正 <code>FileUriMapper</code> 中解析包含 <code>#</code> 的路徑的問題。 <a href="https://github.com/coil-kt/coil/pull/1466" target="_blank" rel="noreferrer">#1466</a></li><li>修正從磁碟快取讀取非 ascii 標頭響應的問題。 <a href="https://github.com/coil-kt/coil/pull/1468" target="_blank" rel="noreferrer">#1468</a></li><li>修正解碼資產子資料夾內視訊的問題。 <a href="https://github.com/coil-kt/coil/pull/1489" target="_blank" rel="noreferrer">#1489</a></li><li>將 <code>androidx.annotation</code> 更新至 1.5.0。</li></ul><h2 id="_2-2-1-2022-年-9-月-8-日" tabindex="-1">[2.2.1] - 2022 年 9 月 8 日 <a class="header-anchor" href="#_2-2-1-2022-年-9-月-8-日" aria-label="Permalink to &quot;[2.2.1] - 2022 年 9 月 8 日&quot;">​</a></h2><ul><li>修正：<code>RoundedCornersTransformation</code> 現在能正確縮放 <code>input</code> 位圖。</li><li>移除對 <code>kotlin-parcelize</code> 外掛的依賴。</li><li>將編譯 SDK 更新至 33。</li><li>將 <code>androidx.appcompat:appcompat-resources</code> 降級至 1.4.2 以解決 <a href="https://github.com/coil-kt/coil/issues/1423" target="_blank" rel="noreferrer">#1423</a>。</li></ul><h2 id="_2-2-0-2022-年-8-月-16-日" tabindex="-1">[2.2.0] - 2022 年 8 月 16 日 <a class="header-anchor" href="#_2-2-0-2022-年-8-月-16-日" aria-label="Permalink to &quot;[2.2.0] - 2022 年 8 月 16 日&quot;">​</a></h2><ul><li><strong>新功能</strong>：在 <code>coil-video</code> 中增加 <code>ImageRequest.videoFramePercent</code> 以支援將視訊幀指定為視訊持續時間的百分比。</li><li><strong>新功能</strong>：增加 <code>ExifOrientationPolicy</code> 以配置 <code>BitmapFactoryDecoder</code> 如何處理 EXIF 方向資料。</li><li>修正：如果在 <code>RoundedCornersTransformation</code> 中傳遞了具有未定義維度的尺寸，則不會拋出例外。</li><li>修正：將 GIF 的幀延遲讀取為兩個無符號位元組而不是一個有符號位元組。</li><li>將 Kotlin 更新至 1.7.10。</li><li>將 Coroutines 更新至 1.6.4。</li><li>將 Compose 更新至 1.2.1。</li><li>將 OkHttp 更新至 4.10.0。</li><li>將 Okio 更新至 3.2.0。</li><li>將 <code>accompanist-drawablepainter</code> 更新至 0.25.1。</li><li>將 <code>androidx.annotation</code> 更新至 1.4.0。</li><li>將 <code>androidx.appcompat:appcompat-resources</code> 更新至 1.5.0。</li><li>將 <code>androidx.core</code> 更新至 1.8.0。</li></ul><h2 id="_2-1-0-2022-年-5-月-17-日" tabindex="-1">[2.1.0] - 2022 年 5 月 17 日 <a class="header-anchor" href="#_2-1-0-2022-年-5-月-17-日" aria-label="Permalink to &quot;[2.1.0] - 2022 年 5 月 17 日&quot;">​</a></h2><ul><li><strong>新功能</strong>：支援載入 <code>ByteArray</code>s。(<a href="https://github.com/coil-kt/coil/pull/1202" target="_blank" rel="noreferrer">#1202</a>)</li><li><strong>新功能</strong>：支援使用 <code>ImageRequest.Builder.css</code> 為 SVG 設定自訂 CSS 規則。(<a href="https://github.com/coil-kt/coil/pull/1210" target="_blank" rel="noreferrer">#1210</a>)</li><li>修正：將 <code>GenericViewTarget</code> 的私有方法轉換為受保護的。(<a href="https://github.com/coil-kt/coil/pull/1273" target="_blank" rel="noreferrer">#1273</a>)</li><li>將編譯 SDK 更新至 32。(<a href="https://github.com/coil-kt/coil/pull/1268" target="_blank" rel="noreferrer">#1268</a>)</li></ul><h2 id="_2-0-0-2022-年-5-月-10-日" tabindex="-1">[2.0.0] - 2022 年 5 月 10 日 <a class="header-anchor" href="#_2-0-0-2022-年-5-月-10-日" aria-label="Permalink to &quot;[2.0.0] - 2022 年 5 月 10 日&quot;">​</a></h2><p>Coil 2.0.0 是函式庫的一個主要迭代版本，包含破壞性變更。請查閱 <a href="/zh-Hant/coil/upgrading/">升級指南</a> 以了解如何升級。</p><ul><li><strong>新功能</strong>：在 <code>coil-compose</code> 中引入 <code>AsyncImage</code>。請查閱<a href="/zh-Hant/coil/compose/">文件</a>以獲取更多資訊。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 顯示來自網路的影像。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 顯示來自網路的影像，帶有預留位置、圓形裁剪和交叉淡入動畫。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalContext.current)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    placeholder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(R.drawable.placeholder),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(R.string.description),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CircleShape)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><strong>新功能</strong>：引入公開的 <code>DiskCache</code> API。 <ul><li>使用 <code>ImageLoader.Builder.diskCache</code> 和 <code>DiskCache.Builder</code> 配置磁碟快取。</li><li>您不應將 OkHttp 的 <code>Cache</code> 與 Coil 2.0 一起使用。請參閱 <a href="/zh-Hant/coil/upgrading_to_coil2/">此處</a> 以獲取更多資訊。</li><li><code>Cache-Control</code> 和其他快取標頭仍受支援 - 除了 <code>Vary</code> 標頭，因為快取僅檢查 URL 是否匹配。此外，只有響應碼在 [200..300) 範圍內的響應才會被快取。</li><li>升級到 2.0 時，現有磁碟快取將被清除。</li></ul></li><li>最低支援 API 現在是 21。</li><li><code>ImageRequest</code> 的預設 <code>Scale</code> 現在是 <code>Scale.FIT</code>。 <ul><li>此變更旨在使 <code>ImageRequest.scale</code> 與其他具有預設 <code>Scale</code> 的類別保持一致。</li><li>帶有 <code>ImageViewTarget</code> 的請求仍會自動偵測其 <code>Scale</code>。</li></ul></li><li>重構影像管道類別： <ul><li><code>Mapper</code>、<code>Fetcher</code> 和 <code>Decoder</code> 已重構以更靈活。</li><li><code>Fetcher.key</code> 已替換為新的 <code>Keyer</code> 介面。<code>Keyer</code> 從輸入資料建立快取鍵。</li><li>增加 <code>ImageSource</code>，它允許 <code>Decoder</code> 直接使用 Okio 的檔案系統 API 讀取 <code>File</code>。</li></ul></li><li>重構 Jetpack Compose 整合： <ul><li><code>rememberImagePainter</code> 和 <code>ImagePainter</code> 已分別重命名為 <code>rememberAsyncImagePainter</code> 和 <code>AsyncImagePainter</code>。</li><li>棄用 <code>LocalImageLoader</code>。請查閱棄用訊息以獲取更多資訊。</li></ul></li><li>停用生成運行時非空斷言。 <ul><li>如果您使用 Java，將 null 作為非空註解參數傳遞給函式將不再立即拋出 <code>NullPointerException</code>。Kotlin 的編譯時空安全會防止這種情況發生。</li><li>此變更可使函式庫的大小更小。</li></ul></li><li><code>Size</code> 現在由兩個 <code>Dimension</code> 值（用於寬度和高度）組成。<code>Dimension</code> 可以是正像素值或 <code>Dimension.Undefined</code>。請參閱 <a href="/zh-Hant/coil/upgrading/">此處</a> 以獲取更多資訊。</li><li><code>BitmapPool</code> 和 <code>PoolableViewTarget</code> 已從函式庫中移除。</li><li><code>VideoFrameFileFetcher</code> 和 <code>VideoFrameUriFetcher</code> 已從函式庫中移除。請改用 <code>VideoFrameDecoder</code>，它支援所有資料來源。</li><li><a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/BlurTransformation.kt" target="_blank" rel="noreferrer"><code>BlurTransformation</code></a> 和 <a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/GrayscaleTransformation.kt" target="_blank" rel="noreferrer"><code>GrayscaleTransformation</code></a> 已從函式庫中移除。如果您使用它們，可以將其程式碼複製到您的專案中。</li><li>將 <code>Transition.transition</code> 更改為非暫停函式，因為不再需要暫停過渡直到其完成。</li><li>增加對 <code>bitmapFactoryMaxParallelism</code> 的支援，該屬性限制進行中的 <code>BitmapFactory</code> 操作的最大數量。此值預設為 4，這提升了 UI 效能。</li><li>增加對 <code>interceptorDispatcher</code>、<code>fetcherDispatcher</code>、<code>decoderDispatcher</code> 和 <code>transformationDispatcher</code> 的支援。</li><li>增加 <code>GenericViewTarget</code>，它處理常見的 <code>ViewTarget</code> 邏輯。</li><li>增加 <code>ByteBuffer</code> 到預設支援的資料類型中。</li><li><code>Disposable</code> 已重構並公開了底層 <code>ImageRequest</code> 的 job。</li><li>重構 <code>MemoryCache</code> API。</li><li>如果 <code>ImageRequest.fallback</code> 為 null，則 <code>ImageRequest.error</code> 現在會在 <code>Target</code> 上設定。</li><li><code>Transformation.key</code> 已替換為 <code>Transformation.cacheKey</code>。</li><li>將 Kotlin 更新至 1.6.10。</li><li>將 Compose 更新至 1.1.1。</li><li>將 OkHttp 更新至 4.9.3。</li><li>將 Okio 更新至 3.0.0。</li></ul><p>自 <code>2.0.0-rc03</code> 以來的變更：</p><ul><li>將 <code>Dimension.Original</code> 轉換為 <code>Dimension.Undefined</code>。 <ul><li>這稍微改變了非像素維度的語義，以修正尺寸系統中的一些邊緣情況（<a href="https://github.com/coil-kt/coil/issues/1246" target="_blank" rel="noreferrer">範例</a>）。</li></ul></li><li>如果 ContentScale 為 None，則使用 <code>Size.ORIGINAL</code> 載入影像。</li><li>修正先應用 <code>ImageView.load</code> 建構器引數而不是最後應用。</li><li>修正如果響應未修改則不組合 HTTP 標頭的問題。</li></ul><h2 id="_2-0-0-rc03-2022-年-4-月-11-日" tabindex="-1">[2.0.0-rc03] - 2022 年 4 月 11 日 <a class="header-anchor" href="#_2-0-0-rc03-2022-年-4-月-11-日" aria-label="Permalink to &quot;[2.0.0-rc03] - 2022 年 4 月 11 日&quot;">​</a></h2><ul><li>移除 <code>ScaleResolver</code> 介面。</li><li>將 <code>Size</code> 建構子轉換為函式。</li><li>將 <code>Dimension.Pixels</code> 的 <code>toString</code> 更改為僅為其像素值。</li><li>防範 <code>SystemCallbacks.onTrimMemory</code> 中的罕見崩潰。</li><li>將 Coroutines 更新至 1.6.1。</li></ul><h2 id="_2-0-0-rc02-2022-年-3-月-20-日" tabindex="-1">[2.0.0-rc02] - 2022 年 3 月 20 日 <a class="header-anchor" href="#_2-0-0-rc02-2022-年-3-月-20-日" aria-label="Permalink to &quot;[2.0.0-rc02] - 2022 年 3 月 20 日&quot;">​</a></h2><ul><li>還原 <code>ImageRequest</code> 的預設尺寸為當前顯示尺寸，而不是 <code>Size.ORIGINAL</code>。</li><li>修正 <code>DiskCache.Builder</code> 被標記為實驗性的問題。只有 <code>DiskCache</code> 的方法是實驗性的。</li><li>修正將影像載入到 <code>ImageView</code> 中，如果其中一個維度為 <code>WRAP_CONTENT</code>，則會以原始尺寸載入影像而不是適應限定維度的情況。</li><li>移除 <code>MemoryCache.Key</code>、<code>MemoryCache.Value</code> 和 <code>Parameters.Entry</code> 中的元件函式。</li></ul><h2 id="_2-0-0-rc01-2022-年-3-月-2-日" tabindex="-1">[2.0.0-rc01] - 2022 年 3 月 2 日 <a class="header-anchor" href="#_2-0-0-rc01-2022-年-3-月-2-日" aria-label="Permalink to &quot;[2.0.0-rc01] - 2022 年 3 月 2 日&quot;">​</a></h2><p>自 <code>1.4.0</code> 以來的重大變更：</p><ul><li>最低支援 API 現在是 21。</li><li>重構 Jetpack Compose 整合。 <ul><li><code>rememberImagePainter</code> 已重命名為 <code>rememberAsyncImagePainter</code>。</li><li>增加對 <code>AsyncImage</code> 和 <code>SubcomposeAsyncImage</code> 的支援。請查閱<a href="/zh-Hant/coil/compose/">文件</a>以獲取更多資訊。</li><li>棄用 <code>LocalImageLoader</code>。請查閱棄用訊息以獲取更多資訊。</li></ul></li><li>Coil 2.0 有自己的磁碟快取實作，不再依賴 OkHttp 進行磁碟快取。 <ul><li>使用 <code>ImageLoader.Builder.diskCache</code> 和 <code>DiskCache.Builder</code> 配置磁碟快取。</li><li>您<strong>不應</strong>將 OkHttp 的 <code>Cache</code> 與 Coil 2.0 一起使用，因為如果在寫入時執行緒被中斷，快取可能會損壞。</li><li><code>Cache-Control</code> 和其他快取標頭仍受支援 - 除了 <code>Vary</code> 標頭，因為快取僅檢查 URL 是否匹配。此外，只有響應碼在 [200..300) 範圍內的響應才會被快取。</li><li>升級到 2.0 時，現有磁碟快取將被清除。</li></ul></li><li><code>ImageRequest</code> 的預設 <code>Scale</code> 現在是 <code>Scale.FIT</code>。 <ul><li>此變更旨在使 <code>ImageRequest.scale</code> 與其他具有預設 <code>Scale</code> 的類別保持一致。</li><li>帶有 <code>ImageViewTarget</code> 的請求仍會自動偵測其 <code>Scale</code>。</li></ul></li><li><code>ImageRequest</code> 的預設尺寸現在是 <code>Size.ORIGINAL</code>。</li><li>重構影像管道類別： <ul><li><code>Mapper</code>、<code>Fetcher</code> 和 <code>Decoder</code> 已重構以更靈活。</li><li><code>Fetcher.key</code> 已替換為新的 <code>Keyer</code> 介面。<code>Keyer</code> 從輸入資料建立快取鍵。</li><li>增加 <code>ImageSource</code>，它允許 <code>Decoder</code> 直接使用 Okio 的檔案系統 API 讀取 <code>File</code>。</li></ul></li><li>停用生成運行時非空斷言。 <ul><li>如果您使用 Java，將 null 作為非空註解參數傳遞給函式將不再立即拋出 <code>NullPointerException</code>。如果您使用 Kotlin，則基本沒有變化。</li><li>此變更可使函式庫的大小更小。</li></ul></li><li><code>Size</code> 現在由兩個 <code>Dimension</code> 值（用於寬度和高度）組成。<code>Dimension</code> 可以是正像素值或 <code>Dimension.Original</code>。</li><li><code>BitmapPool</code> 和 <code>PoolableViewTarget</code> 已從函式庫中移除。</li><li><code>VideoFrameFileFetcher</code> 和 <code>VideoFrameUriFetcher</code> 已從函式庫中移除。請改用 <code>VideoFrameDecoder</code>，它支援所有資料來源。</li><li><a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/BlurTransformation.kt" target="_blank" rel="noreferrer"><code>BlurTransformation</code></a> 和 <a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/GrayscaleTransformation.kt" target="_blank" rel="noreferrer"><code>GrayscaleTransformation</code></a> 已從函式庫中移除。如果您使用它們，可以將其程式碼複製到您的專案中。</li><li>將 <code>Transition.transition</code> 更改為非暫停函式，因為不再需要暫停過渡直到其完成。</li><li>增加對 <code>bitmapFactoryMaxParallelism</code> 的支援，該屬性限制進行中的 <code>BitmapFactory</code> 操作的最大數量。此值預設為 4，這提升了 UI 效能。</li><li>增加對 <code>interceptorDispatcher</code>、<code>fetcherDispatcher</code>、<code>decoderDispatcher</code> 和 <code>transformationDispatcher</code> 的支援。</li><li>增加 <code>GenericViewTarget</code>，它處理常見的 <code>ViewTarget</code> 邏輯。</li><li>增加 <code>ByteBuffer</code> 到預設支援的資料類型中。</li><li><code>Disposable</code> 已重構並公開了底層 <code>ImageRequest</code> 的 job。</li><li>重構 <code>MemoryCache</code> API。</li><li>如果 <code>ImageRequest.fallback</code> 為 null，則 <code>ImageRequest.error</code> 現在會在 <code>Target</code> 上設定。</li><li><code>Transformation.key</code> 已替換為 <code>Transformation.cacheKey</code>。</li><li>將 Kotlin 更新至 1.6.10。</li><li>將 Compose 更新至 1.1.1。</li><li>將 OkHttp 更新至 4.9.3。</li><li>將 Okio 更新至 3.0.0。</li></ul><p>自 <code>2.0.0-alpha09</code> 以來的變更：</p><ul><li>移除 <code>-Xjvm-default=all</code> 編譯器旗標。</li><li>修正如果多個帶有 <code>must-revalidate</code>/<code>e-tag</code> 的請求同時執行時，影像載入失敗的問題。</li><li>修正 <code>DecodeUtils.isSvg</code> 如果 <code>&lt;svg</code> 標籤後有新行字元則返回 false 的問題。</li><li>使 <code>LocalImageLoader.provides</code> 棄用訊息更清晰。</li><li>將 Compose 更新至 1.1.1。</li><li>將 <code>accompanist-drawablepainter</code> 更新至 0.23.1。</li></ul><h2 id="_2-0-0-alpha09-2022-年-2-月-16-日" tabindex="-1">[2.0.0-alpha09] - 2022 年 2 月 16 日 <a class="header-anchor" href="#_2-0-0-alpha09-2022-年-2-月-16-日" aria-label="Permalink to &quot;[2.0.0-alpha09] - 2022 年 2 月 16 日&quot;">​</a></h2><ul><li>修正 <code>AsyncImage</code> 創建無效約束的問題。(<a href="https://github.com/coil-kt/coil/pull/1134" target="_blank" rel="noreferrer">#1134</a>)</li><li>為 <code>AsyncImagePainter</code> 增加 <code>ContentScale</code> 引數。(<a href="https://github.com/coil-kt/coil/pull/1144" target="_blank" rel="noreferrer">#1144</a>) <ul><li>這應該設定為與 <code>Image</code> 上設定的相同值，以確保影像以正確的尺寸載入。</li></ul></li><li>增加 <code>ScaleResolver</code> 以支援惰性解析 <code>ImageRequest</code> 的 <code>Scale</code>。(<a href="https://github.com/coil-kt/coil/pull/1134" target="_blank" rel="noreferrer">#1134</a>) <ul><li><code>ImageRequest.scale</code> 應替換為 <code>ImageRequest.scaleResolver.scale()</code>。</li></ul></li><li>將 Compose 更新至 1.1.0。</li><li>將 <code>accompanist-drawablepainter</code> 更新至 0.23.0。</li><li>將 <code>androidx.lifecycle</code> 更新至 2.4.1。</li></ul><h2 id="_2-0-0-alpha08-2022-年-2-月-7-日" tabindex="-1">[2.0.0-alpha08] - 2022 年 2 月 7 日 <a class="header-anchor" href="#_2-0-0-alpha08-2022-年-2-月-7-日" aria-label="Permalink to &quot;[2.0.0-alpha08] - 2022 年 2 月 7 日&quot;">​</a></h2><ul><li>更新 <code>DiskCache</code> 和 <code>ImageSource</code> 以使用 Okio 的 <code>FileSystem</code> API。(<a href="https://github.com/coil-kt/coil/pull/1115" target="_blank" rel="noreferrer">#1115</a>)</li></ul><h2 id="_2-0-0-alpha07-2022-年-1-月-30-日" tabindex="-1">[2.0.0-alpha07] - 2022 年 1 月 30 日 <a class="header-anchor" href="#_2-0-0-alpha07-2022-年-1-月-30-日" aria-label="Permalink to &quot;[2.0.0-alpha07] - 2022 年 1 月 30 日&quot;">​</a></h2><ul><li>顯著提升 <code>AsyncImage</code> 效能，並將 <code>AsyncImage</code> 拆分為 <code>AsyncImage</code> 和 <code>SubcomposeAsyncImage</code>。(<a href="https://github.com/coil-kt/coil/pull/1048" target="_blank" rel="noreferrer">#1048</a>) <ul><li><code>SubcomposeAsyncImage</code> 提供 <code>loading</code>/<code>success</code>/<code>error</code>/<code>content</code> 插槽 API，並使用效能較差的子組合。</li><li><code>AsyncImage</code> 提供 <code>placeholder</code>/<code>error</code>/<code>fallback</code> 引數，用於覆寫載入時或請求不成功時繪製的 <code>Painter</code>。<code>AsyncImage</code> 不使用子組合，效能比 <code>SubcomposeAsyncImage</code> 好得多。</li><li>從 <code>SubcomposeAsyncImage.content</code> 中移除 <code>AsyncImagePainter.State</code> 引數。如果需要，請使用 <code>painter.state</code>。</li><li>為 <code>AsyncImage</code> 和 <code>SubcomposeAsyncImage</code> 增加 <code>onLoading</code>/<code>onSuccess</code>/<code>onError</code> 回呼。</li></ul></li><li>棄用 <code>LocalImageLoader</code>。(<a href="https://github.com/coil-kt/coil/pull/1101" target="_blank" rel="noreferrer">#1101</a>)</li><li>增加對 <code>ImageRequest.tags</code> 的支援。(<a href="https://github.com/coil-kt/coil/pull/1066" target="_blank" rel="noreferrer">#1066</a>)</li><li>將 <code>isGif</code>、<code>isWebP</code>、<code>isAnimatedWebP</code>、<code>isHeif</code> 和 <code>isAnimatedHeif</code> 從 <code>DecodeUtils</code> 移動到 <code>coil-gif</code>。將 <code>isSvg</code> 增加到 <code>coil-svg</code>。(<a href="https://github.com/coil-kt/coil/pull/1117" target="_blank" rel="noreferrer">#1117</a>)</li><li>將 <code>FetchResult</code> 和 <code>DecodeResult</code> 轉換為非資料類別。(<a href="https://github.com/coil-kt/coil/pull/1114" target="_blank" rel="noreferrer">#1114</a>)</li><li>移除未使用的 <code>DiskCache.Builder</code> 上下文引數。(<a href="https://github.com/coil-kt/coil/pull/1099" target="_blank" rel="noreferrer">#1099</a>)</li><li>修正具有原始尺寸的位圖資源的縮放問題。(<a href="https://github.com/coil-kt/coil/pull/1072" target="_blank" rel="noreferrer">#1072</a>)</li><li>修正 <code>ImageDecoderDecoder</code> 中無法關閉 <code>ImageDecoder</code> 的問題。(<a href="https://github.com/coil-kt/coil/pull/1109" target="_blank" rel="noreferrer">#1109</a>)</li><li>修正將可繪製物件 (drawable) 轉換為位圖時縮放不正確的問題。(<a href="https://github.com/coil-kt/coil/pull/1084" target="_blank" rel="noreferrer">#1084</a>)</li><li>將 Compose 更新至 1.1.0-rc03。</li><li>將 <code>accompanist-drawablepainter</code> 更新至 0.22.1-rc。</li><li>將 <code>androidx.appcompat:appcompat-resources</code> 更新至 1.4.1。</li></ul><h2 id="_2-0-0-alpha06-2021-年-12-月-24-日" tabindex="-1">[2.0.0-alpha06] - 2021 年 12 月 24 日 <a class="header-anchor" href="#_2-0-0-alpha06-2021-年-12-月-24-日" aria-label="Permalink to &quot;[2.0.0-alpha06] - 2021 年 12 月 24 日&quot;">​</a></h2><ul><li>增加 <code>ImageSource.Metadata</code> 以支援從資產、資源和內容 URI 解碼，而無需緩衝或暫存檔案。(<a href="https://github.com/coil-kt/coil/pull/1060" target="_blank" rel="noreferrer">#1060</a>)</li><li>延遲執行影像請求，直到 <code>AsyncImage</code> 具有正約束。(<a href="https://github.com/coil-kt/coil/pull/1028" target="_blank" rel="noreferrer">#1028</a>)</li><li>修正如果 <code>loading</code>、<code>success</code> 和 <code>error</code> 都設定時，<code>AsyncImage</code> 使用 <code>DefaultContent</code> 的問題。(<a href="https://github.com/coil-kt/coil/pull/1026" target="_blank" rel="noreferrer">#1026</a>)</li><li>使用 <code>androidx</code> 的 <code>LruCache</code> 而不是平台 <code>LruCache</code>。(<a href="https://github.com/coil-kt/coil/pull/1047" target="_blank" rel="noreferrer">#1047</a>)</li><li>將 Kotlin 更新至 1.6.10。</li><li>將 Coroutines 更新至 1.6.0。</li><li>將 Compose 更新至 1.1.0-rc01。</li><li>將 <code>accompanist-drawablepainter</code> 更新至 0.22.0-rc。</li><li>將 <code>androidx.collection</code> 更新至 1.2.0。</li></ul><h2 id="_2-0-0-alpha05-2021-年-11-月-28-日" tabindex="-1">[2.0.0-alpha05] - 2021 年 11 月 28 日 <a class="header-anchor" href="#_2-0-0-alpha05-2021-年-11-月-28-日" aria-label="Permalink to &quot;[2.0.0-alpha05] - 2021 年 11 月 28 日&quot;">​</a></h2><ul><li><strong>重要</strong>：重構 <code>Size</code> 以支援對任何維度使用影像的原始尺寸。 <ul><li><code>Size</code> 現在由兩個 <code>Dimension</code> 值組成，分別表示其寬度和高度。<code>Dimension</code> 可以是正像素值或 <code>Dimension.Original</code>。</li><li>進行此變更是為了更好地支援當一個維度是固定像素值時的無界寬度/高度值（例如 <code>wrap_content</code>、<code>Constraints.Infinity</code>）。</li></ul></li><li>修正：支援 <code>AsyncImage</code> 的檢查模式 (預覽)。</li><li>修正：如果 <code>imageLoader.memoryCache</code> 為 null，<code>SuccessResult.memoryCacheKey</code> 應始終為 <code>null</code>。</li><li>將 <code>ImageLoader</code>、<code>SizeResolver</code> 和 <code>ViewSizeResolver</code> 類似建構子的 <code>invoke</code> 函式轉換為頂層函式。</li><li>使 <code>CrossfadeDrawable</code> 的開始和結束可繪製物件成為公開 API。</li><li>變異 <code>ImageLoader</code> 的預留位置/錯誤/備用可繪製物件。</li><li>為 <code>SuccessResult</code> 的建構子增加預設引數。</li><li>依賴 <code>androidx.collection</code> 而不是 <code>androidx.collection-ktx</code>。</li><li>將 OkHttp 更新至 4.9.3。</li></ul><h2 id="_2-0-0-alpha04-2021-年-11-月-22-日" tabindex="-1">[2.0.0-alpha04] - 2021 年 11 月 22 日 <a class="header-anchor" href="#_2-0-0-alpha04-2021-年-11-月-22-日" aria-label="Permalink to &quot;[2.0.0-alpha04] - 2021 年 11 月 22 日&quot;">​</a></h2><ul><li><strong>新功能</strong>：為 <code>coil-compose</code> 增加 <code>AsyncImage</code>。 <ul><li><code>AsyncImage</code> 是一個可組合項，它非同步執行 <code>ImageRequest</code> 並渲染結果。</li><li><strong><code>AsyncImage</code> 旨在替代大多數用例的 <code>rememberImagePainter</code>。</strong></li><li>其 API 尚未最終確定，在最終的 2.0 版本發布之前可能會發生變化。</li><li>它與 <code>Image</code> 具有相似的 API，並支援相同的引數：<code>Alignment</code>、<code>ContentScale</code>、<code>alpha</code>、<code>ColorFilter</code> 和 <code>FilterQuality</code>。</li><li>它支援使用 <code>content</code>、<code>loading</code>、<code>success</code> 和 <code>error</code> 引數覆寫每個 <code>AsyncImagePainter</code> 狀態繪製的內容。</li><li>它修正了 <code>rememberImagePainter</code> 在解析影像尺寸和比例方面存在的一些設計問題。</li><li>範例用法：</li></ul></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只繪製影像。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 避免使用 \`null\`，如果可能，請將其設定為本地化字串。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 繪製帶有圓形裁剪、交叉淡入和覆寫 \`loading\` 狀態的影像。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalContext.current)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CircleShape),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    loading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        CircularProgressIndicator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 繪製帶有圓形裁剪、交叉淡入和覆寫所有狀態的影像。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalContext.current)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CircleShape),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AsyncImagePainter.State.Loading) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        CircularProgressIndicator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        AsyncImageContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 繪製影像。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>重要</strong>：將 <code>ImagePainter</code> 重命名為 <code>AsyncImagePainter</code>，將 <code>rememberImagePainter</code> 重命名為 <code>rememberAsyncImagePainter</code>。 <ul><li>不再支援 <code>ExecuteCallback</code>。要讓 <code>AsyncImagePainter</code> 跳過等待 <code>onDraw</code> 被呼叫，請改為設定 <code>ImageRequest.size(OriginalSize)</code>（或任何尺寸）。</li><li>為 <code>rememberAsyncImagePainter</code> 增加一個可選的 <code>FilterQuality</code> 引數。</li></ul></li><li>在 <code>DiskCache</code> 中使用協程進行清理操作，並增加 <code>DiskCache.Builder.cleanupDispatcher</code>。</li><li>修正使用 <code>ImageLoader.Builder.placeholder</code> 設定的預留位置的 Compose 預覽。</li><li>使用 <code>@ReadOnlyComposable</code> 標記 <code>LocalImageLoader.current</code> 以生成更高效的程式碼。</li><li>將 Compose 更新至 1.1.0-beta03，並依賴 <code>compose.foundation</code> 而不是 <code>compose.ui</code>。</li><li>將 <code>androidx.appcompat-resources</code> 更新至 1.4.0。</li></ul><h2 id="_2-0-0-alpha03-2021-年-11-月-12-日" tabindex="-1">[2.0.0-alpha03] - 2021 年 11 月 12 日 <a class="header-anchor" href="#_2-0-0-alpha03-2021-年-11-月-12-日" aria-label="Permalink to &quot;[2.0.0-alpha03] - 2021 年 11 月 12 日&quot;">​</a></h2><ul><li>增加在 Android 29+ 上載入音樂縮圖的功能。(<a href="https://github.com/coil-kt/coil/pull/967" target="_blank" rel="noreferrer">#967</a>)</li><li>修正：使用 <code>context.resources</code> 載入當前套件的資源。(<a href="https://github.com/coil-kt/coil/pull/968" target="_blank" rel="noreferrer">#968</a>)</li><li>修正：<code>clear</code> -&gt; <code>dispose</code> 替換表達式。(<a href="https://github.com/coil-kt/coil/pull/970" target="_blank" rel="noreferrer">#970</a>)</li><li>將 Compose 更新至 1.0.5。</li><li>將 <code>accompanist-drawablepainter</code> 更新至 0.20.2。</li><li>將 Okio 更新至 3.0.0。</li><li>將 <code>androidx.annotation</code> 更新至 1.3.0。</li><li>將 <code>androidx.core</code> 更新至 1.7.0。</li><li>將 <code>androidx.lifecycle</code> 更新至 2.4.0。 <ul><li>移除對 <code>lifecycle-common-java8</code> 的依賴，因為它已合併到 <code>lifecycle-common</code> 中。</li></ul></li></ul><h2 id="_2-0-0-alpha02-2021-年-10-月-24-日" tabindex="-1">[2.0.0-alpha02] - 2021 年 10 月 24 日 <a class="header-anchor" href="#_2-0-0-alpha02-2021-年-10-月-24-日" aria-label="Permalink to &quot;[2.0.0-alpha02] - 2021 年 10 月 24 日&quot;">​</a></h2><ul><li>增加一個新的 <code>coil-bom</code> Artifact，其中包括一個 <a href="https://docs.gradle.org/7.2/userguide/platforms.html#sub:bom_import" target="_blank" rel="noreferrer">物料清單 (bill of materials)</a>。 <ul><li>匯入 <code>coil-bom</code> 允許您依賴其他 Coil Artifact 而無需指定版本。</li></ul></li><li>修正使用 <code>ExecuteCallback.Immediate</code> 時載入影像失敗的問題。</li><li>將 Okio 更新至 3.0.0-alpha.11。 <ul><li>這也解決了與 Okio 3.0.0-alpha.11 的相容性問題。</li></ul></li><li>將 Kotlin 更新至 1.5.31。</li><li>將 Compose 更新至 1.0.4。</li></ul><h2 id="_2-0-0-alpha01-2021-年-10-月-11-日" tabindex="-1">[2.0.0-alpha01] - 2021 年 10 月 11 日 <a class="header-anchor" href="#_2-0-0-alpha01-2021-年-10-月-11-日" aria-label="Permalink to &quot;[2.0.0-alpha01] - 2021 年 10 月 11 日&quot;">​</a></h2><p>Coil 2.0.0 是函式庫的下一個主要迭代版本，具有新功能、效能改進、API 改進和各種錯誤修正。在 2.0.0 穩定版發布之前，此版本可能與未來的 alpha 版本存在二進制/源碼不相容問題。</p><ul><li><strong>重要</strong>：最低支援 API 現在是 21。</li><li><strong>重要</strong>：啟用 <code>-Xjvm-default=all</code>。 <ul><li>這會生成 Java 8 預設方法，而不是使用 Kotlin 的預設介面方法支援。請查閱 <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer">這篇部落格文章</a> 以獲取更多資訊。</li><li>**您還需要將 <code>-Xjvm-default=all</code> 或 <code>-Xjvm-default=all-compatibility</code> 添加到您的建置檔案中。**請參閱 <a href="/zh-Hant/coil/faq/">此處</a> 了解如何操作。</li></ul></li><li><strong>重要</strong>：Coil 現在擁有自己的磁碟快取實作，不再依賴 OkHttp 進行磁碟快取。 <ul><li>進行此變更是為了： <ul><li>更好地支援解碼影像時的執行緒中斷。當影像請求快速啟動和停止時，這會提升效能。</li><li>支援公開由 <code>File</code> 支援的 <code>ImageSource</code>。當 Android API 需要 <code>File</code> 進行解碼時（例如 <code>MediaMetadataRetriever</code>），這可以避免不必要的複製。</li><li>支援直接讀取/寫入磁碟快取檔案。</li></ul></li><li>使用 <code>ImageLoader.Builder.diskCache</code> 和 <code>DiskCache.Builder</code> 配置磁碟快取。</li><li>您<strong>不應</strong>將 OkHttp 的 <code>Cache</code> 與 Coil 2.0 一起使用，因為如果在寫入時執行緒被中斷，它可能會損壞。</li><li><code>Cache-Control</code> 和其他快取標頭仍受支援 - 除了 <code>Vary</code> 標頭，因為快取僅檢查 URL 是否匹配。此外，只有響應碼在 [200..300) 範圍內的響應才會被快取。</li><li>可以使用 <code>ImageLoader.Builder.respectCacheHeaders</code> 啟用或停用快取標頭的支援。</li><li>升級到 2.0 時，現有磁碟快取將被清除並重建。</li></ul></li><li><strong>重要</strong>：<code>ImageRequest</code> 的預設 <code>Scale</code> 現在是 <code>Scale.FIT</code><ul><li>此變更旨在使 <code>ImageRequest.scale</code> 與其他具有預設 <code>Scale</code> 的類別保持一致。</li><li>帶有 <code>ImageViewTarget</code> 的請求仍會自動偵測其縮放比例。</li></ul></li><li>影像管道類別的重大變更： <ul><li><code>Mapper</code>、<code>Fetcher</code> 和 <code>Decoder</code> 已重構以更靈活。</li><li><code>Fetcher.key</code> 已替換為新的 <code>Keyer</code> 介面。<code>Keyer</code> 從輸入資料建立快取鍵。</li><li>增加 <code>ImageSource</code>，它允許 <code>Decoder</code> 直接解碼 <code>File</code>。</li></ul></li><li><code>BitmapPool</code> 和 <code>PoolableViewTarget</code> 已從函式庫中移除。移除位圖池化的原因： <ul><li>它在 API 23 及以下版本上最有效，但在較新的 Android 版本中效果已降低。</li><li>移除位圖池化允許 Coil 使用不可變位圖，這具有效能優勢。</li><li>管理位圖池會產生運行時開銷。</li><li>位圖池化對 Coil 的 API 產生設計限制，因為它需要追蹤位圖是否符合池化條件。移除位圖池化允許 Coil 在更多地方（例如 <code>Listener</code>、<code>Disposable</code>）公開結果 <code>Drawable</code>。此外，這意味著 Coil 不必清除 <code>ImageView</code>，這可能會導致 <a href="https://github.com/coil-kt/coil/issues/650" target="_blank" rel="noreferrer">問題</a>。</li><li>位圖池化 <a href="https://github.com/coil-kt/coil/issues/546" target="_blank" rel="noreferrer">容易出錯</a>。分配一個新位圖比嘗試重新使用可能仍在使用的位圖安全得多。</li></ul></li><li><code>MemoryCache</code> 已重構以更靈活。</li><li>停用生成運行時非空斷言。 <ul><li>如果您使用 Java，將 null 作為非空註解參數傳遞給函式將不再立即拋出 <code>NullPointerException</code>。如果您使用 Kotlin，則基本沒有變化。</li><li>此變更可使函式庫的大小更小。</li></ul></li><li><code>VideoFrameFileFetcher</code> 和 <code>VideoFrameUriFetcher</code> 已從函式庫中移除。請改用 <code>VideoFrameDecoder</code>，它支援所有資料來源。</li><li>增加對 <code>bitmapFactoryMaxParallelism</code> 的支援，該屬性限制進行中的 <code>BitmapFactory</code> 操作的最大數量。此值預設為 4，這提升了 UI 效能。</li><li>增加對 <code>interceptorDispatcher</code>、<code>fetcherDispatcher</code>、<code>decoderDispatcher</code> 和 <code>transformationDispatcher</code> 的支援。</li><li><code>Disposable</code> 已重構並公開了底層 <code>ImageRequest</code> 的 job。</li><li>將 <code>Transition.transition</code> 更改為非暫停函式，因為不再需要暫停過渡直到其完成。</li><li>增加 <code>GenericViewTarget</code>，它處理常見的 <code>ViewTarget</code> 邏輯。</li><li><a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/BlurTransformation.kt" target="_blank" rel="noreferrer"><code>BlurTransformation</code></a> 和 <a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/GrayscaleTransformation.kt" target="_blank" rel="noreferrer"><code>GrayscaleTransformation</code></a> 已從函式庫中移除。 <ul><li>如果您使用它們，可以將其程式碼複製到您的專案中。</li></ul></li><li>如果 <code>ImageRequest.fallback</code> 為 null，則 <code>ImageRequest.error</code> 現在會在 <code>Target</code> 上設定。</li><li><code>Transformation.key</code> 已替換為 <code>Transformation.cacheKey</code>。</li><li><code>ImageRequest.Listener</code> 在 <code>onSuccess</code> 和 <code>onError</code> 中分別返回 <code>SuccessResult</code>/<code>ErrorResult</code>。</li><li>增加 <code>ByteBuffer</code> 到預設支援的資料類型中。</li><li>移除多個類別的 <code>toString</code> 實作。</li><li>將 OkHttp 更新至 4.9.2。</li><li>將 Okio 更新至 3.0.0-alpha.10。</li></ul><h2 id="_1-4-0-2021-年-10-月-6-日" tabindex="-1">[1.4.0] - 2021 年 10 月 6 日 <a class="header-anchor" href="#_1-4-0-2021-年-10-月-6-日" aria-label="Permalink to &quot;[1.4.0] - 2021 年 10 月 6 日&quot;">​</a></h2><ul><li><strong>新功能</strong>：將 <code>ImageResult</code> 添加到 <code>ImagePainter.State.Success</code> 和 <code>ImagePainter.State.Error</code>。(<a href="https://github.com/coil-kt/coil/pull/887" target="_blank" rel="noreferrer">#887</a>) <ul><li>這是一個對 <code>ImagePainter.State.Success</code> 和 <code>ImagePainter.State.Error</code> 簽章的二進制不相容變更，但這些 API 被標記為實驗性。</li></ul></li><li>僅在 <code>View.isShown</code> 為 <code>true</code> 時執行 <code>CrossfadeTransition</code>。之前它只會檢查 <code>View.isVisible</code>。(<a href="https://github.com/coil-kt/coil/pull/898" target="_blank" rel="noreferrer">#898</a>)</li><li>修正由於捨入問題，如果縮放乘數略小於 1，則可能發生記憶體快取遺失。(<a href="https://github.com/coil-kt/coil/pull/899" target="_blank" rel="noreferrer">#899</a>)</li><li>使非內聯 <code>ComponentRegistry</code> 方法公開。(<a href="https://github.com/coil-kt/coil/pull/925" target="_blank" rel="noreferrer">#925</a>)</li><li>依賴 <code>accompanist-drawablepainter</code> 並移除 Coil 的自訂 <code>DrawablePainter</code> 實作。(<a href="https://github.com/coil-kt/coil/pull/845" target="_blank" rel="noreferrer">#845</a>)</li><li>移除 Java 8 方法的使用，以防範去糖化問題。(<a href="https://github.com/coil-kt/coil/pull/924" target="_blank" rel="noreferrer">#924</a>)</li><li>將 <code>ImagePainter.ExecuteCallback</code> 提升為穩定 API。(<a href="https://github.com/coil-kt/coil/pull/927" target="_blank" rel="noreferrer">#927</a>)</li><li>將編譯 SDK 更新至 31。</li><li>將 Kotlin 更新至 1.5.30。</li><li>將 Coroutines 更新至 1.5.2。</li><li>將 Compose 更新至 1.0.3。</li></ul><h2 id="_1-3-2-2021-年-8-月-4-日" tabindex="-1">[1.3.2] - 2021 年 8 月 4 日 <a class="header-anchor" href="#_1-3-2-2021-年-8-月-4-日" aria-label="Permalink to &quot;[1.3.2] - 2021 年 8 月 4 日&quot;">​</a></h2><ul><li><code>coil-compose</code> 現在依賴於 <code>compose.ui</code> 而不是 <code>compose.foundation</code>。 <ul><li><code>compose.ui</code> 是一個較小的依賴項，因為它是 <code>compose.foundation</code> 的子集。</li></ul></li><li>將 Jetpack Compose 更新至 1.0.1。</li><li>將 Kotlin 更新至 1.5.21。</li><li>將 Coroutines 更新至 1.5.1。</li><li>將 <code>androidx.exifinterface:exifinterface</code> 更新至 1.3.3。</li></ul><h2 id="_1-3-1-2021-年-7-月-28-日" tabindex="-1">[1.3.1] - 2021 年 7 月 28 日 <a class="header-anchor" href="#_1-3-1-2021-年-7-月-28-日" aria-label="Permalink to &quot;[1.3.1] - 2021 年 7 月 28 日&quot;">​</a></h2><ul><li>將 Jetpack Compose 更新至 <code>1.0.0</code>。恭喜 Compose 團隊 <a href="https://android-developers.googleblog.com/2021/07/jetpack-compose-announcement.html" target="_blank" rel="noreferrer">穩定版發布</a>！</li><li>將 <code>androidx.appcompat:appcompat-resources</code> 更新至 1.3.1。</li></ul><h2 id="_1-3-0-2021-年-7-月-10-日" tabindex="-1">[1.3.0] - 2021 年 7 月 10 日 <a class="header-anchor" href="#_1-3-0-2021-年-7-月-10-日" aria-label="Permalink to &quot;[1.3.0] - 2021 年 7 月 10 日&quot;">​</a></h2><ul><li><strong>新功能</strong>：增加對 <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> 的支援。它基於 <a href="https://github.com/google/accompanist/" target="_blank" rel="noreferrer">Accompanist</a> 的 Coil 整合，但有一些變更。請查閱 <a href="/zh-Hant/coil/compose/">文件</a> 以獲取更多資訊。</li><li>增加 <code>allowConversionToBitmap</code> 以啟用/停用 <code>Transformation</code> 的自動位圖轉換。(<a href="https://github.com/coil-kt/coil/pull/775" target="_blank" rel="noreferrer">#775</a>)</li><li>增加 <code>enforceMinimumFrameDelay</code> 到 <code>ImageDecoderDecoder</code> 和 <code>GifDecoder</code>，以在 GIF 幀延遲低於閾值時啟用重寫。(<a href="https://github.com/coil-kt/coil/pull/783" target="_blank" rel="noreferrer">#783</a>) <ul><li>此功能預設為停用，但在未來版本中將預設為啟用。</li></ul></li><li>增加對啟用/停用 <code>ImageLoader</code> 內部網路觀察器的支援。(<a href="https://github.com/coil-kt/coil/pull/741" target="_blank" rel="noreferrer">#741</a>)</li><li>修正 <code>BitmapFactoryDecoder</code> 解碼的位圖密度。(<a href="https://github.com/coil-kt/coil/pull/776" target="_blank" rel="noreferrer">#776</a>)</li><li>修正 Licensee 未找到 Coil 的授權 URL。(<a href="https://github.com/coil-kt/coil/pull/774" target="_blank" rel="noreferrer">#774</a>)</li><li>將 <code>androidx.core:core-ktx</code> 更新至 1.6.0。</li></ul><h2 id="_1-2-2-2021-年-6-月-4-日" tabindex="-1">[1.2.2] - 2021 年 6 月 4 日 <a class="header-anchor" href="#_1-2-2-2021-年-6-月-4-日" aria-label="Permalink to &quot;[1.2.2] - 2021 年 6 月 4 日&quot;">​</a></h2><ul><li>修正將具有共享狀態的可繪製物件轉換為位圖時的競態條件。(<a href="https://github.com/coil-kt/coil/pull/771" target="_blank" rel="noreferrer">#771</a>)</li><li>修正 <code>ImageLoader.Builder.fallback</code> 設定了 <code>error</code> 可繪製物件而不是 <code>fallback</code> 可繪製物件的問題。</li><li>修正 <code>ResourceUriFetcher</code> 返回不正確資料來源的問題。(<a href="https://github.com/coil-kt/coil/pull/770" target="_blank" rel="noreferrer">#770</a>)</li><li>修正 API 26 和 27 上沒有可用檔案描述符的日誌檢查。</li><li>修正平台向量可繪製物件支援的版本檢查不正確。(<a href="https://github.com/coil-kt/coil/pull/751" target="_blank" rel="noreferrer">#751</a>)</li><li>更新 Kotlin (1.5.10)。</li><li>更新 Coroutines (1.5.0)。</li><li>更新 <code>androidx.appcompat:appcompat-resources</code> 至 1.3.0。</li><li>更新 <code>androidx.core:core-ktx</code> 至 1.5.0。</li></ul><h2 id="_1-2-1-2021-年-4-月-27-日" tabindex="-1">[1.2.1] - 2021 年 4 月 27 日 <a class="header-anchor" href="#_1-2-1-2021-年-4-月-27-日" aria-label="Permalink to &quot;[1.2.1] - 2021 年 4 月 27 日&quot;">​</a></h2><ul><li>修正：<code>VideoFrameUriFetcher</code> 嘗試處理 http/https URI 的問題。(<a href="https://github.com/coil-kt/coil/pull/734" target="_blank" rel="noreferrer">#734</a></li></ul><h2 id="_1-2-0-2021-年-4-月-12-日" tabindex="-1">[1.2.0] - 2021 年 4 月 12 日 <a class="header-anchor" href="#_1-2-0-2021-年-4-月-12-日" aria-label="Permalink to &quot;[1.2.0] - 2021 年 4 月 12 日&quot;">​</a></h2><ul><li><strong>重要</strong>：在 <code>SvgDecoder</code> 中使用 SVG 的視圖邊界計算其長寬比。(<a href="https://github.com/coil-kt/coil/pull/688" target="_blank" rel="noreferrer">#688</a>) <ul><li>之前，<code>SvgDecoder</code> 使用 SVG 的 <code>width</code>/<code>height</code> 元素來確定其長寬比，但這不正確地遵循 SVG 規範。</li><li>要恢復舊行為，請在建構 <code>SvgDecoder</code> 時設定 <code>useViewBoundsAsIntrinsicSize = false</code>。</li></ul></li><li><strong>新功能</strong>：增加 <code>VideoFrameDecoder</code> 以支援從任何來源解碼視訊幀。(<a href="https://github.com/coil-kt/coil/pull/689" target="_blank" rel="noreferrer">#689</a>)</li><li><strong>新功能</strong>：支援使用來源內容而不是僅 MIME 類型自動偵測 SVG。(<a href="https://github.com/coil-kt/coil/pull/654" target="_blank" rel="noreferrer">#654</a>)</li><li><strong>新功能</strong>：支援使用 <code>ImageLoader.newBuilder()</code> 共享資源。(<a href="https://github.com/coil-kt/coil/pull/653" target="_blank" rel="noreferrer">#653</a>) <ul><li>重要的是，這使得 <code>ImageLoader</code> 實例之間可以共享記憶體快取。</li></ul></li><li><strong>新功能</strong>：增加對使用 <code>AnimatedTransformation</code> 進行動畫影像轉換的支援。(<a href="https://github.com/coil-kt/coil/pull/659" target="_blank" rel="noreferrer">#659</a>)</li><li><strong>新功能</strong>：增加對動畫可繪製物件的開始/結束回呼的支援。(<a href="https://github.com/coil-kt/coil/pull/676" target="_blank" rel="noreferrer">#676</a>)</li></ul><hr><ul><li>修正解析 HEIF/HEIC 檔案的 EXIF 資料問題。(<a href="https://github.com/coil-kt/coil/pull/664" target="_blank" rel="noreferrer">#664</a>)</li><li>修正如果位圖池化停用時未使用 <code>EmptyBitmapPool</code> 實作的問題。(<a href="https://github.com/coil-kt/coil/pull/638" target="_blank" rel="noreferrer">#638</a>) <ul><li>如果沒有此修正，位圖池化雖然仍被正確停用，但它使用了更重量級的 <code>BitmapPool</code> 實作。</li></ul></li><li>修正 <code>MovieDrawable.getOpacity</code> 可能錯誤返回透明的情況。(<a href="https://github.com/coil-kt/coil/pull/682" target="_blank" rel="noreferrer">#682</a>)</li><li>防範預設暫存目錄不存在的情況。(<a href="https://github.com/coil-kt/coil/pull/683" target="_blank" rel="noreferrer">#683</a>)</li></ul><hr><ul><li>使用 JVM IR 後端建置。(<a href="https://github.com/coil-kt/coil/pull/670" target="_blank" rel="noreferrer">#670</a>)</li><li>更新 Kotlin (1.4.32)。</li><li>更新 Coroutines (1.4.3)。</li><li>更新 OkHttp (3.12.13)。</li><li>更新 <code>androidx.lifecycle:lifecycle-common-java8</code> 至 2.3.1。</li></ul><h2 id="_1-1-1-2021-年-1-月-11-日" tabindex="-1">[1.1.1] - 2021 年 1 月 11 日 <a class="header-anchor" href="#_1-1-1-2021-年-1-月-11-日" aria-label="Permalink to &quot;[1.1.1] - 2021 年 1 月 11 日&quot;">​</a></h2><ul><li>修正 <code>ViewSizeResolver.size</code> 可能因協程多次恢復而拋出 <code>IllegalStateException</code> 的情況。</li><li>修正 <code>HttpFetcher</code> 如果從主執行緒呼叫則會永遠阻塞。 <ul><li>使用 <code>ImageRequest.dispatcher(Dispatchers.Main.immediate)</code> 強制在主執行緒執行的請求將失敗並拋出 <code>NetworkOnMainThreadException</code>，除非 <code>ImageRequest.networkCachePolicy</code> 設定為 <code>CachePolicy.DISABLED</code> 或 <code>CachePolicy.WRITE_ONLY</code>。</li></ul></li><li>如果視訊具有旋轉中繼資料，則旋轉 <code>VideoFrameFetcher</code> 的視訊幀。</li><li>更新 Kotlin (1.4.21)。</li><li>更新 Coroutines (1.4.2)。</li><li>更新 Okio (2.10.0)。</li><li>更新 <code>androidx.exifinterface:exifinterface</code> (1.3.2)。</li></ul><h2 id="_1-1-0-2020-年-11-月-24-日" tabindex="-1">[1.1.0] - 2020 年 11 月 24 日 <a class="header-anchor" href="#_1-1-0-2020-年-11-月-24-日" aria-label="Permalink to &quot;[1.1.0] - 2020 年 11 月 24 日&quot;">​</a></h2><ul><li><strong>重要</strong>：將 <code>CENTER</code> 和 <code>MATRIX</code> <code>ImageView</code> 縮放類型更改為解析為 <code>OriginalSize</code>。(<a href="https://github.com/coil-kt/coil/pull/587" target="_blank" rel="noreferrer">#587</a>) <ul><li>此變更僅影響當請求的尺寸未明確指定時的隱式尺寸解析演算法。</li><li>進行此變更是為了確保影像請求的視覺結果與 <code>ImageView.setImageResource</code>/<code>ImageView.setImageURI</code> 一致。要恢復舊行為，請在建構請求時設定 <code>ViewSizeResolver</code>。</li></ul></li><li><strong>重要</strong>：如果視圖的佈局參數為 <code>WRAP_CONTENT</code>，則從 <code>ViewSizeResolver</code> 返回顯示尺寸。(<a href="https://github.com/coil-kt/coil/pull/562" target="_blank" rel="noreferrer">#562</a>) <ul><li>之前，我們只會在視圖完全佈局後返回顯示尺寸。此變更使得典型行為更加一致和直觀。</li></ul></li><li>增加控制 alpha 預乘的功能。(<a href="https://github.com/coil-kt/coil/pull/569" target="_blank" rel="noreferrer">#569</a>)</li><li>支援 <code>CrossfadeDrawable</code> 中偏好精確固有尺寸。(<a href="https://github.com/coil-kt/coil/pull/585" target="_blank" rel="noreferrer">#585</a>)</li><li>檢查包含版本的完整 GIF 標頭。(<a href="https://github.com/coil-kt/coil/pull/564" target="_blank" rel="noreferrer">#564</a>)</li><li>增加一個空的位圖池實作。(<a href="https://github.com/coil-kt/coil/pull/561" target="_blank" rel="noreferrer">#561</a>)</li><li>使 <code>EventListener.Factory</code> 成為函式介面。(<a href="https://github.com/coil-kt/coil/pull/575" target="_blank" rel="noreferrer">#575</a>)</li><li>穩定 <code>EventListener</code>。(<a href="https://github.com/coil-kt/coil/pull/574" target="_blank" rel="noreferrer">#574</a>)</li><li>為 <code>ImageRequest.Builder.placeholderMemoryCacheKey</code> 增加 <code>String</code> 重載。</li><li>為 <code>ViewSizeResolver</code> 建構子增加 <code>@JvmOverloads</code>。</li><li>修正：變異 <code>CrossfadeDrawable</code> 中的開始/結束可繪製物件。(<a href="https://github.com/coil-kt/coil/pull/572" target="_blank" rel="noreferrer">#572</a>)</li><li>修正：修正 GIF 在第二次載入時不播放的問題。(<a href="https://github.com/coil-kt/coil/pull/534" target="_blank" rel="noreferrer">#577</a>)</li><li>更新 Kotlin (1.4.20) 並遷移到 <code>kotlin-parcelize</code> 外掛。</li><li>更新 Coroutines (1.4.1)。</li></ul><h2 id="_1-0-0-2020-年-10-月-22-日" tabindex="-1">[1.0.0] - 2020 年 10 月 22 日 <a class="header-anchor" href="#_1-0-0-2020-年-10-月-22-日" aria-label="Permalink to &quot;[1.0.0] - 2020 年 10 月 22 日&quot;">​</a></h2><p>自 <code>0.13.0</code> 以來的變更：</p><ul><li>增加 <code>Context.imageLoader</code> 擴充函式。(<a href="https://github.com/coil-kt/coil/pull/534" target="_blank" rel="noreferrer">#534</a>)</li><li>增加 <code>ImageLoader.executeBlocking</code> 擴充函式。(<a href="https://github.com/coil-kt/coil/pull/537" target="_blank" rel="noreferrer">#537</a>)</li><li>如果替換了先前的單例影像載入器，則不要關閉它。(<a href="https://github.com/coil-kt/coil/pull/533" target="_blank" rel="noreferrer">#533</a>)</li></ul><p>自 <code>1.0.0-rc3</code> 以來的變更：</p><ul><li>修正：防範缺少/無效的 ActivityManager。(<a href="https://github.com/coil-kt/coil/pull/541" target="_blank" rel="noreferrer">#541</a>)</li><li>修正：允許 OkHttp 快取不成功的響應。(<a href="https://github.com/coil-kt/coil/pull/551" target="_blank" rel="noreferrer">#551</a>)</li><li>將 Kotlin 更新至 1.4.10。</li><li>將 Okio 更新至 2.9.0。</li><li>將 <code>androidx.exifinterface:exifinterface</code> 更新至 1.3.1。</li></ul><h2 id="_1-0-0-rc3-2020-年-9-月-21-日" tabindex="-1">[1.0.0-rc3] - 2020 年 9 月 21 日 <a class="header-anchor" href="#_1-0-0-rc3-2020-年-9-月-21-日" aria-label="Permalink to &quot;[1.0.0-rc3] - 2020 年 9 月 21 日&quot;">​</a></h2><ul><li>由於不穩定性，還原使用 <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer"><code>-Xjvm-default=all</code></a> 編譯器旗標。 <ul><li><strong>這是一個源碼相容，但二進制不相容的變更，與之前的發布候選版本相比。</strong></li></ul></li><li>增加 <code>Context.imageLoader</code> 擴充函式。(<a href="https://github.com/coil-kt/coil/pull/534" target="_blank" rel="noreferrer">#534</a>)</li><li>增加 <code>ImageLoader.executeBlocking</code> 擴充函式。(<a href="https://github.com/coil-kt/coil/pull/537" target="_blank" rel="noreferrer">#537</a>)</li><li>如果替換了先前的單例影像載入器，則不要關閉它。(<a href="https://github.com/coil-kt/coil/pull/533" target="_blank" rel="noreferrer">#533</a>)</li><li>更新 AndroidX 依賴： <ul><li><code>androidx.exifinterface:exifinterface</code> -&gt; 1.3.0</li></ul></li></ul><h2 id="_1-0-0-rc2-2020-年-9-月-3-日" tabindex="-1">[1.0.0-rc2] - 2020 年 9 月 3 日 <a class="header-anchor" href="#_1-0-0-rc2-2020-年-9-月-3-日" aria-label="Permalink to &quot;[1.0.0-rc2] - 2020 年 9 月 3 日&quot;">​</a></h2><ul><li><strong>此版本需要 Kotlin 1.4.0 或更高版本。</strong></li><li><a href="#0130---september-3-2020">0.13.0</a> 中存在的所有變更。</li><li>依賴基礎 Kotlin <code>stdlib</code> 而不是 <code>stdlib-jdk8</code>。</li></ul><h2 id="_0-13-0-2020-年-9-月-3-日" tabindex="-1">[0.13.0] - 2020 年 9 月 3 日 <a class="header-anchor" href="#_0-13-0-2020-年-9-月-3-日" aria-label="Permalink to &quot;[0.13.0] - 2020 年 9 月 3 日&quot;">​</a></h2><ul><li><strong>重要</strong>：預設在主執行緒上啟動攔截器鏈。(<a href="https://github.com/coil-kt/coil/pull/513" target="_blank" rel="noreferrer">#513</a>) <ul><li>這在很大程度上恢復了 <code>0.11.0</code> 及以下版本的行為，其中記憶體快取會同步在主執行緒上檢查。</li><li>要恢復與 <code>0.12.0</code> 相同的行為，即在 <code>ImageRequest.dispatcher</code> 上檢查記憶體快取，請設定 <code>ImageLoader.Builder.launchInterceptorChainOnMainThread(false)</code>。</li><li>請參閱 <a href="https://coil-kt.github.io/coil/api/coil-core/coil3/-image-loader/-builder/launch-interceptor-chain-on-main-thread/" target="_blank" rel="noreferrer"><code>launchInterceptorChainOnMainThread</code></a> 以獲取更多資訊。</li></ul></li></ul><hr><ul><li>修正：修正如果請求在分離的片段中的 <code>ViewTarget</code> 上啟動時可能發生的記憶體洩漏。(<a href="https://github.com/coil-kt/coil/pull/518" target="_blank" rel="noreferrer">#518</a>)</li><li>修正：使用 <code>ImageRequest.context</code> 載入資源 URI。(<a href="https://github.com/coil-kt/coil/pull/517" target="_blank" rel="noreferrer">#517</a>)</li><li>修正：修正可能導致後續請求未保存到磁碟快取的競態條件。(<a href="https://github.com/coil-kt/coil/pull/510" target="_blank" rel="noreferrer">#510</a>)</li><li>修正：在 API 18 上使用 <code>blockCountLong</code> 和 <code>blockSizeLong</code>。</li></ul><hr><ul><li>使 <code>ImageLoaderFactory</code> 成為函式介面。</li><li>增加 <code>ImageLoader.Builder.addLastModifiedToFileCacheKey</code>，它允許您啟用/停用為從 <code>File</code> 載入的影像的記憶體快取鍵增加上次修改時間戳。</li></ul><hr><ul><li>將 Kotlin 更新至 1.4.0。</li><li>將 Coroutines 更新至 1.3.9。</li><li>將 Okio 更新至 2.8.0。</li></ul><h2 id="_1-0-0-rc1-2020-年-8-月-18-日" tabindex="-1">[1.0.0-rc1] - 2020 年 8 月 18 日 <a class="header-anchor" href="#_1-0-0-rc1-2020-年-8-月-18-日" aria-label="Permalink to &quot;[1.0.0-rc1] - 2020 年 8 月 18 日&quot;">​</a></h2><ul><li><strong>此版本需要 Kotlin 1.4.0 或更高版本。</strong></li><li>將 Kotlin 更新至 1.4.0 並啟用 <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer"><code>-Xjvm-default=all</code></a>。 <ul><li><strong><a href="/zh-Hant/coil/faq/">請參閱此處</a> 了解如何在您的建置檔案中啟用 <code>-Xjvm-default=all</code>。</strong></li><li>這會為預設的 Kotlin 介面方法生成 Java 8 預設方法。</li></ul></li><li>移除 0.12.0 中所有現有的棄用方法。</li><li>將 Coroutines 更新至 1.3.9。</li></ul><h2 id="_0-12-0-2020-年-8-月-18-日" tabindex="-1">[0.12.0] - 2020 年 8 月 18 日 <a class="header-anchor" href="#_0-12-0-2020-年-8-月-18-日" aria-label="Permalink to &quot;[0.12.0] - 2020 年 8 月 18 日&quot;">​</a></h2><ul><li><strong>破壞性變更</strong>：<code>LoadRequest</code> 和 <code>GetRequest</code> 已被 <code>ImageRequest</code> 替換： <ul><li><code>ImageLoader.execute(LoadRequest)</code> -&gt; <code>ImageLoader.enqueue(ImageRequest)</code></li><li><code>ImageLoader.execute(GetRequest)</code> -&gt; <code>ImageLoader.execute(ImageRequest)</code></li><li><code>ImageRequest</code> 實作了 <code>equals</code>/<code>hashCode</code>。</li></ul></li><li><strong>破壞性變更</strong>：許多類別已重命名和/或更改套件： <ul><li><code>coil.request.RequestResult</code> -&gt; <code>coil.request.ImageResult</code></li><li><code>coil.request.RequestDisposable</code> -&gt; <code>coil.request.Disposable</code></li><li><code>coil.bitmappool.BitmapPool</code> -&gt; <code>coil.bitmap.BitmapPool</code></li><li><code>coil.DefaultRequestOptions</code> -&gt; <code>coil.request.DefaultRequestOptions</code></li></ul></li><li><strong>破壞性變更</strong>：<a href="https://github.com/coil-kt/coil/blob/f52addd039f0195b66f93cb0f1cad59b0832f784/coil-core/src/main/java/coil/collection/SparseIntArraySet.kt" target="_blank" rel="noreferrer"><code>SparseIntArraySet</code></a> 已從公開 API 中移除。</li><li><strong>破壞性變更</strong>：<code>TransitionTarget</code> 不再實作 <code>ViewTarget</code>。</li><li><strong>破壞性變更</strong>：<code>ImageRequest.Listener.onSuccess</code> 的簽章已更改為返回 <code>ImageResult.Metadata</code> 而不是僅 <code>DataSource</code>。</li><li><strong>破壞性變更</strong>：移除對 <code>LoadRequest.aliasKeys</code> 的支援。此 API 最好通過對記憶體快取的直接讀寫存取來處理。</li></ul><hr><ul><li><strong>重要</strong>：記憶體快取中的值不再同步解析（如果從主執行緒呼叫）。 <ul><li>此變更也是支援在背景調度器上執行 <code>Interceptor</code> 的必要條件。</li><li>此變更還將更多工作從主執行緒轉移開，提升了效能。</li></ul></li><li><strong>重要</strong>：<code>Mappers</code> 現在在背景調度器上執行。作為副作用，不再<strong>自動</strong>支援自動位圖取樣。要實現相同的效果，請使用前一個請求的 <code>MemoryCache.Key</code> 作為後續請求的 <code>placeholderMemoryCacheKey</code>。<a href="/zh-Hant/coil/recipes/">請參閱此處的範例</a>。 <ul><li><code>placeholderMemoryCacheKey</code> API 提供了更多自由，因為您可以“連結”兩個具有不同資料（例如，小/大影像的不同 URL）的影像請求。</li></ul></li><li><strong>重要</strong>：Coil 的 <code>ImageView</code> 擴充函式已從 <code>coil.api</code> 套件移至 <code>coil</code> 套件。 <ul><li>使用查找和替換將 <code>import coil.api.load</code> 重構為 <code>import coil.load</code>。不幸的是，無法使用 Kotlin 的 <code>ReplaceWith</code> 功能替換匯入。</li></ul></li><li><strong>重要</strong>：如果可繪製物件不是相同的影像，則使用標準交叉淡入。</li><li><strong>重要</strong>：在 API 24+ 上優先使用不可變位圖。</li><li><strong>重要</strong>：<code>MeasuredMapper</code> 已被棄用，取而代之的是新的 <code>Interceptor</code> 介面。請參閱 <a href="https://gist.github.com/colinrtwhite/90267704091467451e46b21b95154299" target="_blank" rel="noreferrer">此處</a> 的範例，了解如何將 <code>MeasuredMapper</code> 轉換為 <code>Interceptor</code>。 <ul><li><code>Interceptor</code> 是一個限制較少的 API，允許更廣泛的自訂邏輯。</li></ul></li><li><strong>重要</strong>：<code>ImageRequest.data</code> 現在是非 null 的。如果您創建 <code>ImageRequest</code> 時未設定其資料，則會將 <code>NullRequestData</code> 作為其資料返回。</li></ul><hr><ul><li><strong>新功能</strong>：增加對 <code>ImageLoader</code> 的 <code>MemoryCache</code> 的直接讀寫存取支援。請參閱 <a href="/zh-Hant/coil/getting_started/">文件</a> 以獲取更多資訊。</li><li><strong>新功能</strong>：增加對 <code>Interceptor</code> 的支援。請參閱 <a href="/zh-Hant/coil/image_pipeline/">文件</a> 以獲取更多資訊。Coil 的 <code>Interceptor</code> 設計深受 <a href="https://github.com/square/okhttp" target="_blank" rel="noreferrer">OkHttp</a> 的啟發！</li><li><strong>新功能</strong>：增加使用 <code>ImageLoader.Builder.bitmapPoolingEnabled</code> 啟用/停用位圖池化的功能。 <ul><li>位圖池化在 API 23 及以下版本上最有效，但在 API 24 及以上版本上仍可能受益（通過及時呼叫 <code>Bitmap.recycle</code>）。</li></ul></li><li><strong>新功能</strong>：支援解碼時的執行緒中斷。</li></ul><hr><ul><li>修正解析內容類型標頭中的多個區段的問題。</li><li>重構位圖引用計數以更健壯。</li><li>修正 API &lt; 19 裝置上的 WebP 解碼問題。</li><li>在 EventListener API 中公開 FetchResult 和 DecodeResult。</li></ul><hr><ul><li>使用 SDK 30 編譯。</li><li>將 Coroutines 更新至 1.3.8。</li><li>將 OkHttp 更新至 3.12.12。</li><li>將 Okio 更新至 2.7.0。</li><li>更新 AndroidX 依賴： <ul><li><code>androidx.appcompat:appcompat-resources</code> -&gt; 1.2.0</li><li><code>androidx.core:core-ktx</code> -&gt; 1.3.1</li></ul></li></ul><h2 id="_0-11-0-2020-年-5-月-14-日" tabindex="-1">[0.11.0] - 2020 年 5 月 14 日 <a class="header-anchor" href="#_0-11-0-2020-年-5-月-14-日" aria-label="Permalink to &quot;[0.11.0] - 2020 年 5 月 14 日&quot;">​</a></h2><ul><li><strong>破壞性變更</strong>：<strong>此版本移除了所有現有的棄用函式。</strong><ul><li>這使得可以移除 Coil 的 <code>ContentProvider</code>，因此它在應用程式啟動時不執行任何程式碼。</li></ul></li><li><strong>破壞性變更</strong>：將 <code>SparseIntArraySet.size</code> 轉換為 val。(<a href="https://github.com/coil-kt/coil/pull/380" target="_blank" rel="noreferrer">#380</a>)</li><li><strong>破壞性變更</strong>：將 <code>Parameters.count()</code> 移至擴充函式。(<a href="https://github.com/coil-kt/coil/pull/403" target="_blank" rel="noreferrer">#403</a>)</li><li><strong>破壞性變更</strong>：使 <code>BitmapPool.maxSize</code> 為 Int。(<a href="https://github.com/coil-kt/coil/pull/404" target="_blank" rel="noreferrer">#404</a>)</li></ul><hr><ul><li><strong>重要</strong>：預設使 <code>ImageLoader.shutdown()</code> 可選（類似於 <code>OkHttpClient</code>）。(<a href="https://github.com/coil-kt/coil/pull/385" target="_blank" rel="noreferrer">#385</a>)</li></ul><hr><ul><li>修正：修正 AGP 4.1 相容性問題。(<a href="https://github.com/coil-kt/coil/pull/386" target="_blank" rel="noreferrer">#386</a>)</li><li>修正：修正測量 <code>GONE</code> 視圖的問題。(<a href="https://github.com/coil-kt/coil/pull/397" target="_blank" rel="noreferrer">#397</a>)</li></ul><hr><ul><li>將預設記憶體快取大小減少到 20%。(<a href="https://github.com/coil-kt/coil/pull/390" target="_blank" rel="noreferrer">#390</a>) <ul><li>要恢復現有行為，請在創建 <code>ImageLoader</code> 時設定 <code>ImageLoaderBuilder.availableMemoryPercentage(0.25)</code>。</li></ul></li><li>將 Coroutines 更新至 1.3.6。</li><li>將 OkHttp 更新至 3.12.11。</li></ul><h2 id="_0-10-1-2020-年-4-月-26-日" tabindex="-1">[0.10.1] - 2020 年 4 月 26 日 <a class="header-anchor" href="#_0-10-1-2020-年-4-月-26-日" aria-label="Permalink to &quot;[0.10.1] - 2020 年 4 月 26 日&quot;">​</a></h2><ul><li>修正 API 23 及以下版本上解碼大型 PNG 檔案時出現 OOM 的問題。(<a href="https://github.com/coil-kt/coil/pull/372" target="_blank" rel="noreferrer">#372</a>)。 <ul><li>這會停用 PNG 檔案的 EXIF 方向解碼。PNG EXIF 方向很少使用，並且讀取 PNG EXIF 資料（即使是空的）需要將整個檔案緩衝到記憶體中，這對效能不利。</li></ul></li><li><code>SparseIntArraySet</code> 的次要 Java 相容性改進。</li></ul><hr><ul><li>將 Okio 更新至 2.6.0。</li></ul><h2 id="_0-10-0-2020-年-4-月-20-日" tabindex="-1">[0.10.0] - 2020 年 4 月 20 日 <a class="header-anchor" href="#_0-10-0-2020-年-4-月-20-日" aria-label="Permalink to &quot;[0.10.0] - 2020 年 4 月 20 日&quot;">​</a></h2><h3 id="亮點" tabindex="-1">亮點 <a class="header-anchor" href="#亮點" aria-label="Permalink to &quot;亮點&quot;">​</a></h3><ul><li><p>**此版本棄用了大部分 DSL API，轉而直接使用建構器。**變更如下：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.9.5 (舊)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImageLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bitmapPoolPercentage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> disposable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(imageView)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drawable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.10.0 (新)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bitmapPoolPercentage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoadRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(imageView)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> disposable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GetRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drawable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request).drawable</span></span></code></pre></div><ul><li>如果您使用 <code>io.coil-kt:coil</code> Artifact，可以呼叫 <code>Coil.execute(request)</code> 來使用單例 <code>ImageLoader</code> 執行請求。</li></ul></li><li><p><strong><code>ImageLoader</code> 現在具有弱引用記憶體快取</strong>，它會追蹤從強引用記憶體快取中逐出的影像的弱引用。</p><ul><li>這表示如果影像仍有強引用，則它將始終從 <code>ImageLoader</code> 的記憶體快取中返回。</li><li>通常，這應該使記憶體快取更具可預測性並提高其命中率。</li><li>此行為可以通過 <code>ImageLoaderBuilder.trackWeakReferences</code> 啟用/停用。</li></ul></li><li><p>增加了一個新的 Artifact，<strong><code>io.coil-kt:coil-video</code></strong>，用於從視訊檔案中解碼特定幀。<a href="/zh-Hant/coil/videos/">在此處閱讀更多資訊</a>。</p></li><li><p>增加了一個新的 <a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/main/java/coil/EventListener.kt" target="_blank" rel="noreferrer">EventListener</a> API，用於追蹤指標。</p></li><li><p>增加了 <a href="https://github.com/coil-kt/coil/blob/main/coil/src/main/java/coil/ImageLoaderFactory.kt" target="_blank" rel="noreferrer">ImageLoaderFactory</a>，您的 <code>Application</code> 可以實作它以簡化單例初始化。</p></li></ul><hr><h3 id="完整發布說明" tabindex="-1">完整發布說明 <a class="header-anchor" href="#完整發布說明" aria-label="Permalink to &quot;完整發布說明&quot;">​</a></h3><ul><li><strong>重要</strong>：棄用 DSL 語法，轉而使用建構器語法。(<a href="https://github.com/coil-kt/coil/pull/267" target="_blank" rel="noreferrer">#267</a>)</li><li><strong>重要</strong>：棄用 <code>Coil</code> 和 <code>ImageLoader</code> 擴充函式。(<a href="https://github.com/coil-kt/coil/pull/322" target="_blank" rel="noreferrer">#322</a>)</li><li><strong>破壞性變更</strong>：從 <code>ImageLoader.execute(GetRequest)</code> 返回密封的 <code>RequestResult</code> 類型。(<a href="https://github.com/coil-kt/coil/pull/349" target="_blank" rel="noreferrer">#349</a>)</li><li><strong>破壞性變更</strong>：將 <code>ExperimentalCoil</code> 重命名為 <code>ExperimentalCoilApi</code>。從 <code>@Experimental</code> 遷移到 <code>@RequiresOptIn</code>。(<a href="https://github.com/coil-kt/coil/pull/306" target="_blank" rel="noreferrer">#306</a>)</li><li><strong>破壞性變更</strong>：將 <code>CoilLogger</code> 替換為 <code>Logger</code> 介面。(<a href="https://github.com/coil-kt/coil/pull/316" target="_blank" rel="noreferrer">#316</a>)</li><li><strong>破壞性變更</strong>：將 <code>destWidth</code>/<code>destHeight</code> 重命名為 <code>dstWidth</code>/<code>dstHeight</code>。(<a href="https://github.com/coil-kt/coil/pull/275" target="_blank" rel="noreferrer">#275</a>)</li><li><strong>破壞性變更</strong>：重新排列 <code>MovieDrawable</code> 的建構子參數。(<a href="https://github.com/coil-kt/coil/pull/272" target="_blank" rel="noreferrer">#272</a>)</li><li><strong>破壞性變更</strong>：<code>Request.Listener</code> 的方法現在接收完整的 <code>Request</code> 物件，而不僅僅是其資料。</li><li><strong>破壞性變更</strong>：<code>GetRequestBuilder</code> 現在在其建構子中需要一個 <code>Context</code>。</li><li><strong>破壞性變更</strong>：<code>Request</code> 上的幾個屬性現在是可為 null 的。</li><li><strong>行為變更</strong>：預設在快取鍵中包含參數值。(<a href="https://github.com/coil-kt/coil/pull/319" target="_blank" rel="noreferrer">#319</a>)</li><li><strong>行為變更</strong>：稍微調整 <code>Request.Listener.onStart()</code> 時間，使其在 <code>Target.onStart()</code> 後立即呼叫。(<a href="https://github.com/coil-kt/coil/pull/348" target="_blank" rel="noreferrer">#348</a>)</li></ul><hr><ul><li><strong>新功能</strong>：增加 <code>WeakMemoryCache</code> 實作。(<a href="https://github.com/coil-kt/coil/pull/295" target="_blank" rel="noreferrer">#295</a>)</li><li><strong>新功能</strong>：增加 <code>coil-video</code> 以支援解碼視訊幀。(<a href="https://github.com/coil-kt/coil/pull/122" target="_blank" rel="noreferrer">#122</a>)</li><li><strong>新功能</strong>：引入 <a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/main/java/coil/EventListener.kt" target="_blank" rel="noreferrer"><code>EventListener</code></a>。(<a href="https://github.com/coil-kt/coil/pull/314" target="_blank" rel="noreferrer">#314</a>)</li><li><strong>新功能</strong>：引入 <a href="https://github.com/coil-kt/coil/blob/main/coil/src/main/java/coil/ImageLoaderFactory.kt" target="_blank" rel="noreferrer"><code>ImageLoaderFactory</code></a>。(<a href="https://github.com/coil-kt/coil/pull/311" target="_blank" rel="noreferrer">#311</a>)</li><li><strong>新功能</strong>：在 Android 11 上支援動畫 HEIF 影像序列。(<a href="https://github.com/coil-kt/coil/pull/297" target="_blank" rel="noreferrer">#297</a>)</li><li><strong>新功能</strong>：提升 Java 相容性。(<a href="https://github.com/coil-kt/coil/pull/262" target="_blank" rel="noreferrer">#262</a>)</li><li><strong>新功能</strong>：支援設定預設 <code>CachePolicy</code>。(<a href="https://github.com/coil-kt/coil/pull/307" target="_blank" rel="noreferrer">#307</a>)</li><li><strong>新功能</strong>：支援設定預設 <code>Bitmap.Config</code>。(<a href="https://github.com/coil-kt/coil/pull/342" target="_blank" rel="noreferrer">#342</a>)</li><li><strong>新功能</strong>：增加 <code>ImageLoader.invalidate(key)</code> 以清除單個記憶體快取項目。(<a href="https://github.com/coil-kt/coil/pull/55" target="_blank" rel="noreferrer">#55</a>)</li><li><strong>新功能</strong>：增加偵錯日誌以解釋為何快取影像未被重用。(<a href="https://github.com/coil-kt/coil/pull/346" target="_blank" rel="noreferrer">#346</a>)</li><li><strong>新功能</strong>：支援 <code>get</code> 請求的 <code>error</code> 和 <code>fallback</code> 可繪製物件。</li></ul><hr><ul><li>修正：修正當 Transformation 減少輸入位圖大小時的記憶體快取遺失問題。(<a href="https://github.com/coil-kt/coil/pull/357" target="_blank" rel="noreferrer">#357</a>)</li><li>修正：確保 BlurTransformation 中的半徑低於 RenderScript 最大值。(<a href="https://github.com/coil-kt/coil/pull/291" target="_blank" rel="noreferrer">#291</a>)</li><li>修正：修正解碼高色彩深度影像的問題。(<a href="https://github.com/coil-kt/coil/pull/358" target="_blank" rel="noreferrer">#358</a>)</li><li>修正：在 Android 11 及以上版本上停用 <code>ImageDecoderDecoder</code> 崩潰的解決方案。(<a href="https://github.com/coil-kt/coil/pull/298" target="_blank" rel="noreferrer">#298</a>)</li><li>修正：修正無法讀取 pre-API 23 上 EXIF 資料的問題。(<a href="https://github.com/coil-kt/coil/pull/331" target="_blank" rel="noreferrer">#331</a>)</li><li>修正：修正與 Android R SDK 不相容的問題。(<a href="https://github.com/coil-kt/coil/pull/337" target="_blank" rel="noreferrer">#337</a>)</li><li>修正：僅在 <code>ImageView</code> 具有匹配的 <code>SizeResolver</code> 時才啟用不精確尺寸。(<a href="https://github.com/coil-kt/coil/pull/344" target="_blank" rel="noreferrer">#344</a>)</li><li>修正：允許快取影像最多偏離請求尺寸一個像素。(<a href="https://github.com/coil-kt/coil/pull/360" target="_blank" rel="noreferrer">#360</a>)</li><li>修正：如果視圖不可見，則跳過交叉淡入過渡。(<a href="https://github.com/coil-kt/coil/pull/361" target="_blank" rel="noreferrer">#361</a>)</li></ul><hr><ul><li>棄用 <code>CoilContentProvider</code>。(<a href="https://github.com/coil-kt/coil/pull/293" target="_blank" rel="noreferrer">#293</a>)</li><li>使用 <code>@MainThread</code> 註解多個 <code>ImageLoader</code> 方法。</li><li>如果生命週期目前已啟動，則避免創建 <code>LifecycleCoroutineDispatcher</code>。(<a href="https://github.com/coil-kt/coil/pull/356" target="_blank" rel="noreferrer">#356</a>)</li><li><code>OriginalSize.toString()</code> 使用完整的套件名稱。</li><li>解碼軟體位圖時預先分配。(<a href="https://github.com/coil-kt/coil/pull/354" target="_blank" rel="noreferrer">#354</a>)</li></ul><hr><ul><li>將 Kotlin 更新至 1.3.72。</li><li>將 Coroutines 更新至 1.3.5。</li><li>將 OkHttp 更新至 3.12.10。</li><li>將 Okio 更新至 2.5.0。</li><li>更新 AndroidX 依賴： <ul><li><code>androidx.exifinterface:exifinterface</code> -&gt; 1.2.0</li></ul></li></ul><h2 id="_0-9-5-2020-年-2-月-6-日" tabindex="-1">[0.9.5] - 2020 年 2 月 6 日 <a class="header-anchor" href="#_0-9-5-2020-年-2-月-6-日" aria-label="Permalink to &quot;[0.9.5] - 2020 年 2 月 6 日&quot;">​</a></h2><ul><li>修正：確保在檢查視圖是否已硬體加速之前，該視圖已附加。這修正了請求硬體位圖可能錯過記憶體快取的情況。</li></ul><hr><ul><li>更新 AndroidX 依賴： <ul><li><code>androidx.core:core-ktx</code> -&gt; 1.2.0</li></ul></li></ul><h2 id="_0-9-4-2020-年-2-月-3-日" tabindex="-1">[0.9.4] - 2020 年 2 月 3 日 <a class="header-anchor" href="#_0-9-4-2020-年-2-月-3-日" aria-label="Permalink to &quot;[0.9.4] - 2020 年 2 月 3 日&quot;">​</a></h2><ul><li>修正：在 ImageDecoderDecoder 中降取樣時尊重長寬比。感謝 @zhanghai。</li></ul><hr><ul><li>之前，位圖會從記憶體快取中返回，只要其設定大於或等於請求中指定的設定。例如，如果您請求 <code>ARGB_8888</code> 位圖，則可能會從記憶體快取中返回 <code>RGBA_F16</code> 位圖。現在，快取的設定和請求的設定必須相等。</li><li>使 <code>scale</code> 和 <code>durationMillis</code> 在 <code>CrossfadeDrawable</code> 和 <code>CrossfadeTransition</code> 中公開。</li></ul><h2 id="_0-9-3-2020-年-2-月-1-日" tabindex="-1">[0.9.3] - 2020 年 2 月 1 日 <a class="header-anchor" href="#_0-9-3-2020-年-2-月-1-日" aria-label="Permalink to &quot;[0.9.3] - 2020 年 2 月 1 日&quot;">​</a></h2><ul><li>修正：在 <code>ScaleDrawable</code> 內部平移子可繪製物件以確保其居中。</li><li>修正：修正 GIF 和 SVG 未完全填充邊界的情況。</li></ul><hr><ul><li>將 <code>HttpUrl.get()</code> 的呼叫延遲到背景執行緒。</li><li>改善 BitmapFactory null 位圖錯誤訊息。</li><li>將 3 個裝置添加到硬體位圖黑名單。(<a href="https://github.com/coil-kt/coil/pull/264" target="_blank" rel="noreferrer">#264</a>)</li></ul><hr><ul><li>更新 AndroidX 依賴： <ul><li><code>androidx.lifecycle:lifecycle-common-java8</code> -&gt; 2.2.0</li></ul></li></ul><h2 id="_0-9-2-2020-年-1-月-19-日" tabindex="-1">[0.9.2] - 2020 年 1 月 19 日 <a class="header-anchor" href="#_0-9-2-2020-年-1-月-19-日" aria-label="Permalink to &quot;[0.9.2] - 2020 年 1 月 19 日&quot;">​</a></h2><ul><li>修正：修正 pre-API 19 上 GIF 解碼的問題。感謝 @mario。</li><li>修正：修正柵格化向量可繪製物件未被標記為取樣的問題。</li><li>修正：如果 Movie 維度 &lt;= 0，則拋出例外。</li><li>修正：修正 CrossfadeTransition 未恢復記憶體快取事件的問題。</li><li>修正：如果硬體位圖不允許，則防止將其返回給所有目標方法。</li><li>修正：修正 MovieDrawable 未將自身定位在其邊界中心的問題。</li></ul><hr><ul><li>移除 CrossfadeDrawable 的自動縮放。</li><li>使 <code>BitmapPool.trimMemory</code> 公開。</li><li>將 AnimatedImageDrawable 包裹在 ScaleDrawable 中以確保它填滿其邊界。</li><li>為 RequestBuilder.setParameter 增加 @JvmOverloads。</li><li>如果 SVG 的視圖框未設定，則將其設定為其尺寸。</li><li>將狀態和級別更改傳遞給 CrossfadeDrawable 子項。</li></ul><hr><ul><li>將 OkHttp 更新至 3.12.8。</li></ul><h2 id="_0-9-1-2019-年-12-月-30-日" tabindex="-1">[0.9.1] - 2019 年 12 月 30 日 <a class="header-anchor" href="#_0-9-1-2019-年-12-月-30-日" aria-label="Permalink to &quot;[0.9.1] - 2019 年 12 月 30 日&quot;">​</a></h2><ul><li>修正：修正呼叫 <code>LoadRequestBuilder.crossfade(false)</code> 時崩潰的問題。</li></ul><h2 id="_0-9-0-2019-年-12-月-30-日" tabindex="-1">[0.9.0] - 2019 年 12 月 30 日 <a class="header-anchor" href="#_0-9-0-2019-年-12-月-30-日" aria-label="Permalink to &quot;[0.9.0] - 2019 年 12 月 30 日&quot;">​</a></h2><ul><li><strong>破壞性變更</strong>：<code>Transformation.transform</code> 現在包含 <code>Size</code> 參數。這是為了支援基於 <code>Target</code> 尺寸改變輸出 <code>Bitmap</code> 尺寸的轉換。帶有轉換的請求現在也免於 <a href="/zh-Hant/coil/getting_started/">影像取樣</a>。</li><li><strong>破壞性變更</strong>：<code>Transformation</code> 現在應用於任何類型的 <code>Drawable</code>。之前，如果輸入 <code>Drawable</code> 不是 <code>BitmapDrawable</code>，<code>Transformation</code> 會被跳過。現在，<code>Drawable</code> 會被渲染到位圖，然後再應用 <code>Transformation</code>。</li><li><strong>破壞性變更</strong>：將 <code>null</code> 資料傳遞給 <code>ImageLoader.load</code> 現在被視為錯誤，並呼叫 <code>Target.onError</code> 和 <code>Request.Listener.onError</code>，並帶有 <code>NullRequestDataException</code>。此變更旨在支援在資料為 <code>null</code> 時設定 <code>fallback</code> 可繪製物件。之前請求會被靜默忽略。</li><li><strong>破壞性變更</strong>：<code>RequestDisposable.isDisposed</code> 現在是一個 <code>val</code>。</li></ul><hr><ul><li><strong>新功能</strong>：支援自訂過渡。 <a href="/zh-Hant/coil/transitions/">在此處查看更多資訊</a>。過渡被標記為實驗性，因為 API 正在孵化中。</li><li><strong>新功能</strong>：增加 <code>RequestDisposable.await</code> 以支援在 <code>LoadRequest</code> 進行中時暫停。</li><li><strong>新功能</strong>：支援在請求資料為 null 時設定 <code>fallback</code> 可繪製物件。</li><li><strong>新功能</strong>：增加 <code>Precision</code>。這使得輸出 <code>Drawable</code> 的尺寸精確，同時為支援縮放的目標（例如 <code>ImageViewTarget</code>）啟用縮放優化。請參閱 <a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/main/java/coil/size/Precision.kt" target="_blank" rel="noreferrer">其文件</a> 以獲取更多資訊。</li><li><strong>新功能</strong>：增加 <code>RequestBuilder.aliasKeys</code> 以支援匹配多個快取鍵。</li></ul><hr><ul><li>修正：使 RequestDisposable 執行緒安全。</li><li>修正：<code>RoundedCornersTransformation</code> 現在會裁剪到目標尺寸，然後圓角。</li><li>修正：<code>CircleCropTransformation</code> 現在從中心裁剪。</li><li>修正：將多個裝置添加到 <a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/main/java/coil/memory/HardwareBitmapService.kt" target="_blank" rel="noreferrer">硬體位圖黑名單</a>。</li><li>修正：將可繪製物件轉換為位圖時保留長寬比。</li><li>修正：修正 <code>Scale.FIT</code> 可能導致的記憶體快取遺失。</li><li>修正：確保 Parameters 迭代順序是確定的。</li><li>修正：創建 Parameters 和 ComponentRegistry 時的防禦性複製。</li><li>修正：確保 RealBitmapPool 的 maxSize &gt;= 0。</li><li>修正：如果 CrossfadeDrawable 未動畫或已完成，則顯示開始可繪製物件。</li><li>修正：調整 CrossfadeDrawable 以考慮具有未定義固有尺寸的子項。</li><li>修正：修正 <code>MovieDrawable</code> 未正確縮放的問題。</li></ul><hr><ul><li>將 Kotlin 更新至 1.3.61。</li><li>將 Kotlin Coroutines 更新至 1.3.3。</li><li>將 Okio 更新至 2.4.3。</li><li>更新 AndroidX 依賴： <ul><li><code>androidx.exifinterface:exifinterface</code> -&gt; 1.1.0</li></ul></li></ul><h2 id="_0-8-0-2019-年-10-月-22-日" tabindex="-1">[0.8.0] - 2019 年 10 月 22 日 <a class="header-anchor" href="#_0-8-0-2019-年-10-月-22-日" aria-label="Permalink to &quot;[0.8.0] - 2019 年 10 月 22 日&quot;">​</a></h2><ul><li><strong>破壞性變更</strong>：<code>SvgDrawable</code> 已被移除。相反，SVG 現在由 <code>SvgDecoder</code> 預渲染為 <code>BitmapDrawable</code>。這使得 SVG 在主執行緒上<strong>渲染成本顯著降低</strong>。此外，<code>SvgDecoder</code> 的建構子現在需要一個 <code>Context</code>。</li><li><strong>破壞性變更</strong>：<code>SparseIntArraySet</code> 擴充函式已移至 <code>coil.extension</code> 套件。</li></ul><hr><ul><li><strong>新功能</strong>：支援設定每個請求的網路標頭。<a href="https://github.com/coil-kt/coil/pull/120" target="_blank" rel="noreferrer">在此處查看更多資訊</a>。</li><li><strong>新功能</strong>：增加新的 <code>Parameters</code> API 以支援通過影像管道傳遞自訂資料。</li><li><strong>新功能</strong>：支援 RoundedCornersTransformation 中的單個圓角半徑。感謝 @khatv911。</li><li><strong>新功能</strong>：增加 <code>ImageView.clear()</code> 以支援主動釋放資源。</li><li><strong>新功能</strong>：支援從其他套件載入資源。</li><li><strong>新功能</strong>：為 ViewSizeResolver 增加 <code>subtractPadding</code> 屬性，以啟用/停用測量時減去視圖的內邊距。</li><li><strong>新功能</strong>：改進 HttpUrlFetcher MIME 類型偵測。</li><li><strong>新功能</strong>：為 MovieDrawable 和 CrossfadeDrawable 增加 Animatable2Compat 支援。</li><li><strong>新功能</strong>：增加 <code>RequestBuilder&lt;*&gt;.repeatCount</code> 以設定 GIF 的重複次數。</li><li><strong>新功能</strong>：將 BitmapPool 創建添加到公開 API。</li><li><strong>新功能</strong>：使用 <code>@MainThread</code> 註解 Request.Listener 方法。</li></ul><hr><ul><li>修正：使 CoilContentProvider 對測試可見。</li><li>修正：將夜間模式包含在資源快取鍵中。</li><li>修正：通過暫時將來源寫入磁碟來解決 ImageDecoder 原生崩潰問題。</li><li>修正：正確處理聯絡人顯示照片 URI。</li><li>修正：將色調傳遞給 CrossfadeDrawable 的子項。</li><li>修正：修正多個未關閉來源的實例。</li><li>修正：增加一個設備黑名單，這些設備具有損壞/不完整的硬體位圖實作。</li></ul><hr><ul><li>針對 SDK 29 編譯。</li><li>將 Kotlin Coroutines 更新至 1.3.2。</li><li>將 OkHttp 更新至 3.12.6。</li><li>將 Okio 更新至 2.4.1。</li><li>將 <code>appcompat-resources</code> 從 <code>compileOnly</code> 變更為 <code>implementation</code>，用於 <code>coil-base</code>。</li></ul><h2 id="_0-7-0-2019-年-9-月-8-日" tabindex="-1">[0.7.0] - 2019 年 9 月 8 日 <a class="header-anchor" href="#_0-7-0-2019-年-9-月-8-日" aria-label="Permalink to &quot;[0.7.0] - 2019 年 9 月 8 日&quot;">​</a></h2><ul><li><strong>破壞性變更</strong>：<code>ImageLoaderBuilder.okHttpClient(OkHttpClient.Builder.() -&gt; Unit)</code> 現在是 <code>ImageLoaderBuilder.okHttpClient(() -&gt; OkHttpClient)</code>。初始化器現在也會在背景執行緒上惰性呼叫。**如果您設定了自訂 <code>OkHttpClient</code>，則必須設定 <code>OkHttpClient.cache</code> 以啟用磁碟快取。**如果您未設定自訂 <code>OkHttpClient</code>，Coil 將創建預設的 <code>OkHttpClient</code>，該客戶端已啟用磁碟快取。預設的 Coil 快取可以使用 <code>CoilUtils.createDefaultCache(context)</code> 創建。例如：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImageLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    okHttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        OkHttpClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CoilUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDefaultCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>破壞性變更</strong>：<code>Fetcher.key</code> 不再具有預設實作。</li><li><strong>破壞性變更</strong>：之前，只有第一個適用於 <code>Mapper</code> 的會被呼叫。現在，所有適用的 <code>Mapper</code> 都會被呼叫。無 API 變更。</li><li><strong>破壞性變更</strong>：次要命名參數重命名：<code>url</code> -&gt; <code>uri</code>，<code>factory</code> -&gt; <code>initializer</code>。</li></ul><hr><ul><li><strong>新功能</strong>：<code>coil-svg</code> Artifact，它具有一個 <code>SvgDecoder</code>，支援自動解碼 SVG。由 <a href="https://github.com/BigBadaboom/androidsvg" target="_blank" rel="noreferrer">AndroidSVG</a> 提供支援。感謝 @rharter。</li><li><strong>新功能</strong>：<code>load(String)</code> 和 <code>get(String)</code> 現在接受任何支援的 Uri 方案。例如，您現在可以執行 <code>imageView.load(&quot;file:///path/to/file.jpg&quot;)</code>。</li><li><strong>新功能</strong>：重構 ImageLoader 以使用 <code>Call.Factory</code> 而不是 <code>OkHttpClient</code>。這允許使用 <code>ImageLoaderBuilder.okHttpClient { OkHttpClient() }</code> 惰性初始化網路資源。感謝 @ZacSweers。</li><li><strong>新功能</strong>：<code>RequestBuilder.decoder</code> 用於明確設定請求的解碼器。</li><li><strong>新功能</strong>：<code>ImageLoaderBuilder.allowHardware</code> 用於預設為 ImageLoader 啟用/停用硬體位圖。</li><li><strong>新功能</strong>：支援 ImageDecoderDecoder 中的軟體渲染。</li></ul><hr><ul><li>修正：載入向量可繪製物件的多個錯誤。</li><li>修正：支援 <code>WRAP_CONTENT</code> 視圖維度。</li><li>修正：支援解析長度超過 8192 位元組的 EXIF 資料。</li><li>修正：交叉淡入時不要拉伸具有不同長寬比的可繪製物件。</li><li>修正：防範網路觀察器因例外而無法註冊的問題。</li><li>修正：修正 MovieDrawable 中的除以零錯誤。感謝 @R12rus。</li><li>修正：支援巢狀 Android 資產檔案。感謝 @JaCzekanski。</li><li>修正：防範 Android O 和 O_MR1 上檔案描述符耗盡的問題。</li><li>修正：修正停用記憶體快取時崩潰的問題。感謝 @hansenji。</li><li>修正：確保 Target.cancel 始終從主執行緒呼叫。</li></ul><hr><ul><li>將 Kotlin 更新至 1.3.50。</li><li>將 Kotlin Coroutines 更新至 1.3.0。</li><li>將 OkHttp 更新至 3.12.4。</li><li>將 Okio 更新至 2.4.0。</li><li>將 AndroidX 依賴更新至最新的穩定版本： <ul><li><code>androidx.appcompat:appcompat</code> -&gt; 1.1.0</li><li><code>androidx.core:core-ktx</code> -&gt; 1.1.0</li><li><code>androidx.lifecycle:lifecycle-common-java8</code> -&gt; 2.1.0</li></ul></li><li>將 <code>appcompat</code> 替換為 <code>appcompat-resources</code> 作為可選的 <code>compileOnly</code> 依賴。<code>appcompat-resources</code> 是一個小得多的 Artifact。</li></ul><h2 id="_0-6-1-2019-年-8-月-16-日" tabindex="-1">[0.6.1] - 2019 年 8 月 16 日 <a class="header-anchor" href="#_0-6-1-2019-年-8-月-16-日" aria-label="Permalink to &quot;[0.6.1] - 2019 年 8 月 16 日&quot;">​</a></h2><ul><li>新功能：為 RequestBuilder 增加 <code>transformations(List&lt;Transformation&gt;)</code>。</li><li>修正：為檔案 URI 將上次修改日期添加到快取鍵。</li><li>修正：確保視圖維度評估為至少 1 像素。</li><li>修正：清除 MovieDrawable 的畫布，用於幀之間。</li><li>修正：正確開啟資產。</li></ul><h2 id="_0-6-0-2019-年-8-月-12-日" tabindex="-1">[0.6.0] - 2019 年 8 月 12 日 <a class="header-anchor" href="#_0-6-0-2019-年-8-月-12-日" aria-label="Permalink to &quot;[0.6.0] - 2019 年 8 月 12 日&quot;">​</a></h2><ul><li>首次發布。</li></ul>`,239)]))}const g=i(c,[["render",t]]);export{k as __pageData,g as default};
