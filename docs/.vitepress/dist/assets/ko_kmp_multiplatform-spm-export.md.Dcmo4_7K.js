import{_ as d,a as o,b as E}from"./chunks/multiplatform-spm-url._IA5Tg3X.js";import{_ as g,C as n,c,o as y,j as s,G as l,ag as e,a,w as t}from"./chunks/framework.Bksy39di.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/multiplatform-spm-export.md","filePath":"ko/kmp/multiplatform-spm-export.md","lastUpdated":1755516278000}'),F={name:"ko/kmp/multiplatform-spm-export.md"};function m(u,i,C,f,b,w){const p=n("tldr"),h=n("list"),k=n("def"),r=n("deflist");return y(),c("div",null,[i[5]||(i[5]=s("h1",{id:"swift-패키지-내보내기-설정",tabindex:"-1"},[a("Swift 패키지 내보내기 설정 "),s("a",{class:"header-anchor",href:"#swift-패키지-내보내기-설정","aria-label":'Permalink to "Swift 패키지 내보내기 설정"'},"​")],-1)),l(p,null,{default:t(()=>i[0]||(i[0]=[a(" 원격 통합 방식입니다. 다음과 같은 경우에 적합합니다:"),s("br",null,null,-1),s("ul",null,[s("li",null,"최종 애플리케이션의 코드베이스를 공통 코드베이스와 분리하고 싶을 때."),s("li",null,"로컬 머신에 이미 iOS를 대상으로 하는 Kotlin Multiplatform 프로젝트를 설정했을 때."),s("li",null,[a("iOS 프로젝트에서 Swift Package Manager를 사용하여 의존성을 관리할 때."),s("br")])],-1),s("p",null,[s("a",{href:"./multiplatform-ios-integration-overview"},"가장 적합한 통합 방식 선택하기")],-1)])),_:1}),i[6]||(i[6]=e('<p>Kotlin/Native 출력을 Apple 타겟용 Swift Package Manager(SPM) 의존성으로 사용하도록 설정할 수 있습니다.</p><p>iOS 타겟을 포함하는 Kotlin Multiplatform 프로젝트를 고려해 보세요. 이 iOS 바이너리를 네이티브 Swift 프로젝트에서 작업하는 iOS 개발자에게 의존성으로 제공하고 싶을 수 있습니다. Kotlin Multiplatform 툴링을 사용하면 Xcode 프로젝트와 원활하게 통합될 아티팩트를 제공할 수 있습니다.</p><p>이 튜토리얼에서는 Kotlin Gradle 플러그인을 사용하여 <a href="./multiplatform-build-native-binaries#build-xcframeworks">XCFrameworks</a>를 빌드하는 방법을 보여줍니다.</p><h2 id="원격-통합-설정" tabindex="-1">원격 통합 설정 <a class="header-anchor" href="#원격-통합-설정" aria-label="Permalink to &quot;원격 통합 설정&quot;">​</a></h2><p>프레임워크를 사용할 수 있게 하려면 두 가지 파일을 업로드해야 합니다:</p><ul><li>XCFramework가 포함된 ZIP 아카이브. 직접 액세스 가능한 편리한 파일 저장소에 업로드해야 합니다(예: 아카이브가 첨부된 GitHub 릴리스 생성, Amazon S3 또는 Maven 사용). 워크플로에 가장 쉽게 통합할 수 있는 옵션을 선택하세요.</li><li>패키지를 설명하는 <code>Package.swift</code> 파일. 별도의 Git 저장소에 푸시해야 합니다.</li></ul>',6)),i[7]||(i[7]=s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"프로젝트-구성-옵션",tabindex:"-1"},[a("프로젝트 구성 옵션 "),s("a",{class:"header-anchor",href:"#프로젝트-구성-옵션","aria-label":'Permalink to "프로젝트 구성 옵션 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[8]||(i[8]=e(`<p>이 튜토리얼에서는 XCFramework를 바이너리로 선호하는 파일 저장소에 저장하고, <code>Package.swift</code> 파일은 별도의 Git 저장소에 저장합니다.</p><p>하지만 프로젝트를 다르게 구성할 수도 있습니다. Git 저장소를 구성하는 다음 옵션들을 고려해 보세요:</p><ul><li><p><code>Package.swift</code> 파일과 XCFramework로 패키징될 코드를 별도의 Git 저장소에 저장합니다. 이렇게 하면 Swift 매니페스트를 파일이 설명하는 프로젝트와 별도로 버전 관리할 수 있습니다. 이는 확장 가능하고 일반적으로 유지 관리가 더 쉽기 때문에 권장되는 접근 방식입니다.</p></li><li><p><code>Package.swift</code> 파일을 Kotlin Multiplatform 코드 옆에 둡니다. 이는 더 간단한 접근 방식이지만, 이 경우 Swift 패키지와 코드가 동일한 버전 관리를 사용하게 된다는 점을 명심하십시오. SPM은 패키지 버전 관리에 Git 태그를 사용하며, 이는 프로젝트에 사용되는 태그와 충돌할 수 있습니다.</p></li><li><p><code>Package.swift</code> 파일을 소비자 프로젝트의 저장소 내부에 저장합니다. 이렇게 하면 버전 관리 및 유지 관리 문제를 피할 수 있습니다. 그러나 이 접근 방식은 소비자 프로젝트의 다중 저장소 SPM 설정 및 추가 자동화에서 문제를 일으킬 수 있습니다:</p><ul><li>다중 패키지 프로젝트에서는 하나의 소비자 패키지만 외부 모듈에 의존할 수 있습니다(프로젝트 내 의존성 충돌을 피하기 위해). 따라서 Kotlin Multiplatform 모듈에 의존하는 모든 로직은 특정 소비자 패키지에 캡슐화되어야 합니다.</li><li>자동화된 CI 프로세스를 사용하여 Kotlin Multiplatform 프로젝트를 게시하는 경우, 이 프로세스에는 업데이트된 <code>Package.swift</code> 파일을 소비자 저장소에 게시하는 것이 포함되어야 합니다. 이는 소비자 저장소의 충돌 업데이트로 이어질 수 있으므로 CI에서 이러한 단계를 유지 관리하기 어려울 수 있습니다.</li></ul></li></ul><h3 id="멀티플랫폼-프로젝트-구성" tabindex="-1">멀티플랫폼 프로젝트 구성 <a class="header-anchor" href="#멀티플랫폼-프로젝트-구성" aria-label="Permalink to &quot;멀티플랫폼 프로젝트 구성&quot;">​</a></h3><p>다음 예시에서 Kotlin Multiplatform 프로젝트의 공유 코드는 <code>shared</code> 모듈에 로컬로 저장됩니다. 프로젝트 구조가 다르다면 코드 및 경로 예시에서 &quot;shared&quot;를 모듈 이름으로 바꾸십시오.</p><p>XCFramework 게시를 설정하려면:</p><ol><li><p><code>shared/build.gradle.kts</code> 구성 파일의 iOS 타겟 목록에 <code>XCFramework</code> 호출을 추가하여 업데이트합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFramework</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Other Kotlin Multiplatform targets</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Name of the module to be imported in the consumer project</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcframeworkName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Shared&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XCFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xcframeworkName)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        it.binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcframeworkName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Specify CFBundleIdentifier to uniquely identify the framework</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            binaryOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bundleId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.example.\${xcframeworkName}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            xcf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            isStatic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>프레임워크를 생성하기 위해 Gradle 태스크를 실행합니다:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :shared:assembleSharedXCFramework</span></span></code></pre></div><p>결과 프레임워크는 프로젝트 디렉토리 내 <code>shared/build/XCFrameworks/release/Shared.xcframework</code> 폴더로 생성됩니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Compose Multiplatform 프로젝트를 사용하는 경우 다음 Gradle 태스크를 사용하십시오: <code>shell ./gradlew :composeApp:assembleSharedXCFramework </code> 그런 다음 <code>composeApp/build/XCFrameworks/release/Shared.xcframework</code> 폴더에서 결과 프레임워크를 찾을 수 있습니다.</p></div></li></ol><h3 id="xcframework-및-swift-패키지-매니페스트-준비" tabindex="-1">XCFramework 및 Swift 패키지 매니페스트 준비 <a class="header-anchor" href="#xcframework-및-swift-패키지-매니페스트-준비" aria-label="Permalink to &quot;XCFramework 및 Swift 패키지 매니페스트 준비&quot;">​</a></h3>`,8)),s("ol",null,[i[3]||(i[3]=s("li",null,[s("p",null,[s("code",null,"Shared.xcframework"),a(" 폴더를 ZIP 파일로 압축하고, 예를 들어 결과 아카이브에 대한 체크섬을 계산합니다:")]),s("p",null,[s("code",null,"swift package compute-checksum Shared.xcframework.zip")])],-1)),s("li",null,[i[2]||(i[2]=s("p",null,"선택한 파일 저장소에 ZIP 파일을 업로드합니다. 파일은 직접 링크로 액세스할 수 있어야 합니다. 예를 들어, GitHub 릴리스를 사용하여 이 작업을 수행하는 방법은 다음과 같습니다:",-1)),l(r,{collapsible:"true"},{default:t(()=>[l(k,{title:"GitHub 릴리스에 업로드"},{default:t(()=>[l(h,{type:"decimal"},{default:t(()=>i[1]||(i[1]=[s("li",null,[s("a",{href:"https://github.com"},"GitHub"),a("로 이동하여 계정에 로그인하십시오.")],-1),s("li",null,"릴리스를 생성하려는 저장소로 이동하십시오.",-1),s("li",null,[a("오른쪽의 "),s("b",null,"Releases"),a(" 섹션에서 "),s("b",null,"Create a new release"),a(" 링크를 클릭하십시오.")],-1),s("li",null,"릴리스 정보를 입력하고, 새 태그를 추가하거나 생성하며, 릴리스 제목을 지정하고 설명을 작성하십시오.",-1),s("li",null,[s("p",null,[a("하단의 "),s("b",null,"Attach binaries by dropping them here or selecting them"),a(" 필드를 통해 XCFramework가 포함된 ZIP 파일을 업로드하십시오:")]),s("img",{src:d,alt:"Fill in the release information",width:"700"})],-1),s("li",null,[s("b",null,"Publish release"),a("를 클릭하십시오.")],-1),s("li",null,[s("p",null,[a("릴리스의 "),s("b",null,"Assets"),a(" 섹션에서 ZIP 파일을 마우스 오른쪽 버튼으로 클릭하고 브라우저에서 "),s("b",null,"링크 주소 복사"),a(" 또는 유사한 옵션을 선택하십시오:")]),s("img",{src:o,alt:"Copy the link to the uploaded file",width:"500"})],-1)])),_:1})]),_:1})]),_:1})]),i[4]||(i[4]=e(`<li><p>[권장] 링크가 작동하고 파일이 다운로드되는지 확인하십시오. 터미널에서 다음 명령어를 실행하십시오:</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>curl &lt;downloadable link to the uploaded XCFramework ZIP file&gt;</span></span></code></pre></div></li><li><p>임의의 디렉토리를 선택하고 다음 코드로 <code>Package.swift</code> 파일을 로컬로 생성하십시오:</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// swift-tools-version:5.3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PackageDescription</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> package</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   platforms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">iOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.v14),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   products</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">binaryTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;link to the uploaded XCFramework ZIP file&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         checksum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;checksum calculated for the ZIP file&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p><code>url</code> 필드에 XCFramework가 포함된 ZIP 아카이브 링크를 지정하십시오.</p></li><li><p>[권장] 결과 매니페스트를 검증하려면 <code>Package.swift</code> 파일이 있는 디렉토리에서 다음 셸 명령어를 실행할 수 있습니다:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show-dependencies</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --format</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> json</span></span></code></pre></div><p>출력은 발견된 오류를 설명하거나 매니페스트가 올바른 경우 성공적인 다운로드 및 구문 분석 결과를 보여줍니다.</p></li><li><p><code>Package.swift</code> 파일을 원격 저장소에 푸시하십시오. 패키지의 시맨틱 버전으로 Git 태그를 생성하고 푸시해야 합니다.</p></li>`,5))]),i[9]||(i[9]=e('<h3 id="패키지-의존성-추가" tabindex="-1">패키지 의존성 추가 <a class="header-anchor" href="#패키지-의존성-추가" aria-label="Permalink to &quot;패키지 의존성 추가&quot;">​</a></h3><p>이제 두 파일 모두 액세스 가능하므로, 생성한 패키지에 대한 의존성을 기존 클라이언트 iOS 프로젝트에 추가하거나 새 프로젝트를 생성할 수 있습니다. 패키지 의존성을 추가하려면:</p><ol><li><p>Xcode에서 <strong>File | Add Package Dependencies</strong>를 선택합니다.</p></li><li><p>검색 필드에 <code>Package.swift</code> 파일이 있는 Git 저장소의 URL을 입력합니다:</p><p><img src="'+E+`" alt="Specify repo with the package file"></p></li><li><p><strong>Add package</strong> 버튼을 클릭한 다음, 패키지에 대한 제품과 해당 타겟을 선택합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Swift 패키지를 만드는 경우 대화 상자가 다릅니다. 이 경우 <strong>Copy package</strong> 버튼을 클릭합니다. 이렇게 하면 <code>.package</code> 줄이 클립보드에 복사됩니다. 이 줄을 자체 <code>Package.swift</code> 파일의 <a href="https://developer.apple.com/documentation/packagedescription/package/dependency" target="_blank" rel="noreferrer">Package.Dependency</a> 블록에 붙여넣고 필요한 제품을 적절한 <code>Target.Dependency</code> 블록에 추가하십시오.</p></div></li></ol><h3 id="설정-확인" tabindex="-1">설정 확인 <a class="header-anchor" href="#설정-확인" aria-label="Permalink to &quot;설정 확인&quot;">​</a></h3><p>모든 것이 올바르게 설정되었는지 확인하려면 Xcode에서 가져오기를 테스트하십시오:</p><ol><li><p>프로젝트에서 UI 뷰 파일로 이동하십시오. 예를 들어, <code>ContentView.swift</code>.</p></li><li><p>코드를 다음 스니펫으로 대체하십시오:</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwiftUI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;globe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">imageScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.large)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.tint)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world! </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(Shared.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Platform_iosKt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getPlatform</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">().</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#Preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>여기서는 <code>Shared</code> XCFramework를 가져와서 <code>Text</code> 필드에서 플랫폼 이름을 얻는 데 사용합니다.</p></li><li><p>미리 보기가 새 텍스트로 업데이트되었는지 확인하십시오.</p></li></ol><h2 id="여러-모듈을-xcframework로-내보내기" tabindex="-1">여러 모듈을 XCFramework로 내보내기 <a class="header-anchor" href="#여러-모듈을-xcframework로-내보내기" aria-label="Permalink to &quot;여러 모듈을 XCFramework로 내보내기&quot;">​</a></h2><p>여러 Kotlin Multiplatform 모듈의 코드를 iOS 바이너리로 사용할 수 있게 하려면, 이 모듈들을 하나의 우산 모듈로 결합하십시오. 그런 다음 이 우산 모듈의 XCFramework를 빌드하고 내보내십시오.</p><p>예를 들어, <code>network</code> 및 <code>database</code> 모듈이 있고, 이를 <code>together</code> 모듈로 결합한다고 가정합니다:</p><ol><li><p><code>together/build.gradle.kts</code> 파일에서 의존성 및 프레임워크 구성을 지정하십시오:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frameworkName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;together&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XCFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(frameworkName)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { iosTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Same as in the example above,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // with added export calls for dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        iosTarget.binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.network)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.database)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frameworkName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            xcf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Dependencies set as &quot;api&quot; (as opposed to &quot;implementation&quot;) to export underlying modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.network)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.database)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>포함된 각 모듈은 iOS 타겟이 구성되어 있어야 합니다. 예를 들어:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>together</code> 폴더 안에 빈 Kotlin 파일을 생성하십시오. 예를 들어, <code>together/src/commonMain/kotlin/Together.kt</code>. 이는 내보내진 모듈에 소스 코드가 포함되어 있지 않으면 Gradle 스크립트가 프레임워크를 조립할 수 없는 현재의 임시 해결책입니다.</p></li><li><p>프레임워크를 조립하는 Gradle 태스크를 실행하십시오:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :together:assembleTogetherReleaseXCFramework</span></span></code></pre></div></li><li><p><code>together.xcframework</code>를 준비하기 위해 <a href="#prepare-the-xcframework-and-the-swift-package-manifest">이전 섹션</a>의 단계를 따르십시오: 아카이브하고, 체크섬을 계산하고, 아카이브된 XCFramework를 파일 저장소에 업로드하고, <code>Package.swift</code> 파일을 생성하고 푸시하십시오.</p></li></ol><p>이제 Xcode 프로젝트로 의존성을 가져올 수 있습니다. <code>import together</code> 지시문을 추가한 후에는 Swift 코드에서 <code>network</code> 및 <code>database</code> 모듈의 클래스를 모두 가져올 수 있어야 합니다.</p>`,11))])}const v=g(F,[["render",m]]);export{S as __pageData,v as default};
