import{_ as e}from"./chunks/native-get-started-button.Cbc-25HC.js";import{_ as a,c as i,o as l,ag as r}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Kotlin/Native","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/native-overview.md","filePath":"kotlin/native-overview.md","lastUpdated":1754307826000}'),o={name:"kotlin/native-overview.md"};function n(p,t,h,c,s,v){return l(),i("div",null,t[0]||(t[0]=[r('<h1 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h1><p>Kotlin/Native 是一种用于将 Kotlin 代码编译为原生二进制文件的技术，这些二进制文件无需虚拟机即可运行。 Kotlin/Native 包含基于 <a href="https://llvm.org/" target="_blank" rel="noreferrer">LLVM</a> 的 Kotlin 编译器后端以及 Kotlin 标准库的原生实现。</p><h2 id="为什么选择-kotlin-native" tabindex="-1">为什么选择 Kotlin/Native？ <a class="header-anchor" href="#为什么选择-kotlin-native" aria-label="Permalink to &quot;为什么选择 Kotlin/Native？&quot;">​</a></h2><p>Kotlin/Native 主要设计用于支持在那些不适合或不可能使用_虚拟机_的平台进行编译，例如嵌入式设备或 iOS。它非常适合需要生成一个不需要额外运行时或虚拟机的自包含程序的情况。</p><p>将已编译的 Kotlin 代码包含到用 C、C++、Swift、Objective-C 和其他语言编写的现有项目中非常容易。 你也可以直接从 Kotlin/Native 使用现有的原生代码、静态或动态 C 库、Swift/Objective-C frameworks、图形引擎以及其他任何东西。</p><p><a href="/kotlin/native-get-started"><img src="'+e+'" width="350" alt="开始使用 Kotlin/Native" style=""></a></p><h2 id="目标平台" tabindex="-1">目标平台 <a class="header-anchor" href="#目标平台" aria-label="Permalink to &quot;目标平台&quot;">​</a></h2><p>Kotlin/Native 支持以下平台：</p><ul><li><p>Linux</p></li><li><p>Windows（通过 <a href="https://www.mingw-w64.org/" target="_blank" rel="noreferrer">MinGW</a>）</p></li><li><p><a href="https://developer.android.com/ndk" target="_blank" rel="noreferrer">Android NDK</a></p></li><li><p>适用于 macOS、iOS、tvOS 和 watchOS 的 Apple 目标平台</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>要编译 Apple 目标平台，你需要安装 <a href="https://apps.apple.com/us/app/xcode/id497799835" target="_blank" rel="noreferrer">Xcode</a> 及其命令行工具。</p></div></li></ul><p><a href="/kotlin/native-target-support">关于支持的目标平台的完整列表，请参见此处</a>。</p><h2 id="互操作" tabindex="-1">互操作 <a class="header-anchor" href="#互操作" aria-label="Permalink to &quot;互操作&quot;">​</a></h2><p>Kotlin/Native 支持与不同操作系统的原生编程语言进行双向互操作。 编译器可以为许多平台创建可执行文件、静态或动态 C 库以及 Swift/Objective-C frameworks。</p><h3 id="与-c-的互操作" tabindex="-1">与 C 的互操作 <a class="header-anchor" href="#与-c-的互操作" aria-label="Permalink to &quot;与 C 的互操作&quot;">​</a></h3><p>Kotlin/Native 提供了<a href="/kotlin/native-c-interop">与 C 的互操作</a>。你可以直接从 Kotlin 代码中使用现有的 C 库。</p><p>要了解更多信息，请完成以下教程：</p><ul><li><a href="/kotlin/native-dynamic-libraries">为 C/C++ 项目创建包含 C 头文件的动态库</a></li><li><a href="/kotlin/mapping-primitive-data-types-from-c">了解 C 类型如何映射到 Kotlin</a></li><li><a href="/kotlin/native-app-with-c-and-libcurl">使用 C 互操作和 libcurl 创建原生 HTTP 客户端</a></li></ul><h3 id="与-swift-objective-c-的互操作" tabindex="-1">与 Swift/Objective-C 的互操作 <a class="header-anchor" href="#与-swift-objective-c-的互操作" aria-label="Permalink to &quot;与 Swift/Objective-C 的互操作&quot;">​</a></h3><p>Kotlin/Native 提供了<a href="/kotlin/native-objc-interop">通过 Objective-C 与 Swift 的互操作</a>。你可以在 macOS 和 iOS 上的 Swift/Objective-C 应用程序中直接使用 Kotlin 代码。</p><p>要了解更多信息，请完成 <a href="/kotlin/apple-framework">Kotlin/Native 作为 Apple framework</a> 教程。</p><h2 id="跨平台共享代码" tabindex="-1">跨平台共享代码 <a class="header-anchor" href="#跨平台共享代码" aria-label="Permalink to &quot;跨平台共享代码&quot;">​</a></h2><p>Kotlin/Native 包含一组预构建的<a href="/kotlin/native-platform-libs">平台库</a>，有助于在项目之间共享 Kotlin 代码。POSIX、gzip、OpenGL、Metal、Foundation 以及许多其他流行的库和 Apple frameworks 都已预导入并作为 Kotlin/Native 库包含在编译器包中。</p><p>Kotlin/Native 是 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin Multiplatform</a> 技术的一部分，该技术有助于在多个平台（包括 Android、iOS、JVM、web 和原生）之间共享公共代码。多平台库为公共 Kotlin 代码提供了必要的 API，并允许在一个地方用 Kotlin 编写项目的共享部分。</p><h2 id="内存管理器" tabindex="-1">内存管理器 <a class="header-anchor" href="#内存管理器" aria-label="Permalink to &quot;内存管理器&quot;">​</a></h2><p>Kotlin/Native 使用类似于 JVM 和 Go 的自动<a href="/kotlin/native-memory-manager">内存管理器</a>。 它拥有自己的追踪式垃圾回收器，该回收器也与 Swift/Objective-C 的 ARC 集成。</p><p>内存消耗由自定义内存分配器控制。它优化了内存使用，并有助于防止内存分配的突然激增。</p>',25)]))}const k=a(o,[["render",n]]);export{m as __pageData,k as default};
