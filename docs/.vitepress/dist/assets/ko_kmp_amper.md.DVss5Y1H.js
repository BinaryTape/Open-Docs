import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"Amper를 이용한 프로젝트 구성","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/amper.md","filePath":"ko/kmp/amper.md","lastUpdated":1755516278000}'),p={name:"ko/kmp/amper.md"};function t(l,s,r,h,k,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="amper를-이용한-프로젝트-구성" tabindex="-1">Amper를 이용한 프로젝트 구성 <a class="header-anchor" href="#amper를-이용한-프로젝트-구성" aria-label="Permalink to &quot;Amper를 이용한 프로젝트 구성&quot;">​</a></h1><p><a href="https://github.com/JetBrains/amper/tree/HEAD" target="_blank" rel="noreferrer">Amper</a>는 JetBrains에서 만든 새로운 도구로, 빌드, 패키징, 퍼블리싱 등을 위한 프로젝트를 구성하는 데 도움을 줍니다. Amper를 사용하면 빌드 시스템에 시간을 덜 쓰고 대신 실제 비즈니스 문제를 해결하는 데 집중할 수 있습니다.</p><p>Amper를 사용하면 JVM, Android, iOS, macOS, Linux에서 작동하는 Kotlin 멀티플랫폼 애플리케이션은 물론, 이러한 모든 지원 대상과 함께 작동하는 멀티플랫폼 라이브러리를 위한 구성 파일을 생성할 수 있습니다.</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Amper는 현재 <a href="./supported-platforms#general-kotlin-stability-levels">실험 단계</a>입니다. Kotlin 멀티플랫폼 프로젝트에서 사용해 보시는 것을 환영합니다. <a href="https://youtrack.jetbrains.com/issues/AMPER" target="_blank" rel="noreferrer">YouTrack</a>에 피드백을 주시면 감사하겠습니다.</p></div><h2 id="amper-작동-방식" tabindex="-1">Amper 작동 방식 <a class="header-anchor" href="#amper-작동-방식" aria-label="Permalink to &quot;Amper 작동 방식&quot;">​</a></h2><p>Amper는 현재 백엔드로는 Gradle을, 프로젝트 구성을 정의하는 프런트엔드로는 YAML을 사용합니다. 사용자 지정 태스크, CocoaPods, Maven으로 라이브러리 퍼블리싱, Gradle 상호 운용을 통한 데스크톱 앱 패키징을 지원합니다.</p><p>Amper를 사용하면 플랫폼별 애플리케이션 및 공유 Kotlin 라이브러리를 위한 구성을 설정할 수 있습니다. 이는 특별한 선언형 DSL을 사용하여 <code>.yaml</code> 모듈 매니페스트 파일에 모듈로 선언됩니다.</p><p>이 DSL의 핵심 개념은 Kotlin 멀티플랫폼입니다. Amper를 사용하면 복잡한 Gradle 개념에 깊이 파고들 필요 없이 Kotlin 멀티플랫폼 프로젝트를 빠르고 쉽게 구성할 수 있습니다. Amper DSL은 종속성, 설정 등을 포함한 멀티플랫폼 구성으로 작업할 수 있는 특별한 구문을 제공합니다.</p><p>다음은 JVM, Android, iOS 애플리케이션과 함께 사용할 수 있는 Kotlin 멀티플랫폼 공유 라이브러리를 위한 Amper 매니페스트 파일의 예시입니다:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lib</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  platforms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Shared Compose Multiplatform dependencies:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">org.jetbrains.compose.foundation:foundation:1.5.0-rc01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exported</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">org.jetbrains.compose.material3:material3:1.5.0-rc01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exported</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Android-only dependencies  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies@android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Integration compose with activities</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">androidx.activity:activity-compose:1.7.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exported</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">androidx.appcompat:appcompat:1.6.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exported</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># iOS-only dependencies with a dependency on a CocoaPod</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Note that CocoaPods dependencies are not yet implemented in the prototype</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies@ios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;FirebaseCore&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;~&gt; 6.6&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Enable Kotlin serialization</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    serialization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Enable Compose Multiplatform framework</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  compose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled</span></span></code></pre></div><ul><li><code>product</code> 섹션은 프로젝트 유형과 대상 플랫폼 목록을 정의합니다.</li><li><code>dependencies</code> 섹션은 Kotlin 및 Maven 종속성뿐만 아니라 CocoaPods 및 Swift Package Manager와 같은 플랫폼별 패키지 관리자도 추가합니다.</li><li><code>@platform</code> 한정자는 종속성 및 설정을 포함한 플랫폼별 섹션을 표시합니다.</li></ul><h2 id="amper-사용해-보기" tabindex="-1">Amper 사용해 보기 <a class="header-anchor" href="#amper-사용해-보기" aria-label="Permalink to &quot;Amper 사용해 보기&quot;">​</a></h2><p>Amper를 사용해 볼 수 있는 방법은 다음과 같습니다:</p><ul><li><a href="https://www.jetbrains.com/idea/nextversion/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2023.3 이상 버전을 JVM 및 Android 프로젝트(빌드 233.11555부터 시작)에 사용하세요.</li><li>명령줄 또는 CI/CD 도구에서 Amper 프로젝트를 빌드하려면 <a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="noreferrer">Gradle</a>을 사용하세요.</li></ul><p><a href="./https://github.com/JetBrains/amper/tree/HEAD/docs/Tutorial">이 튜토리얼</a>을 따라 Amper로 첫 Kotlin 멀티플랫폼 프로젝트를 생성하세요. Amper의 기능과 디자인에 대해 더 알아보려면 <a href="./https://github.com/JetBrains/amper/tree/HEAD/docs/Documentation">문서</a>를 살펴보세요.</p><p>저희 <a href="https://youtrack.jetbrains.com/issues/AMPER" target="_blank" rel="noreferrer">이슈 트래커</a>에 자유롭게 피드백을 제출해 주세요. 여러분의 의견은 Amper의 미래를 만드는 데 도움이 될 것입니다.</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><ul><li>Amper를 만들게 된 동기, 사용 사례, 프로젝트의 현재 상태 및 미래에 대해 자세히 알아보려면 <a href="https://blog.jetbrains.com/blog/2023/11/09/amper-improving-the-build-tooling-user-experience" target="_blank" rel="noreferrer">JetBrains 블로그</a>를 확인하세요.</li><li>가장 많이 묻는 질문에 대한 답변은 <a href="./https://github.com/JetBrains/amper/tree/HEAD/docs/FAQ">Amper FAQ</a>를 참조하세요.</li><li>Amper의 기능과 디자인의 다양한 측면을 다루는 <a href="./https://github.com/JetBrains/amper/tree/HEAD/docs/Documentation">Amper 문서</a>를 읽어보세요.</li></ul>`,18)]))}const c=i(p,[["render",t]]);export{E as __pageData,c as default};
