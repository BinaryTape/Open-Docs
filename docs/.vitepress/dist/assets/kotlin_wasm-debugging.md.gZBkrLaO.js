import{_ as t,a as l,b as e,c as n}from"./chunks/wasm-composeapp-browser.n73x6mgF.js";import{_ as p,a as r}from"./chunks/wasm-custom-formatters-firefox.C2LVO8ja.js";import{_ as o,a as h,b as k,c as d,d as c,e as g}from"./chunks/wasm-debug-scope.e8jm_6Gj.js";import{_ as m}from"./chunks/slack.7XnOPcJK.js";import{_ as E,c as u,o as b,ag as i,j as a,a as y}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"调试 Kotlin/Wasm 代码","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/wasm-debugging.md","filePath":"kotlin/wasm-debugging.md","lastUpdated":1754307826000}'),f={name:"kotlin/wasm-debugging.md"};function _(F,s,v,C,w,D){return b(),u("div",null,s[0]||(s[0]=[i('<h1 id="调试-kotlin-wasm-代码" tabindex="-1">调试 Kotlin/Wasm 代码 <a class="header-anchor" href="#调试-kotlin-wasm-代码" aria-label="Permalink to &quot;调试 Kotlin/Wasm 代码&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasm 处于 <a href="/kotlin/components-stability">Alpha</a> 阶段。它可能随时更改。</p></div><p>本教程演示如何使用浏览器调试你通过 Kotlin/Wasm 构建的 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 应用程序。</p><h2 id="开始之前" tabindex="-1">开始之前 <a class="header-anchor" href="#开始之前" aria-label="Permalink to &quot;开始之前&quot;">​</a></h2><p>使用 Kotlin Multiplatform 向导创建一个项目：</p><ol><li><p>打开 <a href="https://kmp.jetbrains.com/#newProject" target="_blank" rel="noreferrer">Kotlin Multiplatform 向导</a>。</p></li><li><p>在 <strong>新建项目</strong> 选项卡中，将项目名称和 ID 更改为你偏好的值。在本教程中，我们将名称设置为 &quot;WasmDemo&quot;，将 ID 设置为 &quot;wasm.project.demo&quot;。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这些是项目目录的名称和 ID。你也可以保留它们不变。</p></div></li><li><p>选择 <strong>Web</strong> 选项。确保没有选择其他选项。</p></li><li><p>点击 <strong>下载</strong> 按钮并解压生成的归档文件。</p><p><img src="'+t+'" alt="Kotlin Multiplatform 向导" width="450"></p></li></ol><h2 id="在-intellij-idea-中打开项目" tabindex="-1">在 IntelliJ IDEA 中打开项目 <a class="header-anchor" href="#在-intellij-idea-中打开项目" aria-label="Permalink to &quot;在 IntelliJ IDEA 中打开项目&quot;">​</a></h2><ol><li>下载并安装最新版本的 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a>。</li><li>在 IntelliJ IDEA 的欢迎界面，点击 <strong>打开</strong> 或在菜单栏中选择 <strong>文件 | 打开</strong>。</li><li>导航到解压后的 &quot;WasmDemo&quot; 文件夹并点击 <strong>打开</strong>。</li></ol><h2 id="运行应用程序" tabindex="-1">运行应用程序 <a class="header-anchor" href="#运行应用程序" aria-label="Permalink to &quot;运行应用程序&quot;">​</a></h2><ol><li><p>在 IntelliJ IDEA 中，通过选择 <strong>视图</strong> | <strong>工具窗口</strong> | <strong>Gradle</strong> 来打开 <strong>Gradle</strong> 工具窗口。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>你需要使用至少 Java 11 作为 Gradle JVM，任务才能成功加载。</p></div></li><li><p>在 <strong>composeApp</strong> | <strong>任务</strong> | <strong>kotlin browser</strong> 中，选择并运行 <strong>wasmJsBrowserDevelopmentRun</strong> 任务。</p><p><img src="'+l+'" alt="运行 Gradle 任务" width="450"></p><p>此外，你也可以在 <code>WasmDemo</code> 根目录中从终端运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmJsBrowserDevelopmentRun</span></span></code></pre></div></li><li><p>应用程序启动后，在浏览器中打开以下 URL：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http://localhost:8080/</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>端口号可能不同，因为 8080 端口可能不可用。你可以在 Gradle 构建控制台中找到实际的端口号。</p></div><p>你会看到一个“点击我！”按钮。点击它：</p><p><img src="'+e+'" alt="点击我" width="550"></p><p>现在你看到 Compose Multiplatform 标志：</p><p><img src="'+n+'" alt="浏览器中的 Compose 应用程序" width="550"></p></li></ol><h2 id="在浏览器中调试" tabindex="-1">在浏览器中调试 <a class="header-anchor" href="#在浏览器中调试" aria-label="Permalink to &quot;在浏览器中调试&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>目前，仅能在浏览器中进行调试。将来，你将能够在 <a href="https://youtrack.jetbrains.com/issue/KT-64683/Kotlin-Wasm-debugging-in-IntelliJ-IDEA" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 中调试你的代码。</p></div><p>你可以直接在浏览器中调试这个 Compose Multiplatform 应用程序，无需额外配置。</p><p>但是，对于其他项目，你可能需要在 Gradle 构建文件中配置额外的设置。有关如何配置浏览器以进行调试的更多信息，请展开下一节。</p>',14),a("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"配置浏览器进行调试",tabindex:"-1"},[y("配置浏览器进行调试 "),a("a",{class:"header-anchor",href:"#配置浏览器进行调试","aria-label":'Permalink to "配置浏览器进行调试 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i(`<h4 id="启用对项目源代码的访问" tabindex="-1">启用对项目源代码的访问 <a class="header-anchor" href="#启用对项目源代码的访问" aria-label="Permalink to &quot;启用对项目源代码的访问&quot;">​</a></h4><p>默认情况下，浏览器无法访问调试所必需的项目部分源代码。为了提供访问权限，你可以配置 Webpack DevServer 来提供这些源代码。在 <code>ComposeApp</code> 目录中，将以下代码片段添加到你的 <code>build.gradle.kts</code> 文件中。</p><p>将此导入作为顶层声明添加：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpackConfig</span></span></code></pre></div><p>将此代码片段添加到 <code>commonWebpackConfig{}</code> 代码块中，该代码块位于 <code>kotlin{}</code> 中的 <code>wasmJs{}</code> 目标 DSL 和 <code>browser{}</code> 平台 DSL 内：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">devServer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (devServer ?: KotlinWebpackConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DevServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    static </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (static ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 提供源代码以便在浏览器中调试</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.rootDir.path)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.projectDir.path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>生成的文件块如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalWasmDsl::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        moduleName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composeApp&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            commonWebpackConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                outputFileName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composeApp.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                devServer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (devServer ?: KotlinWebpackConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DevServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    static </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (static ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // 提供源代码以便在浏览器中调试</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.rootDir.path)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.projectDir.path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>目前，无法调试库源代码。 <a href="https://youtrack.jetbrains.com/issue/KT-64685" target="_blank" rel="noreferrer">将来我们会支持此功能</a>。</p></div><h4 id="使用自定义格式化器" tabindex="-1">使用自定义格式化器 <a class="header-anchor" href="#使用自定义格式化器" aria-label="Permalink to &quot;使用自定义格式化器&quot;">​</a></h4><p>自定义格式化器有助于在调试 Kotlin/Wasm 代码时，以更用户友好和易于理解的方式显示和定位变量值。</p><p>自定义格式化器在开发构建中默认已启用，因此你不需要额外的 Gradle 配置。</p><p>此特性在 Firefox 和基于 Chromium 的浏览器中受支持，因为它使用了 <a href="https://firefox-source-docs.mozilla.org/devtools-user/custom_formatters/index.html" target="_blank" rel="noreferrer">自定义格式化器 API</a>。</p><p>要使用此特性，请确保已启用自定义格式化器在你的浏览器开发者工具中：</p><ul><li><p>在 Chrome DevTools 中，在 <strong>设置 | 偏好设置 | 控制台</strong> 中找到自定义格式化器复选框：</p><p><img src="`+p+'" alt="在 Chrome 中启用自定义格式化器" width="400"></p></li><li><p>在 Firefox DevTools 中，在 <strong>设置 | 高级设置</strong> 中找到自定义格式化器复选框：</p><p><img src="'+r+`" alt="在 Firefox 中启用自定义格式化器" width="400"></p></li></ul><p>自定义格式化器适用于 Kotlin/Wasm 开发构建。如果你对生产构建有特定要求，你需要相应地调整你的 Gradle 配置。将以下编译器选项添加到 <code>wasmJs {}</code> 代码块中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xwasm-debugger-custom-formatters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>启用自定义格式化器后，你可以继续调试教程。</p><h3 id="调试你的-kotlin-wasm-应用程序" tabindex="-1">调试你的 Kotlin/Wasm 应用程序 <a class="header-anchor" href="#调试你的-kotlin-wasm-应用程序" aria-label="Permalink to &quot;调试你的 Kotlin/Wasm 应用程序&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>本教程使用 Chrome 浏览器，但你应该能够使用其他浏览器遵循这些步骤。有关更多信息，请参见 <a href="/kotlin/wasm-troubleshooting#browser-versions">浏览器版本</a>。</p></div><ol><li><p>在应用程序的浏览器窗口中，右键单击并选择 <strong>检查</strong> 操作以访问开发者工具。此外，你也可以使用 <strong>F12</strong> 快捷键或选择 <strong>视图 | 开发者 | 开发者工具</strong>。</p></li><li><p>切换到 <strong>源代码</strong> 选项卡并选择要调试的 Kotlin 文件。在本教程中，我们将使用 <code>Greeting.kt</code> 文件。</p></li><li><p>点击行号以在你想要探查的代码上设置断点。只有数字颜色较深的行才能设置断点。</p><p><img src="`+o+'" alt="设置断点" width="700"></p></li><li><p>点击“点击我！”按钮以与应用程序进行交互。此操作会触发代码执行，当执行到达断点时，调试器会暂停。</p></li><li><p>在调试窗格中，使用调试控制按钮在断点处探查变量和代码执行：</p><ul><li><img src="'+h+'" alt="步入" width="30" type="joined"> 步入以更深入地探究函数。</li><li><img src="'+k+'" alt="步过" width="30" type="joined"> 步过以执行当前行并在下一行暂停。</li><li><img src="'+d+'" alt="步出" width="30" type="joined"> 步出以执行代码直到退出当前函数。</li></ul><p><img src="'+c+'" alt="调试控制" width="450"></p></li><li><p>检查 <strong>调用堆栈</strong> 和 <strong>作用域</strong> 窗格以追溯函数调用序列，并找出任何错误的位置。</p><p><img src="'+g+'" alt="检查调用堆栈" width="450"></p><p>为了更好地可视化变量值，请参见 <a href="#configure-your-browser-for-debugging">配置浏览器进行调试</a> 部分中的 <em>使用自定义格式化器</em>。</p></li><li><p>更改你的代码并再次 <a href="#run-the-application">运行应用程序</a> 以验证一切是否按预期工作。</p></li><li><p>点击带有断点的行号以移除断点。</p></li></ol><h2 id="留下反馈" tabindex="-1">留下反馈 <a class="header-anchor" href="#留下反馈" aria-label="Permalink to &quot;留下反馈&quot;">​</a></h2><p>我们非常感谢你对调试体验的任何反馈！</p><ul><li><img src="'+m+'" alt="Slack" width="25" type="joined"> Slack: <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">获取 Slack 邀请</a> 并直接向我们的 <a href="https://kotlinlang.slack.com/archives/CDFP59223" target="_blank" rel="noreferrer">#webassembly</a> 频道中的开发者提供反馈。</li><li>在 <a href="https://youtrack.jetbrains.com/issue/KT-56492" target="_blank" rel="noreferrer">YouTrack</a> 中提供你的反馈。</li></ul><h2 id="接下来" tabindex="-1">接下来？ <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来？&quot;">​</a></h2><ul><li>观看此 <a href="https://www.youtube.com/watch?v=t3FUWfJWrjU&amp;t=2703s" target="_blank" rel="noreferrer">YouTube 视频</a> 中的 Kotlin/Wasm 调试实际操作。</li><li>尝试来自我们的 <code>kotlin-wasm-examples</code> 版本库的 Kotlin/Wasm 示例： <ul><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-imageviewer" target="_blank" rel="noreferrer">Compose 图片查看器</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-jetsnack" target="_blank" rel="noreferrer">Jetsnack 应用程序</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/nodejs-example" target="_blank" rel="noreferrer">Node.js 示例</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/wasi-example" target="_blank" rel="noreferrer">WASI 示例</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-example" target="_blank" rel="noreferrer">Compose 示例</a></li></ul></li></ul>',26)]))}const K=E(f,[["render",_]]);export{I as __pageData,K as default};
