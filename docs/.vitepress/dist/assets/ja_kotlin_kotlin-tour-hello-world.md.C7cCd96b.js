import{_ as p}from"./chunks/icon-1.K8qzZaho.js";import{_ as h}from"./chunks/icon-2-todo.CF_tKCD9.js";import{_ as k}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as r}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as o}from"./chunks/icon-5-todo.CqROQ9Y8.js";import{_ as d}from"./chunks/icon-6-todo.Bq5TIrqo.js";import{_ as c}from"./chunks/icon-7-todo.D-C90RBD.js";import{_ as g,C as l,c as E,o as y,j as s,G as n,ag as u,a as i,w as m}from"./chunks/framework.Bksy39di.js";const N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/kotlin-tour-hello-world.md","filePath":"ja/kotlin/kotlin-tour-hello-world.md","lastUpdated":1754307826000}'),F={name:"ja/kotlin/kotlin-tour-hello-world.md"};function C(b,a,v,_,A,D){const t=l("no-index"),e=l("tldr");return y(),E("div",null,[a[1]||(a[1]=s("h1",{id:"hello-world",tabindex:"-1"},[i("Hello world "),s("a",{class:"header-anchor",href:"#hello-world","aria-label":'Permalink to "Hello world"'},"​")],-1)),n(t),n(e,null,{default:m(()=>a[0]||(a[0]=[s("p",null,[s("img",{src:p,width:"20",alt:"最初のステップ"}),i(),s("strong",null,"Hello world"),s("br"),s("img",{src:h,width:"20",alt:"2番目のステップ"}),i(),s("a",{href:"/ja/kotlin/kotlin-tour-basic-types"},"基本型"),s("br"),s("img",{src:k,width:"20",alt:"3番目のステップ"}),i(),s("a",{href:"/ja/kotlin/kotlin-tour-collections"},"コレクション"),s("br"),s("img",{src:r,width:"20",alt:"4番目のステップ"}),i(),s("a",{href:"/ja/kotlin/kotlin-tour-control-flow"},"制御フロー"),s("br"),s("img",{src:o,width:"20",alt:"5番目のステップ"}),i(),s("a",{href:"/ja/kotlin/kotlin-tour-functions"},"関数"),s("br"),s("img",{src:d,width:"20",alt:"6番目のステップ"}),i(),s("a",{href:"/ja/kotlin/kotlin-tour-classes"},"クラス"),s("br"),s("img",{src:c,width:"20",alt:"最終ステップ"}),i(),s("a",{href:"/ja/kotlin/kotlin-tour-null-safety"},"Null安全性")],-1)])),_:1}),a[2]||(a[2]=u(`<p>以下は「Hello, world!」と出力するシンプルなプログラムです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Hello, world!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlinでは:</p><ul><li><code>fun</code> は関数を宣言するために使われます。</li><li><code>main()</code> 関数はプログラムの開始点です。</li><li>関数の本体は波括弧 <code>{}</code> 内に記述します。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html" target="_blank" rel="noreferrer"><code>println()</code></a> および <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/print.html" target="_blank" rel="noreferrer"><code>print()</code></a> 関数は、その引数を標準出力に出力します。</li></ul><p>関数とは、特定のタスクを実行する命令の集まりです。一度関数を作成すれば、そのタスクを実行する必要があるたびに、命令をいちいち書き直すことなく関数を使用できます。関数については、いくつかの章で詳しく説明します。それまでは、すべての例で <code>main()</code> 関数を使用します。</p><h2 id="変数" tabindex="-1">変数 <a class="header-anchor" href="#変数" aria-label="Permalink to &quot;変数&quot;">​</a></h2><p>すべてのプログラムはデータを保存できる必要があり、変数はその手助けをします。Kotlinでは、以下を宣言できます。</p><ul><li><code>val</code> を使って読み取り専用変数を宣言します。</li><li><code>var</code> を使ってミュータブル変数を宣言します。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>読み取り専用変数に一度値を設定すると、その値を変更することはできません。</p></div><p>値を割り当てるには、代入演算子 <code>=</code> を使用します。</p><p>例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> popcorn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // There are 5 boxes of popcorn</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hotdog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // There are 7 hotdogs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // There are 10 customers in the queue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Some customers leave the queue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    customers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customers)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>変数は、プログラムの開始時に <code>main()</code> 関数の外で宣言できます。このように宣言された変数は、<strong>トップレベル</strong>で宣言されたと呼ばれます。</p></div><p><code>customers</code> はミュータブル変数であるため、宣言後にその値を再代入できます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>すべての変数は、デフォルトで読み取り専用（<code>val</code>）として宣言することをお勧めします。ミュータブル変数（<code>var</code>）は、本当に必要な場合にのみ使用してください。そうすることで、意図しない変更を誤って行ってしまう可能性を低くできます。</p></div><h2 id="文字列テンプレート" tabindex="-1">文字列テンプレート <a class="header-anchor" href="#文字列テンプレート" aria-label="Permalink to &quot;文字列テンプレート&quot;">​</a></h2><p>変数の内容を標準出力に出力する方法を知っておくと便利です。これは<strong>文字列テンプレート</strong>を使って行えます。テンプレート式を使用すると、変数や他のオブジェクトに格納されているデータにアクセスし、それらを文字列に変換できます。文字列値は二重引用符 <code>&quot;</code> で囲まれた文字のシーケンスです。テンプレート式は常にドル記号 <code>$</code> で始まります。テンプレート式でコードの一部を評価するには、ドル記号 <code>$</code> の後に波括弧 <code>{}</code> でコードを囲みます。</p><p>例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;There are </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$customers</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> customers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // There are 10 customers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;There are \${customers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} customers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // There are 11 customers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>詳細については、<a href="/ja/kotlin/strings#string-templates">文字列テンプレート</a>を参照してください。</p><p>変数に型が宣言されていないことに気づくでしょう。Kotlinは型を <code>Int</code> と推論しました。このツアーでは、次の章でKotlinの様々な基本型とそれらを宣言する方法を説明します。</p><h2 id="練習" tabindex="-1">練習 <a class="header-anchor" href="#練習" aria-label="Permalink to &quot;練習&quot;">​</a></h2><details class="details custom-block"><summary>演習</summary><p>プログラムが「Mary is 20 years old」を標準出力に出力するように、コードを完成させてください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mary&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ここにコードを記述してください</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><details class="details custom-block"><summary>解答例</summary><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mary&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$age</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> years old&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details></details>`,23))])}const P=g(F,[["render",C]]);export{N as __pageData,P as default};
