import{_ as a,c as d,o as i,ag as e}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"Android 源代码集布局","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-android-layout.md","filePath":"kmp/multiplatform-android-layout.md","lastUpdated":1755516278000}'),n={name:"kmp/multiplatform-android-layout.md"};function s(o,t,r,l,h,c){return i(),d("div",null,t[0]||(t[0]=[e(`<h1 id="android-源代码集布局" tabindex="-1">Android 源代码集布局 <a class="header-anchor" href="#android-源代码集布局" aria-label="Permalink to &quot;Android 源代码集布局&quot;">​</a></h1><p>新的 Android 源代码集布局在 Kotlin 1.8.0 中引入，并在 1.9.0 中成为默认布局。请遵循本指南，了解已弃用布局和新布局之间的主要区别，以及如何迁移你的项目。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>你无需实现所有建议，只需实现适用于你的特定项目的建议。</p></div><h2 id="检测兼容性" tabindex="-1">检测兼容性 <a class="header-anchor" href="#检测兼容性" aria-label="Permalink to &quot;检测兼容性&quot;">​</a></h2><p>新布局要求 Android Gradle 插件 7.0 或更高版本，并支持 Android Studio 2022.3 及更高版本。检测你的 Android Gradle 插件版本，如有必要请升级。</p><h2 id="重命名-kotlin-源代码集" tabindex="-1">重命名 Kotlin 源代码集 <a class="header-anchor" href="#重命名-kotlin-源代码集" aria-label="Permalink to &quot;重命名 Kotlin 源代码集&quot;">​</a></h2><p>如适用，请遵循此模式重命名你项目中的源代码集：</p><table tabindex="0"><thead><tr><th>旧版源代码集布局</th><th>新版源代码集布局</th></tr></thead><tbody><tr><td><code>targetName</code> + <code>AndroidSourceSet.name</code></td><td><code>targetName</code> + <code>AndroidVariantType</code></td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code> 映射到 <code>{KotlinSourceSet.name}</code> 如下所示：</p><table tabindex="0"><thead><tr><th></th><th>旧版源代码集布局</th><th>新版源代码集布局</th></tr></thead><tbody><tr><td>main</td><td>androidMain</td><td>androidMain</td></tr><tr><td>test</td><td>androidTest</td><td>android<b>Unit</b>Test</td></tr><tr><td>androidTest</td><td>android<b>Android</b>Test</td><td>android<b>Instrumented</b>Test</td></tr></tbody></table><h2 id="移动源文件" tabindex="-1">移动源文件 <a class="header-anchor" href="#移动源文件" aria-label="Permalink to &quot;移动源文件&quot;">​</a></h2><p>如适用，请遵循此模式将你的源文件移动到新目录：</p><table tabindex="0"><thead><tr><th>旧版源代码集布局</th><th>新版源代码集布局</th></tr></thead><tbody><tr><td>该布局包含额外的 <code>/kotlin</code> 源目录</td><td><code>src/{KotlinSourceSet.name}/kotlin</code></td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code> 映射到 <code>{SourceDirectories included}</code> 如下所示：</p><table tabindex="0"><thead><tr><th></th><th>旧版源代码集布局</th><th>新版源代码集布局</th></tr></thead><tbody><tr><td>main</td><td>src/androidMain/kotlin<br>src/main/kotlin<br>src/main/java</td><td>src/androidMain/kotlin<br>src/main/kotlin<br>src/main/java</td></tr><tr><td>test</td><td>src/androidTest/kotlin<br>src/test/kotlin<br>src/test/java</td><td>src/android<b>Unit</b>Test/kotlin<br>src/test/kotlin<br>src/test/java</td></tr><tr><td>androidTest</td><td>src/android<b>Android</b>Test/kotlin<br>src/androidTest/java</td><td>src/android<b>Instrumented</b>Test/kotlin<br>src/androidTest/java, <b>src/androidTest/kotlin</b></td></tr></tbody></table><h2 id="移动-androidmanifest-xml-文件" tabindex="-1">移动 AndroidManifest.xml 文件 <a class="header-anchor" href="#移动-androidmanifest-xml-文件" aria-label="Permalink to &quot;移动 AndroidManifest.xml 文件&quot;">​</a></h2><p>如果你的项目中有 <code>AndroidManifest.xml</code> 文件，请遵循此模式将其移动到新目录：</p><table tabindex="0"><thead><tr><th>旧版源代码集布局</th><th>新版源代码集布局</th></tr></thead><tbody><tr><td>src/{<b>Android</b>SourceSet.name}/AndroidManifest.xml</td><td>src/{<b>Kotlin</b>SourceSet.name}/AndroidManifest.xml</td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code> 映射到 <code>{AndroidManifest.xml location}</code> 如下所示：</p><table tabindex="0"><thead><tr><th></th><th>旧版源代码集布局</th><th>新版源代码集布局</th></tr></thead><tbody><tr><td>main</td><td>src/main/AndroidManifest.xml</td><td>src/<b>android</b>Main/AndroidManifest.xml</td></tr><tr><td>debug</td><td>src/debug/AndroidManifest.xml</td><td>src/<b>android</b>Debug/AndroidManifest.xml</td></tr></tbody></table><h2 id="检测-android-与公共测试之间的关系" tabindex="-1">检测 Android 与公共测试之间的关系 <a class="header-anchor" href="#检测-android-与公共测试之间的关系" aria-label="Permalink to &quot;检测 Android 与公共测试之间的关系&quot;">​</a></h2><p>新的 Android 源代码集布局改变了 Android 插桩测试（在新布局中重命名为 <code>androidInstrumentedTest</code>）和公共测试之间的关系。</p><p>此前，<code>androidAndroidTest</code> 和 <code>commonTest</code> 之间的 <code>dependsOn</code> 关系是默认的。这意味着以下几点：</p><ul><li><code>commonTest</code> 中的代码在 <code>androidAndroidTest</code> 中可用。</li><li><code>commonTest</code> 中的 <code>expect</code> 声明必须在 <code>androidAndroidTest</code> 中有对应的 <code>actual</code> 实现。</li><li>在 <code>commonTest</code> 中声明的测试也作为 Android 插桩测试运行。</li></ul><p>在新版 Android 源代码集布局中，<code>dependsOn</code> 关系默认不添加。如果你希望保留此前的行为，请在你的 <code>build.gradle.kts</code> 文件中手动声明以下关系：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> androidInstrumentedTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonTest)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="调整-android-flavor-的实现" tabindex="-1">调整 Android flavor 的实现 <a class="header-anchor" href="#调整-android-flavor-的实现" aria-label="Permalink to &quot;调整 Android flavor 的实现&quot;">​</a></h2><p>此前，Kotlin Gradle 插件主动创建与 Android 源代码集对应的源代码集，其中包含 <code>debug</code> 和 <code>release</code> 构建类型或 <code>demo</code> 和 <code>full</code> 等自定义 flavor。它使得源代码集可以通过诸如 <code>val androidDebug by getting { ... }</code> 的表达式来访问。</p><p>新的 Android 源代码集布局利用了 Android 的 <a href="https://developer.android.com/reference/tools/gradle-api/8.0/com/android/build/api/variant/AndroidComponentsExtension#onVariants(com.android.build.api.variant.VariantSelector,kotlin.Function1)" target="_blank" rel="noreferrer"><code>onVariants</code></a> 来创建源代码集。这使得此类表达式无效，导致诸如 <code>org.gradle.api.UnknownDomainObjectException: KotlinSourceSet with name &#39;androidDebug&#39; not found</code> 的错误。</p><p>为了解决此问题，请在你的 <code>build.gradle.kts</code> 文件中使用新的 <code>invokeWhenCreated()</code> API：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invokeWhenCreated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidFreeDebug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,31)]))}const b=a(n,[["render",s]]);export{k as __pageData,b as default};
