import{_ as n}from"./chunks/compose-180-LineHeightStyle.DsnceP5I.js";import{_ as o,C as r,c as p,o as h,ag as e,G as t,j as i,a as l}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"Compose Multiplatform 1.8.2 的新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/whats-new-compose-180.md","filePath":"zh-Hant/kmp/whats-new-compose-180.md","lastUpdated":1755516278000}'),d={name:"zh-Hant/kmp/whats-new-compose-180.md"};function k(c,a,g,E,m,u){const s=r("secondary-label");return h(),p("div",null,[a[0]||(a[0]=e(`<h1 id="compose-multiplatform-1-8-2-的新功能" tabindex="-1">Compose Multiplatform 1.8.2 的新功能 <a class="header-anchor" href="#compose-multiplatform-1-8-2-的新功能" aria-label="Permalink to &quot;Compose Multiplatform 1.8.2 的新功能&quot;">​</a></h1><p>以下是此功能版本的主要亮點：</p><ul><li><a href="#variable-fonts">可變字體</a></li><li><a href="#drag-and-drop">iOS 上的拖放功能</a></li><li><a href="#deep-linking">iOS 上的深層連結</a></li><li><a href="#accessibility-support-improvements">iOS 上改進的輔助功能</a></li><li><a href="#preloading-of-resources">網頁目標的資源預載入</a></li><li><a href="#browser-controls-supported-in-the-navigation-library">與瀏覽器導航控制的整合</a></li></ul><p>請參閱此版本的完整變更列表<a href="https://github.com/JetBrains/compose-multiplatform/releases/tag/v1.8.0" target="_blank" rel="noreferrer">在 GitHub 上</a>。</p><h2 id="dependencies" tabindex="-1">Dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;Dependencies&quot;">​</a></h2><ul><li>Gradle 外掛 <code>org.jetbrains.compose</code>，版本 1.8.2。基於 Jetpack Compose 函式庫： <ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.8.2" target="_blank" rel="noreferrer">Runtime 1.8.2</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.8.2" target="_blank" rel="noreferrer">UI 1.8.2</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.8.2" target="_blank" rel="noreferrer">Foundation 1.8.2</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.8.2" target="_blank" rel="noreferrer">Material 1.8.2</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.3.2" target="_blank" rel="noreferrer">Material3 1.3.2</a></li></ul></li><li>Lifecycle 函式庫 <code>org.jetbrains.androidx.lifecycle:lifecycle-*:2.9.0</code>。基於 <a href="https://developer.android.com/jetpack/androidx/releases/lifecycle#2.9.0" target="_blank" rel="noreferrer">Jetpack Lifecycle 2.9.0</a></li><li>Navigation 函式庫 <code>org.jetbrains.androidx.navigation:navigation-*:2.9.0-beta03</code>。基於 <a href="https://developer.android.com/jetpack/androidx/releases/navigation#2.9.0" target="_blank" rel="noreferrer">Jetpack Navigation 2.9.0</a></li><li>Material3 Adaptive 函式庫 <code>org.jetbrains.compose.material3.adaptive:adaptive*:1.2.0-alpha03</code>。基於 <a href="https://developer.android.com/jetpack/androidx/releases/compose-material3-adaptive#1.1.0" target="_blank" rel="noreferrer">Jetpack Material3 Adaptive 1.1.0</a></li><li>Savedstate 函式庫 <code>org.jetbrains.androidx.savedstate:savedstate:1.3.1</code>。基於 <a href="https://developer.android.com/jetpack/androidx/releases/savedstate#1.3.0" target="_blank" rel="noreferrer">Jetpack Savedstate 1.3.0</a></li><li>WindowManager Core 函式庫 <code>org.jetbrains.androidx.window:window-core:1.4.0-alpha07</code>。基於 <a href="https://developer.android.com/jetpack/androidx/releases/window#1.4.0-alpha04" target="_blank" rel="noreferrer">Jetpack WindowManager 1.4.0-alpha04</a></li></ul><h2 id="breaking-changes" tabindex="-1">Breaking changes <a class="header-anchor" href="#breaking-changes" aria-label="Permalink to &quot;Breaking changes&quot;">​</a></h2><h3 id="compose-multiplatform-完全遷移至-k2-編譯器" tabindex="-1">Compose Multiplatform 完全遷移至 K2 編譯器 <a class="header-anchor" href="#compose-multiplatform-完全遷移至-k2-編譯器" aria-label="Permalink to &quot;Compose Multiplatform 完全遷移至 K2 編譯器&quot;">​</a></h3><p>在此版本中，Compose Multiplatform 程式碼庫已完全遷移至 K2 編譯器。 從 1.8.0 開始， 依賴 Compose Multiplatform 的專案所產生的原生和 Web klibs 只能在 Kotlin 2.1.0 或更新版本中使用。</p><p>除了 Compose 編譯器 Gradle 外掛中的底層變更之外，這對您的專案意味著：</p><ul><li>對於使用依賴 Compose Multiplatform 的函式庫的應用程式： 建議您將專案更新至 Kotlin 2.1.20， 並將依賴項更新為針對 Compose Multiplatform 1.8.0 和 Kotlin 2.1.x 編譯的版本。</li><li>對於依賴 Compose Multiplatform 的函式庫： 您需要將專案更新至 Kotlin 2.1.x 和 Compose 1.8.0， 然後重新編譯函式庫並發布新版本。</li></ul><p>如果您在升級到 Compose Multiplatform 1.8.0 時遇到任何相容性問題， 請透過在 <a href="https://youtrack.jetbrains.com/newIssue?project=CMP" target="_blank" rel="noreferrer">YouTrack</a> 中提交問題告知我們。</p><h3 id="移除了對-material-icons-core-的隱式依賴" tabindex="-1">移除了對 <code>material-icons-core</code> 的隱式依賴 <a class="header-anchor" href="#移除了對-material-icons-core-的隱式依賴" aria-label="Permalink to &quot;移除了對 \`material-icons-core\` 的隱式依賴&quot;">​</a></h3><p>Compose Multiplatform 1.8.2 納入了 <a href="https://android.googlesource.com/platform/frameworks/support/+/1d1abef790da93325a83fe19b50ccdec06be6956" target="_blank" rel="noreferrer">Material 中的一項變更</a>： 不再有對 <code>material-icons-core</code> 的傳遞依賴。 這與<a href="#full-migration-of-compose-multiplatform-to-the-k2-compiler">逐步淘汰使用 K1 建置的依賴項</a>保持一致。</p><p>如果您需要繼續在專案中使用 <code>material-icons-core</code> 函式庫， 請明確地將依賴項新增至您的 <code>build.gradle.kts</code>，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material:material-icons-core:1.7.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="導航中從-bundle-遷移到-savedstate" tabindex="-1">導航中從 Bundle 遷移到 SavedState <a class="header-anchor" href="#導航中從-bundle-遷移到-savedstate" aria-label="Permalink to &quot;導航中從 Bundle 遷移到 SavedState&quot;">​</a></h3><p>Compose Multiplatform 1.8.2 中的導航， 與 Android 導航組件一起，正在過渡到使用 <code>SavedState</code> 類別來儲存 UI 狀態。 這打破了在導航圖中宣告目的地時訪問狀態資料的模式。 升級到 <a href="./compose-navigation-routing">Navigation 函式庫</a> 的 2.9.* 版本時， 請務必更新此類程式碼以使用 <code>SavedState</code> 的存取器。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>為了更穩健的架構， 請使用<a href="https://developer.android.com/guide/navigation/design/type-safety" target="_blank" rel="noreferrer">型別安全導航方法</a>， 避免使用字串路由。</p></div><p>Before:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Destinations.Followers.route) { navBackStackEntry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navBackStackEntry.arguments?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navBackStackEntry.arguments?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (uId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        FollowersMainComposable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navController, accountId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uId, page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Starting with Compose Multiplatform 1.8.2:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Destinations.Followers.route) { navBackStackEntry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navBackStackEntry.arguments?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getStringOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navBackStackEntry.arguments?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getStringOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (uId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        FollowersMainComposable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navController, accountId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uId, page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="ios-上已棄用的-composeuiviewcontrollerdelegate" tabindex="-1">iOS 上已棄用的 <code>ComposeUIViewControllerDelegate</code> <a class="header-anchor" href="#ios-上已棄用的-composeuiviewcontrollerdelegate" aria-label="Permalink to &quot;iOS 上已棄用的 \`ComposeUIViewControllerDelegate\`&quot;">​</a></h3><p><code>ComposeUIViewControllerDelegate</code> API 已棄用，改為支援父檢視控制器。 如果您在 Compose Multiplatform 1.8.2 中使用此棄用 API，您將會遇到一個棄用錯誤，指出 您應該透過父檢視控制器覆寫 <code>UIViewController</code> 類別方法。</p><p>有關子-父檢視控制器關係的更多資訊，請參閱 Apple 的開發者<a href="https://developer.apple.com/documentation/uikit/uiviewcontroller" target="_blank" rel="noreferrer">文件</a>。</p><h3 id="ios-上移除了過時的-platformlayers-選項" tabindex="-1">iOS 上移除了過時的 <code>platformLayers</code> 選項 <a class="header-anchor" href="#ios-上移除了過時的-platformlayers-選項" aria-label="Permalink to &quot;iOS 上移除了過時的 \`platformLayers\` 選項&quot;">​</a></h3><p><code>platformLayers</code> 實驗性選項<a href="./whats-new-compose-160#separate-platform-views-for-popups-dialogs-and-dropdowns-ios-desktop">在 1.6.0 中被引入</a> 以允許啟用替代分層模式，並在父容器邊界之外繪製彈出視窗和對話框。</p><p>此模式現在是 iOS 上的預設行為，並且啟用它的選項已移除為過時。</p><h3 id="測試中的破壞性變更" tabindex="-1">測試中的破壞性變更 <a class="header-anchor" href="#測試中的破壞性變更" aria-label="Permalink to &quot;測試中的破壞性變更&quot;">​</a></h3><h4 id="測試中協程延遲的新處理方式" tabindex="-1">測試中協程延遲的新處理方式 <a class="header-anchor" href="#測試中協程延遲的新處理方式" aria-label="Permalink to &quot;測試中協程延遲的新處理方式&quot;">​</a></h4><p>以前，Compose Multiplatform 測試不會將帶有 <code>delay()</code> 呼叫的副作用視為閒置。 因此，以下測試（例如）將無限期掛起：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loopInLaunchedEffectTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runComposeUiTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        LaunchedEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Unit) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>當協程在組合作用域中啟動後呼叫 <code>delay()</code> 函式時，<code>waitForIdle()</code>、<code>awaitIdle()</code> 和 <code>runOnIdle()</code> 函式現在將 Compose 視為閒置。 這項變更修復了上述掛起的測試，但會破壞依賴於 <code>waitForIdle()</code>、<code>awaitIdle()</code> 和 <code>runOnIdle()</code> 來執行帶有 <code>delay()</code> 的協程的測試。</p><p>為了在這些情況下產生相同的結果，請人為地推進時間：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> updateText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LaunchedEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(updateText) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (updateText) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">updateText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">waitForIdle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 由於 waitForIdle() 不再等待延遲的 LaunchedEffect() 完成，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 測試需要推進時間以使以下斷言正確：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mainClock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">advanceTimeBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, text)</span></span></code></pre></div><p>已經使用 <code>mainClock.advanceTimeBy()</code> 呼叫來推進測試時鐘的測試可能會在重新組合、佈局、繪圖和效果方面表現不同。</p><h4 id="runonidle-的實作與-android-對齊" tabindex="-1"><code>runOnIdle()</code> 的實作與 Android 對齊 <a class="header-anchor" href="#runonidle-的實作與-android-對齊" aria-label="Permalink to &quot;\`runOnIdle()\` 的實作與 Android 對齊&quot;">​</a></h4><p>為了使 Compose Multiplatform 中 <code>runOnIdle()</code> 測試函式的實作與 Android 行為保持一致， 我們引入了以下變更：</p><ul><li><code>runOnIdle()</code> 現在會在 UI 執行緒上執行其 <code>action</code>。</li><li><code>runOnIdle()</code> 在執行 <code>action</code> 後不再呼叫 <code>waitForIdle()</code>。</li></ul><p>如果您的測試依賴於 <code>runOnIdle()</code> action 後的額外 <code>waitForIdle()</code> 呼叫， 請在將測試更新至 Compose Multiplatform 1.8.2 時依需要將該呼叫新增至您的測試中。</p><h4 id="測試中時間的推進與渲染解耦" tabindex="-1">測試中時間的推進與渲染解耦 <a class="header-anchor" href="#測試中時間的推進與渲染解耦" aria-label="Permalink to &quot;測試中時間的推進與渲染解耦&quot;">​</a></h4><p>在 Compose Multiplatform 1.8.2 中，如果時間沒有推進到渲染下一幀的時間點（虛擬測試幀每 16 毫秒渲染一次），<code>mainClock.advanceTimeBy()</code> 函式將不再導致重新組合、佈局或繪圖。</p><p>這可能會破壞依賴於渲染由每次 <code>mainClock.advanceTimeBy()</code> 呼叫觸發的測試。 詳情請參閱 <a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1618" target="_blank" rel="noreferrer">PR 說明</a>。</p><h2 id="across-platforms" tabindex="-1">Across platforms <a class="header-anchor" href="#across-platforms" aria-label="Permalink to &quot;Across platforms&quot;">​</a></h2><h3 id="可變字體" tabindex="-1">可變字體 <a class="header-anchor" href="#可變字體" aria-label="Permalink to &quot;可變字體&quot;">​</a></h3><p>Compose Multiplatform 1.8.2 支援所有平台上的可變字體。 透過可變字體，您可以保留一個字體檔案，其中包含所有樣式偏好，例如粗細、 寬度、傾斜、斜體、自訂軸、帶有排版顏色的視覺粗細， 以及對特定文字大小的適應。</p><p>有關詳細資訊， 請參閱 <a href="https://developer.android.com/develop/ui/compose/text/fonts#variable-fonts" target="_blank" rel="noreferrer">Jetpack Compose 文件</a>。</p><h3 id="skia-更新至-milestone-132" tabindex="-1">Skia 更新至 Milestone 132 <a class="header-anchor" href="#skia-更新至-milestone-132" aria-label="Permalink to &quot;Skia 更新至 Milestone 132&quot;">​</a></h3><p>Compose Multiplatform 透過 Skiko 使用的 Skia 版本已更新至 Milestone 132。</p><p>以前使用的 Skia 版本是 Milestone 126。您可以在<a href="./https://skia.googlesource.com/skia/+/main/RELEASE_NOTES#milestone-132">發行說明</a>中查看這些版本之間的變更。</p><h3 id="新的-clipboard-介面" tabindex="-1">新的 Clipboard 介面 <a class="header-anchor" href="#新的-clipboard-介面" aria-label="Permalink to &quot;新的 Clipboard 介面&quot;">​</a></h3><p>Compose Multiplatform 已採用 Jetpack Compose 的新 <code>Clipboard</code> 介面。</p><p>先前使用的 <code>ClipboardManager</code> 介面已棄用，改為支援 <code>Clipboard</code>，因為該介面在網頁目標上無法存取，原因在於 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API" target="_blank" rel="noreferrer">Web 上的 Clipboard API</a> 的非同步性質。新介面支援 <code>suspend</code> 函式，並與所有目標（包括 Web）相容。</p><p>通用程式碼的剪貼簿互動目前受到 API 設計的限制。 有關詳細資訊，請參閱 <a href="https://youtrack.jetbrains.com/issue/CMP-7624" target="_blank" rel="noreferrer">CMP-7624</a>。</p><h3 id="行高對齊" tabindex="-1">行高對齊 <a class="header-anchor" href="#行高對齊" aria-label="Permalink to &quot;行高對齊&quot;">​</a></h3><p>先前僅由 Compose Multiplatform 在 Android 上支援的行高對齊通用 API，現在已在所有平台上支援。 使用 <code>LineHeightStyle.Alignment</code>，您可以配置文字行如何在行高提供的空間內對齊。 文字行可以對齊預留空間的底部、中心或頂部， 或根據其上升和下降值按比例調整。</p><img src="`+n+'" alt="行高對齊" width="508"><p>請注意，在 Material3 中，行高對齊的預設值是 <code>Center</code>， 這意味著除非另有說明，中央對齊將應用於所有平台上的 Material3 組件中帶有 <code>lineHeight</code> 的文字。</p><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="深層連結" tabindex="-1">深層連結 <a class="header-anchor" href="#深層連結" aria-label="Permalink to &quot;深層連結&quot;">​</a></h3><p>透過搭配 <a href="./compose-navigation-routing">org.jetbrains.androidx.navigation.navigation-compose</a> 2.9.0-beta05 使用 Compose Multiplatform 1.8.2， 您可以以通常的 Compose 方式在 iOS 上實作深層連結：將深層連結分配給目的地，並使用 <code>NavController</code> 導航到它們。</p><p>有關將深層連結引入通用程式碼的指南，請參閱<a href="./compose-navigation-deep-links">深層連結</a>。</p><h3 id="xcframeworks-中的-compose-資源" tabindex="-1">XCFrameworks 中的 Compose 資源 <a class="header-anchor" href="#xcframeworks-中的-compose-資源" aria-label="Permalink to &quot;XCFrameworks 中的 Compose 資源&quot;">​</a></h3><p>Compose Multiplatform 現在直接將資源嵌入到生成的 XCFrameworks 中。 您可以將帶有資源的 Compose 函式庫建置並用作標準 XCFrameworks。</p><p>此功能需要 Kotlin Gradle 外掛 2.2 或更高版本。</p><h3 id="輔助功能支援改進" tabindex="-1">輔助功能支援改進 <a class="header-anchor" href="#輔助功能支援改進" aria-label="Permalink to &quot;輔助功能支援改進&quot;">​</a></h3><h4 id="對由右至左語言的支援" tabindex="-1">對由右至左語言的支援 <a class="header-anchor" href="#對由右至左語言的支援" aria-label="Permalink to &quot;對由右至左語言的支援&quot;">​</a></h4><p>Compose Multiplatform 1.8.2 引入了對由右至左語言的輔助功能支援， 包括手勢的正確文字方向處理。</p><p>要了解有關 RTL 支援的更多資訊，請參閱<a href="./compose-rtl">由右至左語言</a>。</p><h4 id="可滾動列表的輔助功能" tabindex="-1">可滾動列表的輔助功能 <a class="header-anchor" href="#可滾動列表的輔助功能" aria-label="Permalink to &quot;可滾動列表的輔助功能&quot;">​</a></h4><p>此版本提高了滾動邊界和元素位置計算的效能和準確性。 透過考慮安全區域（例如瀏海和螢幕邊緣）， 我們確保了在間隙和邊緣附近滾動的精確輔助功能屬性。</p><p>我們還引入了對滾動狀態廣播的支援。 啟用 VoiceOver 後，在執行三指滾動手勢時，您將會聽到列表狀態更新。 廣播包括：</p><ul><li>當在列表頂部時顯示「第一頁」。</li><li>向前滾動時顯示「下一頁」。</li><li>向後滾動時顯示「上一頁」。</li><li>到達末尾時顯示「最後一頁」。</li></ul><p>這些廣播的本地化版本也已提供，允許 VoiceOver 以您所選語言讀取它們。</p><h4 id="容器視圖的輔助功能" tabindex="-1">容器視圖的輔助功能 <a class="header-anchor" href="#容器視圖的輔助功能" aria-label="Permalink to &quot;容器視圖的輔助功能&quot;">​</a></h4><p>從 Compose Multiplatform 1.8.2 開始， 您可以為容器定義遍歷語義屬性， 以確保在滾動和滑動複雜視圖時的正確閱讀順序。</p><p>除了為螢幕閱讀器正確排序元素之外，對遍歷屬性的支援還支援使用向上滑動或向下滑動的輔助功能手勢在不同的遍歷組之間導航。 要切換到容器的可存取導航模式，請在 VoiceOver 啟用時在螢幕上旋轉兩指。</p><p>在<a href="./compose-accessibility#traversal-order">輔助功能</a>部分了解更多關於遍歷語義屬性的資訊。</p><h4 id="可存取文字輸入" tabindex="-1">可存取文字輸入 <a class="header-anchor" href="#可存取文字輸入" aria-label="Permalink to &quot;可存取文字輸入&quot;">​</a></h4><p>在 Compose Multiplatform 1.8.2 中，我們引入了對文字欄位輔助功能特性的支援。 當文字輸入欄位獲得焦點時，它現在會被標記為可編輯， 確保正確的輔助功能狀態表示。</p><p>您現在也可以在 UI 測試中使用可存取文字輸入。</p><h4 id="支援透過觸控板和鍵盤控制" tabindex="-1">支援透過觸控板和鍵盤控制 <a class="header-anchor" href="#支援透過觸控板和鍵盤控制" aria-label="Permalink to &quot;支援透過觸控板和鍵盤控制&quot;">​</a></h4><p>Compose Multiplatform for iOS 現在支援兩種額外的輸入方法來控制您的裝置。您可以啟用 AssistiveTouch 來使用滑鼠或觸控板，或啟用完整鍵盤存取來使用鍵盤，而不是依賴觸控螢幕：</p><ul><li>AssistiveTouch（<strong>設定</strong> | <strong>輔助使用</strong> | <strong>觸控</strong> | <strong>AssistiveTouch</strong>）允許您用連接的滑鼠或觸控板上的指標來控制您的 iPhone 或 iPad。您可以使用指標點擊螢幕上的圖示、瀏覽 AssistiveTouch 選單，或使用螢幕鍵盤打字。</li><li>完整鍵盤存取（<strong>設定</strong> | <strong>輔助使用</strong> | <strong>鍵盤</strong> | <strong>完整鍵盤存取</strong>）啟用使用連接鍵盤的裝置控制。您可以使用 <strong>Tab</strong> 等按鍵導航，並使用 <strong>Space</strong> 鍵啟用項目。</li></ul><h4 id="按需載入輔助功能樹" tabindex="-1">按需載入輔助功能樹 <a class="header-anchor" href="#按需載入輔助功能樹" aria-label="Permalink to &quot;按需載入輔助功能樹&quot;">​</a></h4><p>您現在可以依賴 Compose Multiplatform 惰性處理此過程，而不是設定特定的同步模式來同步 Compose 語義樹與 iOS 輔助功能樹。 該樹在來自 iOS 輔助功能引擎的第一個請求後會完全載入，並在螢幕閱讀器停止與其互動時被釋放。</p><p>這完全支援 iOS 語音控制、VoiceOver 和其他依賴輔助功能樹的輔助功能工具。</p><p>用於<a href="./compose-ios-accessibility#choose-the-tree-synchronization-option">配置輔助功能樹同步</a>的 <code>AccessibilitySyncOptions</code> 類別已移除，因為不再需要。</p><h4 id="輔助功能屬性計算的準確性提高" tabindex="-1">輔助功能屬性計算的準確性提高 <a class="header-anchor" href="#輔助功能屬性計算的準確性提高" aria-label="Permalink to &quot;輔助功能屬性計算的準確性提高&quot;">​</a></h4><p>我們已更新 Compose Multiplatform 組件的輔助功能屬性，以符合 UIKit 組件的預期行為。 UI 元素現在提供廣泛的輔助功能資料， 且任何透明度為 0 的組件不再提供輔助功能語義。</p><p>語義對齊也使我們能夠修復幾個與計算不正確相關的問題， 例如 DropDown 元素的命中框遺失、 可見文字與輔助功能標籤不匹配，以及不正確的單選按鈕狀態。</p><h3 id="ios-日誌記錄的穩定-api" tabindex="-1">iOS 日誌記錄的穩定 API <a class="header-anchor" href="#ios-日誌記錄的穩定-api" aria-label="Permalink to &quot;iOS 日誌記錄的穩定 API&quot;">​</a></h3><p>在 iOS 上啟用作業系統日誌記錄的 API 現在已穩定。<code>enableTraceOSLog()</code> 函式不再需要實驗性選擇加入，並且現在與 Android 風格的日誌記錄對齊。此日誌記錄提供追蹤資訊，可以使用 Xcode Instruments 進行除錯和效能分析。</p><h3 id="拖放" tabindex="-1">拖放 <a class="header-anchor" href="#拖放" aria-label="Permalink to &quot;拖放&quot;">​</a></h3>',95)),t(s,{ref:"Experimental"},null,512),a[1]||(a[1]=e('<p>Compose Multiplatform for iOS 引入了對拖放功能的支援， 允許您將內容拖入或拖出 Compose 應用程式 （有關演示影片，請參閱 pull request <a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1690" target="_blank" rel="noreferrer">1690</a>）。 要定義可拖動內容和拖放目標，請使用 <code>dragAndDropSource</code> 和 <code>dragAndDropTarget</code> 修飾符。</p><p>在 iOS 上，拖放會話資料由 <a href="https://developer.apple.com/documentation/uikit/uidragitem" target="_blank" rel="noreferrer"><code>UIDragItem</code></a> 表示。 此物件包含有關跨行程資料傳輸的資訊以及用於應用程式內使用的可選本地物件。 例如，您可以使用 <code>DragAndDropTransferData(listOf(UIDragItem.fromString(text)))</code> 來拖動文字， 其中 <code>UIDragItem.fromString(text)</code> 將文字編碼為適合拖放操作的格式。 目前，僅支援 <code>String</code> 和 <code>NSObject</code> 型別。</p><p>有關常見用例， 請參閱 Jetpack Compose 文件中<a href="https://developer.android.com/develop/ui/compose/touch-input/user-interactions/drag-and-drop" target="_blank" rel="noreferrer">專門文章</a>。</p><h3 id="改進滾動互操作視圖的觸控處理" tabindex="-1">改進滾動互操作視圖的觸控處理 <a class="header-anchor" href="#改進滾動互操作視圖的觸控處理" aria-label="Permalink to &quot;改進滾動互操作視圖的觸控處理&quot;">​</a></h3><p>在此版本中：</p><ul><li>帶有不可滾動內容並以模態 <code>UIViewController</code> 呈現的 Compose 視圖可以透過向下滑動手勢關閉。</li><li>巢狀可滾動視圖在通用<a href="./compose-ios-touch">互操作觸控框架</a>內正常工作： 當在可滾動的 Compose 視圖中滾動原生內容，或在可滾動的原生視圖中滾動 Compose 內容時， UI 會緊密遵循 iOS 邏輯來解決模糊的觸控序列。</li></ul><h3 id="選擇加入並發渲染" tabindex="-1">選擇加入並發渲染 <a class="header-anchor" href="#選擇加入並發渲染" aria-label="Permalink to &quot;選擇加入並發渲染&quot;">​</a></h3>',7)),t(s,{ref:"Experimental"},null,512),a[2]||(a[2]=e(`<p>Compose Multiplatform for iOS 現在支援將渲染任務卸載到專用的渲染執行緒。 並發渲染可以在沒有 UIKit 互操作的場景中提高效能。</p><p>透過啟用 <code>ComposeUIViewControllerConfiguration</code> 類別的 <code>useSeparateRenderThreadWhenPossible</code> 標誌，或直接在 <code>ComposeUIViewController</code> 配置區塊內啟用 <code>parallelRendering</code> 屬性，選擇加入以編碼渲染命令在單獨的渲染執行緒上：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalComposeUiApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vararg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    UIKitMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { parallelRendering </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h2><h3 id="導航函式庫支援瀏覽器控制" tabindex="-1">導航函式庫支援瀏覽器控制 <a class="header-anchor" href="#導航函式庫支援瀏覽器控制" aria-label="Permalink to &quot;導航函式庫支援瀏覽器控制&quot;">​</a></h3><p>在透過 Compose Multiplatform 建置的 Kotlin/Wasm 和 Kotlin/JS 應用程式中， 導航現在可以正確地與基本瀏覽器控制協同工作。 要啟用此功能，請使用 <code>window.bindToNavigation()</code> 方法將瀏覽器視窗連結到主導航圖。 一旦完成，Web 應用程式將正確地對使用「返回」和「前進」按鈕在瀏覽器中瀏覽歷史記錄做出反應 （有關演示影片，請參閱 pull request <a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1621" target="_blank" rel="noreferrer">1621</a>）。</p><p>Web 應用程式還會操作瀏覽器地址欄以反映當前的目的地路由， 並在使用者貼上一個編碼有正確路由的 URL 時直接導航到目的地 （有關演示影片，請參閱 pull request <a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1640" target="_blank" rel="noreferrer">1640</a>）。 <code>window.bindToNavigation()</code> 方法具有可選的 <code>getBackStackEntryPath</code> 參數， 它允許您自訂路由字串到 URL 片段的轉換。</p><h3 id="設定瀏覽器游標" tabindex="-1">設定瀏覽器游標 <a class="header-anchor" href="#設定瀏覽器游標" aria-label="Permalink to &quot;設定瀏覽器游標&quot;">​</a></h3>`,8)),t(s,{ref:"Experimental"},null,512),a[3]||(a[3]=i("p",null,[l("我們引入了一個實驗性 "),i("code",null,"PointerIcon.Companion.fromKeyword()"),l(" 函式，用於管理可用作瀏覽器頁面上滑鼠指標的圖示。透過傳遞一個關鍵字作為參數，您可以根據上下文指定要顯示的游標型別。例如，您可以分配不同的指標圖示來選擇文字、開啟上下文選單或指示載入過程。")],-1)),a[4]||(a[4]=i("p",null,[l("查看可用"),i("a",{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor",target:"_blank",rel:"noreferrer"},"關鍵字"),l("的完整列表。")],-1)),a[5]||(a[5]=i("h3",{id:"資源預載入",tabindex:"-1"},[l("資源預載入 "),i("a",{class:"header-anchor",href:"#資源預載入","aria-label":'Permalink to "資源預載入"'},"​")],-1)),t(s,{ref:"Experimental"},null,512),a[6]||(a[6]=e('<p>Compose Multiplatform 1.8.2 引入了一個新的實驗性 API， 用於網頁目標的字體和圖像預載入。 預載入有助於 防止視覺問題，例如未樣式文字閃爍 (FOUT) 或圖像和圖示的閃爍。</p><p>以下功能現在可用於載入和快取資源：</p><ul><li><code>preloadFont()</code>，用於預載入字體。</li><li><code>preloadImageBitmap()</code>，用於預載入位圖圖像。</li><li><code>preloadImageVector()</code>，用於預載入向量圖像。</li></ul><p>詳情請參閱<a href="./compose-multiplatform-resources-usage#preload-resources-using-the-compose-multiplatform-preload-api">文件</a>。</p><h2 id="desktop" tabindex="-1">Desktop <a class="header-anchor" href="#desktop" aria-label="Permalink to &quot;Desktop&quot;">​</a></h2><h3 id="windows-上的軟體渲染改進" tabindex="-1">Windows 上的軟體渲染改進 <a class="header-anchor" href="#windows-上的軟體渲染改進" aria-label="Permalink to &quot;Windows 上的軟體渲染改進&quot;">​</a></h3><p>切換到 Windows 上 Skia 推薦的 clang 編譯器加快了依賴 CPU 的渲染速度。 這主要影響純軟體渲染，因為渲染通常依賴 GPU，只有部分計算在 CPU 上完成。 因此，在某些虛擬機器和一些<a href="https://github.com/JetBrains/skiko/blob/30df516c1a1a25237880f3e0fe83e44a13821292/skiko/src/jvmMain/kotlin/org/jetbrains/skiko/GraphicsApi.jvm.kt#L13" target="_blank" rel="noreferrer">不被 Skia 支援</a>的舊顯示卡上，改進非常顯著： Compose Multiplatform 產生的 Windows 應用程式在這些環境中比 Compose Multiplatform 1.7.3 快達 6 倍。</p><p>這項改進，除了對 Windows for ARM64 的支援之外，使 macOS 下虛擬 Windows 系統上的 Compose Multiplatform UI 顯著提高效能。</p><h3 id="支援-windows-for-arm64" tabindex="-1">支援 Windows for ARM64 <a class="header-anchor" href="#支援-windows-for-arm64" aria-label="Permalink to &quot;支援 Windows for ARM64&quot;">​</a></h3><p>Compose Multiplatform 1.8.2 引入了對 JVM 上 Windows for ARM64 的支援， 改善在基於 ARM 的 Windows 裝置上建置和執行應用程式的整體體驗。</p><h2 id="gradle-plugin" tabindex="-1">Gradle plugin <a class="header-anchor" href="#gradle-plugin" aria-label="Permalink to &quot;Gradle plugin&quot;">​</a></h2><h3 id="更改生成的-res-類別名稱的選項" tabindex="-1">更改生成的 Res 類別名稱的選項 <a class="header-anchor" href="#更改生成的-res-類別名稱的選項" aria-label="Permalink to &quot;更改生成的 Res 類別名稱的選項&quot;">​</a></h3><p>您現在可以自訂生成的資源類別的名稱，該類別提供對應用程式中資源的存取。 自訂命名對於在多模組專案中區分資源特別有用， 並有助於保持與專案命名慣例的一致性。</p><p>要定義自訂名稱，請將以下行新增至 <code>build.gradle.kts</code> 檔案中的 <code>compose.resources</code> 區塊：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nameOfResClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyRes&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關詳細資訊，請參閱 <a href="https://github.com/JetBrains/compose-multiplatform/pull/5296" target="_blank" rel="noreferrer">pull request</a>。</p><h3 id="androidlibrary-目標中多平台資源的支援" tabindex="-1"><code>androidLibrary</code> 目標中多平台資源的支援 <a class="header-anchor" href="#androidlibrary-目標中多平台資源的支援" aria-label="Permalink to &quot;`androidLibrary` 目標中多平台資源的支援&quot;">​</a></h3>',17)),t(s,{ref:"Experimental"},null,512),a[7]||(a[7]=e(`<p>從 Android Gradle 外掛 8.8.0 版本開始，您可以在新的 <code>androidLibrary</code> 目標中使用生成的資產。 為了使 Compose Multiplatform 與這些變更保持一致，我們引入了對新目標配置的支援，以處理打包到 Android 資產中的多平台資源。</p><p>如果您正在使用 <code>androidLibrary</code> 目標，請在您的配置中啟用資源：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin {</span></span>
<span class="line"><span>    androidLibrary {</span></span>
<span class="line"><span>        androidResources.enable = true</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>否則，您將遇到以下例外狀況：<code>org.jetbrains.compose.resources.MissingResourceException: Missing resource with path: …</code>。</p>`,4))])}const C=o(d,[["render",k]]);export{b as __pageData,C as default};
