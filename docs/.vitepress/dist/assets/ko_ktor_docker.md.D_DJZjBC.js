import{_ as u,C as t,c as y,o as m,j as s,G as e,ag as p,a,w as l}from"./chunks/framework.Bksy39di.js";const R=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/docker.md","filePath":"ko/ktor/docker.md","lastUpdated":1755457140000}'),F={name:"ko/ktor/docker.md"};function b(C,i,v,D,f,_){const k=t("show-structure"),r=t("tldr"),o=t("web-summary"),d=t("link-summary"),n=t("TabItem"),h=t("Tabs"),g=t("code-block"),E=t("list"),c=t("tip");return m(),y("div",null,[i[10]||(i[10]=s("h1",{id:"docker",tabindex:"-1"},[a("Docker "),s("a",{class:"header-anchor",href:"#docker","aria-label":'Permalink to "Docker"'},"​")],-1)),e(k,{for:"chapter",depth:"2"}),e(r,null,{default:l(()=>i[0]||(i[0]=[s("p",null,[s("b",null,"코드 예시"),a(": "),s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/deployment-ktor-plugin"}," deployment-ktor-plugin ")],-1)])),_:1}),e(o,null,{default:l(()=>i[1]||(i[1]=[a(" Ktor 애플리케이션을 Docker 컨테이너에 배포하는 방법을 알아보세요. 이 컨테이너는 로컬 또는 원하는 클라우드 제공업체에서 실행할 수 있습니다. ")])),_:1}),e(d,null,{default:l(()=>i[2]||(i[2]=[a(" 애플리케이션을 Docker 컨테이너에 배포하는 방법을 알아보세요. ")])),_:1}),i[11]||(i[11]=p('<p>이 섹션에서는 <a href="https://github.com/ktorio/ktor-build-plugins" target="_blank" rel="noreferrer">Ktor Gradle 플러그인</a>을 사용하여 <a href="https://www.docker.com" target="_blank" rel="noreferrer">Docker</a>로 애플리케이션을 패키징, 실행, 배포하는 방법을 살펴보겠습니다.</p><h2 id="install-plugin" tabindex="-1">Ktor 플러그인 설치 <a class="header-anchor" href="#install-plugin" aria-label="Permalink to &quot;Ktor 플러그인 설치 {id=&quot;install-plugin&quot;}&quot;">​</a></h2><p>Ktor 플러그인을 설치하려면 <code>build.gradle.(kts)</code> 파일의 <code>plugins</code> 블록에 추가하세요:</p>',3)),e(h,{group:"languages"},{default:l(()=>[e(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:l(()=>i[3]||(i[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    id"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"io.ktor.plugin"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"3.2.3"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),s("p",{"interpolate-variables":"true"},null,-1)])),_:1}),e(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:l(()=>i[4]||(i[4]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"io.ktor.plugin"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"3.2.3"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),s("p",{"interpolate-variables":"true"},null,-1)])),_:1})]),_:1}),i[12]||(i[12]=p(`<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Ktor Gradle 플러그인을 Kotlin Multiplatform Gradle 플러그인과 함께 적용하면 Docker 통합이 자동으로 비활성화됩니다. 이 두 플러그인을 함께 사용하려면 다음을 수행하세요: 1. 위에 표시된 대로 Ktor Gradle 플러그인을 적용한 JVM 전용 프로젝트를 생성합니다. 2. 해당 JVM 전용 프로젝트에 Kotlin Multiplatform 프로젝트를 의존성으로 추가합니다. 이 해결 방법으로 문제가 해결되지 않으면 <a href="https://youtrack.jetbrains.com/issue/KTOR-8464" target="_blank" rel="noreferrer">KTOR-8464</a>에 댓글을 남겨 알려주세요.</p></div><h2 id="tasks" tabindex="-1">플러그인 태스크 <a class="header-anchor" href="#tasks" aria-label="Permalink to &quot;플러그인 태스크 {id=&quot;tasks&quot;}&quot;">​</a></h2><p>플러그인을 <a href="#install-plugin">설치</a>한 후 애플리케이션을 패키징, 실행, 배포하는 데 다음 태스크를 사용할 수 있습니다:</p><ul><li><code>buildImage</code>: 프로젝트의 Docker 이미지를 tarball로 빌드합니다. 이 태스크는 <code>build</code> 디렉터리에 <code>jib-image.tar</code> 파일을 생성합니다. 이 이미지는 <a href="https://docs.docker.com/engine/reference/commandline/load/" target="_blank" rel="noreferrer">docker load</a> 명령을 사용하여 Docker 데몬에 로드할 수 있습니다:<div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/jib-image.tar</span></span></code></pre></div></li><li><code>publishImageToLocalRegistry</code>: 프로젝트의 Docker 이미지를 로컬 레지스트리에 빌드하고 게시합니다.</li><li><code>runDocker</code>: 프로젝트 이미지를 Docker 데몬에 빌드하고 실행합니다. 이 태스크를 실행하면 Ktor 서버가 시작되며, 기본적으로 <code>http://0.0.0.0:8080</code>에서 응답합니다. 서버가 다른 포트를 사용하도록 구성된 경우 <a href="#port-mapping">포트 매핑</a>을 조정할 수 있습니다.</li><li><code>publishImage</code>: 프로젝트의 Docker 이미지를 <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a> 또는 <a href="https://cloud.google.com/container-registry" target="_blank" rel="noreferrer">Google Container Registry</a>와 같은 외부 레지스트리에 빌드하고 게시합니다. 이 태스크를 사용하려면 <strong><a href="#external-registry">ktor.docker.externalRegistry</a></strong> 속성을 사용하여 외부 레지스트리를 구성해야 합니다.</li></ul><p>기본적으로 이러한 태스크는 <code>ktor-docker-image</code> 이름과 <code>latest</code> 태그로 이미지를 빌드합니다. <a href="#name-tag">플러그인 구성</a>에서 이 값을 사용자 지정할 수 있습니다.</p><h2 id="configure-plugin" tabindex="-1">Ktor 플러그인 구성 <a class="header-anchor" href="#configure-plugin" aria-label="Permalink to &quot;Ktor 플러그인 구성 {id=&quot;configure-plugin&quot;}&quot;">​</a></h2><p>Docker 태스크와 관련된 Ktor 플러그인 설정을 구성하려면 <code>build.gradle.(kts)</code> 파일에서 <code>ktor.docker</code> 확장 프로그램을 사용하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="jre-version" tabindex="-1">JRE 버전 <a class="header-anchor" href="#jre-version" aria-label="Permalink to &quot;JRE 버전 {id=&quot;jre-version&quot;}&quot;">​</a></h3><p><code>jreVersion</code> 속성은 이미지에서 사용할 JRE 버전을 지정합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jreVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaVersion.VERSION_17)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="name-tag" tabindex="-1">이미지 이름 및 태그 <a class="header-anchor" href="#name-tag" aria-label="Permalink to &quot;이미지 이름 및 태그 {id=&quot;name-tag&quot;}&quot;">​</a></h3><p>이미지 이름과 태그를 사용자 지정해야 하는 경우 각각 <code>localImageName</code> 및 <code>imageTag</code> 속성을 사용하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        localImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sample-docker-image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        imageTag.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.1-preview&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="port-mapping" tabindex="-1">포트 매핑 <a class="header-anchor" href="#port-mapping" aria-label="Permalink to &quot;포트 매핑 {id=&quot;port-mapping&quot;}&quot;">​</a></h3><p>기본적으로 <a href="#tasks">runDocker</a> 태스크는 <code>8080</code> 컨테이너 포트를 <code>8080</code> Docker 호스트 포트로 게시합니다. 필요한 경우 <code>portMappings</code> 속성을 사용하여 이 포트들을 변경할 수 있습니다. 서버가 다른 포트를 사용하도록 <a href="./server-configuration-file#predefined-properties">구성</a>된 경우 유용할 수 있습니다.</p><p>다음 예시는 <code>8080</code> 컨테이너 포트를 <code>80</code> Docker 호스트 포트에 매핑하는 방법을 보여줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        portMappings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            io.ktor.plugin.features.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DockerPortMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                io.ktor.plugin.features.DockerPortMappingProtocol.TCP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 경우 <code>http://0.0.0.0:80</code>에서 서버에 접근할 수 있습니다.</p><h3 id="external-registry" tabindex="-1">외부 레지스트리 <a class="header-anchor" href="#external-registry" aria-label="Permalink to &quot;외부 레지스트리 {id=&quot;external-registry&quot;}&quot;">​</a></h3><p><strong><a href="#tasks">publishImage</a></strong> 태스크를 사용하여 프로젝트의 Docker 이미지를 외부 레지스트리에 게시하기 전에 <code>ktor.docker.externalRegistry</code> 속성을 사용하여 외부 레지스트리를 구성해야 합니다. 이 속성은 필요한 레지스트리 유형에 대한 구성을 제공하는 <code>DockerImageRegistry</code> 인스턴스를 허용합니다:</p><ul><li><code>DockerImageRegistry.dockerHub</code>: <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a>용 <code>DockerImageRegistry</code>를 생성합니다.</li><li><code>DockerImageRegistry.googleContainerRegistry</code>: <a href="https://cloud.google.com/container-registry" target="_blank" rel="noreferrer">Google Container Registry</a>용 <code>DockerImageRegistry</code>를 생성합니다.</li></ul><p>다음 예시는 Docker Hub 레지스트리를 구성하는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        externalRegistry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            io.ktor.plugin.features.DockerImageRegistry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dockerHub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                appName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ktor-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> providers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">environmentVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOCKER_HUB_USERNAME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> providers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">environmentVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOCKER_HUB_PASSWORD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Docker Hub 이름과 비밀번호는 환경 변수에서 가져오므로, <code>publishImage</code> 태스크를 실행하기 전에 이 값들을 설정해야 합니다:</p>`,25)),e(h,{group:"os"},{default:l(()=>[e(n,{title:"Linux/macOS","group-key":"unix"},{default:l(()=>i[5]||(i[5]=[s("div",{class:"language-Bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"Bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"export"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," DOCKER_HUB_USERNAME"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"yourHubUsername")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"export"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," DOCKER_HUB_PASSWORD"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"yourHubPassword")])])])],-1)])),_:1}),e(n,{title:"Windows","group-key":"windows"},{default:l(()=>i[6]||(i[6]=[s("div",{class:"language-Bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"Bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"setx"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," DOCKER_HUB_USERNAME"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," yourHubUsername")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"setx"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," DOCKER_HUB_PASSWORD"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," yourHubPassword")])])])],-1)])),_:1})]),_:1}),i[13]||(i[13]=p('<h2 id="manual" tabindex="-1">수동 이미지 구성 <a class="header-anchor" href="#manual" aria-label="Permalink to &quot;수동 이미지 구성 {id=&quot;manual&quot;}&quot;">​</a></h2><p>필요한 경우, Ktor 애플리케이션으로 이미지를 구성하기 위해 사용자 정의 <code>Dockerfile</code>을 제공할 수 있습니다.</p><h3 id="packagea-pp" tabindex="-1">애플리케이션 패키징 <a class="header-anchor" href="#packagea-pp" aria-label="Permalink to &quot;애플리케이션 패키징 {id=&quot;packagea-pp&quot;}&quot;">​</a></h3><p>첫 번째 단계로, 애플리케이션을 의존성과 함께 패키징해야 합니다. 예를 들어, <a href="./server-fatjar">fat JAR</a> 또는 <a href="./server-packaging">실행 가능한 JVM 애플리케이션</a>일 수 있습니다.</p><h3 id="prepare-docker" tabindex="-1">Docker 이미지 준비 <a class="header-anchor" href="#prepare-docker" aria-label="Permalink to &quot;Docker 이미지 준비 {id=&quot;prepare-docker&quot;}&quot;">​</a></h3><p>애플리케이션을 도커라이즈하기 위해 <a href="https://docs.docker.com/develop/develop-images/multistage-build/" target="_blank" rel="noreferrer">멀티스테이지 빌드</a>를 사용할 것입니다:</p><ol><li>먼저 Gradle/Maven 의존성에 대한 캐싱을 설정할 것입니다. 이 단계는 선택 사항이지만, 전체 빌드 속도를 향상시키므로 권장됩니다.</li><li>다음으로 <code>gradle</code>/<code>maven</code> 이미지를 사용하여 애플리케이션과 함께 fat JAR를 생성할 것입니다.</li><li>마지막으로 생성된 배포판은 JDK 이미지를 기반으로 생성된 환경에서 실행될 것입니다.</li></ol><p>프로젝트의 루트 폴더에 <code>Dockerfile</code>이라는 파일을 다음 내용으로 생성하세요:</p>',8)),e(h,{group:"languages"},{default:l(()=>[e(n,{title:"Gradle","group-key":"kotlin"},{default:l(()=>[e(g,{lang:"Docker",code:`# Stage 1: Cache Gradle dependencies
FROM gradle:latest AS cache
RUN mkdir -p /home/gradle/cache_home
ENV GRADLE_USER_HOME=/home/gradle/cache_home
COPY build.gradle.* gradle.properties /home/gradle/app/
COPY gradle /home/gradle/app/gradle
WORKDIR /home/gradle/app
RUN gradle clean build -i --stacktrace

# Stage 2: Build Application
FROM gradle:latest AS build
COPY --from=cache /home/gradle/cache_home /home/gradle/.gradle
COPY --chown=gradle:gradle . /home/gradle/src
WORKDIR /home/gradle/src
# Build the fat JAR, Gradle also supports shadow
# and boot JAR by default.
RUN gradle buildFatJar --no-daemon

# Stage 3: Create the Runtime Image
FROM amazoncorretto:22 AS runtime
EXPOSE 8080
RUN mkdir /app
COPY --from=build /home/gradle/src/build/libs/*.jar /app/ktor-docker-sample.jar
ENTRYPOINT ["java","-jar","/app/ktor-docker-sample.jar"]`})]),_:1}),e(n,{title:"Maven","group-key":"maven"},{default:l(()=>i[7]||(i[7]=[s("div",{class:"language-Docker vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"Docker"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# Stage 1: Cache Maven dependencies")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"FROM"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," maven:3.8-amazoncorretto-21 "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"AS"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," cache")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"WORKDIR"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," /app")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," pom.xml .")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"RUN"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," mvn dependency:go-offline")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# Stage 2: Build Application")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"FROM"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," maven:3.8-amazoncorretto-21 "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"AS"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," build")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"WORKDIR"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," /app")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," --from=cache /root/.m2 /root/.m2")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," . .")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"RUN"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," mvn clean package")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# Stage 3: Create the Runtime Image")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"FROM"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," amazoncorretto:21-slim "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"AS"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," runtime")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"EXPOSE"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," 8080")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"WORKDIR"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," /app")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," --from=build /app/target/*-with-dependencies.jar app.jar")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"ENTRYPOINT"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"java"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-jar"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"app.jar"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")])])])],-1)])),_:1})]),_:1}),i[14]||(i[14]=s("p",null,"첫 번째 단계는 빌드 관련 파일에 변경 사항이 있을 때만 의존성이 다시 다운로드되도록 보장합니다. 첫 번째 단계를 사용하지 않거나 다른 단계에서 의존성이 캐시되지 않으면, 모든 빌드에서 의존성이 설치될 것입니다.",-1)),i[15]||(i[15]=s("p",null,"두 번째 단계에서는 fat JAR가 빌드됩니다. Gradle은 기본적으로 shadow 및 boot JAR도 지원합니다.",-1)),i[16]||(i[16]=s("p",null,"빌드의 세 번째 단계는 다음과 같이 작동합니다:",-1)),i[17]||(i[17]=s("ul",null,[s("li",null,"어떤 이미지가 사용될지 나타냅니다."),s("li",null,"노출할 포트를 지정합니다 (이것은 포트를 자동으로 노출하지 않으며, 컨테이너를 실행할 때 수행됩니다)."),s("li",null,"빌드 출력의 내용을 폴더로 복사합니다."),s("li",null,[a("애플리케이션을 실행합니다 ("),s("code",null,"ENTRYPOINT"),a(").")])],-1)),e(c,{id:"jdk_image_replacement_tip"},{default:l(()=>[i[9]||(i[9]=s("p",null," 이 예시에서는 Amazon Corretto Docker 이미지를 사용하지만, 다음과 같은 다른 적합한 대안으로 대체할 수 있습니다: ",-1)),e(E,null,{default:l(()=>i[8]||(i[8]=[s("li",null,[s("a",{href:"https://hub.docker.com/_/eclipse-temurin"},"Eclipse Temurin")],-1),s("li",null,[s("a",{href:"https://hub.docker.com/_/ibm-semeru-runtimes"},"IBM Semeru")],-1),s("li",null,[s("a",{href:"https://hub.docker.com/_/ibmjava"},"IBM Java")],-1),s("li",null,[s("a",{href:"https://hub.docker.com/_/sapmachine"},"SAP Machine JDK")],-1)])),_:1})]),_:1}),i[18]||(i[18]=p('<h3 id="build-run" tabindex="-1">Docker 이미지 빌드 및 실행 <a class="header-anchor" href="#build-run" aria-label="Permalink to &quot;Docker 이미지 빌드 및 실행 {id=&quot;build-run&quot;}&quot;">​</a></h3><p>다음 단계는 Docker 이미지를 빌드하고 태그를 지정하는 것입니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-application</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>마지막으로 이미지를 시작하세요:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:8080</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-application</span></span></code></pre></div><p>이렇게 하면 Ktor 서버가 시작되어 <code>https://0.0.0.0:8080</code>에서 응답합니다.</p>',6))])}const A=u(F,[["render",b]]);export{R as __pageData,A as default};
