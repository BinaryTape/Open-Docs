import{_ as s,a,b as e,c as l}from"./chunks/compose-swingpanel-overlapping.BiVO7k80.js";import{_ as t,c as n,o,ag as p}from"./chunks/framework.Bksy39di.js";const y=JSON.parse('{"title":"Compose Multiplatform 1.6.0の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/whats-new-compose-160.md","filePath":"ja/kmp/whats-new-compose-160.md","lastUpdated":1755516278000}'),r={name:"ja/kmp/whats-new-compose-160.md"};function h(k,i,d,c,E,g){return o(),n("div",null,i[0]||(i[0]=[p(`<h1 id="compose-multiplatform-1-6-0の新機能" tabindex="-1">Compose Multiplatform 1.6.0の新機能 <a class="header-anchor" href="#compose-multiplatform-1-6-0の新機能" aria-label="Permalink to &quot;Compose Multiplatform 1.6.0の新機能&quot;">​</a></h1><p>Compose Multiplatform 1.6.0 リリースにおける主な変更点は以下の通りです。</p><ul><li><a href="#breaking-changes">破壊的変更</a></li><li><a href="#improved-resources-api-all-platforms">リソースAPIの改善と新機能</a></li><li><a href="#accessibility-support">iOSアクセシビリティ機能の基本サポート</a></li><li><a href="#ui-testing-api-experimental-all-platforms">全プラットフォーム向けのUIテストAPI</a></li><li><a href="#separate-platform-views-for-popups-dialogs-and-dropdowns-ios-desktop">ポップアップ、ダイアログ、ドロップダウン向けのプラットフォームビューの分離</a></li><li><a href="#changes-from-jetpack-compose-and-material-3-all-platforms">Jetpack ComposeおよびMaterial 3からの変更のマージ</a></li><li><a href="#kotlin-wasm-artifacts-available-in-stable-versions-of-the-framework">安定版でのKotlin/Wasmアーティファクトの利用</a></li><li><a href="#known-issues-missing-dependencies">既知の問題：不足している依存関係</a></li></ul><h2 id="依存関係" tabindex="-1">依存関係 <a class="header-anchor" href="#依存関係" aria-label="Permalink to &quot;依存関係&quot;">​</a></h2><p>このバージョンのCompose Multiplatformは、以下のJetpack Composeライブラリに基づいています。</p><ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-compiler#1.5.8" target="_blank" rel="noreferrer">Compiler 1.5.8</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.6.1" target="_blank" rel="noreferrer">Runtime 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.6.1" target="_blank" rel="noreferrer">UI 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.6.1" target="_blank" rel="noreferrer">Foundation 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.6.1" target="_blank" rel="noreferrer">Material 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.2.0" target="_blank" rel="noreferrer">Material3 1.2.0</a></li></ul><h2 id="破壊的変更" tabindex="-1">破壊的変更 <a class="header-anchor" href="#破壊的変更" aria-label="Permalink to &quot;破壊的変更&quot;">​</a></h2><h3 id="lineheightが設定されたテキストのパディングがデフォルトでトリミングされるように" tabindex="-1"><code>lineHeight</code>が設定されたテキストのパディングがデフォルトでトリミングされるように <a class="header-anchor" href="#lineheightが設定されたテキストのパディングがデフォルトでトリミングされるように" aria-label="Permalink to &quot;\`lineHeight\`が設定されたテキストのパディングがデフォルトでトリミングされるように&quot;">​</a></h3><p><a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/LineHeightStyle.Trim" target="_blank" rel="noreferrer">LineHeightStyle.Trim</a>のサポートが追加されたことで、Compose Multiplatformはテキストのパディングがトリミングされる方法においてAndroidと整合性が取れるようになりました。 詳細は<a href="https://github.com/JetBrains/compose-multiplatform-core/pull/897" target="_blank" rel="noreferrer">プルリクエスト</a>を参照してください。</p><p>これは、<a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.6.0-alpha01" target="_blank" rel="noreferrer">1.6.0-alpha01リリース</a>での<code>compose.material</code>の変更に沿ったものです。</p><ul><li><code>includeFontPadding</code>パラメーターがAndroidでデフォルトで<code>false</code>になりました。 この変更の詳細については、<a href="https://github.com/JetBrains/compose-multiplatform/issues/2477#issuecomment-1825716543" target="_blank" rel="noreferrer">Compose Multiplatformでこのフラグを実装しないことに関する議論</a>を参照してください。</li><li>デフォルトの行高スタイルが<code>Trim.None</code>と<code>Alignment.Center</code>に変更されました。Compose Multiplatformは現在<code>LineHeightStyle.Trim</code>をサポートし、<code>Trim.None</code>をデフォルト値として実装しています。</li><li><code>Typography</code>の<code>TextStyle</code>に明示的な<code>lineHeight</code>が追加され、これにより<a href="#using-fontsize-in-materialtheme-requires-lineheight">次の破壊的変更</a>につながりました。</li></ul><h3 id="materialthemeでfontsizeを使用するにはlineheightが必要に" tabindex="-1"><code>MaterialTheme</code>で<code>fontSize</code>を使用するには<code>lineHeight</code>が必要に <a class="header-anchor" href="#materialthemeでfontsizeを使用するにはlineheightが必要に" aria-label="Permalink to &quot;\`MaterialTheme\`で\`fontSize\`を使用するには\`lineHeight\`が必要に&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>これは<code>material</code>コンポーネントのみに影響します。<code>material3</code>にはすでにこの制限がありました。</p></div><p><code>MaterialTheme</code>の<code>Text</code>コンポーネントで<code>fontSize</code>属性を設定し、<code>lineHeight</code>を含めない場合、実際の行高はフォントに一致するように変更されません。 今後は、対応する<code>fontSize</code>を設定するたびに<code>lineHeight</code>属性を明示的に指定する必要があります。</p><p>Jetpack Composeは現在、フォントサイズを直接設定しないことを<a href="https://issuetracker.google.com/issues/321872412" target="_blank" rel="noreferrer">推奨</a>しています。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>非標準のテキストサイズをサポートするために、Material Designシステムに従い、フォントサイズを直接変更するのではなく、別の<a href="https://m2.material.io/design/typography/the-type-system.html#type-scale" target="_blank" rel="noreferrer">タイプスケール</a>を使用することをお勧めします。 または、<code>style = LocalTextStyle.current.copy(lineHeight = TextUnit.Unspecified)</code>のように行高を上書きするか、カスタムの<code>Typography</code>を完全に作成することもできます。</p></div><h3 id="リソース管理の新しいアプローチ" tabindex="-1">リソース管理の新しいアプローチ <a class="header-anchor" href="#リソース管理の新しいアプローチ" aria-label="Permalink to &quot;リソース管理の新しいアプローチ&quot;">​</a></h3><p>Compose Multiplatform 1.6.0のプレビューバージョンでリソースAPIを使用していた場合、<a href="./compose-multiplatform-resources">現行バージョンのドキュメント</a>を参照して慣れてください。1.6.0-beta01で、リソースファイルをプロジェクトコードで利用できるようにするためのプロジェクトフォルダーへの保存方法が変更されました。</p><h2 id="プラットフォーム共通" tabindex="-1">プラットフォーム共通 <a class="header-anchor" href="#プラットフォーム共通" aria-label="Permalink to &quot;プラットフォーム共通&quot;">​</a></h2><h3 id="リソースapiの改善-全プラットフォーム" tabindex="-1">リソースAPIの改善 (全プラットフォーム) <a class="header-anchor" href="#リソースapiの改善-全プラットフォーム" aria-label="Permalink to &quot;リソースAPIの改善 (全プラットフォーム)&quot;">​</a></h3><p>新しい実験的なAPIは、文字列とフォントのサポートを追加し、共通Kotlinでリソースをより快適に共有およびアクセスできるようにします。</p><ul><li>リソースは、特定の用途や制約（ロケール、画像解像度、ダークテーマとライトテーマなど）に合わせて整理でき、以下をサポートします。 <ul><li>ロケール</li><li>画像解像度</li><li>ダークテーマとライトテーマ</li></ul></li><li>Compose Multiplatformは、各プロジェクトに対して<code>Res</code>オブジェクトを生成し、リソースに直接アクセスできるようにします。</li></ul><p>リソース修飾子の詳細、および新しいリソースAPIの詳細な概要については、<a href="./compose-multiplatform-resources">画像とリソース</a>を参照してください。</p><h3 id="uiテストapi-実験的、全プラットフォーム" tabindex="-1">UIテストAPI (実験的、全プラットフォーム) <a class="header-anchor" href="#uiテストapi-実験的、全プラットフォーム" aria-label="Permalink to &quot;UIテストAPI (実験的、全プラットフォーム)&quot;">​</a></h3><p>デスクトップとAndroidではすでに利用可能だったCompose MultiplatformでのUIテスト用の実験的APIが、すべてのプラットフォームでサポートされるようになりました。 フレームワークがサポートするプラットフォーム間でアプリケーションのUIの動作を検証する共通テストを作成し、実行できます。 このAPIは、Jetpack Composeと同じファインダー、アサーション、アクション、マッチャーを使用します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JUnitベースのテストはデスクトッププロジェクトでのみサポートされています。</p></div><p>セットアップ手順とテスト例については、<a href="./compose-test">Compose Multiplatform UIのテスト</a>を参照してください。</p><h3 id="jetpack-composeおよびmaterial-3からの変更-全プラットフォーム" tabindex="-1">Jetpack ComposeおよびMaterial 3からの変更 (全プラットフォーム) <a class="header-anchor" href="#jetpack-composeおよびmaterial-3からの変更-全プラットフォーム" aria-label="Permalink to &quot;Jetpack ComposeおよびMaterial 3からの変更 (全プラットフォーム)&quot;">​</a></h3><h4 id="jetpack-compose-1-6-1" tabindex="-1">Jetpack Compose 1.6.1 <a class="header-anchor" href="#jetpack-compose-1-6-1" aria-label="Permalink to &quot;Jetpack Compose 1.6.1&quot;">​</a></h4><p>Jetpack Composeの最新リリースをマージすることで、すべてのプラットフォームでのパフォーマンスが向上します。 詳細については、<a href="https://android-developers.googleblog.com/2024/01/whats-new-in-jetpack-compose-january-24-release.html" target="_blank" rel="noreferrer">Android Developers Blogのアナウンス</a>を参照してください。</p><p>このリリースからのその他の注目すべき機能：</p><ul><li>デフォルトのフォントパディングの変更はAndroidターゲットにのみ適用されました。ただし、この変更による<a href="#using-fontsize-in-materialtheme-requires-lineheight">副作用</a>を考慮するようにしてください。</li><li>マウス選択は、以前から他のターゲットのCompose Multiplatformでサポートされていました。1.6.0では、Androidも含まれます。</li></ul><p>Compose Multiplatformにまだ移植されていないJetpack Composeの機能：</p><ul><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4218" target="_blank" rel="noreferrer">BasicTextField2</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4305" target="_blank" rel="noreferrer">非線形フォントスケーリングのサポート</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4236" target="_blank" rel="noreferrer">MultiParagraph.fillBoundingBoxes</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4235" target="_blank" rel="noreferrer">マルチプラットフォームドラッグ＆ドロップ</a>。現時点ではAndroidでのみ動作します。デスクトップでは既存のAPIである<code>Modifier.onExternalDrag</code>を使用できます。</li></ul><p>JetBrainsチームは、Compose Multiplatformの今後のバージョンでこれらの機能を採用することに取り組んでいます。</p><h4 id="compose-material-3-1-2-0" tabindex="-1">Compose Material 3 1.2.0 <a class="header-anchor" href="#compose-material-3-1-2-0" aria-label="Permalink to &quot;Compose Material 3 1.2.0&quot;">​</a></h4><p>リリースのハイライト：</p><ul><li>単一選択および複数選択が可能な新しい実験的なコンポーネント<code>Segmented Button</code>。</li><li>UIで情報を強調しやすくするために、より多くのサーフェスオプションを備えた拡張されたカラーセット。 <ul><li>実装に関する注意：<code>ColorScheme</code>オブジェクトはイミュータブルになりました。コードが現在<code>ColorScheme</code>のカラーを直接変更している場合、カラーを変更するには<a href="https://developer.android.com/reference/kotlin/androidx/compose/material3/ColorScheme#copy(androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color)" target="_blank" rel="noreferrer">copy</a>メソッドを使用する必要があります。</li><li>単一のサーフェス値の代わりに、より柔軟なカラー管理のためにサーフェスカラーとサーフェスコンテナーに複数のオプションが用意されました。</li></ul></li></ul><p>Material 3の変更点の詳細については、<a href="https://material.io/blog/material-3-compose-1-2" target="_blank" rel="noreferrer">Material Design Blogのリリース記事</a>を参照してください。</p><h3 id="ポップアップ、ダイアログ、ドロップダウン向けのプラットフォームビューの分離-ios、デスクトップ" tabindex="-1">ポップアップ、ダイアログ、ドロップダウン向けのプラットフォームビューの分離 (iOS、デスクトップ) <a class="header-anchor" href="#ポップアップ、ダイアログ、ドロップダウン向けのプラットフォームビューの分離-ios、デスクトップ" aria-label="Permalink to &quot;ポップアップ、ダイアログ、ドロップダウン向けのプラットフォームビューの分離 (iOS、デスクトップ)&quot;">​</a></h3><p>ポップアップ要素（例：ツールチップやドロップダウンメニュー）が、初期のコンポーザブルキャンバスやアプリウィンドウによって制限されないことが重要な場合があります。 これは、コンポーザブルビューが全画面を占有せず、アラートダイアログを生成する必要がある場合に特に重要になります。 1.6.0では、これを確実に実現する方法が提供されています。</p><p>ポップアップとダイアログは、依然としてそれら自身の境界（例：最上位コンテナーの影）の外側には何も描画できないことに注意してください。</p><h4 id="ios-stable" tabindex="-1">iOS (Stable) <a class="header-anchor" href="#ios-stable" aria-label="Permalink to &quot;iOS (Stable)&quot;">​</a></h4><p>iOSでは、この機能はデフォルトで有効になっています。 古い動作に戻すには、<code>platformLayers</code>パラメーターを<code>false</code>に設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        platformLayers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // your Compose code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="desktop-experimental" tabindex="-1">Desktop (Experimental) <a class="header-anchor" href="#desktop-experimental" aria-label="Permalink to &quot;Desktop (Experimental)&quot;">​</a></h4><p>デスクトップでこの機能を使用するには、<code>compose.layers.type</code>システムプロパティを設定します。 サポートされる値：</p><ul><li><code>WINDOW</code>：<code>Popup</code>および<code>Dialog</code>コンポーネントを独立した装飾のないウィンドウとして作成します。</li><li><code>COMPONENT</code>：<code>Popup</code>または<code>Dialog</code>を同じウィンドウ内に独立したSwingコンポーネントとして作成します。これはオフスクリーンレンダリングでのみ機能し、<code>compose.swing.render.on.graphics</code>を<code>true</code>に設定する必要があります（1.5.0 Compose Multiplatformリリースノートの<a href="https://blog.jetbrains.com/kotlin/2023/08/compose-multiplatform-1-5-0-release/#enhanced-swing-interop" target="_blank" rel="noreferrer">拡張Swing相互運用</a>セクションを参照）。オフスクリーンレンダリングは<code>ComposePanel</code>コンポーネントでのみ機能し、全画面アプリケーションでは機能しないことに注意してください。</li></ul><p><code>COMPONENT</code>プロパティを使用するコードの例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalComposeUiApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SwingUtilities.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invokeLater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose.swing.render.on.graphics&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose.layers.type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;COMPONENT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.defaultCloseOperation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WindowConstants.EXIT_ON_CLOSE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentPane </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JLayeredPane</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentPane.layout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> composePanel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposePanel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    composePanel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBounds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    composePanel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ComposeContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    composePanel.windowContainer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentPane  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use the full window for dialogs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentPane.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(composePanel)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.contentPane.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contentPane)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.isVisible </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposeContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.Green)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Dialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onDismissRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.Yellow))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>Dialog</code>（黄色）は、親の<code>ComposePanel</code>（緑色）の境界に関係なく完全に描画されます。</p><p><img src="`+s+`" alt="Dialog outside the bounds of the parent panel" width="700"></p><h3 id="テキスト装飾の線スタイルのサポート-ios、デスクトップ、web" tabindex="-1">テキスト装飾の線スタイルのサポート (iOS、デスクトップ、Web) <a class="header-anchor" href="#テキスト装飾の線スタイルのサポート-ios、デスクトップ、web" aria-label="Permalink to &quot;テキスト装飾の線スタイルのサポート (iOS、デスクトップ、Web)&quot;">​</a></h3><p>Compose Multiplatformでは、<code>PlatformTextStyle</code>クラスを使用してテキストの下線スタイルを設定できるようになりました。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>このクラスは共通ソースセットでは利用できず、プラットフォーム固有のコードで使用する必要があります。</p></div><p>点線の下線スタイルを設定する例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;Hello, Compose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  style </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    textDecoration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TextDecoration.Underline,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    platformStyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlatformTextStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      textDecorationLineStyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TextDecorationLineStyle.Dotted</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>実線、二重幅の実線、点線、破線、波線の線スタイルを使用できます。すべての利用可能なオプションは<a href="https://github.com/JetBrains/compose-multiplatform-core/blob/jb-main/compose/ui/ui-text/src/skikoMain/kotlin/androidx/compose/ui/text/TextDecorationLineStyle.kt#L21" target="_blank" rel="noreferrer">ソースコード</a>で確認できます。</p><h3 id="システムにインストールされているフォントへのアクセス-ios、デスクトップ、web" tabindex="-1">システムにインストールされているフォントへのアクセス (iOS、デスクトップ、Web) <a class="header-anchor" href="#システムにインストールされているフォントへのアクセス-ios、デスクトップ、web" aria-label="Permalink to &quot;システムにインストールされているフォントへのアクセス (iOS、デスクトップ、Web)&quot;">​</a></h3><p>Compose Multiplatformアプリからシステムにインストールされているフォントにアクセスできるようになりました。<code>SystemFont</code>クラスを使用して、適切なフォントスタイルとフォントウェイトでフォントを読み込みます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.ui.text.platform.SystemFont</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Menlo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, weight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 700</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Times New Roman&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, FontWeight.Bold))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Webdings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>デスクトップでは、フォントファミリー名のみを指定して、利用可能なすべてのフォントスタイルを<code>FontFamily</code>関数で読み込むことができます（詳細な例は<a href="https://github.com/JetBrains/compose-multiplatform-core/blob/release/1.6.0/compose/desktop/desktop/samples/src/jvmMain/kotlin/androidx/compose/desktop/examples/fonts/Fonts.jvm.kt" target="_blank" rel="noreferrer">コードサンプル</a>を参照）。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Menlo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="アクセシビリティサポート" tabindex="-1">アクセシビリティサポート <a class="header-anchor" href="#アクセシビリティサポート" aria-label="Permalink to &quot;アクセシビリティサポート&quot;">​</a></h3><p>iOS版Compose Multiplatformは、障害を持つ人々がネイティブiOS UIと同じレベルの快適さでCompose UIと対話できるようにします。</p><ul><li>スクリーンリーダーとVoiceOverがCompose UIのコンテンツにアクセスできます。</li><li>Compose UIは、ナビゲーションとインタラクションのためにネイティブUIと同じジェスチャーをサポートします。</li></ul><p>これは、Compose MultiplatformのセマンティックデータをアクセシビリティサービスとXCTestフレームワークで利用できるようにすることも意味します。</p><p>実装とカスタマイズAPIの詳細については、<a href="./compose-ios-accessibility">iOSアクセシビリティ機能のサポート</a>を参照してください。</p><h3 id="コンポーザブルビューの不透明度変更" tabindex="-1">コンポーザブルビューの不透明度変更 <a class="header-anchor" href="#コンポーザブルビューの不透明度変更" aria-label="Permalink to &quot;コンポーザブルビューの不透明度変更&quot;">​</a></h3><p><code>ComposeUIViewController</code>クラスに、ビューの背景の不透明度を透明に変更する設定オプションが追加されました。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>透明な背景は、追加のブレンディングステップを必要とするため、パフォーマンスに悪影響を与えます。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.opaque </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>透明な背景で実現できることの例：</p><p><img src="`+a+`" alt="Compose opaque = false demo" width="700"></p><h3 id="selectioncontainer内のテキストのダブルタップとトリプルタップによる選択" tabindex="-1"><code>SelectionContainer</code>内のテキストのダブルタップとトリプルタップによる選択 <a class="header-anchor" href="#selectioncontainer内のテキストのダブルタップとトリプルタップによる選択" aria-label="Permalink to &quot;\`SelectionContainer\`内のテキストのダブルタップとトリプルタップによる選択&quot;">​</a></h3><p>以前は、iOS版Compose Multiplatformでは、テキスト入力フィールドでのみ複数のタップによるテキスト選択が可能でした。 今回のバージョンから、<code>SelectionContainer</code>内の<code>Text</code>コンポーネントに表示されるテキストの選択にも、ダブルタップとトリプルタップジェスチャーが機能するようになりました。</p><h3 id="uiviewcontrollerとの相互運用" tabindex="-1"><code>UIViewController</code>との相互運用 <a class="header-anchor" href="#uiviewcontrollerとの相互運用" aria-label="Permalink to &quot;\`UIViewController\`との相互運用&quot;">​</a></h3><p><code>UITabBarController</code>や<code>UINavigationController</code>など、<code>UIView</code>として実装されていない一部のネイティブAPIは、<a href="./compose-uikit-integration">既存の相互運用メカニズム</a>を使用してCompose Multiplatform UIに組み込むことができませんでした。</p><p>今回のバージョンから、Compose Multiplatformは<code>UIKitViewController</code>関数を実装し、ネイティブiOSビューコントローラーをCompose UIに組み込むことを可能にしました。</p><h3 id="テキストフィールドにおけるシングルタップ・ロングタップによるネイティブのようなキャレット動作" tabindex="-1">テキストフィールドにおけるシングルタップ・ロングタップによるネイティブのようなキャレット動作 <a class="header-anchor" href="#テキストフィールドにおけるシングルタップ・ロングタップによるネイティブのようなキャレット動作" aria-label="Permalink to &quot;テキストフィールドにおけるシングルタップ・ロングタップによるネイティブのようなキャレット動作&quot;">​</a></h3><p>Compose Multiplatformは、テキストフィールドにおけるネイティブiOSのキャレット動作に近づきました。</p><ul><li>テキストフィールドでのシングルタップ後のキャレットの位置がより正確に決定されます。</li><li>テキストフィールドでのロングタップとドラッグは、Androidのように選択モードに入るのではなく、カーソルを移動させます。</li></ul><h2 id="desktop" tabindex="-1">Desktop <a class="header-anchor" href="#desktop" aria-label="Permalink to &quot;Desktop&quot;">​</a></h2><h3 id="改善された相互運用ブレンディングの実験的サポート" tabindex="-1">改善された相互運用ブレンディングの実験的サポート <a class="header-anchor" href="#改善された相互運用ブレンディングの実験的サポート" aria-label="Permalink to &quot;改善された相互運用ブレンディングの実験的サポート&quot;">​</a></h3><p>以前は、<code>SwingPanel</code>ラッパーを使用して実装された相互運用ビューは常に長方形であり、常に前面、つまり任意のCompose Multiplatformコンポーネントの上部に表示されていました。 これにより、ポップアップ要素（ドロップダウンメニュー、トースト通知）の使用が困難になっていました。 新しい実装ではこの問題が解決され、以下のユースケースでSwingを利用できるようになりました。</p><ul><li><p>クリッピング。長方形の形状に限定されません。クリップ修飾子とシャドウ修飾子が<code>SwingPanel</code>で正しく機能するようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Flag necessary to enable the experimental blending </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose.interop.blending&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SwingPanel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RoundedCornerShape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ul><p>この機能なしで<code>JButton</code>がクリッピングされる様子が左側に、実験的ブレンディングが右側に示されています。</p><p><img src="`+e+'" alt="Correct clipping with SwingPanel"></p><ul><li>オーバーラッピング。<code>SwingPanel</code>の上に任意のCompose Multiplatformコンテンツを描画し、通常通り操作することが可能です。 以下の例では、「Snackbar」がクリック可能な<strong>OK</strong>ボタン付きのSwingパネルの上に表示されています。</li></ul><p><img src="'+l+`" alt="Correct overlapping with SwingPanel"></p><p>既知の制限事項と追加の詳細については、<a href="https://github.com/JetBrains/compose-multiplatform-core/pull/915" target="_blank" rel="noreferrer">プルリクエストの説明</a>を参照してください。</p><h2 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h2><h3 id="安定版フレームワークでkotlin-wasmアーティファクトが利用可能に" tabindex="-1">安定版フレームワークでKotlin/Wasmアーティファクトが利用可能に <a class="header-anchor" href="#安定版フレームワークでkotlin-wasmアーティファクトが利用可能に" aria-label="Permalink to &quot;安定版フレームワークでKotlin/Wasmアーティファクトが利用可能に&quot;">​</a></h3><p>Compose Multiplatformの安定版は、Kotlin/Wasmターゲットをサポートするようになりました。 1.6.0に切り替えた後、依存関係リストで特定の<code>dev-wasm</code>バージョンの<code>compose-ui</code>ライブラリを指定する必要はありません。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>WasmターゲットでCompose Multiplatformプロジェクトをビルドするには、Kotlin 1.9.22以降が必要です。</p></div><h2 id="既知の問題-不足している依存関係" tabindex="-1">既知の問題：不足している依存関係 <a class="header-anchor" href="#既知の問題-不足している依存関係" aria-label="Permalink to &quot;既知の問題：不足している依存関係&quot;">​</a></h2><p>デフォルトのプロジェクト設定で不足する可能性のあるライブラリがいくつかあります。</p><ul><li><p><code>org.jetbrains.compose.annotation-internal:annotation</code> または <code>org.jetbrains.compose.collection-internal:collection</code></p><p>これらは、ライブラリがCompose Multiplatform 1.6.0-beta02に依存している場合に不足する可能性があります。1.6.0-beta02は1.6.0とバイナリ互換性がありません。 どのライブラリが原因であるかを特定するには、このコマンドを実行してください（<code>shared</code>をメインモジュールの名前に置き換えてください）。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shared:dependencies</span></span></code></pre></div><p>ライブラリをCompose Multiplatform 1.5.12に依存するバージョンにダウングレードするか、ライブラリの作者にCompose Multiplatform 1.6.0にアップグレードするよう依頼してください。</p></li><li><p><code>androidx.annotation:annotation:...</code> または <code>androidx.collection:collection:...</code></p><p>Compose Multiplatform 1.6.0は、Google Mavenリポジトリでのみ利用可能な<a href="https://developer.android.com/jetpack/androidx/releases/collection" target="_blank" rel="noreferrer">collection</a>および<a href="https://developer.android.com/jetpack/androidx/releases/annotation" target="_blank" rel="noreferrer">annotation</a>ライブラリに依存しています。</p><p>このリポジトリをプロジェクトで利用可能にするには、モジュールの<code>build.gradle.kts</code>ファイルに以下の行を追加してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    google</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul>`,99)]))}const C=t(r,[["render",h]]);export{y as __pageData,C as default};
