import{_ as a,a as l,b as t,c as i,d as o,e as r,f as s,g as n,h as d,i as h,j as p,k as c}from"./chunks/ki-shell-dependency.DOxXXxVC.js";import{_ as g}from"./chunks/ki-shell-load.DC1M6lEB.js";import{_ as m,c as u,o as k,ag as b}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"コードスニペットの実行","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/run-code-snippets.md","filePath":"ja/kotlin/run-code-snippets.md","lastUpdated":1754307826000}'),_={name:"ja/kotlin/run-code-snippets.md"};function f(P,e,q,y,w,x){return k(),u("div",null,e[0]||(e[0]=[b('<h1 id="コードスニペットの実行" tabindex="-1">コードスニペットの実行 <a class="header-anchor" href="#コードスニペットの実行" aria-label="Permalink to &quot;コードスニペットの実行&quot;">​</a></h1><p>Kotlinコードは通常、IDE、テキストエディター、またはその他のツールで作業するプロジェクトとして編成されます。しかし、関数の動作を素早く確認したり、式の値を見つけたりしたい場合、新しいプロジェクトを作成してビルドする必要はありません。さまざまな環境でKotlinコードを即座に実行できる、これら3つの便利な方法をご覧ください。</p><ul><li>IDEの<a href="#ide-scratches-and-worksheets">スクラッチファイルとワークシート</a>。</li><li>ブラウザの<a href="#browser-kotlin-playground">Kotlin Playground</a>。</li><li>コマンドラインの<a href="#command-line-ki-shell">ki shell</a>。</li></ul><h2 id="ide-スクラッチとワークシート" tabindex="-1">IDE: スクラッチとワークシート <a class="header-anchor" href="#ide-スクラッチとワークシート" aria-label="Permalink to &quot;IDE: スクラッチとワークシート&quot;">​</a></h2><p>IntelliJ IDEAとAndroid Studioは、Kotlinの<a href="https://www.jetbrains.com/help/idea/kotlin-repl.html#efb8fb32" target="_blank" rel="noreferrer">スクラッチファイルとワークシート</a>をサポートしています。</p><ul><li><p><em>スクラッチファイル</em>（または単に_スクラッチ_）を使用すると、プロジェクトと同じIDEウィンドウでコードドラフトを作成し、その場で実行できます。 スクラッチはプロジェクトに紐付けられていません。OS上の任意のIntelliJ IDEAウィンドウから、すべてのスクラッチにアクセスして実行できます。</p><p>Kotlinスクラッチを作成するには、<strong>File</strong> | <strong>New</strong> | <strong>Scratch File</strong> をクリックし、<strong>Kotlin</strong> タイプを選択します。</p></li><li><p>_ワークシート_はプロジェクトファイルです。これらはプロジェクトディレクトリに保存され、プロジェクトモジュールに紐付けられています。 ワークシートは、実際にはソフトウェアユニットを構成しないものの、教育用またはデモ資料のようにプロジェクト内でまとめて保存すべきコードの一部を記述するのに役立ちます。</p><p>プロジェクトディレクトリにKotlinワークシートを作成するには、プロジェクトツリーでそのディレクトリを右クリックし、<strong>New</strong> | <strong>Kotlin Class/File</strong> | <strong>Kotlin Worksheet</strong> を選択します。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlinワークシートは<a href="https://blog.jetbrains.com/idea/2024/11/k2-mode-becomes-stable/" target="_blank" rel="noreferrer">K2モード</a>ではサポートされていません。同様の機能を持つ代替手段を提供するよう取り組んでいます。</p></div></li></ul><p>構文ハイライト、オートコンプリート、およびその他のIntelliJ IDEAのコード編集機能は、スクラッチとワークシートでサポートされています。<code>main()</code>関数を宣言する必要はありません。記述したすべてのコードは、あたかも<code>main()</code>の本体内にあるかのように実行されます。</p><p>スクラッチまたはワークシートでのコードの記述が完了したら、<strong>Run</strong> をクリックします。実行結果は、コードの反対側の行に表示されます。</p><p><img src="'+a+'" alt="Run scratch" width="700"></p><h3 id="インタラクティブモード" tabindex="-1">インタラクティブモード <a class="header-anchor" href="#インタラクティブモード" aria-label="Permalink to &quot;インタラクティブモード&quot;">​</a></h3><p>IDEは、スクラッチとワークシートのコードを自動的に実行できます。入力を停止するとすぐに実行結果を得るには、<strong>Interactive mode</strong> をオンにします。</p><p><img src="'+l+'" alt="Scratch interactive mode" width="700"></p><h3 id="モジュールを使用する" tabindex="-1">モジュールを使用する <a class="header-anchor" href="#モジュールを使用する" aria-label="Permalink to &quot;モジュールを使用する&quot;">​</a></h3><p>Kotlinプロジェクトのクラスや関数をスクラッチやワークシートで使用できます。</p><p>ワークシートは、自身が配置されているモジュールのクラスや関数に自動的にアクセスできます。</p><p>プロジェクトのクラスや関数をスクラッチで使用するには、通常通り<code>import</code>ステートメントでそれらをスクラッチファイルにインポートします。次にコードを記述し、<strong>Use classpath of module</strong> リストで適切なモジュールを選択して実行します。</p><p>スクラッチとワークシートは両方とも、接続されたモジュールのコンパイル済みバージョンを使用します。そのため、モジュールのソースファイルを変更した場合、モジュールをリビルドすると変更がスクラッチとワークシートに反映されます。スクラッチまたはワークシートを実行する前にモジュールを自動的にリビルドするには、<strong>Make module before Run</strong> を選択します。</p><p><img src="'+t+'" alt="Scratch select module" width="700"></p><h3 id="replとして実行する" tabindex="-1">REPLとして実行する <a class="header-anchor" href="#replとして実行する" aria-label="Permalink to &quot;REPLとして実行する&quot;">​</a></h3><p>スクラッチまたはワークシート内の個々の式を評価するには、<strong>Use REPL</strong> を選択して実行します。コード行は順次実行され、各呼び出しの結果が提供されます。後で、自動生成された<code>res*</code>名（対応する行に表示されます）を参照することで、同じファイル内で結果を使用できます。</p><p><img src="'+i+'" alt="Scratch REPL" width="700"></p><h2 id="ブラウザ-kotlin-playground" tabindex="-1">ブラウザ: Kotlin Playground <a class="header-anchor" href="#ブラウザ-kotlin-playground" aria-label="Permalink to &quot;ブラウザ: Kotlin Playground&quot;">​</a></h2><p><a href="https://play.kotlinlang.org/" target="_blank" rel="noreferrer">Kotlin Playground</a>は、ブラウザでKotlinコードを記述、実行、共有するためのオンラインアプリケーションです。</p><h3 id="コードを記述および編集する" tabindex="-1">コードを記述および編集する <a class="header-anchor" href="#コードを記述および編集する" aria-label="Permalink to &quot;コードを記述および編集する&quot;">​</a></h3><p>Playgroundのエディターエリアでは、ソースファイルと同じようにコードを記述できます。</p><ul><li>独自のクラス、関数、トップレベル宣言を任意の順序で追加します。</li><li>実行可能な部分を<code>main()</code>関数の本体に記述します。</li></ul><p>一般的なKotlinプロジェクトと同様に、Playgroundの<code>main()</code>関数は<code>args</code>パラメータを持つことも、まったくパラメータを持たないこともできます。実行時にプログラム引数を渡すには、<strong>Program arguments</strong> フィールドに記述します。</p><p><img src="'+o+'" alt="Playground: code completion" width="700"></p><p>Playgroundは、入力中にコードをハイライト表示し、コード補完オプションを表示します。標準ライブラリと<a href="/ja/kotlin/coroutines-overview"><code>kotlinx.coroutines</code></a>からの宣言を自動的にインポートします。</p><h3 id="実行環境を選択する" tabindex="-1">実行環境を選択する <a class="header-anchor" href="#実行環境を選択する" aria-label="Permalink to &quot;実行環境を選択する&quot;">​</a></h3><p>Playgroundは、実行環境をカスタマイズする方法を提供します。</p><ul><li>利用可能な<a href="/ja/kotlin/eap">将来のバージョンのプレビュー</a>を含む複数のKotlinバージョン。</li><li>コードを実行するための複数のバックエンド：JVM、JS（レガシーまたは<a href="/ja/kotlin/js-ir-compiler">IRコンパイラ</a>、またはCanvas）、またはJUnit。</li></ul><p><img src="'+r+'" alt="Playground: environment setup" width="700"></p><p>JSバックエンドの場合、生成されたJSコードも確認できます。</p><p><img src="'+s+'" alt="Playground: generated JS" width="700"></p><h3 id="コードをオンラインで共有する" tabindex="-1">コードをオンラインで共有する <a class="header-anchor" href="#コードをオンラインで共有する" aria-label="Permalink to &quot;コードをオンラインで共有する&quot;">​</a></h3><p>Playgroundを使用してコードを他のユーザーと共有するには、<strong>Copy link</strong> をクリックし、コードを見せたい相手に送信します。</p><p>Playgroundのコードスニペットを他のウェブサイトに埋め込んだり、実行可能にしたりすることもできます。<strong>Share code</strong> をクリックして、サンプルを任意のウェブページや<a href="https://medium.com/" target="_blank" rel="noreferrer">Medium</a>の記事に埋め込みます。</p><p><img src="'+n+'" alt="Playground: share code" width="700"></p><h2 id="コマンドライン-ki-shell" tabindex="-1">コマンドライン: ki shell <a class="header-anchor" href="#コマンドライン-ki-shell" aria-label="Permalink to &quot;コマンドライン: ki shell&quot;">​</a></h2><p><a href="https://github.com/Kotlin/kotlin-interactive-shell" target="_blank" rel="noreferrer">ki shell</a>（<em>Kotlin Interactive Shell</em>）は、ターミナルでKotlinコードを実行するためのコマンドラインユーティリティです。Linux、macOS、Windowsで利用できます。</p><p>ki shellは、基本的なコード評価機能に加えて、次のような高度な機能を提供します。</p><ul><li>コード補完</li><li>型チェック</li><li>外部依存関係</li><li>コードスニペットのペーストモード</li><li>スクリプトサポート</li></ul><p>詳細については、<a href="https://github.com/Kotlin/kotlin-interactive-shell" target="_blank" rel="noreferrer">ki shell GitHubリポジトリ</a>を参照してください。</p><h3 id="ki-shellをインストールして実行する" tabindex="-1">ki shellをインストールして実行する <a class="header-anchor" href="#ki-shellをインストールして実行する" aria-label="Permalink to &quot;ki shellをインストールして実行する&quot;">​</a></h3><p>ki shellをインストールするには、<a href="https://github.com/Kotlin/kotlin-interactive-shell" target="_blank" rel="noreferrer">GitHub</a>から最新バージョンをダウンロードし、任意のディレクトリに解凍します。</p><p>macOSでは、以下のコマンドを実行することでHomebrewを使用してki shellをインストールすることもできます。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ki</span></span></code></pre></div><p>ki shellを起動するには、LinuxとmacOSでは<code>bin/ki.sh</code>（Homebrewでki shellがインストールされている場合は<code>ki</code>）、Windowsでは<code>bin\\ki.bat</code>を実行します。</p><p>シェルが実行されたら、すぐにターミナルでKotlinコードを書き始めることができます。ki shellで利用可能なコマンドを確認するには、<code>:help</code>（または<code>:h</code>）と入力します。</p><h3 id="コード補完とハイライト" tabindex="-1">コード補完とハイライト <a class="header-anchor" href="#コード補完とハイライト" aria-label="Permalink to &quot;コード補完とハイライト&quot;">​</a></h3><p>ki shellは、<strong>Tab</strong> キーを押すとコード補完オプションを表示します。また、入力中に構文ハイライト機能も提供します。この機能は、<code>:syntax off</code>と入力することで無効にできます。</p><p><img src="'+d+'" alt="ki shell highlighting and completion" width="700"></p><p><strong>Enter</strong> キーを押すと、ki shellは入力された行を評価し、結果を出力します。式の値は、<code>res*</code>のような自動生成された名前を持つ変数として出力されます。後で、実行するコードでこれらの変数を使用できます。入力された構文が不完全な場合（例えば、条件はあるが本体がない<code>if</code>など）、シェルは3つの点を表示し、残りの部分を待機します。</p><p><img src="'+h+'" alt="ki shell results" width="700"></p><h3 id="式の型を確認する" tabindex="-1">式の型を確認する <a class="header-anchor" href="#式の型を確認する" aria-label="Permalink to &quot;式の型を確認する&quot;">​</a></h3><p>よくわからない複雑な式やAPIの場合、ki shellは式の型を表示する<code>:type</code>（または<code>:t</code>）コマンドを提供します。</p><p><img src="'+p+'" alt="ki shell type" width="700"></p><h3 id="コードをロードする" tabindex="-1">コードをロードする <a class="header-anchor" href="#コードをロードする" aria-label="Permalink to &quot;コードをロードする&quot;">​</a></h3><p>必要なコードがどこか別の場所に保存されている場合、それをki shellにロードして使用する方法は2つあります。</p><ul><li><code>:load</code>（または<code>:l</code>）コマンドでソースファイルをロードします。</li><li><code>:paste</code>（または<code>:p</code>）コマンドでペーストモードでコードスニペットをコピー＆ペーストします。</li></ul><p><img src="'+g+'" alt="ki shell load file" width="700"></p><p><code>ls</code>コマンドは、利用可能なシンボル（変数と関数）を表示します。</p><h3 id="外部依存関係を追加する" tabindex="-1">外部依存関係を追加する <a class="header-anchor" href="#外部依存関係を追加する" aria-label="Permalink to &quot;外部依存関係を追加する&quot;">​</a></h3><p>標準ライブラリに加えて、ki shellは外部依存関係もサポートしています。これにより、プロジェクト全体を作成することなく、サードパーティライブラリを試すことができます。</p><p>ki shellにサードパーティライブラリを追加するには、<code>:dependsOn</code>コマンドを使用します。デフォルトでは、ki shellはMaven Centralと連携しますが、<code>:repository</code>コマンドを使用して他のリポジトリを接続すれば、それらを使用することもできます。</p><p><img src="'+c+'" alt="ki shell external dependency" width="700"></p>',67)]))}const E=m(_,[["render",f]]);export{I as __pageData,E as default};
