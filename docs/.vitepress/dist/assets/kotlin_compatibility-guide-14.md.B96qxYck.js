import{_ as t,c as e,o as r,ag as n}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlin 1.4 兼容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/compatibility-guide-14.md","filePath":"kotlin/compatibility-guide-14.md","lastUpdated":1754307826000}'),a={name:"kotlin/compatibility-guide-14.md"};function l(s,o,i,c,g,p){return r(),e("div",null,o[0]||(o[0]=[n('<h1 id="kotlin-1-4-兼容性指南" tabindex="-1">Kotlin 1.4 兼容性指南 <a class="header-anchor" href="#kotlin-1-4-兼容性指南" aria-label="Permalink to &quot;Kotlin 1.4 兼容性指南&quot;">​</a></h1><p><em><a href="/kotlin/kotlin-evolution-principles">保持语言现代化</a></em> 和 <em><a href="/kotlin/kotlin-evolution-principles">舒适的更新</a></em> 是 Kotlin 语言设计中的基本原则。前者指出应移除阻碍语言演进的结构，后者则表明这种移除应提前充分沟通，以使代码迁移尽可能顺利。</p><p>虽然大多数语言变更已通过其他渠道（如更新日志或编译器警告）公布，但本文档汇总了所有这些变更，为从 Kotlin 1.3 迁移到 Kotlin 1.4 提供了完整的参考。</p><h2 id="基本术语" tabindex="-1">基本术语 <a class="header-anchor" href="#基本术语" aria-label="Permalink to &quot;基本术语&quot;">​</a></h2><p>在本文档中，我们引入了几种兼容性：</p><ul><li><em>源码兼容性</em>：源码不兼容的变更会使得原本能（无错误或警告地）正常编译的代码无法继续编译</li><li><em>二进制兼容性</em>：如果两个二进制构件在相互替换后不会导致加载或链接错误，则称它们是二进制兼容的</li><li><em>行为兼容性</em>：如果同一程序在应用变更前后表现出不同行为，则称该变更是行为不兼容的</li></ul><p>请记住，这些定义仅适用于纯 Kotlin。从其他语言（例如 Java）的角度来看，Kotlin 代码的兼容性超出了本文档的范围。</p><h2 id="语言和标准库" tabindex="-1">语言和标准库 <a class="header-anchor" href="#语言和标准库" aria-label="Permalink to &quot;语言和标准库&quot;">​</a></h2><h3 id="关于-in-中缀操作符和-concurrenthashmap-的意外行为" tabindex="-1">关于 <code>in</code> 中缀操作符和 ConcurrentHashMap 的意外行为 <a class="header-anchor" href="#关于-in-中缀操作符和-concurrenthashmap-的意外行为" aria-label="Permalink to &quot;关于 `in` 中缀操作符和 ConcurrentHashMap 的意外行为&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-18053" target="_blank" rel="noreferrer">KT-18053</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：Kotlin 1.4 将禁止来自 Java 中 <code>java.util.Map</code> 实现者的自动操作符 <code>contains</code></p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：在调用点对有问题操作符引入警告</li><li>&gt;= 1.4：将此警告提升为错误， <code>-XXLanguage:-ProhibitConcurrentHashMapContains</code> 可用于临时恢复到 1.4 版之前的行为</li></ul></blockquote><h3 id="禁止在公共内联成员内部访问-protected-成员" tabindex="-1">禁止在公共内联成员内部访问 <code>protected</code> 成员 <a class="header-anchor" href="#禁止在公共内联成员内部访问-protected-成员" aria-label="Permalink to &quot;禁止在公共内联成员内部访问 `protected` 成员&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-21178" target="_blank" rel="noreferrer">KT-21178</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：Kotlin 1.4 将禁止从公共内联成员中访问 <code>protected</code> 成员。</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：在调用点对有问题情况引入警告</li><li>1.4：将此警告提升为错误， <code>-XXLanguage:-ProhibitProtectedCallFromInline</code> 可用于临时恢复到 1.4 版之前的行为</li></ul></blockquote><h3 id="带隐式接收者的调用上的契约" tabindex="-1">带隐式接收者的调用上的契约 <a class="header-anchor" href="#带隐式接收者的调用上的契约" aria-label="Permalink to &quot;带隐式接收者的调用上的契约&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-28672" target="_blank" rel="noreferrer">KT-28672</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：从 1.4 版开始，契约的智能类型转换将可用于带隐式接收者的调用</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-ContractsOnCallsWithImplicitReceiver</code> 可用于临时恢复到 1.4 版之前的行为</li></ul></blockquote><h3 id="浮点数比较行为不一致" tabindex="-1">浮点数比较行为不一致 <a class="header-anchor" href="#浮点数比较行为不一致" aria-label="Permalink to &quot;浮点数比较行为不一致&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-22723" target="_blank" rel="noreferrer">KT-22723</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，Kotlin 编译器将使用 IEEE 754 标准来比较浮点数</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-ProperIeee754Comparisons</code> 可用于临时恢复到 1.4 版之前的行为</li></ul></blockquote><h3 id="泛型-lambda-表达式中最后一个表达式不进行智能类型转换" tabindex="-1">泛型 lambda 表达式中最后一个表达式不进行智能类型转换 <a class="header-anchor" href="#泛型-lambda-表达式中最后一个表达式不进行智能类型转换" aria-label="Permalink to &quot;泛型 lambda 表达式中最后一个表达式不进行智能类型转换&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-15020" target="_blank" rel="noreferrer">KT-15020</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：从 1.4 版开始，lambda 表达式中最后一个表达式的智能类型转换将正确应用</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NewInference</code> 可用于临时恢复到 1.4 版之前的行为。请注意，此标志还将禁用多项新的语言特性。</li></ul></blockquote><h3 id="不依赖-lambda-实参的顺序来强制将结果转换为-unit" tabindex="-1">不依赖 lambda 实参的顺序来强制将结果转换为 Unit <a class="header-anchor" href="#不依赖-lambda-实参的顺序来强制将结果转换为-unit" aria-label="Permalink to &quot;不依赖 lambda 实参的顺序来强制将结果转换为 Unit&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-36045" target="_blank" rel="noreferrer">KT-36045</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，lambda 实参将独立解析，不隐式强制转换为 <code>Unit</code></p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NewInference</code> 可用于临时恢复到 1.4 版之前的行为。请注意，此标志还将禁用多项新的语言特性。</li></ul></blockquote><h3 id="原始类型与整数字面量类型之间错误的公共超类型导致不健全的代码" tabindex="-1">原始类型与整数字面量类型之间错误的公共超类型导致不健全的代码 <a class="header-anchor" href="#原始类型与整数字面量类型之间错误的公共超类型导致不健全的代码" aria-label="Permalink to &quot;原始类型与整数字面量类型之间错误的公共超类型导致不健全的代码&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-35681" target="_blank" rel="noreferrer">KT-35681</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，原始 <code>Comparable</code> 类型与整数字面量类型之间的公共超类型将更加具体</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NewInference</code> 可用于临时恢复到 1.4 版之前的行为。请注意，此标志还将禁用多项新的语言特性。</li></ul></blockquote><h3 id="由于将多个相等类型变量实例化为不同类型而导致类型安全问题" tabindex="-1">由于将多个相等类型变量实例化为不同类型而导致类型安全问题 <a class="header-anchor" href="#由于将多个相等类型变量实例化为不同类型而导致类型安全问题" aria-label="Permalink to &quot;由于将多个相等类型变量实例化为不同类型而导致类型安全问题&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-35679" target="_blank" rel="noreferrer">KT-35679</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，Kotlin 编译器将禁止将相等类型变量实例化为不同类型</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NewInference</code> 可用于临时恢复到 1.4 版之前的行为。请注意，此标志还将禁用多项新的语言特性。</li></ul></blockquote><h3 id="由于交集类型的子类型化不正确而导致类型安全问题" tabindex="-1">由于交集类型的子类型化不正确而导致类型安全问题 <a class="header-anchor" href="#由于交集类型的子类型化不正确而导致类型安全问题" aria-label="Permalink to &quot;由于交集类型的子类型化不正确而导致类型安全问题&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-22474" target="_blank" rel="noreferrer">KT-22474</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：在 Kotlin 1.4 中，交集类型的子类型化将进行优化以更正确地工作</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NewInference</code> 可用于临时恢复到 1.4 版之前的行为。请注意，此标志还将禁用多项新的语言特性。</li></ul></blockquote><h3 id="lambda-表达式内部空-when-表达式不报类型不匹配" tabindex="-1">lambda 表达式内部空 <code>when</code> 表达式不报类型不匹配 <a class="header-anchor" href="#lambda-表达式内部空-when-表达式不报类型不匹配" aria-label="Permalink to &quot;lambda 表达式内部空 `when` 表达式不报类型不匹配&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-17995" target="_blank" rel="noreferrer">KT-17995</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，如果空 <code>when</code> 表达式用作 lambda 表达式中的最后一个表达式，则会出现类型不匹配错误</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NewInference</code> 可用于临时恢复到 1.4 版之前的行为。请注意，此标志还将禁用多项新的语言特性。</li></ul></blockquote><h3 id="对于带有提前返回且其中一个可能返回值是整数字面量的-lambda-表达式-其返回类型推断为-any" tabindex="-1">对于带有提前返回且其中一个可能返回值是整数字面量的 lambda 表达式，其返回类型推断为 <code>Any</code> <a class="header-anchor" href="#对于带有提前返回且其中一个可能返回值是整数字面量的-lambda-表达式-其返回类型推断为-any" aria-label="Permalink to &quot;对于带有提前返回且其中一个可能返回值是整数字面量的 lambda 表达式，其返回类型推断为 `Any`&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-20226" target="_blank" rel="noreferrer">KT-20226</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，从 lambda 表达式返回的整数类型在存在提前返回的情况下将更加具体</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NewInference</code> 可用于临时恢复到 1.4 版之前的行为。请注意，此标志还将禁用多项新的语言特性。</li></ul></blockquote><h3 id="正确捕获递归类型的星型投影" tabindex="-1">正确捕获递归类型的星型投影 <a class="header-anchor" href="#正确捕获递归类型的星型投影" aria-label="Permalink to &quot;正确捕获递归类型的星型投影&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-33012" target="_blank" rel="noreferrer">KT-33012</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，更多候选将变得适用，因为递归类型的捕获将更正确地工作</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NewInference</code> 可用于临时恢复到 1.4 版之前的行为。请注意，此标志还将禁用多项新的语言特性。</li></ul></blockquote><h3 id="不恰当类型和弹性类型计算公共超类型导致不正确结果" tabindex="-1">不恰当类型和弹性类型计算公共超类型导致不正确结果 <a class="header-anchor" href="#不恰当类型和弹性类型计算公共超类型导致不正确结果" aria-label="Permalink to &quot;不恰当类型和弹性类型计算公共超类型导致不正确结果&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-37054" target="_blank" rel="noreferrer">KT-37054</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，弹性类型之间的公共超类型将更加具体，从而防止运行时错误</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NewInference</code> 可用于临时恢复到 1.4 版之前的行为。请注意，此标志还将禁用多项新的语言特性。</li></ul></blockquote><h3 id="由于缺乏针对可空类型实参的捕获转换而导致类型安全问题" tabindex="-1">由于缺乏针对可空类型实参的捕获转换而导致类型安全问题 <a class="header-anchor" href="#由于缺乏针对可空类型实参的捕获转换而导致类型安全问题" aria-label="Permalink to &quot;由于缺乏针对可空类型实参的捕获转换而导致类型安全问题&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-35487" target="_blank" rel="noreferrer">KT-35487</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，捕获类型与可空类型之间的子类型化将更正确，从而防止运行时错误</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NewInference</code> 可用于临时恢复到 1.4 版之前的行为。请注意，此标志还将禁用多项新的语言特性。</li></ul></blockquote><h3 id="在非检查转换后保留协变类型的交集类型" tabindex="-1">在非检查转换后保留协变类型的交集类型 <a class="header-anchor" href="#在非检查转换后保留协变类型的交集类型" aria-label="Permalink to &quot;在非检查转换后保留协变类型的交集类型&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-37280" target="_blank" rel="noreferrer">KT-37280</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，协变类型的非检查转换将为智能类型转换产生交集类型，而不是非检查转换的类型。</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NewInference</code> 可用于临时恢复到 1.4 版之前的行为。请注意，此标志还将禁用多项新的语言特性。</li></ul></blockquote><h3 id="由于使用-this-表达式导致构建器推断中的类型变量泄露" tabindex="-1">由于使用 <code>this</code> 表达式导致构建器推断中的类型变量泄露 <a class="header-anchor" href="#由于使用-this-表达式导致构建器推断中的类型变量泄露" aria-label="Permalink to &quot;由于使用 `this` 表达式导致构建器推断中的类型变量泄露&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-32126" target="_blank" rel="noreferrer">KT-32126</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，如果没有其他适当约束，在 <code>sequence {}</code> 等构建器函数内部使用 <code>this</code> 将被禁止</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NewInference</code> 可用于临时恢复到 1.4 版之前的行为。请注意，此标志还将禁用多项新的语言特性。</li></ul></blockquote><h3 id="带可空类型实参的逆变类型的错误重载解析" tabindex="-1">带可空类型实参的逆变类型的错误重载解析 <a class="header-anchor" href="#带可空类型实参的逆变类型的错误重载解析" aria-label="Permalink to &quot;带可空类型实参的逆变类型的错误重载解析&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-31670" target="_blank" rel="noreferrer">KT-31670</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，如果接受逆变类型实参的两个重载函数仅在类型可空性上不同（例如 <code>In&lt;T&gt;</code> 和 <code>In&lt;T?&gt;</code>），则可空类型被认为更具体。</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NewInference</code> 可用于临时恢复到 1.4 版之前的行为。请注意，此标志还将禁用多项新的语言特性。</li></ul></blockquote><h3 id="带非嵌套递归约束的构建器推断" tabindex="-1">带非嵌套递归约束的构建器推断 <a class="header-anchor" href="#带非嵌套递归约束的构建器推断" aria-label="Permalink to &quot;带非嵌套递归约束的构建器推断&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-34975" target="_blank" rel="noreferrer">KT-34975</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，像 <code>sequence {}</code> 这种在传递的 lambda 表达式内部其类型依赖于递归约束的构建器函数会导致编译器错误。</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NewInference</code> 可用于临时恢复到 1.4 版之前的行为。请注意，此标志还将禁用多项新的语言特性。</li></ul></blockquote><h3 id="急切类型变量固定导致矛盾的约束系统" tabindex="-1">急切类型变量固定导致矛盾的约束系统 <a class="header-anchor" href="#急切类型变量固定导致矛盾的约束系统" aria-label="Permalink to &quot;急切类型变量固定导致矛盾的约束系统&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-25175" target="_blank" rel="noreferrer">KT-25175</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，某些情况下类型推断不那么急切地工作，从而允许找到不矛盾的约束系统。</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NewInference</code> 可用于临时恢复到 1.4 版之前的行为。请注意，此标志还将禁用多项新的语言特性。</li></ul></blockquote><h3 id="禁止在开放函数上使用-tailrec-修饰符" tabindex="-1">禁止在开放函数上使用 <code>tailrec</code> 修饰符 <a class="header-anchor" href="#禁止在开放函数上使用-tailrec-修饰符" aria-label="Permalink to &quot;禁止在开放函数上使用 `tailrec` 修饰符&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-18541" target="_blank" rel="noreferrer">KT-18541</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，函数不能同时拥有 <code>open</code> 和 <code>tailrec</code> 修饰符。</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：对同时拥有 <code>open</code> 和 <code>tailrec</code> 修饰符的函数报告警告（在渐进模式下为错误）。</li><li>&gt;= 1.4：将此警告提升为错误。</li></ul></blockquote><h3 id="伴生对象-instance-字段可见性高于伴生对象类本身" tabindex="-1">伴生对象 <code>INSTANCE</code> 字段可见性高于伴生对象类本身 <a class="header-anchor" href="#伴生对象-instance-字段可见性高于伴生对象类本身" aria-label="Permalink to &quot;伴生对象 `INSTANCE` 字段可见性高于伴生对象类本身&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-11567" target="_blank" rel="noreferrer">KT-11567</a></p><p><strong>组件</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，如果伴生对象是 <code>private</code> 的，那么其字段 <code>INSTANCE</code> 也将是 <code>private</code> 的</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：编译器生成带有废弃标志的对象 <code>INSTANCE</code></li><li>&gt;= 1.4：伴生对象 <code>INSTANCE</code> 字段具有适当的可见性</li></ul></blockquote><h3 id="插入在-return-之前的外部-finally-代码块未从内部无-finally-的-try-代码块的-catch-区间中排除" tabindex="-1">插入在 <code>return</code> 之前的外部 <code>finally</code> 代码块未从内部无 <code>finally</code> 的 <code>try</code> 代码块的 <code>catch</code> 区间中排除 <a class="header-anchor" href="#插入在-return-之前的外部-finally-代码块未从内部无-finally-的-try-代码块的-catch-区间中排除" aria-label="Permalink to &quot;插入在 `return` 之前的外部 `finally` 代码块未从内部无 `finally` 的 `try` 代码块的 `catch` 区间中排除&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-31923" target="_blank" rel="noreferrer">KT-31923</a></p><p><strong>组件</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，嵌套 <code>try/catch</code> 代码块的 <code>catch</code> 区间将正确计算</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-ProperFinally</code> 可用于临时恢复到 1.4 版之前的行为</li></ul></blockquote><h3 id="在返回类型位置-协变和泛型特化覆盖使用内联类的装箱版本" tabindex="-1">在返回类型位置，协变和泛型特化覆盖使用内联类的装箱版本 <a class="header-anchor" href="#在返回类型位置-协变和泛型特化覆盖使用内联类的装箱版本" aria-label="Permalink to &quot;在返回类型位置，协变和泛型特化覆盖使用内联类的装箱版本&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-30419" target="_blank" rel="noreferrer">KT-30419</a></p><p><strong>组件</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，使用协变和泛型特化覆盖的函数将返回内联类的装箱值</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改</li></ul></blockquote><h3 id="在使用委托到-kotlin-接口时-不在-jvm-字节码中声明受检异常" tabindex="-1">在使用委托到 Kotlin 接口时，不在 JVM 字节码中声明受检异常 <a class="header-anchor" href="#在使用委托到-kotlin-接口时-不在-jvm-字节码中声明受检异常" aria-label="Permalink to &quot;在使用委托到 Kotlin 接口时，不在 JVM 字节码中声明受检异常&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-35834" target="_blank" rel="noreferrer">KT-35834</a></p><p><strong>组件</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：Kotlin 1.4 在接口委托到 Kotlin 接口时将不生成受检异常</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-DoNotGenerateThrowsForDelegatedKotlinMembers</code> 可用于临时恢复到 1.4 版之前的行为</li></ul></blockquote><h3 id="修改了对带有单个-vararg-形参的方法进行签名多态调用时的行为-以避免将实参包装到另一个数组中" tabindex="-1">修改了对带有单个 <code>vararg</code> 形参的方法进行签名多态调用时的行为，以避免将实参包装到另一个数组中 <a class="header-anchor" href="#修改了对带有单个-vararg-形参的方法进行签名多态调用时的行为-以避免将实参包装到另一个数组中" aria-label="Permalink to &quot;修改了对带有单个 `vararg` 形参的方法进行签名多态调用时的行为，以避免将实参包装到另一个数组中&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-35469" target="_blank" rel="noreferrer">KT-35469</a></p><p><strong>组件</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：Kotlin 1.4 将不会在签名多态调用时将实参包装到另一个数组中</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改</li></ul></blockquote><h3 id="当-kclass-用作泛型形参时-注解中泛型签名不正确" tabindex="-1">当 <code>KClass</code> 用作泛型形参时，注解中泛型签名不正确 <a class="header-anchor" href="#当-kclass-用作泛型形参时-注解中泛型签名不正确" aria-label="Permalink to &quot;当 `KClass` 用作泛型形参时，注解中泛型签名不正确&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-35207" target="_blank" rel="noreferrer">KT-35207</a></p><p><strong>组件</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：Kotlin 1.4 将修复当 <code>KClass</code> 用作泛型形参时注解中不正确的类型映射</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改</li></ul></blockquote><h3 id="禁止在签名多态调用中使用展开操作符" tabindex="-1">禁止在签名多态调用中使用展开操作符 <a class="header-anchor" href="#禁止在签名多态调用中使用展开操作符" aria-label="Permalink to &quot;禁止在签名多态调用中使用展开操作符&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-35226" target="_blank" rel="noreferrer">KT-35226</a></p><p><strong>组件</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：Kotlin 1.4 将禁止在签名多态调用中使用展开操作符（<code>*</code>）</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：对在签名多态调用中使用展开操作符报告警告</li><li>&gt;= 1.5：将此警告提升为错误， <code>-XXLanguage:-ProhibitSpreadOnSignaturePolymorphicCall</code> 可用于临时恢复到 1.4 版之前的行为</li></ul></blockquote><h3 id="更改尾递归优化函数默认值的初始化顺序" tabindex="-1">更改尾递归优化函数默认值的初始化顺序 <a class="header-anchor" href="#更改尾递归优化函数默认值的初始化顺序" aria-label="Permalink to &quot;更改尾递归优化函数默认值的初始化顺序&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-31540" target="_blank" rel="noreferrer">KT-31540</a></p><p><strong>组件</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，尾递归函数的初始化顺序将与常规函数相同</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：在声明点对有问题函数报告警告</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-ProperComputationOrderOfTailrecDefaultParameters</code> 可用于临时恢复到 1.4 版之前的行为</li></ul></blockquote><h3 id="不对非-const-的-val-生成-constantvalue-属性" tabindex="-1">不对非 <code>const</code> 的 <code>val</code> 生成 <code>ConstantValue</code> 属性 <a class="header-anchor" href="#不对非-const-的-val-生成-constantvalue-属性" aria-label="Permalink to &quot;不对非 `const` 的 `val` 生成 `ConstantValue` 属性&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-16615" target="_blank" rel="noreferrer">KT-16615</a></p><p><strong>组件</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，编译器将不对非 <code>const</code> 的 <code>val</code> 生成 <code>ConstantValue</code> 属性</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：通过 IntelliJ IDEA 检查报告警告</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-NoConstantValueAttributeForNonConstVals</code> 可用于临时恢复到 1.4 版之前的行为</li></ul></blockquote><h3 id="jvmoverloads-注解在-open-方法上生成的重载应为-final" tabindex="-1"><code>@JvmOverloads</code> 注解在 <code>open</code> 方法上生成的重载应为 <code>final</code> <a class="header-anchor" href="#jvmoverloads-注解在-open-方法上生成的重载应为-final" aria-label="Permalink to &quot;`@JvmOverloads` 注解在 `open` 方法上生成的重载应为 `final`&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-33240" target="_blank" rel="noreferrer">KT-33240</a></p><p><strong>组件</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：带有 <code>@JvmOverloads</code> 注解的函数重载将生成为 <code>final</code></p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改， <code>-XXLanguage:-GenerateJvmOverloadsAsFinal</code> 可用于临时恢复到 1.4 版之前的行为</li></ul></blockquote><h3 id="返回-kotlin-result-的-lambda-表达式现在返回装箱值而非未装箱值" tabindex="-1">返回 <code>kotlin.Result</code> 的 lambda 表达式现在返回装箱值而非未装箱值 <a class="header-anchor" href="#返回-kotlin-result-的-lambda-表达式现在返回装箱值而非未装箱值" aria-label="Permalink to &quot;返回 `kotlin.Result` 的 lambda 表达式现在返回装箱值而非未装箱值&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-39198" target="_blank" rel="noreferrer">KT-39198</a></p><p><strong>组件</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，返回 <code>kotlin.Result</code> 类型值的 lambda 表达式将返回装箱值而非未装箱值</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改</li></ul></blockquote><h3 id="统一空值检测抛出的异常" tabindex="-1">统一空值检测抛出的异常 <a class="header-anchor" href="#统一空值检测抛出的异常" aria-label="Permalink to &quot;统一空值检测抛出的异常&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-22275" target="_blank" rel="noreferrer">KT-22275</a></p><p><strong>组件</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，所有运行时空值检测都将抛出 <code>java.lang.NullPointerException</code></p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：运行时空值检测抛出不同的异常，例如 <code>KotlinNullPointerException</code>、<code>IllegalStateException</code>、<code>IllegalArgumentException</code> 和 <code>TypeCastException</code></li><li>&gt;= 1.4：所有运行时空值检测都抛出 <code>java.lang.NullPointerException</code>。 <code>-Xno-unified-null-checks</code> 可用于临时恢复到 1.4 版之前的行为</li></ul></blockquote><h3 id="数组-列表操作-contains、indexof、lastindexof-中浮点值的比较-ieee-754-或全序" tabindex="-1">数组/列表操作 <code>contains</code>、<code>indexOf</code>、<code>lastIndexOf</code> 中浮点值的比较：IEEE 754 或全序 <a class="header-anchor" href="#数组-列表操作-contains、indexof、lastindexof-中浮点值的比较-ieee-754-或全序" aria-label="Permalink to &quot;数组/列表操作 `contains`、`indexOf`、`lastIndexOf` 中浮点值的比较：IEEE 754 或全序&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-28753" target="_blank" rel="noreferrer">KT-28753</a></p><p><strong>组件</strong>：kotlin-stdlib (JVM)</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：从 <code>Double/FloatArray.asList()</code> 返回的 <code>List</code> 实现将实现 <code>contains</code>、<code>indexOf</code> 和 <code>lastIndexOf</code>，以便它们使用全序相等性</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改</li></ul></blockquote><h3 id="逐步将集合-min-和-max-函数的返回类型更改为非空" tabindex="-1">逐步将集合 <code>min</code> 和 <code>max</code> 函数的返回类型更改为非空 <a class="header-anchor" href="#逐步将集合-min-和-max-函数的返回类型更改为非空" aria-label="Permalink to &quot;逐步将集合 `min` 和 `max` 函数的返回类型更改为非空&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-38854" target="_blank" rel="noreferrer">KT-38854</a></p><p><strong>组件</strong>：kotlin-stdlib (JVM)</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：集合 <code>min</code> 和 <code>max</code> 函数的返回类型将在 1.6 版中更改为非空</p><p><strong>废弃周期</strong>：</p><ul><li>1.4：引入 <code>...OrNull</code> 函数作为同义词并废弃受影响的 API（详见议题）</li><li>1.5.x：将受影响 API 的废弃级别提升为错误</li><li>&gt;=1.6：重新引入受影响的 API，但使用非空返回类型</li></ul></blockquote><h3 id="废弃-appendln-推荐使用-appendline" tabindex="-1">废弃 <code>appendln</code>，推荐使用 <code>appendLine</code> <a class="header-anchor" href="#废弃-appendln-推荐使用-appendline" aria-label="Permalink to &quot;废弃 `appendln`，推荐使用 `appendLine`&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-38754" target="_blank" rel="noreferrer">KT-38754</a></p><p><strong>组件</strong>：kotlin-stdlib (JVM)</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：<code>StringBuilder.appendln()</code> 将被废弃，推荐使用 <code>StringBuilder.appendLine()</code></p><p><strong>废弃周期</strong>：</p><ul><li>1.4：引入 <code>appendLine</code> 函数作为 <code>appendln</code> 的替代项并废弃 <code>appendln</code></li><li>&gt;=1.5：将废弃级别提升为错误</li></ul></blockquote><h3 id="废弃浮点类型到-short-和-byte-的转换" tabindex="-1">废弃浮点类型到 <code>Short</code> 和 <code>Byte</code> 的转换 <a class="header-anchor" href="#废弃浮点类型到-short-和-byte-的转换" aria-label="Permalink to &quot;废弃浮点类型到 `Short` 和 `Byte` 的转换&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-30360" target="_blank" rel="noreferrer">KT-30360</a></p><p><strong>组件</strong>：kotlin-stdlib (JVM)</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，浮点类型到 <code>Short</code> 和 <code>Byte</code> 的转换将被废弃</p><p><strong>废弃周期</strong>：</p><ul><li>1.4：废弃 <code>Double.toShort()/toByte()</code> 和 <code>Float.toShort()/toByte()</code> 并提出替代方案</li><li>&gt;=1.5：将废弃级别提升为错误</li></ul></blockquote><h3 id="regex-findall-在-startindex-无效时快速失败" tabindex="-1"><code>Regex.findAll</code> 在 <code>startIndex</code> 无效时快速失败 <a class="header-anchor" href="#regex-findall-在-startindex-无效时快速失败" aria-label="Permalink to &quot;`Regex.findAll` 在 `startIndex` 无效时快速失败&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-28356" target="_blank" rel="noreferrer">KT-28356</a></p><p><strong>组件</strong>：kotlin-stdlib</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，<code>findAll</code> 将进行改进，以检测 <code>startIndex</code> 是否在进入 <code>findAll</code> 时输入字符序列的有效位置索引区间内，如果不在则抛出 <code>IndexOutOfBoundsException</code></p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改</li></ul></blockquote><h3 id="移除废弃的-kotlin-coroutines-experimental" tabindex="-1">移除废弃的 <code>kotlin.coroutines.experimental</code> <a class="header-anchor" href="#移除废弃的-kotlin-coroutines-experimental" aria-label="Permalink to &quot;移除废弃的 `kotlin.coroutines.experimental`&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-36083" target="_blank" rel="noreferrer">KT-36083</a></p><p><strong>组件</strong>：kotlin-stdlib</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，废弃的 <code>kotlin.coroutines.experimental</code> API 将从标准库中移除</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：<code>kotlin.coroutines.experimental</code> 已废弃，废弃级别为 <code>ERROR</code></li><li>&gt;= 1.4：<code>kotlin.coroutines.experimental</code> 从标准库中移除。在 JVM 上，提供了单独的兼容性构件（详见议题）。</li></ul></blockquote><h3 id="移除废弃的-mod-操作符" tabindex="-1">移除废弃的 <code>mod</code> 操作符 <a class="header-anchor" href="#移除废弃的-mod-操作符" aria-label="Permalink to &quot;移除废弃的 `mod` 操作符&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-26654" target="_blank" rel="noreferrer">KT-26654</a></p><p><strong>组件</strong>：kotlin-stdlib</p><p><strong>不兼容变更类型</strong>：源码</p><p><strong>简要概述</strong>：从 Kotlin 1.4 版开始，数值类型上的 <code>mod</code> 操作符将从标准库中移除</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：<code>mod</code> 已废弃，废弃级别为 <code>ERROR</code></li><li>&gt;= 1.4：<code>mod</code> 从标准库中移除</li></ul></blockquote><h3 id="隐藏-throwable-addsuppressed-成员-并优先使用扩展函数" tabindex="-1">隐藏 <code>Throwable.addSuppressed</code> 成员，并优先使用扩展函数 <a class="header-anchor" href="#隐藏-throwable-addsuppressed-成员-并优先使用扩展函数" aria-label="Permalink to &quot;隐藏 `Throwable.addSuppressed` 成员，并优先使用扩展函数&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-38777" target="_blank" rel="noreferrer">KT-38777</a></p><p><strong>组件</strong>：kotlin-stdlib</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：<code>Throwable.addSuppressed()</code> 扩展函数现在优先于 <code>Throwable.addSuppressed()</code> 成员函数</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：旧行为（详见议题）</li><li>&gt;= 1.4：行为已更改</li></ul></blockquote><h3 id="capitalize-应将双合字母转换为标题大小写" tabindex="-1"><code>capitalize</code> 应将双合字母转换为标题大小写 <a class="header-anchor" href="#capitalize-应将双合字母转换为标题大小写" aria-label="Permalink to &quot;`capitalize` 应将双合字母转换为标题大小写&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-38817" target="_blank" rel="noreferrer">KT-38817</a></p><p><strong>组件</strong>：kotlin-stdlib</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：<code>String.capitalize()</code> 函数现在将 <a href="https://en.wikipedia.org/wiki/Gaj%27s_Latin_alphabet" target="_blank" rel="noreferrer">塞尔维亚-克罗地亚语盖伊拉丁字母</a> 中的双合字母转换为标题大小写（<code>ǅ</code> 而不是 <code>Ǆ</code>）</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：双合字母转换为大写（<code>Ǆ</code>）</li><li>&gt;= 1.4：双合字母转换为标题大小写（<code>ǅ</code>）</li></ul></blockquote><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="windows-上带分隔符的编译器实参必须用双引号传递" tabindex="-1">Windows 上带分隔符的编译器实参必须用双引号传递 <a class="header-anchor" href="#windows-上带分隔符的编译器实参必须用双引号传递" aria-label="Permalink to &quot;Windows 上带分隔符的编译器实参必须用双引号传递&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-41309" target="_blank" rel="noreferrer">KT-41309</a></p><p><strong>组件</strong>：CLI</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：在 Windows 上，包含分隔符（空格、<code>=</code>、<code>;</code>、<code>,</code>）的 <code>kotlinc.bat</code> 实参现在需要双引号（<code>&quot;</code>）</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：所有编译器实参不带引号传递</li><li>&gt;= 1.4：包含分隔符（空格、<code>=</code>、<code>;</code>、<code>,</code>）的编译器实参需要双引号（<code>&quot;</code>）</li></ul></blockquote><h3 id="kapt-属性的合成-annotations-方法名称已更改" tabindex="-1">KAPT：属性的合成 <code>$annotations()</code> 方法名称已更改 <a class="header-anchor" href="#kapt-属性的合成-annotations-方法名称已更改" aria-label="Permalink to &quot;KAPT：属性的合成 `$annotations()` 方法名称已更改&quot;">​</a></h3><blockquote><p><strong>议题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-36926" target="_blank" rel="noreferrer">KT-36926</a></p><p><strong>组件</strong>：KAPT</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：KAPT 为属性生成的合成 <code>$annotations()</code> 方法名称在 1.4 版中已更改</p><p><strong>废弃周期</strong>：</p><ul><li>&lt; 1.4：属性的合成 <code>$annotations()</code> 方法名称遵循 <code>&lt;propertyName&gt;@annotations()</code> 模板</li><li>&gt;= 1.4：属性的合成 <code>$annotations()</code> 方法名称包含 <code>get</code> 前缀：<code>get&lt;PropertyName&gt;@annotations()</code></li></ul></blockquote>',95)]))}const h=t(a,[["render",l]]);export{u as __pageData,h as default};
