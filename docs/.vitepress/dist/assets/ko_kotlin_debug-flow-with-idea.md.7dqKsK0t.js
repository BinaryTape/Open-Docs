import{_ as k,a as r,b as h}from"./chunks/variable-optimised-out.gsL8I0ER.js";import{_ as d,a as g,b as c,c as E,d as u,e as y}from"./chunks/flow-debug-4.C9ixceil.js";import{_ as F,C as o,c as m,o as b,ag as l,j as i,a,G as t,w as n}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"IntelliJ IDEA를 사용하여 Kotlin Flow 디버그하기 – 튜토리얼","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/debug-flow-with-idea.md","filePath":"ko/kotlin/debug-flow-with-idea.md","lastUpdated":1754307826000}'),f={name:"ko/kotlin/debug-flow-with-idea.md"};function C(_,s,x,B,v,D){const e=o("tab"),p=o("tabs");return b(),m("div",null,[s[6]||(s[6]=l('<h1 id="intellij-idea를-사용하여-kotlin-flow-디버그하기-–-튜토리얼" tabindex="-1">IntelliJ IDEA를 사용하여 Kotlin Flow 디버그하기 – 튜토리얼 <a class="header-anchor" href="#intellij-idea를-사용하여-kotlin-flow-디버그하기-–-튜토리얼" aria-label="Permalink to &quot;IntelliJ IDEA를 사용하여 Kotlin Flow 디버그하기 – 튜토리얼&quot;">​</a></h1><p>이 튜토리얼은 IntelliJ IDEA를 사용하여 Kotlin Flow를 생성하고 디버그하는 방법을 보여줍니다.</p><p>이 튜토리얼은 <a href="/ko/kotlin/coroutines-guide">코루틴</a> 및 <a href="/ko/kotlin/flow#flows">Kotlin Flow</a> 개념에 대한 사전 지식이 있다고 가정합니다.</p><h2 id="kotlin-플로우-생성" tabindex="-1">Kotlin 플로우 생성 <a class="header-anchor" href="#kotlin-플로우-생성" aria-label="Permalink to &quot;Kotlin 플로우 생성&quot;">​</a></h2><p>느린 이미터와 느린 컬렉터를 사용하여 Kotlin <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flow.html" target="_blank" rel="noreferrer">플로우</a>를 생성합니다.</p>',5)),i("ol",null,[s[4]||(s[4]=i("li",null,[i("p",null,[a("IntelliJ IDEA에서 Kotlin 프로젝트를 엽니다. 프로젝트가 없다면, "),i("a",{href:"/ko/kotlin/jvm-get-started#create-a-project"},"프로젝트를 생성하세요"),a(".")])],-1)),i("li",null,[s[2]||(s[2]=i("p",null,[a("Gradle 프로젝트에서 "),i("code",null,"kotlinx.coroutines"),a(" 라이브러리를 사용하려면, 다음 의존성을 "),i("code",null,"build.gradle(.kts)"),a("에 추가하세요.")],-1)),t(p,{group:"build-script"},{default:n(()=>[t(e,{title:"코틀린","group-key":"kotlin"},{default:n(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"그루비","group-key":"groovy"},{default:n(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[3]||(s[3]=i("p",null,[a("다른 빌드 시스템의 경우, "),i("a",{href:"https://github.com/Kotlin/kotlinx.coroutines#using-in-your-projects",target:"_blank",rel:"noreferrer"},[i("code",null,"kotlinx.coroutines"),a(" README")]),a("에서 지침을 확인하세요.")],-1))]),s[5]||(s[5]=l(`<li><p><code>src/main/kotlin</code>에서 <code>Main.kt</code> 파일을 엽니다.</p><p><code>src</code> 디렉터리에는 Kotlin 소스 파일과 리소스가 포함되어 있습니다. <code>Main.kt</code> 파일은 <code>Hello World!</code>를 출력하는 샘플 코드를 포함합니다.</p></li><li><p>세 개의 숫자로 구성된 플로우를 반환하는 <code>simple()</code> 함수를 생성합니다.</p><ul><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html" target="_blank" rel="noreferrer"><code>delay()</code></a> 함수를 사용하여 CPU를 많이 사용하는 블로킹 코드를 모방합니다. 이 함수는 스레드를 블록하지 않고 100ms 동안 코루틴을 일시 중단합니다.</li><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow-collector/emit.html" target="_blank" rel="noreferrer"><code>emit()</code></a> 함수를 사용하여 <code>for</code> 루프에서 값을 생성합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.flow.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.system.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>main()</code> 함수 내 코드를 변경합니다.</p><ul><li>코루틴을 래핑하기 위해 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html" target="_blank" rel="noreferrer"><code>runBlocking()</code></a> 블록을 사용합니다.</li><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html" target="_blank" rel="noreferrer"><code>collect()</code></a> 함수를 사용하여 방출된 값을 수집합니다.</li><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html" target="_blank" rel="noreferrer"><code>delay()</code></a> 함수를 사용하여 CPU를 많이 사용하는 코드를 모방합니다. 이 함수는 스레드를 블록하지 않고 300ms 동안 코루틴을 일시 중단합니다.</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html" target="_blank" rel="noreferrer"><code>println()</code></a> 함수를 사용하여 플로우에서 수집된 값을 출력합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Build Project</strong>를 클릭하여 코드를 빌드합니다.</p><p><img src="`+k+'" alt="애플리케이션 빌드"></p></li>',4))]),s[7]||(s[7]=l('<h2 id="코루틴-디버그" tabindex="-1">코루틴 디버그 <a class="header-anchor" href="#코루틴-디버그" aria-label="Permalink to &quot;코루틴 디버그&quot;">​</a></h2><ol><li><p><code>emit()</code> 함수가 호출되는 줄에 중단점을 설정합니다.</p><p><img src="'+d+'" alt="콘솔 애플리케이션 빌드"></p></li><li><p>화면 상단의 실행 구성 옆에 있는 <strong>Debug</strong>를 클릭하여 디버그 모드로 코드를 실행합니다.</p><p><img src="'+r+'" alt="콘솔 애플리케이션 빌드"></p><p><strong>Debug</strong> 도구 창이 나타납니다:</p><ul><li><strong>Frames</strong> 탭에는 호출 스택이 포함됩니다.</li><li><strong>Variables</strong> 탭에는 현재 컨텍스트의 변수가 포함됩니다. 이는 플로우가 첫 번째 값을 방출하고 있음을 알려줍니다.</li><li><strong>Coroutines</strong> 탭에는 실행 중이거나 일시 중단된 코루틴에 대한 정보가 포함됩니다.</li></ul><p><img src="'+g+'" alt="코루틴 디버그"></p></li><li><p><strong>Debug</strong> 도구 창에서 <strong>Resume Program</strong>을 클릭하여 디버거 세션을 재개합니다. 프로그램이 동일한 중단점에서 멈춥니다.</p><p><img src="'+c+'" alt="코루틴 디버그"></p><p>이제 플로우가 두 번째 값을 방출합니다.</p><p><img src="'+E+'" alt="코루틴 디버그"></p></li></ol><h3 id="최적화되어-제거된-변수" tabindex="-1">최적화되어 제거된 변수 <a class="header-anchor" href="#최적화되어-제거된-변수" aria-label="Permalink to &quot;최적화되어 제거된 변수&quot;">​</a></h3><p><code>suspend</code> 함수를 사용하는 경우, 디버거에서 변수 이름 옆에 &quot;was optimized out&quot; 텍스트가 표시될 수 있습니다.</p><p><img src="'+h+`" alt="변수 &quot;a&quot;가 최적화되어 제거됨"></p><p>이 텍스트는 변수의 수명이 단축되어 해당 변수가 더 이상 존재하지 않음을 의미합니다. 최적화된 변수가 있는 코드를 디버그하는 것은 해당 변수의 값을 볼 수 없기 때문에 어렵습니다. <code>-Xdebug</code> 컴파일러 옵션을 사용하여 이 동작을 비활성화할 수 있습니다.</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><strong>프로덕션 환경에서는 이 플래그를 절대 사용하지 마세요</strong>: <code>-Xdebug</code>는 <a href="https://youtrack.jetbrains.com/issue/KT-48678/Coroutine-debugger-disable-was-optimised-out-compiler-feature#focus=Comments-27-6015585.0-0" target="_blank" rel="noreferrer">메모리 누수를 유발할 수 있습니다</a>.</p></div><h2 id="동시-실행-코루틴-추가" tabindex="-1">동시 실행 코루틴 추가 <a class="header-anchor" href="#동시-실행-코루틴-추가" aria-label="Permalink to &quot;동시 실행 코루틴 추가&quot;">​</a></h2><ol><li><p><code>src/main/kotlin</code>에서 <code>Main.kt</code> 파일을 엽니다.</p></li><li><p>이미터와 컬렉터를 동시적으로 실행하도록 코드를 개선합니다.</p><ul><li>이미터와 컬렉터를 동시적으로 실행하도록 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/buffer.html" target="_blank" rel="noreferrer"><code>buffer()</code></a> 함수 호출을 추가합니다. <code>buffer()</code>는 방출된 값을 저장하고 플로우 컬렉터를 별도의 코루틴에서 실행합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Build Project</strong>를 클릭하여 코드를 빌드합니다.</p></li></ol><h2 id="두-개의-코루틴으로-kotlin-플로우-디버그" tabindex="-1">두 개의 코루틴으로 Kotlin 플로우 디버그 <a class="header-anchor" href="#두-개의-코루틴으로-kotlin-플로우-디버그" aria-label="Permalink to &quot;두 개의 코루틴으로 Kotlin 플로우 디버그&quot;">​</a></h2><ol><li><p><code>println(value)</code>에 새 중단점을 설정합니다.</p></li><li><p>화면 상단의 실행 구성 옆에 있는 <strong>Debug</strong>를 클릭하여 디버그 모드로 코드를 실행합니다.</p><p><img src="`+u+'" alt="콘솔 애플리케이션 빌드"></p><p><strong>Debug</strong> 도구 창이 나타납니다.</p><p><strong>Coroutines</strong> 탭에서 두 개의 코루틴이 동시적으로 실행 중임을 확인할 수 있습니다. <code>buffer()</code> 함수 때문에 플로우 컬렉터와 이미터가 별도의 코루틴에서 실행됩니다. <code>buffer()</code> 함수는 플로우에서 방출된 값을 버퍼링합니다. 이미터 코루틴은 <strong>RUNNING</strong> 상태이고, 컬렉터 코루틴은 <strong>SUSPENDED</strong> 상태입니다.</p></li><li><p><strong>Debug</strong> 도구 창에서 <strong>Resume Program</strong>을 클릭하여 디버거 세션을 재개합니다.</p><p><img src="'+y+'" alt="코루틴 디버깅"></p><p>이제 컬렉터 코루틴은 <strong>RUNNING</strong> 상태이고, 이미터 코루틴은 <strong>SUSPENDED</strong> 상태입니다.</p><p>각 코루틴을 더 깊이 탐색하여 코드를 디버그할 수 있습니다.</p></li></ol>',11))])}const T=F(f,[["render",C]]);export{I as __pageData,T as default};
