import{_ as r,C as h,c as o,o as d,ag as l,j as s,G as n,a,w as t}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"kapt 编译器插件","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/kapt.md","filePath":"kotlin/kapt.md","lastUpdated":1754307826000}'),E={name:"kotlin/kapt.md"};function c(g,i,y,u,b,v){const e=h("tab"),p=h("tabs"),k=h("TopicTitle");return d(),o("div",null,[i[9]||(i[9]=l('<h1 id="kapt-编译器插件" tabindex="-1">kapt 编译器插件 <a class="header-anchor" href="#kapt-编译器插件" aria-label="Permalink to &quot;kapt 编译器插件&quot;">​</a></h1><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>kapt 处于维护模式。我们使其与最新的 Kotlin 和 Java 版本保持同步， 但没有计划实现新特性。请使用 <a href="/kotlin/ksp-overview">Kotlin 符号处理 API (KSP)</a> 进行注解处理。 <a href="/kotlin/ksp-overview#supported-libraries">请参见 KSP 支持的库列表</a>。</p></div><p>Kotlin 通过 <em>kapt</em> 编译器插件支持注解处理器（请参见 <a href="https://jcp.org/en/jsr/detail?id=269" target="_blank" rel="noreferrer">JSR 269</a>）。</p><p>简而言之，kapt 能够通过启用基于 Java 的注解处理，帮助您在 Kotlin 项目中使用 <a href="https://google.github.io/dagger/" target="_blank" rel="noreferrer">Dagger</a> 和 <a href="https://developer.android.com/topic/libraries/data-binding/index.html" target="_blank" rel="noreferrer">Data Binding</a> 等库。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您在使用 kapt 和 K2 编译器时遇到任何问题， 请向我们的 <a href="http://kotl.in/issue" target="_blank" rel="noreferrer">问题追踪器</a> 报告，并在您的 <code>gradle.properties</code> 文件中禁用 K2 模式： <code>kotlin kapt.use.k2=false </code></p></div><h2 id="在-gradle-中使用" tabindex="-1">在 Gradle 中使用 <a class="header-anchor" href="#在-gradle-中使用" aria-label="Permalink to &quot;在 Gradle 中使用&quot;">​</a></h2><p>要在 Gradle 中使用 kapt，请按照以下步骤操作：</p>',7)),s("ol",null,[s("li",null,[i[2]||(i[2]=s("p",null,[a("在您的构建脚本文件 "),s("code",null,"build.gradle(.kts)"),a(" 中应用 "),s("code",null,"kapt"),a(" Gradle 插件：")],-1)),n(p,{group:"build-script"},{default:t(()=>[n(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>i[0]||(i[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kapt"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>i[1]||(i[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlin.kapt"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),s("li",null,[i[5]||(i[5]=s("p",null,[a("在 "),s("code",null,"dependencies {}"),a(" 代码块中使用 "),s("code",null,"kapt"),a(" 配置添加相应的依赖项：")],-1)),n(p,{group:"build-script"},{default:t(()=>[n(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>i[3]||(i[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kapt"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"groupId:artifactId:version"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>i[4]||(i[4]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kapt "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'groupId:artifactId:version'")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i[6]||(i[6]=l('<li><p>如果您之前曾使用 <a href="https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html#annotationProcessor_config" target="_blank" rel="noreferrer">Android 对注解处理器的支持</a>，请将 <code>annotationProcessor</code> 配置的用法替换为 <code>kapt</code>。 如果您的项目包含 Java 类，<code>kapt</code> 也会处理它们。</p><p>如果您将注解处理器用于 <code>androidTest</code> 或 <code>test</code> 源代码，则相应的 <code>kapt</code> 配置名为 <code>kaptAndroidTest</code> 和 <code>kaptTest</code>。请注意，<code>kaptAndroidTest</code> 和 <code>kaptTest</code> 扩展了 <code>kapt</code>，因此您可以提供 <code>kapt</code> 依赖项，它将同时适用于生产源代码和测试。</p></li>',1))]),i[10]||(i[10]=l(`<h2 id="注解处理器实参" tabindex="-1">注解处理器实参 <a class="header-anchor" href="#注解处理器实参" aria-label="Permalink to &quot;注解处理器实参&quot;">​</a></h2><p>在您的构建脚本文件 <code>build.gradle(.kts)</code> 中使用 <code>arguments {}</code> 代码块将实参传递给注解处理器：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kapt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="gradle-构建缓存支持" tabindex="-1">Gradle 构建缓存支持 <a class="header-anchor" href="#gradle-构建缓存支持" aria-label="Permalink to &quot;Gradle 构建缓存支持&quot;">​</a></h2><p>kapt 注解处理任务默认在 <a href="https://guides.gradle.org/using-build-cache/" target="_blank" rel="noreferrer">Gradle 中缓存</a>。 然而，注解处理器可以运行任意代码，这可能无法可靠地将任务输入转换为输出， 或者可能访问和修改 Gradle 未追踪的文件。 如果构建中使用的注解处理器无法正确缓存， 您可以通过在构建脚本中指定 <code>useBuildCache</code> 属性来完全禁用 kapt 的缓存。 这有助于防止 kapt 任务出现误报的缓存命中：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    useBuildCache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="提高使用-kapt-的构建速度" tabindex="-1">提高使用 kapt 的构建速度 <a class="header-anchor" href="#提高使用-kapt-的构建速度" aria-label="Permalink to &quot;提高使用 kapt 的构建速度&quot;">​</a></h2><h3 id="并行运行-kapt-任务" tabindex="-1">并行运行 kapt 任务 <a class="header-anchor" href="#并行运行-kapt-任务" aria-label="Permalink to &quot;并行运行 kapt 任务&quot;">​</a></h3><p>为了提高使用 kapt 的构建速度，您可以为 kapt 任务启用 <a href="https://guides.gradle.org/using-the-worker-api/" target="_blank" rel="noreferrer">Gradle Worker API</a>。 使用 Worker API 可以让 Gradle 并行运行单个项目中独立的注解处理任务， 这在某些情况下能显著缩短执行时间。</p><p>当您在 Kotlin Gradle 插件中使用<a href="/kotlin/gradle-configure-project#gradle-java-toolchains-support">自定义 JDK 主目录</a>特性时， kapt 任务 Worker 仅使用<a href="https://docs.gradle.com/current/userguide/worker_api.html#changing_the_isolation_mode" target="_blank" rel="noreferrer">进程隔离模式</a>。 请注意，<code>kapt.workers.isolation</code> 属性会被忽略。</p><p>如果您想为 kapt Worker 进程提供额外的 JVM 实参，请使用 <code>KaptWithoutKotlincTask</code> 的输入 <code>kaptProcessJvmArgs</code>：</p>`,11)),n(p,{group:"build-script"},{default:t(()=>[n(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>i[7]||(i[7]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"internal"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KaptWithoutKotlincTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        kaptProcessJvmArgs."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"add"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx512m"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),n(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>i[8]||(i[8]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.internal.KaptWithoutKotlincTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        kaptProcessJvmArgs"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"add("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'-Xmx512m'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),n(k,{id:"注解处理器类加载器的缓存",level:"3",title:"注解处理器类加载器的缓存",labelRef:"experimental-general"}),i[11]||(i[11]=l(`<p>注解处理器类加载器的缓存有助于 kapt 在您连续运行多个 Gradle 任务时更快地执行。</p><p>要启用此特性，请在您的 <code>gradle.properties</code> 文件中使用以下属性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span># 任何正值都会启用缓存</span></span>
<span class="line"><span># 使用与使用 kapt 的模块数量相同的值</span></span>
<span class="line"><span>kapt.classloaders.cache.size=5</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 禁用此项才能使缓存生效</span></span>
<span class="line"><span>kapt.include.compile.classpath=false</span></span></code></pre></div><p>如果您遇到注解处理器缓存的任何问题，请禁用它们的缓存：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 指定注解处理器的完整名称以禁用它们的缓存</span></span>
<span class="line"><span>kapt.classloaders.cache.disableForProcessors=[annotation processors full names]</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您遇到此特性相关的任何问题， 我们非常感谢您在 <a href="https://youtrack.jetbrains.com/issue/KT-28901" target="_blank" rel="noreferrer">YouTrack</a> 中提供反馈。</p></div><h3 id="测量注解处理器的性能" tabindex="-1">测量注解处理器的性能 <a class="header-anchor" href="#测量注解处理器的性能" aria-label="Permalink to &quot;测量注解处理器的性能&quot;">​</a></h3><p>要获取注解处理器执行的性能统计信息，请使用 <code>-Kapt-show-processor-timings</code> 插件选项。 示例输出：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Kapt Annotation Processing performance report:</span></span>
<span class="line"><span>com.example.processor.TestingProcessor: total: 133 ms, init: 36 ms, 2 round(s): 97 ms, 0 ms</span></span>
<span class="line"><span>com.example.processor.AnotherProcessor: total: 100 ms, init: 6 ms, 1 round(s): 93 ms</span></span></code></pre></div><p>您可以使用插件选项 <a href="https://github.com/JetBrains/kotlin/pull/4280" target="_blank" rel="noreferrer"><code>-Kapt-dump-processor-timings</code> (<code>org.jetbrains.kotlin.kapt3:dumpProcessorTimings</code>)</a> 将此报告转储到文件中。 以下命令将运行 kapt 并将统计信息转储到 <code>ap-perf-report.file</code> 文件中：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -cp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $MY_CLASSPATH </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xplugin=kotlin-annotation-processing-SNAPSHOT.jar </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-P</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugin:org.jetbrains.kotlin.kapt3:aptMode=stubsAndApt,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugin:org.jetbrains.kotlin.kapt3:apclasspath=processor/build/libs/processor.jar,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugin:org.jetbrains.kotlin.kapt3:dumpProcessorTimings=ap-perf-report.file </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xplugin=$JAVA_HOME/lib/tools.jar </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-d </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cli-tests/out</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-no-jdk </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-no-reflect</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -no-stdlib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -verbose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sample/src/main/</span></span></code></pre></div><h3 id="测量注解处理器生成的文件数量" tabindex="-1">测量注解处理器生成的文件数量 <a class="header-anchor" href="#测量注解处理器生成的文件数量" aria-label="Permalink to &quot;测量注解处理器生成的文件数量&quot;">​</a></h3><p><code>kapt</code> Gradle 插件可以报告每个注解处理器生成的文件的数量统计信息。</p><p>这有助于追踪构建中是否包含了任何未使用的注解处理器。 您可以使用生成的报告来查找触发不必要注解处理器的模块，并更新这些模块以避免这种情况。</p><p>要启用统计信息报告：</p><ol><li><p>在您的 <code>build.gradle(.kts)</code> 中将 <code>showProcessorStats</code> 属性值设置为 <code>true</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kapt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    showProcessorStats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>在您的 <code>gradle.properties</code> 中将 <code>kapt.verbose</code> Gradle 属性设置为 <code>true</code>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kapt.verbose=true</span></span></code></pre></div></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您也可以使用<a href="#use-in-cli">命令行选项 <code>verbose</code></a> 启用详细输出。</p></div><p>统计信息以 <code>info</code> 级别出现在日志中。 您会看到 <code>Annotation processor stats:</code> 行，其后是每个注解处理器的执行时间统计信息。 在这些行之后，是 <code>Generated files report:</code> 行，其后是每个注解处理器生成的文件的数量统计信息。例如：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[INFO] Annotation processor stats:</span></span>
<span class="line"><span>[INFO] org.mapstruct.ap.MappingProcessor: total: 290 ms, init: 1 ms, 3 round(s): 289 ms, 0 ms, 0 ms</span></span>
<span class="line"><span>[INFO] Generated files report:</span></span>
<span class="line"><span>[INFO] org.mapstruct.ap.MappingProcessor: total sources: 2, sources per round: 2, 0, 0</span></span></code></pre></div><h2 id="kapt-的编译规避" tabindex="-1">kapt 的编译规避 <a class="header-anchor" href="#kapt-的编译规避" aria-label="Permalink to &quot;kapt 的编译规避&quot;">​</a></h2><p>为了缩短 kapt 增量构建的时间，它可以使用 Gradle 的<a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_compile_avoidance" target="_blank" rel="noreferrer">编译规避</a>。 启用编译规避后，Gradle 可以在重建项目时跳过注解处理。具体来说，注解 处理在以下情况下会跳过：</p><ul><li>项目的源文件未更改。</li><li>依赖项中的更改是 <a href="https://en.wikipedia.org/wiki/Application_binary_interface" target="_blank" rel="noreferrer">ABI</a> 兼容的。 例如，唯一的更改仅在方法体中。</li></ul><p>但是，编译规避不能用于在编译类路径中发现的注解处理器，因为它们的_任何更改_都需要运行注解处理任务。</p><p>要使用编译规避运行 kapt：</p><ul><li><p><a href="#use-in-gradle">手动将注解处理器依赖项添加到 <code>kapt*</code> 配置中</a>。</p></li><li><p>在 <code>gradle.properties</code> 文件中关闭在编译类路径中发现注解处理器：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kapt.include.compile.classpath=false</span></span></code></pre></div></li></ul><h2 id="增量注解处理" tabindex="-1">增量注解处理 <a class="header-anchor" href="#增量注解处理" aria-label="Permalink to &quot;增量注解处理&quot;">​</a></h2><p>kapt 默认支持增量注解处理。 目前，注解处理仅当所有使用的注解处理器都是增量式时才能实现增量。</p><p>要禁用增量注解处理，请将此行添加到您的 <code>gradle.properties</code> 文件中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kapt.incremental.apt=false</span></span></code></pre></div><p>请注意，增量注解处理也要求启用<a href="/kotlin/gradle-compilation-and-caches#incremental-compilation">增量编译</a>。</p><h2 id="从超配置继承注解处理器" tabindex="-1">从超配置继承注解处理器 <a class="header-anchor" href="#从超配置继承注解处理器" aria-label="Permalink to &quot;从超配置继承注解处理器&quot;">​</a></h2><p>您可以在独立的 Gradle 配置中定义一组通用的注解处理器作为超配置，并在您的子项目的 kapt 特有配置中进一步扩展它。</p><p>例如，对于使用 <a href="https://dagger.dev/" target="_blank" rel="noreferrer">Dagger</a> 的子项目，请在您的 <code>build.gradle(.kts)</code> 文件中使用以下配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonAnnotationProcessors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configurations.creating</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configurations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kapt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extendsFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonAnnotationProcessors) }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.dagger:dagger:2.48.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    commonAnnotationProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.dagger:dagger-compiler:2.48.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此示例中，<code>commonAnnotationProcessors</code> Gradle 配置是您希望用于所有项目的通用注解处理超配置。您使用 <a href="https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.Configuration.html#org.gradle.api.artifacts.Configuration:extendsFrom" target="_blank" rel="noreferrer"><code>extendsFrom()</code></a> 方法将 <code>commonAnnotationProcessors</code> 添加为超配置。kapt 发现 <code>commonAnnotationProcessors</code> Gradle 配置具有对 Dagger 注解处理器的依赖项。 因此，kapt 在其注解处理配置中包含了 Dagger 注解处理器。</p><h2 id="java-编译器选项" tabindex="-1">Java 编译器选项 <a class="header-anchor" href="#java-编译器选项" aria-label="Permalink to &quot;Java 编译器选项&quot;">​</a></h2><p>kapt 使用 Java 编译器来运行注解处理器。 以下是您可以将任意选项传递给 javac 的方法：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    javacOptions {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 增加注解处理器的最大错误计数。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 默认值为 100。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        option(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xmaxerrs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="不存在类型修正" tabindex="-1">不存在类型修正 <a class="header-anchor" href="#不存在类型修正" aria-label="Permalink to &quot;不存在类型修正&quot;">​</a></h2><p>一些注解处理器（例如 <code>AutoFactory</code>）依赖于声明签名中的精确类型。 默认情况下，kapt 会将每个未知类型（包括生成类的类型）替换为 <code>NonExistentClass</code>，但您可以更改此行为。 将该选项添加到 <code>build.gradle(.kts)</code> 文件中，以在存根中启用错误类型推断：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    correctErrorTypes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="在-maven-中使用" tabindex="-1">在 Maven 中使用 <a class="header-anchor" href="#在-maven-中使用" aria-label="Permalink to &quot;在 Maven 中使用&quot;">​</a></h2><p>在 <code>compile</code> 之前添加 kotlin-maven-plugin 中 <code>kapt</code> 目标的执行：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;kapt&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;kapt&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 如果为插件启用扩展，可以跳过 &lt;goals&gt; 元素 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;src/main/kotlin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;src/main/java&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPaths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            &lt;!-- 在此处指定您的注解处理器 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.google.dagger&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;dagger-compiler&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2.9&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPaths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>要配置注解处理级别，请在 <code>&lt;configuration&gt;</code> 代码块中将以下之一设置为 <code>aptMode</code>：</p><ul><li><code>stubs</code> – 仅生成注解处理所需的存根。</li><li><code>apt</code> – 仅运行注解处理。</li><li><code>stubsAndApt</code> – （默认）生成存根并运行注解处理。</li></ul><p>例如：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">aptMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;stubs&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">aptMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="在-intellij-构建系统中使用" tabindex="-1">在 IntelliJ 构建系统中使用 <a class="header-anchor" href="#在-intellij-构建系统中使用" aria-label="Permalink to &quot;在 IntelliJ 构建系统中使用&quot;">​</a></h2><p>IntelliJ IDEA 自己的构建系统不支持 kapt。每当您想重新运行注解处理时，请从“Maven Projects”工具栏启动构建。</p><h2 id="在命令行界面中使用" tabindex="-1">在命令行界面中使用 <a class="header-anchor" href="#在命令行界面中使用" aria-label="Permalink to &quot;在命令行界面中使用&quot;">​</a></h2><p>kapt 编译器插件在 Kotlin 编译器的二进制发行版中可用。</p><p>您可以通过使用 <code>Xplugin</code> kotlinc 选项提供插件 JAR 文件的路径来附加插件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xplugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$KOTLIN_HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/lib/kotlin-annotation-processing.jar</span></span></code></pre></div><p>以下是可用选项的列表：</p><ul><li><code>sources</code> （<em>必填</em>）：生成文件的输出路径。</li><li><code>classes</code> （<em>必填</em>）：生成类文件和资源的输出路径。</li><li><code>stubs</code> （<em>必填</em>）：存根文件的输出路径。换句话说，是某个临时目录。</li><li><code>incrementalData</code>：二进制存根的输出路径。</li><li><code>apclasspath</code> （<em>可重复</em>）：注解处理器 JAR 的路径。根据您拥有的 JAR 数量传递相应数量的 <code>apclasspath</code> 选项。</li><li><code>apoptions</code>：注解处理器选项的 Base64 编码列表。有关更多信息，请参见 <a href="#ap-javac-options-encoding">AP/javac 选项编码</a>。</li><li><code>javacArguments</code>：传递给 javac 的选项的 Base64 编码列表。有关更多信息，请参见 <a href="#ap-javac-options-encoding">AP/javac 选项编码</a>。</li><li><code>processors</code>：逗号分隔的注解处理器限定类名列表。如果指定，kapt 不会尝试在 <code>apclasspath</code> 中查找注解处理器。</li><li><code>verbose</code>：启用详细输出。</li><li><code>aptMode</code> （<em>必填</em>） <ul><li><code>stubs</code> – 仅生成注解处理所需的存根。</li><li><code>apt</code> – 仅运行注解处理。</li><li><code>stubsAndApt</code> – 生成存根并运行注解处理。</li></ul></li><li><code>correctErrorTypes</code>：有关更多信息，请参见<a href="#non-existent-type-correction">不存在类型修正</a>。默认禁用。</li><li><code>dumpFileReadHistory</code>：为每个文件转储注解处理期间使用的类列表的输出路径。</li></ul><p>插件选项格式为：<code>-P plugin:&lt;plugin id&gt;:&lt;key&gt;=&lt;value&gt;</code>。选项可以重复。</p><p>示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:sources=build/kapt/sources</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:classes=build/kapt/classes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:stubs=build/kapt/stubs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/ap.jar</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/anotherAp.jar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:correctErrorTypes=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h2 id="生成-kotlin-源代码" tabindex="-1">生成 Kotlin 源代码 <a class="header-anchor" href="#生成-kotlin-源代码" aria-label="Permalink to &quot;生成 Kotlin 源代码&quot;">​</a></h2><p>kapt 可以生成 Kotlin 源代码。只需将生成的 Kotlin 源文件写入由 <code>processingEnv.options[&quot;kapt.kotlin.generated&quot;]</code> 指定的目录，这些文件将与主源代码一起编译。</p><p>请注意，kapt 不支持对生成的 Kotlin 文件进行多轮处理。</p><h2 id="ap-javac-选项编码" tabindex="-1">AP/Javac 选项编码 <a class="header-anchor" href="#ap-javac-选项编码" aria-label="Permalink to &quot;AP/Javac 选项编码&quot;">​</a></h2><p><code>apoptions</code> 和 <code>javacArguments</code> 命令行界面选项接受编码的选项映射。 以下是您可以自行编码选项的方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encodeList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ByteArrayOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjectOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.size)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((key, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options.entries) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="保留-java-编译器的注解处理器" tabindex="-1">保留 Java 编译器的注解处理器 <a class="header-anchor" href="#保留-java-编译器的注解处理器" aria-label="Permalink to &quot;保留 Java 编译器的注解处理器&quot;">​</a></h2><p>默认情况下，kapt 运行所有注解处理器并禁用 javac 的注解处理。 然而，您可能需要某些 javac 的注解处理器正常工作（例如，<a href="https://projectlombok.org/" target="_blank" rel="noreferrer">Lombok</a>）。</p><p>在 Gradle 构建文件中，使用 <code>keepJavacAnnotationProcessors</code> 选项：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keepJavacAnnotationProcessors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果您使用 Maven，则需要指定具体的插件设置。 请参见 <a href="/kotlin/lombok#using-with-kapt">Lombok 编译器插件设置示例</a>。</p>`,70))])}const C=r(E,[["render",c]]);export{m as __pageData,C as default};
