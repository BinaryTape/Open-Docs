import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"Koin 어노테이션에서의 스코프","description":"","frontmatter":{"title":"Koin 어노테이션에서의 스코프"},"headers":[],"relativePath":"ko/koin/reference/koin-annotations/scope.md","filePath":"ko/koin/reference/koin-annotations/scope.md","lastUpdated":1748365453000}'),p={name:"ko/koin/reference/koin-annotations/scope.md"};function t(l,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="koin-어노테이션에서의-스코프" tabindex="-1">Koin 어노테이션에서의 스코프 <a class="header-anchor" href="#koin-어노테이션에서의-스코프" aria-label="Permalink to &quot;Koin 어노테이션에서의 스코프&quot;">​</a></h1><p>정의(definition)와 모듈(module)을 사용할 때, 특정 영역과 시점의 의존성 해결을 위해 스코프를 정의해야 할 수 있습니다.</p><h2 id="scope로-스코프-정의하기" tabindex="-1">@Scope로 스코프 정의하기 <a class="header-anchor" href="#scope로-스코프-정의하기" aria-label="Permalink to &quot;@Scope로 스코프 정의하기&quot;">​</a></h2><p>Koin은 스코프를 사용할 수 있도록 합니다. 기본 개념에 대한 자세한 내용은 <a href="/ko/koin/reference/koin-core/scopes">Koin 스코프</a> 섹션을 참조하세요.</p><p>어노테이션으로 스코프를 선언하려면 다음처럼 클래스에 <code>@Scope</code> 어노테이션을 사용하면 됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopeClass</span></span></code></pre></div><blockquote><p>이는 다음 스코프 섹션과 동일합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></blockquote><p>또는 타입 대신 스코프 이름이 더 필요한 경우, <code>name</code> 파라미터를 사용하여 클래스에 <code>@Scope(name = )</code> 어노테이션을 지정해야 합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopeClass</span></span></code></pre></div><blockquote><p>이는 다음 코드와 동일합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_scope_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;)&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></blockquote><h2 id="scoped로-스코프에-정의-추가하기" tabindex="-1">@Scoped로 스코프에 정의 추가하기 <a class="header-anchor" href="#scoped로-스코프에-정의-추가하기" aria-label="Permalink to &quot;@Scoped로 스코프에 정의 추가하기&quot;">​</a></h2><p>스코프 내부에 정의를 선언하려면(어노테이션으로 정의되었든 아니든), 클래스에 <code>@Scope</code> 및 <code>@Scoped</code> 어노테이션을 지정하기만 하면 됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopedComponent</span></span></code></pre></div><p>이는 스코프 섹션 내부에 적절한 정의를 생성합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_scope_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;)&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  scoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>필요한 스코프 공간(<code>@Scope</code> 사용)과 정의할 컴포넌트의 종류(<code>@Scoped</code> 사용)를 나타내기 위해 두 어노테이션이 모두 필요합니다.</p></div><h2 id="스코프로부터의-의존성-해결" tabindex="-1">스코프로부터의 의존성 해결 <a class="header-anchor" href="#스코프로부터의-의존성-해결" aria-label="Permalink to &quot;스코프로부터의 의존성 해결&quot;">​</a></h2><p>스코프가 지정된 정의에서 내부 스코프와 상위 스코프의 어떤 정의든 해결할 수 있습니다.</p><p>예를 들어, 다음 경우는 작동합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySingle</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySingle : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MySingle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myOtherScopedComponent :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyOtherScopedComponent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyOtherScopedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySingle : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MySingle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>MySingle</code> 컴포넌트는 루트(root)에 <code>single</code> 정의로 선언되어 있습니다. <code>MyScopedComponent</code>와 <code>MyOtherScopedComponent</code>는 &quot;my_scope_name&quot; 스코프에 정의되어 있습니다. <code>MyScopedComponent</code>로부터의 의존성 해결은 <code>MySingle</code> 인스턴스를 통해 Koin 루트에 접근하며, 현재 &quot;my_scope_name&quot; 스코프에서 <code>MyOtherScopedComponent</code> 스코프 내 인스턴스에 접근합니다.</p><h2 id="scopeid로-스코프-외부에서-해결하기-1-3-0부터" tabindex="-1">@ScopeId로 스코프 외부에서 해결하기 (1.3.0부터) <a class="header-anchor" href="#scopeid로-스코프-외부에서-해결하기-1-3-0부터" aria-label="Permalink to &quot;@ScopeId로 스코프 외부에서 해결하기 (1.3.0부터)&quot;">​</a></h2><p>현재 스코프에서 직접 접근할 수 없는 다른 스코프에서 컴포넌트를 해결해야 할 수 있습니다. 이를 위해 의존성에 <code>@ScopeId</code> 어노테이션을 지정하여 Koin에게 주어진 스코프 ID를 가진 스코프에서 이 의존성을 찾도록 지시해야 합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Factory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  @ScopeId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_scope_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myScopedComponent :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopedComponent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>위 코드는 다음 생성된 코드와 동일합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Myfactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_scope_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) }</span></span></code></pre></div><p>이 예제는 <code>MyFactory</code> 컴포넌트가 &quot;my_scope_id&quot; ID를 가진 스코프 인스턴스에서 <code>MyScopedComponent</code> 컴포넌트를 해결할 것임을 보여줍니다. 이 &quot;my_scope_id&quot; ID로 생성된 스코프는 올바른 스코프 정의로 생성되어야 합니다.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>MyScopedComponent</code> 컴포넌트는 스코프 섹션에 정의되어야 하며, 스코프 인스턴스는 &quot;my_scope_id&quot; ID로 생성되어야 합니다.</p></div>`,28)]))}const g=i(p,[["render",t]]);export{r as __pageData,g as default};
