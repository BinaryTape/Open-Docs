import{_ as i,a as n,b as p}from"./chunks/compose-hot-reload-hello.B2T097lK.js";import{_ as o}from"./chunks/gradle-sync.fCQp85Nh.js";import{_ as h}from"./chunks/compose-hot-reload-gutter-run.m_A5v9gh.js";import{_ as r,C as a,c as k,o as d,G as t,ag as c}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-hot-reload.md","filePath":"ko/kmp/compose-hot-reload.md","lastUpdated":1755516278000}'),g={name:"ko/kmp/compose-hot-reload.md"};function E(m,s,u,y,C,b){const e=a("TopicTitle"),l=a("primary-label");return d(),k("div",null,[t(e,{labelRef:"alpha",title:"Compose 핫 리로드"}),t(l,{ref:"alpha"},null,512),s[0]||(s[0]=c('<p><a href="https://github.com/JetBrains/compose-hot-reload" target="_blank" rel="noreferrer">Compose 핫 리로드</a>는 Compose Multiplatform 프로젝트에서 작업하는 동안 UI 변경 사항을 시각화하고 실험하는 데 도움을 줍니다.</p><p>현재 Compose 핫 리로드는 멀티플랫폼 프로젝트에 데스크톱 타겟을 포함할 때만 사용할 수 있습니다. JetBrains는 향후 다른 타겟에 대한 지원 추가를 검토 중입니다. 그 동안 데스크톱 앱을 샌드박스(sandbox)로 사용하면 작업 흐름을 방해하지 않고 공통 코드의 UI 변경 사항을 빠르게 실험할 수 있습니다.</p><p><img src="'+i+'" alt="Compose Hot Reload" width="500"></p><h2 id="프로젝트에-compose-핫-리로드-추가하기" tabindex="-1">프로젝트에 Compose 핫 리로드 추가하기 <a class="header-anchor" href="#프로젝트에-compose-핫-리로드-추가하기" aria-label="Permalink to &quot;프로젝트에 Compose 핫 리로드 추가하기&quot;">​</a></h2><p>Compose 핫 리로드는 다음 두 가지 방법으로 추가할 수 있습니다.</p><ul><li><a href="#from-scratch">IntelliJ IDEA 또는 Android Studio에서 프로젝트를 처음부터 생성</a></li><li><a href="#to-an-existing-project">기존 프로젝트에 Gradle 플러그인으로 추가</a></li></ul><h3 id="처음부터" tabindex="-1">처음부터 <a class="header-anchor" href="#처음부터" aria-label="Permalink to &quot;처음부터&quot;">​</a></h3><p>이 섹션에서는 IntelliJ IDEA 및 Android Studio에서 데스크톱 타겟이 있는 멀티플랫폼 프로젝트를 생성하는 단계를 안내합니다. 프로젝트가 생성되면 Compose 핫 리로드가 자동으로 추가됩니다.</p><ol><li><a href="./quickstart">빠른 시작</a>에서 <a href="./quickstart#set-up-the-environment">Kotlin Multiplatform 개발 환경 설정</a> 지침을 완료합니다.</li><li>IntelliJ IDEA에서 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>를 선택합니다.</li><li>왼쪽 패널에서 <strong>Kotlin Multiplatform</strong>을 선택합니다.</li><li><strong>새 프로젝트</strong> 창에서 <strong>Name</strong>, <strong>Group</strong>, <strong>Artifact</strong> 필드를 지정합니다.</li><li><strong>Desktop</strong> 타겟을 선택하고 <strong>Create</strong>를 클릭합니다. <img src="'+n+`" alt="Create multiplatform project with desktop target" width="700"></li></ol><h3 id="기존-프로젝트에-추가하기" tabindex="-1">기존 프로젝트에 추가하기 <a class="header-anchor" href="#기존-프로젝트에-추가하기" aria-label="Permalink to &quot;기존 프로젝트에 추가하기&quot;">​</a></h3><p>이 섹션에서는 기존 멀티플랫폼 프로젝트에 Compose 핫 리로드를 추가하는 단계를 안내합니다. 이 단계는 <a href="./compose-multiplatform-create-first-app">공유 로직 및 UI로 앱 생성</a> 튜토리얼의 프로젝트를 참조합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>최신 버전의 Compose 핫 리로드를 찾으려면 <a href="https://github.com/JetBrains/compose-hot-reload/releases" target="_blank" rel="noreferrer">Releases</a>를 참조하세요.</p></div><ol><li><p>프로젝트에서 버전 카탈로그(version catalog)를 업데이트합니다. <code>gradle/libs.versions.toml</code>에 다음 코드를 추가합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">composeHotReload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.compose.hot-reload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composeHotReload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>프로젝트 전체의 의존성을 중앙에서 관리하기 위해 버전 카탈로그를 사용하는 방법에 대해 더 알아보려면 <a href="https://kotlinlang.org/gradle-best-practices.html" target="_blank" rel="noreferrer">Gradle 모범 사례</a>를 참조하세요.</p></blockquote></li><li><p>상위 프로젝트의 <code>build.gradle.kts</code>(<code>ComposeDemo/build.gradle.kts</code>)에 다음 코드를 <code>plugins {}</code> 블록에 추가합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.composeHotReload) apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이렇게 하면 Compose 핫 리로드 플러그인이 각 서브프로젝트에서 여러 번 로드되는 것을 방지합니다.</p></li><li><p>멀티플랫폼 애플리케이션을 포함하는 서브프로젝트의 <code>build.gradle.kts</code>(<code>ComposeDemo/composeApp/build.gradle.kts</code>)에 다음 코드를 <code>plugins {}</code> 블록에 추가합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.composeHotReload)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Compose 핫 리로드의 모든 기능을 사용하려면 프로젝트가 향상된 클래스 재정의(redefinition)를 지원하는 OpenJDK 포크(fork)인 <a href="https://github.com/JetBrains/JetBrainsRuntime" target="_blank" rel="noreferrer">JetBrains Runtime</a>(JBR)에서 실행되어야 합니다. Compose 핫 리로드는 프로젝트에 호환 가능한 JBR을 자동으로 프로비저닝(provision)할 수 있습니다. 이를 허용하려면 다음 Gradle 플러그인을 <code>settings.gradle.kts</code> 파일에 추가합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.gradle.toolchains.foojay-resolver-convention&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.10.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Gradle 변경 사항 동기화</strong> 버튼을 클릭하여 Gradle 파일을 동기화합니다. <img src="`+o+`" alt="Synchronize Gradle files" width="50"></p></li></ol><h2 id="compose-핫-리로드-사용하기" tabindex="-1">Compose 핫 리로드 사용하기 <a class="header-anchor" href="#compose-핫-리로드-사용하기" aria-label="Permalink to &quot;Compose 핫 리로드 사용하기&quot;">​</a></h2><ol><li><p><code>desktopMain</code> 디렉터리에서 <code>main.kt</code> 파일을 열고 <code>main()</code> 함수를 업데이트합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        onCloseRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exitApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        alwaysOnTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composedemo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>alwaysOnTop</code> 변수를 <code>true</code>로 설정하면 생성된 데스크톱 앱이 모든 창 위에 유지되어 코드를 편집하고 변경 사항을 실시간으로 확인하기가 더 쉬워집니다.</p></li><li><p><code>commonMain</code> 디렉터리에서 <code>App.kt</code> 파일을 열고 <code>Button</code> 컴포저블(composable)을 업데이트합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">showContent }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이제 버튼의 텍스트는 <code>greet()</code> 함수에 의해 제어됩니다.</p></li><li><p><code>commonMain</code> 디렉터리에서 <code>Greeting.kt</code> 파일을 열고 <code>greet()</code> 함수를 업데이트합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div></li><li><p><code>desktopMain</code> 디렉터리에서 <code>main.kt</code> 파일을 열고 거터(gutter)에 있는 <strong>Run</strong> 아이콘을 클릭합니다. **Run &#39;composeApp [desktop]&#39; with Compose Hot Reload (Alpha)**를 선택합니다.</p><p><img src="`+h+'" alt="Run Compose Hot Reload from gutter" width="350"></p><p><img src="'+p+'" alt="First Compose Hot Reload on desktop app" width="500"></p></li><li><p><code>greet()</code> 함수에서 반환되는 문자열을 업데이트한 다음, 파일을 저장하여 데스크톱 앱이 자동으로 업데이트되는 것을 확인합니다.</p><p><img src="'+i+'" alt="Compose Hot Reload" width="500"></p></li></ol><p>축하합니다! Compose 핫 리로드가 작동하는 것을 확인했습니다. 이제 변경할 때마다 데스크톱 실행 구성을 다시 시작할 필요 없이 텍스트, 이미지, 서식, UI 구조 등을 변경하면서 실험할 수 있습니다.</p><h2 id="도움-받기" tabindex="-1">도움 받기 <a class="header-anchor" href="#도움-받기" aria-label="Permalink to &quot;도움 받기&quot;">​</a></h2><p>Compose 핫 리로드를 사용하는 동안 문제가 발생하면 <a href="https://github.com/JetBrains/compose-hot-reload/issues" target="_blank" rel="noreferrer">GitHub 이슈를 생성하여</a> 알려주십시오.</p>',18))])}const A=r(g,[["render",E]]);export{B as __pageData,A as default};
