import{_ as k,a as r,b as d,c as E,d as o,e as g,f as c,g as y,h as F,i as u,j as C,k as b,l as B,m as D,n as A,o as m,p as v,q as f,r as q,s as T}from"./chunks/time-comparison.B6DZdO43.js";import{_,C as e,c as x,o as R,ag as n,j as i,G as l,a,w as t}from"./chunks/framework.Bksy39di.js";const V=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/coroutines-and-channels.md","filePath":"zh-Hant/kotlin/coroutines-and-channels.md","lastUpdated":1754307826000}'),S={name:"zh-Hant/kotlin/coroutines-and-channels.md"};function I(P,s,U,L,w,N){const p=e("def"),h=e("deflist");return R(),x("div",null,[s[4]||(s[4]=n('<h1 id="協程與通道-−-教程" tabindex="-1">協程與通道 − 教程 <a class="header-anchor" href="#協程與通道-−-教程" aria-label="Permalink to &quot;協程與通道 − 教程&quot;">​</a></h1><p>在本教程中，您將學習如何在 IntelliJ IDEA 中使用協程執行網路請求，而不會阻塞底層執行緒或回呼。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>不需要事先了解協程，但您需要熟悉 Kotlin 基本語法。</p></div><p>您將學習：</p><ul><li>為何以及如何使用暫停函式來執行網路請求。</li><li>如何使用協程並發地傳送請求。</li><li>如何使用通道在不同的協程之間共享資訊。</li></ul><p>對於網路請求，您將需要 <a href="https://square.github.io/retrofit/" target="_blank" rel="noreferrer">Retrofit</a> 函式庫，但本教程中所示的方法對於任何其他支援協程的函式庫也同樣適用。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>您可以在 <a href="http://github.com/kotlin-hands-on/intro-coroutines" target="_blank" rel="noreferrer">專案的儲存庫</a> 的 <code>solutions</code> 分支上找到所有任務的解決方案。</p></div><h2 id="開始之前" tabindex="-1">開始之前 <a class="header-anchor" href="#開始之前" aria-label="Permalink to &quot;開始之前&quot;">​</a></h2><ol><li><p>下載並安裝最新版本的 <a href="https://www.jetbrains.com/idea/download/index.html" target="_blank" rel="noreferrer">IntelliJ IDEA</a>。</p></li><li><p>在歡迎畫面選擇 <strong>Get from VCS</strong> 或選擇 <strong>File | New | Project from Version Control</strong> 來複製 <a href="http://github.com/kotlin-hands-on/intro-coroutines" target="_blank" rel="noreferrer">專案範本</a>。</p><p>您也可以從命令列複製：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/kotlin-hands-on/intro-coroutines</span></span></code></pre></div></li></ol><h3 id="產生-github-開發者權杖" tabindex="-1">產生 GitHub 開發者權杖 <a class="header-anchor" href="#產生-github-開發者權杖" aria-label="Permalink to &quot;產生 GitHub 開發者權杖&quot;">​</a></h3><p>您將在專案中使用 GitHub API。要取得存取權限，請提供您的 GitHub 帳戶名稱以及密碼或權杖。如果您啟用了雙因素驗證，則僅使用權杖就足夠了。</p><p>透過 <a href="https://github.com/settings/tokens/new" target="_blank" rel="noreferrer">您的帳戶</a> 產生一個新的 GitHub 權杖以使用 GitHub API：</p><ol><li><p>指定權杖的名稱，例如 <code>coroutines-tutorial</code>：</p><p><img src="'+o+'" alt="產生新的 GitHub 權杖" width="700"></p></li><li><p>不要選擇任何 Scope。點擊頁面底部的 <strong>Generate token</strong>。</p></li><li><p>複製產生的權杖。</p></li></ol><h3 id="執行程式碼" tabindex="-1">執行程式碼 <a class="header-anchor" href="#執行程式碼" aria-label="Permalink to &quot;執行程式碼&quot;">​</a></h3><p>該程式會載入給定組織（預設為「kotlin」）下所有儲存庫的貢獻者。稍後您將添加邏輯，根據貢獻數量對使用者進行排序。</p><ol><li><p>開啟 <code>src/contributors/main.kt</code> 檔案並執行 <code>main()</code> 函式。您將看到以下視窗：</p><p><img src="'+g+`" alt="第一個視窗" width="500"></p><p>如果字體太小，請透過更改 <code>main()</code> 函式中 <code>setDefaultFontSize(18f)</code> 的值來調整它。</p></li><li><p>在相應欄位中提供您的 GitHub 使用者名稱和權杖（或密碼）。</p></li><li><p>確保在 <em>Variant</em> 下拉選單中選擇了 <em>BLOCKING</em> 選項。</p></li><li><p>點擊 <em>Load contributors</em>。UI 應該會凍結一段時間，然後顯示貢獻者列表。</p></li><li><p>開啟程式輸出，確保資料已載入。每次成功請求後都會記錄貢獻者列表。</p></li></ol><p>有不同的方法可以實現此邏輯：使用<a href="#blocking-requests">阻塞請求</a>或<a href="#callbacks">回呼</a>。您將比較這些解決方案與使用<a href="#coroutines">協程</a>的解決方案，並了解<a href="#channels">通道</a>如何用於在不同協程之間共享資訊。</p><h2 id="阻塞請求" tabindex="-1">阻塞請求 <a class="header-anchor" href="#阻塞請求" aria-label="Permalink to &quot;阻塞請求&quot;">​</a></h2><p>您將使用 <a href="https://square.github.io/retrofit/" target="_blank" rel="noreferrer">Retrofit</a> 函式庫來對 GitHub 執行 HTTP 請求。它允許請求給定組織下的儲存庫列表以及每個儲存庫的貢獻者列表：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GitHubService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;orgs/{org}/repos?per_page=100&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getOrgReposCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) org: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Repo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;repos/{owner}/{repo}/contributors?per_page=100&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRepoContributorsCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;owner&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) owner: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;repo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) repo: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此 API 由 <code>loadContributorsBlocking()</code> 函式使用，用於取得給定組織的貢獻者列表。</p><ol><li><p>開啟 <code>src/tasks/Request1Blocking.kt</code> 查看其實現：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GitHubService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    req: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrgReposCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">also</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logRepos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, it) } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { repo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRepoContributorsCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org, repo.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()                                   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">also</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(repo, it) }                 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()                                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>首先，您取得給定組織下的儲存庫列表並將其儲存在 <code>repos</code> 列表中。然後對於每個儲存庫，請求貢獻者列表，並將所有列表合併為一個最終的貢獻者列表。</li><li><code>getOrgReposCall()</code> 和 <code>getRepoContributorsCall()</code> 都會回傳 <code>*Call</code> 類別的實例（<code>#1</code>）。此時，尚未傳送任何請求。</li><li>然後調用 <code>*Call.execute()</code> 以執行請求（<code>#2</code>）。<code>execute()</code> 是一個同步呼叫，它會阻塞底層執行緒。</li><li>當您收到回應時，透過呼叫特定的 <code>logRepos()</code> 和 <code>logUsers()</code> 函式來記錄結果（<code>#3</code>）。如果 HTTP 回應包含錯誤，此錯誤將在此處記錄。</li><li>最後，取得回應的主體，其中包含您需要的資料。對於本教程，如果發生錯誤，您將使用空列表作為結果，並記錄相應的錯誤（<code>#4</code>）。</li></ul></li><li><p>為了避免重複 <code>.body() ?: emptyList()</code>，聲明了一個擴充函式 <code>bodyList()</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>再次執行程式並查看 IntelliJ IDEA 中的系統輸出。它應該類似於：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1770 [AWT-EventQueue-0] INFO  Contributors - kotlin: loaded 40 repos</span></span>
<span class="line"><span>2025 [AWT-EventQueue-0] INFO  Contributors - kotlin-examples: loaded 23 contributors</span></span>
<span class="line"><span>2229 [AWT-EventQueue-0] INFO  Contributors - kotlin-koans: loaded 45 contributors</span></span>
<span class="line"><span>...</span></span></code></pre></div><ul><li>每行的第一個項目是自程式啟動以來經過的毫秒數，然後是方括號中的執行緒名稱。您可以看到載入請求是從哪個執行緒呼叫的。</li><li>每行的最後一個項目是實際訊息：載入了多少個儲存庫或貢獻者。</li></ul><p>此日誌輸出表明所有結果都是從主執行緒記錄的。當您使用 <em>BLOCKING</em> 選項執行程式碼時，視窗會凍結並且在載入完成之前不會對輸入做出反應。所有請求都是從呼叫 <code>loadContributorsBlocking()</code> 的同一個執行緒執行，該執行緒是主 UI 執行緒（在 Swing 中，它是 AWT 事件分發執行緒）。此主執行緒被阻塞，這就是 UI 凍結的原因：</p><p><img src="`+c+`" alt="被阻塞的主執行緒" width="700"></p><p>貢獻者列表載入後，結果會更新。</p></li><li><p>在 <code>src/contributors/Contributors.kt</code> 中，找到負責選擇如何載入貢獻者的 <code>loadContributors()</code> 函式，並查看 <code>loadContributorsBlocking()</code> 的呼叫方式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSelectedVariant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    BLOCKING </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Blocking UI thread</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(service, req)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        updateResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users, startTime)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>updateResults()</code> 呼叫緊隨 <code>loadContributorsBlocking()</code> 呼叫之後。</li><li><code>updateResults()</code> 會更新 UI，因此它必須始終從 UI 執行緒呼叫。</li><li>由於 <code>loadContributorsBlocking()</code> 也從 UI 執行緒呼叫，UI 執行緒被阻塞，UI 凍結。</li></ul></li></ol><h3 id="任務-1" tabindex="-1">任務 1 <a class="header-anchor" href="#任務-1" aria-label="Permalink to &quot;任務 1&quot;">​</a></h3><p>第一個任務可協助您熟悉任務領域。目前，每個貢獻者的名稱會重複數次，每個他們參與的專案重複一次。實作 <code>aggregate()</code> 函式以組合使用者，使每個貢獻者只被新增一次。<code>User.contributions</code> 屬性應包含該使用者對<strong>所有</strong>專案的總貢獻數量。結果列表應根據貢獻數量以降序排序。</p><p>開啟 <code>src/tasks/Aggregation.kt</code> 並實作 <code>List&lt;User&gt;.aggregate()</code> 函式。使用者應依其總貢獻數排序。</p><p>對應的測試檔案 <code>test/tasks/AggregationKtTest.kt</code> 顯示了一個預期結果的範例。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>您可以使用 <a href="https://www.jetbrains.com/help/idea/create-tests.html#test-code-navigation" target="_blank" rel="noreferrer">IntelliJ IDEA 捷徑</a> <code>Ctrl+Shift+T</code> / <code>⇧ ⌘ T</code> 在原始碼和測試類別之間自動跳轉。</p></div><p>完成此任務後，&quot;kotlin&quot; 組織的結果列表應類似於以下內容：</p><p><img src="`+y+'" alt="“kotlin”組織的列表" width="500"></p>',29)),s[5]||(s[5]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任務-1-的解決方案",tabindex:"-1"},[a("任務 1 的解決方案 "),i("a",{class:"header-anchor",href:"#任務-1-的解決方案","aria-label":'Permalink to "任務 1 的解決方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[6]||(s[6]=n(`<ol><li><p>要按登入名分組使用者，請使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/group-by.html" target="_blank" rel="noreferrer"><code>groupBy()</code></a>，它會回傳一個從登入名到該登入名使用者在不同儲存庫中所有出現次數的 Map。</p></li><li><p>對於每個 Map 項目，計算每個使用者的總貢獻數，並透過給定的名稱和總貢獻數建立 <code>User</code> 類別的新實例。</p></li><li><p>將結果列表降序排序：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    groupBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.login }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { (login, group) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(login, group.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sumOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.contributions }) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortedByDescending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.contributions }</span></span></code></pre></div></li></ol><p>另一種解決方案是使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/grouping-by.html" target="_blank" rel="noreferrer"><code>groupingBy()</code></a> 函式而非 <code>groupBy()</code>。</p><h2 id="回呼" tabindex="-1">回呼 <a class="header-anchor" href="#回呼" aria-label="Permalink to &quot;回呼&quot;">​</a></h2><p>之前的解決方案有效，但它會阻塞執行緒，因此會凍結 UI。避免這種情況的傳統方法是使用 <em>回呼</em>。</p><p>您可以將在操作完成後應立即呼叫的程式碼提取到一個單獨的回呼中（通常是 Lambda 運算式），並將該 Lambda 傳遞給呼叫者，以便稍後呼叫它。</p><p>為了使 UI 保持響應，您可以將整個計算移至單獨的執行緒，或切換到使用回呼而非阻塞呼叫的 Retrofit API。</p><h3 id="使用背景執行緒" tabindex="-1">使用背景執行緒 <a class="header-anchor" href="#使用背景執行緒" aria-label="Permalink to &quot;使用背景執行緒&quot;">​</a></h3><ol><li><p>開啟 <code>src/tasks/Request2Background.kt</code> 並查看其實現。首先，整個計算被移動到一個不同的執行緒。<code>thread()</code> 函式會啟動一個新的執行緒：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    loadContributorsBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(service, req)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>現在所有載入都已移至單獨的執行緒，主執行緒是空閒的，可以被其他任務佔用：</p><p><img src="`+F+`" alt="空閒的主執行緒" width="700"></p></li><li><p><code>loadContributorsBackground()</code> 函式的簽名會更改。它將 <code>updateResults()</code> 回呼作為最後一個參數，以便在所有載入完成後呼叫它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsBackground</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GitHubService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, req: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    updateResults: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>現在，當呼叫 <code>loadContributorsBackground()</code> 時，<code>updateResults()</code> 呼叫會進入回呼，而不是像以前那樣立即執行：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadContributorsBackground</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(service, req) { users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SwingUtilities.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invokeLater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        updateResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users, startTime)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>透過呼叫 <code>SwingUtilities.invokeLater</code>，您可以確保 <code>updateResults()</code> 呼叫（它會更新結果）發生在主 UI 執行緒（AWT 事件分派執行緒）上。</p></li></ol><p>然而，如果您嘗試透過 <code>BACKGROUND</code> 選項載入貢獻者，您可能會看到列表已更新但沒有任何變化。</p><h3 id="任務-2" tabindex="-1">任務 2 <a class="header-anchor" href="#任務-2" aria-label="Permalink to &quot;任務 2&quot;">​</a></h3><p>修復 <code>src/tasks/Request2Background.kt</code> 中的 <code>loadContributorsBackground()</code> 函式，以便在 UI 中顯示結果列表。</p>`,11)),s[7]||(s[7]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任務-2-的解決方案",tabindex:"-1"},[a("任務 2 的解決方案 "),i("a",{class:"header-anchor",href:"#任務-2-的解決方案","aria-label":'Permalink to "任務 2 的解決方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[8]||(s[8]=n(`<p>如果您嘗試載入貢獻者，您可以在日誌中看到貢獻者已載入但未顯示結果。要解決此問題，請在結果使用者列表上呼叫 <code>updateResults()</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updateResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadContributorsBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(service, req))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>請務必明確呼叫回呼中傳遞的邏輯。否則，什麼都不會發生。</p><h3 id="使用-retrofit-回呼-api" tabindex="-1">使用 Retrofit 回呼 API <a class="header-anchor" href="#使用-retrofit-回呼-api" aria-label="Permalink to &quot;使用 Retrofit 回呼 API&quot;">​</a></h3><p>在先前的解決方案中，整個載入邏輯都移至背景執行緒，但這仍然不是對資源的最佳利用。所有載入請求都按順序進行，並且在等待載入結果時執行緒被阻塞，而此時它本可以被其他任務佔用。具體而言，執行緒可以開始載入另一個請求以更早地接收整個結果。</p><p>每個儲存庫的資料處理應分為兩部分：載入和處理結果回應。第二個 <em>處理</em> 部分應提取到回呼中。</p><p>然後，可以在收到先前儲存庫的結果（並呼叫相應的回呼）之前啟動每個儲存庫的載入：</p><p><img src="`+u+`" alt="使用回呼 API" width="700"></p><p>Retrofit 回呼 API 可以幫助實現這一點。<code>Call.enqueue()</code> 函式會啟動一個 HTTP 請求並將回呼作為參數。在此回呼中，您需要指定每個請求完成後需要做什麼。</p><p>開啟 <code>src/tasks/Request3Callbacks.kt</code> 並查看使用此 API 的 <code>loadContributorsCallbacks()</code> 實作：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsCallbacks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GitHubService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, req: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    updateResults: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrgReposCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { responseRepos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // #1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        logRepos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, responseRepos)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responseRepos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (repo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRepoContributorsCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org, repo.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { responseUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // #2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    logUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(repo, responseUsers)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responseUsers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    allUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // TODO: Why doesn&#39;t this code work? How to fix that?</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        updateResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(allUsers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><ul><li>為方便起見，此程式碼片段使用了在同一個檔案中宣告的 <code>onResponse()</code> 擴充函式。它接受一個 Lambda 作為參數，而不是一個物件表達式。</li><li>處理回應的邏輯被提取到回呼中：相應的 Lambda 從 <code>#1</code> 和 <code>#2</code> 行開始。</li></ul><p>然而，提供的解決方案不起作用。如果您執行程式並選擇 <em>CALLBACKS</em> 選項載入貢獻者，您會看到沒有任何顯示。但是，<code>Request3CallbacksKtTest</code> 中的測試會立即回傳成功通過的結果。</p><p>思考一下為什麼給定的程式碼沒有按預期工作，並嘗試修復它，或者查看下面的解決方案。</p><h3 id="任務-3-可選" tabindex="-1">任務 3 (可選) <a class="header-anchor" href="#任務-3-可選" aria-label="Permalink to &quot;任務 3 (可選)&quot;">​</a></h3><p>重寫 <code>src/tasks/Request3Callbacks.kt</code> 檔案中的程式碼，以便顯示載入的貢獻者列表。</p>`,16)),s[9]||(s[9]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任務-3-的第一次嘗試解決方案",tabindex:"-1"},[a("任務 3 的第一次嘗試解決方案 "),i("a",{class:"header-anchor",href:"#任務-3-的第一次嘗試解決方案","aria-label":'Permalink to "任務 3 的第一次嘗試解決方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[10]||(s[10]=n(`<p>在目前的解決方案中，許多請求並發啟動，這減少了總載入時間。但是，結果並未載入。這是因為 <code>updateResults()</code> 回呼在所有載入請求啟動後立即呼叫，而 <code>allUsers</code> 列表尚未填入資料。</p><p>您可以嘗試透過以下更改來修復此問題：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((index, repo) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRepoContributorsCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org, repo.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { responseUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            logUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(repo, responseUsers)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responseUsers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            allUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos.lastIndex) {    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                updateResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(allUsers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>首先，您會遍歷帶有索引的儲存庫列表（<code>#1</code>）。</li><li>然後，從每個回呼中，檢查它是否是最後一次迭代（<code>#2</code>）。</li><li>如果是這樣，則更新結果。</li></ul><p>然而，這段程式碼也未能實現我們的目標。請自行尋找答案，或查看下面的解決方案。</p>`,5)),s[11]||(s[11]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任務-3-的第二次嘗試解決方案",tabindex:"-1"},[a("任務 3 的第二次嘗試解決方案 "),i("a",{class:"header-anchor",href:"#任務-3-的第二次嘗試解決方案","aria-label":'Permalink to "任務 3 的第二次嘗試解決方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[12]||(s[12]=n(`<p>由於載入請求是並發啟動的，因此無法保證最後一個請求的結果是最後一個到達的。結果可以以任何順序到達。</p><p>因此，如果您將目前索引與 <code>lastIndex</code> 作為完成條件進行比較，則可能會丟失某些儲存庫的結果。</p><p>如果處理最後一個儲存庫的請求比某些先前請求返回得更快（這很可能發生），則所有耗時較長的請求的結果都將丟失。</p><p>一種修復方法是引入一個索引並檢查是否已處理所有儲存庫：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Collections.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">synchronizedList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numberOfProcessed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AtomicInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (repo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRepoContributorsCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org, repo.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { responseUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            logUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(repo, responseUsers)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responseUsers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            allUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (numberOfProcessed.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">incrementAndGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos.size) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                updateResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(allUsers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此程式碼使用列表的同步版本和 <code>AtomicInteger()</code>，因為一般來說，不能保證處理 <code>getRepoContributors()</code> 請求的不同回呼將始終從同一個執行緒呼叫。</p>`,6)),s[13]||(s[13]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任務-3-的第三次嘗試解決方案",tabindex:"-1"},[a("任務 3 的第三次嘗試解決方案 "),i("a",{class:"header-anchor",href:"#任務-3-的第三次嘗試解決方案","aria-label":'Permalink to "任務 3 的第三次嘗試解決方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[14]||(s[14]=n(`<p>一個更好的解決方案是使用 <code>CountDownLatch</code> 類別。它儲存一個計數器，該計數器以儲存庫數量初始化。處理每個儲存庫後，此計數器會遞減。然後它會等到計數器歸零後再更新結果：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> countDownLatch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CountDownLatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(repos.size)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (repo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRepoContributorsCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org, repo.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { responseUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // processing repository</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            countDownLatch.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countDown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">countDownLatch.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(allUsers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>然後從主執行緒更新結果。這比將邏輯委派給子執行緒更直接。</p><p>在審查了這三種解決方案嘗試後，您會發現使用回呼編寫正確的程式碼並非易事且容易出錯，尤其是在涉及多個底層執行緒和同步的情況下。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>作為額外練習，您可以使用 RxJava 函式庫以響應式方法實作相同的邏輯。所有必要的依賴項和使用 RxJava 的解決方案都可以在單獨的 <code>rx</code> 分支中找到。也可以完成本教程並實作或檢查建議的 Rx 版本以進行適當比較。</p></div><h2 id="暫停函式" tabindex="-1">暫停函式 <a class="header-anchor" href="#暫停函式" aria-label="Permalink to &quot;暫停函式&quot;">​</a></h2><p>您可以使用暫停函式實作相同的邏輯。不是回傳 <code>Call&lt;List&lt;Repo&gt;&gt;</code>，而是將 API 呼叫定義為<a href="/zh-Hant/kotlin/composing-suspending-functions">暫停函式</a>，如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GitHubService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;orgs/{org}/repos?per_page=100&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getOrgRepos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) org: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Repo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>getOrgRepos()</code> 被定義為 <code>suspend</code> 函式。當您使用暫停函式執行請求時，底層執行緒不會被阻塞。有關其工作原理的更多詳細資訊將在後續章節中介紹。</li><li><code>getOrgRepos()</code> 直接回傳結果，而不是回傳 <code>Call</code>。如果結果不成功，則會拋出異常。</li></ul><p>或者，Retrofit 允許回傳包裝在 <code>Response</code> 中的結果。在這種情況下，會提供結果主體，並且可以手動檢查錯誤。本教程使用回傳 <code>Response</code> 的版本。</p><p>在 <code>src/contributors/GitHubService.kt</code> 中，將以下宣告添加到 <code>GitHubService</code> 介面：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GitHubService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // getOrgReposCall &amp; getRepoContributorsCall declarations</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;orgs/{org}/repos?per_page=100&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getOrgRepos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) org: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Repo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;repos/{owner}/{repo}/contributors?per_page=100&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getRepoContributors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;owner&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) owner: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;repo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) repo: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="任務-4" tabindex="-1">任務 4 <a class="header-anchor" href="#任務-4" aria-label="Permalink to &quot;任務 4&quot;">​</a></h3><p>您的任務是更改載入貢獻者的函式程式碼，以利用兩個新的暫停函式 <code>getOrgRepos()</code> 和 <code>getRepoContributors()</code>。新的 <code>loadContributorsSuspend()</code> 函式被標記為 <code>suspend</code> 以使用新的 API。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>暫停函式不能隨處呼叫。從 <code>loadContributorsBlocking()</code> 呼叫暫停函式將導致錯誤，訊息為「Suspend function &#39;getOrgRepos&#39; should be called only from a coroutine or another suspend function」。</p></div><ol><li>將定義在 <code>src/tasks/Request1Blocking.kt</code> 中的 <code>loadContributorsBlocking()</code> 實作複製到定義在 <code>src/tasks/Request4Suspend.kt</code> 中的 <code>loadContributorsSuspend()</code>。</li><li>修改程式碼，以便使用新的暫停函式，而不是回傳 <code>Call</code> 的函式。</li><li>選擇 <em>SUSPEND</em> 選項執行程式，並確保在執行 GitHub 請求時 UI 仍然保持響應。</li></ol>`,16)),s[15]||(s[15]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任務-4-的解決方案",tabindex:"-1"},[a("任務 4 的解決方案 "),i("a",{class:"header-anchor",href:"#任務-4-的解決方案","aria-label":'Permalink to "任務 4 的解決方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[16]||(s[16]=n(`<p>將 <code>.getOrgReposCall(req.org).execute()</code> 替換為 <code>.getOrgRepos(req.org)</code>，並對第二個「貢獻者」請求重複相同的替換：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsSuspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(service: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GitHubService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, req: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrgRepos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">also</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logRepos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { repo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRepoContributors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org, repo.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">also</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(repo, it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>loadContributorsSuspend()</code> 應該被定義為一個 <code>suspend</code> 函式。</li><li>您不再需要呼叫 <code>execute</code>（它之前回傳 <code>Response</code>），因為現在 API 函式直接回傳 <code>Response</code>。請注意，此細節特定於 Retrofit 函式庫。對於其他函式庫，API 會有所不同，但概念是相同的。</li></ul><h2 id="協程" tabindex="-1">協程 <a class="header-anchor" href="#協程" aria-label="Permalink to &quot;協程&quot;">​</a></h2><p>使用暫停函式的程式碼看起來與「阻塞」版本相似。與阻塞版本的主要區別在於，協程不是阻塞執行緒，而是被暫停：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>阻塞 -&gt; 暫停</span></span>
<span class="line"><span>執行緒 -&gt; 協程</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>協程通常被稱為輕量級執行緒，因為您可以在協程上執行程式碼，類似於您在執行緒上執行程式碼的方式。以前會阻塞（並且必須避免）的操作現在可以改為暫停協程。</p></div><h3 id="啟動新的協程" tabindex="-1">啟動新的協程 <a class="header-anchor" href="#啟動新的協程" aria-label="Permalink to &quot;啟動新的協程&quot;">​</a></h3><p>如果您查看 <code>loadContributorsSuspend()</code> 在 <code>src/contributors/Contributors.kt</code> 中的使用方式，您會看到它是在 <code>launch</code> 內部呼叫的。<code>launch</code> 是一個接受 Lambda 作為參數的函式庫函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsSuspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updateResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users, startTime)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在這裡，<code>launch</code> 啟動一個新的計算，負責載入資料並顯示結果。該計算是可暫停的——當執行網路請求時，它會被暫停並釋放底層執行緒。當網路請求回傳結果時，計算會恢復。</p><p>這種可暫停的計算稱為 <em>協程</em>。因此，在這種情況下，<code>launch</code> <em>啟動了一個新的協程</em>，負責載入資料並顯示結果。</p><p>協程在執行緒之上執行並且可以被暫停。當協程被暫停時，相應的計算會暫停，從執行緒中移除，並儲存在記憶體中。同時，執行緒可以自由地被其他任務佔用：</p><p><img src="`+C+'" alt="暫停協程" width="700"></p><p>當計算準備好繼續時，它會被回傳到一個執行緒（不一定是同一個）。</p><p>在 <code>loadContributorsSuspend()</code> 範例中，每個「貢獻者」請求現在都使用暫停機制等待結果。首先，發送新的請求。然後，在等待回應的同時，由 <code>launch</code> 函式啟動的整個「載入貢獻者」協程被暫停。</p><p>協程僅在收到相應回應後才恢復：</p><p><img src="'+b+`" alt="暫停請求" width="700"></p><p>當回應等待接收時，執行緒可以自由地被其他任務佔用。UI 保持響應，儘管所有請求都在主 UI 執行緒上進行：</p><ol><li><p>使用 <em>SUSPEND</em> 選項執行程式。日誌確認所有請求都已傳送到主 UI 執行緒：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>2538 [AWT-EventQueue-0 @coroutine#1] INFO  Contributors - kotlin: loaded 30 repos</span></span>
<span class="line"><span>2729 [AWT-EventQueue-0 @coroutine#1] INFO  Contributors - ts2kt: loaded 11 contributors</span></span>
<span class="line"><span>3029 [AWT-EventQueue-0 @coroutine#1] INFO  Contributors - kotlin-koans: loaded 45 contributors</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>11252 [AWT-EventQueue-0 @coroutine#1] INFO  Contributors - kotlin-coroutines-workshop: loaded 1 contributors</span></span></code></pre></div></li><li><p>日誌可以顯示相應程式碼正在哪個協程上執行。要啟用它，請開啟 <strong>Run | Edit configurations</strong> 並添加 <code>-Dkotlinx.coroutines.debug</code> VM 選項：</p><p><img src="`+B+`" alt="編輯執行組態" width="500"></p><p>當 <code>main()</code> 以此選項執行時，協程名稱將附加到執行緒名稱。您也可以修改用於執行所有 Kotlin 檔案的範本並預設啟用此選項。</p></li></ol><p>現在所有程式碼都在一個協程上執行，即上面提到的「載入貢獻者」協程，表示為 <code>@coroutine#1</code>。在等待結果時，您不應該重複利用該執行緒來發送其他請求，因為程式碼是按順序編寫的。只有在收到前一個結果後才會發送新的請求。</p><p>暫停函式公平對待執行緒，不會「等待」而阻塞它。然而，這尚未帶來任何並發性。</p><h2 id="並發" tabindex="-1">並發 <a class="header-anchor" href="#並發" aria-label="Permalink to &quot;並發&quot;">​</a></h2><p>Kotlin 協程比執行緒所需的資源少得多。每次您想要異步啟動新計算時，都可以改為建立一個新的協程。</p><p>要啟動一個新的協程，請使用主要的 <em>協程建構器</em> 之一：<code>launch</code>、<code>async</code> 或 <code>runBlocking</code>。不同的函式庫可以定義額外的協程建構器。</p><p><code>async</code> 啟動一個新的協程並回傳一個 <code>Deferred</code> 物件。<code>Deferred</code> 代表一個在其他名稱中也已知的概念，例如 <code>Future</code> 或 <code>Promise</code>。它儲存一個計算，但它會 <em>延遲</em> 您取得最終結果的時刻；它 <em>承諾</em> 未來某個時候的結果。</p><p><code>async</code> 和 <code>launch</code> 的主要區別在於 <code>launch</code> 用於啟動預期不會回傳特定結果的計算。<code>launch</code> 會回傳一個表示該協程的 <code>Job</code>。可以透過呼叫 <code>Job.join()</code> 來等待它完成。</p><p><code>Deferred</code> 是一種擴展 <code>Job</code> 的泛型型別。<code>async</code> 呼叫可以回傳 <code>Deferred&lt;Int&gt;</code> 或 <code>Deferred&lt;CustomType&gt;</code>，具體取決於 Lambda 回傳的內容（Lambda 內的最後一個表達式是結果）。</p><p>要取得協程的結果，您可以呼叫 <code>Deferred</code> 實例上的 <code>await()</code>。在等待結果時，呼叫此 <code>await()</code> 的協程會被暫停：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deferred: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Deferred</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        loadData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;waiting...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deferred.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;loading...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;loaded!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>runBlocking</code> 用作常規函式與暫停函式之間，或阻塞世界與非阻塞世界之間的橋樑。它作為啟動頂層主協程的轉接器。它主要用於 <code>main()</code> 函式和測試。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>觀看<a href="https://www.youtube.com/watch?v=zEZc5AmHQhk" target="_blank" rel="noreferrer">此影片</a>以更好地了解協程。</p></div><p>如果有一個 <code>Deferred</code> 物件列表，您可以呼叫 <code>awaitAll()</code> 來等待所有物件的結果：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deferreds: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Deferred</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000L</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Loading </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            it</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deferreds.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awaitAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$sum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>當每個「貢獻者」請求在新的協程中啟動時，所有請求都會異步啟動。可以在收到前一個請求的結果之前發送新的請求：</p><p><img src="`+D+'" alt="並發協程" width="700"></p><p>總載入時間與 <em>CALLBACKS</em> 版本大致相同，但它不需要任何回呼。更重要的是，<code>async</code> 明確強調程式碼中哪些部分是並發執行的。</p><h3 id="任務-5" tabindex="-1">任務 5 <a class="header-anchor" href="#任務-5" aria-label="Permalink to &quot;任務 5&quot;">​</a></h3><p>在 <code>Request5Concurrent.kt</code> 檔案中，使用先前的 <code>loadContributorsSuspend()</code> 函式實作 <code>loadContributorsConcurrent()</code> 函式。</p>',39)),s[17]||(s[17]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任務-5-的提示",tabindex:"-1"},[a("任務 5 的提示 "),i("a",{class:"header-anchor",href:"#任務-5-的提示","aria-label":'Permalink to "任務 5 的提示 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[18]||(s[18]=n(`<p>您只能在協程作用域內啟動新的協程。將 <code>loadContributorsSuspend()</code> 中的內容複製到 <code>coroutineScope</code> 呼叫中，以便您可以在其中呼叫 <code>async</code> 函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsConcurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GitHubService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    req: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> coroutineScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您的解決方案應基於以下方案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deferreds: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Deferred</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { repo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // load contributors for each repo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">deferreds.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awaitAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// List&lt;List&lt;User&gt;&gt;</span></span></code></pre></div>`,4)),s[19]||(s[19]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任務-5-的解決方案",tabindex:"-1"},[a("任務 5 的解決方案 "),i("a",{class:"header-anchor",href:"#任務-5-的解決方案","aria-label":'Permalink to "任務 5 的解決方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[20]||(s[20]=n(`<p>將每個「貢獻者」請求用 <code>async</code> 包裝起來，以建立與儲存庫數量一樣多的協程。<code>async</code> 回傳 <code>Deferred&lt;List&lt;User&gt;&gt;</code>。這不是問題，因為建立新的協程對資源消耗不大，所以您可以建立任意數量的協程。</p><ol><li><p>您不能再使用 <code>flatMap</code>，因為 <code>map</code> 的結果現在是一個 <code>Deferred</code> 物件列表，而不是一個列表的列表。<code>awaitAll()</code> 回傳 <code>List&lt;List&lt;User&gt;&gt;</code>，因此呼叫 <code>flatten().aggregate()</code> 以取得結果：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsConcurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GitHubService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    req: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> coroutineScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrgRepos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">also</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logRepos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deferreds: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Deferred</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { repo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRepoContributors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org, repo.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">also</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(repo, it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deferreds.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awaitAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>執行程式碼並檢查日誌。所有協程仍然在主 UI 執行緒上執行，因為尚未採用多執行緒，但您已經可以看到並發執行協程的好處。</p></li><li><p>要更改此程式碼以在常用執行緒池中於不同執行緒上執行「貢獻者」協程，請將 <code>Dispatchers.Default</code> 指定為 <code>async</code> 函式的上下文參數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.Default) { }</span></span></code></pre></div><ul><li><code>CoroutineDispatcher</code> 決定相應的協程應在哪個執行緒或哪些執行緒上執行。如果您不指定一個作為參數，<code>async</code> 將使用外部作用域中的調度器。</li><li><code>Dispatchers.Default</code> 代表 JVM 上執行緒的共享池。此池提供了一種並行執行的手段。它包含與可用 CPU 核心數量一樣多的執行緒，但如果只有一個核心，它仍然會有兩個執行緒。</li></ul></li><li><p>修改 <code>loadContributorsConcurrent()</code> 函式中的程式碼，以在常用執行緒池中的不同執行緒上啟動新的協程。此外，在傳送請求之前添加額外日誌：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.Default) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;starting loading for \${repo.name}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRepoContributors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org, repo.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">also</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(repo, it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>再次執行程式。在日誌中，您可以看到每個協程都可以在執行緒池中的一個執行緒上啟動並在另一個執行緒上恢復：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1946 [DefaultDispatcher-worker-2 @coroutine#4] INFO  Contributors - starting loading for kotlin-koans</span></span>
<span class="line"><span>1946 [DefaultDispatcher-worker-3 @coroutine#5] INFO  Contributors - starting loading for dokka</span></span>
<span class="line"><span>1946 [DefaultDispatcher-worker-1 @coroutine#3] INFO  Contributors - starting loading for ts2kt</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>2178 [DefaultDispatcher-worker-1 @coroutine#4] INFO  Contributors - kotlin-koans: loaded 45 contributors</span></span>
<span class="line"><span>2569 [DefaultDispatcher-worker-1 @coroutine#5] INFO  Contributors - dokka: loaded 36 contributors</span></span>
<span class="line"><span>2821 [DefaultDispatcher-worker-2 @coroutine#3] INFO  Contributors - ts2kt: loaded 11 contributors</span></span></code></pre></div><p>例如，在此日誌摘錄中，<code>coroutine#4</code> 在 <code>worker-2</code> 執行緒上啟動，並在 <code>worker-1</code> 執行緒上繼續。</p></li></ol><p>在 <code>src/contributors/Contributors.kt</code> 中，檢查 <em>CONCURRENT</em> 選項的實作：</p><ol><li><p>要僅在主 UI 執行緒上執行協程，請將 <code>Dispatchers.Main</code> 指定為參數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.Main) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updateResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>如果主執行緒在您啟動新協程時繁忙，協程會被暫停並安排在此執行緒上執行。協程只會在執行緒空閒時恢復。</li><li>最佳實踐是使用外部作用域的調度器，而不是在每個端點明確指定它。如果您在不傳遞 <code>Dispatchers.Default</code> 作為參數的情況下定義 <code>loadContributorsConcurrent()</code>，您可以在任何上下文中呼叫此函式：使用 <code>Default</code> 調度器、主 UI 執行緒或自訂調度器。</li><li>正如您稍後將看到的，從測試中呼叫 <code>loadContributorsConcurrent()</code> 時，您可以在 <code>TestDispatcher</code> 的上下文中呼叫它，這簡化了測試。這使得此解決方案更加靈活。</li></ul></li><li><p>要在呼叫端指定調度器，請將以下更改應用於專案，同時讓 <code>loadContributorsConcurrent</code> 在繼承的上下文中啟動協程：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.Default) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsConcurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(service, req)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.Main) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        updateResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users, startTime)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>updateResults()</code> 應在主 UI 執行緒上呼叫，因此您使用 <code>Dispatchers.Main</code> 的上下文呼叫它。</li><li><code>withContext()</code> 會使用指定的協程上下文呼叫給定的程式碼，暫停直到它完成並回傳結果。另一種更冗長的方式來表達這一點是啟動一個新的協程並明確等待（透過暫停）直到它完成：<code>launch(context) { ... }.join()</code>。</li></ul></li><li><p>執行程式碼並確保協程在執行緒池中的執行緒上執行。</p></li></ol><h2 id="結構化並發" tabindex="-1">結構化並發 <a class="header-anchor" href="#結構化並發" aria-label="Permalink to &quot;結構化並發&quot;">​</a></h2><ul><li><em>協程作用域</em> 負責不同協程之間的結構和父子關係。新的協程通常需要在作用域內啟動。</li><li><em>協程上下文</em> 儲存用於執行給定協程的額外技術資訊，例如協程的自訂名稱或指定協程應排程在哪些執行緒上的調度器。</li></ul><p>當使用 <code>launch</code>、<code>async</code> 或 <code>runBlocking</code> 啟動新的協程時，它們會自動建立相應的作用域。所有這些函式都接受一個帶有接收器的 Lambda 作為參數，而 <code>CoroutineScope</code> 是隱式接收器型別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* this: CoroutineScope */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><ul><li>新的協程只能在作用域內啟動。</li><li><code>launch</code> 和 <code>async</code> 被宣告為 <code>CoroutineScope</code> 的擴展，因此在呼叫它們時必須始終傳遞隱式或顯式接收器。</li><li>由 <code>runBlocking</code> 啟動的協程是唯一的例外，因為 <code>runBlocking</code> 被定義為頂層函式。但由於它會阻塞目前執行緒，因此它主要用於 <code>main()</code> 函式和測試中作為橋接函式。</li></ul><p><code>runBlocking</code>、<code>launch</code> 或 <code>async</code> 內部的新協程會自動在作用域內啟動：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* this: CoroutineScope */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // the same as:   </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>當您在 <code>runBlocking</code> 內部呼叫 <code>launch</code> 時，它是作為 <code>CoroutineScope</code> 型別的隱式接收器的擴展來呼叫的。或者，您可以明確寫 <code>this.launch</code>。</p><p>巢狀協程（本範例中由 <code>launch</code> 啟動）可以被視為外部協程（由 <code>runBlocking</code> 啟動）的子協程。這種「父子」關係透過作用域工作；子協程是從與父協程相對應的作用域啟動的。</p><p>可以不啟動新的協程就建立一個新的作用域，透過使用 <code>coroutineScope</code> 函式。為了在 <code>suspend</code> 函式內以結構化的方式啟動新的協程，而無法存取外部作用域時，您可以建立一個新的協程作用域，它會自動成為呼叫此 <code>suspend</code> 函式的外部作用域的子作用域。<code>loadContributorsConcurrent()</code> 是一個很好的範例。</p><p>您也可以使用 <code>GlobalScope.async</code> 或 <code>GlobalScope.launch</code> 從全域作用域啟動新的協程。這將建立一個頂層「獨立」協程。</p><p>協程結構背後的機制稱為 <em>結構化並發</em>。它提供了以下優於全域作用域的優點：</p><ul><li>作用域通常負責子協程，子協程的生命週期與作用域的生命週期綁定。</li><li>如果出現問題或使用者改變主意並決定撤銷操作，作用域可以自動取消子協程。</li><li>作用域會自動等待所有子協程完成。因此，如果作用域對應於一個協程，則父協程不會完成，直到在其作用域內啟動的所有協程都已完成。</li></ul><p>當使用 <code>GlobalScope.async</code> 時，沒有將幾個協程綁定到較小作用域的結構。從全域作用域啟動的協程都是獨立的——它們的生命週期僅受整個應用程式生命週期的限制。可以儲存從全域作用域啟動的協程的引用，並等待其完成或明確取消它，但這不會像結構化並發那樣自動發生。</p><h3 id="取消貢獻者載入" tabindex="-1">取消貢獻者載入 <a class="header-anchor" href="#取消貢獻者載入" aria-label="Permalink to &quot;取消貢獻者載入&quot;">​</a></h3><p>建立兩個版本的函式來載入貢獻者列表。比較當您嘗試取消父協程時這兩個版本的行為。第一個版本將使用 <code>coroutineScope</code> 來啟動所有子協程，而第二個版本將使用 <code>GlobalScope</code>。</p><ol><li><p>在 <code>Request5Concurrent.kt</code> 中，為 <code>loadContributorsConcurrent()</code> 函式添加 3 秒延遲：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsConcurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GitHubService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    req: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> coroutineScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;starting loading for \${repo.name}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // load repo contributors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>延遲會影響所有傳送請求的協程，以便有足夠的時間在協程啟動後但在請求傳送之前取消載入。</p></li><li><p>建立載入函式的第二個版本：將 <code>loadContributorsConcurrent()</code> 的實作複製到 <code>Request5NotCancellable.kt</code> 中的 <code>loadContributorsNotCancellable()</code>，然後移除新的 <code>coroutineScope</code> 的建立。</p></li><li><p>現在 <code>async</code> 呼叫無法解析，因此使用 <code>GlobalScope.async</code> 啟動它們：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsNotCancellable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GitHubService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    req: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GlobalScope.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;starting loading for \${repo.name}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // load repo contributors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deferreds.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">awaitAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>該函式現在直接回傳結果，而不是作為 Lambda 內的最後一個表達式（<code>#1</code> 和 <code>#3</code> 行）。</li><li>所有「貢獻者」協程都在 <code>GlobalScope</code> 內部啟動，而不是協程作用域的子協程（<code>#2</code> 行）。</li></ul></li><li><p>執行程式並選擇 <em>CONCURRENT</em> 選項來載入貢獻者。</p></li><li><p>等待所有「貢獻者」協程啟動，然後點擊 <em>Cancel</em>。日誌顯示沒有新的結果，這表示所有請求確實已被取消：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>2896 [AWT-EventQueue-0 @coroutine#1] INFO  Contributors - kotlin: loaded 40 repos</span></span>
<span class="line"><span>2901 [DefaultDispatcher-worker-2 @coroutine#4] INFO  Contributors - starting loading for kotlin-koans</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>2909 [DefaultDispatcher-worker-5 @coroutine#36] INFO  Contributors - starting loading for mpp-example</span></span>
<span class="line"><span>/* click on &#39;cancel&#39; */</span></span>
<span class="line"><span>/* no requests are sent */</span></span></code></pre></div></li><li><p>重複步驟 5，但這次選擇 <code>NOT_CANCELLABLE</code> 選項：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>2570 [AWT-EventQueue-0 @coroutine#1] INFO  Contributors - kotlin: loaded 30 repos</span></span>
<span class="line"><span>2579 [DefaultDispatcher-worker-1 @coroutine#4] INFO  Contributors - starting loading for kotlin-koans</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>2586 [DefaultDispatcher-worker-6 @coroutine#36] INFO  Contributors - starting loading for mpp-example</span></span>
<span class="line"><span>/* click on &#39;cancel&#39; */</span></span>
<span class="line"><span>/* but all the requests are still sent: */</span></span>
<span class="line"><span>6402 [DefaultDispatcher-worker-5 @coroutine#4] INFO  Contributors - kotlin-koans: loaded 45 contributors</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>9555 [DefaultDispatcher-worker-8 @coroutine#36] INFO  Contributors - mpp-example: loaded 8 contributors</span></span></code></pre></div><p>在這種情況下，沒有協程被取消，並且所有請求仍然被傳送。</p></li><li><p>檢查「貢獻者」程式中取消是如何觸發的。當點擊 <em>Cancel</em> 按鈕時，主「載入」協程會被明確取消，子協程會自動取消：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Contributors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSelectedVariant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            CONCURRENT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsConcurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(service, req)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    updateResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users, startTime)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUpCancellation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Job</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUpCancellation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loadingJob </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // #2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // cancel the loading job if the &#39;cancel&#39; button was clicked:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> listener </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ActionListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            loadingJob.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cancel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// #3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            updateLoadingStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CANCELED)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // add a listener to the &#39;cancel&#39; button:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addCancelListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(listener)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // update the status and remove the listener</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // after the loading job is completed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p><code>launch</code> 函式會回傳 <code>Job</code> 的實例。<code>Job</code> 會儲存對「載入協程」的引用，該協程會載入所有資料並更新結果。您可以在其上呼叫 <code>setUpCancellation()</code> 擴展函式（<code>#1</code> 行），並將 <code>Job</code> 的實例作為接收器傳遞。</p><p>另一種表達方式是明確地寫：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> job </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">job.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUpCancellation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><ul><li>為了可讀性，您可以在函式內部用新的 <code>loadingJob</code> 變數（<code>#2</code> 行）來指代 <code>setUpCancellation()</code> 函式的接收器。</li><li>然後，您可以為 <em>Cancel</em> 按鈕添加一個監聽器，以便在點擊時，<code>loadingJob</code> 會被取消（<code>#3</code> 行）。</li></ul><p>透過結構化並發，您只需要取消父協程，這會自動將取消傳播到所有子協程。</p><h3 id="使用外部作用域的上下文" tabindex="-1">使用外部作用域的上下文 <a class="header-anchor" href="#使用外部作用域的上下文" aria-label="Permalink to &quot;使用外部作用域的上下文&quot;">​</a></h3><p>當您在給定作用域內啟動新的協程時，更容易確保它們都使用相同的上下文執行。替換上下文也更容易。</p><p>現在是時候學習如何使用外部作用域的調度器了。由 <code>coroutineScope</code> 或協程建構器建立的新作用域總是從外部作用域繼承上下文。在這種情況下，外部作用域是呼叫 <code>suspend loadContributorsConcurrent()</code> 函式的作用域：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.Default) {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// outer scope</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsConcurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(service, req)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>所有巢狀協程都會自動以繼承的上下文啟動。調度器是此上下文的一部分。這就是為什麼所有由 <code>async</code> 啟動的協程都會以預設調度器的上下文啟動：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsConcurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GitHubService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, req: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestData</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> coroutineScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // this scope inherits the context from the outer scope</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// nested coroutine started with the inherited context</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>透過結構化並發，您可以在建立頂層協程時一次指定主要的上下文元素（例如調度器）。所有巢狀協程然後會繼承該上下文並僅在需要時修改它。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>當您為 UI 應用程式（例如 Android 應用程式）編寫協程程式碼時，通常的做法是預設為頂層協程使用 <code>CoroutineDispatchers.Main</code>，然後在需要於不同執行緒上執行程式碼時明確放置不同的調度器。</p></div><p>您可以在呼叫端指定調度器，將以下更改應用於專案，同時讓 <code>loadContributorsConcurrent</code> 在繼承的上下文中啟動協程：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.Default) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsConcurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(service, req)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.Main) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        updateResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users, startTime)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>updateResults()</code> 應在主 UI 執行緒上呼叫，因此您使用 <code>Dispatchers.Main</code> 的上下文呼叫它。</li><li><code>withContext()</code> 會使用指定的協程上下文呼叫給定的程式碼，暫停直到它完成並回傳結果。另一種更冗長的方式來表達這一點是啟動一個新的協程並明確等待（透過暫停）直到它完成：<code>launch(context) { ... }.join()</code>。</li></ul><p>執行程式碼並確保協程在執行緒池中的執行緒上執行。</p><h2 id="顯示進度" tabindex="-1">顯示進度 <a class="header-anchor" href="#顯示進度" aria-label="Permalink to &quot;顯示進度&quot;">​</a></h2><p>儘管某些儲存庫的資訊載入得相當快，但使用者只有在所有資料都載入後才能看到結果列表。在此之前，載入圖示會顯示進度，但沒有關於目前狀態或已載入哪些貢獻者的資訊。</p><p>您可以更早地顯示中間結果，並在載入每個儲存庫的資料後顯示所有貢獻者：</p><p><img src="`+A+`" alt="載入資料" width="500"></p><p>為了實作此功能，在 <code>src/tasks/Request6Progress.kt</code> 中，您需要將更新 UI 的邏輯作為回呼傳遞，以便在每個中間狀態呼叫它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GitHubService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    req: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    updateResults: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">completed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // loading the data</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // calling \`updateResults()\` on intermediate states</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <code>Contributors.kt</code> 的呼叫端，回呼被傳遞以從 <code>Main</code> 執行緒更新 <em>PROGRESS</em> 選項的結果：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.Default) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    loadContributorsProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(service, req) { users, completed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        withContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Dispatchers.Main) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            updateResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users, startTime, completed)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>updateResults()</code> 參數在 <code>loadContributorsProgress()</code> 中被宣告為 <code>suspend</code>。必須在相應的 Lambda 參數內部呼叫 <code>withContext</code>，這是一個 <code>suspend</code> 函式。</li><li><code>updateResults()</code> 回呼接受一個額外的布林參數作為參數，指定載入是否已完成並且結果是否為最終結果。</li></ul><h3 id="任務-6" tabindex="-1">任務 6 <a class="header-anchor" href="#任務-6" aria-label="Permalink to &quot;任務 6&quot;">​</a></h3><p>在 <code>Request6Progress.kt</code> 檔案中，實作 <code>loadContributorsProgress()</code> 函式，該函式會顯示中間進度。請以 <code>Request4Suspend.kt</code> 中的 <code>loadContributorsSuspend()</code> 函式為基礎。</p><ul><li>使用不帶並發的簡單版本；您將在下一節中添加它。</li><li>中間貢獻者列表應以「聚合」狀態顯示，而不僅僅是為每個儲存庫載入的使用者列表。</li><li>載入每個新儲存庫的資料時，每個使用者的總貢獻數應增加。</li></ul>`,50)),s[21]||(s[21]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任務-6-的解決方案",tabindex:"-1"},[a("任務 6 的解決方案 "),i("a",{class:"header-anchor",href:"#任務-6-的解決方案","aria-label":'Permalink to "任務 6 的解決方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[22]||(s[22]=n(`<p>為了在「聚合」狀態下儲存已載入貢獻者的中間列表，定義一個 <code>allUsers</code> 變數來儲存使用者列表，然後在載入每個新儲存庫的貢獻者後更新它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsProgress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GitHubService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    req: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    updateResults: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">completed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrgRepos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">also</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logRepos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((index, repo) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRepoContributors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org, repo.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">also</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(repo, it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        allUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (allUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        updateResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(allUsers, index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos.lastIndex)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="依序與並發" tabindex="-1">依序與並發 <a class="header-anchor" href="#依序與並發" aria-label="Permalink to &quot;依序與並發&quot;">​</a></h4><p><code>updateResults()</code> 回呼在每個請求完成後呼叫：</p><p><img src="`+m+'" alt="請求進度" width="700"></p><p>此程式碼不包含並發。它是循序的，因此您不需要同步。</p><p>最好的選擇是並發傳送請求，並在取得每個儲存庫的回應後更新中間結果：</p><p><img src="'+v+'" alt="並發請求" width="700"></p><p>要添加並發，請使用 <em>通道</em>。</p><h2 id="通道" tabindex="-1">通道 <a class="header-anchor" href="#通道" aria-label="Permalink to &quot;通道&quot;">​</a></h2><p>編寫具有共享可變狀態的程式碼相當困難且容易出錯（就像在回呼解決方案中一樣）。一種更簡單的方法是透過通訊而不是使用公共可變狀態來共享資訊。協程可以透過 <em>通道</em> 相互通訊。</p><p>通道是通訊原語，允許資料在協程之間傳遞。一個協程可以向通道 <em>傳送</em> 一些資訊，而另一個協程可以從中 <em>接收</em> 該資訊：</p><p><img src="'+f+'" alt="使用通道"></p><p>傳送（生產）資訊的協程通常稱為生產者，而接收（消費）資訊的協程稱為消費者。一個或多個協程可以向同一個通道傳送資訊，一個或多個協程可以從中接收資料：</p><p><img src="'+q+`" alt="許多協程使用通道"></p><p>當許多協程從同一個通道接收資訊時，每個元素只會由其中一個消費者處理一次。一旦元素被處理，它會立即從通道中移除。</p><p>您可以將通道視為類似於元素的集合，或者更準確地說，一個佇列，其中元素從一端添加並從另一端接收。然而，有一個重要的區別：與集合不同，即使是它們的同步版本，通道也可以 <em>暫停</em> <code>send()</code> 和 <code>receive()</code> 操作。當通道為空或已滿時，就會發生這種情況。如果通道大小有上限，則通道可能已滿。</p><p><code>Channel</code> 由三個不同的介面表示：<code>SendChannel</code>、<code>ReceiveChannel</code> 和 <code>Channel</code>，其中後者擴展了前兩個。您通常會建立一個通道並將其作為 <code>SendChannel</code> 實例提供給生產者，以便只有它們可以將資訊傳送到通道。您將通道作為 <code>ReceiveChannel</code> 實例提供給消費者，以便只有它們可以從中接收資料。<code>send</code> 和 <code>receive</code> 方法都聲明為 <code>suspend</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SendChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReceiveChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">out</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> receive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SendChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, ReceiveChannel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>生產者可以關閉通道，表示不再有元素傳入。</p><p>函式庫中定義了幾種型別的通道。它們的區別在於可以內部儲存多少個元素以及 <code>send()</code> 呼叫是否可以被暫停。對於所有通道型別，<code>receive()</code> 呼叫的行為相似：如果通道不為空，它會接收一個元素；否則，它會被暫停。</p>`,21)),l(h,{collapsible:"true"},{default:t(()=>[l(p,{title:"無限制通道"},{default:t(()=>s[0]||(s[0]=[i("p",null,[a("無限制通道最接近佇列：生產者可以將元素傳送到此通道，並且它會無限期地增長。"),i("code",null,"send()"),a(" 呼叫永遠不會被暫停。如果程式記憶體不足，您將會得到 "),i("code",null,"OutOfMemoryException"),a("。無限制通道和佇列之間的區別在於，當消費者嘗試從空通道接收時，它會被暫停，直到傳送一些新的元素。")],-1),i("img",{src:k,alt:"無限制通道",width:"500"},null,-1)])),_:1}),l(p,{title:"緩衝通道"},{default:t(()=>s[1]||(s[1]=[i("p",null,[a("緩衝通道的大小受指定數量限制。生產者可以將元素傳送到此通道，直到達到大小限制。所有元素都內部儲存。當通道已滿時，對其的下一個 "),i("code",null,"send"),a(" 呼叫將被暫停，直到有更多的可用空間。")],-1),i("img",{src:r,alt:"緩衝通道",width:"500"},null,-1)])),_:1}),l(p,{title:"會合通道"},{default:t(()=>s[2]||(s[2]=[i("p",null,[a("「會合」通道是沒有緩衝區的通道，與零大小的緩衝通道相同。其中一個函式（"),i("code",null,"send()"),a(" 或 "),i("code",null,"receive()"),a("）總是會暫停，直到另一個被呼叫。如果呼叫了 "),i("code",null,"send()"),a(" 函式，並且沒有暫停的 "),i("code",null,"receive()"),a(" 呼叫準備好處理元素，那麼 "),i("code",null,"send()"),a(" 會暫停。類似地，如果呼叫了 "),i("code",null,"receive()"),a(" 函式，並且通道是空的，或者換句話說，沒有暫停的 "),i("code",null,"send()"),a(" 呼叫準備好傳送元素，那麼 "),i("code",null,"receive()"),a(" 呼叫會暫停。「會合」名稱（「在約定的時間和地點會面」）指的是 "),i("code",null,"send()"),a(" 和 "),i("code",null,"receive()"),a(" 應該「準時會合」的事實。")],-1),i("img",{src:d,alt:"會合通道",width:"500"},null,-1)])),_:1}),l(p,{title:"匯流通道"},{default:t(()=>s[3]||(s[3]=[i("p",null,[a("傳送到匯流通道的新元素將覆蓋先前傳送的元素，因此接收者將始終只接收到最新的元素。"),i("code",null,"send()"),a(" 呼叫永遠不會暫停。")],-1),i("img",{src:E,alt:"匯流通道",width:"500"},null,-1)])),_:1})]),_:1}),s[23]||(s[23]=n(`<p>當您建立通道時，請指定其型別或緩衝區大小（如果您需要緩衝通道）：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rendezvousChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bufferedChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conflatedChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(CONFLATED)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unlimitedChannel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(UNLIMITED)</span></span></code></pre></div><p>預設情況下，會建立一個「會合」通道。</p><p>在以下任務中，您將建立一個「會合」通道、兩個生產者協程和一個消費者協程：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.channels.Channel</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A done&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B done&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">receive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[\${Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentThread</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">().name}] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>觀看<a href="https://www.youtube.com/watch?v=HpWQUoVURWQ" target="_blank" rel="noreferrer">此影片</a>以更好地了解通道。</p></div><h3 id="任務-7" tabindex="-1">任務 7 <a class="header-anchor" href="#任務-7" aria-label="Permalink to &quot;任務 7&quot;">​</a></h3><p>在 <code>src/tasks/Request7Channels.kt</code> 中，實作 <code>loadContributorsChannels()</code> 函式，該函式同時並發請求所有 GitHub 貢獻者並顯示中間進度。</p><p>使用先前的函式：<code>Request5Concurrent.kt</code> 中的 <code>loadContributorsConcurrent()</code> 和 <code>Request6Progress.kt</code> 中的 <code>loadContributorsProgress()</code>。</p>`,9)),s[24]||(s[24]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任務-7-的提示",tabindex:"-1"},[a("任務 7 的提示 "),i("a",{class:"header-anchor",href:"#任務-7-的提示","aria-label":'Permalink to "任務 7 的提示 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[25]||(s[25]=n(`<p>並發接收不同儲存庫貢獻者列表的不同協程可以將所有接收到的結果傳送到同一個通道：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (repo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然後可以逐一接收並處理來自此通道的元素：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(repos.size) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">receive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>由於 <code>receive()</code> 呼叫是循序的，因此不需要額外的同步。</p>`,5)),s[26]||(s[26]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任務-7-的解決方案",tabindex:"-1"},[a("任務 7 的解決方案 "),i("a",{class:"header-anchor",href:"#任務-7-的解決方案","aria-label":'Permalink to "任務 7 的解決方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[27]||(s[27]=n(`<p>與 <code>loadContributorsProgress()</code> 函式一樣，您可以建立一個 <code>allUsers</code> 變數來儲存「所有貢獻者」列表的中間狀態。從通道接收到的每個新列表都會被添加到所有使用者列表中。您會聚合結果並使用 <code>updateResults</code> 回呼更新狀態：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsChannels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    service: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GitHubService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    req: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RequestData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    updateResults: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">completed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> coroutineScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrgRepos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">also</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logRepos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Channel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (repo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRepoContributors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req.org, repo.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">also</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logUsers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(repo, it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(repos.size) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">receive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        allUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (allUsers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        updateResults</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(allUsers, it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repos.lastIndex)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>不同儲存庫的結果會在準備就緒後立即添加到通道中。最初，當所有請求都已傳送且未接收到任何資料時，<code>receive()</code> 呼叫會被暫停。在這種情況下，整個「載入貢獻者」協程會被暫停。</li><li>然後，當使用者列表傳送到通道時，「載入貢獻者」協程會恢復，<code>receive()</code> 呼叫會回傳此列表，並且結果會立即更新。</li></ul><p>您現在可以執行程式並選擇 <em>CHANNELS</em> 選項來載入貢獻者並查看結果。</p><p>儘管協程和通道都不能完全消除並發帶來的複雜性，但當您需要了解發生了什麼時，它們會讓事情變得更容易。</p><h2 id="測試協程" tabindex="-1">測試協程 <a class="header-anchor" href="#測試協程" aria-label="Permalink to &quot;測試協程&quot;">​</a></h2><p>現在讓我們測試所有解決方案，以檢查使用並發協程的解決方案是否比使用 <code>suspend</code> 函式的解決方案更快，並檢查使用通道的解決方案是否比簡單的「進度」解決方案更快。</p><p>在以下任務中，您將比較解決方案的總執行時間。您將模擬一個 GitHub 服務，並使該服務在給定逾時後回傳結果：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>repos 請求 - 在 1000 毫秒延遲內回傳答案</span></span>
<span class="line"><span>repo-1 - 1000 毫秒延遲</span></span>
<span class="line"><span>repo-2 - 1200 毫秒延遲</span></span>
<span class="line"><span>repo-3 - 800 毫秒延遲</span></span></code></pre></div><p>使用 <code>suspend</code> 函式的循序解決方案應該需要約 4000 毫秒（4000 = 1000 + (1000 + 1200 + 800)）。並發解決方案應該需要約 2200 毫秒（2200 = 1000 + max(1000, 1200, 800)）。</p><p>對於顯示進度的解決方案，您還可以檢查帶有時間戳的中間結果。</p><p>相應的測試資料定義在 <code>test/contributors/testData.kt</code> 中，檔案 <code>Request4SuspendKtTest</code>、<code>Request7ChannelsKtTest</code> 等包含使用模擬服務呼叫的簡單測試。</p><p>然而，這裡有兩個問題：</p><ul><li>這些測試執行時間過長。每個測試大約需要 2 到 4 秒，而且您每次都需要等待結果。這不是很有效率。</li><li>您不能依賴解決方案的確切執行時間，因為準備和執行程式碼仍需要額外時間。您可以添加一個常數，但隨後時間會因機器而異。模擬服務延遲應該高於此常數，以便您可以看到差異。如果常數是 0.5 秒，那麼將延遲設定為 0.1 秒是不夠的。</li></ul><p>一種更好的方法是使用特殊框架在多次執行相同程式碼的同時測試時間（這會進一步增加總時間），但這學習和設置起來很複雜。</p><p>為了解決這些問題，並確保具有所提供測試延遲的解決方案按預期執行，即一個比另一個快，請使用具有特殊測試調度器的 <em>虛擬</em> 時間。該調度器會記錄從開始經過的虛擬時間，並立即即時執行所有內容。當您在此調度器上執行協程時，<code>delay</code> 將立即回傳並推進虛擬時間。</p><p>使用此機制的測試執行速度很快，但您仍然可以檢查虛擬時間不同時刻發生的情況。總執行時間顯著減少：</p><p><img src="`+T+`" alt="總執行時間比較" width="700"></p><p>要使用虛擬時間，請將 <code>runBlocking</code> 呼叫替換為 <code>runTest</code>。<code>runTest</code> 接受一個擴充 Lambda 給 <code>TestScope</code> 作為參數。當您在此特殊作用域內從 <code>suspend</code> 函式中呼叫 <code>delay</code> 時，<code>delay</code> 將會增加虛擬時間，而不是實時延遲：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testDelayInSuspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> realStartTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentTimeMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> virtualStartTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentTime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentTimeMillis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> realStartTime} ms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ~ 6 ms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${currentTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> virtualStartTime} ms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1000 ms</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// auto-advances without delay</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// executes eagerly when foo() is called</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以使用 <code>TestScope</code> 的 <code>currentTime</code> 屬性來檢查目前的虛擬時間。</p><p>本範例中實際執行時間為數毫秒，而虛擬時間等於延遲參數，即 1000 毫秒。</p><p>為了在子協程中獲得「虛擬」<code>delay</code> 的完整效果，請使用 <code>TestDispatcher</code> 啟動所有子協程。否則，它將無法運作。此調度器會自動從其他 <code>TestScope</code> 繼承，除非您提供不同的調度器：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testDelayInLaunch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> realStartTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentTimeMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> virtualStartTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentTime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentTimeMillis</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> realStartTime} ms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ~ 11 ms</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\${currentTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> virtualStartTime} ms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1000 ms</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> coroutineScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// auto-advances without delay</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// executes eagerly when bar() is called</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果上述範例中 <code>launch</code> 在 <code>Dispatchers.Default</code> 的上下文中被呼叫，則測試將失敗。您將會收到一個例外，表示 Job 尚未完成。</p><p>只有當 <code>loadContributorsConcurrent()</code> 函式以繼承的上下文啟動子協程，而不使用 <code>Dispatchers.Default</code> 調度器修改其上下文時，您才能以這種方式測試該函式。</p><p>您可以在 <em>呼叫</em> 函式時指定上下文元素（如調度器），而不是在 <em>定義</em> 函式時指定，這提供了更大的靈活性和更簡單的測試。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>支援虛擬時間的測試 API 為 <a href="/zh-Hant/kotlin/components-stability">實驗性</a> 功能，將來可能會有所變更。</p></div><p>預設情況下，如果您使用實驗性測試 API，編譯器會顯示警告。若要抑制這些警告，請使用 <code>@OptIn(ExperimentalCoroutinesApi::class)</code> 註解測試函式或包含測試的整個類別。新增編譯器參數，指示編譯器您正在使用實驗性 API：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compileTestKotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlinOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-Xuse-experimental=kotlin.Experimental&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在本教程對應的專案中，編譯器參數已添加到 Gradle 腳本中。</p><h3 id="任務-8" tabindex="-1">任務 8 <a class="header-anchor" href="#任務-8" aria-label="Permalink to &quot;任務 8&quot;">​</a></h3><p>重構 <code>tests/tasks/</code> 中的以下測試，使其使用虛擬時間而非實時：</p><ul><li>Request4SuspendKtTest.kt</li><li>Request5ConcurrentKtTest.kt</li><li>Request6ProgressKtTest.kt</li><li>Request7ChannelsKtTest.kt</li></ul><p>比較重構前後的總執行時間。</p>`,35)),s[28]||(s[28]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任務-8-的提示",tabindex:"-1"},[a("任務 8 的提示 "),i("a",{class:"header-anchor",href:"#任務-8-的提示","aria-label":'Permalink to "任務 8 的提示 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[29]||(s[29]=n(`<ol><li><p>將 <code>runBlocking</code> 呼叫替換為 <code>runTest</code>，並將 <code>System.currentTimeMillis()</code> 替換為 <code>currentTime</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentTime</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // action</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startTime</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // testing result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>取消檢查確切虛擬時間的斷言註解。</p></li><li><p>不要忘記添加 <code>@UseExperimental(ExperimentalCoroutinesApi::class)</code>。</p></li></ol>`,1)),s[30]||(s[30]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任務-8-的解決方案",tabindex:"-1"},[a("任務 8 的解決方案 "),i("a",{class:"header-anchor",href:"#任務-8-的解決方案","aria-label":'Permalink to "任務 8 的解決方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[31]||(s[31]=n(`<p>以下是並發和通道案例的解決方案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testConcurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadContributorsConcurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MockGithubService, testRequestData)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wrong result for &#39;loadContributorsConcurrent&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, expectedConcurrentResults.users, result)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startTime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;The calls run concurrently, so the total virtual time should be 2200 ms: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;1000 for repos request plus max(1000, 1200, 800) = 1200 for concurrent contributors requests)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        expectedConcurrentResults.timeFromStart, totalTime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>首先，檢查結果是否剛好在預期的虛擬時間可用，然後再檢查結果本身：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testChannels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    loadContributorsChannels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MockGithubService, testRequestData) { users, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expected </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> concurrentProgressResults[index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startTime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Expected intermediate results after \${expected.timeFromStart} ms:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            expected.timeFromStart, time</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wrong intermediate results after </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$time</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, expected.users, users)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通道的最後一個版本的第一個中間結果比進度版本更早可用，您可以在使用虛擬時間的測試中看到差異。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>其餘「暫停」和「進度」任務的測試非常相似——您可以在專案的 <code>solutions</code> 分支中找到它們。</p></div><h2 id="接下來是什麼" tabindex="-1">接下來是什麼 <a class="header-anchor" href="#接下來是什麼" aria-label="Permalink to &quot;接下來是什麼&quot;">​</a></h2><ul><li>查看 KotlinConf 上的 <a href="https://kotlinconf.com/workshops/" target="_blank" rel="noreferrer">Asynchronous Programming with Kotlin</a> 工作坊。</li><li>了解更多關於使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-test/" target="_blank" rel="noreferrer">虛擬時間和實驗性測試套件</a> 的資訊。</li></ul>`,8))])}const H=_(S,[["render",I]]);export{V as __pageData,H as default};
