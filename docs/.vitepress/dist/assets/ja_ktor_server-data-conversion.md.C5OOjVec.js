import{_ as u,C as t,c as v,o as y,G as a,ag as k,j as i,w as e,a as n}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-data-conversion.md","filePath":"ja/ktor/server-data-conversion.md","lastUpdated":1755514048000}'),m={name:"ja/ktor/server-data-conversion.md"};function F(C,s,D,b,f,A){const d=t("TopicTitle"),h=t("primary-label"),p=t("Links"),E=t("tldr"),g=t("link-summary"),l=t("code-block"),o=t("TabItem"),r=t("Tabs"),c=t("list");return y(),v("div",null,[a(d,{labelRef:"server-plugin",title:"データ変換"}),a(h,{ref:"server-plugin"},null,512),a(E,null,{default:e(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"コード例"),n(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/data-conversion"}," data-conversion ")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"必要な依存関係"),n(": "),i("code",null,"io.ktor:ktor-server-data-conversion")],-1)),i("p",null,[i("b",null,[a(p,{href:"/ktor/server-native",summary:"KtorはKotlin/Nativeをサポートしており、追加のランタイムや仮想マシンなしでサーバーを実行できます。"},{default:e(()=>s[0]||(s[0]=[n("ネイティブサーバー")])),_:1}),s[1]||(s[1]=n("のサポート"))]),s[2]||(s[2]=n(": ✅ "))])]),_:1}),a(g,null,{default:e(()=>s[5]||(s[5]=[n(" Ktorサーバー用の`DataConversion`プラグインを使用すると、値のリストのシリアライズおよびデシリアライズのためのカスタムコンバーターを追加できます。 ")])),_:1}),s[17]||(s[17]=k('<p><a href="https://api.ktor.io/ktor-utils/io.ktor.util.converters/-data-conversion/index.html" target="_blank" rel="noreferrer"><code>DataConversion</code></a>プラグインを使用すると、値のリストをシリアライズおよびデシリアライズできます。デフォルトでは、Ktorは<a href="https://api.ktor.io/ktor-utils/io.ktor.util.converters/-default-conversion-service/index.html" target="_blank" rel="noreferrer"><code>DefaultConversionService</code></a>を介してプリミティブ型と列挙型を処理します。このサービスを拡張して追加の型を処理するには、<code>DataConversion</code>プラグインをインストールして設定します。</p><h2 id="add_dependencies" tabindex="-1">依存関係を追加する <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係を追加する {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>DataConversion</code>を使用するには、<code>ktor-server-data-conversion</code>アーティファクトをビルドスクリプトに含める必要があります。 </p>',3)),a(r,{group:"languages"},{default:e(()=>[a(o,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[a(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-data-conversion:$ktor_version")'})]),_:1}),a(o,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[a(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-data-conversion:$ktor_version"'})]),_:1}),a(o,{title:"Maven","group-key":"maven"},{default:e(()=>[a(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-data-conversion-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[18]||(s[18]=i("h2",{id:"install_plugin",tabindex:"-1"},[n("DataConversionをインストールする "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "DataConversionをインストールする {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[7]||(s[7]=i("code",null,"DataConversion",-1)),s[8]||(s[8]=n("プラグインをアプリケーションに")),s[9]||(s[9]=i("a",{href:"#install"},"インストール",-1)),s[10]||(s[10]=n("するには、指定された")),a(p,{href:"/ktor/server-modules",summary:"モジュールを使用すると、ルートをグループ化してアプリケーションを構造化できます。"},{default:e(()=>s[6]||(s[6]=[n("モジュール")])),_:1}),s[11]||(s[11]=n("の")),s[12]||(s[12]=i("code",null,"install",-1)),s[13]||(s[13]=n("関数に渡します。 以下のコードスニペットは、")),s[14]||(s[14]=i("code",null,"DataConversion",-1)),s[15]||(s[15]=n("をインストールする方法を示しています... "))]),a(c,null,{default:e(()=>s[16]||(s[16]=[i("li",null,[n(" ..."),i("code",null,"embeddedServer"),n("関数呼び出し内で。 ")],-1),i("li",null,[n(" ...明示的に定義された"),i("code",null,"module"),n("内。これは"),i("code",null,"Application"),n("クラスの拡張関数です。 ")],-1)])),_:1}),a(r,null,{default:e(()=>[a(o,{title:"embeddedServer"},{default:e(()=>[a(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.dataconversion.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(DataConversion)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),a(o,{title:"module"},{default:e(()=>[a(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.dataconversion.*
            // ...
            fun Application.module() {
                install(DataConversion)
                // ...
            }`})]),_:1})]),_:1}),s[19]||(s[19]=k(`<h2 id="add-converters" tabindex="-1">コンバーターを追加する <a class="header-anchor" href="#add-converters" aria-label="Permalink to &quot;コンバーターを追加する {id=&quot;add-converters&quot;}&quot;">​</a></h2><p><code>DataConversion</code>の設定内で型変換を定義できます。指定された型に対して<code>convert&lt;T&gt;</code>メソッドを提供し、利用可能な関数を使用して値のリストをシリアライズおよびデシリアライズします。</p><ul><li><p><code>decode()</code>関数を使用して値のリストをデシリアライズします。これは、URL内の繰り返し値を表す文字列のリストを受け取り、デコードされた値を返します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { values </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (values: List&lt;String&gt;) -&gt; Any?</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //値をデシリアライズする</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>encode()</code>関数を使用して値をシリアライズします。この関数は任意の値をとり、それを表す文字列のリストを返します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (value: Any?) -&gt; List&lt;String&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     //値をシリアライズする</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li></ul><h2 id="service" tabindex="-1">サービスにアクセスする <a class="header-anchor" href="#service" aria-label="Permalink to &quot;サービスにアクセスする {id=&quot;service&quot;}&quot;">​</a></h2><p>現在のコンテキストから<code>DataConversion</code>サービスにアクセスできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataConversion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> application.conversionService</span></span></code></pre></div><p>その後、コンバーターサービスを使用してコールバック関数を呼び出すことができます。</p><ul><li><code>fromValues(values: List&lt;String&gt;, type: TypeInfo)</code>コールバック関数は、<code>values</code>を文字列のリストとして、および値を変換するための<code>TypeInfo</code>を受け入れ、デコードされた値を返します。</li><li><code>toValues(value: Any?)</code>コールバック関数は、任意の値をとり、それを表す文字列のリストを返します。</li></ul><h2 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h2><p>以下の例では、<code>LocalDate</code>型のコンバーターが定義され、値のシリアライズおよびデシリアライズ用に設定されています。<code>encode</code>関数が呼び出されると、サービスは<code>SimpleDateFormat</code>を使用して値を変換し、フォーマットされた値を含むリストを返します。<code>decode</code>関数が呼び出されると、サービスは日付を<code>LocalDate</code>としてフォーマットし、それを返します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DataConversion) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        convert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LocalDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: DelegatingConversionService</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formatter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateTimeFormatterBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChronoField.YEAR, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SignStyle.NEVER)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChronoField.MONTH_OF_YEAR, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChronoField.DAY_OF_MONTH, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFormatter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Locale.ROOT)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { values </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (values: List&lt;String&gt;) -&gt; Any?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(formatter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (value: Any?) -&gt; List&lt;String&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SimpleDateFormat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>変換サービスは、エンコードおよびデコードされた値を取得するために手動で呼び出すことができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> application.conversionService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(call.parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decodedDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> application.conversionService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedDate, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LocalDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;())</span></span></code></pre></div><p>完全な例については、<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/data-conversion" target="_blank" rel="noreferrer"><code>data-conversion</code></a>を参照してください。</p>`,14))])}const T=u(m,[["render",F]]);export{B as __pageData,T as default};
