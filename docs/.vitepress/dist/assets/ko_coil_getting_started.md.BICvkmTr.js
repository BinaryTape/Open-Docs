import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"시작하기","description":"","frontmatter":{},"headers":[],"relativePath":"ko/coil/getting_started.md","filePath":"ko/coil/getting_started.md","lastUpdated":1753369988000}'),l={name:"ko/coil/getting_started.md"};function o(n,i,p,h,k,d){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="시작하기" tabindex="-1">시작하기 <a class="header-anchor" href="#시작하기" aria-label="Permalink to &quot;시작하기&quot;">​</a></h1><h2 id="compose-ui" tabindex="-1">Compose UI <a class="header-anchor" href="#compose-ui" aria-label="Permalink to &quot;Compose UI&quot;">​</a></h2><p>일반적인 Compose UI 프로젝트에서는 다음을 임포트해야 합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.coil-kt.coil3:coil-compose:3.3.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.coil-kt.coil3:coil-network-okhttp:3.3.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>임포트한 후에는 <code>AsyncImage</code>를 사용하여 네트워크에서 이미지를 로드할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>::: Note Compose Multiplatform을 사용하는 경우 OkHttp 대신 Ktor를 사용해야 합니다. 자세한 방법은 <a href="./network#ktor-network-engines">여기</a>를 참조하십시오.</p><p>:::</p><h2 id="android-views" tabindex="-1">Android Views <a class="header-anchor" href="#android-views" aria-label="Permalink to &quot;Android Views&quot;">​</a></h2><p>Compose UI 대신 Android Views를 사용하는 경우 다음을 임포트합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.coil-kt.coil3:coil:3.3.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.coil-kt.coil3:coil-network-okhttp:3.3.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>임포트한 후에는 <code>ImageView.load</code> 확장 함수를 사용하여 네트워크에서 이미지를 로드할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imageView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="싱글톤-imageloader-구성하기" tabindex="-1">싱글톤 ImageLoader 구성하기 <a class="header-anchor" href="#싱글톤-imageloader-구성하기" aria-label="Permalink to &quot;싱글톤 ImageLoader 구성하기&quot;">​</a></h2><p>기본적으로 Coil은 싱글톤 <code>ImageLoader</code>를 포함합니다. <code>ImageLoader</code>는 들어오는 <code>ImageRequest</code>를 가져오고, 디코딩하고, 캐싱하고, 결과를 반환함으로써 실행합니다. <code>ImageLoader</code>를 구성할 필요는 없습니다. 구성하지 않으면 Coil이 기본 설정으로 싱글톤 <code>ImageLoader</code>를 생성합니다.</p><p>다양한 방법으로 구성할 수 있습니다 (<strong>하나만 선택하십시오</strong>):</p><ul><li>앱의 진입점(앱의 루트 <code>@Composable</code>) 근처에서 <code>setSingletonImageLoaderFactory</code>를 호출합니다. <strong>이 방법은 Compose Multiplatform 앱에 가장 적합합니다.</strong></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSingletonImageLoaderFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>Android에서 <a href="https://developer.android.com/reference/android/app/Application" target="_blank" rel="noreferrer"><code>Application</code></a>에 <code>SingletonImageLoader.Factory</code>를 구현합니다. <strong>이 방법은 Android 앱에 가장 적합합니다.</strong></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), SingletonImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> newImageLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImageLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>앱의 진입점(예: Android의 <code>Application.onCreate</code>) 근처에서 <code>SingletonImageLoader.setSafe</code>를 호출합니다. 이 방법이 가장 유연합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SingletonImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSafe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>::: Note Coil에 의존하는 라이브러리를 작성하는 경우 싱글톤 <code>ImageLoader</code>를 가져오거나 설정해서는 안 됩니다. 대신, <code>io.coil-kt.coil3:coil-core</code>에 의존하고, 자체 <code>ImageLoader</code>를 생성하여 수동으로 전달해야 합니다. 라이브러리에서 싱글톤 <code>ImageLoader</code>를 설정하면 해당 라이브러리를 사용하는 앱이 Coil을 함께 사용하는 경우, 앱에서 설정한 <code>ImageLoader</code>를 덮어쓸 수 있습니다.</p><p>:::</p><h2 id="아티팩트" tabindex="-1">아티팩트 <a class="header-anchor" href="#아티팩트" aria-label="Permalink to &quot;아티팩트&quot;">​</a></h2><p>Coil이 <code>mavenCentral()</code>에 게시한 주요 아티팩트 목록은 다음과 같습니다:</p><ul><li><code>io.coil-kt.coil3:coil</code>: <code>io.coil-kt.coil3:coil-core</code>에 의존하는 기본 아티팩트입니다. 싱글톤 <code>ImageLoader</code> 및 관련 확장 함수를 포함합니다.</li><li><code>io.coil-kt.coil3:coil-core</code>: <code>io.coil-kt.coil3:coil</code>의 하위 집합으로, 싱글톤 <code>ImageLoader</code> 및 관련 확장 함수를 <strong>포함하지 않습니다</strong>.</li><li><code>io.coil-kt.coil3:coil-compose</code>: <code>io.coil-kt.coil3:coil</code> 및 <code>io.coil-kt.coil3:coil-compose-core</code>에 의존하는 기본 <a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer">Compose UI</a> 아티팩트입니다. 싱글톤 <code>ImageLoader</code>를 사용하는 <code>AsyncImage</code>, <code>rememberAsyncImagePainter</code>, <code>SubcomposeAsyncImage</code>에 대한 오버로드(overload)를 포함합니다.</li><li><code>io.coil-kt.coil3:coil-compose-core</code>: <code>io.coil-kt.coil3:coil-compose</code>의 하위 집합으로, 싱글톤 <code>ImageLoader</code>에 의존하는 함수를 포함하지 않습니다.</li><li><code>io.coil-kt.coil3:coil-network-okhttp</code>: <a href="https://github.com/square/okhttp" target="_blank" rel="noreferrer">OkHttp</a>를 사용하여 네트워크에서 이미지를 가져오는 기능을 지원합니다.</li><li><code>io.coil-kt.coil3:coil-network-ktor2</code>: <a href="https://github.com/ktorio/ktor" target="_blank" rel="noreferrer">Ktor 2</a>를 사용하여 네트워크에서 이미지를 가져오는 기능을 지원합니다.</li><li><code>io.coil-kt.coil3:coil-network-ktor3</code>: <a href="https://github.com/ktorio/ktor" target="_blank" rel="noreferrer">Ktor 3</a>를 사용하여 네트워크에서 이미지를 가져오는 기능을 지원합니다.</li><li><code>io.coil-kt.coil3:coil-network-cache-control</code>: 네트워크에서 이미지를 가져올 때 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noreferrer"><code>Cache-Control</code> 헤더</a>를 준수하는 기능을 지원합니다.</li><li><code>io.coil-kt.coil3:coil-gif</code>: GIF 디코딩을 지원하는 두 개의 <a href="https://coil-kt.github.io/coil/api/coil-core/coil3.decode/-decoder" target="_blank" rel="noreferrer">디코더</a>를 포함합니다. 자세한 내용은 <a href="./gifs">GIF</a>를 참조하십시오.</li><li><code>io.coil-kt.coil3:coil-svg</code>: SVG 디코딩을 지원하는 <a href="https://coil-kt.github.io/coil/api/coil-core/coil3.decode/-decoder" target="_blank" rel="noreferrer">디코더</a>를 포함합니다. 자세한 내용은 <a href="./svgs">SVG</a>를 참조하십시오.</li><li><code>io.coil-kt.coil3:coil-video</code>: <a href="https://developer.android.com/guide/topics/media/media-formats#video-codecs" target="_blank" rel="noreferrer">Android에서 지원하는 비디오 형식</a>에서 프레임을 디코딩하는 것을 지원하는 <a href="https://coil-kt.github.io/coil/api/coil-core/coil3.decode/-decoder" target="_blank" rel="noreferrer">디코더</a>를 포함합니다. 자세한 내용은 <a href="./videos">비디오</a>를 참조하십시오.</li><li><code>io.coil-kt.coil3:coil-test</code>: 테스트를 지원하는 클래스를 포함합니다. 자세한 내용은 <a href="./testing">테스팅</a>을 참조하십시오.</li><li><code>io.coil-kt.coil3:coil-bom</code>: <a href="https://docs.gradle.org/7.2/userguide/platforms.html#sub:bom_import" target="_blank" rel="noreferrer">재료 명세서(bill of materials)</a>를 포함합니다. <code>coil-bom</code>을 임포트하면 버전을 지정하지 않고도 다른 Coil 아티팩트에 의존할 수 있습니다.</li></ul>`,27)]))}const g=s(l,[["render",o]]);export{c as __pageData,g as default};
