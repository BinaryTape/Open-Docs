import{_ as E,C as h,c as g,o as c,j as i,G as a,ag as p,a as n,w as t}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-session-auth.md","filePath":"ko/ktor/server-session-auth.md","lastUpdated":1755457140000}'),u={name:"ko/ktor/server-session-auth.md"};function y(F,s,v,m,b,f){const r=h("show-structure"),o=h("Links"),d=h("tldr"),e=h("code-block"),l=h("TabItem"),k=h("Tabs");return c(),g("div",null,[s[7]||(s[7]=i("h1",{id:"ktor-서버의-세션-인증",tabindex:"-1"},[n("Ktor 서버의 세션 인증 "),i("a",{class:"header-anchor",href:"#ktor-서버의-세션-인증","aria-label":'Permalink to "Ktor 서버의 세션 인증"'},"​")],-1)),a(r,{for:"chapter",depth:"2"}),a(d,null,{default:t(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"필수 의존성"),n(": "),i("code",null,"io.ktor:ktor-server-auth"),n(", "),i("code",null,"io.ktor:ktor-server-sessions")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"코드 예시"),n(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session"}," auth-form-session ")],-1)),i("p",null,[i("b",null,[a(o,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임이나 가상 머신 없이 서버를 실행할 수 있게 해줍니다."},{default:t(()=>s[0]||(s[0]=[n("네이티브 서버")])),_:1}),s[1]||(s[1]=n(" 지원"))]),s[2]||(s[2]=n(": ✖️ "))])]),_:1}),s[8]||(s[8]=p('<p><a href="./server-sessions">세션</a>은 서로 다른 HTTP 요청 간에 데이터를 유지하는 메커니즘을 제공합니다. 일반적인 사용 사례로는 로그인한 사용자의 ID, 장바구니 내용 저장, 또는 클라이언트의 사용자 환경설정 유지가 있습니다.</p><p>Ktor에서 이미 연결된 세션을 가진 사용자는 <code>session</code> 프로바이더를 사용하여 인증될 수 있습니다. 예를 들어, 사용자가 처음으로 <a href="./server-form-based-auth">웹 폼</a>을 사용하여 로그인할 때, 사용자 이름을 쿠키 세션에 저장하고, 후속 요청에서는 <code>session</code> 프로바이더를 사용하여 이 사용자를 인증할 수 있습니다.</p><blockquote><p>Ktor의 인증 및 권한 부여에 대한 일반적인 정보는 <a href="./server-auth">Ktor 서버의 인증 및 권한 부여</a> 섹션에서 확인할 수 있습니다.</p></blockquote><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>session</code> 인증을 활성화하려면 빌드 스크립트에 다음 아티팩트를 포함해야 합니다:</p>',5)),i("ul",null,[i("li",null,[s[5]||(s[5]=i("p",null,[n("세션을 사용하기 위한 "),i("code",null,"ktor-server-sessions"),n(" 의존성 추가:")],-1)),a(k,{group:"languages"},{default:t(()=>[a(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[a(e,{lang:"Kotlin",code:'              implementation("io.ktor:ktor-server-sessions:$ktor_version")'})]),_:1}),a(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[a(e,{lang:"Groovy",code:'              implementation "io.ktor:ktor-server-sessions:$ktor_version"'})]),_:1}),a(l,{title:"Maven","group-key":"maven"},{default:t(()=>[a(e,{lang:"XML",code:`              <dependency>
                  <groupId>io.ktor</groupId>
                  <artifactId>ktor-server-sessions-jvm</artifactId>
                  <version>\${ktor_version}</version>
              </dependency>`})]),_:1})]),_:1})]),i("li",null,[s[6]||(s[6]=i("p",null,[n("인증을 위한 "),i("code",null,"ktor-server-auth"),n(" 의존성 추가:")],-1)),a(k,{group:"languages"},{default:t(()=>[a(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[a(e,{lang:"Kotlin",code:'              implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),a(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[a(e,{lang:"Groovy",code:'              implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),a(l,{title:"Maven","group-key":"maven"},{default:t(()=>[a(e,{lang:"XML",code:`              <dependency>
                  <groupId>io.ktor</groupId>
                  <artifactId>ktor-server-auth-jvm</artifactId>
                  <version>\${ktor_version}</version>
              </dependency>`})]),_:1})]),_:1})])]),s[9]||(s[9]=p(`<h2 id="flow" tabindex="-1">세션 인증 흐름 <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;세션 인증 흐름 {id=&quot;flow&quot;}&quot;">​</a></h2><p>세션을 이용한 인증 흐름은 애플리케이션에서 사용자가 인증되는 방식에 따라 달라질 수 있습니다. <a href="./server-form-based-auth">폼 기반 인증</a>에서는 어떻게 작동하는지 살펴보겠습니다:</p><ol><li>클라이언트가 웹 폼 데이터(사용자 이름과 비밀번호 포함)가 담긴 요청을 서버로 보냅니다.</li><li>서버는 클라이언트가 보낸 자격 증명을 검증하고, 사용자 이름을 쿠키 세션에 저장하며, 요청된 콘텐츠와 사용자 이름이 포함된 쿠키로 응답합니다.</li><li>클라이언트가 쿠키를 포함하여 보호된 리소스에 대한 후속 요청을 보냅니다.</li><li>수신된 쿠키 데이터를 기반으로 Ktor는 이 사용자에 대한 쿠키 세션이 존재하는지 확인하고, 선택적으로 수신된 세션 데이터에 대해 추가적인 유효성 검사를 수행합니다. 유효성 검사가 성공하면 서버는 요청된 콘텐츠로 응답합니다.</li></ol><h2 id="install" tabindex="-1">세션 인증 설치 <a class="header-anchor" href="#install" aria-label="Permalink to &quot;세션 인증 설치 {id=&quot;install&quot;}&quot;">​</a></h2><p><code>session</code> 인증 프로바이더를 설치하려면 <code>install</code> 블록 내에서 필요한 세션 타입과 함께 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/session.html" target="_blank" rel="noreferrer">session</a> 함수를 호출합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.sessions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 세션 인증 구성</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configure" tabindex="-1">세션 인증 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;세션 인증 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><p>이 섹션에서는 <a href="./server-form-based-auth">폼 기반 인증</a>으로 사용자를 인증하고, 이 사용자에 대한 정보를 쿠키 세션에 저장한 다음, 후속 요청에서 <code>session</code> 프로바이더를 사용하여 이 사용자를 인증하는 방법을 보여줍니다.</p><blockquote><p>전체 예시는 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session" target="_blank" rel="noreferrer">auth-form-session</a>을 참조하세요.</p></blockquote><h3 id="data-class" tabindex="-1">1단계: 데이터 클래스 생성 <a class="header-anchor" href="#data-class" aria-label="Permalink to &quot;1단계: 데이터 클래스 생성 {id=&quot;data-class&quot;}&quot;">​</a></h3><p>먼저, 세션 데이터를 저장하기 위한 데이터 클래스를 생성해야 합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="install-session" tabindex="-1">2단계: 세션 설치 및 구성 <a class="header-anchor" href="#install-session" aria-label="Permalink to &quot;2단계: 세션 설치 및 구성 {id=&quot;install-session&quot;}&quot;">​</a></h3><p>데이터 클래스를 생성한 후, <code>Sessions</code> 플러그인을 설치하고 구성해야 합니다. 아래 예시는 지정된 쿠키 경로와 만료 시간으로 쿠키 세션을 설치하고 구성합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user_session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.maxAgeInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>세션 구성에 대해 더 자세히 알아보려면 <a href="./server-sessions#configuration_overview">세션 구성 개요</a>를 참조하세요.</p></blockquote><h3 id="configure-session-auth" tabindex="-1">3단계: 세션 인증 구성 <a class="header-anchor" href="#configure-session-auth" aria-label="Permalink to &quot;3단계: 세션 인증 구성 {id=&quot;configure-session-auth&quot;}&quot;">​</a></h3><p><code>session</code> 인증 프로바이더는 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-session-authentication-provider/-config/index.html" target="_blank" rel="noreferrer"><code>SessionAuthenticationProvider.Config</code></a> 클래스를 통해 설정을 노출합니다. 아래 예시에서는 다음 설정들이 지정됩니다:</p><ul><li><code>validate()</code> 함수는 <a href="#data-class">세션 인스턴스</a>를 확인하고, 인증 성공 시 <code>Any</code> 타입의 Principal을 반환합니다.</li><li><code>challenge()</code> 함수는 인증 실패 시 수행될 동작을 지정합니다. 예를 들어, 로그인 페이지로 리디렉션하거나 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-unauthorized-response/index.html" target="_blank" rel="noreferrer"><code>UnauthorizedResponse</code></a>를 보낼 수 있습니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { session </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(session.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        challenge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondRedirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="save-session" tabindex="-1">4단계: 세션에 사용자 데이터 저장 <a class="header-anchor" href="#save-session" aria-label="Permalink to &quot;4단계: 세션에 사용자 데이터 저장 {id=&quot;save-session&quot;}&quot;">​</a></h3><p>로그인한 사용자에 대한 정보를 세션에 저장하려면 <a href="./server-sessions#use_sessions"><code>call.sessions.set()</code></a> 함수를 사용합니다.</p><p>다음 예시는 웹 폼을 사용하는 간단한 인증 흐름을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()?.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userName, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondRedirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>폼 기반 인증 흐름에 대한 자세한 내용은 <a href="./server-form-based-auth">폼 기반 인증</a> 문서를 참조하세요.</p></blockquote><h3 id="authenticate-route" tabindex="-1">5단계: 특정 리소스 보호 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;5단계: 특정 리소스 보호 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p><code>session</code> 프로바이더를 구성한 후, <a href="./server-auth#authenticate-route"><code>authenticate()</code></a> 함수를 사용하여 애플리케이션의 특정 리소스를 보호할 수 있습니다.</p><p>인증 성공 시, 라우트 핸들러 내에서 <code>call.principal()</code> 함수를 사용하여 인증된 Principal (이 경우 <a href="#data-class"><code>UserSession</code></a> 인스턴스)을 검색할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userSession?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${userSession?.name}! Visit count is \${userSession?.count}.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>전체 예시는 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session" target="_blank" rel="noreferrer">auth-form-session</a>을 참조하세요.</p></blockquote>`,30))])}const _=E(u,[["render",y]]);export{q as __pageData,_ as default};
