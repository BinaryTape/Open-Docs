import{_ as a,c as t,o,ag as l}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"KotlinによるAI活用アプリケーション開発","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/kotlin-ai-apps-development-overview.md","filePath":"ja/kotlin/kotlin-ai-apps-development-overview.md","lastUpdated":1754307826000}'),i={name:"ja/kotlin/kotlin-ai-apps-development-overview.md"};function r(n,e,p,s,h,c){return o(),t("div",null,e[0]||(e[0]=[l('<h1 id="kotlinによるai活用アプリケーション開発" tabindex="-1">KotlinによるAI活用アプリケーション開発 <a class="header-anchor" href="#kotlinによるai活用アプリケーション開発" aria-label="Permalink to &quot;KotlinによるAI活用アプリケーション開発&quot;">​</a></h1><p>Kotlinは、AIを活用したアプリケーションを構築するための、現代的で実用的な基盤を提供します。 複数のプラットフォームで利用でき、確立されたAIフレームワークと良好に統合し、一般的なAI開発パターンをサポートします。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>このページでは、<a href="https://github.com/Kotlin/Kotlin-AI-Examples" target="_blank" rel="noreferrer">Kotlin-AI-Examples</a>リポジトリの動作する例を用いて、Kotlinが実際のAIシナリオでどのように使用されているかを紹介します。</p></div><h2 id="kotlin-aiエージェントフレームワーク-–-koog" tabindex="-1">Kotlin AIエージェントフレームワーク – Koog <a class="header-anchor" href="#kotlin-aiエージェントフレームワーク-–-koog" aria-label="Permalink to &quot;Kotlin AIエージェントフレームワーク – Koog&quot;">​</a></h2><p><a href="https://koog.ai" target="_blank" rel="noreferrer">Koog</a>は、外部サービスを必要とせずに、AIエージェントをローカルで作成・実行するためのKotlinベースのフレームワークです。 Koogは、JetBrainsの革新的なオープンソースのエージェントフレームワークであり、開発者がJVMエコシステム内でAIエージェントを構築できるように支援します。 ツールと対話し、複雑なワークフローを処理し、ユーザーとコミュニケーションできるインテリジェントなエージェントを構築するための、純粋なKotlin実装を提供します。</p><h2 id="その他のユースケース" tabindex="-1">その他のユースケース <a class="header-anchor" href="#その他のユースケース" aria-label="Permalink to &quot;その他のユースケース&quot;">​</a></h2><p>KotlinがAI開発に役立つユースケースは他にも多数あります。 言語モデルをバックエンドサービスに統合することから、AIを活用したユーザーインターフェースを構築することまで、 これらの例は、様々なAIアプリケーションにおけるKotlinの多様性を示しています。</p><h3 id="検索拡張生成" tabindex="-1">検索拡張生成 <a class="header-anchor" href="#検索拡張生成" aria-label="Permalink to &quot;検索拡張生成&quot;">​</a></h3><p>Kotlinを使用して、言語モデルをドキュメント、ベクトルストア、またはAPIなどの外部ソースに接続する検索拡張生成 (RAG) パイプラインを構築します。 例：</p><ul><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/spring-ai/springAI-demo" target="_blank" rel="noreferrer"><code>springAI-demo</code></a>: Kotlin標準ライブラリのドキュメントをベクトルストアにロードし、ドキュメントベースのQ&amp;AをサポートするSpring Bootアプリ。</li><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/langchain4j/langchain4j-spring-boot" target="_blank" rel="noreferrer"><code>langchain4j-spring-boot</code></a>: LangChain4jを使用した最小限のRAGの例。</li></ul><h3 id="エージェントベースのアプリケーション" tabindex="-1">エージェントベースのアプリケーション <a class="header-anchor" href="#エージェントベースのアプリケーション" aria-label="Permalink to &quot;エージェントベースのアプリケーション&quot;">​</a></h3><p>Kotlinで、言語モデルとツールを使用して推論し、計画し、行動するAIエージェントを構築します。 例：</p><ul><li><a href="https://github.com/JetBrains/koog" target="_blank" rel="noreferrer"><code>koog</code></a>: KotlinエージェントフレームワークKoogを使用してAIエージェントを構築する方法を示します。</li><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/langchain4j/langchain4j-spring-boot" target="_blank" rel="noreferrer"><code>langchain4j-spring-boot</code></a>: LangChain4jで構築されたシンプルなツール利用エージェントが含まれています。</li></ul><h3 id="思考の連鎖プロンプティング" tabindex="-1">思考の連鎖プロンプティング <a class="header-anchor" href="#思考の連鎖プロンプティング" aria-label="Permalink to &quot;思考の連鎖プロンプティング&quot;">​</a></h3><p>多段階の推論を通じて言語モデルをガイドする構造化されたプロンプティング技術を実装します。 例：</p><ul><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/blob/master/notebooks/langchain4j/LangChain4j_Overview.ipynb" target="_blank" rel="noreferrer"><code>LangChain4j_Overview.ipynb</code></a>: 思考の連鎖と構造化された出力を示すKotlin Notebookです。</li></ul><h3 id="バックエンドサービスにおけるllm" tabindex="-1">バックエンドサービスにおけるLLM <a class="header-anchor" href="#バックエンドサービスにおけるllm" aria-label="Permalink to &quot;バックエンドサービスにおけるLLM&quot;">​</a></h3><p>KotlinとSpringを使用して、LLMをビジネスロジックまたはREST APIに統合します。 例：</p><ul><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/spring-ai/spring-ai-examples" target="_blank" rel="noreferrer"><code>spring-ai-examples</code></a>: 分類、チャット、要約の例が含まれています。</li><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/spring-ai/springAI-demo" target="_blank" rel="noreferrer"><code>springAI-demo</code></a>: LLMの応答とアプリケーションロジックの完全な統合を示しています。</li></ul><h3 id="aiを活用したマルチプラットフォームui" tabindex="-1">AIを活用したマルチプラットフォームUI <a class="header-anchor" href="#aiを活用したマルチプラットフォームui" aria-label="Permalink to &quot;AIを活用したマルチプラットフォームUI&quot;">​</a></h3><p>Compose Multiplatformを使用して、KotlinでインタラクティブなAI活用UIを構築します。 例：</p><ul><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/mcp/mcp-demo" target="_blank" rel="noreferrer"><code>mcp-demo</code></a>: ClaudeおよびOpenAIに接続し、Compose Multiplatformを使用して応答を表示するデスクトップUIです。</li></ul><h2 id="例を探す" tabindex="-1">例を探す <a class="header-anchor" href="#例を探す" aria-label="Permalink to &quot;例を探す&quot;">​</a></h2><p><a href="https://github.com/Kotlin/Kotlin-AI-Examples" target="_blank" rel="noreferrer">Kotlin-AI-Examples</a>リポジトリから例を探して実行できます。 各プロジェクトは自己完結型です。各プロジェクトをKotlinベースのAIアプリケーションを構築するための参照またはテンプレートとして使用できます。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li>IntelliJ IDEAでSpring AIとKotlinを使用する方法について詳しく学ぶには、<a href="/ja/kotlin/spring-ai-guide">Spring AIを使用してQdrantに保存されたドキュメントに基づいて質問に回答するKotlinアプリを構築する</a>チュートリアルを完了してください。</li><li><a href="https://kotlinlang.org/community/" target="_blank" rel="noreferrer">Kotlinコミュニティ</a>に参加して、KotlinでAIアプリケーションを構築している他の開発者とつながりましょう。</li></ul>',26)]))}const g=a(i,[["render",r]]);export{m as __pageData,g as default};
