import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"よくある質問","description":"","frontmatter":{},"headers":[],"relativePath":"ja/coil/faq.md","filePath":"ja/coil/faq.md","lastUpdated":1753369988000}'),t={name:"ja/coil/faq.md"};function l(p,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="よくある質問" tabindex="-1">よくある質問 <a class="header-anchor" href="#よくある質問" aria-label="Permalink to &quot;よくある質問&quot;">​</a></h1><p>よくある質問に掲載されていない質問がありますか？ <a href="https://stackoverflow.com/questions/tagged/coil" target="_blank" rel="noreferrer">StackOverflow</a> で <code>#coil</code> タグを使って確認するか、<a href="https://github.com/coil-kt/coil/discussions" target="_blank" rel="noreferrer">Github discussions</a> で検索してください。</p><h2 id="coil-は-java-プロジェクトまたは-kotlin-java-混合プロジェクトで使用できますか" tabindex="-1">Coil は Java プロジェクトまたは Kotlin/Java 混合プロジェクトで使用できますか？ <a class="header-anchor" href="#coil-は-java-プロジェクトまたは-kotlin-java-混合プロジェクトで使用できますか" aria-label="Permalink to &quot;Coil は Java プロジェクトまたは Kotlin/Java 混合プロジェクトで使用できますか？&quot;">​</a></h2><p>はい、可能です！ <a href="./java_compatibility">こちら</a>をご覧ください。</p><h2 id="画像をプリロードするにはどうすればよいですか" tabindex="-1">画像をプリロードするにはどうすればよいですか？ <a class="header-anchor" href="#画像をプリロードするにはどうすればよいですか" aria-label="Permalink to &quot;画像をプリロードするにはどうすればよいですか？&quot;">​</a></h2><p>ターゲットなしで画像リクエストを起動します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request)</span></span></code></pre></div><p>これにより画像がプリロードされ、ディスクキャッシュとメモリキャッシュに保存されます。</p><p>ディスクキャッシュにのみプリロードしたい場合は、次のようにデコードとメモリキャッシュへの保存をスキップできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Disables writing to the memory cache.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memoryCachePolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachePolicy.DISABLED)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Skips the decode step so we don&#39;t waste time/memory decoding the image into memory.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decoderFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BlackholeDecoder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request)</span></span></code></pre></div><h2 id="ロギングを有効にするにはどうすればよいですか" tabindex="-1">ロギングを有効にするにはどうすればよいですか？ <a class="header-anchor" href="#ロギングを有効にするにはどうすればよいですか" aria-label="Permalink to &quot;ロギングを有効にするにはどうすればよいですか？&quot;">​</a></h2><p><a href="./getting_started#configuring-the-singleton-imageloader">ImageLoader を構築する際</a> に <code>logger(DebugLogger())</code> を設定します。</p><p>::: Note <code>DebugLogger</code> はデバッグビルドでのみ使用してください。</p><p>:::</p><h2 id="java-8-または-java-11-をターゲットにするにはどうすればよいですか" tabindex="-1">Java 8 または Java 11 をターゲットにするにはどうすればよいですか？ <a class="header-anchor" href="#java-8-または-java-11-をターゲットにするにはどうすればよいですか" aria-label="Permalink to &quot;Java 8 または Java 11 をターゲットにするにはどうすればよいですか？&quot;">​</a></h2><p>Coil は <a href="https://developer.android.com/studio/write/java8-support" target="_blank" rel="noreferrer">Java 8 バイトコード</a> を必要とします。これは Android Gradle Plugin <code>4.2.0</code> 以降および Kotlin Gradle Plugin <code>1.5.0</code> 以降でデフォルトで有効になっています。これらのプラグインの古いバージョンを使用している場合は、Gradle ビルドスクリプトに以下を追加してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compileOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceCompatibility </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JavaVersion.VERSION_1_8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        targetCompatibility </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JavaVersion.VERSION_1_8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlinOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Coil <code>3.2.0</code> 以降、<code>coil-compose</code> および <code>coil-compose-core</code> には Java 11 バイトコードが必要です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compileOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceCompatibility </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JavaVersion.VERSION_11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        targetCompatibility </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JavaVersion.VERSION_11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlinOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;11&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="開発版スナップショットを入手するにはどうすればよいですか" tabindex="-1">開発版スナップショットを入手するにはどうすればよいですか？ <a class="header-anchor" href="#開発版スナップショットを入手するにはどうすればよいですか" aria-label="Permalink to &quot;開発版スナップショットを入手するにはどうすればよいですか？&quot;">​</a></h2><p>リポジトリリストにスナップショットリポジトリを追加します。</p><p>Gradle (<code>.gradle</code>):</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">allprojects {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    repositories {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        maven { url </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://oss.sonatype.org/content/repositories/snapshots&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Gradle Kotlin DSL (<code>.gradle.kts</code>):</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allprojects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        maven</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://oss.sonatype.org/content/repositories/snapshots&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>次に、<a href="https://github.com/coil-kt/coil/blob/main/gradle.properties#L34" target="_blank" rel="noreferrer">最新のスナップショットバージョン</a> で同じアーティファクトに依存します。</p><p>::: Note スナップショットは、CI をパスした <code>main</code> ブランチの新しいコミットごとにデプロイされます。破壊的変更が含まれていたり、不安定である可能性があります。自己責任でご利用ください。</p><p>:::</p><h2 id="proguard-を-coil-と一緒に使用するにはどうすればよいですか" tabindex="-1">Proguard を Coil と一緒に使用するにはどうすればよいですか？ <a class="header-anchor" href="#proguard-を-coil-と一緒に使用するにはどうすればよいですか" aria-label="Permalink to &quot;Proguard を Coil と一緒に使用するにはどうすればよいですか？&quot;">​</a></h2><p>Coil で Proguard を使用するには、設定に以下のルールを追加してください。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-keep class * extends coil3.util.DecoderServiceLoaderTarget { *; }</span></span>
<span class="line"><span>-keep class * extends coil3.util.FetcherServiceLoaderTarget { *; }</span></span></code></pre></div><p>Ktor、OkHttp、および Coroutines にカスタムルールを追加する必要がある場合もあります。</p><p>::: Note <strong>R8 を使用している場合は Coil にカスタムルールを追加する必要はありません</strong>。R8 は Android のデフォルトのコードシュリンカーです。ルールは自動的に追加されます。 :::</p>`,33)]))}const c=i(t,[["render",l]]);export{E as __pageData,c as default};
