import{_ as s,C as n,c as f,o as p,ag as i,G as a,w as l,j as e,a as r}from"./chunks/framework.Bksy39di.js";const j=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/native-migration-guide.md","filePath":"ja/kotlin/native-migration-guide.md","lastUpdated":1755514048000}'),u={name:"ja/kotlin/native-migration-guide.md"};function k(h,t,g,m,b,v){const d=n("list"),o=n("def"),c=n("deflist");return p(),f("div",null,[t[5]||(t[5]=i('<h1 id="新しいメモリーマネージャーへの移行" tabindex="-1">新しいメモリーマネージャーへの移行 <a class="header-anchor" href="#新しいメモリーマネージャーへの移行" aria-label="Permalink to &quot;新しいメモリーマネージャーへの移行&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>従来のメモリーマネージャーのサポートは、Kotlin 1.9.20で完全に削除されました。プロジェクトを現在のメモリーモデル（Kotlin 1.7.20以降でデフォルトで有効）に移行してください。</p></div><p>このガイドでは、新しい<a href="/ja/kotlin/native-memory-manager">Kotlin/Nativeメモリーマネージャー</a>と従来のマネージャーを比較し、プロジェクトを移行する方法について説明します。</p><p>新しいメモリーマネージャーで最も顕著な変更点は、オブジェクト共有に関する制限が解除されたことです。オブジェクトをスレッド間で共有するためにフリーズする必要がなくなりました。具体的には次のとおりです。</p><ul><li>トップレベルプロパティは、<code>@SharedImmutable</code>を使用せずに、どのスレッドからもアクセスおよび変更できます。</li><li>相互運用経由で渡されるオブジェクトは、フリーズせずに、どのスレッドからもアクセスおよび変更できます。</li><li><code>Worker.executeAfter</code>は、操作がフリーズされている必要がなくなりました。</li><li><code>Worker.execute</code>は、プロデューサーが分離されたオブジェクトサブグラフを返す必要がなくなりました。</li><li><code>AtomicReference</code>および<code>FreezableAtomicReference</code>を含む参照サイクルは、メモリーリークを引き起こしません。</li></ul><p>容易なオブジェクト共有以外にも、新しいメモリーマネージャーには他の主要な変更点があります。</p><ul><li>グローバルプロパティは、それらが定義されているファイルに最初にアクセスされたときに遅延初期化されます。以前は、グローバルプロパティはプログラムの起動時に初期化されていました。回避策として、プログラムの起動時に初期化する必要があるプロパティには、<code>@EagerInitialization</code>アノテーションを付けてマークできます。使用する前に、その<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-eager-initialization/" target="_blank" rel="noreferrer">ドキュメント</a>を確認してください。</li><li><code>by lazy {}</code>プロパティは、スレッドセーフティモードをサポートし、無制限の再帰を処理しません。</li><li><code>Worker.executeAfter</code>の<code>operation</code>から逸脱した例外は、他のランタイム部分と同様に処理されます。ユーザー定義の未処理例外フックを実行しようとするか、フックが見つからないか、フック自体が例外で失敗した場合はプログラムを終了します。</li><li>フリーズは非推奨となり、常に無効化されます。</li></ul><p>従来のメモリーマネージャーからプロジェクトを移行するには、次のガイドラインに従ってください。</p><h2 id="kotlinの更新" tabindex="-1">Kotlinの更新 <a class="header-anchor" href="#kotlinの更新" aria-label="Permalink to &quot;Kotlinの更新&quot;">​</a></h2><p>新しいKotlin/Nativeメモリーマネージャーは、Kotlin 1.7.20以降でデフォルトで有効になっています。Kotlinのバージョンを確認し、必要に応じて<a href="/ja/kotlin/releases#update-to-a-new-kotlin-version">最新版に更新してください</a>。</p><h2 id="依存関係の更新" tabindex="-1">依存関係の更新 <a class="header-anchor" href="#依存関係の更新" aria-label="Permalink to &quot;依存関係の更新&quot;">​</a></h2>',11)),a(c,{style:{}},{default:l(()=>[a(o,{title:"kotlinx.coroutines"},{default:l(()=>[t[1]||(t[1]=e("p",null,[r("バージョン1.6.0以降に更新してください。"),e("code",null,"native-mt"),r("サフィックスの付いたバージョンは使用しないでください。")],-1)),t[2]||(t[2]=e("p",null,"また、新しいメモリーマネージャーには、考慮すべきいくつかの詳細があります。",-1)),a(d,null,{default:l(()=>t[0]||(t[0]=[e("li",null,"フリーズが不要になったため、すべての一般的なプリミティブ（チャネル、フロー、コルーチン）はWorker境界を越えて機能します。",-1),e("li",null,[e("code",null,"Dispatchers.Default"),r("は、LinuxとWindowsではWorkerのプールによって、Appleターゲットではグローバルキューによって支えられています。")],-1),e("li",null,[e("code",null,"newSingleThreadContext"),r("を使用して、Workerによって支えられたコルーチンディスパッチャーを作成してください。")],-1),e("li",null,[e("code",null,"newFixedThreadPoolContext"),r("を使用して、"),e("code",null,"N"),r("個のWorkerのプールによって支えられたコルーチンディスパッチャーを作成してください。")],-1),e("li",null,[e("code",null,"Dispatchers.Main"),r("は、Darwinではメインキューによって、その他のプラットフォームではスタンドアロンWorkerによって支えられています。")],-1)])),_:1})]),_:1}),a(o,{title:"Ktor"},{default:l(()=>t[3]||(t[3]=[r(" バージョン2.0以降に更新してください。 ")])),_:1}),a(o,{title:"その他の依存関係"},{default:l(()=>t[4]||(t[4]=[e("p",null,"ほとんどのライブラリは変更なしで動作するはずですが、例外があるかもしれません。",-1),e("p",null,"依存関係を最新バージョンに更新し、従来のメモリーマネージャーと新しいメモリーマネージャーでライブラリのバージョンに違いがないことを確認してください。",-1)])),_:1})]),_:1}),t[6]||(t[6]=i('<h2 id="コードの更新" tabindex="-1">コードの更新 <a class="header-anchor" href="#コードの更新" aria-label="Permalink to &quot;コードの更新&quot;">​</a></h2><p>新しいメモリーマネージャーをサポートするには、影響を受けるAPIの使用を削除してください。</p><table tabindex="0"><thead><tr><th>古いAPI</th><th>対応</th></tr></thead><tbody><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-shared-immutable/" target="_blank" rel="noreferrer"><code>@SharedImmutable</code></a></td><td>すべての使用箇所を削除できます。ただし、新しいメモリーマネージャーでこのAPIを使用しても警告は表示されません。</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-freezable-atomic-reference/" target="_blank" rel="noreferrer"><code>FreezableAtomicReference</code> クラス</a></td><td>代わりに<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-atomic-reference/" target="_blank" rel="noreferrer"><code>AtomicReference</code></a>を使用してください。</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-freezing-exception/" target="_blank" rel="noreferrer"><code>FreezingException</code> クラス</a></td><td>すべての使用箇所を削除してください。</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-invalid-mutability-exception/" target="_blank" rel="noreferrer"><code>InvalidMutabilityException</code> クラス</a></td><td>すべての使用箇所を削除してください。</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-incorrect-dereference-exception/" target="_blank" rel="noreferrer"><code>IncorrectDereferenceException</code> クラス</a></td><td>すべての使用箇所を削除してください。</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/freeze.html" target="_blank" rel="noreferrer"><code>freeze()</code> 関数</a></td><td>すべての使用箇所を削除してください。</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/is-frozen.html" target="_blank" rel="noreferrer"><code>isFrozen</code> プロパティ</a></td><td>すべての使用箇所を削除できます。フリーズは非推奨であるため、このプロパティは常に<code>false</code>を返します。</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/ensure-never-frozen.html" target="_blank" rel="noreferrer"><code>ensureNeverFrozen()</code> 関数</a></td><td>すべての使用箇所を削除してください。</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/atomic-lazy.html" target="_blank" rel="noreferrer"><code>atomicLazy()</code> 関数</a></td><td>代わりに<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/lazy.html" target="_blank" rel="noreferrer"><code>lazy()</code></a>を使用してください。</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-mutable-data/" target="_blank" rel="noreferrer"><code>MutableData</code> クラス</a></td><td>代わりに通常のコレクションを使用してください。</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-worker-bound-reference/" target="_blank" rel="noreferrer"><code>WorkerBoundReference&lt;out T : Any&gt;</code> クラス</a></td><td><code>T</code>を直接使用してください。</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-detached-object-graph/" target="_blank" rel="noreferrer"><code>DetachedObjectGraph&lt;T&gt;</code> クラス</a></td><td><code>T</code>を直接使用してください。C相互運用経由で値を渡すには、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlinx.cinterop/-stable-ref/" target="_blank" rel="noreferrer">StableRefクラス</a>を使用してください。</td></tr></tbody></table><h2 id="次に行うこと" tabindex="-1">次に行うこと <a class="header-anchor" href="#次に行うこと" aria-label="Permalink to &quot;次に行うこと&quot;">​</a></h2><ul><li><a href="/ja/kotlin/native-memory-manager">新しいメモリーマネージャーについて詳しく学ぶ</a></li><li><a href="/ja/kotlin/native-arc-integration">Swift/Objective-C ARCとの統合の具体例を確認する</a></li><li><a href="/ja/kotlin/native-faq#how-do-i-reference-objects-safely-from-different-coroutines">異なるコルーチンからオブジェクトを安全に参照する方法を学ぶ</a></li></ul>',5))])}const x=s(u,[["render",k]]);export{j as __pageData,x as default};
