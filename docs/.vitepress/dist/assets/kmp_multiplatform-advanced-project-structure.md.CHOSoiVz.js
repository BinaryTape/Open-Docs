import{_ as i,a,b as n,c as e,d as l,e as o,f as p,g as t,h as d,i as c}from"./chunks/ios-compilation-diagram.XqBtYEgD.js";import{_ as h,c as k,o as r,ag as E}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"多平台项目结构的高级概念","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-advanced-project-structure.md","filePath":"kmp/multiplatform-advanced-project-structure.md","lastUpdated":1755516278000}'),m={name:"kmp/multiplatform-advanced-project-structure.md"};function g(u,s,y,F,v,M){return r(),k("div",null,s[0]||(s[0]=[E('<h1 id="多平台项目结构的高级概念" tabindex="-1">多平台项目结构的高级概念 <a class="header-anchor" href="#多平台项目结构的高级概念" aria-label="Permalink to &quot;多平台项目结构的高级概念&quot;">​</a></h1><p>本文解释了 Kotlin Multiplatform 项目结构的高级概念，以及它们如何映射到 Gradle 实现。如果你需要使用 Gradle 构建（配置、任务、发布项等）的低层抽象，或者正在创建用于 Kotlin Multiplatform 构建的 Gradle 插件，这些信息将很有用。</p><p>如果你遇到以下情况，本页可能会有帮助：</p><ul><li>需要在一组目标平台之间共享代码，而 Kotlin 没有为其创建源代码集。</li><li>希望为 Kotlin Multiplatform 构建创建 Gradle 插件，或需要使用 Gradle 构建的低层抽象，例如配置、任务、发布项等。</li></ul><p>在多平台项目中理解依赖管理的关键点之一是，Gradle 风格的项目或库依赖项与 Kotlin 特有的源代码集之间的 <code>dependsOn</code> 关系之间的区别：</p><ul><li><code>dependsOn</code> 是公共源代码集和平台特有的源代码集之间的一种关系，它能够实现<a href="#dependson-and-source-set-hierarchies">源代码集层级结构</a>并普遍实现在多平台项目中共享代码。对于默认源代码集，层级结构是自动管理的，但在特定情况下你可能需要修改它。</li><li>库和项目依赖项通常照常工作，但为了在多平台项目中正确管理它们，你应该理解 <a href="#dependencies-on-other-libraries-or-projects">Gradle 依赖项如何解析</a>为用于编译的细粒度 <strong>源代码集 → 源代码集</strong> 依赖项。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在深入了解高级概念之前，我们建议你先学习<a href="./multiplatform-discover-project">多平台项目结构的基础知识</a>。</p></div><h2 id="dependson-和源代码集层级结构" tabindex="-1">dependsOn 和源代码集层级结构 <a class="header-anchor" href="#dependson-和源代码集层级结构" aria-label="Permalink to &quot;dependsOn 和源代码集层级结构&quot;">​</a></h2><p>通常，你会使用<em>依赖项</em>而不是 <em><code>dependsOn</code></em> 关系。然而，探究 <code>dependsOn</code> 对于理解 Kotlin Multiplatform 项目的底层工作原理至关重要。</p><p><code>dependsOn</code> 是两个 Kotlin 源代码集之间 Kotlin 特有的关系。这可能是公共源代码集和平台特有的源代码集之间的连接，例如，当 <code>jvmMain</code> 源代码集依赖于 <code>commonMain</code> 时，<code>iosArm64Main</code> 依赖于 <code>iosMain</code>，依此类推。</p><p>考虑一个包含 Kotlin 源代码集 <code>A</code> 和 <code>B</code> 的一般示例。表达式 <code>A.dependsOn(B)</code> 告知 Kotlin：</p><ol><li><code>A</code> 观测 <code>B</code> 的 API，包括内部声明。</li><li><code>A</code> 可以为 <code>B</code> 中的 <code>expected</code> 声明提供实际实现。这是一个必要且充分的条件，因为 <code>A</code> 仅在 <code>A.dependsOn(B)</code> 直接或间接存在时，才能为 <code>B</code> 提供 <code>actuals</code>。</li><li><code>B</code> 除了其自身的目标平台外，还应该编译到 <code>A</code> 编译到的所有目标平台。</li><li><code>A</code> 继承 <code>B</code> 的所有常规依赖项。</li></ol><p><code>dependsOn</code> 关系创建了一个树状结构，称为源代码集层级结构。以下是一个典型的移动开发项目示例，包含 <code>androidTarget</code>、<code>iosArm64</code>（iPhone 设备）和 <code>iosSimulatorArm64</code>（Apple Silicon Mac 上的 iPhone 模拟器）：</p><p><img src="'+i+'" alt="dependsOn 树状结构" width="700"></p><p>箭头表示 <code>dependsOn</code> 关系。这些关系在平台二进制文件的编译期间得以保留。这是 Kotlin 理解 <code>iosMain</code> 应该看到 <code>commonMain</code> 的 API 而不是 <code>iosArm64Main</code> 的方式：</p><p><img src="'+a+`" alt="编译期间的 dependsOn 关系" width="700"></p><p><code>dependsOn</code> 关系通过 <code>KotlinSourceSet.dependsOn(KotlinSourceSet)</code> 调用进行配置，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 目标平台声明</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 配置 dependsOn 关系的示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        iosArm64Main.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>此示例展示了如何在构建脚本中定义 <code>dependsOn</code> 关系。然而，Kotlin Gradle 插件默认会创建源代码集并设置这些关系，因此你无需手动操作。</li><li><code>dependsOn</code> 关系在构建脚本中与 <code>dependencies {}</code> 代码块分开声明。这是因为 <code>dependsOn</code> 不是一个常规依赖项；相反，它是 Kotlin 源代码集之间的一种特定关系，对于在不同目标平台之间共享代码是必要的。</li></ul><p>你不能使用 <code>dependsOn</code> 来声明对已发布的库或另一个 Gradle 项目的常规依赖项。例如，你不能设置 <code>commonMain</code> 来依赖 <code>kotlinx-coroutines-core</code> 库的 <code>commonMain</code>，也不能调用 <code>commonTest.dependsOn(commonMain)</code>。</p><h3 id="声明自定义源代码集" tabindex="-1">声明自定义源代码集 <a class="header-anchor" href="#声明自定义源代码集" aria-label="Permalink to &quot;声明自定义源代码集&quot;">​</a></h3><p>在某些情况下，你可能需要在项目中拥有一个自定义的中间源代码集。考虑一个编译到 JVM、JS 和 Linux 的项目，并且你只想在 JVM 和 JS 之间共享一些源代码。在这种情况下，你应该找到这对目标平台特有的源代码集，如<a href="./multiplatform-discover-project">多平台项目结构的基础知识</a>中所述。</p><p>Kotlin 不会自动创建这样的源代码集。这意味着你应该使用 <code>by creating</code> 构造手动创建它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 创建名为 &quot;jvmAndJs&quot; 的源代码集</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmAndJsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ……</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然而，Kotlin 仍然不知道如何处理或编译此源代码集。如果你绘制图表，此源代码集将是隔离的，并且不会带有任何目标平台标签：</p><p><img src="`+n+`" alt="缺失的 dependsOn 关系" width="700"></p><p>要解决此问题，请通过添加多个 <code>dependsOn</code> 关系将 <code>jvmAndJsMain</code> 包含到层级结构中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmAndJsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 不要忘记将 commonMain 添加到 dependsOn</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        jvmMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jvmAndJsMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        jsMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jvmAndJsMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这里，<code>jvmMain.dependsOn(jvmAndJsMain)</code> 将 JVM 目标平台添加到 <code>jvmAndJsMain</code>，而 <code>jsMain.dependsOn(jvmAndJsMain)</code> 将 JS 目标平台添加到 <code>jvmAndJsMain</code>。</p><p>最终的项目结构将如下所示：</p><p><img src="`+e+`" alt="最终的项目结构" width="700"></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>手动配置 <code>dependsOn</code> 关系会禁用默认层级结构模板的自动应用。关于此类情况以及如何处理它们，请参见<a href="./multiplatform-hierarchy#additional-configuration">额外配置</a>。</p></div><h2 id="对其他库或项目的依赖项" tabindex="-1">对其他库或项目的依赖项 <a class="header-anchor" href="#对其他库或项目的依赖项" aria-label="Permalink to &quot;对其他库或项目的依赖项&quot;">​</a></h2><p>在多平台项目中，你可以设置对已发布的库或另一个 Gradle 项目的常规依赖项。</p><p>Kotlin Multiplatform 通常以典型的 Gradle 方式声明依赖项。与 Gradle 类似，你：</p><ul><li>在构建脚本中使用 <code>dependencies {}</code> 代码块。</li><li>为依赖项选择适当的作用域，例如，<code>implementation</code> 或 <code>api</code>。</li><li>通过指定其坐标（如果它已在版本库中发布，例如 <code>&quot;com.google.guava:guava:32.1.2-jre&quot;</code>），或其路径（如果它是同一构建中的 Gradle 项目，例如 <code>project(&quot;:utils:concurrency&quot;)</code>）来引用依赖项。</li></ul><p>多平台项目中的依赖项配置有一些特殊特性。每个 Kotlin 源代码集都有其自身的 <code>dependencies {}</code> 代码块。这允许你在平台特有的源代码集中声明平台特有的依赖项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 目标平台声明</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 这是 jvmMain 的依赖项，因此添加 JVM 特有的依赖项是允许的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.guava:guava:32.1.2-jre&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>公共依赖项更复杂。考虑一个多平台项目，它声明了对多平台库的依赖项，例如 <code>kotlinx.coroutines</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Android</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iPhone 设备</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Apple Silicon Mac 上的 iPhone 模拟器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>依赖项解析中有三个重要概念：</p><ol><li><p>多平台依赖项会向下传播到 <code>dependsOn</code> 结构。当你将依赖项添加到 <code>commonMain</code> 时，它将自动添加到所有直接或间接在 <code>commonMain</code> 中声明 <code>dependsOn</code> 关系的源代码集。</p><p>在这种情况下，该依赖项确实已自动添加到所有 <code>*Main</code> 源代码集：<code>iosMain</code>、<code>jvmMain</code>、<code>iosSimulatorArm64Main</code> 和 <code>iosX64Main</code>。所有这些源代码集都从 <code>commonMain</code> 源代码集继承了 <code>kotlin-coroutines-core</code> 依赖项，因此你无需手动在所有这些源代码集中复制粘贴它：</p><p><img src="`+l+'" alt="多平台依赖项的传播" width="700"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>传播机制允许你通过选择特定的源代码集来选择将接收声明依赖项的作用域。例如，如果你只想在 iOS 上使用 <code>kotlinx.coroutines</code> 而不在 Android 上使用，则可以仅将此依赖项添加到 <code>iosMain</code>。</p></div></li><li><p><em>源代码集 → 多平台库</em> 依赖项，例如上面 <code>commonMain</code> 到 <code>org.jetbrians.kotlinx:kotlinx-coroutines-core:1.7.3</code>，表示依赖项解析的中间状态。解析的最终状态始终由 <em>源代码集 → 源代码集</em> 依赖项表示。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>最终的 <em>源代码集 → 源代码集</em> 依赖项不是 <code>dependsOn</code> 关系。</p></div><p>为了推断细粒度的 <em>源代码集 → 源代码集</em> 依赖项，Kotlin 会读取与每个多平台库一同发布的源代码集结构。在此步骤之后，每个库在内部将不作为一个整体表示，而作为其源代码集的集合表示。请参见 <code>kotlinx-coroutines-core</code> 的此示例：</p><p><img src="'+o+'" alt="源代码集结构的序列化" width="700"></p></li><li><p>Kotlin 获取每个依赖关系并将其解析为来自依赖项的源代码集集合。该集合中的每个依赖源代码集必须具有_兼容的目标平台_。如果依赖源代码集编译到_至少与消费者源代码集相同_的目标平台，则它具有兼容的目标平台。</p><p>考虑一个示例，其中示例项目中的 <code>commonMain</code> 编译到 <code>androidTarget</code>、<code>iosX64</code> 和 <code>iosSimulatorArm64</code>：</p><ul><li>首先，它解析对 <code>kotlinx-coroutines-core.commonMain</code> 的依赖项。发生这种情况是因为 <code>kotlinx-coroutines-core</code> 编译到所有可能的 Kotlin 目标平台。因此，它的 <code>commonMain</code> 编译到所有可能的目标平台，包括所需的 <code>androidTarget</code>、<code>iosX64</code> 和 <code>iosSimulatorArm64</code>。</li><li>其次，<code>commonMain</code> 依赖于 <code>kotlinx-coroutines-core.concurrentMain</code>。由于 <code>kotlinx-coroutines-core</code> 中的 <code>concurrentMain</code> 编译到除 JS 之外的所有目标平台，因此它匹配消费者项目的 <code>commonMain</code> 的目标平台。</li></ul><p>然而，来自 coroutines 的 <code>iosX64Main</code> 等源代码集与消费者的 <code>commonMain</code> 不兼容。即使 <code>iosX64Main</code> 编译到 <code>commonMain</code> 的其中一个目标平台，即 <code>iosX64</code>，它既不编译到 <code>androidTarget</code> 也不编译到 <code>iosSimulatorArm64</code>。</p><p>依赖项解析的结果直接影响 <code>kotlinx-coroutines-core</code> 中哪些代码可见：</p><p><img src="'+p+'" alt="公共代码中 JVM 特有的 API 错误" width="700"></p></li></ol><h3 id="在源代码集之间对齐公共依赖项的版本" tabindex="-1">在源代码集之间对齐公共依赖项的版本 <a class="header-anchor" href="#在源代码集之间对齐公共依赖项的版本" aria-label="Permalink to &quot;在源代码集之间对齐公共依赖项的版本&quot;">​</a></h3><p>在 Kotlin Multiplatform 项目中，公共源代码集会多次编译以生成 klib，并作为每个已配置<a href="./multiplatform-configure-compilations">编译项</a>的一部分。为了生成一致的二进制文件，公共代码每次都应该针对相同版本的多平台依赖项进行编译。Kotlin Gradle 插件有助于对齐这些依赖项，确保每个源代码集的有效依赖项版本相同。</p><p>在上面的示例中，假设你想将 <code>androidx.navigation:navigation-compose:2.7.7</code> 依赖项添加到你的 <code>androidMain</code> 源代码集。你的项目为 <code>commonMain</code> 源代码集显式声明了 <code>kotlinx-coroutines-core:1.7.3</code> 依赖项，但 Compose Navigation 库 2.7.7 版本需要 Kotlin coroutines 1.8.0 或更高版本。</p><p>由于 <code>commonMain</code> 和 <code>androidMain</code> 是一同编译的，Kotlin Gradle 插件会在两个版本的 coroutines 库之间进行选择，并将 <code>kotlinx-coroutines-core:1.8.0</code> 应用于 <code>commonMain</code> 源代码集。但是为了使公共代码在所有已配置目标平台之间一致地编译，iOS 源代码集也需要被约束到相同的依赖项版本。因此 Gradle 会将 <code>kotlinx.coroutines-*:1.8.0</code> 依赖项也传播到 <code>iosMain</code> 源代码集。</p><p><img src="'+t+'" alt="*Main 源代码集之间的依赖项对齐" width="700"></p><p>依赖项在 <code>*Main</code> 源代码集和 <a href="./multiplatform-discover-project#integration-with-tests"><code>*Test</code> 源代码集</a>之间单独对齐。<code>*Test</code> 源代码集的 Gradle 配置包含 <code>*Main</code> 源代码集的所有依赖项，但反之则不然。因此，你可以使用更新的库版本测试你的项目，而不会影响你的主代码。</p><p>例如，你的 <code>*Main</code> 源代码集中有 Kotlin coroutines 1.7.3 依赖项，它已传播到项目中的每个源代码集。然而，在 <code>iosTest</code> 源代码集中，你决定将版本升级到 1.8.0 以测试新的库发布。根据相同的算法，此依赖项将传播到 <code>*Test</code> 源代码集树的整个部分，因此每个 <code>*Test</code> 源代码集都将使用 <code>kotlinx.coroutines-*:1.8.0</code> 依赖项进行编译。</p><p><img src="'+d+'" alt="测试源代码集独立于主源代码集解析依赖项"></p><h2 id="编译项" tabindex="-1">编译项 <a class="header-anchor" href="#编译项" aria-label="Permalink to &quot;编译项&quot;">​</a></h2><p>与单平台项目相反，Kotlin Multiplatform 项目需要多次启动编译器来构建所有构件。每次编译器启动都是一次 <em>Kotlin 编译项</em>。</p><p>例如，下面是前面提到的此 Kotlin 编译项期间如何生成适用于 iPhone 设备的二进制文件：</p><p><img src="'+c+`" alt="适用于 iOS 的 Kotlin 编译项" width="700"></p><p>Kotlin 编译项归类在目标平台下。默认情况下，Kotlin 为每个目标平台创建两个编译项，即用于生产源代码的 <code>main</code> 编译项和用于测试源代码的 <code>test</code> 编译项。</p><p>构建脚本中的编译项以类似的方式访问。你首先选择一个 Kotlin 目标平台，然后访问其中的 <code>compilations</code> 容器，最后根据其名称选择所需的编译项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 声明并配置 JVM 目标平台</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mainCompilation: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinJvmCompilation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,57)]))}const B=h(m,[["render",g]]);export{C as __pageData,B as default};
