import{_ as p,C as a,c as h,o as k,j as i,G as n,ag as r,a as e,w as d}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"텍스트 및 문자 세트","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-text-and-charsets.md","filePath":"ko/ktor/client-text-and-charsets.md","lastUpdated":1755457140000}'),o={name:"ko/ktor/client-text-and-charsets.md"};function c(E,s,g,y,_,C){const t=a("tip"),l=a("primary-label");return k(),h("div",null,[s[1]||(s[1]=i("h1",{id:"텍스트-및-문자-세트",tabindex:"-1"},[e("텍스트 및 문자 세트 "),i("a",{class:"header-anchor",href:"#텍스트-및-문자-세트","aria-label":'Permalink to "텍스트 및 문자 세트"'},"​")],-1)),n(t,null,{default:d(()=>s[0]||(s[0]=[e(" 이 도움말 항목은 개발 중이며 향후 업데이트될 예정입니다. ")])),_:1}),n(l,{ref:"client-plugin"},null,512),s[2]||(s[2]=r(`<p>이 플러그인은 요청 및 응답의 일반 텍스트 콘텐츠를 처리할 수 있도록 해줍니다. 즉, 등록된 문자 세트로 <code>Accept</code> 헤더를 채우고, <code>ContentType</code> 문자 세트에 따라 요청 본문을 인코딩하고 응답 본문을 디코딩합니다.</p><h2 id="구성" tabindex="-1">구성 <a class="header-anchor" href="#구성" aria-label="Permalink to &quot;구성&quot;">​</a></h2><p>구성 또는 HTTP 호출 속성에서 구성이 지정되지 않은 경우, <code>Charsets.UTF_8</code>이 기본적으로 사용됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpClientEngine) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Charsets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Allow using \`UTF_8\`.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Charsets.UTF_8)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Allow using \`ISO_8859_1\` with quality 0.1.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Charsets.ISO_8859_1, quality</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Specify Charset to send request(if no charset in request headers).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sendCharset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Specify Charset to receive response(if no charset in response headers).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        responseCharsetFallback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,4))])}const F=p(o,[["render",c]]);export{A as __pageData,F as default};
