import{_ as d,C as h,c as E,o as r,ag as p,j as s,G as n,a,w as l}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/dokka-cli.md","filePath":"kotlin/dokka-cli.md","lastUpdated":1754307826000}'),u={name:"kotlin/dokka-cli.md"},g={tabindex:"0"};function F(y,i,c,C,q,B){const o=h("anchor"),t=h("def"),e=h("list"),k=h("deflist");return r(),E("div",null,[i[84]||(i[84]=p("",49)),s("table",g,[i[22]||(i[22]=s("thead",null,[s("tr",null,[s("th",null,"选项"),s("th",null,"描述")])],-1)),s("tbody",null,[i[2]||(i[2]=s("tr",null,[s("td",null,[s("code",null,"sourceSetName")]),s("td",null,"源代码集的名称。")],-1)),i[3]||(i[3]=s("tr",null,[s("td",null,[s("code",null,"displayName")]),s("td",null,"源代码集的显示名称，内部和外部均使用。")],-1)),i[4]||(i[4]=s("tr",null,[s("td",null,[s("code",null,"classpath")]),s("td",null,"用于分析和交互式示例的 Classpath。接受以分号分隔的多个路径。")],-1)),i[5]||(i[5]=s("tr",null,[s("td",null,[s("code",null,"src")]),s("td",null,"要分析和文档化的源代码根目录。接受以分号分隔的多个路径。")],-1)),i[6]||(i[6]=s("tr",null,[s("td",null,[s("code",null,"dependentSourceSets")]),s("td",null,[a("依赖源代码集的名称，格式为 "),s("code",null,"moduleName/sourceSetName"),a("。接受以分号分隔的多个值。")])],-1)),s("tr",null,[i[1]||(i[1]=s("td",null,[s("code",null,"samples")],-1)),s("td",null,[i[0]||(i[0]=a("包含示例函数的目录或文件列表。接受以分号分隔的多个路径。 ")),n(o,{name:"includes-cli"})])]),i[7]||(i[7]=s("tr",null,[s("td",null,[s("code",null,"includes")]),s("td",null,[a("包含 "),s("a",{href:"/kotlin/dokka-module-and-package-docs"},"模块和包文档"),a(" 的 Markdown 文件。接受以分号分隔的多个路径。")])],-1)),i[8]||(i[8]=s("tr",null,[s("td",null,[s("code",null,"documentedVisibilities")]),s("td",null,[a("要文档化的可见性。接受以分号分隔的多个值。可能的值："),s("code",null,"PUBLIC"),a("、"),s("code",null,"PRIVATE"),a("、"),s("code",null,"PROTECTED"),a("、"),s("code",null,"INTERNAL"),a("、"),s("code",null,"PACKAGE"),a("。")])],-1)),i[9]||(i[9]=s("tr",null,[s("td",null,[s("code",null,"reportUndocumented")]),s("td",null,"是否报告未文档化的声明。")],-1)),i[10]||(i[10]=s("tr",null,[s("td",null,[s("code",null,"noSkipEmptyPackages")]),s("td",null,"是否为不含任何内容的包创建页面。")],-1)),i[11]||(i[11]=s("tr",null,[s("td",null,[s("code",null,"skipDeprecated")]),s("td",null,"是否跳过已弃用的声明。")],-1)),i[12]||(i[12]=s("tr",null,[s("td",null,[s("code",null,"jdkVersion")]),s("td",null,"用于链接到 JDK Javadoc 的 JDK 版本。")],-1)),i[13]||(i[13]=s("tr",null,[s("td",null,[s("code",null,"languageVersion")]),s("td",null,"用于设置分析和示例的语言版本。")],-1)),i[14]||(i[14]=s("tr",null,[s("td",null,[s("code",null,"apiVersion")]),s("td",null,"用于设置分析和示例的 Kotlin API 版本。")],-1)),i[15]||(i[15]=s("tr",null,[s("td",null,[s("code",null,"noStdlibLink")]),s("td",null,"是否生成指向 Kotlin 标准库的链接。")],-1)),i[16]||(i[16]=s("tr",null,[s("td",null,[s("code",null,"noJdkLink")]),s("td",null,"是否生成指向 JDK Javadoc 的链接。")],-1)),i[17]||(i[17]=s("tr",null,[s("td",null,[s("code",null,"suppressedFiles")]),s("td",null,"要抑制的文件的路径。接受以分号分隔的多个路径。")],-1)),i[18]||(i[18]=s("tr",null,[s("td",null,[s("code",null,"analysisPlatform")]),s("td",null,"用于设置分析的平台。")],-1)),i[19]||(i[19]=s("tr",null,[s("td",null,[s("code",null,"perPackageOptions")]),s("td",null,[a("包源代码集配置列表，格式为 "),s("code",null,"matchingRegexp,-deprecated,-privateApi,+warnUndocumented,+suppress;..."),a("。接受以分号分隔的多个值。")])],-1)),i[20]||(i[20]=s("tr",null,[s("td",null,[s("code",null,"externalDocumentationLinks")]),s("td",null,[a("外部文档链接，格式为 "),s("code",null,"{url}^{packageListUrl}"),a("。接受以 "),s("code",null,"^^"),a(" 分隔的多个值。")])],-1)),i[21]||(i[21]=s("tr",null,[s("td",null,[s("code",null,"srcLink")]),s("td",null,"源目录与用于浏览代码的 Web 服务之间的映射。接受以分号分隔的多个路径。")],-1))])]),i[85]||(i[85]=p("",4)),n(k,{collapsible:"true"},{default:l(()=>[n(t,{title:"moduleName"},{default:l(()=>i[23]||(i[23]=[s("p",null,"用于指代模块的显示名称。它用于目录、导航、日志记录等。",-1),s("p",null,[a("默认值："),s("code",null,"root")],-1)])),_:1}),n(t,{title:"moduleVersion"},{default:l(()=>i[24]||(i[24]=[s("p",null,"模块版本。",-1),s("p",null,"默认值：空",-1)])),_:1}),n(t,{title:"outputDirectory"},{default:l(()=>i[25]||(i[25]=[s("p",null,"生成文档的目录，不依赖于输出格式。",-1),s("p",null,[a("默认值："),s("code",null,"./dokka")],-1)])),_:1}),n(t,{title:"failOnWarning"},{default:l(()=>i[26]||(i[26]=[s("p",null," 如果 Dokka 发出警告或错误，是否使文档生成失败。 该过程会先等待所有错误和警告发出完毕。 ",-1),s("p",null,[a("此设置与 "),s("code",null,"reportUndocumented"),a(" 配合良好。")],-1),s("p",null,[a("默认值："),s("code",null,"false")],-1)])),_:1}),n(t,{title:"suppressObviousFunctions"},{default:l(()=>[i[28]||(i[28]=s("p",null,"是否抑制明显函数。",-1)),i[29]||(i[29]=a(" 如果函数符合以下条件，则被认为是明显的： ")),n(e,null,{default:l(()=>i[27]||(i[27]=[s("li",null,[a(" 从 "),s("code",null,"kotlin.Any"),a("、"),s("code",null,"Kotlin.Enum"),a("、"),s("code",null,"java.lang.Object"),a(" 或 "),s("code",null,"java.lang.Enum"),a(" 继承的函数，例如 "),s("code",null,"equals"),a("、"),s("code",null,"hashCode"),a("、"),s("code",null,"toString"),a("。 ")],-1),s("li",null,[a(" 合成的（由编译器生成）且没有任何文档的函数，例如 "),s("code",null,"dataClass.componentN"),a(" 或 "),s("code",null,"dataClass.copy"),a("。 ")],-1)])),_:1}),i[30]||(i[30]=s("p",null,[a("默认值："),s("code",null,"true")],-1))]),_:1}),n(t,{title:"suppressInheritedMembers"},{default:l(()=>i[31]||(i[31]=[s("p",null,"是否抑制给定类中未显式覆盖的继承成员。",-1),s("p",null,[a(" 注意：这可以抑制 "),s("code",null,"equals"),a(" / "),s("code",null,"hashCode"),a(" / "),s("code",null,"toString"),a(" 等函数， 但不能抑制 "),s("code",null,"dataClass.componentN"),a(" 和 "),s("code",null,"dataClass.copy"),a(" 等合成函数。为此请使用 "),s("code",null,"suppressObviousFunctions"),a("。 ")],-1),s("p",null,[a("默认值："),s("code",null,"false")],-1)])),_:1}),n(t,{title:"offlineMode"},{default:l(()=>[n(o,{name:"includes-json"}),i[32]||(i[32]=s("p",null,"是否通过网络解析远程文件/链接。",-1)),i[33]||(i[33]=s("p",null," 这包括用于生成外部文档链接的包列表。 例如，使标准库中的类可点击。 ",-1)),i[34]||(i[34]=s("p",null,[a(" 将其设置为 "),s("code",null,"true"),a(" 在某些情况下可以显著加快构建时间， 但也可能降低文档质量和用户体验。例如，不解析来自您的依赖项（包括标准库）的类/成员链接。 ")],-1)),i[35]||(i[35]=s("p",null,[a(" 注意：您可以将获取的文件本地缓存，并将其作为本地路径提供给 Dokka。请参见 "),s("code",null,"externalDocumentationLinks"),a(" 部分。 ")],-1)),i[36]||(i[36]=s("p",null,[a("默认值："),s("code",null,"false")],-1))]),_:1}),n(t,{title:"includes"},{default:l(()=>i[37]||(i[37]=[s("p",null,[a(" 包含 "),s("a",{href:"/kotlin/dokka-module-and-package-docs"},"模块和包文档"),a(" 的 Markdown 文件列表。 ")],-1),s("p",null,"指定文件的内容将被解析并嵌入到文档中，作为模块和包的描述。",-1),s("p",null,"这可以按包进行配置。",-1)])),_:1}),n(t,{title:"sourceSets"},{default:l(()=>i[38]||(i[38]=[s("p",null,[a(" Kotlin "),s("a",{href:"https://kotlinlang.org/docs/multiplatform-discover-project.html#source-sets"},"源代码集"),a(" 的单独和额外配置。 ")],-1),s("p",null,[a("有关可能选项的列表，请参见 "),s("a",{href:"#source-set-configuration"},"源代码集配置"),a("。")],-1)])),_:1}),n(t,{title:"sourceLinks"},{default:l(()=>i[39]||(i[39]=[s("p",null,"应用于所有源代码集的全局源链接配置。",-1),s("p",null,[a("有关可能选项的列表，请参见 "),s("a",{href:"#source-link-configuration"},"源链接配置"),a("。")],-1)])),_:1}),n(t,{title:"perPackageOptions"},{default:l(()=>i[40]||(i[40]=[s("p",null,"无论包位于哪个源代码集，均对其进行全局匹配配置。",-1),s("p",null,[a("有关可能选项的列表，请参见 "),s("a",{href:"#per-package-configuration"},"每包配置"),a("。")],-1)])),_:1}),n(t,{title:"externalDocumentationLinks"},{default:l(()=>i[41]||(i[41]=[s("p",null,"无论外部文档链接在哪个源代码集中使用，均对其进行全局配置。",-1),s("p",null,[a("有关可能选项的列表，请参见 "),s("a",{href:"#external-documentation-links-configuration"},"外部文档链接配置"),a("。")],-1)])),_:1}),n(t,{title:"pluginsClasspath"},{default:l(()=>i[42]||(i[42]=[s("p",null,"包含 Dokka 插件及其依赖项的 JAR 文件列表。",-1)])),_:1})]),_:1}),i[86]||(i[86]=p("",3)),n(k,{collapsible:"true"},{default:l(()=>[n(t,{title:"displayName"},{default:l(()=>i[43]||(i[43]=[s("p",null,"用于指代此源代码集的显示名称。",-1),s("p",null,[a(" 该名称既用于外部（例如，源代码集名称对文档读者可见），也用于内部（例如，用于 "),s("code",null,"reportUndocumented"),a(" 的日志消息）。 ")],-1),s("p",null,"如果没有更好的替代方案，可以使用平台名称。",-1)])),_:1}),n(t,{title:"sourceSetID"},{default:l(()=>i[44]||(i[44]=[s("p",null,"源代码集的技术 ID",-1)])),_:1}),n(t,{title:"documentedVisibilities"},{default:l(()=>[i[46]||(i[46]=s("p",null,"应文档化的可见性修饰符集合。",-1)),i[47]||(i[47]=s("p",null,[a(" 这可用于文档化 "),s("code",null,"protected"),a("/"),s("code",null,"internal"),a("/"),s("code",null,"private"),a(" 声明， 以及在只想文档化内部 API 时排除 "),s("code",null,"public"),a(" 声明。 ")],-1)),i[48]||(i[48]=s("p",null,"这可以按包进行配置。",-1)),i[49]||(i[49]=s("p",null," 可能的值：",-1)),n(e,null,{default:l(()=>i[45]||(i[45]=[s("li",null,[s("code",null,"PUBLIC")],-1),s("li",null,[s("code",null,"PRIVATE")],-1),s("li",null,[s("code",null,"PROTECTED")],-1),s("li",null,[s("code",null,"INTERNAL")],-1),s("li",null,[s("code",null,"PACKAGE")],-1)])),_:1}),i[50]||(i[50]=s("p",null,[a("默认值："),s("code",null,"PUBLIC")],-1))]),_:1}),n(t,{title:"reportUndocumented"},{default:l(()=>i[51]||(i[51]=[s("p",null,[a(" 是否对可见的未文档化声明发出警告，即在经过 "),s("code",null,"documentedVisibilities"),a(" 和其他过滤器过滤后没有 KDoc 的声明。 ")],-1),s("p",null,[a("此设置与 "),s("code",null,"failOnWarning"),a(" 配合良好。")],-1),s("p",null,"这可以按包进行配置。",-1),s("p",null,[a("默认值："),s("code",null,"false")],-1)])),_:1}),n(t,{title:"skipEmptyPackages"},{default:l(()=>i[52]||(i[52]=[s("p",null," 在应用各种过滤器后，是否跳过不包含任何可见声明的包。 ",-1),s("p",null,[a(" 例如，如果 "),s("code",null,"skipDeprecated"),a(" 设置为 "),s("code",null,"true"),a(" 且您的包只包含已弃用的声明，则该包被视为空。 ")],-1),s("p",null,[a("CLI 运行器的默认值为 "),s("code",null,"false"),a("。")],-1)])),_:1}),n(t,{title:"skipDeprecated"},{default:l(()=>i[53]||(i[53]=[s("p",null,[a("是否文档化使用 "),s("code",null,"@Deprecated"),a(" 注解的声明。")],-1),s("p",null,"这可以按包进行配置。",-1),s("p",null,[a("默认值："),s("code",null,"false")],-1)])),_:1}),n(t,{title:"jdkVersion"},{default:l(()=>i[54]||(i[54]=[s("p",null,"为 Java 类型生成外部文档链接时使用的 JDK 版本。",-1),s("p",null,[a(" 例如，如果您在某个公共声明签名中使用 "),s("code",null,"java.util.UUID"),a("， 并且此选项设置为 "),s("code",null,"8"),a("，Dokka 将为其生成一个指向 "),s("a",{href:"https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html"},"JDK 8 Javadoc"),a(" 的外部文档链接。 ")],-1)])),_:1}),n(t,{title:"languageVersion"},{default:l(()=>i[55]||(i[55]=[s("p",null,[a(" 用于设置分析和 "),s("a",{href:"https://kotlinlang.org/docs/kotlin-doc.html#sample-identifier"},"@sample"),a(" 环境的 "),s("a",{href:"https://kotlinlang.org/docs/compatibility-modes.html"},"Kotlin 语言版本"),a("。 ")],-1)])),_:1}),n(t,{title:"apiVersion"},{default:l(()=>i[56]||(i[56]=[s("p",null,[a(" 用于设置分析和 "),s("a",{href:"https://kotlinlang.org/docs/kotlin-doc.html#sample-identifier"},"@sample"),a(" 环境的 "),s("a",{href:"https://kotlinlang.org/docs/compatibility-modes.html"},"Kotlin API 版本"),a("。 ")],-1)])),_:1}),n(t,{title:"noStdlibLink"},{default:l(()=>i[57]||(i[57]=[s("p",null," 是否生成指向 Kotlin 标准库 API 参考文档的外部文档链接。 ",-1),s("p",null,[a("注意：当 "),s("code",null,"noStdLibLink"),a(" 设置为 "),s("code",null,"false"),a(" 时，链接"),s("b",null,"会"),a("被生成。")],-1),s("p",null,[a("默认值："),s("code",null,"false")],-1)])),_:1}),n(t,{title:"noJdkLink"},{default:l(()=>i[58]||(i[58]=[s("p",null,"是否生成指向 JDK Javadoc 的外部文档链接。",-1),s("p",null,[a("JDK Javadoc 的版本由 "),s("code",null,"jdkVersion"),a(" 选项确定。")],-1),s("p",null,[a("注意：当 "),s("code",null,"noJdkLink"),a(" 设置为 "),s("code",null,"false"),a(" 时，链接"),s("b",null,"会"),a("被生成。")],-1),s("p",null,[a("默认值："),s("code",null,"false")],-1)])),_:1}),n(t,{title:"includes"},{default:l(()=>i[59]||(i[59]=[s("p",null,[a(" 包含 "),s("a",{href:"/kotlin/dokka-module-and-package-docs"},"模块和包文档"),a(" 的 Markdown 文件列表。 ")],-1),s("p",null,"指定文件的内容将被解析并嵌入到文档中，作为模块和包的描述。",-1)])),_:1}),n(t,{title:"analysisPlatform"},{default:l(()=>[i[61]||(i[61]=s("p",null,[a(" 用于设置代码分析和 "),s("a",{href:"https://kotlinlang.org/docs/kotlin-doc.html#sample-identifier"},"@sample"),a(" 环境的平台。 ")],-1)),i[62]||(i[62]=s("p",null," 可能的值：",-1)),n(e,null,{default:l(()=>i[60]||(i[60]=[s("li",null,[s("code",null,"jvm")],-1),s("li",null,[s("code",null,"common")],-1),s("li",null,[s("code",null,"js")],-1),s("li",null,[s("code",null,"native")],-1)])),_:1})]),_:1}),n(t,{title:"sourceRoots"},{default:l(()=>i[63]||(i[63]=[s("p",null,[a(" 要分析和文档化的源代码根目录。 可接受的输入是目录和单独的 "),s("code",null,".kt"),a(" / "),s("code",null,".java"),a(" 文件。 ")],-1)])),_:1}),n(t,{title:"classpath"},{default:l(()=>i[64]||(i[64]=[s("p",null,"用于分析和交互式示例的 Classpath。",-1),s("p",null,"如果来自依赖项的某些类型未自动解析/识别，此选项会很有用。",-1),s("p",null,[a("此选项接受 "),s("code",null,".jar"),a(" 和 "),s("code",null,".klib"),a(" 文件。")],-1)])),_:1}),n(t,{title:"samples"},{default:l(()=>i[65]||(i[65]=[s("p",null,[a(" 包含示例函数的目录或文件列表，这些函数通过 "),s("a",{href:"https://kotlinlang.org/docs/kotlin-doc.html#sample-identifier"},"@sample"),a(" KDoc 标签引用。 ")],-1)])),_:1}),n(t,{title:"suppressedFiles"},{default:l(()=>i[66]||(i[66]=[s("p",null,"生成文档时要抑制的文件。",-1)])),_:1}),n(t,{title:"sourceLinks"},{default:l(()=>i[67]||(i[67]=[s("p",null,"仅应用于此源代码集的源链接参数集。",-1),s("p",null,[a("有关可能选项的列表，请参见 "),s("a",{href:"#source-link-configuration"},"源链接配置"),a("。")],-1)])),_:1}),n(t,{title:"perPackageOptions"},{default:l(()=>i[68]||(i[68]=[s("p",null,"此源代码集中匹配包特有的参数集。",-1),s("p",null,[a("有关可能选项的列表，请参见 "),s("a",{href:"#per-package-configuration"},"每包配置"),a("。")],-1)])),_:1}),n(t,{title:"externalDocumentationLinks"},{default:l(()=>i[69]||(i[69]=[s("p",null,"仅应用于此源代码集的外部文档链接参数集。",-1),s("p",null,[a("有关可能选项的列表，请参见 "),s("a",{href:"#external-documentation-links-configuration"},"外部文档链接配置"),a("。")],-1)])),_:1})]),_:1}),i[87]||(i[87]=p("",6)),n(k,{collapsible:"true"},{default:l(()=>[n(t,{title:"localDirectory"},{default:l(()=>i[70]||(i[70]=[s("p",null,"本地源目录的路径。",-1)])),_:1}),n(t,{title:"remoteUrl"},{default:l(()=>i[71]||(i[71]=[s("p",null," 源代码托管服务的 URL，可供文档读者访问，例如 GitHub、GitLab、Bitbucket 等。此 URL 用于生成声明的源代码链接。 ",-1)])),_:1}),n(t,{title:"remoteLineSuffix"},{default:l(()=>[i[73]||(i[73]=s("p",null," 用于将源代码行号附加到 URL 的后缀。这有助于读者不仅导航到文件，还可以导航到声明的特定行号。 ",-1)),i[74]||(i[74]=s("p",null,[a(" 数字本身将附加到指定的后缀。例如， 如果此选项设置为 "),s("code",null,"#L"),a(" 且行号为 10，则生成的 URL 后缀 为 "),s("code",null,"#L10"),a("。 ")],-1)),i[75]||(i[75]=s("p",null," 常用服务的后缀：",-1)),n(e,null,{default:l(()=>i[72]||(i[72]=[s("li",null,[a("GitHub："),s("code",null,"#L")],-1),s("li",null,[a("GitLab："),s("code",null,"#L")],-1),s("li",null,[a("Bitbucket："),s("code",null,"#lines-")],-1)])),_:1}),i[76]||(i[76]=s("p",null,"默认值：空（无后缀）",-1))]),_:1})]),_:1}),i[88]||(i[88]=p("",4)),n(k,{collapsible:"true"},{default:l(()=>[n(t,{title:"matchingRegex"},{default:l(()=>i[77]||(i[77]=[s("p",null,"用于匹配包的正则表达式。",-1)])),_:1}),n(t,{title:"suppress"},{default:l(()=>i[78]||(i[78]=[s("p",null,"生成文档时是否应跳过此包。",-1),s("p",null,[a("默认值："),s("code",null,"false")],-1)])),_:1}),n(t,{title:"skipDeprecated"},{default:l(()=>i[79]||(i[79]=[s("p",null,[a("是否文档化使用 "),s("code",null,"@Deprecated"),a(" 注解的声明。")],-1),s("p",null,"这可以在项目/模块级别设置。",-1),s("p",null,[a("默认值："),s("code",null,"false")],-1)])),_:1}),n(t,{title:"reportUndocumented"},{default:l(()=>i[80]||(i[80]=[s("p",null,[a(" 是否对可见的未文档化声明发出警告，即在经过 "),s("code",null,"documentedVisibilities"),a(" 和其他过滤器过滤后没有 KDoc 的声明。 ")],-1),s("p",null,[a("此设置与 "),s("code",null,"failOnWarning"),a(" 配合良好。")],-1),s("p",null,"这可以在源代码集级别配置。",-1),s("p",null,[a("默认值："),s("code",null,"false")],-1)])),_:1}),n(t,{title:"documentedVisibilities"},{default:l(()=>i[81]||(i[81]=[s("p",null,"应文档化的可见性修饰符集合。",-1),s("p",null,[a(" 这可用于文档化此包内的 "),s("code",null,"protected"),a("/"),s("code",null,"internal"),a("/"),s("code",null,"private"),a(" 声明， 以及在只想文档化内部 API 时排除 "),s("code",null,"public"),a(" 声明。 ")],-1),s("p",null,"可以在源代码集级别配置。",-1),s("p",null,[a("默认值："),s("code",null,"PUBLIC")],-1)])),_:1})]),_:1}),i[89]||(i[89]=p("",5)),n(k,{collapsible:"true"},{default:l(()=>[n(t,{title:"url"},{default:l(()=>i[82]||(i[82]=[s("p",null,[a("要链接的文档的根 URL。它"),s("b",null,"必须"),a("包含一个尾部斜杠。")],-1),s("p",null,[a(" Dokka 会尽力自动查找给定 URL 的 "),s("code",null,"package-list"),a("， 并将声明链接在一起。 ")],-1),s("p",null,[a(" 如果自动解析失败，或者您想使用本地缓存文件， 请考虑设置 "),s("code",null,"packageListUrl"),a(" 选项。 ")],-1)])),_:1}),n(t,{title:"packageListUrl"},{default:l(()=>i[83]||(i[83]=[s("p",null,[s("code",null,"package-list"),a(" 的确切位置。这是替代 Dokka 自动解析的一种方法。 ")],-1),s("p",null," 包列表包含有关文档和项目本身的信息， 例如模块和包名称。 ",-1),s("p",null,"这也可以是本地缓存文件，以避免网络调用。",-1)])),_:1})]),_:1}),i[90]||(i[90]=p("",3))])}const b=d(u,[["render",F]]);export{f as __pageData,b as default};
