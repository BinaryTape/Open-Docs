import{_ as o,a as r,b as g,c,d as E,e as u,f as y,g as F,h as m,i as C,j as b,k as A,l as f,m as v,n as D,o as S,p as B}from"./chunks/android-iphone-password-error.w1wD0Z9I.js";import{_}from"./chunks/xcode-run-script-phase-1.BlwrlSQM.js";import{_ as O,a as I,b as w}from"./chunks/disable-sandboxing-in-xcode-project-settings.Hr8r5yJK.js";import{_ as x,C as n,c as P,o as U,j as i,G as l,ag as t,a as s,w as e}from"./chunks/framework.Bksy39di.js";const G=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-integrate-in-existing-app.md","filePath":"ja/kmp/multiplatform-integrate-in-existing-app.md","lastUpdated":1755516278000}'),q={name:"ja/kmp/multiplatform-integrate-in-existing-app.md"};function j(M,a,T,L,V,K){const p=n("secondary-label"),h=n("Links"),k=n("tldr"),d=n("shortcut");return U(),P("div",null,[a[14]||(a[14]=i("h1",{id:"androidアプリケーションをiosで動作させる-–-チュートリアル",tabindex:"-1"},[s("AndroidアプリケーションをiOSで動作させる – チュートリアル "),i("a",{class:"header-anchor",href:"#androidアプリケーションをiosで動作させる-–-チュートリアル","aria-label":'Permalink to "AndroidアプリケーションをiOSで動作させる – チュートリアル"'},"​")],-1)),l(p,{ref:"IntelliJ IDEA"},null,512),l(p,{ref:"Android Studio"},null,512),l(k,null,{default:e(()=>[i("p",null,[a[1]||(a[1]=s("このチュートリアルではAndroid Studioを使用しますが、IntelliJ IDEAでも進めることができます。")),l(h,{href:"/kmp/quickstart",summary:"undefined"},{default:e(()=>a[0]||(a[0]=[s("適切にセットアップ")])),_:1}),a[2]||(a[2]=s("されていれば、両方のIDEは同じコア機能とKotlin Multiplatformのサポートを共有します。"))])]),_:1}),a[15]||(a[15]=t('<p>このチュートリアルでは、既存のAndroidアプリケーションをAndroidとiOSの両方で動作するクロスプラットフォームアプリケーションにする方法を説明します。 これにより、AndroidとiOS両方のコードを一度に、同じ場所で記述できるようになります。</p><p>このチュートリアルでは、ユーザー名とパスワードを入力する単一画面を持つ<a href="https://github.com/Kotlin/kmp-integration-sample" target="_blank" rel="noreferrer">サンプルAndroidアプリケーション</a>を使用します。入力された認証情報は検証され、インメモリデータベースに保存されます。</p><p>アプリケーションをiOSとAndroidの両方で動作させるには、 まず、コードの一部を共有モジュールに移動してクロスプラットフォーム化します。 その後、Androidアプリケーションでそのクロスプラットフォームコードを使用し、さらに新しいiOSアプリケーションでも同じコードを使用します。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin Multiplatformに不慣れな場合は、まず<a href="./quickstart">ゼロからクロスプラットフォームアプリケーションを作成する方法</a>を学習してください。</p></div><h2 id="開発環境の準備" tabindex="-1">開発環境の準備 <a class="header-anchor" href="#開発環境の準備" aria-label="Permalink to &quot;開発環境の準備&quot;">​</a></h2><ol><li><p>クイックスタートで、<a href="./quickstart#set-up-the-environment">Kotlin Multiplatform開発の環境設定</a>の手順を完了します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>iOSアプリケーションの実行など、このチュートリアルの一部の手順を完了するには、macOSがインストールされたMacが必要です。 これはAppleの要件によるものです。</p></div></li><li><p>Android Studioで、バージョン管理から新しいプロジェクトを作成します。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/kmp-integration-sample</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>master</code>ブランチには、プロジェクトの初期状態であるシンプルなAndroidアプリケーションが含まれています。 iOSアプリケーションと共有モジュールを含む最終状態を確認するには、<code>final</code>ブランチに切り替えてください。</p></div></li><li><p><strong>Project</strong>ビューに切り替えます。</p><p><img src="'+E+'" alt="プロジェクトビュー" width="513"></p></li></ol><h2 id="コードをクロスプラットフォーム化する" tabindex="-1">コードをクロスプラットフォーム化する <a class="header-anchor" href="#コードをクロスプラットフォーム化する" aria-label="Permalink to &quot;コードをクロスプラットフォーム化する&quot;">​</a></h2><p>コードをクロスプラットフォーム化するには、次の手順を実行します。</p><ol><li><a href="#decide-what-code-to-make-cross-platform">どのコードをクロスプラットフォームにするか決定する</a></li><li><a href="#create-a-shared-module-for-cross-platform-code">クロスプラットフォームコード用の共有モジュールを作成する</a></li><li><a href="#add-code-to-the-shared-module">コード共有をテストする</a></li><li><a href="#add-a-dependency-on-the-shared-module-to-your-android-application">Androidアプリケーションに共有モジュールへの依存関係を追加する</a></li><li><a href="#make-the-business-logic-cross-platform">ビジネスロジックをクロスプラットフォーム化する</a></li><li><a href="#run-your-cross-platform-application-on-android">クロスプラットフォームアプリケーションをAndroidで実行する</a></li></ol><h3 id="どのコードをクロスプラットフォームにするか決定する" tabindex="-1">どのコードをクロスプラットフォームにするか決定する <a class="header-anchor" href="#どのコードをクロスプラットフォームにするか決定する" aria-label="Permalink to &quot;どのコードをクロスプラットフォームにするか決定する&quot;">​</a></h3><p>AndroidアプリケーションのどのコードをiOSと共有し、どのコードをネイティブとして保持するかを決定します。シンプルなルールは、 可能な限り再利用したいものを共有するというものです。ビジネスロジックはAndroidとiOSの両方で同じであることが多いため、 再利用の有力な候補となります。</p><p>サンプルAndroidアプリケーションでは、ビジネスロジックは<code>com.jetbrains.simplelogin.androidapp.data</code>パッケージに保存されています。 将来のiOSアプリケーションも同じロジックを使用するため、これもクロスプラットフォーム化する必要があります。</p><p><img src="'+u+'" alt="共有するビジネスロジック" width="366"></p><h3 id="クロスプラットフォームコード用の共有モジュールを作成する" tabindex="-1">クロスプラットフォームコード用の共有モジュールを作成する <a class="header-anchor" href="#クロスプラットフォームコード用の共有モジュールを作成する" aria-label="Permalink to &quot;クロスプラットフォームコード用の共有モジュールを作成する&quot;">​</a></h3><p>iOSとAndroidの両方で使用されるクロスプラットフォームコードは、共有モジュールに保存されます。 Android StudioとIntelliJ IDEAの両方に、Kotlin Multiplatform用の共有モジュールを作成するウィザードが用意されています。</p><p>既存のAndroidアプリケーションと将来のiOSアプリケーションの両方に接続するための共有モジュールを作成します。</p><ol><li><p>Android Studioで、メインメニューから<strong>File</strong> | <strong>New</strong> | <strong>New Module</strong>を選択します。</p></li><li><p>テンプレートのリストから<strong>Kotlin Multiplatform Shared Module</strong>を選択します。 ライブラリ名は<code>shared</code>のままにし、パッケージ名を入力します。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>com.jetbrains.simplelogin.shared</span></span></code></pre></div></li><li><p><strong>Finish</strong>をクリックします。ウィザードが共有モジュールを作成し、ビルドスクリプトをそれに応じて変更し、Gradle同期を開始します。</p></li><li><p>セットアップが完了すると、<code>shared</code>ディレクトリに次のファイル構造が表示されます。</p><p><img src="'+y+`" alt="sharedディレクトリ内の最終ファイル構造" width="341"></p></li><li><p><code>shared/build.gradle.kts</code>ファイル内の<code>kotlin.androidLibrary.minSdk</code>プロパティの値が、<code>app/build.gradle.kts</code>ファイル内の同じプロパティの値と一致していることを確認します。</p></li></ol><h3 id="共有モジュールにコードを追加する" tabindex="-1">共有モジュールにコードを追加する <a class="header-anchor" href="#共有モジュールにコードを追加する" aria-label="Permalink to &quot;共有モジュールにコードを追加する&quot;">​</a></h3><p>共有モジュールが作成できたので、 <code>commonMain/kotlin/com.jetbrains.simplelogin.shared</code>ディレクトリに共有する共通コードを追加します。</p><ol><li><p>次のコードで新しい<code>Greeting</code>クラスを作成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, \${platform.name}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>作成されたファイルのコードを次のように置き換えます。</p><ul><li><p><code>commonMain/Platform.kt</code>で:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div></li><li><p><code>androidMain/Platform.android.kt</code>で:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android.os.Build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Android \${Build.VERSION.SDK_INT}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li><li><p><code>iosMain/Platform.ios.kt</code>で:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.UIKit.UIDevice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.systemVersion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ul></li></ol><p>作成されるプロジェクトのレイアウトについてより深く理解したい場合は、 <a href="./multiplatform-discover-project">Kotlin Multiplatformプロジェクト構造の基本</a>を参照してください。</p><h3 id="androidアプリケーションに共有モジュールへの依存関係を追加する" tabindex="-1">Androidアプリケーションに共有モジュールへの依存関係を追加する <a class="header-anchor" href="#androidアプリケーションに共有モジュールへの依存関係を追加する" aria-label="Permalink to &quot;Androidアプリケーションに共有モジュールへの依存関係を追加する&quot;">​</a></h3><p>Androidアプリケーションでクロスプラットフォームコードを使用するには、共有モジュールを接続し、ビジネスロジックコードをそこに移動して、このコードをクロスプラットフォームにします。</p><ol><li><p><code>app/build.gradle.kts</code>ファイルに共有モジュールへの依存関係を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>IDEの提案に従うか、<strong>File</strong> | <strong>Sync Project with Gradle Files</strong>メニュー項目を使用してGradleファイルを同期します。</p></li><li><p><code>app/src/main/java/</code>ディレクトリで、<code>com.jetbrains.simplelogin.androidapp.ui.login</code>パッケージ内の<code>LoginActivity.kt</code>ファイルを開きます。</p></li><li><p>共有モジュールがアプリケーションに正常に接続されていることを確認するには、<code>onCreate()</code>メソッドに<code>Log.i()</code>呼び出しを追加して、<code>greet()</code>関数の結果をログに出力します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Login Activity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from shared module: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>IDEの提案に従って、不足しているクラスをインポートします。</p></li><li><p>ツールバーで、<code>app</code>ドロップダウンをクリックし、デバッグアイコンをクリックします。</p><p><img src="`+F+'" alt="デバッグするアプリのリスト" width="300"></p></li><li><p><strong>Logcat</strong>ツールウィンドウでログから「Hello」を検索すると、共有モジュールからの挨拶が見つかります。</p><p><img src="'+m+'" alt="共有モジュールからの挨拶" width="700"></p></li></ol><h3 id="ビジネスロジックをクロスプラットフォーム化する" tabindex="-1">ビジネスロジックをクロスプラットフォーム化する <a class="header-anchor" href="#ビジネスロジックをクロスプラットフォーム化する" aria-label="Permalink to &quot;ビジネスロジックをクロスプラットフォーム化する&quot;">​</a></h3><p>これで、ビジネスロジックコードをKotlin Multiplatform共有モジュールに抽出し、プラットフォーム非依存にすることができます。 これは、AndroidとiOSの両方でコードを再利用するために必要です。</p>',26)),a[16]||(a[16]=i("ol",null,[i("li",null,[i("p",null,[s("ビジネスロジックコード"),i("code",null,"com.jetbrains.simplelogin.androidapp.data"),s("を"),i("code",null,"app"),s("ディレクトリから "),i("code",null,"shared/src/commonMain"),s("ディレクトリ内の"),i("code",null,"com.jetbrains.simplelogin.shared"),s("パッケージに移動します。")]),i("p",null,[i("img",{src:o,alt:"ビジネスロジックコードを含むパッケージをドラッグアンドドロップ",width:"300"})])]),i("li",null,[i("p",null,"Android Studioが何をしたいか尋ねてきたら、パッケージを移動することを選択し、リファクタリングを承認します。"),i("p",null,[i("img",{src:r,alt:"ビジネスロジックパッケージをリファクタリング",width:"300"})])]),i("li",null,[i("p",null,[s("プラットフォーム依存コードに関するすべての警告を無視し、"),i("strong",null,"Refactor Anyway"),s("をクリックします。")]),i("p",null,[i("img",{src:g,alt:"プラットフォーム依存コードに関する警告",width:"450"})])]),i("li",null,[i("p",null,[s("Android固有のコードを、クロスプラットフォームのKotlinコードに置き換えるか、"),i("a",{href:"./multiplatform-connect-to-apis"},"expectとactual宣言"),s("を使用してAndroid固有のAPIに接続することで削除します。詳細については、以下のセクションを参照してください。")]),i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"android固有のコードをクロスプラットフォームコードに置き換える",tabindex:"-1"},[s("Android固有のコードをクロスプラットフォームコードに置き換える "),i("a",{class:"header-anchor",href:"#android固有のコードをクロスプラットフォームコードに置き換える","aria-label":'Permalink to "Android固有のコードをクロスプラットフォームコードに置き換える {initial-collapse-state="collapsed" collapsible="true"}"'},"​")]),i("p",null,[s("コードをAndroidとiOSの両方でうまく動作させるには、移動した"),i("code",null,"data"),s("ディレクトリ内で、可能な限りすべてのJVM依存関係をKotlinの依存関係に置き換えます。")]),i("ol",null,[i("li",null,[i("p",null,[i("code",null,"LoginDataValidator"),s("クラスで、"),i("code",null,"android.utils"),s("パッケージの"),i("code",null,"Patterns"),s("クラスを、メール検証のパターンに一致するKotlinの正規表現に置き換えます。")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// Before")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"private"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," fun"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," isEmailValid"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(email: "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Patterns.EMAIL_ADDRESS."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"matcher"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(email)."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"matches"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")])])])]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// After")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"private"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," fun"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," isEmailValid"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(email: "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," emailRegex."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"matches"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(email)")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"companion"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," object"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    private"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," emailRegex "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        ("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"[a-zA-Z0-9'),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"+"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"_"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"%"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"-"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'+]{1,256}"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "'),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'@"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "[a-zA-Z0-9][a-zA-Z0-9'),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'-]{0,64}"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "("'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "'),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'."'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "[a-zA-Z0-9][a-zA-Z0-9'),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"\\\\"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'-]{0,25}"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," +")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            ")+"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"toRegex"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])])]),i("li",null,[i("p",null,[i("code",null,"Patterns"),s("クラスのimportディレクティブを削除します。")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," android.util.Patterns")])])])])]),i("li",null,[i("p",null,[i("code",null,"LoginDataSource"),s("クラスで、"),i("code",null,"login()"),s("関数内の"),i("code",null,"IOException"),s("を"),i("code",null,"RuntimeException"),s("に置き換えます。 "),i("code",null,"IOException"),s("はKotlin/JVMでは利用できません。")]),i("pre",null,[i("code",null,'```kotlin\n// Before\nreturn Result.Error(IOException("Error logging in", e))\n```\n\n```kotlin\n// After\nreturn Result.Error(RuntimeException("Error logging in", e))\n```\n')])]),i("li",null,[i("p",null,[i("code",null,"IOException"),s("のimportディレクティブも削除します。")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," java.io.IOException")])])])])])]),i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"クロスプラットフォームコードからプラットフォーム固有のapiに接続する",tabindex:"-1"},[s("クロスプラットフォームコードからプラットフォーム固有のAPIに接続する "),i("a",{class:"header-anchor",href:"#クロスプラットフォームコードからプラットフォーム固有のapiに接続する","aria-label":'Permalink to "クロスプラットフォームコードからプラットフォーム固有のAPIに接続する {initial-collapse-state="collapsed" collapsible="true"}"'},"​")]),i("p",null,[i("code",null,"LoginDataSource"),s("クラスでは、"),i("code",null,"fakeUser"),s("の汎用一意識別子（UUID）が "),i("code",null,"java.util.UUID"),s("クラスを使用して生成されますが、これはiOSでは利用できません。")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," fakeUser "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," LoggedInUser"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(java.util.UUID."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"toString"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(), "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"Jane Doe"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])]),i("p",null,[s("Kotlin標準ライブラリには"),i("a",{href:"https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.uuid/-uuid/",target:"_blank",rel:"noreferrer"},"UUID生成のための実験的なクラス"),s("が提供されていますが、 ここではその練習のためにプラットフォーム固有の機能を使用してみましょう。")]),i("p",null,[s("共有コードで"),i("code",null,"randomUUID()"),s("関数の"),i("code",null,"expect"),s("宣言を提供し、対応するソースセットで 各プラットフォーム（AndroidとiOS）向けの"),i("code",null,"actual"),s("実装を提供します。 "),i("a",{href:"./multiplatform-connect-to-apis"},"プラットフォーム固有のAPIへの接続"),s("について詳しく学ぶことができます。")]),i("ol",null,[i("li",null,[i("p",null,[i("code",null,"login()"),s("関数内の"),i("code",null,"java.util.UUID.randomUUID()"),s("呼び出しを、各プラットフォーム向けに実装する"),i("code",null,"randomUUID()"),s("呼び出しに変更します。")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," fakeUser "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," LoggedInUser"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(), "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"Jane Doe"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")])])])])]),i("li",null,[i("p",null,[i("code",null,"shared/src/commonMain"),s("ディレクトリの"),i("code",null,"com.jetbrains.simplelogin.shared"),s("パッケージに"),i("code",null,"Utils.kt"),s("ファイルを作成し、"),i("code",null,"expect"),s("宣言を提供します。")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"package"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," com.jetbrains.simplelogin.shared")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"expect "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(): "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String")])])])])]),i("li",null,[i("p",null,[i("code",null,"shared/src/androidMain"),s("ディレクトリの"),i("code",null,"com.jetbrains.simplelogin.shared"),s("パッケージに"),i("code",null,"Utils.android.kt"),s("ファイルを作成し、Androidでの"),i("code",null,"randomUUID()"),s("の"),i("code",null,"actual"),s("実装を提供します。")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"package"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," com.jetbrains.simplelogin.shared")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," java.util."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"actual "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," UUID."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"toString"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")])])])])]),i("li",null,[i("p",null,[i("code",null,"shared/src/iosMain"),s("ディレクトリの"),i("code",null,"com.jetbrains.simplelogin.shared"),s("に"),i("code",null,"Utils.ios.kt"),s("ファイルを作成し、 iOSでの"),i("code",null,"randomUUID()"),s("の"),i("code",null,"actual"),s("実装を提供します。")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"package"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," com.jetbrains.simplelogin.shared")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," platform.Foundation.NSUUID")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"actual "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," randomUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(): "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," NSUUID"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"UUIDString"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")])])])])]),i("li",null,[i("p",null,[i("code",null,"shared/src/commonMain"),s("ディレクトリの"),i("code",null,"LoginDataSource.kt"),s("ファイルで"),i("code",null,"randomUUID"),s("関数をインポートします。")]),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," com.jetbrains.simplelogin.shared.randomUUID")])])])])])])])],-1)),a[17]||(a[17]=t('<p>これで、KotlinはAndroidとiOSに対して、プラットフォーム固有のUUID実装を使用するようになります。</p><h3 id="クロスプラットフォームアプリケーションをandroidで実行する" tabindex="-1">クロスプラットフォームアプリケーションをAndroidで実行する <a class="header-anchor" href="#クロスプラットフォームアプリケーションをandroidで実行する" aria-label="Permalink to &quot;クロスプラットフォームアプリケーションをAndroidで実行する&quot;">​</a></h3><p>クロスプラットフォームアプリケーションをAndroidで実行し、以前と同様に動作することを確認します。</p><p><img src="'+C+'" alt="Androidログインアプリケーション" width="300"></p><h2 id="クロスプラットフォームアプリケーションをiosで動作させる" tabindex="-1">クロスプラットフォームアプリケーションをiOSで動作させる <a class="header-anchor" href="#クロスプラットフォームアプリケーションをiosで動作させる" aria-label="Permalink to &quot;クロスプラットフォームアプリケーションをiOSで動作させる&quot;">​</a></h2><p>Androidアプリケーションをクロスプラットフォーム化した後、iOSアプリケーションを作成し、その中で共有ビジネスロジックを再利用できます。</p><ol><li><a href="#create-an-ios-project-in-xcode">XcodeでiOSプロジェクトを作成する</a></li><li><a href="#configure-the-ios-project-to-use-a-kmp-framework">KMPフレームワークを使用するようにiOSプロジェクトを設定する</a></li><li><a href="#set-up-an-ios-run-configuration-in-android-studio">Android StudioでiOS実行構成を設定する</a></li><li><a href="#use-the-shared-module-in-the-ios-project">iOSプロジェクトで共有モジュールを使用する</a></li></ol><h3 id="xcodeでiosプロジェクトを作成する" tabindex="-1">XcodeでiOSプロジェクトを作成する <a class="header-anchor" href="#xcodeでiosプロジェクトを作成する" aria-label="Permalink to &quot;XcodeでiOSプロジェクトを作成する&quot;">​</a></h3><ol><li><p>Xcodeで、<strong>File</strong> | <strong>New</strong> | <strong>Project</strong>をクリックします。</p></li><li><p>iOSアプリのテンプレートを選択し、<strong>Next</strong>をクリックします。</p><p><img src="'+b+'" alt="iOSプロジェクトテンプレート" width="700"></p></li><li><p>プロダクト名として「simpleLoginIOS」を指定し、<strong>Next</strong>をクリックします。</p><p><img src="'+A+'" alt="iOSプロジェクト設定" width="700"></p></li><li><p>プロジェクトの場所として、クロスプラットフォームアプリケーションが保存されているディレクトリ（例：<code>kmp-integration-sample</code>）を選択します。</p></li></ol><p>Android Studioでは、以下の構造が得られます。</p><p><img src="'+f+'" alt="Android StudioでのiOSプロジェクト" width="194"></p><p>クロスプラットフォームプロジェクトの他のトップレベルディレクトリとの一貫性のために、<code>simpleLoginIOS</code>ディレクトリを<code>iosApp</code>にリネームできます。 そのためには、Xcodeを閉じてから、<code>simpleLoginIOS</code>ディレクトリを<code>iosApp</code>にリネームします。 Xcodeを開いたままフォルダをリネームすると、警告が表示され、プロジェクトが破損する可能性があります。</p><p><img src="'+v+'" alt="Android StudioでリネームされたiOSプロジェクトディレクトリ" width="194"></p><h3 id="kmpフレームワークを使用するようにiosプロジェクトを設定する" tabindex="-1">KMPフレームワークを使用するようにiOSプロジェクトを設定する <a class="header-anchor" href="#kmpフレームワークを使用するようにiosプロジェクトを設定する" aria-label="Permalink to &quot;KMPフレームワークを使用するようにiOSプロジェクトを設定する&quot;">​</a></h3><p>iOSアプリとKotlin Multiplatformによってビルドされたフレームワーク間の統合を直接設定できます。 この方法以外の代替手段については、<a href="./multiplatform-ios-integration-overview">iOS統合方法の概要</a>で説明されていますが、このチュートリアルの範囲外です。</p><ol><li><p>Android Studioで、<code>iosApp/simpleLoginIOS.xcodeproj</code>ディレクトリを右クリックし、 <strong>Open In</strong> | <strong>Open In Associated Application</strong>を選択して、XcodeでiOSプロジェクトを開きます。</p></li><li><p>Xcodeで、<strong>Project</strong>ナビゲーターのプロジェクト名をダブルクリックして、iOSプロジェクト設定を開きます。</p></li><li><p>左側の<strong>Targets</strong>セクションで<strong>simpleLoginIOS</strong>を選択し、<strong>Build Phases</strong>タブをクリックします。</p></li><li><p>**+**アイコンをクリックし、<strong>New Run Script Phase</strong>を選択します。</p><p><img src="'+_+`" alt="Run Scriptフェーズを追加" width="700"></p></li><li><p>ランスクリプトフィールドに以下のスクリプトを貼り付けます。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd &quot;$SRCROOT/..&quot;</span></span>
<span class="line"><span>./gradlew :shared:embedAndSignAppleFrameworkForXcode</span></span></code></pre></div><p><img src="`+O+'" alt="スクリプトを追加" width="700"></p></li><li><p><strong>Based on dependency analysis</strong>オプションを無効にします。</p><p>これにより、Xcodeがビルドごとにスクリプトを実行し、出力依存関係の欠落に関する警告が毎回表示されないようになります。</p></li><li><p><strong>Run Script</strong>フェーズを<strong>Compile Sources</strong>フェーズの前に移動させます。</p><p><img src="'+I+'" alt="Run Scriptフェーズを移動" width="700"></p></li><li><p><strong>Build Settings</strong>タブで、<strong>Build Options</strong>の下にある<strong>User Script Sandboxing</strong>オプションを無効にします。</p><p><img src="'+w+'" alt="ユーザー・スクリプト・サンドボックス化" width="700"></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>デフォルトの<code>Debug</code>または<code>Release</code>とは異なるカスタムビルド設定を使用している場合、<strong>Build Settings</strong>タブの<strong>User-Defined</strong>の下に<code>KOTLIN_FRAMEWORK_BUILD_TYPE</code>設定を追加し、<code>Debug</code>または<code>Release</code>に設定します。</p></div></li><li><p>Xcodeでプロジェクトをビルドします（メインメニューの<strong>Product</strong> | <strong>Build</strong>）。 すべてが正しく設定されていれば、プロジェクトは正常にビルドされます （「build phase will be run during every build」という警告は安全に無視できます）。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><strong>User Script Sandboxing</strong>オプションを無効にする前にプロジェクトをビルドした場合、ビルドが失敗する可能性があります。 Gradleデーモンプロセスがサンドボックス化されている可能性があり、再起動が必要です。 プロジェクトディレクトリ（例: <code>kmp-integration-sample</code>）でこのコマンドを実行して、再度プロジェクトをビルドする前に停止してください。 <code>shell ./gradlew --stop </code></p></div></li></ol><h3 id="android-studioでios実行構成を設定する" tabindex="-1">Android StudioでiOS実行構成を設定する <a class="header-anchor" href="#android-studioでios実行構成を設定する" aria-label="Permalink to &quot;Android StudioでiOS実行構成を設定する&quot;">​</a></h3><p>Xcodeが正しく設定されていることを確認したら、Android Studioに戻ります。</p><ol><li><p>メインメニューで<strong>File | Sync Project with Gradle Files</strong>を選択します。Android Studioは自動的に<strong>simpleLoginIOS</strong>という実行構成を生成します。</p><p>Android Studioは自動的に<strong>simpleLoginIOS</strong>という実行構成を生成し、<code>iosApp</code>ディレクトリをリンクされたXcodeプロジェクトとしてマークします。</p></li><li><p>実行構成のリストで<strong>simpleLoginIOS</strong>を選択します。 iOSエミュレーターを選択し、<strong>Run</strong>をクリックしてiOSアプリが正しく実行されることを確認します。</p><p><img src="'+D+`" alt="実行構成のリストにあるiOS実行構成" width="400"></p></li></ol><h3 id="iosプロジェクトで共有モジュールを使用する" tabindex="-1">iOSプロジェクトで共有モジュールを使用する <a class="header-anchor" href="#iosプロジェクトで共有モジュールを使用する" aria-label="Permalink to &quot;iOSプロジェクトで共有モジュールを使用する&quot;">​</a></h3><p><code>shared</code>モジュールの<code>build.gradle.kts</code>ファイルは、各iOSターゲットの<code>binaries.framework.baseName</code>プロパティを<code>sharedKit</code>として定義しています。 これは、Kotlin MultiplatformがiOSアプリが利用するためにビルドするフレームワークの名前です。</p><p>統合をテストするために、Swiftコードで共通コードを呼び出します。</p><ol><li><p>Android Studioで、<code>iosApp/simpleloginIOS/ContentView.swift</code>ファイルを開き、フレームワークをインポートします。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sharedKit</span></span></code></pre></div></li><li><p>正しく接続されていることを確認するには、<code>ContentView</code>構造をクロスプラットフォームアプリの共有モジュールから<code>greet()</code>関数を使用するように変更します。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Android StudioのiOS実行構成を使用してアプリを実行し、結果を確認します。</p><p><img src="`+S+`" alt="共有モジュールからの挨拶" width="300"></p></li><li><p><code>ContentView.swift</code>ファイルのコードを再度更新し、共有モジュールのビジネスロジックを使用してアプリケーションUIをレンダリングします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div></li><li><p><code>simpleLoginIOSApp.swift</code>ファイルで、<code>sharedKit</code>モジュールをインポートし、<code>ContentView()</code>関数の引数を指定します。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwiftUI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sharedKit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleLoginIOSApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scene {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        WindowGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">viewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loginRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LoginRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LoginDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">loginValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LoginDataValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>iOS実行構成を再度実行し、iOSアプリがログインフォームを表示することを確認します。</p></li><li><p>ユーザー名に「Jane」を、パスワードに「password」を入力します。</p></li><li><p><a href="#configure-the-ios-project-to-use-a-kmp-framework">以前に統合を設定した</a>ため、iOSアプリは共通コードを使用して入力を検証します。</p><p><img src="`+B+'" alt="シンプルなログインアプリケーション" width="300"></p></li></ol><h2 id="結果を楽しむ-–-ロジックの更新は一度だけ" tabindex="-1">結果を楽しむ – ロジックの更新は一度だけ <a class="header-anchor" href="#結果を楽しむ-–-ロジックの更新は一度だけ" aria-label="Permalink to &quot;結果を楽しむ – ロジックの更新は一度だけ&quot;">​</a></h2><p>これでアプリケーションはクロスプラットフォームになりました。<code>shared</code>モジュールのビジネスロジックを更新すると、AndroidとiOSの両方で結果を確認できます。</p>',25)),i("ol",null,[i("li",null,[i("p",null,[a[4]||(a[4]=s("ユーザーのパスワードの検証ロジックを変更します。「password」が有効なオプションであってはなりません。 そのためには、")),a[5]||(a[5]=i("code",null,"LoginDataValidator",-1)),a[6]||(a[6]=s("クラスの")),a[7]||(a[7]=i("code",null,"checkPassword()",-1)),a[8]||(a[8]=s("関数を更新します（すばやく見つけるには、")),l(d,null,{default:e(()=>a[3]||(a[3]=[s("Shift")])),_:1}),a[9]||(a[9]=s("を2回押し、クラス名を貼り付けて")),a[10]||(a[10]=i("strong",null,"Classes",-1)),a[11]||(a[11]=s("タブに切り替えます）。"))]),a[12]||(a[12]=t(`<div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.jetbrains.simplelogin.shared.data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoginDataValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            password.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Password must be &gt;5 characters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            password.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lowercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;password&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Password shouldn&#39;t be </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">password</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result.Success</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,1))]),a[13]||(a[13]=i("li",null,[i("p",null,"Android StudioからiOSおよびAndroidアプリケーションの両方を実行し、変更を確認します。"),i("p",null,[i("img",{src:c,alt:"AndroidおよびiOSアプリケーションのパスワードエラー",width:"600"})])],-1))]),a[18]||(a[18]=t('<p>このチュートリアルの<a href="https://github.com/Kotlin/kmp-integration-sample/tree/final" target="_blank" rel="noreferrer">最終コード</a>を確認できます。</p><h2 id="他に共有できるものは" tabindex="-1">他に共有できるものは？ <a class="header-anchor" href="#他に共有できるものは" aria-label="Permalink to &quot;他に共有できるものは？&quot;">​</a></h2><p>アプリケーションのビジネスロジックを共有しましたが、アプリケーションの他のレイヤーも共有することに決定できます。 たとえば、<code>ViewModel</code>クラスのコードは<a href="https://github.com/Kotlin/kmp-integration-sample/blob/final/app/src/main/java/com/jetbrains/simplelogin/androidapp/ui/login/LoginViewModel.kt" target="_blank" rel="noreferrer">Android</a>と<a href="https://github.com/Kotlin/kmp-integration-sample/blob/final/iosApp/SimpleLoginIOS/ContentView.swift#L84" target="_blank" rel="noreferrer">iOSアプリケーション</a>でほとんど同じであり、モバイルアプリケーションが同じプレゼンテーション層を持つべきであれば、それを共有できます。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>Androidアプリケーションをクロスプラットフォーム化した後、さらに次のことができます。</p><ul><li><a href="./multiplatform-add-dependencies">マルチプラットフォームライブラリへの依存関係を追加する</a></li><li><a href="./multiplatform-android-dependencies">Androidの依存関係を追加する</a></li><li><a href="./multiplatform-ios-dependencies">iOSの依存関係を追加する</a></li></ul><p>Compose Multiplatformを使用して、すべてのプラットフォームで統一されたUIを作成できます。</p><ul><li><a href="./compose-multiplatform-and-jetpack-compose">Compose MultiplatformとJetpack Composeについて学ぶ</a></li><li><a href="./compose-multiplatform-resources">Compose Multiplatformで利用可能なリソースを探す</a></li><li><a href="./compose-multiplatform-create-first-app">共有ロジックとUIを持つアプリを作成する</a></li></ul><p>コミュニティリソースも確認できます。</p><ul><li><a href="https://www.youtube.com/watch?v=vb-Pt8SdfEE&amp;t=1s" target="_blank" rel="noreferrer">動画: AndroidプロジェクトをKotlin Multiplatformに移行する方法</a></li><li><a href="https://www.youtube.com/watch?v=X6ckI1JWjqo" target="_blank" rel="noreferrer">動画: Kotlin JVMコードをKotlin Multiplatform向けに準備する3つの方法</a></li></ul>',10))])}const $=x(q,[["render",j]]);export{G as __pageData,$ as default};
