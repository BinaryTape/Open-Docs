import{_ as k,C as t,c as r,o,j as i,G as e,ag as d,a,w as n}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/client-response-validation.md","filePath":"zh-Hant/ktor/client-response-validation.md","lastUpdated":1755457140000}'),c={name:"zh-Hant/ktor/client-response-validation.md"};function E(g,s,y,u,x,F){const l=t("show-structure"),p=t("tldr"),h=t("link-summary");return o(),r("div",null,[s[2]||(s[2]=i("h1",{id:"回應驗證",tabindex:"-1"},[a("回應驗證 "),i("a",{class:"header-anchor",href:"#回應驗證","aria-label":'Permalink to "回應驗證"'},"​")],-1)),e(l,{for:"chapter",depth:"2"}),e(p,null,{default:n(()=>s[0]||(s[0]=[i("p",null,[i("b",null,"程式碼範例"),a("： "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-2xx-response"},"client-validate-2xx-response"),a(", "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-non-2xx-response"},"client-validate-non-2xx-response")],-1)])),_:1}),e(h,null,{default:n(()=>s[1]||(s[1]=[a(" 了解如何根據狀態碼驗證回應。 ")])),_:1}),s[3]||(s[3]=d(`<p>預設情況下，Ktor 不會根據其狀態碼驗證 <a href="./client-responses">回應</a>。 如果需要，您可以使用以下驗證策略：</p><ul><li>使用 <code>expectSuccess</code> 屬性來針對非 2xx 回應拋出例外狀況。</li><li>新增更嚴格的 2xx 回應驗證。</li><li>自訂非 2xx 回應的驗證。</li></ul><h2 id="default" tabindex="-1">啟用預設驗證 <a class="header-anchor" href="#default" aria-label="Permalink to &quot;啟用預設驗證 {id=&quot;default&quot;}&quot;">​</a></h2><p>Ktor 允許您透過將 <code>expectSuccess</code> 屬性設定為 <code>true</code> 來啟用預設驗證。 這可以在 <a href="./client-create-and-configure#configure-client">用戶端配置</a> 層級上完成...</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    expectSuccess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>... 或透過在 <a href="./client-requests#parameters">請求</a> 層級使用相同的屬性。 在此情況下，將會針對非 2xx 錯誤回應拋出以下例外狀況：</p><ul><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-redirect-response-exception/index.html" target="_blank" rel="noreferrer">RedirectResponseException</a> 針對 3xx 回應。</li><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-client-request-exception/index.html" target="_blank" rel="noreferrer">ClientRequestException</a> 針對 4xx 回應。</li><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-server-response-exception/index.html" target="_blank" rel="noreferrer">ServerResponseException</a> 針對 5xx 回應。</li></ul><h2 id="custom" tabindex="-1">自訂驗證 <a class="header-anchor" href="#custom" aria-label="Permalink to &quot;自訂驗證 {id=&quot;custom&quot;}&quot;">​</a></h2><p>您可以為 2xx 回應新增額外驗證，或透過使用 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator" target="_blank" rel="noreferrer">HttpCallValidator</a> 插件（plugin）來自訂預設驗證。若要安裝 <code>HttpCallValidator</code>，請在 <a href="./client-create-and-configure#configure-client">用戶端配置區塊</a> 內呼叫 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-response-validator.html" target="_blank" rel="noreferrer">HttpResponseValidator</a> 函數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HttpResponseValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="2xx" tabindex="-1">驗證 2xx 回應 <a class="header-anchor" href="#2xx" aria-label="Permalink to &quot;驗證 2xx 回應 {id=&quot;2xx&quot;}&quot;">​</a></h3><p>如上所述，<a href="#default">預設驗證</a> 會針對非 2xx 錯誤回應拋出例外狀況。如果您需要新增 更嚴格的驗證並檢查 2xx 回應，請使用 <code>HttpCallValidator</code> 中可用的 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator-config/validate-response.html" target="_blank" rel="noreferrer">validateResponse</a> 函數。</p><p>在下面的 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-2xx-response" target="_blank" rel="noreferrer">範例</a> 中，用戶端收到一個包含錯誤詳細資訊的 2xx 回應，其格式為 <a href="./client-serialization">JSON</a>。 <code>validateResponse</code> 用於引發 <code>CustomResponseException</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HttpResponseValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validateResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomResponseException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Code: \${error.code}, message: \${error.message}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="non-2xx" tabindex="-1">處理非 2xx 例外狀況 <a class="header-anchor" href="#non-2xx" aria-label="Permalink to &quot;處理非 2xx 例外狀況 {id=&quot;non-2xx&quot;}&quot;">​</a></h3><p>如果您需要自訂 <a href="#default">預設驗證</a> 並以特定方式處理非 2xx 回應的例外狀況， 請使用 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator-config/handle-response-exception-with-request.html" target="_blank" rel="noreferrer">handleResponseExceptionWithRequest</a>。 在下面的 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-non-2xx-response" target="_blank" rel="noreferrer">範例</a> 中，用戶端針對 404 回應引發自訂的 <code>MissingPageException</code> 而不是預設的 <code>ClientRequestException</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    expectSuccess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HttpResponseValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        handleResponseExceptionWithRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { exception, request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientException </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? ClientRequestException ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@handleResponseExceptionWithRequest</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exceptionResponse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientException.response</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (exceptionResponse.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpStatusCode.NotFound) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exceptionResponseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exceptionResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyAsText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MissingPageException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exceptionResponse, exceptionResponseText)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,17))])}const m=k(c,[["render",E]]);export{f as __pageData,m as default};
