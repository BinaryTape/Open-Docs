import{_ as i,a,b as t}from"./chunks/browser-console-output.ORKOEfuB.js";import{_ as n,c as l,o as e,ag as p}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlin/JS の実行","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/running-kotlin-js.md","filePath":"ja/kotlin/running-kotlin-js.md","lastUpdated":1754307826000}'),h={name:"ja/kotlin/running-kotlin-js.md"};function k(o,s,d,r,E,g){return e(),l("div",null,s[0]||(s[0]=[p(`<h1 id="kotlin-js-の実行" tabindex="-1">Kotlin/JS の実行 <a class="header-anchor" href="#kotlin-js-の実行" aria-label="Permalink to &quot;Kotlin/JS の実行&quot;">​</a></h1><p>Kotlin/JS プロジェクトは Kotlin Multiplatform Gradle プラグインで管理されているため、適切なタスクを使用してプロジェクトを実行できます。 空のプロジェクトから開始する場合は、実行するためのサンプルコードがあることを確認してください。 <code>src/jsMain/kotlin/App.kt</code> ファイルを作成し、小さな「Hello, World」型のコードスニペットを入力してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin/JS!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ターゲットプラットフォームによっては、初めてコードを実行するためにプラットフォーム固有の追加セットアップが必要になる場合があります。</p><h2 id="node-jsターゲットの実行" tabindex="-1">Node.jsターゲットの実行 <a class="header-anchor" href="#node-jsターゲットの実行" aria-label="Permalink to &quot;Node.jsターゲットの実行&quot;">​</a></h2><p>Kotlin/JS で Node.js をターゲットにする場合、<code>jsNodeDevelopmentRun</code> Gradle タスクを実行するだけで済みます。 これは、たとえば Gradle wrapper を使用してコマンドラインから実行できます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsNodeDevelopmentRun</span></span></code></pre></div><p>IntelliJ IDEA を使用している場合、<code>jsNodeDevelopmentRun</code> アクションは Gradle ツールウィンドウにあります。</p><p><img src="`+i+'" alt="Gradle Run task in IntelliJ IDEA" width="700"></p><p>最初の起動時に、<code>kotlin.multiplatform</code> Gradle プラグインが必要な依存関係をすべてダウンロードし、すぐに開始できるようにします。 ビルドが完了するとプログラムが実行され、ターミナルでログ出力が表示されます。</p><p><img src="'+a+`" alt="Executing the JS target in a Kotlin Multiplatform project in IntelliJ IDEA" width="700"></p><h2 id="ブラウザターゲットの実行" tabindex="-1">ブラウザターゲットの実行 <a class="header-anchor" href="#ブラウザターゲットの実行" aria-label="Permalink to &quot;ブラウザターゲットの実行&quot;">​</a></h2><p>ブラウザをターゲットにする場合、プロジェクトには HTML ページが必要です。 このページは、アプリケーションの作業中に開発サーバーによって提供され、コンパイルされた Kotlin/JS ファイルを埋め込む必要があります。 HTML ファイル <code>/src/jsMain/resources/index.html</code> を作成し、入力してください。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;JS Client&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;js-tutorial.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>デフォルトでは、参照する必要があるプロジェクトの生成されたアーティファクト（webpack を介して作成されます）の名前は、プロジェクト名（この場合は <code>js-tutorial</code>）です。 プロジェクト名を <code>followAlong</code> とした場合、<code>js-tutorial.js</code> の代わりに <code>followAlong.js</code> を埋め込むようにしてください。</p><p>これらの調整を行った後、統合開発サーバーを起動します。これは、Gradle wrapper を介してコマンドラインから実行できます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsBrowserDevelopmentRun</span></span></code></pre></div><p>IntelliJ IDEA から作業する場合、<code>jsBrowserDevelopmentRun</code> アクションは Gradle ツールウィンドウにあります。</p><p>プロジェクトがビルドされた後、組み込みの <code>webpack-dev-server</code> が起動し、以前に指定した HTML ファイルを指す（一見空の）ブラウザウィンドウが開きます。 プログラムが正しく実行されていることを検証するには、ブラウザの開発者ツールを開きます（たとえば、右クリックして <em>Inspect</em> アクションを選択します）。 開発者ツール内でコンソールに移動すると、実行された JavaScript コードの結果が表示されます。</p><p><img src="`+t+'" alt="Console output in browser developer tools" width="700"></p><p>このセットアップを使用すると、コードを変更するたびにプロジェクトを再コンパイルして変更を確認できます。Kotlin/JS は、開発中にアプリケーションを自動的にリビルドするより便利な方法もサポートしています。 この <em>継続モード</em> の設定方法については、<a href="/ja/kotlin/dev-server-continuous-compilation">対応するチュートリアル</a> を確認してください。</p>',21)]))}const m=n(h,[["render",k]]);export{u as __pageData,m as default};
