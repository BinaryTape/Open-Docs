import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Kotlin 1.8.0 有什麼新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew18.md","filePath":"zh-Hant/kotlin/whatsnew18.md","lastUpdated":1754307826000}'),n={name:"zh-Hant/kotlin/whatsnew18.md"};function l(o,i,r,d,p,h){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="kotlin-1-8-0-有什麼新功能" tabindex="-1">Kotlin 1.8.0 有什麼新功能 <a class="header-anchor" href="#kotlin-1-8-0-有什麼新功能" aria-label="Permalink to &quot;Kotlin 1.8.0 有什麼新功能&quot;">​</a></h1><p><em><a href="/zh-Hant/kotlin/releases#release-details">發佈日期：2022 年 12 月 28 日</a></em></p><p>Kotlin 1.8.0 版本已發佈，以下是一些主要亮點：</p><ul><li><a href="#recursive-copying-or-deletion-of-directories">JVM 的新實驗性函式：遞迴複製或刪除目錄內容</a></li><li><a href="#improved-kotlin-reflect-performance">提升 kotlin-reflect 效能</a></li><li><a href="#a-new-compiler-option-for-disabling-optimizations">用於更好偵錯體驗的新 -Xdebug 編譯器選項</a></li><li><a href="#updated-jvm-compilation-target"><code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code> 合併至 <code>kotlin-stdlib</code></a></li><li><a href="#improved-objective-c-swift-interoperability">改進 Objective-C/Swift 互通性</a></li><li><a href="#gradle">相容於 Gradle 7.3</a></li></ul><h2 id="ide-支援" tabindex="-1">IDE 支援 <a class="header-anchor" href="#ide-支援" aria-label="Permalink to &quot;IDE 支援&quot;">​</a></h2><p>支援 1.8.0 的 Kotlin 外掛程式適用於：</p><table tabindex="0"><thead><tr><th>IDE</th><th>支援版本</th></tr></thead><tbody><tr><td>IntelliJ IDEA</td><td>2021.3, 2022.1, 2022.2</td></tr><tr><td>Android Studio</td><td>Electric Eel (221), Flamingo (222)</td></tr></tbody></table><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您可以在 IntelliJ IDEA 2022.3 中將您的專案更新至 Kotlin 1.8.0，而無需更新 IDE 外掛程式。 要在 IntelliJ IDEA 2022.3 中將現有專案遷移到 Kotlin 1.8.0，請將 Kotlin 版本變更為 <code>1.8.0</code> 並重新匯入 您的 Gradle 或 Maven 專案。</p></div><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>從 1.8.0 版開始，編譯器可以產生對應於 JVM 19 的位元碼版本的類別。 新的語言版本還包括：</p><ul><li><a href="#ability-to-not-generate-type-use-and-type-parameter-annotation-targets">用於關閉 JVM 註釋目標生成的編譯器選項</a></li><li><a href="#a-new-compiler-option-for-disabling-optimizations">用於停用最佳化的新 <code>-Xdebug</code> 編譯器選項</a></li><li><a href="#removal-of-the-old-backend">移除舊的後端</a></li><li><a href="#support-for-lombok-s-builder-annotation">支援 Lombok 的 @Builder 註釋</a></li></ul><h3 id="不生成-type-use-和-type-parameter-註釋目標的能力" tabindex="-1">不生成 TYPE_USE 和 TYPE_PARAMETER 註釋目標的能力 <a class="header-anchor" href="#不生成-type-use-和-type-parameter-註釋目標的能力" aria-label="Permalink to &quot;不生成 TYPE_USE 和 TYPE_PARAMETER 註釋目標的能力&quot;">​</a></h3><p>如果 Kotlin 註釋在其 Kotlin 目標中包含 <code>TYPE</code>，則該註釋會映射到其 Java 註釋目標列表中的 <code>java.lang.annotation.ElementType.TYPE_USE</code>。 這就像 <code>TYPE_PARAMETER</code> Kotlin 目標映射到 <code>java.lang.annotation.ElementType.TYPE_PARAMETER</code> Java 目標一樣。這對於 API 等級 低於 26 的 Android 用戶端是個問題，因為它們的 API 中沒有這些目標。</p><p>從 Kotlin 1.8.0 開始，您可以使用新的編譯器選項 <code>-Xno-new-java-annotation-targets</code> 來避免生成 <code>TYPE_USE</code> 和 <code>TYPE_PARAMETER</code> 註釋目標。</p><h3 id="用於停用最佳化的新編譯器選項" tabindex="-1">用於停用最佳化的新編譯器選項 <a class="header-anchor" href="#用於停用最佳化的新編譯器選項" aria-label="Permalink to &quot;用於停用最佳化的新編譯器選項&quot;">​</a></h3><p>Kotlin 1.8.0 新增了新的 <code>-Xdebug</code> 編譯器選項，它停用最佳化以提供更好的偵錯體驗。 目前，此選項停用協程的「已最佳化」功能。未來，在我們添加更多最佳化後， 此選項也會停用它們。</p><p>「已最佳化」功能在您使用暫停函式時最佳化變數。然而，偵錯具有最佳化變數的程式碼很困難， 因為您看不到它們的值。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><strong>切勿在生產環境中使用此選項</strong>：透過 <code>-Xdebug</code> 停用此功能可能會 <a href="https://youtrack.jetbrains.com/issue/KT-48678/Coroutine-debugger-disable-was-optimised-out-compiler-feature#focus=Comments-27-6015585.0-0" target="_blank" rel="noreferrer">導致記憶體洩漏</a>。</p></div><h3 id="移除舊的後端" tabindex="-1">移除舊的後端 <a class="header-anchor" href="#移除舊的後端" aria-label="Permalink to &quot;移除舊的後端&quot;">​</a></h3><p>在 Kotlin 1.5.0 中，我們<a href="/zh-Hant/kotlin/whatsnew15#stable-jvm-ir-backend">宣布</a>基於 IR 的後端已<a href="/zh-Hant/kotlin/components-stability">穩定</a>。 這意味著 Kotlin 1.4.* 的舊後端已棄用。在 Kotlin 1.8.0 中，我們已完全移除了舊後端。 因此，我們也移除了編譯器選項 <code>-Xuse-old-backend</code> 和 Gradle 選項 <code>useOldBackend</code>。</p><h3 id="支援-lombok-的-builder-註釋" tabindex="-1">支援 Lombok 的 @Builder 註釋 <a class="header-anchor" href="#支援-lombok-的-builder-註釋" aria-label="Permalink to &quot;支援 Lombok 的 @Builder 註釋&quot;">​</a></h3><p>社群已為 <a href="https://youtrack.jetbrains.com/issue/KT-46959" target="_blank" rel="noreferrer">Kotlin Lombok: 支援生成的 Builder (@Builder)</a> YouTrack 問題添加了如此多的票數，以至於我們不得不支援 <a href="https://projectlombok.org/features/Builder" target="_blank" rel="noreferrer">@Builder 註釋</a>。</p><p>我們目前尚無計劃支援 <code>@SuperBuilder</code> 或 <code>@Tolerate</code> 註釋，但如果足夠多的人 投票給 <a href="https://youtrack.jetbrains.com/issue/KT-53563/Kotlin-Lombok-Support-SuperBuilder" target="_blank" rel="noreferrer">@SuperBuilder</a> 和 <a href="https://youtrack.jetbrains.com/issue/KT-53564/Kotlin-Lombok-Support-Tolerate" target="_blank" rel="noreferrer">@Tolerate</a> 問題，我們將重新考慮。</p><p><a href="/zh-Hant/kotlin/lombok#gradle">了解如何配置 Lombok 編譯器外掛程式</a>。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.8.0 包含了 Objective-C 和 Swift 互通性的變更、對 Xcode 14.1 的支援以及 CocoaPods Gradle 外掛程式的改進：</p><ul><li><a href="#support-for-xcode-14-1">支援 Xcode 14.1</a></li><li><a href="#improved-objective-c-swift-interoperability">改進 Objective-C/Swift 互通性</a></li><li><a href="#dynamic-frameworks-by-default-in-the-cocoapods-gradle-plugin">CocoaPods Gradle 外掛程式中預設為動態框架</a></li></ul><h3 id="支援-xcode-14-1" tabindex="-1">支援 Xcode 14.1 <a class="header-anchor" href="#支援-xcode-14-1" aria-label="Permalink to &quot;支援 Xcode 14.1&quot;">​</a></h3><p>Kotlin/Native 編譯器現在支援最新的穩定 Xcode 版本 14.1。相容性改進包括 以下變更：</p><ul><li>為 watchOS 目標新增了 <code>watchosDeviceArm64</code> 預設，支援 ARM64 平台上的 Apple watchOS。</li><li>Kotlin CocoaPods Gradle 外掛程式預設不再包含 Apple 框架的位元碼嵌入。</li><li>平台函式庫已更新，以反映 Apple 目標的 Objective-C 框架變更。</li></ul><h3 id="改進-objective-c-swift-互通性" tabindex="-1">改進 Objective-C/Swift 互通性 <a class="header-anchor" href="#改進-objective-c-swift-互通性" aria-label="Permalink to &quot;改進 Objective-C/Swift 互通性&quot;">​</a></h3><p>為了使 Kotlin 與 Objective-C 和 Swift 更具互通性，新增了三個註釋：</p><ul><li><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-obj-c-name/" target="_blank" rel="noreferrer"><code>@ObjCName</code></a> 允許您在 Swift 或 Objective-C 中指定更 符合慣例的名稱，而不是重新命名 Kotlin 宣告。</p><p>此註釋指示 Kotlin 編譯器為此類別、屬性、參數或函式使用自訂的 Objective-C 和 Swift 名稱：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ObjCName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(swiftName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MySwiftArray&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyKotlinArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @ObjCName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ObjCName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;of&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) element: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage with the ObjCName annotations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">let array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySwiftArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">let index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(of: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;element&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-hidden-from-obj-c/" target="_blank" rel="noreferrer"><code>@HiddenFromObjC</code></a> 允許您從 Objective-C 隱藏 Kotlin 宣告。</p><p>此註釋指示 Kotlin 編譯器不將函式或屬性匯出到 Objective-C，因此也不匯出到 Swift。 這可以使您的 Kotlin 程式碼更符合 Objective-C/Swift 習慣。</p></li><li><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-should-refine-in-swift/" target="_blank" rel="noreferrer"><code>@ShouldRefineInSwift</code></a> 有助於 用 Swift 編寫的包裝器替換 Kotlin 宣告。</p><p>此註釋指示 Kotlin 編譯器將函式或屬性標記為生成 Objective-C API 中的 <code>swift_private</code>。這類宣告會獲得 <code>__</code> 前綴，這使得它們對 Swift 程式碼不可見。</p><p>您仍然可以在 Swift 程式碼中使用這些宣告來建立 Swift 友善的 API，但它們不會被 Xcode 的自動完成建議，例如。</p><p>有關在 Swift 中精煉 Objective-C 宣告的更多資訊，請參閱 <a href="https://developer.apple.com/documentation/swift/improving-objective-c-api-declarations-for-swift" target="_blank" rel="noreferrer">Apple 官方文件</a>。</p></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>新的註釋<a href="/zh-Hant/kotlin/opt-in-requirements">需要選擇性加入</a>。</p></div><p>Kotlin 團隊非常感謝 <a href="https://github.com/rickclephas" target="_blank" rel="noreferrer">Rick Clephas</a> 實作這些註釋。</p><h3 id="cocoapods-gradle-外掛程式中預設為動態框架" tabindex="-1">CocoaPods Gradle 外掛程式中預設為動態框架 <a class="header-anchor" href="#cocoapods-gradle-外掛程式中預設為動態框架" aria-label="Permalink to &quot;CocoaPods Gradle 外掛程式中預設為動態框架&quot;">​</a></h3><p>從 Kotlin 1.8.0 開始，由 CocoaPods Gradle 外掛程式註冊的 Kotlin 框架預設動態連結。 先前的靜態實作與 Kotlin Gradle 外掛程式的行為不一致。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyFramework&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            isStatic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 現在預設為動態</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果您有現有的專案使用靜態連結類型，並且您升級到 Kotlin 1.8.0（或明確變更連結類型）， 您可能會遇到專案執行錯誤。要解決此問題，請關閉您的 Xcode 專案並 在 Podfile 目錄中執行 <code>pod install</code>。</p><p>有關更多資訊，請參閱 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-dsl-reference.html" target="_blank" rel="noreferrer">CocoaPods Gradle 外掛程式 DSL 參考</a>。</p><h2 id="kotlin-multiplatform-新的-android-原始碼集佈局" tabindex="-1">Kotlin Multiplatform：新的 Android 原始碼集佈局 <a class="header-anchor" href="#kotlin-multiplatform-新的-android-原始碼集佈局" aria-label="Permalink to &quot;Kotlin Multiplatform：新的 Android 原始碼集佈局&quot;">​</a></h2><p>Kotlin 1.8.0 引入了新的 Android 原始碼集佈局，取代了先前令人困惑的目錄命名模式。</p><p>考慮目前佈局中建立的兩個 <code>androidTest</code> 目錄的範例。一個用於 <code>KotlinSourceSets</code>， 另一個用於 <code>AndroidSourceSets</code>：</p><ul><li>它們有不同的語義：Kotlin 的 <code>androidTest</code> 屬於 <code>unitTest</code> 類型，而 Android 的則屬於 <code>integrationTest</code> 類型。</li><li>它們會建立一個令人困惑的 <code>SourceDirectories</code> 佈局，因為 <code>src/androidTest/kotlin</code> 有一個 <code>UnitTest</code> 而 <code>src/androidTest/java</code> 有一個 <code>InstrumentedTest</code>。</li><li><code>KotlinSourceSets</code> 和 <code>AndroidSourceSets</code> 都對 Gradle 配置使用類似的命名模式，因此 兩個 <code>androidTest</code> 的結果配置都是相同的：<code>androidTestImplementation</code>、 <code>androidTestApi</code>、<code>androidTestRuntimeOnly</code> 和 <code>androidTestCompileOnly</code>。</li></ul><p>為了解決這些及其他現有問題，我們引入了新的 Android 原始碼集佈局。 以下是兩種佈局之間的一些主要區別：</p><h4 id="kotlinsourceset-命名模式" tabindex="-1">KotlinSourceSet 命名模式 <a class="header-anchor" href="#kotlinsourceset-命名模式" aria-label="Permalink to &quot;KotlinSourceSet 命名模式&quot;">​</a></h4><table tabindex="0"><thead><tr><th>目前原始碼集佈局</th><th>新原始碼集佈局</th></tr></thead><tbody><tr><td><code>targetName</code> + <code>AndroidSourceSet.name</code></td><td><code>targetName</code> + <code>AndroidVariantType</code></td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code> 映射至 <code>{KotlinSourceSet.name}</code> 如下：</p><table tabindex="0"><thead><tr><th></th><th>目前原始碼集佈局</th><th>新原始碼集佈局</th></tr></thead><tbody><tr><td>main</td><td>androidMain</td><td>androidMain</td></tr><tr><td>test</td><td>androidTest</td><td>android<b>Unit</b>Test</td></tr><tr><td>androidTest</td><td>android<b>Android</b>Test</td><td>android<b>Instrumented</b>Test</td></tr></tbody></table><h4 id="sourcedirectories" tabindex="-1">SourceDirectories <a class="header-anchor" href="#sourcedirectories" aria-label="Permalink to &quot;SourceDirectories&quot;">​</a></h4><table tabindex="0"><thead><tr><th>目前原始碼集佈局</th><th>新原始碼集佈局</th></tr></thead><tbody><tr><td>佈局添加了額外的 <code>/kotlin</code> SourceDirectories</td><td><code>src/{AndroidSourceSet.name}/kotlin</code>、<code>src/{KotlinSourceSet.name}/kotlin</code></td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code> 映射至 <code>{SourceDirectories included}</code> 如下：</p><table tabindex="0"><thead><tr><th></th><th>目前原始碼集佈局</th><th>新原始碼集佈局</th></tr></thead><tbody><tr><td>main</td><td>src/androidMain/kotlin、src/main/kotlin、src/main/java</td><td>src/androidMain/kotlin、src/main/kotlin、src/main/java</td></tr><tr><td>test</td><td>src/androidTest/kotlin、src/test/kotlin、src/test/java</td><td>src/android<b>Unit</b>Test/kotlin、src/test/kotlin、src/test/java</td></tr><tr><td>androidTest</td><td>src/android<b>Android</b>Test/kotlin、src/androidTest/java</td><td>src/android<b>Instrumented</b>Test/kotlin、src/androidTest/java、<b>src/androidTest/kotlin</b></td></tr></tbody></table><h4 id="androidmanifest-xml-檔案的位置" tabindex="-1">AndroidManifest.xml 檔案的位置 <a class="header-anchor" href="#androidmanifest-xml-檔案的位置" aria-label="Permalink to &quot;AndroidManifest.xml 檔案的位置&quot;">​</a></h4><table tabindex="0"><thead><tr><th>目前原始碼集佈局</th><th>新原始碼集佈局</th></tr></thead><tbody><tr><td>src/{<b>Android</b>SourceSet.name}/AndroidManifest.xml</td><td>src/{<b>Kotlin</b>SourceSet.name}/AndroidManifest.xml</td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code> 映射至<code>{AndroidManifest.xml location}</code> 如下：</p><table tabindex="0"><thead><tr><th></th><th>目前原始碼集佈局</th><th>新原始碼集佈局</th></tr></thead><tbody><tr><td>main</td><td>src/main/AndroidManifest.xml</td><td>src/<b>android</b>Main/AndroidManifest.xml</td></tr><tr><td>debug</td><td>src/debug/AndroidManifest.xml</td><td>src/<b>android</b>Debug/AndroidManifest.xml</td></tr></tbody></table><h4 id="android-與通用測試之間的關係" tabindex="-1">Android 與通用測試之間的關係 <a class="header-anchor" href="#android-與通用測試之間的關係" aria-label="Permalink to &quot;Android 與通用測試之間的關係&quot;">​</a></h4><p>新的 Android 原始碼集佈局改變了 Android 儀器測試（在新佈局中重新命名為 <code>androidInstrumentedTest</code>） 與通用測試之間的關係。</p><p>以前，<code>androidAndroidTest</code> 和 <code>commonTest</code> 之間存在預設的 <code>dependsOn</code> 關係。實際上，這意味著：</p><ul><li><code>commonTest</code> 中的程式碼在 <code>androidAndroidTest</code> 中可用。</li><li><code>commonTest</code> 中的 <code>expect</code> 宣告必須在 <code>androidAndroidTest</code> 中有對應的 <code>actual</code> 實作。</li><li>在 <code>commonTest</code> 中宣告的測試也作為 Android 儀器測試執行。</li></ul><p>在新的 Android 原始碼集佈局中，預設不添加 <code>dependsOn</code> 關係。如果您偏好先前的行為， 請在您的 <code>build.gradle.kts</code> 檔案中手動宣告此關係：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> androidInstrumentedTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonTest)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="支援-android-風味" tabindex="-1">支援 Android 風味 <a class="header-anchor" href="#支援-android-風味" aria-label="Permalink to &quot;支援 Android 風味&quot;">​</a></h4><p>以前，Kotlin Gradle 外掛程式會主動建立對應於帶有 <code>debug</code> 和 <code>release</code> 建構類型或自訂風味（如 <code>demo</code> 和 <code>full</code>）的 Android 原始碼集。 它使它們可透過 <code>val androidDebug by getting { ... }</code> 這樣的結構存取。</p><p>在新的 Android 原始碼集佈局中，這些原始碼集是在 <code>afterEvaluate</code> 階段建立的。這使得此類表達式無效， 導致像 <code>org.gradle.api.UnknownDomainObjectException: KotlinSourceSet with name &#39;androidDebug&#39; not found</code> 這樣的錯誤。</p><p>為了解決這個問題，請在您的 <code>build.gradle.kts</code> 檔案中使用新的 <code>invokeWhenCreated()</code> API：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invokeWhenCreated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidFreeDebug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="配置與設定" tabindex="-1">配置與設定 <a class="header-anchor" href="#配置與設定" aria-label="Permalink to &quot;配置與設定&quot;">​</a></h3><p>新佈局將在未來版本中成為預設值。您現在可以使用以下 Gradle 選項啟用它：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.androidSourceSetLayoutVersion=2</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>新佈局需要 Android Gradle 外掛程式 7.0 或更高版本，並支援 Android Studio 2022.3 及更高版本。</p></div><p>現在不鼓勵使用先前的 Android 樣式目錄。Kotlin 1.8.0 標誌著棄用週期的開始， 引入了對目前佈局的警告。您可以使用以下 Gradle 屬性抑制警告：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.androidSourceSetLayoutVersion1.nowarn=true</span></span></code></pre></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin 1.8.0 穩定化了 JS IR 編譯器後端，並為 JavaScript 相關的 Gradle 建構腳本帶來了新功能：</p><ul><li><a href="#stable-js-ir-compiler-backend">穩定的 JS IR 編譯器後端</a></li><li><a href="#new-settings-for-reporting-that-yarn-lock-has-been-updated">用於報告 <code>yarn.lock</code> 已更新的新設定</a></li><li><a href="#add-test-targets-for-browsers-via-gradle-properties">透過 Gradle 屬性為瀏覽器添加測試目標</a></li><li><a href="#new-approach-to-adding-css-support-to-your-project">將 CSS 支援添加到專案的新方法</a></li></ul><h3 id="穩定的-js-ir-編譯器後端" tabindex="-1">穩定的 JS IR 編譯器後端 <a class="header-anchor" href="#穩定的-js-ir-編譯器後端" aria-label="Permalink to &quot;穩定的 JS IR 編譯器後端&quot;">​</a></h3><p>從此版本開始，<a href="/zh-Hant/kotlin/js-ir-compiler">Kotlin/JS 中間表示 (IR) 編譯器</a>後端已穩定。 統一所有三個後端的基礎設施花費了一些時間，但它們現在都使用相同的 IR 處理 Kotlin 程式碼。</p><p>由於穩定的 JS IR 編譯器後端，舊的從現在開始棄用。</p><p>增量編譯預設啟用，並與穩定的 JS IR 編譯器一起。</p><p>如果您仍在使用舊編譯器，請借助我們的<a href="/zh-Hant/kotlin/js-ir-migration">遷移指南</a>將您的專案切換到新後端。</p><h3 id="用於報告-yarn-lock-已更新的新設定" tabindex="-1">用於報告 <code>yarn.lock</code> 已更新的新設定 <a class="header-anchor" href="#用於報告-yarn-lock-已更新的新設定" aria-label="Permalink to &quot;用於報告 \`yarn.lock\` 已更新的新設定&quot;">​</a></h3><p>如果您使用 <code>yarn</code> 套件管理器，有三個新的特殊 Gradle 設定可以通知您 <code>yarn.lock</code> 檔案是否已更新。當您希望在 CI 建構過程中 <code>yarn.lock</code> 被靜默更改時收到通知時， 您可以使用這些設定。</p><p>這三個新的 Gradle 屬性是：</p><ul><li><code>YarnLockMismatchReport</code>，指定如何報告 <code>yarn.lock</code> 檔案的變更。您可以使用以下其中一個值： <ul><li><code>FAIL</code> 使對應的 Gradle 任務失敗。這是預設值。</li><li><code>WARNING</code> 將有關變更的資訊寫入警告日誌。</li><li><code>NONE</code> 停用報告。</li></ul></li><li><code>reportNewYarnLock</code>，明確報告最近建立的 <code>yarn.lock</code> 檔案。預設情況下，此選項已停用： 首次啟動時生成新的 <code>yarn.lock</code> 檔案是常見做法。您可以使用此選項來 確保該檔案已提交到您的儲存庫。</li><li><code>yarnLockAutoReplace</code>，每次運行 Gradle 任務時自動替換 <code>yarn.lock</code>。</li></ul><p>要使用這些選項，請更新您的建構腳本檔案 <code>build.gradle.kts</code> 如下：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.targets.js.yarn.YarnLockMismatchReport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rootProject.plugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootProject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YarnRootExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().yarnLockMismatchReport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        YarnLockMismatchReport.WARNING </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NONE | FAIL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootProject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YarnRootExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().reportNewYarnLock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootProject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YarnRootExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().yarnLockAutoReplace </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="透過-gradle-屬性為瀏覽器添加測試目標" tabindex="-1">透過 Gradle 屬性為瀏覽器添加測試目標 <a class="header-anchor" href="#透過-gradle-屬性為瀏覽器添加測試目標" aria-label="Permalink to &quot;透過 Gradle 屬性為瀏覽器添加測試目標&quot;">​</a></h3><p>從 Kotlin 1.8.0 開始，您可以直接在 Gradle 屬性檔案中為不同的瀏覽器設定測試目標。這樣做 可以縮小建構腳本檔案的大小，因為您不再需要將所有目標寫入 <code>build.gradle.kts</code>。</p><p>您可以使用此屬性為所有模組定義瀏覽器列表，然後在特定模組的建構腳本中添加特定瀏覽器。</p><p>例如，您的 Gradle 屬性檔案中的以下行將在所有模組的 Firefox 和 Safari 中執行測試：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.js.browser.karma.browsers=firefox,safari</span></span></code></pre></div><p>請參閱 <a href="https://github.com/JetBrains/kotlin/blob/master/libraries/tools/kotlin-gradle-plugin/src/common/kotlin/org/jetbrains/kotlin/gradle/targets/js/testing/karma/KotlinKarma.kt#L106" target="_blank" rel="noreferrer">GitHub 上的屬性可用值的完整列表</a>。</p><p>Kotlin 團隊非常感謝 <a href="https://github.com/mpetuska" target="_blank" rel="noreferrer">Martynas Petuška</a> 實作此功能。</p><h3 id="將-css-支援添加到專案的新方法" tabindex="-1">將 CSS 支援添加到專案的新方法 <a class="header-anchor" href="#將-css-支援添加到專案的新方法" aria-label="Permalink to &quot;將 CSS 支援添加到專案的新方法&quot;">​</a></h3><p>此版本提供了將 CSS 支援添加到專案的新方法。我們假設這將影響許多專案， 所以別忘了按照以下說明更新您的 Gradle 建構腳本檔案。</p><p>在 Kotlin 1.8.0 之前，<code>cssSupport.enabled</code> 屬性用於添加 CSS 支援：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    commonWebpackConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cssSupport.enabled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>現在您應該在 <code>cssSupport {}</code> 區塊中使用 <code>enabled.set()</code> 方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    commonWebpackConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cssSupport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            enabled.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.8.0 <strong>完全</strong>支援 Gradle 7.2 和 7.3 版本。您也可以使用最新 Gradle 版本之前的 Gradle 版本， 但如果這樣做，請記住您可能會遇到棄用警告或某些新的 Gradle 功能可能無法運作。</p><p>此版本帶來了許多變更：</p><ul><li><a href="#exposing-kotlin-compiler-options-as-gradle-lazy-properties">將 Kotlin 編譯器選項公開為 Gradle 延遲屬性</a></li><li><a href="#bumping-the-minimum-supported-versions">提升最低支援版本</a></li><li><a href="#ability-to-disable-the-kotlin-daemon-fallback-strategy">停用 Kotlin 守護行程回退策略的能力</a></li><li><a href="#usage-of-the-latest-kotlin-stdlib-version-in-transitive-dependencies">在傳遞性依賴項中使用最新 kotlin-stdlib 版本</a></li><li><a href="#obligatory-check-for-jvm-targets-of-related-kotlin-and-java-compile-tasks">相關 Kotlin 和 Java 編譯任務的 JVM 目標相容性平等性強制檢查</a></li><li><a href="#resolution-of-kotlin-gradle-plugins-transitive-dependencies">Kotlin Gradle 外掛程式傳遞性依賴項的解析</a></li><li><a href="#deprecations-and-removals">棄用與移除</a></li></ul><h3 id="將-kotlin-編譯器選項公開為-gradle-延遲屬性" tabindex="-1">將 Kotlin 編譯器選項公開為 Gradle 延遲屬性 <a class="header-anchor" href="#將-kotlin-編譯器選項公開為-gradle-延遲屬性" aria-label="Permalink to &quot;將 Kotlin 編譯器選項公開為 Gradle 延遲屬性&quot;">​</a></h3><p>為了將可用的 Kotlin 編譯器選項公開為 <a href="https://docs.gradle.org/current/userguide/lazy-configuration.html" target="_blank" rel="noreferrer">Gradle 延遲屬性</a> 並將它們更好地整合到 Kotlin 任務中，我們進行了許多變更：</p><ul><li><p>編譯任務具有新的 <code>compilerOptions</code> 輸入，它類似於現有的 <code>kotlinOptions</code>，但使用 Gradle Properties API 中的 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/provider/Property.html" target="_blank" rel="noreferrer"><code>Property</code></a> 作為回傳類型：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compileKotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        useK2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Kotlin 工具任務 <code>KotlinJsDce</code> 和 <code>KotlinNativeLink</code> 具有新的 <code>toolOptions</code> 輸入，它類似於 現有的 <code>kotlinOptions</code> 輸入。</p></li><li><p>新的輸入具有 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/Nested.html" target="_blank" rel="noreferrer"><code>@Nested</code> Gradle 註釋</a>。 輸入中的每個屬性都有一個相關的 Gradle 註釋，例如 <a href="https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:up_to_date_checks" target="_blank" rel="noreferrer"><code>@Input</code> 或 <code>@Internal</code></a>。</p></li><li><p>Kotlin Gradle 外掛程式 API 構件有兩個新介面：</p><ul><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask</code>，它具有 <code>compilerOptions</code> 輸入和 <code>compileOptions()</code> 方法。所有 Kotlin 編譯任務都實作此介面。</li><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinToolTask</code>，它具有 <code>toolOptions</code> 輸入和 <code>toolOptions()</code> 方法。 所有 Kotlin 工具任務——<code>KotlinJsDce</code>、<code>KotlinNativeLink</code> 和 <code>KotlinNativeLinkArtifactTask</code>——都實作此介面。</li></ul></li><li><p>某些 <code>compilerOptions</code> 使用新類型而非 <code>String</code> 類型：</p><ul><li><a href="https://github.com/JetBrains/kotlin/blob/1.8.0/libraries/tools/kotlin-gradle-compiler-types/src/generated/kotlin/org/jetbrains/kotlin/gradle/dsl/JvmTarget.kt" target="_blank" rel="noreferrer"><code>JvmTarget</code></a></li><li><a href="https://github.com/JetBrains/kotlin/blob/1.8.0/libraries/tools/kotlin-gradle-compiler-types/src/generated/kotlin/org/jetbrains/kotlin/gradle/dsl/KotlinVersion.kt" target="_blank" rel="noreferrer"><code>KotlinVersion</code></a> （用於 <code>apiVersion</code> 和 <code>languageVersion</code> 輸入）</li><li><a href="https://github.com/JetBrains/kotlin/blob/1.8.0/libraries/tools/kotlin-gradle-compiler-types/src/generated/kotlin/org/jetbrains/kotlin/gradle/dsl/JsMainFunctionExecutionMode.kt" target="_blank" rel="noreferrer"><code>JsMainFunctionExecutionMode</code></a></li><li><a href="https://github.com/JetBrains/kotlin/blob/1.8.0/libraries/tools/kotlin-gradle-compiler-types/src/generated/kotlin/org/jetbrains/kotlin/gradle/dsl/JsModuleKind.kt" target="_blank" rel="noreferrer"><code>JsModuleKind</code></a></li><li><a href="https://github.com/JetBrains/kotlin/blob/1.8.0/libraries/tools/kotlin-gradle-compiler-types/src/generated/kotlin/org/jetbrains/kotlin/gradle/dsl/JsSourceMapEmbedMode.kt" target="_blank" rel="noreferrer"><code>JsSourceMapEmbedMode</code></a></li></ul><p>例如，您可以使用 <code>compilerOptions.jvmTarget.set(JvmTarget.JVM_11)</code> 而不是 <code>kotlinOptions.jvmTarget = &quot;11&quot;</code>。</p><p><code>kotlinOptions</code> 類型沒有改變，它們在內部轉換為 <code>compilerOptions</code> 類型。</p></li><li><p>Kotlin Gradle 外掛程式 API 與先前的版本二進位相容。然而，<code>kotlin-gradle-plugin</code> 構件中有一些原始碼和 ABI 破壞性變更。這些變更大多涉及某些內部類型的額外泛型參數。一個重要的變更是 <code>KotlinNativeLink</code> 任務不再繼承 <code>AbstractKotlinNativeCompile</code> 任務。</p></li><li><p><code>KotlinJsCompilerOptions.outputFile</code> 和相關的 <code>KotlinJsOptions.outputFile</code> 選項已棄用。請改用 <code>Kotlin2JsCompile.outputFileProperty</code> 任務輸入。</p></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin Gradle 外掛程式仍然將 <code>KotlinJvmOptions</code> DSL 添加到 Android 擴展： <code>kotlin android { kotlinOptions { jvmTarget = &quot;11&quot; } } </code> 這將在<a href="https://youtrack.jetbrains.com/issue/KT-15370/Gradle-DSL-add-module-level-kotlin-options" target="_blank" rel="noreferrer">此問題</a>的範圍內更改， 當 <code>compilerOptions</code> DSL 將被添加到模組層級時。</p></div><h4 id="限制" tabindex="-1">限制 <a class="header-anchor" href="#限制" aria-label="Permalink to &quot;限制&quot;">​</a></h4><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>kotlinOptions</code> 任務輸入和 <code>kotlinOptions{...}</code> 任務 DSL 處於支援模式，並將在 即將發布的版本中棄用。改進將僅限於 <code>compilerOptions</code> 和 <code>toolOptions</code>。</p></div><p>呼叫 <code>kotlinOptions</code> 上的任何 setter 或 getter 都會委託給 <code>compilerOptions</code> 中相關的屬性。 這引入了以下限制：</p><ul><li><code>compilerOptions</code> 和 <code>kotlinOptions</code> 無法在任務執行階段更改（下方段落中有一項例外）。</li><li><code>freeCompilerArgs</code> 返回一個不可變的 <code>List&lt;String&gt;</code>，這意味著，例如， <code>kotlinOptions.freeCompilerArgs.remove(&quot;something&quot;)</code> 將會失敗。</li></ul><p>包括 <code>kotlin-dsl</code> 和啟用 <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> 的 Android Gradle 外掛程式 (AGP) 在內的幾個外掛程式， 嘗試在任務執行階段修改 <code>freeCompilerArgs</code> 屬性。我們已在 Kotlin 1.8.0 中為它們添加了解決方案。 此解決方案允許任何建構腳本或外掛程式在執行階段修改 <code>kotlinOptions.freeCompilerArgs</code>， 但在建構日誌中產生警告。要停用此警告，請使用新的 Gradle 屬性 <code>kotlin.options.suppressFreeCompilerArgsModificationWarning=true</code>。 Gradle 將為 <a href="https://github.com/gradle/gradle/issues/22091" target="_blank" rel="noreferrer"><code>kotlin-dsl</code> 外掛程式</a> 和 <a href="https://issuetracker.google.com/u/1/issues/247544167" target="_blank" rel="noreferrer">啟用 Jetpack Compose 的 AGP</a> 添加修復。</p><h3 id="提升最低支援版本" tabindex="-1">提升最低支援版本 <a class="header-anchor" href="#提升最低支援版本" aria-label="Permalink to &quot;提升最低支援版本&quot;">​</a></h3><p>從 Kotlin 1.8.0 開始，最低支援的 Gradle 版本是 6.8.3，最低支援的 Android Gradle 外掛程式 版本是 4.1.3。</p><p>請參閱<a href="/zh-Hant/kotlin/gradle-configure-project#apply-the-plugin">我們的文件中 Kotlin Gradle 外掛程式與可用 Gradle 版本的相容性</a>。</p><h3 id="停用-kotlin-守護行程回退策略的能力" tabindex="-1">停用 Kotlin 守護行程回退策略的能力 <a class="header-anchor" href="#停用-kotlin-守護行程回退策略的能力" aria-label="Permalink to &quot;停用 Kotlin 守護行程回退策略的能力&quot;">​</a></h3><p>有一個新的 Gradle 屬性 <code>kotlin.daemon.useFallbackStrategy</code>，其預設值為 <code>true</code>。當值為 <code>false</code> 時， 如果守護行程啟動或通訊出現問題，建構將會失敗。Kotlin 編譯任務中還有一個新的 <code>useDaemonFallbackStrategy</code> 屬性，如果您同時使用兩者，該屬性會優先於 Gradle 屬性。 如果記憶體不足以執行編譯，您可以在日誌中看到相關訊息。</p><p>Kotlin 編譯器的回退策略是，如果守護行程因故失敗，則在 Kotlin 守護行程之外運行編譯。 如果 Gradle 守護行程開啟，編譯器使用「程序內」策略。如果 Gradle 守護行程關閉，編譯器使用 「程序外」策略。了解更多關於這些<a href="/zh-Hant/kotlin/gradle-compilation-and-caches#defining-kotlin-compiler-execution-strategy">執行策略的資訊</a>。 請注意，靜默回退到另一種策略可能會消耗大量系統資源或導致非確定性建構； 有關更多詳細資訊，請參閱此 <a href="https://youtrack.jetbrains.com/issue/KT-48843/Add-ability-to-disable-Kotlin-daemon-fallback-strategy" target="_blank" rel="noreferrer">YouTrack 問題</a>。</p><h3 id="在傳遞性依賴項中使用最新-kotlin-stdlib-版本" tabindex="-1">在傳遞性依賴項中使用最新 kotlin-stdlib 版本 <a class="header-anchor" href="#在傳遞性依賴項中使用最新-kotlin-stdlib-版本" aria-label="Permalink to &quot;在傳遞性依賴項中使用最新 kotlin-stdlib 版本&quot;">​</a></h3><p>如果您在依賴項中明確寫入 Kotlin 1.8.0 或更高版本，例如： <code>implementation(&quot;org.jetbrains.kotlin:kotlin-stdlib:1.8.0&quot;)</code>，那麼 Kotlin Gradle 外掛程式將使用該 Kotlin 版本 處理傳遞性 <code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code> 依賴項。這樣做是為了避免不同 stdlib 版本導致的類別重複 （了解更多關於<a href="#updated-jvm-compilation-target">將 <code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code> 合併到 <code>kotlin-stdlib</code></a>）。 您可以使用 <code>kotlin.stdlib.jdk.variants.version.alignment</code> Gradle 屬性停用此行為：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.stdlib.jdk.variants.version.alignment=false</span></span></code></pre></div><p>如果您遇到版本對齊問題，請透過 Kotlin <a href="https://docs.gradle.org/current/userguide/platforms.html#sub:bom_import" target="_blank" rel="noreferrer">BOM</a> 對齊所有版本，在您的建構腳本中宣告對 <code>kotlin-bom</code> 的平台依賴：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-bom:1.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>了解其他情況和我們建議的解決方案，請參閱<a href="/zh-Hant/kotlin/gradle-configure-project#other-ways-to-align-versions">文件</a>。</p><h3 id="相關-kotlin-和-java-編譯任務的-jvm-目標相容性平等性強制檢查" tabindex="-1">相關 Kotlin 和 Java 編譯任務的 JVM 目標相容性平等性強制檢查 <a class="header-anchor" href="#相關-kotlin-和-java-編譯任務的-jvm-目標相容性平等性強制檢查" aria-label="Permalink to &quot;相關 Kotlin 和 Java 編譯任務的 JVM 目標相容性平等性強制檢查&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>即使您的原始碼檔案僅為 Kotlin 且不使用 Java，本節也適用於您的 JVM 專案。</p></div><p><a href="https://youtrack.jetbrains.com/issue/KT-54993/Raise-kotlin.jvm.target.validation.mode-check-default-level-to-error-when-build-is-running-on-Gradle-8" target="_blank" rel="noreferrer">從此版本開始</a>， 對於 Gradle 8.0+ 上的專案（此版本 Gradle 尚未發布），<a href="/zh-Hant/kotlin/gradle-configure-project#check-for-jvm-target-compatibility-of-related-compile-tasks"><code>kotlin.jvm.target.validation.mode</code> 屬性</a>的預設值為 <code>error</code>， 如果 JVM 目標不相容，外掛程式將導致建構失敗。</p><p>預設值從 <code>warning</code> 轉變為 <code>error</code> 是平穩遷移到 Gradle 8.0 的準備步驟。 <strong>我們鼓勵您將此屬性設定為 <code>error</code></strong> 並<a href="/zh-Hant/kotlin/gradle-configure-project#gradle-java-toolchains-support">配置工具鏈</a> 或手動對齊 JVM 版本。</p><p>了解更多關於<a href="/zh-Hant/kotlin/gradle-configure-project#what-can-go-wrong-if-targets-are-incompatible">如果不檢查目標相容性可能出什麼問題</a>。</p><h3 id="kotlin-gradle-外掛程式傳遞性依賴項的解析" tabindex="-1">Kotlin Gradle 外掛程式傳遞性依賴項的解析 <a class="header-anchor" href="#kotlin-gradle-外掛程式傳遞性依賴項的解析" aria-label="Permalink to &quot;Kotlin Gradle 外掛程式傳遞性依賴項的解析&quot;">​</a></h3><p>在 Kotlin 1.7.0 中，我們引入了<a href="/zh-Hant/kotlin/whatsnew17#support-for-gradle-plugin-variants">對 Gradle 外掛程式變體的支援</a>。 由於這些外掛程式變體，建構類別路徑可能具有不同版本的 <a href="https://plugins.gradle.org/u/kotlin" target="_blank" rel="noreferrer">Kotlin Gradle 外掛程式</a>， 它們依賴於某些依賴項的不同版本，通常是 <code>kotlin-gradle-plugin-api</code>。這可能導致 解析問題，我們建議以下解決方案，以 <code>kotlin-dsl</code> 外掛程式為例。</p><p>Gradle 7.6 中的 <code>kotlin-dsl</code> 外掛程式依賴於 <code>org.jetbrains.kotlin.plugin.sam.with.receiver:1.7.10</code> 外掛程式， 該外掛程式又依賴於 <code>kotlin-gradle-plugin-api:1.7.10</code>。如果您添加 <code>org.jetbrains.kotlin.gradle.jvm:1.8.0</code> 外掛程式， 這個 <code>kotlin-gradle-plugin-api:1.7.10</code> 傳遞性依賴項可能由於版本（<code>1.8.0</code> 和 <code>1.7.10</code>）和變體屬性 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/attributes/plugin/GradlePluginApiVersion.html" target="_blank" rel="noreferrer"><code>org.gradle.plugin.api-version</code></a> 值之間的不匹配而導致依賴解析錯誤。 作為解決方案，添加此<a href="https://docs.gradle.org/current/userguide/dependency_constraints.html#sec:adding-constraints-transitive-deps" target="_blank" rel="noreferrer">約束</a>以對齊版本。 此解決方案可能在我們實作<a href="https://youtrack.jetbrains.com/issue/KT-54691/Kotlin-Gradle-Plugin-libraries-alignment-platform" target="_blank" rel="noreferrer">Kotlin Gradle 外掛程式函式庫對齊平台</a>之前是必需的， 這在計劃中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    constraints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-sam-with-receiver:1.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此約束強制在建構類別路徑中對傳遞性依賴項使用 <code>org.jetbrains.kotlin:kotlin-sam-with-receiver:1.8.0</code> 版本。 了解更多關於 <a href="https://github.com/gradle/gradle/issues/22510#issuecomment-1292259298" target="_blank" rel="noreferrer">Gradle 問題追蹤器中一個類似的情況</a>。</p><h3 id="棄用與移除" tabindex="-1">棄用與移除 <a class="header-anchor" href="#棄用與移除" aria-label="Permalink to &quot;棄用與移除&quot;">​</a></h3><p>在 Kotlin 1.8.0 中，以下屬性和方法的棄用週期仍在繼續：</p><ul><li><a href="/zh-Hant/kotlin/whatsnew17#changes-in-compile-tasks">在 Kotlin 1.7.0 的備註中</a>，<code>KotlinCompile</code> 任務仍然具有 已棄用的 Kotlin 屬性 <code>classpath</code>，該屬性將在未來版本中移除。現在，我們已將 <code>KotlinCompile</code> 任務的 <code>classpath</code> 屬性的棄用級別更改為 <code>error</code>。所有編譯任務都使用 <code>libraries</code> 輸入作為編譯所需的函式庫列表。</li><li>我們移除了 <code>kapt.use.worker.api</code> 屬性，該屬性允許透過 Gradle Workers API 執行 <a href="/zh-Hant/kotlin/kapt">kapt</a>。 預設情況下，<a href="/zh-Hant/kotlin/kapt#run-kapt-tasks-in-parallel">kapt 自 Kotlin 1.3.70 起就一直在使用 Gradle workers</a>， 我們建議堅持使用此方法。</li><li>在 Kotlin 1.7.0 中，我們<a href="/zh-Hant/kotlin/whatsnew17#deprecation-of-the-kotlin-compiler-execution-strategy-system-property">宣布了 <code>kotlin.compiler.execution.strategy</code> 系統屬性棄用週期的開始</a>。 在此版本中，我們移除了此屬性。了解如何<a href="/zh-Hant/kotlin/gradle-compilation-and-caches#defining-kotlin-compiler-execution-strategy">以其他方式定義 Kotlin 編譯器執行策略</a>。</li></ul><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><p>Kotlin 1.8.0：</p><ul><li>更新 <a href="#updated-jvm-compilation-target">JVM 編譯目標</a>。</li><li>穩定化多個函式——<a href="#timeunit-conversion-between-java-and-kotlin">Java 和 Kotlin 之間的 TimeUnit 轉換</a>、 <a href="#cbrt"><code>cbrt()</code></a>、<a href="#java-optionals-extension-functions">Java <code>Optionals</code> 擴展函式</a>。</li><li>提供<a href="#comparable-and-subtractable-timemarks">可比較和可相減 <code>TimeMarks</code> 的預覽</a>。</li><li>包含 <a href="#recursive-copying-or-deletion-of-directories"><code>java.nio.file.path</code> 的實驗性擴展函式</a>。</li><li>呈現<a href="#improved-kotlin-reflect-performance">提升的 kotlin-reflect 效能</a>。</li></ul><h3 id="更新-jvm-編譯目標" tabindex="-1">更新 JVM 編譯目標 <a class="header-anchor" href="#更新-jvm-編譯目標" aria-label="Permalink to &quot;更新 JVM 編譯目標&quot;">​</a></h3><p>在 Kotlin 1.8.0 中，標準函式庫（<code>kotlin-stdlib</code>、<code>kotlin-reflect</code> 和 <code>kotlin-script-*</code>）以 JVM 目標 1.8 編譯。此前，標準函式庫以 JVM 目標 1.6 編譯。</p><p>Kotlin 1.8.0 不再支援 JVM 目標 1.6 和 1.7。因此，您不再需要單獨在建構腳本中宣告 <code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code>，因為這些構件的內容已合併到 <code>kotlin-stdlib</code> 中。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您已明確宣告 <code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code> 為您的依賴項， 那麼您應該將它們替換為 <code>kotlin-stdlib</code>。</p></div><p>請注意，混用不同版本的 stdlib 構件可能導致類別重複或缺少類別。 為避免這種情況，Kotlin Gradle 外掛程式可以幫助您<a href="#usage-of-the-latest-kotlin-stdlib-version-in-transitive-dependencies">對齊 stdlib 版本</a>。</p><h3 id="cbrt" tabindex="-1">cbrt() <a class="header-anchor" href="#cbrt" aria-label="Permalink to &quot;cbrt()&quot;">​</a></h3><p><code>cbrt()</code> 函式，它允許您計算 <code>double</code> 或 <code>float</code> 的實數立方根，現已穩定。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 27</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> negNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The cube root of \${num.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()} is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            cbrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The cube root of \${negNum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()} is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            cbrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(negNum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="java-和-kotlin-之間的-timeunit-轉換" tabindex="-1">Java 和 Kotlin 之間的 TimeUnit 轉換 <a class="header-anchor" href="#java-和-kotlin-之間的-timeunit-轉換" aria-label="Permalink to &quot;Java 和 Kotlin 之間的 TimeUnit 轉換&quot;">​</a></h3><p><code>kotlin.time</code> 中的 <code>toTimeUnit()</code> 和 <code>toDurationUnit()</code> 函式現已穩定。 這些函式在 Kotlin 1.6.0 中作為實驗性功能引入，改善了 Kotlin 和 Java 之間的互通性。 您現在可以輕鬆地在 Java <code>java.util.concurrent.TimeUnit</code> 和 Kotlin <code>kotlin.time.DurationUnit</code> 之間轉換。 這些函式僅在 JVM 上支援。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// For use from Java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timeout: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, unit: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duration: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(unit.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDurationUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="可比較和可相減的-timemarks" tabindex="-1">可比較和可相減的 TimeMarks <a class="header-anchor" href="#可比較和可相減的-timemarks" aria-label="Permalink to &quot;可比較和可相減的 TimeMarks&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>TimeMarks</code> 的新功能是<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>的，要使用它 您需要透過使用 <code>@OptIn(ExperimentalTime::class)</code> 或 <code>@ExperimentalTime</code> 選擇性加入。</p></div><p>在 Kotlin 1.8.0 之前，如果您想計算多個 <code>TimeMarks</code> 和<strong>現在</strong>之間的時間差，您 一次只能在一個 <code>TimeMark</code> 上呼叫 <code>elapsedNow()</code>。這使得比較結果變得困難， 因為兩個 <code>elapsedNow()</code> 函式呼叫無法在完全相同的時間執行。</p><p>為了解決這個問題，在 Kotlin 1.8.0 中，您可以從相同的時間來源相減和比較 <code>TimeMarks</code>。 現在您可以建立一個新的 <code>TimeMark</code> 實例來表示<strong>現在</strong>，並從中減去其他 <code>TimeMarks</code>。 這樣，您從這些計算中收集到的結果保證是彼此相對的。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeSource.Monotonic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Sleep 0.5 seconds</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Before 1.8.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elapsedNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elapsedNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Difference between elapsed1 and elapsed2 can vary depending </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // on how much time passes between the two elapsedNow() calls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Measurement 1.\${n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}: elapsed1=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;elapsed2=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, diff=\${elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elapsed2}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Since 1.8.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Now the elapsed times are calculated relative to mark3, </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // which is a fixed value</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Measurement 2.\${n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}: elapsed1=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &quot;elapsed2=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, diff=\${elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elapsed2}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // It&#39;s also possible to compare time marks with each other</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // This is true, as mark2 was captured later than mark1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mark2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此新功能在動畫計算中特別有用，您可以計算或比較代表不同影格的多個 <code>TimeMarks</code> 之間的差異。</p><h3 id="遞迴複製或刪除目錄" tabindex="-1">遞迴複製或刪除目錄 <a class="header-anchor" href="#遞迴複製或刪除目錄" aria-label="Permalink to &quot;遞迴複製或刪除目錄&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>這些用於 <code>java.nio.file.Path</code> 的新函式是<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>的。 要使用它們，您需要透過 <code>@OptIn(kotlin.io.path.ExperimentalPathApi::class)</code> 或 <code>@kotlin.io.path.ExperimentalPathApi</code> 選擇性加入。 或者，您可以使用編譯器選項 <code>-opt-in=kotlin.io.path.ExperimentalPathApi</code>。</p></div><p>我們引入了兩個新的 <code>java.nio.file.Path</code> 擴展函式，<code>copyToRecursively()</code> 和 <code>deleteRecursively()</code>， 它們允許您遞迴地：</p><ul><li>將目錄及其內容複製到另一個目的地。</li><li>刪除目錄及其內容。</li></ul><p>這些函式作為備份過程的一部分非常有用。</p><h4 id="錯誤處理" tabindex="-1">錯誤處理 <a class="header-anchor" href="#錯誤處理" aria-label="Permalink to &quot;錯誤處理&quot;">​</a></h4><p>使用 <code>copyToRecursively()</code>，您可以透過重載 <code>onError</code> lambda 函式來定義在複製時發生例外情況應如何處理：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sourceRoot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(destinationRoot, followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    onError </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { source, target, exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exception, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Failed to copy </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        OnErrorResult.TERMINATE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span></code></pre></div><p>當您使用 <code>deleteRecursively()</code> 時，如果刪除檔案或資料夾時發生例外，則該檔案或資料夾將被跳過。 一旦刪除完成，<code>deleteRecursively()</code> 會拋出一個 <code>IOException</code>，其中包含所有發生的例外作為被抑制的例外。</p><h4 id="檔案覆寫" tabindex="-1">檔案覆寫 <a class="header-anchor" href="#檔案覆寫" aria-label="Permalink to &quot;檔案覆寫&quot;">​</a></h4><p>如果 <code>copyToRecursively()</code> 發現目標目錄中已存在檔案，則會發生例外。 如果您想覆寫檔案，請使用帶有 <code>overwrite</code> 作為參數的重載並將其設定為 <code>true</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setUpEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projectDirectory: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, fixtureName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fixturesRoot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(COMMON_FIXTURE_NAME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projectDirectory, followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fixturesRoot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fixtureName)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projectDirectory, followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            overwrite </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修補通用夾具</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="自訂複製操作" tabindex="-1">自訂複製操作 <a class="header-anchor" href="#自訂複製操作" aria-label="Permalink to &quot;自訂複製操作&quot;">​</a></h4><p>要定義您自己的自訂複製邏輯，請使用帶有 <code>copyAction</code> 作為額外參數的重載。 透過使用 <code>copyAction</code>，您可以提供一個 lambda 函式，例如，包含您偏好的操作：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sourceRoot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(destinationRoot, followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { source, target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (source.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CopyActionResult.SKIP_SUBTREE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToIgnoringExistingDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CopyActionResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關這些擴展函式的更多資訊，請參閱我們的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io.path/java.nio.file.-path/copy-to-recursively.html" target="_blank" rel="noreferrer">API 參考</a>。</p><h3 id="java-optionals-擴展函式" tabindex="-1">Java Optionals 擴展函式 <a class="header-anchor" href="#java-optionals-擴展函式" aria-label="Permalink to &quot;Java Optionals 擴展函式&quot;">​</a></h3><p>在 <a href="/zh-Hant/kotlin/whatsnew17#new-experimental-extension-functions-for-java-optionals">Kotlin 1.7.0</a> 中引入的擴展函式現已穩定。 這些函式簡化了 Java 中 Optional 類別的使用。它們可用於在 JVM 上解包和轉換 <code>Optional</code> 物件，並使使用 Java API 更簡潔。有關更多資訊， 請參閱 <a href="/zh-Hant/kotlin/whatsnew17#new-experimental-extension-functions-for-java-optionals">Kotlin 1.7.0 有什麼新功能</a>。</p><h3 id="提升-kotlin-reflect-效能" tabindex="-1">提升 kotlin-reflect 效能 <a class="header-anchor" href="#提升-kotlin-reflect-效能" aria-label="Permalink to &quot;提升 kotlin-reflect 效能&quot;">​</a></h3><p>利用 <code>kotlin-reflect</code> 現在以 JVM 目標 1.8 編譯的事實，我們將內部 快取機制遷移到 Java 的 <code>ClassValue</code>。之前我們只快取 <code>KClass</code>，但我們現在也快取 <code>KType</code> 和 <code>KDeclarationContainer</code>。這些變更在調用 <code>typeOf()</code> 時顯著提升了效能。</p><h2 id="文件更新" tabindex="-1">文件更新 <a class="header-anchor" href="#文件更新" aria-label="Permalink to &quot;文件更新&quot;">​</a></h2><p>Kotlin 文件收到了一些顯著的變更：</p><h3 id="改版與新頁面" tabindex="-1">改版與新頁面 <a class="header-anchor" href="#改版與新頁面" aria-label="Permalink to &quot;改版與新頁面&quot;">​</a></h3><ul><li><a href="/zh-Hant/kotlin/gradle">Gradle 概覽</a> – 了解如何使用 Gradle 建構系統配置和建構 Kotlin 專案， Kotlin Gradle 外掛程式中可用的編譯器選項、編譯和快取。</li><li><a href="/zh-Hant/kotlin/java-to-kotlin-nullability-guide">Java 和 Kotlin 中的可空性</a> – 了解 Java 和 Kotlin 處理可能可空變數方法的差異。</li><li><a href="/zh-Hant/kotlin/lincheck-guide">Lincheck 指南</a> – 了解如何設定和使用 Lincheck 框架來測試 JVM 上的並發演算法。</li></ul><h3 id="新與更新的教程" tabindex="-1">新與更新的教程 <a class="header-anchor" href="#新與更新的教程" aria-label="Permalink to &quot;新與更新的教程&quot;">​</a></h3><ul><li><a href="/zh-Hant/kotlin/get-started-with-jvm-gradle-project">開始使用 Gradle 和 Kotlin/JVM</a> – 使用 IntelliJ IDEA 和 Gradle 建立控制台應用程式。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-ktor-sqldelight.html" target="_blank" rel="noreferrer">使用 Ktor 和 SQLDelight 建立多平台應用程式</a> – 使用 Kotlin Multiplatform Mobile 建立適用於 iOS 和 Android 的行動應用程式。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-create-first-app.html" target="_blank" rel="noreferrer">開始使用 Kotlin 多平台</a> – 了解使用 Kotlin 進行跨平台行動開發，並建立一個同時適用於 Android 和 iOS 的應用程式。</li></ul><h2 id="安裝-kotlin-1-8-0" tabindex="-1">安裝 Kotlin 1.8.0 <a class="header-anchor" href="#安裝-kotlin-1-8-0" aria-label="Permalink to &quot;安裝 Kotlin 1.8.0&quot;">​</a></h2><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2021.3、2022.1 和 2022.2 自動建議將 Kotlin 外掛程式更新到 1.8.0 版本。IntelliJ IDEA 2022.3 將在即將到來的小型更新中捆綁 1.8.0 版本的 Kotlin 外掛程式。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>要在 IntelliJ IDEA 2022.3 中將現有專案遷移到 Kotlin 1.8.0，請將 Kotlin 版本變更為 <code>1.8.0</code> 並重新匯入 您的 Gradle 或 Maven 專案。</p></div><p>對於 Android Studio Electric Eel (221) 和 Flamingo (222)，1.8.0 版本的 Kotlin 外掛程式將隨即將到來的 Android Studios 更新一起交付。新的命令列編譯器可在 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.8.0" target="_blank" rel="noreferrer">GitHub 發布頁面</a>下載。</p><h2 id="kotlin-1-8-0-相容性指南" tabindex="-1">Kotlin 1.8.0 相容性指南 <a class="header-anchor" href="#kotlin-1-8-0-相容性指南" aria-label="Permalink to &quot;Kotlin 1.8.0 相容性指南&quot;">​</a></h2><p>Kotlin 1.8.0 是一個<a href="/zh-Hant/kotlin/kotlin-evolution-principles#language-and-tooling-releases">功能發布版本</a>，因此， 它可能帶來與您為早期語言版本編寫的程式碼不相容的變更。請在 <a href="/zh-Hant/kotlin/compatibility-guide-18">Kotlin 1.8.0 相容性指南</a>中找到這些變更的詳細列表。</p>`,191)]))}const g=s(n,[["render",l]]);export{c as __pageData,g as default};
