import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"레이아웃 기본 사항","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-layout.md","filePath":"ko/kmp/compose-layout.md","lastUpdated":1755516278000}'),t={name:"ko/kmp/compose-layout.md"};function e(p,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="레이아웃-기본-사항" tabindex="-1">레이아웃 기본 사항 <a class="header-anchor" href="#레이아웃-기본-사항" aria-label="Permalink to &quot;레이아웃 기본 사항&quot;">​</a></h1><p>Compose Multiplatform에서 사용자 인터페이스를 효과적으로 구축하려면 핵심 원칙, 레이아웃 단계, UI를 구조화하는 데 사용할 수 있는 공통 구성 요소 및 도구를 포함하여 레이아웃 구성의 주요 개념을 이해하는 것이 중요합니다.</p><h2 id="컴포저블-함수" tabindex="-1">컴포저블 함수 <a class="header-anchor" href="#컴포저블-함수" aria-label="Permalink to &quot;컴포저블 함수&quot;">​</a></h2><p>일련의 컴포저블 함수를 정의하여 사용자 인터페이스를 구축할 수 있습니다. 이러한 함수는 데이터를 받아 UI 요소를 내보냅니다. <code>@Composable</code> 어노테이션은 Compose 컴파일러에게 해당 함수가 데이터를 UI로 변환함을 알려줍니다.</p><p>텍스트를 표시하는 간단한 컴포저블 함수:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="column-row-and-box" tabindex="-1">Column, Row, and Box <a class="header-anchor" href="#column-row-and-box" aria-label="Permalink to &quot;Column, Row, and Box&quot;">​</a></h2><p>레이아웃을 구성하려면 다음 기본 빌딩 블록을 사용할 수 있습니다:</p><ul><li><p>화면에 항목을 수직으로 배치하려면 <code>Column</code>을 사용합니다.</p></li><li><p>화면에 항목을 수평으로 배치하려면 <code>Row</code>를 사용합니다.</p></li><li><p>요소를 서로 쌓으려면 <code>Box</code>를 사용합니다.</p></li><li><p>반응형 레이아웃을 구축하려면 <code>Row</code>와 <code>Column</code>의 <code>FlowRow</code> 및 <code>FlowColumn</code> 버전을 사용합니다. 컨테이너 공간이 부족하면 항목이 자동으로 다음 줄로 흐르게 하여 여러 개의 행 또는 열을 생성합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResponsiveLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    FlowRow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Item 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Item 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Item 3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="수정자" tabindex="-1">수정자 <a class="header-anchor" href="#수정자" aria-label="Permalink to &quot;수정자&quot;">​</a></h2><p>수정자(Modifier)는 컴포저블의 동작을 선언적인 방식으로 꾸미거나 조정할 수 있게 해줍니다. 수정자는 크기, 정렬, 패딩, 상호작용 동작 등 다양한 요소에 대한 제어를 제공하여 레이아웃 및 상호작용을 사용자 지정하는 데 필수적입니다.</p><p>예를 들어, 텍스트에 패딩과 가운데 정렬을 추가할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModifierExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello with padding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="./compose-layout-modifiers"></a>에서 더 자세히 알아보세요.</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><ul><li>레이아웃에 대해 더 자세히 알아보려면 <a href="https://developer.android.com/develop/ui/compose/layouts" target="_blank" rel="noreferrer">Jetpack Compose 문서</a>를 참조하세요.</li><li>컴포넌트의 <a href="./compose-lifecycle">수명 주기</a>에 대해 알아보세요.</li></ul>`,16)]))}const c=i(t,[["render",e]]);export{E as __pageData,c as default};
