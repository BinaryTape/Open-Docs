import{_ as p,C as a,c as l,o as t,G as n,ag as o}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/native-llvm-passes.md","filePath":"ja/kotlin/native-llvm-passes.md","lastUpdated":1754307826000}'),c={name:"ja/kotlin/native-llvm-passes.md"};function r(d,s,h,k,m,g){const e=a("TopicTitle"),i=a("primary-label");return t(),l("div",null,[n(e,{labelRef:"advanced",title:"LLVMバックエンドのカスタマイズに関するヒント"}),n(i,{ref:"advanced"},null,512),s[0]||(s[0]=o(`<p>Kotlin/Nativeコンパイラは、異なるターゲットプラットフォーム向けのバイナリ実行可能ファイルを最適化および生成するために<a href="https://llvm.org/" target="_blank" rel="noreferrer">LLVM</a>を使用します。 コンパイル時間のかなりの部分がLLVMに費やされており、大規模なアプリケーションの場合、これは許容できないほど長い時間がかかることがあります。</p><p>Kotlin/NativeがLLVMをどのように使用するかをカスタマイズし、最適化パスのリストを調整できます。</p><h2 id="ビルドログの確認" tabindex="-1">ビルドログの確認 <a class="header-anchor" href="#ビルドログの確認" aria-label="Permalink to &quot;ビルドログの確認&quot;">​</a></h2><p>LLVM最適化パスにどれくらいのコンパイル時間が費やされているかを理解するために、ビルドログを見てみましょう。</p><ol><li><p>GradleがLLVMプロファイリングの詳細を出力するように、<code>-Pkotlin.internal.compiler.arguments.log.level=warning</code>オプションを付けて<code>linkRelease*</code> Gradleタスクを実行します。例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkReleaseExecutableMacosArm64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Pkotlin.internal.compiler.arguments.log.level=warning</span></span></code></pre></div><p>実行中、タスクは必要なコンパイラ引数を出力します。例：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&gt; Task :linkReleaseExecutableMacosArm64</span></span>
<span class="line"><span>Run in-process tool &quot;konanc&quot;</span></span>
<span class="line"><span>Entry point method = org.jetbrains.kotlin.cli.utilities.MainKt.daemonMain</span></span>
<span class="line"><span>Classpath = [</span></span>
<span class="line"><span>        /Users/user/.konan/kotlin-native-prebuilt-macos-aarch64-2.2.0/konan/lib/kotlin-native-compiler-embeddable.jar</span></span>
<span class="line"><span>        /Users/user/.konan/kotlin-native-prebuilt-macos-aarch64-2.2.0/konan/lib/trove4j.jar</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>Arguments = [</span></span>
<span class="line"><span>        -Xinclude=...</span></span>
<span class="line"><span>        -library</span></span>
<span class="line"><span>        /Users/user/.konan/kotlin-native-prebuilt-macos-aarch64-2.2.0/klib/common/stdlib</span></span>
<span class="line"><span>        -no-endorsed-libs</span></span>
<span class="line"><span>        -nostdlib</span></span>
<span class="line"><span>        ...</span></span>
<span class="line"><span>]</span></span></code></pre></div></li><li><p>提供された引数に加えて<code>-Xprofile-phases</code>引数を付けてコマンドラインコンパイラを実行します。例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/Users/user/.konan/kotlin-native-prebuilt-macos-aarch64-2.2.0/bin/kotlinc-native</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xinclude=... </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-library </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/Users/user/.konan/kotlin-native-prebuilt-macos-aarch64-2.2.0/klib/common/stdlib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">... </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xprofile-phases</span></span></code></pre></div></li><li><p>ビルドログに生成された出力を確認します。ログは何万行にも及ぶことがあり、LLVMプロファイリングに関するセクションは最後にあります。</p></li></ol><p>以下は、シンプルなKotlin/Nativeプログラムを実行した際の抜粋です。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Frontend: 275 msec</span></span>
<span class="line"><span>PsiToIr: 1186 msec</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>... 30k lines</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>LinkBitcodeDependencies: 476 msec</span></span>
<span class="line"><span>StackProtectorPhase: 0 msec</span></span>
<span class="line"><span>MandatoryBitcodeLLVMPostprocessingPhase: 2 msec</span></span>
<span class="line"><span>===-------------------------------------------------------------------------===</span></span>
<span class="line"><span>                          Pass execution timing report</span></span>
<span class="line"><span>===-------------------------------------------------------------------------===</span></span>
<span class="line"><span>  Total Execution Time: 6.7726 seconds (6.7192 wall clock)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---</span></span>
<span class="line"><span>   0.9778 ( 22.4%)   0.5043 ( 21.0%)   1.4821 ( 21.9%)   1.4628 ( 21.8%)  InstCombinePass</span></span>
<span class="line"><span>   0.3827 (  8.8%)   0.2497 ( 10.4%)   0.6323 (  9.3%)   0.6283 (  9.4%)  InlinerPass</span></span>
<span class="line"><span>   0.2815 (  6.4%)   0.1792 (  7.5%)   0.4608 (  6.8%)   0.4555 (  6.8%)  SimplifyCFGPass</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>   0.6444 (100.0%)   0.5474 (100.0%)   1.1917 (100.0%)   1.1870 (100.0%)  Total</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ModuleBitcodeOptimization: 8118 msec</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>LTOBitcodeOptimization: 1399 msec</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>Kotlin/Nativeコンパイラは、LLVM最適化の2つの個別のシーケンス、すなわちモジュールパスとリンク時パスを実行します。一般的なコンパイルでは、これら2つのパイプラインが連続して実行され、唯一の本当の違いは、実行されるLLVM最適化パスにあります。</p><p>上記のログでは、2つのLLVM最適化は<code>ModuleBitcodeOptimization</code>と<code>LTOBitcodeOptimization</code>です。整形されたテーブルは、各パスのタイミングを含む最適化の出力です。</p><h2 id="llvm最適化パスのカスタマイズ" tabindex="-1">LLVM最適化パスのカスタマイズ <a class="header-anchor" href="#llvm最適化パスのカスタマイズ" aria-label="Permalink to &quot;LLVM最適化パスのカスタマイズ&quot;">​</a></h2><p>上記のパスのいずれかが不当に長いと思われる場合、それをスキップできます。ただし、これにより実行時パフォーマンスが低下する可能性があるため、その後ベンチマークのパフォーマンスの変化を確認する必要があります。</p><p>現在、<a href="https://youtrack.jetbrains.com/issue/KT-69212" target="_blank" rel="noreferrer">特定のパスを直接無効にする</a>方法はありません。ただし、以下のコンパイラオプションを使用して、実行する新しいパスのリストを提供できます。</p><table tabindex="0"><thead><tr><th><strong>オプション</strong></th><th><strong>リリースバイナリのデフォルト値</strong></th></tr></thead><tbody><tr><td><code>-Xllvm-module-passes</code></td><td><code>&quot;default&lt;O3&gt;&quot;</code></td></tr><tr><td><code>-Xllvm-lto-passes</code></td><td><code>&quot;internalize,globaldce,lto&lt;O3&gt;&quot;</code></td></tr></tbody></table><p>デフォルト値は、実際のパスの長いリストに展開され、そこから不要なパスを除外する必要があります。</p><p>実際のパスのリストを取得するには、LLVMディストリビューションと一緒に<code>~/.konan/dependencies/llvm-{VERSION}-{ARCH}-{OS}-dev-{BUILD}/bin</code>ディレクトリに自動的にダウンロードされる<a href="https://llvm.org/docs/CommandGuide/opt.html" target="_blank" rel="noreferrer"><code>opt</code></a>ツールを実行します。</p><p>例として、リンク時パスのリストを取得するには、次を実行します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -print-pipeline-passes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -passes=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;internalize,globaldce,lto&lt;O3&gt;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/null</span></span></code></pre></div><p>これにより、警告と、LLVMのバージョンに依存する長いパスのリストが出力されます。</p><p><code>opt</code>ツールからのパスのリストと、Kotlin/Nativeコンパイラが実際に実行するパスの間には、2つの違いがあります。</p><ul><li><code>opt</code>はデバッグツールであるため、通常は実行されない<code>verify</code>パスを1つ以上含みます。</li><li>Kotlinコンパイラがすでに<code>devirt</code>パスを自身で実行しているため、Kotlin/Nativeはそれらのパスを無効にします。</li></ul><p>いずれかのパスを無効にした後、実行時パフォーマンスの低下が許容範囲内であるかを確認するために、必ずパフォーマンステストを再実行してください。</p>`,21))])}const v=p(c,[["render",r]]);export{b as __pageData,v as default};
