import{_ as g,C as a,c as E,o as _,G as e,ag as l,w as n,j as i,a as t}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-autoheadresponse.md","filePath":"ja/ktor/server-autoheadresponse.md","lastUpdated":1755457140000}'),m={name:"ja/ktor/server-autoheadresponse.md"};function y(v,s,F,f,C,T){const p=a("TopicTitle"),d=a("primary-label"),k=a("Links"),h=a("tldr"),u=a("link-summary"),o=a("code-block"),r=a("TabItem"),c=a("Tabs");return _(),E("div",null,[e(p,{labelRef:"server-plugin",title:"AutoHeadResponse"}),e(d,{ref:"server-plugin"},null,512),e(h,null,{default:n(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必要とされる依存関係"),t(": "),i("code",null,"io.ktor:ktor-server-auto-head-response")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"コード例"),t(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/autohead"}," autohead ")],-1)),i("p",null,[i("b",null,[e(k,{href:"/ktor/server-native",summary:"KtorはKotlin/Nativeをサポートしており、追加のランタイムや仮想マシンなしでサーバーを実行できます。"},{default:n(()=>s[0]||(s[0]=[t("Nativeサーバー")])),_:1}),s[1]||(s[1]=t("のサポート"))]),s[2]||(s[2]=t(": ✅ "))])]),_:1}),e(u,null,{default:n(()=>s[5]||(s[5]=[t(" AutoHeadResponse は、GETが定義されているすべてのルートに対して、HEADリクエストに自動的に応答する機能を提供します。 ")])),_:1}),s[6]||(s[6]=l('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auto-head-response/io.ktor.server.plugins.autohead/-auto-head-response.html" target="_blank" rel="noreferrer">AutoHeadResponse</a> プラグインは、<code>GET</code> が定義されているすべてのルートに対して <code>HEAD</code> リクエストに自動的に応答する機能を提供します。実際のコンテンツを取得する前にクライアント側でレスポンスを何らかの形で処理する必要がある場合、<code>AutoHeadResponse</code> を使用して個別の <a href="./server-routing#define_route">head</a> ハンドラーを作成する手間を省くことができます。例えば、<a href="./server-responses#file">respondFile</a> 関数を呼び出すと、<code>Content-Length</code> および <code>Content-Type</code> ヘッダーがレスポンスに自動的に追加され、ファイルをダウンロードする前にクライアント側でこの情報を取得できます。</p><h2 id="add_dependencies" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係の追加 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>AutoHeadResponse</code> を使用するには、ビルドスクリプトに <code>ktor-server-auto-head-response</code> アーティファクトを含める必要があります: </p>',3)),e(c,{group:"languages"},{default:n(()=>[e(r,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[e(o,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auto-head-response:$ktor_version")'})]),_:1}),e(r,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[e(o,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auto-head-response:$ktor_version"'})]),_:1}),e(r,{title:"Maven","group-key":"maven"},{default:n(()=>[e(o,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auto-head-response-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[7]||(s[7]=l(`<h2 id="使用方法" tabindex="-1">使用方法 <a class="header-anchor" href="#使用方法" aria-label="Permalink to &quot;使用方法&quot;">​</a></h2><p>この機能を利用するには、アプリケーションに <code>AutoHeadResponse</code> プラグインをインストールする必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.autohead.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AutoHeadResponse)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is a response to a GET, but HEAD also works&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この場合、<code>/home</code> ルートにはこのHTTPメソッドの明示的な定義がなくても、<code>HEAD</code> リクエストに応答するようになります。</p><p>このプラグインを使用している場合、同じ <code>GET</code> ルートに対するカスタム <code>HEAD</code> 定義は無視されることに注意することが重要です。</p><h2 id="オプション" tabindex="-1">オプション <a class="header-anchor" href="#オプション" aria-label="Permalink to &quot;オプション&quot;">​</a></h2><p><code>AutoHeadResponse</code> には、追加の設定オプションはありません。</p>`,7))])}const B=g(m,[["render",y]]);export{b as __pageData,B as default};
