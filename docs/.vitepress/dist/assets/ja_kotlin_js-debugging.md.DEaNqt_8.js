import{_ as t,a as r,b as a,c as o,d as l}from"./chunks/ide-console-output.D95j1GLN.js";import{_ as i,c as n,o as s,ag as d}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Kotlin/JSコードのデバッグ","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/js-debugging.md","filePath":"ja/kotlin/js-debugging.md","lastUpdated":1754307826000}'),p={name:"ja/kotlin/js-debugging.md"};function c(g,e,h,u,m,b){return s(),n("div",null,e[0]||(e[0]=[d('<h1 id="kotlin-jsコードのデバッグ" tabindex="-1">Kotlin/JSコードのデバッグ <a class="header-anchor" href="#kotlin-jsコードのデバッグ" aria-label="Permalink to &quot;Kotlin/JSコードのデバッグ&quot;">​</a></h1><p>JavaScriptソースマップは、バンドラーやミニファイアーによって生成された縮小化されたコードと、開発者が実際に作業するソースコードとの間のマッピングを提供します。これにより、ソースマップはコード実行中のデバッグをサポートします。</p><p>KotlinマルチプラットフォームGradleプラグインは、プロジェクトのビルド時に自動的にソースマップを生成し、追加の設定なしで利用できるようにします。</p><h2 id="ブラウザでのデバッグ" tabindex="-1">ブラウザでのデバッグ <a class="header-anchor" href="#ブラウザでのデバッグ" aria-label="Permalink to &quot;ブラウザでのデバッグ&quot;">​</a></h2><p>ほとんどの最新のブラウザには、ページコンテンツの検証や、その上で実行されるコードのデバッグを可能にするツールが備わっています。詳細については、お使いのブラウザのドキュメントを参照してください。</p><p>ブラウザでKotlin/JSをデバッグするには：</p><ol><li>利用可能な<code>run</code> Gradleタスクのいずれかを呼び出してプロジェクトを実行します。例えば、マルチプラットフォームプロジェクトでは<code>browserDevelopmentRun</code>や<code>jsBrowserDevelopmentRun</code>を使用します。 <a href="/ja/kotlin/running-kotlin-js#run-the-browser-target">Kotlin/JSの実行</a>について詳しく学ぶ。</li><li>ブラウザでページに移動し、開発者ツールを起動します（例えば、右クリックして<strong>Inspect</strong>アクションを選択します）。主要なブラウザで<a href="https://balsamiq.com/support/faqs/browserconsole/" target="_blank" rel="noreferrer">開発者ツールを見つける方法</a>について学ぶ。</li><li>プログラムがコンソールに情報をログ出力している場合、<strong>Console</strong>タブに移動してこの出力を確認します。お使いのブラウザによっては、これらのログが参照元のKotlinソースファイルと行を示すことがあります。</li></ol><p><img src="'+t+'" alt="Chrome DevTools コンソール" width="600"></p><ol start="4"><li>右側のファイル参照をクリックして、対応するコード行に移動します。 あるいは、手動で<strong>Sources</strong>タブに切り替えて、ファイルツリーで必要なファイルを見つけることもできます。Kotlinファイルに移動すると、通常のKotlinコードが表示されます（縮小化されたJavaScriptではありません）。</li></ol><p><img src="'+r+'" alt="Chrome DevToolsでのデバッグ" width="600"></p><p>これでプログラムのデバッグを開始できます。行番号の1つをクリックしてブレークポイントを設定します。開発者ツールはステートメント内でのブレークポイント設定もサポートしています。通常のJavaScriptコードと同様に、設定されたブレークポイントはページのリロード後も維持されます。これにより、スクリプトが最初にロードされたときに実行されるKotlinの<code>main()</code>メソッドもデバッグできるようになります。</p><h2 id="ideでのデバッグ" tabindex="-1">IDEでのデバッグ <a class="header-anchor" href="#ideでのデバッグ" aria-label="Permalink to &quot;IDEでのデバッグ&quot;">​</a></h2><p><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA Ultimate</a>は、開発中にコードをデバッグするための強力なツールセットを提供します。</p><p>IntelliJ IDEAでKotlin/JSをデバッグするには、<strong>JavaScript Debug</strong>構成が必要です。このようなデバッグ構成を追加するには：</p><ol><li><strong>Run | Edit Configurations</strong>に移動します。</li><li>**+**をクリックし、<strong>JavaScript Debug</strong>を選択します。</li><li>構成の<strong>Name</strong>を指定し、プロジェクトが実行される<strong>URL</strong>を提供します（デフォルトは<code>http://localhost:8080</code>です）。</li></ol><p><img src="'+a+'" alt="JavaScriptデバッグ構成" width="700"></p><ol start="4"><li>構成を保存します。</li></ol><p><a href="https://www.jetbrains.com/help/idea/configuring-javascript-debugger.html" target="_blank" rel="noreferrer">JavaScriptデバッグ構成の設定</a>について詳しく学ぶ。</p><p>これでプロジェクトのデバッグ準備が整いました！</p><ol><li>利用可能な<code>run</code> Gradleタスクのいずれかを呼び出してプロジェクトを実行します。例えば、マルチプラットフォームプロジェクトでは<code>browserDevelopmentRun</code>や<code>jsBrowserDevelopmentRun</code>を使用します。 <a href="/ja/kotlin/running-kotlin-js#run-the-browser-target">Kotlin/JSの実行</a>について詳しく学ぶ。</li><li>以前に作成したJavaScriptデバッグ構成を実行して、デバッグセッションを開始します。</li></ol><p><img src="'+o+'" alt="JavaScriptデバッグ構成の実行" width="700"></p><ol start="3"><li>プログラムのコンソール出力は、IntelliJ IDEAの<strong>Debug</strong>ウィンドウで確認できます。出力項目は、Kotlinソースファイルとそれらが生成された行を参照します。</li></ol><p><img src="'+l+'" alt="IDEでのJavaScriptデバッグ出力" width="700"></p><ol start="4"><li>右側のファイル参照をクリックして、対応するコード行に移動します。</li></ol><p>これで、IDEが提供するブレークポイント、ステップ実行、式の評価など、ツール一式を使用してプログラムのデバッグを開始できます。<a href="https://www.jetbrains.com/help/idea/debugging-javascript-in-chrome.html" target="_blank" rel="noreferrer">IntelliJ IDEAでのデバッグ</a>について詳しく学ぶ。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>現在のIntelliJ IDEAのJavaScriptデバッガーの制限により、ブレークポイントで実行を停止させるためにJavaScriptデバッグを再実行する必要がある場合があります。</p></div><h2 id="node-jsでのデバッグ" tabindex="-1">Node.jsでのデバッグ <a class="header-anchor" href="#node-jsでのデバッグ" aria-label="Permalink to &quot;Node.jsでのデバッグ&quot;">​</a></h2><p>プロジェクトがNode.jsをターゲットとしている場合、このランタイムでデバッグできます。</p><p>Node.jsをターゲットとするKotlin/JSアプリケーションをデバッグするには：</p><ol><li><code>build</code> Gradleタスクを実行してプロジェクトをビルドします。</li><li>プロジェクトディレクトリ内の<code>build/js/packages/your-module/kotlin/</code>ディレクトリで、Node.js用の結果の<code>.js</code>ファイルを見つけます。</li><li><a href="https://nodejs.org/en/docs/guides/debugging-getting-started/#jetbrains-webstorm-2017-1-and-other-jetbrains-ides" target="_blank" rel="noreferrer">Node.jsデバッグガイド</a>に記載されているとおりにNode.jsでデバッグします。</li></ol><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>Kotlin/JSプロジェクトでデバッグセッションを開始する方法を理解したところで、デバッグツールを効率的に利用する方法を学びましょう。</p><ul><li><a href="https://developer.chrome.com/docs/devtools/javascript/" target="_blank" rel="noreferrer">Google ChromeでJavaScriptをデバッグする方法</a>を学ぶ</li><li><a href="https://www.jetbrains.com/help/idea/debugging-javascript-in-chrome.html" target="_blank" rel="noreferrer">IntelliJ IDEA JavaScriptデバッガー</a>に慣れる</li><li><a href="https://nodejs.org/en/docs/guides/debugging-getting-started/" target="_blank" rel="noreferrer">Node.jsでデバッグする方法</a>を学ぶ。</li></ul><h2 id="問題が発生した場合" tabindex="-1">問題が発生した場合 <a class="header-anchor" href="#問題が発生した場合" aria-label="Permalink to &quot;問題が発生した場合&quot;">​</a></h2><p>Kotlin/JSのデバッグで何か問題に直面した場合は、問題トラッカーである<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>に報告してください。</p>',35)]))}const k=i(p,[["render",c]]);export{f as __pageData,k as default};
