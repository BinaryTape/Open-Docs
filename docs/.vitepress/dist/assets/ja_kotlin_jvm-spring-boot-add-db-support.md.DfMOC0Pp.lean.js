import{_ as g}from"./chunks/icon-1-done.ZX9lW-aj.js";import{_ as o}from"./chunks/icon-2-done.DCMUaFG5.js";import{_ as y}from"./chunks/icon-3.BwKvTetO.js";import{_ as F}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as c,a as u,b as C,c as B}from"./chunks/retrieve-message-by-its-id.Bu3w1K2P.js";import{_ as m,C as k,c as A,o as D,j as s,G as n,ag as p,a,w as l}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/jvm-spring-boot-add-db-support.md","filePath":"ja/kotlin/jvm-spring-boot-add-db-support.md","lastUpdated":1755514048000}'),b={name:"ja/kotlin/jvm-spring-boot-add-db-support.md"};function v(q,i,f,S,M,T){const r=k("web-summary"),d=k("tldr"),h=k("code-block"),t=k("def"),e=k("deflist"),E=k("list");return D(),A("div",null,[i[31]||(i[31]=s("h1",{id:"spring-bootプロジェクトにデータベースのサポートを追加する",tabindex:"-1"},[a("Spring Bootプロジェクトにデータベースのサポートを追加する "),s("a",{class:"header-anchor",href:"#spring-bootプロジェクトにデータベースのサポートを追加する","aria-label":'Permalink to "Spring Bootプロジェクトにデータベースのサポートを追加する"'},"​")],-1)),n(r,null,{default:l(()=>i[0]||(i[0]=[a("Kotlinで書かれたSpring Bootプロジェクトに、JDBCテンプレートを使用してデータベースサポートを追加します。")])),_:1}),n(d,null,{default:l(()=>i[1]||(i[1]=[s("p",null,[a("これは"),s("strong",null,"Spring BootとKotlin入門"),a("チュートリアルの第3部です。進む前に、前の手順を完了していることを確認してください。")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:g,width:"20",alt:"First step"}),a(),s("a",{href:"/ja/kotlin/jvm-create-project-with-spring-boot"},"KotlinでSpring Bootプロジェクトを作成する"),s("br"),s("img",{src:o,width:"20",alt:"Second step"}),a(),s("a",{href:"/ja/kotlin/jvm-spring-boot-add-data-class"},"Spring Bootプロジェクトにデータクラスを追加する"),s("br"),s("img",{src:y,width:"20",alt:"Third step"}),a(),s("strong",null,"Spring Bootプロジェクトにデータベースのサポートを追加する"),s("br"),s("img",{src:F,width:"20",alt:"Fourth step"}),a(" データベースアクセスにSpring Data CrudRepositoryを使用する")],-1)])),_:1}),i[32]||(i[32]=p("",5)),n(e,{collapsible:"true"},{default:l(()=>[n(t,{title:"コンストラクタ引数と依存性注入 – (private val db: JdbcTemplate)"},{default:l(()=>[i[3]||(i[3]=s("p",null,[a("Kotlinのクラスにはプライマリコンストラクタがあります。また、1つまたは複数の"),s("a",{href:"/ja/kotlin/classes#secondary-constructors"},"セカンダリコンストラクタ"),a("を持つこともできます。 プライマリコンストラクタはクラスヘッダーの一部であり、クラス名とオプションの型パラメータの後に続きます。このケースでは、コンストラクタは "),s("code",null,"(val db: JdbcTemplate)"),a(" です。")],-1)),i[4]||(i[4]=s("p",null,[s("code",null,"val db: JdbcTemplate"),a(" はコンストラクタの引数です。")],-1)),n(h,{lang:"kotlin"},{default:l(()=>i[2]||(i[2]=[a(" @Service class MessageService(private val db: JdbcTemplate) ")])),_:1})]),_:1}),n(t,{title:"末尾ラムダとSAM変換"},{default:l(()=>[i[8]||(i[8]=s("p",null,[s("code",null,"findMessages()"),a(" 関数は "),s("code",null,"JdbcTemplate"),a(" クラスの "),s("code",null,"query()"),a(" 関数を呼び出します。"),s("code",null,"query()"),a(" 関数は2つの引数を取ります。1つはStringインスタンスとしてのSQLクエリ、もう1つは行ごとに1つのオブジェクトをマッピングするコールバックです。")],-1)),n(h,{lang:"sql"},{default:l(()=>i[5]||(i[5]=[a(' db.query("...", RowMapper { ... } ) ')])),_:1}),i[9]||(i[9]=s("br",null,null,-1)),i[10]||(i[10]=s("p",null,[s("code",null,"RowMapper"),a(" インターフェースは1つのメソッドのみを宣言しているため、インターフェース名を省略してラムダ式で実装することが可能です。Kotlinコンパイラは、関数呼び出しのパラメータとして使用しているため、ラムダ式が変換されるべきインターフェースを認識しています。これは"),s("a",{href:"/ja/kotlin/java-interop#sam-conversions"},"KotlinにおけるSAM変換"),a("として知られています。")],-1)),n(h,{lang:"sql"},{default:l(()=>i[6]||(i[6]=[a(' db.query("...", { ... } ) ')])),_:1}),i[11]||(i[11]=s("br",null,null,-1)),i[12]||(i[12]=s("p",null,[a("SAM変換の後、query関数は2つの引数、すなわち最初の位置にString、最後の位置にラムダ式を持つことになります。Kotlinの規約によれば、関数の最後のパラメータが関数である場合、対応する引数として渡されるラムダ式は括弧の外に配置できます。このような構文は"),s("a",{href:"/ja/kotlin/lambdas#passing-trailing-lambdas"},"末尾ラムダ"),a("とも呼ばれます。")],-1)),n(h,{lang:"sql"},{default:l(()=>i[7]||(i[7]=[a(' db.query("...") { ... } ')])),_:1})]),_:1}),n(t,{title:"未使用のラムダ引数に対するアンダースコア"},{default:l(()=>[i[14]||(i[14]=s("p",null,[a("複数のパラメータを持つラムダの場合、使用しないパラメータの名前をアンダースコア "),s("code",null,"_"),a(" 文字に置き換えることができます。")],-1)),i[15]||(i[15]=s("p",null,"したがって、query関数の呼び出しの最終的な構文は次のようになります。",-1)),n(h,{lang:"kotlin"},{default:l(()=>i[13]||(i[13]=[a(' db.query("select * from messages") { response, _ -> Message(response.getString("id"), response.getString("text")) } ')])),_:1})]),_:1})]),_:1}),i[33]||(i[33]=p("",3)),n(e,{collapsible:"true"},{default:l(()=>[n(t,{title:"@PostMapping アノテーション"},{default:l(()=>i[16]||(i[16]=[s("p",null,[a("HTTP POSTリクエストを処理するメソッドには "),s("code",null,"@PostMapping"),a(" アノテーションを付与する必要があります。HTTP Bodyコンテンツとして送信されたJSONをオブジェクトに変換できるようにするには、メソッド引数に "),s("code",null,"@RequestBody"),a(" アノテーションを使用する必要があります。Jacksonライブラリがアプリケーションのクラスパスにあるおかげで、変換は自動的に行われます。")],-1)])),_:1}),n(t,{title:"ResponseEntity"},{default:l(()=>i[17]||(i[17]=[s("p",null,[s("code",null,"ResponseEntity"),a(" は、ステータスコード、ヘッダー、ボディを含むHTTPレスポンス全体を表します。")],-1),s("p",null,[s("code",null,"created()"),a(" メソッドを使用すると、レスポンスのステータスコード (201) を設定し、作成されたリソースのコンテキストパスを示すロケーションヘッダーを設定できます。")],-1)])),_:1})]),_:1}),i[34]||(i[34]=p("",6)),n(e,{collapsible:"true"},{default:l(()=>[n(t,{title:"エルビス演算子 – ?:"},{default:l(()=>i[18]||(i[18]=[s("p",null,[a("コード "),s("code",null,"message.id ?: UUID.randomUUID().toString()"),a(" は、"),s("a",{href:"/ja/kotlin/null-safety#elvis-operator"},[a("エルビス演算子 (if-not-null-else shorthand) "),s("code",null,"?:")]),a(" を使用しています。"),s("code",null,"?:"),a(" の左側の式が "),s("code",null,"null"),a(" でない場合、エルビス演算子はその値を返します。それ以外の場合は、右側の式を返します。右側の式は、左側が "),s("code",null,"null"),a(" の場合にのみ評価されることに注意してください。")],-1)])),_:1})]),_:1}),i[35]||(i[35]=p("",7)),i[36]||(i[36]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"リクエストを実行する別の方法",tabindex:"-1"},[a("リクエストを実行する別の方法 "),s("a",{class:"header-anchor",href:"#リクエストを実行する別の方法","aria-label":'Permalink to "リクエストを実行する別の方法 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[37]||(i[37]=p("",4)),s("ol",null,[s("li",null,[i[23]||(i[23]=p("",2)),n(e,{collapsible:"true"},{default:l(()=>[n(t,{title:"パラメータリストにおける可変引数 (vararg) の位置"},{default:l(()=>[i[20]||(i[20]=s("p",null,[s("code",null,"query()"),a(" 関数は3つの引数を取ります。")],-1)),n(E,null,{default:l(()=>i[19]||(i[19]=[s("li",null,"実行にパラメータを必要とするSQLクエリ文字列",-1),s("li",null,[a("String型のパラメータである "),s("code",null,"id")],-1),s("li",null,[a("ラムダ式で実装される "),s("code",null,"RowMapper"),a(" インスタンス")],-1)])),_:1}),i[21]||(i[21]=s("p",null,[s("code",null,"query()"),a(" 関数の2番目のパラメータは、可変引数 ("),s("code",null,"vararg"),a(") として宣言されています。Kotlinでは、可変引数パラメータの位置はパラメータリストの最後である必要はありません。")],-1))]),_:1}),n(t,{title:"singleOrNull() 関数"},{default:l(()=>i[22]||(i[22]=[s("p",null,[s("a",{href:"https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/single-or-null.html"},[s("code",null,"singleOrNull()")]),a(" 関数は、配列が空の場合、または同じ値を持つ要素が複数ある場合は "),s("code",null,"null"),a(" を返し、それ以外の場合は単一の要素を返します。")],-1)])),_:1})]),_:1}),i[24]||(i[24]=s("div",{class:"danger custom-block"},[s("p",{class:"custom-block-title"},"WARNING"),s("p",null,[s("code",null,".query()"),a(" 関数は、メッセージをIDで取得するために使用され、Spring Frameworkによって提供される"),s("a",{href:"/ja/kotlin/extensions#extension-functions"},"Kotlin拡張関数"),a("です。上記のコードで示されているように、追加のインポート "),s("code",null,"import org.springframework.jdbc.core.query"),a(" が必要です。")])],-1))]),s("li",null,[i[30]||(i[30]=p("",2)),n(e,{collapsible:"true"},{default:l(()=>[n(t,{title:"コンテキストパスからの値の取得"},{default:l(()=>i[25]||(i[25]=[s("p",null,[a("メッセージの "),s("code",null,"id"),a(" は、新しい関数に "),s("code",null,'@GetMapping("/{id}")'),a(" アノテーションを付けることで、Spring Frameworkによってコンテキストパスから取得されます。関数引数に "),s("code",null,"@PathVariable"),a(" アノテーションを付けることで、取得した値を関数引数として使用するようにフレームワークに指示します。新しい関数は、そのidによって個別のメッセージを取得するために "),s("code",null,"MessageService"),a(" を呼び出します。")],-1)])),_:1}),n(t,{title:"null許容レシーバーを持つ拡張関数"},{default:l(()=>[i[27]||(i[27]=s("p",null,[a("拡張は、null許容レシーバー型で定義できます。レシーバーが "),s("code",null,"null"),a(" の場合、"),s("code",null,"this"),a(" も "),s("code",null,"null"),a(" になります。したがって、null許容レシーバー型で拡張を定義する場合、関数本体内で "),s("code",null,"this == null"),a(" チェックを実行することをお勧めします。")],-1)),i[28]||(i[28]=s("p",null,[a("また、上記の "),s("code",null,"toResponseEntity()"),a(" 関数のように、null安全な呼び出し演算子 ("),s("code",null,"?."),a(") を使用してnullチェックを実行することもできます。")],-1)),n(h,{lang:"kotlin"},{default:l(()=>i[26]||(i[26]=[a(" this?.let { ResponseEntity.ok(it) } ")])),_:1})]),_:1}),n(t,{title:"ResponseEntity"},{default:l(()=>i[29]||(i[29]=[s("p",null,[s("code",null,"ResponseEntity"),a(" は、ステータスコード、ヘッダー、ボディを含むHTTPレスポンスを表します。これは、コンテンツをより細かく制御して、カスタマイズされたHTTPレスポンスをクライアントに送信できる汎用ラッパーです。")],-1)])),_:1})]),_:1})])]),i[38]||(i[38]=p("",11))])}const V=m(b,[["render",v]]);export{I as __pageData,V as default};
