import{_ as l,C as o,c as p,o as r,j as e,G as t,ag as h,a as i,w as c}from"./chunks/framework.Bksy39di.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/db-connection-pooling-caching.md","filePath":"ja/ktor/db-connection-pooling-caching.md","lastUpdated":1755457140000}'),u={name:"ja/ktor/db-connection-pooling-caching.md"};function g(k,a,b,m,v,C){const s=o("show-structure"),n=o("tldr"),d=o("link-summary");return r(),p("div",null,[a[2]||(a[2]=e("h1",{id:"コネクションプーリングとキャッシング",tabindex:"-1"},[i("コネクションプーリングとキャッシング "),e("a",{class:"header-anchor",href:"#コネクションプーリングとキャッシング","aria-label":'Permalink to "コネクションプーリングとキャッシング"'},"​")],-1)),t(s,{for:"chapter",depth:"2"}),t(n,null,{default:c(()=>a[0]||(a[0]=[e("p",null,[e("b",null,"コード例"),i(": "),e("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/tutorial-website-interactive-persistence-advanced"}," tutorial-website-interactive-persistence-advanced ")],-1),e("p",null,[e("b",null,"使用ライブラリ"),i(": "),e("a",{href:"https://github.com/brettwooldridge/HikariCP"},"HikariCP"),i(", "),e("a",{href:"https://www.ehcache.org/"},"Ehcache")],-1)])),_:1}),t(d,null,{default:c(()=>a[1]||(a[1]=[i("データベースコネクションプーリングとキャッシングの実装方法を学びます。")])),_:1}),a[3]||(a[3]=h(`<p><a href="./db-persistence">前のチュートリアル</a>では、Exposedフレームワークを使用してウェブサイトに永続性を追加しました。 このチュートリアルでは、それぞれHikariCPライブラリとEhcacheライブラリを使用して、データベースコネクションプーリングとキャッシングを実装する方法について見ていきます。</p><h2 id="add-dependencies" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#add-dependencies" aria-label="Permalink to &quot;依存関係の追加 {id=&quot;add-dependencies&quot;}&quot;">​</a></h2><p>まず、HikariCPライブラリとEhcacheライブラリの依存関係を追加する必要があります。 <code>gradle.properties</code>ファイルを開き、ライブラリのバージョンを指定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ehcache_version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logback_version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span></span></code></pre></div><p>次に、<code>build.gradle.kts</code>を開き、以下の依存関係を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p><code>build.gradle.kts</code>ファイルの右上にある<strong>Load Gradle Changes</strong>アイコンをクリックして、新しく追加された依存関係をインストールします。</p><h2 id="connection-pooling" tabindex="-1">コネクションプーリング <a class="header-anchor" href="#connection-pooling" aria-label="Permalink to &quot;コネクションプーリング {id=&quot;connection-pooling&quot;}&quot;">​</a></h2><p>Exposedは、<code>transaction</code>スコープ内でデータベースの最初の操作を実行するときに、各<code>transaction</code>呼び出し内で新しいJDBC接続を開始します。 しかし、複数のJDBC接続を確立するのはリソースコストが高く、既存の接続を再利用することでパフォーマンスを向上させることができます。 _コネクションプーリング_メカニズムがこの問題を解決します。</p><p>このセクションでは、アプリケーションでJDBCコネクションプーリングを管理するためにHikariCPフレームワークを使用します。</p><h3 id="connection-settings-config" tabindex="-1">接続設定を構成ファイルに抽出する <a class="header-anchor" href="#connection-settings-config" aria-label="Permalink to &quot;接続設定を構成ファイルに抽出する {id=&quot;connection-settings-config&quot;}&quot;">​</a></h3><p><a href="./db-persistence#connect_db">前のチュートリアル</a>では、データベース接続を確立するために、<code>com/example/dao/DatabaseSingleton.kt</code>ファイルで<code>driverClassName</code>と<code>jdbcURL</code>をハードコードしていました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p>データベース接続設定を<a href="./server-configuration-file">カスタム設定グループ</a>に抽出しましょう。</p><ol><li><p><code>src/main/resources/application.conf</code>ファイルを開き、<code>ktor</code>グループの外に<code>storage</code>グループを以下のように追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div></li><li><p><code>com/example/dao/DatabaseSingleton.kt</code>を開き、<code>init</code>関数を更新して、設定ファイルからストレージ設定をロードするようにします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p><code>init</code>関数は<code>ApplicationConfig</code>を受け入れるようになり、<code>config.property</code>を使用してカスタム設定をロードします。</p></li><li><p>最後に、<code>com/example/Application.kt</code>を開き、アプリケーション起動時に接続設定をロードするために<code>environment.config</code>を<code>DatabaseSingleton.init</code>に渡します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div></li></ol><h3 id="enable-connection-pooling" tabindex="-1">コネクションプーリングを有効にする <a class="header-anchor" href="#enable-connection-pooling" aria-label="Permalink to &quot;コネクションプーリングを有効にする {id=&quot;enable-connection-pooling&quot;}&quot;">​</a></h3><p>Exposedでコネクションプーリングを有効にするには、<code>Database.connect</code>関数にパラメータとして<a href="https://docs.oracle.com/en/java/javase/19/docs/api/java.sql/javax/sql/DataSource.html" target="_blank" rel="noreferrer">DataSource</a>を提供する必要があります。 HikariCPは、<code>DataSource</code>インターフェースを実装する<code>HikariDataSource</code>クラスを提供します。</p><ol><li><p><code>HikariDataSource</code>を作成するには、<code>com/example/dao/DatabaseSingleton.kt</code>を開き、<code>DatabaseSingleton</code>オブジェクトに<code>createHikariDataSource</code>関数を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p>データソース設定に関するいくつかの注意点です。</p><ul><li><code>createHikariDataSource</code>関数は、ドライバークラス名とデータベースURLをパラメータとして受け取ります。</li><li><code>maximumPoolSize</code>プロパティは、コネクションプールが到達できる最大サイズを指定します。</li><li><code>isAutoCommit</code>と<code>transactionIsolation</code>は、Exposedで使用されるデフォルト設定と同期するように設定されています。</li></ul></li><li><p><code>HikariDataSource</code>を使用するには、<code>Database.connect</code>関数に渡します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p>これで<a href="./db-persistence#run_app">アプリケーションを実行</a>し、すべてが以前と同様に動作することを確認できます。</p></li></ol><h2 id="caching" tabindex="-1">キャッシング <a class="header-anchor" href="#caching" aria-label="Permalink to &quot;キャッシング {id=&quot;caching&quot;}&quot;">​</a></h2><p>データベースをデータベースキャッシュで補完できます。 キャッシングは、頻繁に使用されるデータを一時メモリに保存することを可能にし、データベースのワークロードと頻繁に必要とされるデータの読み取り時間を削減できる技術です。</p><p>このチュートリアルでは、Ehcacheライブラリを使用してファイルをキャッシュとして整理します。</p><h3 id="cache-file-path" tabindex="-1">構成にキャッシュファイルパスを追加する <a class="header-anchor" href="#cache-file-path" aria-label="Permalink to &quot;構成にキャッシュファイルパスを追加する {id=&quot;cache-file-path&quot;}&quot;">​</a></h3><p><code>src/main/resources/application.conf</code>ファイルを開き、<code>ehcacheFilePath</code>プロパティを<code>storage</code>グループに追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p>このプロパティは、キャッシュデータを保存するために使用されるファイルのパスを指定します。 後で、キャッシュを操作するための<code>DAOFacade</code>実装を設定するためにこれを使用します。</p><h3 id="implement-caching" tabindex="-1">キャッシングを実装する <a class="header-anchor" href="#implement-caching" aria-label="Permalink to &quot;キャッシングを実装する {id=&quot;implement-caching&quot;}&quot;">​</a></h3><p>キャッシングを実装するには、キャッシュから値を返し、キャッシュされた値がない場合はデータベースインターフェースに委譲する別の<code>DAOFacade</code>実装を提供する必要があります。</p><ol><li><p><code>com.example.dao</code>パッケージに新しい<code>DAOFacadeCacheImpl.kt</code>ファイルを作成し、以下の実装を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p>このコード例の簡単な概要を説明します。</p><ul><li>キャッシュを初期化および設定するために、Ehcache <code>CacheManager</code>インスタンスを定義します。<code>storagePath</code>をディスクストレージに使用されるルートディレクトリとして提供します。</li><li>IDで記事を保存するエントリのキャッシュを作成します。<code>articlesCache</code>は<code>Int</code>キーを<code>Article</code>値にマッピングします。</li><li>次に、ローカルメモリとディスクリソースのサイズ制約を提供します。これらのパラメータの詳細については、<a href="https://www.ehcache.org/documentation/2.8/configuration/cache-size.html" target="_blank" rel="noreferrer">Ehcacheドキュメント</a>を参照してください。</li><li>最後に、提供された名前、キー、および値の型を指定して<code>cacheManager.getCache()</code>を呼び出すことにより、作成されたキャッシュを取得します。</li></ul></li><li><p>キャッシュで使用されるには、<code>Article</code>クラスはシリアライズ可能であり、<code>java.io.Serializable</code>を実装している必要があります。 <code>com/example/models/Article.kt</code>を開き、コードを次のように更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div></li><li><p>さて、<code>DAOFacade</code>のメンバーを実装する準備ができました。 <code>DAOFacadeCacheImpl.kt</code>に戻り、以下のメソッドを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><ul><li><code>allArticles</code>: すべての記事をキャッシュしようとはしません。これはメインデータベースに委譲します。</li><li><code>article</code>: 記事を取得する際、まずキャッシュに存在するかどうかを確認し、存在しない場合にのみメインの<code>DAOFacade</code>に委譲し、その記事をキャッシュにも追加します。</li><li><code>addNewArticle</code>: 新しい記事を追加する際、メインの<code>DAOFacade</code>に委譲しますが、この記事をキャッシュにも追加します。</li><li><code>editArticle</code>: 既存の記事を編集する際、キャッシュとデータベースの両方を更新します。</li><li><code>deleteArticle</code>: 削除時には、キャッシュとメインデータベースの両方から記事を削除する必要があります。</li></ul></li></ol><h3 id="init-dao-facade" tabindex="-1">DAOFacadeCacheImplを初期化する <a class="header-anchor" href="#init-dao-facade" aria-label="Permalink to &quot;DAOFacadeCacheImplを初期化する {id=&quot;init-dao-facade&quot;}&quot;">​</a></h3><p><code>DAOFacadeCacheImpl</code>のインスタンスを作成し、アプリケーションが起動する前にデータベースに挿入されるサンプル記事を追加しましょう。</p><ol><li><p>まず、<code>DAOFacadeImpl.kt</code>ファイルを開き、ファイルの最後にある<code>dao</code>変数の初期化を削除します。</p></li><li><p>次に、<code>com/example/plugins/Routing.kt</code>を開き、<code>configureRouting</code>ブロック内で<code>dao</code>変数を初期化します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p>これで完了です。 これで<a href="./db-persistence#run_app">アプリケーションを実行</a>し、すべてが以前と同様に動作することを確認できます。</p></li></ol><blockquote><p>コネクションプーリングとキャッシングを含む完全な例はこちらで見つけることができます: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/tutorial-website-interactive-persistence-advanced" target="_blank" rel="noreferrer">tutorial-website-interactive-persistence-advanced</a>。</p></blockquote>`,32))])}const y=l(u,[["render",g]]);export{x as __pageData,y as default};
