import{_ as p,C as r,c as d,o as h,ag as o,G as s,j as i,w as l,a}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"Kotlin Gradle 外掛程式中的編譯與快取","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/gradle-compilation-and-caches.md","filePath":"zh-Hant/kotlin/gradle-compilation-and-caches.md","lastUpdated":1754307826000}'),c={name:"zh-Hant/kotlin/gradle-compilation-and-caches.md"};function k(g,e,u,m,E,b){const t=r("tab"),n=r("tabs");return h(),d("div",null,[e[8]||(e[8]=o('<h1 id="kotlin-gradle-外掛程式中的編譯與快取" tabindex="-1">Kotlin Gradle 外掛程式中的編譯與快取 <a class="header-anchor" href="#kotlin-gradle-外掛程式中的編譯與快取" aria-label="Permalink to &quot;Kotlin Gradle 外掛程式中的編譯與快取&quot;">​</a></h1><p>在此頁面上，您可以了解以下主題：</p><ul><li><a href="#incremental-compilation">增量編譯</a></li><li><a href="#gradle-build-cache-support">Gradle 建置快取支援</a></li><li><a href="#gradle-configuration-cache-support">Gradle 設定快取支援</a></li><li><a href="#the-kotlin-daemon-and-how-to-use-it-with-gradle">Kotlin 守護行程及其在 Gradle 中的使用</a></li><li><a href="#rolling-back-to-the-previous-compiler">回溯到先前的編譯器</a></li><li><a href="#defining-kotlin-compiler-execution-strategy">定義 Kotlin 編譯器執行策略</a></li><li><a href="#kotlin-compiler-fallback-strategy">Kotlin 編譯器備援策略</a></li><li><a href="#trying-the-latest-language-version">試用最新的語言版本</a></li><li><a href="#build-reports">建置報告</a></li></ul><h2 id="增量編譯" tabindex="-1">增量編譯 <a class="header-anchor" href="#增量編譯" aria-label="Permalink to &quot;增量編譯&quot;">​</a></h2><p>Kotlin Gradle 外掛程式支援增量編譯，此功能預設為 Kotlin/JVM 和 Kotlin/JS 專案啟用。增量編譯會追蹤建置之間類別路徑 (classpath) 中檔案的變更，以便僅編譯受這些變更影響的檔案。此方法適用於 <a href="#gradle-build-cache-support">Gradle 的建置快取</a> 並支援 <a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_compile_avoidance" target="_blank" rel="noreferrer">編譯避免 (compilation avoidance)</a>。</p><p>對於 Kotlin/JVM，增量編譯依賴於類別路徑快照，該快照會擷取模組的 API 結構，以判斷何時需要重新編譯。為優化整體流程，Kotlin 編譯器使用兩種型別的類別路徑快照：</p><ul><li><strong>細粒度快照：</strong> 包含有關類別成員的詳細資訊，例如屬性或函式。當偵測到成員層級的變更時，Kotlin 編譯器僅重新編譯依賴於已修改成員的類別。為保持效能，Kotlin Gradle 外掛程式會為 Gradle 快取中的 <code>.jar</code> 檔案建立粗粒度快照。</li><li><strong>粗粒度快照：</strong> 僅包含類別 <a href="https://en.wikipedia.org/wiki/Application_binary_interface" target="_blank" rel="noreferrer">ABI</a> 雜湊 (hash)。當 ABI 的一部分發生變更時，Kotlin 編譯器會重新編譯所有依賴於變更類別的類別。這對於不常變更的類別（例如外部函式庫）非常有用。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/JS 專案使用基於歷史檔案的不同增量編譯方法。</p></div><p>有幾種方式可以停用增量編譯：</p><ul><li><p>將 Kotlin/JVM 的 <code>kotlin.incremental=false</code> 設定為 <code>false</code>。</p></li><li><p>將 Kotlin/JS 專案的 <code>kotlin.incremental.js=false</code> 設定為 <code>false</code>。</p></li><li><p>使用 <code>-Pkotlin.incremental=false</code> 或 <code>-Pkotlin.incremental.js=false</code> 作為命令列參數。</p><p>該參數應新增到每個後續建置中。</p></li></ul><p>當您停用增量編譯時，增量快取在建置後將失效。首次建置永遠不會是增量的。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>有時增量編譯的問題在失敗發生數輪後才會顯現。使用 <a href="#build-reports">建置報告</a> 來追蹤變更和編譯的歷史記錄。這有助於您提供可重現的錯誤報告。</p></div><p>要了解有關我們目前增量編譯方法的運作方式以及與先前方法相比的更多資訊，請參閱我們的 <a href="https://blog.jetbrains.com/kotlin/2022/07/a-new-approach-to-incremental-compilation-in-kotlin/" target="_blank" rel="noreferrer">部落格文章</a>。</p><h2 id="gradle-建置快取支援" tabindex="-1">Gradle 建置快取支援 <a class="header-anchor" href="#gradle-建置快取支援" aria-label="Permalink to &quot;Gradle 建置快取支援&quot;">​</a></h2><p>Kotlin 外掛程式使用 <a href="https://docs.gradle.org/current/userguide/build_cache.html" target="_blank" rel="noreferrer">Gradle 建置快取</a>，該快取儲存建置輸出，以便在未來的建置中重複使用。</p><p>要停用所有 Kotlin 任務的快取，請將系統屬性 <code>kotlin.caching.enabled</code> 設定為 <code>false</code> (使用引數 <code>-Dkotlin.caching.enabled=false</code> 執行建置)。</p><h2 id="gradle-設定快取支援" tabindex="-1">Gradle 設定快取支援 <a class="header-anchor" href="#gradle-設定快取支援" aria-label="Permalink to &quot;Gradle 設定快取支援&quot;">​</a></h2><p>Kotlin 外掛程式使用 <a href="https://docs.gradle.org/current/userguide/configuration_cache.html" target="_blank" rel="noreferrer">Gradle 設定快取</a>，該快取透過重複使用配置階段的結果來加速後續建置的過程。</p><p>請參閱 <a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:usage" target="_blank" rel="noreferrer">Gradle 文件</a> 以了解如何啟用設定快取。啟用此功能後，Kotlin Gradle 外掛程式會自動開始使用它。</p><h2 id="kotlin-守護行程及其在-gradle-中的使用" tabindex="-1">Kotlin 守護行程及其在 Gradle 中的使用 <a class="header-anchor" href="#kotlin-守護行程及其在-gradle-中的使用" aria-label="Permalink to &quot;Kotlin 守護行程及其在 Gradle 中的使用&quot;">​</a></h2><p>Kotlin 守護行程：</p><ul><li>與 Gradle 守護行程一同執行以編譯專案。</li><li>當您使用 IntelliJ IDEA 內建建置系統編譯專案時，與 Gradle 守護行程分開執行。</li></ul><p>當其中一個 Kotlin 編譯任務開始編譯原始碼時，Kotlin 守護行程會在 Gradle 的 <a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:build_phases" target="_blank" rel="noreferrer">執行階段</a> 啟動。Kotlin 守護行程會隨 Gradle 守護行程一同停止，或者在沒有 Kotlin 編譯活動的兩個小時閒置後停止。</p><p>Kotlin 守護行程使用與 Gradle 守護行程相同的 JDK。</p><h3 id="設定-kotlin-守護行程的-jvm-引數" tabindex="-1">設定 Kotlin 守護行程的 JVM 引數 <a class="header-anchor" href="#設定-kotlin-守護行程的-jvm-引數" aria-label="Permalink to &quot;設定 Kotlin 守護行程的 JVM 引數&quot;">​</a></h3><p>以下每種設定引數的方式都會覆蓋其之前設定的引數：</p><ul><li><a href="#gradle-daemon-arguments-inheritance">Gradle 守護行程引數繼承</a></li><li><a href="#kotlin-daemon-jvm-options-system-property"><code>kotlin.daemon.jvm.options</code> 系統屬性</a></li><li><a href="#kotlin-daemon-jvmargs-property"><code>kotlin.daemon.jvmargs</code> 屬性</a></li><li><a href="#kotlin-extension"><code>kotlin</code> 擴充功能</a></li><li><a href="#specific-task-definition">特定任務定義</a></li></ul><h4 id="gradle-守護行程引數繼承" tabindex="-1">Gradle 守護行程引數繼承 <a class="header-anchor" href="#gradle-守護行程引數繼承" aria-label="Permalink to &quot;Gradle 守護行程引數繼承&quot;">​</a></h4><p>預設情況下，Kotlin 守護行程會從 Gradle 守護行程繼承一組特定的引數，但會使用為 Kotlin 守護行程直接指定的任何 JVM 引數覆寫它們。例如，如果您在 <code>gradle.properties</code> 檔案中新增以下 JVM 引數：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.gradle.jvmargs=-Xmx1500m -Xms500m -XX:MaxMetaspaceSize=1g</span></span></code></pre></div><p>這些引數隨後會新增到 Kotlin 守護行程的 JVM 引數中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-Xmx1500m -XX:ReservedCodeCacheSize=320m -XX:MaxMetaspaceSize=1g -XX:UseParallelGC -ea -XX:+UseCodeCacheFlushing -XX:+HeapDumpOnOutOfMemoryError -Djava.awt.headless=true -Djava.rmi.server.hostname=127.0.0.1 --add-exports=java.base/sun.nio.ch=ALL-UNNAMED</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>要了解有關 Kotlin 守護行程 JVM 引數預設行為的更多資訊，請參閱 <a href="#kotlin-daemon-s-behavior-with-jvm-arguments">Kotlin 守護行程的 JVM 引數行為</a>。</p></div><h4 id="kotlin-daemon-jvm-options-系統屬性" tabindex="-1">kotlin.daemon.jvm.options 系統屬性 <a class="header-anchor" href="#kotlin-daemon-jvm-options-系統屬性" aria-label="Permalink to &quot;kotlin.daemon.jvm.options 系統屬性&quot;">​</a></h4><p>如果 Gradle 守護行程的 JVM 引數具有 <code>kotlin.daemon.jvm.options</code> 系統屬性，請在 <code>gradle.properties</code> 檔案中使用它：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.gradle.jvmargs=-Dkotlin.daemon.jvm.options=-Xmx1500m,Xms500m</span></span></code></pre></div><p>傳遞引數時，請遵循以下規則：</p><ul><li><strong>僅</strong>在引數 <code>Xmx</code>、<code>XX:MaxMetaspaceSize</code> 和 <code>XX:ReservedCodeCacheSize</code> 之前使用減號 <code>-</code>。</li><li>使用逗號 (<code>,</code>) 分隔引數，<strong>不帶</strong>空格。空格後面的引數將用於 Gradle 守護行程，而非 Kotlin 守護行程。</li></ul><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>如果滿足以下所有條件，Gradle 會忽略這些屬性： * Gradle 正在使用 JDK 1.9 或更高版本。 * Gradle 的版本介於（包含）7.0 到 7.1.1 之間。 * Gradle 正在編譯 Kotlin DSL 腳本。 * Kotlin 守護行程未運行。 為了解決此問題，請將 Gradle 升級到 7.2 (或更高) 版本，或使用 <code>kotlin.daemon.jvmargs</code> 屬性——請參閱下一節。</p></div><h4 id="kotlin-daemon-jvmargs-屬性" tabindex="-1">kotlin.daemon.jvmargs 屬性 <a class="header-anchor" href="#kotlin-daemon-jvmargs-屬性" aria-label="Permalink to &quot;kotlin.daemon.jvmargs 屬性&quot;">​</a></h4><p>您可以在 <code>gradle.properties</code> 檔案中新增 <code>kotlin.daemon.jvmargs</code> 屬性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.daemon.jvmargs=-Xmx1500m -Xms500m</span></span></code></pre></div><p>請注意，如果您在此處或在 Gradle 的 JVM 引數中未指定 <code>ReservedCodeCacheSize</code> 引數，Kotlin Gradle 外掛程式會應用預設值 <code>320m</code>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-Xmx1500m -XX:ReservedCodeCacheSize=320m -Xms500m</span></span></code></pre></div><h4 id="kotlin-擴充功能" tabindex="-1">kotlin 擴充功能 <a class="header-anchor" href="#kotlin-擴充功能" aria-label="Permalink to &quot;kotlin 擴充功能&quot;">​</a></h4><p>您可以在 <code>kotlin</code> 擴充功能中指定引數：</p>',46)),s(n,{group:"build-script"},{default:l(()=>[s(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>e[0]||(e[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinDaemonJvmArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," listOf"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>e[1]||(e[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinDaemonJvmArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),e[9]||(e[9]=i("h4",{id:"特定任務定義",tabindex:"-1"},[a("特定任務定義 "),i("a",{class:"header-anchor",href:"#特定任務定義","aria-label":'Permalink to "特定任務定義"'},"​")],-1)),e[10]||(e[10]=i("p",null,"您可以為特定任務指定引數：",-1)),s(n,{group:"build-script"},{default:l(()=>[s(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>e[2]||(e[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"CompileUsingKotlinDaemon"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinDaemonJvmArguments."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"listOf"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>e[3]||(e[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"CompileUsingKotlinDaemon"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"configureEach { "),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"task"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ->")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    task"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlinDaemonJvmArguments "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx1g"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms512m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),e[11]||(e[11]=o('<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在這種情況下，新的 Kotlin 守護行程實例可以在任務執行時啟動。了解更多有關 <a href="#kotlin-daemon-s-behavior-with-jvm-arguments">Kotlin 守護行程 JVM 引數行為</a> 的資訊。</p></div><h3 id="kotlin-守護行程的-jvm-引數行為" tabindex="-1">Kotlin 守護行程的 JVM 引數行為 <a class="header-anchor" href="#kotlin-守護行程的-jvm-引數行為" aria-label="Permalink to &quot;Kotlin 守護行程的 JVM 引數行為&quot;">​</a></h3><p>配置 Kotlin 守護行程的 JVM 引數時，請注意：</p><ul><li>當不同的子專案或任務具有不同的 JVM 引數集時，預期會同時執行多個 Kotlin 守護行程實例。</li><li>只有當 Gradle 運行相關的編譯任務且現有 Kotlin 守護行程沒有相同的 JVM 引數集時，才會啟動新的 Kotlin 守護行程實例。 想像一下您的專案有很多子專案。它們中的大多數都需要一些堆積記憶體用於 Kotlin 守護行程，但其中一個模組需要很多 (儘管它很少被編譯)。在這種情況下，您應該為此類模組提供一組不同的 JVM 引數，這樣具有更大堆積大小的 Kotlin 守護行程只會為接觸此特定模組的開發人員啟動。<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您已運行一個具有足夠堆積大小來處理編譯請求的 Kotlin 守護行程，即使其他請求的 JVM 引數不同，該守護行程也將被重複使用，而不會啟動新的。</p></div></li></ul><p>如果未指定以下引數，Kotlin 守護行程將從 Gradle 守護行程繼承它們：</p><ul><li><code>-Xmx</code></li><li><code>-XX:MaxMetaspaceSize</code></li><li><code>-XX:ReservedCodeCacheSize</code>。如果未指定或繼承，預設值為 <code>320m</code>。</li></ul><p>Kotlin 守護行程具有以下預設 JVM 引數：</p><ul><li><code>-XX:UseParallelGC</code>。此引數僅在未指定其他垃圾收集器時應用。</li><li><code>-ea</code></li><li><code>-XX:+UseCodeCacheFlushing</code></li><li><code>-Djava.awt.headless=true</code></li><li><code>-D{java.servername.property}={localhostip}</code></li><li><code>--add-exports=java.base/sun.nio.ch=ALL-UNNAMED</code>。此引數僅適用於 JDK 16 或更高版本。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin 守護行程的預設 JVM 引數列表可能因版本而異。您可以使用 <a href="https://visualvm.github.io/" target="_blank" rel="noreferrer">VisualVM</a> 等工具來檢查正在運行的 JVM 程序（例如 Kotlin 守護行程）的實際設定。</p></div><h2 id="回溯到先前的編譯器" tabindex="-1">回溯到先前的編譯器 <a class="header-anchor" href="#回溯到先前的編譯器" aria-label="Permalink to &quot;回溯到先前的編譯器&quot;">​</a></h2><p>從 Kotlin 2.0.0 開始，預設使用 K2 編譯器。</p><p>要在 Kotlin 2.0.0 或更高版本中使用先前的編譯器，請執行以下操作之一：</p><ul><li>在您的 <code>build.gradle.kts</code> 檔案中，將 <a href="/zh-Hant/kotlin/gradle-compiler-options#example-of-setting-languageversion">語言版本設定</a> 為 <code>1.9</code>。</li></ul><p>或者</p><ul><li>使用以下編譯器選項：<code>-language-version 1.9</code>。</li></ul><p>要了解有關 K2 編譯器優勢的更多資訊，請參閱 <a href="/zh-Hant/kotlin/k2-compiler-migration-guide">K2 編譯器遷移指南</a>。</p><h2 id="定義-kotlin-編譯器執行策略" tabindex="-1">定義 Kotlin 編譯器執行策略 <a class="header-anchor" href="#定義-kotlin-編譯器執行策略" aria-label="Permalink to &quot;定義 Kotlin 編譯器執行策略&quot;">​</a></h2><p><em>Kotlin 編譯器執行策略</em> 定義了 Kotlin 編譯器的執行位置以及在每種情況下是否支援增量編譯。</p><p>有三種編譯器執行策略：</p><table tabindex="0"><thead><tr><th>策略</th><th>Kotlin 編譯器執行位置</th><th>增量編譯</th><th>其他特性和注意事項</th></tr></thead><tbody><tr><td>Daemon (守護行程)</td><td>在其自身的守護行程中</td><td>是</td><td><em>預設且最快的策略</em>。可以在不同的 Gradle 守護行程和多個平行編譯之間共享。</td></tr><tr><td>In process (行程內)</td><td>在 Gradle 守護行程中</td><td>否</td><td>可能與 Gradle 守護行程共享堆積記憶體。「行程內」執行策略比「守護行程」執行策略_慢_。每個 <a href="https://docs.gradle.org/current/userguide/worker_api.html" target="_blank" rel="noreferrer">工作執行緒</a> 會為每次編譯建立一個獨立的 Kotlin 編譯器類別載入器 (classloader)。</td></tr><tr><td>Out of process (行程外)</td><td>在每次編譯的獨立程序中</td><td>否</td><td>最慢的執行策略。與「行程內」類似，但額外會在 Gradle 工作執行緒中為每次編譯建立一個獨立的 Java 程序。</td></tr></tbody></table><p>要定義 Kotlin 編譯器執行策略，您可以使用以下屬性之一：</p><ul><li><code>kotlin.compiler.execution.strategy</code> Gradle 屬性。</li><li><code>compilerExecutionStrategy</code> 編譯任務屬性。</li></ul><p>任務屬性 <code>compilerExecutionStrategy</code> 的優先級高於 Gradle 屬性 <code>kotlin.compiler.execution.strategy</code>。</p><p><code>kotlin.compiler.execution.strategy</code> 屬性的可用值為：</p><ol><li><code>daemon</code> (預設)</li><li><code>in-process</code></li><li><code>out-of-process</code></li></ol><p>在 <code>gradle.properties</code> 中使用 Gradle 屬性 <code>kotlin.compiler.execution.strategy</code>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.compiler.execution.strategy=out-of-process</span></span></code></pre></div><p><code>compilerExecutionStrategy</code> 任務屬性的可用值為：</p><ol><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.DAEMON</code> (預設)</li><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.IN_PROCESS</code></li><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.OUT_OF_PROCESS</code></li></ol><p>在您的建置腳本中使用任務屬性 <code>compilerExecutionStrategy</code>：</p>',30)),s(n,{group:"build-script"},{default:l(()=>[s(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>e[4]||(e[4]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," org.jetbrains.kotlin.gradle.tasks.CompileUsingKotlinDaemon")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// ...")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"CompileUsingKotlinDaemon"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    compilerExecutionStrategy."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(KotlinCompilerExecutionStrategy.IN_PROCESS)")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>e[5]||(e[5]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," org.jetbrains.kotlin.gradle.tasks.CompileUsingKotlinDaemon")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// ...")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"CompileUsingKotlinDaemon"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerExecutionStrategy "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," KotlinCompilerExecutionStrategy."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"IN_PROCESS")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),e[12]||(e[12]=o(`<h2 id="kotlin-編譯器備援策略" tabindex="-1">Kotlin 編譯器備援策略 <a class="header-anchor" href="#kotlin-編譯器備援策略" aria-label="Permalink to &quot;Kotlin 編譯器備援策略&quot;">​</a></h2><p>Kotlin 編譯器的備援策略是：如果守護行程因故失敗，則在 Kotlin 守護行程之外運行編譯。如果 Gradle 守護行程已啟用，編譯器會使用<a href="#defining-kotlin-compiler-execution-strategy">&quot;行程內&quot;策略</a>。如果 Gradle 守護行程已停用，編譯器會使用「行程外」策略。</p><p>當發生此備援時，您的 Gradle 建置輸出中會出現以下警告行：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Failed to compile with Kotlin daemon: java.lang.RuntimeException: Could not connect to Kotlin compile daemon</span></span>
<span class="line"><span>[exception stacktrace]</span></span>
<span class="line"><span>Using fallback strategy: Compile without Kotlin daemon</span></span>
<span class="line"><span>Try ./gradlew --stop if this issue persists.</span></span></code></pre></div><p>然而，靜默地備援到另一種策略可能會消耗大量系統資源或導致非確定性建置。有關此問題的更多資訊，請參閱此 <a href="https://youtrack.jetbrains.com/issue/KT-48843/Add-ability-to-disable-Kotlin-daemon-fallback-strategy" target="_blank" rel="noreferrer">YouTrack 問題</a>。為避免此情況，有一個 Gradle 屬性 <code>kotlin.daemon.useFallbackStrategy</code>，其預設值為 <code>true</code>。當值為 <code>false</code> 時，建置會因守護行程啟動或通訊問題而失敗。在 <code>gradle.properties</code> 中宣告此屬性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.daemon.useFallbackStrategy=false</span></span></code></pre></div><p>Kotlin 編譯任務中也有一個 <code>useDaemonFallbackStrategy</code> 屬性，如果您同時使用這兩者，該屬性將優先於 Gradle 屬性。</p>`,7)),s(n,{group:"build-script"},{default:l(()=>[s(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>e[6]||(e[6]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    compileKotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        useDaemonFallbackStrategy."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"false"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>e[7]||(e[7]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"named("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"compileKotlin"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"configure {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    useDaemonFallbackStrategy "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),e[13]||(e[13]=o(`<p>如果沒有足夠的記憶體來執行編譯，您可以在日誌中看到相關訊息。</p><h2 id="試用最新的語言版本" tabindex="-1">試用最新的語言版本 <a class="header-anchor" href="#試用最新的語言版本" aria-label="Permalink to &quot;試用最新的語言版本&quot;">​</a></h2><p>從 Kotlin 2.0.0 開始，要試用最新的語言版本，請在您的 <code>gradle.properties</code> 檔案中設定 <code>kotlin.experimental.tryNext</code> 屬性。當您使用此屬性時，Kotlin Gradle 外掛程式會將語言版本遞增到您的 Kotlin 版本的預設值之上。例如，在 Kotlin 2.0.0 中，預設語言版本為 2.0，因此該屬性會配置語言版本 2.1。</p><p>或者，您可以運行以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assemble</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Pkotlin.experimental.tryNext=true</span></span></code></pre></div><p>在 <a href="#build-reports">建置報告</a> 中，您可以找到用於編譯每個任務的語言版本。</p><h2 id="建置報告" tabindex="-1">建置報告 <a class="header-anchor" href="#建置報告" aria-label="Permalink to &quot;建置報告&quot;">​</a></h2><p>建置報告包含不同編譯階段的持續時間以及編譯無法增量的任何原因。當編譯時間過長或同一個專案的編譯時間不同時，使用建置報告來調查效能問題。</p><p>Kotlin 建置報告可以比 <a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">Gradle 建置掃描</a> 更有效地幫助您調查建置效能問題，因為後者以單一 Gradle 任務作為粒度單位。</p><p>分析長時間運行的編譯的建置報告可以幫助您解決兩個常見案例：</p><ul><li>建置不是增量的。分析原因並解決潛在問題。</li><li>建置是增量的但花費了太多時間。嘗試重新組織原始碼檔案 — 分割大型檔案、將獨立類別儲存在不同檔案中、重構大型類別、在不同檔案中宣告頂層函式等等。</li></ul><p>建置報告還會顯示專案中使用的 Kotlin 版本。此外，從 Kotlin 1.9.0 開始，您可以在 <a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">Gradle 建置掃描</a> 中查看用於編譯程式碼的編譯器。</p><p>了解 <a href="https://blog.jetbrains.com/kotlin/2022/06/introducing-kotlin-build-reports/#how_to_read_build_reports" target="_blank" rel="noreferrer">如何閱讀建置報告</a> 以及 <a href="https://blog.jetbrains.com/kotlin/2022/06/introducing-kotlin-build-reports/#how_we_use_build_reports_in_jetbrains" target="_blank" rel="noreferrer">JetBrains 如何使用建置報告</a>。</p><h3 id="啟用建置報告" tabindex="-1">啟用建置報告 <a class="header-anchor" href="#啟用建置報告" aria-label="Permalink to &quot;啟用建置報告&quot;">​</a></h3><p>要啟用建置報告，請在 <code>gradle.properties</code> 中宣告建置報告輸出的儲存位置：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.output=file</span></span></code></pre></div><p>以下值及其組合可用於輸出：</p><table tabindex="0"><thead><tr><th>選項</th><th>描述</th></tr></thead><tbody><tr><td><code>file</code></td><td>以人類可讀的格式將建置報告儲存到本機檔案。預設情況下，它是 <code>\${project_folder}/build/reports/kotlin-build/\${project_name}-timestamp.txt</code></td></tr><tr><td><code>single_file</code></td><td>以物件格式將建置報告儲存到指定的本機檔案。</td></tr><tr><td><code>build_scan</code></td><td>將建置報告儲存到 <a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">建置掃描</a> 的 <code>custom values</code> 區塊中。請注意，Gradle Enterprise 外掛程式限制了自訂值的數量和長度。在大型專案中，某些值可能會丟失。</td></tr><tr><td><code>http</code></td><td>使用 HTTP(S) 發布建置報告。POST 方法以 JSON 格式發送度量。您可以在 <a href="https://github.com/JetBrains/kotlin/blob/master/libraries/tools/kotlin-gradle-plugin/src/common/kotlin/org/jetbrains/kotlin/gradle/report/data/GradleCompileStatisticsData.kt" target="_blank" rel="noreferrer">Kotlin 儲存庫</a> 中查看已發送資料的目前版本。您可以在 <a href="https://blog.jetbrains.com/kotlin/2022/06/introducing-kotlin-build-reports/#enable_build_reports" target="_blank" rel="noreferrer">這篇部落格文章</a> 中找到 HTTP 端點的範例。</td></tr><tr><td><code>json</code></td><td>將建置報告以 JSON 格式儲存到本機檔案。在 <code>kotlin.build.report.json.directory</code> 中設定建置報告的位置 (見下文)。預設情況下，其名稱為 <code>\${project_name}-build-&lt;date-time&gt;-&lt;index&gt;.json</code>。</td></tr></tbody></table><p>以下是 <code>kotlin.build.report</code> 的可用選項列表：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 必需的輸出。允許任何組合</span></span>
<span class="line"><span>kotlin.build.report.output=file,single_file,http,build_scan,json</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 如果使用 single_file 輸出，此為必填。報告存放位置 </span></span>
<span class="line"><span># 用於取代已棄用的 \`kotlin.internal.single.build.metrics.file\` 屬性</span></span>
<span class="line"><span>kotlin.build.report.single_file=some_filename</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 如果使用 json 輸出，此為必填。報告存放位置 </span></span>
<span class="line"><span>kotlin.build.report.json.directory=my/directory/path</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 選填。檔案式報告的輸出目錄。預設值：build/reports/kotlin-build/</span></span>
<span class="line"><span>kotlin.build.report.file.output_dir=kotlin-reports</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 選填。用於標記建置報告的標籤 (例如，偵錯參數)</span></span>
<span class="line"><span>kotlin.build.report.label=some_label</span></span></code></pre></div><p>僅適用於 HTTP 的選項：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 必填。HTTP(S) 報告的發布位置</span></span>
<span class="line"><span>kotlin.build.report.http.url=http://127.0.0.1:8080</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 選填。如果 HTTP 端點需要驗證，請提供使用者名稱和密碼</span></span>
<span class="line"><span>kotlin.build.report.http.user=someUser</span></span>
<span class="line"><span>kotlin.build.report.http.password=somePassword</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 選填。將建置的 Git 分支名稱新增到建置報告中</span></span>
<span class="line"><span>kotlin.build.report.http.include_git_branch.name=true|false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 選填。將編譯器引數新增到建置報告中</span></span>
<span class="line"><span># 如果專案包含許多模組，其編譯器引數在報告中可能會非常龐大且幫助不大</span></span>
<span class="line"><span>kotlin.build.report.include_compiler_arguments=true|false</span></span></code></pre></div><h3 id="自訂值的限制" tabindex="-1">自訂值的限制 <a class="header-anchor" href="#自訂值的限制" aria-label="Permalink to &quot;自訂值的限制&quot;">​</a></h3><p>為收集建置掃描的統計資料，Kotlin 建置報告使用 <a href="https://docs.gradle.com/enterprise/tutorials/extending-build-scans/" target="_blank" rel="noreferrer">Gradle 的自訂值</a>。您和不同的 Gradle 外掛程式都可以將資料寫入自訂值。自訂值的數量有其限制。請參閱 <a href="https://docs.gradle.com/enterprise/gradle-plugin/#adding_custom_values" target="_blank" rel="noreferrer">建置掃描外掛程式文件</a> 中目前自訂值的最大計數。</p><p>如果您有一個大型專案，此類自訂值的數量可能會非常大。如果此數量超過限制，您可以在日誌中看到以下訊息：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Maximum number of custom values (1,000) exceeded</span></span></code></pre></div><p>為減少 Kotlin 外掛程式產生的自訂值數量，您可以在 <code>gradle.properties</code> 中使用以下屬性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.build_scan.custom_values_limit=500</span></span></code></pre></div><h3 id="關閉專案和系統屬性收集" tabindex="-1">關閉專案和系統屬性收集 <a class="header-anchor" href="#關閉專案和系統屬性收集" aria-label="Permalink to &quot;關閉專案和系統屬性收集&quot;">​</a></h3><p>HTTP 建置統計日誌可能包含某些專案和系統屬性。這些屬性可能會改變建置的行為，因此將它們記錄在建置統計中會很有用。這些屬性可能儲存敏感資料，例如密碼或專案的完整路徑。</p><p>您可以透過在 <code>gradle.properties</code> 中新增 <code>kotlin.build.report.http.verbose_environment</code> 屬性來停用這些統計資料的收集。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JetBrains 不會收集這些統計資料。您選擇 <a href="#enabling-build-reports">儲存報告的位置</a>。</p></div><h2 id="接下來" tabindex="-1">接下來？ <a class="header-anchor" href="#接下來" aria-label="Permalink to &quot;接下來？&quot;">​</a></h2><p>了解更多：</p><ul><li><a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="noreferrer">Gradle 基礎知識和細節</a>。</li><li><a href="/zh-Hant/kotlin/gradle-plugin-variants">支援 Gradle 外掛程式變體</a>。</li></ul>`,35))])}const f=p(c,[["render",k]]);export{v as __pageData,f as default};
