import{_ as t,a as l,b as e,c as n,d as r}from"./chunks/jvm-output-gradle.DaNbfMb_.js";import{_ as o,c as p,o as d,ag as i,j as a,a as h}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"開始使用 Gradle 和 Kotlin/JVM","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/get-started-with-jvm-gradle-project.md","filePath":"zh-Hant/kotlin/get-started-with-jvm-gradle-project.md","lastUpdated":1754307826000}'),k={name:"zh-Hant/kotlin/get-started-with-jvm-gradle-project.md"};function g(c,s,E,u,m,_){return d(),p("div",null,s[0]||(s[0]=[i('<h1 id="開始使用-gradle-和-kotlin-jvm" tabindex="-1">開始使用 Gradle 和 Kotlin/JVM <a class="header-anchor" href="#開始使用-gradle-和-kotlin-jvm" aria-label="Permalink to &quot;開始使用 Gradle 和 Kotlin/JVM&quot;">​</a></h1><p>本教學示範如何使用 IntelliJ IDEA 和 Gradle 建立一個 JVM 主控台應用程式。</p><p>首先，若要開始，請下載並安裝最新版本的 <a href="https://www.jetbrains.com/idea/download/index.html" target="_blank" rel="noreferrer">IntelliJ IDEA</a>。</p><h2 id="建立專案" tabindex="-1">建立專案 <a class="header-anchor" href="#建立專案" aria-label="Permalink to &quot;建立專案&quot;">​</a></h2><ol><li><p>在 IntelliJ IDEA 中，選擇 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>。</p></li><li><p>在左側面板中，選擇 <strong>Kotlin</strong>。</p></li><li><p>為新專案命名，並在必要時變更其位置。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>勾選 <strong>Create Git repository</strong> 核取方塊，將新專案置於版本控制之下。您將能夠 隨時進行此操作。</p></div><p><img src="'+t+'" alt="建立主控台應用程式" width="700"></p></li><li><p>選擇 <strong>Gradle</strong> 建置系統。</p></li><li><p>從 <strong>JDK</strong> 清單中，選擇您要在專案中使用的 <a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noreferrer">JDK</a>。</p><ul><li>如果 JDK 已安裝在您的電腦上，但未在 IDE 中定義，請選擇 <strong>Add JDK</strong> 並指定 JDK 家目錄的路徑。</li><li>如果您的電腦上沒有必要的 JDK，請選擇 <strong>Download JDK</strong>。</li></ul></li><li><p>為 Gradle 選擇 <strong>Kotlin</strong> DSL。</p></li><li><p>勾選 <strong>Add sample code</strong> 核取方塊，以建立一個包含 <code>&quot;Hello World!&quot;</code> 範例應用程式的檔案。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>您也可以啟用 <strong>Generate code with onboarding tips</strong> 選項，為您的 範例程式碼添加一些額外有用的註解。</p></div></li><li><p>點擊 <strong>Create</strong>。</p></li></ol><p>您已成功使用 Gradle 建立專案！</p>',6),a("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"為您的專案指定-gradle-版本",tabindex:"-1"},[h("為您的專案指定 Gradle 版本 "),a("a",{class:"header-anchor",href:"#為您的專案指定-gradle-版本","aria-label":'Permalink to "為您的專案指定 Gradle 版本 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<p>您可以在 <strong>Advanced Settings</strong> (進階設定) 部分明確指定專案的 Gradle 版本， 可透過使用 Gradle Wrapper 或 Gradle 的本地安裝來指定：</p><ul><li><p><strong>Gradle Wrapper：</strong></p><ol><li>從 <strong>Gradle distribution</strong> 清單中，選擇 <strong>Wrapper</strong>。</li><li>停用 <strong>Auto-select</strong> 核取方塊。</li><li>從 <strong>Gradle version</strong> 清單中，選擇您的 Gradle 版本。</li></ol></li><li><p><strong>本地安裝：</strong></p><ol><li>從 <strong>Gradle distribution</strong> 清單中，選擇 <strong>Local installation</strong>。</li><li>對於 <strong>Gradle location</strong>，指定您本地 Gradle 版本的路徑。</li></ol><p><img src="'+l+`" alt="進階設定" width="700"></p></li></ul><h2 id="探索建置腳本" tabindex="-1">探索建置腳本 <a class="header-anchor" href="#探索建置腳本" aria-label="Permalink to &quot;探索建置腳本&quot;">​</a></h2><p>開啟 <code>build.gradle.kts</code> 檔案。這是 Gradle Kotlin 建置腳本，其中包含 Kotlin 相關的 artifacts (構件) 以及應用程式所需的其他部分：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.2.10&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 要使用的 Kotlin 版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.example&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 例如，公司名稱 \`org.jetbrains\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0-SNAPSHOT&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 要指派給建置構件的版本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 依賴項的來源。請參閱 1️⃣</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Maven 中央儲存庫。請參閱 2️⃣</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 您想使用的所有程式庫。請參閱 3️⃣</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在儲存庫中找到依賴項名稱後複製它們</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin 測試程式庫</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 請參閱 4️⃣</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    useJUnitPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用於測試的 JUnitPlatform。請參閱 5️⃣</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>1️⃣ 深入了解 <a href="https://docs.gradle.org/current/userguide/declaring_repositories.html" target="_blank" rel="noreferrer">依賴項來源</a>。</li><li>2️⃣ <a href="https://central.sonatype.com/" target="_blank" rel="noreferrer">Maven 中央儲存庫</a>。它也可以是 <a href="https://maven.google.com/" target="_blank" rel="noreferrer">Google 的 Maven 儲存庫</a> 或您公司的私有儲存庫。</li><li>3️⃣ 深入了解 <a href="https://docs.gradle.org/current/userguide/declaring_dependencies.html" target="_blank" rel="noreferrer">宣告依賴項</a>。</li><li>4️⃣ 深入了解 <a href="https://docs.gradle.org/current/dsl/org.gradle.api.Task.html" target="_blank" rel="noreferrer">任務</a>。</li><li>5️⃣ <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/Test.html#useJUnitPlatform" target="_blank" rel="noreferrer">用於測試的 JUnitPlatform</a>。</li></ul><p>如您所見，Gradle 建置檔案中添加了一些 Kotlin 特有的 artifacts (構件)：</p><ol><li><p>在 <code>plugins {}</code> 區塊中，有 <code>kotlin(&quot;jvm&quot;)</code> artifact (構件)。這個外掛程式定義了要在專案中使用的 Kotlin 版本。</p></li><li><p>在 <code>dependencies {}</code> 區塊中，有 <code>testImplementation(kotlin(&quot;test&quot;))</code>。 深入了解 <a href="/zh-Hant/kotlin/gradle-configure-project#set-dependencies-on-test-libraries">設定測試程式庫上的依賴項</a>。</p></li></ol><h2 id="執行應用程式" tabindex="-1">執行應用程式 <a class="header-anchor" href="#執行應用程式" aria-label="Permalink to &quot;執行應用程式&quot;">​</a></h2><ol><li><p>透過選擇 <strong>View</strong> | <strong>Tool Windows</strong> | <strong>Gradle</strong> 開啟 Gradle 視窗：</p><p><img src="`+e+'" alt="Main.kt 與 main 函式" width="700"></p></li><li><p>在 <code>Tasks\\build\\</code> 中執行 <strong>build</strong> Gradle 任務。在 <strong>Build</strong> 視窗中，顯示 <code>BUILD SUCCESSFUL</code>。 這表示 Gradle 已成功建置應用程式。</p></li><li><p>在 <code>src/main/kotlin</code> 中，開啟 <code>Main.kt</code> 檔案：</p><ul><li><code>src</code> 目錄包含 Kotlin 原始碼檔案和資源。</li><li><code>Main.kt</code> 檔案包含將印出 <code>Hello World!</code> 的範例程式碼。</li></ul></li><li><p>透過點擊行號區中的綠色 <strong>Run</strong> 圖示並選擇 <strong>Run &#39;MainKt&#39;</strong> 來執行應用程式。</p><p><img src="'+n+'" alt="執行主控台應用程式" width="350"></p></li></ol><p>您可以在 <strong>Run</strong> 工具視窗中看到結果：</p><p><img src="'+r+'" alt="Kotlin 執行輸出" width="600"></p><p>恭喜！您剛剛執行了您的第一個 Kotlin 應用程式。</p><h2 id="接下來" tabindex="-1">接下來？ <a class="header-anchor" href="#接下來" aria-label="Permalink to &quot;接下來？&quot;">​</a></h2><p>深入了解：</p><ul><li><a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#N14E9A" target="_blank" rel="noreferrer">Gradle 建置檔案屬性</a>。</li><li><a href="/zh-Hant/kotlin/gradle-configure-project">針對不同平台和設定程式庫依賴項</a>。</li><li><a href="/zh-Hant/kotlin/gradle-compiler-options">編譯器選項以及如何傳遞它們</a>。</li><li><a href="/zh-Hant/kotlin/gradle-compilation-and-caches">增量編譯、快取支援、建置報告和 Kotlin 守護程式</a>。</li></ul>',16)]))}const D=o(k,[["render",g]]);export{b as __pageData,D as default};
