import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"佈局基礎","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/compose-layout.md","filePath":"zh-Hant/kmp/compose-layout.md","lastUpdated":1755516278000}'),e={name:"zh-Hant/kmp/compose-layout.md"};function t(p,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="佈局基礎" tabindex="-1">佈局基礎 <a class="header-anchor" href="#佈局基礎" aria-label="Permalink to &quot;佈局基礎&quot;">​</a></h1><p>為了在 Compose Multiplatform 中有效地建構使用者介面，了解佈局建構的關鍵概念至關重要，包括核心原則、佈局階段，以及用於組織 UI 的常用元件和工具。</p><h2 id="composable-函式" tabindex="-1">Composable 函式 <a class="header-anchor" href="#composable-函式" aria-label="Permalink to &quot;Composable 函式&quot;">​</a></h2><p>您可以透過定義一系列 Composable 函式來建構使用者介面。這些函式接收資料並發出 UI 元素。<code>@Composable</code> 註解會告知 Compose 編譯器該函式將資料轉換為 UI。</p><p>一個顯示文字的簡單 Composable 函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="column、row-和-box" tabindex="-1">Column、Row 和 Box <a class="header-anchor" href="#column、row-和-box" aria-label="Permalink to &quot;Column、Row 和 Box&quot;">​</a></h2><p>為了組織您的佈局，您可以使用這些基本構成要素：</p><ul><li><p>使用 <code>Column</code> 在螢幕上垂直放置項目。</p></li><li><p>使用 <code>Row</code> 在螢幕上水平放置項目。</p></li><li><p>使用 <code>Box</code> 將元素彼此堆疊。</p></li><li><p>使用 <code>Row</code> 和 <code>Column</code> 的 <code>FlowRow</code> 和 <code>FlowColumn</code> 版本來建構響應式佈局。當容器空間不足時，項目會自動流向下一行，從而建立多行或多列：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResponsiveLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    FlowRow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Item 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Item 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Item 3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="modifiers" tabindex="-1">Modifiers <a class="header-anchor" href="#modifiers" aria-label="Permalink to &quot;Modifiers&quot;">​</a></h2><p>Modifiers 允許您以宣告式方式裝飾或調整 Composable 的行為。它們對於自訂佈局和互動至關重要，可控制尺寸、對齊、邊距、互動行為等等。</p><p>例如，您可以為文字新增邊距和置中對齊：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModifierExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello with padding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <a href="./compose-layout-modifiers"></a> 中了解更多。</p><h2 id="後續步驟" tabindex="-1">後續步驟 <a class="header-anchor" href="#後續步驟" aria-label="Permalink to &quot;後續步驟&quot;">​</a></h2><ul><li>若要深入了解佈局，請參閱 <a href="https://developer.android.com/develop/ui/compose/layouts" target="_blank" rel="noreferrer">Jetpack Compose documentation</a>。</li><li>了解元件的 <a href="./compose-lifecycle">生命週期</a>。</li></ul>`,16)]))}const c=i(e,[["render",t]]);export{E as __pageData,c as default};
