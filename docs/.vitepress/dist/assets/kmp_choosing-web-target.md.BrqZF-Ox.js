import{_ as a,c as e,o as r,ag as l}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"为 Kotlin 多平台项目选择合适的 Web 目标","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/choosing-web-target.md","filePath":"kmp/choosing-web-target.md","lastUpdated":1755516278000}'),o={name:"kmp/choosing-web-target.md"};function i(n,t,s,p,h,c){return r(),e("div",null,t[0]||(t[0]=[l('<h1 id="为-kotlin-多平台项目选择合适的-web-目标" tabindex="-1">为 Kotlin 多平台项目选择合适的 Web 目标 <a class="header-anchor" href="#为-kotlin-多平台项目选择合适的-web-目标" aria-label="Permalink to &quot;为 Kotlin 多平台项目选择合适的 Web 目标&quot;">​</a></h1><p>Kotlin 多平台 (KMP) 为 Web 开发提供了两种方法：</p><ul><li>基于 JavaScript（使用 Kotlin/JS 编译器）</li><li>基于 WebAssembly（使用 Kotlin/Wasm 编译器）</li></ul><p>这两种选项都允许你在 Web 应用程序中共享代码。然而，它们在性能、互操作性、应用程序大小和目标浏览器支持等方面存在显著差异。本指南解释了何时使用每种目标，以及如何通过合适的选择来满足你的需求。</p><h3 id="快速指南" tabindex="-1">快速指南 <a class="header-anchor" href="#快速指南" aria-label="Permalink to &quot;快速指南&quot;">​</a></h3><p>下表总结了根据用例推荐的目标：</p><table tabindex="0"><thead><tr><th>用例</th><th>推荐目标</th><th>理由</th></tr></thead><tbody><tr><td>共享业务逻辑，但 UI 原生</td><td>JS</td><td>提供与 JavaScript 的直接互操作和最小开销</td></tr><tr><td>共享 UI 和业务逻辑</td><td>Wasm</td><td>为使用 <a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 进行渲染提供更好的性能</td></tr><tr><td>不可共享的 UI</td><td>JS</td><td>允许使用 <a href="https://kobweb.varabyte.com/" target="_blank" rel="noreferrer">Kobweb</a>、<a href="https://kilua.dev/" target="_blank" rel="noreferrer">Kilua</a> 或 <a href="https://kotlinlang.org/docs/js-react.html" target="_blank" rel="noreferrer">React</a> 等基于 HTML 的框架构建 UI，利用现有 JS 生态系统和工具</td></tr></tbody></table><h2 id="何时选择-kotlin-js" tabindex="-1">何时选择 Kotlin/JS <a class="header-anchor" href="#何时选择-kotlin-js" aria-label="Permalink to &quot;何时选择 Kotlin/JS&quot;">​</a></h2><p>如果你的目标是以下情况，Kotlin/JS 提供了一个很好的解决方案：</p><ul><li><a href="#share-business-logic-with-a-javascript-typescript-codebase">与 JavaScript/TypeScript 代码库共享业务逻辑</a></li><li><a href="#build-web-apps-with-kotlin-without-sharing-the-code">使用 Kotlin 构建不可共享的 Web 应用程序</a></li></ul><h3 id="与-javascript-typescript-代码库共享业务逻辑" tabindex="-1">与 JavaScript/TypeScript 代码库共享业务逻辑 <a class="header-anchor" href="#与-javascript-typescript-代码库共享业务逻辑" aria-label="Permalink to &quot;与 JavaScript/TypeScript 代码库共享业务逻辑&quot;">​</a></h3><p>如果你想与原生 JavaScript/TypeScript 应用程序共享一段 Kotlin 代码（例如领域或数据逻辑），JS 目标提供：</p><ul><li>与 JavaScript/TypeScript 的直接互操作。</li><li>互操作性方面的最小开销（例如，没有不必要的数据复制）。这有助于你的代码无缝集成到你的基于 JS 的工作流中。</li></ul><h3 id="使用-kotlin-构建不可共享的-web-应用程序" tabindex="-1">使用 Kotlin 构建不可共享的 Web 应用程序 <a class="header-anchor" href="#使用-kotlin-构建不可共享的-web-应用程序" aria-label="Permalink to &quot;使用 Kotlin 构建不可共享的 Web 应用程序&quot;">​</a></h3><p>对于希望使用 Kotlin 构建整个 Web 应用程序，但不打算将其共享到其他平台（iOS、Android 或桌面）的团队，基于 HTML 的解决方案可能是更好的选择。它提高了 SEO 和可访问性，并默认提供无缝的浏览器集成（例如“页面查找”功能或页面翻译）。在这种情况下，Kotlin/JS 提供了几种选项。你可以：</p><ul><li>使用 <a href="https://kobweb.varabyte.com/" target="_blank" rel="noreferrer">Kobweb</a> 或 <a href="https://kilua.dev/" target="_blank" rel="noreferrer">Kilua</a> 等 Compose HTML-based 框架，使用熟悉的 Compose 多平台架构构建 UI。</li><li>利用基于 React 的解决方案与 Kotlin 包装器，在 Kotlin 中构建 <a href="https://kotlinlang.org/docs/js-react.html" target="_blank" rel="noreferrer">React 组件</a>。</li></ul><h2 id="何时选择-kotlin-wasm" tabindex="-1">何时选择 Kotlin/Wasm <a class="header-anchor" href="#何时选择-kotlin-wasm" aria-label="Permalink to &quot;何时选择 Kotlin/Wasm&quot;">​</a></h2><h3 id="使用-compose-多平台构建跨平台应用" tabindex="-1">使用 Compose 多平台构建跨平台应用 <a class="header-anchor" href="#使用-compose-多平台构建跨平台应用" aria-label="Permalink to &quot;使用 Compose 多平台构建跨平台应用&quot;">​</a></h3><p>如果你想在多个平台（包括 Web）上共享逻辑和 UI，那么 Kotlin/Wasm 结合 <a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 是最佳选择：</p><ul><li>UI 体验在不同平台之间更加一致。</li><li>你可以利用 Wasm 改进渲染，实现流畅、响应迅速的动画。</li><li>对 <a href="https://developer.chrome.com/blog/wasmgc" target="_blank" rel="noreferrer">WasmGC</a> 的浏览器支持已趋于成熟，使得 Kotlin/Wasm 能够在所有主要的现代浏览器上以接近原生的性能运行。</li></ul><p>对于需要支持旧版浏览器的项目，你可以使用 Compose 多平台的兼容模式：在 Wasm 中为现代浏览器构建 UI，但在旧版浏览器上优雅降级到 JS。你还可以在项目中共享 Wasm 和 JS 目标之间的公共逻辑。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>仍然不确定该选择哪条路线？加入我们的 <a href="https://slack-chats.kotlinlang.org" target="_blank" rel="noreferrer">Slack 社区</a>，询问有关主要区别、性能考量和选择合适目标的最佳实践。</p></div>',22)]))}const m=a(o,[["render",i]]);export{b as __pageData,m as default};
