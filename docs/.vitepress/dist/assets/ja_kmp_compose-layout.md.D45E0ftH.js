import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"レイアウトの基本","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-layout.md","filePath":"ja/kmp/compose-layout.md","lastUpdated":1755516278000}'),e={name:"ja/kmp/compose-layout.md"};function t(p,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="レイアウトの基本" tabindex="-1">レイアウトの基本 <a class="header-anchor" href="#レイアウトの基本" aria-label="Permalink to &quot;レイアウトの基本&quot;">​</a></h1><p>Compose Multiplatform でユーザーインターフェースを効率的に構築するには、レイアウト構築の主要な概念（基本的な原則、レイアウトのフェーズ、そしてUIを構成するために利用できる一般的なコンポーネントとツールなど）を理解することが重要です。</p><h2 id="コンポーザブル関数" tabindex="-1">コンポーザブル関数 <a class="header-anchor" href="#コンポーザブル関数" aria-label="Permalink to &quot;コンポーザブル関数&quot;">​</a></h2><p>コンポーザブル関数を定義することで、ユーザーインターフェースを構築できます。これらの関数はデータを受け取り、UI要素を出力します。<code>@Composable</code> アノテーションは、関数がデータをUIに変換することをComposeコンパイラに伝えます。</p><p>テキストを表示するシンプルなコンポーザブル関数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="column、row、およびbox" tabindex="-1">Column、Row、およびBox <a class="header-anchor" href="#column、row、およびbox" aria-label="Permalink to &quot;Column、Row、およびBox&quot;">​</a></h2><p>レイアウトを構成するには、これらの基本的なビルディングブロックを使用できます:</p><ul><li><p><code>Column</code> を使用して、アイテムを画面上に垂直に配置します。</p></li><li><p><code>Row</code> を使用して、アイテムを画面上に水平に配置します。</p></li><li><p><code>Box</code> を使用して、要素を重ねて配置します。</p></li><li><p><code>Row</code> および <code>Column</code> の <code>FlowRow</code> および <code>FlowColumn</code> バージョンを使用して、レスポンシブなレイアウトを構築します。コンテナのスペースが不足すると、アイテムは自動的に次の行に流れ、複数の行または列を作成します:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResponsiveLayout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    FlowRow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Item 1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Item 2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Item 3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="modifier" tabindex="-1">Modifier <a class="header-anchor" href="#modifier" aria-label="Permalink to &quot;Modifier&quot;">​</a></h2><p>Modifier を使用すると、コンポーザブルの動作を宣言的に装飾または調整できます。これらは、サイズ、配置、パディング、インタラクションの動作などを制御することで、レイアウトとインタラクションをカスタマイズする上で不可欠です。</p><p>例えば、テキストにパディングと中央揃えを追加できます:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModifierExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello with padding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>詳細については、<a href="./compose-layout-modifiers"></a> を参照してください。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li>レイアウトに関する詳細については、<a href="https://developer.android.com/develop/ui/compose/layouts" target="_blank" rel="noreferrer">Jetpack Compose ドキュメント</a> を参照してください。</li><li>コンポーネントの<a href="./compose-lifecycle">ライフサイクル</a>について学びます。</li></ul>`,16)]))}const c=i(e,[["render",t]]);export{E as __pageData,c as default};
