import{_ as a,c as s,o,ag as i}from"./chunks/framework.Bksy39di.js";const h=JSON.parse('{"title":"Compose 编译器迁移指南","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/compose-compiler-migration-guide.md","filePath":"kotlin/compose-compiler-migration-guide.md","lastUpdated":1754307826000}'),l={name:"kotlin/compose-compiler-migration-guide.md"};function p(n,e,t,r,c,d){return o(),s("div",null,e[0]||(e[0]=[i(`<h1 id="compose-编译器迁移指南" tabindex="-1">Compose 编译器迁移指南 <a class="header-anchor" href="#compose-编译器迁移指南" aria-label="Permalink to &quot;Compose 编译器迁移指南&quot;">​</a></h1><p>Compose 编译器由一个 Gradle 插件补充，该插件简化了设置并提供了更便捷的编译器选项访问。 当与 Android Gradle 插件 (AGP) 一起应用时，此 Compose 编译器插件将覆盖 AGP 自动提供的 Compose 编译器坐标。</p><p>自 Kotlin 2.0.0 起，Compose 编译器已合并到 Kotlin 版本库中。 这有助于顺利将您的项目迁移到 Kotlin 2.0.0 及更高版本，因为 Compose 编译器会与 Kotlin 同步发布，并且始终与相同版本的 Kotlin 兼容。</p><p>要在您的项目中使用新的 Compose 编译器插件，请为每个使用 Compose 的模块应用它。 关于如何<a href="#migrating-a-jetpack-compose-project">迁移 Jetpack Compose 项目</a>的详细信息，请继续阅读。对于 Compose Multiplatform 项目，请参考<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-compiler.html#migrating-a-compose-multiplatform-project" target="_blank" rel="noreferrer">多平台迁移指南</a>。</p><h2 id="迁移-jetpack-compose-项目" tabindex="-1">迁移 Jetpack Compose 项目 <a class="header-anchor" href="#迁移-jetpack-compose-项目" aria-label="Permalink to &quot;迁移 Jetpack Compose 项目&quot;">​</a></h2><p>从 Kotlin 1.9 迁移到 2.0.0 或更高版本时，您应该根据处理 Compose 编译器的方式调整项目配置。我们建议使用 Kotlin Gradle 插件和 Compose 编译器 Gradle 插件来自动化配置管理。</p><h3 id="使用-gradle-插件管理-compose-编译器" tabindex="-1">使用 Gradle 插件管理 Compose 编译器 <a class="header-anchor" href="#使用-gradle-插件管理-compose-编译器" aria-label="Permalink to &quot;使用 Gradle 插件管理 Compose 编译器&quot;">​</a></h3><p>对于 Android 模块：</p><ol><li>将 Compose 编译器 Gradle 插件添加到 <a href="https://docs.gradle.org/current/userguide/platforms.html#sub:conventional-dependencies-toml" target="_blank" rel="noreferrer">Gradle 版本目录</a>：</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[versions]</span></span>
<span class="line"><span># ...</span></span>
<span class="line"><span>kotlin = &quot;2.2.10&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[plugins]</span></span>
<span class="line"><span># ...</span></span>
<span class="line"><span>org-jetbrains-kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }</span></span>
<span class="line"><span>compose-compiler = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }</span></span></code></pre></div><ol start="2"><li>将 Gradle 插件添加到根 <code>build.gradle.kts</code> 文件：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.compose.compiler) apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li>将插件应用于每个使用 Jetpack Compose 的模块：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.compose.compiler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="4"><li><p>如果您正在使用 Jetpack Compose 编译器的编译器选项，请在 <code>composeCompiler {}</code> 代码块中设置它们。 请参见<a href="/kotlin/compose-compiler-options">编译器选项列表</a>。</p></li><li><p>如果您直接引用 Compose 编译器构件，可以移除这些引用，让 Gradle 插件来处理。</p></li></ol><h3 id="不使用-gradle-插件管理-compose-编译器" tabindex="-1">不使用 Gradle 插件管理 Compose 编译器 <a class="header-anchor" href="#不使用-gradle-插件管理-compose-编译器" aria-label="Permalink to &quot;不使用 Gradle 插件管理 Compose 编译器&quot;">​</a></h3><p>如果您不使用 Gradle 插件来管理 Compose 编译器，请更新项目中对旧 Maven 构件的任何直接引用：</p><ul><li>将 <code>androidx.compose.compiler:compiler</code> 更改为 <code>org.jetbrains.kotlin:kotlin-compose-compiler-plugin-embeddable</code></li><li>将 <code>androidx.compose.compiler:compiler-hosted</code> 更改为 <code>org.jetbrains.kotlin:kotlin-compose-compiler-plugin</code></li></ul><h2 id="后续步骤" tabindex="-1">后续步骤 <a class="header-anchor" href="#后续步骤" aria-label="Permalink to &quot;后续步骤&quot;">​</a></h2><ul><li>关于 Compose 编译器迁移到 Kotlin 版本库，请参见 <a href="https://android-developers.googleblog.com/2024/04/jetpack-compose-compiler-moving-to-kotlin-repository.html" target="_blank" rel="noreferrer">Google 的公告</a>。</li><li>如果您正在使用 Jetpack Compose 构建 Android 应用，请查阅<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-integrate-in-existing-app.html" target="_blank" rel="noreferrer">关于如何使其支持多平台的指南</a>。</li></ul>`,20)]))}const k=a(l,[["render",p]]);export{h as __pageData,k as default};
