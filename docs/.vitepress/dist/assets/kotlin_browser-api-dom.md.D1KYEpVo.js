import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"浏览器和 DOM API","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/browser-api-dom.md","filePath":"kotlin/browser-api-dom.md","lastUpdated":1754307826000}'),n={name:"kotlin/browser-api-dom.md"};function l(p,s,h,k,d,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="浏览器和-dom-api" tabindex="-1">浏览器和 DOM API <a class="header-anchor" href="#浏览器和-dom-api" aria-label="Permalink to &quot;浏览器和 DOM API&quot;">​</a></h1><p>Kotlin/JS 标准库允许您使用 <code>kotlinx.browser</code> 包访问浏览器特有的功能， 该包包括典型的顶层对象，例如 <code>document</code> 和 <code>window</code>。标准库尽可能地为这些对象所暴露的功能提供了类型安全包装器。作为备用方案，<code>dynamic</code> 类型用于提供与无法很好地映射到 Kotlin 类型系统的函数进行交互。</p><h2 id="与-dom-交互" tabindex="-1">与 DOM 交互 <a class="header-anchor" href="#与-dom-交互" aria-label="Permalink to &quot;与 DOM 交互&quot;">​</a></h2><p>为了与文档对象模型 (DOM) 交互，您可以使用 <code>document</code> 变量。例如，您可以通过此对象设置我们网站的背景颜色：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.bgColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;FFAA12&quot;</span></span></code></pre></div><p><code>document</code> 对象还为您提供了一种通过 ID、名称、类名、标签名等检索特定元素的方法。 所有返回的元素都属于 <code>Element?</code> 类型。要访问它们的属性，您需要将它们转换为其相应的类型。 例如，假设您有一个带电子邮件 <code>&lt;input&gt;</code> 字段的 HTML 页面：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/javascript&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tutorial.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>请注意，您的脚本包含在 <code>body</code> 标签的底部。这确保了 DOM 在脚本加载之前完全可用。</p><p>通过此设置，您可以访问 DOM 的元素。要访问 <code>input</code> 字段的属性，请调用 <code>getElementById</code> 并将其转换为 <code>HTMLInputElement</code>。然后，您可以安全地访问其属性，例如 <code>value</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HTMLInputElement</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">email.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hadi@jetbrains.com&quot;</span></span></code></pre></div><p>就像您引用这个 <code>input</code> 元素一样，您可以访问页面上的其他元素，并将它们转换为适当的类型。</p><p>要了解如何以简洁的方式在 DOM 中创建和构建元素，请查阅 <a href="/kotlin/typesafe-html-dsl">类型安全 HTML DSL</a>。</p>`,12)]))}const c=i(n,[["render",l]]);export{r as __pageData,c as default};
