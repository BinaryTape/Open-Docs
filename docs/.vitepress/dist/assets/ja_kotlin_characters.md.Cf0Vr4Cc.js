import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"文字","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/characters.md","filePath":"ja/kotlin/characters.md","lastUpdated":1754307826000}'),e={name:"ja/kotlin/characters.md"};function l(p,s,h,k,c,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="文字" tabindex="-1">文字 <a class="header-anchor" href="#文字" aria-label="Permalink to &quot;文字&quot;">​</a></h1><p>文字は<code>Char</code>型で表現されます。 文字リテラルはシングルクォートで囲まれます: <code>&#39;1&#39;</code>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JVMでは、<code>char</code>プリミティブ型として保存される文字は、16ビットのUnicode文字を表します。</p></div><p>特殊文字はエスケープバックラッシュ<code>\\</code>で始まります。 以下のエスケープシーケンスがサポートされています:</p><ul><li><code>\\t</code> – タブ</li><li><code>\\b</code> – バックスペース</li><li><code></code> – 改行 (LF)</li><li><code>\\r</code> – キャリッジリターン (CR)</li><li><code>\\&#39;</code> – シングルクォーテーション</li><li><code>\\&quot;</code> – ダブルクォーテーション</li><li><code>\\\\</code> – バックスラッシュ</li><li><code>\\$</code> – ドル記号</li></ul><p>他の任意の文字をエンコードするには、Unicodeエスケープシーケンス構文: <code>&#39;\\uFF00&#39;</code>を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aChar: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aChar)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints an extra newline character</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">FF00&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>文字変数の値が数字である場合、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/digit-to-int.html" target="_blank" rel="noreferrer"><code>digitToInt()</code></a>関数を使用して、明示的に<code>Int</code>数値に変換できます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JVMでは、<a href="/ja/kotlin/numbers#boxing-and-caching-numbers-on-the-java-virtual-machine">数値</a>の場合と同様に、null許容参照が必要な場合に文字はJavaクラスにボックス化されます。 ボックス化操作によって同一性は保持されません。</p></div>`,9)]))}const E=i(e,[["render",l]]);export{r as __pageData,E as default};
