import{_ as c,C as s,c as o,o as k,G as a,ag as d,w as t,j as e,a as n}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/client-caching.md","filePath":"ktor/client-caching.md","lastUpdated":1755457140000}'),g={name:"ktor/client-caching.md"};function E(u,i,y,F,m,C){const l=s("TopicTitle"),p=s("primary-label"),h=s("tldr"),r=s("link-summary");return k(),o("div",null,[a(l,{labelRef:"client-plugin",title:"缓存"}),a(p,{ref:"client-plugin"},null,512),a(h,null,{default:t(()=>i[0]||(i[0]=[e("p",null,[e("b",null,"代码示例"),n(": "),e("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-caching"}," client-caching ")],-1)])),_:1}),a(r,null,{default:t(()=>i[1]||(i[1]=[n(" HttpCache 插件允许您将之前获取的资源保存到内存中或持久化缓存中。 ")])),_:1}),i[2]||(i[2]=d(`<p>Ktor 客户端提供了 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.cache/-http-cache/index.html" target="_blank" rel="noreferrer">HttpCache</a> 插件，允许您将之前获取的资源保存到内存中或持久化缓存中。</p><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>HttpCache</code> 仅需要 <code>[ktor-client-core](client-dependencies.md)</code> artifact，不需要任何特定的依赖项。</p><h2 id="memory_cache" tabindex="-1">内存缓存 <a class="header-anchor" href="#memory_cache" aria-label="Permalink to &quot;内存缓存 {id=&quot;memory_cache&quot;}&quot;">​</a></h2><p>要安装 <code>HttpCache</code>，请将其传递给 <a href="./client-create-and-configure#configure-client">客户端配置代码块</a> 中的 <code>install</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.cache.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpCache)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这足以使客户端能够将之前获取的资源保存到内存缓存中。例如，如果您对一个带有已配置 <code>Cache-Control</code> 头部信息的资源发出两个连续的 <a href="./client-requests">请求</a>，客户端将仅执行第一个请求并跳过第二个请求，因为数据已保存在缓存中。</p><h2 id="persistent_cache" tabindex="-1">持久化缓存 <a class="header-anchor" href="#persistent_cache" aria-label="Permalink to &quot;持久化缓存 {id=&quot;persistent_cache&quot;}&quot;">​</a></h2><p>Ktor 允许您通过实现 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.cache.storage/-cache-storage/index.html" target="_blank" rel="noreferrer">CacheStorage</a> 接口来创建一个持久化缓存。在 JVM 上，您可以通过调用 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.cache.storage/-file-storage.html" target="_blank" rel="noreferrer">FileStorage</a> 函数来创建一个文件存储。</p><p>要创建一个文件缓存存储，请将 <code>File</code> 实例传递给 <code>FileStorage</code> 函数。然后，根据该存储是作为共享缓存还是私有缓存使用，将其传递给 <code>publicStorage</code> 或 <code>privateStorage</code> 函数。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpCache) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cacheFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDirectories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Paths.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build/cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        publicStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FileStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cacheFile))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>您可以在这里找到完整示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-caching" target="_blank" rel="noreferrer">client-caching</a>。</p></blockquote>`,12))])}const f=c(g,[["render",E]]);export{b as __pageData,f as default};
