import{_ as o,a as d,b as E}from"./chunks/wasm-1-9-0-size-improvements.B8FiXYUf.js";import{_ as c,C as t,c as g,o as y,ag as n,G as l,j as i,w as e,a}from"./chunks/framework.Bksy39di.js";const K=JSON.parse('{"title":"Kotlin 1.9.0の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew19.md","filePath":"ja/kotlin/whatsnew19.md","lastUpdated":1754307826000}'),u={name:"ja/kotlin/whatsnew19.md"};function F(m,s,b,C,v,f){const p=t("YouTubeVideo"),k=t("anchor"),h=t("tab"),r=t("tabs");return y(),g("div",null,[s[2]||(s[2]=n('<h1 id="kotlin-1-9-0の新機能" tabindex="-1">Kotlin 1.9.0の新機能 <a class="header-anchor" href="#kotlin-1-9-0の新機能" aria-label="Permalink to &quot;Kotlin 1.9.0の新機能&quot;">​</a></h1><p><em><a href="/ja/kotlin/releases#release-details">リリース日: 2023年7月6日</a></em></p><p>Kotlin 1.9.0がリリースされ、JVM向けK2コンパイラが<strong>ベータ版</strong>になりました。その他、主なハイライトは以下のとおりです。</p><ul><li><a href="#new-kotlin-k2-compiler-updates">Kotlin K2コンパイラの新しい更新</a></li><li><a href="#stable-replacement-of-the-enum-class-values-function">enumクラスの<code>values</code>関数の安定版の代替機能</a></li><li><a href="#stable-operator-for-open-ended-ranges">オープンエンドレンジの安定版<code>..&lt;</code>演算子</a></li><li><a href="#new-common-function-to-get-regex-capture-group-by-name">正規表現キャプチャグループを名前で取得する新しい共通関数</a></li><li><a href="#new-path-utility-to-create-parent-directories">親ディレクトリを作成する新しいパスユーティリティ</a></li><li><a href="#preview-of-the-gradle-configuration-cache">Kotlin MultiplatformにおけるGradle構成キャッシュのプレビュー</a></li><li><a href="#changes-to-android-target-support">Kotlin MultiplatformにおけるAndroidターゲットサポートの変更</a></li><li><a href="#preview-of-custom-memory-allocator">Kotlin/Nativeにおけるカスタムメモリ割り当て機能のプレビュー</a></li><li><a href="#library-linkage-in-kotlin-native">Kotlin/Nativeにおけるライブラリのリンク</a></li><li><a href="#size-related-optimizations">Kotlin/Wasmにおけるサイズ関連の最適化</a></li></ul><p>これらの更新の簡単な概要を以下のビデオでご覧いただけます。</p>',5)),l(p,{src:"https://www.youtube.com/v/fvwTZc-dxsM",title:"What's new in Kotlin 1.9.0"}),s[3]||(s[3]=n(`<h2 id="ideサポート" tabindex="-1">IDEサポート <a class="header-anchor" href="#ideサポート" aria-label="Permalink to &quot;IDEサポート&quot;">​</a></h2><p>1.9.0をサポートするKotlinプラグインは、以下のIDEで利用可能です。</p><table tabindex="0"><thead><tr><th>IDE</th><th>サポートバージョン</th></tr></thead><tbody><tr><td>IntelliJ IDEA</td><td>2022.3.x, 2023.1.x</td></tr><tr><td>Android Studio</td><td>Giraffe (223), Hedgehog (231)*</td></tr></tbody></table><p>*Kotlin 1.9.0プラグインは、Android Studio Giraffe (223) および Hedgehog (231) の今後のリリースに含まれます。</p><p>Kotlin 1.9.0プラグインは、今後のIntelliJ IDEA 2023.2のリリースに含まれます。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlinのアーティファクトと依存関係をダウンロードするには、<a href="#configure-gradle-settings">Gradle設定を構成して</a>Maven Central Repositoryを使用してください。</p></div><h2 id="kotlin-k2コンパイラの新しい更新" tabindex="-1">Kotlin K2コンパイラの新しい更新 <a class="header-anchor" href="#kotlin-k2コンパイラの新しい更新" aria-label="Permalink to &quot;Kotlin K2コンパイラの新しい更新&quot;">​</a></h2><p>JetBrainsのKotlinチームはK2コンパイラの安定化を続けており、1.9.0リリースではさらなる進歩が導入されました。 JVM向けK2コンパイラは現在<strong>ベータ版</strong>です。</p><p>Kotlin/Nativeおよびマルチプラットフォームプロジェクトの基本的なサポートも追加されました。</p><h3 id="kaptコンパイラプラグインとk2コンパイラの互換性" tabindex="-1">kaptコンパイラプラグインとK2コンパイラの互換性 <a class="header-anchor" href="#kaptコンパイラプラグインとk2コンパイラの互換性" aria-label="Permalink to &quot;kaptコンパイラプラグインとK2コンパイラの互換性&quot;">​</a></h3><p><a href="/ja/kotlin/kapt">kaptプラグイン</a>はK2コンパイラとともにプロジェクトで使用できますが、いくつかの制限があります。 <code>languageVersion</code>を<code>2.0</code>に設定しても、kaptコンパイラプラグインは引き続き古いコンパイラを利用します。</p><p><code>languageVersion</code>が<code>2.0</code>に設定されているプロジェクトでkaptコンパイラプラグインを実行すると、kaptは自動的に<code>1.9</code>に切り替わり、特定のバージョン互換性チェックを無効にします。この動作は、以下のコマンド引数を含めることと同じです。</p><ul><li><code>-Xskip-metadata-version-check</code></li><li><code>-Xskip-prerelease-check</code></li><li><code>-Xallow-unstable-dependencies</code></li></ul><p>これらのチェックはkaptタスクに対してのみ無効化されます。他のすべてのコンパイルタスクは引き続き新しいK2コンパイラを利用します。</p><p>K2コンパイラでkaptを使用する際に問題が発生した場合は、<a href="http://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>に報告してください。</p><h3 id="プロジェクトでk2コンパイラを試す" tabindex="-1">プロジェクトでK2コンパイラを試す <a class="header-anchor" href="#プロジェクトでk2コンパイラを試す" aria-label="Permalink to &quot;プロジェクトでK2コンパイラを試す&quot;">​</a></h3><p>1.9.0以降、Kotlin 2.0のリリースまでは、<code>gradle.properties</code>ファイルに<code>kotlin.experimental.tryK2=true</code> Gradleプロパティを追加することで、簡単にK2コンパイラをテストできます。以下のコマンドを実行することもできます。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assemble</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Pkotlin.experimental.tryK2=true</span></span></code></pre></div><p>このGradleプロパティは、言語バージョンを自動的に2.0に設定し、ビルドレポートをK2コンパイラを使用してコンパイルされたKotlinタスクの数と現在のコンパイラを使用してコンパイルされたタスクの数で更新します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>##### &#39;kotlin.experimental.tryK2&#39; results (Kotlin/Native not checked) #####</span></span>
<span class="line"><span>:lib:compileKotlin: 2.0 language version</span></span>
<span class="line"><span>:app:compileKotlin: 2.0 language version</span></span>
<span class="line"><span>##### 100% (2/2) tasks have been compiled with Kotlin 2.0 #####</span></span></code></pre></div><h3 id="gradleビルドレポート" tabindex="-1">Gradleビルドレポート <a class="header-anchor" href="#gradleビルドレポート" aria-label="Permalink to &quot;Gradleビルドレポート&quot;">​</a></h3><p><a href="/ja/kotlin/gradle-compilation-and-caches#build-reports">Gradleビルドレポート</a>は、コードのコンパイルに現在のコンパイラまたはK2コンパイラが使用されたかどうかを示すようになりました。Kotlin 1.9.0では、この情報を<a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">Gradleビルドスキャン</a>で確認できます。</p><p><img src="`+o+'" alt="Gradle build scan - K1" width="700"></p><p><img src="'+d+`" alt="Gradle build scan - K2" width="700"></p><p>プロジェクトで使用されているKotlinのバージョンは、ビルドレポートで直接確認することもできます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Task info:</span></span>
<span class="line"><span>  Kotlin language version: 1.9</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Gradle 8.0を使用している場合、特にGradle構成キャッシュが有効になっていると、ビルドレポートで問題が発生する可能性があります。これは既知の問題であり、Gradle 8.1以降で修正されています。</p></div><h3 id="現在のk2コンパイラの制限" tabindex="-1">現在のK2コンパイラの制限 <a class="header-anchor" href="#現在のk2コンパイラの制限" aria-label="Permalink to &quot;現在のK2コンパイラの制限&quot;">​</a></h3><p>GradleプロジェクトでK2を有効にすると、特定の制限が伴います。これらの制限は、Gradleバージョン8.3より前のプロジェクトで、以下のケースに影響を与える可能性があります。</p><ul><li><code>buildSrc</code>からのソースコードのコンパイル。</li><li>インクルードされたビルド内のGradleプラグインのコンパイル。</li><li>Gradleバージョン8.3より前のプロジェクトで使用されている他のGradleプラグインのコンパイル。</li><li>Gradleプラグインの依存関係のビルド。</li></ul><p>上記の問題に遭遇した場合は、以下の手順で対処できます。</p><ul><li><code>buildSrc</code>、任意のGradleプラグイン、およびその依存関係の言語バージョンを設定します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        apiVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>プロジェクトのGradleバージョンを8.3（利用可能になり次第）に更新します。</li></ul><h3 id="新しいk2コンパイラに関するフィードバック" tabindex="-1">新しいK2コンパイラに関するフィードバック <a class="header-anchor" href="#新しいk2コンパイラに関するフィードバック" aria-label="Permalink to &quot;新しいK2コンパイラに関するフィードバック&quot;">​</a></h3><p>皆様からのフィードバックをお待ちしております！</p><ul><li>K2開発者に直接フィードバックを提供するには、KotlinのSlackで<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">招待を受け取り</a>、<a href="https://kotlinlang.slack.com/archives/C03PK0PE257" target="_blank" rel="noreferrer">#k2-early-adopters</a>チャンネルに参加してください。</li><li>新しいK2コンパイラで直面した問題は、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>に報告してください。</li><li><a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer"><strong>利用状況統計の送信</strong>オプションを有効にして</a>、JetBrainsがK2の利用に関する匿名データを収集できるようにしてください。</li></ul><h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><p>Kotlin 1.9.0では、以前に導入されたいくつかの新言語機能を安定化しています。</p><ul><li><a href="#stable-replacement-of-the-enum-class-values-function">enumクラスの<code>values</code>関数の代替機能</a></li><li><a href="#stable-data-objects-for-symmetry-with-data-classes">データクラスとの対称性のためのデータオブジェクト</a></li><li><a href="#support-for-secondary-constructors-with-bodies-in-inline-value-classes">インライン値クラスにおける本体を持つセカンダリコンストラクタのサポート</a></li></ul><h3 id="enumクラスのvalues関数の安定版の代替機能" tabindex="-1">enumクラスの<code>values</code>関数の安定版の代替機能 <a class="header-anchor" href="#enumクラスのvalues関数の安定版の代替機能" aria-label="Permalink to &quot;enumクラスの\`values\`関数の安定版の代替機能&quot;">​</a></h3><p>1.8.20で、enumクラスの<code>entries</code>プロパティが実験的機能として導入されました。<code>entries</code>プロパティは、合成関数<code>values()</code>の現代的でパフォーマンスの高い代替機能です。1.9.0では、<code>entries</code>プロパティは安定版になりました。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>values()</code>関数は引き続きサポートされますが、代わりに<code>entries</code>プロパティを使用することをお勧めします。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    RED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF0000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ORANGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Orange&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF7F00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    YELLOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Yellow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FFFF00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findByRgb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Color.entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.rgb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb }</span></span></code></pre></div><p>enumクラスの<code>entries</code>プロパティの詳細については、「<a href="/ja/kotlin/whatsnew1820#a-modern-and-performant-replacement-of-the-enum-class-values-function">Kotlin 1.8.20の新機能</a>」を参照してください。</p><h3 id="データクラスとの対称性のためのデータオブジェクトの安定化" tabindex="-1">データクラスとの対称性のためのデータオブジェクトの安定化 <a class="header-anchor" href="#データクラスとの対称性のためのデータオブジェクトの安定化" aria-label="Permalink to &quot;データクラスとの対称性のためのデータオブジェクトの安定化&quot;">​</a></h3><p><a href="/ja/kotlin/whatsnew1820#preview-of-data-objects-for-symmetry-with-data-classes">Kotlin 1.8.20</a>で導入されたデータオブジェクト宣言が安定版になりました。これには、データクラスとの対称性のために追加された関数である<code>toString()</code>、<code>equals()</code>、<code>hashCode()</code>も含まれます。</p><p>この機能は、<code>sealed</code>階層（<code>sealed class</code>や<code>sealed interface</code>階層など）で特に有用です。なぜなら、<code>data object</code>宣言は<code>data class</code>宣言と組み合わせて便利に使用できるためです。この例では、<code>EndOfFile</code>を通常の<code>object</code>ではなく<code>data object</code>として宣言することで、手動でオーバーライドする必要なく自動的に<code>toString()</code>関数を持つことができます。これにより、付随するデータクラス定義との対称性が維持されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EndOfFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number(number=7)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EndOfFile) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EndOfFile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>詳細については、「<a href="/ja/kotlin/whatsnew1820#preview-of-data-objects-for-symmetry-with-data-classes">Kotlin 1.8.20の新機能</a>」を参照してください。</p><h3 id="インライン値クラスにおける本体を持つセカンダリコンストラクタのサポート" tabindex="-1">インライン値クラスにおける本体を持つセカンダリコンストラクタのサポート <a class="header-anchor" href="#インライン値クラスにおける本体を持つセカンダリコンストラクタのサポート" aria-label="Permalink to &quot;インライン値クラスにおける本体を持つセカンダリコンストラクタのサポート&quot;">​</a></h3><p>Kotlin 1.9.0以降、<a href="/ja/kotlin/inline-classes">インライン値クラス</a>での本体を持つセカンダリコンストラクタの使用がデフォルトで利用可能になりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fullName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Allowed since Kotlin 1.4.30:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fullName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Full name shouldn&#39;t be empty&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Allowed by default since Kotlin 1.9.0:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $lastName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lastName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Last name shouldn&#39;t be empty&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以前は、Kotlinはインラインクラスでパブリックなプライマリコンストラクタのみを許可していました。その結果、基になる値をカプセル化したり、制約のある値を表現するインラインクラスを作成したりすることができませんでした。</p><p>Kotlinの発展に伴い、これらの問題は修正されました。Kotlin 1.4.30では<code>init</code>ブロックの制限が解除され、その後Kotlin 1.8.20では本体を持つセカンダリコンストラクタのプレビューが導入されました。これらは現在デフォルトで利用可能です。Kotlinインラインクラスの発展については、<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/inline-classes.md" target="_blank" rel="noreferrer">このKEEP</a>で詳細を確認してください。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>バージョン1.9.0以降、コンパイラはJVM 20に対応するバイトコードバージョンでクラスを生成できます。さらに、<code>JvmDefault</code>アノテーションと従来の<code>-Xjvm-default</code>モードの非推奨化が継続されます。</p><h3 id="jvmdefaultアノテーションと従来の-xjvm-defaultモードの非推奨化" tabindex="-1">JvmDefaultアノテーションと従来の-Xjvm-defaultモードの非推奨化 <a class="header-anchor" href="#jvmdefaultアノテーションと従来の-xjvm-defaultモードの非推奨化" aria-label="Permalink to &quot;JvmDefaultアノテーションと従来の-Xjvm-defaultモードの非推奨化&quot;">​</a></h3><p>Kotlin 1.5以降、<code>JvmDefault</code>アノテーションの使用は、新しい<code>-Xjvm-default</code>モードである<code>all</code>および<code>all-compatibility</code>に置き換えられ、非推奨となりました。Kotlin 1.4で<code>JvmDefaultWithoutCompatibility</code>、Kotlin 1.6で<code>JvmDefaultWithCompatibility</code>が導入されたことで、これらのモードは<code>DefaultImpls</code>クラスの生成を包括的に制御し、古いKotlinコードとのシームレスな互換性を確保します。</p><p>その結果、Kotlin 1.9.0では、<code>JvmDefault</code>アノテーションはもはや意味を持たず、非推奨としてマークされ、エラーになります。最終的にはKotlinから削除されます。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>このリリースでは、その他の改善に加えて、<a href="/ja/kotlin/native-memory-manager">Kotlin/Nativeメモリマネージャー</a>のさらなる進歩がもたらされ、その堅牢性とパフォーマンスが向上するはずです。</p><ul><li><a href="#preview-of-custom-memory-allocator">カスタムメモリ割り当て機能のプレビュー</a></li><li><a href="#objective-c-or-swift-object-deallocation-hook-on-the-main-thread">メインスレッドでのObjective-CまたはSwiftオブジェクトのデアロケーションフック</a></li><li><a href="#no-object-initialization-when-accessing-constant-values-in-kotlin-native">Kotlin/Nativeでの定数値アクセス時のオブジェクト初期化なし</a></li><li><a href="#ability-to-configure-standalone-mode-for-ios-simulator-tests-in-kotlin-native">iOSシミュレータテストのスタンドアローンモード設定機能</a></li><li><a href="#library-linkage-in-kotlin-native">Kotlin/Nativeにおけるライブラリのリンク</a></li></ul><h3 id="カスタムメモリ割り当て機能のプレビュー" tabindex="-1">カスタムメモリ割り当て機能のプレビュー <a class="header-anchor" href="#カスタムメモリ割り当て機能のプレビュー" aria-label="Permalink to &quot;カスタムメモリ割り当て機能のプレビュー&quot;">​</a></h3><p>Kotlin 1.9.0では、カスタムメモリ割り当て機能のプレビューが導入されました。その割り当てシステムは、<a href="/ja/kotlin/native-memory-manager">Kotlin/Nativeメモリマネージャー</a>のランタイムパフォーマンスを向上させます。</p><p>Kotlin/Nativeの現在のオブジェクト割り当てシステムは、効率的なガベージコレクションの機能を持たない汎用アロケーターを使用しています。これを補うために、ガベージコレクター (GC) がそれらを単一のリストにマージする前に、すべての割り当て済みオブジェクトのスレッドローカルな連結リストを維持し、スイープ中に反復することができます。このアプローチには、いくつかのパフォーマンス上の欠点があります。</p><ul><li>スイープ順序にはメモリ局所性がなく、しばしば散発的なメモリアクセスパターンを引き起こし、潜在的なパフォーマンス問題につながります。</li><li>連結リストは各オブジェクトに追加のメモリを必要とし、特に多くの小さなオブジェクトを扱う場合にメモリ使用量が増加します。</li><li>割り当て済みオブジェクトの単一リストでは、スイープの並列化が困難であり、ミューテーターのスレッドがGCスレッドよりも速くオブジェクトを割り当てる場合にメモリ使用量の問題を引き起こす可能性があります。</li></ul><p>これらの問題を解決するために、Kotlin 1.9.0ではカスタムアロケーターのプレビューが導入されました。これはシステムメモリをページに分割し、連続した順序で独立したスイープを可能にします。各割り当てはページ内のメモリブロックとなり、ページはブロックサイズを追跡します。異なるページタイプは、さまざまな割り当てサイズに最適化されています。メモリブロックの連続した配置により、すべての割り当て済みブロックを効率的に反復できます。</p><p>スレッドがメモリを割り当てる際、割り当てサイズに基づいて適切なページを検索します。スレッドは、異なるサイズのカテゴリに対応するページのセットを維持します。通常、特定のサイズの現在のページは割り当てを収容できます。そうでない場合、スレッドは共有割り当てスペースから別のページを要求します。このページはすでに利用可能であるか、スイープが必要であるか、または最初に作成する必要があります。</p><p>新しいアロケーターでは、複数の独立した割り当て空間を同時に持つことができ、Kotlinチームはさまざまなページレイアウトを試してパフォーマンスをさらに向上させることができます。</p><p>新しいアロケーターの設計に関する詳細については、この<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/inline-classes.md" target="_blank" rel="noreferrer">README</a>を参照してください。</p><h4 id="有効化方法" tabindex="-1">有効化方法 <a class="header-anchor" href="#有効化方法" aria-label="Permalink to &quot;有効化方法&quot;">​</a></h4><p><code>-Xallocator=custom</code>コンパイラオプションを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compilerOptions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xallocator=custom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="フィードバックの提供" tabindex="-1">フィードバックの提供 <a class="header-anchor" href="#フィードバックの提供" aria-label="Permalink to &quot;フィードバックの提供&quot;">​</a></h4><p>カスタムアロケーターを改善するために、<a href="https://youtrack.jetbrains.com/issue/KT-55364/Implement-custom-allocator-for-Kotlin-Native" target="_blank" rel="noreferrer">YouTrack</a>でフィードバックをお寄せください。</p><h3 id="メインスレッドでのobjective-cまたはswiftオブジェクトのデアロケーションフック" tabindex="-1">メインスレッドでのObjective-CまたはSwiftオブジェクトのデアロケーションフック <a class="header-anchor" href="#メインスレッドでのobjective-cまたはswiftオブジェクトのデアロケーションフック" aria-label="Permalink to &quot;メインスレッドでのObjective-CまたはSwiftオブジェクトのデアロケーションフック&quot;">​</a></h3><p>Kotlin 1.9.0以降、Objective-CまたはSwiftオブジェクトがメインスレッドにKotlinに渡された場合、そのデアロケーションフックはメインスレッドで呼び出されます。<a href="/ja/kotlin/native-memory-manager">Kotlin/Nativeメモリマネージャー</a>が以前Objective-Cオブジェクトへの参照を処理する方法は、メモリリークにつながる可能性がありました。この新しい動作により、メモリマネージャーの堅牢性が向上すると考えられます。</p><p>Objective-CオブジェクトがKotlinコード内で参照されている場合、例えば引数として渡されたり、関数から返されたり、コレクションから取得されたりする場合を考えます。この場合、KotlinはObjective-Cオブジェクトへの参照を保持する独自のオブジェクトを作成します。Kotlinオブジェクトがデアロケートされると、Kotlin/Nativeランタイムは<code>objc_release</code>関数を呼び出し、Objective-C参照を解放します。</p><p>以前は、Kotlin/Nativeメモリマネージャーは<code>objc_release</code>を特殊なGCスレッドで実行していました。最後のオブジェクト参照の場合、オブジェクトはデアロケートされます。Objective-Cオブジェクトが<code>dealloc</code>メソッド（Objective-C）や<code>deinit</code>ブロック（Swift）などのカスタムデアロケーションフックを持ち、これらのフックが特定の<code>thread</code>で呼び出されることを期待している場合に問題が発生する可能性がありました。</p><p>メインスレッド上のオブジェクトのフックは通常そこで呼び出されることを期待するため、Kotlin/Nativeランタイムは<code>objc_release</code>もメインスレッドで呼び出すようになりました。これは、Objective-CオブジェクトがメインスレッドでKotlinに渡され、そこでKotlinピアオブジェクトが作成されたケースをカバーするはずです。これは、通常のUIアプリケーションの場合のように、メインディスパッチキューが処理されている場合にのみ機能します。メインキューではない場合、またはオブジェクトがメイン以外のスレッドでKotlinに渡された場合、<code>objc_release</code>は以前と同様に特殊なGCスレッドで呼び出されます。</p><h4 id="オプトアウト方法" tabindex="-1">オプトアウト方法 <a class="header-anchor" href="#オプトアウト方法" aria-label="Permalink to &quot;オプトアウト方法&quot;">​</a></h4><p>問題が発生した場合は、<code>gradle.properties</code>ファイルで以下のオプションを使用してこの動作を無効にできます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.objcDisposeOnMain=false</span></span></code></pre></div><p>このようなケースは、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>に報告することをためらわないでください。</p><h3 id="kotlin-nativeでの定数値アクセス時のオブジェクト初期化なし" tabindex="-1">Kotlin/Nativeでの定数値アクセス時のオブジェクト初期化なし <a class="header-anchor" href="#kotlin-nativeでの定数値アクセス時のオブジェクト初期化なし" aria-label="Permalink to &quot;Kotlin/Nativeでの定数値アクセス時のオブジェクト初期化なし&quot;">​</a></h3><p>Kotlin 1.9.0以降、Kotlin/Nativeバックエンドは<code>const val</code>フィールドにアクセスする際にオブジェクトを初期化しません。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;side effect!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyObject.y) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No initialization at first</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyObject    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initialization occurs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この動作は現在Kotlin/JVMと統一されており、Javaと一貫した実装で、この場合はオブジェクトは決して初期化されません。この変更により、Kotlin/Nativeプロジェクトでパフォーマンスの向上が期待できます。</p><h3 id="iosシミュレータテストのスタンドアローンモード設定機能" tabindex="-1">iOSシミュレータテストのスタンドアローンモード設定機能 <a class="header-anchor" href="#iosシミュレータテストのスタンドアローンモード設定機能" aria-label="Permalink to &quot;iOSシミュレータテストのスタンドアローンモード設定機能&quot;">​</a></h3><p>デフォルトでは、Kotlin/NativeのiOSシミュレータテストを実行する際、手動でのシミュレータの起動とシャットダウンを避けるために<code>--standalone</code>フラグが使用されます。1.9.0では、このフラグがGradleタスクで<code>standalone</code>プロパティを通じて使用されるかどうかを設定できるようになりました。デフォルトでは<code>--standalone</code>フラグが使用されるため、スタンドアローンモードは有効になっています。</p><p><code>build.gradle.kts</code>ファイルでスタンドアローンモードを無効にする例を以下に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">native</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinNativeSimulatorTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    standalone.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>スタンドアローンモードを無効にする場合、シミュレータを手動で起動する必要があります。CLIからシミュレータを起動するには、以下のコマンドを使用します。 <code>shell /usr/bin/xcrun simctl boot &lt;DeviceId&gt; </code></p></div><h3 id="kotlin-nativeにおけるライブラリのリンク" tabindex="-1">Kotlin/Nativeにおけるライブラリのリンク <a class="header-anchor" href="#kotlin-nativeにおけるライブラリのリンク" aria-label="Permalink to &quot;Kotlin/Nativeにおけるライブラリのリンク&quot;">​</a></h3><p>Kotlin 1.9.0以降、Kotlin/NativeコンパイラはKotlinライブラリ内のリンケージの問題をKotlin/JVMと同様に扱います。これは、あるサードパーティのKotlinライブラリの作者が、別のサードパーティのKotlinライブラリが消費する実験的APIに互換性のない変更を加えた場合に、そのような問題に直面する可能性があります。</p><p>現在、サードパーティのKotlinライブラリ間のリンケージの問題がある場合でも、ビルドはコンパイル中に失敗しません。代わりに、JVMとまったく同じように、これらのエラーは実行時にのみ発生します。</p><p>Kotlin/Nativeコンパイラは、ライブラリのリンケージに関する問題を検出するたびに警告を報告します。これらの警告は、コンパイルログで確認できます。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>No function found for symbol &#39;org.samples/MyRemovedClass.doSomething|3657632771909858561[0]&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Can not get instance of singleton &#39;MyEnumClass.REMOVED_ENTRY&#39;: No enum entry found for symbol &#39;org.samples/MyEnumClass.REMOVED_ENTRY|null[0]&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Function &#39;getMyRemovedClass&#39; can not be called: Function uses unlinked class symbol &#39;org.samples/MyRemovedClass|null[0]&#39;</span></span></code></pre></div><p>これらの動作をプロジェクトでさらに設定したり、無効にしたりできます。</p><ul><li>コンパイルログにこれらの警告を表示したくない場合は、<code>-Xpartial-linkage-loglevel=INFO</code>コンパイラオプションで抑制します。</li><li>報告された警告の重大度を<code>-Xpartial-linkage-loglevel=ERROR</code>でコンパイルエラーに引き上げることも可能です。この場合、コンパイルは失敗し、すべてのエラーがコンパイルログに表示されます。このオプションを使用して、リンケージの問題をより詳細に調べます。</li><li>この機能で予期せぬ問題が発生した場合は、<code>-Xpartial-linkage=disable</code>コンパイラオプションでいつでもオプトアウトできます。このようなケースは、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>に報告することをためらわないでください。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// An example of passing compiler options via Gradle build file.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compilerOptions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // To suppress linkage warnings:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xpartial-linkage-loglevel=INFO&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // To raise linkage warnings to errors:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xpartial-linkage-loglevel=ERROR&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // To disable the feature completely:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xpartial-linkage=disable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="c-interopにおける暗黙的な整数変換のコンパイラオプション" tabindex="-1">C interopにおける暗黙的な整数変換のコンパイラオプション <a class="header-anchor" href="#c-interopにおける暗黙的な整数変換のコンパイラオプション" aria-label="Permalink to &quot;C interopにおける暗黙的な整数変換のコンパイラオプション&quot;">​</a></h3><p>C interopで暗黙的な整数変換を使用できるようにするコンパイラオプションが導入されました。慎重な検討の結果、この機能にはまだ改善の余地があり、最高品質のAPIを目指しているため、意図しない使用を防ぐためにこのコンパイラオプションが導入されました。</p><p>このコードサンプルでは、<code>options = 0</code>が許可されていますが、<a href="https://developer.apple.com/documentation/foundation/nscalendar/options" target="_blank" rel="noreferrer"><code>options</code></a>が符号なし型<code>UInt</code>で、<code>0</code>が符号ありであるにもかかわらず、暗黙的な整数変換が許可されています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> today </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NSDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tomorrow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NSCalendar.currentCalendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dateByAddingUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    unit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NSCalendarUnitDay,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    toDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> today,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>ネイティブインターロップライブラリで暗黙的な変換を使用するには、<code>-XXLanguage:+ImplicitSignedToUnsignedIntegerConversion</code>コンパイラオプションを使用します。</p><p>これはGradleの<code>build.gradle.kts</code>ファイルで設定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinNativeCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilerOptions.freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;-XXLanguage:+ImplicitSignedToUnsignedIntegerConversion&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>Kotlin Multiplatformは、開発者エクスペリエンスを向上させるために設計されたいくつかの注目すべきアップデートを1.9.0で受けました。</p><ul><li><a href="#changes-to-android-target-support">Androidターゲットサポートの変更</a></li><li><a href="#new-android-source-set-layout-enabled-by-default">新しいAndroidソースセットレイアウトがデフォルトで有効に</a></li><li><a href="#preview-of-the-gradle-configuration-cache">マルチプラットフォームプロジェクトにおけるGradle構成キャッシュのプレビュー</a></li></ul><h3 id="androidターゲットサポートの変更" tabindex="-1">Androidターゲットサポートの変更 <a class="header-anchor" href="#androidターゲットサポートの変更" aria-label="Permalink to &quot;Androidターゲットサポートの変更&quot;">​</a></h3><p>Kotlin Multiplatformの安定化に向けた取り組みを継続しています。重要な一歩は、Androidターゲットに対するファーストクラスのサポートを提供することです。将来的には、GoogleのAndroidチームがKotlin MultiplatformでAndroidをサポートするための独自のGradleプラグインを提供することを発表できることを嬉しく思います。</p><p>Googleからのこの新しいソリューションへの道を開くために、現在のKotlin DSLにおける<code>android</code>ブロックの名前を1.9.0で変更しています。ビルドスクリプト内の<code>android</code>ブロックのすべての出現箇所を<code>androidTarget</code>に変更してください。これはGoogleからの今後のDSLのために<code>android</code>という名前を解放するために必要な一時的な変更です。</p><p>Googleのプラグインは、マルチプラットフォームプロジェクトでAndroidを扱う際の推奨される方法となるでしょう。準備が整い次第、必要なマイグレーション手順を提供し、以前と同じように短い<code>android</code>名を使用できるようになります。</p><h3 id="新しいandroidソースセットレイアウトがデフォルトで有効に" tabindex="-1">新しいAndroidソースセットレイアウトがデフォルトで有効に <a class="header-anchor" href="#新しいandroidソースセットレイアウトがデフォルトで有効に" aria-label="Permalink to &quot;新しいAndroidソースセットレイアウトがデフォルトで有効に&quot;">​</a></h3><p>Kotlin 1.9.0以降、新しいAndroidソースセットレイアウトがデフォルトになりました。これは、以前の複数の点で混乱を招いていたディレクトリ命名スキームに代わるものです。新しいレイアウトにはいくつかの利点があります。</p><ul><li>簡素化されたタイプセマンティクス – 新しいAndroidソースレイアウトは、異なるタイプのソースセットを区別するのに役立つ、明確で一貫性のある命名規則を提供します。</li><li>改善されたソースディレクトリレイアウト – 新しいレイアウトにより、<code>SourceDirectories</code>の配置がより一貫性のあるものになり、コードの整理とソースファイルの特定が容易になります。</li><li>Gradle構成の明確な命名スキーム – スキーマは<code>KotlinSourceSets</code>と<code>AndroidSourceSets</code>の両方でより一貫性があり、予測可能になりました。</li></ul><p>新しいレイアウトには、Android Gradleプラグインバージョン7.0以降が必要であり、Android Studio 2022.3以降でサポートされています。<code>build.gradle(.kts)</code>ファイルに必要な変更を加えるには、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-android-layout.html" target="_blank" rel="noreferrer">マイグレーションガイド</a>を参照してください。</p><h3 id="gradle構成キャッシュのプレビュー" tabindex="-1">Gradle構成キャッシュのプレビュー <a class="header-anchor" href="#gradle構成キャッシュのプレビュー" aria-label="Permalink to &quot;Gradle構成キャッシュのプレビュー&quot;">​</a></h3>`,121)),l(k,{name:"preview-of-gradle-configuration-cache"}),s[4]||(s[4]=n('<p>Kotlin 1.9.0には、マルチプラットフォームライブラリにおける<a href="https://docs.gradle.org/current/userguide/configuration_cache.html" target="_blank" rel="noreferrer">Gradle構成キャッシュ</a>のサポートが含まれています。ライブラリの作成者であれば、すでにビルドパフォーマンスの向上から恩恵を受けることができます。</p><p>Gradle構成キャッシュは、設定フェーズの結果を後続のビルドで再利用することで、ビルドプロセスを高速化します。この機能はGradle 8.1以降で安定版となりました。有効にするには、<a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:usage" target="_blank" rel="noreferrer">Gradleドキュメント</a>の指示に従ってください。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin Multiplatformプラグインは、Xcode統合タスクや<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-dsl-reference.html" target="_blank" rel="noreferrer">Kotlin CocoaPods Gradleプラグイン</a>では、まだGradle構成キャッシュをサポートしていません。この機能は今後のKotlinリリースで追加される予定です。</p></div><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>Kotlinチームは、新しいKotlin/Wasmターゲットの実験を続けています。このリリースでは、いくつかのパフォーマンスと<a href="#size-related-optimizations">サイズ関連の最適化</a>に加え、<a href="#updates-in-javascript-interop">JavaScript interopの更新</a>が導入されています。</p><h3 id="サイズ関連の最適化" tabindex="-1">サイズ関連の最適化 <a class="header-anchor" href="#サイズ関連の最適化" aria-label="Permalink to &quot;サイズ関連の最適化&quot;">​</a></h3><p>Kotlin 1.9.0では、WebAssembly (Wasm) プロジェクト向けの重要なサイズ改善が導入されています。「Hello World」プロジェクトを比較すると、Kotlin 1.9.0におけるWasmのコードフットプリントは、Kotlin 1.8.20と比較して10分の1以下になりました。</p><p><img src="'+E+`" alt="Kotlin/Wasm size-related optimizations" width="700"></p><p>これらのサイズ最適化により、WasmプラットフォームをKotlinコードでターゲットとする際の、より効率的なリソース利用とパフォーマンスの向上が実現されます。</p><h3 id="javascript-interopの更新" tabindex="-1">JavaScript interopの更新 <a class="header-anchor" href="#javascript-interopの更新" aria-label="Permalink to &quot;JavaScript interopの更新&quot;">​</a></h3><p>このKotlinのアップデートでは、Kotlin/WasmにおけるKotlinとJavaScript間の相互運用性に変更が加えられています。Kotlin/Wasmは<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>機能であるため、その相互運用性には特定の制限が適用されます。</p><h4 id="dynamic型に対する制限" tabindex="-1">Dynamic型に対する制限 <a class="header-anchor" href="#dynamic型に対する制限" aria-label="Permalink to &quot;Dynamic型に対する制限&quot;">​</a></h4><p>バージョン1.9.0以降、Kotlin/Wasmでは<code>Dynamic</code>型の使用がサポートされなくなりました。これは、JavaScriptの相互運用性を容易にする新しい汎用<code>JsAny</code>型に置き換えられ、非推奨となりました。</p><p>詳細については、<a href="/ja/kotlin/wasm-js-interop">Kotlin/WasmとJavaScriptの相互運用性</a>のドキュメントを参照してください。</p><h4 id="非外部型に対する制限" tabindex="-1">非外部型に対する制限 <a class="header-anchor" href="#非外部型に対する制限" aria-label="Permalink to &quot;非外部型に対する制限&quot;">​</a></h4><p>Kotlin/Wasmは、値をJavaScriptに渡したりJavaScriptから受け取ったりする際に、特定のKotlin静的型の変換をサポートしています。これらのサポートされる型は以下のとおりです。</p><ul><li>符号付き数値、<code>Boolean</code>、<code>Char</code>などのプリミティブ型。</li><li><code>String</code>。</li><li>関数型。</li></ul><p>他の型は変換されずに不透明な参照として渡され、JavaScriptとKotlinのサブタイピング間で不整合が生じていました。</p><p>この問題に対処するため、KotlinはJavaScript interopを十分にサポートされている型のセットに制限します。Kotlin 1.9.0以降、Kotlin/Wasm JavaScript interopでは、外部型、プリミティブ型、文字列型、および関数型のみがサポートされます。さらに、JavaScript interopで使用できるKotlin/Wasmオブジェクトへのハンドルを表すための、<code>JsReference</code>という個別の明示的な型が導入されました。</p><p>詳細については、<a href="/ja/kotlin/wasm-js-interop">Kotlin/WasmとJavaScriptの相互運用性</a>のドキュメントを参照してください。</p><h3 id="kotlin-wasm-in-kotlin-playground" tabindex="-1">Kotlin/Wasm in Kotlin Playground <a class="header-anchor" href="#kotlin-wasm-in-kotlin-playground" aria-label="Permalink to &quot;Kotlin/Wasm in Kotlin Playground&quot;">​</a></h3><p>Kotlin PlaygroundはKotlin/Wasmターゲットをサポートしています。 Kotlin/WasmをターゲットとするKotlinコードを記述、実行、共有できます。<a href="https://pl.kotl.in/HDFAvimga" target="_blank" rel="noreferrer">ぜひお試しください！</a></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasmを使用するには、ブラウザで実験的機能を有効にする必要があります。 <a href="/ja/kotlin/wasm-troubleshooting">これらの機能を有効にする方法について詳しくはこちらをご覧ください</a>。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.measureTime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from Kotlin/Wasm!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    computeAck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">tailrec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m, n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> computeAck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> measureTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m, n)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ack(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) = \${res}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;duration: \${t.inWholeNanoseconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} ms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>このリリースでは、Kotlin/JSの更新が含まれており、古いKotlin/JSコンパイラの削除、Kotlin/JS Gradleプラグインの非推奨化、ES2015の実験的サポートなどがあります。</p><ul><li><a href="#removal-of-the-old-kotlin-js-compiler">古いKotlin/JSコンパイラの削除</a></li><li><a href="#deprecation-of-the-kotlin-js-gradle-plugin">Kotlin/JS Gradleプラグインの非推奨化</a></li><li><a href="#deprecation-of-external-enum">外部enumの非推奨化</a></li><li><a href="#experimental-support-for-es2015-classes-and-modules">ES2015クラスとモジュールの実験的サポート</a></li><li><a href="#changed-default-destination-of-js-production-distribution">JSプロダクション配布のデフォルトの保存先変更</a></li><li><a href="#extract-org-w3c-declarations-from-stdlib-js"><code>org.w3c</code>宣言の<code>stdlib-js</code>からの抽出</a></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>バージョン1.9.0以降、<a href="#library-linkage-in-kotlin-native">部分的なライブラリリンケージ</a>もKotlin/JSで有効になります。</p></div><h3 id="古いkotlin-jsコンパイラの削除" tabindex="-1">古いKotlin/JSコンパイラの削除 <a class="header-anchor" href="#古いkotlin-jsコンパイラの削除" aria-label="Permalink to &quot;古いKotlin/JSコンパイラの削除&quot;">​</a></h3><p>Kotlin 1.8.0では、IRベースのバックエンドが<a href="/ja/kotlin/components-stability">安定版</a>になったことを<a href="/ja/kotlin/whatsnew18#stable-js-ir-compiler-backend">発表しました</a>。 それ以来、コンパイラを指定しないことがエラーとなり、古いコンパイラを使用すると警告が表示されるようになりました。</p><p>Kotlin 1.9.0では、古いバックエンドを使用するとエラーになります。<a href="/ja/kotlin/js-ir-migration">マイグレーションガイド</a>に従ってIRコンパイラに移行してください。</p><h3 id="kotlin-js-gradleプラグインの非推奨化" tabindex="-1">Kotlin/JS Gradleプラグインの非推奨化 <a class="header-anchor" href="#kotlin-js-gradleプラグインの非推奨化" aria-label="Permalink to &quot;Kotlin/JS Gradleプラグインの非推奨化&quot;">​</a></h3><p>Kotlin 1.9.0以降、<code>kotlin-js</code> Gradleプラグインは非推奨になりました。 代わりに<code>js()</code>ターゲットを持つ<code>kotlin-multiplatform</code> Gradleプラグインを使用することを推奨します。</p><p>Kotlin/JS Gradleプラグインの機能は、実質的に<code>kotlin-multiplatform</code>プラグインと重複しており、内部で同じ実装を共有していました。この重複は混乱を生み出し、Kotlinチームのメンテナンス負荷を増加させていました。</p><p>マイグレーション手順については、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html#migration-from-kotlin-js-gradle-plugin-to-kotlin-multiplatform-gradle-plugin" target="_blank" rel="noreferrer">Kotlin Multiplatformの互換性ガイド</a>を参照してください。ガイドに記載されていない問題が見つかった場合は、<a href="http://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>に報告してください。</p><h3 id="外部enumの非推奨化" tabindex="-1">外部enumの非推奨化 <a class="header-anchor" href="#外部enumの非推奨化" aria-label="Permalink to &quot;外部enumの非推奨化&quot;">​</a></h3><p>Kotlin 1.9.0では、<code>entries</code>のような静的なenumメンバーがKotlinの外部に存在できないという問題のため、外部enumの使用は非推奨になります。代わりに、オブジェクトサブクラスを持つ外部シールドクラスの使用を推奨します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Before</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExternalEnum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { A, B }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// After</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExternalEnum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExternalEnum</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExternalEnum</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>外部enumからオブジェクトサブクラスを持つ外部シールドクラスに切り替えることで、外部enumと同様の機能を実現しつつ、デフォルトのメソッドに関連する問題を回避できます。</p><p>Kotlin 1.9.0以降、外部enumの使用は非推奨としてマークされます。互換性と将来のメンテナンスのために、提案された外部シールドクラスの実装を利用するようにコードを更新することを推奨します。</p><h3 id="es2015クラスとモジュールの実験的サポート" tabindex="-1">ES2015クラスとモジュールの実験的サポート <a class="header-anchor" href="#es2015クラスとモジュールの実験的サポート" aria-label="Permalink to &quot;ES2015クラスとモジュールの実験的サポート&quot;">​</a></h3><p>このリリースでは、ES2015モジュールとES2015クラスの生成に対する<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>サポートが導入されました。</p><ul><li>モジュールは、コードベースを簡素化し、保守性を向上させる方法を提供します。</li><li>クラスを使用すると、オブジェクト指向プログラミング (OOP) の原則を取り入れることができ、よりクリーンで直感的なコードになります。</li></ul><p>これらの機能を有効にするには、<code>build.gradle.kts</code>ファイルを次のように更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        useEsModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Enables ES2015 modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Enables ES2015 classes generation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinJsCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlinOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        useEsClasses </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://262.ecma-international.org/6.0/" target="_blank" rel="noreferrer">ES2015 (ECMAScript 2015, ES6) の詳細については、公式ドキュメントを参照してください</a>。</p><h3 id="jsプロダクション配布のデフォルトの保存先変更" tabindex="-1">JSプロダクション配布のデフォルトの保存先変更 <a class="header-anchor" href="#jsプロダクション配布のデフォルトの保存先変更" aria-label="Permalink to &quot;JSプロダクション配布のデフォルトの保存先変更&quot;">​</a></h3><p>Kotlin 1.9.0以前は、配布ターゲットディレクトリは<code>build/distributions</code>でした。しかし、これはGradleアーカイブの一般的なディレクトリでした。この問題を解決するため、Kotlin 1.9.0ではデフォルトの配布ターゲットディレクトリを<code>build/dist/&lt;targetName&gt;/&lt;binaryName&gt;</code>に変更しました。</p><p>例えば、<code>productionExecutable</code>は<code>build/distributions</code>にありました。Kotlin 1.9.0では、<code>build/dist/js/productionExecutable</code>にあります。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>これらのビルド結果を使用するパイプラインがある場合は、ディレクトリを更新するようにしてください。</p></div><h3 id="org-w3c宣言のstdlib-jsからの抽出" tabindex="-1"><code>org.w3c</code>宣言の<code>stdlib-js</code>からの抽出 <a class="header-anchor" href="#org-w3c宣言のstdlib-jsからの抽出" aria-label="Permalink to &quot;\`org.w3c\`宣言の\`stdlib-js\`からの抽出&quot;">​</a></h3><p>Kotlin 1.9.0以降、<code>stdlib-js</code>には<code>org.w3c</code>宣言が含まれなくなりました。代わりに、これらの宣言は別のGradle依存関係に移動されました。Kotlin Multiplatform Gradleプラグインを<code>build.gradle.kts</code>ファイルに追加すると、これらの宣言は標準ライブラリと同様にプロジェクトに自動的に含まれます。</p><p>手動での操作やマイグレーションは必要ありません。必要な調整は自動的に処理されます。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.9.0には、新しいGradleコンパイラオプションなど、多くの機能が追加されています。</p><ul><li><a href="#removed-classpath-property"><code>classpath</code>プロパティの削除</a></li><li><a href="#new-compiler-options">新しいGradleコンパイラオプション</a></li><li><a href="#project-level-compiler-options-for-kotlin-jvm">Kotlin/JVM向けのプロジェクトレベルコンパイラオプション</a></li><li><a href="#compiler-option-for-kotlin-native-module-name">Kotlin/Nativeモジュール名のコンパイラオプション</a></li><li><a href="#separate-compiler-plugins-for-official-kotlin-libraries">公式Kotlinライブラリのコンパイラプラグインの分離</a></li><li><a href="#incremented-minimum-supported-version">サポートされる最低バージョンの引き上げ</a></li><li><a href="#kapt-doesn-t-cause-eager-task-creation-in-gradle">kaptがGradleでの先行タスク作成を引き起こさないように</a></li><li><a href="#programmatic-configuration-of-the-jvm-target-validation-mode">JVMターゲット検証モードのプログラムによる設定</a></li></ul><h3 id="classpathプロパティの削除" tabindex="-1"><code>classpath</code>プロパティの削除 <a class="header-anchor" href="#classpathプロパティの削除" aria-label="Permalink to &quot;\`classpath\`プロパティの削除&quot;">​</a></h3><p>Kotlin 1.7.0で、<code>KotlinCompile</code>タスクのプロパティである<code>classpath</code>の非推奨化サイクルを開始することを発表しました。Kotlin 1.8.0では非推奨レベルが<code>ERROR</code>に引き上げられました。このリリースでは、ついに<code>classpath</code>プロパティを削除しました。すべてのコンパイルタスクは、コンパイルに必要なライブラリのリストに対して<code>libraries</code>入力を使用するべきです。</p><h3 id="新しいコンパイラオプション" tabindex="-1">新しいコンパイラオプション <a class="header-anchor" href="#新しいコンパイラオプション" aria-label="Permalink to &quot;新しいコンパイラオプション&quot;">​</a></h3><p>Kotlin Gradleプラグインは、オプトインとコンパイラのプログレッシブモードのための新しいプロパティを提供します。</p><ul><li>新しいAPIにオプトインするには、<code>optIn</code>プロパティを使用し、<code>optIn.set(listOf(a, b, c))</code>のように文字列のリストを渡すことができます。</li><li>プログレッシブモードを有効にするには、<code>progressiveMode.set(true)</code>を使用します。</li></ul><h3 id="kotlin-jvm向けのプロジェクトレベルコンパイラオプション" tabindex="-1">Kotlin/JVM向けのプロジェクトレベルコンパイラオプション <a class="header-anchor" href="#kotlin-jvm向けのプロジェクトレベルコンパイラオプション" aria-label="Permalink to &quot;Kotlin/JVM向けのプロジェクトレベルコンパイラオプション&quot;">​</a></h3><p>Kotlin 1.9.0以降、新しい<code>compilerOptions</code>ブロックが<code>kotlin</code>構成ブロック内で利用可能になりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JVM.Target_11)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これにより、コンパイラオプションの設定がはるかに簡単になります。ただし、いくつかの重要な詳細に注意することが重要です。</p><ul><li>この構成はプロジェクトレベルでのみ機能します。</li><li>Androidプラグインの場合、このブロックは以下と同じオブジェクトを構成します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlinOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>android.kotlinOptions</code>と<code>kotlin.compilerOptions</code>構成ブロックは互いに上書きし合います。ビルドファイル内で最後（最も低い）のブロックが常に有効になります。</li><li><code>moduleName</code>がプロジェクトレベルで構成されている場合、その値はコンパイラに渡される際に変更される可能性があります。これは<code>main</code>コンパイルには当てはまりませんが、他のタイプ、例えばテストソースの場合、Kotlin Gradleプラグインは<code>_test</code>サフィックスを追加します。</li><li><code>tasks.withType&lt;KotlinJvmCompile&gt;().configureEach {}</code>（または<code>tasks.named&lt;KotlinJvmCompile&gt;(&quot;compileKotlin&quot;) { }</code>）内の構成は、<code>kotlin.compilerOptions</code>と<code>android.kotlinOptions</code>の両方を上書きします。</li></ul><h3 id="kotlin-nativeモジュール名のコンパイラオプション" tabindex="-1">Kotlin/Nativeモジュール名のコンパイラオプション <a class="header-anchor" href="#kotlin-nativeモジュール名のコンパイラオプション" aria-label="Permalink to &quot;Kotlin/Nativeモジュール名のコンパイラオプション&quot;">​</a></h3><p>Kotlin/Nativeの<a href="/ja/kotlin/compiler-reference#module-name-name-native"><code>module-name</code></a>コンパイラオプションが、Kotlin Gradleプラグインで簡単に利用できるようになりました。</p><p>このオプションは、コンパイルモジュールの名前を指定し、Objective-Cにエクスポートされる宣言の名前プレフィックスを追加するためにも使用できます。</p><p>Gradleビルドファイルの<code>compilerOptions</code>ブロックで直接モジュール名を設定できるようになりました。</p>`,72)),l(r,{group:"build-script"},{default:e(()=>[l(h,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"named"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinNativeCompile"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"compileKotlinLinuxX64"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    compilerOptions"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        moduleName."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"my-module-name"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(h,{title:"Groovy","group-key":"groovy"},{default:e(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"named("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"compileKotlinLinuxX64"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinNativeCompile."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    compilerOptions {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        moduleName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "my-module-name"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[5]||(s[5]=n('<h3 id="公式kotlinライブラリのコンパイラプラグインの分離" tabindex="-1">公式Kotlinライブラリのコンパイラプラグインの分離 <a class="header-anchor" href="#公式kotlinライブラリのコンパイラプラグインの分離" aria-label="Permalink to &quot;公式Kotlinライブラリのコンパイラプラグインの分離&quot;">​</a></h3><p>Kotlin 1.9.0では、公式ライブラリ用に個別のコンパイラプラグインが導入されました。以前は、コンパイラプラグインは対応するGradleプラグインに組み込まれていました。これにより、コンパイラプラグインがGradleビルドのKotlinランタイムバージョンよりも高いKotlinバージョンに対してコンパイルされた場合、互換性の問題が発生する可能性がありました。</p><p>現在、コンパイラプラグインは個別の依存関係として追加されるため、古いGradleバージョンとの互換性の問題に直面することはなくなりました。新しいアプローチのもう一つの大きな利点は、新しいコンパイラプラグインを<a href="https://bazel.build/" target="_blank" rel="noreferrer">Bazel</a>などの他のビルドシステムでも使用できることです。</p><p>以下は、Maven Centralに公開されている新しいコンパイラプラグインのリストです。</p><ul><li>kotlin-atomicfu-compiler-plugin</li><li>kotlin-allopen-compiler-plugin</li><li>kotlin-lombok-compiler-plugin</li><li>kotlin-noarg-compiler-plugin</li><li>kotlin-sam-with-receiver-compiler-plugin</li><li>kotlinx-serialization-compiler-plugin</li></ul><p>すべてのプラグインには<code>-embeddable</code>版があります。例えば、<code>kotlin-allopen-compiler-plugin-embeddable</code>はスクリプトアーティファクトのデフォルトオプションである<code>kotlin-compiler-embeddable</code>アーティファクトで動作するように設計されています。</p><p>Gradleはこれらのプラグインをコンパイラ引数として追加します。既存のプロジェクトに変更を加える必要はありません。</p><h3 id="サポートされる最低バージョンの引き上げ" tabindex="-1">サポートされる最低バージョンの引き上げ <a class="header-anchor" href="#サポートされる最低バージョンの引き上げ" aria-label="Permalink to &quot;サポートされる最低バージョンの引き上げ&quot;">​</a></h3><p>Kotlin 1.9.0以降、サポートされるAndroid Gradleプラグインの最低バージョンは4.2.2です。</p><p><a href="/ja/kotlin/gradle-configure-project#apply-the-plugin">Kotlin Gradleプラグインと利用可能なGradleバージョンの互換性については、ドキュメントを参照してください</a>。</p><h3 id="kaptがgradleでの先行タスク作成を引き起こさないように" tabindex="-1">kaptがGradleでの先行タスク作成を引き起こさないように <a class="header-anchor" href="#kaptがgradleでの先行タスク作成を引き起こさないように" aria-label="Permalink to &quot;kaptがGradleでの先行タスク作成を引き起こさないように&quot;">​</a></h3><p>1.9.0以前は、<a href="/ja/kotlin/kapt">kaptコンパイラプラグイン</a>が、構成されたKotlinコンパイルタスクのインスタンスを要求することで、タスクの先行作成を引き起こしていました。この動作はKotlin 1.9.0で修正されました。<code>build.gradle.kts</code>ファイルのデフォルト設定を使用している場合、この変更による影響はありません。</p>',12)),s[6]||(s[6]=i("div",{class:"danger custom-block"},[i("p",{class:"custom-block-title"},"WARNING"),i("p",{validate:"false"},[a("カスタム構成を使用している場合、セットアップが悪影響を受ける可能性があります。 例えば、GradleのタスクAPIを使用して"),i("code",null,"KotlinJvmCompile"),a("タスクを変更している場合、ビルドスクリプトで同様に"),i("code",null,"KaptGenerateStubs"),a("タスクも変更する必要があります。 例えば、スクリプトに"),i("code",null,"KotlinJvmCompile"),a("タスクの以下の構成がある場合： "),i("code",null,'kotlin tasks.named<KotlinJvmCompile>("compileKotlin") { // Your custom configuration } '),a(' {validate="false"} この場合、同じ変更が'),i("code",null,"KaptGenerateStubs"),a("タスクの一部として含まれていることを確認する必要があります： "),i("code",null,'kotlin tasks.named<KaptGenerateStubs>("kaptGenerateStubs") { // Your custom configuration } ')])],-1)),s[7]||(s[7]=n(`<p>詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-54468/KAPT-Gradle-plugin-causes-eager-task-creation" target="_blank" rel="noreferrer">YouTrackチケット</a>を参照してください。</p><h3 id="jvmターゲット検証モードのプログラムによる設定" tabindex="-1">JVMターゲット検証モードのプログラムによる設定 <a class="header-anchor" href="#jvmターゲット検証モードのプログラムによる設定" aria-label="Permalink to &quot;JVMターゲット検証モードのプログラムによる設定&quot;">​</a></h3><p>Kotlin 1.9.0以前は、KotlinとJava間のJVMターゲットの非互換性の検出を調整する方法は1つしかありませんでした。プロジェクト全体に対して<code>gradle.properties</code>ファイルで<code>kotlin.jvm.target.validation.mode=ERROR</code>を設定する必要がありました。</p><p><code>build.gradle.kts</code>ファイルでタスクレベルで設定することもできるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinJvmCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compileKotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jvmTargetValidationMode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.jvm.JvmTargetValidationMode.WARNING)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><p>Kotlin 1.9.0では、標準ライブラリにいくつかの大きな改善があります。</p><ul><li><a href="#stable-operator-for-open-ended-ranges"><code>..&lt;</code>演算子</a>と<a href="#stable-time-api">Time API</a>が安定版になりました。</li><li><a href="#the-kotlin-native-standard-library-s-journey-towards-stabilization">Kotlin/Native標準ライブラリが徹底的に見直され、更新されました</a>。</li><li><a href="#stable-volatile-annotation"><code>@Volatile</code>アノテーションがより多くのプラットフォームで使用できるようになりました</a>。</li><li><a href="#new-common-function-to-get-regex-capture-group-by-name">正規表現キャプチャグループを名前で取得する<strong>共通</strong>関数があります</a>。</li><li><a href="#new-hexformat-class-to-format-and-parse-hexadecimals">16進数をフォーマットおよびパースするための新しい<code>HexFormat</code>クラスが導入されました</a>。</li></ul><h3 id="オープンエンドレンジの安定版-演算子" tabindex="-1">オープンエンドレンジの安定版<code>..&lt;</code>演算子 <a class="header-anchor" href="#オープンエンドレンジの安定版-演算子" aria-label="Permalink to &quot;オープンエンドレンジの安定版\`..&lt;\`演算子&quot;">​</a></h3><p><a href="/ja/kotlin/whatsnew1720#preview-of-the-operator-for-creating-open-ended-ranges">Kotlin 1.7.20</a>で導入され、1.8.0で安定版になったオープンエンドレンジの新しい<code>..&lt;</code>演算子が、1.9.0ではオープンエンドレンジを扱う標準ライブラリAPIも安定版になりました。</p><p>私たちの調査によると、新しい<code>..&lt;</code>演算子は、オープンエンドレンジが宣言されたときに理解しやすくします。<code>until</code>infix関数を使用すると、上限が含まれると誤解しやすいです。</p><p><code>until</code>関数を使用した例を以下に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> until </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$number</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2 4 6 8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>そして、新しい<code>..&lt;</code>演算子を使用した例を以下に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$number</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2 4 6 8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>IntelliJ IDEA 2023.1.1以降のバージョンでは、<code>..&lt;</code>演算子を使用できる箇所を強調表示する新しいコードインスペクションが利用できます。</p></div><p>この演算子で何ができるかの詳細については、「<a href="/ja/kotlin/whatsnew1720#preview-of-the-operator-for-creating-open-ended-ranges">Kotlin 1.7.20の新機能</a>」を参照してください。</p><h3 id="安定版time-api" tabindex="-1">安定版Time API <a class="header-anchor" href="#安定版time-api" aria-label="Permalink to &quot;安定版Time API&quot;">​</a></h3><p>1.3.50以降、新しい時間計測APIをプレビューしてきました。APIの期間部分は1.6.0で安定版になりました。1.9.0では、残りの時間計測APIが安定版になりました。</p><p>古い時間APIは、<code>measureTimeMillis</code>と<code>measureNanoTime</code>関数を提供していましたが、これらは直感的ではありませんでした。これら2つの関数が異なる単位で時間を計測することは明らかですが、<code>measureTimeMillis</code>が時間を計測するために<a href="https://ja.wikipedia.org/wiki/%E5%AE%9F%E6%99%82%E9%96%93_(%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF)" target="_blank" rel="noreferrer">ウォールクロック</a>を使用し、<code>measureNanoTime</code>がモノトニックな時間ソースを使用することは明らかではありませんでした。新しい時間APIはこれを解決し、APIをよりユーザーフレンドリーにするための他の問題も解決します。</p><p>新しい時間APIを使用すると、簡単に以下のことができます。</p><ul><li>モノトニックな時間ソースと希望の時間単位を使用して、コードの実行にかかる時間を測定します。</li><li>特定の時点をマークします。</li><li>2つの時点を比較し、その差を求めます。</li><li>特定の時点からどれくらいの時間が経過したかを確認します。</li><li>現在の時間が特定の時点を過ぎたかどうかを確認します。</li></ul><h4 id="コード実行時間の計測" tabindex="-1">コード実行時間の計測 <a class="header-anchor" href="#コード実行時間の計測" aria-label="Permalink to &quot;コード実行時間の計測&quot;">​</a></h4><p>コードブロックの実行にかかる時間を計測するには、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/measure-time.html" target="_blank" rel="noreferrer"><code>measureTime</code></a>インライン関数を使用します。</p><p>コードブロックの実行にかかる時間を計測し、<strong>かつ</strong>そのコードブロックの結果を返すには、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/measure-timed-value.html" target="_blank" rel="noreferrer"><code>measureTimedValue</code></a>インライン関数を使用します。</p><p>デフォルトでは、両方の関数はモノトニックな時間ソースを使用します。ただし、経過実時間ソースを使用したい場合は可能です。例えば、Androidではデフォルトの時間ソース<code>System.nanoTime()</code>はデバイスがアクティブなときにのみ時間をカウントします。デバイスがディープスリープ状態に入ると、時間の追跡が失われます。デバイスがディープスリープ状態のときにも時間を追跡し続けるには、代わりに<a href="https://developer.android.com/reference/android/os/SystemClock#elapsedRealtimeNanos()" target="_blank" rel="noreferrer"><code>SystemClock.elapsedRealtimeNanos()</code></a>を使用する時間ソースを作成できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RealtimeMonotonicTimeSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbstractLongTimeSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DurationUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NANOSECONDS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SystemClock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elapsedRealtimeNanos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="時点のマークと時間の差の計測" tabindex="-1">時点のマークと時間の差の計測 <a class="header-anchor" href="#時点のマークと時間の差の計測" aria-label="Permalink to &quot;時点のマークと時間の差の計測&quot;">​</a></h4><p>特定の時点をマークするには、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-source/" target="_blank" rel="noreferrer"><code>TimeSource</code></a>インターフェースと<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-source/mark-now.html" target="_blank" rel="noreferrer"><code>markNow()</code></a>関数を使用して<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-mark/" target="_blank" rel="noreferrer"><code>TimeMark</code></a>を作成します。同じ時間ソースからの<code>TimeMark</code>間の差を測定するには、減算演算子 (<code>-</code>) を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeSource.Monotonic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Sleep 0.5 seconds.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Measurement 1.\${n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}: elapsed1=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, elapsed2=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, diff=\${elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elapsed2}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // It&#39;s also possible to compare time marks with each other.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mark2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This is true, as mark2 was captured later than mark1.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>期限が過ぎたか、タイムアウトに達したかを確認するには、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-mark/has-passed-now.html" target="_blank" rel="noreferrer"><code>hasPassedNow()</code></a>と<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-mark/has-not-passed-now.html" target="_blank" rel="noreferrer"><code>hasNotPassedNow()</code></a>拡張関数を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.Duration.Companion.seconds</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeSource.Monotonic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fiveSeconds: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.seconds</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fiveSeconds</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // It hasn&#39;t been 5 seconds yet</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mark2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasPassedNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Wait six seconds</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mark2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasPassedNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-native標準ライブラリの安定化への道" tabindex="-1">Kotlin/Native標準ライブラリの安定化への道 <a class="header-anchor" href="#kotlin-native標準ライブラリの安定化への道" aria-label="Permalink to &quot;Kotlin/Native標準ライブラリの安定化への道&quot;">​</a></h3><p>Kotlin/Nativeの標準ライブラリが成長を続ける中、私たちは高い基準を満たしていることを確認するために完全なレビューを行う時期が来たと判断しました。この一環として、既存の<strong>すべての</strong>パブリックシグネチャを慎重にレビューしました。各シグネチャについて、以下の点を検討しました。</p><ul><li>独自の使用目的があるか。</li><li>他のKotlin APIと一貫しているか。</li><li>JVMの対応する機能と似た動作をするか。</li><li>将来性があるか。</li></ul><p>これらの考慮事項に基づき、以下のいずれかの決定を下しました。</p><ul><li>安定版とする。</li><li>実験的機能とする。</li><li><code>private</code>とマークする。</li><li>動作を変更する。</li><li>別の場所に移動する。</li><li>非推奨とする。</li><li>廃止とマークする。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>既存のシグネチャが以下の場合： * 別のパッケージに移動された場合、元のパッケージには引き続き存在しますが、非推奨レベル<code>WARNING</code>で非推奨となりました。IntelliJ IDEAはコードインスペクション時に自動的に代替を提案します。 * 非推奨とされた場合、非推奨レベル<code>WARNING</code>で非推奨とされました。 * 廃止とマークされた場合、引き続き使用できますが、将来的には置き換えられます。</p></div><p>ここではレビューのすべての結果をリストアップしませんが、主なハイライトは以下のとおりです。</p><ul><li>Atomics APIを安定版としました。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlinx.cinterop/" target="_blank" rel="noreferrer"><code>kotlinx.cinterop</code></a>を実験的とし、使用するには異なるオプトインが必要になりました。詳細については、<a href="#explicit-c-interoperability-stability-guarantees">C-interoperabilityの明示的な安定性保証</a>を参照してください。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-worker/" target="_blank" rel="noreferrer"><code>Worker</code></a>クラスとその関連APIを廃止とマークしました。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-bit-set/" target="_blank" rel="noreferrer"><code>BitSet</code></a>クラスを廃止とマークしました。</li><li><code>kotlin.native.internal</code>パッケージのすべての<code>public</code> APIを<code>private</code>とマークするか、他のパッケージに移動しました。</li></ul><h4 id="c-interoperabilityの明示的な安定性保証" tabindex="-1">C-interoperabilityの明示的な安定性保証 <a class="header-anchor" href="#c-interoperabilityの明示的な安定性保証" aria-label="Permalink to &quot;C-interoperabilityの明示的な安定性保証&quot;">​</a></h4><p>APIの高品質を維持するため、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlinx.cinterop/" target="_blank" rel="noreferrer"><code>kotlinx.cinterop</code></a>を実験的とすることにしました。<code>kotlinx.cinterop</code>は徹底的に試されテストされていますが、安定版とするにはまだ改善の余地があります。このAPIを相互運用性のために使用することをお勧めしますが、プロジェクト内の特定の領域にその使用を限定するようにしてください。これにより、このAPIを安定版にするために進化させ始めたときに、移行が容易になります。</p><p>ポインタなどのC風の外部APIを使用したい場合は、<code>@OptIn(ExperimentalForeignApi)</code>でオプトインする必要があります。そうしないと、コードはコンパイルされません。</p><p>Objective-C/Swift相互運用性をカバーする残りの<code>kotlinx.cinterop</code>を使用するには、<code>@OptIn(BetaInteropApi)</code>でオプトインする必要があります。このAPIをオプトインなしで使用しようとすると、コードはコンパイルされますが、コンパイラは期待できる動作を明確に説明する警告を発します。</p><p>これらのアノテーションの詳細については、<a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/Interop/Runtime/src/main/kotlin/kotlinx/cinterop/Annotations.kt" target="_blank" rel="noreferrer"><code>Annotations.kt</code></a>のソースコードを参照してください。</p><p>このレビューの一環としての<strong>すべて</strong>の変更の詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-55765" target="_blank" rel="noreferrer">YouTrackチケット</a>を参照してください。</p><p>皆様からのフィードバックをお待ちしております！<a href="https://youtrack.jetbrains.com/issue/KT-57728" target="_blank" rel="noreferrer">チケット</a>に直接コメントすることでフィードバックを提供できます。</p><h3 id="安定版-volatileアノテーション" tabindex="-1">安定版<code>@Volatile</code>アノテーション <a class="header-anchor" href="#安定版-volatileアノテーション" aria-label="Permalink to &quot;安定版\`@Volatile\`アノテーション&quot;">​</a></h3><p><code>var</code>プロパティに<code>@Volatile</code>アノテーションを付けると、バッキングフィールドがマークされ、そのフィールドへの読み書きがアトミックになり、書き込みが常に他のスレッドに可視になります。</p><p>1.8.20以前は、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-volatile/" target="_blank" rel="noreferrer"><code>kotlin.jvm.Volatile</code>アノテーション</a>が共通標準ライブラリで利用可能でした。しかし、このアノテーションはJVMでのみ有効でした。他のプラットフォームで使用すると無視され、エラーにつながっていました。</p><p>1.8.20では、実験的な共通アノテーション<code>kotlin.concurrent.Volatile</code>を導入し、JVMとKotlin/Nativeの両方でプレビューできるようになりました。</p><p>1.9.0では、<code>kotlin.concurrent.Volatile</code>が安定版になりました。マルチプラットフォームプロジェクトで<code>kotlin.jvm.Volatile</code>を使用している場合は、<code>kotlin.concurrent.Volatile</code>への移行を推奨します。</p><h3 id="正規表現キャプチャグループを名前で取得する新しい共通関数" tabindex="-1">正規表現キャプチャグループを名前で取得する新しい共通関数 <a class="header-anchor" href="#正規表現キャプチャグループを名前で取得する新しい共通関数" aria-label="Permalink to &quot;正規表現キャプチャグループを名前で取得する新しい共通関数&quot;">​</a></h3><p>1.9.0以前は、正規表現マッチから名前で正規表現キャプチャグループを取得するための拡張機能が各プラットフォームに独自に存在していましたが、共通関数はありませんでした。Kotlin 1.8.0以前は、標準ライブラリがJVMターゲット1.6および1.7をまだサポートしていたため、共通関数を持つことはできませんでした。</p><p>Kotlin 1.8.0以降、標準ライブラリはJVMターゲット1.8でコンパイルされます。そのため1.9.0では、正規表現マッチングにおけるグループの内容を名前で取得できる<strong>共通</strong>の<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-match-result/groups.html" target="_blank" rel="noreferrer"><code>groups</code></a>関数が利用可能になりました。これは、特定のキャプチャグループに属する正規表現マッチの結果にアクセスしたい場合に便利です。</p><p>以下に、<code>city</code>、<code>state</code>、<code>areaCode</code>の3つのキャプチャグループを含む正規表現の例を示します。これらのグループ名を使用して、マッチした値にアクセスできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(?&lt;city&gt;[A-Za-z</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]+),</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(?&lt;state&gt;[A-Z]{2}):</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(?&lt;areaCode&gt;[0-9]{3})</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Coordinates: Austin, TX: 123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> match </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.groups[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;city&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Austin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.groups[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // TX</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.groups[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;areaCode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="親ディレクトリを作成する新しいパスユーティリティ" tabindex="-1">親ディレクトリを作成する新しいパスユーティリティ <a class="header-anchor" href="#親ディレクトリを作成する新しいパスユーティリティ" aria-label="Permalink to &quot;親ディレクトリを作成する新しいパスユーティリティ&quot;">​</a></h3><p>1.9.0には、必要なすべての親ディレクトリを持つ新しいファイルを作成するために使用できる新しい<code>createParentDirectories()</code>拡張関数があります。ファイルパスを<code>createParentDirectories()</code>に提供すると、親ディレクトリが既に存在するかどうかがチェックされます。存在する場合は何もせず、存在しない場合は作成します。</p><p><code>createParentDirectories()</code>は、ファイルをコピーする際に特に便利です。例えば、<code>copyToRecursively()</code>関数と組み合わせて使用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sourcePath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   destinationPath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createParentDirectories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_16進数をフォーマットおよびパースするための新しいhexformatクラス" tabindex="-1">16進数をフォーマットおよびパースするための新しい<code>HexFormat</code>クラス <a class="header-anchor" href="#_16進数をフォーマットおよびパースするための新しいhexformatクラス" aria-label="Permalink to &quot;16進数をフォーマットおよびパースするための新しい\`HexFormat\`クラス&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新しい<code>HexFormat</code>クラスとその関連する拡張関数は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>であり、使用するには<code>@OptIn(ExperimentalStdlibApi::class)</code>またはコンパイラ引数<code>-opt-in=kotlin.ExperimentalStdlibApi</code>でオプトインする必要があります。</p></div><p>1.9.0では、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-hex-format/" target="_blank" rel="noreferrer"><code>HexFormat</code></a>クラスとその関連する拡張関数が実験的機能として提供され、数値と16進数文字列間の変換を可能にします。具体的には、拡張関数を使用して16進数文字列と<code>ByteArray</code>または他の数値型（<code>Int</code>、<code>Short</code>、<code>Long</code>）の間で変換できます。</p><p>例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">93</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;0000005d&quot;</span></span></code></pre></div><p><code>HexFormat</code>クラスには、<code>HexFormat{}</code>ビルダーで構成できる書式設定オプションが含まれています。</p><p><code>ByteArray</code>を扱う場合、プロパティで設定可能な以下のオプションがあります。</p><table tabindex="0"><thead><tr><th>オプション</th><th>説明</th></tr></thead><tbody><tr><td><code>upperCase</code></td><td>16進数の桁が大文字か小文字か。デフォルトでは小文字と仮定されます。<code>upperCase = false</code>。</td></tr><tr><td><code>bytes.bytesPerLine</code></td><td>1行あたりの最大バイト数。</td></tr><tr><td><code>bytes.bytesPerGroup</code></td><td>1グループあたりの最大バイト数。</td></tr><tr><td><code>bytes.bytesSeparator</code></td><td>バイト間の区切り文字。デフォルトではなし。</td></tr><tr><td><code>bytes.bytesPrefix</code></td><td>各バイトの2桁の16進数表現の直前に置かれる文字列。デフォルトではなし。</td></tr><tr><td><code>bytes.bytesSuffix</code></td><td>各バイトの2桁の16進数表現の直後に置かれる文字列。デフォルトではなし。</td></tr></tbody></table><p>例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> macAddress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;001b638445e6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexToByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use HexFormat{} builder to separate the hexadecimal string by colons</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(macAddress.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HexFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { bytes.byteSeparator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;00:1b:63:84:45:e6&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use HexFormat{} builder to:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// * Make the hexadecimal string uppercase</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// * Group the bytes in pairs</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// * Separate by periods</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threeGroupFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HexFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { upperCase </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; bytes.bytesPerGroup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; bytes.groupSeparator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(macAddress.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(threeGroupFormat))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;001B.6384.45E6&quot;</span></span></code></pre></div><p>数値型を扱う場合、プロパティで設定可能な以下のオプションがあります。</p><table tabindex="0"><thead><tr><th>オプション</th><th>説明</th></tr></thead><tbody><tr><td><code>number.prefix</code></td><td>16進数文字列のプレフィックス。デフォルトではなし。</td></tr><tr><td><code>number.suffix</code></td><td>16進数文字列のサフィックス。デフォルトではなし。</td></tr><tr><td><code>number.removeLeadingZeros</code></td><td>16進数文字列の先行ゼロを削除するかどうか。デフォルトでは先行ゼロは削除されません。<code>number.removeLeadingZeros = false</code></td></tr></tbody></table><p>例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use HexFormat{} builder to parse a hexadecimal that has prefix: &quot;0x&quot;.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0x3a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HexFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { number.prefix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;58&quot;</span></span></code></pre></div><h2 id="ドキュメントの更新" tabindex="-1">ドキュメントの更新 <a class="header-anchor" href="#ドキュメントの更新" aria-label="Permalink to &quot;ドキュメントの更新&quot;">​</a></h2><p>Kotlinのドキュメントにはいくつかの注目すべき変更が加えられました。</p><ul><li><a href="/ja/kotlin/kotlin-tour-welcome">Kotlinのツアー</a> – Kotlinプログラミング言語の基礎を、理論と実践の両方を含む章で学びます。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-android-layout.html" target="_blank" rel="noreferrer">Androidソースセットレイアウト</a> – 新しいAndroidソースセットレイアウトについて学びます。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html" target="_blank" rel="noreferrer">Kotlin Multiplatformの互換性ガイド</a> – Kotlin Multiplatformでプロジェクトを開発する際に遭遇する可能性のある互換性のない変更について学びます。</li><li><a href="/ja/kotlin/wasm-overview">Kotlin Wasm</a> – Kotlin/Wasmと、Kotlin Multiplatformプロジェクトでの使用方法について学びます。</li></ul><h2 id="kotlin-1-9-0のインストール" tabindex="-1">Kotlin 1.9.0のインストール <a class="header-anchor" href="#kotlin-1-9-0のインストール" aria-label="Permalink to &quot;Kotlin 1.9.0のインストール&quot;">​</a></h2><h3 id="ideバージョンの確認" tabindex="-1">IDEバージョンの確認 <a class="header-anchor" href="#ideバージョンの確認" aria-label="Permalink to &quot;IDEバージョンの確認&quot;">​</a></h3><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2022.3.3および2023.1.1は、Kotlinプラグインをバージョン1.9.0に更新することを自動的に提案します。IntelliJ IDEA 2023.2にはKotlin 1.9.0プラグインが含まれる予定です。</p><p>Android Studio Giraffe (223) および Hedgehog (231) は、今後のリリースでKotlin 1.9.0をサポートする予定です。</p><p>新しいコマンドラインコンパイラは、<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.9.0" target="_blank" rel="noreferrer">GitHubリリースページ</a>からダウンロードできます。</p><h3 id="gradle設定の構成" tabindex="-1">Gradle設定の構成 <a class="header-anchor" href="#gradle設定の構成" aria-label="Permalink to &quot;Gradle設定の構成&quot;">​</a></h3><p>Kotlinのアーティファクトと依存関係をダウンロードするには、<code>settings.gradle(.kts)</code>ファイルを更新してMaven Centralリポジトリを使用するようにしてください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pluginManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        gradlePluginPortal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>リポジトリが指定されていない場合、Gradleは廃止されたJCenterリポジトリを使用するため、Kotlinアーティファクトで問題が発生する可能性があります。</p><h2 id="kotlin-1-9-0の互換性ガイド" tabindex="-1">Kotlin 1.9.0の互換性ガイド <a class="header-anchor" href="#kotlin-1-9-0の互換性ガイド" aria-label="Permalink to &quot;Kotlin 1.9.0の互換性ガイド&quot;">​</a></h2><p>Kotlin 1.9.0は<a href="/ja/kotlin/kotlin-evolution-principles#language-and-tooling-releases">フィーチャーリリース</a>であり、そのため、以前のバージョンの言語用に書かれたコードと互換性のない変更をもたらす可能性があります。これらの変更の詳細なリストは、<a href="/ja/kotlin/compatibility-guide-19">Kotlin 1.9.0の互換性ガイド</a>にあります。</p>`,89))])}const D=c(u,[["render",F]]);export{K as __pageData,D as default};
