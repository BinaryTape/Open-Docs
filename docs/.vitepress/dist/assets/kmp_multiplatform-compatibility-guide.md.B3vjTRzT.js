import{_ as h,C as r,c as k,o as c,j as i,G as l,ag as t,a as s,w as e}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"Kotlin Multiplatform 兼容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-compatibility-guide.md","filePath":"kmp/multiplatform-compatibility-guide.md","lastUpdated":1755516278000}'),g={name:"kmp/multiplatform-compatibility-guide.md"},E={colspan:"2"},u={colspan:"2"};function m(y,a,b,F,v,C){const d=r("show-structure"),n=r("code-block"),p=r("TabItem"),o=r("Tabs");return c(),k("div",null,[a[20]||(a[20]=i("h1",{id:"kotlin-multiplatform-兼容性指南",tabindex:"-1"},[s("Kotlin Multiplatform 兼容性指南 "),i("a",{class:"header-anchor",href:"#kotlin-multiplatform-兼容性指南","aria-label":'Permalink to "Kotlin Multiplatform 兼容性指南"'},"​")],-1)),l(d,{depth:"1"}),a[21]||(a[21]=t(`<p>本指南总结了您在使用 Kotlin Multiplatform 开发项目时可能会遇到的<a href="https://kotlinlang.org/docs/kotlin-evolution-principles.html#incompatible-changes" target="_blank" rel="noreferrer">不兼容变更</a>。</p><p>Kotlin 的当前稳定版本是 2.2.0。请注意特定变更的弃用周期与您项目中 Kotlin 版本的关系，例如：</p><ul><li>从 Kotlin 1.7.0 升级到 Kotlin 1.9.0 时，请检查在 <a href="#kotlin-1-9-0-1-9-25">Kotlin 1.9.0</a> 和 <a href="#kotlin-1-7-0-1-8-22">Kotlin 1.7.0−1.8.22</a> 中生效的不兼容变更。</li><li>从 Kotlin 1.9.0 升级到 Kotlin 2.0.0 时，请检查在 <a href="#kotlin-2-0-0-and-later">Kotlin 2.0.0</a> 和 <a href="#kotlin-1-9-0-1-9-25">Kotlin 1.9.0−1.9.25</a> 中生效的不兼容变更。</li></ul><h2 id="版本兼容性" tabindex="-1">版本兼容性 <a class="header-anchor" href="#版本兼容性" aria-label="Permalink to &quot;版本兼容性&quot;">​</a></h2><p>配置项目时，请检查特定版本的 Kotlin Multiplatform Gradle 插件（与您项目中的 Kotlin 版本相同）与 Gradle、Xcode 和 Android Gradle 插件版本的兼容性：</p><table tabindex="0"><thead><tr><th>Kotlin Multiplatform 插件版本</th><th>Gradle</th><th>Android Gradle 插件</th><th>Xcode</th></tr></thead><tbody><tr><td>2.2.0-2.2.10</td><td>7.6.3–8.14</td><td>7.3.1–8.10.0</td><td>16.3</td></tr><tr><td>2.1.21</td><td>7.6.3–8.12.1</td><td>7.3.1–8.7.2</td><td>16.3</td></tr><tr><td>2.1.20</td><td>7.6.3–8.11</td><td>7.4.2–8.7.2</td><td>16.0</td></tr><tr><td>2.1.0–2.1.10</td><td>7.6.3-8.10*</td><td>7.4.2–8.7.2</td><td>16.0</td></tr><tr><td>2.0.21</td><td>7.5-8.8*</td><td>7.4.2–8.5</td><td>16.0</td></tr><tr><td>2.0.20</td><td>7.5-8.8*</td><td>7.4.2–8.5</td><td>15.3</td></tr><tr><td>2.0.0</td><td>7.5-8.5</td><td>7.4.2–8.3</td><td>15.3</td></tr><tr><td>1.9.20</td><td>7.5-8.1.1</td><td>7.4.2–8.2</td><td>15.0</td></tr></tbody></table><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>*Kotlin 2.0.20–2.0.21 和 Kotlin 2.1.0–2.1.10 完全兼容 Gradle 8.6 及更早版本。 Gradle 8.7–8.10 版本也受支持，但有一个例外：如果您使用 Kotlin Multiplatform Gradle 插件， 您可能会在多平台项目中看到调用 JVM 目标中的 <code>withJava()</code> 函数的弃用警告。 有关更多信息，请参阅<a href="#java-source-sets-created-by-default">默认创建的 Java 源代码集</a>。</p></div><h2 id="kotlin-2-0-0-及更高版本" tabindex="-1">Kotlin 2.0.0 及更高版本 <a class="header-anchor" href="#kotlin-2-0-0-及更高版本" aria-label="Permalink to &quot;Kotlin 2.0.0 及更高版本&quot;">​</a></h2><p>本节涵盖了在 Kotlin 2.0.0−2.2.0 中结束弃用周期并生效的不兼容变更。</p><h3 id="已弃用-bitcode-嵌入" tabindex="-1">已弃用 bitcode 嵌入 <a class="header-anchor" href="#已弃用-bitcode-嵌入" aria-label="Permalink to &quot;已弃用 bitcode 嵌入&quot;">​</a></h3><p><strong>有何变更？</strong></p><p>Bitcode 嵌入在 Xcode 14 中已弃用，并在 Xcode 15 中针对所有 Apple 目标移除。相应地，framework 配置的 <code>embedBitcode</code> 形参，以及 <code>-Xembed-bitcode</code> 和 <code>-Xembed-bitcode-marker</code> 命令行实参在 Kotlin 中也已弃用。</p><p><strong>最佳实践是什么？</strong></p><p>如果您仍使用更早版本的 Xcode 但想升级到 Kotlin 2.0.20 或更高版本，请在您的 Xcode 项目中禁用 bitcode 嵌入。</p><p><strong>变更何时生效？</strong></p><p>以下是计划的弃用周期：</p><ul><li>2.0.20: Kotlin/Native 编译器不再支持 bitcode 嵌入</li><li>2.1.0: Kotlin Multiplatform Gradle 插件中的 <code>embedBitcode</code> DSL 已弃用并发出警告</li><li>2.2.0: 警告将升级为错误</li><li>2.3.0: <code>embedBitcode</code> DSL 将被移除</li></ul><h3 id="默认创建的-java-源代码集" tabindex="-1">默认创建的 Java 源代码集 <a class="header-anchor" href="#默认创建的-java-源代码集" aria-label="Permalink to &quot;默认创建的 Java 源代码集&quot;">​</a></h3><p><strong>有何变更？</strong></p><p>为使 Kotlin Multiplatform 与 Gradle 的即将到来的变更保持一致，我们正在逐步淘汰 <code>withJava()</code> 函数。 <code>withJava()</code> 函数通过创建必要的 Java 源代码集来启用与 Gradle 的 Java 插件的集成。从 Kotlin 2.1.20 起，这些 Java 源代码集将默认创建。</p><p><strong>最佳实践是什么？</strong></p><p>以前，您必须显式使用 <code>withJava()</code> 函数来创建 <code>src/jvmMain/java</code> 和 <code>src/jvmTest/java</code> 源代码集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        withJava</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>从 Kotlin 2.1.20 起，您可以从构建脚本中移除 <code>withJava()</code> 函数。</p><p>此外，Gradle 现在仅在存在 Java 源代码时才运行 Java 编译任务，这会触发以前未运行的 JVM 验证诊断。如果您为 <code>KotlinJvmCompile</code> 任务或 <code>compilerOptions</code> 内部显式配置不兼容的 JVM 目标，此诊断将失败。有关确保 JVM 目标兼容性的指导，请参阅<a href="https://kotlinlang.org/docs/gradle-configure-project.html#check-for-jvm-target-compatibility-of-related-compile-tasks" target="_blank" rel="noreferrer">检查相关编译任务的 JVM 目标兼容性</a>。</p><p>如果您的项目使用高于 8.7 的 Gradle 版本，并且不依赖于 Gradle Java 插件，例如 <a href="https://docs.gradle.org/current/userguide/java_plugin.html" target="_blank" rel="noreferrer">Java</a>、<a href="https://docs.gradle.org/current/userguide/java_library_plugin.html" target="_blank" rel="noreferrer">Java Library</a> 或 <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a>，或者依赖于带有 Gradle Java 插件依赖项的第三方 Gradle 插件，则可以移除 <code>withJava()</code> 函数。</p><p>如果您的项目使用 <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a> Gradle Java 插件，我们建议迁移到<a href="https://kotlinlang.org/docs/whatsnew2120.html#kotlin-multiplatform-new-dsl-to-replace-gradle-s-application-plugin" target="_blank" rel="noreferrer">新的实验性 DSL</a>。从 Gradle 8.7 开始，Application 插件将不再与 Kotlin Multiplatform Gradle 插件一起工作。</p><p>如果您想在多平台项目中使用 Kotlin Multiplatform Gradle 插件和其他用于 Java 的 Gradle 插件，请参阅<a href="./multiplatform-compatibility-guide#deprecated-compatibility-with-kotlin-multiplatform-gradle-plugin-and-gradle-java-plugins">与 Kotlin Multiplatform Gradle 插件和 Gradle Java 插件已弃用的兼容性</a>。</p><p>如果您在 Kotlin 2.1.20 中使用 <a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures" target="_blank" rel="noreferrer">Java test fixtures</a> Gradle 插件且 Gradle 版本高于 8.7，则该插件将无法工作。请升级到 <a href="https://kotlinlang.org/docs/releases.html#release-details" target="_blank" rel="noreferrer">Kotlin 2.1.21</a> 来解决此问题。</p><p>如果您遇到任何问题，请在我们的<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">问题跟踪器</a>中报告，或在我们的<a href="https://kotlinlang.slack.com/archives/C19FD9681" target="_blank" rel="noreferrer">公共 Slack 频道</a>中寻求帮助。</p><p><strong>变更何时生效？</strong></p><p>以下是计划的弃用周期：</p><ul><li>Gradle &gt;8.6: 对于使用 <code>withJava()</code> 函数的多平台项目中任何以前的 Kotlin 版本，引入弃用警告。</li><li>Gradle 9.0: 将此警告升级为错误。</li><li>2.1.20: 使用任何 Gradle 版本时，使用 <code>withJava()</code> 函数将引入弃用警告。</li></ul><h3 id="将-android-目标重命名为-androidtarget" tabindex="-1">将 <code>android</code> 目标重命名为 <code>androidTarget</code> <a class="header-anchor" href="#将-android-目标重命名为-androidtarget" aria-label="Permalink to &quot;将 \`android\` 目标重命名为 \`androidTarget\`&quot;">​</a></h3><p><strong>有何变更？</strong></p><p>我们继续努力使 Kotlin Multiplatform 更加稳定。朝着这个方向迈出的重要一步是为 Android 目标提供一等支持。将来，此支持将通过由 Google 的 Android 团队开发的单独插件提供。</p><p>为了给新的解决方案铺平道路，我们正在当前的 Kotlin DSL 中将 <code>android</code> 代码块重命名为 <code>androidTarget</code>。这是一个临时变更，旨在为 Google 即将推出的 DSL 释放简短的 <code>android</code> 名称。</p><p><strong>最佳实践是什么？</strong></p><p>将所有出现的 <code>android</code> 代码块重命名为 <code>androidTarget</code>。当用于 Android 目标支持的新插件可用时，请迁移到 Google 的 DSL。这将是在 Kotlin Multiplatform 项目中使用 Android 的首选选项。</p><p><strong>变更何时生效？</strong></p><p>以下是计划的弃用周期：</p><ul><li>1.9.0: 在 Kotlin Multiplatform 项目中使用 <code>android</code> 名称时引入弃用警告</li><li>2.1.0: 将此警告升级为错误</li><li>2.2.0: 从 Kotlin Multiplatform Gradle 插件中移除 <code>android</code> 目标 DSL</li></ul><h3 id="声明多个类似目标" tabindex="-1">声明多个类似目标 <a class="header-anchor" href="#声明多个类似目标" aria-label="Permalink to &quot;声明多个类似目标&quot;">​</a></h3><p><strong>有何变更？</strong></p><p>我们不鼓励在单个 Gradle 项目中声明多个类似目标。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvmKtor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvmOkHttp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Not recommended and produces a deprecation warning</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>一个常见情况是将两个相关的代码片段放在一起。例如，您可能希望在您的 <code>:shared</code> Gradle 项目中使用 <code>jvm(&quot;jvmKtor&quot;)</code> 和 <code>jvm(&quot;jvmOkHttp&quot;)</code> 来使用 Ktor 或 OkHttp 库实现网络：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// shared/build.gradle.kts:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvmKtor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        attributes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvmOkHttp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        attributes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonJvmMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Shared dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmKtorMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonJvmMain)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Ktor dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmOkHttpMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonJvmMain)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // OkHttp dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此实现带来了非简单的配置复杂性：</p><ul><li>您必须在 <code>:shared</code> 侧和每个消费方设置 Gradle 属性。否则，Gradle 无法在此类项目中解析依赖项，因为没有额外信息，不清楚消费方应该接收基于 Ktor 还是基于 OkHttp 的实现。</li><li>您必须手动设置 <code>commonJvmMain</code> 源代码集。</li><li>该配置涉及一些低层 Gradle 和 Kotlin Gradle 插件的抽象和 API。</li></ul><p><strong>最佳实践是什么？</strong></p><p>配置之所以复杂，是因为基于 Ktor 和基于 OkHttp 的实现位于<strong>同一个 Gradle 项目</strong>中。在许多情况下，可以将这些部分提取到单独的 Gradle 项目中。以下是此类重构的概述：</p><ol><li><p>将原始项目中的两个重复目标替换为单个目标。如果您在这些目标之间有共享源代码集，请将其源代码和配置移到新创建的目标的默认源代码集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// shared/build.gradle.kts:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        jvmMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Copy the configuration of jvmCommonMain here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>添加两个新的 Gradle 项目，通常通过在 <code>settings.gradle.kts</code> 文件中调用 <code>include</code> 来实现。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:okhttp-impl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:ktor-impl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>配置每个新的 Gradle 项目：</p><ul><li>最有可能的是，您不需要应用 <code>kotlin(&quot;multiplatform&quot;)</code> 插件，因为这些项目仅编译到一个目标。在此示例中，您可以应用 <code>kotlin(&quot;jvm&quot;)</code>。</li><li>将原始目标特有的源代码集的内容移动到其各自的项目，例如，从 <code>jvmKtorMain</code> 移动到 <code>ktor-impl/src</code>。</li><li>复制源代码集的配置：依赖项、编译器选项等。</li><li>从新的 Gradle 项目向原始项目添加依赖项。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ktor-impl/build.gradle.kts:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Add dependency on the original project</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Copy dependencies of jvmKtorMain here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Copy compiler options of jvmKtorMain here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>虽然此方法在初始设置上需要更多工作，但它不使用 Gradle 和 Kotlin Gradle 插件的任何低层实体，从而使结果构建更易于使用和维护。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>遗憾的是，我们无法为每个案例提供详细的迁移步骤。如果上述说明不适用于您，请在此 <a href="https://youtrack.jetbrains.com/issue/KT-59316" target="_blank" rel="noreferrer">YouTrack 问题</a>中描述您的用例。</p></div><p><strong>变更何时生效？</strong></p><p>以下是计划的弃用周期：</p><ul><li>1.9.20: 在 Kotlin Multiplatform 项目中使用多个类似目标时引入弃用警告</li><li>2.1.0: 在此类情况下报告错误，Kotlin/JS 目标除外；要了解有关此例外的更多信息，请参阅 <a href="https://youtrack.jetbrains.com/issue/KT-47038/KJS-MPP-Split-JS-target-into-JsBrowser-and-JsNode" target="_blank" rel="noreferrer">YouTrack</a> 中的问题</li></ul><h3 id="已弃用对以传统模式发布的多平台库的支持" tabindex="-1">已弃用对以传统模式发布的多平台库的支持 <a class="header-anchor" href="#已弃用对以传统模式发布的多平台库的支持" aria-label="Permalink to &quot;已弃用对以传统模式发布的多平台库的支持&quot;">​</a></h3><p><strong>有何变更？</strong></p><p>以前，我们<a href="#deprecated-gradle-properties-for-hierarchical-structure-support">已弃用</a> Kotlin Multiplatform 项目中的传统模式，阻止了“传统”二进制文件的发布，并鼓励您将项目迁移到<a href="./multiplatform-hierarchy">分层结构</a>。</p><p>为了继续逐步淘汰生态系统中的“传统”二进制文件，从 Kotlin 1.9.0 开始，也不鼓励使用传统库。如果您的项目依赖于传统库，您将看到以下警告：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>The dependency group:artifact:1.0 was published in the legacy mode. Support for such dependencies will be removed in the future</span></span></code></pre></div><p><strong>最佳实践是什么？</strong></p><p><em>如果您使用多平台库</em>，它们中的大多数已经迁移到“分层结构”模式，因此您只需更新库版本即可。有关详细信息，请参阅相应库的文档。</p><p>如果该库尚不支持非传统二进制文件，您可以联系维护者并告知他们此兼容性问题。</p><p><em>如果您是库作者</em>，请将 Kotlin Gradle 插件更新到最新版本，并确保您已修复<a href="#deprecated-gradle-properties-for-hierarchical-structure-support">已弃用的 Gradle 属性</a>。</p><p>Kotlin 团队乐于帮助生态系统迁移，因此如果您遇到任何问题，请随时在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中创建问题。</p><p><strong>变更何时生效？</strong></p><p>以下是计划的弃用周期：</p><ul><li>1.9.0: 对传统库的依赖项引入弃用警告</li><li>2.0.0: 将对传统库的依赖项的警告升级为错误</li><li><blockquote><p>2.0.0: 移除对传统库依赖项的支持；使用此类依赖项可能导致构建失败</p></blockquote></li></ul><h3 id="已弃用用于分层结构支持的-gradle-属性" tabindex="-1">已弃用用于分层结构支持的 Gradle 属性 <a class="header-anchor" href="#已弃用用于分层结构支持的-gradle-属性" aria-label="Permalink to &quot;已弃用用于分层结构支持的 Gradle 属性&quot;">​</a></h3><p><strong>有何变更？</strong></p><p>在其发展过程中，Kotlin 逐步引入了多平台项目中的<a href="./multiplatform-hierarchy">分层结构</a>支持，即在公共源代码集 <code>commonMain</code> 和任何平台特有的源代码集（例如 <code>jvmMain</code>）之间拥有中间源代码集的能力。</p><p>在过渡期，当工具链不够稳定时，引入了一些 Gradle 属性，允许细粒度的选择加入和选择退出。</p><p>自 Kotlin 1.6.20 以来，分层项目结构支持已默认启用。然而，为了在出现阻碍性问题时选择退出，这些属性被保留了下来。在处理所有反馈后，我们现在开始完全逐步淘汰这些属性。</p><p>以下属性现已弃用：</p><ul><li><code>kotlin.internal.mpp.hierarchicalStructureByDefault</code></li><li><code>kotlin.mpp.enableCompatibilityMetadataVariant</code></li><li><code>kotlin.mpp.hierarchicalStructureSupport</code></li><li><code>kotlin.mpp.enableGranularSourceSetsMetadata</code></li><li><code>kotlin.native.enableDependencyPropagation</code></li></ul><p><strong>最佳实践是什么？</strong></p><ul><li>从您的 <code>gradle.properties</code> 和 <code>local.properties</code> 文件中移除这些属性。</li><li>避免在 Gradle 构建脚本或您的 Gradle 插件中编程式地设置它们。</li><li>如果您您的构建中使用的某些第三方 Gradle 插件设置了已弃用的属性，请要求插件维护者不要设置这些属性。</li></ul><p>由于 Kotlin 工具链的默认行为自 Kotlin 1.6.20 以来不包含此类属性，我们不预期会有任何严重影响。大多数后果将在项目重建后立即显现。</p><p>如果您是库作者并希望确保额外安全，请检查消费方是否可以使用您的库。</p><p><strong>变更何时生效？</strong></p><p>以下是计划的弃用周期：</p><ul><li>1.8.20: 当使用已弃用的 Gradle 属性时报告警告</li><li>1.9.20: 将此警告升级为错误</li><li>2.0.0: 移除已弃用的属性；Kotlin Gradle 插件将忽略它们的用法</li></ul><p>在极不可能的情况下，如果您在移除这些属性后遇到一些问题，请在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中创建问题。</p><h3 id="已弃用目标预设-api" tabindex="-1">已弃用目标预设 API <a class="header-anchor" href="#已弃用目标预设-api" aria-label="Permalink to &quot;已弃用目标预设 API&quot;">​</a></h3><p><strong>有何变更？</strong></p><p>在非常早期的开发阶段，Kotlin Multiplatform 引入了一个用于处理所谓<strong>目标预设</strong>的 API。每个目标预设本质上代表了 Kotlin Multiplatform 目标的工厂。此 API 结果在很大程度上是多余的，因为像 <code>jvm()</code> 或 <code>iosSimulatorArm64()</code> 这样的 DSL 函数涵盖了相同的用例，同时更直接和简洁。</p><p>为了减少混淆并提供更清晰的指导，所有与预设相关的 API 现已在 Kotlin Gradle 插件的公共 API 中弃用。这包括：</p><ul><li><code>org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension</code> 中的 <code>presets</code> 属性</li><li><code>org.jetbrains.kotlin.gradle.plugin.KotlinTargetPreset</code> 接口及其所有继承者</li><li><code>fromPreset</code> 重载</li></ul><p><strong>最佳实践是什么？</strong></p><p>请改用相应的 <a href="./multiplatform-dsl-reference#targets">Kotlin 目标</a>，例如：</p>`,93)),i("table",null,[a[0]||(a[0]=i("tr",null,[i("td",null,"之前"),i("td",null,"现在")],-1)),i("tr",null,[i("td",null,[l(n,{lang:"kotlin",code:`kotlin {
    targets {
        fromPreset(presets.iosArm64, 'ios')
    }
}`})]),i("td",null,[l(n,{lang:"kotlin",code:`kotlin {
    iosArm64()
}`})])])]),a[22]||(a[22]=t('<p><strong>变更何时生效？</strong></p><p>以下是计划的弃用周期：</p><ul><li>1.9.20: 对任何使用预设相关 API 的情况报告警告</li><li>2.0.0: 将此警告升级为错误</li><li>2.2.0: 从 Kotlin Gradle 插件的公共 API 中移除预设相关 API；仍然使用它的源代码将因“未解析引用”错误而失败，并且二进制文件（例如，Gradle 插件）除非针对最新版本的 Kotlin Gradle 插件重新编译，否则可能会因链接错误而失败</li></ul><h3 id="已弃用-apple-目标快捷方式" tabindex="-1">已弃用 Apple 目标快捷方式 <a class="header-anchor" href="#已弃用-apple-目标快捷方式" aria-label="Permalink to &quot;已弃用 Apple 目标快捷方式&quot;">​</a></h3><p><strong>有何变更？</strong></p><p>我们正在弃用 Kotlin Multiplatform DSL 中的 <code>ios()</code>、<code>watchos()</code> 和 <code>tvos()</code> 目标快捷方式。它们旨在部分创建 Apple 目标的源代码集层级。然而，它们被证明难以扩展，有时令人困惑。</p><p>例如，<code>ios()</code> 快捷方式创建了 <code>iosArm64</code> 和 <code>iosX64</code> 目标，但没有包含 <code>iosSimulatorArm64</code> 目标，这在使用 Apple M 芯片的主机上工作时是必要的。然而，更改此快捷方式难以实现，并可能在现有用户项目中导致问题。</p><p><strong>最佳实践是什么？</strong></p><p>Kotlin Gradle 插件现在提供了一个内置层级模板。自 Kotlin 1.9.20 以来，它默认启用，并包含针对常见用例的预定义中间源代码集。</p><p>您应该指定目标列表而不是快捷方式，然后插件将根据此列表自动设置中间源代码集。</p><p>例如，如果您的项目中包含 <code>iosArm64</code> 和 <code>iosSimulatorArm64</code> 目标，插件将自动创建 <code>iosMain</code> 和 <code>iosTest</code> 中间源代码集。如果您的项目中包含 <code>iosArm64</code> 和 <code>macosArm64</code> 目标，则会创建 <code>appleMain</code> 和 <code>appleTest</code> 源代码集。</p><p>有关更多信息，请参阅<a href="./multiplatform-hierarchy">分层项目结构</a></p><p><strong>变更何时生效？</strong></p><p>以下是计划的弃用周期：</p><ul><li>1.9.20: 当使用 <code>ios()</code>、<code>watchos()</code> 和 <code>tvos()</code> 目标快捷方式时报告警告；默认层级模板将默认启用以替代它们</li><li>2.1.0: 当使用目标快捷方式时报告错误</li><li>2.2.0: 从 Kotlin Multiplatform Gradle 插件中移除目标快捷方式 DSL</li></ul><h3 id="kotlin-升级后-ios-framework-版本不正确" tabindex="-1">Kotlin 升级后 iOS framework 版本不正确 <a class="header-anchor" href="#kotlin-升级后-ios-framework-版本不正确" aria-label="Permalink to &quot;Kotlin 升级后 iOS framework 版本不正确&quot;">​</a></h3><p><strong>问题是什么？</strong></p><p>当使用直接集成时，Kotlin 代码中的变更可能不会反映在 Xcode 中的 iOS 应用中。直接集成通过 <code>embedAndSignAppleFrameworkForXcode</code> 任务设置，该任务将您的多平台项目中的 iOS framework 连接到 Xcode 中的 iOS 应用。</p><p>当您将多平台项目中的 Kotlin 版本从 1.9.2x 升级到 2.0.0（或从 2.0.0 降级到 1.9.2x）时，然后更改 Kotlin 文件并尝试构建应用，Xcode 可能会错误地使用 iOS framework 的旧版本。因此，这些变更在 Xcode 中的 iOS 应用中将不可见。</p><p><strong>有什么临时解决方案？</strong></p><ol><li><p>在 Xcode 中，使用 <strong>Product</strong> | <strong>Clean Build Folder</strong> 清理构建目录。</p></li><li><p>在终端中，运行以下命令：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./gradlew clean</span></span></code></pre></div></li><li><p>再次构建应用以确保使用新版本的 iOS framework。</p></li></ol><p><strong>问题何时修复？</strong></p><p>我们计划在 Kotlin 2.0.10 中修复此问题。您可以查看 <a href="https://kotlinlang.org/docs/eap.html" target="_blank" rel="noreferrer">参与 Kotlin 抢先体验预览</a> 部分中是否有任何 Kotlin 2.0.10 的预览版本。</p><p>有关更多信息，请参阅 <a href="https://youtrack.jetbrains.com/issue/KT-68257" target="_blank" rel="noreferrer">YouTrack</a> 中的相应问题。</p><h2 id="kotlin-1-9-0−1-9-25" tabindex="-1">Kotlin 1.9.0−1.9.25 <a class="header-anchor" href="#kotlin-1-9-0−1-9-25" aria-label="Permalink to &quot;Kotlin 1.9.0−1.9.25&quot;">​</a></h2><p>本节涵盖了在 Kotlin 1.9.0−1.9.25 中结束弃用周期并生效的不兼容变更。</p>',26)),a[23]||(a[23]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"已弃用用于将-kotlin-源代码集直接添加到-kotlin-编译项的-api",tabindex:"-1"},[s("已弃用用于将 Kotlin 源代码集直接添加到 Kotlin 编译项的 API "),i("a",{class:"header-anchor",href:"#已弃用用于将-kotlin-源代码集直接添加到-kotlin-编译项的-api","aria-label":'Permalink to "已弃用用于将 Kotlin 源代码集直接添加到 Kotlin 编译项的 API {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[24]||(a[24]=t(`<p><strong>有何变更？</strong></p><p>对 <code>KotlinCompilation.source</code> 的访问已弃用。以下代码将产生弃用警告：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCustomIntermediateSourceSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        targets[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].compilations[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCustomIntermediateSourceSet)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>最佳实践是什么？</strong></p><p>要替换 <code>KotlinCompilation.source(someSourceSet)</code>，请从 <code>KotlinCompilation</code> 的默认源代码集添加 <code>dependsOn</code> 关系到 <code>someSourceSet</code>。我们建议使用 <code>by getting</code> 直接引用源代码，这样更短且更具可读性。但是，您也可以使用 <code>KotlinCompilation.defaultSourceSet.dependsOn(someSourceSet)</code>，这适用于所有情况。</p><p>您可以通过以下方式之一更改上述代码：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCustomIntermediateSourceSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 选项 #1. 更短且更具可读性，尽可能使用。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 通常，默认源代码集的名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 是目标名称和编译项名称的简单拼接：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCustomIntermediateSourceSet)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 选项 #2. 通用解决方案，如果您的构建脚本需要更高级的方法，请使用它：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        targets[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].compilations[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].defaultSourceSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCustomIntermediateSourceSet)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>变更何时生效？</strong></p><p>以下是计划的弃用周期：</p><ul><li>1.9.0: 当使用 <code>KotlinComplation.source</code> 时引入弃用警告</li><li>1.9.20: 将此警告升级为错误</li><li>2.2.0: 从 Kotlin Gradle 插件中移除 <code>KotlinComplation.source</code>，尝试使用它将在构建脚本编译项期间导致“未解析引用”错误</li></ul>`,10)),a[25]||(a[25]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"从-kotlin-js-gradle-插件迁移到-kotlin-multiplatform-gradle-插件",tabindex:"-1"},[s("从 "),i("code",null,"kotlin-js"),s(" Gradle 插件迁移到 "),i("code",null,"kotlin-multiplatform"),s(" Gradle 插件 "),i("a",{class:"header-anchor",href:"#从-kotlin-js-gradle-插件迁移到-kotlin-multiplatform-gradle-插件","aria-label":'Permalink to "从 `kotlin-js` Gradle 插件迁移到 `kotlin-multiplatform` Gradle 插件 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[26]||(a[26]=t("<p><strong>有何变更？</strong></p><p>从 Kotlin 1.9.0 开始，<code>kotlin-js</code> Gradle 插件已弃用。基本上，它复制了带有 <code>js()</code> 目标的 <code>kotlin-multiplatform</code> 插件的功能性，并内部共享相同的实现。这种重叠造成了混淆，并增加了 Kotlin 团队的维护负担。我们鼓励您迁移到带有 <code>js()</code> 目标的 <code>kotlin-multiplatform</code> Gradle 插件。</p><p><strong>最佳实践是什么？</strong></p>",3)),i("ol",null,[i("li",null,[a[3]||(a[3]=i("p",null,[s("如果您使用 "),i("code",null,"pluginManagement {}"),s(" 代码块，请从项目中移除 "),i("code",null,"kotlin-js"),s(" Gradle 插件并在 "),i("code",null,"settings.gradle.kts"),s(" 文件中应用 "),i("code",null,"kotlin-multiplatform"),s("：")],-1)),l(o,null,{default:e(()=>[l(p,{title:"kotlin-js"},{default:e(()=>a[1]||(a[1]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// settings.gradle.kts:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"pluginManagement"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // Remove the following line:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"js"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"1.9.0"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    repositories"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // ...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(p,{title:"kotlin-multiplatform"},{default:e(()=>a[2]||(a[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// settings.gradle.kts:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"pluginManagement"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // Add the following line instead:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"1.9.0"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    repositories"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // ...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[4]||(a[4]=i("p",null,[s("如果您使用不同的应用插件方式，请参阅 "),i("a",{href:"https://docs.gradle.org/current/userguide/plugins.html",target:"_blank",rel:"noreferrer"},"Gradle 文档"),s("获取迁移说明。")],-1))]),a[8]||(a[8]=i("li",null,[i("p",null,[s("将您的源代码文件从 "),i("code",null,"main"),s(" 和 "),i("code",null,"test"),s(" 文件夹移动到相同目录中的 "),i("code",null,"jsMain"),s(" 和 "),i("code",null,"jsTest"),s(" 文件夹。")])],-1)),i("li",null,[a[7]||(a[7]=t('<p>调整依赖项声明：</p><ul><li>我们建议使用 <code>sourceSets {}</code> 代码块并配置相应源代码集的依赖项，<code>jsMain {}</code> 用于生产依赖项，<code>jsTest {}</code> 用于测试依赖项。有关更多详细信息，请参阅<a href="./multiplatform-add-dependencies">添加依赖项</a>。</li><li>但是，如果您想在顶层代码块中声明依赖项，请将声明从 <code>api(&quot;group:artifact:1.0&quot;)</code> 更改为 <code>add(&quot;jsMainApi&quot;, &quot;group:artifact:1.0&quot;)</code> 等。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在这种情况下，请确保顶层 <code>dependencies {}</code> 代码块位于 <code>kotlin {}</code> 代码块<strong>之后</strong>。否则，您将收到“未找到配置”错误。</p></div><p>您可以通过以下方式之一更改您的 <code>build.gradle.kts</code> 文件中的代码：</p>',4)),l(o,null,{default:e(()=>[l(p,{title:"kotlin-js"},{default:e(()=>a[5]||(a[5]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle.kts:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"js"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"1.9.0"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    testImplementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"test"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-html:0.8.0"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // ...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(p,{title:"kotlin-multiplatform"},{default:e(()=>a[6]||(a[6]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle.kts:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"1.9.0"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // ...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 选项 #1. 在 sourceSets {} 代码块中声明依赖项：")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," jsMain "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"                // 此处不需要 js 前缀，您可以直接从顶层代码块复制粘贴")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"                implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-html:0.8.0"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"       }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 选项 #2. 为依赖项声明添加 js 前缀：")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    add"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"jsTestImplementation"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"test"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),a[9]||(a[9]=i("li",null,[i("p",null,[s("在大多数情况下，"),i("code",null,"kotlin {}"),s(" 代码块中由 Kotlin Gradle 插件提供的 DSL 保持不变。但是，如果您以前通过名称引用低层 Gradle 实体（如任务和配置），您现在需要调整它们，通常通过添加 "),i("code",null,"js"),s(" 前缀。例如，您可以在 "),i("code",null,"jsBrowserTest"),s(" 名称下找到 "),i("code",null,"browserTest"),s(" 任务。")])],-1))]),a[27]||(a[27]=i("p",null,[i("strong",null,"变更何时生效？")],-1)),a[28]||(a[28]=i("p",null,[s("在 1.9.0 中，使用 "),i("code",null,"kotlin-js"),s(" Gradle 插件会产生弃用警告。")],-1)),a[29]||(a[29]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"已弃用-jvmwithjava-预设",tabindex:"-1"},[s("已弃用 "),i("code",null,"jvmWithJava"),s(" 预设 "),i("a",{class:"header-anchor",href:"#已弃用-jvmwithjava-预设","aria-label":'Permalink to "已弃用 `jvmWithJava` 预设 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[30]||(a[30]=t('<p><strong>有何变更？</strong></p><p><code>targetPresets.jvmWithJava</code> 已弃用，不鼓励使用它。</p><p><strong>最佳实践是什么？</strong></p><p>请改用 <code>jvm { withJava() }</code> 目标。请注意，切换到 <code>jvm { withJava() }</code> 后，您需要调整包含 <code>.java</code> 源代码的目录路径。</p><p>例如，如果您使用名为“jvm”的 <code>jvm</code> 目标：</p><table tabindex="0"><thead><tr><th>之前</th><th>现在</th></tr></thead><tbody><tr><td><code>src/main/java</code></td><td><code>src/jvmMain/java</code></td></tr><tr><td><code>src/test/java</code></td><td><code>src/jvmTest/java</code></td></tr></tbody></table><p><strong>变更何时生效？</strong></p><p>以下是计划的弃用周期：</p><ul><li>1.3.40: 当使用 <code>targetPresets.jvmWithJava</code> 时引入警告</li><li>1.9.20: 将此警告升级为错误</li><li><blockquote><p>1.9.20: 移除 <code>targetPresets.jvmWithJava</code> API；尝试使用它将导致构建脚本编译项失败</p></blockquote></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>尽管整个 <code>targetPresets</code> API 已弃用，但 <code>jvmWithJava</code> 预设具有不同的弃用时间线。</p></div>',10)),a[31]||(a[31]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"已弃用传统-android-源代码集布局",tabindex:"-1"},[s("已弃用传统 Android 源代码集布局 "),i("a",{class:"header-anchor",href:"#已弃用传统-android-源代码集布局","aria-label":'Permalink to "已弃用传统 Android 源代码集布局 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[32]||(a[32]=t('<p><strong>有何变更？</strong></p><p><a href="./multiplatform-android-layout">新的 Android 源代码集布局</a>自 Kotlin 1.9.0 起默认使用。对传统布局的支持已弃用，并且使用 <code>kotlin.mpp.androidSourceSetLayoutVersion</code> Gradle 属性现在会触发弃用诊断。</p><p><strong>变更何时生效？</strong></p><p>以下是计划的弃用周期：</p><ul><li>&lt;=1.9.0: 当使用 <code>kotlin.mpp.androidSourceSetLayoutVersion=1</code> 时报告警告；此警告可以通过 <code>kotlin.mpp.androidSourceSetLayoutVersion1.nowarn=true</code> Gradle 属性抑制</li><li>1.9.20: 将此警告升级为错误；该错误<strong>无法</strong>抑制</li><li><blockquote><p>1.9.20: 移除对 <code>kotlin.mpp.androidSourceSetLayoutVersion=1</code> 的支持；Kotlin Gradle 插件将忽略该属性</p></blockquote></li></ul>',5)),a[33]||(a[33]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"已弃用带有自定义-dependson-的-commonmain-和-commontest",tabindex:"-1"},[s("已弃用带有自定义 "),i("code",null,"dependsOn"),s(" 的 "),i("code",null,"commonMain"),s(" 和 "),i("code",null,"commonTest"),s(),i("a",{class:"header-anchor",href:"#已弃用带有自定义-dependson-的-commonmain-和-commontest","aria-label":'Permalink to "已弃用带有自定义 `dependsOn` 的 `commonMain` 和 `commonTest` {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[34]||(a[34]=t("<p><strong>有何变更？</strong></p><p><code>commonMain</code> 和 <code>commonTest</code> 源代码集通常分别代表 <code>main</code> 和 <code>test</code> 源代码集层级的根。然而，通过手动配置这些源代码集的 <code>dependsOn</code> 关系，可以覆盖这一点。</p><p>维护此类配置需要额外精力以及多平台构建内部知识。此外，它会降低代码可读性和可重用性，因为您需要阅读特定的构建脚本才能确定 <code>commonMain</code> 是否是 <code>main</code> 源代码集层级的根。</p><p>因此，对 <code>commonMain</code> 和 <code>commonTest</code> 上的 <code>dependsOn</code> 的访问现已弃用。</p><p><strong>最佳实践是什么？</strong></p><p>假设您需要将使用 <code>commonMain.dependsOn(customCommonMain)</code> 的 <code>customCommonMain</code> 源代码集迁移到 1.9.20。在大多数情况下，<code>customCommonMain</code> 参与的编译项与 <code>commonMain</code> 相同，因此您可以将 <code>customCommonMain</code> 合并到 <code>commonMain</code>：</p><ol><li>将 <code>customCommonMain</code> 的源代码复制到 <code>commonMain</code> 中。</li><li>将 <code>customCommonMain</code> 的所有依赖项添加到 <code>commonMain</code>。</li><li>将 <code>customCommonMain</code> 的所有编译器选项设置添加到 <code>commonMain</code>。</li></ol><p>在少数情况下，<code>customCommonMain</code> 可能参与比 <code>commonMain</code> 更多的编译项。这样的配置需要额外的低层构建脚本配置。如果您不确定这是否是您的用例，那么它很可能不是。</p><p>如果是您的用例，请通过将 <code>customCommonMain</code> 的源代码和设置移动到 <code>commonMain</code>，反之亦然，来“交换”这两个源代码集。</p><p><strong>变更何时生效？</strong></p><p>以下是计划的弃用周期：</p><ul><li>1.9.0: 在 <code>commonMain</code> 中使用 <code>dependsOn</code> 时报告警告</li><li><blockquote><p>=1.9.20: 当在 <code>commonMain</code> 或 <code>commonTest</code> 中使用 <code>dependsOn</code> 时报告错误</p></blockquote></li></ul>",12)),a[35]||(a[35]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"前向声明的新方法",tabindex:"-1"},[s("前向声明的新方法 "),i("a",{class:"header-anchor",href:"#前向声明的新方法","aria-label":'Permalink to "前向声明的新方法 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[36]||(a[36]=t(`<p><strong>有何变更？</strong></p><p>JetBrains 团队改进了 Kotlin 中前向声明的方法，以使其行为更可预测：</p><ul><li>您只能使用 <code>cnames</code> 或 <code>objcnames</code> 包导入前向声明。</li><li>您需要显式进行到和从相应的 C 和 Objective-C 前向声明的类型转换。</li></ul><p><strong>最佳实践是什么？</strong></p><ul><li><p>考虑一个带有 <code>library.package</code> 的 C 库，它声明了一个 <code>cstructName</code> 前向声明。以前，可以直接从库中导入它，使用 <code>import library.package.cstructName</code>。现在，您只能为此使用一个特殊的前向声明包：<code>import cnames.structs.cstructName</code>。对于 <code>objcnames</code> 也是如此。</p></li><li><p>考虑两个 objcinterop 库：一个使用 <code>objcnames.protocols.ForwardDeclaredProtocolProtocol</code>，另一个具有实际定义：</p><div class="language-ObjC vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ObjC</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// First objcinterop library</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;Foundation/Foundation.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@protocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ForwardDeclaredProtocol;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consumeProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;ForwardDeclaredProtocol&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSString</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stringWithUTF8String:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Protocol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-ObjC vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ObjC</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Second objcinterop library</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Header:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;Foundation/Foundation.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@protocol</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ForwardDeclaredProtocol</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Implementation:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ForwardDeclaredProtocolImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;ForwardDeclaredProtocol&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;ForwardDeclaredProtocol&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">produceProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ForwardDeclaredProtocolImpl </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以前，可以在它们之间无缝地传输对象。现在，对于前向声明，需要显式 <code>as</code> 类型转换：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin code:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    consumeProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">produceProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> objcnames.protocols.ForwardDeclaredProtocolProtocol)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您只能从相应的实际类转换为 <code>objcnames.protocols.ForwardDeclaredProtocolProtocol</code>。 否则，您将收到错误。</p></div></li></ul><p><strong>变更何时生效？</strong></p><p>从 Kotlin 1.9.20 开始，您需要显式进行到和从相应的 C 和 Objective-C 前向声明的类型转换。此外，现在只能通过使用特殊包来导入前向声明。</p><h2 id="kotlin-1-7-0−1-8-22" tabindex="-1">Kotlin 1.7.0−1.8.22 <a class="header-anchor" href="#kotlin-1-7-0−1-8-22" aria-label="Permalink to &quot;Kotlin 1.7.0−1.8.22&quot;">​</a></h2><p>本节涵盖了在 Kotlin 1.7.0−1.8.22 中结束弃用周期并生效的不兼容变更。</p>`,9)),a[37]||(a[37]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"已弃用与-kotlin-multiplatform-gradle-插件和-gradle-java-插件的兼容性",tabindex:"-1"},[s("已弃用与 Kotlin Multiplatform Gradle 插件和 Gradle Java 插件的兼容性 "),i("a",{class:"header-anchor",href:"#已弃用与-kotlin-multiplatform-gradle-插件和-gradle-java-插件的兼容性","aria-label":'Permalink to "已弃用与 Kotlin Multiplatform Gradle 插件和 Gradle Java 插件的兼容性 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[38]||(a[38]=t(`<p><strong>有何变更？</strong></p><p>由于 Kotlin Multiplatform Gradle 插件与 Gradle 插件 <a href="https://docs.gradle.org/current/userguide/java_plugin.html" target="_blank" rel="noreferrer">Java</a>、<a href="https://docs.gradle.org/current/userguide/java_library_plugin.html" target="_blank" rel="noreferrer">Java Library</a> 和 <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a> 之间的兼容性问题，当您将这些插件应用到同一个项目时，现在会收到弃用警告。当您的多平台项目中的另一个 Gradle 插件应用了 Gradle Java 插件时，也会出现此警告。例如，<a href="https://docs.spring.io/spring-boot/gradle-plugin/index.html" target="_blank" rel="noreferrer">Spring Boot Gradle Plugin</a> 会自动应用 Application 插件。</p><p>我们添加此弃用警告是由于 Kotlin Multiplatform 的项目模型与 Gradle 的 Java 生态系统插件之间存在根本性的兼容性问题。Gradle 的 Java 生态系统插件目前未考虑到其他插件可能：</p><ul><li>也以与 Java 生态系统插件不同的方式为 JVM 目标发布或编译。</li><li>在同一个项目中有两个不同的 JVM 目标，例如 JVM 和 Android。</li><li>拥有复杂的多平台项目结构，可能包含多个非 JVM 目标。</li></ul><p>不幸的是，Gradle 目前没有提供任何 API 来解决这些问题。</p><p>我们以前在 Kotlin Multiplatform 中使用了一些临时解决方案来帮助集成 Java 生态系统插件。然而，这些临时解决方案从未真正解决兼容性问题，并且自 Gradle 8.8 发布以来，这些临时解决方案已不再可能。有关更多信息，请参阅我们的 <a href="https://youtrack.jetbrains.com/issue/KT-66542/Gradle-JVM-target-with-withJava-produces-a-deprecation-warning" target="_blank" rel="noreferrer">YouTrack 问题</a>。</p><p>虽然我们尚不清楚如何精确解决此兼容性问题，但我们致力于继续支持您的 Kotlin Multiplatform 项目中某种形式的 Java 源代码编译。至少，我们将支持 Java 源代码的编译以及在您的多平台项目中使用 Gradle 的 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaBasePlugin.html" target="_blank" rel="noreferrer"><code>java-base</code></a> 插件。</p><p><strong>最佳实践是什么？</strong></p><p>如果您在多平台项目中看到此弃用警告，我们建议您：</p><ol><li>确定您的项目中是否实际需要 Gradle Java 插件。如果不需要，请考虑移除它。</li><li>检查 Gradle Java 插件是否仅用于单个任务。如果是，您可能可以不费太多力气就移除该插件。例如，如果任务使用 Gradle Java 插件创建 Javadoc JAR 文件，您可以手动定义 Javadoc 任务。</li></ol><p>否则，如果您想在多平台项目中使用 Kotlin Multiplatform Gradle 插件和这些用于 Java 的 Gradle 插件，我们建议您：</p><ol><li>在您的 Gradle 项目中创建一个单独的子项目。</li><li>在单独的子项目中，应用 Gradle Java 插件。</li><li>在单独的子项目中，添加对父多平台项目的依赖项。</li></ol><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>单独的子项目<strong>不得</strong>是多平台项目，并且您只能使用它来设置对您的多平台项目的依赖项。</p></div><p>例如，您有一个名为 <code>my-main-project</code> 的多平台项目，并且您想使用 <a href="https://docs.gradle.org/current/userguide/java_library_plugin.html" target="_blank" rel="noreferrer">Java Library</a> Gradle 插件。</p><p>一旦您创建了一个子项目，我们称之为 <code>subproject-A</code>，您的父项目结构应该像这样：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── build.gradle</span></span>
<span class="line"><span>├── settings.gradle.kts</span></span>
<span class="line"><span>├── subproject-A</span></span>
<span class="line"><span>    └── build.gradle.kts</span></span>
<span class="line"><span>    └── src</span></span>
<span class="line"><span>        └── Main.java</span></span></code></pre></div><p>在您子项目的 <code>build.gradle.kts</code> 文件中，在 <code>plugins {}</code> 代码块中应用 Java Library 插件：</p>`,17)),l(o,{group:"build-script"},{default:e(()=>[l(p,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>a[10]||(a[10]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    id"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"java-library"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(p,{title:"Groovy","group-key":"groovy"},{default:e(()=>a[11]||(a[11]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'java-library'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[39]||(a[39]=i("p",null,[s("在您子项目的 "),i("code",null,"build.gradle.kts"),s(" 文件中，添加对父多平台项目的依赖项：")],-1)),l(o,{group:"build-script"},{default:e(()=>[l(p,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>a[12]||(a[12]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"project"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'":my-main-project"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// The name of your parent multiplatform project")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(p,{title:"Groovy","group-key":"groovy"},{default:e(()=>a[13]||(a[13]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation project("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"':my-main-project'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// The name of your parent multiplatform project")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[40]||(a[40]=i("p",null,"您的父项目现在已设置为与这两个插件一起工作。",-1)),a[41]||(a[41]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"自动生成目标的新方法",tabindex:"-1"},[s("自动生成目标的新方法 "),i("a",{class:"header-anchor",href:"#自动生成目标的新方法","aria-label":'Permalink to "自动生成目标的新方法 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[42]||(a[42]=t("<p><strong>有何变更？</strong></p><p>由 Gradle 自动生成的目标访问器在 <code>kotlin.targets {}</code> 代码块内不再可用。请改用 <code>findByName(&quot;targetName&quot;)</code> 方法。</p><p>请注意，此类访问器在 <code>kotlin.targets {}</code> 情况下仍然可用，例如 <code>kotlin.targets.linuxX64</code>。</p><p><strong>最佳实践是什么？</strong></p>",4)),i("table",null,[a[14]||(a[14]=i("tr",null,[i("td",null,"之前"),i("td",null,"现在")],-1)),i("tr",null,[i("td",null,[l(n,{lang:"kotlin",code:`kotlin {
    targets {
        configure(['windows',
            'linux']) {
        }
    }
}`})]),i("td",null,[l(n,{lang:"kotlin",code:`kotlin {
    targets {
        configure([findByName('windows'),
            findByName('linux')]) {
        }
    }
}`})])])]),a[43]||(a[43]=i("p",null,[i("strong",null,"变更何时生效？")],-1)),a[44]||(a[44]=i("p",null,[s("在 Kotlin 1.7.20 中，当在 "),i("code",null,"kotlin.targets {}"),s(" 代码块中使用目标访问器时，会引入错误。")],-1)),a[45]||(a[45]=i("p",null,[s("有关更多信息，请参阅 "),i("a",{href:"https://youtrack.jetbrains.com/issue/KT-47047",target:"_blank",rel:"noreferrer"},"YouTrack"),s(" 中的相应问题。")],-1)),a[46]||(a[46]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"gradle-输入和输出编译任务的变更",tabindex:"-1"},[s("Gradle 输入和输出编译任务的变更 "),i("a",{class:"header-anchor",href:"#gradle-输入和输出编译任务的变更","aria-label":'Permalink to "Gradle 输入和输出编译任务的变更 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[47]||(a[47]=t('<p><strong>有何变更？</strong></p><p>Kotlin 编译任务不再继承具有 <code>sourceCompatibility</code> 和 <code>targetCompatibility</code> 输入的 Gradle <code>AbstractCompile</code> 任务，导致它们在 Kotlin 用户脚本中不可用。</p><p>编译任务中的其他破坏性变更：</p><p><strong>最佳实践是什么？</strong></p><table tabindex="0"><thead><tr><th>之前</th><th>现在</th></tr></thead><tbody><tr><td><code>SourceTask.stableSources</code> 输入不再可用。</td><td>请改用 <code>sources</code> 输入。此外，<code>setSource()</code> 方法仍然可用。</td></tr><tr><td><code>sourceFilesExtensions</code> 输入已移除。</td><td>编译任务仍然实现了 <code>PatternFilterable</code> 接口。请使用其方法过滤 Kotlin 源代码。</td></tr><tr><td><code>Gradle destinationDir: File</code> 输出已弃用。</td><td>请改用 <code>destinationDirectory: DirectoryProperty</code> 输出。</td></tr><tr><td><code>KotlinCompile</code> 任务的 <code>classpath</code> 属性已弃用。</td><td>所有编译任务现在都使用 <code>libraries</code> 输入来获取编译所需的库列表。</td></tr></tbody></table><p><strong>变更何时生效？</strong></p><p>在 Kotlin 1.7.20 中，输入不可用，输出已替换，并且 <code>classpath</code> 属性已弃用。</p><p>有关更多信息，请参阅 <a href="https://youtrack.jetbrains.com/issue/KT-32805" target="_blank" rel="noreferrer">YouTrack</a> 中的相应问题。</p>',8)),a[48]||(a[48]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"编译项依赖项的新配置名称",tabindex:"-1"},[s("编译项依赖项的新配置名称 "),i("a",{class:"header-anchor",href:"#编译项依赖项的新配置名称","aria-label":'Permalink to "编译项依赖项的新配置名称 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[49]||(a[49]=t("<p><strong>有何变更？</strong></p><p>由 Kotlin Multiplatform Gradle 插件创建的编译项配置获得了新名称。</p><p>Kotlin Multiplatform 项目中的一个目标有两个默认编译项：<code>main</code> 和 <code>test</code>。每个编译项都有其自身的默认源代码集，例如 <code>jvmMain</code> 和 <code>jvmTest</code>。以前，测试编译项及其默认源代码集的配置名称相同，这可能导致名称冲突，从而在标记有平台特有属性的配置包含在另一个配置中时产生问题。</p><p>现在编译项配置有一个额外的 <code>Compilation</code> 后缀，而使用旧的硬编码配置名称的项目和插件将不再编译。</p><p>相应源代码集的依赖项配置名称保持不变。</p><p><strong>最佳实践是什么？</strong></p>",6)),i("table",null,[a[19]||(a[19]=i("tr",null,[i("td"),i("td",null,"之前"),i("td",null,"现在")],-1)),i("tr",null,[a[15]||(a[15]=i("td",{rowspan:"2"},[i("code",null,"jvmMain"),s(" 编译项的依赖项")],-1)),i("td",null,[l(n,{lang:"kotlin",code:"jvm<Scope>"})]),i("td",null,[l(n,{lang:"kotlin",code:"jvmCompilation<Scope>"})])]),i("tr",null,[i("td",null,[l(n,{lang:"kotlin",code:`dependencies {
    add("jvmImplementation",
        "foo.bar.baz:1.2.3")
}`})]),i("td",null,[l(n,{lang:"kotlin",code:`dependencies {
    add("jvmCompilationImplementation",
        "foo.bar.baz:1.2.3")
}`})])]),i("tr",null,[a[16]||(a[16]=i("td",null,[i("code",null,"jvmMain"),s(" 源代码集的依赖项")],-1)),i("td",E,[l(n,{lang:"kotlin",code:"jvmMain<Scope>"})])]),i("tr",null,[a[17]||(a[17]=i("td",null,[i("code",null,"jvmTest"),s(" 编译项的依赖项")],-1)),i("td",null,[l(n,{lang:"kotlin",code:"jvmTest<Scope>"})]),i("td",null,[l(n,{lang:"kotlin",code:"jvmTestCompilation<Scope>"})])]),i("tr",null,[a[18]||(a[18]=i("td",null,[i("code",null,"jvmTest"),s(" 源代码集的依赖项")],-1)),i("td",u,[l(n,{lang:"kotlin",code:"jvmTest<Scope>"})])])]),a[50]||(a[50]=t('<p>可用的作用域包括 <code>Api</code>、<code>Implementation</code>、<code>CompileOnly</code> 和 <code>RuntimeOnly</code>。</p><p><strong>变更何时生效？</strong></p><p>在 Kotlin 1.8.0 中，当在硬编码字符串中使用旧配置名称时，会引入错误。</p><p>有关更多信息，请参阅 <a href="https://youtrack.jetbrains.com/issue/KT-35916/" target="_blank" rel="noreferrer">YouTrack</a> 中的相应问题。</p>',4))])}const j=h(g,[["render",m]]);export{A as __pageData,j as default};
