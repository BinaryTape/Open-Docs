import{_ as t,a,b as i}from"./chunks/waiting-for-changes.B2D0TX8R.js";import{_ as s,c as o,o as n,ag as r}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"開發伺服器和連續編譯","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/dev-server-continuous-compilation.md","filePath":"zh-Hant/kotlin/dev-server-continuous-compilation.md","lastUpdated":1754307826000}'),l={name:"zh-Hant/kotlin/dev-server-continuous-compilation.md"};function p(d,e,c,h,m,_){return n(),o("div",null,e[0]||(e[0]=[r('<h1 id="開發伺服器和連續編譯" tabindex="-1">開發伺服器和連續編譯 <a class="header-anchor" href="#開發伺服器和連續編譯" aria-label="Permalink to &quot;開發伺服器和連續編譯&quot;">​</a></h1><p>為了避免每次想看到所做更改時都手動編譯並執行 Kotlin/JS 專案，您可以使用 <em>連續編譯</em> 模式。您無需使用常規的 <code>run</code> 命令，而是以 <em>連續</em> 模式呼叫 Gradle 包裝器：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --continuous</span></span></code></pre></div><p>如果您正在 IntelliJ IDEA 中工作，您可以透過 <em>執行組態</em> 傳遞相同的旗標。首次從 IDE 執行 Gradle 的 <code>run</code> 任務後，IntelliJ IDEA 會自動為其產生一個執行組態，您可以編輯該組態：</p><p><img src="'+t+'" alt="在 IntelliJ IDEA 中編輯執行組態" width="700"></p><p>透過 <strong>執行/除錯組態</strong> 對話框啟用連續模式，就像將 <code>--continuous</code> 旗標新增到執行組態的引數中一樣簡單：</p><p><img src="'+a+'" alt="在 IntelliJ IDEA 中將連續旗標新增到執行組態" width="700"></p><p>執行此執行組態時，您會注意到 Gradle 程序會持續監控程式碼的變更：</p><p><img src="'+i+'" alt="Gradle 等待變更" width="700"></p><p>一旦偵測到變更，程式碼將會自動重新編譯。如果瀏覽器中仍開啟著該頁面，開發伺服器將觸發頁面自動重新載入，並且這些變更將會可見。這要歸功於整合的 <code>webpack-dev-server</code>，該伺服器由 Kotlin 多平台 Gradle 外掛程式管理。</p>',10)]))}const v=s(l,[["render",p]]);export{g as __pageData,v as default};
