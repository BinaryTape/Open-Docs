import{_ as u,C as t,c as y,o as m,j as s,G as e,ag as p,a,w as l}from"./chunks/framework.Bksy39di.js";const R=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/docker.md","filePath":"ktor/docker.md","lastUpdated":1755457140000}'),F={name:"ktor/docker.md"};function b(C,i,v,D,f,_){const k=t("show-structure"),r=t("tldr"),o=t("web-summary"),d=t("link-summary"),n=t("TabItem"),h=t("Tabs"),g=t("code-block"),E=t("list"),c=t("tip");return m(),y("div",null,[i[10]||(i[10]=s("h1",{id:"docker",tabindex:"-1"},[a("Docker "),s("a",{class:"header-anchor",href:"#docker","aria-label":'Permalink to "Docker"'},"​")],-1)),e(k,{for:"chapter",depth:"2"}),e(r,null,{default:l(()=>i[0]||(i[0]=[s("p",null,[s("b",null,"代码示例"),a(": "),s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/deployment-ktor-plugin"}," deployment-ktor-plugin ")],-1)])),_:1}),e(o,null,{default:l(()=>i[1]||(i[1]=[a(" 了解如何将 Ktor 应用程序部署到 Docker 容器中，该容器可以在本地或您选择的云服务提供商上运行。 ")])),_:1}),e(d,null,{default:l(()=>i[2]||(i[2]=[a(" 了解如何将您的应用程序部署到 Docker 容器中。 ")])),_:1}),i[11]||(i[11]=p('<p>在本节中，我们将了解如何使用 <a href="https://github.com/ktorio/ktor-build-plugins" target="_blank" rel="noreferrer">Ktor Gradle plugin</a> 来打包、运行和使用 <a href="https://www.docker.com" target="_blank" rel="noreferrer">Docker</a> 部署应用程序。</p><h2 id="install-plugin" tabindex="-1">安装 Ktor 插件 <a class="header-anchor" href="#install-plugin" aria-label="Permalink to &quot;安装 Ktor 插件 {id=&quot;install-plugin&quot;}&quot;">​</a></h2><p>要安装 Ktor 插件，请将其添加到 <code>build.gradle.(kts)</code> 文件中的 <code>plugins</code> 代码块：</p>',3)),e(h,{group:"languages"},{default:l(()=>[e(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:l(()=>i[3]||(i[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    id"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"io.ktor.plugin"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"3.2.3"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),s("p",{"interpolate-variables":"true"},null,-1)])),_:1}),e(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:l(()=>i[4]||(i[4]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"io.ktor.plugin"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"3.2.3"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),s("p",{"interpolate-variables":"true"},null,-1)])),_:1})]),_:1}),i[12]||(i[12]=p(`<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>如果您将 Ktor Gradle 插件与 Kotlin Multiplatform Gradle 插件一起应用，Docker 集成将自动禁用。 要能够一起使用它们： 1. 创建一个仅限 JVM 的项目，并如上所示应用 Ktor Gradle 插件。 2. 将 Kotlin Multiplatform 项目作为依赖项添加到该仅限 JVM 的项目。 如果此变通方法无法为您解决问题，请在 <a href="https://youtrack.jetbrains.com/issue/KTOR-8464" target="_blank" rel="noreferrer">KTOR-8464</a> 中留言告知我们。</p></div><h2 id="tasks" tabindex="-1">插件任务 <a class="header-anchor" href="#tasks" aria-label="Permalink to &quot;插件任务 {id=&quot;tasks&quot;}&quot;">​</a></h2><p><a href="#install-plugin">安装</a> 插件后，以下任务可用于打包、运行和部署应用程序：</p><ul><li><code>buildImage</code>：将项目的 Docker 镜像构建为 tarball。此任务会在 <code>build</code> 目录中生成一个 <code>jib-image.tar</code> 文件。您可以使用 <a href="https://docs.docker.com/engine/reference/commandline/load/" target="_blank" rel="noreferrer">docker load</a> 命令将此镜像加载到 Docker 守护进程：<div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/jib-image.tar</span></span></code></pre></div></li><li><code>publishImageToLocalRegistry</code>：构建并发布项目的 Docker 镜像到本地注册表。</li><li><code>runDocker</code>：将项目的镜像构建到 Docker 守护进程并运行它。执行此任务将启动 Ktor 服务器，默认情况下在 <code>http://0.0.0.0:8080</code> 上响应。如果您的服务器配置为使用另一个端口，您可以调整<a href="#port-mapping">端口映射</a>。</li><li><code>publishImage</code>：构建并发布项目的 Docker 镜像到外部注册表，例如 <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a> 或 <a href="https://cloud.google.com/container-registry" target="_blank" rel="noreferrer">Google Container Registry</a>。请注意，对于此任务，您需要使用 <strong><a href="#external-registry">ktor.docker.externalRegistry</a></strong> 属性配置外部注册表。</li></ul><p>请注意，默认情况下，这些任务会构建名为 <code>ktor-docker-image</code>、标签为 <code>latest</code> 的镜像。您可以在<a href="#name-tag">插件配置</a>中自定义这些值。</p><h2 id="configure-plugin" tabindex="-1">配置 Ktor 插件 <a class="header-anchor" href="#configure-plugin" aria-label="Permalink to &quot;配置 Ktor 插件 {id=&quot;configure-plugin&quot;}&quot;">​</a></h2><p>要配置与 Docker 任务相关的 Ktor 插件设置，请在 <code>build.gradle.(kts)</code> 文件中使用 <code>ktor.docker</code> 扩展：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="jre-version" tabindex="-1">JRE 版本 <a class="header-anchor" href="#jre-version" aria-label="Permalink to &quot;JRE 版本 {id=&quot;jre-version&quot;}&quot;">​</a></h3><p><code>jreVersion</code> 属性指定要在镜像中使用的 JRE 版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jreVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaVersion.VERSION_17)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="name-tag" tabindex="-1">镜像名称和标签 <a class="header-anchor" href="#name-tag" aria-label="Permalink to &quot;镜像名称和标签 {id=&quot;name-tag&quot;}&quot;">​</a></h3><p>如果您需要自定义镜像名称和标签，请分别使用 <code>localImageName</code> 和 <code>imageTag</code> 属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        localImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sample-docker-image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        imageTag.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.1-preview&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="port-mapping" tabindex="-1">端口映射 <a class="header-anchor" href="#port-mapping" aria-label="Permalink to &quot;端口映射 {id=&quot;port-mapping&quot;}&quot;">​</a></h3><p>默认情况下，<a href="#tasks">runDocker</a> 任务会将 <code>8080</code> 容器端口发布到 <code>8080</code> Docker 主机端口。如果需要，您可以使用 <code>portMappings</code> 属性更改这些端口。如果您的服务器<a href="./server-configuration-file#predefined-properties">配置</a>为使用另一个端口，这可能会很有用。</p><p>以下示例展示了如何将 <code>8080</code> 容器端口映射到 <code>80</code> Docker 主机端口。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        portMappings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            io.ktor.plugin.features.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DockerPortMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                io.ktor.plugin.features.DockerPortMappingProtocol.TCP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这种情况下，您可以通过 <code>http://0.0.0.0:80</code> 访问服务器。</p><h3 id="external-registry" tabindex="-1">外部注册表 <a class="header-anchor" href="#external-registry" aria-label="Permalink to &quot;外部注册表 {id=&quot;external-registry&quot;}&quot;">​</a></h3><p>在使用 <strong><a href="#tasks">publishImage</a></strong> 任务将项目的 Docker 镜像发布到外部注册表之前，您需要使用 <code>ktor.docker.externalRegistry</code> 属性配置外部注册表。此属性接受 <code>DockerImageRegistry</code> 实例，该实例为所需注册表类型提供配置：</p><ul><li><code>DockerImageRegistry.dockerHub</code>：为 <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a> 创建一个 <code>DockerImageRegistry</code>。</li><li><code>DockerImageRegistry.googleContainerRegistry</code>：为 <a href="https://cloud.google.com/container-registry" target="_blank" rel="noreferrer">Google Container Registry</a> 创建一个 <code>DockerImageRegistry</code>。</li></ul><p>以下示例展示了如何配置 Docker Hub 注册表：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        externalRegistry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            io.ktor.plugin.features.DockerImageRegistry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dockerHub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                appName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ktor-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> providers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">environmentVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOCKER_HUB_USERNAME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> providers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">environmentVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOCKER_HUB_PASSWORD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>请注意，Docker Hub 的名称和密码是从环境变量中获取的，因此您需要在运行 <code>publishImage</code> 任务之前设置这些值：</p>`,25)),e(h,{group:"os"},{default:l(()=>[e(n,{title:"Linux/macOS","group-key":"unix"},{default:l(()=>i[5]||(i[5]=[s("div",{class:"language-Bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"Bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"export"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," DOCKER_HUB_USERNAME"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"yourHubUsername")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"export"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," DOCKER_HUB_PASSWORD"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"yourHubPassword")])])])],-1)])),_:1}),e(n,{title:"Windows","group-key":"windows"},{default:l(()=>i[6]||(i[6]=[s("div",{class:"language-Bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"Bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"setx"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," DOCKER_HUB_USERNAME"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," yourHubUsername")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"setx"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," DOCKER_HUB_PASSWORD"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," yourHubPassword")])])])],-1)])),_:1})]),_:1}),i[13]||(i[13]=p('<h2 id="manual" tabindex="-1">手动镜像配置 <a class="header-anchor" href="#manual" aria-label="Permalink to &quot;手动镜像配置 {id=&quot;manual&quot;}&quot;">​</a></h2><p>如果需要，您可以提供自己的 <code>Dockerfile</code> 来组装包含 Ktor 应用程序的镜像。</p><h3 id="packagea-pp" tabindex="-1">打包应用程序 <a class="header-anchor" href="#packagea-pp" aria-label="Permalink to &quot;打包应用程序 {id=&quot;packagea-pp&quot;}&quot;">​</a></h3><p>第一步，您需要将应用程序及其依赖项打包。例如，这可能是一个 <a href="./server-fatjar">fat JAR</a> 或一个<a href="./server-packaging">可执行 JVM 应用程序</a>。</p><h3 id="prepare-docker" tabindex="-1">准备 Docker 镜像 <a class="header-anchor" href="#prepare-docker" aria-label="Permalink to &quot;准备 Docker 镜像 {id=&quot;prepare-docker&quot;}&quot;">​</a></h3><p>为了将应用程序 Docker化，我们将使用<a href="https://docs.docker.com/develop/develop-images/multistage-build/" target="_blank" rel="noreferrer">多阶段构建</a>：</p><ol><li>首先，我们将为 Gradle/Maven 依赖项设置缓存。此步骤是可选的，但建议执行，因为它能提高整体构建速度。</li><li>然后，我们将使用 <code>gradle</code>/<code>maven</code> 镜像生成包含应用程序的 fat JAR。</li><li>最后，生成的发行版将在基于 JDK 镜像创建的环境中运行。</li></ol><p>在项目的根文件夹中，创建一个名为 <code>Dockerfile</code> 的文件，其内容如下：</p>',8)),e(h,{group:"languages"},{default:l(()=>[e(n,{title:"Gradle","group-key":"kotlin"},{default:l(()=>[e(g,{lang:"Docker",code:`# Stage 1: Cache Gradle dependencies
FROM gradle:latest AS cache
RUN mkdir -p /home/gradle/cache_home
ENV GRADLE_USER_HOME=/home/gradle/cache_home
COPY build.gradle.* gradle.properties /home/gradle/app/
COPY gradle /home/gradle/app/gradle
WORKDIR /home/gradle/app
RUN gradle clean build -i --stacktrace

# Stage 2: Build Application
FROM gradle:latest AS build
COPY --from=cache /home/gradle/cache_home /home/gradle/.gradle
COPY --chown=gradle:gradle . /home/gradle/src
WORKDIR /home/gradle/src
# Build the fat JAR, Gradle also supports shadow
# and boot JAR by default.
RUN gradle buildFatJar --no-daemon

# Stage 3: Create the Runtime Image
FROM amazoncorretto:22 AS runtime
EXPOSE 8080
RUN mkdir /app
COPY --from=build /home/gradle/src/build/libs/*.jar /app/ktor-docker-sample.jar
ENTRYPOINT ["java","-jar","/app/ktor-docker-sample.jar"]`})]),_:1}),e(n,{title:"Maven","group-key":"maven"},{default:l(()=>i[7]||(i[7]=[s("div",{class:"language-Docker vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"Docker"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# Stage 1: Cache Maven dependencies")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"FROM"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," maven:3.8-amazoncorretto-21 "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"AS"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," cache")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"WORKDIR"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," /app")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," pom.xml .")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"RUN"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," mvn dependency:go-offline")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# Stage 2: Build Application")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"FROM"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," maven:3.8-amazoncorretto-21 "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"AS"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," build")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"WORKDIR"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," /app")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," --from=cache /root/.m2 /root/.m2")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," . .")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"RUN"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," mvn clean package")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# Stage 3: Create the Runtime Image")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"FROM"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," amazoncorretto:21-slim "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"AS"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," runtime")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"EXPOSE"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," 8080")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"WORKDIR"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," /app")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," --from=build /app/target/*-with-dependencies.jar app.jar")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"ENTRYPOINT"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"java"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-jar"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"app.jar"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")])])])],-1)])),_:1})]),_:1}),i[14]||(i[14]=s("p",null,"第一个阶段确保只有当构建相关文件发生更改时，依赖项才会被重新下载。如果未使用第一个阶段，或者依赖项未在其他阶段中缓存，则每次构建时都会安装依赖项。",-1)),i[15]||(i[15]=s("p",null,"在第二个阶段，fat JAR 会被构建。请注意，Gradle 默认也支持 shadow 和 boot JAR。",-1)),i[16]||(i[16]=s("p",null,"构建的第三个阶段按以下方式工作：",-1)),i[17]||(i[17]=s("ul",null,[s("li",null,"指示将要使用的镜像。"),s("li",null,"指定暴露的端口（这不会自动暴露端口，而是在运行容器时完成）。"),s("li",null,"将构建输出中的内容复制到文件夹。"),s("li",null,[a("运行应用程序 ("),s("code",null,"ENTRYPOINT"),a(")。")])],-1)),e(c,{id:"jdk_image_replacement_tip"},{default:l(()=>[i[9]||(i[9]=s("p",null," 此示例使用 Amazon Corretto Docker 镜像，但您可以将其替换为任何其他合适的替代方案，例如以下选项： ",-1)),e(E,null,{default:l(()=>i[8]||(i[8]=[s("li",null,[s("a",{href:"https://hub.docker.com/_/eclipse-temurin"},"Eclipse Temurin")],-1),s("li",null,[s("a",{href:"https://hub.docker.com/_/ibm-semeru-runtimes"},"IBM Semeru")],-1),s("li",null,[s("a",{href:"https://hub.docker.com/_/ibmjava"},"IBM Java")],-1),s("li",null,[s("a",{href:"https://hub.docker.com/_/sapmachine"},"SAP Machine JDK")],-1)])),_:1})]),_:1}),i[18]||(i[18]=p('<h3 id="build-run" tabindex="-1">构建并运行 Docker 镜像 <a class="header-anchor" href="#build-run" aria-label="Permalink to &quot;构建并运行 Docker 镜像 {id=&quot;build-run&quot;}&quot;">​</a></h3><p>下一步是构建并标记 Docker 镜像：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-application</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>最后，启动镜像：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:8080</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-application</span></span></code></pre></div><p>这将启动 Ktor 服务器，在 <code>https://0.0.0.0:8080</code> 上响应。</p>',6))])}const A=u(F,[["render",b]]);export{R as __pageData,A as default};
