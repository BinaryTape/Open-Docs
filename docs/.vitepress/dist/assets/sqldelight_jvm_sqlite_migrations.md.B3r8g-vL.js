import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"迁移","description":"","frontmatter":{},"headers":[],"relativePath":"sqldelight/jvm_sqlite/migrations.md","filePath":"sqldelight/jvm_sqlite/migrations.md","lastUpdated":1748435462000}'),t={name:"sqldelight/jvm_sqlite/migrations.md"};function l(h,s,p,k,d,r){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="迁移" tabindex="-1">迁移 <a class="header-anchor" href="#迁移" aria-label="Permalink to &quot;迁移&quot;">​</a></h1><p>一个 <code>.sq</code> 文件总是描述如何在空数据库中创建最新的 schema。如果你的数据库当前处于较早版本，迁移文件会将这些数据库更新到最新。迁移文件与 <code>.sq</code> 文件存储在相同的 <code>sqldelight</code> 文件夹中：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src</span></span>
<span class="line"><span>└─ main</span></span>
<span class="line"><span>   └─ sqdelight</span></span>
<span class="line"><span>      ├─ com/example/hockey</span></span>
<span class="line"><span>      |  ├─ Team.sq</span></span>
<span class="line"><span>      |  └─ Player.sq</span></span>
<span class="line"><span>      └─ migrations</span></span>
<span class="line"><span>         ├─ 1.sqm</span></span>
<span class="line"><span>         └─ 2.sqm</span></span></code></pre></div><p>如果驱动支持，迁移将在事务中运行。你不应在 <code>BEGIN/END TRANSACTION</code> 中封装你的迁移，因为这可能导致某些驱动崩溃。</p><h2 id="版本控制" tabindex="-1">版本控制 <a class="header-anchor" href="#版本控制" aria-label="Permalink to &quot;版本控制&quot;">​</a></h2><p>schema 的第一个版本是 1。迁移文件以 <code>&lt;version to upgrade from&gt;.sqm</code> 命名。要迁移到版本 2，请将迁移语句放入 <code>1.sqm</code> 中：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ADD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COLUMN draft_year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INTEGER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ADD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COLUMN draft_order </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INTEGER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>这些 SQL 语句由 <code>Database.Schema.migrate()</code> 方法运行。迁移文件与你的 <code>.sq</code> 文件位于相同的源集。</p><h2 id="验证迁移" tabindex="-1">验证迁移 <a class="header-anchor" href="#验证迁移" aria-label="Permalink to &quot;验证迁移&quot;">​</a></h2><p>一个 <code>verifySqlDelightMigration</code> 任务将被添加到 Gradle 项目中，它将作为 <code>check</code> 任务的一部分运行。对于你的 SqlDelight 源集（例如 <code>src/main/sqldelight</code>）中任何名为 <code>&lt;version number&gt;.db</code> 的 <code>.db</code> 文件，它将应用从 <code>&lt;version number&gt;.sqm</code> 开始的所有迁移，并确认这些迁移会生成一个包含最新 schema 的数据库。</p><p>要从最新 schema 生成一个 <code>.db</code> 文件，请运行 <code>generate&lt;source set name&gt;&lt;database name&gt;Schema</code> 任务，该任务在你指定 <code>schemaOutputDirectory</code> 后即可使用，如 <a href="/sqldelight/jvm_sqlite/gradle.md">gradle.md</a> 中所述。你可能应该在创建第一个迁移之前执行此操作。例如，如果你的项目使用 <code>main</code> 源集并带有自定义名称 <code>&quot;MyDatabase&quot;</code>，你将需要运行 <code>generateMainMyDatabaseSchema</code> 任务。</p><p>大多数用例将受益于只拥有一个 <code>1.db</code> 文件，代表其数据库初始版本的 schema。允许多个 <code>.db</code> 文件，但这会导致每个 <code>.db</code> 文件都应用其各自的迁移，从而导致大量不必要的工作。</p><h2 id="代码迁移" tabindex="-1">代码迁移 <a class="header-anchor" href="#代码迁移" aria-label="Permalink to &quot;代码迁移&quot;">​</a></h2><p>如果你从代码中运行迁移并希望执行数据迁移，可以使用 <code>Database.Schema.migrate</code> API：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Database.Schema.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">migrate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    driver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> database,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oldVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    newVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Database.Schema.version,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    AfterVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { driver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> driver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;INSERT INTO test (value) VALUES(&#39;hello&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>在以下示例中，如果你有 1.sqm、2.sqm、3.sqm、4.sqm 和 5.sqm 作为迁移，当数据库版本为 4 时，上述回调将在 3.sqm 完成后发生。回调完成后，它将从 4.sqm 继续并完成剩余的迁移，在本例中是 4.sqm 和 5.sqm，这意味着最终数据库版本为 6。</p><p>如果你正在使用 <code>JdbcSqliteDriver</code>，你可以在驱动程序创建期间传入 <code>schema</code> 和 <code>callbacks</code>。 它使用 <code>PRAGMA user_version</code> 在数据库中存储当前的 <code>schema</code> 版本。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> driver: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SqlDriver</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JdbcSqliteDriver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jdbc:sqlite:test.db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    properties </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    schema </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Database.Schema,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    callbacks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        AfterVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { driver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> driver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;INSERT INTO test (value) VALUES(&#39;hello&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,18)]))}const o=i(t,[["render",l]]);export{c as __pageData,o as default};
