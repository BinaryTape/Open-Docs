import{_ as h,a as e}from"./chunks/native-output.D4sfb-sK.js";import{_ as k,C as r,c as d,o,ag as n,j as i,a,G as t,w as p}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"C 상호 운용 및 libcurl을 사용하여 앱 생성하기 – 튜토리얼","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/native-app-with-c-and-libcurl.md","filePath":"ko/kotlin/native-app-with-c-and-libcurl.md","lastUpdated":1754307826000}'),E={name:"ko/kotlin/native-app-with-c-and-libcurl.md"};function g(c,s,y,u,F,m){const l=r("shortcut");return o(),d("div",null,[s[12]||(s[12]=n('<h1 id="c-상호-운용-및-libcurl을-사용하여-앱-생성하기-–-튜토리얼" tabindex="-1">C 상호 운용 및 libcurl을 사용하여 앱 생성하기 – 튜토리얼 <a class="header-anchor" href="#c-상호-운용-및-libcurl을-사용하여-앱-생성하기-–-튜토리얼" aria-label="Permalink to &quot;C 상호 운용 및 libcurl을 사용하여 앱 생성하기 – 튜토리얼&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>C 라이브러리 임포트는 <a href="/ko/kotlin/native-c-interop-stability">베타</a> 단계입니다. C 라이브러리에서 cinterop 도구로 생성된 모든 Kotlin 선언에는 <code>@ExperimentalForeignApi</code> 어노테이션이 있어야 합니다. Kotlin/Native와 함께 제공되는 네이티브 플랫폼 라이브러리(예: Foundation, UIKit, POSIX)는 일부 API에 대해서만 옵트인(opt-in)이 필요합니다.</p></div><p>이 튜토리얼은 IntelliJ IDEA를 사용하여 커맨드라인 애플리케이션을 생성하는 방법을 보여줍니다. Kotlin/Native와 libcurl 라이브러리를 사용하여 지정된 플랫폼에서 네이티브로 실행할 수 있는 간단한 HTTP 클라이언트를 만드는 방법을 배울 것입니다.</p><p>결과물은 macOS 및 Linux에서 실행하여 간단한 HTTP GET 요청을 할 수 있는 실행 가능한 커맨드라인 앱입니다.</p><p>커맨드라인을 사용하여 Kotlin 라이브러리를 직접 생성하거나 스크립트 파일(예: <code>.sh</code> 또는 <code>.bat</code> 파일)로 생성할 수 있습니다. 하지만 이 접근 방식은 수백 개의 파일과 라이브러리가 있는 대규모 프로젝트에는 적합하지 않습니다. 빌드 시스템을 사용하면 Kotlin/Native 컴파일러 바이너리와 전이적 의존성을 가진 라이브러리를 다운로드하고 캐싱하며, 컴파일러와 테스트를 실행함으로써 프로세스가 단순해집니다. Kotlin/Native는 <a href="/ko/kotlin/gradle-configure-project#targeting-multiple-platforms">Kotlin 멀티플랫폼 플러그인</a>을 통해 <a href="https://gradle.org" target="_blank" rel="noreferrer">Gradle</a> 빌드 시스템을 사용할 수 있습니다.</p><h2 id="시작하기-전에" tabindex="-1">시작하기 전에 <a class="header-anchor" href="#시작하기-전에" aria-label="Permalink to &quot;시작하기 전에&quot;">​</a></h2><ol><li><p><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 최신 버전을 다운로드하고 설치합니다.</p></li><li><p>IntelliJ IDEA에서 <strong>File</strong> | <strong>New</strong> | <strong>Project from Version Control</strong>을 선택하고 다음 URL을 사용하여 <a href="https://github.com/Kotlin/kmp-native-wizard" target="_blank" rel="noreferrer">프로젝트 템플릿</a>을 클론합니다.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/kmp-native-wizard</span></span></code></pre></div></li><li><p>프로젝트 구조를 살펴봅니다.</p><p><img src="'+e+`" alt="Native application project structure" width="700"></p><p>템플릿에는 시작하는 데 필요한 파일과 폴더가 포함된 프로젝트가 있습니다. Kotlin/Native로 작성된 애플리케이션은 코드에 플랫폼별 요구 사항이 없으면 다양한 플랫폼을 대상으로 할 수 있다는 점을 이해하는 것이 중요합니다. 코드는 <code>nativeMain</code> 디렉토리에 해당 <code>nativeTest</code>와 함께 배치됩니다. 이 튜토리얼에서는 폴더 구조를 그대로 유지합니다.</p></li><li><p>프로젝트 설정이 포함된 빌드 스크립트인 <code>build.gradle.kts</code> 파일을 엽니다. 빌드 파일에서 다음 사항에 특히 주의하십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;os.name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;os.arch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;aarch64&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isMingwX64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostOs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Windows&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nativeTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mac OS X&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> macosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mac OS X&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> macosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Linux&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linuxArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Linux&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        isMingwX64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mingwX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GradleException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Host OS is not supported in Kotlin/Native.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nativeTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                entryPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>대상은 macOS, Linux 및 Windows용 <code>macosArm64</code>, <code>macosX64</code>, <code>linuxArm64</code>, <code>linuxX64</code>, <code>mingwX64</code>를 사용하여 정의됩니다. <a href="/ko/kotlin/native-target-support">지원되는 플랫폼</a>의 전체 목록을 참조하십시오.</li><li><code>binaries {}</code> 블록은 바이너리가 생성되는 방식과 애플리케이션의 진입점을 정의합니다. 이 값들은 기본값으로 유지할 수 있습니다.</li><li>C 상호 운용은 빌드에서 추가 단계로 구성됩니다. 기본적으로 C의 모든 심볼은 <code>interop</code> 패키지로 임포트됩니다. <code>.kt</code> 파일에서 전체 패키지를 임포트할 수도 있습니다. <a href="/ko/kotlin/gradle-configure-project#targeting-multiple-platforms">구성 방법</a>에 대해 자세히 알아보세요.</li></ul></li></ol><h2 id="정의-파일-생성" tabindex="-1">정의 파일 생성 <a class="header-anchor" href="#정의-파일-생성" aria-label="Permalink to &quot;정의 파일 생성&quot;">​</a></h2><p>네이티브 애플리케이션을 작성할 때, HTTP 요청 생성, 디스크 읽기 및 쓰기 등 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/" target="_blank" rel="noreferrer">Kotlin 표준 라이브러리</a>에 포함되지 않은 특정 기능에 접근해야 하는 경우가 많습니다.</p><p>Kotlin/Native는 표준 C 라이브러리를 소비하는 데 도움을 주어, 필요한 거의 모든 기능에 대한 전체 생태계를 열어줍니다. Kotlin/Native는 이미 사전 빌드된 <a href="/ko/kotlin/native-platform-libs">플랫폼 라이브러리</a> 세트와 함께 제공되며, 이는 표준 라이브러리에 일부 추가적인 공통 기능을 제공합니다.</p><p>상호 운용의 이상적인 시나리오는 C 함수를 Kotlin 함수를 호출하는 것처럼 동일한 시그니처와 컨벤션을 따라 호출하는 것입니다. 이때 cinterop 도구가 유용하게 사용됩니다. 이 도구는 C 라이브러리를 가져와 해당 Kotlin 바인딩을 생성하여 라이브러리가 Kotlin 코드처럼 사용될 수 있도록 합니다.</p><p>이러한 바인딩을 생성하려면 각 라이브러리에 정의 파일이 필요하며, 일반적으로 라이브러리와 동일한 이름을 가집니다. 이는 라이브러리가 정확히 어떻게 사용되어야 하는지를 설명하는 속성 파일입니다.</p><p>이 앱에서는 HTTP 호출을 위해 libcurl 라이브러리가 필요합니다. 정의 파일을 생성하려면:</p><ol><li><p><code>src</code> 폴더를 선택하고 <strong>File | New | Directory</strong>로 새 디렉토리를 생성합니다.</p></li><li><p>새 디렉토리 이름을 <strong>nativeInterop/cinterop</strong>으로 지정합니다. 이는 헤더 파일 위치에 대한 기본 규칙이지만, 다른 위치를 사용하는 경우 <code>build.gradle.kts</code> 파일에서 재정의할 수 있습니다.</p></li><li><p>이 새 하위 폴더를 선택하고 <strong>File | New | File</strong>로 새 <code>libcurl.def</code> 파일을 생성합니다.</p></li><li><p>파일에 다음 코드를 업데이트합니다.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">curl.h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headerFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curl</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">compilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">linkerOpts.osx = -L/opt/local/lib -L/usr/local/opt/curl/lib -lcurl</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">linkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -lcurl</span></span></code></pre></div><ul><li><code>headers</code>는 Kotlin 스텁을 생성할 헤더 파일 목록입니다. 여기에 여러 파일을 공백으로 구분하여 추가할 수 있습니다. 이 경우 <code>curl.h</code>만 해당됩니다. 참조된 파일은 지정된 경로(이 경우 <code>/usr/include/curl</code>)에 있어야 합니다.</li><li><code>headerFilter</code>는 정확히 무엇이 포함되는지 보여줍니다. C에서는 하나의 파일이 <code>#include</code> 지시어를 사용하여 다른 파일을 참조할 때 모든 헤더도 포함됩니다. 때로는 필요하지 않은 경우도 있으며, <a href="https://en.wikipedia.org/wiki/Glob_(programming)" target="_blank" rel="noreferrer">glob 패턴</a>을 사용하여 이 매개변수를 추가하여 조정할 수 있습니다.</li></ul><p><code>headerFilter</code>는 (시스템 <code>stdint.h</code> 헤더와 같은) 외부 의존성을 상호 운용 라이브러리로 가져오고 싶지 않을 때 사용할 수 있습니다. 또한 라이브러리 크기 최적화 및 시스템과 제공된 Kotlin/Native 컴파일 환경 간의 잠재적 충돌을 해결하는 데 유용할 수 있습니다.</p><ul><li>특정 플랫폼에 대한 동작을 수정해야 하는 경우, <code>compilerOpts.osx</code> 또는 <code>compilerOpts.linux</code>와 같은 형식을 사용하여 옵션에 플랫폼별 값을 제공할 수 있습니다. 이 경우 macOS(<code>.osx</code> 접미사) 및 Linux(<code>.linux</code> 접미사)에 해당합니다. 접미사가 없는 매개변수(예: <code>linkerOpts=</code>)도 가능하며 모든 플랫폼에 적용됩니다.</li></ul><p>사용 가능한 옵션의 전체 목록은 <a href="/ko/kotlin/native-definition-file#properties">정의 파일</a>을 참조하십시오.</p></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>샘플이 작동하려면 시스템에 <code>curl</code> 라이브러리 바이너리가 있어야 합니다. macOS 및 Linux에서는 일반적으로 포함되어 있습니다. Windows에서는 <a href="https://curl.se/download.html" target="_blank" rel="noreferrer">소스</a>에서 빌드할 수 있습니다(Microsoft Visual Studio 또는 Windows SDK 커맨드라인 도구가 필요합니다). 자세한 내용은 <a href="https://jonnyzzz.com/blog/2018/10/29/kn-libcurl-windows/" target="_blank" rel="noreferrer">관련 블로그 게시물</a>을 참조하십시오. 또는 <a href="https://www.msys2.org/" target="_blank" rel="noreferrer">MinGW/MSYS2</a> <code>curl</code> 바이너리를 고려할 수도 있습니다.</p></div><h2 id="빌드-프로세스에-상호-운용성-추가" tabindex="-1">빌드 프로세스에 상호 운용성 추가 <a class="header-anchor" href="#빌드-프로세스에-상호-운용성-추가" aria-label="Permalink to &quot;빌드 프로세스에 상호 운용성 추가&quot;">​</a></h2><p>헤더 파일을 사용하려면 빌드 프로세스의 일부로 생성되도록 해야 합니다. 이를 위해 <code>build.gradle.kts</code> 파일에 다음 <code>compilations {}</code> 블록을 추가합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nativeTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cinterops</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libcurl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> creating</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            entryPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>먼저 <code>cinterops</code>가 추가되고, 그 다음 정의 파일에 대한 항목이 추가됩니다. 기본적으로 파일 이름이 사용됩니다. 추가 매개변수로 이를 재정의할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cinterops</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libcurl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        definitionFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/nativeInterop/cinterop/libcurl.def&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        packageName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.jetbrains.handson.http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOpts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-I/path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        includeDirs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="애플리케이션-코드-작성" tabindex="-1">애플리케이션 코드 작성 <a class="header-anchor" href="#애플리케이션-코드-작성" aria-label="Permalink to &quot;애플리케이션 코드 작성&quot;">​</a></h2><p>이제 라이브러리와 해당 Kotlin 스텁이 있으므로 애플리케이션에서 이를 사용할 수 있습니다. 이 튜토리얼에서는 <a href="https://curl.se/libcurl/c/simple.html" target="_blank" rel="noreferrer">simple.c</a> 예제를 Kotlin으로 변환합니다.</p><p><code>src/nativeMain/kotlin/</code> 폴더에서 <code>Main.kt</code> 파일을 다음 코드로 업데이트합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> libcurl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curl_easy_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (curl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        curl_easy_setopt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl, CURLOPT_URL, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        curl_easy_setopt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl, CURLOPT_FOLLOWLOCATION, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curl_easy_perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CURLE_OK) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;curl_easy_perform() failed \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl_easy_strerror</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(res)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toKString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        curl_easy_cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>보시다시피, Kotlin 버전에서는 명시적인 변수 선언이 제거되었지만, 그 외의 모든 것은 C 버전과 거의 동일합니다. libcurl 라이브러리에서 예상할 수 있는 모든 호출은 Kotlin에서도 동일하게 사용할 수 있습니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>이것은 한 줄씩 직역한 것입니다. 더 Kotlin스러운 방식으로 작성할 수도 있습니다.</p></div><h2 id="애플리케이션-컴파일-및-실행" tabindex="-1">애플리케이션 컴파일 및 실행 <a class="header-anchor" href="#애플리케이션-컴파일-및-실행" aria-label="Permalink to &quot;애플리케이션 컴파일 및 실행&quot;">​</a></h2>`,27)),i("ol",null,[s[11]||(s[11]=n('<li><p>애플리케이션을 컴파일합니다. 이를 위해 작업 목록에서 <code>runDebugExecutableNative</code> Gradle 작업을 실행하거나 터미널에서 다음 명령을 사용합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runDebugExecutableNative</span></span></code></pre></div><p>이 경우 cinterop 도구에 의해 생성된 부분이 빌드에 암묵적으로 포함됩니다.</p></li>',1)),i("li",null,[i("p",null,[s[2]||(s[2]=a("컴파일 중 오류가 없으면 ")),s[3]||(s[3]=i("code",null,"main()",-1)),s[4]||(s[4]=a(" 함수 옆의 여백에 있는 녹색 ")),s[5]||(s[5]=i("strong",null,"Run",-1)),s[6]||(s[6]=a(" 아이콘을 클릭하거나 ")),t(l,null,{default:p(()=>s[0]||(s[0]=[a("Shift + Cmd + R")])),_:1}),s[7]||(s[7]=a("/")),t(l,null,{default:p(()=>s[1]||(s[1]=[a("Shift + F10")])),_:1}),s[8]||(s[8]=a(" 단축키를 사용합니다."))]),s[9]||(s[9]=i("p",null,[a("IntelliJ IDEA가 "),i("strong",null,"Run"),a(" 탭을 열고 "),i("a",{href:"https://example.com/",target:"_blank",rel:"noreferrer"},"example.com"),a("의 내용을 출력으로 보여줍니다.")],-1)),s[10]||(s[10]=i("p",null,[i("img",{src:h,alt:"Application output with HTML-code",width:"700"})],-1))])]),s[13]||(s[13]=n('<p><code>curl_easy_perform</code> 호출이 결과를 표준 출력으로 인쇄하기 때문에 실제 출력을 볼 수 있습니다. <code>curl_easy_setopt</code>를 사용하여 이를 숨길 수 있습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>전체 프로젝트 코드는 <a href="https://github.com/Kotlin/kotlin-hands-on-intro-kotlin-native" target="_blank" rel="noreferrer">GitHub 저장소</a>에서 얻을 수 있습니다.</p></div><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p><a href="/ko/kotlin/native-c-interop">Kotlin의 C 상호 운용성</a>에 대해 자세히 알아보세요.</p>',4))])}const A=k(E,[["render",g]]);export{v as __pageData,A as default};
