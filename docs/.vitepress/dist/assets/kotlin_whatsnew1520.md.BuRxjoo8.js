import{_ as k,C as e,c as o,o as d,j as i,G as t,ag as h,a as s,w as n}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"Kotlin 1.5.20 有哪些新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/whatsnew1520.md","filePath":"kotlin/whatsnew1520.md","lastUpdated":1754307826000}'),c={name:"kotlin/whatsnew1520.md"};function g(E,a,y,u,b,m){const p=e("YouTubeVideo"),l=e("tab"),r=e("tabs");return d(),o("div",null,[a[2]||(a[2]=i("h1",{id:"kotlin-1-5-20-有哪些新特性",tabindex:"-1"},[s("Kotlin 1.5.20 有哪些新特性 "),i("a",{class:"header-anchor",href:"#kotlin-1-5-20-有哪些新特性","aria-label":'Permalink to "Kotlin 1.5.20 有哪些新特性"'},"​")],-1)),a[3]||(a[3]=i("p",null,[i("em",null,[i("a",{href:"/kotlin/releases#release-details"},"发布日期：2021 年 6 月 24 日")])],-1)),a[4]||(a[4]=i("p",null,"Kotlin 1.5.20 修复了 1.5.0 新特性中发现的问题，同时还包括各种工具改进。",-1)),a[5]||(a[5]=i("p",null,[s("你可以在"),i("a",{href:"https://blog.jetbrains.com/kotlin/2021/06/kotlin-1-5-20-released/",target:"_blank",rel:"noreferrer"},"发布博客文章"),s("和此视频中找到更改概述：")],-1)),t(p,{src:"https://www.youtube.com/v/SV8CgSXQe44",title:"Kotlin 1.5.20"}),a[6]||(a[6]=h(`<h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.5.20 在 JVM 平台获得以下更新：</p><ul><li><a href="#string-concatenation-via-invokedynamic">通过 invokedynamic 进行字符串连接</a></li><li><a href="#support-for-jspecify-nullness-annotations">支持 JSpecify 可空性注解</a></li><li><a href="#support-for-calling-java-s-lombok-generated-methods-within-modules-that-have-kotlin-and-java-code">支持在同时包含 Kotlin 和 Java 代码的模块中调用 Java 的 Lombok 生成方法</a></li></ul><h3 id="通过-invokedynamic-进行字符串连接" tabindex="-1">通过 invokedynamic 进行字符串连接 <a class="header-anchor" href="#通过-invokedynamic-进行字符串连接" aria-label="Permalink to &quot;通过 invokedynamic 进行字符串连接&quot;">​</a></h3><p>Kotlin 1.5.20 在 JVM 9+ 目标平台上将字符串连接编译为<a href="https://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html#invokedynamic" target="_blank" rel="noreferrer">动态调用</a>（<code>invokedynamic</code>），从而与现代 Java 版本保持同步。 更精确地说，它使用 <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/StringConcatFactory.html#makeConcatWithConstants-java.lang.invoke.MethodHandles.Lookup-java.lang.String-java.lang.invoke.MethodType-java.lang.String-java.lang.Object...-" target="_blank" rel="noreferrer"><code>StringConcatFactory.makeConcatWithConstants()</code></a> 进行字符串连接。</p><p>要切换回旧版本中通过 <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/StringBuilder.html#append-java.lang.String-" target="_blank" rel="noreferrer"><code>StringBuilder.append()</code></a> 进行连接的方式，请添加编译器选项 <code>-Xstring-concat=inline</code>。</p><p>了解如何在 <a href="/kotlin/gradle-compiler-options">Gradle</a>、<a href="/kotlin/maven#specify-compiler-options">Maven</a> 和<a href="/kotlin/compiler-reference#compiler-options">命令行编译器</a>中添加编译器选项。</p><h3 id="支持-jspecify-可空性注解" tabindex="-1">支持 JSpecify 可空性注解 <a class="header-anchor" href="#支持-jspecify-可空性注解" aria-label="Permalink to &quot;支持 JSpecify 可空性注解&quot;">​</a></h3><p>Kotlin 编译器可以读取各种类型的<a href="/kotlin/java-interop#nullability-annotations">可空性注解</a>，以便将可空性信息从 Java 传递给 Kotlin。1.5.20 版本引入了对 <a href="https://jspecify.dev/" target="_blank" rel="noreferrer">JSpecify 项目</a>的支持，该项目包含标准统一的 Java 可空性注解集。</p><p>通过 JSpecify，你可以提供更详细的可空性信息，以帮助 Kotlin 保持空安全与 Java 互操作。你可以为声明、包或模块作用域设置默认可空性，指定参数化可空性等等。你可以在 <a href="https://jspecify.dev/docs/user-guide" target="_blank" rel="noreferrer">JSpecify 用户指南</a>中找到更多详细信息。</p><p>以下是 Kotlin 如何处理 JSpecify 注解的示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaClass.java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.jspecify.nullness.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NullMarked</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JavaClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notNullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @Nullable String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Test.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JavaClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  notNullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().length </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  nullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().length    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Warning: receiver nullability mismatch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 1.5.20 中，根据 JSpecify 提供的可空性信息，所有可空性不匹配的情况都将报告为警告。 在使用 JSpecify 时，使用 <code>-Xjspecify-annotations=strict</code> 和 <code>-Xtype-enhancement-improvements-strict-mode</code> 编译器选项来启用严格模式（带错误报告）。 请注意，JSpecify 项目正在积极开发中。其 API 和实现可能随时发生重大变化。</p><p><a href="/kotlin/java-interop#null-safety-and-platform-types">详细了解空安全和平台类型</a>。</p><h3 id="支持在同时包含-kotlin-和-java-代码的模块中调用-java-的-lombok-生成方法" tabindex="-1">支持在同时包含 Kotlin 和 Java 代码的模块中调用 Java 的 Lombok 生成方法 <a class="header-anchor" href="#支持在同时包含-kotlin-和-java-代码的模块中调用-java-的-lombok-生成方法" aria-label="Permalink to &quot;支持在同时包含 Kotlin 和 Java 代码的模块中调用 Java 的 Lombok 生成方法&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Lombok 编译器插件是<a href="/kotlin/components-stability">实验性的</a>。 它可能随时被废弃或更改。仅供评估目的使用。 我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issue/KT-7112" target="_blank" rel="noreferrer">YouTrack</a> 上提供反馈。</p></div><p>Kotlin 1.5.20 引入了一个实验性的 <a href="/kotlin/lombok">Lombok 编译器插件</a>。该插件可以在同时包含 Kotlin 和 Java 代码的模块中生成和使用 Java 的 <a href="https://projectlombok.org/" target="_blank" rel="noreferrer">Lombok</a> 声明。Lombok 注解仅在 Java 源代码中有效，如果你在 Kotlin 代码中使用它们，则会被忽略。</p><p>该插件支持以下注解：</p><ul><li><code>@Getter</code>、<code>@Setter</code></li><li><code>@NoArgsConstructor</code>、<code>@RequiredArgsConstructor</code> 和 <code>@AllArgsConstructor</code></li><li><code>@Data</code></li><li><code>@With</code></li><li><code>@Value</code></li></ul><p>我们正在继续开发此插件。要了解详细的当前状态，请访问 <a href="https://github.com/JetBrains/kotlin/tree/master/plugins/lombok" target="_blank" rel="noreferrer">Lombok 编译器插件的 README</a>。</p><p>目前，我们没有支持 <code>@Builder</code> 注解的计划。但是，如果你在 <a href="https://youtrack.jetbrains.com/issue/KT-46959" target="_blank" rel="noreferrer">YouTrack 中投票支持 <code>@Builder</code></a>，我们可以考虑这一点。</p><p><a href="/kotlin/lombok#gradle">了解如何配置 Lombok 编译器插件</a>。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native 1.5.20 提供了新特性和工具改进的预览：</p><ul><li><a href="#opt-in-export-of-kdoc-comments-to-generated-objective-c-headers">选择性导出 KDoc 注释到生成的 Objective-C 头文件</a></li><li><a href="#compiler-bug-fixes">编译器错误修复</a></li><li><a href="#improved-performance-of-array-copyinto-inside-one-array">改进 Array.copyInto() 在单个数组内的性能</a></li></ul><h3 id="选择性导出-kdoc-注释到生成的-objective-c-头文件" tabindex="-1">选择性导出 KDoc 注释到生成的 Objective-C 头文件 <a class="header-anchor" href="#选择性导出-kdoc-注释到生成的-objective-c-头文件" aria-label="Permalink to &quot;选择性导出 KDoc 注释到生成的 Objective-C 头文件&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>导出 KDoc 注释到生成的 Objective-C 头文件的能力是<a href="/kotlin/components-stability">实验性的</a>。 它可能随时被废弃或更改。 需要选择启用（详见下文），且仅供评估目的使用。 我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issue/KT-38600" target="_blank" rel="noreferrer">YouTrack</a> 上提供反馈。</p></div><p>你现在可以设置 Kotlin/Native 编译器，将 Kotlin 代码中的<a href="/kotlin/kotlin-doc">文档注释 (KDoc)</a> 导出到由此生成的 Objective-C 框架，使其对框架的使用者可见。</p><p>例如，以下带有 KDoc 的 Kotlin 代码：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Prints the sum of the arguments.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Properly handles the case when the sum doesn&#39;t fit in 32-bit integer.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)</span></span></code></pre></div><p>生成以下 Objective-C 头文件：</p><div class="language-objc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objc</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Prints the sum of the arguments.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Properly handles the case when the sum doesn&#39;t fit in 32-bit integer.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)printSumA:(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)a b:(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)b </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__attribute__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;printSum(a:b:)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span></span></code></pre></div><p>这同样适用于 Swift。</p><p>要试用此将 KDoc 注释导出到 Objective-C 头文件的能力，请使用 <code>-Xexport-kdoc</code> 编译器选项。将以下行添加到你要导出注释的 Gradle 项目的 <code>build.gradle(.kts)</code> 文件中：</p>`,35)),t(r,{group:"build-script"},{default:n(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    targets."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"mpp"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinNativeTarget"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilations."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"get"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"main"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},").kotlinOptions.freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "-Xexport-kdoc"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:n(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    targets"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilations"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"get("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"main"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlinOptions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "-Xexport-kdoc"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[7]||(a[7]=h(`<p>如果你能通过此 <a href="https://youtrack.jetbrains.com/issue/KT-38600" target="_blank" rel="noreferrer">YouTrack 票证</a> 与我们分享你的反馈，我们将不胜感激。</p><h3 id="编译器错误修复" tabindex="-1">编译器错误修复 <a class="header-anchor" href="#编译器错误修复" aria-label="Permalink to &quot;编译器错误修复&quot;">​</a></h3><p>Kotlin/Native 编译器在 1.5.20 中收到了多项错误修复。你可以在<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.5.20" target="_blank" rel="noreferrer">更新日志</a>中找到完整列表。</p><p>有一个影响兼容性的重要错误修复：在以前的版本中，包含不正确 UTF <a href="https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates" target="_blank" rel="noreferrer">代理对</a>的字符串常量在编译期间会丢失其值。现在这些值被保留了。应用程序开发者可以安全地更新到 1.5.20 – 不会发生任何问题。但是，用 1.5.20 编译的库与早期编译器版本不兼容。 有关详细信息，请参见<a href="https://youtrack.jetbrains.com/issue/KT-33175" target="_blank" rel="noreferrer">此 YouTrack 问题</a>。</p><h3 id="改进-array-copyinto-在单个数组内的性能" tabindex="-1">改进 Array.copyInto() 在单个数组内的性能 <a class="header-anchor" href="#改进-array-copyinto-在单个数组内的性能" aria-label="Permalink to &quot;改进 Array.copyInto() 在单个数组内的性能&quot;">​</a></h3><p>我们改进了当 <code>Array.copyInto()</code> 的源和目标是同一个数组时它的工作方式。现在，由于针对此用例的内存管理优化，此类操作的完成速度提高了多达 20 倍（取决于复制对象的数量）。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>随着 1.5.20 的发布，我们正在发布一份指南，它将帮助你将项目迁移到新的<a href="/kotlin/js-ir-compiler">基于 IR 的 Kotlin/JS 后端</a>。</p><h3 id="js-ir-后端迁移指南" tabindex="-1">JS IR 后端迁移指南 <a class="header-anchor" href="#js-ir-后端迁移指南" aria-label="Permalink to &quot;JS IR 后端迁移指南&quot;">​</a></h3><p>新的 <a href="/kotlin/js-ir-migration">JS IR 后端迁移指南</a>指出了你在迁移过程中可能遇到的问题并提供了解决方案。如果你发现指南中未涵盖的任何问题，请向我们的<a href="http://kotl.in/issue" target="_blank" rel="noreferrer">问题跟踪器</a>报告。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.5.20 引入了以下可以改善 Gradle 体验的特性：</p><ul><li><a href="#caching-for-annotation-processors-classloaders-in-kapt">Kapt 中注解处理器类加载器的缓存</a></li><li><a href="#deprecation-of-the-kotlin-parallel-tasks-in-project-build-property">弃用 <code>kotlin.parallel.tasks.in.project</code> 构建属性</a></li></ul><h3 id="kapt-中注解处理器类加载器的缓存" tabindex="-1">Kapt 中注解处理器类加载器的缓存 <a class="header-anchor" href="#kapt-中注解处理器类加载器的缓存" aria-label="Permalink to &quot;Kapt 中注解处理器类加载器的缓存&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kapt 中注解处理器类加载器的缓存是<a href="/kotlin/components-stability">实验性的</a>。 它可能随时被废弃或更改。仅供评估目的使用。 我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issue/KT-28901" target="_blank" rel="noreferrer">YouTrack</a> 上提供反馈。</p></div><p>现在有一个新的实验性特性，可以缓存 <a href="/kotlin/kapt">kapt</a> 中注解处理器的类加载器。 此特性可以提高 kapt 在连续 Gradle 运行时的速度。</p><p>要启用此特性，请在 <code>gradle.properties</code> 文件中使用以下属性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># positive value will enable caching</span></span>
<span class="line"><span># use the same value as the number of modules that use kapt</span></span>
<span class="line"><span>kapt.classloaders.cache.size=5</span></span>
<span class="line"><span></span></span>
<span class="line"><span># disable for caching to work</span></span>
<span class="line"><span>kapt.include.compile.classpath=false</span></span></code></pre></div><p>详细了解 <a href="/kotlin/kapt">kapt</a>。</p><h3 id="弃用-kotlin-parallel-tasks-in-project-构建属性" tabindex="-1">弃用 kotlin.parallel.tasks.in.project 构建属性 <a class="header-anchor" href="#弃用-kotlin-parallel-tasks-in-project-构建属性" aria-label="Permalink to &quot;弃用 kotlin.parallel.tasks.in.project 构建属性&quot;">​</a></h3><p>在此版本中，Kotlin 并行编译由 <a href="https://docs.gradle.org/current/userguide/performance.html#parallel_execution" target="_blank" rel="noreferrer">Gradle 并行执行标志 <code>--parallel</code></a> 控制。 使用此标志，Gradle 会并发执行任务，从而提高编译任务的速度并更有效地利用资源。</p><p>你不再需要使用 <code>kotlin.parallel.tasks.in.project</code> 属性。此属性已被弃用，并将在下一个主要版本中移除。</p><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><p>Kotlin 1.5.20 更改了多个处理字符的函数的平台特有实现，从而实现了跨平台的统一：</p><ul><li><a href="#support-for-all-unicode-digits-in-char-digittoint-in-kotlin-native-and-kotlin-js">Kotlin/Native 和 Kotlin/JS 中 Char.digitToInt() 对所有 Unicode 数字的支持</a>。</li><li><a href="#unification-of-char-islowercase-isuppercase-implementations-across-platforms">Char.isLowerCase()/isUpperCase() 实现在跨平台上的统一</a>。</li></ul><h3 id="kotlin-native-和-kotlin-js-中-char-digittoint-对所有-unicode-数字的支持" tabindex="-1">Kotlin/Native 和 Kotlin/JS 中 Char.digitToInt() 对所有 Unicode 数字的支持 <a class="header-anchor" href="#kotlin-native-和-kotlin-js-中-char-digittoint-对所有-unicode-数字的支持" aria-label="Permalink to &quot;Kotlin/Native 和 Kotlin/JS 中 Char.digitToInt() 对所有 Unicode 数字的支持&quot;">​</a></h3><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/digit-to-int.html" target="_blank" rel="noreferrer"><code>Char.digitToInt()</code></a> 返回字符所代表的十进制数字的数值。在 1.5.20 之前，该函数仅支持 Kotlin/JVM 上的所有 Unicode 数字字符：Native 和 JS 平台上的实现仅支持 ASCII 数字。</p><p>从现在起，无论在 Kotlin/Native 还是 Kotlin/JS 中，你都可以对任何 Unicode 数字字符调用 <code>Char.digitToInt()</code> 并获取其数字表示。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ten </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0661&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0039&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ARABIC-INDIC DIGIT ONE + DIGIT NINE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ten)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="char-islowercase-isuppercase-实现在跨平台上的统一" tabindex="-1">Char.isLowerCase()/isUpperCase() 实现在跨平台上的统一 <a class="header-anchor" href="#char-islowercase-isuppercase-实现在跨平台上的统一" aria-label="Permalink to &quot;Char.isLowerCase()/isUpperCase() 实现在跨平台上的统一&quot;">​</a></h3><p>函数 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-upper-case.html" target="_blank" rel="noreferrer"><code>Char.isUpperCase()</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-lower-case.html" target="_blank" rel="noreferrer"><code>Char.isLowerCase()</code></a> 根据字符的大小写返回布尔值。对于 Kotlin/JVM，实现会同时检测 <code>General_Category</code> 和 <code>Other_Uppercase</code>/<code>Other_Lowercase</code> <a href="https://en.wikipedia.org/wiki/Unicode_character_property" target="_blank" rel="noreferrer">Unicode 属性</a>。</p><p>在 1.5.20 之前，其他平台上的实现工作方式不同，只考虑通用类别。 在 1.5.20 中，实现已在跨平台间统一，并使用这两个属性来确定字符大小写：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> latinCapitalA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // has &quot;Lu&quot; general category</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> circledLatinCapitalA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Ⓐ&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // has &quot;Other_Uppercase&quot; property</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(latinCapitalA.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> circledLatinCapitalA.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,33))])}const f=k(c,[["render",g]]);export{F as __pageData,f as default};
