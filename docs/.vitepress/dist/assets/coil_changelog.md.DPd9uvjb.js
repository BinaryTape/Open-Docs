import{_ as i,c as l,o,ag as a}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"更新日志","description":"","frontmatter":{},"headers":[],"relativePath":"coil/changelog.md","filePath":"coil/changelog.md","lastUpdated":1753460095000}'),c={name:"coil/changelog.md"};function r(t,e,s,d,n,h){return o(),l("div",null,e[0]||(e[0]=[a(`<h1 id="更新日志" tabindex="-1">更新日志 <a class="header-anchor" href="#更新日志" aria-label="Permalink to &quot;更新日志&quot;">​</a></h1><h2 id="_3-3-0-2025-年-7-月-22-日" tabindex="-1">[3.3.0] - 2025 年 7 月 22 日 <a class="header-anchor" href="#_3-3-0-2025-年-7-月-22-日" aria-label="Permalink to &quot;[3.3.0] - 2025 年 7 月 22 日&quot;">​</a></h2><ul><li><strong>新特性</strong>：引入了一个新的 API，用于在应用程序处于后台时限制 Android 上的 <code>MemoryCache.maxSize</code>。 <ul><li>如果设置了 <code>ImageLoader.Builder.memoryCacheMaxSizePercentWhileInBackground</code>，<code>ImageLoader</code> 的内存缓存将在应用程序处于后台时被限制为其最大大小的某个百分比。此设置目前默认禁用。</li><li>当应用程序处于后台时，图像将从内存缓存中修剪，以达到限制的最大大小，但内存缓存对最近修剪图像的弱引用不受影响。这意味着如果图像当前在其他地方被引用（例如 <code>AsyncImage</code>、<code>ImageView</code> 等），它仍将存在于内存缓存中。</li><li>此 API 有助于减少后台内存使用，防止您的应用程序过早被终止，并有助于减轻用户设备的内存压力。</li></ul></li><li><strong>新特性</strong>：为 <code>SvgDecoder</code> 添加一个 <code>Svg.Parser</code> 参数。 <ul><li>这使得在默认 SVG 解析器不满足您的需求时，可以使用自定义 SVG 解析器。</li></ul></li><li>为 <code>SvgDecoder</code> 添加一个 <code>density</code> 参数，以支持提供自定义密度乘数。</li><li>添加 <code>Uri.Builder</code> 以支持复制和修改 <code>Uri</code>。</li><li>添加 <code>ImageLoader.Builder.mainCoroutineContext</code> 以支持在测试中覆盖 Coil 对 <code>Dispatchers.main.immediate</code> 的使用。</li><li>修复了当 <code>start</code> 图像在动画结束时被解引用时 <code>CrossfadePainter.intrinsicSize</code> 发生变化的问题。这与 <code>CrossfadeDrawable</code> 的行为保持一致。</li><li>修复了 <code>ImageLoaders.executeBlocking</code> 在 Java 中无法访问的问题。</li><li>在 <code>coil-network-ktor3</code> 中使用 <code>kotlinx.io</code> 的 Okio 互操作模块。</li><li>更新 <code>kotlinx-datetime</code> 至 <code>0.7.1</code>。 <ul><li>此版本包含二进制不兼容的更改，仅影响 <code>coil-network-cache-control</code> 模块。有关更多信息，请参阅<a href="https://github.com/Kotlin/kotlinx-datetime?tab=readme-ov-file#deprecation-of-instant" target="_blank" rel="noreferrer">此处</a>。</li></ul></li><li>更新 Kotlin 到 2.2.0。</li><li>更新 Compose 到 1.8.2。</li><li>更新 Okio 到 3.15.0。</li><li>更新 Skiko 到 0.9.4.2。</li></ul><h2 id="_3-2-0-2025-年-5-月-13-日" tabindex="-1">[3.2.0] - 2025 年 5 月 13 日 <a class="header-anchor" href="#_3-2-0-2025-年-5-月-13-日" aria-label="Permalink to &quot;[3.2.0] - 2025 年 5 月 13 日&quot;">​</a></h2><p>自 <code>3.1.0</code> 以来的变更：</p><ul><li><strong>重要</strong>：<code>coil-compose</code> 和 <code>coil-compose-core</code> 现在需要 Java 11 字节码，因为 Compose <code>1.8.0</code> 要求它。有关如何启用它的信息，请参阅<a href="/coil/faq/">此处</a>。</li><li>将 <code>AsyncImagePreviewHandler</code> 的函数式构造函数更改为返回 <code>AsyncImagePainter.State.Success</code> 而不是 <code>AsyncImagePainter.State.Loading</code>。</li><li>修复了 <code>ConstraintsSizeResolver#size()</code> 中的取消问题。</li><li>修复了使用 R8 构建时 <code>PlatformContext</code> 缺失的警告。</li><li>修复了当返回默认 <code>FakeImageLoaderEngine</code> 响应时，<code>FakeImageLoaderEngine</code> 未设置 <code>Transition.Factory.NONE</code> 的问题。</li><li>从 <code>ColorImage</code> 中移除实验性注解。</li><li>在 <code>CacheControlCacheStrategy</code> 中延迟解析网络头。</li><li>重构 <code>CircleCropTransformation</code> 和 <code>RoundedCornersTransformation</code> 以共享通用代码。</li><li>如果 <code>ExifOrientationStrategy</code> 不是 <code>RESPECT_PERFORMANCE</code>，则内部回退到使用 <code>BitmapFactory</code>。</li><li>更新 Kotlin 到 2.1.20。</li><li>更新 Compose 到 1.8.0。</li><li>更新 Okio 到 3.11.0。</li><li>更新 Skiko 到 0.9.4。</li><li>更新 Coroutines 到 1.10.2。</li><li>更新 <code>accompanist-drawablepainter</code> 到 0.37.3。</li></ul><p>自 <code>3.2.0-rc02</code> 以来的变更：</p><ul><li>如果 <code>ExifOrientationStrategy</code> 不是 <code>RESPECT_PERFORMANCE</code>，则内部回退到使用 <code>BitmapFactory</code>。</li><li>更新 Compose 到 1.8.0。</li><li>更新 <code>accompanist-drawablepainter</code> 到 0.37.3。</li></ul><h2 id="_3-2-0-rc02-2025-年-4-月-26-日" tabindex="-1">[3.2.0-rc02] - 2025 年 4 月 26 日 <a class="header-anchor" href="#_3-2-0-rc02-2025-年-4-月-26-日" aria-label="Permalink to &quot;[3.2.0-rc02] - 2025 年 4 月 26 日&quot;">​</a></h2><ul><li>修复了在使用 <code>KtorNetworkFetcherFactory</code> (Ktor 3) 在非 JVM 目标上加载图像时，图像请求因 <code>ClosedByteChannelException</code> 而失败的问题。</li></ul><h2 id="_3-2-0-rc01-2025-年-4-月-24-日" tabindex="-1">[3.2.0-rc01] - 2025 年 4 月 24 日 <a class="header-anchor" href="#_3-2-0-rc01-2025-年-4-月-24-日" aria-label="Permalink to &quot;[3.2.0-rc01] - 2025 年 4 月 24 日&quot;">​</a></h2><ul><li><strong>重要</strong>：<code>coil-compose</code> 和 <code>coil-compose-core</code> 现在需要 Java 11 字节码，因为 Compose <code>1.8.0</code> 要求它。有关如何启用它的信息，请参阅<a href="/coil/faq/">此处</a>。</li><li>将 <code>AsyncImagePreviewHandler</code> 的函数式构造函数更改为返回 <code>AsyncImagePainter.State.Success</code> 而不是 <code>AsyncImagePainter.State.Loading</code>。</li><li>修复了 <code>ConstraintsSizeResolver#size()</code> 中的取消问题。</li><li>修复了使用 R8 构建时 <code>PlatformContext</code> 缺失的警告。</li><li>修复了当返回默认 <code>FakeImageLoaderEngine</code> 响应时，<code>FakeImageLoaderEngine</code> 未设置 <code>Transition.Factory.NONE</code> 的问题。</li><li>从 <code>ColorImage</code> 中移除实验性注解。</li><li>在 <code>CacheControlCacheStrategy</code> 中延迟解析网络头。</li><li>重构 <code>CircleCropTransformation</code> 和 <code>RoundedCornersTransformation</code> 以共享通用代码。</li><li>在 <code>coil-network-ktor2</code> 和 <code>coil-network-ktor3</code> 中使用 <code>kotlinx.io</code> 的 Okio 互操作模块。</li><li>更新 Kotlin 到 2.1.20。</li><li>更新 Compose 到 1.8.0-rc01。</li><li>更新 Okio 到 3.11.0。</li><li>更新 Skiko 到 0.9.4。</li><li>更新 Coroutines 到 1.10.2。</li></ul><h2 id="_3-1-0-2025-年-2-月-4-日" tabindex="-1">[3.1.0] - 2025 年 2 月 4 日 <a class="header-anchor" href="#_3-1-0-2025-年-2-月-4-日" aria-label="Permalink to &quot;[3.1.0] - 2025 年 2 月 4 日&quot;">​</a></h2><ul><li>提升 <code>AsyncImage</code> 的性能。 <ul><li>运行时性能提升了 25% 到 40%，具体取决于可组合项是正在实例化还是被复用。内存分配也减少了 35% 到 48%。更多信息请参阅<a href="https://github.com/coil-kt/coil/pull/2795" target="_blank" rel="noreferrer">此处</a>。</li></ul></li><li>添加 <code>ColorImage</code> 并弃用 <code>FakeImage</code>。 <ul><li><code>ColorImage</code> 在测试和预览中返回模拟值时很有用。它解决了与 <code>FakeImage</code> 相同的用例，但在 <code>coil-core</code> 中比在 <code>coil-test</code> 中更容易访问。</li></ul></li><li>移除 <code>coil-compose-core</code> 对 <code>Dispatchers.Main.immedate</code> 的依赖。 <ul><li>这也修复了 <code>AsyncImagePainter</code> 在 Paparazzi 和 Roborazzi 屏幕截图测试中不同步执行 <code>ImageRequest</code> 的情况。</li></ul></li><li>添加对<a href="https://www.ietf.org/rfc/rfc2397.txt" target="_blank" rel="noreferrer">数据 URI</a> 的支持，格式为：<code>data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</code>。</li><li>添加 <code>AnimatedImageDecoder.ENCODED_LOOP_COUNT</code> 以支持在 GIF 的元数据中使用编码的重复计数。</li><li>为 <code>NetworkRequest</code> 添加 <code>Extras</code> 以支持自定义扩展。</li><li>添加 <code>DiskCache.Builder.cleanupCoroutineContext</code> 并弃用 <code>DiskCache.Builder.cleanupDispatcher</code>。</li><li>添加 <code>ImageLoader.Builder.imageDecoderEnabled</code> 以选择性地禁用在 API 29 及更高版本上使用 <code>android.graphics.ImageDecoder</code>。</li><li>如果 <code>ImageRequest</code> 的数据类型没有注册 <code>Keyer</code>，则记录一条警告。</li><li>将 <code>CrossfadePainter</code> 公开。</li><li>支持所有多平台目标上的 <code>Transformation</code>。</li><li>在 <code>CacheControlCacheStrategy</code> 中支持将 0 作为 <code>Expires</code> 头的值。</li><li>修复了 <code>AsyncImage</code>/<code>SubcomposeAsyncImage</code>/<code>rememberAsyncImage</code> 在其 <code>ContentScale</code> 更改为/从 <code>None</code> 时不启动新的 <code>ImageRequest</code> 的问题。</li><li>更新 Kotlin 到 2.1.10。 <ul><li>注意：如果使用 Kotlin native，此版本需要使用 Kotlin 2.1.0 或更高版本进行编译，因为 LLVM 进行了更新，请参阅<a href="https://kotlinlang.org/docs/whatsnew21.html#llvm-update-from-11-1-0-to-16-0-0" target="_blank" rel="noreferrer">此处</a>了解更多信息。</li></ul></li><li>更新 Compose 到 1.7.3。</li><li>更新 <code>androidx.core</code> 到 1.15.0。</li></ul><h2 id="_3-0-4-2024-年-11-月-25-日" tabindex="-1">[3.0.4] - 2024 年 11 月 25 日 <a class="header-anchor" href="#_3-0-4-2024-年-11-月-25-日" aria-label="Permalink to &quot;[3.0.4] - 2024 年 11 月 25 日&quot;">​</a></h2><ul><li>修复了矢量可绘制对象在 Android Studio 预览中不渲染的问题。</li><li>修复了请求大小超过 <code>maxBitmapSize</code> 时潜在的内存缓存未命中问题。</li><li>修复了 <code>FakeImage</code> 在 Android 上不渲染的问题。</li><li>修复了当与 <code>AsyncImage</code>/<code>rememberAsyncImagePainter</code>/<code>SubcomposeAsyncImage</code> 一起使用时，如果请求的 <code>Transformation</code> 发生变化，则不启动新图像请求的问题。</li><li>修复了 <code>ScaleDrawable</code> 和 <code>CrossfadeDrawable</code> 不尊重色调状态的问题。</li><li>允许 <code>ImageDecoder</code> 解码部分图像源。这与 <code>BitmapFactory</code> 中的行为保持一致。</li><li>修复了解码后未调用 <code>Bitmap.prepareToDraw()</code> 的问题。</li><li><code>SvgDecoder</code> 不应为非栅格化图像返回 <code>isSampled = true</code>。</li><li>如果即时主调度器不可用，Compose 中回退到 <code>Dispatchers.Unconfined</code>。这仅在预览/测试环境中使用。</li><li>更新 Ktor 2 到 <code>2.3.13</code>。</li></ul><h2 id="_3-0-3-2024-年-11-月-14-日" tabindex="-1">[3.0.3] - 2024 年 11 月 14 日 <a class="header-anchor" href="#_3-0-3-2024-年-11-月-14-日" aria-label="Permalink to &quot;[3.0.3] - 2024 年 11 月 14 日&quot;">​</a></h2><ul><li>修复了根据 <code>ImageView</code> 的 <code>ScaleType</code> 设置 <code>ImageRequest.scale</code> 的问题。</li><li>修复了 <code>DiskCache</code> 在删除文件后不会跟踪条目删除的边缘情况。</li><li>在记录错误时将可抛出对象传递给 <code>Logger</code>。</li><li>不要用 <code>kotlin-stdlib</code> 替换 <code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code>。</li></ul><h2 id="_3-0-2-2024-年-11-月-9-日" tabindex="-1">[3.0.2] - 2024 年 11 月 9 日 <a class="header-anchor" href="#_3-0-2-2024-年-11-月-9-日" aria-label="Permalink to &quot;[3.0.2] - 2024 年 11 月 9 日&quot;">​</a></h2><ul><li>修复了在 Android 上使用自定义 <code>CacheStrategy</code> 调用 <code>OkHttpNetworkFetcherFactory</code> 时崩溃的问题。</li><li>修复了 <code>CacheControlCacheStrategy</code> 错误计算缓存条目年龄的问题。</li><li>修复了当 <code>ImageRequest.bitmapConfig</code> 仅在 API 28 及更高版本上被遵循的情况，如果它是 <code>ARGB_8888</code> 或 <code>HARDWARE</code>。</li></ul><h2 id="_3-0-1-2024-年-11-月-7-日" tabindex="-1">[3.0.1] - 2024 年 11 月 7 日 <a class="header-anchor" href="#_3-0-1-2024-年-11-月-7-日" aria-label="Permalink to &quot;[3.0.1] - 2024 年 11 月 7 日&quot;">​</a></h2><ul><li>修复了使用硬件位图支持的 <code>BitmapImage</code> 调用 <code>Image.toBitmap</code> 时崩溃的问题。</li><li>修复了 <code>AsyncImageModelEqualityDelegate.Default</code> 对非 <code>ImageRequest</code> 模型错误比较相等性的问题。</li></ul><h2 id="_3-0-0-2024-年-11-月-4-日" tabindex="-1">[3.0.0] - 2024 年 11 月 4 日 <a class="header-anchor" href="#_3-0-0-2024-年-11-月-4-日" aria-label="Permalink to &quot;[3.0.0] - 2024 年 11 月 4 日&quot;">​</a></h2><p>Coil 3.0.0 是 Coil 的下一个主要版本，全面支持 <a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>。</p><p>有关 3.0.0 中改进和重要更改的完整列表，请查看<a href="/coil/upgrading_to_coil3/">升级指南</a>。</p><p>自 <code>3.0.0-rc02</code> 以来的变更：</p><ul><li>移除剩余的已弃用方法。</li></ul><h2 id="_3-0-0-rc02-2024-年-10-月-28-日" tabindex="-1">[3.0.0-rc02] - 2024 年 10 月 28 日 <a class="header-anchor" href="#_3-0-0-rc02-2024-年-10-月-28-日" aria-label="Permalink to &quot;[3.0.0-rc02] - 2024 年 10 月 28 日&quot;">​</a></h2><p>有关 3.x 中改进和重要更改的完整列表，请查看<a href="/coil/upgrading_to_coil3/">升级指南</a>。自 <code>3.0.0-rc01</code> 以来的变更：</p><ul><li>添加 <code>BlackholeDecoder</code>。这简化了<a href="/coil/faq/">仅磁盘缓存预加载</a>。</li><li>为 <code>ConstraintsSizeResolver</code> 和 <code>DrawScopeSizeResolver</code> 添加 <code>remember</code> 函数。</li><li>从 <code>AsyncImage</code> 中移除 <code>EqualityDelegate</code> 参数。相反，它应该通过 <code>LocalAsyncImageModelEqualityDelegate</code> 进行设置。</li><li>修复了当父可组合项使用 <code>IntrinsicSize</code> 时 <code>AsyncImage</code> 不渲染的问题。</li><li>修复了当 <code>AsyncImagePainter</code> 没有子绘制器时，<code>AsyncImage</code> 填充可用约束的问题。</li><li>修复了当 <code>rememberAsyncImagePainter</code> 的状态由于 <code>EqualityDelegate</code> 被忽略而导致无限重组的问题。</li><li>修复了解析包含特殊字符的 <code>File</code>/<code>Path</code> 路径的问题。</li><li>修复了 <code>VideoFrameDecoder</code> 使用自定义 <code>FileSystem</code> 实现的问题。</li><li>更新 Ktor 到 <code>3.0.0</code>。</li><li>更新 <code>androidx.annotation</code> 到 <code>1.9.0</code>。</li></ul><h2 id="_3-0-0-rc01-2024-年-10-月-8-日" tabindex="-1">[3.0.0-rc01] - 2024 年 10 月 8 日 <a class="header-anchor" href="#_3-0-0-rc01-2024-年-10-月-8-日" aria-label="Permalink to &quot;[3.0.0-rc01] - 2024 年 10 月 8 日&quot;">​</a></h2><p>有关 3.x 中改进和重要更改的完整列表，请查看<a href="/coil/upgrading_to_coil3/">升级指南</a>。自 <code>3.0.0-alpha10</code> 以来的变更：</p><ul><li><strong>破坏性变更</strong>：默认禁用 <code>addLastModifiedToFileCacheKey</code>，并允许它按请求设置。可以通过相同的标志重新启用此行为。</li><li><strong>新特性</strong>：引入了一个新的 <code>coil-network-cache-control</code> 工件，它实现了 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noreferrer"><code>Cache-Control</code> 头</a>支持。</li><li><strong>新特性</strong>：为 <code>SvgDecoder.Factory</code> 添加 <code>scaleToDensity</code> 属性。此属性确保具有固有尺寸的 SVG 会乘以设备密度（仅在 Android 上支持）。</li><li>将 <code>ExifOrientationPolicy</code> 重命名为 <code>ExifOrientationStrategy</code>。</li><li>在获取时从 <code>MemoryCache</code> 中移除不可共享的图像。</li><li>将 <code>ConstraintsSizeResolver</code> 公开。</li><li>稳定 <code>setSingletonImageLoaderFactory</code>。</li><li>恢复 <code>coil-network-ktor3</code> 中优化的 JVM I/O 函数。</li><li>将 <code>pdf</code> 添加到 mime 类型列表。</li><li>更新编译 SDK 到 35。</li><li>更新 Kotlin 到 2.0.20。</li><li>更新 Okio 到 3.9.1。</li></ul><h2 id="_3-0-0-alpha10-2024-年-8-月-7-日" tabindex="-1">[3.0.0-alpha10] - 2024 年 8 月 7 日 <a class="header-anchor" href="#_3-0-0-alpha10-2024-年-8-月-7-日" aria-label="Permalink to &quot;[3.0.0-alpha10] - 2024 年 8 月 7 日&quot;">​</a></h2><ul><li><strong>破坏性变更</strong>：将 <code>ImageLoader.Builder.networkObserverEnabled</code> 替换为 <code>NetworkFetcher</code> 的 <code>ConnectivityChecker</code> 接口。 <ul><li>要禁用网络观察器，请将 <code>ConnectivityChecker.ONLINE</code> 传递给 <code>KtorNetworkFetcherFactory</code>/<code>OkHttpNetworkFetcherFactory</code> 的构造函数。</li></ul></li><li><strong>新特性</strong>：支持在所有平台上加载 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-images-resources.html" target="_blank" rel="noreferrer">Compose Multiplatform 资源</a>。要加载资源，请使用 <code>Res.getUri</code>：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;drawable/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li>为 <code>ImageLoader</code> 和 <code>ImageRequest</code> 添加 <code>maxBitmapSize</code> 属性。 <ul><li>此属性默认为 4096x4096，并为分配的位图尺寸提供了一个安全的上限。这有助于避免意外加载非常大的图像（使用 <code>Size.ORIGINAL</code>）并导致内存不足异常。</li></ul></li><li>将 <code>ExifOrientationPolicy</code> 转换为接口以支持自定义策略。</li><li>修复了 <code>Uri</code> 处理 Windows 文件路径的问题。</li><li>从 <code>Image</code> API 中移除 <code>@ExperimentalCoilApi</code>。</li><li>更新 Kotlin 到 2.0.10。</li></ul><h2 id="_3-0-0-alpha09-2024-年-7-月-23-日" tabindex="-1">[3.0.0-alpha09] - 2024 年 7 月 23 日 <a class="header-anchor" href="#_3-0-0-alpha09-2024-年-7-月-23-日" aria-label="Permalink to &quot;[3.0.0-alpha09] - 2024 年 7 月 23 日&quot;">​</a></h2><ul><li><strong>破坏性变更</strong>：将 <code>io.coil-kt.coil3:coil-network-ktor</code> 工件重命名为 <code>io.coil-kt.coil3:coil-network-ktor2</code>，它依赖于 Ktor 2.x。此外，引入 <code>io.coil-kt.coil3:coil-network-ktor3</code>，它依赖于 Ktor 3.x。<code>wasmJs</code> 支持仅在 Ktor 3.x 中可用。</li><li><strong>新特性</strong>：添加 <code>AsyncImagePainter.restart()</code> 以手动重新启动图像请求。</li><li>从 <code>NetworkClient</code> 及相关类中移除 <code>@ExperimentalCoilApi</code>。</li><li>优化 <code>ImageRequest</code> 以避免不必要的 <code>Extras</code> 和 <code>Map</code> 内存分配。</li></ul><h2 id="_2-7-0-2024-年-7-月-17-日" tabindex="-1">[2.7.0] - 2024 年 7 月 17 日 <a class="header-anchor" href="#_2-7-0-2024-年-7-月-17-日" aria-label="Permalink to &quot;[2.7.0] - 2024 年 7 月 17 日&quot;">​</a></h2><ul><li>略微优化内部协程的使用，以提高 <code>ImageLoader.execute</code>、<code>AsyncImage</code>、<code>SubcomposeAsyncImage</code> 和 <code>rememberAsyncImagePainter</code> 的性能。(<a href="https://github.com/coil-kt/coil/pull/2205" target="_blank" rel="noreferrer">#2205</a>)</li><li>修复了分块响应的重复网络调用问题。(<a href="https://github.com/coil-kt/coil/pull/2363" target="_blank" rel="noreferrer">#2363</a>)</li><li>更新 Kotlin 到 2.0.0。</li><li>更新 Compose UI 到 1.6.8。</li><li>更新 Okio 到 3.9.0。</li></ul><h2 id="_3-0-0-alpha08-2024-年-7-月-8-日" tabindex="-1">[3.0.0-alpha08] - 2024 年 7 月 8 日 <a class="header-anchor" href="#_3-0-0-alpha08-2024-年-7-月-8-日" aria-label="Permalink to &quot;[3.0.0-alpha08] - 2024 年 7 月 8 日&quot;">​</a></h2><ul><li><strong>破坏性变更</strong>：将 <code>ImageRequest</code> 和 <code>ImageLoader</code> 的 <code>dispatcher</code> 方法重命名为 <code>coroutineContext</code>。例如，<code>ImageRequest.Builder.dispatcher</code> 现在是 <code>ImageRequest.Builder.coroutineContext</code>。此重命名是因为该方法现在接受任何 <code>CoroutineContext</code>，并且不再需要 <code>Dispatcher</code>。</li><li>修复：修复了可能由于竞态条件而导致的 <code>IllegalStateException: Reading a state that was created after the snapshot was taken or in a snapshot that has not yet been applied</code> 错误。 <ul><li>注意：这重新引入了对 <code>Dispatchers.Main.immediate</code> 的软依赖。因此，您应该在 JVM 上重新添加对 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-swing/" target="_blank" rel="noreferrer"><code>kotlinx-coroutines-swing</code></a> 的依赖。如果未导入，<code>ImageRequest</code> 将不会立即分派，并且在设置 <code>ImageRequest.placeholder</code> 或从内存缓存解析之前会有单帧延迟。</li></ul></li></ul><h2 id="_3-0-0-alpha07-2024-年-6-月-26-日" tabindex="-1">[3.0.0-alpha07] - 2024 年 6 月 26 日 <a class="header-anchor" href="#_3-0-0-alpha07-2024-年-6-月-26-日" aria-label="Permalink to &quot;[3.0.0-alpha07] - 2024 年 6 月 26 日&quot;">​</a></h2><ul><li><strong>破坏性变更</strong>：<code>AsyncImagePainter</code> 默认不再等待 <code>onDraw</code>，而是使用 <code>Size.ORIGINAL</code>。 <ul><li>这修复了<a href="https://github.com/coil-kt/coil/issues/1910" target="_blank" rel="noreferrer">与 Roborazzi/Paparazzi 的兼容性问题</a>，并整体提高了测试可靠性。</li><li>要恢复等待 <code>onDraw</code> 的行为，请将 <code>DrawScopeSizeResolver</code> 设置为您的 <code>ImageRequest.sizeResolver</code>。</li></ul></li><li><strong>破坏性变更</strong>：重构多平台 <code>Image</code> API。值得注意的是，<code>asCoilImage</code> 已重命名为 <code>asImage</code>。</li><li><strong>破坏性变更</strong>：<code>AsyncImagePainter.state</code> 已更改为 <code>StateFlow&lt;AsyncImagePainter.State&gt;</code>。使用 <code>collectAsState</code> 观察其值。这可以提高性能。</li><li><strong>破坏性变更</strong>：<code>AsyncImagePainter.imageLoader</code> 和 <code>AsyncImagePainter.request</code> 已合并为 <code>StateFlow&lt;AsyncImagePainter.Inputs&gt;</code>。使用 <code>collectAsState</code> 观察其值。这可以提高性能。</li><li><strong>破坏性变更</strong>：移除对 <code>android.resource://example.package.name/drawable/image</code> URI 的支持，因为它会阻止资源缩小优化。 <ul><li>如果您仍然需要此功能，可以<a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/androidInstrumentedTest/kotlin/coil3/map/ResourceUriMapper.kt" target="_blank" rel="noreferrer">手动将 <code>ResourceUriMapper</code> 包含到您的组件注册表中</a>。</li></ul></li><li><strong>新特性</strong>：引入 <code>AsyncImagePreviewHandler</code> 以支持控制 <code>AsyncImagePainter</code> 的预览渲染行为。 <ul><li>使用 <code>LocalAsyncImagePreviewHandler</code> 覆盖预览行为。</li><li>作为此更改和 <code>coil-compose</code> 其他改进的一部分，<code>AsyncImagePainter</code> 现在默认尝试执行 <code>ImageRequest</code>，而不是默认显示 <code>ImageRequest.placeholder</code>。<a href="https://developer.android.com/develop/ui/compose/tooling/previews#preview-limitations" target="_blank" rel="noreferrer">使用网络或文件的请求</a>在预览环境中预计会失败，但 Android 资源应该可以工作。</li></ul></li><li><strong>新特性</strong>：支持按帧索引提取视频图像。(<a href="https://github.com/coil-kt/coil/pull/2183" target="_blank" rel="noreferrer">#2183</a>)</li><li><strong>新特性</strong>：支持将 <code>CoroutineContext</code> 传递给任何 <code>CoroutineDispatcher</code> 方法。(<a href="https://github.com/coil-kt/coil/pull/2241" target="_blank" rel="noreferrer">#2241</a>)。</li><li><strong>新特性</strong>：支持 JS 和 WASM JS 上的弱引用内存缓存。</li><li>不在 Compose 中分派到 <code>Dispatchers.Main.immediate</code>。副作用是，在 JVM 上不再需要导入 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-swing/" target="_blank" rel="noreferrer"><code>kotlinx-coroutines-swing</code></a>。</li><li>不在 Compose 中调用 <code>async</code> 并创建可处置对象以提高性能（感谢 @mlykotom！）。(<a href="https://github.com/coil-kt/coil/pull/2205" target="_blank" rel="noreferrer">#2205</a>)</li><li>修复了将全局 <code>ImageLoader</code> 额外数据传递给 <code>Options</code> 的问题。(<a href="https://github.com/coil-kt/coil/pull/2223" target="_blank" rel="noreferrer">#2223</a>)</li><li>修复了 <code>crossfade(false)</code> 在非 Android 目标上不起作用的问题。</li><li>修复了 VP8X 特性标志字节偏移的问题。(<a href="https://github.com/coil-kt/coil/pull/2199" target="_blank" rel="noreferrer">#2199</a>)</li><li>将非 Android 目标上的 <code>SvgDecoder</code> 转换为渲染到位图，而不是在绘制时渲染图像。这提高了性能。 <ul><li>此行为可以使用 <code>SvgDecoder(renderToBitmap)</code> 进行控制。</li></ul></li><li>将 <code>ScaleDrawable</code> 从 <code>coil-gif</code> 移动到 <code>coil-core</code>。</li><li>更新 Kotlin 到 2.0.0。</li><li>更新 Compose 到 1.6.11。</li><li>更新 Okio 到 3.9.0。</li><li>更新 Skiko 到 0.8.4。</li><li>有关 3.x 中重要更改的完整列表，请查看<a href="/coil/upgrading_to_coil3/">升级指南</a>。</li></ul><h2 id="_3-0-0-alpha06-2024-年-2-月-29-日" tabindex="-1">[3.0.0-alpha06] - 2024 年 2 月 29 日 <a class="header-anchor" href="#_3-0-0-alpha06-2024-年-2-月-29-日" aria-label="Permalink to &quot;[3.0.0-alpha06] - 2024 年 2 月 29 日&quot;">​</a></h2><ul><li>将 Skiko 降级到 0.7.93。</li><li>有关 3.x 中重要更改的完整列表，请查看<a href="/coil/upgrading_to_coil3/">升级指南</a>。</li></ul><h2 id="_3-0-0-alpha05-2024-年-2-月-28-日" tabindex="-1">[3.0.0-alpha05] - 2024 年 2 月 28 日 <a class="header-anchor" href="#_3-0-0-alpha05-2024-年-2-月-28-日" aria-label="Permalink to &quot;[3.0.0-alpha05] - 2024 年 2 月 28 日&quot;">​</a></h2><ul><li><strong>新特性</strong>：支持 <code>wasmJs</code> 目标。</li><li>创建 <code>DrawablePainter</code> 和 <code>DrawableImage</code> 以支持在非 Android 平台上绘制不以 <code>Bitmap</code> 为后备的 <code>Image</code>。 <ul><li><code>Image</code> API 是实验性的，在 alpha 版本之间可能会发生变化。</li></ul></li><li>更新 <code>ContentPainterModifier</code> 以实现 <code>Modifier.Node</code>。</li><li>修复：在后台线程上延迟注册组件回调和网络观察器。这修复了通常在主线程上发生的缓慢初始化问题。</li><li>修复：修复了 <code>ImageLoader.Builder.placeholder/error/fallback</code> 未被 <code>ImageRequest</code> 使用的问题。</li><li>更新 Compose 到 1.6.0。</li><li>更新 Coroutines 到 1.8.0。</li><li>更新 Okio 到 3.8.0。</li><li>更新 Skiko 到 0.7.94。</li><li>有关 3.x 中重要更改的完整列表，请查看<a href="/coil/upgrading_to_coil3/">升级指南</a>。</li></ul><h2 id="_2-6-0-2024-年-2-月-23-日" tabindex="-1">[2.6.0] - 2024 年 2 月 23 日 <a class="header-anchor" href="#_2-6-0-2024-年-2-月-23-日" aria-label="Permalink to &quot;[2.6.0] - 2024 年 2 月 23 日&quot;">​</a></h2><ul><li>使 <code>rememberAsyncImagePainter</code>、<code>AsyncImage</code> 和 <code>SubcomposeAsyncImage</code> <a href="https://developer.android.com/jetpack/compose/performance/stability#functions" target="_blank" rel="noreferrer">可重新启动和可跳过</a>。这通过避免重新组合，除非可组合项的某个参数发生更改，从而提高了性能。 <ul><li>为 <code>rememberAsyncImagePainter</code>、<code>AsyncImage</code> 和 <code>SubcomposeAsyncImage</code> 添加一个可选的 <code>modelEqualityDelegate</code> 参数，以控制 <code>model</code> 是否会触发重新组合。</li></ul></li><li>更新 <code>ContentPainterModifier</code> 以实现 <code>Modifier.Node</code>。</li><li>修复：在后台线程上延迟注册组件回调和网络观察器。这修复了通常在主线程上发生的缓慢初始化问题。</li><li>修复：如果 <code>ImageRequest.listener</code> 或 <code>ImageRequest.target</code> 发生更改，避免在 <code>rememberAsyncImagePainter</code>、<code>AsyncImage</code> 和 <code>SubcomposeAsyncImage</code> 中重新启动新的图像请求。</li><li>修复：不要在 <code>AsyncImagePainter</code> 中两次观察图像请求。</li><li>更新 Kotlin 到 1.9.22。</li><li>更新 Compose 到 1.6.1。</li><li>更新 Okio 到 3.8.0。</li><li>更新 <code>androidx.collection</code> 到 1.4.0。</li><li>更新 <code>androidx.lifecycle</code> 到 2.7.0。</li></ul><h2 id="_3-0-0-alpha04-2024-年-2-月-1-日" tabindex="-1">[3.0.0-alpha04] - 2024 年 2 月 1 日 <a class="header-anchor" href="#_3-0-0-alpha04-2024-年-2-月-1-日" aria-label="Permalink to &quot;[3.0.0-alpha04] - 2024 年 2 月 1 日&quot;">​</a></h2><ul><li><strong>破坏性变更</strong>：从 <code>OkHttpNetworkFetcherFactory</code> 和 <code>KtorNetworkFetcherFactory</code> 的公共 API 中移除 <code>Lazy</code>。</li><li>在 <code>OkHttpNetworkFetcherFactory</code> 中公开 <code>Call.Factory</code> 而不是 <code>OkHttpClient</code>。</li><li>将 <code>NetworkResponseBody</code> 转换为包装 <code>ByteString</code>。</li><li>将 Compose 降级到 1.5.12。</li><li>有关重要更改的完整列表，请查看<a href="/coil/upgrading_to_coil3/">升级指南</a>。</li></ul><h2 id="_3-0-0-alpha03-2024-年-1-月-20-日" tabindex="-1">[3.0.0-alpha03] - 2024 年 1 月 20 日 <a class="header-anchor" href="#_3-0-0-alpha03-2024-年-1-月-20-日" aria-label="Permalink to &quot;[3.0.0-alpha03] - 2024 年 1 月 20 日&quot;">​</a></h2><ul><li><strong>破坏性变更</strong>：<code>coil-network</code> 已重命名为 <code>coil-network-ktor</code>。此外，还有一个新的 <code>coil-network-okhttp</code> 工件，它依赖于 OkHttp，并且不需要指定 Ktor 引擎。 <ul><li>根据您导入的工件，您可以使用 <code>KtorNetworkFetcherFactory</code> 或 <code>OkHttpNetworkFetcherFactory</code> 手动引用 <code>Fetcher.Factory</code>。</li></ul></li><li>支持在 Apple 平台上加载 <code>NSUrl</code>。</li><li>为 <code>AsyncImage</code> 添加 <code>clipToBounds</code> 参数。</li><li>有关重要更改的完整列表，请查看<a href="/coil/upgrading_to_coil3/">升级指南</a>。</li></ul><h2 id="_3-0-0-alpha02-2024-年-1-月-10-日" tabindex="-1">[3.0.0-alpha02] - 2024 年 1 月 10 日 <a class="header-anchor" href="#_3-0-0-alpha02-2024-年-1-月-10-日" aria-label="Permalink to &quot;[3.0.0-alpha02] - 2024 年 1 月 10 日&quot;">​</a></h2><ul><li><strong>破坏性变更</strong>：<code>coil-gif</code>、<code>coil-network</code>、<code>coil-svg</code> 和 <code>coil-video</code> 的包已更新，因此它们的所有类都分别属于 <code>coil.gif</code>、<code>coil.network</code>、<code>coil.svg</code> 和 <code>coil.video</code>。这有助于避免与其他工件的类名冲突。</li><li><strong>破坏性变更</strong>：<code>ImageDecoderDecoder</code> 已重命名为 <code>AnimatedImageDecoder</code>。</li><li><strong>新特性</strong>：<code>coil-gif</code>、<code>coil-network</code>、<code>coil-svg</code> 和 <code>coil-video</code> 的组件现在会自动添加到每个 <code>ImageLoader</code> 的 <code>ComponentRegistry</code> 中。 <ul><li>明确地说，与 <code>3.0.0-alpha01</code> 不同，<strong>您不需要手动将 <code>NetworkFetcher.Factory()</code> 添加到您的 <code>ComponentRegistry</code> 中</strong>。只需导入 <code>io.coil-kt.coil3:coil-network:[version]</code> 和<a href="https://ktor.io/docs/http-client-engines.html#dependencies" target="_blank" rel="noreferrer">一个 Ktor 引擎</a>就足以加载网络图像。</li><li>手动将这些组件添加到 <code>ComponentRegistry</code> 也是安全的。任何手动添加的组件优先于自动添加的组件。</li><li>如果需要，可以使用 <code>ImageLoader.Builder.serviceLoaderEnabled(false)</code> 禁用此行为。</li></ul></li><li><strong>新特性</strong>：支持所有平台上的 <code>coil-svg</code>。它在 Android 上由 <a href="https://bigbadaboom.github.io/androidsvg/" target="_blank" rel="noreferrer">AndroidSVG</a> 提供支持，在非 Android 平台上由 <a href="https://api.skia.org/classSkSVGDOM.html" target="_blank" rel="noreferrer">SVGDOM</a> 提供支持。</li><li>Coil 现在内部使用 Android 的 <a href="https://developer.android.com/reference/android/graphics/ImageDecoder" target="_blank" rel="noreferrer"><code>ImageDecoder</code></a> API，这在直接从文件、资源或内容 URI 解码时具有性能优势。</li><li>修复：多个 <code>coil3.Uri</code> 解析修复。</li><li>有关重要更改的完整列表，请查看<a href="/coil/upgrading_to_coil3/">升级指南</a>。</li></ul><h2 id="_3-0-0-alpha01-2023-年-12-月-30-日" tabindex="-1">[3.0.0-alpha01] - 2023 年 12 月 30 日 <a class="header-anchor" href="#_3-0-0-alpha01-2023-年-12-月-30-日" aria-label="Permalink to &quot;[3.0.0-alpha01] - 2023 年 12 月 30 日&quot;">​</a></h2><ul><li><strong>新特性</strong>：<a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 支持。Coil 现在是一个 Kotlin Multiplatform 库，支持 Android、JVM、iOS、macOS 和 Javascript。</li><li>Coil 的 Maven 坐标已更新为 <code>io.coil-kt.coil3</code>，其导入已更新为 <code>coil3</code>。这使得 Coil 3 可以与 Coil 2 并行运行，而不会出现二进制兼容性问题。例如，<code>io.coil-kt:coil:[version]</code> 现在是 <code>io.coil-kt.coil3:coil:[version]</code>。</li><li><code>coil-base</code> 和 <code>coil-compose-base</code> 工件已分别重命名为 <code>coil-core</code> 和 <code>coil-compose-core</code>，以与 Coroutines、Ktor 和 AndroidX 使用的命名约定保持一致。</li><li>有关重要更改的完整列表，请查看<a href="/coil/upgrading_to_coil3/">升级指南</a>。</li></ul><h2 id="_2-5-0-2023-年-10-月-30-日" tabindex="-1">[2.5.0] - 2023 年 10 月 30 日 <a class="header-anchor" href="#_2-5-0-2023-年-10-月-30-日" aria-label="Permalink to &quot;[2.5.0] - 2023 年 10 月 30 日&quot;">​</a></h2><ul><li><strong>新特性</strong>：添加 <code>MediaDataSourceFetcher.Factory</code> 以支持在 <code>coil-video</code> 中解码 <code>MediaDataSource</code> 实现。(<a href="https://github.com/coil-kt/coil/pull/1795" target="_blank" rel="noreferrer">#1795</a>)</li><li>将 <code>SHIFT6m</code> 设备添加到硬件位图黑名单中。(<a href="https://github.com/coil-kt/coil/pull/1812" target="_blank" rel="noreferrer">#1812</a>)</li><li>修复：防止绘制器返回具有一个无界尺寸的大小。(<a href="https://github.com/coil-kt/coil/pull/1826" target="_blank" rel="noreferrer">#1826</a>)</li><li>修复：当缓存头包含非 ASCII 字符时，磁盘缓存加载在 <code>304 Not Modified</code> 后失败。(<a href="https://github.com/coil-kt/coil/pull/1839" target="_blank" rel="noreferrer">#1839</a>)</li><li>修复：<code>FakeImageEngine</code> 未更新拦截器链的请求。(<a href="https://github.com/coil-kt/coil/pull/1905" target="_blank" rel="noreferrer">#1905</a>)</li><li>更新编译 SDK 到 34。</li><li>更新 Kotlin 到 1.9.10。</li><li>更新 Coroutines 到 1.7.3。</li><li>更新 <code>accompanist-drawablepainter</code> 到 0.32.0。</li><li>更新 <code>androidx.annotation</code> 到 1.7.0。</li><li>更新 <code>androidx.compose.foundation</code> 到 1.5.4。</li><li>更新 <code>androidx.core</code> 到 1.12.0。</li><li>更新 <code>androidx.exifinterface:exifinterface</code> 到 1.3.6。</li><li>更新 <code>androidx.lifecycle</code> 到 2.6.2。</li><li>更新 <code>com.squareup.okhttp3</code> 到 4.12.0。</li><li>更新 <code>com.squareup.okio</code> 到 3.6.0。</li></ul><h2 id="_2-4-0-2023-年-5-月-21-日" tabindex="-1">[2.4.0] - 2023 年 5 月 21 日 <a class="header-anchor" href="#_2-4-0-2023-年-5-月-21-日" aria-label="Permalink to &quot;[2.4.0] - 2023 年 5 月 21 日&quot;">​</a></h2><ul><li>将 <code>DiskCache</code> 的 <code>get</code>/<code>edit</code> 重命名为 <code>openSnapshot</code>/<code>openEditor</code>。</li><li>不要自动将 <code>ColorDrawable</code> 转换为 <code>ColorPainter</code> 在 <code>AsyncImagePainter</code> 中。</li><li>使用 <code>@NonRestartableComposable</code> 注解简单的 <code>AsyncImage</code> 重载。</li><li>修复：在 <code>ImageSource</code> 中延迟调用 <code>Context.cacheDir</code>。</li><li>修复：修复发布 <code>coil-bom</code> 的问题。</li><li>修复：修复了如果硬件位图被禁用，总是将位图配置设置为 <code>ARGB_8888</code> 的问题。</li><li>更新 Kotlin 到 1.8.21。</li><li>更新 Coroutines 到 1.7.1。</li><li>更新 <code>accompanist-drawablepainter</code> 到 0.30.1。</li><li>更新 <code>androidx.compose.foundation</code> 到 1.4.3。</li><li>更新 <code>androidx.profileinstaller:profileinstaller</code> 到 1.3.1。</li><li>更新 <code>com.squareup.okhttp3</code> 到 4.11.0。</li></ul><h2 id="_2-3-0-2023-年-3-月-25-日" tabindex="-1">[2.3.0] - 2023 年 3 月 25 日 <a class="header-anchor" href="#_2-3-0-2023-年-3-月-25-日" aria-label="Permalink to &quot;[2.3.0] - 2023 年 3 月 25 日&quot;">​</a></h2><ul><li><strong>新特性</strong>：引入了一个新的 <code>coil-test</code> 工件，其中包括 <code>FakeImageLoaderEngine</code>。此类对于硬编码图像加载器响应（以确保测试中一致且同步（从主线程）的响应）很有用。有关更多信息，请参阅<a href="/coil/testing">此处</a>。</li><li><strong>新特性</strong>：为 <code>coil-base</code>（<code>coil</code> 的子模块）和 <code>coil-compose-base</code>（<code>coil-compose</code> 的子模块）添加了<a href="https://developer.android.com/topic/performance/baselineprofiles/overview" target="_blank" rel="noreferrer">基线配置文件</a>。 <ul><li>这提高了 Coil 的运行时性能，并且根据 Coil 在您的应用程序中的使用方式，应该能提供<a href="https://github.com/coil-kt/coil/tree/main/coil-benchmark/benchmark_output.md" target="_blank" rel="noreferrer">更好的帧时间</a>。</li></ul></li><li>修复：修复了解析包含编码数据的 <code>file://</code> URI 的问题。 <a href="https://github.com/coil-kt/coil/pull/1601" target="_blank" rel="noreferrer">#1601</a></li><li>修复：如果传递的目录不存在，<code>DiskCache</code> 现在可以正确计算其最大大小。 <a href="https://github.com/coil-kt/coil/pull/1620" target="_blank" rel="noreferrer">#1620</a></li><li>将 <code>Coil.reset</code> 公开为 API。 <a href="https://github.com/coil-kt/coil/pull/1506" target="_blank" rel="noreferrer">#1506</a></li><li>启用 Java 默认方法生成。 <a href="https://github.com/coil-kt/coil/pull/1491" target="_blank" rel="noreferrer">#1491</a></li><li>更新 Kotlin 到 1.8.10。</li><li>更新 <code>accompanist-drawablepainter</code> 到 0.30.0。</li><li>更新 <code>androidx.annotation</code> 到 1.6.0。</li><li>更新 <code>androidx.appcompat:appcompat-resources</code> 到 1.6.1。</li><li>更新 <code>androidx.compose.foundation</code> 到 1.4.0。</li><li>更新 <code>androidx.core</code> 到 1.9.0。</li><li>更新 <code>androidx.exifinterface:exifinterface</code> 到 1.3.6。</li><li>更新 <code>androidx.lifecycle</code> 到 2.6.1。</li><li>更新 <code>okio</code> 到 3.3.0。</li></ul><h2 id="_2-2-2-2022-年-10-月-1-日" tabindex="-1">[2.2.2] - 2022 年 10 月 1 日 <a class="header-anchor" href="#_2-2-2-2022-年-10-月-1-日" aria-label="Permalink to &quot;[2.2.2] - 2022 年 10 月 1 日&quot;">​</a></h2><ul><li>确保图像加载器完全初始化后再注册其系统回调。 <a href="https://github.com/coil-kt/coil/pull/1465" target="_blank" rel="noreferrer">#1465</a></li><li>在 API 30+ 上，在 <code>VideoFrameDecoder</code> 中设置首选位图配置以避免色带。 <a href="https://github.com/coil-kt/coil/pull/1487" target="_blank" rel="noreferrer">#1487</a></li><li>修复了 <code>FileUriMapper</code> 中解析包含 <code>#</code> 路径的问题。 <a href="https://github.com/coil-kt/coil/pull/1466" target="_blank" rel="noreferrer">#1466</a></li><li>修复了从磁盘缓存读取包含非 ASCII 头部的响应的问题。 <a href="https://github.com/coil-kt/coil/pull/1468" target="_blank" rel="noreferrer">#1468</a></li><li>修复了在资产子文件夹内解码视频的问题。 <a href="https://github.com/coil-kt/coil/pull/1489" target="_blank" rel="noreferrer">#1489</a></li><li>更新 <code>androidx.annotation</code> 到 1.5.0。</li></ul><h2 id="_2-2-1-2022-年-9-月-8-日" tabindex="-1">[2.2.1] - 2022 年 9 月 8 日 <a class="header-anchor" href="#_2-2-1-2022-年-9-月-8-日" aria-label="Permalink to &quot;[2.2.1] - 2022 年 9 月 8 日&quot;">​</a></h2><ul><li>修复：<code>RoundedCornersTransformation</code> 现在正确缩放 <code>input</code> 位图。</li><li>移除对 <code>kotlin-parcelize</code> 插件的依赖。</li><li>更新编译 SDK 到 33。</li><li>将 <code>androidx.appcompat:appcompat-resources</code> 降级到 1.4.2，以解决 <a href="https://github.com/coil-kt/coil/issues/1423" target="_blank" rel="noreferrer">#1423</a> 问题。</li></ul><h2 id="_2-2-0-2022-年-8-月-16-日" tabindex="-1">[2.2.0] - 2022 年 8 月 16 日 <a class="header-anchor" href="#_2-2-0-2022-年-8-月-16-日" aria-label="Permalink to &quot;[2.2.0] - 2022 年 8 月 16 日&quot;">​</a></h2><ul><li><strong>新特性</strong>：为 <code>coil-video</code> 添加 <code>ImageRequest.videoFramePercent</code> 以支持将视频帧指定为视频持续时间的百分比。</li><li><strong>新特性</strong>：添加 <code>ExifOrientationPolicy</code> 以配置 <code>BitmapFactoryDecoder</code> 如何处理 EXIF 方向数据。</li><li>修复：如果传递给 <code>RoundedCornersTransformation</code> 的大小包含未定义的维度，则不要抛出异常。</li><li>修复：将 GIF 的帧延迟读取为两个无符号字节，而不是一个有符号字节。</li><li>更新 Kotlin 到 1.7.10。</li><li>更新 Coroutines 到 1.6.4。</li><li>更新 Compose 到 1.2.1。</li><li>更新 OkHttp 到 4.10.0。</li><li>更新 Okio 到 3.2.0。</li><li>更新 <code>accompanist-drawablepainter</code> 到 0.25.1。</li><li>更新 <code>androidx.annotation</code> 到 1.4.0。</li><li>更新 <code>androidx.appcompat:appcompat-resources</code> 到 1.5.0。</li><li>更新 <code>androidx.core</code> 到 1.8.0。</li></ul><h2 id="_2-1-0-2022-年-5-月-17-日" tabindex="-1">[2.1.0] - 2022 年 5 月 17 日 <a class="header-anchor" href="#_2-1-0-2022-年-5-月-17-日" aria-label="Permalink to &quot;[2.1.0] - 2022 年 5 月 17 日&quot;">​</a></h2><ul><li><strong>新特性</strong>：支持加载 <code>ByteArray</code>。(<a href="https://github.com/coil-kt/coil/pull/1202" target="_blank" rel="noreferrer">#1202</a>)</li><li><strong>新特性</strong>：使用 <code>ImageRequest.Builder.css</code> 支持为 SVG 设置自定义 CSS 规则。(<a href="https://github.com/coil-kt/coil/pull/1210" target="_blank" rel="noreferrer">#1210</a>)</li><li>修复：将 <code>GenericViewTarget</code> 的私有方法转换为保护方法。(<a href="https://github.com/coil-kt/coil/pull/1273" target="_blank" rel="noreferrer">#1273</a>)</li><li>更新编译 SDK 到 32。(<a href="https://github.com/coil-kt/coil/pull/1268" target="_blank" rel="noreferrer">#1268</a>)</li></ul><h2 id="_2-0-0-2022-年-5-月-10-日" tabindex="-1">[2.0.0] - 2022 年 5 月 10 日 <a class="header-anchor" href="#_2-0-0-2022-年-5-月-10-日" aria-label="Permalink to &quot;[2.0.0] - 2022 年 5 月 10 日&quot;">​</a></h2><p>Coil 2.0.0 是该库的一个主要迭代，包含破坏性更改。请查看<a href="/coil/upgrading/">升级指南</a>了解如何升级。</p><ul><li><strong>新特性</strong>：在 <code>coil-compose</code> 中引入 <code>AsyncImage</code>。有关更多信息，请查看<a href="/coil/compose/">文档</a>。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 显示来自网络的图像。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 显示来自网络的图像，带有占位符、圆形裁剪和交叉淡入动画。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalContext.current)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    placeholder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(R.drawable.placeholder),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(R.string.description),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CircleShape)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><strong>新特性</strong>：引入公共 <code>DiskCache</code> API。 <ul><li>使用 <code>ImageLoader.Builder.diskCache</code> 和 <code>DiskCache.Builder</code> 配置磁盘缓存。</li><li>您不应在 Coil 2.0 中使用 OkHttp 的 <code>Cache</code>。有关更多信息，请参阅<a href="/coil/upgrading_to_coil2/">此处</a>。</li><li><code>Cache-Control</code> 和其他缓存头仍然受支持——除了 <code>Vary</code> 头，因为缓存只检查 URL 是否匹配。此外，只有响应代码在 [200..300) 范围内的响应才会被缓存。</li><li>升级到 2.0 时，现有磁盘缓存将被清除。</li></ul></li><li>最低支持的 API 现在是 21。</li><li><code>ImageRequest</code> 的默认 <code>Scale</code> 现在是 <code>Scale.FIT</code>。 <ul><li>这样做的目的是使 <code>ImageRequest.scale</code> 与其他具有默认 <code>Scale</code> 的类保持一致。</li><li>带有 <code>ImageViewTarget</code> 的请求仍然会自动检测其 <code>Scale</code>。</li></ul></li><li>重构图像管道类： <ul><li><code>Mapper</code>、<code>Fetcher</code> 和 <code>Decoder</code> 已被重构以更灵活。</li><li><code>Fetcher.key</code> 已被新的 <code>Keyer</code> 接口取代。<code>Keyer</code> 从输入数据创建缓存键。</li><li>添加 <code>ImageSource</code>，它允许 <code>Decoder</code> 使用 Okio 的文件系统 API 直接读取 <code>File</code>。</li></ul></li><li>重构 Jetpack Compose 集成： <ul><li><code>rememberImagePainter</code> 和 <code>ImagePainter</code> 已分别重命名为 <code>rememberAsyncImagePainter</code> 和 <code>AsyncImagePainter</code>。</li><li>弃用 <code>LocalImageLoader</code>。有关更多信息，请查看弃用消息。</li></ul></li><li>禁用生成运行时非空断言。 <ul><li>如果您使用 Java，将 null 作为非空注解参数传递给函数将不再立即抛出 <code>NullPointerException</code>。Kotlin 的编译时空安全机制可以防止这种情况发生。</li><li>此更改允许库的大小更小。</li></ul></li><li><code>Size</code> 现在由两个 <code>Dimension</code> 值组成，用于其宽度和高度。<code>Dimension</code> 可以是正像素值或 <code>Dimension.Undefined</code>。有关更多信息，请参阅<a href="/coil/upgrading/">此处</a>。</li><li><code>BitmapPool</code> 和 <code>PoolableViewTarget</code> 已从库中移除。</li><li><code>VideoFrameFileFetcher</code> 和 <code>VideoFrameUriFetcher</code> 已从库中移除。而是使用 <code>VideoFrameDecoder</code>，它支持所有数据源。</li><li><a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/BlurTransformation.kt" target="_blank" rel="noreferrer"><code>BlurTransformation</code></a> 和 <a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/GrayscaleTransformation.kt" target="_blank" rel="noreferrer"><code>GrayscaleTransformation</code></a> 已从库中移除。如果您使用它们，可以将它们的代码复制到您的项目中。</li><li>将 <code>Transition.transition</code> 更改为非挂起函数，因为它不再需要挂起过渡直到完成。</li><li>添加对 <code>bitmapFactoryMaxParallelism</code> 的支持，它限制了正在进行的 <code>BitmapFactory</code> 操作的最大数量。此值默认为 4，这提高了 UI 性能。</li><li>添加对 <code>interceptorDispatcher</code>、<code>fetcherDispatcher</code>、<code>decoderDispatcher</code> 和 <code>transformationDispatcher</code> 的支持。</li><li>添加 <code>GenericViewTarget</code>，它处理通用 <code>ViewTarget</code> 逻辑。</li><li>将 <code>ByteBuffer</code> 添加到默认支持的数据类型中。</li><li><code>Disposable</code> 已被重构并暴露底层 <code>ImageRequest</code> 的作业。</li><li>重构 <code>MemoryCache</code> API。</li><li>如果 <code>ImageRequest.fallback</code> 为 null，则 <code>ImageRequest.error</code> 现在会设置在 <code>Target</code> 上。</li><li><code>Transformation.key</code> 被 <code>Transformation.cacheKey</code> 取代。</li><li>更新 Kotlin 到 1.6.10。</li><li>更新 Compose 到 1.1.1。</li><li>更新 OkHttp 到 4.9.3。</li><li>更新 Okio 到 3.0.0。</li></ul><p>自 <code>2.0.0-rc03</code> 以来的变更：</p><ul><li>将 <code>Dimension.Original</code> 转换为 <code>Dimension.Undefined</code>。 <ul><li>这稍微改变了非像素尺寸的语义，以修复尺寸系统中的一些边缘情况（<a href="https://github.com/coil-kt/coil/issues/1246" target="_blank" rel="noreferrer">示例</a>）。</li></ul></li><li>如果 ContentScale 为 None，则使用 <code>Size.ORIGINAL</code> 加载图像。</li><li>修复了优先而不是最后应用 <code>ImageView.load</code> 构建器参数的问题。</li><li>修复了如果响应未修改，则不合并 HTTP 头的问题。</li></ul><h2 id="_2-0-0-rc03-2022-年-4-月-11-日" tabindex="-1">[2.0.0-rc03] - 2022 年 4 月 11 日 <a class="header-anchor" href="#_2-0-0-rc03-2022-年-4-月-11-日" aria-label="Permalink to &quot;[2.0.0-rc03] - 2022 年 4 月 11 日&quot;">​</a></h2><ul><li>移除 <code>ScaleResolver</code> 接口。</li><li>将 <code>Size</code> 构造函数转换为函数。</li><li>将 <code>Dimension.Pixels</code> 的 <code>toString</code> 更改为仅为其像素值。</li><li>防止 <code>SystemCallbacks.onTrimMemory</code> 中的罕见崩溃。</li><li>更新 Coroutines 到 1.6.1。</li></ul><h2 id="_2-0-0-rc02-2022-年-3-月-20-日" tabindex="-1">[2.0.0-rc02] - 2022 年 3 月 20 日 <a class="header-anchor" href="#_2-0-0-rc02-2022-年-3-月-20-日" aria-label="Permalink to &quot;[2.0.0-rc02] - 2022 年 3 月 20 日&quot;">​</a></h2><ul><li>恢复 <code>ImageRequest</code> 的默认尺寸为当前显示的大小，而不是 <code>Size.ORIGINAL</code>。</li><li>修复 <code>DiskCache.Builder</code> 被标记为实验性。仅 <code>DiskCache</code> 的方法是实验性的。</li><li>修复了将图像加载到 <code>ImageView</code> 中，其中一个维度为 <code>WRAP_CONTENT</code> 时，图像会以原始大小加载，而不是适应有界维度的情况。</li><li>移除 <code>MemoryCache.Key</code>、<code>MemoryCache.Value</code> 和 <code>Parameters.Entry</code> 的组件函数。</li></ul><h2 id="_2-0-0-rc01-2022-年-3-月-2-日" tabindex="-1">[2.0.0-rc01] - 2022 年 3 月 2 日 <a class="header-anchor" href="#_2-0-0-rc01-2022-年-3-月-2-日" aria-label="Permalink to &quot;[2.0.0-rc01] - 2022 年 3 月 2 日&quot;">​</a></h2><p>自 <code>1.4.0</code> 以来的重大更改：</p><ul><li>最低支持的 API 现在是 21。</li><li>重构 Jetpack Compose 集成。 <ul><li><code>rememberImagePainter</code> 已重命名为 <code>rememberAsyncImagePainter</code>。</li><li>添加了对 <code>AsyncImage</code> 和 <code>SubcomposeAsyncImage</code> 的支持。有关更多信息，请查看<a href="/coil/compose/">文档</a>。</li><li>弃用 <code>LocalImageLoader</code>。有关更多信息，请查看弃用消息。</li></ul></li><li>Coil 2.0 拥有自己的磁盘缓存实现，不再依赖 OkHttp 进行磁盘缓存。 <ul><li>使用 <code>ImageLoader.Builder.diskCache</code> 和 <code>DiskCache.Builder</code> 配置磁盘缓存。</li><li>您<strong>不应</strong>在 Coil 2.0 中使用 OkHttp 的 <code>Cache</code>，因为如果线程在写入缓存时中断，缓存可能会损坏。</li><li><code>Cache-Control</code> 和其他缓存头仍然受支持——除了 <code>Vary</code> 头，因为缓存只检查 URL 是否匹配。此外，只有响应代码在 [200..300) 范围内的响应才会被缓存。</li><li>升级到 2.0 时，现有磁盘缓存将被清除。</li></ul></li><li><code>ImageRequest</code> 的默认 <code>Scale</code> 现在是 <code>Scale.FIT</code>。 <ul><li>这样做的目的是使 <code>ImageRequest.scale</code> 与其他具有默认 <code>Scale</code> 的类保持一致。</li><li>带有 <code>ImageViewTarget</code> 的请求仍然会自动检测其 <code>Scale</code>。</li></ul></li><li><code>ImageRequest</code> 的默认尺寸现在是 <code>Size.ORIGINAL</code>。</li><li>重构图像管道类： <ul><li><code>Mapper</code>、<code>Fetcher</code> 和 <code>Decoder</code> 已被重构以更灵活。</li><li><code>Fetcher.key</code> 已被新的 <code>Keyer</code> 接口取代。<code>Keyer</code> 从输入数据创建缓存键。</li><li>添加 <code>ImageSource</code>，它允许 <code>Decoder</code> 使用 Okio 的文件系统 API 直接读取 <code>File</code>。</li></ul></li><li>禁用生成运行时非空断言。 <ul><li>如果您使用 Java，将 null 作为非空注解参数传递给函数将不再立即抛出 <code>NullPointerException</code>。如果您使用 Kotlin，则基本没有变化。</li><li>此更改允许库的大小更小。</li></ul></li><li><code>Size</code> 现在由两个 <code>Dimension</code> 值组成，用于其宽度和高度。<code>Dimension</code> 可以是正像素值或 <code>Dimension.Original</code>。</li><li><code>BitmapPool</code> 和 <code>PoolableViewTarget</code> 已从库中移除。</li><li><code>VideoFrameFileFetcher</code> 和 <code>VideoFrameUriFetcher</code> 已从库中移除。而是使用 <code>VideoFrameDecoder</code>，它支持所有数据源。</li><li><a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/BlurTransformation.kt" target="_blank" rel="noreferrer"><code>BlurTransformation</code></a> 和 <a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/GrayscaleTransformation.kt" target="_blank" rel="noreferrer"><code>GrayscaleTransformation</code></a> 已从库中移除。如果您使用它们，可以将它们的代码复制到您的项目中。</li><li>将 <code>Transition.transition</code> 更改为非挂起函数，因为它不再需要挂起过渡直到完成。</li><li>添加对 <code>bitmapFactoryMaxParallelism</code> 的支持，它限制了正在进行的 <code>BitmapFactory</code> 操作的最大数量。此值默认为 4，这提高了 UI 性能。</li><li>添加对 <code>interceptorDispatcher</code>、<code>fetcherDispatcher</code>、<code>decoderDispatcher</code> 和 <code>transformationDispatcher</code> 的支持。</li><li>添加 <code>GenericViewTarget</code>，它处理通用 <code>ViewTarget</code> 逻辑。</li><li>将 <code>ByteBuffer</code> 添加到默认支持的数据类型中。</li><li><code>Disposable</code> 已被重构并暴露底层 <code>ImageRequest</code> 的作业。</li><li>重构 <code>MemoryCache</code> API。</li><li>如果 <code>ImageRequest.fallback</code> 为 null，则 <code>ImageRequest.error</code> 现在会设置在 <code>Target</code> 上。</li><li><code>Transformation.key</code> 被 <code>Transformation.cacheKey</code> 取代。</li><li>更新 Kotlin 到 1.6.10。</li><li>更新 Compose 到 1.1.1。</li><li>更新 OkHttp 到 4.9.3。</li><li>更新 Okio 到 3.0.0。</li></ul><p>自 <code>2.0.0-alpha09</code> 以来的更改：</p><ul><li>移除 <code>-Xjvm-default=all</code> 编译器标志。</li><li>修复了如果多个带有 must-revalidate/e-tag 的请求并发执行时，图像加载失败的问题。</li><li>修复了如果 <code>&lt;svg</code> 标签后有换行符，<code>DecodeUtils.isSvg</code> 返回 false 的问题。</li><li>使 <code>LocalImageLoader.provides</code> 弃用消息更清晰。</li><li>更新 Compose 到 1.1.1。</li><li>更新 <code>accompanist-drawablepainter</code> 到 0.23.1。</li></ul><h2 id="_2-0-0-alpha09-2022-年-2-月-16-日" tabindex="-1">[2.0.0-alpha09] - 2022 年 2 月 16 日 <a class="header-anchor" href="#_2-0-0-alpha09-2022-年-2-月-16-日" aria-label="Permalink to &quot;[2.0.0-alpha09] - 2022 年 2 月 16 日&quot;">​</a></h2><ul><li>修复 <code>AsyncImage</code> 创建无效约束。(<a href="https://github.com/coil-kt/coil/pull/1134" target="_blank" rel="noreferrer">#1134</a>)</li><li>为 <code>AsyncImagePainter</code> 添加 <code>ContentScale</code> 参数。(<a href="https://github.com/coil-kt/coil/pull/1144" target="_blank" rel="noreferrer">#1144</a>) <ul><li>这应该设置为与 <code>Image</code> 上设置的相同值，以确保图像以正确的大小加载。</li></ul></li><li>添加 <code>ScaleResolver</code> 以支持延迟解析 <code>ImageRequest</code> 的 <code>Scale</code>。(<a href="https://github.com/coil-kt/coil/pull/1134" target="_blank" rel="noreferrer">#1134</a>) <ul><li><code>ImageRequest.scale</code> 应该被 <code>ImageRequest.scaleResolver.scale()</code> 替换。</li></ul></li><li>更新 Compose 到 1.1.0。</li><li>更新 <code>accompanist-drawablepainter</code> 到 0.23.0。</li><li>更新 <code>androidx.lifecycle</code> 到 2.4.1。</li></ul><h2 id="_2-0-0-alpha08-2022-年-2-月-7-日" tabindex="-1">[2.0.0-alpha08] - 2022 年 2 月 7 日 <a class="header-anchor" href="#_2-0-0-alpha08-2022-年-2-月-7-日" aria-label="Permalink to &quot;[2.0.0-alpha08] - 2022 年 2 月 7 日&quot;">​</a></h2><ul><li>更新 <code>DiskCache</code> 和 <code>ImageSource</code> 以使用 Okio 的 <code>FileSystem</code> API。(<a href="https://github.com/coil-kt/coil/pull/1115" target="_blank" rel="noreferrer">#1115</a>)</li></ul><h2 id="_2-0-0-alpha07-2022-年-1-月-30-日" tabindex="-1">[2.0.0-alpha07] - 2022 年 1 月 30 日 <a class="header-anchor" href="#_2-0-0-alpha07-2022-年-1-月-30-日" aria-label="Permalink to &quot;[2.0.0-alpha07] - 2022 年 1 月 30 日&quot;">​</a></h2><ul><li>显著提高 <code>AsyncImage</code> 性能，并将 <code>AsyncImage</code> 分割为 <code>AsyncImage</code> 和 <code>SubcomposeAsyncImage</code>。(<a href="https://github.com/coil-kt/coil/pull/1048" target="_blank" rel="noreferrer">#1048</a>) <ul><li><code>SubcomposeAsyncImage</code> 提供 <code>loading</code>/<code>success</code>/<code>error</code>/<code>content</code> 插槽 API，并使用子组合，性能较差。</li><li><code>AsyncImage</code> 提供 <code>placeholder</code>/<code>error</code>/<code>fallback</code> 参数以覆盖加载时或请求不成功时绘制的 <code>Painter</code>。<code>AsyncImage</code> 不使用子组合，性能比 <code>SubcomposeAsyncImage</code> 好得多。</li><li>从 <code>SubcomposeAsyncImage.content</code> 中移除 <code>AsyncImagePainter.State</code> 参数。如果需要，请使用 <code>painter.state</code>。</li><li>为 <code>AsyncImage</code> 和 <code>SubcomposeAsyncImage</code> 添加 <code>onLoading</code>/<code>onSuccess</code>/<code>onError</code> 回调。</li></ul></li><li>弃用 <code>LocalImageLoader</code>。(<a href="https://github.com/coil-kt/coil/pull/1101" target="_blank" rel="noreferrer">#1101</a>)</li><li>添加对 <code>ImageRequest.tags</code> 的支持。(<a href="https://github.com/coil-kt/coil/pull/1066" target="_blank" rel="noreferrer">#1066</a>)</li><li>将 <code>DecodeUtils</code> 中的 <code>isGif</code>、<code>isWebP</code>、<code>isAnimatedWebP</code>、<code>isHeif</code> 和 <code>isAnimatedHeif</code> 移动到 coil-gif。将 <code>isSvg</code> 添加到 coil-svg。(<a href="https://github.com/coil-kt/coil/pull/1117" target="_blank" rel="noreferrer">#1117</a>)</li><li>将 <code>FetchResult</code> 和 <code>DecodeResult</code> 转换为非数据类。(<a href="https://github.com/coil-kt/coil/pull/1114" target="_blank" rel="noreferrer">#1114</a>)</li><li>移除未使用的 <code>DiskCache.Builder</code> context 参数。(<a href="https://github.com/coil-kt/coil/pull/1099" target="_blank" rel="noreferrer">#1099</a>)</li><li>修复原始大小位图资源的缩放问题。(<a href="https://github.com/coil-kt/coil/pull/1072" target="_blank" rel="noreferrer">#1072</a>)</li><li>修复 <code>ImageDecoderDecoder</code> 中 <code>ImageDecoder</code> 关闭失败的问题。(<a href="https://github.com/coil-kt/coil/pull/1109" target="_blank" rel="noreferrer">#1109</a>)</li><li>修复将 drawable 转换为位图时缩放不正确的问题。(<a href="https://github.com/coil-kt/coil/pull/1084" target="_blank" rel="noreferrer">#1084</a>)</li><li>更新 Compose 到 1.1.0-rc03。</li><li>更新 <code>accompanist-drawablepainter</code> 到 0.22.1-rc。</li><li>更新 <code>androidx.appcompat:appcompat-resources</code> 到 1.4.1。</li></ul><h2 id="_2-0-0-alpha06-2021-年-12-月-24-日" tabindex="-1">[2.0.0-alpha06] - 2021 年 12 月 24 日 <a class="header-anchor" href="#_2-0-0-alpha06-2021-年-12-月-24-日" aria-label="Permalink to &quot;[2.0.0-alpha06] - 2021 年 12 月 24 日&quot;">​</a></h2><ul><li>添加 <code>ImageSource.Metadata</code> 以支持从资产、资源和内容 URI 解码，无需缓冲或临时文件。(<a href="https://github.com/coil-kt/coil/pull/1060" target="_blank" rel="noreferrer">#1060</a>)</li><li>延迟执行图像请求，直到 <code>AsyncImage</code> 具有正约束。(<a href="https://github.com/coil-kt/coil/pull/1028" target="_blank" rel="noreferrer">#1028</a>)</li><li>修复当 <code>loading</code>、<code>success</code> 和 <code>error</code> 都设置时，<code>AsyncImage</code> 使用 <code>DefaultContent</code> 的问题。(<a href="https://github.com/coil-kt/coil/pull/1026" target="_blank" rel="noreferrer">#1026</a>)</li><li>使用 androidx <code>LruCache</code> 而不是平台 <code>LruCache</code>。(<a href="https://github.com/coil-kt/coil/pull/1047" target="_blank" rel="noreferrer">#1047</a>)</li><li>更新 Kotlin 到 1.6.10。</li><li>更新 Coroutines 到 1.6.0。</li><li>更新 Compose 到 1.1.0-rc01。</li><li>更新 <code>accompanist-drawablepainter</code> 到 0.22.0-rc。</li><li>更新 <code>androidx.collection</code> 到 1.2.0。</li></ul><h2 id="_2-0-0-alpha05-2021-年-11-月-28-日" tabindex="-1">[2.0.0-alpha05] - 2021 年 11 月 28 日 <a class="header-anchor" href="#_2-0-0-alpha05-2021-年-11-月-28-日" aria-label="Permalink to &quot;[2.0.0-alpha05] - 2021 年 11 月 28 日&quot;">​</a></h2><ul><li><strong>重要</strong>：重构 <code>Size</code> 以支持将图像的原始尺寸用于任一维度。 <ul><li><code>Size</code> 现在由两个 <code>Dimension</code> 值组成，用于其宽度和高度。<code>Dimension</code> 可以是正像素值或 <code>Dimension.Original</code>。</li><li>此更改旨在更好地支持当一个维度为固定像素值时，无界宽度/高度值（例如 <code>wrap_content</code>、<code>Constraints.Infinity</code>）。</li></ul></li><li>修复：支持 <code>AsyncImage</code> 的检查模式（预览）。</li><li>修复：如果 <code>imageLoader.memoryCache</code> 为 null，则 <code>SuccessResult.memoryCacheKey</code> 应始终为 <code>null</code>。</li><li>将 <code>ImageLoader</code>、<code>SizeResolver</code> 和 <code>ViewSizeResolver</code> 构造函数式的 <code>invoke</code> 函数转换为顶层函数。</li><li>将 <code>CrossfadeDrawable</code> 的起始和结束 drawable 公开为 API。</li><li>修改 <code>ImageLoader</code> 的占位符/错误/回退 drawable。</li><li>为 <code>SuccessResult</code> 的构造函数添加默认参数。</li><li>依赖 <code>androidx.collection</code> 而不是 <code>androidx.collection-ktx</code>。</li><li>更新 OkHttp 到 4.9.3。</li></ul><h2 id="_2-0-0-alpha04-2021-年-11-月-22-日" tabindex="-1">[2.0.0-alpha04] - 2021 年 11 月 22 日 <a class="header-anchor" href="#_2-0-0-alpha04-2021-年-11-月-22-日" aria-label="Permalink to &quot;[2.0.0-alpha04] - 2021 年 11 月 22 日&quot;">​</a></h2><ul><li><strong>新特性</strong>：将 <code>AsyncImage</code> 添加到 <code>coil-compose</code>。 <ul><li><code>AsyncImage</code> 是一个可组合项，它异步执行 <code>ImageRequest</code> 并渲染结果。</li><li><strong><code>AsyncImage</code> 旨在替代大多数用例中的 <code>rememberImagePainter</code>。</strong></li><li>它的 API 尚未最终确定，在 2.0 最终发布之前可能会发生变化。</li><li>它具有类似于 <code>Image</code> 的 API，并支持相同的参数：<code>Alignment</code>、<code>ContentScale</code>、<code>alpha</code>、<code>ColorFilter</code> 和 <code>FilterQuality</code>。</li><li>它支持使用 <code>content</code>、<code>loading</code>、<code>success</code> 和 <code>error</code> 参数覆盖每个 <code>AsyncImagePainter</code> 状态绘制的内容。</li><li>它修复了 <code>rememberImagePainter</code> 在解决图像大小和缩放方面存在的许多设计问题。</li><li>示例用法：</li></ul></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只绘制图像。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 尽可能避免 \`null\`，并将其设置为本地化字符串。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 绘制带有圆形裁剪、交叉淡入的图像，并覆盖 \`loading\` 状态。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalContext.current)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CircleShape),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    loading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        CircularProgressIndicator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 绘制带有圆形裁剪、交叉淡入的图像，并覆盖所有状态。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalContext.current)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CircleShape),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AsyncImagePainter.State.Loading) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        CircularProgressIndicator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        AsyncImageContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 绘制图像。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>重要</strong>：将 <code>ImagePainter</code> 重命名为 <code>AsyncImagePainter</code>，将 <code>rememberImagePainter</code> 重命名为 <code>rememberAsyncImagePainter</code>。 <ul><li><code>ExecuteCallback</code> 不再受支持。要使 <code>AsyncImagePainter</code> 跳过等待 <code>onDraw</code> 被调用，请设置 <code>ImageRequest.size(OriginalSize)</code>（或任何大小）。</li><li>为 <code>rememberAsyncImagePainter</code> 添加一个可选的 <code>FilterQuality</code> 参数。</li></ul></li><li>使用协程进行 <code>DiskCache</code> 中的清理操作，并添加 <code>DiskCache.Builder.cleanupDispatcher</code>。</li><li>修复了使用 <code>ImageLoader.Builder.placeholder</code> 设置的占位符的 Compose 预览。</li><li>使用 <code>@ReadOnlyComposable</code> 标记 <code>LocalImageLoader.current</code> 以生成更高效的代码。</li><li>更新 Compose 到 1.1.0-beta03 并依赖 <code>compose.foundation</code> 而不是 <code>compose.ui</code>。</li><li>更新 <code>androidx.appcompat-resources</code> 到 1.4.0。</li></ul><h2 id="_2-0-0-alpha03-2021-年-11-月-12-日" tabindex="-1">[2.0.0-alpha03] - 2021 年 11 月 12 日 <a class="header-anchor" href="#_2-0-0-alpha03-2021-年-11-月-12-日" aria-label="Permalink to &quot;[2.0.0-alpha03] - 2021 年 11 月 12 日&quot;">​</a></h2><ul><li>添加在 Android 29+ 上加载音乐缩略图的能力。(<a href="https://github.com/coil-kt/coil/pull/967" target="_blank" rel="noreferrer">#967</a>)</li><li>修复：使用 <code>context.resources</code> 为当前包加载资源。(<a href="https://github.com/coil-kt/coil/pull/968" target="_blank" rel="noreferrer">#968</a>)</li><li>修复：<code>clear</code> -&gt; <code>dispose</code> 替换表达式。(<a href="https://github.com/coil-kt/coil/pull/970" target="_blank" rel="noreferrer">#970</a>)</li><li>更新 Compose 到 1.0.5。</li><li>更新 <code>accompanist-drawablepainter</code> 到 0.20.2。</li><li>更新 Okio 到 3.0.0。</li><li>更新 <code>androidx.annotation</code> 到 1.3.0。</li><li>更新 <code>androidx.core</code> 到 1.7.0。</li><li>更新 <code>androidx.lifecycle</code> 到 2.4.0。 <ul><li>移除对 <code>lifecycle-common-java8</code> 的依赖，因为它已合并到 <code>lifecycle-common</code> 中。</li></ul></li></ul><h2 id="_2-0-0-alpha02-2021-年-10-月-24-日" tabindex="-1">[2.0.0-alpha02] - 2021 年 10 月 24 日 <a class="header-anchor" href="#_2-0-0-alpha02-2021-年-10-月-24-日" aria-label="Permalink to &quot;[2.0.0-alpha02] - 2021 年 10 月 24 日&quot;">​</a></h2><ul><li>添加一个新的 <code>coil-bom</code> 工件，其中包括一个<a href="https://docs.gradle.org/7.2/userguide/platforms.html#sub:bom_import" target="_blank" rel="noreferrer">材料清单</a>。 <ul><li>导入 <code>coil-bom</code> 允许您依赖其他 Coil 工件而无需指定版本。</li></ul></li><li>修复使用 <code>ExecuteCallback.Immediate</code> 时图像加载失败的问题。</li><li>更新 Okio 到 3.0.0-alpha.11。 <ul><li>这也解决了与 Okio 3.0.0-alpha.11 的兼容性问题。</li></ul></li><li>更新 Kotlin 到 1.5.31。</li><li>更新 Compose 到 1.0.4。</li></ul><h2 id="_2-0-0-alpha01-2021-年-10-月-11-日" tabindex="-1">[2.0.0-alpha01] - 2021 年 10 月 11 日 <a class="header-anchor" href="#_2-0-0-alpha01-2021-年-10-月-11-日" aria-label="Permalink to &quot;[2.0.0-alpha01] - 2021 年 10 月 11 日&quot;">​</a></h2><p>Coil 2.0.0 是该库的下一个主要迭代，具有新特性、性能改进、API 改进和各种错误修复。在 2.0.0 稳定发布之前，此版本可能与未来的 alpha 版本存在二进制/源代码不兼容。</p><ul><li><strong>重要</strong>：最低支持的 API 现在是 21。</li><li><strong>重要</strong>：启用 <code>-Xjvm-default=all</code>。 <ul><li>这将生成 Java 8 默认方法，而不是使用 Kotlin 的默认接口方法支持。有关更多信息，请查看<a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer">这篇博客文章</a>。</li><li>**您还需要在构建文件中添加 <code>-Xjvm-default=all</code> 或 <code>-Xjvm-default=all-compatibility</code>。**有关如何操作的信息，请参阅<a href="/coil/faq/">此处</a>。</li></ul></li><li><strong>重要</strong>：Coil 现在拥有自己的磁盘缓存实现，不再依赖 OkHttp 进行磁盘缓存。 <ul><li>此更改旨在： <ul><li>更好地支持解码图像时的线程中断。当图像请求快速启动和停止时，这可以提高性能。</li><li>支持暴露以 <code>File</code> 为后备的 <code>ImageSource</code>。当 Android API 需要 <code>File</code> 来解码时（例如 <code>MediaMetadataRetriever</code>），这可以避免不必要的复制。</li><li>支持直接从/向磁盘缓存文件读取/写入。</li></ul></li><li>使用 <code>ImageLoader.Builder.diskCache</code> 和 <code>DiskCache.Builder</code> 配置磁盘缓存。</li><li>您<strong>不应</strong>在 Coil 2.0 中使用 OkHttp 的 <code>Cache</code>，因为它在写入时如果中断可能会损坏。</li><li><code>Cache-Control</code> 和其他缓存头仍然受支持——除了 <code>Vary</code> 头，因为缓存只检查 URL 是否匹配。此外，只有响应代码在 [200..300) 范围内的响应才会被缓存。</li><li>可以使用 <code>ImageLoader.Builder.respectCacheHeaders</code> 启用或禁用对缓存头的支持。</li><li>升级到 2.0 时，您现有的磁盘缓存将被清除并重建。</li></ul></li><li><strong>重要</strong>：<code>ImageRequest</code> 的默认 <code>Scale</code> 现在是 <code>Scale.FIT</code>。 <ul><li>这样做的目的是使 <code>ImageRequest.scale</code> 与其他具有默认 <code>Scale</code> 的类保持一致。</li><li>带有 <code>ImageViewTarget</code> 的请求仍然会自动检测其缩放。</li></ul></li><li>图像管道类发生重大更改： <ul><li><code>Mapper</code>、<code>Fetcher</code> 和 <code>Decoder</code> 已被重构以更灵活。</li><li><code>Fetcher.key</code> 已被新的 <code>Keyer</code> 接口取代。<code>Keyer</code> 从输入数据创建缓存键。</li><li>添加 <code>ImageSource</code>，它允许 <code>Decoder</code> 直接解码 <code>File</code>。</li></ul></li><li><code>BitmapPool</code> 和 <code>PoolableViewTarget</code> 已从库中移除。位图池已被移除，因为： <ul><li>它在 API 23 及以下最有效，但随着更新的 Android 版本效果降低。</li><li>移除位图池允许 Coil 使用不可变位图，这具有性能优势。</li><li>管理位图池存在运行时开销。</li><li>位图池对 Coil 的 API 造成设计限制，因为它需要跟踪位图是否符合池化条件。移除位图池允许 Coil 在更多地方（例如 <code>Listener</code>、<code>Disposable</code>）暴露结果 <code>Drawable</code>。此外，这意味着 Coil 不必清除 <code>ImageView</code>，这可能会导致<a href="https://github.com/coil-kt/coil/issues/650" target="_blank" rel="noreferrer">问题</a>。</li><li>位图池容易出错。分配新的位图比尝试重用可能仍在使用的位图安全得多。</li></ul></li><li><code>MemoryCache</code> 已被重构以更灵活。</li><li>禁用生成运行时非空断言。 <ul><li>如果您使用 Java，将 null 作为非空注解参数传递给函数将不再立即抛出 <code>NullPointerException</code>。如果您使用 Kotlin，则基本没有变化。</li><li>此更改允许库的大小更小。</li></ul></li><li><code>VideoFrameFileFetcher</code> 和 <code>VideoFrameUriFetcher</code> 已从库中移除。而是使用 <code>VideoFrameDecoder</code>，它支持所有数据源。</li><li>添加对 <code>bitmapFactoryMaxParallelism</code> 的支持，它限制了正在进行的 <code>BitmapFactory</code> 操作的最大数量。此值默认为 4，这提高了 UI 性能。</li><li>添加对 <code>interceptorDispatcher</code>、<code>fetcherDispatcher</code>、<code>decoderDispatcher</code> 和 <code>transformationDispatcher</code> 的支持。</li><li><code>Disposable</code> 已被重构并暴露底层 <code>ImageRequest</code> 的作业。</li><li>将 <code>Transition.transition</code> 更改为非挂起函数，因为它不再需要挂起过渡直到完成。</li><li>添加 <code>GenericViewTarget</code>，它处理通用 <code>ViewTarget</code> 逻辑。</li><li><a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/BlurTransformation.kt" target="_blank" rel="noreferrer"><code>BlurTransformation</code></a> 和 <a href="https://github.com/coil-kt/coil/blob/845f39383f332428077c666e3567b954675ce248/coil-core/src/main/java/coil/transform/GrayscaleTransformation.kt" target="_blank" rel="noreferrer"><code>GrayscaleTransformation</code></a> 已从库中移除。 <ul><li>如果您使用它们，可以将它们的代码复制到您的项目中。</li></ul></li><li>如果 <code>ImageRequest.fallback</code> 为 null，则 <code>ImageRequest.error</code> 现在会设置在 <code>Target</code> 上。</li><li><code>Transformation.key</code> 被 <code>Transformation.cacheKey</code> 取代。</li><li><code>ImageRequest.Listener</code> 在 <code>onSuccess</code> 和 <code>onError</code> 中分别返回 <code>SuccessResult</code>/<code>ErrorResult</code>。</li><li>将 <code>ByteBuffer</code> 添加到默认支持的数据类型中。</li><li>移除多个类的 <code>toString</code> 实现。</li><li>更新 OkHttp 到 4.9.2。</li><li>更新 Okio 到 3.0.0-alpha.10。</li></ul><h2 id="_1-4-0-2021-年-10-月-6-日" tabindex="-1">[1.4.0] - 2021 年 10 月 6 日 <a class="header-anchor" href="#_1-4-0-2021-年-10-月-6-日" aria-label="Permalink to &quot;[1.4.0] - 2021 年 10 月 6 日&quot;">​</a></h2><ul><li><strong>新特性</strong>：将 <code>ImageResult</code> 添加到 <code>ImagePainter.State.Success</code> 和 <code>ImagePainter.State.Error</code>。(<a href="https://github.com/coil-kt/coil/pull/887" target="_blank" rel="noreferrer">#887</a>) <ul><li>这是对 <code>ImagePainter.State.Success</code> 和 <code>ImagePainter.State.Error</code> 签名的二进制不兼容更改，但这些 API 被标记为实验性。</li></ul></li><li>仅当 <code>View.isShown</code> 为 <code>true</code> 时才执行 <code>CrossfadeTransition</code>。以前它只检查 <code>View.isVisible</code>。(<a href="https://github.com/coil-kt/coil/pull/898" target="_blank" rel="noreferrer">#898</a>)</li><li>修复了如果缩放乘数由于舍入问题略小于 1，可能导致内存缓存未命中。(<a href="https://github.com/coil-kt/coil/pull/899" target="_blank" rel="noreferrer">#899</a>)</li><li>将非内联 <code>ComponentRegistry</code> 方法公开。(<a href="https://github.com/coil-kt/coil/pull/925" target="_blank" rel="noreferrer">#925</a>)</li><li>依赖 <code>accompanist-drawablepainter</code> 并移除 Coil 的自定义 <code>DrawablePainter</code> 实现。(<a href="https://github.com/coil-kt/coil/pull/845" target="_blank" rel="noreferrer">#845</a>)</li><li>移除使用 Java 8 方法以防止脱糖问题。(<a href="https://github.com/coil-kt/coil/pull/924" target="_blank" rel="noreferrer">#924</a>)</li><li>将 <code>ImagePainter.ExecuteCallback</code> 提升为稳定 API。(<a href="https://github.com/coil-kt/coil/pull/927" target="_blank" rel="noreferrer">#927</a>)</li><li>更新 compileSdk 到 31。</li><li>更新 Kotlin 到 1.5.30。</li><li>更新 Coroutines 到 1.5.2。</li><li>更新 Compose 到 1.0.3。</li></ul><h2 id="_1-3-2-2021-年-8-月-4-日" tabindex="-1">[1.3.2] - 2021 年 8 月 4 日 <a class="header-anchor" href="#_1-3-2-2021-年-8-月-4-日" aria-label="Permalink to &quot;[1.3.2] - 2021 年 8 月 4 日&quot;">​</a></h2><ul><li><code>coil-compose</code> 现在依赖 <code>compose.ui</code> 而不是 <code>compose.foundation</code>。 <ul><li><code>compose.ui</code> 是一个更小的依赖，因为它是 <code>compose.foundation</code> 的子集。</li></ul></li><li>更新 Jetpack Compose 到 1.0.1。</li><li>更新 Kotlin 到 1.5.21。</li><li>更新 Coroutines 到 1.5.1。</li><li>更新 <code>androidx.exifinterface:exifinterface</code> 到 1.3.3。</li></ul><h2 id="_1-3-1-2021-年-7-月-28-日" tabindex="-1">[1.3.1] - 2021 年 7 月 28 日 <a class="header-anchor" href="#_1-3-1-2021-年-7-月-28-日" aria-label="Permalink to &quot;[1.3.1] - 2021 年 7 月 28 日&quot;">​</a></h2><ul><li>更新 Jetpack Compose 到 <code>1.0.0</code>。热烈祝贺 Compose 团队<a href="https://android-developers.googleblog.com/2021/07/jetpack-compose-announcement.html" target="_blank" rel="noreferrer">稳定发布</a>！</li><li>更新 <code>androidx.appcompat:appcompat-resources</code> 到 1.3.1。</li></ul><h2 id="_1-3-0-2021-年-7-月-10-日" tabindex="-1">[1.3.0] - 2021 年 7 月 10 日 <a class="header-anchor" href="#_1-3-0-2021-年-7-月-10-日" aria-label="Permalink to &quot;[1.3.0] - 2021 年 7 月 10 日&quot;">​</a></h2><ul><li><strong>新特性</strong>：添加对 <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> 的支持。它基于 <a href="https://github.com/google/accompanist/" target="_blank" rel="noreferrer">Accompanist</a> 的 Coil 集成，但有一些更改。有关更多信息，请查看<a href="/coil/compose/">文档</a>。</li><li>添加 <code>allowConversionToBitmap</code> 以启用/禁用 <code>Transformation</code> 的自动位图转换。(<a href="https://github.com/coil-kt/coil/pull/775" target="_blank" rel="noreferrer">#775</a>)</li><li>添加 <code>enforceMinimumFrameDelay</code> 到 <code>ImageDecoderDecoder</code> 和 <code>GifDecoder</code>，以支持如果 GIF 的帧延迟低于某个阈值，则重写它。(<a href="https://github.com/coil-kt/coil/pull/783" target="_blank" rel="noreferrer">#783</a>) <ul><li>此功能默认禁用，但将在未来版本中默认启用。</li></ul></li><li>添加支持启用/禁用 <code>ImageLoader</code> 的内部网络观察器。(<a href="https://github.com/coil-kt/coil/pull/741" target="_blank" rel="noreferrer">#741</a>)</li><li>修复 <code>BitmapFactoryDecoder</code> 解码位图的密度。(<a href="https://github.com/coil-kt/coil/pull/776" target="_blank" rel="noreferrer">#776</a>)</li><li>修复 Licensee 找不到 Coil 的许可证 URL。(<a href="https://github.com/coil-kt/coil/pull/774" target="_blank" rel="noreferrer">#774</a>)</li><li>更新 <code>androidx.core:core-ktx</code> 到 1.6.0。</li></ul><h2 id="_1-2-2-2021-年-6-月-4-日" tabindex="-1">[1.2.2] - 2021 年 6 月 4 日 <a class="header-anchor" href="#_1-2-2-2021-年-6-月-4-日" aria-label="Permalink to &quot;[1.2.2] - 2021 年 6 月 4 日&quot;">​</a></h2><ul><li>修复了将具有共享状态的 drawable 转换为位图时的竞态条件。(<a href="https://github.com/coil-kt/coil/pull/771" target="_blank" rel="noreferrer">#771</a>)</li><li>修复了 <code>ImageLoader.Builder.fallback</code> 设置 <code>error</code> drawable 而不是 <code>fallback</code> drawable 的问题。</li><li>修复了 <code>ResourceUriFetcher</code> 返回不正确数据源的问题。(<a href="https://github.com/coil-kt/coil/pull/770" target="_blank" rel="noreferrer">#770</a>)</li><li>修复了 API 26 和 27 上没有可用文件描述符的日志检查。</li><li>修复了平台矢量 drawable 支持的版本检查不正确的问题。(<a href="https://github.com/coil-kt/coil/pull/751" target="_blank" rel="noreferrer">#751</a>)</li><li>更新 Kotlin (1.5.10)。</li><li>更新 Coroutines (1.5.0)。</li><li>更新 <code>androidx.appcompat:appcompat-resources</code> 到 1.3.0。</li><li>更新 <code>androidx.core:core-ktx</code> 到 1.5.0。</li></ul><h2 id="_1-2-1-2021-年-4-月-27-日" tabindex="-1">[1.2.1] - 2021 年 4 月 27 日 <a class="header-anchor" href="#_1-2-1-2021-年-4-月-27-日" aria-label="Permalink to &quot;[1.2.1] - 2021 年 4 月 27 日&quot;">​</a></h2><ul><li>修复：<code>VideoFrameUriFetcher</code> 尝试处理 http/https URI。(<a href="https://github.com/coil-kt/coil/pull/734" target="_blank" rel="noreferrer">#734</a>)</li></ul><h2 id="_1-2-0-2021-年-4-月-12-日" tabindex="-1">[1.2.0] - 2021 年 4 月 12 日 <a class="header-anchor" href="#_1-2-0-2021-年-4-月-12-日" aria-label="Permalink to &quot;[1.2.0] - 2021 年 4 月 12 日&quot;">​</a></h2><ul><li><strong>重要</strong>：在 <code>SvgDecoder</code> 中使用 SVG 的视图边界来计算其宽高比。(<a href="https://github.com/coil-kt/coil/pull/688" target="_blank" rel="noreferrer">#688</a>) <ul><li>以前，<code>SvgDecoder</code> 使用 SVG 的 <code>width</code>/<code>height</code> 元素来确定其宽高比，但这不正确遵循 SVG 规范。</li><li>要恢复旧行为，请在构建 <code>SvgDecoder</code> 时设置 <code>useViewBoundsAsIntrinsicSize = false</code>。</li></ul></li><li><strong>新特性</strong>：添加 <code>VideoFrameDecoder</code> 以支持从任何源解码视频帧。(<a href="https://github.com/coil-kt/coil/pull/689" target="_blank" rel="noreferrer">#689</a>)</li><li><strong>新特性</strong>：支持使用源内容而不是仅 MIME 类型自动检测 SVG。(<a href="https://github.com/coil-kt/coil/pull/654" target="_blank" rel="noreferrer">#654</a>)</li><li><strong>新特性</strong>：支持使用 <code>ImageLoader.newBuilder()</code> 共享资源。(<a href="https://github.com/coil-kt/coil/pull/653" target="_blank" rel="noreferrer">#653</a>) <ul><li>重要的是，这使得 <code>ImageLoader</code> 实例之间可以共享内存缓存。</li></ul></li><li><strong>新特性</strong>：添加对使用 <code>AnimatedTransformation</code> 的动画图像转换的支持。(<a href="https://github.com/coil-kt/coil/pull/659" target="_blank" rel="noreferrer">#659</a>)</li><li><strong>新特性</strong>：添加对动画 drawable 的开始/结束回调的支持。(<a href="https://github.com/coil-kt/coil/pull/676" target="_blank" rel="noreferrer">#676</a>)</li></ul><hr><ul><li>修复：解析 HEIF/HEIC 文件的 EXIF 数据。(<a href="https://github.com/coil-kt/coil/pull/664" target="_blank" rel="noreferrer">#664</a>)</li><li>修复：当位图池禁用时未使用 <code>EmptyBitmapPool</code> 实现的问题。(<a href="https://github.com/coil-kt/coil/pull/638" target="_blank" rel="noreferrer">#638</a>) <ul><li>如果没有此修复，位图池仍然正确禁用，但它使用了更重量级的 <code>BitmapPool</code> 实现。</li></ul></li><li>修复了 <code>MovieDrawable.getOpacity</code> 错误返回透明的情况。(<a href="https://github.com/coil-kt/coil/pull/682" target="_blank" rel="noreferrer">#682</a>)</li><li>防止默认临时目录不存在。(<a href="https://github.com/coil-kt/coil/pull/683" target="_blank" rel="noreferrer">#683</a>)</li></ul><hr><ul><li>使用 JVM IR 后端构建。(<a href="https://github.com/coil-kt/coil/pull/670" target="_blank" rel="noreferrer">#670</a>)</li><li>更新 Kotlin (1.4.32)。</li><li>更新 Coroutines (1.4.3)。</li><li>更新 OkHttp (3.12.13)。</li><li>更新 <code>androidx.lifecycle:lifecycle-common-java8</code> 到 2.3.1。</li></ul><h2 id="_1-1-1-2021-年-1-月-11-日" tabindex="-1">[1.1.1] - 2021 年 1 月 11 日 <a class="header-anchor" href="#_1-1-1-2021-年-1-月-11-日" aria-label="Permalink to &quot;[1.1.1] - 2021 年 1 月 11 日&quot;">​</a></h2><ul><li>修复了 <code>ViewSizeResolver.size</code> 可能由于协程多次恢复而抛出 <code>IllegalStateException</code> 的情况。</li><li>修复了 <code>HttpFetcher</code> 从主线程调用时永远阻塞的问题。 <ul><li>使用 <code>ImageRequest.dispatcher(Dispatchers.Main.immediate)</code> 强制在主线程执行的请求将失败并抛出 <code>NetworkOnMainThreadException</code>，除非 <code>ImageRequest.networkCachePolicy</code> 设置为 <code>CachePolicy.DISABLED</code> 或 <code>CachePolicy.WRITE_ONLY</code>。</li></ul></li><li>如果视频具有旋转元数据，则旋转 <code>VideoFrameFetcher</code> 中的视频帧。</li><li>更新 Kotlin (1.4.21)。</li><li>更新 Coroutines (1.4.2)。</li><li>更新 Okio (2.10.0)。</li><li>更新 <code>androidx.exifinterface:exifinterface</code> (1.3.2)。</li></ul><h2 id="_1-1-0-2020-年-11-月-24-日" tabindex="-1">[1.1.0] - 2020 年 11 月 24 日 <a class="header-anchor" href="#_1-1-0-2020-年-11-月-24-日" aria-label="Permalink to &quot;[1.1.0] - 2020 年 11 月 24 日&quot;">​</a></h2><ul><li><strong>重要</strong>：更改 <code>CENTER</code> 和 <code>MATRIX</code> <code>ImageView</code> 缩放类型以解析为 <code>OriginalSize</code>。(<a href="https://github.com/coil-kt/coil/pull/587" target="_blank" rel="noreferrer">#587</a>) <ul><li>此更改仅影响请求的尺寸未明确指定时的隐式尺寸解析算法。</li><li>此更改旨在确保图像请求的视觉结果与 <code>ImageView.setImageResource</code>/<code>ImageView.setImageURI</code> 保持一致。要恢复旧行为，请在构建请求时设置 <code>ViewSizeResolver</code>。</li></ul></li><li><strong>重要</strong>：如果视图的布局参数为 <code>WRAP_CONTENT</code>，则从 <code>ViewSizeResolver</code> 返回显示大小。(<a href="https://github.com/coil-kt/coil/pull/562" target="_blank" rel="noreferrer">#562</a>) <ul><li>以前，只有当视图完全布局后才会返回显示大小。此更改使典型行为更一致和直观。</li></ul></li><li>添加控制 alpha 预乘的能力。(<a href="https://github.com/coil-kt/coil/pull/569" target="_blank" rel="noreferrer">#569</a>)</li><li>支持 <code>CrossfadeDrawable</code> 中优先使用精确固有尺寸。(<a href="https://github.com/coil-kt/coil/pull/585" target="_blank" rel="noreferrer">#585</a>)</li><li>检查完整的 GIF 头，包括版本。(<a href="https://github.com/coil-kt/coil/pull/564" target="_blank" rel="noreferrer">#564</a>)</li><li>添加空的位图池实现。(<a href="https://github.com/coil-kt/coil/pull/561" target="_blank" rel="noreferrer">#561</a>)</li><li>将 <code>EventListener.Factory</code> 设为函数式接口。(<a href="https://github.com/coil-kt/coil/pull/575" target="_blank" rel="noreferrer">#575</a>)</li><li>稳定 <code>EventListener</code>。(<a href="https://github.com/coil-kt/coil/pull/574" target="_blank" rel="noreferrer">#574</a>)</li><li>为 <code>ImageRequest.Builder.placeholderMemoryCacheKey</code> 添加 <code>String</code> 重载。</li><li>为 <code>ViewSizeResolver</code> 构造函数添加 <code>@JvmOverloads</code>。</li><li>修复：修改 <code>CrossfadeDrawable</code> 中的起始/结束 drawable。(<a href="https://github.com/coil-kt/coil/pull/572" target="_blank" rel="noreferrer">#572</a>)</li><li>修复：修复 GIF 第二次加载时不播放的问题。(<a href="https://github.com/coil-kt/coil/pull/534" target="_blank" rel="noreferrer">#577</a>)</li><li>更新 Kotlin (1.4.20) 并迁移到 <code>kotlin-parcelize</code> 插件。</li><li>更新 Coroutines (1.4.1)。</li></ul><h2 id="_1-0-0-2020-年-10-月-22-日" tabindex="-1">[1.0.0] - 2020 年 10 月 22 日 <a class="header-anchor" href="#_1-0-0-2020-年-10-月-22-日" aria-label="Permalink to &quot;[1.0.0] - 2020 年 10 月 22 日&quot;">​</a></h2><p>自 <code>0.13.0</code> 以来的更改：</p><ul><li>添加 <code>Context.imageLoader</code> 扩展函数。(<a href="https://github.com/coil-kt/coil/pull/534" target="_blank" rel="noreferrer">#534</a>)</li><li>添加 <code>ImageLoader.executeBlocking</code> 扩展函数。(<a href="https://github.com/coil-kt/coil/pull/537" target="_blank" rel="noreferrer">#537</a>)</li><li>如果替换了之前的单例图像加载器，则不关闭。(<a href="https://github.com/coil-kt/coil/pull/533" target="_blank" rel="noreferrer">#533</a>)</li></ul><p>自 <code>1.0.0-rc3</code> 以来的更改：</p><ul><li>修复：防止缺少/无效的 ActivityManager。(<a href="https://github.com/coil-kt/coil/pull/541" target="_blank" rel="noreferrer">#541</a>)</li><li>修复：允许 OkHttp 缓存不成功的响应。(<a href="https://github.com/coil-kt/coil/pull/551" target="_blank" rel="noreferrer">#551</a>)</li><li>更新 Kotlin 到 1.4.10。</li><li>更新 Okio 到 2.9.0。</li><li>更新 <code>androidx.exifinterface:exifinterface</code> 到 1.3.1。</li></ul><h2 id="_1-0-0-rc3-2020-年-9-月-21-日" tabindex="-1">[1.0.0-rc3] - 2020 年 9 月 21 日 <a class="header-anchor" href="#_1-0-0-rc3-2020-年-9-月-21-日" aria-label="Permalink to &quot;[1.0.0-rc3] - 2020 年 9 月 21 日&quot;">​</a></h2><ul><li>由于不稳定，恢复使用 <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer"><code>-Xjvm-default=all</code></a> 编译器标志。 <ul><li><strong>这是与之前发布候选版本源代码兼容但二进制不兼容的更改。</strong></li></ul></li><li>添加 <code>Context.imageLoader</code> 扩展函数。(<a href="https://github.com/coil-kt/coil/pull/534" target="_blank" rel="noreferrer">#534</a>)</li><li>添加 <code>ImageLoader.executeBlocking</code> 扩展函数。(<a href="https://github.com/coil-kt/coil/pull/537" target="_blank" rel="noreferrer">#537</a>)</li><li>如果替换了之前的单例图像加载器，则不关闭。(<a href="https://github.com/coil-kt/coil/pull/533" target="_blank" rel="noreferrer">#533</a>)</li><li>更新 AndroidX 依赖项： <ul><li><code>androidx.exifinterface:exifinterface</code> -&gt; 1.3.0</li></ul></li></ul><h2 id="_1-0-0-rc2-2020-年-9-月-3-日" tabindex="-1">[1.0.0-rc2] - 2020 年 9 月 3 日 <a class="header-anchor" href="#_1-0-0-rc2-2020-年-9-月-3-日" aria-label="Permalink to &quot;[1.0.0-rc2] - 2020 年 9 月 3 日&quot;">​</a></h2><ul><li><strong>此版本需要 Kotlin 1.4.0 或更高版本。</strong></li><li><a href="#0130---september-3-2020">0.13.0</a> 中包含的所有更改。</li><li>依赖基本 Kotlin <code>stdlib</code> 而不是 <code>stdlib-jdk8</code>。</li></ul><h2 id="_0-13-0-2020-年-9-月-3-日" tabindex="-1">[0.13.0] - 2020 年 9 月 3 日 <a class="header-anchor" href="#_0-13-0-2020-年-9-月-3-日" aria-label="Permalink to &quot;[0.13.0] - 2020 年 9 月 3 日&quot;">​</a></h2><ul><li><strong>破坏性变更</strong>：<code>Interceptor</code> 链默认在主线程上启动。(<a href="https://github.com/coil-kt/coil/pull/513" target="_blank" rel="noreferrer">#513</a>) <ul><li>这基本恢复了 <code>0.11.0</code> 及以下版本的行为，即内存缓存会在主线程上同步检查。</li><li>要恢复使用 <code>0.12.0</code> 的行为（内存缓存在 <code>ImageRequest.dispatcher</code> 上检查），请设置 <code>ImageLoader.Builder.launchInterceptorChainOnMainThread(false)</code>。</li><li>有关更多信息，请参阅<a href="https://coil-kt.github.io/coil/api/coil-core/coil3/-image-loader/-builder/launch-interceptor-chain-on-main-thread/" target="_blank" rel="noreferrer"><code>launchInterceptorChainOnMainThread</code></a>。</li></ul></li></ul><hr><ul><li>修复：修复了当请求在分离的片段中的 <code>ViewTarget</code> 上启动时可能出现的内存泄漏。(<a href="https://github.com/coil-kt/coil/pull/518" target="_blank" rel="noreferrer">#518</a>)</li><li>修复：使用 <code>ImageRequest.context</code> 加载资源 URI。(<a href="https://github.com/coil-kt/coil/pull/517" target="_blank" rel="noreferrer">#517</a>)</li><li>修复：修复了可能导致后续请求未保存到磁盘缓存的竞态条件。(<a href="https://github.com/coil-kt/coil/pull/510" target="_blank" rel="noreferrer">#510</a>)</li><li>修复：在 API 18 上使用 <code>blockCountLong</code> 和 <code>blockSizeLong</code>。</li></ul><hr><ul><li>将 <code>ImageLoaderFactory</code> 设为函数式接口。</li><li>添加 <code>ImageLoader.Builder.addLastModifiedToFileCacheKey</code>，允许您启用/禁用将最后修改时间戳添加到从 <code>File</code> 加载的图像的内存缓存键。</li></ul><hr><ul><li>更新 Kotlin 到 1.4.0。</li><li>更新 Coroutines 到 1.3.9。</li><li>更新 Okio 到 2.8.0。</li></ul><h2 id="_1-0-0-rc1-2020-年-8-月-18-日" tabindex="-1">[1.0.0-rc1] - 2020 年 8 月 18 日 <a class="header-anchor" href="#_1-0-0-rc1-2020-年-8-月-18-日" aria-label="Permalink to &quot;[1.0.0-rc1] - 2020 年 8 月 18 日&quot;">​</a></h2><ul><li><strong>此版本需要 Kotlin 1.4.0 或更高版本。</strong></li><li>更新 Kotlin 到 1.4.0 并启用 <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer"><code>-Xjvm-default=all</code></a>。 <ul><li><strong>有关如何在构建文件中启用 <code>-Xjvm-default=all</code>，请参阅<a href="/coil/faq/">此处</a>。</strong></li><li>这为默认 Kotlin 接口方法生成 Java 8 默认方法。</li></ul></li><li>移除 0.12.0 中所有现有的已弃用方法。</li><li>更新 Coroutines 到 1.3.9。</li></ul><h2 id="_0-12-0-2020-年-8-月-18-日" tabindex="-1">[0.12.0] - 2020 年 8 月 18 日 <a class="header-anchor" href="#_0-12-0-2020-年-8-月-18-日" aria-label="Permalink to &quot;[0.12.0] - 2020 年 8 月 18 日&quot;">​</a></h2><ul><li><strong>破坏性变更</strong>：<code>LoadRequest</code> 和 <code>GetRequest</code> 已被 <code>ImageRequest</code> 替换： <ul><li><code>ImageLoader.execute(LoadRequest)</code> -&gt; <code>ImageLoader.enqueue(ImageRequest)</code></li><li><code>ImageLoader.execute(GetRequest)</code> -&gt; <code>ImageLoader.execute(ImageRequest)</code></li><li><code>ImageRequest</code> 实现 <code>equals</code>/<code>hashCode</code>。</li></ul></li><li><strong>破坏性变更</strong>：许多类已重命名和/或更改包： <ul><li><code>coil.request.RequestResult</code> -&gt; <code>coil.request.ImageResult</code></li><li><code>coil.request.RequestDisposable</code> -&gt; <code>coil.request.Disposable</code></li><li><code>coil.bitmappool.BitmapPool</code> -&gt; <code>coil.bitmap.BitmapPool</code></li><li><code>coil.DefaultRequestOptions</code> -&gt; <code>coil.request.DefaultRequestOptions</code></li></ul></li><li><strong>破坏性变更</strong>：<a href="https://github.com/coil-kt/coil/blob/f52addd039f0195b66f93cb0f1cad59b0832f784/coil-core/src/main/java/coil/collection/SparseIntArraySet.kt" target="_blank" rel="noreferrer"><code>SparseIntArraySet</code></a> 已从公共 API 中移除。</li><li><strong>破坏性变更</strong>：<code>TransitionTarget</code> 不再实现 <code>ViewTarget</code>。</li><li><strong>破坏性变更</strong>：<code>ImageRequest.Listener.onSuccess</code> 的签名已更改为返回 <code>ImageResult.Metadata</code> 而不是仅 <code>DataSource</code>。</li><li><strong>破坏性变更</strong>：移除对 <code>LoadRequest.aliasKeys</code> 的支持。此 API 通过直接读写内存缓存更好地处理。</li></ul><hr><ul><li><strong>重要</strong>：内存缓存中的值不再同步解析（如果从主线程调用）。 <ul><li>此更改对于支持在后台调度器上执行 <code>Interceptor</code> 也是必要的。</li><li>此更改还将更多工作从主线程转移，提高了性能。</li></ul></li><li><strong>重要</strong>：<code>Mapper</code> 现在在后台调度器上执行。副作用是，自动位图采样不再<strong>自动</strong>支持。要实现相同效果，请将前一个请求的 <code>MemoryCache.Key</code> 用作后续请求的 <code>placeholderMemoryCacheKey</code>。<strong><a href="/coil/recipes/">有关示例，请参阅此处</a>。</strong><ul><li><code>placeholderMemoryCacheKey</code> API 提供了更多自由，因为您可以将两个具有不同数据（例如，用于小/大图像的不同 URL）的图像请求“链接”起来。</li></ul></li><li><strong>重要</strong>：Coil 的 <code>ImageView</code> 扩展函数已从 <code>coil.api</code> 包移动到 <code>coil</code> 包。 <ul><li>使用查找 + 替换重构 <code>import coil.api.load</code> -&gt; <code>import coil.load</code>。不幸的是，无法使用 Kotlin 的 <code>ReplaceWith</code> 功能替换导入。</li></ul></li><li><strong>重要</strong>：如果 drawable 不是同一图像，则使用标准交叉淡入。</li><li><strong>重要</strong>：在 API 24+ 上优先使用不可变位图。</li><li><strong>重要</strong>：<code>MeasuredMapper</code> 已被弃用，取而代之的是新的 <code>Interceptor</code> 接口。<strong><a href="https://gist.github.com/colinrtwhite/90267704091467451e46b21b95154299" target="_blank" rel="noreferrer">有关如何将 <code>MeasuredMapper</code> 转换为 <code>Interceptor</code> 的示例，请参阅此处</a>。</strong><ul><li><code>Interceptor</code> 是一个限制少得多的 API，允许实现更广泛的自定义逻辑。</li></ul></li><li><strong>重要</strong>：<code>ImageRequest.data</code> 现在不为 null。如果您创建 <code>ImageRequest</code> 而不设置其数据，它将返回 <code>NullRequestData</code> 作为其数据。</li></ul><hr><ul><li><strong>新特性</strong>：添加对 <code>ImageLoader</code> 的 <code>MemoryCache</code> 的直接读写访问。有关更多信息，请参阅<a href="/coil/getting_started/">文档</a>。</li><li><strong>新特性</strong>：添加对 <code>Interceptor</code> 的支持。有关更多信息，请参阅<a href="/coil/image_pipeline/">文档</a>。Coil 的 <code>Interceptor</code> 设计深受 <a href="https://github.com/square/okhttp" target="_blank" rel="noreferrer">OkHttp</a> 的启发！</li><li><strong>新特性</strong>：添加使用 <code>ImageLoader.Builder.bitmapPoolingEnabled</code> 启用/禁用位图池的能力。 <ul><li>位图池在 API 23 及以下最有效，但可能在 API 24 及以上仍有益（通过急切调用 <code>Bitmap.recycle</code>）。</li></ul></li><li><strong>新特性</strong>：支持解码时的线程中断。</li></ul><hr><ul><li>修复：解析内容类型头中的多个段。</li><li>重构位图引用计数以更健壮。</li><li>修复在 API &lt; 19 设备上解码 WebP。</li><li>在 EventListener API 中暴露 FetchResult 和 DecodeResult。</li></ul><hr><ul><li>使用 SDK 30 编译。</li><li>更新 Coroutines 到 1.3.8。</li><li>更新 OkHttp 到 3.12.12。</li><li>更新 Okio 到 2.7.0。</li><li>更新 AndroidX 依赖项： <ul><li><code>androidx.appcompat:appcompat-resources</code> -&gt; 1.2.0</li><li><code>androidx.core:core-ktx</code> -&gt; 1.3.1</li></ul></li></ul><h2 id="_0-11-0-2020-年-5-月-14-日" tabindex="-1">[0.11.0] - 2020 年 5 月 14 日 <a class="header-anchor" href="#_0-11-0-2020-年-5-月-14-日" aria-label="Permalink to &quot;[0.11.0] - 2020 年 5 月 14 日&quot;">​</a></h2><ul><li><strong>破坏性变更</strong>：<strong>此版本移除了所有现有的已弃用函数。</strong><ul><li>这使得可以移除 Coil 的 <code>ContentProvider</code>，因此它在应用程序启动时不会运行任何代码。</li></ul></li><li><strong>破坏性变更</strong>：将 <code>SparseIntArraySet.size</code> 转换为 val。(<a href="https://github.com/coil-kt/coil/pull/380" target="_blank" rel="noreferrer">#380</a>)</li><li><strong>破坏性变更</strong>：将 <code>Parameters.count()</code> 移动到扩展函数。(<a href="https://github.com/coil-kt/coil/pull/403" target="_blank" rel="noreferrer">#403</a>)</li><li><strong>破坏性变更</strong>：将 <code>BitmapPool.maxSize</code> 设为 Int。(<a href="https://github.com/coil-kt/coil/pull/404" target="_blank" rel="noreferrer">#404</a>)</li></ul><hr><ul><li><strong>重要</strong>：使 <code>ImageLoader.shutdown()</code> 可选（类似于 <code>OkHttpClient</code>）。(<a href="https://github.com/coil-kt/coil/pull/385" target="_blank" rel="noreferrer">#385</a>)</li></ul><hr><ul><li>修复：修复 AGP 4.1 兼容性。(<a href="https://github.com/coil-kt/coil/pull/386" target="_blank" rel="noreferrer">#386</a>)</li><li>修复：修复测量 <code>GONE</code> 视图。(<a href="https://github.com/coil-kt/coil/pull/397" target="_blank" rel="noreferrer">#397</a>)</li></ul><hr><ul><li>将默认内存缓存大小减少到 20%。(<a href="https://github.com/coil-kt/coil/pull/390" target="_blank" rel="noreferrer">#390</a>) <ul><li>要恢复现有行为，请在创建 <code>ImageLoader</code> 时设置 <code>ImageLoaderBuilder.availableMemoryPercentage(0.25)</code>。</li></ul></li><li>更新 Coroutines 到 1.3.6。</li><li>更新 OkHttp 到 3.12.11。</li></ul><h2 id="_0-10-1-2020-年-4-月-26-日" tabindex="-1">[0.10.1] - 2020 年 4 月 26 日 <a class="header-anchor" href="#_0-10-1-2020-年-4-月-26-日" aria-label="Permalink to &quot;[0.10.1] - 2020 年 4 月 26 日&quot;">​</a></h2><ul><li>修复：在 API 23 及以下解码大型 PNG 时出现 OOM。(<a href="https://github.com/coil-kt/coil/pull/372" target="_blank" rel="noreferrer">#372</a>)。 <ul><li>这将禁用 PNG 文件的 EXIF 方向解码。PNG EXIF 方向很少使用，并且读取 PNG EXIF 数据（即使为空）需要将整个文件缓冲到内存中，这不利于性能。</li></ul></li><li>对 <code>SparseIntArraySet</code> 的少量 Java 兼容性改进。</li></ul><hr><ul><li>更新 Okio 到 2.6.0。</li></ul><h2 id="_0-10-0-2020-年-4-月-20-日" tabindex="-1">[0.10.0] - 2020 年 4 月 20 日 <a class="header-anchor" href="#_0-10-0-2020-年-4-月-20-日" aria-label="Permalink to &quot;[0.10.0] - 2020 年 4 月 20 日&quot;">​</a></h2><h3 id="亮点" tabindex="-1">亮点 <a class="header-anchor" href="#亮点" aria-label="Permalink to &quot;亮点&quot;">​</a></h3><ul><li><p>**此版本弃用了大部分 DSL API，转而直接使用构建器。**更改如下：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.9.5 (旧)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImageLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bitmapPoolPercentage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> disposable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(imageView)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drawable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0.10.0 (新)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bitmapPoolPercentage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LoadRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(imageView)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> disposable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GetRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> drawable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request).drawable</span></span></code></pre></div><ul><li>如果您使用 <code>io.coil-kt:coil</code> 工件，您可以调用 <code>Coil.execute(request)</code> 使用单例 <code>ImageLoader</code> 执行请求。</li></ul></li><li><p><strong><code>ImageLoader</code> 现在具有弱引用内存缓存</strong>，该缓存跟踪图像从强引用内存缓存中逐出后对其的弱引用。</p><ul><li>这意味着如果图像仍有强引用，它将始终从 <code>ImageLoader</code> 的内存缓存中返回。</li><li>通常，这应该使内存缓存更具可预测性并提高其命中率。</li><li>此行为可以使用 <code>ImageLoaderBuilder.trackWeakReferences</code> 启用/禁用。</li></ul></li><li><p>添加了一个新工件 <code>**io.coil-kt:coil-video**</code>，用于解码视频文件中的特定帧。<strong><a href="/coil/videos/">在此处阅读更多信息</a>。</strong></p></li><li><p>添加了一个新的 <a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/main/java/coil/EventListener.kt" target="_blank" rel="noreferrer">EventListener</a> API，用于跟踪指标。</p></li><li><p>添加 <a href="https://github.com/coil-kt/coil/blob/main/coil/src/main/java/coil/ImageLoaderFactory.kt" target="_blank" rel="noreferrer">ImageLoaderFactory</a>，您的 <code>Application</code> 可以实现它以简化单例初始化。</p></li></ul><hr><h3 id="完整发布说明" tabindex="-1">完整发布说明 <a class="header-anchor" href="#完整发布说明" aria-label="Permalink to &quot;完整发布说明&quot;">​</a></h3><ul><li><strong>重要</strong>：弃用 DSL 语法，转而使用构建器语法。(<a href="https://github.com/coil-kt/coil/pull/267" target="_blank" rel="noreferrer">#267</a>)</li><li><strong>重要</strong>：弃用 <code>Coil</code> 和 <code>ImageLoader</code> 扩展函数。(<a href="https://github.com/coil-kt/coil/pull/322" target="_blank" rel="noreferrer">#322</a>)</li><li><strong>破坏性变更</strong>：从 <code>ImageLoader.execute(GetRequest)</code> 返回密封的 <code>RequestResult</code> 类型。(<a href="https://github.com/coil-kt/coil/pull/349" target="_blank" rel="noreferrer">#349</a>)</li><li><strong>破坏性变更</strong>：将 <code>ExperimentalCoil</code> 重命名为 <code>ExperimentalCoilApi</code>。从 <code>@Experimental</code> 迁移到 <code>@RequiresOptIn</code>。(<a href="https://github.com/coil-kt/coil/pull/306" target="_blank" rel="noreferrer">#306</a>)</li><li><strong>破坏性变更</strong>：将 <code>CoilLogger</code> 替换为 <code>Logger</code> 接口。(<a href="https://github.com/coil-kt/coil/pull/316" target="_blank" rel="noreferrer">#316</a>)</li><li><strong>破坏性变更</strong>：将 <code>destWidth</code>/<code>destHeight</code> 重命名为 <code>dstWidth</code>/<code>dstHeight</code>。(<a href="https://github.com/coil-kt/coil/pull/275" target="_blank" rel="noreferrer">#275</a>)</li><li><strong>破坏性变更</strong>：重新排列 <code>MovieDrawable</code> 的构造函数参数。(<a href="https://github.com/coil-kt/coil/pull/272" target="_blank" rel="noreferrer">#272</a>)</li><li><strong>破坏性变更</strong>：<code>Request.Listener</code> 的方法现在接收完整的 <code>Request</code> 对象，而不仅仅是其数据。</li><li><strong>破坏性变更</strong>：<code>GetRequestBuilder</code> 现在在其构造函数中需要 <code>Context</code>。</li><li><strong>破坏性变更</strong>：<code>Request</code> 上的几个属性现在可为空。</li><li><strong>行为变更</strong>：默认情况下将参数值包含在缓存键中。(<a href="https://github.com/coil-kt/coil/pull/319" target="_blank" rel="noreferrer">#319</a>)</li><li><strong>行为变更</strong>：稍微调整 <code>Request.Listener.onStart()</code> 的时机，使其在 <code>Target.onStart()</code> 之后立即调用。(<a href="https://github.com/coil-kt/coil/pull/348" target="_blank" rel="noreferrer">#348</a>)</li></ul><hr><ul><li><strong>新特性</strong>：添加 <code>WeakMemoryCache</code> 实现。(<a href="https://github.com/coil-kt/coil/pull/295" target="_blank" rel="noreferrer">#295</a>)</li><li><strong>新特性</strong>：添加 <code>coil-video</code> 以支持解码视频帧。(<a href="https://github.com/coil-kt/coil/pull/122" target="_blank" rel="noreferrer">#122</a>)</li><li><strong>新特性</strong>：引入 <a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/main/java/coil/EventListener.kt" target="_blank" rel="noreferrer"><code>EventListener</code></a>。(<a href="https://github.com/coil-kt/coil/pull/314" target="_blank" rel="noreferrer">#314</a>)</li><li><strong>新特性</strong>：引入 <a href="https://github.com/coil-kt/coil/blob/main/coil/src/main/java/coil/ImageLoaderFactory.kt" target="_blank" rel="noreferrer"><code>ImageLoaderFactory</code></a>。(<a href="https://github.com/coil-kt/coil/pull/311" target="_blank" rel="noreferrer">#311</a>)</li><li><strong>新特性</strong>：支持 Android 11 上的动画 HEIF 图像序列。(<a href="https://github.com/coil-kt/coil/pull/297" target="_blank" rel="noreferrer">#297</a>)</li><li><strong>新特性</strong>：改进 Java 兼容性。(<a href="https://github.com/coil-kt/coil/pull/262" target="_blank" rel="noreferrer">#262</a>)</li><li><strong>新特性</strong>：支持设置默认 <code>CachePolicy</code>。(<a href="https://github.com/coil-kt/coil/pull/307" target="_blank" rel="noreferrer">#307</a>)</li><li><strong>新特性</strong>：支持设置默认 <code>Bitmap.Config</code>。(<a href="https://github.com/coil-kt/coil/pull/342" target="_blank" rel="noreferrer">#342</a>)</li><li><strong>新特性</strong>：添加 <code>ImageLoader.invalidate(key)</code> 以清除单个内存缓存项。(<a href="https://github.com/coil-kt/coil/pull/55" target="_blank" rel="noreferrer">#55</a>)</li><li><strong>新特性</strong>：添加调试日志以解释为什么不重用缓存图像。(<a href="https://github.com/coil-kt/coil/pull/346" target="_blank" rel="noreferrer">#346</a>)</li><li><strong>新特性</strong>：支持 get 请求的 <code>error</code> 和 <code>fallback</code> drawable。</li></ul><hr><ul><li>修复：修复了当 <code>Transformation</code> 减小输入位图大小时内存缓存未命中。(<a href="https://github.com/coil-kt/coil/pull/357" target="_blank" rel="noreferrer">#357</a>)</li><li>修复：确保 <code>BlurTransformation</code> 中的半径低于 RenderScript 最大值。(<a href="https://github.com/coil-kt/coil/pull/291" target="_blank" rel="noreferrer">#291</a>)</li><li>修复：修复解码高色深图像。(<a href="https://github.com/coil-kt/coil/pull/358" target="_blank" rel="noreferrer">#358</a>)</li><li>修复：禁用 Android 11 及以上版本上的 <code>ImageDecoderDecoder</code> 崩溃解决方法。(<a href="https://github.com/coil-kt/coil/pull/298" target="_blank" rel="noreferrer">#298</a>)</li><li>修复：修复无法读取 API 23 之前 EXIF 数据的问题。(<a href="https://github.com/coil-kt/coil/pull/331" target="_blank" rel="noreferrer">#331</a>)</li><li>修复：修复与 Android R SDK 的不兼容性。(<a href="https://github.com/coil-kt/coil/pull/337" target="_blank" rel="noreferrer">#337</a>)</li><li>修复：仅当 <code>ImageView</code> 具有匹配的 <code>SizeResolver</code> 时才启用不精确大小。(<a href="https://github.com/coil-kt/coil/pull/344" target="_blank" rel="noreferrer">#344</a>)</li><li>修复：允许缓存图像与请求大小最多相差一个像素。(<a href="https://github.com/coil-kt/coil/pull/360" target="_blank" rel="noreferrer">#360</a>)</li><li>修复：如果视图不可见，则跳过交叉淡入过渡。(<a href="https://github.com/coil-kt/coil/pull/361" target="_blank" rel="noreferrer">#361</a>)</li></ul><hr><ul><li>弃用 <code>CoilContentProvider</code>。(<a href="https://github.com/coil-kt/coil/pull/293" target="_blank" rel="noreferrer">#293</a>)</li><li>使用 <code>@MainThread</code> 注解多个 <code>ImageLoader</code> 方法。</li><li>如果生命周期当前已启动，则避免创建 <code>LifecycleCoroutineDispatcher</code>。(<a href="https://github.com/coil-kt/coil/pull/356" target="_blank" rel="noreferrer">#356</a>)</li><li><code>OriginalSize.toString()</code> 使用完整包名。</li><li>解码软件位图时预分配。(<a href="https://github.com/coil-kt/coil/pull/354" target="_blank" rel="noreferrer">#354</a>)</li></ul><hr><ul><li>更新 Kotlin 到 1.3.72。</li><li>更新 Coroutines 到 1.3.5。</li><li>更新 OkHttp 到 3.12.10。</li><li>更新 Okio 到 2.5.0。</li><li>更新 AndroidX 依赖项： <ul><li><code>androidx.exifinterface:exifinterface</code> -&gt; 1.2.0</li></ul></li></ul><h2 id="_0-9-5-2020-年-2-月-6-日" tabindex="-1">[0.9.5] - 2020 年 2 月 6 日 <a class="header-anchor" href="#_0-9-5-2020-年-2-月-6-日" aria-label="Permalink to &quot;[0.9.5] - 2020 年 2 月 6 日&quot;">​</a></h2><ul><li>修复：确保视图在检查是否硬件加速之前已附加。这修复了请求硬件位图可能导致内存缓存未命中的情况。</li></ul><hr><ul><li>更新 AndroidX 依赖项： <ul><li><code>androidx.core:core-ktx</code> -&gt; 1.2.0</li></ul></li></ul><h2 id="_0-9-4-2020-年-2-月-3-日" tabindex="-1">[0.9.4] - 2020 年 2 月 3 日 <a class="header-anchor" href="#_0-9-4-2020-年-2-月-3-日" aria-label="Permalink to &quot;[0.9.4] - 2020 年 2 月 3 日&quot;">​</a></h2><ul><li>修复：在 ImageDecoderDecoder 中下采样时遵守宽高比。感谢 @zhanghai。</li></ul><hr><ul><li>以前，只要位图的配置大于或等于请求中指定的配置，位图就会从内存缓存中返回。例如，如果您请求 <code>ARGB_8888</code> 位图，可能会从内存缓存中返回 <code>RGBA_F16</code> 位图。现在，缓存配置和请求配置必须相等。</li><li>将 <code>CrossfadeDrawable</code> 和 <code>CrossfadeTransition</code> 中的 <code>scale</code> 和 <code>durationMillis</code> 公开。</li></ul><h2 id="_0-9-3-2020-年-2-月-1-日" tabindex="-1">[0.9.3] - 2020 年 2 月 1 日 <a class="header-anchor" href="#_0-9-3-2020-年-2-月-1-日" aria-label="Permalink to &quot;[0.9.3] - 2020 年 2 月 1 日&quot;">​</a></h2><ul><li>修复：在 <code>ScaleDrawable</code> 内部平移子 drawable 以确保其居中。</li><li>修复：修复 GIF 和 SVG 不完全填充边界的情况。</li></ul><hr><ul><li>将 <code>HttpUrl.get()</code> 的调用延迟到后台线程。</li><li>改进 BitmapFactory null 位图错误消息。</li><li>将 3 个设备添加到硬件位图黑名单。(<a href="https://github.com/coil-kt/coil/pull/264" target="_blank" rel="noreferrer">#264</a>)</li></ul><hr><ul><li>更新 AndroidX 依赖项： <ul><li><code>androidx.lifecycle:lifecycle-common-java8</code> -&gt; 2.2.0</li></ul></li></ul><h2 id="_0-9-2-2020-年-1-月-19-日" tabindex="-1">[0.9.2] - 2020 年 1 月 19 日 <a class="header-anchor" href="#_0-9-2-2020-年-1-月-19-日" aria-label="Permalink to &quot;[0.9.2] - 2020 年 1 月 19 日&quot;">​</a></h2><ul><li>修复：修复在 API 19 之前解码 GIF 的问题。感谢 @mario。</li><li>修复：修复栅格化矢量 drawable 未标记为已采样的问题。</li><li>修复：如果 Movie 维度 &lt;= 0 则抛出异常。</li><li>修复：修复 <code>CrossfadeTransition</code> 未因内存缓存事件而恢复的问题。</li><li>修复：如果不允许，则阻止将硬件位图返回给所有目标方法。</li><li>修复：修复 <code>MovieDrawable</code> 未将其自身定位在其边界中心的问题。</li></ul><hr><ul><li>从 <code>CrossfadeDrawable</code> 中移除自动缩放。</li><li>将 <code>BitmapPool.trimMemory</code> 公开。</li><li>将 <code>AnimatedImageDrawable</code> 包装在 <code>ScaleDrawable</code> 中以确保其填充边界。</li><li>为 <code>RequestBuilder.setParameter</code> 添加 <code>@JvmOverloads</code>。</li><li>如果未设置，将 SVG 的视图框设置为其大小。</li><li>将状态和级别更改传递给 <code>CrossfadeDrawable</code> 子项。</li></ul><hr><ul><li>更新 OkHttp 到 3.12.8。</li></ul><h2 id="_0-9-1-2019-年-12-月-30-日" tabindex="-1">[0.9.1] - 2019 年 12 月 30 日 <a class="header-anchor" href="#_0-9-1-2019-年-12-月-30-日" aria-label="Permalink to &quot;[0.9.1] - 2019 年 12 月 30 日&quot;">​</a></h2><ul><li>修复：修复调用 <code>LoadRequestBuilder.crossfade(false)</code> 时崩溃的问题。</li></ul><h2 id="_0-9-0-2019-年-12-月-30-日" tabindex="-1">[0.9.0] - 2019 年 12 月 30 日 <a class="header-anchor" href="#_0-9-0-2019-年-12-月-30-日" aria-label="Permalink to &quot;[0.9.0] - 2019 年 12 月 30 日&quot;">​</a></h2><ul><li><strong>破坏性变更</strong>：<code>Transformation.transform</code> 现在包含一个 <code>Size</code> 参数。这是为了支持根据 <code>Target</code> 大小改变输出 <code>Bitmap</code> 大小的转换。带有转换的请求现在也免于<a href="/coil/getting_started/">图像采样</a>。</li><li><strong>破坏性变更</strong>：<code>Transformation</code> 现在应用于任何类型的 <code>Drawable</code>。以前，如果输入 <code>Drawable</code> 不是 <code>BitmapDrawable</code>，则会跳过 <code>Transformation</code>。现在，<code>Drawable</code> 在应用 <code>Transformation</code> 之前会渲染到位图。</li><li><strong>破坏性变更</strong>：将 <code>null</code> 数据传递给 <code>ImageLoader.load</code> 现在被视为错误，并使用 <code>NullRequestDataException</code> 调用 <code>Target.onError</code> 和 <code>Request.Listener.onError</code>。此更改是为了支持在数据为 <code>null</code> 时设置 <code>fallback</code> drawable。以前请求会被静默忽略。</li><li><strong>破坏性变更</strong>：<code>RequestDisposable.isDisposed</code> 现在是 <code>val</code>。</li></ul><hr><ul><li><strong>新特性</strong>：支持自定义过渡。<a href="/coil/transitions/">有关更多信息，请参阅此处</a>。过渡被标记为实验性，因为 API 正在孵化中。</li><li><strong>新特性</strong>：添加 <code>RequestDisposable.await</code> 以支持在 <code>LoadRequest</code> 进行中时挂起。</li><li><strong>新特性</strong>：支持在请求数据为 null 时设置 <code>fallback</code> drawable。</li><li><strong>新特性</strong>：添加 <code>Precision</code>。这使得输出 <code>Drawable</code> 的大小精确，同时为支持缩放的目标（例如 <code>ImageViewTarget</code>）启用缩放优化。<strong><a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/main/java/coil/size/Precision.kt" target="_blank" rel="noreferrer">有关更多信息，请参阅其文档</a>。</strong></li><li><strong>新特性</strong>：添加 <code>RequestBuilder.aliasKeys</code> 以支持匹配多个缓存键。</li></ul><hr><ul><li>修复：使 RequestDisposable 线程安全。</li><li>修复：<code>RoundedCornersTransformation</code> 现在裁剪到目标大小，然后圆角。</li><li>修复：<code>CircleCropTransformation</code> 现在从中心裁剪。</li><li>修复：将多个设备添加到<a href="https://github.com/coil-kt/coil/blob/main/coil-core/src/main/java/coil/memory/HardwareBitmapService.kt" target="_blank" rel="noreferrer">硬件位图黑名单</a>。</li><li>修复：将 Drawable 转换为 Bitmap 时保留宽高比。</li><li>修复：修复 <code>Scale.FIT</code> 可能导致内存缓存未命中。</li><li>修复：确保 Parameters 迭代顺序是确定性的。</li><li>修复：在创建 Parameters 和 ComponentRegistry 时进行防御性复制。</li><li>修复：确保 RealBitmapPool 的 <code>maxSize</code> &gt;= 0。</li><li>修复：如果 <code>CrossfadeDrawable</code> 未动画或已完成，则显示起始 drawable。</li><li>修复：调整 <code>CrossfadeDrawable</code> 以考虑具有未定义固有大小的子项。</li><li>修复：修复 <code>MovieDrawable</code> 缩放不正确的问题。</li></ul><hr><ul><li>更新 Kotlin 到 1.3.61。</li><li>更新 Kotlin Coroutines 到 1.3.3。</li><li>更新 Okio 到 2.4.3。</li><li>更新 AndroidX 依赖项： <ul><li><code>androidx.exifinterface:exifinterface</code> -&gt; 1.1.0</li></ul></li></ul><h2 id="_0-8-0-2019-年-10-月-22-日" tabindex="-1">[0.8.0] - 2019 年 10 月 22 日 <a class="header-anchor" href="#_0-8-0-2019-年-10-月-22-日" aria-label="Permalink to &quot;[0.8.0] - 2019 年 10 月 22 日&quot;">​</a></h2><ul><li><strong>破坏性变更</strong>：<code>SvgDrawable</code> 已被移除。相反，SVG 现在通过 <code>SvgDecoder</code> 预渲染为 <code>BitmapDrawable</code>。这使得 SVG <strong>在主线程上的渲染成本显著降低</strong>。此外，<code>SvgDecoder</code> 现在在其构造函数中需要 <code>Context</code>。</li><li><strong>破坏性变更</strong>：<code>SparseIntArraySet</code> 扩展函数已移动到 <code>coil.extension</code> 包。</li></ul><hr><ul><li><strong>新特性</strong>：支持设置每个请求的网络头。<a href="https://github.com/coil-kt/coil/pull/120" target="_blank" rel="noreferrer">有关更多信息，请参阅此处</a>。</li><li><strong>新特性</strong>：添加新的 <code>Parameters</code> API 以支持通过图像管道传递自定义数据。</li><li><strong>新特性</strong>：支持 <code>RoundedCornersTransformation</code> 中的单个圆角半径。感谢 @khatv911。</li><li><strong>新特性</strong>：添加 <code>ImageView.clear()</code> 以支持主动释放资源。</li><li><strong>新特性</strong>：支持从其他包加载资源。</li><li><strong>新特性</strong>：为 <code>ViewSizeResolver</code> 添加 <code>subtractPadding</code> 属性，以启用/禁用在测量时减去视图的填充。</li><li><strong>新特性</strong>：改进 HttpUrlFetcher MIME 类型检测。</li><li><strong>新特性</strong>：为 MovieDrawable 和 CrossfadeDrawable 添加 Animatable2Compat 支持。</li><li><strong>新特性</strong>：添加 <code>RequestBuilder&lt;*&gt;.repeatCount</code> 以设置 GIF 的重复计数。</li><li><strong>新特性</strong>：将 BitmapPool 创建添加到公共 API。</li><li><strong>新特性</strong>：使用 <code>@MainThread</code> 注解 Request.Listener 方法。</li></ul><hr><ul><li>修复：使 CoilContentProvider 对测试可见。</li><li>修复：在资源缓存键中包含夜间模式。</li><li>修复：通过临时将源写入磁盘来解决 ImageDecoder 本机崩溃问题。</li><li>修复：正确处理联系人显示照片 URI。</li><li>修复：将色调传递给 <code>CrossfadeDrawable</code> 的子项。</li><li>修复：修复多个未关闭源的实例。</li><li>修复：添加带有损坏/不完整硬件位图实现的设备黑名单。</li></ul><hr><ul><li>针对 SDK 29 编译。</li><li>更新 Kotlin Coroutines 到 1.3.2。</li><li>更新 OkHttp 到 3.12.6。</li><li>更新 Okio 到 2.4.1。</li><li>将 <code>appcompat-resources</code> 从 <code>compileOnly</code> 更改为 <code>implementation</code>，用于 <code>coil-base</code>。</li></ul><h2 id="_0-7-0-2019-年-9-月-8-日" tabindex="-1">[0.7.0] - 2019 年 9 月 8 日 <a class="header-anchor" href="#_0-7-0-2019-年-9-月-8-日" aria-label="Permalink to &quot;[0.7.0] - 2019 年 9 月 8 日&quot;">​</a></h2><ul><li><strong>破坏性变更</strong>：<code>ImageLoaderBuilder.okHttpClient(OkHttpClient.Builder.() -&gt; Unit)</code> 现在是 <code>ImageLoaderBuilder.okHttpClient(() -&gt; OkHttpClient)</code>。初始化器现在也在后台线程上延迟调用。**如果您设置自定义 <code>OkHttpClient</code>，则必须设置 <code>OkHttpClient.cache</code> 以启用磁盘缓存。**如果您不设置自定义 <code>OkHttpClient</code>，Coil 将创建默认的 <code>OkHttpClient</code>，该默认 <code>OkHttpClient</code> 已启用磁盘缓存。默认 Coil 缓存可以使用 <code>CoilUtils.createDefaultCache(context)</code> 创建。例如：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImageLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    okHttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        OkHttpClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CoilUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDefaultCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>破坏性变更</strong>：<code>Fetcher.key</code> 不再具有默认实现。</li><li><strong>破坏性变更</strong>：以前，只有第一个适用的 <code>Mapper</code> 会被调用。现在，所有适用的 <code>Mapper</code> 都将被调用。无 API 更改。</li><li><strong>破坏性变更</strong>：次要命名参数重命名：<code>url</code> -&gt; <code>uri</code>，<code>factory</code> -&gt; <code>initializer</code>。</li></ul><hr><ul><li><strong>新特性</strong>：<code>coil-svg</code> 工件，它具有支持自动解码 SVG 的 <code>SvgDecoder</code>。由 <a href="https://github.com/BigBadaboom/androidsvg" target="_blank" rel="noreferrer">AndroidSVG</a> 提供支持。感谢 @rharter。</li><li><strong>新特性</strong>：<code>load(String)</code> 和 <code>get(String)</code> 现在接受任何受支持的 Uri 方案。例如，您现在可以执行 <code>imageView.load(&quot;file:///path/to/file.jpg&quot;)</code>。</li><li><strong>新特性</strong>：重构 ImageLoader 以使用 <code>Call.Factory</code> 而不是 <code>OkHttpClient</code>。这允许使用 <code>ImageLoaderBuilder.okHttpClient { OkHttpClient() }</code> 延迟初始化网络资源。感谢 @ZacSweers。</li><li><strong>新特性</strong>：<code>RequestBuilder.decoder</code> 以明确设置请求的解码器。</li><li><strong>新特性</strong>：<code>ImageLoaderBuilder.allowHardware</code> 以启用/禁用 ImageLoader 默认的硬件位图。</li><li><strong>新特性</strong>：支持 ImageDecoderDecoder 中的软件渲染。</li></ul><hr><ul><li>修复：加载矢量 drawable 的多个错误。</li><li>修复：支持 <code>WRAP_CONTENT</code> 视图维度。</li><li>修复：支持解析长于 8192 字节的 EXIF 数据。</li><li>修复：交叉淡入时不要拉伸宽高比不同的 drawable。</li><li>修复：防止网络观察器因异常而注册失败。</li><li>修复：修复 MovieDrawable 中的除零错误。感谢 @R12rus。</li><li>修复：支持嵌套 Android 资产文件。感谢 @JaCzekanski。</li><li>修复：防止在 Android O 和 O_MR1 上文件描述符耗尽。</li><li>修复：禁用内存缓存时不要崩溃。感谢 @hansenji。</li><li>修复：确保 <code>Target.cancel</code> 始终从主线程调用。</li></ul><hr><ul><li>更新 Kotlin 到 1.3.50。</li><li>更新 Kotlin Coroutines 到 1.3.0。</li><li>更新 OkHttp 到 3.12.4。</li><li>更新 Okio 到 2.4.0。</li><li>更新 AndroidX 依赖项到最新的稳定版本： <ul><li><code>androidx.appcompat:appcompat</code> -&gt; 1.1.0</li><li><code>androidx.core:core-ktx</code> -&gt; 1.1.0</li><li><code>androidx.lifecycle:lifecycle-common-java8</code> -&gt; 2.1.0</li></ul></li><li>用 <code>appcompat-resources</code> 替换 <code>appcompat</code> 作为可选的 <code>compileOnly</code> 依赖项。<code>appcompat-resources</code> 是一个更小的工件。</li></ul><h2 id="_0-6-1-2019-年-8-月-16-日" tabindex="-1">[0.6.1] - 2019 年 8 月 16 日 <a class="header-anchor" href="#_0-6-1-2019-年-8-月-16-日" aria-label="Permalink to &quot;[0.6.1] - 2019 年 8 月 16 日&quot;">​</a></h2><ul><li>新特性：为 RequestBuilder 添加 <code>transformations(List&lt;Transformation&gt;)</code>。</li><li>修复：将最后修改日期添加到文件 URI 的缓存键。</li><li>修复：确保视图维度至少评估为 1px。</li><li>修复：清除 MovieDrawable 帧之间的画布。</li><li>修复：正确打开资产。</li></ul><h2 id="_0-6-0-2019-年-8-月-12-日" tabindex="-1">[0.6.0] - 2019 年 8 月 12 日 <a class="header-anchor" href="#_0-6-0-2019-年-8-月-12-日" aria-label="Permalink to &quot;[0.6.0] - 2019 年 8 月 12 日&quot;">​</a></h2><ul><li>首次发布。</li></ul>`,239)]))}const g=i(c,[["render",r]]);export{k as __pageData,g as default};
