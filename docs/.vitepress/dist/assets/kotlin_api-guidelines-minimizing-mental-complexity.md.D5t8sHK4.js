import{_ as t,c as e,o as n,ag as a}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"最小化心智复杂度概述","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/api-guidelines-minimizing-mental-complexity.md","filePath":"kotlin/api-guidelines-minimizing-mental-complexity.md","lastUpdated":1754307826000}'),l={name:"kotlin/api-guidelines-minimizing-mental-complexity.md"};function o(r,i,s,p,m,d){return n(),e("div",null,i[0]||(i[0]=[a('<h1 id="最小化心智复杂度概述" tabindex="-1">最小化心智复杂度概述 <a class="header-anchor" href="#最小化心智复杂度概述" aria-label="Permalink to &quot;最小化心智复杂度概述&quot;">​</a></h1><p>用户在使用您的库之前，需要快速准确地构建其函数和抽象的心智模型。实现这一目标的最佳方式是最小化用户遇到的复杂度。</p><p>最小化心智复杂度的策略包括：</p><ul><li><strong>简洁性：</strong> 力求 API 以最少的组件提供最多的功能性，复用现有的 Kotlin 类型和结构以避免冗余。在可能的情况下，创建一小组核心抽象，并在其之上构建额外功能性。</li><li><strong>可读性：</strong> 以声明式风格编写 API，使代码意图清晰。直接从问题域中选择抽象的名称，除非绝对必要才发明新名称。为基本数据类型分配其预期用途。明确区分核心功能性与可选功能性。</li><li><strong>一致性：</strong> 为 API 的每个设计方面维护单一、清晰的方法。使用统一的命名约定、错误处理策略和模式，无论是面向对象的还是函数式的。</li><li><strong>可预测性：</strong> 设计您的库以遵循<a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment" target="_blank" rel="noreferrer">“最小惊讶原则”</a>。确保默认设置与最常见的用例匹配，从而允许用户以最简单、最短的代码完成其任务。仅以明确指定的方式允许对库进行扩展，以保持一致性和可预测性。</li><li><strong>可调试性：</strong> 确保您的库通过促进信息提取和遍历嵌套函数调用来帮助用户进行故障排除。当抛出异常时，异常的类型和内容应与根本问题匹配，提供所有必要的详细信息以有效诊断和解决问题。应该能够捕获和输出领域对象的状态，并查看任何中间表示。</li><li><strong>可测试性：</strong> 确保您的库以及使用它的代码可以轻松测试。</li></ul><p>以下各节将提供在 Kotlin 中实现这些策略的更详细信息。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>要开始深入探索这些策略，您可以从下一节中学习简洁性开始。</p><p><a href="/kotlin/api-guidelines-simplicity">继续阅读下一部分</a></p>',8)]))}const c=t(l,[["render",o]]);export{g as __pageData,c as default};
