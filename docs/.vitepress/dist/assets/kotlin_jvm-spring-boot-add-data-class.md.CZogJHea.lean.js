import{_ as g}from"./chunks/icon-1-done.ZX9lW-aj.js";import{_ as E}from"./chunks/icon-2.DCnUydpf.js";import{_ as u}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as c}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as F}from"./chunks/messages-in-json-format.6v4MkOOj.js";import{_ as y,C as t,c as m,o as C,j as s,G as l,ag as e,a as i,w as n}from"./chunks/framework.Bksy39di.js";const N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/jvm-spring-boot-add-data-class.md","filePath":"kotlin/jvm-spring-boot-add-data-class.md","lastUpdated":1754307826000}'),b={name:"kotlin/jvm-spring-boot-add-data-class.md"};function B(f,a,A,v,D,M){const r=t("web-summary"),d=t("tldr"),p=t("def"),k=t("list"),h=t("code-block"),o=t("deflist");return C(),m("div",null,[a[20]||(a[20]=s("h1",{id:"将数据类添加到-spring-boot-项目",tabindex:"-1"},[i("将数据类添加到 Spring Boot 项目 "),s("a",{class:"header-anchor",href:"#将数据类添加到-spring-boot-项目","aria-label":'Permalink to "将数据类添加到 Spring Boot 项目"'},"​")],-1)),l(r,null,{default:n(()=>a[0]||(a[0]=[i("将 Kotlin 数据类添加到 Spring Boot 项目中。")])),_:1}),l(d,null,{default:n(()=>a[1]||(a[1]=[s("p",null,[i("这是 "),s("strong",null,"Spring Boot 和 Kotlin 入门"),i(" 教程的第二部分。在继续之前，请确保你已完成之前的步骤：")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:g,width:"20",alt:"First step"}),i(),s("a",{href:"/kotlin/jvm-create-project-with-spring-boot"},"使用 Kotlin 创建 Spring Boot 项目"),s("br"),s("img",{src:E,width:"20",alt:"Second step"}),i(),s("strong",null,"将数据类添加到 Spring Boot 项目"),s("br"),s("img",{src:u,width:"20",alt:"Third step"}),i(" 为 Spring Boot 项目添加数据库支持"),s("br"),s("img",{src:c,width:"20",alt:"Fourth step"}),i(" 使用 Spring Data CrudRepository 进行数据库访问")],-1)])),_:1}),a[21]||(a[21]=s("p",null,[i("本教程的这一部分，你将向应用程序添加更多功能，并探索更多 Kotlin 语言特性，例如数据类。 这需要更改 "),s("code",null,"MessageController"),i(" 类，使其能够以包含序列化对象集合的 JSON 文档进行响应。")],-1)),a[22]||(a[22]=s("h2",{id:"更新你的应用程序",tabindex:"-1"},[i("更新你的应用程序 "),s("a",{class:"header-anchor",href:"#更新你的应用程序","aria-label":'Permalink to "更新你的应用程序"'},"​")],-1)),s("ol",null,[a[19]||(a[19]=s("li",null,[s("p",null,[i("在与 "),s("code",null,"DemoApplication.kt"),i(" 文件相同的包中，创建 "),s("code",null,"Message.kt"),i(" 文件。")])],-1)),s("li",null,[a[9]||(a[9]=e("",3)),l(o,{collapsible:"true"},{default:n(()=>[l(p,{title:"数据类 – data class Message"},{default:n(()=>a[2]||(a[2]=[s("p",null,[i("Kotlin 中"),s("a",{href:"/kotlin/data-classes"},"数据类"),i("的主要目的是存储数据。这类类用 "),s("code",null,"data"),i(" 关键字标记，并且一些标准功能和实用函数通常可以从类结构中机械地派生出来。")],-1),s("p",null,[i("在此示例中，你将 "),s("code",null,"Message"),i(" 声明为数据类，因为其主要目的是存储数据。")],-1)])),_:1}),l(p,{title:"val 和 var 属性"},{default:n(()=>[a[4]||(a[4]=s("p",null,[s("a",{href:"/kotlin/properties"},"Kotlin 中的属性"),i("可以声明为：")],-1)),l(k,null,{default:n(()=>a[3]||(a[3]=[s("li",null,[s("i",null,"可变的"),i("，使用 "),s("code",null,"var"),i(" 关键字")],-1),s("li",null,[s("i",null,"只读的"),i("，使用 "),s("code",null,"val"),i(" 关键字")],-1)])),_:1}),a[5]||(a[5]=s("p",null,[s("code",null,"Message"),i(" 类使用 "),s("code",null,"val"),i(" 关键字声明了两个属性："),s("code",null,"id"),i(" 和 "),s("code",null,"text"),i("。 编译器将自动为这两个属性生成 getter。 在 "),s("code",null,"Message"),i(" 类实例创建后，这些属性的值将无法重新赋值。 ")],-1))]),_:1}),l(p,{title:"可空的类型 – String?"},{default:n(()=>[a[7]||(a[7]=s("p",null,[i("Kotlin 提供"),s("a",{href:"/kotlin/null-safety#nullable-types-and-non-nullable-types"},"对可空的类型内置支持"),i("。在 Kotlin 中，类型系统区分可以持有 "),s("code",null,"null"),i(" 的引用（"),s("i",null,"可空引用"),i("）和不能持有 "),s("code",null,"null"),i(" 的引用（"),s("i",null,"非空引用"),i("）。"),s("br"),i(" 例如，"),s("code",null,"String"),i(" 类型的普通变量不能持有 "),s("code",null,"null"),i("。为了允许 null 值，你可以通过写入 "),s("code",null,"String?"),i(" 将变量声明为可空的字符串。 ")],-1)),a[8]||(a[8]=s("p",null,[s("code",null,"Message"),i(" 类的 "),s("code",null,"id"),i(" 属性此次被声明为可空的类型。 因此，可以通过传递 "),s("code",null,"null"),i(" 作为 "),s("code",null,"id"),i(" 的值来创建 "),s("code",null,"Message"),i(" 类的实例： ")],-1)),l(h,{lang:"kotlin"},{default:n(()=>a[6]||(a[6]=[i(' Message(null, "Hello!") ')])),_:1})]),_:1})]),_:1})]),s("li",null,[a[18]||(a[18]=e("",2)),l(o,{collapsible:"true"},{default:n(()=>[l(p,{title:"集合 – listOf()"},{default:n(()=>[a[11]||(a[11]=s("p",null,[i("Kotlin 标准库为基本集合类型提供实现：set、list 和 map。"),s("br"),i(" 每种集合类型可以是"),s("i",null,"只读的"),i("或"),s("i",null,"可变的"),i("：")],-1)),l(k,null,{default:n(()=>a[10]||(a[10]=[s("li",null,[s("i",null,"只读集合"),i("提供访问集合元素的操作。")],-1),s("li",null,[s("i",null,"可变集合"),i("还提供用于添加、移除和更新其元素的写入操作。")],-1)])),_:1}),a[12]||(a[12]=s("p",null,"Kotlin 标准库也提供了相应的工厂函数来创建这些集合的实例。 ",-1)),a[13]||(a[13]=s("p",null,[i("在本教程中，你使用 "),s("a",{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/list-of.html"},[s("code",null,"listOf()")]),i(" 函数创建 "),s("code",null,"Message"),i(" 对象 list。 这是创建"),s("i",null,"只读"),i("对象 list 的工厂函数：你无法从 list 中添加或移除元素。"),s("br"),i(" 如果需要对 list 执行写入操作，请调用 "),s("a",{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/mutable-list-of.html"},[s("code",null,"mutableListOf()")]),i(" 函数以创建可变 list 实例。 ")],-1))]),_:1}),l(p,{title:"尾部逗号"},{default:n(()=>[a[15]||(a[15]=s("p",null,[s("a",{href:"/kotlin/coding-conventions#trailing-commas"},"尾部逗号"),i("是系列元素中"),s("strong",null,"最后一个项"),i("之后的逗号符号：")],-1)),l(h,{lang:"kotlin"},{default:n(()=>a[14]||(a[14]=[i(' Message("3", "Privet!"), ')])),_:1}),a[16]||(a[16]=s("p",null,"这是 Kotlin 语法的一个便捷特性，完全是可选的——即使没有它们，你的代码也能正常工作。 ",-1)),a[17]||(a[17]=s("p",null,[i("在上面的示例中，创建 "),s("code",null,"Message"),i(" 对象 list 包含在 "),s("code",null,"listOf()"),i(" 函数的最后一个实参之后添加的尾部逗号。")],-1))]),_:1})]),_:1})])]),a[23]||(a[23]=e("",12))])}const P=y(b,[["render",B]]);export{N as __pageData,P as default};
