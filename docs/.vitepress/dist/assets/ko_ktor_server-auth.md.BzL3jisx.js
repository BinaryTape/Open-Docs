import{_ as y,C as n,c as v,o as F,G as i,ag as p,j as a,w as e,a as t}from"./chunks/framework.Bksy39di.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-auth.md","filePath":"ko/ktor/server-auth.md","lastUpdated":1755457140000}'),b={name:"ko/ktor/server-auth.md"};function m(f,s,q,A,C,B){const o=n("TopicTitle"),k=n("show-structure"),d=n("primary-label"),c=n("tldr"),u=n("link-summary"),l=n("code-block"),r=n("TabItem"),h=n("Tabs"),E=n("Links"),g=n("list");return F(),v("div",null,[i(o,{labelRef:"server-plugin",title:"Ktor Server의 인증 및 인가"}),i(k,{for:"chapter",depth:"2"}),i(d,{ref:"server-plugin"},null,512),i(c,null,{default:e(()=>s[0]||(s[0]=[a("p",null,[a("b",null,"필수 의존성"),t(": "),a("code",null,"io.ktor:ktor-server-auth")],-1)])),_:1}),i(u,null,{default:e(()=>s[1]||(s[1]=[t(" Authentication 플러그인은 Ktor에서 인증 및 인가를 처리합니다. ")])),_:1}),s[14]||(s[14]=p('<p>Ktor는 인증 및 인가 (authorization)를 처리하기 위한 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-authentication/index.html" target="_blank" rel="noreferrer">Authentication</a> 플러그인을 제공합니다. 일반적인 사용 시나리오에는 사용자 로그인, 특정 리소스에 대한 접근 권한 부여, 그리고 당사자 간의 정보 안전한 전송이 포함됩니다. 또한, 요청 간 사용자 정보를 유지하기 위해 <code>Authentication</code>을 <a href="./server-sessions">세션</a>과 함께 사용할 수도 있습니다.</p><blockquote><p>클라이언트 측에서는 Ktor가 인증 및 인가 처리를 위한 <a href="./client-auth">Authentication</a> 플러그인을 제공합니다.</p></blockquote><h2 id="supported" tabindex="-1">지원되는 인증 유형 <a class="header-anchor" href="#supported" aria-label="Permalink to &quot;지원되는 인증 유형 {id=&quot;supported&quot;}&quot;">​</a></h2><p>Ktor는 다음 인증 및 인가 스키마를 지원합니다:</p><h3 id="http-auth" tabindex="-1">HTTP 인증 <a class="header-anchor" href="#http-auth" aria-label="Permalink to &quot;HTTP 인증 {id=&quot;http-auth&quot;}&quot;">​</a></h3><p>HTTP는 접근 제어 및 인증을 위한 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noreferrer">일반적인 프레임워크</a>를 제공합니다. Ktor에서는 다음 HTTP 인증 스키마를 사용할 수 있습니다:</p><ul><li><a href="./server-basic-auth">Basic</a> - <code>Base64</code> 인코딩을 사용하여 사용자 이름과 비밀번호를 제공합니다. HTTPS와 함께 사용되지 않는다면 일반적으로 권장되지 않습니다.</li><li><a href="./server-digest-auth">Digest</a> - 사용자 이름과 비밀번호에 해시 함수를 적용하여 암호화된 형태로 사용자 자격 증명 (credentials)을 통신하는 인증 방식입니다.</li><li><a href="./server-bearer-auth">Bearer</a> - 베어러 토큰 (bearer tokens)이라는 보안 토큰을 포함하는 인증 스키마입니다. Bearer 인증 스키마는 <a href="./server-oauth">OAuth</a> 또는 <a href="./server-jwt">JWT</a>의 일부로 사용되지만, 베어러 토큰을 인가하기 위한 사용자 정의 로직을 제공할 수도 있습니다.</li></ul><h3 id="form-auth" tabindex="-1">폼 기반 인증 <a class="header-anchor" href="#form-auth" aria-label="Permalink to &quot;폼 기반 인증 {id=&quot;form-auth&quot;}&quot;">​</a></h3><p><a href="./server-form-based-auth">폼 기반</a> 인증은 <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms" target="_blank" rel="noreferrer">웹 폼</a>을 사용하여 자격 증명 정보를 수집하고 사용자를 인증합니다.</p><h3 id="jwt" tabindex="-1">JSON 웹 토큰 (JWT) <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;JSON 웹 토큰 (JWT) {id=&quot;jwt&quot;}&quot;">​</a></h3><p><a href="./server-jwt">JSON 웹 토큰</a>은 JSON 객체로 당사자 간에 정보를 안전하게 전송하기 위한 공개 표준입니다. JSON 웹 토큰을 인가 (authorization)에 사용할 수 있습니다: 사용자가 로그인하면 각 요청에 토큰이 포함되어, 사용자가 해당 토큰으로 허용된 리소스에 접근할 수 있도록 합니다. Ktor에서는 <code>jwt</code> 인증을 사용하여 토큰을 검증하고 토큰에 포함된 클레임 (claims)을 유효성 검사할 수 있습니다.</p><h3 id="ldap" tabindex="-1">LDAP <a class="header-anchor" href="#ldap" aria-label="Permalink to &quot;LDAP {id=&quot;ldap&quot;}&quot;">​</a></h3><p><a href="./server-ldap">LDAP</a>은 디렉터리 서비스 인증에 사용되는 개방형 크로스 플랫폼 프로토콜입니다. Ktor는 지정된 LDAP 서버에 대해 사용자 자격 증명을 인증하기 위한 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth-ldap/io.ktor.server.auth.ldap/ldap-authenticate.html" target="_blank" rel="noreferrer">ldapAuthenticate</a> 함수를 제공합니다.</p><h3 id="oauth" tabindex="-1">OAuth <a class="header-anchor" href="#oauth" aria-label="Permalink to &quot;OAuth {id=&quot;oauth&quot;}&quot;">​</a></h3><p><a href="./server-oauth">OAuth</a>는 API 접근을 보호하기 위한 공개 표준입니다. Ktor의 <code>oauth</code> 프로바이더 (provider)를 통해 Google, Facebook, Twitter 등과 같은 외부 프로바이더를 사용하여 인증을 구현할 수 있습니다.</p><h3 id="sessions" tabindex="-1">세션 <a class="header-anchor" href="#sessions" aria-label="Permalink to &quot;세션 {id=&quot;sessions&quot;}&quot;">​</a></h3><p><a href="./server-sessions">세션</a>은 여러 HTTP 요청 간에 데이터를 유지하는 메커니즘을 제공합니다. 일반적인 사용 사례에는 로그인한 사용자의 ID, 장바구니 내용 저장, 또는 클라이언트의 사용자 선호도 유지가 포함됩니다. Ktor에서는 이미 연결된 세션을 가진 사용자가 <code>session</code> 프로바이더를 사용하여 인증될 수 있습니다. <a href="./server-session-auth">Ktor Server의 세션 인증</a>에서 이 방법을 알아보세요.</p><h3 id="custom" tabindex="-1">커스텀 <a class="header-anchor" href="#custom" aria-label="Permalink to &quot;커스텀 {id=&quot;custom&quot;}&quot;">​</a></h3><p>Ktor는 또한 인증 및 인가 처리를 위한 자체 플러그인을 구현하는 데 사용할 수 있는 <a href="./server-custom-plugins">커스텀 플러그인</a> 생성을 위한 API를 제공합니다. 예를 들어, <code>AuthenticationChecked</code> <a href="./server-custom-plugins#call-handling">훅</a>은 인증 자격 증명이 확인된 후 실행되며, 이를 통해 인가를 구현할 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/blob/3.2.3/codeSnippets/snippets/custom-plugin-authorization" target="_blank" rel="noreferrer">custom-plugin-authorization</a>.</p><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>Authentication</code>을 사용하려면 빌드 스크립트에 <code>ktor-server-auth</code> 아티팩트를 포함해야 합니다: </p>',21)),i(h,{group:"languages"},{default:e(()=>[i(r,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[i(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),i(r,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[i(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),i(r,{title:"Maven","group-key":"maven"},{default:e(()=>[i(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[15]||(s[15]=a("p",null,[t("참고로, "),a("a",{href:"./server-jwt"},"JWT"),t(" 및 "),a("a",{href:"./server-ldap"},"LDAP"),t("와 같은 일부 인증 프로바이더는 추가 아티팩트를 필요로 합니다.")],-1)),s[16]||(s[16]=a("h2",{id:"install",tabindex:"-1"},[t("Authentication 설치 "),a("a",{class:"header-anchor",href:"#install","aria-label":'Permalink to "Authentication 설치 {id="install"}"'},"​")],-1)),a("p",null,[s[3]||(s[3]=t(" 애플리케이션에 ")),s[4]||(s[4]=a("code",null,"Authentication",-1)),s[5]||(s[5]=t(" 플러그인을 ")),s[6]||(s[6]=a("a",{href:"#install"},"설치",-1)),s[7]||(s[7]=t("하려면, 지정된 ")),i(E,{href:"/ktor/server-modules",summary:"모듈을 사용하면 라우트를 그룹화하여 애플리케이션을 구조화할 수 있습니다."},{default:e(()=>s[2]||(s[2]=[t("모듈")])),_:1}),s[8]||(s[8]=t("의 ")),s[9]||(s[9]=a("code",null,"install",-1)),s[10]||(s[10]=t(" 함수에 전달하세요. 아래 코드 스니펫은 ")),s[11]||(s[11]=a("code",null,"Authentication",-1)),s[12]||(s[12]=t("을 설치하는 방법을 보여줍니다... "))]),i(g,null,{default:e(()=>s[13]||(s[13]=[a("li",null,[t(" ... "),a("code",null,"embeddedServer"),t(" 함수 호출 내. ")],-1),a("li",null,[t(" ... "),a("code",null,"Application"),t(" 클래스의 확장 함수인 명시적으로 정의된 "),a("code",null,"module"),t(" 내. ")],-1)])),_:1}),i(h,null,{default:e(()=>[i(r,{title:"embeddedServer"},{default:e(()=>[i(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.auth.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(Authentication)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),i(r,{title:"module"},{default:e(()=>[i(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.auth.*
            // ...
            fun Application.module() {
                install(Authentication)
                // ...
            }`})]),_:1})]),_:1}),s[17]||(s[17]=p(`<h2 id="configure" tabindex="-1">Authentication 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;Authentication 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><p><a href="#install">Authentication을 설치한</a> 후, 다음과 같이 <code>Authentication</code>을 구성하고 사용할 수 있습니다:</p><h3 id="choose-provider" tabindex="-1">1단계: 인증 프로바이더 선택 <a class="header-anchor" href="#choose-provider" aria-label="Permalink to &quot;1단계: 인증 프로바이더 선택 {id=&quot;choose-provider&quot;}&quot;">​</a></h3><p><a href="./server-basic-auth">basic</a>, <a href="./server-digest-auth">digest</a>, 또는 <a href="./server-form-based-auth">form</a>과 같은 특정 인증 프로바이더를 사용하려면, <code>install</code> 블록 내에서 해당 함수를 호출해야 합니다. 예를 들어, 기본 인증을 사용하려면 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/basic.html" target="_blank" rel="noreferrer"><code>.basic()</code></a> 함수를 호출하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure basic authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 함수 내에서 이 프로바이더에 특정한 설정을 <a href="#configure-provider">구성</a>할 수 있습니다.</p><h3 id="provider-name" tabindex="-1">2단계: 프로바이더 이름 지정 <a class="header-anchor" href="#provider-name" aria-label="Permalink to &quot;2단계: 프로바이더 이름 지정 {id=&quot;provider-name&quot;}&quot;">​</a></h3><p><a href="#choose-provider">특정 프로바이더를 사용하는</a> 함수는 선택적으로 프로바이더 이름을 지정할 수 있도록 합니다. 아래 코드 샘플은 <code>&quot;auth-basic&quot;</code> 및 <code>&quot;auth-form&quot;</code> 이름으로 각각 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/basic.html" target="_blank" rel="noreferrer">basic</a> 및 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/form.html" target="_blank" rel="noreferrer">form</a> 프로바이더를 설치합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure basic authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure form authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 이름들은 나중에 다른 프로바이더를 사용하여 <a href="#authenticate-route">다른 라우트를 인증</a>하는 데 사용될 수 있습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>프로바이더 이름은 고유해야 하며, 이름 없는 프로바이더는 하나만 정의할 수 있습니다.</p></div><h3 id="configure-provider" tabindex="-1">3단계: 프로바이더 구성 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;3단계: 프로바이더 구성 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p>각 <a href="#choose-provider">프로바이더 유형</a>은 자체 구성을 가지고 있습니다. 예를 들어, <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-basic-authentication-provider/-config/index.html" target="_blank" rel="noreferrer"><code>BasicAuthenticationProvider.Config</code></a> 클래스는 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/basic.html" target="_blank" rel="noreferrer"><code>.basic()</code></a> 함수에 대한 옵션을 제공합니다. 이 클래스의 핵심 함수는 사용자 이름과 비밀번호를 유효성 검사하는 역할을 하는 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-basic-authentication-provider/-config/validate.html" target="_blank" rel="noreferrer"><code>validate()</code></a>입니다. 다음 코드 예제는 그 사용법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (credentials.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jetbrains&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> credentials.password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentials.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>validate()</code> 함수가 어떻게 작동하는지 이해하려면 두 가지 용어를 소개해야 합니다:</p><ul><li><em>Principal</em> (principal)은 인증될 수 있는 엔티티입니다: 사용자, 컴퓨터, 서비스 등. Ktor에서는 다양한 인증 프로바이더가 다른 principal을 사용할 수 있습니다. 예를 들어, <code>basic</code>, <code>digest</code>, <code>form</code> 프로바이더는 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-id-principal/index.html" target="_blank" rel="noreferrer"><code>UserIdPrincipal</code></a>을 인증하는 반면, <code>jwt</code> 프로바이더는 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth-jwt/io.ktor.server.auth.jwt/-j-w-t-principal/index.html" target="_blank" rel="noreferrer"><code>JWTPrincipal</code></a>을 검증합니다. <blockquote><p>커스텀 principal을 생성할 수도 있습니다. 이는 다음 경우에 유용할 수 있습니다:</p><ul><li>자격 증명을 커스텀 principal에 매핑하면 <a href="#get-principal">라우트 핸들러</a> 내에서 인증된 principal에 대한 추가 정보를 가질 수 있습니다.</li><li><a href="./server-session-auth">세션 인증</a>을 사용하는 경우, principal은 세션 데이터를 저장하는 데이터 클래스일 수 있습니다.</li></ul></blockquote></li><li><em>Credential</em> (자격 증명)은 서버가 principal을 인증하기 위한 속성 집합입니다: 사용자/비밀번호 쌍, API 키 등. 예를 들어, <code>basic</code> 및 <code>form</code> 프로바이더는 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-password-credential/index.html" target="_blank" rel="noreferrer"><code>UserPasswordCredential</code></a>을 사용하여 사용자 이름과 비밀번호를 유효성 검사하는 반면, <code>jwt</code>는 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth-jwt/io.ktor.server.auth.jwt/-j-w-t-credential/index.html" target="_blank" rel="noreferrer"><code>JWTCredential</code></a>을 검증합니다.</li></ul><p>따라서 <code>validate()</code> 함수는 지정된 자격 증명을 확인하고 인증 성공 시 principal <code>Any</code>를 반환하거나 인증 실패 시 <code>null</code>을 반환합니다.</p><blockquote><p>특정 기준에 따라 인증을 건너뛰려면 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-authentication-provider/-config/skip-when.html" target="_blank" rel="noreferrer"><code>skipWhen()</code></a>을 사용하세요. 예를 들어, <a href="./server-sessions">세션</a>이 이미 존재하는 경우 <code>basic</code> 인증을 건너뛸 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    skipWhen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></blockquote><h3 id="authenticate-route" tabindex="-1">4단계: 특정 리소스 보호 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;4단계: 특정 리소스 보호 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p>마지막 단계는 애플리케이션의 특정 리소스를 보호하는 것입니다. 이는 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/authenticate.html" target="_blank" rel="noreferrer"><code>authenticate()</code></a> 함수를 사용하여 수행할 수 있습니다. 이 함수는 두 개의 선택적 매개변수를 받습니다:</p><ul><li><p>중첩된 라우트를 인증하는 데 사용되는 <a href="#provider-name">프로바이더 이름</a>입니다. 아래 코드 스니펫은 <em>auth-basic</em> 이름의 프로바이더를 사용하여 <code>/login</code> 및 <code>/orders</code> 라우트를 보호합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/orders&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>중첩된 인증 프로바이더를 해결하는 데 사용되는 전략입니다. 이 전략은 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-authentication-strategy/index.html" target="_blank" rel="noreferrer"><code>AuthenticationStrategy</code></a> 열거형 값으로 표현됩니다.</p><p>예를 들어, 클라이언트는 <code>AuthenticationStrategy.Required</code> 전략으로 등록된 모든 프로바이더에 대해 인증 데이터를 제공해야 합니다. 아래 코드 스니펫에서 <a href="./server-session-auth">세션 인증</a>을 통과한 사용자만 기본 인증을 사용하여 <code>/admin</code> 라우트에 접근을 시도할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><blockquote><p>전체 예제는 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session-nested" target="_blank" rel="noreferrer">auth-form-session-nested</a>를 참조하세요.</p></blockquote><h3 id="get-principal" tabindex="-1">5단계: 라우트 핸들러 내에서 principal 가져오기 <a class="header-anchor" href="#get-principal" aria-label="Permalink to &quot;5단계: 라우트 핸들러 내에서 principal 가져오기 {id=&quot;get-principal&quot;}&quot;">​</a></h3><p>인증 성공 시, <a href="#configure-provider">구성된 인증 프로바이더</a>에서 반환된 특정 principal 유형을 사용하여 <code>call.principal()</code> 함수를 통해 라우트 핸들러 내에서 인증된 principal을 가져올 수 있습니다. 다음 예제에서는 <code>call.principal()</code>이 <code>UserIdPrincipal</code>을 얻고 인증된 사용자의 이름을 가져오는 데 사용됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()?.name}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="./server-session-auth">세션 인증</a>을 사용하는 경우, principal은 세션 데이터를 저장하는 데이터 클래스일 수 있습니다. 따라서 이 데이터 클래스를 <code>call.principal()</code>에 전달해야 합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="#authenticate-route">중첩된 인증 프로바이더</a>의 경우, 원하는 프로바이더의 principal을 얻기 위해 <a href="#provider-name">프로바이더 이름</a>을 <code>call.principal()</code>에 전달할 수 있습니다.</p><p>아래 예제에서는 최상위 세션 프로바이더의 principal을 얻기 위해 <code>&quot;auth-session&quot;</code> 값이 전달됩니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,30))])}const P=y(b,[["render",m]]);export{D as __pageData,P as default};
