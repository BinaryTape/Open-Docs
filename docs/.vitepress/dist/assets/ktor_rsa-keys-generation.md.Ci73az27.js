import{_ as r,C as p,c,o as u,j as i,G as e,ag as n,a,w as t}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/rsa-keys-generation.md","filePath":"ktor/rsa-keys-generation.md","lastUpdated":1755457140000}'),g={name:"ktor/rsa-keys-generation.md"};function F(y,s,b,C,E,_){const k=p("show-structure"),h=p("tldr"),o=p("warning"),l=p("code-block"),d=p("note");return u(),c("div",null,[s[6]||(s[6]=i("h1",{id:"rsa-密钥生成",tabindex:"-1"},[a("RSA 密钥生成 "),i("a",{class:"header-anchor",href:"#rsa-密钥生成","aria-label":'Permalink to "RSA 密钥生成"'},"​")],-1)),e(k,{for:"chapter",depth:"2"}),e(h,null,{default:t(()=>s[0]||(s[0]=[i("p",null,[i("b",null,"代码示例"),a(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-jwt-rs256"}," auth-jwt-rs256 ")],-1)])),_:1}),s[7]||(s[7]=i("p",null,[i("a",{href:"https://en.wikipedia.org/wiki/RSA_(cryptosystem)",target:"_blank",rel:"noreferrer"},"RSA (Rivest–Shamir–Adleman)"),a(" 是一种广泛使用的公钥密码系统，它支持安全数据传输、数字签名和密钥交换。")],-1)),s[8]||(s[8]=i("p",null,"RS256 作为 RSA 加密算法的一部分，利用 SHA-256 进行散列以及一个密钥（通常为 2048 位、4096 位或更高）来保护数字通信安全。",-1)),s[9]||(s[9]=i("p",null,[a("在 "),i("a",{href:"https://jwt.io/",target:"_blank",rel:"noreferrer"},"JSON Web Token"),a(" 认证领域中，RS256 扮演着关键角色，因为 JWT 的完整性和真实性可以通过签名机制（例如 RS256）进行验证，其中采用了公钥/私钥对。这确保了令牌中包含的信息防篡改且可信。")],-1)),s[10]||(s[10]=i("p",null,[a("在本节中，你将学习这些密钥是如何生成并与 Ktor 提供的 "),i("a",{href:"./server-jwt"},"Authentication JWT"),a(" 插件一同使用的。")],-1)),e(o,null,{default:t(()=>s[1]||(s[1]=[i("p",null,[a(" 对于生产环境使用，建议你选择更现代的替代方案，例如基于比 RSA 更高效、更安全的密码学的 "),i("a",{href:"https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm"},"ES256"),a("。 ")],-1)])),_:1}),s[11]||(s[11]=i("h2",{id:"生成-rsa-私钥",tabindex:"-1"},[a("生成 RSA 私钥 "),i("a",{class:"header-anchor",href:"#生成-rsa-私钥","aria-label":'Permalink to "生成 RSA 私钥"'},"​")],-1)),s[12]||(s[12]=i("p",null,[a("要生成私钥，你可以使用 OpenSSL、"),i("code",null,"ssh-keygen"),a(" 或你选择的其他工具来创建认证密钥对。为演示目的，此处将使用 OpenSSL。")],-1)),s[13]||(s[13]=i("p",null,"在新终端窗口中，运行以下命令：",-1)),e(l,{lang:"shell",code:"openssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 &gt; ktor.pk8"}),s[14]||(s[14]=n('<p><a href="https://www.openssl.org/docs/man3.0/man1/openssl-genpkey.html" target="_blank" rel="noreferrer">openssl genpkey</a> 命令使用 RSA 算法生成一个 2048 位私钥，并将其存储到指定文件，此处为 <code>ktor.pk8</code>。该文件内容经过 <a href="https://en.wikipedia.org/wiki/Base64" target="_blank" rel="noreferrer">Base64</a> 编码，因此在派生公钥之前需要进行解码。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>要使用 <a href="https://github.com/ktorio/ktor-documentation/blob/3.2.3/codeSnippets/snippets/auth-jwt-rs256/" target="_blank" rel="noreferrer">代码示例</a> 中的私钥，请导航到 <code>src/main/resources</code> 下的 <code>application.conf</code> 文件，并将私钥提取到一个新的 <code>.pk8</code> 文件中。</p></div><h2 id="second-step" tabindex="-1">派生公钥 <a class="header-anchor" href="#second-step" aria-label="Permalink to &quot;派生公钥 {id=&quot;second-step&quot;}&quot;">​</a></h2><p>为了从你之前生成的私钥中派生公钥，你需要执行以下步骤：</p><ol><li>解码私钥。</li><li>提取公钥。</li><li>将公钥保存为 PEM 格式。</li></ol><p>使用 OpenSSL 执行此操作，请运行以下命令：</p>',6)),e(l,{lang:"shell",code:"openssl rsa -in ktor.pk8 -pubout | tee ktor.spki"}),s[15]||(s[15]=n('<ul><li><code>openssl rsa</code>: 这是用于处理 RSA 密钥的 <code>OpenSSL</code> 命令。在此上下文中，它用于执行与 RSA 密钥相关的操作。</li><li><code>-in ktor.pk8</code>: 此选项指定输入文件（<code>ktor.pk8</code>），OpenSSL 应从中读取 RSA 私钥。</li><li><code>-pubout</code>: 此选项指示 OpenSSL 输出输入文件中提供的私钥对应的公钥。</li><li><code>|</code>: 管道 (|) 符号用于将前一个命令（由 openssl rsa 生成的公钥）的输出重定向到 tee 命令。</li><li><code>tee ktor.spki</code>: <code>tee</code> 是一个命令行工具，它从标准输入读取并写入标准输出以及一个或多个文件。此命令部分指示 tee 将接收到的输入写入名为 <code>ktor.spki</code> 的文件。因此，公钥将同时显示在终端上并保存到 <code>ktor.spki</code> 文件中。</li></ul><p>有了公钥，你现在可以派生其指数和模数值。</p><h2 id="提取模数与指数属性" tabindex="-1">提取模数与指数属性 <a class="header-anchor" href="#提取模数与指数属性" aria-label="Permalink to &quot;提取模数与指数属性&quot;">​</a></h2><p>现在你已经有了密钥对，你需要提取公钥的 <code>e</code>（指数）和 <code>n</code>（模数）属性，以便在你的 <code>jwks.json</code> 文件中使用它们。这需要以下步骤：</p><ol><li>从你创建的 <code>.spki</code> 文件中读取公钥。</li><li>以人类可读的格式显示关于密钥的信息。</li></ol><p>使用 OpenSSL 执行此操作，请运行以下命令：</p>',6)),e(l,{lang:"shell",code:"openssl pkey -in ktor.spki -pubin -noout -text"}),s[16]||(s[16]=n(`<ul><li><code>pkey</code>: 这是 OpenSSL 命令行工具，用于处理私钥和公钥。</li><li><code>-in ktor.spki</code>: 指定包含 PEM 格式公钥的输入文件。在本例中，输入文件是 <code>ktor.spki</code>。</li><li><code>-pubin</code>: 表明输入文件包含公钥。如果没有此选项，OpenSSL 将假定输入文件包含私钥。</li><li><code>-noout</code>: 此选项阻止 OpenSSL 输出编码后的公钥。该命令将只显示关于公钥的信息，实际密钥不会打印到控制台。</li><li><code>-text</code>: 请求 OpenSSL 显示密钥的文本表示。这包括密钥类型、大小和实际密钥数据等详细信息，以人类可读的形式。</li></ul><p>预期输出如下所示：</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pkey</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ktor.spki</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -pubin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -noout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -text</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RSA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Public-Key:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (512 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Modulus:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    00:b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    2b:d0:87:b4:01</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exponent:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 65537</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x10001)</span></span></code></pre></div>`,3)),e(o,null,{default:t(()=>s[2]||(s[2]=[i("p",null," 请注意，在此示例中，公钥使用 512 位，这是不安全的。理想情况下，你应该选择 2048 位或 4096 位密钥。 ",-1)])),_:1}),s[17]||(s[17]=n('<h2 id="转换并编码模数与指数属性" tabindex="-1">转换并编码模数与指数属性 <a class="header-anchor" href="#转换并编码模数与指数属性" aria-label="Permalink to &quot;转换并编码模数与指数属性&quot;">​</a></h2><p>在前面的步骤中，你提取了 <code>jwks.json</code> 文件所需的 <code>n</code> 和 <code>e</code> 属性。然而，它们是十六进制格式的。你现在需要将指数和模数的十六进制表示转换为它们对应的 <a href="https://en.wikipedia.org/wiki/Base64#URL_applications" target="_blank" rel="noreferrer">Base64URL</a> 编码。</p><h3 id="指数" tabindex="-1">指数 <a class="header-anchor" href="#指数" aria-label="Permalink to &quot;指数&quot;">​</a></h3><p>指数属性的十六进制值为 <code>0x10001</code>。要将该值转换为 Base64URL，请使用以下命令：</p>',4)),e(l,{lang:"shell",code:"echo 010001 | xxd -p -r | base64 "}),s[18]||(s[18]=n("<ul><li><code>echo 010001</code>: 此命令部分使用 <code>echo</code> 命令将字符串 &quot;010001&quot;（它表示 RSA 密钥的公有指数 (e)）输出到标准输出。</li><li><code>|</code>: <code>|</code> 字符是一个管道，它获取前一个命令的输出并将其作为输入传递给下一个命令。</li><li><code>xxd -p -r</code>: 此命令用于将十六进制转换为二进制。它接收十六进制输入并生成对应的二进制输出。</li><li><code>| base64</code>: 此命令部分获取上一步的二进制输出，并使用 <code>base64</code> 命令将其编码为 Base64 格式。</li></ul>",1)),e(d,null,{default:t(()=>s[3]||(s[3]=[i("p",null," 请注意，通过在左侧添加一个额外的 0，使用了偶数位十六进制数字。 ",-1)])),_:1}),s[19]||(s[19]=n(`<p>这是上述指数值的预期输出：</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 010001</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xxd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AQAB</span></span></code></pre></div><p>指数的 Base64URL 编码值为 <code>AQAB</code>，在本例中不需要进一步处理。在其他情况下，你可能需要使用 <code>tr</code> 命令，如下一步所示。</p><h3 id="模数" tabindex="-1">模数 <a class="header-anchor" href="#模数" aria-label="Permalink to &quot;模数&quot;">​</a></h3><p>对于 <code>n</code> 属性，你将使用 <code>tr</code> 工具来进一步处理模数的十六进制表示。</p>`,5)),e(l,{lang:"shell",code:`echo "b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:
    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:
    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:
    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:
    2b:d0:87:b4:01" | tr -d ": 
" | xxd -p -r | base64 | tr +/ -_ | tr -d "=
"`}),e(d,null,{default:t(()=>s[4]||(s[4]=[i("p",null," 请注意，前导 00 字节已被省略。模数中的前导 00 字节与 RSA 公钥的 ASN.1 编码相关。在整数的 ASN.1 DER 编码中，如果整数的最高有效位是 0，则会移除前导零字节。这是 ASN.1 编码规则的标准部分。在 RSA 公钥的上下文中，模数是一个大端整数，当在 DER 编码中表示时，它遵循这些规则。移除前导零字节是为了确保根据 DER 规则正确解释整数。 ",-1)])),_:1}),s[20]||(s[20]=n(`<ul><li><code>echo &quot;b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5: \\ ... &quot;</code>: 此命令部分回显一个多行十六进制字符串，表示一系列字节。每行末尾的反斜杠表示行延续。</li><li><code>tr -d &quot;: &quot;</code>: <code>tr</code> 命令用于删除参数列表中指定的字符。在这里，它从十六进制字符串中移除冒号、空格和换行符，使其成为一个连续的十六进制数字字符串。</li><li><code>xxd -p -r</code>: <code>xxd</code> 是一个用于创建二进制文件十六进制转储或将十六进制转储转换回二进制的工具。<code>-p</code> 选项指定纯十六进制转储，不带行号或 ASCII 字符列。<code>-r</code> 选项反转操作，将十六进制转换回二进制。</li><li><code>base64</code>: 将上一步的二进制输出编码为 Base64 格式。</li><li><code>tr +/ -_</code>: 分别将 Base64 输出中的 <code>+</code> 和 <code>/</code> 字符转换为 <code>-</code> 和 <code>_</code>。这是 URL 安全的 Base64 编码的常见修改。</li><li><code>tr -d &quot;= &quot;</code>: 从最终的 Base64 编码字符串中移除所有等号 (=) 和换行符。</li></ul><p>上述命令的输出为：</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    2b:d0:87:b4:01&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;: </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xxd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;=</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tfJaLrzXILUg1U3N1KV8yJr92GHn5OtYZR7qWk1Mc4cy4JGjklYup7weMjBD9f3bBVoIsiUVX6xNcYIr0Ie0AQ</span></span></code></pre></div><p>通过正确利用 <code>tr</code> 命令，模数字段已编码为 Base64URL 字符串，你可以在 <code>jwks.json</code> 文件中使用它。</p><h2 id="填充-jwks-json-文件" tabindex="-1">填充 jwks.json 文件 <a class="header-anchor" href="#填充-jwks-json-文件" aria-label="Permalink to &quot;填充 jwks.json 文件&quot;">​</a></h2><p>在前面的步骤中，你收集了以下必要信息：</p><ol><li>一个 RSA 密钥对。</li><li>Base64URL 格式的 RSA 公钥模数。</li><li>Base64URL 格式的 RSA 公钥指数。</li></ol><p>有了这些，你现在可以用以下属性填充你的 Ktor 项目的 <a href="https://auth0.com/docs/secure/tokens/json-web-tokens/json-web-key-sets" target="_blank" rel="noreferrer">jwks.json</a> 文件：</p><ul><li>将 <code>e</code> 和 <code>n</code> 的值设置为你在前面步骤中生成的 Base64URL 编码值。</li><li>一个密钥 ID（在本例中，<code>kid</code> 从示例项目中派生）。</li><li>将 <code>kty</code> 属性设置为 <code>RSA</code>。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;keys&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;kty&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RSA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;e&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AQAB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;kid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;6f8856ed-9189-488f-9011-0ff4b6c08edc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tfJaLrzXILUg1U3N1KV8yJr92GHn5OtYZR7qWk1Mc4cy4JGjklYup7weMjBD9f3bBVoIsiUVX6xNcYIr0Ie0AQ&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>唯一剩余的步骤是指定你的私钥，以便你的 Ktor 项目可以将其用于认证。</p><h2 id="定义私钥" tabindex="-1">定义私钥 <a class="header-anchor" href="#定义私钥" aria-label="Permalink to &quot;定义私钥&quot;">​</a></h2><p>设置好公钥信息后，最后一步是让你的 Ktor 项目能够访问你的私钥。</p><p>假设你已将私钥（你在开头生成的 <code>.pk8</code> 文件中的私钥）提取到系统上的环境变量中，在本例中称为 <code>jwt_pk</code>，那么你的 <code>resources/application.conf</code> 文件的 jwt 部分应类似于：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>jwt {</span></span>
<span class="line"><span>  privateKey = \${jwt_pk}</span></span>
<span class="line"><span>  issuer = &quot;http://0.0.0.0:8080/&quot;</span></span>
<span class="line"><span>  audience = &quot;http://0.0.0.0:8080/login&quot;</span></span>
<span class="line"><span>  realm = &quot;MyProject&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,15)),e(o,null,{default:t(()=>s[5]||(s[5]=[i("p",null,[a(" 你的私钥被视为敏感信息，不应直接存储在代码中。考虑使用环境变量或 "),i("a",{href:"https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"},"秘密存储"),a(" 来存放敏感数据。 ")],-1)])),_:1})])}const f=r(g,[["render",F]]);export{B as __pageData,f as default};
