import{_ as p,a as r}from"./chunks/compose-resources-qualifiers.Cw94GyEp.js";import{_ as h,C as i,c as o,o as k,j as a,G as e,ag as l,a as d}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"多平台資源的設定與配置","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/compose-multiplatform-resources-setup.md","filePath":"zh-Hant/kmp/compose-multiplatform-resources-setup.md","lastUpdated":1755516278000}'),c={name:"zh-Hant/kmp/compose-multiplatform-resources-setup.md"};function E(u,s,g,m,y,F){const n=i("show-structure"),t=i("secondary-label");return k(),o("div",null,[s[0]||(s[0]=a("h1",{id:"多平台資源的設定與配置",tabindex:"-1"},[d("多平台資源的設定與配置 "),a("a",{class:"header-anchor",href:"#多平台資源的設定與配置","aria-label":'Permalink to "多平台資源的設定與配置"'},"​")],-1)),e(n,{depth:"3"}),s[1]||(s[1]=l(`<p>若要正確配置專案以使用多平台資源：</p><ol><li>新增函式庫依賴。</li><li>為每種資源建立必要的目錄。</li><li>為限定資源建立額外目錄（例如，用於深色 UI 主題的不同影像或本地化字串）。</li></ol><h2 id="建置腳本與目錄設定" tabindex="-1">建置腳本與目錄設定 <a class="header-anchor" href="#建置腳本與目錄設定" aria-label="Permalink to &quot;建置腳本與目錄設定&quot;">​</a></h2><p>若要在多平台專案中存取資源，請新增函式庫依賴並在專案目錄中組織檔案：</p><ol><li><p>在 <code>composeApp</code> 目錄下的 <code>build.gradle.kts</code> 檔案中，為 <code>commonMain</code> 原始碼集新增依賴：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compose.components.resources)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>若要直接引用此函式庫，請使用 <a href="https://central.sonatype.com/artifact/org.jetbrains.compose.components/components-resources" target="_blank" rel="noreferrer">Maven Central 上的構件頁面</a>中的完整限定名稱。</p></div></li><li><p>在您想要新增資源的原始碼集目錄中（此範例中為 <code>commonMain</code>）建立一個新目錄 <code>composeResources</code>：</p><p><img src="`+p+`" alt="Compose resources project structure" width="250"></p></li><li><p>根據這些規則組織 <code>composeResources</code> 目錄結構：</p><ul><li>影像應放在 <code>drawable</code> 目錄中。Compose Multiplatform 支援點陣圖影像（JPEG、PNG、位元圖和 WebP）以及向量 Android XML 影像（不包含對 Android 資源的引用）。</li><li>字型應放在 <code>font</code> 目錄中。</li><li>字串應放在 <code>values</code> 目錄中。</li><li>其他檔案應放在 <code>files</code> 目錄中，可包含任何您認為合適的資料夾層級結構。</li></ul></li></ol><h3 id="自訂資源目錄" tabindex="-1">自訂資源目錄 <a class="header-anchor" href="#自訂資源目錄" aria-label="Permalink to &quot;自訂資源目錄&quot;">​</a></h3><p>在 <code>build.gradle.kts</code> 檔案的 <code>compose.resources {}</code> 區塊中，您可以為每個原始碼集指定自訂資源目錄。每個這些自訂目錄也應以與預設 <code>composeResources</code> 相同的方式包含檔案：為影像包含一個 <code>drawable</code> 子目錄，為字型包含一個 <code>font</code> 子目錄，以此類推。</p><p>一個簡單的範例是指向一個特定資料夾：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    customDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceSetName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;desktopMain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        directoryProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { layout.projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;desktopResources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您也可以設定一個由 Gradle 任務填充的資料夾，例如，包含已下載的檔案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DownloadRemoteFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefaultTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OutputDirectory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> layout.buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;downloadedRemoteFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @TaskAction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* your code for downloading files */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    customDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceSetName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;iosMain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        directoryProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DownloadRemoteFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;downloadedRemoteFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.outputDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="androidlibrary-目標中的資源" tabindex="-1"><code>androidLibrary</code> 目標中的資源 <a class="header-anchor" href="#androidlibrary-目標中的資源" aria-label="Permalink to &quot;\`androidLibrary\` 目標中的資源&quot;">​</a></h3>`,12)),e(t,{ref:"Experimental"},null,512),s[2]||(s[2]=l(`<p>從 Android Gradle plugin 8.8.0 版開始，您可以在 <code>androidLibrary</code> 目標中使用生成的 <code>Res</code> 類別和資源存取器。 若要啟用 <code>androidLibrary</code> 中多平台資源的支援，請依照以下方式更新您的配置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin {</span></span>
<span class="line"><span>  androidLibrary {</span></span>
<span class="line"><span>    androidResources.enable = true</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="限定詞" tabindex="-1">限定詞 <a class="header-anchor" href="#限定詞" aria-label="Permalink to &quot;限定詞&quot;">​</a></h2><p>有時，相同的資源應根據環境（例如語系、螢幕密度或介面主題）以不同方式呈現。例如，您可能需要為不同語言本地化文字或為深色主題調整影像。為此，函式庫提供了特殊的限定詞。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>了解如何在 <a href="./compose-resource-environment">管理本地資源環境</a> 教學中處理資源相關設定。</p></div><p>除了 <code>files</code> 目錄中的原始檔案外，所有資源類型都支援限定詞。使用連字號將限定詞新增到目錄名稱：</p><p><img src="`+r+'" alt="Qualifiers in multiplatform resources" width="250"></p><p>函式庫支援（按優先級順序）以下限定詞：<a href="#language-and-regional-qualifiers">語言</a>、<a href="#theme-qualifier">主題</a>和<a href="#density-qualifier">密度</a>。</p><ul><li>不同類型的限定詞可以一起應用。例如，「drawable-en-rUS-mdpi-dark」是適用於美國地區英語、在深色主題下用於 160 DPI 螢幕的影像。</li><li>如果無法存取具有所請求限定詞的資源，則會改用預設資源（不帶限定詞的資源）。</li></ul><h3 id="語言和地區限定詞" tabindex="-1">語言和地區限定詞 <a class="header-anchor" href="#語言和地區限定詞" aria-label="Permalink to &quot;語言和地區限定詞&quot;">​</a></h3><p>您可以組合語言和地區限定詞：</p><ul><li>語言由兩字母（ISO 639-1）或三字母（ISO 639-2）<a href="https://www.loc.gov/standards/iso639-2/php/code_list.php" target="_blank" rel="noreferrer">語言代碼</a>定義。</li><li>您可以將兩字母 <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2" target="_blank" rel="noreferrer">ISO 3166-1-alpha-2</a> 地區代碼新增到您的語言代碼中。地區代碼必須具有小寫 <code>r</code> 前綴，例如：<code>drawable-spa-rMX</code></li></ul><p>語言和地區代碼區分大小寫。</p><h3 id="主題限定詞" tabindex="-1">主題限定詞 <a class="header-anchor" href="#主題限定詞" aria-label="Permalink to &quot;主題限定詞&quot;">​</a></h3><p>您可以新增「light」或「dark」限定詞。Compose Multiplatform 會根據目前的系統主題選擇必要的資源。</p><h3 id="密度限定詞" tabindex="-1">密度限定詞 <a class="header-anchor" href="#密度限定詞" aria-label="Permalink to &quot;密度限定詞&quot;">​</a></h3><p>您可以使用以下密度限定詞：</p><ul><li>「ldpi」– 120 DPI，0.75x 密度</li><li>「mdpi」– 160 DPI，1x 密度</li><li>「hdpi」– 240 DPI，1.5x 密度</li><li>「xhdpi」– 320 DPI，2x 密度</li><li>「xxhdpi」– 480 DPI，3x 密度</li><li>「xxxhdpi」– 640dpi，4x 密度</li></ul><p>資源是根據系統中定義的螢幕密度選擇的。</p><h2 id="發布" tabindex="-1">發布 <a class="header-anchor" href="#發布" aria-label="Permalink to &quot;發布&quot;">​</a></h2><p>從 Compose Multiplatform 1.6.10 版開始，所有必要的資源都包含在發布 Maven 構件中。</p><p>若要啟用此功能，您的專案需要使用 Kotlin 2.0.0 或更新版本以及 Gradle 7.6 或更新版本。</p><h2 id="後續步驟" tabindex="-1">後續步驟？ <a class="header-anchor" href="#後續步驟" aria-label="Permalink to &quot;後續步驟？&quot;">​</a></h2><ul><li>了解如何在<a href="./compose-multiplatform-resources-usage">在您的應用程式中使用多平台資源</a>頁面上存取您設定的資源以及如何自訂預設生成的存取器。</li><li>查看官方的 <a href="https://github.com/JetBrains/compose-multiplatform/tree/master/components/resources/demo" target="_blank" rel="noreferrer">示範專案</a>，該專案展示了如何在針對 iOS、Android 和桌上型電腦的 Compose Multiplatform 專案中處理資源。</li></ul>',24))])}const C=h(c,[["render",E]]);export{_ as __pageData,C as default};
