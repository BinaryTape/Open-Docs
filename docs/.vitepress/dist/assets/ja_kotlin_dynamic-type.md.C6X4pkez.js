import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"ダイナミック型","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/dynamic-type.md","filePath":"ja/kotlin/dynamic-type.md","lastUpdated":1754307826000}'),d={name:"ja/kotlin/dynamic-type.md"};function n(l,i,o,p,c,h){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="ダイナミック型" tabindex="-1">ダイナミック型 <a class="header-anchor" href="#ダイナミック型" aria-label="Permalink to &quot;ダイナミック型&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JVMをターゲットとするコードでは、ダイナミック型はサポートされていません。</p></div><p>Kotlinは静的型付け言語ですが、JavaScriptエコシステムのような、型付けされていない、または緩く型付けされた環境との相互運用が必要になることがあります。これらのユースケースを容易にするため、<code>dynamic</code>型が言語に用意されています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dyn: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dynamic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span></code></pre></div><p><code>dynamic</code>型は基本的にKotlinの型チェッカーを無効にします。</p><ul><li><code>dynamic</code>型の値は、任意の変数に代入したり、どこへでもパラメータとして渡したりできます。</li><li>任意の値は、<code>dynamic</code>型の変数に代入したり、<code>dynamic</code>をパラメータとして取る関数に渡したりできます。</li><li><code>dynamic</code>型の値に対する<code>null</code>チェックは無効になります。</li></ul><p><code>dynamic</code>の最も特異な機能は、<strong>任意の</strong>プロパティや関数を任意のパラメータで<code>dynamic</code>変数に対して呼び出すことができる点です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dyn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">whatever</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dyn) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;whatever&#39; is not defined anywhere</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dyn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">whatever</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>JavaScriptプラットフォームでは、このコードは「そのまま」コンパイルされます。Kotlinの<code>dyn.whatever(1)</code>は、生成されたJavaScriptコードでは<code>dyn.whatever(1)</code>になります。</p><p><code>dynamic</code>型の値に対してKotlinで書かれた関数を呼び出す際には、KotlinからJavaScriptへのコンパイラによって実行される名前マングリングに留意してください。呼び出す必要がある関数に明確に定義された名前を割り当てるために、<a href="/ja/kotlin/js-to-kotlin-interop#jsname-annotation">@JsNameアノテーション</a>を使用する必要があるかもしれません。</p><p>ダイナミックな呼び出しは常に結果として<code>dynamic</code>を返すため、このような呼び出しを自由に連鎖させることができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dyn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().bar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>ラムダをダイナミックな呼び出しに渡すと、そのすべてのパラメータはデフォルトで<code>dynamic</code>型になります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dyn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x is dynamic</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>dynamic</code>型の値を使用する式はJavaScriptに「そのまま」変換され、Kotlinの演算子規則を使用しません。以下の演算子がサポートされています。</p><ul><li>二項: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code>, <code>===</code>, <code>!==</code>, <code>&amp;&amp;</code>, <code>||</code></li><li>単項 <ul><li>前置: <code>-</code>, <code>+</code>, <code>!</code></li><li>前置および後置: <code>++</code>, <code>--</code></li></ul></li><li>代入: <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code></li><li>インデックスアクセス: <ul><li>読み取り: <code>d[a]</code>、複数の引数はエラー</li><li>書き込み: <code>d[a1] = a2</code>、<code>[]</code>内に複数の引数があるとエラー</li></ul></li></ul><p><code>dynamic</code>型の値に対する<code>in</code>、<code>!in</code>、および<code>..</code>演算は禁止されています。</p><p>より技術的な説明については、<a href="https://github.com/JetBrains/kotlin/blob/master/spec-docs/dynamic-types.md" target="_blank" rel="noreferrer">仕様ドキュメント</a>を参照してください。</p>`,18)]))}const E=s(d,[["render",n]]);export{r as __pageData,E as default};
