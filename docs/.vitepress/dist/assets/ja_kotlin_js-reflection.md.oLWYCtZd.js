import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Kotlin/JSのリフレクション","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/js-reflection.md","filePath":"ja/kotlin/js-reflection.md","lastUpdated":1754307826000}'),n={name:"ja/kotlin/js-reflection.md"};function e(h,s,k,p,r,o){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="kotlin-jsのリフレクション" tabindex="-1">Kotlin/JSのリフレクション <a class="header-anchor" href="#kotlin-jsのリフレクション" aria-label="Permalink to &quot;Kotlin/JSのリフレクション&quot;">​</a></h1><p>Kotlin/JSは、Kotlinの<a href="/ja/kotlin/reflection">リフレクションAPI</a>に対する限定的なサポートを提供します。このAPIでサポートされているのは、以下の部分のみです。</p><ul><li><a href="/ja/kotlin/reflection#class-references">クラス参照</a> (<code>::class</code>)</li><li><code>KType</code>と<code>typeof()</code></li><li><code>KClass</code>と<code>createInstance()</code></li></ul><h2 id="クラス参照" tabindex="-1">クラス参照 <a class="header-anchor" href="#クラス参照" aria-label="Permalink to &quot;クラス参照&quot;">​</a></h2><p><code>::class</code>構文は、インスタンスのクラス、または指定された型に対応するクラスへの参照を返します。 Kotlin/JSでは、<code>::class</code>式の値は、以下の機能のみをサポートする簡略化された<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/" target="_blank" rel="noreferrer">KClass</a>実装です。</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/simple-name.html" target="_blank" rel="noreferrer">simpleName</a>および<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/is-instance.html" target="_blank" rel="noreferrer">isInstance()</a>メンバー。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/cast.html" target="_blank" rel="noreferrer">cast()</a>および<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/safe-cast.html" target="_blank" rel="noreferrer">safeCast()</a>拡張関数。</li></ul><p>それに加えて、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/js.html" target="_blank" rel="noreferrer">KClass.js</a>を使用して、クラスに対応する<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-class/index.html" target="_blank" rel="noreferrer">JsClass</a>インスタンスにアクセスできます。 <code>JsClass</code>インスタンス自体は、コンストラクター関数への参照です。 これは、コンストラクターへの参照を期待するJavaScript関数と連携するために使用できます。</p><h2 id="ktypeとtypeof" tabindex="-1"><code>KType</code>と<code>typeof()</code> <a class="header-anchor" href="#ktypeとtypeof" aria-label="Permalink to &quot;\`KType\`と\`typeof()\`&quot;">​</a></h2><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/type-of.html" target="_blank" rel="noreferrer"><code>typeof()</code></a>関数は、指定された型に対する<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-type/" target="_blank" rel="noreferrer"><code>KType</code></a>のインスタンスを構築します。 <code>KType</code> APIは、Java固有の部分を除いて、Kotlin/JSで完全にサポートされています。</p><h2 id="kclassとcreateinstance" tabindex="-1"><code>KClass</code>と<code>createInstance()</code> <a class="header-anchor" href="#kclassとcreateinstance" aria-label="Permalink to &quot;\`KClass\`と\`createInstance()\`&quot;">​</a></h2><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/" target="_blank" rel="noreferrer">KClass</a>インターフェースの<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/create-instance.html" target="_blank" rel="noreferrer"><code>createInstance()</code></a>関数は、指定されたクラスの新しいインスタンスを作成します。これは、Kotlinクラスへの実行時参照を取得するのに役立ちます。</p><h2 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h2><p>以下は、Kotlin/JSでのリフレクションの使用例です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shape</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accessReifiedTypeArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.simpleName) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints &quot;Rectangle&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Shape::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.simpleName) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints &quot;Shape&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Shape::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.js.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints &quot;Shape&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Shape::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints &quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Rectangle::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints &quot;false&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rShape </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Shape::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Casts a Rectangle &quot;r&quot; to Shape</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    accessReifiedTypeArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Accesses the type via typeOf(). Prints &quot;Rectangle&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,14)]))}const g=i(n,[["render",e]]);export{c as __pageData,g as default};
