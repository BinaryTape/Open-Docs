import{_ as u,C as t,c as y,o as C,G as a,ag as o,j as i,w as e,a as n}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-caching-headers.md","filePath":"ja/ktor/server-caching-headers.md","lastUpdated":1755457140000}'),F={name:"ja/ktor/server-caching-headers.md"};function m(v,s,f,b,A,_){const k=t("TopicTitle"),d=t("show-structure"),g=t("primary-label"),h=t("Links"),c=t("tldr"),l=t("code-block"),r=t("TabItem"),p=t("Tabs"),E=t("list");return C(),y("div",null,[a(k,{labelRef:"server-plugin",title:"キャッシュヘッダー"}),a(d,{for:"chapter",depth:"2"}),a(g,{ref:"server-plugin"},null,512),a(c,null,{default:e(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必須の依存関係"),n(": "),i("code",null,"io.ktor:ktor-server-caching-headers")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"コード例"),n(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/caching-headers"}," caching-headers ")],-1)),i("p",null,[i("b",null,[a(h,{href:"/ktor/server-native",summary:"Ktor supports Kotlin/Native and allows you to run a server without an additional runtime or virtual machine."},{default:e(()=>s[0]||(s[0]=[n("ネイティブサーバー")])),_:1}),s[1]||(s[1]=n("のサポート"))]),s[2]||(s[2]=n(": ✅ "))])]),_:1}),s[17]||(s[17]=o('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-caching-headers/io.ktor.server.plugins.cachingheaders/-caching-headers.html" target="_blank" rel="noreferrer">CachingHeaders</a> プラグインは、HTTP キャッシュに使用される <code>Cache-Control</code> ヘッダーと <code>Expires</code> ヘッダーを設定する機能を追加します。キャッシュは以下の方法で<a href="#configure">設定</a>できます。</p><ul><li>画像、CSS、JavaScript ファイルなど、特定のコンテンツタイプに対して異なるキャッシュ戦略を設定する。</li><li>キャッシュオプションをさまざまなレベルで指定する：アプリケーションレベルでグローバルに、ルートレベルで、または特定の呼び出しに対して。</li></ul><h2 id="add_dependencies" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係の追加 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>CachingHeaders</code> を使用するには、ビルドスクリプトに <code>ktor-server-caching-headers</code> アーティファクトを含める必要があります。 </p>',4)),a(p,{group:"languages"},{default:e(()=>[a(r,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[a(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-caching-headers:$ktor_version")'})]),_:1}),a(r,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[a(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-caching-headers:$ktor_version"'})]),_:1}),a(r,{title:"Maven","group-key":"maven"},{default:e(()=>[a(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-caching-headers-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[18]||(s[18]=i("h2",{id:"install_plugin",tabindex:"-1"},[n("CachingHeaders のインストール "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "CachingHeaders のインストール {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[6]||(s[6]=n(" アプリケーションに ")),s[7]||(s[7]=i("code",null,"CachingHeaders",-1)),s[8]||(s[8]=n(" プラグインを")),s[9]||(s[9]=i("a",{href:"#install"},"インストール",-1)),s[10]||(s[10]=n("するには、指定された")),a(h,{href:"/ktor/server-modules",summary:"Modules allow you to structure your application by grouping routes."},{default:e(()=>s[5]||(s[5]=[n("モジュール")])),_:1}),s[11]||(s[11]=n("内の ")),s[12]||(s[12]=i("code",null,"install",-1)),s[13]||(s[13]=n(" 関数に渡します。 以下のコードスニペットは、")),s[14]||(s[14]=i("code",null,"CachingHeaders",-1)),s[15]||(s[15]=n(" をインストールする方法を示しています... "))]),a(E,null,{default:e(()=>s[16]||(s[16]=[i("li",null,[n(" ... "),i("code",null,"embeddedServer"),n(" 関数呼び出し内。 ")],-1),i("li",null,[n(" ... "),i("code",null,"Application"),n(" クラスの拡張関数である、明示的に定義された "),i("code",null,"module"),n(" 内。 ")],-1)])),_:1}),a(p,null,{default:e(()=>[a(r,{title:"embeddedServer"},{default:e(()=>[a(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.cachingheaders.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(CachingHeaders)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),a(r,{title:"module"},{default:e(()=>[a(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.cachingheaders.*
            // ...
            fun Application.module() {
                install(CachingHeaders)
                // ...
            }`})]),_:1})]),_:1}),s[19]||(s[19]=o(`<p><code>CachingHeaders</code> プラグインは、<a href="#install-route">特定のルートにもインストール</a>できます。 これは、異なるアプリケーションリソースに対して異なる <code>CachingHeaders</code> 設定が必要な場合に役立つ可能性があります。 </p><p><code>CachingHeaders</code> をインストールしたら、さまざまなコンテンツタイプに対してキャッシュ設定を<a href="#configure">構成</a>できます。</p><h2 id="configure" tabindex="-1">キャッシュの構成 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;キャッシュの構成 {id=&quot;configure&quot;}&quot;">​</a></h2><p><code>CachingHeaders</code> プラグインを構成するには、特定の <code>ApplicationCall</code> およびコンテンツタイプに対して指定されたキャッシュオプションを提供するために、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-caching-headers/io.ktor.server.plugins.cachingheaders/-caching-headers-config/options.html" target="_blank" rel="noreferrer">options</a> 関数を定義する必要があります。<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/caching-headers" target="_blank" rel="noreferrer">caching-headers</a> の例のコードスニペットは、プレーンテキストおよび HTML に対して <code>max-age</code> オプションを持つ <code>Cache-Control</code> ヘッダーを追加する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (content.contentType?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withoutParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ContentType.Text.Plain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxAgeSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ContentType.Text.Html </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxAgeSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://api.ktor.io/ktor-http/io.ktor.http.content/-caching-options/index.html" target="_blank" rel="noreferrer">CachingOptions</a> オブジェクトは、<code>Cache-Control</code> および <code>Expires</code> ヘッダーの値をパラメーターとして受け入れます。</p><ul><li><code>cacheControl</code> パラメーターは <a href="https://api.ktor.io/ktor-http/io.ktor.http/-cache-control/index.html" target="_blank" rel="noreferrer">CacheControl</a> 値を受け入れます。<code>CacheControl.MaxAge</code> を使用して <code>max-age</code> パラメーターと、可視性、再検証オプションなどの関連設定を指定できます。<code>CacheControl.NoCache</code>/<code>CacheControl.NoStore</code> を使用してキャッシュを無効にすることができます。</li><li><code>expires</code> パラメーターを使用すると、<code>Expires</code> ヘッダーを <code>GMTDate</code> または <code>ZonedDateTime</code> 値として指定できます。</li></ul><h3 id="configure-route" tabindex="-1">ルートレベル <a class="header-anchor" href="#configure-route" aria-label="Permalink to &quot;ルートレベル {id=&quot;configure-route&quot;}&quot;">​</a></h3><p>プラグインは、グローバルだけでなく、<a href="./server-plugins#install-route">特定のルート</a>にもインストールできます。たとえば、以下の例は、<code>/index</code> ルートに指定されたキャッシュヘッダーを追加する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxAgeSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Index page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="configure-call" tabindex="-1">呼び出しレベル <a class="header-anchor" href="#configure-call" aria-label="Permalink to &quot;呼び出しレベル {id=&quot;configure-call&quot;}&quot;">​</a></h3><p>よりきめ細やかなキャッシュ設定が必要な場合は、<code>ApplicationCall.caching</code> プロパティを使用して呼び出しレベルでキャッシュオプションを構成できます。以下の例は、ユーザーがログインしているかどうかに応じてキャッシュオプションを構成する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userLoggedIn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userLoggedIn) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.caching </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NoStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.Visibility.Private))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Profile page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.caching </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxAgeSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 900</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Login page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>ユーザーのログインには、<a href="./server-auth">Authentication</a> および <a href="./server-sessions">Sessions</a> プラグインを使用できます。</p></blockquote>`,14))])}const T=u(F,[["render",m]]);export{B as __pageData,T as default};
