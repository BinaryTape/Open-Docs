import{_ as d,c as e,o,ag as r}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Kotlin/Native 대상 지원","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/native-target-support.md","filePath":"ko/kotlin/native-target-support.md","lastUpdated":1754307826000}'),a={name:"ko/kotlin/native-target-support.md"};function l(i,t,c,n,p,s){return o(),e("div",null,t[0]||(t[0]=[r('<h1 id="kotlin-native-대상-지원" tabindex="-1">Kotlin/Native 대상 지원 <a class="header-anchor" href="#kotlin-native-대상-지원" aria-label="Permalink to &quot;Kotlin/Native 대상 지원&quot;">​</a></h1><p>Kotlin/Native 컴파일러는 다양한 대상을 지원하지만, 모든 대상에 동일한 수준의 지원을 제공하기는 어렵습니다. 이 문서에서는 Kotlin/Native가 지원하는 대상을 설명하고, 컴파일러의 지원 수준에 따라 여러 계층으로 분류합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>진행하면서 계층의 수, 지원 대상 목록, 그리고 해당 기능을 조정할 수 있습니다.</p></div><p>계층 테이블에 사용된 다음 용어에 유의하십시오:</p><ul><li><p><strong>Gradle 대상 이름</strong>은 Kotlin Multiplatform Gradle 플러그인에서 대상을 활성화하는 데 사용되는 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#targets" target="_blank" rel="noreferrer">대상 이름</a>입니다.</p></li><li><p><strong>Target triple</strong>은 <a href="https://clang.llvm.org/docs/CrossCompilation.html#target-triple" target="_blank" rel="noreferrer">컴파일러</a>에서 일반적으로 사용되는 <code>&lt;architecture&gt;-&lt;vendor&gt;-&lt;system&gt;-&lt;abi&gt;</code> 구조에 따른 대상 이름입니다.</p></li><li><p><strong>테스트 실행</strong>은 Gradle 및 IDE에서 테스트를 즉시 실행할 수 있는 지원을 의미합니다.</p><p>이는 특정 대상의 네이티브 호스트에서만 사용할 수 있습니다. 예를 들어, <code>macosX64</code> 및 <code>iosX64</code> 테스트는 macOS x86-64 호스트에서만 실행할 수 있습니다.</p></li></ul><h2 id="계층-1" tabindex="-1">계층 1 <a class="header-anchor" href="#계층-1" aria-label="Permalink to &quot;계층 1&quot;">​</a></h2><ul><li>CI에서 컴파일 및 실행 가능 여부가 정기적으로 테스트되는 대상입니다.</li><li>컴파일러 릴리스 간의 소스 및 <a href="https://youtrack.jetbrains.com/issue/KT-42293" target="_blank" rel="noreferrer">바이너리 호환성</a>을 제공합니다.</li></ul><table tabindex="0"><thead><tr><th>Gradle 대상 이름</th><th>Target triple</th><th>테스트 실행</th><th>설명</th></tr></thead><tbody><tr><td>Apple macOS 호스트 전용:</td><td></td><td></td><td></td></tr><tr><td><code>macosX64</code></td><td><code>x86_64-apple-macos</code></td><td>✅</td><td>x86_64 플랫폼의 Apple macOS</td></tr><tr><td><code>macosArm64</code></td><td><code>aarch64-apple-macos</code></td><td>✅</td><td>Apple Silicon 플랫폼의 Apple macOS</td></tr><tr><td><code>iosSimulatorArm64</code></td><td><code>aarch64-apple-ios-simulator</code></td><td>✅</td><td>Apple Silicon 플랫폼의 Apple iOS 시뮬레이터</td></tr><tr><td><code>iosX64</code></td><td><code>x86_64-apple-ios-simulator</code></td><td>✅</td><td>x86-64 플랫폼의 Apple iOS 시뮬레이터</td></tr><tr><td><code>iosArm64</code></td><td><code>aarch64-apple-ios</code></td><td></td><td>ARM64 플랫폼의 Apple iOS 및 iPadOS</td></tr></tbody></table><h2 id="계층-2" tabindex="-1">계층 2 <a class="header-anchor" href="#계층-2" aria-label="Permalink to &quot;계층 2&quot;">​</a></h2><ul><li>CI에서 컴파일 가능 여부는 정기적으로 테스트되지만, 실행 가능 여부는 자동으로 테스트되지 않을 수 있는 대상입니다.</li><li>컴파일러 릴리스 간의 소스 및 <a href="https://youtrack.jetbrains.com/issue/KT-42293" target="_blank" rel="noreferrer">바이너리 호환성</a>을 제공하기 위해 최선을 다하고 있습니다.</li></ul><table tabindex="0"><thead><tr><th>Gradle 대상 이름</th><th>Target triple</th><th>테스트 실행</th><th>설명</th></tr></thead><tbody><tr><td><code>linuxX64</code></td><td><code>x86_64-unknown-linux-gnu</code></td><td>✅</td><td>x86_64 플랫폼의 Linux</td></tr><tr><td><code>linuxArm64</code></td><td><code>aarch64-unknown-linux-gnu</code></td><td></td><td>ARM64 플랫폼의 Linux</td></tr><tr><td>Apple macOS 호스트 전용:</td><td></td><td></td><td></td></tr><tr><td><code>watchosSimulatorArm64</code></td><td><code>aarch64-apple-watchos-simulator</code></td><td>✅</td><td>Apple Silicon 플랫폼의 Apple watchOS 시뮬레이터</td></tr><tr><td><code>watchosX64</code></td><td><code>x86_64-apple-watchos-simulator</code></td><td>✅</td><td>x86_64 플랫폼의 Apple watchOS 64비트 시뮬레이터</td></tr><tr><td><code>watchosArm32</code></td><td><code>armv7k-apple-watchos</code></td><td></td><td>ARM32 플랫폼의 Apple watchOS</td></tr><tr><td><code>watchosArm64</code></td><td><code>arm64_32-apple-watchos</code></td><td></td><td>ILP32를 사용하는 ARM64 플랫폼의 Apple watchOS</td></tr><tr><td><code>tvosSimulatorArm64</code></td><td><code>aarch64-apple-tvos-simulator</code></td><td>✅</td><td>Apple Silicon 플랫폼의 Apple tvOS 시뮬레이터</td></tr><tr><td><code>tvosX64</code></td><td><code>x86_64-apple-tvos-simulator</code></td><td>✅</td><td>x86_64 플랫폼의 Apple tvOS 시뮬레이터</td></tr><tr><td><code>tvosArm64</code></td><td><code>aarch64-apple-tvos</code></td><td></td><td>ARM64 플랫폼의 Apple tvOS</td></tr></tbody></table><h2 id="계층-3" tabindex="-1">계층 3 <a class="header-anchor" href="#계층-3" aria-label="Permalink to &quot;계층 3&quot;">​</a></h2><ul><li>CI에서 테스트가 보장되지 않는 대상입니다.</li><li>컴파일러 릴리스 간의 소스 및 바이너리 호환성을 보장할 수는 없지만, 이러한 대상에 대한 변경 사항은 매우 드뭅니다.</li></ul><table tabindex="0"><thead><tr><th>Gradle 대상 이름</th><th>Target triple</th><th>테스트 실행</th><th>설명</th></tr></thead><tbody><tr><td><code>androidNativeArm32</code></td><td><code>arm-unknown-linux-androideabi</code></td><td></td><td>ARM32 플랫폼의 <a href="https://developer.android.com/ndk" target="_blank" rel="noreferrer">Android NDK</a></td></tr><tr><td><code>androidNativeArm64</code></td><td><code>aarch64-unknown-linux-android</code></td><td></td><td>ARM64 플랫폼의 <a href="https://developer.android.com/ndk" target="_blank" rel="noreferrer">Android NDK</a></td></tr><tr><td><code>androidNativeX86</code></td><td><code>i686-unknown-linux-android</code></td><td></td><td>x86 플랫폼의 <a href="https://developer.android.com/ndk" target="_blank" rel="noreferrer">Android NDK</a></td></tr><tr><td><code>androidNativeX64</code></td><td><code>x86_64-unknown-linux-android</code></td><td></td><td>x86_64 플랫폼의 <a href="https://developer.android.com/ndk" target="_blank" rel="noreferrer">Android NDK</a></td></tr><tr><td><code>mingwX64</code></td><td><code>x86_64-pc-windows-gnu</code></td><td>✅</td><td><a href="https://www.mingw-w64.org" target="_blank" rel="noreferrer">MinGW</a> 호환성 레이어를 사용하는 64비트 Windows 10 이상</td></tr><tr><td>Apple macOS 호스트 전용:</td><td></td><td></td><td></td></tr><tr><td><code>watchosDeviceArm64</code></td><td><code>aarch64-apple-watchos</code></td><td></td><td>ARM64 플랫폼의 Apple watchOS</td></tr></tbody></table><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>linuxArm32Hfp</code> 대상은 더 이상 사용되지 않으며 향후 릴리스에서 제거될 예정입니다.</p></div><h2 id="라이브러리-개발자를-위한-정보" tabindex="-1">라이브러리 개발자를 위한 정보 <a class="header-anchor" href="#라이브러리-개발자를-위한-정보" aria-label="Permalink to &quot;라이브러리 개발자를 위한 정보&quot;">​</a></h2><p>라이브러리 개발자가 Kotlin/Native 컴파일러보다 더 많은 대상을 테스트하거나 더 엄격한 보증을 제공하는 것은 권장하지 않습니다. 네이티브 대상 지원을 고려할 때 다음 접근 방식을 사용할 수 있습니다:</p><ul><li>계층 1, 2, 3의 모든 대상을 지원합니다.</li><li>즉시 테스트 실행을 지원하는 계층 1 및 2의 대상을 정기적으로 테스트합니다.</li></ul><p>Kotlin 팀은 예를 들어 <a href="/ko/kotlin/coroutines-guide">kotlinx.coroutines</a> 및 <a href="/ko/kotlin/serialization">kotlinx.serialization</a>과 같은 공식 Kotlin 라이브러리에서 이 접근 방식을 사용합니다.</p>',19)]))}const u=d(a,[["render",l]]);export{m as __pageData,u as default};
