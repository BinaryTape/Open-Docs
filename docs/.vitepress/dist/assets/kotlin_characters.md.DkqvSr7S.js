import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"字符","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/characters.md","filePath":"kotlin/characters.md","lastUpdated":1754307826000}'),e={name:"kotlin/characters.md"};function l(p,s,h,k,d,c){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="字符" tabindex="-1">字符 <a class="header-anchor" href="#字符" aria-label="Permalink to &quot;字符&quot;">​</a></h1><p>字符由类型 <code>Char</code> 表示。 字符字面值使用单引号：<code>&#39;1&#39;</code>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在 JVM 上，以原生类型 <code>char</code> 存储的字符表示一个 16 位 Unicode 字符。</p></div><p>特殊字符以转义反斜杠 <code>\\</code> 开头。 支持以下转义序列：</p><ul><li><code>\\t</code> – 制表符</li><li><code>\\b</code> – 退格符</li><li><code></code> – 换行符 (LF)</li><li><code>\\r</code> – 回车符 (CR)</li><li><code>\\&#39;</code> – 单引号</li><li><code>\\&quot;</code> – 双引号</li><li><code>\\\\</code> – 反斜杠</li><li><code>\\#</code> – 美元符号</li></ul><p>要编码任何其他字符，请使用 Unicode 转义序列语法：<code>&#39;\\uFF00&#39;</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aChar: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aChar)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印一个额外的换行符</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">FF00&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果字符变量的值是数字，你可以使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/digit-to-int.html" target="_blank" rel="noreferrer"><code>digitToInt()</code></a> 函数将其显式转换为 <code>Int</code> 数值。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在 JVM 上，当需要可空引用时，字符会被装箱成 Java 类，就像处理<a href="/kotlin/numbers#boxing-and-caching-numbers-on-the-java-virtual-machine">数值</a>一样。 其同一性不会被装箱操作保留。</p></div>`,9)]))}const E=i(e,[["render",l]]);export{r as __pageData,E as default};
