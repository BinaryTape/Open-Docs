import{_ as v,C as n,c as g,o as E,G as s,ag as d,j as i,w as t,a as l}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-double-receive.md","filePath":"ja/ktor/server-double-receive.md","lastUpdated":1755457140000}'),b={name:"ja/ktor/server-double-receive.md"};function y(m,e,f,F,_,C){const k=n("TopicTitle"),u=n("primary-label"),r=n("Links"),h=n("tldr"),a=n("code-block"),o=n("TabItem"),p=n("Tabs"),c=n("list");return E(),g("div",null,[s(k,{labelRef:"server-plugin",title:"DoubleReceive"}),s(u,{ref:"server-plugin"},null,512),s(h,null,{default:t(()=>[e[3]||(e[3]=i("p",null,[i("b",null,"必要な依存関係"),l(": "),i("code",null,"io.ktor:ktor-server-double-receive")],-1)),e[4]||(e[4]=i("p",null,[i("b",null,"コード例"),l(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/double-receive"}," double-receive ")],-1)),i("p",null,[i("b",null,[s(r,{href:"/ktor/server-native",summary:"KtorはKotlin/Nativeをサポートしており、追加のランタイムや仮想マシンなしでサーバーを実行できます。"},{default:t(()=>e[0]||(e[0]=[l("ネイティブサーバー")])),_:1}),e[1]||(e[1]=l("サポート"))]),e[2]||(e[2]=l(": ✅ "))])]),_:1}),e[17]||(e[17]=d('<p><code>[DoubleReceive](https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-double-receive/io.ktor.server.plugins.doublereceive/-double-receive.html)</code>プラグインは、<code>RequestAlreadyConsumedException</code>例外なしに<a href="./server-requests#body_contents">リクエストボディを複数回受け取る</a>機能を提供します。 これは、<a href="./server-plugins">プラグイン</a>がすでにリクエストボディを消費してしまい、ルートハンドラー内でそれを受け取ることができない場合に役立ちます。 例えば、<code>DoubleReceive</code>を使用して、<a href="./server-call-logging">CallLogging</a>プラグインでリクエストボディをログに記録し、その後<code>post</code> <a href="./server-routing#define_route">ルートハンドラー</a>内で再度ボディを受け取ることができます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>DoubleReceive</code>プラグインは実験的なAPIを使用しており、今後のアップデートで進化し、破壊的な変更が発生する可能性があります。</p></div><h2 id="add_dependencies" tabindex="-1">依存関係を追加する <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係を追加する {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>DoubleReceive</code>を使用するには、<code>ktor-server-double-receive</code>アーティファクトをビルドスクリプトに含める必要があります。 </p>',4)),s(p,{group:"languages"},{default:t(()=>[s(o,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[s(a,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-double-receive:$ktor_version")'})]),_:1}),s(o,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[s(a,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-double-receive:$ktor_version"'})]),_:1}),s(o,{title:"Maven","group-key":"maven"},{default:t(()=>[s(a,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-double-receive-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),e[18]||(e[18]=i("h2",{id:"install_plugin",tabindex:"-1"},[l("DoubleReceiveをインストールする "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "DoubleReceiveをインストールする {id="install_plugin"}"'},"​")],-1)),i("p",null,[e[6]||(e[6]=l(" アプリケーションに")),e[7]||(e[7]=i("code",null,"DoubleReceive",-1)),e[8]||(e[8]=l("プラグインを")),e[9]||(e[9]=i("a",{href:"#install"},"インストール",-1)),e[10]||(e[10]=l("するには、指定された")),s(r,{href:"/ktor/server-modules",summary:"モジュールを使用すると、ルートをグループ化してアプリケーションを構造化できます。"},{default:t(()=>e[5]||(e[5]=[l("モジュール")])),_:1}),e[11]||(e[11]=l("内の")),e[12]||(e[12]=i("code",null,"install",-1)),e[13]||(e[13]=l("関数に渡します。 以下のコードスニペットは、")),e[14]||(e[14]=i("code",null,"DoubleReceive",-1)),e[15]||(e[15]=l("をインストールする方法を示しています... "))]),s(c,null,{default:t(()=>e[16]||(e[16]=[i("li",null,[l(" ... "),i("code",null,"embeddedServer"),l("関数呼び出し内で。 ")],-1),i("li",null,[l(" ... "),i("code",null,"Application"),l("クラスの拡張関数である明示的に定義された"),i("code",null,"module"),l("内で。 ")],-1)])),_:1}),s(p,null,{default:t(()=>[s(o,{title:"embeddedServer"},{default:t(()=>[s(a,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.doublereceive.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(DoubleReceive)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),s(o,{title:"module"},{default:t(()=>[s(a,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.doublereceive.*
            // ...
            fun Application.module() {
                install(DoubleReceive)
                // ...
            }`})]),_:1})]),_:1}),e[19]||(e[19]=d(`<p><code>DoubleReceive</code>プラグインは、<a href="#install-route">特定のルートにもインストール</a>できます。 これは、異なるアプリケーションリソースに対して異なる<code>DoubleReceive</code>設定が必要な場合に役立ちます。 </p><p><code>DoubleReceive</code>をインストールすると、<a href="./server-requests#body_contents">リクエストボディを複数回受け取る</a>ことができ、呼び出しごとに同じインスタンスが返されます。 例えば、<a href="./server-call-logging">CallLogging</a>プラグインを使用してリクエストボディのログを有効にすることができます...</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Level.TRACE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Body: \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">receiveText</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>...そして、ルートハンドラー内でリクエストボディをもう一度取得します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> receivedText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">receiveText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Text &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$receivedText</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; is received&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>完全な例はこちらで見つけることができます: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/double-receive" target="_blank" rel="noreferrer">double-receive</a>。</p><h2 id="configure" tabindex="-1">DoubleReceiveを設定する <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;DoubleReceiveを設定する {id=&quot;configure&quot;}&quot;">​</a></h2><p>デフォルト設定では、<code>DoubleReceive</code>は<a href="./server-requests#body_contents">リクエストボディを</a>以下の型として受け取る機能を提供します。</p><ul><li><code>ByteArray</code></li><li><code>String</code></li><li><code>Parameters</code></li><li><code>ContentNegotiation</code>プラグインで使用される<a href="./server-serialization#create_data_class">データクラス</a></li></ul><p>デフォルトでは、<code>DoubleReceive</code>は以下をサポートしていません。</p><ul><li>同じリクエストから異なる型を受け取ること;</li><li><a href="./server-requests#raw">ストリームまたはチャネル</a>を受け取ること。</li></ul><p>同じリクエストから異なる型を受け取ったり、ストリームまたはチャネルを受け取ったりする必要がない場合は、<code>cacheRawRequest</code>プロパティを<code>false</code>に設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DoubleReceive) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cacheRawRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,13))])}const D=v(b,[["render",y]]);export{T as __pageData,D as default};
