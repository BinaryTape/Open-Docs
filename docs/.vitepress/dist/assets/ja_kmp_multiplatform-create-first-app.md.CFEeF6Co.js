import{_ as o,a as r,d,e as h,b as k,c}from"./chunks/ios-new-configuration.DNF7jnri.js";import{_ as g}from"./chunks/icon-3-todo.aEuKIG4W.js";import{_ as u}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as m}from"./chunks/icon-5-todo.DJgVODZv.js";import{_ as E,a as y,b as F,c as f,d as b,e as A}from"./chunks/first-multiplatform-project-on-ios-1.Baa1gGHA.js";import{_ as v,C as e,c as C,o as _,j as i,G as l,ag as t,a,w as D}from"./chunks/framework.Bksy39di.js";const V=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-create-first-app.md","filePath":"ja/kmp/multiplatform-create-first-app.md","lastUpdated":1755516278000}'),P={name:"ja/kmp/multiplatform-create-first-app.md"};function I(x,s,B,S,K,M){const n=e("secondary-label"),p=e("tldr");return _(),C("div",null,[s[1]||(s[1]=i("h1",{id:"kotlin-multiplatformアプリを作成する",tabindex:"-1"},[a("Kotlin Multiplatformアプリを作成する "),i("a",{class:"header-anchor",href:"#kotlin-multiplatformアプリを作成する","aria-label":'Permalink to "Kotlin Multiplatformアプリを作成する"'},"​")],-1)),l(n,{ref:"IntelliJ IDEA"},null,512),l(n,{ref:"Android Studio"},null,512),l(p,null,{default:D(()=>s[0]||(s[0]=[i("p",null,"このチュートリアルではIntelliJ IDEAを使用しますが、Android Studioでも同様に実行できます。どちらのIDEもコア機能とKotlin Multiplatformのサポートは共通しています。",-1),i("br",null,null,-1),i("p",null,[a("これは、"),i("strong",null,"共有ロジックとネイティブUIを持つKotlin Multiplatformアプリを作成する"),a("チュートリアルの最初のパートです。")],-1),i("p",null,[i("img",{src:o,width:"20",alt:"最初のステップ"}),a(),i("strong",null,"Kotlin Multiplatformアプリを作成する"),i("br"),i("img",{src:r,width:"20",alt:"2番目のステップ"}),a(" ユーザーインターフェースを更新する"),i("br"),i("img",{src:g,width:"20",alt:"3番目のステップ"}),a(" 依存関係を追加する"),i("br"),i("br"),i("img",{src:u,width:"20",alt:"4番目のステップ"}),a(" さらにロジックを共有する"),i("br"),i("img",{src:m,width:"20",alt:"5番目のステップ"}),a(" プロジェクトを完了する"),i("br")],-1)])),_:1}),s[2]||(s[2]=t('<p>ここでは、IntelliJ IDEAを使用して初めてのKotlin Multiplatformアプリケーションを作成し、実行する方法を学びます。</p><p>Kotlin Multiplatformテクノロジーは、クロスプラットフォームプロジェクトの開発を簡素化します。 Kotlin Multiplatformアプリケーションは、iOS、Android、macOS、Windows、Linux、Webなど、さまざまなプラットフォームで動作します。</p><p>Kotlin Multiplatformの主要なユースケースの1つは、モバイルプラットフォーム間でコードを共有することです。 iOSアプリとAndroidアプリ間でアプリケーションロジックを共有し、ネイティブUIを実装したりプラットフォームAPIを操作したりする必要がある場合にのみ、プラットフォーム固有のコードを記述できます。</p><h2 id="プロジェクトを作成する" tabindex="-1">プロジェクトを作成する <a class="header-anchor" href="#プロジェクトを作成する" aria-label="Permalink to &quot;プロジェクトを作成する&quot;">​</a></h2><ol><li><p><a href="./quickstart">クイックスタート</a>で、<a href="./quickstart#set-up-the-environment">Kotlin Multiplatform開発の環境をセットアップする</a>の手順を完了します。</p></li><li><p>IntelliJ IDEAで、<strong>File</strong> | <strong>New</strong> | <strong>Project</strong> を選択します。</p></li><li><p>左側のパネルで、<strong>Kotlin Multiplatform</strong> を選択します。</p></li><li><p><strong>New Project</strong> ウィンドウで、以下のフィールドを指定します。</p><ul><li><strong>Name</strong>: <code>GreetingKMP</code></li><li><strong>Group</strong>: <code>com.jetbrains.greeting</code></li><li><strong>Artifact</strong>: <code>greetingkmp</code></li></ul><p><img src="'+E+'" alt="Compose Multiplatformプロジェクトを作成する" width="800"></p></li><li><p><strong>Android</strong> および <strong>iOS</strong> ターゲットを選択します。</p></li><li><p>iOSの場合、UIをネイティブに保つために、<strong>Do not share UI</strong> オプションを選択します。</p></li><li><p>すべてのフィールドとターゲットを指定したら、<strong>Create</strong> をクリックします。</p></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>IntelliJ IDEAは、プロジェクトのAndroid Gradleプラグインを最新バージョンにアップグレードすることを自動的に提案する場合があります。 Kotlin Multiplatformは最新のAGPバージョンと互換性がないため、アップグレードはお勧めしません （<a href="https://kotlinlang.org/docs/multiplatform-compatibility-guide.html#version-compatibility" target="_blank" rel="noreferrer">互換性テーブル</a>を参照）。</p></div><h2 id="プロジェクト構造を確認する" tabindex="-1">プロジェクト構造を確認する <a class="header-anchor" href="#プロジェクト構造を確認する" aria-label="Permalink to &quot;プロジェクト構造を確認する&quot;">​</a></h2><p>IntelliJ IDEAで、<code>GreetingKMP</code> フォルダーを展開します。</p><p>このKotlin Multiplatformプロジェクトには、3つのモジュールが含まれています。</p><ul><li><code>_shared_</code> は、AndroidおよびiOSアプリケーションの両方に共通するロジック（プラットフォーム間で共有するコード）を含むKotlinモジュールです。ビルドプロセスを自動化するために、ビルドシステムとして<a href="https://kotlinlang.org/docs/gradle.html" target="_blank" rel="noreferrer">Gradle</a>を使用します。</li><li><code>_composeApp_</code> は、AndroidアプリケーションとしてビルドされるKotlinモジュールです。ビルドシステムとしてGradleを使用します。<code>composeApp</code> モジュールは、通常のAndroidライブラリとして <code>shared</code> モジュールに依存し、それを使用します。</li><li><code>_iosApp_</code> は、iOSアプリケーションとしてビルドされるXcodeプロジェクトです。これは、iOSフレームワークとして <code>shared</code> モジュールに依存し、それを使用します。<code>shared</code> モジュールは、通常のフレームワークとして、または<a href="./multiplatform-cocoapods-overview">CocoaPodsの依存関係</a>として使用できます。デフォルトでは、IntelliJ IDEAで作成されたKotlin Multiplatformプロジェクトは、通常のフレームワーク依存関係を使用します。</li></ul><p><img src="'+y+'" alt="基本的なマルチプラットフォームプロジェクト構造" width="700"></p><p><code>shared</code> モジュールは、<code>androidMain</code>、<code>commonMain</code>、<code>iosMain</code> の3つのソースセットで構成されています。<em>ソースセット</em> とは、Gradleの概念で、論理的にグループ化された複数のファイル群であり、各グループが独自の依存関係を持ちます。 Kotlin Multiplatformでは、<code>shared</code> モジュール内の異なるソースセットが異なるプラットフォームをターゲットにすることができます。</p><p>共通ソースセットには共有Kotlinコードが含まれ、プラットフォームソースセットは各ターゲット固有のKotlinコードを使用します。 <code>androidMain</code> にはKotlin/JVMが使用され、<code>iosMain</code> にはKotlin/Nativeが使用されます。</p><p><img src="'+F+'" alt="ソースセットとモジュールの構造" width="350"></p><p><code>shared</code> モジュールがAndroidライブラリとしてビルドされると、共通KotlinコードはKotlin/JVMとして扱われます。 iOSフレームワークとしてビルドされると、共通KotlinはKotlin/Nativeとして扱われます。</p><p><img src="'+f+`" alt="共通Kotlin、Kotlin/JVM、Kotlin/Native"></p><h3 id="共通宣言を記述する" tabindex="-1">共通宣言を記述する <a class="header-anchor" href="#共通宣言を記述する" aria-label="Permalink to &quot;共通宣言を記述する&quot;">​</a></h3><p>共通ソースセットには、複数のターゲットプラットフォームで利用できる共有コードが含まれます。 これはプラットフォームに依存しないコードを含むように設計されています。共通ソースセットでプラットフォーム固有のAPIを使用しようとすると、IDEが警告を表示します。</p><ol><li><p><code>shared/src/commonMain/kotlin/com/jetbrains/greeting/greetingkmp/Greeting.kt</code> ファイルを開くと、<code>greet()</code> 関数を持つ自動生成された <code>Greeting</code> クラスを見つけることができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, \${platform.name}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>挨拶に少しバリエーションを加えます。Kotlin標準ライブラリから <code>kotlin.random.Random</code> をインポートします。 これは、すべてのプラットフォームで動作し、依存関係として自動的に含まれるマルチプラットフォームライブラリです。</p></li><li><p>テキストを反転させるために、Kotlin標準ライブラリの <code>reversed()</code> 呼び出しで共有コードを更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.random.Random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platform: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstWord </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hi!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$firstWord</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Guess what this is! &gt; \${platform.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reversed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>コードを共通Kotlinのみで記述することには、プラットフォーム固有の機能を使用できないという明白な制限があります。 インターフェースと<a href="./multiplatform-connect-to-apis">expect/actual</a>メカニズムを使用することで、これを解決します。</p><h3 id="プラットフォーム固有の実装を確認する" tabindex="-1">プラットフォーム固有の実装を確認する <a class="header-anchor" href="#プラットフォーム固有の実装を確認する" aria-label="Permalink to &quot;プラットフォーム固有の実装を確認する&quot;">​</a></h3><p>共通ソースセットは <code>expect</code> 宣言（インターフェース、クラスなど）を定義できます。 その後、各プラットフォームソースセット（この場合は <code>androidMain</code> と <code>iosMain</code>）は、<code>expect</code> 宣言に対応する <code>actual</code> プラットフォーム固有の実装を提供する必要があります。</p><p>特定のプラットフォームのコードを生成する際、Kotlinコンパイラは <code>expect</code> 宣言と <code>actual</code> 宣言をマージし、<code>actual</code> 実装を持つ単一の宣言を生成します。</p><ol><li><p>IntelliJ IDEAでKotlin Multiplatformプロジェクトを作成すると、<code>commonMain</code> モジュールに <code>Platform.kt</code> ファイルを含むテンプレートが生成されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これは、プラットフォームに関する情報を持つ共通の <code>Platform</code> インターフェースです。</p></li><li><p><code>androidMain</code> モジュールと <code>iosMain</code> モジュールを切り替えます。 AndroidおよびiOSソースセットで、同じ機能の異なる実装があることがわかります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.android.kt in the androidMain module:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android.os.Build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Android \${Build.VERSION.SDK_INT}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.ios.kt in the iosMain module:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.UIKit.UIDevice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        UIDevice.currentDevice.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.systemVersion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>AndroidPlatform</code> の <code>name</code> プロパティの実装は、Android固有のコード、具体的には <code>android.os.Build</code> 依存関係を使用します。このコードはKotlin/JVMで記述されています。ここで <code>java.util.Random</code> のようなJVM固有のクラスにアクセスしようとすると、このコードはコンパイルされます。</li><li><code>IOSPlatform</code> の <code>name</code> プロパティの実装は、iOS固有のコード、具体的には <code>platform.UIKit.UIDevice</code> 依存関係を使用します。これはKotlin/Nativeで記述されており、KotlinでiOSコードを記述できることを意味します。このコードはiOSフレームワークの一部となり、後でiOSアプリケーションのSwiftから呼び出します。</li></ul></li><li><p>異なるソースセットの <code>getPlatform()</code> 関数を確認します。その <code>expect</code> 宣言には本体がなく、プラットフォームコードで <code>actual</code> 実装が提供されています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.kt in the commonMain source set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.android.kt in the androidMain source set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.ios.kt in the iosMain source set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ol><p>ここでは、共通ソースセットが <code>expect</code> な <code>getPlatform()</code> 関数を定義し、プラットフォームソースセットには、Androidアプリ用の <code>AndroidPlatform()</code> とiOSアプリ用の <code>IOSPlatform()</code> という <code>actual</code> な実装があります。</p><p>特定のプラットフォームのコードを生成する際、Kotlinコンパイラは <code>expect</code> 宣言と <code>actual</code> 宣言をマージし、<code>actual</code> 実装を持つ単一の <code>getPlatform()</code> 関数を生成します。</p><p>そのため、<code>expect</code> 宣言と <code>actual</code> 宣言は同じパッケージで定義する必要があります。これにより、結果として生成されるプラットフォームコードで1つの宣言にマージされます。生成されたプラットフォームコードで <code>expect</code> な <code>getPlatform()</code> 関数を呼び出すと、正しい <code>actual</code> な実装が呼び出されます。</p><p>これで、アプリを実行してこれらすべてを実際に確認できます。</p>`,28)),s[3]||(s[3]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"expect-actualメカニズムを探る-オプション",tabindex:"-1"},[a("expect/actualメカニズムを探る (オプション) "),i("a",{class:"header-anchor",href:"#expect-actualメカニズムを探る-オプション","aria-label":'Permalink to "expect/actualメカニズムを探る (オプション) {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[4]||(s[4]=t(`<p>テンプレートプロジェクトでは関数にexpect/actualメカニズムを使用していますが、プロパティやクラスなど、ほとんどのKotlin宣言にも機能します。expectなプロパティを実装してみましょう。</p><ol><li><p><code>commonMain</code> モジュールの <code>Platform.kt</code> を開き、ファイルの最後に以下を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span></code></pre></div><p>Kotlinコンパイラは、このプロパティに対応するactual宣言がプラットフォームモジュールにないと警告します。</p></li><li><p>以下の方法で直ちに実装を提供してみてください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span></code></pre></div><p>expect宣言には本体（この場合は初期化子）があってはならないというエラーが表示されます。実装はactualプラットフォームモジュールで提供する必要があります。初期化子を削除してください。</p></li><li><p><code>num</code> プロパティにマウスオーバーし、<strong>Create missed actuals...</strong> をクリックします。 <code>androidMain</code> ソースセットを選択します。その後、<code>androidMain/Platform.android.kt</code> で実装を完了できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div></li><li><p>次に、<code>iosMain</code> モジュールの実装を提供します。<code>iosMain/Platform.ios.kt</code> に以下を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div></li><li><p><code>commonMain/Greeting.kt</code> ファイルで、<code>num</code> プロパティを <code>greet()</code> 関数に追加して違いを確認します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstWord </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hi!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$firstWord</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$num</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">] Guess what this is! &gt; \${platform.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reversed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="アプリケーションを実行する" tabindex="-1">アプリケーションを実行する <a class="header-anchor" href="#アプリケーションを実行する" aria-label="Permalink to &quot;アプリケーションを実行する&quot;">​</a></h2><p>IntelliJ IDEAから、<a href="#run-your-application-on-android">Android</a>と<a href="#run-your-application-on-ios">iOS</a>の両方でマルチプラットフォームアプリケーションを実行できます。</p><p>以前にexpect/actualメカニズムを試したことがある場合、Androidの挨拶には「[1]」が、iOSの挨拶には「[2]」が追加されていることがわかります。</p><h3 id="androidでアプリケーションを実行する" tabindex="-1">Androidでアプリケーションを実行する <a class="header-anchor" href="#androidでアプリケーションを実行する" aria-label="Permalink to &quot;Androidでアプリケーションを実行する&quot;">​</a></h3><ol><li><p>実行構成のリストで、<strong>composeApp</strong> を選択します。</p></li><li><p>構成リストの横にあるAndroid仮想デバイスを選択し、<strong>Run</strong> をクリックします。</p><p>リストにデバイスがない場合は、<a href="https://developer.android.com/studio/run/managing-avds#createavd" target="_blank" rel="noreferrer">新しいAndroid仮想デバイス</a>を作成してください。</p><p><img src="`+d+'" alt="Androidでマルチプラットフォームアプリを実行" width="350"></p><p><img src="'+b+'" alt="Android上の最初のモバイルマルチプラットフォームアプリ" width="300"></p></li></ol>',7)),s[5]||(s[5]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"別のandroidシミュレートデバイスで実行する",tabindex:"-1"},[a("別のAndroidシミュレートデバイスで実行する "),i("a",{class:"header-anchor",href:"#別のandroidシミュレートデバイスで実行する","aria-label":'Permalink to "別のAndroidシミュレートデバイスで実行する {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[6]||(s[6]=i("p",null,[i("a",{href:"https://developer.android.com/studio/run/emulator#runningapp",target:"_blank",rel:"noreferrer"},"Androidエミュレーターを構成し、別のシミュレートデバイスでアプリケーションを実行する方法"),a("を学びます。")],-1)),s[7]||(s[7]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"実機androidデバイスで実行する",tabindex:"-1"},[a("実機Androidデバイスで実行する "),i("a",{class:"header-anchor",href:"#実機androidデバイスで実行する","aria-label":'Permalink to "実機Androidデバイスで実行する {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[8]||(s[8]=t('<p><a href="https://developer.android.com/studio/run/device" target="_blank" rel="noreferrer">ハードウェアデバイスを構成して接続し、その上でアプリケーションを実行する方法</a>を学びます。</p><h3 id="iosでアプリケーションを実行する" tabindex="-1">iOSでアプリケーションを実行する <a class="header-anchor" href="#iosでアプリケーションを実行する" aria-label="Permalink to &quot;iOSでアプリケーションを実行する&quot;">​</a></h3><p>初期設定の一部としてXcodeを起動していない場合は、iOSアプリを実行する前に起動してください。</p><p>IntelliJ IDEAで、実行構成のリストから <strong>iosApp</strong> を選択し、実行構成の横にあるシミュレートデバイスを選択して、<strong>Run</strong> をクリックします。</p><p>リストに利用可能なiOS構成がない場合は、<a href="#run-on-a-new-ios-simulated-device">新しい実行構成</a>を追加してください。</p><p><img src="'+h+'" alt="iOSでマルチプラットフォームアプリを実行" width="350"></p><p><img src="'+A+'" alt="iOS上の最初のモバイルマルチプラットフォームアプリ" width="300"></p>',7)),s[9]||(s[9]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"新しいiosシミュレートデバイスで実行する",tabindex:"-1"},[a("新しいiOSシミュレートデバイスで実行する "),i("a",{class:"header-anchor",href:"#新しいiosシミュレートデバイスで実行する","aria-label":'Permalink to "新しいiOSシミュレートデバイスで実行する {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[10]||(s[10]=t('<p>シミュレートデバイスでアプリケーションを実行したい場合は、新しい実行構成を追加できます。</p><ol><li><p>実行構成のリストで、<strong>Edit Configurations</strong> をクリックします。</p><p><img src="'+k+'" alt="実行構成を編集" width="450"></p></li><li><p>構成リストの上にある <strong>+</strong> ボタンをクリックし、<strong>Xcode Application</strong> を選択します。</p><p><img src="'+c+'" alt="iOSアプリケーションの新しい実行構成"></p></li><li><p>構成に名前を付けます。</p></li><li><p><strong>Working directory</strong> を選択します。そのためには、例えば <strong>KotlinMultiplatformSandbox</strong> のようなプロジェクトの <code>iosApp</code> フォルダーに移動します。</p></li><li><p><strong>Run</strong> をクリックして、新しいシミュレートデバイスでアプリケーションを実行します。</p></li></ol>',2)),s[11]||(s[11]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"実機iosデバイスで実行する",tabindex:"-1"},[a("実機iOSデバイスで実行する "),i("a",{class:"header-anchor",href:"#実機iosデバイスで実行する","aria-label":'Permalink to "実機iOSデバイスで実行する {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[12]||(s[12]=t(`<p>実機のiOSデバイスでマルチプラットフォームアプリケーションを実行できます。開始する前に、<a href="https://support.apple.com/en-us/HT204316" target="_blank" rel="noreferrer">Apple ID</a>に関連付けられたチームIDを設定する必要があります。</p><h5 id="チームidを設定する" tabindex="-1">チームIDを設定する <a class="header-anchor" href="#チームidを設定する" aria-label="Permalink to &quot;チームIDを設定する&quot;">​</a></h5><p>プロジェクトでチームIDを設定するには、IntelliJ IDEAのKDoctorツールを使用するか、Xcodeでチームを選択できます。</p><p>KDoctorの場合：</p><ol><li><p>IntelliJ IDEAで、ターミナルで以下のコマンドを実行します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kdoctor --team-ids</span></span></code></pre></div><p>KDoctorは、現在システムに構成されているすべてのチームIDをリスト表示します。例えば：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>3ABC246XYZ (Max Sample)</span></span>
<span class="line"><span>ZABCW6SXYZ (SampleTech Inc.)</span></span></code></pre></div></li><li><p>IntelliJ IDEAで <code>iosApp/Configuration/Config.xcconfig</code> を開き、チームIDを指定します。</p></li></ol><p>別の方法として、Xcodeでチームを選択します。</p><ol><li><p>Xcodeに移動し、<strong>Open a project or file</strong> を選択します。</p></li><li><p>プロジェクトの <code>iosApp/iosApp.xcworkspace</code> ファイルに移動します。</p></li><li><p>左側のメニューで <code>iosApp</code> を選択します。</p></li><li><p><strong>Signing &amp; Capabilities</strong> に移動します。</p></li><li><p><strong>Team</strong> リストでチームを選択します。</p><p>まだチームを設定していない場合は、<strong>Team</strong> リストの <strong>Add an Account</strong> オプションを使用し、Xcodeの指示に従ってください。</p></li><li><p>バンドル識別子が一意であり、署名証明書が正常に割り当てられていることを確認してください。</p></li></ol><h5 id="アプリを実行する" tabindex="-1">アプリを実行する <a class="header-anchor" href="#アプリを実行する" aria-label="Permalink to &quot;アプリを実行する&quot;">​</a></h5><p>iPhoneをケーブルで接続します。すでにデバイスがXcodeに登録されている場合、IntelliJ IDEAは実行構成のリストにそれを表示するはずです。対応する <code>iosApp</code> 構成を実行します。</p><p>まだiPhoneをXcodeに登録していない場合は、<a href="https://developer.apple.com/documentation/xcode/running-your-app-in-simulator-or-on-a-device/" target="_blank" rel="noreferrer">Appleの推奨事項</a>に従ってください。 要するに、次のことを行う必要があります。</p><ol><li>iPhoneをケーブルで接続します。</li><li>iPhoneで、<strong>設定</strong> | <strong>プライバシーとセキュリティ</strong> で開発者モードを有効にします。</li><li>Xcodeで、上部メニューに移動し、<strong>Window</strong> | <strong>Devices and Simulators</strong> を選択します。</li><li>プラス記号をクリックします。接続されているiPhoneを選択し、<strong>Add</strong> をクリックします。</li><li>Apple IDでサインインして、デバイスでの開発機能を有効にします。</li><li>画面の指示に従ってペアリングプロセスを完了します。</li></ol><p>XcodeでiPhoneを登録したら、IntelliJ IDEAで<a href="#run-on-a-new-ios-simulated-device">新しい実行構成</a>を作成し、<strong>Execution target</strong> リストでデバイスを選択します。対応する <code>iosApp</code> 構成を実行します。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>チュートリアルの次のパートでは、プラットフォーム固有のライブラリを使用してUI要素を更新する方法を学びます。</p><p><strong><a href="./multiplatform-update-ui">次のパートに進む</a></strong></p><h3 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h3><ul><li>コードが正しく動作することを確認するために、<a href="./multiplatform-run-tests">マルチプラットフォームテストを作成して実行する方法</a>を参照してください。</li><li><a href="./multiplatform-discover-project">プロジェクト構造</a>について詳しく学びます。</li><li>既存のAndroidプロジェクトをクロスプラットフォームアプリに変換したい場合は、<a href="./multiplatform-integrate-in-existing-app">このチュートリアルを完了してAndroidアプリをクロスプラットフォーム化</a>してください。</li></ul><h2 id="ヘルプ" tabindex="-1">ヘルプ <a class="header-anchor" href="#ヘルプ" aria-label="Permalink to &quot;ヘルプ&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>。<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">招待状</a>を取得し、<a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a>チャンネルに参加してください。</li><li><strong>Kotlin課題トラッカー</strong>。<a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">新しい課題を報告する</a>。</li></ul>`,19))])}const G=v(P,[["render",I]]);export{V as __pageData,G as default};
