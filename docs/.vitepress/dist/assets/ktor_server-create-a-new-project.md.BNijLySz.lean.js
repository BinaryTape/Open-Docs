import{_ as L,a as H,b as R,c as C,d as D,e as J,f as O,g as a,h as P,i as N,j as G,k as W,l as M,m as U,n as $,o as q,p as B,q as Y,r as z,s as F,t as V,u as X,v as Z}from"./chunks/server_get_started_register_error_handler_output.Dqrb0DZY.js";import{_ as I}from"./chunks/server_get_started_ktor_sample_app_output.BqyRKElU.js";import{_ as Q}from"./chunks/intellij_idea_gradle_icon.dCXxPOpm.js";import{_ as b}from"./chunks/intellij_idea_rerun_icon.tlG8QH6A.js";import{_,C as e,c as h,o as c,G as u,w as o,j as n,a as t}from"./chunks/framework.Bksy39di.js";const ml=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-create-a-new-project.md","filePath":"ktor/server-create-a-new-project.md","lastUpdated":1755457140000}'),ll={name:"ktor/server-create-a-new-project.md"};function tl(nl,l,ul,ol,rl,il){const A=e("show-structure"),T=e("tldr"),E=e("link-summary"),x=e("web-summary"),s=e("Links"),K=e("list"),r=e("step"),i=e("control"),p=e("Path"),y=e("emphasis"),m=e("procedure"),f=e("chapter"),k=e("ui-path"),d=e("code-block"),g=e("tab"),v=e("tabs"),w=e("shortcut"),S=e("tip"),j=e("topic");return c(),h("div",null,[u(j,{"xsi:noNamespaceSchemaLocation":"https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance",title:"创建、打开并运行新的 Ktor 项目",id:"server-create-a-new-project","help-id":"server_create_a_new_project"},{default:o(()=>[u(A,{for:"chapter",depth:"2"}),u(T,null,{default:o(()=>l[0]||(l[0]=[n("p",null,[n("b",null,"代码示例"),t(": "),n("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/tutorial-server-get-started"}," tutorial-server-get-started ")],-1)])),_:1}),u(E,null,{default:o(()=>l[1]||(l[1]=[t(" 了解如何使用 Ktor 打开、运行和测试服务器应用程序。 ")])),_:1}),u(x,null,{default:o(()=>l[2]||(l[2]=[t(" 开始构建您的第一个 Ktor 服务器应用程序。本教程将引导您创建、打开并运行新的 Ktor 项目。 ")])),_:1}),l[390]||(l[390]=n("p",null," 在本教程中，您将学习如何创建、打开并运行 您的第一个 Ktor 服务器项目。一旦项目成功运行，您可以尝试一系列任务来熟悉 Ktor。 ",-1)),l[391]||(l[391]=n("p",null," 这是 Ktor 服务器应用程序系列教程的第一部分，旨在帮助您入门。您可以独立完成每个教程， 但我们强烈建议您按照建议的顺序进行学习： ",-1)),u(K,{type:"decimal"},{default:o(()=>[l[13]||(l[13]=n("li",null,"创建、打开并运行新的 Ktor 项目。",-1)),n("li",null,[u(s,{href:"/ktor/server-requests-and-responses",summary:"通过构建任务管理器应用程序，了解如何使用 Ktor 在 Kotlin 中进行路由、处理请求和参数的基础知识。"},{default:o(()=>l[3]||(l[3]=[t("处理请求并生成响应")])),_:1}),l[4]||(l[4]=t("。"))]),n("li",null,[u(s,{href:"/ktor/server-create-restful-apis",summary:"了解如何使用 Kotlin 和 Ktor 构建后端服务，其中包括一个生成 JSON 文件的 RESTful API 示例。"},{default:o(()=>l[5]||(l[5]=[t("创建生成 JSON 的 RESTful API")])),_:1}),l[6]||(l[6]=t("。"))]),n("li",null,[u(s,{href:"/ktor/server-create-website",summary:"了解如何使用 Kotlin、Ktor 和 Thymeleaf 模板构建网站。"},{default:o(()=>l[7]||(l[7]=[t("使用 Thymeleaf 模板创建网站")])),_:1}),l[8]||(l[8]=t("。"))]),n("li",null,[u(s,{href:"/ktor/server-create-websocket-application",summary:"了解如何利用 WebSocket 的强大功能发送和接收内容。"},{default:o(()=>l[9]||(l[9]=[t("创建 WebSocket 应用程序")])),_:1}),l[10]||(l[10]=t("。"))]),n("li",null,[u(s,{href:"/ktor/server-integrate-database",summary:"了解使用 Exposed SQL 库将 Ktor 服务连接到数据库版本库的过程。"},{default:o(()=>l[11]||(l[11]=[t("使用 Exposed 集成数据库")])),_:1}),l[12]||(l[12]=t("。"))])]),_:1}),u(f,{id:"create-project",title:"创建新的 Ktor 项目"},{default:o(()=>[l[159]||(l[159]=n("p",null,[t(" 创建新的 Ktor 项目最快的方法之一是"),n("a",{href:"#create-project-with-the-ktor-project-generator"},"使用 基于 Web 的 Ktor 项目生成器"),t("。 ")],-1)),l[160]||(l[160]=n("p",null,[t(" 或者，您也可以 "),n("a",{href:"#create_project_with_intellij"},"使用 IntelliJ IDEA Ultimate 专用的 Ktor 插件"),t(" 或 "),n("a",{href:"#create_project_with_ktor_cli_tool"},"Ktor CLI 工具"),t(" 来生成项目。 ")],-1)),u(f,{title:"使用 Ktor 项目生成器",id:"create-project-with-the-ktor-project-generator"},{default:o(()=>[l[63]||(l[63]=n("p",null," 要使用 Ktor 项目生成器创建新项目，请按照以下步骤操作： ",-1)),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>l[14]||(l[14]=[n("p",null,[t("导航到 "),n("a",{href:"https://start.ktor.io/"},"Ktor 项目生成器"),t("。")],-1)])),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[17]||(l[17]=t("在 ")),u(i,null,{default:o(()=>l[15]||(l[15]=[t("项目构件")])),_:1}),l[18]||(l[18]=t(" 字段中，输入 ")),u(p,null,{default:o(()=>l[16]||(l[16]=[t("com.example.ktor-sample-app")])),_:1}),l[19]||(l[19]=t(" 作为您的项目构件名称。 ")),l[20]||(l[20]=n("img",{src:L,alt:"带项目构件名称 org.example.ktor-sample-app 的 Ktor 项目生成器","border-effect":"line",style:{},width:"706"},null,-1))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[22]||(l[22]=t("点击 ")),u(i,null,{default:o(()=>l[21]||(l[21]=[t("配置")])),_:1}),l[23]||(l[23]=t(" 以打开设置下拉菜单： ")),l[24]||(l[24]=n("img",{src:H,style:{},alt:"Ktor 项目设置的展开视图","border-effect":"line",width:"706"},null,-1))]),l[49]||(l[49]=n("p",null," 可用的设置如下： ",-1)),u(K,null,{default:o(()=>[n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[25]||(l[25]=[t("构建系统")])),_:1}),l[30]||(l[30]=t(" ： 选择所需的 ")),u(s,{href:"/ktor/server-dependencies",summary:"了解如何将 Ktor Server 依赖项添加到现有 Gradle/Maven 项目。"},{default:o(()=>l[26]||(l[26]=[t("构建系统")])),_:1}),l[31]||(l[31]=t("。 可以是使用 ")),u(y,null,{default:o(()=>l[27]||(l[27]=[t("Kotlin")])),_:1}),l[32]||(l[32]=t(" 或 Groovy DSL 的 ")),u(y,null,{default:o(()=>l[28]||(l[28]=[t("Gradle")])),_:1}),l[33]||(l[33]=t(" ，或者 ")),u(y,null,{default:o(()=>l[29]||(l[29]=[t("Maven")])),_:1}),l[34]||(l[34]=t(" 。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[35]||(l[35]=[t("Ktor 版本")])),_:1}),l[36]||(l[36]=t(" ： 选择所需的 Ktor 版本。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[37]||(l[37]=[t("引擎")])),_:1}),l[39]||(l[39]=t(" ： 选择用于运行服务器的 ")),u(s,{href:"/ktor/server-engines",summary:"了解处理网络请求的引擎。"},{default:o(()=>l[38]||(l[38]=[t("引擎")])),_:1}),l[40]||(l[40]=t("。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[41]||(l[41]=[t("配置")])),_:1}),l[44]||(l[44]=t(" ： 选择是在 ")),u(s,{href:"/ktor/server-configuration-file",summary:"了解如何在配置文件中配置各种服务器参数。"},{default:o(()=>l[42]||(l[42]=[t("YAML 或 HOCON 文件中")])),_:1}),l[45]||(l[45]=t("，还是 ")),u(s,{href:"/ktor/server-configuration-code",summary:"了解如何在代码中配置各种服务器参数。"},{default:o(()=>l[43]||(l[43]=[t("在代码中")])),_:1}),l[46]||(l[46]=t("指定服务器参数。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[47]||(l[47]=[t("包含示例")])),_:1}),l[48]||(l[48]=t(" ： 勾选此选项以添加插件的示例代码。 "))])])]),_:1}),l[50]||(l[50]=n("p",null,"对于本教程，您可以保留这些设置的默认值。",-1))]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[52]||(l[52]=t("点击 ")),u(i,null,{default:o(()=>l[51]||(l[51]=[t("完成")])),_:1}),l[53]||(l[53]=t(" 以保存配置并关闭菜单。 "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[55]||(l[55]=t("下方您会看到一组可以添加到项目中 的")),u(s,{href:"/ktor/server-plugins",summary:"插件提供常见功能，例如序列化、内容编码、压缩等。"},{default:o(()=>l[54]||(l[54]=[t("插件")])),_:1}),l[56]||(l[56]=t("。插件是 Ktor 应用程序中提供常见功能的构建块， 例如身份验证、序列化和内容编码、压缩、Cookie 支持等等。 "))]),l[57]||(l[57]=n("p",null,"为了本教程的目的，您在此阶段无需添加任何插件。",-1))]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[59]||(l[59]=t(" 点击 ")),u(i,null,{default:o(()=>l[58]||(l[58]=[t("下载")])),_:1}),l[60]||(l[60]=t(" 按钮生成并下载您的 Ktor 项目。 ")),l[61]||(l[61]=n("img",{src:R,alt:"Ktor 项目生成器下载按钮","border-effect":"line",style:{},width:"706"},null,-1))])]),_:1}),l[62]||(l[62]=n("p",null,"您的下载应自动开始。",-1))]),_:1}),l[64]||(l[64]=n("p",null,[t("现在您已经生成了新项目，请继续"),n("a",{href:"#unpacking"},"解压并运行您的 Ktor 项目"),t("。")],-1))]),_:1}),u(f,{title:"使用 IntelliJ IDEA Ultimate 的 Ktor 插件",id:"create_project_with_intellij",collapsible:"true"},{default:o(()=>[l[129]||(l[129]=n("p",null,[t(" 本节介绍如何使用 Intellij IDEA Ultimate 的 "),n("a",{href:"https://plugins.jetbrains.com/plugin/16008-ktor"},"Ktor 插件"),t("进行项目设置。 ")],-1)),l[130]||(l[130]=n("p",null,[t(" 要创建新的 Ktor 项目， "),n("a",{href:"https://www.jetbrains.com/help/idea/run-for-the-first-time.html"},"打开 IntelliJ IDEA"),t("，然后 按照以下步骤操作： ")],-1)),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[n("p",null,[l[66]||(l[66]=t(" 在欢迎屏幕上，点击")),u(i,null,{default:o(()=>l[65]||(l[65]=[t("新建项目")])),_:1}),l[67]||(l[67]=t("。 "))]),n("p",null,[l[69]||(l[69]=t(" 或者，从主菜单中选择 ")),u(k,null,{default:o(()=>l[68]||(l[68]=[t("文件 | 新建 | 项目")])),_:1}),l[70]||(l[70]=t("。 "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[73]||(l[73]=t(" 在 ")),u(i,null,{default:o(()=>l[71]||(l[71]=[t("新建项目")])),_:1}),l[74]||(l[74]=t(" 向导中，从左侧列表中选择 ")),u(i,null,{default:o(()=>l[72]||(l[72]=[t("Ktor")])),_:1}),l[75]||(l[75]=t(" 。 "))])]),_:1}),u(r,null,{default:o(()=>[l[92]||(l[92]=n("p",null," 在右侧窗格中，您可以指定以下设置： ",-1)),l[93]||(l[93]=n("img",{src:C,alt:"Ktor 项目设置",width:"706","border-effect":"rounded"},null,-1)),u(K,null,{default:o(()=>[n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[76]||(l[76]=[t("名称")])),_:1}),l[78]||(l[78]=t(" ： 指定项目名称。输入 ")),u(p,null,{default:o(()=>l[77]||(l[77]=[t("ktor-sample-app")])),_:1}),l[79]||(l[79]=t(" 作为您的项目名称。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[80]||(l[80]=[t("位置")])),_:1}),l[81]||(l[81]=t(" ： 指定项目目录。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[82]||(l[82]=[t("网站")])),_:1}),l[83]||(l[83]=t(" ： 指定用于生成包名的域。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[84]||(l[84]=[t("构件")])),_:1}),l[85]||(l[85]=t(" ： 此字段显示生成的构件名称。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[86]||(l[86]=[t("引擎")])),_:1}),l[88]||(l[88]=t(" ： 选择用于运行服务器的 ")),u(s,{href:"/ktor/server-engines",summary:"了解处理网络请求的引擎。"},{default:o(()=>l[87]||(l[87]=[t("引擎")])),_:1}),l[89]||(l[89]=t("。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[90]||(l[90]=[t("包含示例")])),_:1}),l[91]||(l[91]=t(" ： 勾选此选项以添加插件的示例代码。 "))])])]),_:1})]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[95]||(l[95]=t(" 点击 ")),u(i,null,{default:o(()=>l[94]||(l[94]=[t("高级设置")])),_:1}),l[96]||(l[96]=t(" 以展开 附加设置菜单： "))]),l[115]||(l[115]=n("img",{src:D,alt:"Ktor 项目高级设置",width:"706","border-effect":"rounded"},null,-1)),l[116]||(l[116]=n("p",null," 可用的设置如下： ",-1)),u(K,null,{default:o(()=>[n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[97]||(l[97]=[t("构建系统")])),_:1}),l[102]||(l[102]=t(" ： 选择所需的 ")),u(s,{href:"/ktor/server-dependencies",summary:"了解如何将 Ktor Server 依赖项添加到现有 Gradle/Maven 项目。"},{default:o(()=>l[98]||(l[98]=[t("构建系统")])),_:1}),l[103]||(l[103]=t("。 可以是使用 ")),u(y,null,{default:o(()=>l[99]||(l[99]=[t("Kotlin")])),_:1}),l[104]||(l[104]=t(" 或 Groovy DSL 的 ")),u(y,null,{default:o(()=>l[100]||(l[100]=[t("Gradle")])),_:1}),l[105]||(l[105]=t(" ，或者 ")),u(y,null,{default:o(()=>l[101]||(l[101]=[t("Maven")])),_:1}),l[106]||(l[106]=t(" 。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[107]||(l[107]=[t("Ktor 版本")])),_:1}),l[108]||(l[108]=t(" ： 选择所需的 Ktor 版本。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[109]||(l[109]=[t("配置")])),_:1}),l[112]||(l[112]=t(" ： 选择是在 ")),u(s,{href:"/ktor/server-configuration-file",summary:"了解如何在配置文件中配置各种服务器参数。"},{default:o(()=>l[110]||(l[110]=[t("YAML 或 HOCON 文件中")])),_:1}),l[113]||(l[113]=t("，还是 ")),u(s,{href:"/ktor/server-configuration-code",summary:"了解如何在代码中配置各种服务器参数。"},{default:o(()=>l[111]||(l[111]=[t("在代码中")])),_:1}),l[114]||(l[114]=t("指定服务器参数。 "))])])]),_:1}),l[117]||(l[117]=n("p",null,"为了本教程的目的，您可以保留这些设置的默认值。",-1))]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[119]||(l[119]=t(" 点击 ")),u(i,null,{default:o(()=>l[118]||(l[118]=[t("下一步")])),_:1}),l[120]||(l[120]=t(" 进入下一页。 "))]),l[124]||(l[124]=n("img",{src:J,alt:"Ktor 插件",width:"706","border-effect":"rounded"},null,-1)),n("p",null,[l[122]||(l[122]=t(" 在此页面上，您可以选择一组")),u(s,{href:"/ktor/server-plugins",summary:"插件提供常见功能，例如序列化、内容编码、压缩等。"},{default:o(()=>l[121]||(l[121]=[t("插件")])),_:1}),l[123]||(l[123]=t("——它们是提供 Ktor 应用程序常见功能的构建块，例如 身份验证、序列化和内容编码、压缩、Cookie 支持等等。 "))]),l[125]||(l[125]=n("p",null,"为了本教程的目的，您在此阶段无需添加任何插件。",-1))]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[127]||(l[127]=t(" 点击 ")),u(i,null,{default:o(()=>l[126]||(l[126]=[t("创建")])),_:1}),l[128]||(l[128]=t(" 并等待 IntelliJ IDEA 生成项目并 安装依赖项。 "))])]),_:1})]),_:1}),l[131]||(l[131]=n("p",null,[t(" 现在您已经创建了新项目，请继续学习如何"),n("a",{href:"#open-explore-run"},"打开、 探索并运行"),t(" 该应用程序。 ")],-1))]),_:1}),u(f,{title:"使用 Ktor CLI 工具",id:"create_project_with_ktor_cli_tool",collapsible:"true"},{default:o(()=>[l[157]||(l[157]=n("p",null,[t(" 本节介绍如何使用 "),n("a",{href:"https://github.com/ktorio/ktor-cli"},"Ktor CLI 工具"),t("进行项目设置。 ")],-1)),l[158]||(l[158]=n("p",null," 要创建新的 Ktor 项目，请打开您选择的终端并 按照以下步骤操作： ",-1)),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[l[132]||(l[132]=t(" 使用以下命令之一安装 Ktor CLI 工具： ")),u(v,null,{default:o(()=>[u(g,{title:"macOS/Linux",id:"macos-linux"},{default:o(()=>[u(d,{lang:"console",code:"                                brew install ktor"})]),_:1}),u(g,{title:"Windows",id:"windows"},{default:o(()=>[u(d,{lang:"console",code:"                                winget install JetBrains.KtorCLI"})]),_:1})]),_:1})]),_:1}),u(r,null,{default:o(()=>[l[133]||(l[133]=t(" 要在交互模式下生成新项目，请使用以下命令： ")),u(d,{lang:"console",code:"                      ktor new"})]),_:1}),u(r,null,{default:o(()=>[l[138]||(l[138]=t(" 输入 ")),u(p,null,{default:o(()=>l[134]||(l[134]=[t("ktor-sample-app")])),_:1}),l[139]||(l[139]=t(" 作为您的项目名称： ")),l[140]||(l[140]=n("img",{src:O,alt:"在交互模式下使用 Ktor CLI 工具","border-effect":"rounded",style:{},width:"706"},null,-1)),n("p",null,[l[136]||(l[136]=t(" （可选）您还可以通过编辑项目名称下方的 ")),u(k,null,{default:o(()=>l[135]||(l[135]=[t("位置")])),_:1}),l[137]||(l[137]=t(" 路径来更改项目保存的位置。 "))])]),_:1}),u(r,null,{default:o(()=>[l[142]||(l[142]=t(" 按下 ")),u(w,null,{default:o(()=>l[141]||(l[141]=[t("Enter")])),_:1}),l[143]||(l[143]=t(" 键继续。 "))]),_:1}),u(r,null,{default:o(()=>[l[145]||(l[145]=t(" 在下一步中，您可以搜索并向项目添加")),u(s,{href:"/ktor/server-plugins",summary:"插件提供常见功能，例如序列化、内容编码、压缩等。"},{default:o(()=>l[144]||(l[144]=[t("插件")])),_:1}),l[146]||(l[146]=t("。插件是 Ktor 应用程序中提供常见功能的构建块， 例如身份验证、序列化和内容编码、压缩、Cookie 支持等等。 ")),l[147]||(l[147]=n("img",{src:a,alt:"使用 Ktor CLI 工具向项目添加插件","border-effect":"rounded",style:{},width:"706"},null,-1)),l[148]||(l[148]=n("p",null,"为了本教程的目的，您在此阶段无需添加任何插件。",-1))]),_:1}),u(r,null,{default:o(()=>[l[155]||(l[155]=t(" 按下 ")),u(w,null,{default:o(()=>l[149]||(l[149]=[t("CTRL+G")])),_:1}),l[156]||(l[156]=t(" 生成项目。 ")),n("p",null,[l[152]||(l[152]=t(" 或者，您可以通过选择 ")),u(i,null,{default:o(()=>l[150]||(l[150]=[t("创建项目 (CTRL+G)")])),_:1}),l[153]||(l[153]=t(" 并按下 ")),u(w,null,{default:o(()=>l[151]||(l[151]=[t("Enter")])),_:1}),l[154]||(l[154]=t(" 键来生成项目。 "))])]),_:1})]),_:1})]),_:1})]),_:1}),u(f,{title:"解压并运行您的 Ktor 项目",id:"unpacking"},{default:o(()=>[l[179]||(l[179]=n("p",null," 本节将介绍如何从命令行解压、构建和运行项目。以下 说明假设： ",-1)),u(K,{type:"bullet"},{default:o(()=>[n("li",null,[l[162]||(l[162]=t("您已创建并下载了一个名为 ")),u(p,null,{default:o(()=>l[161]||(l[161]=[t("ktor-sample-app")])),_:1}),l[163]||(l[163]=t(" 的项目。 "))]),n("li",null,[l[165]||(l[165]=t("该项目已放置在您的主目录中名为 ")),u(p,null,{default:o(()=>l[164]||(l[164]=[t("myprojects")])),_:1}),l[166]||(l[166]=t(" 的文件夹下。 "))])]),_:1}),l[180]||(l[180]=n("p",null,"如有必要，请修改名称和路径以匹配您自己的设置。",-1)),l[181]||(l[181]=n("p",null,"打开您选择的命令行工具并按照步骤操作：",-1)),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[l[167]||(l[167]=n("p",null,"在终端中，导航到您下载项目的文件夹：",-1)),u(d,{lang:"console",code:"                    cd ~/myprojects"})]),_:1}),u(r,null,{default:o(()=>[l[168]||(l[168]=n("p",null,"将 ZIP 压缩包解压到同名文件夹中：",-1)),u(v,null,{default:o(()=>[u(g,{title:"macOS","group-key":"macOS"},{default:o(()=>[u(d,{lang:"console",code:"                            unzip ktor-sample-app.zip -d ktor-sample-app"})]),_:1}),u(g,{title:"Windows","group-key":"windows"},{default:o(()=>[u(d,{lang:"console",code:"                            tar -xf ktor-sample-app.zip"})]),_:1})]),_:1}),l[169]||(l[169]=n("p",null,"您的目录现在将包含 ZIP 压缩包和解压后的文件夹。",-1))]),_:1}),u(r,null,{default:o(()=>[l[170]||(l[170]=n("p",null,"从当前目录进入新创建的文件夹：",-1)),u(d,{lang:"console",code:"                    cd ktor-sample-app"})]),_:1}),u(r,null,{default:o(()=>[l[171]||(l[171]=n("p",null,[t("在 macOS/UNIX 系统上，您需要使 "),n("code",null,"gradlew"),t(" Gradle 辅助脚本可执行。为此， 请使用 "),n("code",null,"chmod"),t(" 命令：")],-1)),u(v,null,{default:o(()=>[u(g,{title:"macOS","group-key":"macOS"},{default:o(()=>[u(d,{lang:"console",code:"                            chmod +x ./gradlew"})]),_:1})]),_:1})]),_:1}),u(r,null,{default:o(()=>[l[172]||(l[172]=n("p",null,"要构建项目，请使用以下命令：",-1)),u(v,null,{default:o(()=>[u(g,{title:"macOS","group-key":"macOS"},{default:o(()=>[u(d,{lang:"console",code:"                            ./gradlew build"})]),_:1}),u(g,{title:"Windows","group-key":"windows"},{default:o(()=>[u(d,{lang:"console",code:"                            gradlew build"})]),_:1})]),_:1}),l[173]||(l[173]=n("p",null,"如果您看到构建成功，则可以再次通过 Gradle 执行项目。",-1))]),_:1}),u(r,null,{default:o(()=>[l[174]||(l[174]=n("p",null,"要运行项目，请使用以下命令：",-1)),u(v,null,{default:o(()=>[u(g,{title:"macOS","group-key":"macOS"},{default:o(()=>[u(d,{lang:"console",code:"                            ./gradlew run"})]),_:1}),u(g,{title:"Windows","group-key":"windows"},{default:o(()=>[u(d,{lang:"console",code:"                            gradlew run"})]),_:1})]),_:1})]),_:1}),u(r,null,{default:o(()=>l[175]||(l[175]=[n("p",null,[t("要验证项目是否正在运行，请在输出中提到的 URL ("),n("a",{href:"http://0.0.0.0:8080"},[n("a",{href:"http://0.0.0.0:8080",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:8080")]),t(") 打开浏览器。 您应该会在屏幕上看到“Hello World!”消息：")],-1),n("img",{src:I,alt:"生成的 Ktor 项目输出","border-effect":"line",width:"706"},null,-1)])),_:1})]),_:1}),l[182]||(l[182]=n("p",null,"恭喜！您已成功启动 Ktor 项目。",-1)),n("p",null,[l[177]||(l[177]=t("请注意，命令行将无响应，因为底层进程正在忙于运行 Ktor 应用程序。您可以 按下 ")),u(w,null,{default:o(()=>l[176]||(l[176]=[t("CTRL+C")])),_:1}),l[178]||(l[178]=t(" 来终止应用程序。 "))])]),_:1}),u(f,{title:"在 IntelliJ IDEA 中打开、探索并运行您的 Ktor 项目",id:"open-explore-run"},{default:o(()=>[u(f,{title:"打开项目",id:"open"},{default:o(()=>[l[191]||(l[191]=n("p",null,[t("如果您的计算机上安装了 "),n("a",{href:"https://www.jetbrains.com/idea/"},"IntelliJ IDEA"),t("，您可以轻松地从命令行 打开项目。 ")],-1)),l[192]||(l[192]=n("p",null,[t(" 请确保您位于项目文件夹中，然后键入 "),n("code",null,"idea"),t(" 命令，后跟一个句点表示当前 文件夹： ")],-1)),u(d,{lang:"Bash",code:"                idea ."}),l[193]||(l[193]=n("p",null," 或者，您也可以手动启动 IntelliJ IDEA 来打开项目。 ",-1)),n("p",null,[l[186]||(l[186]=t(" 如果欢迎屏幕打开，点击 ")),u(i,null,{default:o(()=>l[183]||(l[183]=[t("打开")])),_:1}),l[187]||(l[187]=t(" 。否则，请从主菜单中选择 ")),u(k,null,{default:o(()=>l[184]||(l[184]=[t("文件 | 打开")])),_:1}),l[188]||(l[188]=t(" ，然后选择 ")),u(p,null,{default:o(()=>l[185]||(l[185]=[t("ktor-sample-app")])),_:1}),l[189]||(l[189]=t(" 文件夹打开它。 "))]),u(S,null,{default:o(()=>l[190]||(l[190]=[t(" 有关管理项目的更多详细信息， 请参见 "),n("a",{href:"https://www.jetbrains.com/help/idea/creating-and-managing-projects.html"},"IntelliJ IDEA 文档",-1),t("。 ")])),_:1})]),_:1}),u(f,{title:"探索项目",id:"explore"},{default:o(()=>[l[218]||(l[218]=n("p",null,"无论您选择哪种方式，项目都应如下图所示打开：",-1)),l[219]||(l[219]=n("img",{src:P,alt:"IDE 中生成的 Ktor 项目视图",width:"706"},null,-1)),n("p",null,[l[196]||(l[196]=t(" 为了解释项目布局，我们已在 ")),u(i,null,{default:o(()=>l[194]||(l[194]=[t("项目")])),_:1}),l[197]||(l[197]=t(" 视图中展开了结构并选中了 ")),u(p,null,{default:o(()=>l[195]||(l[195]=[t("settings-gradle.kts")])),_:1}),l[198]||(l[198]=t(" 文件。 "))]),n("p",null,[l[204]||(l[204]=t(" 您会看到运行应用程序的代码位于 ")),u(p,null,{default:o(()=>l[199]||(l[199]=[t("src/main/kotlin")])),_:1}),l[205]||(l[205]=t(" 下的包中。默认包名为 ")),u(p,null,{default:o(()=>l[200]||(l[200]=[t("com.example")])),_:1}),l[206]||(l[206]=t(" ，其中包含一个名为 ")),u(p,null,{default:o(()=>l[201]||(l[201]=[t("plugins")])),_:1}),l[207]||(l[207]=t(" 的子包。 这两个包中创建了两个文件，分别命名为 ")),u(p,null,{default:o(()=>l[202]||(l[202]=[t("Application.kt")])),_:1}),l[208]||(l[208]=t(" 和 ")),u(p,null,{default:o(()=>l[203]||(l[203]=[t("Routing.kt")])),_:1})]),l[220]||(l[220]=n("img",{src:N,alt:"Ktor 项目 src 文件夹结构",width:"400"},null,-1)),n("p",null,[l[210]||(l[210]=t("项目名称在 ")),u(p,null,{default:o(()=>l[209]||(l[209]=[t("settings-gradle.kts")])),_:1}),l[211]||(l[211]=t(" 中配置。 "))]),l[221]||(l[221]=n("img",{src:G,alt:"settings.gradle.kt 的内容",width:"706"},null,-1)),n("p",null,[l[213]||(l[213]=t(" 配置文件和其他类型的内容位于 ")),u(p,null,{default:o(()=>l[212]||(l[212]=[t("src/main/resources")])),_:1}),l[214]||(l[214]=t(" 文件夹中。 "))]),l[222]||(l[222]=n("img",{src:W,alt:"Ktor 项目 resources 文件夹结构",width:"400"},null,-1)),n("p",null,[l[216]||(l[216]=t(" 一个骨架测试已在 ")),u(p,null,{default:o(()=>l[215]||(l[215]=[t("src/test/kotlin")])),_:1}),l[217]||(l[217]=t(" 下的包中创建。 "))]),l[223]||(l[223]=n("img",{src:M,alt:"Ktor 项目 test 文件夹结构",width:"400"},null,-1))]),_:1}),u(f,{title:"运行项目",id:"run"},{default:o(()=>[u(m,null,{default:o(()=>[l[237]||(l[237]=n("p",null,"要在 IntelliJ IDEA 中运行项目：",-1)),u(r,null,{default:o(()=>l[224]||(l[224]=[n("p",null,[t("通过点击右侧边栏上的 Gradle 图标 ("),n("img",{alt:"intelliJ IDEA Gradle 图标",src:Q,width:"16",height:"26"}),t(") 打开 "),n("a",{href:"https://www.jetbrains.com/help/idea/jetgradle-tool-window.html"},"Gradle 工具 窗口"),t("。")],-1),n("img",{src:U,alt:"IntelliJ IDEA 中的 Gradle 选项卡","border-effect":"line",width:"706"},null,-1)])),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[227]||(l[227]=t("在此工具窗口中，导航到 ")),u(k,null,{default:o(()=>l[225]||(l[225]=[t("任务 | application")])),_:1}),l[228]||(l[228]=t(" 并双击 ")),u(i,null,{default:o(()=>l[226]||(l[226]=[t("run")])),_:1}),l[229]||(l[229]=t(" 任务。 "))]),l[230]||(l[230]=n("img",{src:$,alt:"IntelliJ IDEA 中的 Gradle 选项卡","border-effect":"line",width:"450"},null,-1))]),_:1}),u(r,null,{default:o(()=>[l[234]||(l[234]=n("p",null,[t("您的 Ktor 应用程序将在 IDE 底部的 "),n("a",{href:"https://www.jetbrains.com/help/idea/run-tool-window.html"},"运行工具窗口"),t("中启动：")],-1)),l[235]||(l[235]=n("img",{src:q,alt:"项目正在终端中运行",width:"706"},null,-1)),n("p",null,[l[232]||(l[232]=t("之前在命令行中显示的消息现在将显示在 ")),u(k,null,{default:o(()=>l[231]||(l[231]=[t("运行")])),_:1}),l[233]||(l[233]=t(" 工具窗口中。 "))])]),_:1}),u(r,null,{default:o(()=>l[236]||(l[236]=[n("p",null,[t("要确认项目正在运行，请在指定 URL ("),n("a",{href:"http://0.0.0.0:8080"},[n("a",{href:"http://0.0.0.0:8080",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:8080")]),t(") 处打开您的浏览器。")],-1),n("p",null,"您应该会再次看到屏幕上显示“Hello World!”消息：",-1),n("img",{src:I,alt:"浏览器屏幕中的 Hello World",width:"706"},null,-1)])),_:1})]),_:1}),n("p",null,[l[239]||(l[239]=t(" 您可以通过 ")),u(k,null,{default:o(()=>l[238]||(l[238]=[t("运行")])),_:1}),l[240]||(l[240]=t(" 工具窗口管理应用程序。 "))]),u(K,{type:"bullet"},{default:o(()=>l[241]||(l[241]=[n("li",null,[t(" 要终止应用程序，请点击停止按钮 "),n("img",{src:B,style:{},height:"16",width:"16",alt:"intelliJ IDEA 终止图标"})],-1),n("li",null,[t(" 要重新启动进程，请点击重新运行按钮 "),n("img",{src:b,style:{},height:"16",width:"16",alt:"intelliJ IDEA 重新运行图标"})],-1)])),_:1}),l[242]||(l[242]=n("p",null,[t(" 这些选项在 "),n("a",{href:"https://www.jetbrains.com/help/idea/run-tool-window.html#run-toolbar"},"IntelliJ IDEA 运行 工具窗口文档"),t("中有进一步解释。 ")],-1))]),_:1})]),_:1}),u(f,{title:"可尝试的附加任务",id:"additional-tasks"},{default:o(()=>[l[383]||(l[383]=n("p",null,"以下是一些您可能希望尝试的附加任务：",-1)),u(K,{type:"decimal"},{default:o(()=>l[243]||(l[243]=[n("li",null,[n("a",{href:"#change-the-default-port"},"更改默认端口。")],-1),n("li",null,[n("a",{href:"#change-the-port-via-yaml"},"通过 YAML 更改端口。")],-1),n("li",null,[n("a",{href:"#add-a-new-http-endpoint"},"添加新的 HTTP 端点。")],-1),n("li",null,[n("a",{href:"#configure-static-content"},"配置静态内容。")],-1),n("li",null,[n("a",{href:"#write-an-integration-test"},"编写集成测试。")],-1),n("li",null,[n("a",{href:"#register-error-handlers"},"注册错误处理器。")],-1)])),_:1}),l[384]||(l[384]=n("p",null," 这些任务彼此独立，但复杂性逐渐增加。按照声明的顺序尝试它们是 逐步学习的最简单方法。为简单起见，并避免重复，以下说明 假设您按顺序尝试这些任务。 ",-1)),l[385]||(l[385]=n("p",null," 需要编码的地方，我们已同时指定了代码和相应的导入。IDE 可能会为您 自动添加这些导入。 ",-1)),u(f,{title:"更改默认端口",id:"change-the-default-port"},{default:o(()=>[n("p",null,[l[246]||(l[246]=t(" 在")),u(k,null,{default:o(()=>l[244]||(l[244]=[t("项目")])),_:1}),l[247]||(l[247]=t(" 视图中，导航到 ")),u(p,null,{default:o(()=>l[245]||(l[245]=[t("src/main/kotlin")])),_:1}),l[248]||(l[248]=t(" 文件夹，然后进入为您创建的单个包并按照步骤操作： "))]),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[n("p",null,[l[250]||(l[250]=t("打开 ")),u(p,null,{default:o(()=>l[249]||(l[249]=[t("Application.kt")])),_:1}),l[251]||(l[251]=t(" 文件。您应该会找到类似以下的代码： "))]),u(d,{lang:"kotlin",code:`                        fun main() {
                            embeddedServer(
                                Netty,
                                port = 8080, // This is the port on which Ktor is listening
                                host = "0.0.0.0",
                                module = Application::module
                            ).start(wait = true)
                        }

                        fun Application.module() {
                            configureRouting()
                        }`})]),_:1}),u(r,null,{default:o(()=>[l[252]||(l[252]=n("p",null,[t("在 "),n("code",null,"embeddedServer()"),t(" 函数中，将 "),n("code",null,"port"),t(" 形参 更改为您选择的另一个数字，例如“9292”。")],-1)),u(d,{lang:"kotlin",code:`                        fun main() {
                            embeddedServer(
                                Netty,
                                port = 9292,
                                host = "0.0.0.0",
                                module = Application::module
                            ).start(wait = true)
                        }`})]),_:1}),u(r,null,{default:o(()=>l[253]||(l[253]=[n("p",null,[t("点击重新运行按钮 ("),n("img",{alt:"intelliJ IDEA 重新运行按钮图标",src:b,height:"16",width:"16"}),t(") 以重新启动应用程序。")],-1)])),_:1}),u(r,null,{default:o(()=>l[254]||(l[254]=[n("p",null,[t("要验证您的应用程序是否正在新的端口号下运行，您可以在新 URL ("),n("a",{href:"http://0.0.0.0:9292"},[n("a",{href:"http://0.0.0.0:9292",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:9292")]),t(") 打开浏览器，或者 "),n("a",{href:"https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html#creating-http-request-files"},"在 IntelliJ IDEA 中创建 新的 HTTP 请求文件"),t("：")],-1),n("img",{src:Y,alt:"在 IntelliJ IDEA 中使用 HTTP 请求文件测试端口更改",width:"706"},null,-1)])),_:1})]),_:1})]),_:1}),u(f,{title:"通过 YAML 更改端口",id:"change-the-port-via-yaml"},{default:o(()=>[l[258]||(l[258]=n("p",null," 创建新的 Ktor 项目时，您可以选择将配置外部存储在 YAML 或 HOCON 文件中： ",-1)),l[259]||(l[259]=n("img",{src:z,width:"400",alt:"Ktor 项目生成器配置选项"},null,-1)),l[260]||(l[260]=n("p",null,[t(" 如果您选择将配置外部存储，那么 "),n("code",null,"Application.kt"),t(" 中的代码将是这样： ")],-1)),u(d,{lang:"kotlin",code:`                fun main(args: Array<String>): Unit =
                    io.ktor.server.netty.EngineMain.main(args)

                @Suppress("unused")
                fun Application.module() {
                    configureRouting()
                }`}),n("p",null,[l[256]||(l[256]=t(" 这些值将存储在 ")),u(p,null,{default:o(()=>l[255]||(l[255]=[t("src/main/resources/")])),_:1}),l[257]||(l[257]=t(" 目录中的配置文件中： "))]),u(v,null,{default:o(()=>[u(g,{title:"application.yaml (YAML)","group-key":"yaml"},{default:o(()=>[u(d,{lang:"yaml",code:`                        ktor:
                            application:
                                modules:
                                    - com.example.ApplicationKt.module
                            deployment:
                                port: 8080`})]),_:1}),u(g,{title:"application.conf (HOCON)","group-key":"hocon"},{default:o(()=>[u(d,{lang:"json",code:`                        ktor {
                            deployment {
                                port = 8080
                                port = \${?PORT}
                            }
                            application {
                                modules = [ com.example.ApplicationKt.module ]
                            }
                        }`})]),_:1})]),_:1}),l[261]||(l[261]=n("p",null,[t(" 在这种情况下，您无需更改任何代码即可更改端口号。只需修改 YAML 或 HOCON 文件中的值并重新启动应用程序即可。更改可以通过与上述"),n("a",{href:"#change-the-default-port"},"默认端口"),t(" 相同的方式进行验证。 ")],-1))]),_:1}),u(f,{title:"添加新的 HTTP 端点",id:"add-a-new-http-endpoint"},{default:o(()=>[l[284]||(l[284]=n("p",null,[t("接下来，您将创建一个新的 HTTP 端点，它将响应 "),n("code",null,"GET"),t(" 请求。")],-1)),n("p",null,[l[264]||(l[264]=t(" 在")),u(k,null,{default:o(()=>l[262]||(l[262]=[t("项目")])),_:1}),l[265]||(l[265]=t(" 工具窗口中，导航到 ")),u(p,null,{default:o(()=>l[263]||(l[263]=[t("src/main/kotlin/com/example")])),_:1}),l[266]||(l[266]=t(" 文件夹并按照步骤操作： "))]),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[n("p",null,[l[268]||(l[268]=t("打开 ")),u(p,null,{default:o(()=>l[267]||(l[267]=[t("Application.kt")])),_:1}),l[269]||(l[269]=t(" 文件并找到 ")),l[270]||(l[270]=n("code",null,"configureRouting()",-1)),l[271]||(l[271]=t(" 函数。 "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[273]||(l[273]=t("在 IntelliJ IDEA 中，将光标放在函数名称上并按下 ")),u(w,null,{default:o(()=>l[272]||(l[272]=[t("⌘Cmd+B")])),_:1}),l[274]||(l[274]=t(" 即可导航到 ")),l[275]||(l[275]=n("code",null,"configureRouting()",-1)),l[276]||(l[276]=t(" 函数。 "))]),l[277]||(l[277]=n("p",null,[t("或者，您可以通过打开 "),n("code",null,"Routing.kt"),t(" 文件来导航到该函数。")],-1)),l[278]||(l[278]=n("p",null,"您应该会看到以下代码：",-1)),u(d,{lang:"Kotlin",validate:"true",code:`                        fun Application.configureRouting() {
                            routing {
                                get("/") {
                                    call.respondText("Hello World!")
                                }
                            }
                        }`})]),_:1}),u(r,null,{default:o(()=>[l[279]||(l[279]=n("p",null,"要创建新端点，请插入以下所示的额外五行代码：",-1)),u(d,{lang:"kotlin",code:`fun Application.configureRouting() {
    routing {
        get("/") {
            call.respondText("Hello World!")
        }

        get("/test1") {
            val text = "<h1>Hello From Ktor</h1>"
            val type = ContentType.parse("text/html")
            call.respondText(text, type)
        }
    }
}`}),l[280]||(l[280]=n("p",null,[t("请注意，您可以将 "),n("code",null,"/test1"),t(" URL 更改为您喜欢的任何内容。")],-1))]),_:1}),u(r,null,{default:o(()=>[l[281]||(l[281]=n("p",null,[t("为了使用 "),n("code",null,"ContentType"),t("，请添加以下导入：")],-1)),u(d,{lang:"kotlin",code:"                        import io.ktor.http.*"})]),_:1}),u(r,null,{default:o(()=>l[282]||(l[282]=[n("p",null,[t("点击重新运行按钮 ("),n("img",{alt:"intelliJ IDEA 重新运行按钮图标",src:b,height:"16",width:"16"}),t(") 以重新启动应用程序。")],-1)])),_:1}),u(r,null,{default:o(()=>l[283]||(l[283]=[n("p",null,[t("在浏览器中请求新 URL ("),n("a",{href:"http://0.0.0.0:9292/test1"},[n("a",{href:"http://0.0.0.0:9292/test1",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:9292/test1")]),t(")。您应该使用的 端口号取决于您是否已尝试第一个任务（"),n("a",{href:"#change-the-default-port"},"更改默认端口"),t("）。您应该会看到以下输出：")],-1),n("img",{src:F,alt:"显示“Hello from Ktor”的浏览器屏幕",width:"706"},null,-1),n("p",null,"如果您已创建 HTTP 请求文件，您也可以在那里验证新端点：",-1),n("img",{src:V,alt:"IntelliJ IDEA 中的 HTTP 请求文件",width:"450"},null,-1),n("p",null,[t("请注意，需要一行包含三个哈希符号（"),n("code",null,"###"),t("）来分隔不同的请求。")],-1)])),_:1})]),_:1})]),_:1}),u(f,{title:"配置静态内容",id:"configure-static-content"},{default:o(()=>[n("p",null,[l[287]||(l[287]=t("在")),u(k,null,{default:o(()=>l[285]||(l[285]=[t("项目")])),_:1}),l[288]||(l[288]=t(" 工具窗口中，导航到 ")),u(p,null,{default:o(()=>l[286]||(l[286]=[t("src/main/kotlin/com/example/plugins")])),_:1}),l[289]||(l[289]=t(" 文件夹并按照步骤操作： "))]),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[l[290]||(l[290]=n("p",null,[t("打开 "),n("code",null,"Routing.kt"),t(" 文件。")],-1)),l[291]||(l[291]=n("p",null,"同样，这应该是默认内容：",-1)),u(d,{lang:"kotlin",code:`                        fun Application.configureRouting() {
                            routing {
                                get("/") {
                                    call.respondText("Hello World!")
                                }
                            }
                        }`}),l[292]||(l[292]=n("p",null,[t("对于此任务，您是否已插入“"),n("a",{href:"#add-a-new-http-endpoint"},"添加新的 HTTP 端点"),t("”中指定的额外端点内容并不重要。")],-1))]),_:1}),u(r,null,{default:o(()=>[l[294]||(l[294]=n("p",null,"将以下行添加到路由部分：",-1)),u(d,{lang:"kotlin",code:`                        fun Application.configureRouting() {
                            routing {
                                // 添加下方行
                                staticResources("/content", "mycontent")

                                get("/") {
                                    call.respondText("Hello World!")
                                }
                            }
                        }`}),l[295]||(l[295]=n("p",null,"此行的含义如下：",-1)),u(K,{type:"bullet"},{default:o(()=>l[293]||(l[293]=[n("li",null,[t("调用 "),n("code",null,"staticResources()"),t(" 告诉 Ktor，我们希望应用程序能够提供标准的网站内容，例如 HTML 和 JavaScript 文件。尽管这些内容可以在浏览器中执行，但从 服务器的角度来看，它被认为是静态的。 ")],-1),n("li",null,[t("URL "),n("code",null,"/content"),t(" 指定了用于获取此内容的路径。 ")],-1),n("li",null,[t("路径 "),n("code",null,"mycontent"),t(" 是静态内容将驻留的文件夹名称。Ktor 会在 "),n("code",null,"resources"),t(" 目录中查找此 文件夹。 ")],-1)])),_:1})]),_:1}),u(r,null,{default:o(()=>[l[296]||(l[296]=n("p",null,"添加以下导入：",-1)),u(d,{lang:"kotlin",code:"                        import io.ktor.server.http.content.*"})]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[299]||(l[299]=t("在 ")),u(i,null,{default:o(()=>l[297]||(l[297]=[t("项目")])),_:1}),l[300]||(l[300]=t(" 工具窗口中，右键点击 ")),l[301]||(l[301]=n("code",null,"src/main/resources",-1)),l[302]||(l[302]=t(" 文件夹并选择 ")),u(i,null,{default:o(()=>l[298]||(l[298]=[t("新建 | 目录")])),_:1}),l[303]||(l[303]=t(" 。 "))]),n("p",null,[l[306]||(l[306]=t("或者，选择 ")),l[307]||(l[307]=n("code",null,"src/main/resources",-1)),l[308]||(l[308]=t(" 文件夹，按下 ")),u(w,null,{default:o(()=>l[304]||(l[304]=[t("⌘Сmd+N")])),_:1}),l[309]||(l[309]=t(" ，然后点击 ")),u(i,null,{default:o(()=>l[305]||(l[305]=[t("目录")])),_:1}),l[310]||(l[310]=t(" 。 "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[312]||(l[312]=t("将新目录命名为 ")),l[313]||(l[313]=n("code",null,"mycontent",-1)),l[314]||(l[314]=t(" 并按下 ")),u(w,null,{default:o(()=>l[311]||(l[311]=[t("↩Enter")])),_:1}),l[315]||(l[315]=t(" 键。 "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[317]||(l[317]=t("右键点击新创建的文件夹并点击 ")),u(i,null,{default:o(()=>l[316]||(l[316]=[t("新建 | 文件")])),_:1}),l[318]||(l[318]=t(" 。 "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[320]||(l[320]=t("将新文件命名为“")),l[321]||(l[321]=n("code",null,"sample.html",-1)),l[322]||(l[322]=t("”并按下 ")),u(w,null,{default:o(()=>l[319]||(l[319]=[t("↩Enter")])),_:1}),l[323]||(l[323]=t(" 键。 "))])]),_:1}),u(r,null,{default:o(()=>[l[324]||(l[324]=n("p",null,"使用有效的 HTML 内容填充新创建的文件页面，例如：",-1)),u(d,{lang:"html",code:`<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <title>My sample</title>
    </head>
    <body>
        <h1>This page is built with:</h1>
    <ol>
        <li>Ktor</li>
        <li>Kotlin</li>
        <li>HTML</li>
    </ol>
    </body>
</html>`})]),_:1}),u(r,null,{default:o(()=>l[325]||(l[325]=[n("p",null,[t("点击重新运行按钮 ("),n("img",{alt:"intelliJ IDEA 重新运行按钮图标",src:b,height:"16",width:"16"}),t(") 以重新启动应用程序。")],-1)])),_:1}),u(r,null,{default:o(()=>l[326]||(l[326]=[n("p",null,[t("当您在 "),n("a",{href:"http://0.0.0.0:9292/content/sample.html"},[n("a",{href:"http://0.0.0.0:9292/content/sample.html",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:9292/content/sample.html")]),t(" 打开浏览器时，应该会显示您的示例页面内容：")],-1),n("img",{src:X,alt:"浏览器中静态页面的输出",width:"706"},null,-1)])),_:1})]),_:1})]),_:1}),u(f,{title:"编写集成测试",id:"write-an-integration-test"},{default:o(()=>[n("p",null,[l[328]||(l[328]=t(" Ktor 提供了")),u(s,{href:"/ktor/server-testing",summary:"%plugin_name% 允许 Ktor 应用程序根据抛出的异常或状态码适当地响应任何故障状态。"},{default:o(()=>l[327]||(l[327]=[t("创建集成测试")])),_:1}),l[329]||(l[329]=t("的支持，并且您生成的项目捆绑了此功能。 "))]),l[352]||(l[352]=n("p",null,"要使用此功能，请按照以下步骤操作：",-1)),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[n("p",null,[l[331]||(l[331]=t(" 在 ")),u(p,null,{default:o(()=>l[330]||(l[330]=[t("src")])),_:1}),l[332]||(l[332]=t(" 下创建一个名为“")),l[333]||(l[333]=n("code",null,"test",-1)),l[334]||(l[334]=t("”的新目录，并在其下创建一个名为“")),l[335]||(l[335]=n("code",null,"kotlin",-1)),l[336]||(l[336]=t("”的子目录。 "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[338]||(l[338]=t("在 ")),u(p,null,{default:o(()=>l[337]||(l[337]=[t("src/test/kotlin")])),_:1}),l[339]||(l[339]=t(" 内部创建一个名为“")),l[340]||(l[340]=n("code",null,"com.example",-1)),l[341]||(l[341]=t("”的新包。 "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[343]||(l[343]=t(" 在 ")),u(p,null,{default:o(()=>l[342]||(l[342]=[t("src/test/kotlin/com.example")])),_:1}),l[344]||(l[344]=t(" 中创建一个名为“")),l[345]||(l[345]=n("code",null,"ApplicationTest.kt",-1)),l[346]||(l[346]=t("”的新文件。 "))])]),_:1}),u(r,null,{default:o(()=>[l[347]||(l[347]=n("p",null,[t("打开 "),n("code",null,"ApplicationTest.kt"),t(" 文件并添加以下代码：")],-1)),u(d,{lang:"kotlin",code:`                        class ApplicationTest {

                            @Test
                            fun testRoot() = testApplication {
                                application {
                                    module()
                                }
                                val response = client.get("/")

                                assertEquals(HttpStatusCode.OK, response.status)
                                assertEquals("Hello World!", response.bodyAsText())
                            }
                        }`}),l[348]||(l[348]=n("p",null,[n("code",null,"testApplication()"),t(" 方法创建 Ktor 的新实例。此实例在测试环境中运行，而 不是像 Netty 这样的服务器中运行。")],-1)),l[349]||(l[349]=n("p",null,[t("然后，您可以使用 "),n("code",null,"application()"),t(" 方法来调用与 "),n("code",null,"embeddedServer()"),t(" 中调用的相同设置。")],-1)),l[350]||(l[350]=n("p",null,[t("最后，您可以使用内置的 "),n("code",null,"client"),t(" 对象和 JUnit 断言来发送示例请求并检测响应。")],-1))]),_:1}),u(r,null,{default:o(()=>[l[351]||(l[351]=n("p",null,"添加以下所需的导入：",-1)),u(d,{lang:"kotlin",code:`                        import io.ktor.client.request.*
                        import io.ktor.client.statement.*
                        import io.ktor.http.*
                        import io.ktor.server.testing.*
                        import org.junit.Assert.assertEquals
                        import org.junit.Test`})]),_:1})]),_:1}),l[353]||(l[353]=n("p",null,[t(" 该测试可以通过 IntelliJ IDEA 中执行测试的任何标准方式运行。请注意，由于您正在运行 Ktor 的新实例，因此测试的成功或失败不取决于您的应用程序是否在 "),n("code",null,"0.0.0.0"),t(" 上运行。 ")],-1)),l[354]||(l[354]=n("p",null,[t(" 如果您已成功完成"),n("a",{href:"#add-a-new-http-endpoint"},"添加新的 HTTP 端点"),t("任务， 您应该能够添加此附加测试： ")],-1)),u(d,{lang:"Kotlin",code:`                @Test
                fun testNewEndpoint() = testApplication {
                    application {
                        module()
                    }

                    val response = client.get("/test1")

                    assertEquals(HttpStatusCode.OK, response.status)
                    assertEquals("html", response.contentType()?.contentSubtype)
                    assertContains(response.bodyAsText(), "Hello From Ktor")
                }`}),l[355]||(l[355]=n("p",null,"需要以下附加导入：",-1)),u(d,{lang:"Kotlin",code:"                import kotlin.test.assertContains"})]),_:1}),u(f,{title:"注册错误处理器",id:"register-error-handlers"},{default:o(()=>[n("p",null,[l[357]||(l[357]=t(" 您可以使用 ")),u(s,{href:"/ktor/server-status-pages",summary:"%plugin_name% 允许 Ktor 应用程序根据抛出的异常或状态码适当地响应任何故障状态。"},{default:o(()=>l[356]||(l[356]=[t("StatusPages 插件")])),_:1}),l[358]||(l[358]=t("在 Ktor 应用程序中处理错误。 "))]),n("p",null,[l[360]||(l[360]=t(" 此插件默认不包含在您的项目中。您本可以通过 Ktor 项目生成器中的")),u(k,null,{default:o(()=>l[359]||(l[359]=[t("插件")])),_:1}),l[361]||(l[361]=t("部分或 IntelliJ IDEA 中的项目向导将其添加到您的项目中。由于您已经创建了项目，接下来的步骤 将教您如何手动添加和配置该插件。 "))]),l[381]||(l[381]=n("p",null," 实现此目标需要四个步骤： ",-1)),u(K,{type:"decimal"},{default:o(()=>l[362]||(l[362]=[n("li",null,[n("a",{href:"#add-dependency"},"在 Gradle 构建文件中添加新的依赖项。")],-1),n("li",null,[n("a",{href:"#install-plugin-and-specify-handler"},"安装插件并指定异常处理器。")],-1),n("li",null,[n("a",{href:"#write-sample-code"},"编写示例代码以触发处理器。")],-1),n("li",null,[n("a",{href:"#restart-and-invoke"},"重新启动并调用示例代码。")],-1)])),_:1}),u(m,{title:"添加新的依赖项",id:"add-dependency"},{default:o(()=>[n("p",null,[l[364]||(l[364]=t("在 ")),u(i,null,{default:o(()=>l[363]||(l[363]=[t("项目")])),_:1}),l[365]||(l[365]=t(" 工具窗口中，导航到项目根文件夹并按照步骤操作： "))]),u(r,null,{default:o(()=>l[366]||(l[366]=[n("p",null,[t("打开 "),n("code",null,"build.gradle.kts"),t(" 文件。")],-1)])),_:1}),u(r,null,{default:o(()=>[l[367]||(l[367]=n("p",null,[t("在 "),n("code",null,"dependencies"),t(" 部分添加额外的依赖项，如下所示：")],-1)),u(d,{lang:"kotlin",code:`                        dependencies {
                            // 要添加的新依赖项
                            implementation("io.ktor:ktor-server-status-pages:$ktor_version")
                            // 现有依赖项
                            implementation("io.ktor:ktor-server-core-jvm:$ktor_version")
                            implementation("io.ktor:ktor-server-netty-jvm:$ktor_version")
                            implementation("ch.qos.logback:logback-classic:$logback_version")
                            testImplementation("io.ktor:ktor-server-test-host-jvm:$ktor_version")
                            testImplementation("org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version")
                        }`}),l[368]||(l[368]=n("p",null,"完成此操作后，您需要重新加载项目以识别此新依赖项。",-1))]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[371]||(l[371]=t("通过在 macOS 上按下 ")),u(w,null,{default:o(()=>l[369]||(l[369]=[t("Shift+⌘Cmd+I")])),_:1}),l[372]||(l[372]=t(" 或在 Windows 上按下 ")),u(w,null,{default:o(()=>l[370]||(l[370]=[t("Ctrl+Shift+O")])),_:1}),l[373]||(l[373]=t(" 来重新加载项目。 "))])]),_:1})]),_:1}),u(m,{title:"安装插件并指定异常处理器",id:"install-plugin-and-specify-handler"},{default:o(()=>[u(r,null,{default:o(()=>[l[374]||(l[374]=n("p",null,[t("导航到 "),n("code",null,"Routing.kt"),t(" 中的 "),n("code",null,"configureRouting()"),t(" 方法并添加以下代码行：")],-1)),u(d,{lang:"kotlin",code:`fun Application.configureRouting() {
    install(StatusPages) {
        exception<IllegalStateException> { call, cause ->
            call.respondText("App in illegal state as \${cause.message}")
        }
    }
    routing {
        get("/") {
            call.respondText("Hello World!")
        }
    }
}`}),l[375]||(l[375]=n("p",null,[t("这些行安装 "),n("code",null,"StatusPages"),t(" 插件并指定当抛出 "),n("code",null,"IllegalStateException"),t(" 类型的异常时要采取的操作。")],-1))]),_:1}),u(r,null,{default:o(()=>[l[376]||(l[376]=n("p",null,"添加以下导入：",-1)),u(d,{lang:"kotlin",code:"                        import io.ktor.server.plugins.statuspages.*"})]),_:1})]),_:1}),l[382]||(l[382]=n("p",null," 请注意，HTTP 错误代码通常会在响应中设置，但出于此任务的目的，输出将直接显示在浏览器中。 ",-1)),u(m,{title:"编写示例代码以触发处理器",id:"write-sample-code"},{default:o(()=>[u(r,null,{default:o(()=>[l[377]||(l[377]=n("p",null,[t("在 "),n("code",null,"configureRouting()"),t(" 方法中，添加以下所示的额外行：")],-1)),u(d,{lang:"kotlin",code:`fun Application.configureRouting() {
    install(StatusPages) {
        exception<IllegalStateException> { call, cause ->
            call.respondText("App in illegal state as \${cause.message}")
        }
    }
    routing {
        get("/") {
            call.respondText("Hello World!")
        }
        get("/error-test") {
            throw IllegalStateException("Too Busy")
        }
    }
}`}),l[378]||(l[378]=n("p",null,[t("您现在已添加了一个 URL 为 "),n("code",null,"/error-test"),t(" 的端点。当此端点被触发时，将 抛出处理器中使用的类型的异常。")],-1))]),_:1})]),_:1}),u(m,{title:"重新启动并调用示例代码",id:"restart-and-invoke"},{default:o(()=>[u(r,null,{default:o(()=>l[379]||(l[379]=[n("p",null,[t("点击重新运行按钮 ("),n("img",{alt:"intelliJ IDEA 重新运行按钮图标",src:b,height:"16",width:"16"}),t(") 以重新启动应用程序。")],-1)])),_:1}),u(r,null,{default:o(()=>l[380]||(l[380]=[n("p",null,[t("在您的浏览器中，导航到 URL "),n("a",{href:"http://0.0.0.0:9292/error-test"},[n("a",{href:"http://0.0.0.0:9292/error-test",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:9292/error-test")]),t("。 您应该会看到如下所示的错误消息：")],-1),n("img",{src:Z,alt:"显示消息“App in illegal state as Too Busy”的浏览器屏幕",width:"706"},null,-1)])),_:1})]),_:1})]),_:1})]),_:1}),u(f,{title:"后续步骤",id:"next_steps"},{default:o(()=>[l[389]||(l[389]=n("p",null," 如果您已完成附加任务，您现在应该掌握了 Ktor 服务器的配置、Ktor 插件的集成以及新路由的实现。然而，这仅仅是开始。要深入了解 Ktor 的基础概念，请继续学习本指南中的下一个教程。 ",-1)),n("p",null,[l[387]||(l[387]=t(" 接下来，您将学习如何通过创建任务管理器应用程序来")),u(s,{href:"/ktor/server-requests-and-responses",summary:"通过构建任务管理器应用程序，了解如何使用 Ktor 在 Kotlin 中进行路由、处理请求和参数的基础知识。"},{default:o(()=>l[386]||(l[386]=[t("处理请求并 生成响应")])),_:1}),l[388]||(l[388]=t("。 "))])]),_:1})]),_:1})])}const gl=_(ll,[["render",tl]]);export{ml as __pageData,gl as default};
