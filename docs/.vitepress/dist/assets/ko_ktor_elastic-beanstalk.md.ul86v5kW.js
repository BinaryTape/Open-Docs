import{_ as c,C as t,c as u,o as g,j as s,G as a,ag as p,a as i,w as n}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/elastic-beanstalk.md","filePath":"ko/ktor/elastic-beanstalk.md","lastUpdated":1755457140000}'),b={name:"ko/ktor/elastic-beanstalk.md"};function m(E,e,f,y,v,_){const d=t("show-structure"),o=t("control"),h=t("tldr"),l=t("code-block"),r=t("TabItem"),k=t("Tabs");return g(),u("div",null,[e[8]||(e[8]=s("h1",{id:"aws-elastic-beanstalk",tabindex:"-1"},[i("AWS Elastic Beanstalk "),s("a",{class:"header-anchor",href:"#aws-elastic-beanstalk","aria-label":'Permalink to "AWS Elastic Beanstalk"'},"​")],-1)),a(d,{for:"chapter",depth:"2"}),a(h,null,{default:n(()=>[s("p",null,[a(o,null,{default:n(()=>e[0]||(e[0]=[i("초기 프로젝트")])),_:1}),e[1]||(e[1]=i(": ")),e[2]||(e[2]=s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/embedded-server"},"embedded-server",-1)),e[3]||(e[3]=i(" 또는 ")),e[4]||(e[4]=s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main"},"engine-main",-1))]),s("p",null,[a(o,null,{default:n(()=>e[5]||(e[5]=[i("최종 프로젝트")])),_:1}),e[6]||(e[6]=i(": ")),e[7]||(e[7]=s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/aws-elastic-beanstalk"},"aws-elastic-beanstalk",-1))])]),_:1}),e[9]||(e[9]=p(`<p>이 튜토리얼에서는 Ktor 애플리케이션을 AWS Elastic Beanstalk에 준비하고 배포하는 방법을 보여드립니다. <a href="./server-create-and-configure">Ktor 서버 생성</a> 방식에 따라 다음 초기 프로젝트 중 하나를 사용할 수 있습니다.</p><ul><li><a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/embedded-server" target="_blank" rel="noreferrer">embedded-server</a></li><li><a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">engine-main</a></li></ul><blockquote><p>Java 애플리케이션 배포에 대한 자세한 내용은 <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Java.html" target="_blank" rel="noreferrer">Elastic Beanstalk 문서</a>에서 확인하세요.</p></blockquote><h2 id="prerequisites" tabindex="-1">전제 조건 <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;전제 조건 {id=&quot;prerequisites&quot;}&quot;">​</a></h2><p>이 튜토리얼을 시작하기 전에 AWS 계정을 생성해야 합니다.</p><h2 id="clone" tabindex="-1">샘플 애플리케이션 복제 <a class="header-anchor" href="#clone" aria-label="Permalink to &quot;샘플 애플리케이션 복제 {id=&quot;clone&quot;}&quot;">​</a></h2><p>샘플 애플리케이션을 열려면 다음 단계를 따르세요.</p><ol><li>Ktor 문서 저장소를 복제하고 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets" target="_blank" rel="noreferrer">codeSnippets</a> 프로젝트를 엽니다.</li><li><a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/embedded-server" target="_blank" rel="noreferrer">embedded-server</a> 또는 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">engine-main</a> 샘플을 엽니다. 이 샘플들은 <a href="./server-create-and-configure">Ktor 서버 생성 및 구성</a>에 대한 다른 접근 방식을 보여줍니다: 코드에서 또는 구성 파일을 사용하여. 이 프로젝트들을 배포할 때 유일한 차이점은 들어오는 요청을 수신하는 데 사용되는 <a href="#port">포트를 지정하는 방법</a>입니다.</li></ol><h2 id="prepare-app" tabindex="-1">애플리케이션 준비 <a class="header-anchor" href="#prepare-app" aria-label="Permalink to &quot;애플리케이션 준비 {id=&quot;prepare-app&quot;}&quot;">​</a></h2><h3 id="port" tabindex="-1">1단계: 포트 구성 <a class="header-anchor" href="#port" aria-label="Permalink to &quot;1단계: 포트 구성 {id=&quot;port&quot;}&quot;">​</a></h3><p>먼저, 들어오는 요청을 수신하는 데 사용될 포트를 지정해야 합니다. Elastic Beanstalk는 5000번 포트에서 애플리케이션으로 요청을 전달합니다. 선택적으로, <code>PORT</code> 환경 변수를 설정하여 기본 포트를 재정의할 수 있습니다. <a href="./server-create-and-configure">Ktor 서버를 구성</a>하는 방식에 따라 다음 방법 중 하나로 포트를 구성할 수 있습니다.</p><ul><li><p>서버 구성이 코드에 지정된 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/embedded-server" target="_blank" rel="noreferrer">embedded-server</a> 샘플을 선택한 경우, <code>System.getenv</code>를 사용하여 환경 변수 값을 얻거나, 환경 변수가 지정되지 않은 경우 기본값인 _5000_을 사용할 수 있습니다. <code>src/main/kotlin/com/example</code> 폴더에 있는 <code>Application.kt</code> 파일을 열고 <code>embeddedServer</code> 함수의 <code>port</code> 매개변수 값을 아래와 같이 변경합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   embeddedServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Netty, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PORT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wait </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>서버 구성이 <code>application.conf</code> 파일에 지정된 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">engine-main</a> 샘플을 선택한 경우, <code>\${ENV}</code> 구문을 사용하여 환경 변수를 <code>port</code> 매개변수에 할당할 수 있습니다. <code>src/main/resources</code>에 있는 <code>application.conf</code> 파일을 열고 아래와 같이 업데이트합니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ktor {</span></span>
<span class="line"><span>    deployment {</span></span>
<span class="line"><span>        port = 5000</span></span>
<span class="line"><span>        port = \${?PORT}</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div></li></ul><h3 id="configure-ktor-plugin" tabindex="-1">2단계: Ktor 플러그인 적용 <a class="header-anchor" href="#configure-ktor-plugin" aria-label="Permalink to &quot;2단계: Ktor 플러그인 적용 {id=&quot;configure-ktor-plugin&quot;}&quot;">​</a></h3><p>이 튜토리얼은 <a href="./server-fatjar">fat JAR</a>를 사용하여 Elastic Beanstalk에 애플리케이션을 배포하는 방법을 보여줍니다. fat JAR를 생성하려면 Ktor 플러그인을 적용해야 합니다. <code>build.gradle.kts</code> 파일을 열고 <code>plugins</code> 블록에 플러그인을 추가합니다.</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugins {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.ktor.plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>그런 다음, <a href="./server-dependencies#create-entry-point">메인 애플리케이션 클래스</a>가 구성되었는지 확인합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mainClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.ktor.server.netty.EngineMain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="build" tabindex="-1">Fat JAR 빌드 <a class="header-anchor" href="#build" aria-label="Permalink to &quot;Fat JAR 빌드 {id=&quot;build&quot;}&quot;">​</a></h2><p>Fat JAR를 빌드하려면 터미널을 열고 <a href="#configure-ktor-plugin">Ktor 플러그인</a>이 제공하는 <code>buildFatJar</code> 태스크를 실행합니다.</p>`,19)),a(k,{group:"os"},{default:n(()=>[a(r,{title:"Linux/macOS","group-key":"unix"},{default:n(()=>[a(l,{code:"./gradlew :aws-elastic-beanstalk:buildFatJar"})]),_:1}),a(r,{title:"Windows","group-key":"windows"},{default:n(()=>[a(l,{code:"gradlew.bat :aws-elastic-beanstalk:buildFatJar"})]),_:1})]),_:1}),e[10]||(e[10]=p(`<p>이 빌드가 완료되면 <code>build/libs</code> 디렉터리에서 <code>aws-elastic-beanstalk-all.jar</code> 파일을 볼 수 있습니다.</p><h2 id="deploy-app" tabindex="-1">애플리케이션 배포 <a class="header-anchor" href="#deploy-app" aria-label="Permalink to &quot;애플리케이션 배포 {id=&quot;deploy-app&quot;}&quot;">​</a></h2><p>애플리케이션을 배포하려면 <a href="https://aws.amazon.com/console/" target="_blank" rel="noreferrer">AWS Management Console</a>에 로그인하고 다음 단계를 따르세요.</p><ol><li><strong>AWS 서비스</strong> 그룹에서 <strong>Elastic Beanstalk</strong> 서비스를 엽니다.</li><li>열린 페이지에서 <strong>애플리케이션 생성</strong>을 클릭합니다.</li><li>다음 애플리케이션 설정을 지정합니다. <ul><li><strong>애플리케이션 이름</strong>: 애플리케이션 이름을 지정합니다 (예: <em>Sample Ktor app</em>).</li><li><strong>플랫폼</strong>: 목록에서 _Java_를 선택합니다.</li><li><strong>플랫폼 브랜치</strong>: _Corretto 11 running on 64bit Amazon Linux 2_를 선택합니다.</li><li><strong>애플리케이션 코드</strong>: _코드 업로드_를 선택합니다.</li><li><strong>소스 코드 원본</strong>: _로컬 파일_을 선택합니다. 그런 다음 <strong>파일 선택</strong> 버튼을 클릭하고 <a href="#build">이전 단계</a>에서 생성된 Fat JAR를 선택합니다. 파일이 업로드될 때까지 기다립니다.</li></ul></li><li><strong>애플리케이션 생성</strong> 버튼을 클릭하고 Beanstalk가 환경을 생성하고 애플리케이션을 게시할 때까지 몇 분 정도 기다립니다.<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INFO    Instance deployment completed successfully.</span></span>
<span class="line"><span>INFO    Application available at Samplektorapp-env.eba-bnye2kpu.us-east-2.elasticbeanstalk.com.</span></span>
<span class="line"><span>INFO    Successfully launched environment: Samplektorapp-env</span></span></code></pre></div></li></ol>`,4))])}const C=c(b,[["render",m]]);export{q as __pageData,C as default};
