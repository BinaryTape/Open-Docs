import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/sqldelight/common/migrations_server.md","filePath":"ja/sqldelight/common/migrations_server.md","lastUpdated":1748435462000}'),e={name:"ja/sqldelight/common/migrations_server.md"};function l(p,s,h,r,o,k){return t(),a("div",null,s[0]||(s[0]=[n(`<h2 id="有効なsqlマイグレーション" tabindex="-1">有効なSQLマイグレーション <a class="header-anchor" href="#有効なsqlマイグレーション" aria-label="Permalink to &quot;有効なSQLマイグレーション&quot;">​</a></h2><p>マイグレーションファイルでカスタムのKotlin型を使用すると、それらのファイルはもはや有効なSQLではなくなります。オプションで、他のサービスが読み取れるように、マイグレーションファイルを有効なSQLとして出力するGradleタスクを設定できます。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sqldelight {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  databases {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    Database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      migrationOutputDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> layout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">buildDirectory</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dir(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resources/main/migrations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      migrationOutputFileFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.sql&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Defaults to .sql</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これにより、新しいタスク<code>generateMainDatabaseMigrations</code>が作成され、<code>.sqm</code>ファイルが指定された出力形式で、出力ディレクトリに有効なSQLとして出力されます。Flywayのようなサービスがクラスパス上でファイルを利用できるように、<code>compileKotlin</code>タスクから依存関係を作成してください。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compileKotlin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configure {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dependsOn </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;generateMainDatabaseMigrations&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,5)]))}const g=i(e,[["render",l]]);export{E as __pageData,g as default};
