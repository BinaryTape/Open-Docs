import{_ as a,a as e,b as s,c as i}from"./chunks/wasm-composeapp-browser.n73x6mgF.js";import{_ as o,a as l,b as r}from"./chunks/wasm-composeapp-github-clickme.W2UAtuJ-.js";import{_ as p}from"./chunks/join-slack-channel.C908i2w7.js";import{_ as n,c as m,o as c,ag as h}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"开始使用 Kotlin/Wasm 和 Compose Multiplatform","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/wasm-get-started.md","filePath":"kotlin/wasm-get-started.md","lastUpdated":1754307826000}'),d={name:"kotlin/wasm-get-started.md"};function g(u,t,b,k,f,w){return c(),m("div",null,t[0]||(t[0]=[h('<h1 id="开始使用-kotlin-wasm-和-compose-multiplatform" tabindex="-1">开始使用 Kotlin/Wasm 和 Compose Multiplatform <a class="header-anchor" href="#开始使用-kotlin-wasm-和-compose-multiplatform" aria-label="Permalink to &quot;开始使用 Kotlin/Wasm 和 Compose Multiplatform&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasm 处于 <a href="/kotlin/components-stability">Alpha</a> 阶段。它可能随时更改。 <a href="https://slack-chats.kotlinlang.org/c/webassembly" target="_blank" rel="noreferrer">加入 Kotlin/Wasm 社区。</a></p></div><p>本教程演示了如何在 IntelliJ IDEA 中使用 <a href="/kotlin/wasm-overview">Kotlin/Wasm</a> 运行 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 应用，并生成 artifact 以作为站点发布到 <a href="https://pages.github.com/" target="_blank" rel="noreferrer">GitHub Pages</a>。</p><h2 id="开始之前" tabindex="-1">开始之前 <a class="header-anchor" href="#开始之前" aria-label="Permalink to &quot;开始之前&quot;">​</a></h2><p>使用 Kotlin Multiplatform 向导创建一个项目：</p><ol><li><p>打开 <a href="https://kmp.jetbrains.com/#newProject" target="_blank" rel="noreferrer">Kotlin Multiplatform 向导</a>。</p></li><li><p>在 <strong>New Project</strong> 选项卡上，根据你的偏好更改项目名称和 ID。在本教程中，我们将名称设置为 &quot;WasmDemo&quot;，ID 设置为 &quot;wasm.project.demo&quot;。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这些是项目目录的名称和 ID。你也可以保持它们不变。</p></div></li><li><p>选择 <strong>Web</strong> 选项。确保没有选择其他选项。</p></li><li><p>点击 <strong>Download</strong> 按钮并解压生成的归档文件。</p><p><img src="'+a+'" alt="Kotlin Multiplatform wizard" width="400"></p></li></ol><h2 id="在-intellij-idea-中打开项目" tabindex="-1">在 IntelliJ IDEA 中打开项目 <a class="header-anchor" href="#在-intellij-idea-中打开项目" aria-label="Permalink to &quot;在 IntelliJ IDEA 中打开项目&quot;">​</a></h2><ol><li>下载并安装最新版本的 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a>。</li><li>在 IntelliJ IDEA 的欢迎界面上，点击 <strong>Open</strong> 或在菜单栏中选择 <strong>File | Open</strong>。</li><li>导航到解压后的 &quot;WasmDemo&quot; 文件夹并点击 <strong>Open</strong>。</li></ol><h2 id="运行应用程序" tabindex="-1">运行应用程序 <a class="header-anchor" href="#运行应用程序" aria-label="Permalink to &quot;运行应用程序&quot;">​</a></h2><ol><li><p>在 IntelliJ IDEA 中，通过选择 <strong>View</strong> | <strong>Tool Windows</strong> | <strong>Gradle</strong> 打开 <strong>Gradle</strong> 工具窗口。</p><p>项目加载后，你可以在 Gradle 工具窗口中找到 Gradle 任务。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>你需要至少 Java 11 作为 Gradle JVM，以便任务成功加载。</p></div></li><li><p>在 <strong>wasmdemo</strong> | <strong>Tasks</strong> | <strong>kotlin browser</strong> 中，选择并运行 <strong>wasmJsBrowserDevelopmentRun</strong> 任务。</p><p><img src="'+e+'" alt="Run the Gradle task" width="400"></p><p>或者，你可以在终端中从 <code>WasmDemo</code> 根目录运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmJsBrowserDevelopmentRun</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span></span></code></pre></div></li><li><p>应用程序启动后，在浏览器中打开以下 URL：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http://localhost:8080/</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>端口号可能不同，因为 8080 端口可能不可用。你可以在 Gradle 构建控制台中找到实际的端口号。</p></div><p>你会看到一个 &quot;Click me!&quot; 按钮。点击它：</p><p><img src="'+s+'" alt="Click me" width="650"></p><p>现在你会看到 Compose Multiplatform 的徽标：</p><p><img src="'+i+'" alt="Compose app in browser" width="650"></p></li></ol><h2 id="生成-artifact" tabindex="-1">生成 artifact <a class="header-anchor" href="#生成-artifact" aria-label="Permalink to &quot;生成 artifact&quot;">​</a></h2><p>在 <strong>wasmdemo</strong> | <strong>Tasks</strong> | <strong>kotlin browser</strong> 中，选择并运行 <strong>wasmJsBrowserDistribution</strong> 任务。</p><p><img src="'+o+'" alt="Run the Gradle task" width="400"></p><p>或者，你可以在终端中从 <code>WasmDemo</code> 根目录运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmJsBrowserDistribution</span></span></code></pre></div><p>应用程序任务完成后，你可以在 <code>composeApp/build/dist/wasmJs/productionExecutable</code> 目录中找到生成的 artifact：</p><p><img src="'+l+'" alt="Artifacts directory" width="400"></p><h2 id="发布到-github-pages" tabindex="-1">发布到 GitHub Pages <a class="header-anchor" href="#发布到-github-pages" aria-label="Permalink to &quot;发布到 GitHub Pages&quot;">​</a></h2><ol><li><p>将 <code>productionExecutable</code> 目录中的所有内容复制到你想要创建站点的版本库中。</p></li><li><p>遵循 GitHub 关于 <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-your-site" target="_blank" rel="noreferrer">创建你的站点</a> 的说明。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在你将更改推送到 GitHub 后，你的站点更改最多可能需要 10 分钟才能发布。</p></div></li><li><p>在浏览器中，导航到你的 GitHub Pages 域名。</p><p><img src="'+r+'" alt="Navigate to GitHub pages" width="650"></p><p>恭喜！你已成功将你的 artifact 发布到 GitHub Pages。</p></li></ol><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><ul><li><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-multiplatform-create-first-app.html" target="_blank" rel="noreferrer">了解如何在 iOS 和 Android 之间使用 Compose Multiplatform 共享 UI</a></p></li><li><p>尝试更多 Kotlin/Wasm 示例：</p><ul><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-imageviewer" target="_blank" rel="noreferrer">Compose 图片查看器</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-jetsnack" target="_blank" rel="noreferrer">Jetsnack 应用程序</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/nodejs-example" target="_blank" rel="noreferrer">Node.js 示例</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/wasi-example" target="_blank" rel="noreferrer">WASI 示例</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-example" target="_blank" rel="noreferrer">Compose 示例</a></li></ul></li><li><p>加入 Kotlin Slack 中的 Kotlin/Wasm 社区：</p><p><a href="https://slack-chats.kotlinlang.org/c/webassembly"><img src="'+p+'" width="500" alt="Join the Kotlin/Wasm community" style=""></a></p></li></ul>',21)]))}const I=n(d,[["render",g]]);export{q as __pageData,I as default};
