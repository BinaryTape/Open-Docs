import{_ as e,c as s,o as a,ag as n}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"整合性","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/api-guidelines-consistency.md","filePath":"ja/kotlin/api-guidelines-consistency.md","lastUpdated":1754307826000}'),t={name:"ja/kotlin/api-guidelines-consistency.md"};function l(r,i,o,h,p,d){return a(),s("div",null,i[0]||(i[0]=[n(`<h1 id="整合性" tabindex="-1">整合性 <a class="header-anchor" href="#整合性" aria-label="Permalink to &quot;整合性&quot;">​</a></h1><p>API設計において、整合性は使いやすさを確保するために不可欠です。一貫したパラメータの順序、命名規則、およびエラーハンドリングメカニズムを維持することで、ライブラリはユーザーにとってより直感的で信頼性の高いものになります。これらのベストプラクティスに従うことは、混乱や誤用を避け、より良い開発者体験とより堅牢なアプリケーションにつながります。</p><h2 id="パラメータの順序、命名、および使用法を維持する" tabindex="-1">パラメータの順序、命名、および使用法を維持する <a class="header-anchor" href="#パラメータの順序、命名、および使用法を維持する" aria-label="Permalink to &quot;パラメータの順序、命名、および使用法を維持する&quot;">​</a></h2><p>ライブラリを設計する際は、引数の順序、命名規則、オーバーロードの使用において一貫性を保ってください。 たとえば、既存のメソッドに<code>offset</code>と<code>length</code>パラメータがある場合、よほどの理由がない限り、新しいメソッドで<code>startIndex</code>や<code>endIndex</code>のような代替を使用すべきではありません。</p><p>ライブラリが提供するオーバーロードされた関数は、同一の振る舞いをするべきです。 ユーザーは、ライブラリに渡す値の型を変更しても、その振る舞いが一貫していることを期待します。 たとえば、以下の呼び出しはすべて、入力が意味的に同じであるため、同一のインスタンスを作成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BigDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;200&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>startIndex</code>と<code>stopIndex</code>のようなパラメータ名を、<code>beginIndex</code>と<code>endIndex</code>のような同義語と混同しないようにしてください。 同様に、コレクション内の値には<code>element</code>、<code>item</code>、<code>entry</code>、<code>entity</code>のいずれかの用語を選択し、それを守ってください。</p><p>関連するメソッドは一貫性があり、予測可能な名前を付けるべきです。例として、Kotlin標準ライブラリには<code>first</code>と<code>firstOrNull</code>、<code>single</code>や<code>singleOrNull</code>のようなペアが含まれています。 これらのペアは、一方が<code>null</code>を返す可能性があるのに対し、他方は例外をスローする可能性があることを明確に示しています。 パラメータは一般的なものから具体的なものへと宣言されるべきであり、必須の入力が最初に、オプションの入力が最後に現れるようにします。 たとえば、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/find-any-of.html" target="_blank" rel="noreferrer"><code>CharSequence.findAnyOf</code></a>では、<code>strings</code>コレクションが最初に、次に<code>startIndex</code>、最後に<code>ignoreCase</code>フラグが続きます。</p><p>従業員記録を管理し、従業員を検索するための以下のAPIを提供するライブラリを考えてみましょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findStaffBySeniority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    startIndex: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    minYearsServiceExclusive: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findStaffByAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    minAgeInclusive: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    startIndex: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>このAPIは、正しく使用するのが極めて難しいでしょう。 同じ型の複数のパラメータが一貫性のない順序で提示され、一貫性のない方法で使用されています。 ライブラリのユーザーは、既存の関数での経験に基づいて、新しい関数について誤った仮定をしてしまう可能性が高いです。</p><h2 id="データと状態にオブジェクト指向設計を使用する" tabindex="-1">データと状態にオブジェクト指向設計を使用する <a class="header-anchor" href="#データと状態にオブジェクト指向設計を使用する" aria-label="Permalink to &quot;データと状態にオブジェクト指向設計を使用する&quot;">​</a></h2><p>Kotlinは、オブジェクト指向プログラミングスタイルと関数型プログラミングスタイルの両方をサポートしています。 APIでは、クラスを使用してデータと状態を表現してください。データと状態が階層的である場合は、継承の使用を検討してください。</p><p>必要なすべての状態がパラメータとして渡せる場合は、トップレベル関数の使用を推奨します。 これらの関数への呼び出しが連鎖する場合、可読性を向上させるために拡張関数として記述することを検討してください。</p><h2 id="適切なエラーハンドリングメカニズムを選択する" tabindex="-1">適切なエラーハンドリングメカニズムを選択する <a class="header-anchor" href="#適切なエラーハンドリングメカニズムを選択する" aria-label="Permalink to &quot;適切なエラーハンドリングメカニズムを選択する&quot;">​</a></h2><p>Kotlinは、エラーハンドリングのためのいくつかのメカニズムを提供しています。 あなたのAPIは、例外をスローする、<code>null</code>値を返す、カスタムの結果型を使用する、または組み込みの<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-result/" target="_blank" rel="noreferrer"><code>Result</code></a>型を使用することができます。 ライブラリがこれらのオプションを一貫して適切に使用するようにしてください。</p><p>データを取得または計算できない場合は、ヌル許容戻り値型を使用して<code>null</code>を返し、データが見つからないことを示します。 その他の場合は、例外をスローするか、<code>Result</code>型を返します。</p><p>関数のオーバーロードを提供することを検討してください。一方が例外をスローし、もう一方がそれを結果型でラップするものです。 これらの場合、関数内で例外がキャッチされることを示すために<code>Catching</code>サフィックスを使用してください。 たとえば、標準ライブラリにはこの慣例を使用する<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/run.html" target="_blank" rel="noreferrer"><code>run</code></a>関数と<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/run-catching.html" target="_blank" rel="noreferrer"><code>runCatching</code></a>関数があり、 コルーチンライブラリにはチャネル用の<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/receive.html" target="_blank" rel="noreferrer"><code>receive</code></a>メソッドと<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/receive-catching.html" target="_blank" rel="noreferrer"><code>receiveCatching</code></a>メソッドがあります。</p><p>通常の制御フローに例外を使用することは避けてください。操作を試みる前に条件チェックを可能にするようにAPIを設計し、 不要なエラーハンドリングを防止してください。 <a href="https://martinfowler.com/bliki/CommandQuerySeparation.html" target="_blank" rel="noreferrer">Command / Query Separation</a>は、ここで適用できる有用なパターンです。</p><h2 id="規約と品質を維持する" tabindex="-1">規約と品質を維持する <a class="header-anchor" href="#規約と品質を維持する" aria-label="Permalink to &quot;規約と品質を維持する&quot;">​</a></h2><p>整合性の最後の側面は、ライブラリ自体の設計ではなく、高いレベルの品質を維持することに関連しています。</p><p>コードが一般的なKotlinの規約とプロジェクト固有の規約の両方に従っていることを確認するために、静的解析用の自動化ツール（リンター）を使用すべきです。</p><p>Kotlinライブラリはまた、すべてのAPIエントリーポイントのドキュメント化されたすべての振る舞いを網羅する単体テストおよび統合テストのスイートを提供すべきです。 テストには、特に既知の境界値とエッジケースを含め、幅広い入力を含めるべきです。テストされていない振る舞いは、（良くても）信頼できないと見なすべきです。</p><p>開発中にこのテストスイートを使用して、変更が既存の振る舞いを壊さないことを検証してください。 標準化されたビルドおよびリリースパイプラインの一部として、すべてのリリースでこれらのテストを実行してください。 <a href="https://github.com/Kotlin/kotlinx-kover" target="_blank" rel="noreferrer">Kover</a>のようなツールは、ビルドプロセスに統合してカバレッジを測定し、レポートを生成できます。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>ガイドの次のパートでは、予測可能性について学びます。</p><p><a href="/ja/kotlin/api-guidelines-predictability">次のパートに進む</a></p>`,27)]))}const g=e(t,[["render",l]]);export{c as __pageData,g as default};
