import{_ as y,C as n,c as v,o as F,G as i,ag as p,j as a,w as e,a as t}from"./chunks/framework.Bksy39di.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-auth.md","filePath":"ja/ktor/server-auth.md","lastUpdated":1755457140000}'),b={name:"ja/ktor/server-auth.md"};function m(f,s,q,A,C,B){const o=n("TopicTitle"),k=n("show-structure"),d=n("primary-label"),c=n("tldr"),u=n("link-summary"),l=n("code-block"),r=n("TabItem"),h=n("Tabs"),E=n("Links"),g=n("list");return F(),v("div",null,[i(o,{labelRef:"server-plugin",title:"Ktor Serverにおける認証と認可"}),i(k,{for:"chapter",depth:"2"}),i(d,{ref:"server-plugin"},null,512),i(c,null,{default:e(()=>s[0]||(s[0]=[a("p",null,[a("b",null,"必要な依存関係"),t(": "),a("code",null,"io.ktor:ktor-server-auth")],-1)])),_:1}),i(u,null,{default:e(()=>s[1]||(s[1]=[t(" AuthenticationプラグインはKtorにおける認証と認可を扱います。 ")])),_:1}),s[14]||(s[14]=p('<p>Ktorは、認証と認可を処理するために<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-authentication/index.html" target="_blank" rel="noreferrer">Authentication</a>プラグインを提供します。典型的な使用シナリオには、ユーザーのログイン、特定のリソースへのアクセス許可、関係者間での情報の安全な送信などがあります。<code>Authentication</code>を<a href="./server-sessions">セッション</a>と併用して、リクエスト間でユーザー情報を保持することもできます。</p><blockquote><p>クライアント側では、Ktorは認証と認可を処理するための<a href="./client-auth">Authentication</a>プラグインを提供します。</p></blockquote><h2 id="supported" tabindex="-1">サポートされている認証タイプ <a class="header-anchor" href="#supported" aria-label="Permalink to &quot;サポートされている認証タイプ {id=&quot;supported&quot;}&quot;">​</a></h2><p>Ktorは以下の認証および認可スキームをサポートしています。</p><h3 id="http-auth" tabindex="-1">HTTP認証 <a class="header-anchor" href="#http-auth" aria-label="Permalink to &quot;HTTP認証 {id=&quot;http-auth&quot;}&quot;">​</a></h3><p>HTTPは、アクセス制御と認証のための<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noreferrer">一般的なフレームワーク</a>を提供します。Ktorでは、以下のHTTP認証スキームを使用できます。</p><ul><li><a href="./server-basic-auth">Basic</a> - <code>Base64</code>エンコーディングを使用してユーザー名とパスワードを提供します。HTTPSと組み合わせて使用しない限り、一般的に推奨されません。</li><li><a href="./server-digest-auth">Digest</a> - ユーザー名とパスワードにハッシュ関数を適用することで、ユーザー資格情報を暗号化された形式で通信する認証方法です。</li><li><a href="./server-bearer-auth">Bearer</a> - Bearerトークンと呼ばれるセキュリティトークンを使用する認証スキームです。 Bearer認証スキームは<a href="./server-oauth">OAuth</a>または<a href="./server-jwt">JWT</a>の一部として使用されますが、Bearerトークンを認可するためのカスタムロジックを提供することもできます。</li></ul><h3 id="form-auth" tabindex="-1">フォームベース認証 <a class="header-anchor" href="#form-auth" aria-label="Permalink to &quot;フォームベース認証 {id=&quot;form-auth&quot;}&quot;">​</a></h3><p><a href="./server-form-based-auth">フォームベース</a>認証は、<a href="https://developer.mozilla.org/en-US/docs/Learn/Forms" target="_blank" rel="noreferrer">ウェブフォーム</a>を使用して資格情報を収集し、ユーザーを認証します。</p><h3 id="jwt" tabindex="-1">JSON Webトークン (JWT) <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;JSON Webトークン (JWT) {id=&quot;jwt&quot;}&quot;">​</a></h3><p><a href="./server-jwt">JSON Webトークン</a>は、JSONオブジェクトとして関係者間で情報を安全に送信するためのオープンスタンダードです。JSON Webトークンを認可に使用できます。ユーザーがログインすると、各リクエストにはトークンが含まれ、そのトークンで許可されたリソースにユーザーがアクセスできるようになります。Ktorでは、<code>jwt</code>認証を使用してトークンを検証し、その中に含まれるクレームを検証できます。</p><h3 id="ldap" tabindex="-1">LDAP <a class="header-anchor" href="#ldap" aria-label="Permalink to &quot;LDAP {id=&quot;ldap&quot;}&quot;">​</a></h3><p><a href="./server-ldap">LDAP</a>は、ディレクトリサービス認証に使用されるオープンなクロスプラットフォームプロトコルです。Ktorは、指定されたLDAPサーバーに対してユーザー資格情報を認証するために、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth-ldap/io.ktor.server.auth.ldap/ldap-authenticate.html" target="_blank" rel="noreferrer">ldapAuthenticate</a>関数を提供します。</p><h3 id="oauth" tabindex="-1">OAuth <a class="header-anchor" href="#oauth" aria-label="Permalink to &quot;OAuth {id=&quot;oauth&quot;}&quot;">​</a></h3><p><a href="./server-oauth">OAuth</a>は、APIへのアクセスを保護するためのオープンスタンダードです。Ktorの<code>oauth</code>プロバイダーを使用すると、Google、Facebook、Twitterなどの外部プロバイダーを使用して認証を実装できます。</p><h3 id="sessions" tabindex="-1">セッション <a class="header-anchor" href="#sessions" aria-label="Permalink to &quot;セッション {id=&quot;sessions&quot;}&quot;">​</a></h3><p><a href="./server-sessions">セッション</a>は、異なるHTTPリクエスト間でデータを永続化するメカニズムを提供します。典型的な使用例としては、ログインしたユーザーのID、ショッピングバスケットの内容の保存、クライアント上でのユーザー設定の保持などがあります。Ktorでは、関連付けられたセッションを持つユーザーは、<code>session</code>プロバイダーを使用して認証できます。その方法は<a href="./server-session-auth">Ktor Serverでのセッション認証</a>で学ぶことができます。</p><h3 id="custom" tabindex="-1">カスタム <a class="header-anchor" href="#custom" aria-label="Permalink to &quot;カスタム {id=&quot;custom&quot;}&quot;">​</a></h3><p>Ktorは<a href="./server-custom-plugins">カスタムプラグイン</a>を作成するためのAPIも提供しており、認証と認可を処理するための独自のプラグインを実装するために使用できます。 例えば、<code>AuthenticationChecked</code> <a href="./server-custom-plugins#call-handling">フック</a>は認証資格情報がチェックされた後に実行され、認可を実装することができます: <a href="https://github.com/ktorio/ktor-documentation/blob/3.2.3/codeSnippets/snippets/custom-plugin-authorization" target="_blank" rel="noreferrer">custom-plugin-authorization</a>。</p><h2 id="add_dependencies" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係の追加 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>Authentication</code>を使用するには、ビルドスクリプトに<code>ktor-server-auth</code>アーティファクトを含める必要があります: </p>',21)),i(h,{group:"languages"},{default:e(()=>[i(r,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[i(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),i(r,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[i(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),i(r,{title:"Maven","group-key":"maven"},{default:e(()=>[i(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[15]||(s[15]=a("p",null,[a("a",{href:"./server-jwt"},"JWT"),t("や"),a("a",{href:"./server-ldap"},"LDAP"),t("など、一部の認証プロバイダーは追加のアーティファクトを必要とすることに注意してください。")],-1)),s[16]||(s[16]=a("h2",{id:"install",tabindex:"-1"},[t("Authenticationのインストール "),a("a",{class:"header-anchor",href:"#install","aria-label":'Permalink to "Authenticationのインストール {id="install"}"'},"​")],-1)),a("p",null,[s[3]||(s[3]=t(" アプリケーションに")),s[4]||(s[4]=a("code",null,"Authentication",-1)),s[5]||(s[5]=t("プラグインを")),s[6]||(s[6]=a("a",{href:"#install"},"インストール",-1)),s[7]||(s[7]=t("するには、指定された")),i(E,{href:"/ktor/server-modules",summary:"モジュールはルートをグループ化することでアプリケーションを構造化できます。"},{default:e(()=>s[2]||(s[2]=[t("モジュール")])),_:1}),s[8]||(s[8]=t("内の")),s[9]||(s[9]=a("code",null,"install",-1)),s[10]||(s[10]=t("関数に渡します。以下のコードスニペットは、")),s[11]||(s[11]=a("code",null,"Authentication",-1)),s[12]||(s[12]=t("をインストールする方法を示しています... "))]),i(g,null,{default:e(()=>s[13]||(s[13]=[a("li",null,[t(" ... "),a("code",null,"embeddedServer"),t("関数呼び出し内で。 ")],-1),a("li",null,[t(" ... "),a("code",null,"Application"),t("クラスの拡張関数である明示的に定義された"),a("code",null,"module"),t("内で。 ")],-1)])),_:1}),i(h,null,{default:e(()=>[i(r,{title:"embeddedServer"},{default:e(()=>[i(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.auth.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(Authentication)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),i(r,{title:"module"},{default:e(()=>[i(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.auth.*
            // ...
            fun Application.module() {
                install(Authentication)
                // ...
            }`})]),_:1})]),_:1}),s[17]||(s[17]=p(`<h2 id="configure" tabindex="-1">Authenticationの設定 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;Authenticationの設定 {id=&quot;configure&quot;}&quot;">​</a></h2><p><a href="#install">Authenticationをインストール</a>した後、次のように<code>Authentication</code>を設定して使用できます。</p><h3 id="choose-provider" tabindex="-1">ステップ1: 認証プロバイダーを選択する <a class="header-anchor" href="#choose-provider" aria-label="Permalink to &quot;ステップ1: 認証プロバイダーを選択する {id=&quot;choose-provider&quot;}&quot;">​</a></h3><p><a href="./server-basic-auth">basic</a>、<a href="./server-digest-auth">digest</a>、<a href="./server-form-based-auth">form</a>などの特定の認証プロバイダーを使用するには、<code>install</code>ブロック内で対応する関数を呼び出す必要があります。例えば、basic認証を使用するには、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/basic.html" target="_blank" rel="noreferrer"><code>.basic()</code></a>関数を呼び出します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure basic authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この関数内で、このプロバイダーに固有の設定を<a href="#configure-provider">構成</a>できます。</p><h3 id="provider-name" tabindex="-1">ステップ2: プロバイダー名を指定する <a class="header-anchor" href="#provider-name" aria-label="Permalink to &quot;ステップ2: プロバイダー名を指定する {id=&quot;provider-name&quot;}&quot;">​</a></h3><p><a href="#choose-provider">特定のプロバイダーを使用</a>するための関数は、オプションでプロバイダー名を指定できます。以下のコードサンプルは、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/basic.html" target="_blank" rel="noreferrer">basic</a>および<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/form.html" target="_blank" rel="noreferrer">form</a>プロバイダーをそれぞれ<code>&quot;auth-basic&quot;</code>および<code>&quot;auth-form&quot;</code>という名前でインストールしています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure basic authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure form authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これらの名前は後で異なるプロバイダーを使用して<a href="#authenticate-route">異なるルートを認証</a>するために使用できます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>プロバイダー名は一意である必要があり、名前なしのプロバイダーは1つしか定義できないことに注意してください。</p></div><h3 id="configure-provider" tabindex="-1">ステップ3: プロバイダーを設定する <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;ステップ3: プロバイダーを設定する {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p>各<a href="#choose-provider">プロバイダータイプ</a>には独自の構成があります。例えば、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-basic-authentication-provider/-config/index.html" target="_blank" rel="noreferrer"><code>BasicAuthenticationProvider.Config</code></a>クラスは<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/basic.html" target="_blank" rel="noreferrer"><code>.basic()</code></a>関数にオプションを提供します。このクラスの主要な関数は<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-basic-authentication-provider/-config/validate.html" target="_blank" rel="noreferrer"><code>validate()</code></a>で、ユーザー名とパスワードを検証する役割を担っています。以下のコード例はその使用法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (credentials.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jetbrains&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> credentials.password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentials.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>validate()</code>関数の動作を理解するには、2つの用語を導入する必要があります。</p><ul><li>プリンシパル（<em>principal</em>）とは、認証できるエンティティです。ユーザー、コンピューター、サービスなどです。Ktorでは、さまざまな認証プロバイダーが異なるプリンシパルを使用する場合があります。例えば、<code>basic</code>、<code>digest</code>、<code>form</code>プロバイダーは<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-id-principal/index.html" target="_blank" rel="noreferrer"><code>UserIdPrincipal</code></a>を認証し、<code>jwt</code>プロバイダーは<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth-jwt/io.ktor.server.auth.jwt/-j-w-t-principal/index.html" target="_blank" rel="noreferrer"><code>JWTPrincipal</code></a>を検証します。 <blockquote><p>カスタムプリンシパルを作成することもできます。これは次の場合に役立つ可能性があります。</p><ul><li>資格情報をカスタムプリンシパルにマッピングすることで、<a href="#get-principal">ルートハンドラー</a>内で認証されたプリンシパルに関する追加情報を持つことができます。</li><li><a href="./server-session-auth">セッション認証</a>を使用する場合、プリンシパルはセッションデータを格納するデータクラスである可能性があります。</li></ul></blockquote></li><li>クレデンシャル（<em>credential</em>）とは、サーバーがプリンシパルを認証するための一連のプロパティです。ユーザー名とパスワードのペア、APIキーなどです。例えば、<code>basic</code>および<code>form</code>プロバイダーは<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-password-credential/index.html" target="_blank" rel="noreferrer"><code>UserPasswordCredential</code></a>を使用してユーザー名とパスワードを検証し、<code>jwt</code>は<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth-jwt/io.ktor.server.auth.jwt/-j-w-t-credential/index.html" target="_blank" rel="noreferrer"><code>JWTCredential</code></a>を検証します。</li></ul><p>したがって、<code>validate()</code>関数は指定されたクレデンシャルをチェックし、認証が成功した場合はプリンシパル<code>Any</code>を返し、認証が失敗した場合は<code>null</code>を返します。</p><blockquote><p>特定の基準に基づいて認証をスキップするには、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-authentication-provider/-config/skip-when.html" target="_blank" rel="noreferrer"><code>skipWhen()</code></a>を使用します。例えば、<a href="./server-sessions">セッション</a>が既に存在する場合、<code>basic</code>認証をスキップできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    skipWhen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></blockquote><h3 id="authenticate-route" tabindex="-1">ステップ4: 特定のリソースを保護する <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;ステップ4: 特定のリソースを保護する {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p>最後のステップは、アプリケーション内の特定のリソースを保護することです。これは<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/authenticate.html" target="_blank" rel="noreferrer"><code>authenticate()</code></a>関数を使用することで実現できます。この関数は2つのオプションパラメーターを受け入れます。</p><ul><li><p>ネストされたルートを認証するために使用される<a href="#provider-name">プロバイダーの名前</a>。以下のコードスニペットは、_auth-basic_という名前のプロバイダーを使用して<code>/login</code>および<code>/orders</code>ルートを保護しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/orders&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>ネストされた認証プロバイダーを解決するために使用される戦略。この戦略は<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-authentication-strategy/index.html" target="_blank" rel="noreferrer"><code>AuthenticationStrategy</code></a>列挙値で表されます。</p><p>例えば、クライアントは<code>AuthenticationStrategy.Required</code>戦略で登録されたすべてのプロバイダーに対して認証データを提供する必要があります。 以下のコードスニペットでは、<a href="./server-session-auth">セッション認証</a>を通過したユーザーのみがbasic認証を使用して<code>/admin</code>ルートにアクセスできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><blockquote><p>完全な例については、<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session-nested" target="_blank" rel="noreferrer">auth-form-session-nested</a>を参照してください。</p></blockquote><h3 id="get-principal" tabindex="-1">ステップ5: ルートハンドラー内でプリンシパルを取得する <a class="header-anchor" href="#get-principal" aria-label="Permalink to &quot;ステップ5: ルートハンドラー内でプリンシパルを取得する {id=&quot;get-principal&quot;}&quot;">​</a></h3><p>認証に成功すると、ルートハンドラー内で<code>call.principal()</code>関数を使用して認証されたプリンシパルを取得できます。この関数は、<a href="#configure-provider">設定された認証プロバイダー</a>によって返される特定のプリンシパルタイプを受け入れます。以下の例では、<code>call.principal()</code>を使用して<code>UserIdPrincipal</code>を取得し、認証されたユーザーの名前を取得しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()?.name}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="./server-session-auth">セッション認証</a>を使用する場合、プリンシパルはセッションデータを格納するデータクラスである可能性があります。 そのため、このデータクラスを<code>call.principal()</code>に渡す必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="#authenticate-route">ネストされた認証プロバイダー</a>の場合、目的のプロバイダーのプリンシパルを取得するために、<a href="#provider-name">プロバイダー名</a>を<code>call.principal()</code>に渡すことができます。</p><p>以下の例では、最上位のセッションプロバイダーのプリンシパルを取得するために<code>&quot;auth-session&quot;</code>値が渡されています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,30))])}const P=y(b,[["render",m]]);export{D as __pageData,P as default};
