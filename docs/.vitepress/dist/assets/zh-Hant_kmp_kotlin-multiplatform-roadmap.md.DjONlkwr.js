import{_ as t,c as i,o,ag as a}from"./chunks/framework.Bksy39di.js";const h=JSON.parse('{"title":"Kotlin Multiplatform 發展藍圖","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/kotlin-multiplatform-roadmap.md","filePath":"zh-Hant/kmp/kotlin-multiplatform-roadmap.md","lastUpdated":1755516278000}'),e={name:"zh-Hant/kmp/kotlin-multiplatform-roadmap.md"};function r(n,l,p,m,d,s){return o(),i("div",null,l[0]||(l[0]=[a('<h1 id="kotlin-multiplatform-發展藍圖" tabindex="-1">Kotlin Multiplatform 發展藍圖 <a class="header-anchor" href="#kotlin-multiplatform-發展藍圖" aria-label="Permalink to &quot;Kotlin Multiplatform 發展藍圖&quot;">​</a></h1><p>Kotlin Multiplatform 發展藍圖旨在概述 Kotlin Multiplatform 專案的優先事項和總體方向。</p><p>最新的 <a href="https://blog.jetbrains.com/kotlin/2024/10/kotlin-multiplatform-development-roadmap-for-2025/" target="_blank" rel="noreferrer">發展藍圖部落格文章</a> 已於 2024 年 10 月 28 日發布。下方頁面總結了該文章的內容，並會隨時更新，以反映我們達到已宣布的里程碑或策略變更：</p><ul><li>2025 年 2 月 14 日，發展藍圖已更新，以反映 <a href="https://blog.jetbrains.com/kotlin/2025/02/kotlin-multiplatform-tooling-shifting-gears/" target="_blank" rel="noreferrer">Kotlin Multiplatform Tooling – Shifting Gears</a> 部落格文章中所述的變更。</li></ul><p>Kotlin Multiplatform 的目標與 <a href="https://kotlinlang.org/docs/roadmap.html" target="_blank" rel="noreferrer">Kotlin 發展藍圖</a> 緊密配合。請務必查看該文件，以獲取我們發展方向的更多背景資訊。</p><h2 id="主要優先事項" tabindex="-1">主要優先事項 <a class="header-anchor" href="#主要優先事項" aria-label="Permalink to &quot;主要優先事項&quot;">​</a></h2><ul><li>iOS 版 Stable Compose Multiplatform：推動 iOS 目標達到穩定版本發布，這涉及改進底層框架以及 iOS 特定的整合和基準測試。</li><li>更好地支援 IntelliJ-based IDEs 中的多平台開發，為 Kotlin Multiplatform 和 Compose Multiplatform 提供優化環境。</li><li>發布第一個公開版本的 Kotlin-to-Swift export。首次發布時，我們的目標是提供與現有 Objective-C export 相當的體驗，並為未來充分利用 Swift export 鋪平道路。</li><li>透過提供更好的工具和指南，改善創建多平台函式庫的體驗。我們將改進 <code>klib</code> 格式，使其更加靈活和強大，並為創建多平台函式庫提供更好的範本和說明。</li><li>使 Amper 適用於多平台行動開發。在 2025 年，Amper 應全面支援 iOS 和 Android 的多平台開發，包括使用 Compose Multiplatform 共享 UI 程式碼。</li></ul><p>您可以在<a href="#faq">常見問題</a>部分找到常見問題及解答。</p><h2 id="compose-multiplatform" tabindex="-1">Compose Multiplatform <a class="header-anchor" href="#compose-multiplatform" aria-label="Permalink to &quot;Compose Multiplatform&quot;">​</a></h2><p>Compose Multiplatform 的重點領域包括：</p><ul><li><strong>Jetpack Compose 功能對等</strong>。確保所有核心 API 和元件都是多平台的。</li><li><strong>iOS 渲染效能</strong>。實施基準測試基礎設施，以捕捉迴歸並使框架的效能對使用者透明。</li><li><strong>核心元件的功能完整性</strong>。完成基本功能，包括： <ul><li>導航</li><li>資源管理</li><li>無障礙功能</li><li>國際化</li></ul></li><li><strong>框架的整體穩定化</strong>。提高整體穩定性（包括 Compose 和原生視圖之間的互操作性），同時透過 Compose Multiplatform 預覽來增強用戶體驗。</li><li><strong>文件</strong>。為用戶提供學習和使用 Compose Multiplatform 所需的所有資源，並將其匯集在單一位置。</li><li><strong>Compose Multiplatform 網頁版</strong>。達到與其他支援平台的功能對等。</li></ul><h3 id="對於-compose-html-有什麼計畫" tabindex="-1">對於 Compose HTML 有什麼計畫？ <a class="header-anchor" href="#對於-compose-html-有什麼計畫" aria-label="Permalink to &quot;對於 Compose HTML 有什麼計畫？&quot;">​</a></h3><p>在透過修復錯誤持續維護 Compose HTML 函式庫的同時，我們也在探索其在現有用戶中的使用案例，以便我們能制定其未來發展的計畫。</p><h2 id="工具鏈" tabindex="-1">工具鏈 <a class="header-anchor" href="#工具鏈" aria-label="Permalink to &quot;工具鏈&quot;">​</a></h2><p>我們的目標是確保 Kotlin Multiplatform 與 KMP 開發中常用的 IDEs（如 IntelliJ IDEA 和 Android Studio）無縫整合，使專案內部或專案之間的程式碼共享更為簡單。</p><p>我們也正在探索新的領域來增強開發體驗：</p><ul><li>調查使用雲端機器構建 iOS 應用程式，以幫助那些不便存取 Apple 裝置的開發人員。</li><li>試驗更深層次的 AI 工具整合，不僅協助程式碼生成，也協助更複雜的開發任務。</li></ul><h2 id="kotlin-to-swift-export" tabindex="-1">Kotlin-to-Swift export <a class="header-anchor" href="#kotlin-to-swift-export" aria-label="Permalink to &quot;Kotlin-to-Swift export&quot;">​</a></h2><p>我們 2025 年的目標是發布第一個公開版本的直接 Kotlin-to-Swift export。首次發布旨在提供與現有 Objective-C export 相當的用戶體驗，同時克服 Objective-C 的限制。</p><p>這將能夠更廣泛地支援 Swift 語言並簡化 API 導出，為未來充分利用 Swift export 鋪平道路。</p><h2 id="函式庫生態系統" tabindex="-1">函式庫生態系統 <a class="header-anchor" href="#函式庫生態系統" aria-label="Permalink to &quot;函式庫生態系統&quot;">​</a></h2><p>隨著 Kotlin Multiplatform 生態系統的迅速擴展，確保函式庫的向後兼容性變得至關重要。以下是我們的計畫：</p><ul><li>改進 <code>klib</code> 格式，讓函式庫創建者能夠利用其構建 JVM 函式庫的知識。</li><li>在 Kotlin Multiplatform 函式庫中實現與 JVM 相同的程式碼內聯行為。</li><li>提供一個工具，確保您的多平台函式庫公開 API 保持向後兼容。</li></ul><p>我們也希望改進 Kotlin Multiplatform 函式庫的發布流程。我們希望：</p><ul><li>為創建和發布 KMP 函式庫提供範本和全面的指南。</li><li>穩定不同平台上 <code>klib</code> 的交叉編譯。</li><li>推出完全重新設計的 KMP 函式庫發布流程。</li><li>顯著改善函式庫的文件流程。</li></ul><p>雖然 Kotlin Multiplatform 將獲得重大更新，但使用現有格式構建的函式庫仍可與較新的 Kotlin 版本配合使用。</p><h3 id="改進多平台函式庫的搜尋" tabindex="-1">改進多平台函式庫的搜尋 <a class="header-anchor" href="#改進多平台函式庫的搜尋" aria-label="Permalink to &quot;改進多平台函式庫的搜尋&quot;">​</a></h3><p>目前有超過 2500 個 Kotlin Multiplatform 函式庫可用。然而，儘管選擇廣泛，開發人員要找到符合其特定需求並支援其所選平台的函式庫可能具有挑戰性。</p><p>我們的目標是引入一個解決方案，以方便發現這些函式庫並允許開發人員輕鬆試用它們。</p><h3 id="amper" tabindex="-1">Amper <a class="header-anchor" href="#amper" aria-label="Permalink to &quot;Amper&quot;">​</a></h3><p>Amper 是 JetBrains 的一個實驗性專案配置和構建工具。在 2025 年，我們將專注於使 Amper 完全適用於 Android 和 iOS 的多平台行動應用程式開發，並支援共享的 Compose Multiplatform UI。</p><p>我們的目標是支援：</p><ul><li>在本地、實體裝置和 CI 中執行和測試應用程式。</li><li>簽署應用程式並將其發布到 Play Store 和 App Store。</li><li>IDE 整合，以確保流暢愉快的體驗。</li></ul><h3 id="gradle-和其他構建工具" tabindex="-1">Gradle 和其他構建工具 <a class="header-anchor" href="#gradle-和其他構建工具" aria-label="Permalink to &quot;Gradle 和其他構建工具&quot;">​</a></h3><p>展望 2025 年，我們在 Gradle 增強功能方面的工作已在 <a href="https://kotlinlang.org/docs/roadmap.html#tooling" target="_blank" rel="noreferrer">Kotlin 發展藍圖</a> 中概述。</p><p>以下是我們將特別針對 Kotlin Multiplatform 進行的重點領域：</p><ul><li>支援在專案層級宣告 Kotlin Multiplatform 依賴項。這將使開發人員更容易有效管理其專案依賴項。</li><li>改進 <code>Kotlin/Native</code> 工具鏈與 Gradle 的整合。</li><li>實施多平台函式庫的下一代分發格式。這將簡化多平台函式庫的依賴模型和發布佈局，使其更容易與第三方構建工具配合使用，並降低函式庫作者的複雜性。</li><li>在 Declarative Gradle 中提供對 Kotlin Multiplatform 的全面支援。我們在 Experimental Kotlin Ecosystem Plugin 方面的工作（支援 Declarative Gradle）旨在幫助開發人員探索其 Gradle 構建的宣告式方法。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><ul><li>本發展藍圖並非團隊正在進行的所有工作的詳盡清單，僅列出最大的專案。 * 不承諾在特定版本中交付特定功能或修復。 * 我們將隨時調整優先事項並相應地更新發展藍圖。</li></ul></div><h2 id="常見問題" tabindex="-1">常見問題 <a class="header-anchor" href="#常見問題" aria-label="Permalink to &quot;常見問題&quot;">​</a></h2><h3 id="您能修復-intellij-idea-中的-kmp-支援嗎" tabindex="-1">您能修復 IntelliJ IDEA 中的 KMP 支援嗎？ <a class="header-anchor" href="#您能修復-intellij-idea-中的-kmp-支援嗎" aria-label="Permalink to &quot;您能修復 IntelliJ IDEA 中的 KMP 支援嗎？&quot;">​</a></h3><p>我們深知在 IntelliJ IDEA 中提供出色 KMP 體驗的重要性。正如<a href="https://blog.jetbrains.com/kotlin/2025/02/kotlin-multiplatform-tooling-shifting-gears/" target="_blank" rel="noreferrer">關於 KMP 工具鏈的部落格文章</a>所述，我們將專注於增強整個 IntelliJ Platform 的 KMP 支援。這將包括改善品質和穩定性，並引入某些功能，讓偏好 IntelliJ IDEA 進行多平台開發的開發人員，能在他們偏好的 IDE 中享受完整的 KMP 支援。</p><h3 id="android-studio-中的-kmp-支援情況如何" tabindex="-1">Android Studio 中的 KMP 支援情況如何？ <a class="header-anchor" href="#android-studio-中的-kmp-支援情況如何" aria-label="Permalink to &quot;Android Studio 中的 KMP 支援情況如何？&quot;">​</a></h3><p>我們正積極與 Google 合作，以改進 Android Studio 中的 KMP 支援。更詳細的計畫將於稍後公布。敬請期待！</p><h3 id="目前-kmp-開發推薦使用哪款-ide" tabindex="-1">目前 KMP 開發推薦使用哪款 IDE？ <a class="header-anchor" href="#目前-kmp-開發推薦使用哪款-ide" aria-label="Permalink to &quot;目前 KMP 開發推薦使用哪款 IDE？&quot;">​</a></h3><p>如果您的主要使用案例是行動裝置，我們推薦使用 Android Studio。我們也正在努力為 IntelliJ IDEA 提供出色的支援。</p><h3 id="swift-會在-intellij-idea-和-android-studio-中可用嗎" tabindex="-1">Swift 會在 IntelliJ IDEA 和 Android Studio 中可用嗎？ <a class="header-anchor" href="#swift-會在-intellij-idea-和-android-studio-中可用嗎" aria-label="Permalink to &quot;Swift 會在 IntelliJ IDEA 和 Android Studio 中可用嗎？&quot;">​</a></h3><p>Swift 是特定 KMP 情境的重要組成部分，我們正在努力支援這些使用案例。</p><h3 id="您是否放棄了網頁開發" tabindex="-1">您是否放棄了網頁開發？ <a class="header-anchor" href="#您是否放棄了網頁開發" aria-label="Permalink to &quot;您是否放棄了網頁開發？&quot;">​</a></h3><p>不，我們絕沒有放棄網頁開發！我們正積極致力於 Kotlin/Wasm 支援以及 Compose Multiplatform 網頁版，以實現與其他平台的功能對等。我們目前的努力包括實現拖放支援、改進文字輸入和渲染，並確保與 HTML 內容的無縫互操作性。我們將很快分享更詳細的網頁開發計畫。敬請期待！</p><h3 id="compose-html-情況如何" tabindex="-1">Compose HTML 情況如何？ <a class="header-anchor" href="#compose-html-情況如何" aria-label="Permalink to &quot;Compose HTML 情況如何？&quot;">​</a></h3><p>在透過修復錯誤持續維護 Compose HTML 函式庫的同時，我們也在探索其在現有用戶中的使用案例，以便我們能制定其未來發展的計畫。</p>',51)]))}const f=t(e,[["render",r]]);export{h as __pageData,f as default};
