import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"本地化字符串","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/compose-localize-strings.md","filePath":"kmp/compose-localize-strings.md","lastUpdated":1755516278000}'),e={name:"kmp/compose-localize-strings.md"};function l(p,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="本地化字符串" tabindex="-1">本地化字符串 <a class="header-anchor" href="#本地化字符串" aria-label="Permalink to &quot;本地化字符串&quot;">​</a></h1><p>本地化是使你的应用适应不同语言、区域和文化惯例的过程。本指南将解释如何设置翻译目录、<a href="./compose-regional-format">处理区域特有的格式</a>、<a href="./compose-rtl">处理从右到左 (RTL) 语言</a>以及<a href="./compose-localization-tests">测试跨平台的本地化</a>。</p><p>要在 Compose Multiplatform 中本地化字符串，你需要为应用程序的用户界面元素提供所有支持语言的翻译文本。Compose Multiplatform 通过提供一个公共资源管理库和代码生成，简化了此过程，从而可以轻松访问翻译。</p><h2 id="设置翻译目录" tabindex="-1">设置翻译目录 <a class="header-anchor" href="#设置翻译目录" aria-label="Permalink to &quot;设置翻译目录&quot;">​</a></h2><p>将所有字符串资源存储在公共源代码集内专用的 <code>composeResources</code> 目录中。将默认文本放在 <code>values</code> 目录中，并为每种语言创建相应的目录。 使用以下结构：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>commonMain/composeResources/</span></span>
<span class="line"><span>├── values/</span></span>
<span class="line"><span>│   └── strings.xml</span></span>
<span class="line"><span>├── values-es/</span></span>
<span class="line"><span>│   └── strings.xml</span></span>
<span class="line"><span>├── values-fr/</span></span>
<span class="line"><span>│   └── strings.xml</span></span>
<span class="line"><span>└── ... (other locale directories)</span></span></code></pre></div><p>在 <code>values</code> 目录及其本地化变体中，使用键值对在 <code>strings.xml</code> 文件中定义字符串资源。 例如，将英文文本添加到 <code>commonMain/composeResources/values/strings.xml</code>：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;My Application&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;greeting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, world!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;welcome_message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Welcome, %s!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>然后，创建相应的本地化文件用于翻译。例如，将西班牙语翻译添加到 <code>commonMain/composeResources/values-es/strings.xml</code>：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Mi Aplicación&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;greeting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;¡Hola mundo!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;welcome_message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;¡Bienvenido, %s!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="生成用于静态访问的类" tabindex="-1">生成用于静态访问的类 <a class="header-anchor" href="#生成用于静态访问的类" aria-label="Permalink to &quot;生成用于静态访问的类&quot;">​</a></h2><p>添加所有翻译后，构建项目以生成一个特殊类，该类提供对资源的访问。 Compose Multiplatform 处理 <code>composeResources</code> 中的 <code>strings.xml</code> 资源文件，并为每个字符串资源创建静态访问器属性。</p><p>生成的 <code>Res.strings</code> 对象允许你从共享代码中安全地访问本地化字符串。 要在应用的 UI 中显示字符串，请使用 <code>stringResource()</code> 可组合函数。 此函数根据用户的当前区域设置检索正确的文本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> project.composeapp.generated.resources.Res</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.strings.app_name))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.strings.greeting))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.strings.welcome_message, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上面的示例中，<code>welcome_message</code> 字符串包含一个动态值的占位符 (<code>%s</code>)。 生成的访问器和 <code>stringResource()</code> 函数都支持传递此类参数。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><ul><li><a href="./compose-regional-format">了解如何管理区域格式</a></li><li><a href="./compose-rtl">阅读有关处理从右到左语言的内容</a></li></ul>`,17)]))}const g=i(e,[["render",l]]);export{d as __pageData,g as default};
