import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"模型上下文协议","description":"","frontmatter":{},"headers":[],"relativePath":"koog/model-context-protocol.md","filePath":"koog/model-context-protocol.md","lastUpdated":1755146406000}'),l={name:"koog/model-context-protocol.md"};function h(p,s,e,k,r,o){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="模型上下文协议" tabindex="-1">模型上下文协议 <a class="header-anchor" href="#模型上下文协议" aria-label="Permalink to &quot;模型上下文协议&quot;">​</a></h1><p>模型上下文协议 (MCP) 是一种标准化协议，它允许 AI 智能体通过一致的接口与外部工具和服务进行交互。</p><p>MCP 将工具和提示作为 API 端点公开，AI 智能体可以调用这些端点。每个工具都有一个特定的名称，以及一个使用 JSON Schema 格式描述其输入和输出的输入模式。</p><p>Koog 框架提供了与 MCP 服务器的集成，使你能够将 MCP 工具整合到你的 Koog 智能体中。</p><p>关于该协议的更多信息，请参阅 <a href="https://modelcontextprotocol.io" target="_blank" rel="noreferrer">Model Context Protocol</a> 文档。</p><h2 id="mcp-服务器" tabindex="-1">MCP 服务器 <a class="header-anchor" href="#mcp-服务器" aria-label="Permalink to &quot;MCP 服务器&quot;">​</a></h2><p>MCP 服务器实现了 Model Context Protocol，并为 AI 智能体与工具和服务交互提供了一种标准化方式。</p><p>你可以在 <a href="https://mcp.so/" target="_blank" rel="noreferrer">MCP Marketplace</a> 或 <a href="https://hub.docker.com/u/mcp" target="_blank" rel="noreferrer">MCP DockerHub</a> 中找到可直接使用的 MCP 服务器。</p><p>MCP 服务器支持以下传输协议与智能体进行通信：</p><ul><li>标准输入/输出 (stdio) 传输协议，用于与作为独立进程运行的 MCP 服务器通信。例如，Docker 容器或 CLI 工具。</li><li>服务器发送事件 (SSE) 传输协议（可选），用于通过 HTTP 与 MCP 服务器通信。</li></ul><h2 id="与-koog-集成" tabindex="-1">与 Koog 集成 <a class="header-anchor" href="#与-koog-集成" aria-label="Permalink to &quot;与 Koog 集成&quot;">​</a></h2><p>Koog 框架使用 <a href="https://github.com/modelcontextprotocol/kotlin-sdk" target="_blank" rel="noreferrer">MCP SDK</a> 并结合 <code>agent-mcp</code> 模块中提供的额外 API 扩展来与 MCP 集成。</p><p>此集成允许 Koog 智能体执行以下操作：</p><ul><li>通过各种传输机制 (stdio, SSE) 连接到 MCP 服务器。</li><li>从 MCP 服务器检索可用的工具。</li><li>将 MCP 工具转换为 Koog 工具接口。</li><li>在工具注册表中注册转换后的工具。</li><li>使用 LLM 提供的实参调用 MCP 工具。</li></ul><h3 id="关键组件" tabindex="-1">关键组件 <a class="header-anchor" href="#关键组件" aria-label="Permalink to &quot;关键组件&quot;">​</a></h3><p>以下是 Koog 中 MCP 集成的主要组件：</p><table tabindex="0"><thead><tr><th style="text-align:left;">组件</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://api.koog.ai/agents/agents-mcp/ai.koog.agents.mcp/-mcp-tool/index.html" target="_blank" rel="noreferrer"><code>McpTool</code></a></td><td style="text-align:left;">作为 Koog 工具接口与 MCP SDK 之间的桥梁。</td></tr><tr><td style="text-align:left;"><a href="https://api.koog.ai/agents/agents-mcp/ai.koog.agents.mcp/-mcp-tool-descriptor-parser/index.html" target="_blank" rel="noreferrer"><code>McpToolDescriptorParser</code></a></td><td style="text-align:left;">将 MCP 工具定义解析为 Koog 工具描述符格式。</td></tr><tr><td style="text-align:left;"><a href="https://api.koog.ai/agents/agents-mcp/ai.koog.agents.mcp/-mcp-tool-registry-provider/index.html?query=object%20McpToolRegistryProvider" target="_blank" rel="noreferrer"><code>McpToolRegistryProvider</code></a></td><td style="text-align:left;">创建 MCP 工具注册表，通过各种传输机制 (stdio, SSE) 连接到 MCP 服务器。</td></tr></tbody></table><h2 id="入门" tabindex="-1">入门 <a class="header-anchor" href="#入门" aria-label="Permalink to &quot;入门&quot;">​</a></h2><h3 id="_1-设置-mcp-连接" tabindex="-1">1. 设置 MCP 连接 <a class="header-anchor" href="#_1-设置-mcp-连接" aria-label="Permalink to &quot;1. 设置 MCP 连接&quot;">​</a></h3><p>要将 MCP 与 Koog 结合使用，你需要设置一个连接：</p><ol><li>启动一个 MCP 服务器（作为进程、Docker 容器或 Web 服务）。</li><li>创建一个传输机制来与服务器通信。</li></ol><p>MCP 服务器支持 stdio 和 SSE 传输机制与智能体通信，因此你可以使用其中之一进行连接。</p><h4 id="使用-stdio-连接" tabindex="-1">使用 stdio 连接 <a class="header-anchor" href="#使用-stdio-连接" aria-label="Permalink to &quot;使用 stdio 连接&quot;">​</a></h4><p>当 MCP 服务器作为独立进程运行时，使用此协议。以下是使用 stdio 传输设置 MCP 连接的示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启动一个 MCP 服务器（例如，作为进程）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProcessBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/mcp/server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建 stdio 传输</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultStdioTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process)</span></span></code></pre></div><h4 id="使用-sse-连接" tabindex="-1">使用 SSE 连接 <a class="header-anchor" href="#使用-sse-连接" aria-label="Permalink to &quot;使用 SSE 连接&quot;">​</a></h4><p>当 MCP 服务器作为 Web 服务运行时，使用此协议。以下是使用 SSE 传输设置 MCP 连接的示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建 SSE 传输</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultSseTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8931&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_2-创建工具注册表" tabindex="-1">2. 创建工具注册表 <a class="header-anchor" href="#_2-创建工具注册表" aria-label="Permalink to &quot;2. 创建工具注册表&quot;">​</a></h3><p>获得 MCP 连接后，你可以通过以下方式之一从 MCP 服务器创建带有工具的工具注册表：</p><ul><li>使用提供的传输机制进行通信。例如：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 MCP 服务器创建带有工具的工具注册表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    transport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transport,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my-client&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li>使用连接到 MCP 服务器的现有 MCP 客户端。例如：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从现有 MCP 客户端创建工具注册表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mcpClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> existingMcpClient</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_3-与你的智能体集成" tabindex="-1">3. 与你的智能体集成 <a class="header-anchor" href="#_3-与你的智能体集成" aria-label="Permalink to &quot;3. 与你的智能体集成&quot;">​</a></h3><p>要将 MCP 工具与你的 Koog 智能体结合使用，你需要向智能体注册工具注册表：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建带有工具的智能体</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> executor,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strategy,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Chat.GPT4o,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运行智能体，执行使用 MCP 工具的任务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Use the MCP tool to perform a task&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h2><h3 id="google-maps-mcp-集成" tabindex="-1">Google Maps MCP 集成 <a class="header-anchor" href="#google-maps-mcp-集成" aria-label="Permalink to &quot;Google Maps MCP 集成&quot;">​</a></h3><p>此示例演示了如何使用 MCP 连接到 <a href="https://mcp.so/server/google-maps/modelcontextprotocol" target="_blank" rel="noreferrer">Google Maps</a> 服务器以获取地理数据：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启动带有 Google Maps MCP 服务器的 Docker 容器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProcessBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;docker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;run&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-i&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;-e&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GOOGLE_MAPS_API_KEY=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$googleMapsApiKey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;mcp/google-maps&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 MCP 服务器创建带有工具的 ToolRegistry</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    transport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultStdioTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建并运行智能体</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(openAIApiToken),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Chat.GPT4o,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Get elevation of the Jetbrains Office in Munich, Germany?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="playwright-mcp-集成" tabindex="-1">Playwright MCP 集成 <a class="header-anchor" href="#playwright-mcp-集成" aria-label="Permalink to &quot;Playwright MCP 集成&quot;">​</a></h3><p>此示例演示了如何使用 MCP 连接到 <a href="https://mcp.so/server/playwright-mcp/microsoft" target="_blank" rel="noreferrer">Playwright</a> 服务器以实现 Web 自动化：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启动 Playwright MCP 服务器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProcessBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;npx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@playwright/mcp@latest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8931&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 MCP 服务器创建带有工具的 ToolRegistry</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    transport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultSseTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8931&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建并运行智能体</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(openAIApiToken),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Chat.GPT4o,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Open a browser, navigate to jetbrains.com, accept all cookies, click AI in toolbar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,44)]))}const g=i(l,[["render",h]]);export{d as __pageData,g as default};
