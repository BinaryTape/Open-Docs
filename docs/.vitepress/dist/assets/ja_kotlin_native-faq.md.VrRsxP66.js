import{_ as k,C as l,c as p,o as r,ag as h,G as e,w as t,j as i,a}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"Kotlin/Native FAQ","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/native-faq.md","filePath":"ja/kotlin/native-faq.md","lastUpdated":1754307826000}'),d={name:"ja/kotlin/native-faq.md"};function c(E,s,g,y,b,m){const n=l("tab"),o=l("tabs");return r(),p("div",null,[s[2]||(s[2]=h(`<h1 id="kotlin-native-faq" tabindex="-1">Kotlin/Native FAQ <a class="header-anchor" href="#kotlin-native-faq" aria-label="Permalink to &quot;Kotlin/Native FAQ&quot;">​</a></h1><h2 id="プログラムを実行するには" tabindex="-1">プログラムを実行するには？ <a class="header-anchor" href="#プログラムを実行するには" aria-label="Permalink to &quot;プログラムを実行するには？&quot;">​</a></h2><p>渡された引数に興味がない場合は、トップレベル関数 <code>fun main(args: Array&lt;String&gt;)</code> または単に <code>fun main()</code> を定義してください。パッケージ内にないことを確認してください。 また、<code>Array&lt;String&gt;</code> を引数にとる、または引数をとらない、かつ <code>Unit</code> を返す任意の関数をエントリポイントにするために、コンパイラスイッチ <code>-entry</code> を使用できます。</p><h2 id="kotlin-nativeのメモリ管理モデルとは" tabindex="-1">Kotlin/Nativeのメモリ管理モデルとは？ <a class="header-anchor" href="#kotlin-nativeのメモリ管理モデルとは" aria-label="Permalink to &quot;Kotlin/Nativeのメモリ管理モデルとは？&quot;">​</a></h2><p>Kotlin/Nativeは、JavaやSwiftが提供するものと同様の自動メモリ管理スキームを使用しています。</p><p><a href="/ja/kotlin/native-memory-manager">Kotlin/Nativeメモリマネージャーについて学ぶ</a></p><h2 id="共有ライブラリを作成するには" tabindex="-1">共有ライブラリを作成するには？ <a class="header-anchor" href="#共有ライブラリを作成するには" aria-label="Permalink to &quot;共有ライブラリを作成するには？&quot;">​</a></h2><p>コンパイラオプション <code>-produce dynamic</code> またはGradleビルドファイルで <code>binaries.sharedLib()</code> を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mylib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sharedLib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これはプラットフォーム固有の共有オブジェクト（Linuxでは <code>.so</code>、macOSでは <code>.dylib</code>、Windowsターゲットでは <code>.dll</code>）とC言語ヘッダーを生成し、Kotlin/Nativeプログラムで利用可能なすべてのパブリックAPIをC/C++コードから使用できるようにします。</p><p><a href="/ja/kotlin/native-dynamic-libraries">Kotlin/Nativeを動的ライブラリとして使用するチュートリアルを完了する</a></p><h2 id="静的ライブラリまたはオブジェクトファイルを作成するには" tabindex="-1">静的ライブラリまたはオブジェクトファイルを作成するには？ <a class="header-anchor" href="#静的ライブラリまたはオブジェクトファイルを作成するには" aria-label="Permalink to &quot;静的ライブラリまたはオブジェクトファイルを作成するには？&quot;">​</a></h2><p>コンパイラオプション <code>-produce static</code> またはGradleビルドファイルで <code>binaries.staticLib()</code> を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mylib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">staticLib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これはプラットフォーム固有の静的オブジェクト（<code>.a</code> ライブラリ形式）とC言語ヘッダーを生成し、Kotlin/Nativeプログラムで利用可能なすべてのパブリックAPIをC/C++コードから使用できるようにします。</p><h2 id="企業プロキシの背後でkotlin-nativeを実行するには" tabindex="-1">企業プロキシの背後でKotlin/Nativeを実行するには？ <a class="header-anchor" href="#企業プロキシの背後でkotlin-nativeを実行するには" aria-label="Permalink to &quot;企業プロキシの背後でKotlin/Nativeを実行するには？&quot;">​</a></h2><p>Kotlin/Nativeはプラットフォーム固有のツールチェインをダウンロードする必要があるため、コンパイラまたは <code>gradlew</code> の引数として <code>-Dhttp.proxyHost=xxx -Dhttp.proxyPort=xxx</code> を指定するか、<code>JAVA_OPTS</code> 環境変数で設定する必要があります。</p><h2 id="kotlinフレームワークにカスタムのobjective-cプレフィックス-名を指定するには" tabindex="-1">KotlinフレームワークにカスタムのObjective-Cプレフィックス/名を指定するには？ <a class="header-anchor" href="#kotlinフレームワークにカスタムのobjective-cプレフィックス-名を指定するには" aria-label="Permalink to &quot;KotlinフレームワークにカスタムのObjective-Cプレフィックス/名を指定するには？&quot;">​</a></h2><p>コンパイラオプション <code>-module-name</code> または対応するGradle DSLステートメントを使用します。</p>`,19)),e(o,{group:"build-script"},{default:t(()=>[e(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    iosArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"myapp"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"framework"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," listOf"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-module-name"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"TheName"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),e(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    iosArm64("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"myapp"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"framework {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-module-name"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"TheName"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[3]||(s[3]=h(`<h2 id="iosフレームワークの名前を変更するには" tabindex="-1">iOSフレームワークの名前を変更するには？ <a class="header-anchor" href="#iosフレームワークの名前を変更するには" aria-label="Permalink to &quot;iOSフレームワークの名前を変更するには？&quot;">​</a></h2><p>iOSフレームワークのデフォルト名は <code>&lt;project name&gt;.framework</code> です。 カスタム名を設定するには、<code>baseName</code> オプションを使用します。これにより、モジュール名も設定されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myapp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;TheName&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlinフレームワークでbitcodeを有効にするには" tabindex="-1">KotlinフレームワークでBitcodeを有効にするには？ <a class="header-anchor" href="#kotlinフレームワークでbitcodeを有効にするには" aria-label="Permalink to &quot;KotlinフレームワークでBitcodeを有効にするには？&quot;">​</a></h2><p>Bitcodeの埋め込みは、Xcode 14で非推奨となり、Xcode 15で全てのAppleターゲットから削除されました。 Kotlin/Nativeコンパイラは、Kotlin 2.0.20以降、bitcodeの埋め込みをサポートしていません。</p><p>以前のバージョンのXcodeを使用しているが、Kotlin 2.0.20以降のバージョンにアップグレードしたい場合は、Xcodeプロジェクトでbitcodeの埋め込みを無効にしてください。</p><h2 id="異なるコルーチンからオブジェクトを安全に参照するには" tabindex="-1">異なるコルーチンからオブジェクトを安全に参照するには？ <a class="header-anchor" href="#異なるコルーチンからオブジェクトを安全に参照するには" aria-label="Permalink to &quot;異なるコルーチンからオブジェクトを安全に参照するには？&quot;">​</a></h2><p>Kotlin/Nativeで複数のコルーチン間でオブジェクトに安全にアクセスまたは更新するには、<code>@Volatile</code> や <code>AtomicReference</code> といった並行処理セーフな構造体を使用することを検討してください。</p><p><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.concurrent/-volatile/" target="_blank" rel="noreferrer"><code>@Volatile</code></a> を使用して <code>var</code> プロパティにアノテーションを付けます。 これにより、プロパティのバッキングフィールドへのすべての読み書きがアトミックになります。さらに、書き込みは他のスレッドからすぐに可視になります。別のスレッドがこのプロパティにアクセスすると、更新された値だけでなく、更新前に発生した変更も観測されます。</p><p>あるいは、アトミックな読み取りと更新をサポートする <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.concurrent.atomics/-atomic-reference/" target="_blank" rel="noreferrer">AtomicReference</a> を使用します。Kotlin/Nativeでは、これはvolatile変数をラップし、アトミック操作を実行します。 Kotlinは、特定のデータ型に合わせたアトミック操作のための型のセットも提供しています。<code>AtomicInt</code>、<code>AtomicLong</code>、<code>AtomicBoolean</code>、<code>AtomicArray</code>、さらに <code>AtomicIntArray</code> と <code>AtomicLongArray</code> を使用できます。</p><p>共有ミュータブル状態へのアクセスに関する詳細については、<a href="/ja/kotlin/shared-mutable-state-and-concurrency">コルーチンに関するドキュメント</a>を参照してください。</p><h2 id="未リリースのkotlin-nativeバージョンでプロジェクトをコンパイルするには" tabindex="-1">未リリースのKotlin/Nativeバージョンでプロジェクトをコンパイルするには？ <a class="header-anchor" href="#未リリースのkotlin-nativeバージョンでプロジェクトをコンパイルするには" aria-label="Permalink to &quot;未リリースのKotlin/Nativeバージョンでプロジェクトをコンパイルするには？&quot;">​</a></h2><p>まず、<a href="/ja/kotlin/eap">プレビューバージョン</a>を試すことを検討してください。</p><p>さらに新しい開発バージョンが必要な場合は、Kotlin/Nativeをソースコードからビルドできます。<a href="https://github.com/JetBrains/kotlin" target="_blank" rel="noreferrer">Kotlinリポジトリ</a>をクローンし、<a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/README.md#building-from-source" target="_blank" rel="noreferrer">これらの手順</a>に従ってください。</p>`,14))])}const F=k(d,[["render",c]]);export{v as __pageData,F as default};
