import{_ as r,C as k,c as o,o as d,ag as e,G as t,j as i,w as n,a as s}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin 1.5.30 的新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/whatsnew1530.md","filePath":"kotlin/whatsnew1530.md","lastUpdated":1754307826000}'),E={name:"kotlin/whatsnew1530.md"};function g(c,a,y,u,F,m){const p=k("YouTubeVideo"),l=k("tab"),h=k("tabs");return d(),o("div",null,[a[18]||(a[18]=e('<h1 id="kotlin-1-5-30-的新特性" tabindex="-1">Kotlin 1.5.30 的新特性 <a class="header-anchor" href="#kotlin-1-5-30-的新特性" aria-label="Permalink to &quot;Kotlin 1.5.30 的新特性&quot;">​</a></h1><p><em><a href="/kotlin/releases#release-details">发布日期：2021 年 8 月 24 日</a></em></p><p>Kotlin 1.5.30 带来了语言更新，包括未来变更的预览、平台支持和工具的各种改进，以及新的标准库函数。</p><p>以下是一些主要改进：</p><ul><li>语言特性，包括实验性的密封 <code>when</code> 语句、opt-in 要求的变更等</li><li>对 Apple silicon 的原生支持</li><li>Kotlin/JS IR 后端达到 Beta 版</li><li>改进的 Gradle 插件体验</li></ul><p>你也可以在<a href="https://blog.jetbrains.com/kotlin/2021/08/kotlin-1-5-30-released/" target="_blank" rel="noreferrer">发布博文</a>和此视频中找到对这些变更的简短概述：</p>',6)),t(p,{src:"https://www.youtube.com/v/rNbb3A9IdOo",title:"Kotlin 1.5.30"}),a[19]||(a[19]=e(`<h2 id="语言特性" tabindex="-1">语言特性 <a class="header-anchor" href="#语言特性" aria-label="Permalink to &quot;语言特性&quot;">​</a></h2><p>Kotlin 1.5.30 正在呈现未来语言变更的预览，并对 opt-in 要求机制和类型推断带来了改进：</p><ul><li><a href="#exhaustive-when-statements-for-sealed-and-boolean-subjects">密封和 Boolean 主体的穷尽 when 语句</a></li><li><a href="#suspending-functions-as-supertypes">挂起函数作为超类型</a></li><li><a href="#requiring-opt-in-on-implicit-usages-of-experimental-apis">对实验性 API 隐式用法要求 opt-in</a></li><li><a href="#changes-to-using-opt-in-requirement-annotations-with-different-targets">对使用具有不同目标的 opt-in 要求注解的变更</a></li><li><a href="#improvements-to-type-inference-for-recursive-generic-types">对递归泛型类型进行类型推断的改进</a></li><li><a href="#eliminating-builder-inference-restrictions">消除构建器推断限制</a></li></ul><h3 id="密封和-boolean-主体的穷尽-when-语句" tabindex="-1">密封和 Boolean 主体的穷尽 when 语句 <a class="header-anchor" href="#密封和-boolean-主体的穷尽-when-语句" aria-label="Permalink to &quot;密封和 Boolean 主体的穷尽 when 语句&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>对密封（穷尽）when 语句的支持是<a href="/kotlin/components-stability">实验性的</a>。它可能随时被放弃或更改。 需要 Opt-in（详见下文），且你应仅将其用于求值目的。我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issue/KT-12380" target="_blank" rel="noreferrer">YouTrack</a> 上提供的反馈。</p></div><p><em>穷尽的</em> <a href="/kotlin/control-flow#when-expressions-and-statements"><code>when</code></a> 语句包含其主体所有可能类型或值的分支，或者包含特定类型的分支并包含一个 <code>else</code> 分支以覆盖任何剩余情况。</p><p>我们计划很快禁止非穷尽的 <code>when</code> 语句，以使行为与 <code>when</code> 表达式保持一致。为确保平滑迁移，你可以配置编译器以报告关于密封类或 Boolean 类型的非穷尽 <code>when</code> 语句的警告。此类警告将在 Kotlin 1.6 中默认出现，并将在后续版本中变为错误。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>枚举已会收到警告。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OFF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mode.ON</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x) { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Mode.ON </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ON&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// WARNING: Non exhaustive &#39;when&#39; statements on sealed classes/interfaces </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will be prohibited in 1.7, add an &#39;OFF&#39; or &#39;else&#39; branch instead</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y) {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// WARNING: Non exhaustive &#39;when&#39; statements on Booleans will be prohibited </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// in 1.7, add a &#39;false&#39; or &#39;else&#39; branch instead</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要在 Kotlin 1.5.30 中启用此特性，请使用语言版本 <code>1.6</code>。你也可以通过启用<a href="/kotlin/whatsnew13#progressive-mode">渐进模式</a>将警告更改为错误。</p>`,10)),t(h,{group:"build-script"},{default:n(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"all"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"apply"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "1.6"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            //progressiveMode = true"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // false by default")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:n(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"all {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '1.6'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            //progressiveMode = true"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // false by default")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[20]||(a[20]=e(`<h3 id="挂起函数作为超类型" tabindex="-1">挂起函数作为超类型 <a class="header-anchor" href="#挂起函数作为超类型" aria-label="Permalink to &quot;挂起函数作为超类型&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>对挂起函数作为超类型的支持是<a href="/kotlin/components-stability">实验性的</a>。它可能随时被放弃或更改。 需要 Opt-in（详见下文），且你应仅将其用于求值目的。我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issue/KT-18707" target="_blank" rel="noreferrer">YouTrack</a> 上提供的反馈。</p></div><p>Kotlin 1.5.30 提供了使用 <code>suspend</code> 函数类型作为超类型的能力的预览，但有一些限制。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用 <code>-language-version 1.6</code> 编译器选项来启用此特性：</p>`,5)),t(h,{group:"build-script"},{default:n(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>a[2]||(a[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"all"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"apply"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "1.6"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:n(()=>a[3]||(a[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"all {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '1.6'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[21]||(a[21]=e(`<p>此特性有以下限制：</p><ul><li>你不能将普通函数类型和 <code>suspend</code> 函数类型混合作为超类型。这是因为 JVM 后端中 <code>suspend</code> 函数类型的实现细节。它们在 JVM 后端中被表示为带有标记接口的普通函数类型。由于标记接口的存在，无法区分哪些超接口是挂起的，哪些是普通的。</li><li>你不能使用多个 <code>suspend</code> 函数超类型。如果存在类型检测，你也不能使用多个普通函数超类型。</li></ul><h3 id="对实验性-api-隐式用法要求-opt-in" tabindex="-1">对实验性 API 隐式用法要求 opt-in <a class="header-anchor" href="#对实验性-api-隐式用法要求-opt-in" aria-label="Permalink to &quot;对实验性 API 隐式用法要求 opt-in&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>opt-in 要求机制是<a href="/kotlin/components-stability">实验性的</a>。 它可能随时更改。<a href="/kotlin/opt-in-requirements">参见如何 opt-in</a>。 仅将其用于求值目的。我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 上提供的反馈。</p></div><p>库的作者可以将实验性 API 标记为<a href="/kotlin/opt-in-requirements#create-opt-in-requirement-annotations">需要 opt-in</a> 以告知用户其实验性状态。当 API 被使用时，编译器会发出警告或错误，并要求<a href="/kotlin/opt-in-requirements#opt-in-to-api">显式同意</a>来抑制它。</p><p>在 Kotlin 1.5.30 中，编译器将签名中包含实验性类型的任何声明视为实验性。也就是说，即使声明未被显式标记为需要 opt-in，它也要求对实验性 API 的隐式用法进行 opt-in。例如，如果函数的返回类型被标记为实验性 API 元素，则使用该函数需要你 opt-in。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Library code</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RequiresOptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;This API is experimental.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationRetention.BINARY)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.CLASS)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyDateTime</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Opt-in requirement annotation</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@MyDateTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateProvider</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // A class requiring opt-in</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Client code</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Warning: experimental API usage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createDateSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dateSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createDateSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Also warning: experimental API usage</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>了解更多关于 <a href="/kotlin/opt-in-requirements">opt-in 要求</a>的信息。</p><h3 id="对使用具有不同目标的-opt-in-要求注解的变更" tabindex="-1">对使用具有不同目标的 opt-in 要求注解的变更 <a class="header-anchor" href="#对使用具有不同目标的-opt-in-要求注解的变更" aria-label="Permalink to &quot;对使用具有不同目标的 opt-in 要求注解的变更&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>opt-in 要求机制是<a href="/kotlin/components-stability">实验性的</a>。 它可能随时更改。<a href="/kotlin/opt-in-requirements">参见如何 opt-in</a>。 仅将其用于求值目的。我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 上提供的反馈。</p></div><p>Kotlin 1.5.30 提出了在使用和声明 opt-in 要求注解时针对不同<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-target/" target="_blank" rel="noreferrer">目标</a>的新规则。编译器现在会报告编译期难以处理的用例的错误。在 Kotlin 1.5.30 中：</p><ul><li>禁止在使用处标记局部变量和值形参与 opt-in 要求注解。</li><li>只有当其基本声明也被标记时才允许标记覆盖。</li><li>禁止标记幕后字段和 getter。你可以转而标记基本属性。</li><li>禁止在 opt-in 要求注解声明处设置 <code>TYPE</code> 和 <code>TYPE_PARAMETER</code> 注解目标。</li></ul><p>了解更多关于 <a href="/kotlin/opt-in-requirements">opt-in 要求</a>的信息。</p><h3 id="对递归泛型类型进行类型推断的改进" tabindex="-1">对递归泛型类型进行类型推断的改进 <a class="header-anchor" href="#对递归泛型类型进行类型推断的改进" aria-label="Permalink to &quot;对递归泛型类型进行类型推断的改进&quot;">​</a></h3><p>在 Kotlin 和 Java 中，你可以定义一个递归泛型类型，它在自己的类型形参中引用自身。在 Kotlin 1.5.30 中，如果对应的类型形参是递归泛型，Kotlin 编译器可以仅根据其上界推断类型实参。这使得创建各种递归泛型类型模式成为可能，这些模式在 Java 中常用于构建器 API。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin 1.5.20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostgreSQLContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(DockerImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgres:13-alpine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withDatabaseName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withInitScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sql/schema.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin 1.5.30</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostgreSQLContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DockerImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgres:13-alpine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withDatabaseName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withInitScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sql/schema.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>你可以通过传递 <code>-Xself-upper-bound-inference</code> 或 <code>-language-version 1.6</code> 编译器选项来启用这些改进。在<a href="https://youtrack.jetbrains.com/issue/KT-40804" target="_blank" rel="noreferrer">此 YouTrack 票证</a>中查看新支持用例的其他示例。</p><h3 id="消除构建器推断限制" tabindex="-1">消除构建器推断限制 <a class="header-anchor" href="#消除构建器推断限制" aria-label="Permalink to &quot;消除构建器推断限制&quot;">​</a></h3><p>构建器推断是一种特殊的类型推断，它允许你根据其 lambda 实参内部的其他调用中的类型信息来推断调用的类型实参。这在调用泛型构建器函数（例如 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/build-list.html" target="_blank" rel="noreferrer"><code>buildList()</code></a> 或 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/sequence.html" target="_blank" rel="noreferrer"><code>sequence()</code></a>）时非常有用：<code>buildList { add(&quot;string&quot;) }</code>。</p><p>在此类 lambda 实参内部，以前在使用构建器推断尝试推断的类型信息时存在限制。这意味着你只能指定它而不能获取它。例如，在未显式指定类型实参的情况下，你无法在 <code>buildList()</code> 的 lambda 实参内部调用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/get.html" target="_blank" rel="noreferrer"><code>get()</code></a>。</p><p>Kotlin 1.5.30 使用 <code>-Xunrestricted-builder-inference</code> 编译器选项消除了这些限制。添加此选项以启用以前在泛型构建器函数的 lambda 实参内部被禁止的调用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@kotlin.ExperimentalStdlibApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        removeAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@kotlin.ExperimentalStdlibApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此外，你还可以使用 <code>-language-version 1.6</code> 编译器选项启用此特性。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>借助 Kotlin 1.5.30，Kotlin/JVM 获得了以下特性：</p><ul><li><a href="#instantiation-of-annotation-classes">注解类的实例化</a></li><li><a href="#improved-nullability-annotation-support-configuration">改进的空安全注解支持配置</a></li></ul><p>有关 JVM 平台上 Kotlin Gradle 插件的更新，请参见 <a href="#gradle">Gradle</a> 部分。</p><h3 id="注解类的实例化" tabindex="-1">注解类的实例化 <a class="header-anchor" href="#注解类的实例化" aria-label="Permalink to &quot;注解类的实例化&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>注解类的实例化是<a href="/kotlin/components-stability">实验性的</a>。它可能随时被放弃或更改。 需要 Opt-in（详见下文），且你应仅将其用于求值目的。我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issue/KT-45395" target="_blank" rel="noreferrer">YouTrack</a> 上提供的反馈。</p></div><p>借助 Kotlin 1.5.30，你现在可以在任意代码中调用<a href="/kotlin/annotations">注解类</a>的构造函数以获取结果实例。此特性涵盖了与 Java 约定相同的用例，后者允许实现注解接口。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InfoMarker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(marker: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InfoMarker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (args.size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        processInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAnnotationReflective</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        processInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InfoMarker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用 <code>-language-version 1.6</code> 编译器选项来启用此特性。请注意，所有当前的注解类限制（例如限制定义非 <code>val</code> 形参或与次构造函数不同的成员）保持不变。</p><p>在<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/annotation-instantiation.md" target="_blank" rel="noreferrer">此 KEEP</a> 中了解更多关于注解类实例化的信息。</p><h3 id="改进的空安全注解支持配置" tabindex="-1">改进的空安全注解支持配置 <a class="header-anchor" href="#改进的空安全注解支持配置" aria-label="Permalink to &quot;改进的空安全注解支持配置&quot;">​</a></h3><p>Kotlin 编译器可以读取各种类型的<a href="/kotlin/java-interop#nullability-annotations">空安全注解</a>以从 Java 获取空安全信息。此信息允许它在调用 Java 代码时报告 Kotlin 中的空安全不匹配。</p><p>在 Kotlin 1.5.30 中，你可以指定编译器是否根据特定类型的空安全注解中的信息报告空安全不匹配。只需使用编译器选项 <code>-Xnullability-annotations=@&lt;package-name&gt;:&lt;report-level&gt;</code>。在实参中，指定完全限定的空安全注解包和以下报告级别之一：</p><ul><li><code>ignore</code> 用于忽略空安全不匹配</li><li><code>warn</code> 用于报告警告</li><li><code>strict</code> 用于报告错误。</li></ul><p>参见<a href="/kotlin/java-interop#nullability-annotations">受支持的空安全注解的完整列表</a>及其完全限定包名。</p><p>以下是启用新支持的 <a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noreferrer">RxJava</a> 3 空安全注解的错误报告的示例：<code>-Xnullability-annotations=@io.reactivex.rxjava3.annotations:strict</code>。请注意，所有此类空安全不匹配默认都是警告。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native 已经收到了各种变更和改进：</p><ul><li><a href="#apple-silicon-support">Apple silicon 支持</a></li><li><a href="#improved-kotlin-dsl-for-the-cocoapods-gradle-plugin">针对 CocoaPods Gradle 插件的改进 Kotlin DSL</a></li><li><a href="#experimental-interoperability-with-swift-5-5-async-await">与 Swift 5.5 async/await 的实验性互操作</a></li><li><a href="#improved-swift-objective-c-mapping-for-objects-and-companion-objects">改进了 Swift/Objective-C 对对象和伴生对象的映射</a></li><li><a href="#deprecation-of-linkage-against-dlls-without-import-libraries-for-mingw-targets">弃用针对 MinGW 目标链接不带导入库的 DLL</a></li></ul><h3 id="apple-silicon-支持" tabindex="-1">Apple silicon 支持 <a class="header-anchor" href="#apple-silicon-支持" aria-label="Permalink to &quot;Apple silicon 支持&quot;">​</a></h3><p>Kotlin 1.5.30 引入了对 <a href="https://support.apple.com/en-us/HT211814" target="_blank" rel="noreferrer">Apple silicon</a> 的原生支持。</p><p>此前，Kotlin/Native 编译器和工具链需要在 Apple silicon 主机上工作时使用 <a href="https://developer.apple.com/documentation/apple-silicon/about-the-rosetta-translation-environment" target="_blank" rel="noreferrer">Rosetta 转换环境</a>。在 Kotlin 1.5.30 中，不再需要转换环境——编译器和工具链可以在 Apple silicon 硬件上运行，无需任何额外操作。</p><p>我们还引入了新的目标平台，使 Kotlin 代码能够在 Apple silicon 上原生运行：</p><ul><li><code>macosArm64</code></li><li><code>iosSimulatorArm64</code></li><li><code>watchosSimulatorArm64</code></li><li><code>tvosSimulatorArm64</code></li></ul><p>它们在基于 Intel 和 Apple silicon 的主机上均可用。所有现有目标平台在 Apple silicon 主机上也可用。</p><p>请注意，在 1.5.30 中，我们仅为 <code>kotlin-multiplatform</code> Gradle 插件中的 Apple silicon 目标平台提供基本支持。特别是，新的模拟器目标不包含在 <code>ios</code>、<code>tvos</code> 和 <code>watchos</code> 目标快捷方式中。 我们将继续努力改进新目标平台的用户体验。</p><h3 id="针对-cocoapods-gradle-插件的改进-kotlin-dsl" tabindex="-1">针对 CocoaPods Gradle 插件的改进 Kotlin DSL <a class="header-anchor" href="#针对-cocoapods-gradle-插件的改进-kotlin-dsl" aria-label="Permalink to &quot;针对 CocoaPods Gradle 插件的改进 Kotlin DSL&quot;">​</a></h3><h4 id="kotlin-native-框架的新形参" tabindex="-1">Kotlin/Native 框架的新形参 <a class="header-anchor" href="#kotlin-native-框架的新形参" aria-label="Permalink to &quot;Kotlin/Native 框架的新形参&quot;">​</a></h4><p>Kotlin 1.5.30 引入了针对 Kotlin/Native 框架的改进 CocoaPods Gradle 插件 DSL。除了框架名称，你还可以在 Pod 配置中指定其他形参：</p><ul><li>指定框架的动态或静态版本</li><li>显式启用导出依赖项</li><li>启用 Bitcode 嵌入</li></ul><p>要使用新的 DSL，请将你的项目更新到 Kotlin 1.5.30，并在 <code>build.gradle(.kts)</code> 文件的 <code>cocoapods</code> 部分指定形参：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    frameworkName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyFramework&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // This property is deprecated </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // and will be removed in future versions</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // New DSL for framework configuration:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // All Framework properties are supported</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Framework name configuration. Use this property instead of </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // deprecated &#39;frameworkName&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyFramework&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Dynamic framework support</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        isStatic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Dependency export</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:anotherKMMModule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        transitiveExport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // This is default.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Bitcode embedding</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        embedBitcode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BITCODE)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="支持-xcode-配置的自定义名称" tabindex="-1">支持 Xcode 配置的自定义名称 <a class="header-anchor" href="#支持-xcode-配置的自定义名称" aria-label="Permalink to &quot;支持 Xcode 配置的自定义名称&quot;">​</a></h4><p>Kotlin CocoaPods Gradle 插件支持 Xcode 构建配置中的自定义名称。如果你在 Xcode 中使用特殊的构建配置名称（例如 <code>Staging</code>），这也会有所帮助。</p><p>要指定自定义名称，请在 <code>build.gradle(.kts)</code> 文件的 <code>cocoapods</code> 部分使用 <code>xcodeConfigurationToNativeBuildType</code> 形参：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Maps custom Xcode configuration to NativeBuildType</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xcodeConfigurationToNativeBuildType[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CUSTOM_DEBUG&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NativeBuildType.DEBUG</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xcodeConfigurationToNativeBuildType[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CUSTOM_RELEASE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NativeBuildType.RELEASE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此形参不会出现在 Podspec 文件中。当 Xcode 运行 Gradle 构建过程时，Kotlin CocoaPods Gradle 插件将选择所需的原生构建类型。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>无需声明 <code>Debug</code> 和 <code>Release</code> 配置，因为它们是默认支持的。</p></div><h3 id="与-swift-5-5-async-await-的实验性互操作" tabindex="-1">与 Swift 5.5 async/await 的实验性互操作 <a class="header-anchor" href="#与-swift-5-5-async-await-的实验性互操作" aria-label="Permalink to &quot;与 Swift 5.5 async/await 的实验性互操作&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>与 Swift async/await 的并发互操作是<a href="/kotlin/components-stability">实验性的</a>。它可能随时被放弃或更改。 你应仅将其用于求值目的。我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issue/KT-47610" target="_blank" rel="noreferrer">YouTrack</a> 上提供的反馈。</p></div><p>我们在 1.4.0 中添加了<a href="/kotlin/whatsnew14#support-for-kotlin-s-suspending-functions-in-swift-and-objective-c">对从 Objective-C 和 Swift 调用 Kotlin 挂起函数的支持</a>，现在我们正在改进它以跟上 Swift 5.5 的新特性——<a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md" target="_blank" rel="noreferrer">带 <code>async</code> 和 <code>await</code> 修饰符的并发</a>。</p><p>Kotlin/Native 编译器现在会在生成的 Objective-C 头文件中为具有可空返回类型的挂起函数发出 <code>_Nullable_result</code> 属性。这使得从 Swift 调用它们作为具有正确可空性的 <code>async</code> 函数成为可能。</p><p>请注意，此特性是实验性的，未来可能会受到 Kotlin 和 Swift 变更的影响。目前，我们提供此特性的预览版，它具有某些限制，我们非常期待听到你的想法。在<a href="https://youtrack.jetbrains.com/issue/KT-47610" target="_blank" rel="noreferrer">此 YouTrack 问题</a>中了解其当前状态并留下你的反馈。</p><h3 id="改进了-swift-objective-c-对对象和伴生对象的映射" tabindex="-1">改进了 Swift/Objective-C 对对象和伴生对象的映射 <a class="header-anchor" href="#改进了-swift-objective-c-对对象和伴生对象的映射" aria-label="Permalink to &quot;改进了 Swift/Objective-C 对对象和伴生对象的映射&quot;">​</a></h3><p>现在可以通过对原生 iOS 开发者而言更直观的方式获取对象和伴生对象。例如，如果你在 Kotlin 中有以下对象：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Some value&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Some value&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要在 Swift 中访问它们，你可以使用 <code>shared</code> 和 <code>companion</code> 属性：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyObject.shared</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyObject.shared.x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyClass.companion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyClass.Companion.shared</span></span></code></pre></div><p>了解更多关于 <a href="/kotlin/native-objc-interop">Swift/Objective-C 互操作</a>的信息。</p><h3 id="弃用针对-mingw-目标链接不带导入库的-dll" tabindex="-1">弃用针对 MinGW 目标链接不带导入库的 DLL <a class="header-anchor" href="#弃用针对-mingw-目标链接不带导入库的-dll" aria-label="Permalink to &quot;弃用针对 MinGW 目标链接不带导入库的 DLL&quot;">​</a></h3><p><a href="https://lld.llvm.org/" target="_blank" rel="noreferrer">LLD</a> 是 LLVM 项目中的一个链接器，我们计划开始在 Kotlin/Native 中将其用于 MinGW 目标平台，因为它比默认的 ld.bfd 更有优势——主要是性能更好。</p><p>然而，LLD 的最新稳定版本不支持针对 MinGW (Windows) 目标的直接链接 DLL。此类链接需要使用<a href="https://stackoverflow.com/questions/3573475/how-does-the-import-library-work-details/3573527#3573527" target="_blank" rel="noreferrer">导入库</a>。尽管 Kotlin/Native 1.5.30 不需要它们，但我们添加了一个警告，以告知你此类用法与 LLD 不兼容，后者将在未来成为 MinGW 的默认链接器。</p><p>请在<a href="https://youtrack.jetbrains.com/issue/KT-47605" target="_blank" rel="noreferrer">此 YouTrack 问题</a>中分享你对迁移到 LLD 链接器的想法和担忧。</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>1.5.30 为 Kotlin Multiplatform 带来了以下显著更新：</p><ul><li><a href="#ability-to-use-custom-cinterop-libraries-in-shared-native-code">在共享原生代码中使用自定义 <code>cinterop</code> 库的能力</a></li><li><a href="#support-for-xcframeworks">支持 XCFrameworks</a></li><li><a href="#new-default-publishing-setup-for-android-artifacts">Android 构件的新的默认发布设置</a></li></ul><h3 id="在共享原生代码中使用自定义-cinterop-库的能力" tabindex="-1">在共享原生代码中使用自定义 cinterop 库的能力 <a class="header-anchor" href="#在共享原生代码中使用自定义-cinterop-库的能力" aria-label="Permalink to &quot;在共享原生代码中使用自定义 cinterop 库的能力&quot;">​</a></h3><p>Kotlin Multiplatform 为你提供了在共享源代码集中使用平台相关互操作库的<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#connect-platform-specific-libraries" target="_blank" rel="noreferrer">选项</a>。在 1.5.30 之前，这仅适用于 Kotlin/Native 发行版随附的<a href="/kotlin/native-platform-libs">平台库</a>。从 1.5.30 开始，你可以将其与自定义 <code>cinterop</code> 库一起使用。要启用此特性，请在 <code>gradle.properties</code> 中添加 <code>kotlin.mpp.enableCInteropCommonization=true</code> 属性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.enableGranularSourceSetsMetadata=true</span></span>
<span class="line"><span>kotlin.native.enableDependencyPropagation=false</span></span>
<span class="line"><span>kotlin.mpp.enableCInteropCommonization=true</span></span></code></pre></div><h3 id="支持-xcframeworks" tabindex="-1">支持 XCFrameworks <a class="header-anchor" href="#支持-xcframeworks" aria-label="Permalink to &quot;支持 XCFrameworks&quot;">​</a></h3><p>所有 Kotlin Multiplatform 项目现在都可以将 XCFrameworks 作为输出格式。Apple 引入 XCFrameworks 作为通用（fat）framework 的替代品。借助 XCFrameworks，你可以：</p><ul><li>将所有目标平台和架构的逻辑收集到单个 bundle 中。</li><li>在将应用程序发布到 App Store 之前，无需移除所有不必要的架构。</li></ul><p>如果你想在 Apple M1 设备和模拟器上使用 Kotlin 框架，XCFrameworks 非常有用。</p><p>要使用 XCFrameworks，请更新你的 <code>build.gradle(.kts)</code> 脚本：</p>`,87)),t(h,{group:"build-script"},{default:n(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>a[4]||(a[4]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFramework")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," xcf "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," XCFramework"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    ios"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"framework"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"add"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    watchos"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"framework"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"add"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    tvos"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"framework"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"add"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:n(()=>a[5]||(a[5]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFrameworkConfig")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.multiplatform'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    def"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," xcf "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," XCFrameworkConfig"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(project)")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ios {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"framework {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"add(it)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    watchos {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"framework {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"add(it)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    tvos {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"framework {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"add(it)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[22]||(a[22]=e('<p>当你声明 XCFrameworks 时，将注册以下新的 Gradle 任务：</p><ul><li><code>assembleXCFramework</code></li><li><code>assembleDebugXCFramework</code> （另外包含调试构件，<a href="/kotlin/native-ios-symbolication">其中包含 dSYMs</a>）</li><li><code>assembleReleaseXCFramework</code></li></ul><p>在<a href="https://developer.apple.com/videos/play/wwdc2019/416/" target="_blank" rel="noreferrer">此 WWDC 视频</a>中了解更多关于 XCFrameworks 的信息。</p><h3 id="android-构件的新的默认发布设置" tabindex="-1">Android 构件的新的默认发布设置 <a class="header-anchor" href="#android-构件的新的默认发布设置" aria-label="Permalink to &quot;Android 构件的新的默认发布设置&quot;">​</a></h3><p>使用 <code>maven-publish</code> Gradle 插件，你可以通过在构建脚本中指定 <a href="https://developer.android.com/studio/build/build-variants" target="_blank" rel="noreferrer">Android variant</a> 名称来<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-publish-lib-setup.html#publish-an-android-library" target="_blank" rel="noreferrer">发布针对 Android 目标平台的多平台库</a>。Kotlin Gradle 插件将自动生成发布。</p><p>在 1.5.30 之前，生成的发布<a href="https://docs.gradle.org/current/userguide/publishing_gradle_module_metadata.html" target="_blank" rel="noreferrer">元数据</a>包含每个已发布 Android variant 的构建类型属性，使其仅与库消费者使用的相同构建类型兼容。Kotlin 1.5.30 引入了新的默认发布设置：</p><ul><li>如果项目发布的所有 Android variant 具有相同的构建类型属性，则发布的 variant 将不具有构建类型属性，并将与任何构建类型兼容。</li><li>如果发布的 variant 具有不同的构建类型属性，则只有那些具有 <code>release</code> 值的 variant 将在不带构建类型属性的情况下发布。这使得发布 variant 在消费者端与任何构建类型兼容，而非发布 variant 将仅与匹配的消费者构建类型兼容。</li></ul><p>要选择退出并保留所有 variant 的构建类型属性，你可以设置此 Gradle 属性：<code>kotlin.android.buildTypeAttribute.keep=true</code>。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS 在 1.5.30 中带来了两项主要改进：</p><ul><li><a href="#js-ir-compiler-backend-reaches-beta">JS IR 编译器后端达到 Beta 版</a></li><li><a href="#better-debugging-experience-for-applications-with-the-kotlin-js-ir-backend">Kotlin/JS IR 后端应用程序的更好调试体验</a></li></ul><h3 id="js-ir-编译器后端达到-beta-版" tabindex="-1">JS IR 编译器后端达到 Beta 版 <a class="header-anchor" href="#js-ir-编译器后端达到-beta-版" aria-label="Permalink to &quot;JS IR 编译器后端达到 Beta 版&quot;">​</a></h3><p>Kotlin/JS 的<a href="/kotlin/whatsnew14#unified-backends-and-extensibility">基于 IR 的编译器后端</a>于 1.4.0 以 <a href="/kotlin/components-stability">Alpha</a> 版引入，现已达到 Beta 版。</p><p>此前，我们发布了<a href="/kotlin/js-ir-migration">JS IR 后端的迁移指南</a>以帮助你将项目迁移到新的后端。现在我们想介绍 <a href="https://plugins.jetbrains.com/plugin/17183-kotlin-js-inspection-pack/" target="_blank" rel="noreferrer">Kotlin/JS Inspection Pack</a> IDE 插件，它直接在 IntelliJ IDEA 中显示所需的更改。</p><h3 id="kotlin-js-ir-后端应用程序的更好调试体验" tabindex="-1">Kotlin/JS IR 后端应用程序的更好调试体验 <a class="header-anchor" href="#kotlin-js-ir-后端应用程序的更好调试体验" aria-label="Permalink to &quot;Kotlin/JS IR 后端应用程序的更好调试体验&quot;">​</a></h3><p>Kotlin 1.5.30 为 Kotlin/JS IR 后端带来了 JavaScript 源映射生成。这将在启用 IR 后端时改善 Kotlin/JS 调试体验，提供完整的调试支持，包括断点、单步执行和具有正确源引用的可读堆栈跟踪。</p><p>了解如何在<a href="/kotlin/js-debugging">浏览器或 IntelliJ IDEA Ultimate 中调试 Kotlin/JS</a>。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>作为我们<a href="https://youtrack.jetbrains.com/issue/KT-45778" target="_blank" rel="noreferrer">改进 Kotlin Gradle 插件用户体验</a>任务的一部分，我们实现了以下特性：</p><ul><li><a href="#support-for-java-toolchains">对 Java toolchains 的支持</a>，其中包括<a href="#ability-to-specify-jdk-home-with-useskotlinjavatoolchain-interface">为旧版 Gradle 使用 <code>UsesKotlinJavaToolchain</code> 接口指定 JDK home 的能力</a></li><li><a href="#easier-way-to-explicitly-specify-kotlin-daemon-jvm-arguments">更简单地显式指定 Kotlin daemon JVM 实参的方式</a></li></ul><h3 id="对-java-toolchains-的支持" tabindex="-1">对 Java toolchains 的支持 <a class="header-anchor" href="#对-java-toolchains-的支持" aria-label="Permalink to &quot;对 Java toolchains 的支持&quot;">​</a></h3><p>Gradle 6.7 引入了<a href="https://docs.gradle.org/current/userguide/toolchains.html" target="_blank" rel="noreferrer">&quot;Java toolchains 支持&quot;</a>特性。 使用此特性，你可以：</p><ul><li>使用与 Gradle 不同的 JDK 和 JRE 运行编译、测试和可执行文件。</li><li>使用未发布的语言版本编译和测试代码。</li></ul><p>通过 toolchains 支持，Gradle 可以自动检测本地 JDK 并安装构建所需的缺失 JDK。现在 Gradle 本身可以在任何 JDK 上运行，并且仍然可以重用<a href="/kotlin/gradle-compilation-and-caches#gradle-build-cache-support">构建缓存特性</a>。</p><p>Kotlin Gradle 插件支持 Kotlin/JVM 编译任务的 Java toolchains。 Java toolchain：</p><ul><li><p>设置 JVM 目标可用的 <a href="/kotlin/gradle-compiler-options#attributes-specific-to-jvm"><code>jdkHome</code> 选项</a>。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><a href="https://youtrack.jetbrains.com/issue/KT-46541" target="_blank" rel="noreferrer">直接设置 <code>jdkHome</code> 选项的能力已被弃用</a>。</p></div></li><li><p>如果用户未显式设置 <code>jvmTarget</code> 选项，则将 <a href="/kotlin/gradle-compiler-options#attributes-specific-to-jvm"><code>kotlinOptions.jvmTarget</code></a> 设置为 toolchain 的 JDK 版本。 如果未配置 toolchain，<code>jvmTarget</code> 字段将使用默认值。了解更多关于 <a href="/kotlin/gradle-configure-project#check-for-jvm-target-compatibility-of-related-compile-tasks">JVM 目标兼容性</a>的信息。</p></li><li><p>影响 <a href="/kotlin/kapt#run-kapt-tasks-in-parallel"><code>kapt</code> 工作进程</a>在哪个 JDK 上运行。</p></li></ul><p>使用以下代码设置 toolchain。将占位符 <code>&lt;MAJOR_JDK_VERSION&gt;</code> 替换为你想要使用的 JDK 版本：</p>',27)),t(h,{group:"build-script"},{default:n(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>a[6]||(a[6]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    jvmToolchain"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        ("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," as"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," JavaToolchainSpec).languageVersion."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(JavaLanguageVersion."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"of"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"MAJOR_JDK_VERSION"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'// "8"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:n(()=>a[7]||(a[7]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    jvmToolchain {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageVersion"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"set("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"JavaLanguageVersion."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"of("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"MAJOR_JDK_VERSION"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'// "8"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[23]||(a[23]=e(`<p>请注意，通过 <code>kotlin</code> 扩展设置 toolchain 也会更新 Java 编译任务的 toolchain。</p><p>你可以通过 <code>java</code> 扩展设置 toolchain，Kotlin 编译任务将使用它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    toolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MAJOR_JDK_VERSION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;8&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有关为 <code>KotlinCompile</code> 任务设置任何 JDK 版本的信息，请查阅<a href="/kotlin/gradle-configure-project#set-jdk-version-with-the-task-dsl">通过 Task DSL 设置 JDK 版本</a>的文档。</p><p>对于 Gradle 6.1 到 6.6 版本，<a href="#ability-to-specify-jdk-home-with-useskotlinjavatoolchain-interface">使用 <code>UsesKotlinJavaToolchain</code> 接口设置 JDK home</a>。</p><h3 id="为旧版-gradle-使用-useskotlinjavatoolchain-接口指定-jdk-home-的能力" tabindex="-1">为旧版 Gradle 使用 UsesKotlinJavaToolchain 接口指定 JDK home 的能力 <a class="header-anchor" href="#为旧版-gradle-使用-useskotlinjavatoolchain-接口指定-jdk-home-的能力" aria-label="Permalink to &quot;为旧版 Gradle 使用 UsesKotlinJavaToolchain 接口指定 JDK home 的能力&quot;">​</a></h3><p>所有支持通过 <a href="/kotlin/gradle-compiler-options"><code>kotlinOptions</code></a> 设置 JDK 的 Kotlin 任务现在都实现了 <code>UsesKotlinJavaToolchain</code> 接口。要设置 JDK home，请填写你的 JDK 路径并替换 <code>&lt;JDK_VERSION&gt;</code> 占位符：</p>`,7)),t(h,{group:"build-script"},{default:n(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>a[8]||(a[8]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"project.tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"UsesKotlinJavaToolchain"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        it.kotlinJavaToolchain.jdk."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"use"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "/path/to/local/jdk"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            JavaVersion."),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"LOCAL_JDK_VERSION"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        )")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:n(()=>a[9]||(a[9]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"project"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"UsesKotlinJavaToolchain."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        it"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlinJavaToolchain"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"jdk"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"use(")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"            '/path/to/local/jdk'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            JavaVersion.<"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"LOCAL_JDK_VERSION"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        )")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[24]||(a[24]=e('<p>对于 Gradle 6.1 到 6.6 版本，请使用 <code>UsesKotlinJavaToolchain</code> 接口。从 Gradle 6.7 开始，请改用 <a href="#support-for-java-toolchains">Java toolchains</a>。</p><p>使用此特性时，请注意 <a href="/kotlin/kapt#run-kapt-tasks-in-parallel">kapt 任务工作进程</a>将仅使用<a href="https://docs.gradle.org/current/userguide/worker_api.html#changing_the_isolation_mode" target="_blank" rel="noreferrer">进程隔离模式</a>，并且 <code>kapt.workers.isolation</code> 属性将被忽略。</p><h3 id="更简单地显式指定-kotlin-daemon-jvm-实参的方式" tabindex="-1">更简单地显式指定 Kotlin daemon JVM 实参的方式 <a class="header-anchor" href="#更简单地显式指定-kotlin-daemon-jvm-实参的方式" aria-label="Permalink to &quot;更简单地显式指定 Kotlin daemon JVM 实参的方式&quot;">​</a></h3><p>在 Kotlin 1.5.30 中，Kotlin daemon 的 JVM 实参有了新的逻辑。以下列表中的每个选项都会覆盖其之前的选项：</p>',4)),i("ul",null,[a[17]||(a[17]=e('<li><p>如果未指定任何内容，Kotlin daemon 将（像以前一样）继承 Gradle daemon 的实参。例如，在 <code>gradle.properties</code> 文件中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.gradle.jvmargs=-Xmx1500m -Xms=500m</span></span></code></pre></div></li><li><p>如果 Gradle daemon 的 JVM 实参具有 <code>kotlin.daemon.jvm.options</code> 系统属性，则像以前一样使用它：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.gradle.jvmargs=-Dkotlin.daemon.jvm.options=-Xmx1500m -Xms=500m</span></span></code></pre></div></li><li><p>你可以在 <code>gradle.properties</code> 文件中添加 <code>kotlin.daemon.jvmargs</code> 属性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.daemon.jvmargs=-Xmx1500m -Xms=500m</span></span></code></pre></div></li>',3)),i("li",null,[a[12]||(a[12]=i("p",null,[s("你可以在 "),i("code",null,"kotlin"),s(" 扩展中指定实参：")],-1)),t(h,{group:"build-script"},{default:n(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>a[10]||(a[10]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinDaemonJvmArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," listOf"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:n(()=>a[11]||(a[11]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinDaemonJvmArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i("li",null,[a[15]||(a[15]=i("p",null,"你可以为特定任务指定实参：",-1)),t(h,{group:"build-script"},{default:n(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>a[13]||(a[13]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"matching"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," { it.name "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "compileKotlin"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," &&"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," it "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"is"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," CompileUsingKotlinDaemon }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        ("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," as"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," CompileUsingKotlinDaemon).kotlinDaemonJvmArguments."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"listOf"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:n(()=>a[14]||(a[14]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .matching {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        it"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"name "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "compileKotlin"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," &&"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," it "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"instanceof"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," CompileUsingKotlinDaemon")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        kotlinDaemonJvmArguments"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"set(["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx1g"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms512m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"])")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[16]||(a[16]=i("div",{class:"note custom-block"},[i("p",{class:"custom-block-title"},"NOTE"),i("p",null,[s("在这种情况下，新的 Kotlin daemon 实例可以在任务执行时启动。了解更多关于 "),i("a",{href:"/kotlin/gradle-compilation-and-caches#setting-kotlin-daemon-s-jvm-arguments"},"Kotlin daemon 与 JVM 实参的交互"),s("的信息。")])],-1))])]),a[25]||(a[25]=e(`<p>有关 Kotlin daemon 的更多信息，请参见 <a href="/kotlin/gradle-compilation-and-caches#the-kotlin-daemon-and-how-to-use-it-with-gradle">Kotlin daemon 及其与 Gradle 的用法</a>。</p><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><p>Kotlin 1.5.30 正在为标准库的 <code>Duration</code> 和 <code>Regex</code> API 带来改进：</p><ul><li><a href="#changing-duration-tostring-output">更改 <code>Duration.toString()</code> 输出</a></li><li><a href="#parsing-duration-from-string">从 String 解析 Duration</a></li><li><a href="#matching-with-regex-at-a-particular-position">在特定位置使用 Regex 进行匹配</a></li><li><a href="#splitting-regex-to-a-sequence">将 Regex 拆分为序列</a></li></ul><h3 id="更改-duration-tostring-输出" tabindex="-1">更改 Duration.toString() 输出 <a class="header-anchor" href="#更改-duration-tostring-输出" aria-label="Permalink to &quot;更改 Duration.toString() 输出&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Duration API 是<a href="/kotlin/components-stability">实验性的</a>。它可能随时被放弃或更改。 仅将其用于求值目的。我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 上提供的反馈。</p></div><p>在 Kotlin 1.5.30 之前，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-string.html" target="_blank" rel="noreferrer"><code>Duration.toString()</code></a> 函数会返回其实参的字符串表示形式，该表示形式以生成最紧凑和可读数值的单位表示。 从现在开始，它将返回一个表示为数字组件组合的字符串值，每个组件都有自己的单位。 每个组件都是一个数字，后跟单位的缩写名称：<code>d</code>、<code>h</code>、<code>m</code>、<code>s</code>。例如：</p><table tabindex="0"><thead><tr><th><strong>函数调用示例</strong></th><th><strong>旧输出</strong></th><th><strong>当前输出</strong></th></tr></thead><tbody><tr><td>Duration.days(45).toString()</td><td><code>45.0d</code></td><td><code>45d</code></td></tr><tr><td>Duration.days(1.5).toString()</td><td><code>36.0h</code></td><td><code>1d 12h</code></td></tr><tr><td>Duration.minutes(1230).toString()</td><td><code>20.5h</code></td><td><code>20h 30m</code></td></tr><tr><td>Duration.minutes(2415).toString()</td><td><code>40.3h</code></td><td><code>1d 16h 15m</code></td></tr><tr><td>Duration.minutes(920).toString()</td><td><code>920m</code></td><td><code>15h 20m</code></td></tr><tr><td>Duration.seconds(1.546).toString()</td><td><code>1.55s</code></td><td><code>1.546s</code></td></tr><tr><td>Duration.milliseconds(25.12).toString()</td><td><code>25.1ms</code></td><td><code>25.12ms</code></td></tr></tbody></table><p>负时长（negative duration）的表示方式也已更改。负时长以负号（<code>-</code>）为前缀，如果它由多个组件组成，则用圆括号括起来：<code>-12m</code> 和 <code>-(1h 30m)</code>。</p><p>请注意，小于一秒的短时长表示为单个数字，带有其中一个亚秒单位。例如，<code>ms</code>（毫秒）、<code>us</code>（微秒）或 <code>ns</code>（纳秒）：<code>140.884ms</code>、<code>500us</code>、<code>24ns</code>。不再使用科学记数法来表示它们。</p><p>如果你想以单个单位表示时长，请使用重载的 <code>Duration.toString(unit, decimals)</code> 函数。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>我们建议在某些情况下使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-iso-string.html" target="_blank" rel="noreferrer"><code>Duration.toIsoString()</code></a>，包括序列化和互换。<code>Duration.toIsoString()</code> 使用更严格的 <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank" rel="noreferrer">ISO-8601</a> 格式，而不是 <code>Duration.toString()</code>。</p></div><h3 id="从-string-解析-duration" tabindex="-1">从 String 解析 Duration <a class="header-anchor" href="#从-string-解析-duration" aria-label="Permalink to &quot;从 String 解析 Duration&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Duration API 是<a href="/kotlin/components-stability">实验性的</a>。它可能随时被放弃或更改。 仅将其用于求值目的。我们非常感谢你在<a href="https://github.com/Kotlin/KEEP/issues/190" target="_blank" rel="noreferrer">此问题</a>中提供的反馈。</p></div><p>在 Kotlin 1.5.30 中，Duration API 中有新函数：</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/parse.html" target="_blank" rel="noreferrer"><code>parse()</code></a>，支持解析以下输出： <ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-string.html" target="_blank" rel="noreferrer"><code>toString()</code></a>。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-string.html" target="_blank" rel="noreferrer"><code>toString(unit, decimals)</code></a>。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-iso-string.html" target="_blank" rel="noreferrer"><code>toIsoString()</code></a>。</li></ul></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/parse-iso-string.html" target="_blank" rel="noreferrer"><code>parseIsoString()</code></a>，仅从 <code>toIsoString()</code> 生成的格式进行解析。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/parse-or-null.html" target="_blank" rel="noreferrer"><code>parseOrNull()</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/parse-iso-string-or-null.html" target="_blank" rel="noreferrer"><code>parseIsoStringOrNull()</code></a>，它们的行为与上述函数类似，但在无效时长格式上返回 <code>null</code> 而不是抛出 <code>IllegalArgumentException</code>。</li></ul><p>以下是一些 <code>parse()</code> 和 <code>parseOrNull()</code> 用法的示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.Duration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.ExperimentalTime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ExperimentalTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isoFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;PT1H30M&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> singleUnitFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.5h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> invalidFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1 hour 30 minutes&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isoFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(defaultFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(singleUnitFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //println(Duration.parse(invalidFormatString))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // throws exception</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(invalidFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;null&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以下是一些 <code>parseIsoString()</code> 和 <code>parseIsoStringOrNull()</code> 用法的示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.Duration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.ExperimentalTime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ExperimentalTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isoFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;PT1H30M&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseIsoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isoFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //println(Duration.parseIsoString(defaultFormatString))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // throws exception</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseIsoStringOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(defaultFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;null&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="在特定位置使用-regex-进行匹配" tabindex="-1">在特定位置使用 Regex 进行匹配 <a class="header-anchor" href="#在特定位置使用-regex-进行匹配" aria-label="Permalink to &quot;在特定位置使用 Regex 进行匹配&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>Regex.matchAt()</code> 和 <code>Regex.matchesAt()</code> 函数是<a href="/kotlin/components-stability">实验性的</a>。它们可能随时被放弃或更改。 仅将其用于求值目的。我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issue/KT-34021" target="_blank" rel="noreferrer">YouTrack</a> 上提供的反馈。</p></div><p>新的 <code>Regex.matchAt()</code> 和 <code>Regex.matchesAt()</code> 函数提供了一种检查正则表达式是否在 <code>String</code> 或 <code>CharSequence</code> 中的特定位置精确匹配的方法。</p><p><code>matchesAt()</code> 返回一个布尔结果：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> releaseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin 1.5.30 is released!&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // regular expression: one digit, dot, one digit, dot, one or more digits</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> versionRegex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchesAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;false&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchesAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>matchAt()</code> 返回匹配（如果找到），否则返回 <code>null</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> releaseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin 1.5.30 is released!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> versionRegex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;null&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1.5.30&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="将-regex-拆分为序列" tabindex="-1">将 Regex 拆分为序列 <a class="header-anchor" href="#将-regex-拆分为序列" aria-label="Permalink to &quot;将 Regex 拆分为序列&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>Regex.splitToSequence()</code> 和 <code>CharSequence.splitToSequence(Regex)</code> 函数是<a href="/kotlin/components-stability">实验性的</a>。它们可能随时被放弃或更改。 仅将其用于求值目的。我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issue/KT-23351" target="_blank" rel="noreferrer">YouTrack</a> 上提供的反馈。</p></div><p>新的 <code>Regex.splitToSequence()</code> 函数是 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/split.html" target="_blank" rel="noreferrer"><code>split()</code></a> 的惰性对应函数。它根据给定正则表达式的匹配项拆分字符串，但将结果作为 <a href="/kotlin/sequences">Sequence</a> 返回，以便对该结果的所有操作都惰性执行。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorsText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;green, red , brown&amp;blue, orange, pink&amp;green&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s]+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mixedColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splitToSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(colorsText)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mixedColor) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;brown&amp;blue&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>一个类似的功能也被添加到 <code>CharSequence</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mixedColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorsText.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splitToSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex)</span></span></code></pre></div><h2 id="serialization-1-3-0-rc" tabindex="-1">Serialization 1.3.0-RC <a class="header-anchor" href="#serialization-1-3-0-rc" aria-label="Permalink to &quot;Serialization 1.3.0-RC&quot;">​</a></h2><p><code>kotlinx.serialization</code> <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.3.0-RC" target="_blank" rel="noreferrer">1.3.0-RC</a> 现已发布，并带来了新的 JSON 序列化功能：</p><ul><li>Java IO 流序列化</li><li>属性级别的默认值控制</li><li>一个从序列化中排除 null 值的选项</li><li>多态序列化中的自定义类鉴别器</li></ul><p>在 <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.3.0-RC" target="_blank" rel="noreferrer">changelog</a> 中了解更多信息。</p>`,37))])}const v=r(E,[["render",g]]);export{C as __pageData,v as default};
