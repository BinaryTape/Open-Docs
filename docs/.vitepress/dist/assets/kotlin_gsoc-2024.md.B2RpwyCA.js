import{_ as e,c as o,o as t,ag as a}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Kotlin 2024 年度 Google 编程之夏","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/gsoc-2024.md","filePath":"kotlin/gsoc-2024.md","lastUpdated":1754307826000}'),l={name:"kotlin/gsoc-2024.md"};function n(i,r,s,p,d,g){return t(),o("div",null,r[0]||(r[0]=[a('<h1 id="kotlin-2024-年度-google-编程之夏" tabindex="-1">Kotlin 2024 年度 Google 编程之夏 <a class="header-anchor" href="#kotlin-2024-年度-google-编程之夏" aria-label="Permalink to &quot;Kotlin 2024 年度 Google 编程之夏&quot;">​</a></h1><p>本文包含 Kotlin 2024 年度 Google 编程之夏的<a href="#project-ideas">项目创意列表</a>和<a href="#kotlin-contributor-guidelines-for-google-summer-of-code-gsoc">贡献者指南</a>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin 资源： * <a href="https://github.com/jetbrains/kotlin" target="_blank" rel="noreferrer">Kotlin GitHub 版本库</a> * <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">Kotlin Slack</a> 和 <a href="https://slack-chats.kotlinlang.org/c/gsoc" target="_blank" rel="noreferrer">#gsoc</a> Slack 频道 如有任何疑问，请通过 <a href="mailto:gsoc@kotlinfoundation.org" target="_blank" rel="noreferrer">gsoc@kotlinfoundation.org</a> <a href="mailto:gsoc@kotlinfoundation.org" target="_blank" rel="noreferrer">联系我们</a></p></div><h2 id="kotlin-2024-年度-google-编程之夏贡献者指南-gsoc" tabindex="-1">Kotlin 2024 年度 Google 编程之夏贡献者指南 (GSoC) <a class="header-anchor" href="#kotlin-2024-年度-google-编程之夏贡献者指南-gsoc" aria-label="Permalink to &quot;Kotlin 2024 年度 Google 编程之夏贡献者指南 (GSoC)&quot;">​</a></h2><h3 id="开始使用" tabindex="-1">开始使用 <a class="header-anchor" href="#开始使用" aria-label="Permalink to &quot;开始使用&quot;">​</a></h3><ol><li><p>查看 <a href="https://developers.google.com/open-source/gsoc/faq" target="_blank" rel="noreferrer">GSoC 常见问题</a> 和 <a href="https://summerofcode.withgoogle.com/" target="_blank" rel="noreferrer">项目公告</a>。</p></li><li><p>熟悉 Kotlin 语言：</p><ul><li>官方 <a href="https://kotlinlang.org/" target="_blank" rel="noreferrer">Kotlin 网站</a> 是一个很好的起点。</li><li>阅读官方<a href="/kotlin/getting-started">文档</a> 以更好地理解该语言。</li><li>查阅 <a href="https://lp.jetbrains.com/academy/learn-kotlin/" target="_blank" rel="noreferrer">JetBrains Academy</a> 上的 Kotlin 课程或 Android 团队的<a href="https://developer.android.com/courses/" target="_blank" rel="noreferrer">培训选项</a>。</li><li>关注 <a href="https://twitter.com/kotlin" target="_blank" rel="noreferrer">Kotlin X</a> 或 <a href="https://bsky.app/profile/kotlinlang.org" target="_blank" rel="noreferrer">Kotlin Bluesky</a> 账号，以了解最新新闻和发展。</li><li>访问 <a href="https://www.youtube.com/@Kotlin" target="_blank" rel="noreferrer">Kotlin YouTube 频道</a>，获取教程、技巧和最新更新。</li></ul></li><li><p>了解 Kotlin 开源社区：</p><ul><li>探索一般的 <a href="/kotlin/contribute">Kotlin 贡献指南</a>。</li><li><a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">加入 Kotlin Slack 频道</a> 以与其他开发者联系并获取问题解答。</li><li><a href="https://slack-chats.kotlinlang.org/c/gsoc" target="_blank" rel="noreferrer">加入 #gsoc 频道</a> 以提问并从 GSoC 团队获得支持。</li></ul></li></ol><h3 id="如何申请" tabindex="-1">如何申请 <a class="header-anchor" href="#如何申请" aria-label="Permalink to &quot;如何申请&quot;">​</a></h3><ol><li>查阅<a href="#project-ideas">项目创意</a> 并选择你想要从事的一个。</li><li>如果你不熟悉 Kotlin，请<a href="/kotlin/getting-started">阅读 Kotlin 网站上的入门信息</a>。</li><li>参考 <a href="https://google.github.io/gsocguides/student/writing-a-proposal" target="_blank" rel="noreferrer">GSoC 贡献者指南</a>。</li><li>通过 <a href="https://summerofcode.withgoogle.com/" target="_blank" rel="noreferrer">GSoC 网站</a> 申请。 <ul><li>我们建议你编写一个与所提项目相关的可运行代码示例。你也可以向我们展示任何你尤其引以为傲的代码示例。</li><li>描述你对 Kotlin 感兴趣的原因以及你使用它的经验。</li><li>如果你参与了开源项目，请提供你的贡献历史。</li><li>如果你有 GitHub、Twitter 账号、博客或技术或科学出版物作品集，也请一并提及。</li><li>请披露因其他承诺（例如考试和假期）而与 GSoC 时间线产生的任何冲突。</li></ul></li></ol><p>谢谢！我们期待阅读你的申请！</p><h2 id="项目创意" tabindex="-1">项目创意 <a class="header-anchor" href="#项目创意" aria-label="Permalink to &quot;项目创意&quot;">​</a></h2><h3 id="kotlin-to-webassembly-编译器的增量编译-难度-高-350-小时" tabindex="-1">Kotlin-to-WebAssembly 编译器的增量编译 [难度：高，350 小时] <a class="header-anchor" href="#kotlin-to-webassembly-编译器的增量编译-难度-高-350-小时" aria-label="Permalink to &quot;Kotlin-to-WebAssembly 编译器的增量编译 [难度：高，350 小时]&quot;">​</a></h3><p>增量编译是一种技术，通过仅重新编译更改的文件而不是整个程序（也称为执行干净构建）来帮助提高编译速度。Kotlin-to-Wasm 编译器当前仅支持干净构建，但在本项目中，我们将增强其以支持增量编译。</p><p><strong>预期成果</strong></p><p>在 Kotlin-to-WebAssembly 编译器中实现增量编译特性，有助于实现更快的开发工作流。</p><p><strong>所需技能（优先）</strong></p><p>Kotlin</p><p><strong>可能导师</strong></p><p>Artem Kobzar, JetBrains</p><h3 id="compose-multiplatform-与-node-js-的-skia-原生绑定-难度-高-350-小时" tabindex="-1">Compose Multiplatform 与 Node.js 的 Skia 原生绑定 [难度：高，350 小时] <a class="header-anchor" href="#compose-multiplatform-与-node-js-的-skia-原生绑定-难度-高-350-小时" aria-label="Permalink to &quot;Compose Multiplatform 与 Node.js 的 Skia 原生绑定 [难度：高，350 小时]&quot;">​</a></h3><p><a href="https://github.com/JetBrains/compose-multiplatform" target="_blank" rel="noreferrer">Compose Multiplatform</a> 是一个声明式框架，用于在多个平台之间共享使用 Kotlin 构建的 UI。当前渲染桌面应用程序的方法是使用 JVM 作为平台，但如果我们使用 Compose Multiplatform for Web 并尝试通过 Skia 的原生绑定在浏览器外部运行应用程序，会怎么样呢？这会改善桌面应用程序的性能和内存消耗吗？还是会产生相反的效果？我们将在本项目中找出答案！</p><p><strong>预期成果</strong></p><p>将 Skia 绑定与 Compose Multiplatform 集成，并评估其对桌面应用程序的性能影响。</p><p><strong>所需技能（优先）</strong></p><p>Kotlin, Node.js, C++ 或 Rust</p><p><strong>可能导师</strong></p><p>Artem Kobzar, JetBrains</p><h3 id="compose-multiplatform-组件画廊生成器-难度-中-350-小时" tabindex="-1">Compose Multiplatform 组件画廊生成器 [难度：中，350 小时] <a class="header-anchor" href="#compose-multiplatform-组件画廊生成器-难度-中-350-小时" aria-label="Permalink to &quot;Compose Multiplatform 组件画廊生成器 [难度：中，350 小时]&quot;">​</a></h3><p><a href="https://github.com/JetBrains/compose-multiplatform" target="_blank" rel="noreferrer">Compose Multiplatform</a> 是一个声明式框架，用于在多个平台之间共享使用 Kotlin 构建的 UI。在 Web 开发的 React 时代之初，Storybook 应运而生，Storybook 提议的描述组件状态并生成整个 UI 库画廊的方法仍然是 Web 开发中文档的关键方法之一。我们能否使用 Compose Multiplatform 实现同样的功能，用它来生成 Web UI 元素的画廊，以及移动和桌面画廊？让我们在本项目中尝试一下。</p><p><strong>预期成果</strong></p><p>创建一个使用 Compose Multiplatform 为 Web、移动和桌面平台生成 UI 组件画廊的工具。</p><p><strong>所需技能（优先）</strong></p><p>Kotlin, Jetpack Compose, UI/UX 设计</p><p><strong>可能导师</strong></p><p>Artem Kobzar, JetBrains</p><h3 id="kotlin-dsl-对声明式-gradle-的改进-难度-中-175-小时" tabindex="-1">Kotlin DSL 对声明式 Gradle 的改进 [难度：中，175 小时] <a class="header-anchor" href="#kotlin-dsl-对声明式-gradle-的改进-难度-中-175-小时" aria-label="Permalink to &quot;Kotlin DSL 对声明式 Gradle 的改进 [难度：中，175 小时]&quot;">​</a></h3><p>去年 11 月，Gradle 团队<a href="https://blog.gradle.org/declarative-gradle" target="_blank" rel="noreferrer">宣布了新的声明式 Gradle 项目</a>，在该项目中引入了更高级的 Kotlin DSL。我们邀请 GSoC 贡献者加入我们，致力于改善新 DSL 的开发者体验，特别是通过在 Gradle 插件中实现可扩展性，以支持最常见的 Kotlin 和 Java 项目集成：静态分析、Kotest 等测试框架。</p><p><strong>预期成果</strong></p><p>在 Gradle 的 Kotlin DSL 中实现可扩展性特性，并改善对常见项目集成的支持。</p><p><strong>所需技能（优先）</strong></p><p>Kotlin, Gradle, Java, 静态分析</p><p><strong>可能导师</strong></p><p>Oleg Nenashev, Gradle</p><p><a href="https://gradle.github.io/community/events/gsoc/" target="_blank" rel="noreferrer">Gradle 指南</a></p><h3 id="kotlin-dsl-文档示例测试框架-难度-易-或-中-90-小时-或-175-小时" tabindex="-1">Kotlin DSL 文档示例测试框架 [难度：易 或 中，90 小时 或 175 小时] <a class="header-anchor" href="#kotlin-dsl-文档示例测试框架-难度-易-或-中-90-小时-或-175-小时" aria-label="Permalink to &quot;Kotlin DSL 文档示例测试框架 [难度：易 或 中，90 小时 或 175 小时]&quot;">​</a></h3><p>许多项目，包括 Gradle，都有大量的 Kotlin DSL 示例和代码片段（例如，请参见 <a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="noreferrer">Gradle 文档</a>）。针对多个版本进行测试会带来某些挑战，因为这些代码片段为了简洁通常是不完整的代码。我们希望构建一个测试框架，以简化在 GitHub Actions 和 Teamcity 上通过单元测试框架（Kotest 或 JUnit 5）对这些示例的验证。</p><p><strong>预期成果</strong></p><p>实现一个用于 Kotlin DSL 示例的基本测试框架，并与 GitHub Actions 集成以进行持续测试。</p><p><strong>所需技能（优先）</strong></p><p>Kotlin, 测试框架, CI/CD</p><p><strong>可能导师</strong></p><p>Oleg Nenashev, Gradle</p><p><a href="https://gradle.github.io/community/events/gsoc/" target="_blank" rel="noreferrer">Gradle 指南</a></p><h3 id="gradle-构建服务器-–-对-android-项目的支持-难度-中-或-高-175-小时-或-350-小时" tabindex="-1">Gradle 构建服务器 – 对 Android 项目的支持 [难度：中 或 高，175 小时 或 350 小时] <a class="header-anchor" href="#gradle-构建服务器-–-对-android-项目的支持-难度-中-或-高-175-小时-或-350-小时" aria-label="Permalink to &quot;Gradle 构建服务器 – 对 Android 项目的支持 [难度：中 或 高，175 小时 或 350 小时]&quot;">​</a></h3><p>Kotlin 和 Gradle 是构建 Android 项目的默认选择。2023 年 11 月，微软团队<a href="https://devblogs.microsoft.com/java/announcing-the-build-server-for-gradle-open-source-repository/" target="_blank" rel="noreferrer">宣布了 Gradle 构建服务器项目</a>，这是 <a href="https://build-server-protocol.github.io/" target="_blank" rel="noreferrer">构建服务器协议 (BSP)</a> 的 Gradle 特有的实现。在那里引入对 Android 构建的完整支持将是很棒的。对于范围较小的项目，可以在 Gradle 构建服务器中实现 Gradle 任务的自动发现和取消。</p><p><strong>预期成果</strong></p><p>在 Gradle 构建服务器中实现对 Android 项目的支持，包括自动发现和任务取消。</p><p><strong>所需技能（优先）</strong></p><p>Kotlin, Gradle, Android 开发, Visual Studio Code</p><p><strong>可能导师</strong></p><p>Oleg Nenashev, Gradle</p><p><a href="https://gradle.github.io/community/events/gsoc/" target="_blank" rel="noreferrer">Gradle 指南</a></p><h3 id="为-kotlin-native-基准测试实现内存使用情况分析-难度-中-175-小时" tabindex="-1">为 Kotlin/Native 基准测试实现内存使用情况分析 [难度：中，175 小时] <a class="header-anchor" href="#为-kotlin-native-基准测试实现内存使用情况分析-难度-中-175-小时" aria-label="Permalink to &quot;为 Kotlin/Native 基准测试实现内存使用情况分析 [难度：中，175 小时]&quot;">​</a></h3><p><a href="https://github.com/Kotlin/kotlinx-benchmark" target="_blank" rel="noreferrer">kotlinx-benchmark 库</a> 是一个开源工具包，可促进 Kotlin 代码在各种平台上的基准测试。它当前具备 JVM 的 GC 分析功能，详细说明了每个基准测试方法的分配率。本项目旨在将类似的分析功能扩展到 Kotlin/Native，从而向跨平台的统一基准测试能力迈进。</p><p>贡献者将与 Kotlin/Native 团队密切合作，创建一个 API，用于从 Kotlin/Native 内存管理器访问分配数据。目标是生成与 JVM 格式对齐的报告，确保跨平台数据呈现的一致性。此外，该项目还涉及识别并纠正其他库特性报告格式中的任何差异，从而标准化基准测试输出，以实现全面的跨平台分析。</p><p><strong>预期成果</strong></p><p>在 kotlinx-benchmark 中为 Kotlin/Native 实现内存使用情况分析并标准化基准测试输出。</p><p><strong>所需技能（优先）</strong></p><p>Kotlin, Kotlin/Native, 基准测试, 内存分析</p><p><strong>可能导师</strong></p><p>Abduqodiri Qurbonzoda, JetBrains<br> Alexander Shabalin, JetBrains</p><h3 id="kotlinx-benchmark-中支持-android-目标平台-难度-中-175-小时" tabindex="-1">kotlinx-benchmark 中支持 Android 目标平台 [难度：中，175 小时] <a class="header-anchor" href="#kotlinx-benchmark-中支持-android-目标平台-难度-中-175-小时" aria-label="Permalink to &quot;kotlinx-benchmark 中支持 Android 目标平台 [难度：中，175 小时]&quot;">​</a></h3><p><a href="https://github.com/Kotlin/kotlinx-benchmark" target="_blank" rel="noreferrer">kotlinx-benchmark 库</a> 是一个开源工具，旨在对 Kotlin 代码在多个平台（包括 JVM、JS、WasmJs 和 Native）上进行基准测试。尽管其兼容性广泛，但该库当前不支持在 Android 上进行基准测试。本项目旨在弥补这一差距。计划是利用现有的 Android 库（例如 androidx.benchmark）在幕后集成此功能。该项目的一个关键方面是确保当前适用于其他平台的所有特性也能在 Android 上得到支持，从而维护该库的多平台实用性。</p><p><strong>预期成果</strong></p><p>在 kotlinx-benchmark 中集成对 Android 平台的基准测试支持，确保与其它平台特性对等。</p><p><strong>所需技能（优先）</strong></p><p>Kotlin, Android 开发, 基准测试</p><p><strong>可能导师</strong></p><p>Abduqodiri Qurbonzoda, JetBrains<br> Rahul Ravikumar, Google</p><h3 id="在-intellij-idea-中为-kotlinx-benchmark-基准测试启用点击运行-难度-中-175-小时" tabindex="-1">在 IntelliJ IDEA 中为 kotlinx-benchmark 基准测试启用点击运行 [难度：中，175 小时] <a class="header-anchor" href="#在-intellij-idea-中为-kotlinx-benchmark-基准测试启用点击运行-难度-中-175-小时" aria-label="Permalink to &quot;在 IntelliJ IDEA 中为 kotlinx-benchmark 基准测试启用点击运行 [难度：中，175 小时]&quot;">​</a></h3><p><a href="https://github.com/Kotlin/kotlinx-benchmark" target="_blank" rel="noreferrer">kotlinx-benchmark</a> 是一个开源库，用于对使用 Kotlin 编写的多平台代码进行基准测试。它包含一个 Gradle 插件，应用后可提供运行基准测试的任务。然而，执行这些任务需要导航到 IDE 的 Gradle 面板或使用终端。此外，运行特定的基准测试需要进一步的步骤，增加了复杂性。为了缓解这种不便并简化流程，本项目旨在允许用户直接从 IntelliJ IDEA 界面运行单个基准测试或整个套件，效仿单元测试所提供的便利。实现此目标可能需要与 IntelliJ IDEA 团队合作和/或直接贡献给 IntelliJ 项目。</p><p><strong>预期成果</strong></p><p>在 IntelliJ IDEA 中为 kotlinx-benchmark 基准测试集成点击运行功能，改善用户体验。</p><p><strong>所需技能（优先）</strong></p><p>Kotlin, IntelliJ IDEA 插件开发, 基准测试</p><p><strong>可能导师</strong></p><p>Abduqodiri Qurbonzoda, JetBrains</p>',86)]))}const b=e(l,[["render",n]]);export{c as __pageData,b as default};
