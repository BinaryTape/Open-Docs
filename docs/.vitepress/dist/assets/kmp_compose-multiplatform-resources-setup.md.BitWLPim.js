import{_ as p,a as r}from"./chunks/compose-resources-qualifiers.Cw94GyEp.js";import{_ as h,C as i,c as o,o as k,j as a,G as e,ag as l,a as d}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"多平台资源的设置与配置","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/compose-multiplatform-resources-setup.md","filePath":"kmp/compose-multiplatform-resources-setup.md","lastUpdated":1755516278000}'),c={name:"kmp/compose-multiplatform-resources-setup.md"};function E(u,s,g,m,y,F){const n=i("show-structure"),t=i("secondary-label");return k(),o("div",null,[s[0]||(s[0]=a("h1",{id:"多平台资源的设置与配置",tabindex:"-1"},[d("多平台资源的设置与配置 "),a("a",{class:"header-anchor",href:"#多平台资源的设置与配置","aria-label":'Permalink to "多平台资源的设置与配置"'},"​")],-1)),e(n,{depth:"3"}),s[1]||(s[1]=l(`<p>要正确配置项目以使用多平台资源：</p><ol><li>添加库依赖项。</li><li>为每种资源创建必要的目录。</li><li>为限定资源创建额外目录（例如，用于深色 UI 主题的不同图像或本地化字符串）。</li></ol><h2 id="构建脚本和目录设置" tabindex="-1">构建脚本和目录设置 <a class="header-anchor" href="#构建脚本和目录设置" aria-label="Permalink to &quot;构建脚本和目录设置&quot;">​</a></h2><p>要在多平台项目中访问资源，请添加库依赖项并在项目目录中组织文件：</p><ol><li><p>在 <code>composeApp</code> 目录中的 <code>build.gradle.kts</code> 文件中，向 <code>commonMain</code> 源代码集添加一个依赖项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compose.components.resources)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>要直接引用该库，请使用 <a href="https://central.sonatype.com/artifact/org.jetbrains.compose.components/components-resources" target="_blank" rel="noreferrer">Maven Central 中的 artifact 页面</a>中的完全限定名。</p></div></li><li><p>在你想要添加资源的源代码集目录中（本例中为 <code>commonMain</code>），创建一个新的 <code>composeResources</code> 目录：</p><p><img src="`+p+`" alt="Compose resources project structure" width="250"></p></li><li><p>按照以下规则组织 <code>composeResources</code> 目录结构：</p><ul><li>图像应放在 <code>drawable</code> 目录中。Compose Multiplatform 支持栅格图像（JPEG、PNG、位图和 WebP）以及矢量 Android XML 图像（不含对 Android 资源的引用）。</li><li>字体应放在 <code>font</code> 目录中。</li><li>字符串应放在 <code>values</code> 目录中。</li><li>其他文件应放在 <code>files</code> 目录中，可采用你认为合适的任何文件夹层级结构。</li></ul></li></ol><h3 id="自定义资源目录" tabindex="-1">自定义资源目录 <a class="header-anchor" href="#自定义资源目录" aria-label="Permalink to &quot;自定义资源目录&quot;">​</a></h3><p>在 <code>build.gradle.kts</code> 文件中的 <code>compose.resources {}</code> 代码块中，你可以为每个源代码集指定自定义资源目录。每个自定义目录也应以与默认 <code>composeResources</code> 相同的方式包含文件：例如，图像的 <code>drawable</code> 子目录，字体的 <code>font</code> 子目录，等等。</p><p>一个简单的例子是指向特定文件夹：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    customDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceSetName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;desktopMain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        directoryProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { layout.projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;desktopResources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你还可以设置一个由 Gradle 任务填充的文件夹，例如，包含已下载文件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DownloadRemoteFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefaultTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OutputDirectory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> layout.buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;downloadedRemoteFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @TaskAction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* your code for downloading files */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    customDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceSetName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;iosMain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        directoryProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DownloadRemoteFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;downloadedRemoteFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.outputDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="androidlibrary-目标中的资源" tabindex="-1"><code>androidLibrary</code> 目标中的资源 <a class="header-anchor" href="#androidlibrary-目标中的资源" aria-label="Permalink to &quot;\`androidLibrary\` 目标中的资源&quot;">​</a></h3>`,12)),e(t,{ref:"Experimental"},null,512),s[2]||(s[2]=l(`<p>从 Android Gradle 插件 8.8.0 版本开始，你可以在 <code>androidLibrary</code> 目标中使用生成的 <code>Res</code> 类和资源访问器。要在 <code>androidLibrary</code> 中启用对多平台资源的支持，请按如下方式更新你的配置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin {</span></span>
<span class="line"><span>  androidLibrary {</span></span>
<span class="line"><span>    androidResources.enable = true</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="限定符" tabindex="-1">限定符 <a class="header-anchor" href="#限定符" aria-label="Permalink to &quot;限定符&quot;">​</a></h2><p>有时，同一资源需要根据环境以不同方式呈现，例如根据区域设置、屏幕密度或界面主题。例如，你可能需要针对不同语言进行文本本地化，或调整深色主题的图像。为此，该库提供了特殊的限定符。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>关于如何处理资源相关设置，请参阅 <a href="./compose-resource-environment">管理本地资源环境</a> 教程。</p></div><p>除 <code>files</code> 目录中的原始文件外，所有资源类型都支持限定符。使用连字符将限定符添加到目录名称中：</p><p><img src="`+r+'" alt="Qualifiers in multiplatform resources" width="250"></p><p>该库支持以下限定符（按优先级顺序）：<a href="#language-and-regional-qualifiers">语言</a>、<a href="#theme-qualifier">主题</a> 和 <a href="#density-qualifier">密度</a>。</p><ul><li>不同类型的限定符可以一起应用。例如，“drawable-en-rUS-mdpi-dark”是一个适用于美国地区英语语言、深色主题下 160 DPI 屏幕的图像。</li><li>如果带有请求限定符的资源不可访问，则会使用默认资源（不带限定符）。</li></ul><h3 id="语言和区域限定符" tabindex="-1">语言和区域限定符 <a class="header-anchor" href="#语言和区域限定符" aria-label="Permalink to &quot;语言和区域限定符&quot;">​</a></h3><p>你可以组合语言和区域限定符：</p><ul><li>语言由两位（ISO 639-1）或三位（ISO 639-2）<a href="https://www.loc.gov/standards/iso639-2/php/code_list.php" target="_blank" rel="noreferrer">语言代码</a>定义。</li><li>你可以在语言代码中添加两位 <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2" target="_blank" rel="noreferrer">ISO 3166-1-alpha-2</a> 区域代码。 区域代码必须带有小写 <code>r</code> 前缀，例如：<code>drawable-spa-rMX</code></li></ul><p>语言和区域代码区分大小写。</p><h3 id="主题限定符" tabindex="-1">主题限定符 <a class="header-anchor" href="#主题限定符" aria-label="Permalink to &quot;主题限定符&quot;">​</a></h3><p>你可以添加“light”或“dark”限定符。Compose Multiplatform 会根据当前系统主题选择所需的资源。</p><h3 id="密度限定符" tabindex="-1">密度限定符 <a class="header-anchor" href="#密度限定符" aria-label="Permalink to &quot;密度限定符&quot;">​</a></h3><p>你可以使用以下密度限定符：</p><ul><li>“ldpi” – 120 DPI，0.75 倍密度</li><li>“mdpi” – 160 DPI，1 倍密度</li><li>“hdpi” – 240 DPI，1.5 倍密度</li><li>“xhdpi” – 320 DPI，2 倍密度</li><li>“xxhdpi” – 480 DPI，3 倍密度</li><li>“xxxhdpi” – 640 DPI，4 倍密度</li></ul><p>资源是根据系统中定义的屏幕密度来选择的。</p><h2 id="发布" tabindex="-1">发布 <a class="header-anchor" href="#发布" aria-label="Permalink to &quot;发布&quot;">​</a></h2><p>从 Compose Multiplatform 1.6.10 版本开始，所有必要的资源都包含在发布的 Maven artifact 中。</p><p>要启用此功能，你的项目需要使用 Kotlin 2.0.0 或更高版本以及 Gradle 7.6 或更高版本。</p><h2 id="接下来" tabindex="-1">接下来？ <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来？&quot;">​</a></h2><ul><li>关于如何访问你设置的资源以及如何自定义默认生成的访问器，请参阅 <a href="./compose-multiplatform-resources-usage">在应用中使用多平台资源</a> 页面。</li><li>查看官方 <a href="https://github.com/JetBrains/compose-multiplatform/tree/master/components/resources/demo" target="_blank" rel="noreferrer">演示项目</a>，该项目展示了如何在面向 iOS、Android 和 desktop 的 Compose Multiplatform 项目中处理资源。</li></ul>',24))])}const C=h(c,[["render",E]]);export{_ as __pageData,C as default};
