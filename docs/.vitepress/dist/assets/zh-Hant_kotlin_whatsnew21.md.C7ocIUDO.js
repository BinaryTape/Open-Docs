import{_ as o,a as d,b as E}from"./chunks/wasm-debugger-improved.BQ6ItNQi.js";import{_ as g}from"./chunks/compiler-options-levels.DqXOqvYF.js";import{_ as c}from"./chunks/xcode-swift-export-run-script-phase.CN5rl4tW.js";import{_ as y,a as F}from"./chunks/wasm-custom-formatters-firefox.C2LVO8ja.js";import{_ as u,C as t,c as b,o as m,ag as e,j as s,a,G as n,w as l}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"Kotlin 2.1.0 的新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew21.md","filePath":"zh-Hant/kotlin/whatsnew21.md","lastUpdated":1754307826000}'),C={name:"zh-Hant/kotlin/whatsnew21.md"},A={tabindex:"0"},f={style:{"text-align":"left"}};function v(B,i,D,q,K,x){const p=t("shortcut"),h=t("tab"),k=t("tabs"),r=t("list");return m(),b("div",null,[i[16]||(i[16]=e(`<h1 id="kotlin-2-1-0-的新功能" tabindex="-1">Kotlin 2.1.0 的新功能 <a class="header-anchor" href="#kotlin-2-1-0-的新功能" aria-label="Permalink to &quot;Kotlin 2.1.0 的新功能&quot;">​</a></h1><p><em><a href="/zh-Hant/kotlin/releases#release-details">發佈日期：2024 年 11 月 27 日</a></em></p><p>Kotlin 2.1.0 版本現已推出！以下是主要亮點：</p><ul><li><strong>預覽版中新的語言功能</strong>：<a href="#guard-conditions-in-when-with-a-subject"><code>when</code> 條件式中帶有主體的防護條件</a>、 <a href="#non-local-break-and-continue">非局部 <code>break</code> 和 <code>continue</code></a>，以及 <a href="#multi-dollar-string-interpolation">多美元符號字串插值</a>。</li><li><strong>K2 編譯器更新</strong>：<a href="#extra-compiler-checks">編譯器檢查的更大彈性</a> 和 <a href="#improved-k2-kapt-implementation">kapt 實作的改進</a>。</li><li><strong>Kotlin 多平台</strong>：引入了 <a href="#basic-support-for-swift-export">對 Swift 匯出的基本支援</a>、 <a href="#new-gradle-dsl-for-compiler-options-in-multiplatform-projects-promoted-to-stable">編譯器選項的穩定 Gradle DSL</a> 等。</li><li><strong>Kotlin/Native</strong>：<a href="#iosarm64-promoted-to-tier-1"><code>iosArm64</code> 支援度提升</a> 和其他更新。</li><li><strong>Kotlin/Wasm</strong>：多項更新，包括 <a href="#support-for-incremental-compilation">支援增量編譯</a>。</li><li><strong>Gradle 支援</strong>：<a href="#gradle-improvements">與較新版本 Gradle 及 Android Gradle 外掛程式的相容性提升</a>， 以及 <a href="#new-api-for-kotlin-gradle-plugin-extensions">Kotlin Gradle 外掛程式 API 的更新</a>。</li><li><strong>文件</strong>：<a href="#documentation-updates">Kotlin 文件有顯著改進</a>。</li></ul><h2 id="ide-支援" tabindex="-1">IDE 支援 <a class="header-anchor" href="#ide-支援" aria-label="Permalink to &quot;IDE 支援&quot;">​</a></h2><p>支援 2.1.0 的 Kotlin 外掛程式已捆綁在最新版 IntelliJ IDEA 和 Android Studio 中。 您不需要更新 IDE 中的 Kotlin 外掛程式。 您所需要做的就是將建置腳本中的 Kotlin 版本更改為 2.1.0。</p><p>有關詳細資訊，請參閱 <a href="/zh-Hant/kotlin/releases#update-to-a-new-kotlin-version">更新至新的 Kotlin 版本</a>。</p><h2 id="語言" tabindex="-1">語言 <a class="header-anchor" href="#語言" aria-label="Permalink to &quot;語言&quot;">​</a></h2><p>在 K2 編譯器隨 Kotlin 2.0.0 發佈後，JetBrains 團隊正專注於透過新功能改進語言。 在此版本中，我們很高興宣布數項新的語言設計改進。</p><p>這些功能已提供預覽，我們鼓勵您嘗試並分享您的回饋：</p><ul><li><a href="#guard-conditions-in-when-with-a-subject"><code>when</code> 條件式中帶有主體的防護條件</a></li><li><a href="#non-local-break-and-continue">非局部 <code>break</code> 和 <code>continue</code></a></li><li><a href="#multi-dollar-string-interpolation">多美元符號插值 (Multi-dollar Interpolation)：改進字串字面值中 <code>$</code> 的處理方式</a></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>所有功能在啟用 K2 模式的最新版 IntelliJ IDEA 2024.3 中均有 IDE 支援。 在 <a href="https://blog.jetbrains.com/idea/2024/11/intellij-idea-2024-3/" target="_blank" rel="noreferrer">IntelliJ IDEA 2024.3 部落格文章</a> 中了解更多資訊。</p></div><p><a href="/zh-Hant/kotlin/kotlin-language-features-and-proposals">查看 Kotlin 語言設計功能和提案的完整列表</a>。</p><p>此版本也帶來了以下語言更新：</p><ul><li><a href="#support-for-requiring-opt-in-to-extend-apis"></a></li><li><a href="#improved-overload-resolution-for-functions-with-generic-types"></a></li><li><a href="#improved-exhaustiveness-checks-for-when-expressions-with-sealed-classes"></a></li></ul><h3 id="when-條件式中帶有主體的防護條件" tabindex="-1"><code>when</code> 條件式中帶有主體的防護條件 <a class="header-anchor" href="#when-條件式中帶有主體的防護條件" aria-label="Permalink to &quot;\`when\` 條件式中帶有主體的防護條件&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能處於 <a href="/zh-Hant/kotlin/kotlin-evolution-principles#pre-stable-features">預覽</a> 階段，需要選擇啟用 (詳情請見下文)。 我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-71140" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋。</p></div><p>從 2.1.0 開始，您可以在帶有主體的 <code>when</code> 條件式或陳述式中使用防護條件 (guard conditions)。</p><p>防護條件允許您為 <code>when</code> 條件式的分支包含多個條件，使複雜的控制流更為明確和簡潔，並簡化程式碼結構。</p><p>要在分支中包含防護條件，請將其放置在主要條件之後，並以 <code>if</code> 分隔：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mouseHunter: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> feedCat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> breed: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> feedDog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> feedAnimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animal: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (animal) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 僅包含主要條件的分支。當 \`animal\` 為 \`Dog\` 時呼叫 \`feedDog()\`。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Animal.Dog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">feedDog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 包含主要條件和防護條件的分支。當 \`animal\` 為 \`Cat\` 且非 \`mouseHunter\` 時呼叫 \`feedCat()\`。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Animal.Cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">animal.mouseHunter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">feedCat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 若上述條件均不符合，則印出 &quot;Unknown animal&quot;。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Unknown animal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在單個 <code>when</code> 條件式中，您可以組合帶有和不帶防護條件的分支。 帶有防護條件的分支中的程式碼僅在主要條件和防護條件均為 <code>true</code> 時執行。 如果主要條件不匹配，則不會評估防護條件。 此外，防護條件也支援 <code>else if</code>。</p><p>若要在專案中啟用防護條件，請在命令列中使用以下編譯器選項：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xwhen-guards</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.kt</span></span></code></pre></div><p>或將其添加到 Gradle 建置檔案的 <code>compilerOptions {}</code> 區塊中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xwhen-guards&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="非局部-break-和-continue" tabindex="-1">非局部 break 和 continue <a class="header-anchor" href="#非局部-break-和-continue" aria-label="Permalink to &quot;非局部 break 和 continue&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能處於 <a href="/zh-Hant/kotlin/kotlin-evolution-principles#pre-stable-features">預覽</a> 階段，需要選擇啟用 (詳情請見下文)。 我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-1436" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋。</p></div><p>Kotlin 2.1.0 新增了另一項期待已久的功能預覽：使用非局部 (non-local) <code>break</code> 和 <code>continue</code> 的能力。 此功能擴展了您在內聯函數範圍內可以使用的工具集，並減少了專案中的重複程式碼。</p><p>以前，您只能使用非局部返回 (non-local returns)。 現在，Kotlin 也支援非局部 (non-locally) 的 <code>break</code> 和 <code>continue</code> <a href="/zh-Hant/kotlin/returns">跳轉表達式</a>。 這意味著您可以在作為引數傳遞給包含迴圈的內聯函數的 lambda 表達式中使用它們：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elements: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (element </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elements) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> variable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nullableMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warning</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Element is null or invalid, continuing...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            continue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (variable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 如果變數為零，返回 true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>若要在您的專案中嘗試此功能，請在命令列中使用 <code>-Xnon-local-break-continue</code> 編譯器選項：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xnon-local-break-continue</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.kt</span></span></code></pre></div><p>或將其添加到 Gradle 建置檔案的 <code>compilerOptions {}</code> 區塊中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xnon-local-break-continue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>我們計劃在未來的 Kotlin 版本中使此功能穩定 (Stable)。 如果您在使用非局部 <code>break</code> 和 <code>continue</code> 時遇到任何問題，請向我們的 <a href="https://youtrack.jetbrains.com/issue/KT-1436" target="_blank" rel="noreferrer">問題追蹤器</a> 回報。</p><h3 id="多美元符號字串插值" tabindex="-1">多美元符號字串插值 <a class="header-anchor" href="#多美元符號字串插值" aria-label="Permalink to &quot;多美元符號字串插值&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能處於 <a href="/zh-Hant/kotlin/kotlin-evolution-principles#pre-stable-features">預覽</a> 階段，需要選擇啟用 (詳情請見下文)。 我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-2425" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋。</p></div><p>Kotlin 2.1.0 引入了多美元符號字串插值 (multi-dollar string interpolation) 的支援，改進了字串字面值中美元符號 (<code>$</code>) 的處理方式。 此功能在需要多個美元符號的環境中非常有用，例如模板引擎、JSON 綱要或其它資料格式。</p><p>Kotlin 中的字串插值使用單個美元符號。 然而，在字串中使用字面值美元符號 (這在財務資料和模板系統中很常見) 需要變通方法，例如 <code>\${&#39;$&#39;}</code>。 啟用多美元符號插值功能後，您可以設定多少個美元符號會觸發插值，而較少數量的美元符號則被視為字串字面值。</p><p>以下是如何使用 <code>:</code> 產生帶有預留位置的 JSON 綱要多行字串的範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.jsonSchema : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$schema</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;: &quot;https://json-schema.org/draft/2020-12/schema&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;: &quot;https://example.com/product.schema.json&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$dynamicAnchor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;: &quot;meta&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;title&quot;: &quot;\${simpleName ?: qualifiedName ?: &quot;unknown&quot;}&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;type&quot;: &quot;object&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span></code></pre></div><p>在此範例中，開頭的 <code>$</code> 意味著您需要 <strong>兩個美元符號</strong> (<code>$$</code>) 來觸發插值。 這可以防止 <code>$schema</code>、<code>$id</code> 和 <code>$dynamicAnchor</code> 被解釋為插值標記。</p><p>這種方法在處理使用美元符號作為預留位置語法的系統時特別有用。</p><p>若要啟用此功能，請在命令列中使用以下編譯器選項：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xmulti-dollar-interpolation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.kt</span></span></code></pre></div><p>或者，更新 Gradle 建置檔案的 <code>compilerOptions {}</code> 區塊：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xmulti-dollar-interpolation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果您的程式碼已經使用單個美元符號的標準字串插值，則無需更改。 當您需要在字串中使用字面值美元符號時，可以使用 <code>$</code>。</p><h3 id="支援要求選擇啟用以擴展-api" tabindex="-1">支援要求選擇啟用以擴展 API <a class="header-anchor" href="#支援要求選擇啟用以擴展-api" aria-label="Permalink to &quot;支援要求選擇啟用以擴展 API&quot;">​</a></h3><p>Kotlin 2.1.0 引入了 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-subclass-opt-in-required/" target="_blank" rel="noreferrer"><code>@SubclassOptInRequired</code></a> 註解，它允許函式庫作者在使用者實作實驗性介面或擴展實驗性類別之前，要求明確的選擇啟用 (opt-in)。</p><p>當函式庫 API 穩定到足以使用，但可能會隨著新的抽象函數而演進，導致繼承不穩定時，此功能會很有用。</p><p>若要為 API 元素新增選擇啟用要求，請使用 <code>@SubclassOptInRequired</code> 註解並引用註解類別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RequiresOptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RequiresOptIn.Level.WARNING,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Interfaces in this library are experimental&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UnstableApi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@SubclassOptInRequired</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UnstableApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CoreLibraryApi</span></span></code></pre></div><p>在此範例中，<code>CoreLibraryApi</code> 介面要求使用者在實作之前選擇啟用。 使用者可以這樣選擇啟用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UnstableApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CoreLibraryApi</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>當您使用 <code>@SubclassOptInRequired</code> 註解來要求選擇啟用時，此要求不會傳播到任何 <a href="/zh-Hant/kotlin/nested-classes">內部或巢狀類別</a>。</p></div><p>有關如何在 API 中使用 <code>@SubclassOptInRequired</code> 註解的實際範例，請查看 <code>kotlinx.coroutines</code> 函式庫中的 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-shared-flow/" target="_blank" rel="noreferrer"><code>SharedFlow</code></a> 介面。</p><h3 id="泛型類型函數的重載解析改進" tabindex="-1">泛型類型函數的重載解析改進 <a class="header-anchor" href="#泛型類型函數的重載解析改進" aria-label="Permalink to &quot;泛型類型函數的重載解析改進&quot;">​</a></h3><p>以前，如果您有多個函數重載，其中一些具有泛型類型的值參數，而另一些在相同位置具有函數類型，則解析行為有時可能不一致。</p><p>這導致了不同的行為，具體取決於您的重載是成員函數還是擴展函數。 例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KeyValueStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lazyValue: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> V) {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KeyValueStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K, V</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">storeExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">V</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KeyValueStore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">K, V</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">storeExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lazyValue: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> V) {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kvs: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KeyValueStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 成員函數</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kvs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解析為 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kvs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解析為 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 擴展函數</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kvs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">storeExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解析為 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kvs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">storeExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 無法解析</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此範例中，<code>KeyValueStore</code> 類別有兩個 <code>store()</code> 函數的重載，其中一個重載具有泛型類型 <code>K</code> 和 <code>V</code> 的函數參數，另一個則具有返回泛型類型 <code>V</code> 的 lambda 函數。 同樣，擴展函數 <code>storeExtension()</code> 也有兩個重載。</p><p>當 <code>store()</code> 函數在帶有或不帶 lambda 函數的情況下被呼叫時，編譯器成功解析了正確的重載。 然而，當擴展函數 <code>storeExtension()</code> 在帶有 lambda 函數的情況下被呼叫時，編譯器未能解析出正確的重載，因為它錯誤地認為兩個重載都適用。</p><p>為了解決這個問題，我們引入了一種新的啟發式方法，以便當一個具有泛型類型的函數參數無法根據不同引數的資訊接受 lambda 函數時，編譯器可以捨棄一個可能的重載。 此變更使成員函數和擴展函數的行為保持一致，並且在 Kotlin 2.1.0 中預設啟用。</p><h3 id="when-條件式中密封類別的窮盡性檢查改進" tabindex="-1"><code>when</code> 條件式中密封類別的窮盡性檢查改進 <a class="header-anchor" href="#when-條件式中密封類別的窮盡性檢查改進" aria-label="Permalink to &quot;\`when\` 條件式中密封類別的窮盡性檢查改進&quot;">​</a></h3><p>在先前版本的 Kotlin 中，即使 <code>sealed class</code> 階層中的所有情況都已涵蓋，編譯器仍要求 <code>when</code> 條件式中類型參數的密封上限 (sealed upper bounds) 必須有 <code>else</code> 分支。 Kotlin 2.1.0 解決並改進了這種行為，使窮盡性檢查 (exhaustiveness checks) 更強大，並允許您移除多餘的 <code>else</code> 分支，讓 <code>when</code> 條件式更簡潔、更直觀。</p><p>以下是演示此變更的範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Result</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Error!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Success </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 不再需要 else 分支</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-k2-編譯器" tabindex="-1">Kotlin K2 編譯器 <a class="header-anchor" href="#kotlin-k2-編譯器" aria-label="Permalink to &quot;Kotlin K2 編譯器&quot;">​</a></h2><p>隨著 Kotlin 2.1.0 的推出，K2 編譯器現在在處理 <a href="#extra-compiler-checks">編譯器檢查</a> 和 <a href="#global-warning-suppression">警告</a> 時提供了更大的彈性，並 <a href="#improved-k2-kapt-implementation">改進了對 kapt 外掛程式的支援</a>。</p><h3 id="額外編譯器檢查" tabindex="-1">額外編譯器檢查 <a class="header-anchor" href="#額外編譯器檢查" aria-label="Permalink to &quot;額外編譯器檢查&quot;">​</a></h3><p>使用 Kotlin 2.1.0，您現在可以在 K2 編譯器中啟用額外檢查。 這些是額外的宣告、表達式和類型檢查，通常對編譯不關鍵，但如果您想要驗證以下情況，它們仍然很有用：</p><table tabindex="0"><thead><tr><th style="text-align:left;">檢查類型</th><th style="text-align:left;">註解</th></tr></thead><tbody><tr><td style="text-align:left;"><code>REDUNDANT_NULLABLE</code></td><td style="text-align:left;">使用 <code>Boolean??</code> 而非 <code>Boolean?</code></td></tr><tr><td style="text-align:left;"><code>PLATFORM_CLASS_MAPPED_TO_KOTLIN</code></td><td style="text-align:left;">使用 <code>java.lang.String</code> 而非 <code>kotlin.String</code></td></tr><tr><td style="text-align:left;"><code>ARRAY_EQUALITY_OPERATOR_CAN_BE_REPLACED_WITH_EQUALS</code></td><td style="text-align:left;">使用 <code>arrayOf(&quot;&quot;) == arrayOf(&quot;&quot;)</code> 而非 <code>arrayOf(&quot;&quot;).contentEquals(arrayOf(&quot;&quot;))</code></td></tr><tr><td style="text-align:left;"><code>REDUNDANT_CALL_OF_CONVERSION_METHOD</code></td><td style="text-align:left;">使用 <code>42.toInt()</code> 而非 <code>42</code></td></tr><tr><td style="text-align:left;"><code>USELESS_CALL_ON_NOT_NULL</code></td><td style="text-align:left;">使用 <code>&quot;&quot;.orEmpty()</code> 而非 <code>&quot;&quot;</code></td></tr><tr><td style="text-align:left;"><code>REDUNDANT_SINGLE_EXPRESSION_STRING_TEMPLATE</code></td><td style="text-align:left;">使用 <code>&quot;$string&quot;</code> 而非 <code>string</code></td></tr><tr><td style="text-align:left;"><code>UNUSED_ANONYMOUS_PARAMETER</code></td><td style="text-align:left;">在 lambda 表達式中傳遞了參數但從未使用過</td></tr><tr><td style="text-align:left;"><code>REDUNDANT_VISIBILITY_MODIFIER</code></td><td style="text-align:left;">使用 <code>public class Klass</code> 而非 <code>class Klass</code></td></tr><tr><td style="text-align:left;"><code>REDUNDANT_MODALITY_MODIFIER</code></td><td style="text-align:left;">使用 <code>final class Klass</code> 而非 <code>class Klass</code></td></tr><tr><td style="text-align:left;"><code>REDUNDANT_SETTER_PARAMETER_TYPE</code></td><td style="text-align:left;">使用 <code>set(value: Int)</code> 而非 <code>set(value)</code></td></tr><tr><td style="text-align:left;"><code>CAN_BE_VAL</code></td><td style="text-align:left;">定義了 <code>var local = 0</code> 但從未重新賦值，可改為 <code>val local = 42</code></td></tr><tr><td style="text-align:left;"><code>ASSIGNED_VALUE_IS_NEVER_READ</code></td><td style="text-align:left;">定義了 <code>val local = 42</code> 但之後在程式碼中從未使用過</td></tr><tr><td style="text-align:left;"><code>UNUSED_VARIABLE</code></td><td style="text-align:left;">定義了 <code>val local = 0</code> 但從未在程式碼中使用過</td></tr><tr><td style="text-align:left;"><code>REDUNDANT_RETURN_UNIT_TYPE</code></td><td style="text-align:left;">使用 <code>fun foo(): Unit {}</code> 而非 <code>fun foo() {}</code></td></tr><tr><td style="text-align:left;"><code>UNREACHABLE_CODE</code></td><td style="text-align:left;">程式碼陳述式存在但永遠無法執行</td></tr></tbody></table><p>如果檢查結果為真，您將收到一個編譯器警告，其中包含如何解決問題的建議。</p><p>額外檢查預設為禁用。 若要啟用它們，請在命令列中使用 <code>-Wextra</code> 編譯器選項，或在 Gradle 建置檔案的 <code>compilerOptions {}</code> 區塊中指定 <code>extraWarnings</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extraWarnings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關如何定義和使用編譯器選項的更多資訊，請參閱 <a href="/zh-Hant/kotlin/gradle-compiler-options">Kotlin Gradle 外掛程式中的編譯器選項</a>。</p><h3 id="全局警告抑制" tabindex="-1">全局警告抑制 <a class="header-anchor" href="#全局警告抑制" aria-label="Permalink to &quot;全局警告抑制&quot;">​</a></h3><p>在 2.1.0 中，Kotlin 編譯器收到了一項廣受要求的功能 – 全局抑制警告的能力。</p><p>您現在可以透過在命令列中使用 <code>-Xsuppress-warning=WARNING_NAME</code> 語法，或在建置檔案的 <code>compilerOptions {}</code> 區塊中使用 <code>freeCompilerArgs</code> 屬性，來抑制整個專案中的特定警告。</p><p>例如，如果您的專案中啟用了 <a href="#extra-compiler-checks">額外編譯器檢查</a> 但想要抑制其中一項，請使用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extraWarnings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xsuppress-warning=CAN_BE_VAL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,83)),s("p",null,[i[2]||(i[2]=a("如果您想抑制某個警告但不知道其名稱，請選擇該元素並點擊燈泡圖示 (或使用 ")),n(p,null,{default:l(()=>i[0]||(i[0]=[a("Cmd + Enter")])),_:1}),i[3]||(i[3]=a("/")),n(p,null,{default:l(()=>i[1]||(i[1]=[a("Alt + Enter")])),_:1}),i[4]||(i[4]=a(")："))]),i[17]||(i[17]=s("p",null,[s("img",{src:o,alt:"Warning name intention",width:"500"})],-1)),i[18]||(i[18]=s("p",null,[a("這個新的編譯器選項目前處於 "),s("a",{href:"/zh-Hant/kotlin/components-stability#stability-levels-explained"},"實驗階段"),a("。 以下細節也值得注意：")],-1)),s("ul",null,[i[8]||(i[8]=s("li",null,[s("p",null,"不允許抑制錯誤。")],-1)),i[9]||(i[9]=s("li",null,[s("p",null,"如果您傳遞了未知的警告名稱，編譯將會導致錯誤。")],-1)),s("li",null,[i[7]||(i[7]=s("p",null,"您可以一次指定多個警告：",-1)),n(k,null,{default:l(()=>[n(h,{title:"命令列"},{default:l(()=>i[5]||(i[5]=[s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlinc"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -Xsuppress-warning=NOTHING_TO_INLINE"),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -Xsuppress-warning=NO_TAIL_CALLS_FOUND"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," main.kt")])])])],-1)])),_:1}),n(h,{title:"建置檔案"},{default:l(()=>i[6]||(i[6]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle.kts")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    compilerOptions"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        freeCompilerArgs."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"addAll"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            listOf"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'                "-Xsuppress-warning=NOTHING_TO_INLINE"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'                "-Xsuppress-warning=NO_TAIL_CALLS_FOUND"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        )")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})])]),i[19]||(i[19]=e(`<h3 id="改進的-k2-kapt-實作" tabindex="-1">改進的 K2 kapt 實作 <a class="header-anchor" href="#改進的-k2-kapt-實作" aria-label="Permalink to &quot;改進的 K2 kapt 實作&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>K2 編譯器的 kapt 外掛程式 (K2 kapt) 處於 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">Alpha</a> 階段。 它可能隨時變更。 我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-71439/K2-kapt-feedback" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋。</p></div><p>目前，使用 <a href="/zh-Hant/kotlin/kapt">kapt</a> 外掛程式的專案預設與 K1 編譯器配合使用，支援 Kotlin 版本最高至 1.9。</p><p>在 Kotlin 1.9.20 中，我們推出了 K2 編譯器的 kapt 外掛程式 (K2 kapt) 的實驗性實作。 我們現在已改進 K2 kapt 的內部實作，以減輕技術和效能問題。</p><p>雖然新的 K2 kapt 實作沒有引入新功能，但其效能相比之前的 K2 kapt 實作已顯著提升。 此外，K2 kapt 外掛程式的行為現在與 K1 kapt 更為接近。</p><p>若要使用新的 K2 kapt 外掛程式實作，請像啟用之前的 K2 kapt 外掛程式一樣啟用它。 將以下選項添加到專案的 <code>gradle.properties</code> 檔案中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt.use.k2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p>在即將發布的版本中，K2 kapt 實作將預設啟用，取代 K1 kapt，因此您將不再需要手動啟用它。</p><p>在新實作穩定之前，我們非常感謝您的 <a href="https://youtrack.jetbrains.com/issue/KT-71439/K2-kapt-feedback" target="_blank" rel="noreferrer">回饋</a>。</p><h3 id="無符號類型與非基本類型之間重載衝突的解析" tabindex="-1">無符號類型與非基本類型之間重載衝突的解析 <a class="header-anchor" href="#無符號類型與非基本類型之間重載衝突的解析" aria-label="Permalink to &quot;無符號類型與非基本類型之間重載衝突的解析&quot;">​</a></h3><p>此版本解決了在先前版本中當函數為無符號 (unsigned) 和非基本類型 (non-primitive types) 重載時可能發生的重載衝突解析問題，如下列範例所示：</p><h4 id="重載的擴展函數" tabindex="-1">重載的擴展函數 <a class="header-anchor" href="#重載的擴展函數" aria-label="Permalink to &quot;重載的擴展函數&quot;">​</a></h4><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doStuff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Any&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doStuff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UByte&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uByte: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UByte</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UByte.MIN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uByte.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doStuff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 Kotlin 2.1.0 之前存在重載解析歧義</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在早期版本中，呼叫 <code>uByte.doStuff()</code> 導致歧義，因為 <code>Any</code> 和 <code>UByte</code> 擴展都適用。</p><h4 id="重載的頂層函數" tabindex="-1">重載的頂層函數 <a class="header-anchor" href="#重載的頂層函數" aria-label="Permalink to &quot;重載的頂層函數&quot;">​</a></h4><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doStuff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Any&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doStuff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UByte&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uByte: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UByte</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UByte.MIN_VALUE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    doStuff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uByte) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 Kotlin 2.1.0 之前存在重載解析歧義</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>同樣，<code>doStuff(uByte)</code> 的呼叫也存在歧義，因為編譯器無法決定是使用 <code>Any</code> 版本還是 <code>UByte</code> 版本。 在 2.1.0 中，編譯器現在可以正確處理這些情況，透過優先考慮更具體的類型 (在本例中為 <code>UByte</code>) 來解決歧義。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>從 2.1.0 版開始，編譯器可以產生包含 Java 23 位元組碼的類別。</p><h3 id="將-jspecify-可空性不匹配診斷嚴重性變更為嚴格" tabindex="-1">將 JSpecify 可空性不匹配診斷嚴重性變更為嚴格 <a class="header-anchor" href="#將-jspecify-可空性不匹配診斷嚴重性變更為嚴格" aria-label="Permalink to &quot;將 JSpecify 可空性不匹配診斷嚴重性變更為嚴格&quot;">​</a></h3><p>Kotlin 2.1.0 強化了對 <code>org.jspecify.annotations</code> 中可空性註解的嚴格處理，提高了 Java 互通性的類型安全性。</p><p>以下可空性註解受到影響：</p><ul><li><code>org.jspecify.annotations.Nullable</code></li><li><code>org.jspecify.annotations.NonNull</code></li><li><code>org.jspecify.annotations.NullMarked</code></li><li><code>org.jspecify.nullness</code> 中的舊版註解 (JSpecify 0.2 及更早版本)</li></ul><p>從 Kotlin 2.1.0 開始，可空性不匹配預設從警告提升為錯誤。 這確保了 <code>@NonNull</code> 和 <code>@Nullable</code> 等註解在類型檢查期間得到執行，防止執行時出現意外的可空性問題。</p><p><code>@NullMarked</code> 註解也影響其範圍內所有成員的可空性，使得在使用帶註解的 Java 程式碼時行為更具可預測性。</p><p>以下是演示新預設行為的範例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.jspecify.annotations.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SomeJavaClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NonNull</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Nullable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sjc: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SomeJavaClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 訪問非空結果，這是允許的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sjc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().length</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在預設的嚴格模式下會引發錯誤，因為結果是可空的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 為避免錯誤，請改用 ?.length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sjc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以手動控制這些註解的診斷嚴重性。 為此，請使用 <code>-Xnullability-annotations</code> 編譯器選項選擇模式：</p><ul><li><code>ignore</code>: 忽略可空性不匹配。</li><li><code>warning</code>: 報告可空性不匹配的警告。</li><li><code>strict</code>: 報告可空性不匹配的錯誤 (預設模式)。</li></ul><p>有關更多資訊，請參閱 <a href="/zh-Hant/kotlin/java-interop#nullability-annotations">可空性註解</a>。</p><h2 id="kotlin-多平台" tabindex="-1">Kotlin 多平台 <a class="header-anchor" href="#kotlin-多平台" aria-label="Permalink to &quot;Kotlin 多平台&quot;">​</a></h2><p>Kotlin 2.1.0 引入了 <a href="#basic-support-for-swift-export">對 Swift 匯出的基本支援</a>，並使 <a href="#ability-to-publish-kotlin-libraries-from-any-host">發布 Kotlin 多平台函式庫變得更容易</a>。 它還專注於 Gradle 周圍的改進，這些改進穩定化了 <a href="#new-gradle-dsl-for-compiler-options-in-multiplatform-projects-promoted-to-stable">用於配置編譯器選項的新 DSL</a> 並帶來了 <a href="#preview-gradle-s-isolated-projects-in-kotlin-multiplatform">隔離專案功能 (Isolated Projects) 的預覽</a>。</p><h3 id="多平台專案中編譯器選項的新-gradle-dsl-已提升為穩定版" tabindex="-1">多平台專案中編譯器選項的新 Gradle DSL 已提升為穩定版 <a class="header-anchor" href="#多平台專案中編譯器選項的新-gradle-dsl-已提升為穩定版" aria-label="Permalink to &quot;多平台專案中編譯器選項的新 Gradle DSL 已提升為穩定版&quot;">​</a></h3><p>在 Kotlin 2.0.0 中，<a href="/zh-Hant/kotlin/whatsnew20#new-gradle-dsl-for-compiler-options-in-multiplatform-projects">我們引入了一個新的實驗性 Gradle DSL</a> 以簡化多平台專案中編譯器選項的配置。 在 Kotlin 2.1.0 中，此 DSL 已提升為穩定版。</p><p>整體專案配置現在有三個層次。最高層是擴展層，其次是目標層，最低層是編譯單元 (通常是一個編譯任務)：</p><p><img src="`+g+`" alt="Kotlin compiler options levels" width="700"></p><p>若要了解不同層次以及如何在它們之間配置編譯器選項的更多資訊，請參閱 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#compiler-options" target="_blank" rel="noreferrer">編譯器選項</a>。</p><h3 id="預覽-gradle-中的隔離專案-isolated-projects-功能在-kotlin-多平台中的應用" tabindex="-1">預覽 Gradle 中的隔離專案 (Isolated Projects) 功能在 Kotlin 多平台中的應用 <a class="header-anchor" href="#預覽-gradle-中的隔離專案-isolated-projects-功能在-kotlin-多平台中的應用" aria-label="Permalink to &quot;預覽 Gradle 中的隔離專案 (Isolated Projects) 功能在 Kotlin 多平台中的應用&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能為 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>，目前在 Gradle 中處於 Alpha 前階段。 僅能與 Gradle 8.10 版一起使用，且僅用於評估目的。此功能可能隨時被移除或更改。 我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-57279/Support-Gradle-Project-Isolation-Feature-for-Kotlin-Multiplatform" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋。需要選擇啟用 (詳情請見下文)。</p></div><p>在 Kotlin 2.1.0 中，您可以在多平台專案中預覽 Gradle 的 <a href="https://docs.gradle.org/current/userguide/isolated_projects.html" target="_blank" rel="noreferrer">隔離專案 (Isolated Projects)</a> 功能。</p><p>Gradle 中的隔離專案功能透過「隔離」每個 Gradle 專案的配置來提高建置效能。 每個專案的建置邏輯都限制了直接存取其他專案的可變狀態，從而允許它們安全地平行執行。 為了支援此功能，我們對 Kotlin Gradle 外掛程式的模型進行了一些更改，我們很樂意在預覽階段聽取您的使用經驗。</p><p>有兩種方法可以啟用 Kotlin Gradle 外掛程式的新模型：</p><ul><li><p>選項 1：<strong>在不啟用隔離專案的情況下測試相容性</strong> – 若要在不啟用隔離專案功能的情況下檢查與 Kotlin Gradle 外掛程式新模型的相容性，請將以下 Gradle 屬性添加到專案的 <code>gradle.properties</code> 檔案中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.kmp.isolated-projects.support=enable</span></span></code></pre></div></li><li><p>選項 2：<strong>啟用隔離專案後測試</strong> – 在 Gradle 中啟用隔離專案功能會自動配置 Kotlin Gradle 外掛程式以使用新模型。 若要啟用隔離專案功能，請 <a href="https://docs.gradle.org/current/userguide/isolated_projects.html#how_do_i_use_it" target="_blank" rel="noreferrer">設定系統屬性</a>。 在這種情況下，您無需將 Kotlin Gradle 外掛程式的 Gradle 屬性添加到您的專案中。</p></li></ul><h3 id="對-swift-匯出的基本支援" tabindex="-1">對 Swift 匯出的基本支援 <a class="header-anchor" href="#對-swift-匯出的基本支援" aria-label="Permalink to &quot;對 Swift 匯出的基本支援&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能目前處於早期開發階段。它可能隨時被移除或更改。 需要選擇啟用 (詳情請見下文)，且您僅應將其用於評估目的。 我們非常感謝您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋。</p></div><p>2.1.0 版邁出了在 Kotlin 中支援 Swift 匯出的第一步，允許您將 Kotlin 原始碼直接匯出到 Swift 介面，而無需使用 Objective-C 標頭。 這應能使針對 Apple 目標的多平台開發更加容易。</p><p>目前的基本支援包括以下能力：</p><ul><li>將多個 Gradle 模組從 Kotlin 直接匯出到 Swift。</li><li>使用 <code>moduleName</code> 屬性定義自訂的 Swift 模組名稱。</li><li>使用 <code>flattenPackage</code> 屬性設定套件結構的折疊規則。</li></ul><p>您可以使用專案中的以下建置檔案作為設定 Swift 匯出的起點：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalSwiftExportDsl::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    swiftExport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 根模組名稱</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        moduleName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Shared&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 折疊規則</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 從生成的 Swift 程式碼中移除套件前綴</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        flattenPackage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.example.sandbox&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 匯出外部模組</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:subproject&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 匯出的模組名稱</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            moduleName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Subproject&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 折疊匯出的依賴規則</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            flattenPackage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.subproject.library&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您也可以複製我們已設定好 Swift 匯出的 <a href="https://github.com/Kotlin/swift-export-sample" target="_blank" rel="noreferrer">公開範例</a>。</p><p>編譯器會自動產生所有必要檔案 (包括 <code>swiftmodule</code> 檔案、靜態 <code>a</code> 函式庫，以及標頭和 <code>modulemap</code> 檔案)，並將其複製到應用程式的建置目錄中，您可以從 Xcode 存取該目錄。</p><h4 id="如何啟用-swift-匯出" tabindex="-1">如何啟用 Swift 匯出 <a class="header-anchor" href="#如何啟用-swift-匯出" aria-label="Permalink to &quot;如何啟用 Swift 匯出&quot;">​</a></h4><p>請記住，此功能目前仍處於早期開發階段。</p><p>Swift 匯出目前適用於使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-direct-integration.html" target="_blank" rel="noreferrer">直接整合</a> 將 iOS 框架連接到 Xcode 專案的專案。 這是 Android Studio 或透過 <a href="https://kmp.jetbrains.com/" target="_blank" rel="noreferrer">網頁精靈</a> 建立的 Kotlin 多平台專案的標準配置。</p><p>若要在您的專案中試用 Swift 匯出：</p><ol><li><p>將以下 Gradle 選項添加到您的 <code>gradle.properties</code> 檔案中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.experimental.swift-export.enabled=true</span></span></code></pre></div></li><li><p>在 Xcode 中，打開專案設定。</p></li><li><p>在 <strong>Build Phases</strong> 標籤頁中，找到包含 <code>embedAndSignAppleFrameworkForXcode</code> 任務的 <strong>Run Script</strong> 階段。</p></li><li><p>調整腳本，改為在執行腳本階段使用 <code>embedSwiftExportForXcode</code> 任務：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Shared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:embedSwiftExportForXcode</span></span></code></pre></div><p><img src="`+c+`" alt="Add the Swift export script" width="700"></p></li></ol><h4 id="留下-swift-匯出的回饋" tabindex="-1">留下 Swift 匯出的回饋 <a class="header-anchor" href="#留下-swift-匯出的回饋" aria-label="Permalink to &quot;留下 Swift 匯出的回饋&quot;">​</a></h4><p>我們計劃在未來的 Kotlin 版本中擴展和穩定 Swift 匯出支援。 請在 <a href="https://youtrack.jetbrains.com/issue/KT-64572" target="_blank" rel="noreferrer">此 YouTrack 問題</a> 中留下您的回饋。</p><h3 id="從任何主機發布-kotlin-函式庫的能力" tabindex="-1">從任何主機發布 Kotlin 函式庫的能力 <a class="header-anchor" href="#從任何主機發布-kotlin-函式庫的能力" aria-label="Permalink to &quot;從任何主機發布 Kotlin 函式庫的能力&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能目前為 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 需要選擇啟用 (詳情請見下文)，且您僅應將其用於評估目的。 我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-71290" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋。</p></div><p>Kotlin 編譯器產生 <code>.klib</code> 成品以發布 Kotlin 函式庫。 以前，您可以從任何主機取得所需的成品，但 Apple 平台目標除外，它們需要 Mac 機器。 這對針對 iOS、macOS、tvOS 和 watchOS 目標的 Kotlin 多平台專案造成了特殊限制。</p><p>Kotlin 2.1.0 解除了這項限制，增加了對交叉編譯的支援。 現在您可以使用任何主機來產生 <code>.klib</code> 成品，這應能大大簡化 Kotlin 和 Kotlin 多平台函式庫的發布流程。</p><h4 id="如何啟用從任何主機發布函式庫" tabindex="-1">如何啟用從任何主機發布函式庫 <a class="header-anchor" href="#如何啟用從任何主機發布函式庫" aria-label="Permalink to &quot;如何啟用從任何主機發布函式庫&quot;">​</a></h4><p>若要在您的專案中嘗試交叉編譯，請將以下二進位選項添加到您的 <code>gradle.properties</code> 檔案中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.native.enableKlibsCrossCompilation=true</span></span></code></pre></div><p>此功能目前是實驗性的，並有一些限制。如果您符合以下情況，您仍然需要使用 Mac 機器：</p><ul><li>您的函式庫具有 <a href="/zh-Hant/kotlin/native-c-interop">cinterop 依賴項</a>。</li><li>您的專案中設定了 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 整合</a>。</li><li>您需要為 Apple 目標建置或測試 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html" target="_blank" rel="noreferrer">最終二進位檔</a>。</li></ul><h4 id="留下從任何主機發布函式庫的回饋" tabindex="-1">留下從任何主機發布函式庫的回饋 <a class="header-anchor" href="#留下從任何主機發布函式庫的回饋" aria-label="Permalink to &quot;留下從任何主機發布函式庫的回饋&quot;">​</a></h4><p>我們計劃在未來的 Kotlin 版本中穩定此功能並進一步改進函式庫發布。 請在我們的問題追蹤器 <a href="https://youtrack.jetbrains.com/issue/KT-71290" target="_blank" rel="noreferrer">YouTrack</a> 中留下您的回饋。</p><p>有關更多資訊，請參閱 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-publish-lib-setup.html" target="_blank" rel="noreferrer">發布多平台函式庫</a>。</p><h3 id="支援非打包的-klib" tabindex="-1">支援非打包的 klib <a class="header-anchor" href="#支援非打包的-klib" aria-label="Permalink to &quot;支援非打包的 klib&quot;">​</a></h3><p>Kotlin 2.1.0 使得產生非打包 (<code>.klib</code>) 檔案成品成為可能。 這讓您可以直接配置對 klib 的依賴，而無需先解壓縮它們。</p><p>此變更還可以提高效能，減少 Kotlin/Wasm、Kotlin/JS 和 Kotlin/Native 專案的編譯和鏈接時間。</p><p>例如，我們的基準測試顯示，在一個包含 1 個鏈接任務和 10 個編譯任務的專案中，總建置時間的效能提高了約 3% (該專案建置一個依賴於 9 個簡化專案的單一原生可執行二進位檔)。 然而，對建置時間的實際影響取決於子專案的數量及其各自的大小。</p><h4 id="如何設定您的專案" tabindex="-1">如何設定您的專案 <a class="header-anchor" href="#如何設定您的專案" aria-label="Permalink to &quot;如何設定您的專案&quot;">​</a></h4><p>預設情況下，Kotlin 編譯和鏈接任務現在配置為使用新的非打包成品。</p><p>如果您已為解析 klib 設定了自訂建置邏輯並希望使用新的未打包成品，您需要在 Gradle 建置檔案中明確指定 klib 套件解析的首選變體：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.plugin.attributes.KlibPackaging</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resolvableConfiguration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configurations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolvable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resolvable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 對於新的非打包配置：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    attributes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KlibPackaging.ATTRIBUTE, project.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KlibPackaging.NON_PACKED))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 對於先前的打包配置：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    attributes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KlibPackaging.ATTRIBUTE, project.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KlibPackaging.PACKED))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>非打包的 <code>.klib</code> 檔案在專案的建置目錄中生成的路徑與先前打包的檔案相同。 反過來，打包的 klib 現在位於 <code>build/libs</code> 目錄中。</p><p>如果未指定任何屬性，則使用打包變體。 您可以使用以下控制台命令檢查可用屬性和變體的列表：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> outgoingVariants</span></span></code></pre></div><p>我們非常感謝您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中提供對此功能的回饋。</p><h3 id="舊版-android-目標的進一步棄用" tabindex="-1">舊版 <code>android</code> 目標的進一步棄用 <a class="header-anchor" href="#舊版-android-目標的進一步棄用" aria-label="Permalink to &quot;舊版 \`android\` 目標的進一步棄用&quot;">​</a></h3><p>在 Kotlin 2.1.0 中，針對舊的 <code>android</code> 目標名稱的棄用警告已提升為錯誤。</p><p>目前，我們建議在針對 Android 的 Kotlin 多平台專案中使用 <code>androidTarget</code> 選項。 這是一個臨時解決方案，旨在為即將推出的 Google Android/KMP 外掛程式釋放 <code>android</code> 名稱。</p><p>當新的外掛程式可用時，我們將提供進一步的遷移說明。 來自 Google 的新 DSL 將是 Kotlin 多平台中 Android 目標支援的首選選項。</p><p>有關更多資訊，請參閱 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html#rename-of-android-target-to-androidtarget" target="_blank" rel="noreferrer">Kotlin 多平台相容性指南</a>。</p><h3 id="停止支援宣告多個相同類型的目標" tabindex="-1">停止支援宣告多個相同類型的目標 <a class="header-anchor" href="#停止支援宣告多個相同類型的目標" aria-label="Permalink to &quot;停止支援宣告多個相同類型的目標&quot;">​</a></h3><p>在 Kotlin 2.1.0 之前，您可以在多平台專案中宣告多個相同類型的目標。 然而，這使得區分目標和有效支援共享原始碼集變得具有挑戰性。 在大多數情況下，更簡單的設定 (例如使用單獨的 Gradle 專案) 效果更好。 有關如何遷移的詳細指南和範例，請參閱 Kotlin 多平台相容性指南中的 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html#declaring-several-similar-targets" target="_blank" rel="noreferrer">宣告多個類似目標</a>。</p><p>如果您的多平台專案中宣告了多個相同類型的目標，Kotlin 1.9.20 會觸發棄用警告。 在 Kotlin 2.1.0 中，此棄用警告現在對於除 Kotlin/JS 目標之外的所有目標都變為錯誤。 要了解 Kotlin/JS 目標為何豁免的更多資訊，請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-47038/KJS-MPP-Split-JS-target-into-JsBrowser-and-JsNode" target="_blank" rel="noreferrer">YouTrack</a> 中的此問題。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 2.1.0 包含了 <a href="#iosarm64-promoted-to-tier-1">對 <code>iosArm64</code> 目標支援的升級</a>、<a href="#changes-to-caching-in-cinterop">改進的 cinterop 緩存過程</a> 和其他更新。</p><h3 id="iosarm64-提升為-tier-1" tabindex="-1">iosArm64 提升為 Tier 1 <a class="header-anchor" href="#iosarm64-提升為-tier-1" aria-label="Permalink to &quot;iosArm64 提升為 Tier 1&quot;">​</a></h3><p><code>iosArm64</code> 目標對於 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin 多平台</a> 開發至關重要，已提升為 Tier 1 (第一層級)。 這是 Kotlin/Native 編譯器中最高級別的支援。</p><p>這表示該目標會定期在 CI 管線中進行測試，以確保其能夠編譯和運行。 我們也為該目標提供編譯器版本之間的原始碼和二進位兼容性。</p><p>有關目標層級的更多資訊，請參閱 <a href="/zh-Hant/kotlin/native-target-support">Kotlin/Native 目標支援</a>。</p><h3 id="llvm-從-11-1-0-更新到-16-0-0" tabindex="-1">LLVM 從 11.1.0 更新到 16.0.0 <a class="header-anchor" href="#llvm-從-11-1-0-更新到-16-0-0" aria-label="Permalink to &quot;LLVM 從 11.1.0 更新到 16.0.0&quot;">​</a></h3><p>在 Kotlin 2.1.0 中，我們將 LLVM 從 11.1.0 版更新到 16.0.0 版。 新版本包含錯誤修復和安全更新。 在某些情況下，它還提供了編譯器最佳化和更快的編譯速度。</p><p>如果您的專案中有 Linux 目標，請注意 Kotlin/Native 編譯器現在預設對所有 Linux 目標使用 <code>lld</code> 鏈接器。</p><p>此更新不應影響您的程式碼，但如果您遇到任何問題，請向我們的 <a href="http://kotl.in/issue" target="_blank" rel="noreferrer">問題追蹤器</a> 回報。</p><h3 id="cinterop-緩存的變更" tabindex="-1">cinterop 緩存的變更 <a class="header-anchor" href="#cinterop-緩存的變更" aria-label="Permalink to &quot;cinterop 緩存的變更&quot;">​</a></h3><p>在 Kotlin 2.1.0 中，我們正在對 cinterop 緩存過程進行更改。它不再具有 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/CacheableTask.html" target="_blank" rel="noreferrer"><code>CacheableTask</code></a> 註解類型。 新的推薦方法是使用 <a href="https://docs.gradle.org/current/kotlin-dsl/gradle/org.gradle.api.tasks/-task-outputs/cache-if.html" target="_blank" rel="noreferrer"><code>cacheIf</code></a> 輸出類型來緩存任務結果。</p><p>這應該可以解決 <code>UP-TO-DATE</code> 檢查未能檢測到 <a href="/zh-Hant/kotlin/native-definition-file">定義文件</a> 中指定的頭檔案變更的問題，從而阻止建置系統重新編譯程式碼。</p><h3 id="mimalloc-記憶體分配器的棄用" tabindex="-1">mimalloc 記憶體分配器的棄用 <a class="header-anchor" href="#mimalloc-記憶體分配器的棄用" aria-label="Permalink to &quot;mimalloc 記憶體分配器的棄用&quot;">​</a></h3><p>回溯到 Kotlin 1.9.0，我們引入了新的記憶體分配器，然後在 Kotlin 1.9.20 中預設啟用它。 新的分配器旨在使垃圾收集更有效率，並提高 Kotlin/Native 記憶體管理器的運行時效能。</p><p>新的記憶體分配器取代了以前的預設分配器，<a href="https://github.com/microsoft/mimalloc" target="_blank" rel="noreferrer">mimalloc</a>。 現在，是時候在 Kotlin/Native 編譯器中棄用 mimalloc 了。</p><p>您現在可以從建置腳本中移除 <code>-Xallocator=mimalloc</code> 編譯器選項。 如果您遇到任何問題，請向我們的 <a href="http://kotl.in/issue" target="_blank" rel="noreferrer">問題追蹤器</a> 回報。</p><p>有關 Kotlin 中記憶體分配器和垃圾收集的更多資訊，請參閱 <a href="/zh-Hant/kotlin/native-memory-manager">Kotlin/Native 記憶體管理</a>。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>Kotlin/Wasm 收到多項更新，並 <a href="#support-for-incremental-compilation">支援增量編譯</a>。</p><h3 id="支援增量編譯" tabindex="-1">支援增量編譯 <a class="header-anchor" href="#支援增量編譯" aria-label="Permalink to &quot;支援增量編譯&quot;">​</a></h3><p>以前，當您更改 Kotlin 程式碼中的某些內容時，Kotlin/Wasm 工具鏈必須重新編譯整個程式碼庫。</p><p>從 2.1.0 開始，Wasm 目標支援增量編譯。 在開發任務中，編譯器現在只重新編譯與上次編譯中的更改相關的文件，這顯著減少了編譯時間。</p><p>此變更目前將編譯速度提高了一倍，並計劃在未來版本中進一步改進。</p><p>在目前設定中，Wasm 目標的增量編譯預設為禁用。 若要啟用增量編譯，請將以下行添加到專案的 <code>local.properties</code> 或 <code>gradle.properties</code> 檔案中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.incremental.wasm=true</span></span></code></pre></div><p>試用 Kotlin/Wasm 增量編譯並 <a href="https://youtrack.jetbrains.com/issue/KT-72158/Kotlin-Wasm-incremental-compilation-feedback" target="_blank" rel="noreferrer">分享您的回饋</a>。 您的見解將有助於使此功能更快地穩定並預設啟用。</p><h3 id="瀏覽器-api-移至-kotlinx-browser-獨立函式庫" tabindex="-1">瀏覽器 API 移至 kotlinx-browser 獨立函式庫 <a class="header-anchor" href="#瀏覽器-api-移至-kotlinx-browser-獨立函式庫" aria-label="Permalink to &quot;瀏覽器 API 移至 kotlinx-browser 獨立函式庫&quot;">​</a></h3><p>以前，Web API 和相關目標工具的宣告是 Kotlin/Wasm 標準函式庫的一部分。</p><p>在此版本中，<code>org.w3c.*</code> 宣告已從 Kotlin/Wasm 標準函式庫移至新的 <a href="https://github.com/kotlin/kotlinx-browser" target="_blank" rel="noreferrer">kotlinx-browser 函式庫</a>。 此函式庫還包含其他與 Web 相關的套件，例如 <code>org.khronos.webgl</code>、<code>kotlin.dom</code> 和 <code>kotlinx.browser</code>。</p><p>這種分離提供了模組化，使得與 Web 相關的 API 可以在 Kotlin 的發布週期之外獨立更新。 此外，Kotlin/Wasm 標準函式庫現在只包含在任何 JavaScript 環境中可用的宣告。</p><p>若要使用已移動套件中的宣告，您需要將 <code>kotlinx-browser</code> 依賴項添加到專案的建置配置檔案中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmJsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlinx:kotlinx-browser:0.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="改善-kotlin-wasm-的偵錯體驗" tabindex="-1">改善 Kotlin/Wasm 的偵錯體驗 <a class="header-anchor" href="#改善-kotlin-wasm-的偵錯體驗" aria-label="Permalink to &quot;改善 Kotlin/Wasm 的偵錯體驗&quot;">​</a></h3><p>以前，在網頁瀏覽器中偵錯 Kotlin/Wasm 程式碼時，您可能會遇到偵錯介面中變數值的低階表示。 這通常使得追蹤應用程式的目前狀態變得困難。</p><p><img src="`+d+'" alt="Kotlin/Wasm old debugger" width="700"></p><p>為改善此體驗，變數視圖中已新增自訂格式化工具 (custom formatters)。 此實作使用 <a href="https://firefox-source-docs.mozilla.org/devtools-user/custom_formatters/index.html" target="_blank" rel="noreferrer">自訂格式化工具 API</a>，此 API 支援 Firefox 和基於 Chromium 的主要瀏覽器。</p><p>透過此變更，您現在可以以更使用者友好和易於理解的方式顯示和定位變數值。</p><p><img src="'+E+`" alt="Kotlin/Wasm improved debugger" width="700"></p><p>若要嘗試新的偵錯體驗：</p><ol><li><p>將以下編譯器選項添加到 <code>wasmJs {}</code> 編譯器選項中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xwasm-debugger-custom-formatters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>在您的瀏覽器中啟用自訂格式化工具：</p><ul><li><p>在 Chrome DevTools 中，可透過 <strong>設定 | 偏好設定 | 主控台</strong> 取得：</p><p><img src="`+y+'" alt="Enable custom formatters in Chrome" width="700"></p></li><li><p>在 Firefox DevTools 中，可透過 <strong>設定 | 進階設定</strong> 取得：</p><p><img src="'+F+`" alt="Enable custom formatters in Firefox" width="700"></p></li></ul></li></ol><h3 id="減少-kotlin-wasm-二進位檔的大小" tabindex="-1">減少 Kotlin/Wasm 二進位檔的大小 <a class="header-anchor" href="#減少-kotlin-wasm-二進位檔的大小" aria-label="Permalink to &quot;減少 Kotlin/Wasm 二進位檔的大小&quot;">​</a></h3><p>生產建置產生的 Wasm 二進位檔大小將減少高達 30%，您可能會看到一些效能改進。 這是因為 <code>--closed-world</code>、<code>--type-ssa</code> 和 <code>--type-merging</code> 等 Binaryen 選項現在被認為對所有 Kotlin/Wasm 專案安全可用，並已預設啟用。</p><h3 id="改進-kotlin-wasm-中的-javascript-陣列互通性" tabindex="-1">改進 Kotlin/Wasm 中的 JavaScript 陣列互通性 <a class="header-anchor" href="#改進-kotlin-wasm-中的-javascript-陣列互通性" aria-label="Permalink to &quot;改進 Kotlin/Wasm 中的 JavaScript 陣列互通性&quot;">​</a></h3><p>雖然 Kotlin/Wasm 的標準函式庫為 JavaScript 陣列提供了 <code>JsArray&lt;T&gt;</code> 類型，但沒有直接的方法將 <code>JsArray&lt;T&gt;</code> 轉換為 Kotlin 的原生 <code>Array</code> 或 <code>List</code> 類型。</p><p>這個空白需要建立自訂函數來進行陣列轉換，使 Kotlin 和 JavaScript 程式碼之間的互通性複雜化。</p><p>此版本引入了一個適配器函數，可自動將 <code>JsArray&lt;T&gt;</code> 轉換為 <code>Array&lt;T&gt;</code> 和反之，從而簡化了陣列操作。</p><p>以下是泛型類型之間轉換的範例：Kotlin <code>List&lt;T&gt;</code> 和 <code>Array&lt;T&gt;</code> 到 JavaScript <code>JsArray&lt;T&gt;</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wasm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toJsString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 .toJsArray() 將 List 或 Array 轉換為 JsArray</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsArray: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toJsArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 .toArray() 和 .toList() 將其轉換回 Kotlin 類型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinArray: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinList: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>類似的方法可用於將型別陣列轉換為其 Kotlin 等效項 (例如 <code>IntArray</code> 和 <code>Int32Array</code>)。有關詳細資訊和實作，請參閱 <a href="https://github.com/Kotlin/kotlinx-browser/blob/dfbdceed314567983c98f1d66e8c2e10d99c5a55/src/wasmJsMain/kotlin/arrayCopy.kt" target="_blank" rel="noreferrer"><code>kotlinx-browser</code> 儲存庫</a>。</p><p>以下是型別陣列之間轉換的範例：Kotlin <code>IntArray</code> 到 JavaScript <code>Int32Array</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.khronos.webgl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> intArray: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> intArrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 .toInt32Array() 將 Kotlin IntArray 轉換為 JavaScript Int32Array</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsInt32Array: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int32Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> intArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt32Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 toIntArray() 將 JavaScript Int32Array 轉換回 Kotlin IntArray</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinIntArray: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsInt32Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toIntArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="支援在-kotlin-wasm-中存取-javascript-異常詳細資訊" tabindex="-1">支援在 Kotlin/Wasm 中存取 JavaScript 異常詳細資訊 <a class="header-anchor" href="#支援在-kotlin-wasm-中存取-javascript-異常詳細資訊" aria-label="Permalink to &quot;支援在 Kotlin/Wasm 中存取 JavaScript 異常詳細資訊&quot;">​</a></h3><p>以前，當 Kotlin/Wasm 中發生 JavaScript 異常時，<code>JsException</code> 類型只提供一個通用訊息，而沒有來自原始 JavaScript 錯誤的詳細資訊。</p><p>從 Kotlin 2.1.0 開始，您可以透過啟用特定的編譯器選項，將 <code>JsException</code> 配置為包含原始錯誤訊息和堆疊追蹤。 這提供了更多上下文，有助於診斷源自 JavaScript 的問題。</p><p>此行為取決於 <code>WebAssembly.JSTag</code> API，此 API 僅在某些瀏覽器中可用：</p><ul><li><strong>Chrome</strong>：從 115 版開始支援</li><li><strong>Firefox</strong>：從 129 版開始支援</li><li><strong>Safari</strong>：尚未支援</li></ul><p>若要啟用此功能 (預設為禁用)，請將以下編譯器選項添加到您的 <code>build.gradle.kts</code> 檔案中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xwasm-attach-js-exception&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以下是演示新行為的範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsAny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(json: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;an invalid JSON&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thrown value is: \${e.thrownValue}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // SyntaxError: 意外的語法單字 &#39;a&#39;，&quot;an invalid JSON&quot; 不是有效的 JSON</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Message: \${e.message}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 訊息：意外的語法單字 &#39;a&#39;，&quot;an invalid JSON&quot; 不是有效的 JSON</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Stacktrace:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 堆疊追蹤：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 列印完整的 JavaScript 堆疊追蹤</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>啟用 <code>-Xwasm-attach-js-exception</code> 選項後，<code>JsException</code> 會提供來自 JavaScript 錯誤的特定詳細資訊。 如果沒有該選項，<code>JsException</code> 只包含一個通用訊息，指出在執行 JavaScript 程式碼時拋出了一個異常。</p><h3 id="預設匯出的棄用" tabindex="-1">預設匯出的棄用 <a class="header-anchor" href="#預設匯出的棄用" aria-label="Permalink to &quot;預設匯出的棄用&quot;">​</a></h3><p>作為遷移到命名匯出 (named exports) 的一部分，以前在 JavaScript 中為 Kotlin/Wasm 匯出使用預設導入 (default import) 時，控制台會列印錯誤。</p><p>在 2.1.0 中，預設導入已被完全移除，以全面支援命名匯出。</p><p>現在，在為 Kotlin/Wasm 目標編寫 JavaScript 程式碼時，您需要使用相應的命名導入，而不是預設導入。</p><p>此變更標誌著遷移到命名匯出的棄用週期的最後階段：</p><p><strong>在 2.0.0 版中：</strong> 控制台會列印警告訊息，解釋透過預設匯出導出實體已被棄用。</p><p><strong>在 2.0.20 版中：</strong> 發生錯誤，要求使用相應的命名導入。</p><p><strong>在 2.1.0 版中：</strong> 預設導入的使用已被完全移除。</p><h3 id="子專案專屬的-node-js-設定" tabindex="-1">子專案專屬的 Node.js 設定 <a class="header-anchor" href="#子專案專屬的-node-js-設定" aria-label="Permalink to &quot;子專案專屬的 Node.js 設定&quot;">​</a></h3><p>您可以透過為 <code>rootProject</code> 定義 <code>NodeJsRootPlugin</code> 類別的屬性來配置專案的 Node.js 設定。 在 2.1.0 中，您可以使用一個新類別 <code>NodeJsPlugin</code> 為每個子專案配置這些設定。 以下是演示如何為子專案設定特定 Node.js 版本的範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">project.plugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NodeJsPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NodeJsEnvSpec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;22.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>若要將新類別用於整個專案，請將相同的程式碼添加到 <code>allprojects {}</code> 區塊中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allprojects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    project.plugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NodeJsPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NodeJsEnvSpec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;your Node.js version&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您也可以使用 Gradle 慣例外掛程式將設定應用於特定的一組子專案。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><h3 id="支援屬性中的非識別符字元" tabindex="-1">支援屬性中的非識別符字元 <a class="header-anchor" href="#支援屬性中的非識別符字元" aria-label="Permalink to &quot;支援屬性中的非識別符字元&quot;">​</a></h3><p>Kotlin/JS 以前不允許在反引號中包含空格的 <a href="/zh-Hant/kotlin/coding-conventions#names-for-test-methods">測試方法名稱</a>。</p><p>同樣，也無法存取包含 Kotlin 識別符中不允許的字元 (例如連字符或空格) 的 JavaScript 物件屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accept: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 因連字符導致無效的 Kotlin 識別符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \`content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">length\`: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headers: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value provided by a JS library&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accept </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headers.accept</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 因屬性名稱中的連字符導致錯誤</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headers.\`content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">length\`</span></span></code></pre></div><p>此行為與 JavaScript 和 TypeScript 不同，後者允許使用非識別符字元存取此類屬性。</p><p>從 Kotlin 2.1.0 開始，此功能預設啟用。 Kotlin/JS 現在允許您使用反引號 (\`\`) 和 <code>@JsName</code> 註解來與包含非識別符字元的 JavaScript 屬性互動，並用於測試方法的名稱。</p><p>此外，您可以使用 <code>@JsName</code> 和 <code> @JsQualifier</code> 註解將 Kotlin 屬性名稱映射到 JavaScript 對等名稱：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \`property example\`: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bar&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsQualifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fooNamespace&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \`property example\`: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \`property example\`: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bar&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 JavaScript 中，這會被編譯為 Bar.property_example_HASH</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Bar.\`property example\`)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 JavaScript 中，這會被編譯為 fooNamespace[&quot;property example&quot;]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Foo.\`property example\`)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 JavaScript 中，這會被編譯為 Baz[&quot;property example&quot;]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Baz.\`property example\`)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="支援產生-es2015-箭頭函數" tabindex="-1">支援產生 ES2015 箭頭函數 <a class="header-anchor" href="#支援產生-es2015-箭頭函數" aria-label="Permalink to &quot;支援產生 ES2015 箭頭函數&quot;">​</a></h3><p>在 Kotlin 2.1.0 中，Kotlin/JS 引入了對產生 ES2015 箭頭函數 (arrow functions) 的支援，例如 <code>(a, b) =&gt; expression</code>，而不是匿名函數。</p><p>使用箭頭函數可以減少專案的捆綁包大小，特別是在使用實驗性的 <code>-Xir-generate-inline-anonymous-functions</code> 模式時。 這也使產生的程式碼更符合現代 JavaScript。</p><p>當目標為 ES2015 時，此功能預設啟用。 或者，您可以使用 <code>-Xes-arrow-functions</code> 命令列引數來啟用它。</p><p>在 <a href="https://262.ecma-international.org/6.0/" target="_blank" rel="noreferrer">官方文件</a> 中了解更多關於 <a href="https://262.ecma-international.org/6.0/" target="_blank" rel="noreferrer">ES2015 (ECMAScript 2015, ES6)</a> 的資訊。</p><h2 id="gradle-改進" tabindex="-1">Gradle 改進 <a class="header-anchor" href="#gradle-改進" aria-label="Permalink to &quot;Gradle 改進&quot;">​</a></h2><p>Kotlin 2.1.0 完全相容於 Gradle 7.6.3 至 8.6 版本。 Gradle 8.7 至 8.10 版本也受支援，但只有一個例外。 如果您使用 Kotlin 多平台 Gradle 外掛程式，您可能會在您的多平台專案中看到調用 JVM 目標中的 <code>withJava()</code> 函數的棄用警告。 我們計劃盡快修復此問題。</p><p>有關更多資訊，請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-66542" target="_blank" rel="noreferrer">YouTrack</a> 中的相關問題。</p><p>您也可以使用最新發布的 Gradle 版本，但請記住，如果這樣做，您可能會遇到棄用警告或某些新的 Gradle 功能可能無法工作。</p><h3 id="最低支援的-agp-版本提升至-7-3-1" tabindex="-1">最低支援的 AGP 版本提升至 7.3.1 <a class="header-anchor" href="#最低支援的-agp-版本提升至-7-3-1" aria-label="Permalink to &quot;最低支援的 AGP 版本提升至 7.3.1&quot;">​</a></h3><p>從 Kotlin 2.1.0 開始，支援的最低 Android Gradle 外掛程式版本為 7.3.1。</p><h3 id="最低支援的-gradle-版本提升至-7-6-3" tabindex="-1">最低支援的 Gradle 版本提升至 7.6.3 <a class="header-anchor" href="#最低支援的-gradle-版本提升至-7-6-3" aria-label="Permalink to &quot;最低支援的 Gradle 版本提升至 7.6.3&quot;">​</a></h3><p>從 Kotlin 2.1.0 開始，支援的最低 Gradle 版本為 7.6.3。</p><h3 id="kotlin-gradle-外掛程式擴展的新-api" tabindex="-1">Kotlin Gradle 外掛程式擴展的新 API <a class="header-anchor" href="#kotlin-gradle-外掛程式擴展的新-api" aria-label="Permalink to &quot;Kotlin Gradle 外掛程式擴展的新 API&quot;">​</a></h3><p>Kotlin 2.1.0 引入了一個新的 API，使您更容易建立自己的外掛程式來配置 Kotlin Gradle 外掛程式。 此變更棄用了 <code>KotlinTopLevelExtension</code> 和 <code>KotlinTopLevelExtensionConfig</code> 介面，並為外掛程式作者引入了以下介面：</p>`,192)),s("table",A,[i[15]||(i[15]=s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"left"}},"名稱"),s("th",{style:{"text-align":"left"}},"描述")])],-1)),s("tbody",null,[s("tr",null,[i[12]||(i[12]=s("td",{style:{"text-align":"left"}},[s("code",null,"KotlinBaseExtension")],-1)),s("td",f,[i[11]||(i[11]=a("用於配置整個專案的通用 Kotlin JVM、Android 和多平台外掛程式選項的外掛程式 DSL 擴展類型：")),n(r,null,{default:l(()=>i[10]||(i[10]=[s("li",null,[s("code",null,"org.jetbrains.kotlin.jvm")],-1),s("li",null,[s("code",null,"org.jetbrains.kotlin.android")],-1),s("li",null,[s("code",null,"org.jetbrains.kotlin.multiplatform")],-1)])),_:1})])]),i[13]||(i[13]=s("tr",null,[s("td",{style:{"text-align":"left"}},[s("code",null,"KotlinJvmExtension")]),s("td",{style:{"text-align":"left"}},[a("用於配置整個專案的 Kotlin "),s("strong",null,"JVM"),a(" 外掛程式選項的外掛程式 DSL 擴展類型。")])],-1)),i[14]||(i[14]=s("tr",null,[s("td",{style:{"text-align":"left"}},[s("code",null,"KotlinAndroidExtension")]),s("td",{style:{"text-align":"left"}},[a("用於配置整個專案的 Kotlin "),s("strong",null,"Android"),a(" 外掛程式選項的外掛程式 DSL 擴展類型。")])],-1))])]),i[20]||(i[20]=e(`<p>例如，如果您想為 JVM 和 Android 專案配置編譯器選項，請使用 <code>KotlinBaseExtension</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinBaseExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HasConfigurableKotlinCompilerOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compilerOptions) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KotlinJvmCompilerOptions) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                jvmTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JvmTarget.JVM_17)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>這將 JVM 目標配置為 17，適用於 JVM 和 Android 專案。</p><p>若要專門為 JVM 專案配置編譯器選項，請使用 <code>KotlinJvmExtension</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinJvmExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JvmTarget.JVM_17)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    target.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavenPublication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        groupId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        artifactId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;example-project&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0-SNAPSHOT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此範例同樣為 JVM 專案配置 JVM 目標為 17。 它還為專案配置了 Maven 發布，以便其輸出發布到 Maven 儲存庫。</p><p>您可以完全以相同的方式使用 <code>KotlinAndroidExtension</code>。</p><h3 id="編譯器符號從-kotlin-gradle-外掛程式-api-中隱藏" tabindex="-1">編譯器符號從 Kotlin Gradle 外掛程式 API 中隱藏 <a class="header-anchor" href="#編譯器符號從-kotlin-gradle-外掛程式-api-中隱藏" aria-label="Permalink to &quot;編譯器符號從 Kotlin Gradle 外掛程式 API 中隱藏&quot;">​</a></h3><p>以前，KGP 在其運行時依賴項中包含了 <code>org.jetbrains.kotlin:kotlin-compiler-embeddable</code>，使得內部編譯器符號在建置腳本類別路徑中可用。 這些符號僅供內部使用。</p><p>從 Kotlin 2.1.0 開始，KGP 將 <code>org.jetbrains.kotlin:kotlin-compiler-embeddable</code> 類別檔案的子集捆綁到其 JAR 檔案中，並逐步移除它們。 此變更旨在防止相容性問題並簡化 KGP 的維護。</p><p>如果您的建置邏輯的其他部分 (例如 <code>kotlinter</code> 等外掛程式) 依賴於與 KGP 捆綁的版本不同的 <code>org.jetbrains.kotlin:kotlin-compiler-embeddable</code> 版本，則可能導致衝突和運行時異常。</p><p>為了防止此類問題，如果 <code>org.jetbrains.kotlin:kotlin-compiler-embeddable</code> 與 KGP 同時存在於建置類別路徑中，KGP 現在會顯示警告。</p><p>作為長期解決方案，如果您是使用 <code>org.jetbrains.kotlin:kotlin-compiler-embeddable</code> 類別的外掛程式作者，我們建議您在隔離的類別載入器中運行它們。 例如，您可以使用 <a href="https://docs.gradle.org/current/userguide/worker_api.html" target="_blank" rel="noreferrer">Gradle Workers API</a> 結合類別載入器或進程隔離來實現。</p><h4 id="使用-gradle-workers-api" tabindex="-1">使用 Gradle Workers API <a class="header-anchor" href="#使用-gradle-workers-api" aria-label="Permalink to &quot;使用 Gradle Workers API&quot;">​</a></h4><p>此範例演示如何在產生 Gradle 外掛程式的專案中安全地使用 Kotlin 編譯器。 首先，在您的建置腳本中添加一個僅編譯依賴項。 這使得符號僅在編譯時可用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compileOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-compiler-embeddable:2.2.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>接下來，定義一個 Gradle 工作操作以列印 Kotlin 編譯器版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.workers.WorkAction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.workers.WorkParameters</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.config.KotlinCompilerVersion</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ActionUsingKotlinCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WorkAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WorkParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin compiler version: \${KotlinCompilerVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getVersion</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>現在建立一個任務，使用類別載入器隔離將此操作提交給工作執行器：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.api.DefaultTask</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.api.file.ConfigurableFileCollection</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.api.tasks.Classpath</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.api.tasks.TaskAction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.workers.WorkerExecutor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> javax.inject.Inject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TaskUsingKotlinCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefaultTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Inject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> executor: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WorkerExecutor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Classpath</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinCompiler: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ConfigurableFileCollection</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @TaskAction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> workQueue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">classLoaderIsolation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            classpath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlinCompiler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        workQueue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ActionUsingKotlinCompiler::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>最後，在您的 Gradle 外掛程式中配置 Kotlin 編譯器類別路徑：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.api.Plugin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.gradle.api.Project</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myDependencyScope </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target.configurations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myDependencyScope&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target.dependencies.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myDependencyScope.name, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$KOTLIN_COMPILER_EMBEDDABLE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$KOTLIN_COMPILER_VERSION</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myResolvableConfiguration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> target.configurations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myResolvable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            extendsFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myDependencyScope)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target.tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myTask&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TaskUsingKotlinCompiler::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            kotlinCompiler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myResolvableConfiguration)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KOTLIN_COMPILER_EMBEDDABLE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.kotlin:kotlin-compiler-embeddable&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KOTLIN_COMPILER_VERSION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2.2.10&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="compose-編譯器更新" tabindex="-1">Compose 編譯器更新 <a class="header-anchor" href="#compose-編譯器更新" aria-label="Permalink to &quot;Compose 編譯器更新&quot;">​</a></h2><h3 id="支援多個穩定性配置檔案" tabindex="-1">支援多個穩定性配置檔案 <a class="header-anchor" href="#支援多個穩定性配置檔案" aria-label="Permalink to &quot;支援多個穩定性配置檔案&quot;">​</a></h3><p>Compose 編譯器可以解釋多個穩定性配置檔案，但 Compose 編譯器 Gradle 外掛程式的 <code>stabilityConfigurationFile</code> 選項以前只允許指定單個檔案。 在 Kotlin 2.1.0 中，此功能已重構，允許您為單個模組使用多個穩定性配置檔案：</p><ul><li><code>stabilityConfigurationFile</code> 選項已棄用。</li><li>有一個新選項 <code>stabilityConfigurationFiles</code>，其類型為 <code>ListProperty&lt;RegularFile&gt;</code>。</li></ul><p>以下是如何使用新選項將多個檔案傳遞給 Compose 編譯器：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composeCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stabilityConfigurationFiles.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        project.layout.projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;configuration-file1.conf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        project.layout.projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;configuration-file2.conf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="可暫停組合-pausable-composition" tabindex="-1">可暫停組合 (Pausable composition) <a class="header-anchor" href="#可暫停組合-pausable-composition" aria-label="Permalink to &quot;可暫停組合 (Pausable composition)&quot;">​</a></h3><p>可暫停組合 (Pausable composition) 是一項新的實驗性功能，它改變了編譯器產生可跳過函數的方式。 啟用此功能後，組合可以在運行時在跳過點暫停，允許長時間運行的組合過程分攤到多個幀中。 可暫停組合用於惰性列表和其他性能密集型組件中，用於預取內容，這些內容在以阻塞方式執行時可能會導致幀丟失。</p><p>若要試用可暫停組合，請在 Compose 編譯器的 Gradle 配置中添加以下功能標誌：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composeCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    featureFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.PausableComposition</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>對此功能的運行時支援已在 <code>androidx.compose.runtime</code> 的 1.8.0-alpha02 版本中添加。 當與舊版運行時一起使用時，此功能標誌無效。</p></div><h3 id="開放式-open-和覆寫-overridden-composable-函數的變更" tabindex="-1">開放式 (open) 和覆寫 (overridden) @Composable 函數的變更 <a class="header-anchor" href="#開放式-open-和覆寫-overridden-composable-函數的變更" aria-label="Permalink to &quot;開放式 (open) 和覆寫 (overridden) @Composable 函數的變更&quot;">​</a></h3><p>虛擬 (open、abstract 和 overridden) 的 <code>@Composable</code> 函數不能再是可重新啟動的 (restartable)。 可重新啟動組的程式碼生成會產生 <a href="https://issuetracker.google.com/329477544" target="_blank" rel="noreferrer">與繼承不正確</a> 的呼叫，導致運行時崩潰。</p><p>這意味著虛擬函數將不會被重新啟動或跳過：每當它們的狀態失效時，運行時將轉而重新組合它們的父 composable。 如果您的程式碼對重新組合敏感，您可能會注意到運行時行為的變化。</p><h3 id="效能改進" tabindex="-1">效能改進 <a class="header-anchor" href="#效能改進" aria-label="Permalink to &quot;效能改進&quot;">​</a></h3><p>Compose 編譯器以前會創建模組 IR 的完整副本以轉換 <code>@Composable</code> 類型。 除了複製與 Compose 無關的元素時增加記憶體消耗外，這種行為還在 <a href="https://issu-tracker.google.com/365066530" target="_blank" rel="noreferrer">某些邊緣情況下</a> 破壞了下游編譯器外掛程式。</p><p>此複製操作已移除，可能導致更快的編譯時間。</p><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><h3 id="標準函式庫-api-棄用嚴重性的變更" tabindex="-1">標準函式庫 API 棄用嚴重性的變更 <a class="header-anchor" href="#標準函式庫-api-棄用嚴重性的變更" aria-label="Permalink to &quot;標準函式庫 API 棄用嚴重性的變更&quot;">​</a></h3><p>在 Kotlin 2.1.0 中，我們將多個標準函式庫 API 的棄用嚴重性級別從警告提升為錯誤。 如果您的程式碼依賴於這些 API，您需要更新它以確保相容性。 最顯著的變化包括：</p><ul><li><p><strong>針對 <code>Char</code> 和 <code>String</code> 的區域設定敏感大小寫轉換函數已棄用：</strong><code>Char.toLowerCase()</code>、<code>Char.toUpperCase()</code>、<code>String.toUpperCase()</code> 和 <code>String.toLowerCase()</code> 等函數現已棄用，使用它們會導致錯誤。 請使用不依賴區域設定的函數替代品或其他大小寫轉換機制來取代它們。 如果您想繼續使用預設區域設定，請將 <code>String.toLowerCase()</code> 等呼叫替換為 <code>String.lowercase(Locale.getDefault())</code>，明確指定區域設定。 對於不依賴區域設定的轉換，請將它們替換為 <code>String.lowercase()</code>，它預設使用不變的區域設定。</p></li><li><p><strong>Kotlin/Native 凍結 API 已棄用：</strong> 以前標記有 <code>@FreezingIsDeprecated</code> 註解的凍結相關宣告現在會導致錯誤。 此變更反映了從 Kotlin/Native 中傳統記憶體管理器的過渡，傳統記憶體管理器需要凍結物件才能在執行緒之間共享它們。 若要了解如何在新的記憶體模型中從凍結相關 API 遷移，請參閱 <a href="/zh-Hant/kotlin/native-migration-guide#update-your-code">Kotlin/Native 遷移指南</a>。 有關更多資訊，請參閱 <a href="/zh-Hant/kotlin/whatsnew1720#freezing">關於凍結棄用的公告</a>。</p></li><li><p><strong><code>appendln()</code> 已棄用，改用 <code>appendLine()</code>：</strong><code>StringBuilder.appendln()</code> 和 <code>Appendable.appendln()</code> 函數現已棄用，使用它們會導致錯誤。 若要取代它們，請改用 <code>StringBuilder.appendLine()</code> 或 <code>Appendable.appendLine()</code> 函數。 <code>appendln()</code> 函數被棄用是因為在 Kotlin/JVM 上，它使用了 <code>line.separator</code> 系統屬性，該屬性在每個作業系統上都有不同的預設值。 在 Kotlin/JVM 上，此屬性在 Windows 上預設為 <code>\\r </code> (CR LF)，在其他系統上預設為 <code></code> (LF)。 另一方面，<code>appendLine()</code> 函數始終使用 <code></code> (LF) 作為行分隔符，確保跨平台行為一致。</p></li></ul><p>有關此版本中受影響 API 的完整列表，請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-71628" target="_blank" rel="noreferrer">KT-71628</a> YouTrack 問題。</p><h3 id="java-nio-file-path-的穩定檔案樹遍歷擴展" tabindex="-1">java.nio.file.Path 的穩定檔案樹遍歷擴展 <a class="header-anchor" href="#java-nio-file-path-的穩定檔案樹遍歷擴展" aria-label="Permalink to &quot;java.nio.file.Path 的穩定檔案樹遍歷擴展&quot;">​</a></h3><p>Kotlin 1.7.20 引入了針對 <code>java.nio.file.Path</code> 類別的實驗性 <a href="/zh-Hant/kotlin/extensions#extension-functions">擴展函數</a>，允許您遍歷檔案樹。 在 Kotlin 2.1.0 中，以下檔案樹遍歷擴展現已 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">穩定</a>：</p><ul><li><code>walk()</code> 惰性遍歷以指定路徑為根的檔案樹。</li><li><code>fileVisitor()</code> 使得可以單獨建立 <code>FileVisitor</code>。<code>FileVisitor</code> 指定了在遍歷期間對目錄和檔案執行的操作。</li><li><code>visitFileTree(fileVisitor: FileVisitor, ...)</code> 遍歷檔案樹，對每個遇到的條目調用指定的 <code>FileVisitor</code>，它底層使用了 <code>java.nio.file.Files.walkFileTree()</code> 函數。</li><li><code>visitFileTree(..., builderAction: FileVisitorBuilder.() -&gt; Unit)</code> 使用提供的 <code>builderAction</code> 建立 <code>FileVisitor</code> 並呼叫 <code>visitFileTree(fileVisitor, ...)</code> 函數。</li><li><code>sealed interface FileVisitorBuilder</code> 允許您定義自訂的 <code>FileVisitor</code> 實作。</li><li><code>enum class PathWalkOption</code> 為 <code>Path.walk()</code> 函數提供遍歷選項。</li></ul><p>以下範例演示了如何使用這些檔案遍歷 API 建立自訂的 <code>FileVisitor</code> 行為，這允許您定義訪問檔案和目錄的特定操作。</p><p>例如，您可以明確地建立一個 <code>FileVisitor</code> 並稍後使用它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cleanVisitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fileVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onPreVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { directory, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 佔位符：新增訪問目錄的邏輯</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onVisitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 佔位符：新增訪問檔案的邏輯</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 佔位符：在此處新增遍歷前的通用設定邏輯</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cleanVisitor)</span></span></code></pre></div><p>您也可以使用 <code>builderAction</code> 建立 <code>FileVisitor</code> 並立即用於遍歷：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 定義 builderAction：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onPreVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { directory, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 訪問目錄的一些邏輯</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onVisitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 訪問檔案的一些邏輯</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此外，您可以使用 <code>walk()</code> 函數遍歷以指定路徑為根的檔案樹：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> traverseFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cleanVisitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fileVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onPreVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { directory, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (directory.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                directory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                FileVisitResult.SKIP_SUBTREE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 刪除副檔名為 .class 的檔案</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onVisitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (file.extension </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteExisting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 設定根目錄和檔案</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTempDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 建立包含 A.kt 和 A.class 檔案的 src 目錄</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { srcDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        srcDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        srcDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A.kt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        srcDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A.class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 建立包含 Project.jar 檔案的 build 目錄</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { buildDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Project.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 walk() 函數：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> directoryStructure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PathWalkOption.INCLUDE_DIRECTORIES)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">relativeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rootDirectory).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(directoryStructure)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;[, build, build/Project.jar, src, src/A.class, src/A.kt]&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 cleanVisitor 遍歷檔案樹，應用 rootDirectory.visitFileTree(cleanVisitor) 清理規則</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> directoryStructureAfterClean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PathWalkOption.INCLUDE_DIRECTORIES)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">relativeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rootDirectory).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(directoryStructureAfterClean)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;[, src, src/A.kt]&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="文件更新" tabindex="-1">文件更新 <a class="header-anchor" href="#文件更新" aria-label="Permalink to &quot;文件更新&quot;">​</a></h2><p>Kotlin 文件收到了一些顯著的變更：</p><h3 id="語言概念" tabindex="-1">語言概念 <a class="header-anchor" href="#語言概念" aria-label="Permalink to &quot;語言概念&quot;">​</a></h3><ul><li>改進的 <a href="/zh-Hant/kotlin/null-safety">空安全</a> 頁面 – 了解如何在程式碼中安全地處理 <code>null</code> 值。</li><li>改進的 <a href="/zh-Hant/kotlin/object-declarations">物件宣告與表達式</a> 頁面 – 了解如何一步定義類別並建立實例。</li><li>改進的 <a href="/zh-Hant/kotlin/control-flow#when-expressions-and-statements">When 表達式與陳述式</a> 部分 – 了解 <code>when</code> 條件式以及如何使用它。</li><li>更新的 <a href="/zh-Hant/kotlin/roadmap">Kotlin 路線圖</a>、<a href="/zh-Hant/kotlin/kotlin-evolution-principles">Kotlin 演進原則</a> 和 <a href="/zh-Hant/kotlin/kotlin-language-features-and-proposals">Kotlin 語言功能與提案</a> 頁面 – 了解 Kotlin 的計劃、持續發展和指導原則。</li></ul><h3 id="compose-編譯器" tabindex="-1">Compose 編譯器 <a class="header-anchor" href="#compose-編譯器" aria-label="Permalink to &quot;Compose 編譯器&quot;">​</a></h3><ul><li><a href="/zh-Hant/kotlin/compose-compiler-migration-guide">Compose 編譯器文件</a> 現已位於「編譯器與外掛程式」部分 – 了解 Compose 編譯器、編譯器選項以及遷移步驟。</li></ul><h3 id="api-參考" tabindex="-1">API 參考 <a class="header-anchor" href="#api-參考" aria-label="Permalink to &quot;API 參考&quot;">​</a></h3><ul><li>新的 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin" target="_blank" rel="noreferrer">Kotlin Gradle 外掛程式 API 參考</a> – 探索 Kotlin Gradle 外掛程式和 Compose 編譯器 Gradle 外掛程式的 API 參考。</li></ul><h3 id="多平台開發" tabindex="-1">多平台開發 <a class="header-anchor" href="#多平台開發" aria-label="Permalink to &quot;多平台開發&quot;">​</a></h3><ul><li>新的 <a href="https://kotlinlang.org/docs/api-guidelines-build-for-multiplatform.html" target="_blank" rel="noreferrer">為多平台建置 Kotlin 函式庫</a> 頁面 – 了解如何為 Kotlin 多平台設計您的 Kotlin 函式庫。</li><li>新的 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin 多平台介紹</a> 頁面 – 了解 Kotlin 多平台的關鍵概念、依賴項、函式庫等。</li><li>更新的 <a href="/zh-Hant/kotlinmultiplatform.topic">Kotlin 多平台概述</a> 頁面 – 瀏覽 Kotlin 多平台的基本要點和常用案例。</li><li>新的 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-ios-integration-overview.html" target="_blank" rel="noreferrer">iOS 整合</a> 部分 – 了解如何將 Kotlin 多平台共享模組整合到您的 iOS 應用程式中。</li><li>新的 <a href="/zh-Hant/kotlin/native-definition-file">Kotlin/Native 的定義文件</a> 頁面 – 了解如何建立定義文件以使用 C 和 Objective-C 函式庫。</li><li><a href="/zh-Hant/kotlin/wasm-wasi">開始使用 WASI</a> – 了解如何在各種 WebAssembly 虛擬機中，使用 WASI 運行簡單的 Kotlin/Wasm 應用程式。</li></ul><h3 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h3><ul><li><a href="/zh-Hant/kotlin/dokka-migration">新的 Dokka 遷移指南</a> – 了解如何遷移到 Dokka Gradle 外掛程式 v2。</li></ul><h2 id="kotlin-2-1-0-相容性指南" tabindex="-1">Kotlin 2.1.0 相容性指南 <a class="header-anchor" href="#kotlin-2-1-0-相容性指南" aria-label="Permalink to &quot;Kotlin 2.1.0 相容性指南&quot;">​</a></h2><p>Kotlin 2.1.0 是一個功能發布版本，因此可能會帶來與您為早期語言版本編寫的程式碼不相容的變更。 在 <a href="/zh-Hant/kotlin/compatibility-guide-21">Kotlin 2.1.0 相容性指南</a> 中找到這些變更的詳細列表。</p><h2 id="安裝-kotlin-2-1-0" tabindex="-1">安裝 Kotlin 2.1.0 <a class="header-anchor" href="#安裝-kotlin-2-1-0" aria-label="Permalink to &quot;安裝 Kotlin 2.1.0&quot;">​</a></h2><p>從 IntelliJ IDEA 2023.3 和 Android Studio Iguana (2023.2.1) Canary 15 開始，Kotlin 外掛程式作為捆綁外掛程式隨附在您的 IDE 中分發。 這意味著您無法再從 JetBrains Marketplace 安裝外掛程式。</p><p>若要更新到新的 Kotlin 版本，請在您的建置腳本中將 <a href="/zh-Hant/kotlin/releases#update-to-a-new-kotlin-version">Kotlin 版本</a> 更改為 2.1.0。</p>`,71))])}const N=u(C,[["render",v]]);export{I as __pageData,N as default};
