import{_ as C,C as t,c as y,o as m,G as s,ag as p,j as l,w as e,a}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/client-call-id.md","filePath":"zh-Hant/ktor/client-call-id.md","lastUpdated":1755457140000}'),I={name:"zh-Hant/ktor/client-call-id.md"};function b(v,i,f,_,F,D){const r=t("TopicTitle"),k=t("show-structure"),h=t("primary-label"),c=t("tldr"),u=t("link-summary"),n=t("code-block"),o=t("TabItem"),d=t("Tabs"),g=t("Links"),E=t("list");return m(),y("div",null,[s(r,{labelRef:"client-plugin",title:"在 Ktor Client 中追蹤請求"}),s(k,{for:"chapter",depth:"2"}),s(h,{ref:"client-plugin"},null,512),s(c,null,{default:e(()=>i[0]||(i[0]=[l("p",null,[l("b",null,"必要依賴"),a(": "),l("code",null,"io.ktor:ktor-client-call-id")],-1),l("p",null,[l("b",null,"程式碼範例"),a(": "),l("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-call-id"}," client-call-id ")],-1)])),_:1}),s(u,null,{default:e(()=>i[1]||(i[1]=[a(" CallId 用戶端外掛程式允許您使用唯一的呼叫 ID 來追蹤用戶端請求。 ")])),_:1}),i[14]||(i[14]=p('<p>CallId 外掛程式允許您使用唯一的呼叫 ID 端到端追蹤用戶端請求。這在微服務架構中特別有用，無論請求經過多少服務，都可以追蹤呼叫。</p><p>呼叫範圍可能在其協程環境中已經包含一個呼叫 ID。預設情況下，意外掛程式使用目前環境來檢索呼叫 ID，並使用 <code>HttpHeaders.XRequestId</code> 標頭將其新增到特定呼叫的環境中。</p><p>此外，如果一個範圍沒有呼叫 ID，您可以<a href="#configure">配置該外掛程式</a>來生成並應用一個新的呼叫 ID。</p><blockquote><p>在伺服器上，Ktor 提供了 <a href="./server-call-id">CallId</a> 外掛程式用於追蹤用戶端請求。</p></blockquote><h2 id="add_dependencies" tabindex="-1">新增依賴 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;新增依賴 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p> 若要使用 <code>CallId</code>，您需要將 <code>ktor-client-call-id</code> 構件包含在建置腳本中： </p>',6)),s(d,{group:"languages"},{default:e(()=>[s(o,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[s(n,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-call-id:$ktor_version")'})]),_:1}),s(o,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[s(n,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-call-id:$ktor_version"'})]),_:1}),s(o,{title:"Maven","group-key":"maven"},{default:e(()=>[s(n,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-call-id-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),i[15]||(i[15]=l("h2",{id:"install_plugin",tabindex:"-1"},[a("安裝 CallId "),l("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "安裝 CallId {id="install_plugin"}"'},"​")],-1)),l("p",null,[i[3]||(i[3]=a(" 若要將 ")),i[4]||(i[4]=l("code",null,"CallId",-1)),i[5]||(i[5]=a(" 外掛程式")),i[6]||(i[6]=l("a",{href:"#install"},"安裝",-1)),i[7]||(i[7]=a("到應用程式中，請將其傳遞給指定")),s(g,{href:"/ktor/server-modules",summary:"模組允許您透過分組路由來組織應用程式。"},{default:e(()=>i[2]||(i[2]=[a("模組")])),_:1}),i[8]||(i[8]=a("中的 ")),i[9]||(i[9]=l("code",null,"install",-1)),i[10]||(i[10]=a(" 函數。 下面的程式碼片段展示了如何安裝 ")),i[11]||(i[11]=l("code",null,"CallId",-1)),i[12]||(i[12]=a("... "))]),s(E,null,{default:e(()=>i[13]||(i[13]=[l("li",null,[a(" ...在 "),l("code",null,"embeddedServer"),a(" 函數呼叫內部。 ")],-1),l("li",null,[a(" ...在明確定義的 "),l("code",null,"module"),a(" 內部，該模組是 "),l("code",null,"Application"),a(" 類別的一個擴充函數。 ")],-1)])),_:1}),s(d,null,{default:e(()=>[s(o,{title:"embeddedServer"},{default:e(()=>[s(n,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.client.plugins.callid.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(CallId)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),s(o,{title:"module"},{default:e(()=>[s(n,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.client.plugins.callid.*
            // ...
            fun Application.module() {
                install(CallId)
                // ...
            }`})]),_:1})]),_:1}),i[16]||(i[16]=p(`<h2 id="configure" tabindex="-1">配置 CallId <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置 CallId {id=&quot;configure&quot;}&quot;">​</a></h2><p>CallId 外掛程式配置由 <a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-call-id/io.ktor.client.plugins.callid/-call-id-config/index.html" target="_blank" rel="noreferrer">CallIdConfig</a> 類別提供，允許您生成一個呼叫 ID 並將 其新增到呼叫環境中。</p><h3 id="生成呼叫-id" tabindex="-1">生成呼叫 ID <a class="header-anchor" href="#生成呼叫-id" aria-label="Permalink to &quot;生成呼叫 ID&quot;">​</a></h3><p>透過以下方式之一為特定請求生成呼叫 ID：</p><ul><li><code>useCoroutineContext</code> 屬性（預設啟用）新增了一個生成器，該生成器使用目前的 <code>CoroutineContext</code> 來檢索呼叫 ID。若要禁用此功能，請將 <code>useCoroutineContext</code> 設定為 <code>false</code>：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    useCoroutineContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>在 Ktor 伺服器中，使用 <a href="./server-call-id">CallId 外掛程式</a> 將呼叫 ID 新增到 <code>CoroutineContext</code>。</p></blockquote><ul><li><code>generate()</code> 函數允許您為傳出請求生成一個呼叫 ID。如果生成呼叫 ID 失敗，它會回傳 <code>null</code>。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;call-id-client-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以根據多種方法來生成呼叫 ID。透過這種方式，將應用第一個非空值。</p><h3 id="新增呼叫-id" tabindex="-1">新增呼叫 ID <a class="header-anchor" href="#新增呼叫-id" aria-label="Permalink to &quot;新增呼叫 ID&quot;">​</a></h3><p>檢索呼叫 ID 後，您可以選擇以下選項將其新增到請求中：</p><ul><li><code>intercept()</code> 函數允許您透過使用 <code>CallIdInterceptor</code> 將呼叫 ID 新增到請求中。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ClientCallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    intercept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { request, callId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId, callId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>addToHeader()</code> 函數將呼叫 ID 新增到指定的標頭。它接受一個標頭作為參數，預設為 <code>HttpHeaders.XRequestId</code>。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addToHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="範例" tabindex="-1">範例 <a class="header-anchor" href="#範例" aria-label="Permalink to &quot;範例&quot;">​</a></h2><p>在以下範例中，Ktor 用戶端的 <code>CallId</code> 外掛程式被配置為生成新的呼叫 ID 並將其新增到標頭：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;call-id-client&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addToHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>該外掛程式使用協程環境來獲取呼叫 ID，並利用 <code>generate()</code> 函數生成一個新的呼叫 ID。然後，第一個非空的呼叫 ID 會使用 <code>addToHeader()</code> 函數應用到請求標頭。</p><p>在 Ktor 伺服器中，呼叫 ID 可以透過 <a href="./server-call-id">CallId 伺服器外掛程式</a>的 <a href="./server-call-id#retrieve">retrieve</a> 函數從標頭中檢索。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    retrieveFromHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>透過這種方式，Ktor 伺服器會檢索請求指定標頭的 ID，並將其應用於呼叫的 <code>callId</code> 屬性。</p><p>有關完整範例， 請參閱 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-call-id" target="_blank" rel="noreferrer">client-call-id</a></p>`,24))])}const x=C(I,[["render",b]]);export{T as __pageData,x as default};
