import{_ as e,c as t,o as i,ag as a}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"OpenTelemetryのサポート","description":"","frontmatter":{},"headers":[],"relativePath":"ja/koog/opentelemetry-support.md","filePath":"ja/koog/opentelemetry-support.md","lastUpdated":1755146406000}'),l={name:"ja/koog/opentelemetry-support.md"};function n(p,s,h,r,d,k){return i(),t("div",null,s[0]||(s[0]=[a(`<h1 id="opentelemetryのサポート" tabindex="-1">OpenTelemetryのサポート <a class="header-anchor" href="#opentelemetryのサポート" aria-label="Permalink to &quot;OpenTelemetryのサポート&quot;">​</a></h1><p>このページでは、KoogエージェントフレームワークにおけるOpenTelemetryのサポートについて、AIエージェントのトレースと監視のために詳しく説明します。</p><h2 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h2><p>OpenTelemetryは、アプリケーションからテレメトリーデータ（トレース）を生成、収集、エクスポートするためのツールを提供する可観測性フレームワークです。KoogのOpenTelemetry機能を使用すると、AIエージェントを計装してテレメトリーデータを収集できます。これは、以下の点で役立ちます。</p><ul><li>エージェントのパフォーマンスと挙動を監視する</li><li>複雑なエージェントのワークフローにおける問題をデバッグする</li><li>エージェントの実行フローを可視化する</li><li>LLM呼び出しとツール使用状況を追跡する</li><li>エージェントの挙動パターンを分析する</li></ul><h2 id="opentelemetryの主要な概念" tabindex="-1">OpenTelemetryの主要な概念 <a class="header-anchor" href="#opentelemetryの主要な概念" aria-label="Permalink to &quot;OpenTelemetryの主要な概念&quot;">​</a></h2><ul><li><strong>Spans</strong>: スパンは、分散トレース内の個々の作業単位または操作を表します。これらは、エージェントの実行、関数呼び出し、LLM呼び出し、ツール呼び出しなど、アプリケーション内の特定の活動の開始と終了を示します。</li><li><strong>Attributes</strong>: 属性は、スパンなどのテレメトリー関連アイテムに関するメタデータを提供します。属性はキーと値のペアとして表現されます。</li><li><strong>Events</strong>: イベントは、スパンのライフタイム中の特定の時点（スパン関連イベント）であり、発生した可能性のある注目すべき事柄を表します。</li><li><strong>Exporters</strong>: エクスポーターは、収集されたテレメトリーデータをさまざまなバックエンドまたは宛先に送信する役割を担うコンポーネントです。</li><li><strong>Collectors</strong>: コレクターは、テレメトリーデータを受信、処理、エクスポートします。これらはアプリケーションと可観測性バックエンドの間の仲介役として機能します。</li><li><strong>Samplers</strong>: サンプラーは、サンプリング戦略に基づいてトレースを記録するかどうかを決定します。これらはテレメトリーデータのボリュームを管理するために使用されます。</li><li><strong>Resources</strong>: リソースは、テレメトリーデータを生成するエンティティを表します。これらはリソース属性によって識別され、リソースに関する情報を提供するキーと値のペアです。</li></ul><p>KoogのOpenTelemetry機能は、さまざまなエージェントイベントに対してスパンを自動的に作成します。これには以下が含まれます。</p><ul><li>エージェントの実行開始と終了</li><li>ノードの実行</li><li>LLM呼び出し</li><li>ツール呼び出し</li></ul><h2 id="インストール" tabindex="-1">インストール <a class="header-anchor" href="#インストール" aria-label="Permalink to &quot;インストール&quot;">​</a></h2><p>KoogでOpenTelemetryを使用するには、OpenTelemetry機能をエージェントに追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apiKey),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Chat.GPT4o,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    systemPrompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You are a helpful assistant.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    installFeatures </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Configuration options go here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="設定" tabindex="-1">設定 <a class="header-anchor" href="#設定" aria-label="Permalink to &quot;設定&quot;">​</a></h2><h3 id="基本設定" tabindex="-1">基本設定 <a class="header-anchor" href="#基本設定" aria-label="Permalink to &quot;基本設定&quot;">​</a></h3><p>エージェントでOpenTelemetry機能を設定する際に設定できる利用可能なプロパティの完全なリストを以下に示します。</p><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Data type</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>serviceName</code></td><td style="text-align:left;"><code>String</code></td><td style="text-align:left;"><code>ai.koog</code></td><td style="text-align:left;">計装されるサービスの名前。</td></tr><tr><td style="text-align:left;"><code>serviceVersion</code></td><td style="text-align:left;"><code>String</code></td><td style="text-align:left;">Current Koog library version</td><td style="text-align:left;">計装されるサービスのバージョン。</td></tr><tr><td style="text-align:left;"><code>isVerbose</code></td><td style="text-align:left;"><code>Boolean</code></td><td style="text-align:left;"><code>false</code></td><td style="text-align:left;">OpenTelemetry設定のデバッグのための詳細ログを有効にするかどうか。</td></tr><tr><td style="text-align:left;"><code>sdk</code></td><td style="text-align:left;"><code>OpenTelemetrySdk</code></td><td style="text-align:left;"></td><td style="text-align:left;">テレメトリー収集に使用するOpenTelemetry SDKインスタンス。</td></tr><tr><td style="text-align:left;"><code>tracer</code></td><td style="text-align:left;"><code>Tracer</code></td><td style="text-align:left;"></td><td style="text-align:left;">スパン作成に使用するOpenTelemetryトレーサーインスタンス。</td></tr></tbody></table><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>sdk</code>および<code>tracer</code>プロパティは、アクセス可能なパブリックプロパティですが、以下にリストされているパブリックメソッドを使用してのみ設定できます。</p></div><p><code>OpenTelemetryConfig</code>クラスには、異なる設定項目に関連するアクションを表すメソッドも含まれています。以下は、基本的な設定項目セットでOpenTelemetry機能をインストールする例です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set your service configuration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setServiceInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-agent-service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add the Logging exporter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>利用可能なメソッドのリファレンスについては、以下のセクションを参照してください。</p><h4 id="setserviceinfo" tabindex="-1">setServiceInfo <a class="header-anchor" href="#setserviceinfo" aria-label="Permalink to &quot;setServiceInfo&quot;">​</a></h4><p>名前とバージョンを含むサービス情報を設定します。以下の引数を取ります。</p><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Data type</th><th style="text-align:left;">Required</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>serviceName</code></td><td style="text-align:left;">String</td><td style="text-align:left;">Yes</td><td style="text-align:left;"></td><td style="text-align:left;">計装されるサービスの名前。</td></tr><tr><td style="text-align:left;"><code>serviceVersion</code></td><td style="text-align:left;">String</td><td style="text-align:left;">Yes</td><td style="text-align:left;"></td><td style="text-align:left;">計装されるサービスのバージョン。</td></tr></tbody></table><h4 id="addspanexporter" tabindex="-1">addSpanExporter <a class="header-anchor" href="#addspanexporter" aria-label="Permalink to &quot;addSpanExporter&quot;">​</a></h4><p>テレメトリーデータを外部システムに送信するためのスパンエクスポーターを追加します。以下の引数を取ります。</p><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Data type</th><th style="text-align:left;">Required</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>exporter</code></td><td style="text-align:left;"><code>SpanExporter</code></td><td style="text-align:left;">Yes</td><td style="text-align:left;"></td><td style="text-align:left;">カスタムスパンエクスポーターのリストに追加する<code>SpanExporter</code>インスタンス。</td></tr></tbody></table><h4 id="addspanprocessor" tabindex="-1">addSpanProcessor <a class="header-anchor" href="#addspanprocessor" aria-label="Permalink to &quot;addSpanProcessor&quot;">​</a></h4><p>スパンがエクスポートされる前に処理するためのスパンプロセッサーを追加します。以下の引数を取ります。</p><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Data type</th><th style="text-align:left;">Required</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>processor</code></td><td style="text-align:left;"><code>SpanProcessor</code></td><td style="text-align:left;">Yes</td><td style="text-align:left;"></td><td style="text-align:left;">エクスポート前にテレメトリーデータを処理するためのカスタムロジックを含むスパンプロセッサー。</td></tr></tbody></table><h4 id="addresourceattributes" tabindex="-1">addResourceAttributes <a class="header-anchor" href="#addresourceattributes" aria-label="Permalink to &quot;addResourceAttributes&quot;">​</a></h4><p>サービスに関する追加のコンテキストを提供するためのリソース属性を追加します。以下の引数を取ります。</p><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Data type</th><th style="text-align:left;">Required</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>attributes</code></td><td style="text-align:left;"><code>Map&lt;AttributeKey&lt;T&gt;, T&gt;</code></td><td style="text-align:left;">Yes</td><td style="text-align:left;"></td><td style="text-align:left;">サービスに関する追加の詳細を提供するキーと値のペア。</td></tr></tbody></table><h4 id="setsampler" tabindex="-1">setSampler <a class="header-anchor" href="#setsampler" aria-label="Permalink to &quot;setSampler&quot;">​</a></h4><p>どのスパンを収集するかを制御するためにサンプリング戦略を設定します。以下の引数を取ります。</p><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Data type</th><th style="text-align:left;">Required</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>sampler</code></td><td style="text-align:left;"><code>Sampler</code></td><td style="text-align:left;">Yes</td><td style="text-align:left;"></td><td style="text-align:left;">OpenTelemetry設定のために設定するサンプラーインスタンス。</td></tr></tbody></table><h4 id="setverbose" tabindex="-1">setVerbose <a class="header-anchor" href="#setverbose" aria-label="Permalink to &quot;setVerbose&quot;">​</a></h4><p>OpenTelemetry設定のデバッグ用の詳細ログを有効または無効にします。以下の引数を取ります。</p><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Data type</th><th style="text-align:left;">Required</th><th style="text-align:left;">Default value</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>verbose</code></td><td style="text-align:left;"><code>Boolean</code></td><td style="text-align:left;">Yes</td><td style="text-align:left;"><code>false</code></td><td style="text-align:left;">trueの場合、アプリケーションはより詳細なテレメトリーデータを収集します。</td></tr></tbody></table><h3 id="高度な設定" tabindex="-1">高度な設定 <a class="header-anchor" href="#高度な設定" aria-label="Permalink to &quot;高度な設定&quot;">​</a></h3><p>より高度な設定については、以下の設定オプションもカスタマイズできます。</p><ul><li>Sampler: 収集されるデータの頻度と量を調整するためにサンプリング戦略を設定します。</li><li>Resource attributes: テレメトリーデータを生成しているプロセスに関する情報を追加します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set your service configuration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setServiceInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-agent-service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add the Logging exporter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set the sampler </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setSampler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sampler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">traceIdRatioBased</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add resource attributes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addResourceAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        AttributeKey.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom.attribute&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom-value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="sampler" tabindex="-1">Sampler <a class="header-anchor" href="#sampler" aria-label="Permalink to &quot;Sampler&quot;">​</a></h4><p>サンプラーを定義するには、使用したいサンプリング戦略を表す<code>opentelemetry-java</code> SDKの<code>Sampler</code>クラス（<code>io.opentelemetry.sdk.trace.samplers.Sampler</code>）の対応するメソッドを使用します。</p><p>デフォルトのサンプリング戦略は以下の通りです。</p><ul><li><code>Sampler.alwaysOn()</code>: すべてのスパン（トレース）がサンプリングされるデフォルトのサンプリング戦略。</li></ul><p>利用可能なサンプラーとサンプリング戦略の詳細については、OpenTelemetryの<a href="https://opentelemetry.io/docs/languages/java/sdk/#sampler" target="_blank" rel="noreferrer">Sampler</a>ドキュメントを参照してください。</p><h4 id="resource-attributes" tabindex="-1">Resource attributes <a class="header-anchor" href="#resource-attributes" aria-label="Permalink to &quot;Resource attributes&quot;">​</a></h4><p>リソース属性は、テレメトリーデータを生成するプロセスに関する追加情報を表します。Koogには、デフォルトで設定される一連のリソース属性が含まれています。</p><ul><li><code>service.name</code></li><li><code>service.version</code></li><li><code>service.instance.time</code></li><li><code>os.type</code></li><li><code>os.version</code></li><li><code>os.arch</code></li></ul><p><code>service.name</code>属性のデフォルト値は<code>ai.koog</code>であり、<code>service.version</code>のデフォルト値は現在使用されているKoogライブラリのバージョンです。</p><p>デフォルトのリソース属性に加えて、カスタム属性を追加することもできます。KoogでOpenTelemetry設定にカスタム属性を追加するには、OpenTelemetry設定で<code>addResourceAttributes()</code>メソッドを使用します。このメソッドはキーと値を引数として取ります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addResourceAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AttributeKey.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom.attribute&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom-value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="スパンの種類と属性" tabindex="-1">スパンの種類と属性 <a class="header-anchor" href="#スパンの種類と属性" aria-label="Permalink to &quot;スパンの種類と属性&quot;">​</a></h2><p>OpenTelemetry機能は、エージェント内のさまざまな操作を追跡するために、異なるタイプのスパンを自動的に作成します。</p><ul><li><strong>CreateAgentSpan</strong>: エージェントを実行すると作成され、エージェントが閉じられるか、プロセスが終了すると閉じられます。</li><li><strong>InvokeAgentSpan</strong>: エージェントの呼び出し。</li><li><strong>NodeExecuteSpan</strong>: エージェントの戦略におけるノードの実行。これはカスタムのKoog固有スパンです。</li><li><strong>InferenceSpan</strong>: LLM呼び出し。</li><li><strong>ExecuteToolSpan</strong>: ツール呼び出し。</li></ul><p>スパンはネストされた階層構造で整理されます。以下はスパン構造の例です。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CreateAgentSpan</span></span>
<span class="line"><span>    InvokeAgentSpan</span></span>
<span class="line"><span>        NodeExecuteSpan</span></span>
<span class="line"><span>            InferenceSpan</span></span>
<span class="line"><span>        NodeExecuteSpan</span></span>
<span class="line"><span>            ExecuteToolSpan</span></span>
<span class="line"><span>        NodeExecuteSpan</span></span>
<span class="line"><span>            InferenceSpan</span></span></code></pre></div><h3 id="スパン属性" tabindex="-1">スパン属性 <a class="header-anchor" href="#スパン属性" aria-label="Permalink to &quot;スパン属性&quot;">​</a></h3><p>スパン属性は、スパンに関連するメタデータを提供します。各スパンは独自の属性セットを持ち、一部のスパンは属性を繰り返すこともできます。</p><p>Koogは、OpenTelemetryの<a href="https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-spans/" target="_blank" rel="noreferrer">生成AIイベントのセマンティック規約</a>に従う事前定義された属性のリストをサポートしています。たとえば、規約では<code>gen_ai.conversation.id</code>という名前の属性が定義されており、これは通常、スパンに必須の属性です。Koogでは、この属性の値はエージェント実行の一意の識別子であり、<code>agent.run()</code>メソッドを呼び出すと自動的に設定されます。</p><p>さらに、KoogはカスタムのKoog固有属性も含まれています。これらの属性のほとんどは<code>koog.</code>プレフィックスで識別できます。利用可能なカスタム属性は以下の通りです。</p><ul><li><code>koog.agent.strategy.name</code>: エージェント戦略の名前。戦略は、エージェントの目的を説明するKoog関連エンティティです。<code>InvokeAgentSpan</code>スパンで使用されます。</li><li><code>koog.node.name</code>: 実行中のノードの名前。<code>NodeExecuteSpan</code>スパンで使用されます。</li></ul><h3 id="イベント" tabindex="-1">イベント <a class="header-anchor" href="#イベント" aria-label="Permalink to &quot;イベント&quot;">​</a></h3><p>スパンには_イベント_もアタッチできます。イベントは、何か関連する出来事が起こった特定の時点を表します。たとえば、LLM呼び出しが開始または終了したときなどです。イベントには属性もあり、さらにイベントの_本体フィールド_も含まれます。</p><p>OpenTelemetryの<a href="https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-events/" target="_blank" rel="noreferrer">生成AIイベントのセマンティック規約</a>に沿って、以下のイベントタイプがサポートされています。</p><ul><li><strong>SystemMessageEvent</strong>: モデルに渡されるシステム指示。</li><li><strong>UserMessageEvent</strong>: モデルに渡されるユーザーメッセージ。</li><li><strong>AssistantMessageEvent</strong>: モデルに渡されるアシスタントメッセージ。</li><li><strong>ToolMessageEvent</strong>: モデルに渡されるツールまたは関数呼び出しからの応答。</li><li><strong>ChoiceEvent</strong>: モデルからの応答メッセージ。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>optentelemetry-java</code> SDKは、イベントを追加する際にイベント本体フィールドパラメータをサポートしていません。したがって、KoogのOpenTelemetryサポートでは、イベント本体フィールドはキーが<code>body</code>で値の型が文字列である個別の属性です。この文字列には、イベント本体フィールドのコンテンツまたはペイロードが含まれており、通常はJSONのようなオブジェクトです。イベント本体フィールドの例については、<a href="https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-events/#examples" target="_blank" rel="noreferrer">OpenTelemetryドキュメント</a>を参照してください。<code>opentelemetry-java</code>におけるイベント本体フィールドのサポート状況については、関連する<a href="https://github.com/open-telemetry/semantic-conventions/issues/1870" target="_blank" rel="noreferrer">GitHubイシュー</a>を参照してください。</p></div><h2 id="エクスポーター" tabindex="-1">エクスポーター <a class="header-anchor" href="#エクスポーター" aria-label="Permalink to &quot;エクスポーター&quot;">​</a></h2><p>エクスポーターは、収集されたテレメトリーデータをOpenTelemetry Collectorまたは他の種類の宛先やバックエンド実装に送信します。エクスポーターを追加するには、OpenTelemetry機能をインストールする際に<code>addSpanExporter()</code>メソッドを使用します。このメソッドは以下の引数を取ります。</p><table tabindex="0"><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Data type</th><th style="text-align:left;">Required</th><th style="text-align:left;">Default</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>exporter</code></td><td style="text-align:left;">SpanExporter</td><td style="text-align:left;">Yes</td><td style="text-align:left;"></td><td style="text-align:left;">カスタムスパンエクスポーターのリストに追加する<code>SpanExporter</code>インスタンス。</td></tr></tbody></table><p>以下のセクションでは、<code>opentelemetry-java</code> SDKの最も一般的に使用されるエクスポーターのいくつかについて説明します。</p><h3 id="ロギングエクスポーター" tabindex="-1">ロギングエクスポーター <a class="header-anchor" href="#ロギングエクスポーター" aria-label="Permalink to &quot;ロギングエクスポーター&quot;">​</a></h3><p>トレース情報をコンソールに出力するロギングエクスポーターです。<code>LoggingSpanExporter</code>（<code>io.opentelemetry.exporter.logging.LoggingSpanExporter</code>）は、<code>opentelemetry-java</code> SDKの一部です。</p><p>このタイプのエクスポートは、開発およびデバッグ目的で役立ちます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add the logging exporter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add more exporters as needed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="opentelemetry-httpエクスポーター" tabindex="-1">OpenTelemetry HTTPエクスポーター <a class="header-anchor" href="#opentelemetry-httpエクスポーター" aria-label="Permalink to &quot;OpenTelemetry HTTPエクスポーター&quot;">​</a></h3><p>OpenTelemetry HTTPエクスポーター（<code>OtlpHttpSpanExporter</code>）は、<code>opentelemetry-java</code> SDK（<code>io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter</code>）の一部であり、HTTP経由でスパンデータをバックエンドに送信します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Add OpenTelemetry HTTP exporter </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      OtlpHttpSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Set the maximum time to wait for the collector to process an exported batch of spans </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Set the OpenTelemetry endpoint to connect to</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:3000/api/public/otel/v1/traces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Add the authorization header</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Authorization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Basic </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$AUTH_STRING</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="opentelemetry-grpcエクスポーター" tabindex="-1">OpenTelemetry gRPCエクスポーター <a class="header-anchor" href="#opentelemetry-grpcエクスポーター" aria-label="Permalink to &quot;OpenTelemetry gRPCエクスポーター&quot;">​</a></h3><p>OpenTelemetry gRPCエクスポーター（<code>OtlpGrpcSpanExporter</code>）は、<code>opentelemetry-java</code> SDK（<code>io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporter</code>）の一部です。gRPC経由でテレメトリーデータをバックエンドにエクスポートし、データを受信するバックエンド、コレクター、またはエンドポイントのホストとポートを定義できます。デフォルトのポートは<code>4317</code>です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Add OpenTelemetry gRPC exporter </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      OtlpGrpcSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Set the host and the port</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:4317&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="jaegerとの統合" tabindex="-1">Jaegerとの統合 <a class="header-anchor" href="#jaegerとの統合" aria-label="Permalink to &quot;Jaegerとの統合&quot;">​</a></h2><p>Jaegerは、OpenTelemetryと連携する人気の分散トレースシステムです。Koogリポジトリの<code>examples</code>内の<code>opentelemetry</code>ディレクトリには、JaegerとKoogエージェントでOpenTelemetryを使用する例が含まれています。</p><h3 id="前提条件" tabindex="-1">前提条件 <a class="header-anchor" href="#前提条件" aria-label="Permalink to &quot;前提条件&quot;">​</a></h3><p>KoogとJaegerでOpenTelemetryをテストするには、提供されている<code>docker-compose.yaml</code>ファイルを使用してJaeger OpenTelemetryオールインワンプロセスを開始します。以下のコマンドを実行してください。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><p>提供されているDocker Compose YAMLファイルには、以下の内容が含まれています。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># docker-compose.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  jaeger-all-in-one</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jaegertracing/all-in-one:1.39</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jaeger-all-in-one</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">COLLECTOR_OTLP_ENABLED=true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4317:4317&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;16686:16686&quot;</span></span></code></pre></div><p>Jaeger UIにアクセスしてトレースを表示するには、<code>http://localhost:16686</code>を開いてください。</p><h3 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h3><p>Jaegerで使用するためのテレメトリーデータをエクスポートするために、この例では<code>opentelemetry-java</code> SDKの<code>LoggingSpanExporter</code>（<code>io.opentelemetry.exporter.logging.LoggingSpanExporter</code>）と<code>OtlpGrpcSpanExporter</code>（<code>io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporter</code>）を使用しています。</p><p>以下に完全なコードサンプルを示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(openAIApiKey),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Reasoning.GPT4oMini,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            systemPrompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You are a code assistant. Provide concise code examples.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Add a console logger for local debugging</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Send traces to OpenTelemetry collector</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    OtlpGrpcSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:4317&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Running the agent with OpenTelemetry tracing...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tell me a joke about programming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Agent run completed with result: &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Check Jaeger UI at http://localhost:16686 to view traces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="トラブルシューティング" tabindex="-1">トラブルシューティング <a class="header-anchor" href="#トラブルシューティング" aria-label="Permalink to &quot;トラブルシューティング&quot;">​</a></h2><h3 id="よくある問題" tabindex="-1">よくある問題 <a class="header-anchor" href="#よくある問題" aria-label="Permalink to &quot;よくある問題&quot;">​</a></h3><ol><li><p><strong>JaegerまたはLangfuseにトレースが表示されない</strong></p><ul><li>サービスが実行されており、OpenTelemetryポート（4317）にアクセス可能であることを確認してください。</li><li>OpenTelemetryエクスポーターが正しいエンドポイントで設定されていることを確認してください。</li><li>トレースがエクスポートされるまで、エージェントの実行後に数秒待つようにしてください。</li></ul></li><li><p><strong>スパンが見つからない、またはトレースが不完全</strong></p><ul><li>エージェントの実行が正常に完了したことを確認してください。</li><li>エージェントの実行後にアプリケーションを早すぎる段階で終了させていないことを確認してください。</li><li>スパンがエクスポートされる時間を確保するために、エージェント実行後に遅延を追加してください。</li></ul></li><li><p><strong>過剰な数のスパン</strong></p><ul><li><code>sampler</code>プロパティを設定して、別のサンプリング戦略の使用を検討してください。</li><li>たとえば、<code>Sampler.traceIdRatioBased(0.1)</code>を使用して、トレースの10%のみをサンプリングします。</li></ul></li></ol>`,97)]))}const E=e(l,[["render",n]]);export{g as __pageData,E as default};
