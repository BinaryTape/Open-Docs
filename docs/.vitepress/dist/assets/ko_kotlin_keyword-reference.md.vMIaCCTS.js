import{_ as o,c as i,o as l,ag as a}from"./chunks/framework.Bksy39di.js";const h=JSON.parse('{"title":"키워드 및 연산자","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/keyword-reference.md","filePath":"ko/kotlin/keyword-reference.md","lastUpdated":1754307826000}'),t={name:"ko/kotlin/keyword-reference.md"};function n(r,e,c,d,s,k){return l(),i("div",null,e[0]||(e[0]=[a('<h1 id="키워드-및-연산자" tabindex="-1">키워드 및 연산자 <a class="header-anchor" href="#키워드-및-연산자" aria-label="Permalink to &quot;키워드 및 연산자&quot;">​</a></h1><h2 id="하드-키워드" tabindex="-1">하드 키워드 <a class="header-anchor" href="#하드-키워드" aria-label="Permalink to &quot;하드 키워드&quot;">​</a></h2><p>다음 토큰은 항상 키워드로 해석되며 식별자로 사용할 수 없습니다:</p><ul><li><code>as</code><ul><li><a href="/ko/kotlin/typecasts#unsafe-cast-operator">타입 캐스트</a>에 사용됩니다.</li><li><a href="/ko/kotlin/packages#imports">임포트의 별칭</a>을 지정합니다.</li></ul></li><li><code>as?</code>는 <a href="/ko/kotlin/typecasts#safe-nullable-cast-operator">안전한 타입 캐스트</a>에 사용됩니다.</li><li><code>break</code>는 <a href="/ko/kotlin/returns">루프의 실행을 종료합니다</a>.</li><li><code>class</code>는 <a href="/ko/kotlin/classes">클래스</a>를 선언합니다.</li><li><code>continue</code>는 <a href="/ko/kotlin/returns">가장 가까운 둘러싸는 루프의 다음 단계로 진행합니다</a>.</li><li><code>do</code>는 <a href="/ko/kotlin/control-flow#while-loops">do/while 루프</a>(후위 조건 루프)를 시작합니다.</li><li><code>else</code>는 조건이 거짓일 때 실행되는 <a href="/ko/kotlin/control-flow#if-expression">if 표현식</a>의 브랜치를 정의합니다.</li><li><code>false</code>는 <a href="/ko/kotlin/booleans">Boolean 타입</a>의 &#39;false&#39; 값을 지정합니다.</li><li><code>for</code>는 <a href="/ko/kotlin/control-flow#for-loops">for 루프</a>를 시작합니다.</li><li><code>fun</code>은 <a href="/ko/kotlin/functions">함수</a>를 선언합니다.</li><li><code>if</code>는 <a href="/ko/kotlin/control-flow#if-expression">if 표현식</a>을 시작합니다.</li><li><code>in</code><ul><li><a href="/ko/kotlin/control-flow#for-loops">for 루프</a>에서 반복되는 객체를 지정합니다.</li><li>값이 <a href="/ko/kotlin/ranges">범위</a>, 컬렉션 또는 <a href="/ko/kotlin/operator-overloading#in-operator">‘contains’ 메서드를 정의하는</a> 다른 엔티티에 속하는지 확인하는 중위 연산자로 사용됩니다.</li><li>동일한 목적으로 <a href="/ko/kotlin/control-flow#when-expressions-and-statements">when 표현식</a>에서 사용됩니다.</li><li>타입 매개변수를 <a href="/ko/kotlin/generics#declaration-site-variance">반공변</a>으로 표시합니다.</li></ul></li><li><code>!in</code><ul><li>값이 <a href="/ko/kotlin/ranges">범위</a>, 컬렉션 또는 <a href="/ko/kotlin/operator-overloading#in-operator">‘contains’ 메서드를 정의하는</a> 다른 엔티티에 속하지 않는지 확인하는 연산자로 사용됩니다.</li><li>동일한 목적으로 <a href="/ko/kotlin/control-flow#when-expressions-and-statements">when 표현식</a>에서 사용됩니다.</li></ul></li><li><code>interface</code>는 <a href="/ko/kotlin/interfaces">인터페이스</a>를 선언합니다.</li><li><code>is</code><ul><li><a href="/ko/kotlin/typecasts#is-and-is-operators">값이 특정 타입을 가지는지</a> 확인합니다.</li><li>동일한 목적으로 <a href="/ko/kotlin/control-flow#when-expressions-and-statements">when 표현식</a>에서 사용됩니다.</li></ul></li><li><code>!is</code><ul><li><a href="/ko/kotlin/typecasts#is-and-is-operators">값이 특정 타입을 가지지 않는지</a> 확인합니다.</li><li>동일한 목적으로 <a href="/ko/kotlin/control-flow#when-expressions-and-statements">when 표현식</a>에서 사용됩니다.</li></ul></li><li><code>null</code>은 어떤 객체도 가리키지 않는 객체 참조를 나타내는 상수입니다.</li><li><code>object</code>는 <a href="/ko/kotlin/object-declarations">클래스와 해당 인스턴스를 동시에 선언합니다</a>.</li><li><code>package</code>는 <a href="/ko/kotlin/packages">현재 파일의 패키지</a>를 지정합니다.</li><li><code>return</code>은 <a href="/ko/kotlin/returns">가장 가까운 둘러싸는 함수 또는 익명 함수에서 반환합니다</a>.</li><li><code>super</code><ul><li><a href="/ko/kotlin/inheritance#calling-the-superclass-implementation">메서드 또는 프로퍼티의 슈퍼클래스 구현을 참조합니다</a>.</li><li><a href="/ko/kotlin/classes#inheritance">보조 생성자에서 슈퍼클래스 생성자를 호출합니다</a>.</li></ul></li><li><code>this</code><ul><li><a href="/ko/kotlin/this-expressions">현재 리시버</a>를 참조합니다.</li><li><a href="/ko/kotlin/classes#constructors">보조 생성자에서 동일 클래스의 다른 생성자를 호출합니다</a>.</li></ul></li><li><code>throw</code>는 <a href="/ko/kotlin/exceptions">예외를 던집니다</a>.</li><li><code>true</code>는 <a href="/ko/kotlin/booleans">Boolean 타입</a>의 &#39;true&#39; 값을 지정합니다.</li><li><code>try</code>는 <a href="/ko/kotlin/exceptions">예외 처리 블록</a>을 시작합니다.</li><li><code>typealias</code>는 <a href="/ko/kotlin/type-aliases">타입 별칭</a>을 선언합니다.</li><li><code>typeof</code>는 향후 사용을 위해 예약되어 있습니다.</li><li><code>val</code>은 읽기 전용 <a href="/ko/kotlin/properties">프로퍼티</a> 또는 <a href="/ko/kotlin/basic-syntax#variables">지역 변수</a>를 선언합니다.</li><li><code>var</code>는 가변 <a href="/ko/kotlin/properties">프로퍼티</a> 또는 <a href="/ko/kotlin/basic-syntax#variables">지역 변수</a>를 선언합니다.</li><li><code>when</code>은 <a href="/ko/kotlin/control-flow#when-expressions-and-statements">when 표현식</a>(주어진 브랜치 중 하나를 실행합니다)을 시작합니다.</li><li><code>while</code>은 <a href="/ko/kotlin/control-flow#while-loops">while 루프</a>(전위 조건 루프)를 시작합니다.</li></ul><h2 id="소프트-키워드" tabindex="-1">소프트 키워드 <a class="header-anchor" href="#소프트-키워드" aria-label="Permalink to &quot;소프트 키워드&quot;">​</a></h2><p>다음 토큰은 적용 가능한 컨텍스트에서 키워드 역할을 하며, 다른 컨텍스트에서는 식별자로 사용될 수 있습니다:</p><ul><li><code>by</code><ul><li><a href="/ko/kotlin/delegation">인터페이스의 구현을 다른 객체에 위임합니다</a>.</li><li><a href="/ko/kotlin/delegated-properties">프로퍼티의 접근자 구현을 다른 객체에 위임합니다</a>.</li></ul></li><li><code>catch</code>는 <a href="/ko/kotlin/exceptions">특정 예외 타입을 처리하는</a> 블록을 시작합니다.</li><li><code>constructor</code>는 <a href="/ko/kotlin/classes#constructors">주 생성자 또는 보조 생성자</a>를 선언합니다.</li><li><code>delegate</code>는 <a href="/ko/kotlin/annotations#annotation-use-site-targets">어노테이션 사용 지점 대상</a>으로 사용됩니다.</li><li><code>dynamic</code>은 Kotlin/JS 코드에서 <a href="/ko/kotlin/dynamic-type">동적 타입</a>을 참조합니다.</li><li><code>field</code>는 <a href="/ko/kotlin/annotations#annotation-use-site-targets">어노테이션 사용 지점 대상</a>으로 사용됩니다.</li><li><code>file</code>은 <a href="/ko/kotlin/annotations#annotation-use-site-targets">어노테이션 사용 지점 대상</a>으로 사용됩니다.</li><li><code>finally</code>는 <a href="/ko/kotlin/exceptions">try 블록이 종료될 때 항상 실행되는</a> 블록을 시작합니다.</li><li><code>get</code><ul><li><a href="/ko/kotlin/properties#getters-and-setters">프로퍼티의 getter</a>를 선언합니다.</li><li><a href="/ko/kotlin/annotations#annotation-use-site-targets">어노테이션 사용 지점 대상</a>으로 사용됩니다.</li></ul></li><li><code>import</code>는 <a href="/ko/kotlin/packages">다른 패키지의 선언을 현재 파일로 임포트합니다</a>.</li><li><code>init</code>는 <a href="/ko/kotlin/classes#constructors">초기화 블록</a>을 시작합니다.</li><li><code>param</code>은 <a href="/ko/kotlin/annotations#annotation-use-site-targets">어노테이션 사용 지점 대상</a>으로 사용됩니다.</li><li><code>property</code>는 <a href="/ko/kotlin/annotations#annotation-use-site-targets">어노테이션 사용 지점 대상</a>으로 사용됩니다.</li><li><code>receiver</code>는 <a href="/ko/kotlin/annotations#annotation-use-site-targets">어노테이션 사용 지점 대상</a>으로 사용됩니다.</li><li><code>set</code><ul><li><a href="/ko/kotlin/properties#getters-and-setters">프로퍼티의 setter</a>를 선언합니다.</li><li><a href="/ko/kotlin/annotations#annotation-use-site-targets">어노테이션 사용 지점 대상</a>으로 사용됩니다.</li></ul></li><li><code>setparam</code>은 <a href="/ko/kotlin/annotations#annotation-use-site-targets">어노테이션 사용 지점 대상</a>으로 사용됩니다.</li><li><code>value</code>는 <code>class</code> 키워드와 함께 <a href="/ko/kotlin/inline-classes">인라인 클래스</a>를 선언합니다.</li><li><code>where</code>는 <a href="/ko/kotlin/generics#upper-bounds">제네릭 타입 매개변수에 대한 제약 조건</a>을 지정합니다.</li></ul><h2 id="수식어-키워드" tabindex="-1">수식어 키워드 <a class="header-anchor" href="#수식어-키워드" aria-label="Permalink to &quot;수식어 키워드&quot;">​</a></h2><p>다음 토큰은 선언의 수식어 목록에서 키워드 역할을 하며, 다른 컨텍스트에서는 식별자로 사용될 수 있습니다:</p><ul><li><code>abstract</code>는 클래스 또는 멤버를 <a href="/ko/kotlin/classes#abstract-classes">추상</a>으로 표시합니다.</li><li><code>actual</code>은 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">멀티플랫폼 프로젝트</a>에서 플랫폼별 구현을 나타냅니다.</li><li><code>annotation</code>은 <a href="/ko/kotlin/annotations">어노테이션 클래스</a>를 선언합니다.</li><li><code>companion</code>은 <a href="/ko/kotlin/object-declarations#companion-objects">동반 객체</a>를 선언합니다.</li><li><code>const</code>는 프로퍼티를 <a href="/ko/kotlin/properties#compile-time-constants">컴파일 시간 상수</a>로 표시합니다.</li><li><code>crossinline</code>은 인라인 함수에 전달된 람다에서 <a href="/ko/kotlin/inline-functions#returns">비지역 반환을 금지합니다</a>.</li><li><code>data</code>는 컴파일러에게 <a href="/ko/kotlin/data-classes">클래스에 대한 표준 멤버를 생성하도록 지시합니다</a>.</li><li><code>enum</code>은 <a href="/ko/kotlin/enum-classes">열거형</a>을 선언합니다.</li><li><code>expect</code>는 선언을 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">플랫폼별</a>로 표시하여 플랫폼 모듈에서 구현을 기대합니다.</li><li><code>external</code>은 Kotlin 외부에서 구현된 선언(<a href="/ko/kotlin/java-interop#using-jni-with-kotlin">JNI</a> 또는 <a href="/ko/kotlin/js-interop#external-modifier">JavaScript</a>를 통해 접근 가능)으로 표시합니다.</li><li><code>final</code>은 <a href="/ko/kotlin/inheritance#overriding-methods">멤버 오버라이딩을 금지합니다</a>.</li><li><code>infix</code>는 <a href="/ko/kotlin/functions#infix-notation">중위 표기법</a>을 사용하여 함수를 호출할 수 있도록 합니다.</li><li><code>inline</code>은 컴파일러에게 <a href="/ko/kotlin/inline-functions">함수와 해당 함수에 전달된 람다를 호출 지점에서 인라인하도록 지시합니다</a>.</li><li><code>inner</code>는 <a href="/ko/kotlin/nested-classes">중첩 클래스</a>에서 외부 클래스 인스턴스를 참조할 수 있도록 합니다.</li><li><code>internal</code>은 선언을 <a href="/ko/kotlin/visibility-modifiers">현재 모듈에서 볼 수 있도록</a> 표시합니다.</li><li><code>lateinit</code>은 생성자 외부에서 <a href="/ko/kotlin/properties#late-initialized-properties-and-variables">null을 허용하지 않는 프로퍼티를 초기화</a>할 수 있도록 합니다.</li><li><code>noinline</code>은 인라인 함수에 전달된 람다의 <a href="/ko/kotlin/inline-functions#noinline">인라인을 비활성화합니다</a>.</li><li><code>open</code>은 <a href="/ko/kotlin/classes#inheritance">클래스를 서브클래싱하거나 멤버를 오버라이딩</a>할 수 있도록 합니다.</li><li><code>operator</code>는 함수를 <a href="/ko/kotlin/operator-overloading">연산자를 오버로딩하거나 컨벤션을 구현하는</a> 것으로 표시합니다.</li><li><code>out</code>은 타입 매개변수를 <a href="/ko/kotlin/generics#declaration-site-variance">공변</a>으로 표시합니다.</li><li><code>override</code>는 멤버를 <a href="/ko/kotlin/inheritance#overriding-methods">슈퍼클래스 멤버의 오버라이드</a>로 표시합니다.</li><li><code>private</code>는 선언을 <a href="/ko/kotlin/visibility-modifiers">현재 클래스 또는 파일에서 볼 수 있도록</a> 표시합니다.</li><li><code>protected</code>는 선언을 <a href="/ko/kotlin/visibility-modifiers">현재 클래스 및 해당 서브클래스에서 볼 수 있도록</a> 표시합니다.</li><li><code>public</code>은 선언을 <a href="/ko/kotlin/visibility-modifiers">어디에서든 볼 수 있도록</a> 표시합니다.</li><li><code>reified</code>는 인라인 함수의 타입 매개변수를 <a href="/ko/kotlin/inline-functions#reified-type-parameters">런타임에 접근 가능하도록</a> 표시합니다.</li><li><code>sealed</code>는 <a href="/ko/kotlin/sealed-classes">봉인된 클래스</a>(서브클래싱이 제한된 클래스)를 선언합니다.</li><li><code>suspend</code>는 함수 또는 람다를 일시 중단 가능(<a href="/ko/kotlin/coroutines-overview">코루틴</a>으로 사용 가능)으로 표시합니다.</li><li><code>tailrec</code>은 함수를 <a href="/ko/kotlin/functions#tail-recursive-functions">꼬리 재귀</a>로 표시합니다(컴파일러가 재귀를 반복으로 대체할 수 있도록 허용합니다).</li><li><code>vararg</code>는 <a href="/ko/kotlin/functions#variable-number-of-arguments-varargs">매개변수에 가변 개수의 인자를 전달</a>할 수 있도록 합니다.</li></ul><h2 id="특수-식별자" tabindex="-1">특수 식별자 <a class="header-anchor" href="#특수-식별자" aria-label="Permalink to &quot;특수 식별자&quot;">​</a></h2><p>다음 식별자는 특정 컨텍스트에서 컴파일러에 의해 정의되며, 다른 컨텍스트에서는 일반 식별자로 사용될 수 있습니다:</p><ul><li><code>field</code>는 프로퍼티 접근자 내부에서 <a href="/ko/kotlin/properties#backing-fields">프로퍼티의 배킹 필드</a>를 참조하는 데 사용됩니다.</li><li><code>it</code>는 람다 내부에서 <a href="/ko/kotlin/lambdas#it-implicit-name-of-a-single-parameter">매개변수를 암묵적으로 참조</a>하는 데 사용됩니다.</li></ul><h2 id="연산자-및-특수-기호" tabindex="-1">연산자 및 특수 기호 <a class="header-anchor" href="#연산자-및-특수-기호" aria-label="Permalink to &quot;연산자 및 특수 기호&quot;">​</a></h2><p>Kotlin은 다음 연산자 및 특수 기호를 지원합니다:</p><ul><li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> - 수학 연산자 <ul><li><code>*</code>는 <a href="/ko/kotlin/functions#variable-number-of-arguments-varargs">배열을 vararg 매개변수로 전달</a>하는 데도 사용됩니다.</li></ul></li><li><code>=</code><ul><li>할당 연산자.</li><li><a href="/ko/kotlin/functions#parameters-with-default-values">매개변수에 대한 기본값</a>을 지정하는 데 사용됩니다.</li></ul></li><li><code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code> - <a href="/ko/kotlin/operator-overloading#augmented-assignments">증가 할당 연산자</a>.</li><li><code>++</code>, <code>--</code> - <a href="/ko/kotlin/operator-overloading#increments-and-decrements">증가 및 감소 연산자</a>.</li><li><code>&amp;&amp;</code>, <code>||</code>, <code>!</code> - 논리 &#39;and&#39;, &#39;or&#39;, &#39;not&#39; 연산자 (비트 연산의 경우, 대신 해당 <a href="/ko/kotlin/numbers#operations-on-numbers">중위 함수</a>를 사용하십시오).</li><li><code>==</code>, <code>!=</code> - <a href="/ko/kotlin/operator-overloading#equality-and-inequality-operators">동등 연산자</a> (비-원시 타입의 경우 <code>equals()</code> 호출로 변환됩니다).</li><li><code>===</code>, <code>!==</code> - <a href="/ko/kotlin/equality#referential-equality">참조 동등 연산자</a>.</li><li><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> - <a href="/ko/kotlin/operator-overloading#comparison-operators">비교 연산자</a> (비-원시 타입의 경우 <code>compareTo()</code> 호출로 변환됩니다).</li><li><code>[</code>, <code>]</code> - <a href="/ko/kotlin/operator-overloading#indexed-access-operator">인덱스 접근 연산자</a> (<code>get</code> 및 <code>set</code> 호출로 변환됩니다).</li><li><code>!!</code>는 <a href="/ko/kotlin/null-safety#not-null-assertion-operator">표현식이 null을 허용하지 않음을 단언합니다</a>.</li><li><code>?.</code>는 <a href="/ko/kotlin/null-safety#safe-call-operator">안전 호출</a>을 수행합니다 (리시버가 null을 허용하지 않는 경우 메서드를 호출하거나 프로퍼티에 접근합니다).</li><li><code>?:</code>는 좌측 값이 null인 경우 우측 값을 취합니다(<a href="/ko/kotlin/null-safety#elvis-operator">엘비스 연산자</a>).</li><li><code>::</code>는 <a href="/ko/kotlin/reflection#function-references">멤버 참조</a> 또는 <a href="/ko/kotlin/reflection#class-references">클래스 참조</a>를 생성합니다.</li><li><code>..</code>, <code>..&lt;</code>는 <a href="/ko/kotlin/ranges">범위</a>를 생성합니다.</li><li><code>:</code>는 선언에서 이름과 타입을 구분합니다.</li><li><code>?</code>는 타입을 <a href="/ko/kotlin/null-safety#nullable-types-and-non-nullable-types">null 허용</a>으로 표시합니다.</li><li><code>-&gt;</code><ul><li><a href="/ko/kotlin/lambdas#lambda-expression-syntax">람다 표현식</a>의 매개변수와 본문을 구분합니다.</li><li><a href="/ko/kotlin/lambdas#function-types">함수 타입</a>에서 매개변수와 반환 타입 선언을 구분합니다.</li><li><a href="/ko/kotlin/control-flow#when-expressions-and-statements">when 표현식</a> 브랜치의 조건과 본문을 구분합니다.</li></ul></li><li><code>@</code><ul><li><a href="/ko/kotlin/annotations#usage">어노테이션</a>을 도입합니다.</li><li><a href="/ko/kotlin/returns#break-and-continue-labels">루프 레이블</a>을 도입하거나 참조합니다.</li><li><a href="/ko/kotlin/returns#return-to-labels">람다 레이블</a>을 도입하거나 참조합니다.</li><li><a href="/ko/kotlin/this-expressions#qualified-this">외부 스코프의 &#39;this&#39; 표현식</a>을 참조합니다.</li><li><a href="/ko/kotlin/inheritance#calling-the-superclass-implementation">외부 슈퍼클래스</a>를 참조합니다.</li></ul></li><li><code>;</code>는 같은 줄의 여러 구문을 구분합니다.</li><li><code>$</code>는 <a href="/ko/kotlin/strings#string-templates">문자열 템플릿</a>에서 변수 또는 표현식을 참조합니다.</li><li><code>_</code><ul><li><a href="/ko/kotlin/lambdas#underscore-for-unused-variables">람다 표현식</a>에서 사용되지 않는 매개변수를 대체합니다.</li><li><a href="/ko/kotlin/destructuring-declarations#underscore-for-unused-variables">구조 분해 선언</a>에서 사용되지 않는 매개변수를 대체합니다.</li></ul></li></ul><p>연산자 우선순위에 대한 자세한 내용은 Kotlin 문법의 <a href="https://kotlinlang.org/docs/reference/grammar.html#expressions" target="_blank" rel="noreferrer">이 참조</a>를 참조하십시오.</p>',17)]))}const u=o(t,[["render",n]]);export{h as __pageData,u as default};
