import{_ as o,c,o as a,ag as d}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"升級至 Coil 3.x","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/coil/upgrading_to_coil3.md","filePath":"zh-Hant/coil/upgrading_to_coil3.md","lastUpdated":1753369988000}'),i={name:"zh-Hant/coil/upgrading_to_coil3.md"};function r(t,e,l,n,s,m){return a(),c("div",null,e[0]||(e[0]=[d('<h1 id="升級至-coil-3-x" tabindex="-1">升級至 Coil 3.x <a class="header-anchor" href="#升級至-coil-3-x" aria-label="Permalink to &quot;升級至 Coil 3.x&quot;">​</a></h1><p>Coil 3 是 Coil 的下一個主要版本，它帶來了多項重大改進：</p><ul><li>完整支援 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>，包括所有主要目標平台（Android、iOS、JVM、JS 和 <a href="/zh-Hant/coil/sample/">WASM</a>）。</li><li>支援多種網路函式庫 (Ktor 和 OkHttp)。或者，如果僅需載入本地/靜態檔案，Coil 也可以在無需網路依賴的情況下使用。</li><li>改進了 Compose <code>@Preview</code> 渲染，並透過 <code>LocalAsyncImagePreviewHandler</code> 支援自訂預覽行為。</li><li>重要的錯誤修復，這些修復需要破壞現有行為（如下所述）。</li></ul><p>本文件提供了 Coil 2 到 Coil 3 主要變更的高層次概述，並著重介紹了任何破壞性或重要變更。它不涵蓋所有二進位不相容的變更或小的行為變更。</p><p>在 Compose Multiplatform 專案中使用 Coil 3 嗎？請查看 <a href="https://github.com/coil-kt/coil/tree/3.x/samples/compose" target="_blank" rel="noreferrer"><code>samples</code></a> 儲存庫以獲取範例。</p><h2 id="maven-座標和套件名稱" tabindex="-1">Maven 座標和套件名稱 <a class="header-anchor" href="#maven-座標和套件名稱" aria-label="Permalink to &quot;Maven 座標和套件名稱&quot;">​</a></h2><p>Coil 的 Maven 座標已從 <code>io.coil-kt</code> 更新為 <code>io.coil-kt.coil3</code>，其套件名稱已從 <code>coil</code> 更新為 <code>coil3</code>。這使得 Coil 3 能夠與 Coil 2 並存運行，而不會產生二進位相容性問題。例如，<code>io.coil-kt:coil:2.7.0</code> 現在是 <code>io.coil-kt.coil3:coil:3.0.0</code>。</p><p><code>coil-base</code> 和 <code>coil-compose-base</code> 構件 (artifact) 已分別重新命名為 <code>coil-core</code> 和 <code>coil-compose-core</code>，以與 Coroutines、Ktor 和 AndroidX 所使用的命名慣例保持一致。</p><h2 id="網路圖片" tabindex="-1">網路圖片 <a class="header-anchor" href="#網路圖片" aria-label="Permalink to &quot;網路圖片&quot;">​</a></h2><p><strong><code>coil-core</code> 預設不再支援從網路載入圖片。</strong> <a href="./network">您必須新增對 Coil 網路構件 (artifact) 之一的依賴。請參閱此處以獲取更多資訊。</a>。此項變更旨在讓消費者可以使用不同的網路函式庫，或者，如果他們的應用程式不需要網路依賴，則可以避免它。</p><p>此外，快取控制標頭 (cache control header) 預設不再被遵守。請參閱 <a href="./network">此處</a> 以獲取更多資訊。</p><h2 id="多平台" tabindex="-1">多平台 <a class="header-anchor" href="#多平台" aria-label="Permalink to &quot;多平台&quot;">​</a></h2><p>Coil 3 現在是一個支援 Android、JVM、iOS、macOS、Javascript 和 WASM 的 Kotlin 多平台函式庫。</p><p>在 Android 上，Coil 使用標準圖形類別 (graphics class) 來渲染圖片。在非 Android 平台上，Coil 使用 <a href="https://github.com/JetBrains/skiko" target="_blank" rel="noreferrer">Skiko</a> 來渲染圖片。Skiko 是一組 Kotlin 綁定 (binding)，它包裝了由 Google 開發的 <a href="https://github.com/google/skia" target="_blank" rel="noreferrer">Skia</a> 圖形引擎。</p><p>作為與 Android SDK 解耦 (decoupling) 的一部分，進行了多項 API 變更。值得注意的是：</p><ul><li><code>Drawable</code> 已被自訂的 <code>Image</code> 介面取代。在 Android 上，使用 <code>Drawable.asImage()</code> 和 <code>Image.asDrawable(resources)</code> 進行類別之間的轉換。在非 Android 平台上，使用 <code>Bitmap.asImage()</code> 和 <code>Image.toBitmap()</code>。</li><li>Android 的 <code>android.net.Uri</code> 類別的使用已被多平台 <code>coil3.Uri</code> 類別取代。任何將 <code>android.net.Uri</code> 作為 <code>ImageRequest.data</code> 傳遞的呼叫點 (call site) 不受影響。依賴於接收 <code>android.net.Uri</code> 的自訂 <code>Fetcher</code>s 將需要更新以使用 <code>coil3.Uri</code>。</li><li><code>Context</code> 的使用已被 <code>PlatformContext</code> 取代。<code>PlatformContext</code> 是 Android 上 <code>Context</code> 的類型別名 (type alias)，在非 Android 平台上可以使用 <code>PlatformContext.INSTANCE</code> 來存取。在 Compose Multiplatform 中，使用 <code>LocalPlatformContext.current</code> 以獲取引用。</li><li><code>Coil</code> 類別已重新命名為 <code>SingletonImageLoader</code>。</li><li>如果您在自訂的 Android <code>Application</code> 類別中實現 (implementing) <code>ImageLoaderFactory</code>，您將需要改為實現 <code>SingletonImageLoader.Factory</code> 作為 <code>ImageLoaderFactory</code> 的替代方案。一旦您實現了 <code>SingletonImageLoader.Factory</code>，如果您需要或希望覆寫 (override) <code>newImageLoader()</code>，您就可以這樣做。</li></ul><p><code>coil-svg</code> 構件 (artifact) 支援多平台，但 <code>coil-gif</code> 和 <code>coil-video</code> 構件（目前）仍僅限於 Android，因為它們依賴於特定的 Android 解碼器和函式庫。</p><h2 id="compose" tabindex="-1">Compose <a class="header-anchor" href="#compose" aria-label="Permalink to &quot;Compose&quot;">​</a></h2><p><code>coil-compose</code> 構件 (artifact) 的 API 大多數未變。您可以繼續以與 Coil 2 相同的方式使用 <code>AsyncImage</code>、<code>SubcomposeAsyncImage</code> 和 <code>rememberAsyncImagePainter</code>。此外，這些方法已更新為 <a href="https://developer.android.com/jetpack/compose/performance/stability" target="_blank" rel="noreferrer">可重啟和可跳過 (restartable and skippable)</a>，這應該會提升其效能。</p><ul><li><code>AsyncImagePainter.state</code> 現在是一個 <code>StateFlow</code>。它應該使用 <code>val state = painter.state.collectAsState()</code> 來觀察。</li><li><code>AsyncImagePainter</code> 的預設 <code>SizeResolver</code> 不再等待第一次 <code>onDraw</code> 呼叫以獲取畫布 (canvas) 的大小。相反地，<code>AsyncImagePainter</code> 預設為 <code>Size.ORIGINAL</code>。</li><li>Compose 的 <code>modelEqualityDelegate</code> 委託 (delegate) 現在是透過一個組合局部 (composition local) <code>LocalAsyncImageModelEqualityDelegate</code> 來設定的，而不是作為 <code>AsyncImage</code>/<code>SubcomposeAsyncImage</code>/<code>rememberAsyncImagePainter</code> 的參數。</li></ul><h2 id="一般" tabindex="-1">一般 <a class="header-anchor" href="#一般" aria-label="Permalink to &quot;一般&quot;">​</a></h2><p>其他重要的行為變更包括：</p><ul><li>第一方 (first party) 的 <code>Fetcher</code> 和 <code>Decoder</code>（例如 <code>NetworkFetcher.Factory</code>、<code>SvgDecoder</code> 等）現在會透過服務載入器 (service loader) 自動新增到每個新的 <code>ImageLoader</code> 中。此行為可以使用 <code>ImageLoader.Builder.serviceLoaderEnabled(false)</code> 來禁用。</li><li>移除對 <code>android.resource://example.package.name/drawable/image</code> URI 的支援，因為它會阻礙資源縮減優化 (resource shrinking optimization)。建議直接傳遞 <code>R.drawable.image</code> 值。傳遞資源 ID 而不是資源名稱仍然有效：<code>android.resource://example.package.name/12345678</code>。如果您仍需要其功能，可以 <a href="https://github.com/coil-kt/coil/blob/da7d872e340430014dbc5136e35eb62f9b17662e/coil-core/src/androidInstrumentedTest/kotlin/coil3/map/ResourceUriMapper.kt" target="_blank" rel="noreferrer">手動將 <code>ResourceUriMapper</code> 包含到您的元件註冊表 (component registry) 中</a>。</li><li>檔案的最後寫入時間戳 (last write timestamp) 預設不再新增到其快取鍵 (cache key) 中。這是為了避免在主執行緒 (main thread) 上讀取磁碟（即使時間很短）。這可以使用 <code>ImageRequest.Builder.addLastModifiedToFileCacheKey(true)</code> 或 <code>ImageLoader.Builder.addLastModifiedToFileCacheKey(true)</code> 重新啟用。</li><li>輸出圖片尺寸現在被強制為小於 4096x4096，以防止意外的記憶體不足 (OOM)。這可以使用 <code>ImageLoader/ImageRequest.Builder.maxBitmapSize</code> 來配置。要禁用此行為，請將 <code>maxBitmapSize</code> 設定為 <code>Size.ORIGINAL</code>。</li><li>Coil 2 的 <code>Parameters</code> API 已被 <code>Extras</code> 取代。<code>Extras</code> 不需要字串鍵 (string key)，而是依賴於身份相等性 (identity equality)。<code>Extras</code> 不支援修改記憶體快取鍵 (memory cache key)。相反地，如果您的額外資訊 (extra) 影響記憶體快取鍵，請使用 <code>ImageRequest.memoryCacheKeyExtra</code>。</li><li>許多 <code>ImageRequest.Builder</code> 函式已移至延伸函式 (extension function)，以便更容易支援多平台。</li></ul>',23)]))}const h=o(i,[["render",r]]);export{g as __pageData,h as default};
