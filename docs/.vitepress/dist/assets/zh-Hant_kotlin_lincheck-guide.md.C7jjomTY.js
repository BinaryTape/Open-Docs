import{_ as k,C as n,c as o,o as c,ag as h,G as s,w as t,j as i,a as e}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"Lincheck 指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/lincheck-guide.md","filePath":"zh-Hant/kotlin/lincheck-guide.md","lastUpdated":1754307826000}'),p={name:"zh-Hant/kotlin/lincheck-guide.md"};function d(E,a,g,u,_,y){const l=n("tab"),r=n("tabs");return c(),o("div",null,[a[2]||(a[2]=h('<h1 id="lincheck-指南" tabindex="-1">Lincheck 指南 <a class="header-anchor" href="#lincheck-指南" aria-label="Permalink to &quot;Lincheck 指南&quot;">​</a></h1><p>Lincheck 是一個實用且使用者友好的框架，用於在 JVM 上測試並行演算法。它提供了一種簡單且宣告式的方式來編寫並行測試。</p><p>有了 Lincheck 框架，您無需描述如何執行測試，而是可以透過宣告所有要檢查的操作和所需的正確性屬性來指定 <em>測試內容</em>。因此，一個典型的 Lincheck 並行測試通常只包含大約 15 行程式碼。</p><p>當給定一系列操作時，Lincheck 會自動：</p><ul><li>產生一組隨機的並行場景。</li><li>使用壓力測試或有界模型檢查來檢查它們。</li><li>驗證每個調用的結果是否滿足所需的正確性屬性（線性一致性是預設屬性）。</li></ul><h2 id="將-lincheck-添加到您的專案" tabindex="-1">將 Lincheck 添加到您的專案 <a class="header-anchor" href="#將-lincheck-添加到您的專案" aria-label="Permalink to &quot;將 Lincheck 添加到您的專案&quot;">​</a></h2><p>要啟用 Lincheck 支援，請將對應的儲存庫和依賴項包含到 Gradle 配置中。在您的 <code>build.gradle(.kts)</code> 檔案中，添加以下內容：</p>',7)),s(r,{group:"build-script"},{default:t(()=>[s(l,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"repositories"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    mavenCentral"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    testImplementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.lincheck:lincheck:3.0"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(l,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"repositories {")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mavenCentral()")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),e(`
`),i("span",{class:"line"}),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    testImplementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.lincheck:lincheck:3.0"')]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[3]||(a[3]=h('<h2 id="探索-lincheck" tabindex="-1">探索 Lincheck <a class="header-anchor" href="#探索-lincheck" aria-label="Permalink to &quot;探索 Lincheck&quot;">​</a></h2><p>本指南將幫助您熟悉該框架並透過範例嘗試最有用的功能。逐步學習 Lincheck 功能：</p><ol><li><a href="/zh-Hant/kotlin/introduction">使用 Lincheck 編寫您的第一個測試</a></li><li><a href="/zh-Hant/kotlin/testing-strategies">選擇您的測試策略</a></li><li><a href="/zh-Hant/kotlin/operation-arguments">配置操作參數</a></li><li><a href="/zh-Hant/kotlin/constraints">考量常見的演算法約束</a></li><li><a href="/zh-Hant/kotlin/progress-guarantees">檢查演算法的非阻塞進度保證</a></li><li><a href="/zh-Hant/kotlin/sequential-specification">定義演算法的循序規範</a></li></ol><h2 id="額外參考" tabindex="-1">額外參考 <a class="header-anchor" href="#額外參考" aria-label="Permalink to &quot;額外參考&quot;">​</a></h2><ul><li>Nikita Koval 的「我們如何在 Kotlin Coroutines 中測試並行演算法」：<a href="https://youtu.be/jZqkWfa11Js" target="_blank" rel="noreferrer">影片</a>。KotlinConf 2023</li><li>Maria Sokolova 的「Lincheck: 在 JVM 上測試並行性」工作坊：<a href="https://www.youtube.com/watch?v=YNtUK9GK4pA" target="_blank" rel="noreferrer">第 1 部分</a>，<a href="https://www.youtube.com/watch?v=EW7mkAOErWw" target="_blank" rel="noreferrer">第 2 部分</a>。Hydra 2021</li></ul>',5))])}const f=k(p,[["render",d]]);export{b as __pageData,f as default};
