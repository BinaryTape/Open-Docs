import{_ as i,c as s,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"パッケージとインポート","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/packages.md","filePath":"ja/kotlin/packages.md","lastUpdated":1754307826000}'),l={name:"ja/kotlin/packages.md"};function n(p,a,r,o,h,k){return e(),s("div",null,a[0]||(a[0]=[t(`<h1 id="パッケージとインポート" tabindex="-1">パッケージとインポート <a class="header-anchor" href="#パッケージとインポート" aria-label="Permalink to &quot;パッケージとインポート&quot;">​</a></h1><p>ソースファイルはパッケージ宣言で始まることがあります：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*...*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*...*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span></code></pre></div><p>ソースファイルのクラスや関数など、すべての内容は、このパッケージに含まれます。 そのため、上記の例では、<code>printMessage()</code> の完全な名前は <code>org.example.printMessage</code> であり、<code>Message</code> の完全な名前は <code>org.example.Message</code> です。</p><p>パッケージが指定されていない場合、そのようなファイルの内容は、名前のない_デフォルト_パッケージに属します。</p><h2 id="デフォルトのインポート" tabindex="-1">デフォルトのインポート <a class="header-anchor" href="#デフォルトのインポート" aria-label="Permalink to &quot;デフォルトのインポート&quot;">​</a></h2><p>多数のパッケージが、すべてのKotlinファイルにデフォルトでインポートされます：</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/index.html" target="_blank" rel="noreferrer">kotlin.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/index.html" target="_blank" rel="noreferrer">kotlin.annotation.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index.html" target="_blank" rel="noreferrer">kotlin.collections.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.comparisons/index.html" target="_blank" rel="noreferrer">kotlin.comparisons.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/index.html" target="_blank" rel="noreferrer">kotlin.io.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/index.html" target="_blank" rel="noreferrer">kotlin.ranges.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/index.html" target="_blank" rel="noreferrer">kotlin.sequences.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/index.html" target="_blank" rel="noreferrer">kotlin.text.*</a></li></ul><p>ターゲットプラットフォームに応じて、追加のパッケージがインポートされます：</p><ul><li><p>JVM:</p><ul><li>java.lang.*</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/index.html" target="_blank" rel="noreferrer">kotlin.jvm.*</a></li></ul></li><li><p>JS:</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/index.html" target="_blank" rel="noreferrer">kotlin.js.*</a></li></ul></li></ul><h2 id="インポート" tabindex="-1">インポート <a class="header-anchor" href="#インポート" aria-label="Permalink to &quot;インポート&quot;">​</a></h2><p>デフォルトのインポートとは別に、各ファイルは独自の <code>import</code> ディレクティブを含むことができます。</p><p>単一の名前をインポートできます：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example.Message </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Message は修飾なしでアクセス可能になりました</span></span></code></pre></div><p>または、パッケージ、クラス、オブジェクトなど、スコープ内のアクセス可能なすべての内容をインポートできます：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // &#39;org.example&#39; 内のすべてにアクセス可能になります</span></span></code></pre></div><p>名前が衝突する場合、<code>as</code> キーワードを使用して衝突しているエンティティをローカルでリネームすることで、曖昧さを解消できます：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example.Message </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Message にアクセス可能</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.test.Message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestMessage </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TestMessage は &#39;org.test.Message&#39; を表します</span></span></code></pre></div><p><code>import</code> キーワードはクラスのインポートに限定されません。他の宣言をインポートするためにも使用できます：</p><ul><li>トップレベルの関数とプロパティ</li><li><a href="/ja/kotlin/object-declarations#object-declarations-overview">オブジェクト宣言</a>で宣言された関数とプロパティ</li><li><a href="/ja/kotlin/enum-classes">enum 定数</a></li></ul><h2 id="トップレベル宣言の可視性" tabindex="-1">トップレベル宣言の可視性 <a class="header-anchor" href="#トップレベル宣言の可視性" aria-label="Permalink to &quot;トップレベル宣言の可視性&quot;">​</a></h2><p>トップレベル宣言が <code>private</code> とマークされている場合、それは宣言されたファイルに対してプライベートになります（<a href="/ja/kotlin/visibility-modifiers">可視性修飾子</a>を参照）。</p>`,22)]))}const c=i(l,[["render",n]]);export{g as __pageData,c as default};
