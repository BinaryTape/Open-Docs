import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"모델 컨텍스트 프로토콜","description":"","frontmatter":{},"headers":[],"relativePath":"ko/koog/model-context-protocol.md","filePath":"ko/koog/model-context-protocol.md","lastUpdated":1755146406000}'),l={name:"ko/koog/model-context-protocol.md"};function h(p,s,e,k,r,o){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="모델-컨텍스트-프로토콜" tabindex="-1">모델 컨텍스트 프로토콜 <a class="header-anchor" href="#모델-컨텍스트-프로토콜" aria-label="Permalink to &quot;모델 컨텍스트 프로토콜&quot;">​</a></h1><p>모델 컨텍스트 프로토콜 (MCP)은 AI 에이전트가 일관된 인터페이스를 통해 외부 도구 및 서비스와 상호 작용할 수 있도록 하는 표준화된 프로토콜입니다.</p><p>MCP는 도구와 프롬프트를 AI 에이전트가 호출할 수 있는 API 엔드포인트로 노출합니다. 각 도구에는 특정 이름과 JSON 스키마 형식으로 입력 및 출력을 설명하는 입력 스키마가 있습니다.</p><p>Koog 프레임워크는 MCP 서버와의 통합을 제공하여, MCP 도구를 Koog 에이전트에 통합할 수 있도록 합니다.</p><p>프로토콜에 대해 더 자세히 알아보려면 <a href="https://modelcontextprotocol.io" target="_blank" rel="noreferrer">모델 컨텍스트 프로토콜</a> 문서를 참조하세요.</p><h2 id="mcp-서버" tabindex="-1">MCP 서버 <a class="header-anchor" href="#mcp-서버" aria-label="Permalink to &quot;MCP 서버&quot;">​</a></h2><p>MCP 서버는 모델 컨텍스트 프로토콜을 구현하고 AI 에이전트가 도구 및 서비스와 상호 작용할 수 있는 표준화된 방법을 제공합니다.</p><p>바로 사용할 수 있는 MCP 서버는 <a href="https://mcp.so/" target="_blank" rel="noreferrer">MCP 마켓플레이스</a> 또는 <a href="https://hub.docker.com/u/mcp" target="_blank" rel="noreferrer">MCP DockerHub</a>에서 찾을 수 있습니다.</p><p>MCP 서버는 에이전트와 통신하기 위해 다음 전송 프로토콜을 지원합니다:</p><ul><li>별도의 프로세스로 실행되는 MCP 서버(예: Docker 컨테이너 또는 CLI 도구)와 통신하는 데 사용되는 표준 입/출력(stdio) 전송 프로토콜.</li><li>HTTP를 통해 MCP 서버와 통신하는 데 사용되는 서버 전송 이벤트(SSE) 전송 프로토콜 (선택 사항).</li></ul><h2 id="koog와-통합" tabindex="-1">Koog와 통합 <a class="header-anchor" href="#koog와-통합" aria-label="Permalink to &quot;Koog와 통합&quot;">​</a></h2><p>Koog 프레임워크는 <code>agent-mcp</code> 모듈에 제시된 추가 API 확장을 포함하는 <a href="https://github.com/modelcontextprotocol/kotlin-sdk" target="_blank" rel="noreferrer">MCP SDK</a>를 사용하여 MCP와 통합됩니다.</p><p>이 통합을 통해 Koog 에이전트는 다음을 수행할 수 있습니다:</p><ul><li>다양한 전송 메커니즘(stdio, SSE)을 통해 MCP 서버에 연결합니다.</li><li>MCP 서버에서 사용 가능한 도구를 검색합니다.</li><li>MCP 도구를 Koog 도구 인터페이스로 변환합니다.</li><li>변환된 도구를 도구 레지스트리에 등록합니다.</li><li>LLM이 제공한 인수로 MCP 도구를 호출합니다.</li></ul><h3 id="주요-구성-요소" tabindex="-1">주요 구성 요소 <a class="header-anchor" href="#주요-구성-요소" aria-label="Permalink to &quot;주요 구성 요소&quot;">​</a></h3><p>Koog에서 MCP 통합의 주요 구성 요소는 다음과 같습니다:</p><table tabindex="0"><thead><tr><th>구성 요소</th><th>설명</th></tr></thead><tbody><tr><td><a href="https://api.koog.ai/agents/agents-mcp/ai.koog.agents.mcp/-mcp-tool/index.html" target="_blank" rel="noreferrer"><code>McpTool</code></a></td><td>Koog 도구 인터페이스와 MCP SDK 사이의 다리 역할을 합니다.</td></tr><tr><td><a href="https://api.koog.ai/agents/agents-mcp/ai.koog.agents.mcp/-mcp-tool-descriptor-parser/index.html" target="_blank" rel="noreferrer"><code>McpToolDescriptorParser</code></a></td><td>MCP 도구 정의를 Koog 도구 디스크립터 형식으로 파싱합니다.</td></tr><tr><td><a href="https://api.koog.ai/agents/agents-mcp/ai.koog.agents.mcp/-mcp-tool-registry-provider/index.html?query=object%20McpToolRegistryProvider" target="_blank" rel="noreferrer"><code>McpToolRegistryProvider</code></a></td><td>다양한 전송 메커니즘(stdio, SSE)을 통해 MCP 서버에 연결하는 MCP 도구 레지스트리를 생성합니다.</td></tr></tbody></table><h2 id="시작하기" tabindex="-1">시작하기 <a class="header-anchor" href="#시작하기" aria-label="Permalink to &quot;시작하기&quot;">​</a></h2><h3 id="_1-mcp-연결-설정" tabindex="-1">1. MCP 연결 설정 <a class="header-anchor" href="#_1-mcp-연결-설정" aria-label="Permalink to &quot;1. MCP 연결 설정&quot;">​</a></h3><p>Koog에서 MCP를 사용하려면 연결을 설정해야 합니다:</p><ol><li>MCP 서버를 시작합니다(프로세스, Docker 컨테이너 또는 웹 서비스 중 하나로).</li><li>서버와 통신할 전송 메커니즘을 생성합니다.</li></ol><p>MCP 서버는 에이전트와 통신하기 위해 stdio 및 SSE 전송 메커니즘을 지원하므로, 이 중 하나를 사용하여 연결할 수 있습니다.</p><h4 id="stdio로-연결" tabindex="-1">stdio로 연결 <a class="header-anchor" href="#stdio로-연결" aria-label="Permalink to &quot;stdio로 연결&quot;">​</a></h4><p>이 프로토콜은 MCP 서버가 별도의 프로세스로 실행될 때 사용됩니다. 다음은 stdio 전송을 사용하여 MCP 연결을 설정하는 예시입니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MCP 서버 시작 (예: 프로세스로)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProcessBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/mcp/server&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// stdio 전송 생성 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultStdioTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process)</span></span></code></pre></div><h4 id="sse로-연결" tabindex="-1">SSE로 연결 <a class="header-anchor" href="#sse로-연결" aria-label="Permalink to &quot;SSE로 연결&quot;">​</a></h4><p>이 프로토콜은 MCP 서버가 웹 서비스로 실행될 때 사용됩니다. 다음은 SSE 전송을 사용하여 MCP 연결을 설정하는 예시입니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// SSE 전송 생성</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultSseTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8931&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_2-도구-레지스트리-생성" tabindex="-1">2. 도구 레지스트리 생성 <a class="header-anchor" href="#_2-도구-레지스트리-생성" aria-label="Permalink to &quot;2. 도구 레지스트리 생성&quot;">​</a></h3><p>MCP 연결이 완료되면, 다음 방법 중 하나로 MCP 서버의 도구를 포함하는 도구 레지스트리를 생성할 수 있습니다:</p><ul><li>통신을 위해 제공된 전송 메커니즘을 사용합니다. 예:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MCP 서버의 도구로 도구 레지스트리 생성</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    transport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transport,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my-client&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li>MCP 서버에 연결된 MCP 클라이언트를 사용합니다. 예:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 기존 MCP 클라이언트에서 도구 레지스트리 생성</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mcpClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> existingMcpClient</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_3-에이전트와-통합" tabindex="-1">3. 에이전트와 통합 <a class="header-anchor" href="#_3-에이전트와-통합" aria-label="Permalink to &quot;3. 에이전트와 통합&quot;">​</a></h3><p>Koog 에이전트와 함께 MCP 도구를 사용하려면, 도구 레지스트리를 에이전트에 등록해야 합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 도구를 포함한 에이전트 생성</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> executor,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strategy,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Chat.GPT4o,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MCP 도구를 사용하는 작업으로 에이전트 실행</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Use the MCP tool to perform a task&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="사용-예시" tabindex="-1">사용 예시 <a class="header-anchor" href="#사용-예시" aria-label="Permalink to &quot;사용 예시&quot;">​</a></h2><h3 id="google-maps-mcp-통합" tabindex="-1">Google Maps MCP 통합 <a class="header-anchor" href="#google-maps-mcp-통합" aria-label="Permalink to &quot;Google Maps MCP 통합&quot;">​</a></h3><p>이 예시는 MCP를 사용하여 지리 데이터용 <a href="https://mcp.so/server/google-maps/modelcontextprotocol" target="_blank" rel="noreferrer">Google Maps</a> 서버에 연결하는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Google Maps MCP 서버로 Docker 컨테이너 시작</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProcessBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;docker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;run&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-i&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;-e&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GOOGLE_MAPS_API_KEY=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$googleMapsApiKey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;mcp/google-maps&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MCP 서버의 도구로 ToolRegistry 생성</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    transport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultStdioTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 에이전트 생성 및 실행</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(openAIApiToken),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Chat.GPT4o,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Get elevation of the Jetbrains Office in Munich, Germany?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="playwright-mcp-통합" tabindex="-1">Playwright MCP 통합 <a class="header-anchor" href="#playwright-mcp-통합" aria-label="Permalink to &quot;Playwright MCP 통합&quot;">​</a></h3><p>이 예시는 MCP를 사용하여 웹 자동화용 <a href="https://mcp.so/server/playwright-mcp/microsoft" target="_blank" rel="noreferrer">Playwright</a> 서버에 연결하는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Playwright MCP 서버 시작</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ProcessBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;npx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@playwright/mcp@latest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8931&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MCP 서버의 도구로 ToolRegistry 생성</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    transport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> McpToolRegistryProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultSseTransport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8931&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 에이전트 생성 및 실행</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(openAIApiToken),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Chat.GPT4o,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Open a browser, navigate to jetbrains.com, accept all cookies, click AI in toolbar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,44)]))}const g=i(l,[["render",h]]);export{d as __pageData,g as default};
