import{_ as t,a as e}from"./chunks/wasm-custom-formatters-firefox.C2LVO8ja.js";import{_ as l,C as p,c as h,o,ag as i,G as n}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"Kotlin 2.1.20 有什麼新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew2120.md","filePath":"zh-Hant/kotlin/whatsnew2120.md","lastUpdated":1754307826000}'),k={name:"zh-Hant/kotlin/whatsnew2120.md"};function r(d,s,c,E,g,u){const a=p("TopicTitle");return o(),h("div",null,[s[0]||(s[0]=i('<h1 id="kotlin-2-1-20-有什麼新功能" tabindex="-1">Kotlin 2.1.20 有什麼新功能 <a class="header-anchor" href="#kotlin-2-1-20-有什麼新功能" aria-label="Permalink to &quot;Kotlin 2.1.20 有什麼新功能&quot;">​</a></h1><p><em><a href="/zh-Hant/kotlin/releases#release-details">發佈日期：2025 年 3 月 20 日</a></em></p><p>Kotlin 2.1.20 版本發佈啦！以下是主要亮點：</p><ul><li><strong>K2 編譯器更新</strong>：<a href="#kotlin-k2-compiler">新 kapt 和 Lombok 外掛的更新</a></li><li><strong>Kotlin Multiplatform</strong>：<a href="#kotlin-multiplatform-new-dsl-to-replace-gradle-s-application-plugin">用於取代 Gradle 的 Application 外掛的新 DSL</a></li><li><strong>Kotlin/Native</strong>：<a href="#kotlin-native">支援 Xcode 16.3 及新的內聯最佳化</a></li><li><strong>Kotlin/Wasm</strong>：<a href="#kotlin-wasm">預設自訂格式器、支援 DWARF 及遷移至 Provider API</a></li><li><strong>Gradle 支援</strong>：<a href="#gradle">與 Gradle 的 Isolated Projects 及自訂發佈變體相容</a></li><li><strong>標準函式庫</strong>：<a href="#standard-library">通用原子型別、改進的 UUID 支援及新的時間追蹤功能</a></li><li><strong>Compose 編譯器</strong>：<a href="#compose-compiler">放寬對 <code>@Composable</code> 函數的限制及其他更新</a></li><li><strong>文件</strong>：<a href="#documentation-updates">Kotlin 文件顯著改進</a>。</li></ul><h2 id="ide-支援" tabindex="-1">IDE 支援 <a class="header-anchor" href="#ide-支援" aria-label="Permalink to &quot;IDE 支援&quot;">​</a></h2><p>支援 2.1.20 的 Kotlin 外掛已與最新版 IntelliJ IDEA 和 Android Studio 綁定。 您不需要在 IDE 中更新 Kotlin 外掛。 您只需在建置指令稿中將 Kotlin 版本更改為 2.1.20。</p><p>有關詳細資訊，請參閱<a href="/zh-Hant/kotlin/releases#update-to-a-new-kotlin-version">更新到新版本</a>。</p><h3 id="在支援-osgi-的專案中下載-kotlin-artifact-的來源" tabindex="-1">在支援 OSGi 的專案中下載 Kotlin Artifact 的來源 <a class="header-anchor" href="#在支援-osgi-的專案中下載-kotlin-artifact-的來源" aria-label="Permalink to &quot;在支援 OSGi 的專案中下載 Kotlin Artifact 的來源&quot;">​</a></h3><p><code>kotlin-osgi-bundle</code> 函式庫的所有依賴項來源現已包含在其發佈中。這使得 IntelliJ IDEA 能夠下載這些來源，以提供 Kotlin 符號的文件並改善除錯體驗。</p><h2 id="kotlin-k2-編譯器" tabindex="-1">Kotlin K2 編譯器 <a class="header-anchor" href="#kotlin-k2-編譯器" aria-label="Permalink to &quot;Kotlin K2 編譯器&quot;">​</a></h2><p>我們正持續改進對新 Kotlin K2 編譯器的外掛支援。此版本帶來了對新 kapt 和 Lombok 外掛的更新。</p>',11)),n(a,{id:"新的預設-kapt-外掛",level:"3",title:"新的預設 kapt 外掛",labelRef:"beta"}),s[1]||(s[1]=i('<p>從 Kotlin 2.1.20 開始，kapt 編譯器外掛的 K2 實作預設對所有專案啟用。</p><p>JetBrains 團隊在 Kotlin 1.9.20 中推出了 kapt 外掛與 K2 編譯器的新實作。 自那時起，我們進一步開發了 K2 kapt 的內部實作，使其行為與 K1 版本相似， 同時也顯著提升了其效能。</p><p>如果您在使用 kapt 與 K2 編譯器時遇到任何問題， 您可以暫時恢復到先前的外掛實作。</p><p>為此，請將以下選項新增到您專案的 <code>gradle.properties</code> 檔案中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt.use.k2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div><p>請將任何問題回報到我們的<a href="https://youtrack.jetbrains.com/issue/KT-71439/K2-kapt-feedback" target="_blank" rel="noreferrer">問題追蹤器</a>。</p>',6)),n(a,{id:"lombok-編譯器外掛-支援-superbuilder-及-builder-的更新",level:"3",title:"Lombok 編譯器外掛：支援 @SuperBuilder 及 @Builder 的更新",labelRef:"experimental-general"}),s[2]||(s[2]=i('<p><a href="/zh-Hant/kotlin/lombok">Kotlin Lombok 編譯器外掛</a>現在支援 <code>@SuperBuilder</code> 註解，使得為類別層次結構建立建構器變得更容易。過去，在 Kotlin 中使用 Lombok 的開發人員在處理繼承時必須手動定義建構器。透過 <code>@SuperBuilder</code>，建構器會自動繼承超類別欄位，讓您在建構物件時初始化這些欄位。</p><p>此外，本次更新還包含多項改進和錯誤修正：</p><ul><li><code>@Builder</code> 註解現在可用於建構函數，允許更靈活的物件建立。有關詳細資訊，請參閱對應的 <a href="https://youtrack.jetbrains.com/issue/KT-71547" target="_blank" rel="noreferrer">YouTrack 問題</a>。</li><li>已解決多個與 Lombok 在 Kotlin 中產生程式碼相關的問題，提升了整體相容性。有關詳細資訊，請參閱 <a href="https://github.com/JetBrains/kotlin/releases/tag/v2.1.20" target="_blank" rel="noreferrer">GitHub 更新日誌</a>。</li></ul><p>有關 <code>@SuperBuilder</code> 註解的更多資訊，請參閱官方 <a href="https://projectlombok.org/features/experimental/SuperBuilder" target="_blank" rel="noreferrer">Lombok 文件</a>。</p>',4)),n(a,{id:"kotlin-multiplatform-取代-gradle-application-外掛的新-dsl",level:"2",title:"Kotlin Multiplatform：取代 Gradle Application 外掛的新 DSL",labelRef:"experimental-opt-in"}),s[3]||(s[3]=i(`<p>從 Gradle 8.7 開始，<a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a> 外掛不再與 Kotlin Multiplatform Gradle 外掛相容。Kotlin 2.1.20 引入了一個實驗性 DSL 來實現類似的功能。新的 <code>executable {}</code> 區塊為 JVM 目標設定執行任務和 Gradle <a href="https://docs.gradle.org/current/userguide/distribution_plugin.html#distribution_plugin" target="_blank" rel="noreferrer">發佈</a>。</p><p>在您的建置指令稿中的 <code>executable {}</code> 區塊之前，新增以下 <code>@OptIn</code> 註解：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Configures a JavaExec task named &quot;runJvm&quot; and a Gradle distribution for the &quot;main&quot; compilation in this target</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                mainClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.MainKt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Configures a JavaExec task named &quot;runJvmAnother&quot; and a Gradle distribution for the &quot;main&quot; compilation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KotlinCompilation.MAIN_COMPILATION_NAME, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;another&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Set a different class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                mainClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.MainAnotherKt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Configures a JavaExec task named &quot;runJvmTest&quot; and a Gradle distribution for the &quot;test&quot; compilation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KotlinCompilation.TEST_COMPILATION_NAME) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                mainClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.MainTestKt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Configures a JavaExec task named &quot;runJvmTestAnother&quot; and a Gradle distribution for the &quot;test&quot; compilation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KotlinCompilation.TEST_COMPILATION_NAME, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;another&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                mainClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.MainAnotherTestKt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此範例中，Gradle 的 <a href="https://docs.gradle.org/current/userguide/distribution_plugin.html#distribution_plugin" target="_blank" rel="noreferrer">Distribution</a> 外掛應用於第一個 <code>executable {}</code> 區塊。</p><p>如果您遇到任何問題，請在我們的<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">問題追蹤器</a>中報告，或在我們的<a href="https://kotlinlang.slack.com/archives/C19FD9681" target="_blank" rel="noreferrer">公開 Slack 頻道</a>中告知我們。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><h3 id="支援-xcode-16-3" tabindex="-1">支援 Xcode 16.3 <a class="header-anchor" href="#支援-xcode-16-3" aria-label="Permalink to &quot;支援 Xcode 16.3&quot;">​</a></h3><p>從 Kotlin <strong>2.1.21</strong> 開始，Kotlin/Native 編譯器支援 Xcode 16.3 – Xcode 的最新穩定版本。請隨意更新您的 Xcode，並繼續在 Apple 作業系統上開發您的 Kotlin 專案。</p><p>2.1.21 版本也修正了相關的 <a href="https://youtrack.jetbrains.com/issue/KT-75781/" target="_blank" rel="noreferrer">cinterop 問題</a>，該問題導致 Kotlin Multiplatform 專案的編譯失敗。</p>`,11)),n(a,{id:"新的內聯最佳化",level:"3",title:"新的內聯最佳化",labelRef:"experimental-opt-in"}),s[4]||(s[4]=i('<p>Kotlin 2.1.20 引入了一種新的內聯最佳化傳遞，它發生在實際程式碼生成階段之前。</p><p>Kotlin/Native 編譯器中的新內聯傳遞應比標準 LLVM 內聯器表現更好，並提升生成程式碼的執行時效能。</p><p>新的內聯傳遞目前為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。若要試用，請使用以下編譯器選項：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-Xbinary=preCodegenInlineThreshold=40</span></span></code></pre></div><p>我們的實驗表明，將閾值設定為 40 個 token（由編譯器解析的程式碼單元）在編譯最佳化方面提供了合理的折衷方案。根據我們的基準測試，這提供了 9.5% 的整體效能提升。當然，您也可以嘗試其他值。</p><p>如果您遇到二進位檔案大小增加或編譯時間延長的問題，請透過 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 報告此類問題。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>此版本改進了 Kotlin/Wasm 的除錯和屬性使用。自訂格式器現在在開發建置中可直接使用，而 DWARF 除錯則有助於程式碼檢查。此外，Provider API 簡化了 Kotlin/Wasm 和 Kotlin/JS 中的屬性使用。</p><h3 id="預設啟用自訂格式器" tabindex="-1">預設啟用自訂格式器 <a class="header-anchor" href="#預設啟用自訂格式器" aria-label="Permalink to &quot;預設啟用自訂格式器&quot;">​</a></h3><p>以前，您必須<a href="/zh-Hant/kotlin/whatsnew21#improved-debugging-experience-for-kotlin-wasm">手動配置</a>自訂格式器，以在使用 Kotlin/Wasm 程式碼時改善網頁瀏覽器中的除錯體驗。</p><p>在此版本中，開發建置中預設啟用自訂格式器，因此您無需額外的 Gradle 配置。</p><p>若要使用此功能，您只需確保瀏覽器的開發者工具中已啟用自訂格式器：</p><ul><li><p>在 Chrome DevTools 中，於 <strong>Settings | Preferences | Console</strong> 中找到自訂格式器核取方塊：</p><p><img src="'+t+'" alt="Enable custom formatters in Chrome" width="400"></p></li><li><p>在 Firefox DevTools 中，於 <strong>Settings | Advanced settings</strong> 中找到自訂格式器核取方塊：</p><p><img src="'+e+`" alt="Enable custom formatters in Firefox" width="400"></p></li></ul><p>此更改主要影響 Kotlin/Wasm 的開發建置。如果您對生產建置有特定要求，您需要相應地調整您的 Gradle 配置。為此，請將以下編譯器選項新增到 <code>wasmJs {}</code> 區塊中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xwasm-debugger-custom-formatters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="支援-dwarf-以除錯-kotlin-wasm-程式碼" tabindex="-1">支援 DWARF 以除錯 Kotlin/Wasm 程式碼 <a class="header-anchor" href="#支援-dwarf-以除錯-kotlin-wasm-程式碼" aria-label="Permalink to &quot;支援 DWARF 以除錯 Kotlin/Wasm 程式碼&quot;">​</a></h3><p>Kotlin 2.1.20 引入了在 Kotlin/Wasm 中對 DWARF（任意記錄格式除錯）的支援。</p><p>透過此更改，Kotlin/Wasm 編譯器能夠將 DWARF 資料嵌入到生成的 WebAssembly (Wasm) 二進位檔案中。許多除錯器和虛擬機器可以讀取這些資料，以提供對編譯程式碼的深入了解。</p><p>DWARF 主要用於在獨立的 Wasm 虛擬機器 (VM) 中除錯 Kotlin/Wasm 應用程式。若要使用此功能，Wasm VM 和除錯器必須支援 DWARF。</p><p>透過 DWARF 支援，您可以逐步執行 Kotlin/Wasm 應用程式、檢查變數並獲得程式碼洞察。若要啟用此功能，請使用以下編譯器選項：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xwasm-generate-dwarf</span></span></code></pre></div><h3 id="遷移至-provider-api-以處理-kotlin-wasm-和-kotlin-js-屬性" tabindex="-1">遷移至 Provider API 以處理 Kotlin/Wasm 和 Kotlin/JS 屬性 <a class="header-anchor" href="#遷移至-provider-api-以處理-kotlin-wasm-和-kotlin-js-屬性" aria-label="Permalink to &quot;遷移至 Provider API 以處理 Kotlin/Wasm 和 Kotlin/JS 屬性&quot;">​</a></h3><p>以前，Kotlin/Wasm 和 Kotlin/JS 擴展中的屬性是可變的 (<code>var</code>)，並直接在建置指令稿中指定：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NodeJsExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2.0.0&quot;</span></span></code></pre></div><p>現在，屬性透過 <a href="https://docs.gradle.org/current/userguide/properties_providers.html" target="_blank" rel="noreferrer">Provider API</a> 暴露，您必須使用 <code>.set()</code> 函數來指定值：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NodeJsEnvSpec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().version.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Provider API 確保值是惰性計算的，並與任務依賴項正確整合，從而提高了建置效能。</p><p>透過此更改，直接的屬性指定已被棄用，轉而使用 <code>*EnvSpec</code> 類別，例如 <code>NodeJsEnvSpec</code> 和 <code>YarnRootEnvSpec</code>。</p><p>此外，已移除多個別名任務，以避免混淆：</p><table tabindex="0"><thead><tr><th>已棄用任務</th><th>替代方案</th></tr></thead><tbody><tr><td><code>wasmJsRun</code></td><td><code>wasmJsBrowserDevelopmentRun</code></td></tr><tr><td><code>wasmJsBrowserRun</code></td><td><code>wasmJsBrowserDevelopmentRun</code></td></tr><tr><td><code>wasmJsNodeRun</code></td><td><code>wasmJsNodeDevelopmentRun</code></td></tr><tr><td><code>wasmJsBrowserWebpack</code></td><td><code>wasmJsBrowserProductionWebpack</code> 或 <code>wasmJsBrowserDistribution</code></td></tr><tr><td><code>jsRun</code></td><td><code>jsBrowserDevelopmentRun</code></td></tr><tr><td><code>jsBrowserRun</code></td><td><code>jsBrowserDevelopmentRun</code></td></tr><tr><td><code>jsNodeRun</code></td><td><code>jsNodeDevelopmentRun</code></td></tr><tr><td><code>jsBrowserWebpack</code></td><td><code>jsBrowserProductionWebpack</code> 或 <code>jsBrowserDistribution</code></td></tr></tbody></table><p>如果您只在建置指令稿中使用 Kotlin/JS 或 Kotlin/Wasm，則無需採取任何行動，因為 Gradle 會自動處理指定。</p><p>然而，如果您維護一個基於 Kotlin Gradle Plugin 的外掛，並且您的外掛未應用 <code>kotlin-dsl</code>，則必須更新屬性指定以使用 <code>.set()</code> 函數。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 2.1.20 完全相容於 Gradle 7.6.3 至 8.11。您也可以使用高於或等於最新 Gradle 版本的 Gradle 版本。然而，請注意，這樣做可能會導致棄用警告，並且某些新的 Gradle 功能可能無法正常運作。</p><p>此版本的 Kotlin 包含 Kotlin Gradle 外掛與 Gradle 的 Isolated Projects 的相容性，以及對自訂 Gradle 發佈變體的支援。</p>`,35)),n(a,{id:"與-gradle-isolated-projects-相容的-kotlin-gradle-外掛",level:"3",title:"與 Gradle Isolated Projects 相容的 Kotlin Gradle 外掛",labelRef:"experimental-opt-in"}),s[5]||(s[5]=i('<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能目前在 Gradle 中處於 Alpha 前期狀態。目前不支援 JS 和 Wasm 目標。 僅與 Gradle 8.10 或更高版本一起使用，且僅用於評估目的。</p></div><p>從 Kotlin 2.1.0 開始，您已能夠在專案中<a href="/zh-Hant/kotlin/whatsnew21#preview-gradle-s-isolated-projects-in-kotlin-multiplatform">預覽 Gradle 的 Isolated Projects 功能</a>。</p><p>以前，您必須配置 Kotlin Gradle 外掛，才能使您的專案與 Isolated Projects 功能相容。在 Kotlin 2.1.20 中，此額外步驟已不再必要。</p><p>現在，若要啟用 Isolated Projects 功能，您只需<a href="https://docs.gradle.org/current/userguide/isolated_projects.html#how_do_i_use_it" target="_blank" rel="noreferrer">設定系統屬性</a>。</p><p>Kotlin Gradle 外掛支援 Gradle 的 Isolated Projects 功能，適用於多平台專案以及僅包含 JVM 或 Android 目標的專案。</p><p>特別是對於多平台專案，如果您在升級後發現 Gradle 建置有問題，您可以透過新增以下內容來選擇退出新的 Kotlin Gradle 外掛行為：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.kmp.isolated-projects.support=disable</span></span></code></pre></div><p>然而，如果您在多平台專案中使用此 Gradle 屬性，則無法使用 Isolated Projects 功能。</p><p>請在 <a href="https://youtrack.jetbrains.com/issue/KT-57279/Support-Gradle-Project-Isolation-Feature-for-Kotlin-Multiplatform" target="_blank" rel="noreferrer">YouTrack</a> 上告訴我們您對此功能的體驗。</p>',9)),n(a,{id:"支援新增自訂-gradle-發佈變體",level:"3",title:"支援新增自訂 Gradle 發佈變體",labelRef:"experimental-opt-in"}),s[6]||(s[6]=i(`<p>Kotlin 2.1.20 引入了支援新增自訂 <a href="https://docs.gradle.org/current/userguide/variant_attributes.html" target="_blank" rel="noreferrer">Gradle 發佈變體</a>的功能。此功能適用於多平台專案和以 JVM 為目標的專案。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您無法透過此功能修改現有的 Gradle 變體。</p></div><p>此功能為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。若要選擇啟用，請使用 <code>@OptIn(ExperimentalKotlinGradlePluginApi::class)</code> 註解。</p><p>若要新增自訂 Gradle 發佈變體，請呼叫 <code>adhocSoftwareComponent()</code> 函數，它會返回一個 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/component/AdhocComponentWithVariants.html" target="_blank" rel="noreferrer"><code>AdhocComponentWithVariants</code></a> 實例，您可以在 Kotlin DSL 中配置它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Only JVM and Multiplatform are supported</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    publishing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Returns an instance of AdhocSoftwareComponent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        adhocSoftwareComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Alternatively, you can configure AdhocSoftwareComponent in the DSL block as follows</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        adhocSoftwareComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Add your custom variants here using the AdhocSoftwareComponent API</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>有關變體的更多資訊，請參閱 Gradle 的<a href="https://docs.gradle.org/current/userguide/publishing_customization.html" target="_blank" rel="noreferrer">自訂發佈指南</a>。</p></div><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><p>此版本為標準函式庫帶來了新的實驗性功能：通用原子型別、改進的 UUID 支援以及新的時間追蹤功能。</p>`,8)),n(a,{id:"通用原子型別",level:"3",title:"通用原子型別",labelRef:"experimental-opt-in"}),s[7]||(s[7]=i(`<p>在 Kotlin 2.1.20 中，我們在標準函式庫的 <code>kotlin.concurrent.atomics</code> 套件中引入了通用原子型別，為執行緒安全操作啟用共享、與平台無關的程式碼。這透過消除在不同原始碼集之間複製依賴原子型別的邏輯的需求，簡化了 Kotlin Multiplatform 專案的開發。</p><p><code>kotlin.concurrent.atomics</code> 套件及其屬性為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。若要選擇啟用，請使用 <code>@OptIn(ExperimentalAtomicApi::class)</code> 註解或編譯器選項 <code>-opt-in=kotlin.ExperimentalAtomicApi</code>。</p><p>以下範例展示了如何使用 <code>AtomicInt</code> 安全地計算多個執行緒中已處理的項目：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Imports the necessary libraries</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.concurrent.atomics.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalAtomicApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Initializes the atomic counter for processed items</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processedItems </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AtomicInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalItems </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(totalItems) { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Splits the items into chunks for processing by multiple coroutines</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chunkSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> itemChunks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chunkSize)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    coroutineScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (chunk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> itemChunks) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chunk) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Processing </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$item</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in thread \${Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentThread</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    processedItems </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Increment counter atomically</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Prints the total number of processed items</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Total processed items: \${processedItems.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>為了在 Kotlin 的原子型別和 Java 的 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/package-summary.html" target="_blank" rel="noreferrer"><code>java.util.concurrent.atomic</code></a> 原子型別之間實現無縫互通性，API 提供了 <code>.asJavaAtomic()</code> 和 <code>.asKotlinAtomic()</code> 擴展函數。在 JVM 上，Kotlin 原子型別和 Java 原子型別在執行時是相同的型別，因此您可以將 Java 原子型別轉換為 Kotlin 原子型別，反之亦然，而無需任何開銷。</p><p>以下範例展示了 Kotlin 和 Java 原子型別如何協同運作：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Imports the necessary libraries</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.concurrent.atomics.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.util.concurrent.atomic.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalAtomicApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Converts Kotlin AtomicInt to Java&#39;s AtomicInteger</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinAtomic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AtomicInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaAtomic: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AtomicInteger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinAtomic.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asJavaAtomic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Java atomic value: \${javaAtomic.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Java atomic value: 42</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Converts Java&#39;s AtomicInteger back to Kotlin&#39;s AtomicInt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinAgain: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AtomicInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaAtomic.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asKotlinAtomic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin atomic value: \${kotlinAgain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Kotlin atomic value: 42</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,7)),n(a,{id:"uuid-解析、格式化和可比較性方面的變更",level:"3",title:"UUID 解析、格式化和可比較性方面的變更",labelRef:"experimental-opt-in"}),s[8]||(s[8]=i(`<p>JetBrains 團隊持續改進對 <a href="/zh-Hant/kotlin/whatsnew2020#support-for-uuids-in-the-common-kotlin-standard-library">2.0.20 中引入標準函式庫的 UUID</a> 的支援。</p><p>以前，<code>parse()</code> 函數只接受十六進制帶連字號的 UUID 格式。在 Kotlin 2.1.20 中，您可以使用 <code>parse()</code> 處理<em>兩種</em>格式：十六進制帶連字號和純十六進制（不帶連字號）。</p><p>在此版本中，我們還引入了專門用於十六進制帶連字號格式操作的函數：</p><ul><li><code>parseHexDash()</code> 從十六進制帶連字號格式解析 UUID。</li><li><code>toHexDashString()</code> 將 <code>Uuid</code> 轉換為十六進制帶連字號格式的 <code>String</code>（與 <code>toString()</code> 的功能相同）。</li></ul><p>這些函數的工作方式與先前為十六進制格式引入的 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.uuid/-uuid/-companion/parse-hex.html" target="_blank" rel="noreferrer"><code>parseHex()</code></a> 和 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.uuid/-uuid/to-hex-string.html" target="_blank" rel="noreferrer"><code>toHexString()</code></a> 類似。明確命名解析和格式化功能應能提高程式碼清晰度，並改善您使用 UUID 的整體體驗。</p><p>Kotlin 中的 UUID 現在是 <code>Comparable</code>。從 Kotlin 2.1.20 開始，您可以直接比較和排序 <code>Uuid</code> 型別的值。這使得可以使用 <code>&lt;</code> 和 <code>&gt;</code> 運算子，以及專為 <code>Comparable</code> 型別或其集合（例如 <code>sorted()</code>）提供的標準函式庫擴展；它還允許將 UUID 傳遞給任何需要 <code>Comparable</code> 介面的函數或 API。</p><p>請記住，標準函式庫中的 UUID 支援仍為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。若要選擇啟用，請使用 <code>@OptIn(ExperimentalUuidApi::class)</code> 註解或編譯器選項 <code>-opt-in=kotlin.uuid.ExperimentalUuidApi</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.uuid.ExperimentalUuidApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.uuid.Uuid</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalUuidApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // parse() accepts a UUID in a plain hexadecimal format</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;550e8400e29b41d4a716446655440000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Converts it to the hex-and-dash format</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hexDashFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexDashString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Outputs the UUID in the hex-and-dash format</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hexDashFormat)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Outputs UUIDs in ascending order</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            uuid,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;780e8400e29b41d4a716446655440005&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5ab88400e29b41d4a716446655440076&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div>`,8)),n(a,{id:"新的時間追蹤功能",level:"3",title:"新的時間追蹤功能",labelRef:"experimental-opt-in"}),s[9]||(s[9]=i(`<p>從 Kotlin 2.1.20 開始，標準函式庫提供了表示時間點的能力。此功能以前僅在官方 Kotlin 函式庫 <a href="https://kotlinlang.org/api/kotlinx-datetime/" target="_blank" rel="noreferrer"><code>kotlinx-datetime</code></a> 中可用。</p><p><a href="https://kotlinlang.org/api/kotlinx-datetime/kotlinx-datetime/kotlinx.datetime/-clock/" target="_blank" rel="noreferrer"><code>kotlinx.datetime.Clock</code></a> 介面作為 <code>kotlin.time.Clock</code> 被引入標準函式庫，而 <a href="https://kotlinlang.org/api/kotlinx-datetime/kotlinx-datetime/kotlinx.datetime/-instant/" target="_blank" rel="noreferrer"><code>kotlinx.datetime.Instant</code></a> 類別則作為 <code>kotlin.time.Instant</code> 被引入。這些概念自然地與標準函式庫中的 <code>time</code> 套件對齊，因為它們只關注時間點，而 <code>kotlinx-datetime</code> 中保留了更複雜的日曆和時區功能。</p><p><code>Instant</code> 和 <code>Clock</code> 在您需要精確時間追蹤而不考慮時區或日期時非常有用。例如，您可以使用它們來記錄帶有時間戳的事件、測量兩個時間點之間的持續時間，以及獲取系統進程的當前時間點。</p><p>為了提供與其他語言的互通性，還提供了額外的轉換函數：</p><ul><li><code>.toKotlinInstant()</code> 將時間值轉換為 <code>kotlin.time.Instant</code> 實例。</li><li><code>.toJavaInstant()</code> 將 <code>kotlin.time.Instant</code> 值轉換為 <code>java.time.Instant</code> 值。</li><li><code>Instant.toJSDate()</code> 將 <code>kotlin.time.Instant</code> 值轉換為 JS <code>Date</code> 類別的實例。此轉換不精確；JS 使用毫秒精度表示日期，而 Kotlin 允許奈秒解析度。</li></ul><p>標準函式庫的新時間功能仍為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。若要選擇啟用，請使用 <code>@OptIn(ExperimentalTime::class)</code> 註解：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalTime::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the current moment in time</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentInstant </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Clock.System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Current time: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$currentInstant</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Find the difference between two moments in time</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pastInstant </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Instant.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2023-01-01T00:00:00Z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentInstant </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pastInstant</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Time elapsed since 2023-01-01: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$duration</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關實作的更多資訊，請參閱此 <a href="https://github.com/Kotlin/KEEP/pull/387/files" target="_blank" rel="noreferrer">KEEP 提案</a>。</p><h2 id="compose-編譯器" tabindex="-1">Compose 編譯器 <a class="header-anchor" href="#compose-編譯器" aria-label="Permalink to &quot;Compose 編譯器&quot;">​</a></h2><p>在 2.1.20 中，Compose 編譯器放寬了先前版本中引入的 <code>@Composable</code> 函數的一些限制。此外，Compose 編譯器 Gradle 外掛預設設定為包含來源資訊，使所有平台上的行為與 Android 對齊。</p><h3 id="支援開放式-composable-函數中帶有預設值的參數" tabindex="-1">支援開放式 @Composable 函數中帶有預設值的參數 <a class="header-anchor" href="#支援開放式-composable-函數中帶有預設值的參數" aria-label="Permalink to &quot;支援開放式 @Composable 函數中帶有預設值的參數&quot;">​</a></h3><p>編譯器先前限制了開放式 <code>@Composable</code> 函數中帶有預設值的參數，因為不正確的編譯器輸出會導致執行時崩潰。底層問題現已解決，當與 Kotlin 2.1.20 或更高版本一起使用時，帶有預設值的參數將得到完全支援。</p><p>Compose 編譯器在 <a href="https://developer.android.com/jetpack/androidx/releases/compose-compiler#1.5.8" target="_blank" rel="noreferrer">1.5.8 版本</a>之前允許開放式函數中帶有預設值的參數，因此支援取決於專案配置：</p><ul><li>如果開放式可組合函數使用 Kotlin 2.1.20 或更高版本編譯，編譯器會為帶有預設值的參數生成正確的包裝器。這包括與 1.5.8 之前的二進位檔案相容的包裝器，這表示下游函式庫也能夠使用此開放式函數。</li><li>如果開放式可組合函數使用早於 2.1.20 的 Kotlin 版本編譯，Compose 會使用相容模式，這可能會導致執行時崩潰。使用相容模式時，編譯器會發出警告以指出潛在問題。</li></ul><h3 id="最終覆寫的函數允許可重啟" tabindex="-1">最終覆寫的函數允許可重啟 <a class="header-anchor" href="#最終覆寫的函數允許可重啟" aria-label="Permalink to &quot;最終覆寫的函數允許可重啟&quot;">​</a></h3><p>虛擬函數（<code>open</code> 和 <code>abstract</code> 的覆寫，包括介面）<a href="/zh-Hant/kotlin/whatsnew21#changes-to-open-and-overridden-composable-functions">在 2.1.0 版本中被強制為不可重啟</a>。現在，對於屬於 <code>final</code> 類別成員或本身為 <code>final</code> 的函數，此限制已放寬 – 它們將照常重啟或跳過。</p><p>升級到 Kotlin 2.1.20 後，您可能會在受影響的函數中觀察到一些行為變化。若要強制使用舊版中的不可重啟邏輯，請將 <code>@NonRestartableComposable</code> 註解應用於該函數。</p><h3 id="composablesingletons-從公共-api-中移除" tabindex="-1">ComposableSingletons 從公共 API 中移除 <a class="header-anchor" href="#composablesingletons-從公共-api-中移除" aria-label="Permalink to &quot;ComposableSingletons 從公共 API 中移除&quot;">​</a></h3><p><code>ComposableSingletons</code> 是 Compose 編譯器在最佳化 <code>@Composable</code> 匿名函數時建立的一個類別。不捕獲任何參數的匿名函數會被分配一次並快取在類別的一個屬性中，從而在執行時節省了分配。該類別以內部可見性生成，僅用於最佳化編譯單元（通常是一個檔案）內的匿名函數。</p><p>然而，此最佳化也應用於 <code>inline</code> 函數體，這導致單例匿名函數實例洩漏到公共 API 中。為了解決這個問題，從 2.1.20 開始，<code>@Composable</code> 匿名函數不再在內聯函數中最佳化為單例。同時，Compose 編譯器將繼續為內聯函數生成單例類別和匿名函數，以支援在舊模型下編譯的模組的二進位相容性。</p><h3 id="預設包含來源資訊" tabindex="-1">預設包含來源資訊 <a class="header-anchor" href="#預設包含來源資訊" aria-label="Permalink to &quot;預設包含來源資訊&quot;">​</a></h3><p>Compose 編譯器 Gradle 外掛在 Android 上已預設啟用<a href="https://kotlinlang.org/api/kotlin-gradle-plugin/compose-compiler-gradle-plugin/org.jetbrains.kotlin.compose.compiler.gradle/-compose-compiler-gradle-plugin-extension/include-source-information.html" target="_blank" rel="noreferrer">包含來源資訊</a>功能。從 Kotlin 2.1.20 開始，此功能將在所有平台預設啟用。</p><p>請記得檢查您是否使用 <code>freeCompilerArgs</code> 設定了此選項。當與外掛一起使用時，此方法可能導致建置失敗，因為一個選項實際上被設定了兩次。</p><h2 id="重大變更與棄用" tabindex="-1">重大變更與棄用 <a class="header-anchor" href="#重大變更與棄用" aria-label="Permalink to &quot;重大變更與棄用&quot;">​</a></h2><ul><li>為了使 Kotlin Multiplatform 與 Gradle 即將推出的變更保持一致，我們正在逐步淘汰 <code>withJava()</code> 函數。<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html#java-source-sets-created-by-default" target="_blank" rel="noreferrer">Java 原始碼集現在預設建立</a>。如果您使用 <a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures" target="_blank" rel="noreferrer">Java 測試夾具</a> Gradle 外掛，請直接升級到 <a href="/zh-Hant/kotlin/releases#release-details">Kotlin 2.1.21</a> 以避免相容性問題。</li><li>JetBrains 團隊正在推進 <code>kotlin-android-extensions</code> 外掛的棄用。如果您嘗試在專案中使用它，現在將會收到配置錯誤，並且不會執行任何外掛程式碼。</li><li>舊版 <code>kotlin.incremental.classpath.snapshot.enabled</code> 屬性已從 Kotlin Gradle 外掛中移除。該屬性過去提供了在 JVM 上回退到內建 ABI 快照的機會。該外掛現在使用其他方法來偵測和避免不必要的重新編譯，使得該屬性變得多餘。</li></ul><h2 id="文件更新" tabindex="-1">文件更新 <a class="header-anchor" href="#文件更新" aria-label="Permalink to &quot;文件更新&quot;">​</a></h2><p>Kotlin 文件已進行了一些顯著的更改：</p><h3 id="翻新與新增頁面" tabindex="-1">翻新與新增頁面 <a class="header-anchor" href="#翻新與新增頁面" aria-label="Permalink to &quot;翻新與新增頁面&quot;">​</a></h3><ul><li><a href="/zh-Hant/kotlin/roadmap">Kotlin 路線圖</a> – 查看 Kotlin 在語言和生態系統演進方面的優先級更新列表。</li><li><a href="/zh-Hant/kotlin/gradle-best-practices">Gradle 最佳實踐</a>頁面 – 學習最佳化您的 Gradle 建置並提升效能的基本最佳實踐。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-multiplatform-and-jetpack-compose.html" target="_blank" rel="noreferrer">Compose Multiplatform 與 Jetpack Compose</a> – 兩種 UI 框架之間關係的概述。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/kotlin-multiplatform-flutter.html" target="_blank" rel="noreferrer">Kotlin Multiplatform 與 Flutter</a> – 查看兩種流行跨平台框架的比較。</li><li><a href="/zh-Hant/kotlin/native-c-interop">與 C 的互通性</a> – 探索 Kotlin 與 C 的互通性細節。</li><li><a href="/zh-Hant/kotlin/numbers">數字</a> – 了解不同用於表示數字的 Kotlin 型別。</li></ul><h3 id="新增與更新的教學" tabindex="-1">新增與更新的教學 <a class="header-anchor" href="#新增與更新的教學" aria-label="Permalink to &quot;新增與更新的教學&quot;">​</a></h3><ul><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-publish-libraries.html" target="_blank" rel="noreferrer">將您的函式庫發佈到 Maven Central</a> – 了解如何將 KMP 函式庫 artifact 發佈到最受歡迎的 Maven 儲存庫。</li><li><a href="/zh-Hant/kotlin/native-dynamic-libraries">Kotlin/Native 作為動態函式庫</a> – 建立一個動態 Kotlin 函式庫。</li><li><a href="/zh-Hant/kotlin/apple-framework">Kotlin/Native 作為 Apple 框架</a> – 建立您自己的框架，並在 macOS 和 iOS 上從 Swift/Objective-C 應用程式中使用 Kotlin/Native 程式碼。</li></ul><h2 id="如何更新到-kotlin-2-1-20" tabindex="-1">如何更新到 Kotlin 2.1.20 <a class="header-anchor" href="#如何更新到-kotlin-2-1-20" aria-label="Permalink to &quot;如何更新到 Kotlin 2.1.20&quot;">​</a></h2><p>從 IntelliJ IDEA 2023.3 和 Android Studio Iguana (2023.2.1) Canary 15 開始，Kotlin 外掛作為一個綁定外掛包含在您的 IDE 中發佈。</p><p>這意味著您無法再從 JetBrains Marketplace 安裝該外掛。</p><p>若要更新到新的 Kotlin 版本，請在您的建置指令稿中將 <a href="/zh-Hant/kotlin/releases#update-to-a-new-kotlin-version">Kotlin 版本更改</a>為 2.1.20。</p>`,35))])}const b=l(k,[["render",r]]);export{F as __pageData,b as default};
