import{_ as a}from"./chunks/compose-1610-ios-magnifier.YMZtwDpq.js";import{_ as o,c as i,o as r,ag as l}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Compose Multiplatform 1.6.10 の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/whats-new-compose-1610.md","filePath":"ja/kmp/whats-new-compose-1610.md","lastUpdated":1755516278000}'),t={name:"ja/kmp/whats-new-compose-1610.md"};function s(n,e,p,d,c,h){return r(),i("div",null,e[0]||(e[0]=[l('<h1 id="compose-multiplatform-1-6-10-の新機能" tabindex="-1">Compose Multiplatform 1.6.10 の新機能 <a class="header-anchor" href="#compose-multiplatform-1-6-10-の新機能" aria-label="Permalink to &quot;Compose Multiplatform 1.6.10 の新機能&quot;">​</a></h1><p>この機能リリースにおけるハイライトは以下のとおりです。</p><ul><li><a href="#breaking-change-new-compose-compiler-gradle-plugin">破壊的変更: 新しいComposeコンパイラーGradleプラグイン</a></li><li><a href="#support-for-multimodule-projects-with-compose-multiplatform-resources">Compose Multiplatformリソースを使用したマルチモジュールプロジェクトのサポート</a></li><li><a href="#experimental-navigation-library">実験的なナビゲーションライブラリ</a></li><li><a href="#lifecycle-library">実験的な共通ViewModelを備えたライフサイクルライブラリ</a></li><li><a href="#known-issue-missingresourceexception">既知の問題: MissingResourceException</a></li></ul><p>このリリースの変更点の全リストは、<a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/CHANGELOG#1610-may-2024">GitHub</a>で確認できます。</p><h2 id="依存関係" tabindex="-1">依存関係 <a class="header-anchor" href="#依存関係" aria-label="Permalink to &quot;依存関係&quot;">​</a></h2><ul><li>Gradleプラグイン <code>org.jetbrains.compose</code>、バージョン 1.6.10。Jetpack Composeライブラリに基づいています。 <ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-compiler#1.5.14" target="_blank" rel="noreferrer">Compiler 1.5.14</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.6.7" target="_blank" rel="noreferrer">Runtime 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.6.7" target="_blank" rel="noreferrer">UI 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.6.7" target="_blank" rel="noreferrer">Foundation 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.6.7" target="_blank" rel="noreferrer">Material 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.2.1" target="_blank" rel="noreferrer">Material3 1.2.1</a></li></ul></li><li>ライフサイクルライブラリ <code>org.jetbrains.androidx.lifecycle:lifecycle-*:2.8.0</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/lifecycle#2.8.0" target="_blank" rel="noreferrer">Jetpack Lifecycle 2.8.0</a>に基づいています。</li><li>ナビゲーションライブラリ <code>org.jetbrains.androidx.navigation:navigation-*:2.7.0-alpha07</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/navigation#2.7.7" target="_blank" rel="noreferrer">Jetpack Navigation 2.7.7</a>に基づいています。</li></ul><h2 id="破壊的変更-新しいcomposeコンパイラーgradleプラグイン" tabindex="-1">破壊的変更: 新しいComposeコンパイラーGradleプラグイン <a class="header-anchor" href="#破壊的変更-新しいcomposeコンパイラーgradleプラグイン" aria-label="Permalink to &quot;破壊的変更: 新しいComposeコンパイラーGradleプラグイン&quot;">​</a></h2><p>Kotlin 2.0.0以降、Compose Multiplatformは新しいComposeコンパイラーGradleプラグインを必要とします。 詳細については、<a href="./compose-compiler#migrating-a-compose-multiplatform-project">移行ガイド</a>を参照してください。</p><h2 id="クロスプラットフォーム" tabindex="-1">クロスプラットフォーム <a class="header-anchor" href="#クロスプラットフォーム" aria-label="Permalink to &quot;クロスプラットフォーム&quot;">​</a></h2><h3 id="リソース" tabindex="-1">リソース <a class="header-anchor" href="#リソース" aria-label="Permalink to &quot;リソース&quot;">​</a></h3><h4 id="安定版リソースライブラリ" tabindex="-1">安定版リソースライブラリ <a class="header-anchor" href="#安定版リソースライブラリ" aria-label="Permalink to &quot;安定版リソースライブラリ&quot;">​</a></h4><p><a href="./compose-multiplatform-resources">リソースライブラリAPI</a>の大部分が安定版と見なされるようになりました。</p><h4 id="compose-multiplatformリソースを使用したマルチモジュールプロジェクトのサポート" tabindex="-1">Compose Multiplatformリソースを使用したマルチモジュールプロジェクトのサポート <a class="header-anchor" href="#compose-multiplatformリソースを使用したマルチモジュールプロジェクトのサポート" aria-label="Permalink to &quot;Compose Multiplatformリソースを使用したマルチモジュールプロジェクトのサポート&quot;">​</a></h4><p>Compose Multiplatform 1.6.10以降、リソースを任意のGradleモジュールおよび任意のソースセットに保存したり、 リソースを含んだプロジェクトやライブラリを公開したりできるようになりました。</p><p>マルチモジュールサポートを有効にするには、プロジェクトをKotlin 2.0.0以降、Gradle 7.6以降に更新してください。</p><h4 id="マルチプラットフォームリソースの設定dsl" tabindex="-1">マルチプラットフォームリソースの設定DSL <a class="header-anchor" href="#マルチプラットフォームリソースの設定dsl" aria-label="Permalink to &quot;マルチプラットフォームリソースの設定DSL&quot;">​</a></h4><p>プロジェクト内の<code>Res</code>クラス生成を微調整できるようになりました。クラスのモダリティと割り当てられたパッケージを変更できるほか、常に生成する、決して生成しない、リソースライブラリへの明示的な依存関係がある場合にのみ生成するなど、生成条件を選択できます。</p><p>詳細については、<a href="./compose-multiplatform-resources-usage#customizing-accessor-class-generation">ドキュメントのセクション</a>を参照してください。</p><h4 id="リソースuriを生成する公開関数" tabindex="-1">リソースURIを生成する公開関数 <a class="header-anchor" href="#リソースuriを生成する公開関数" aria-label="Permalink to &quot;リソースURIを生成する公開関数&quot;">​</a></h4><p>新しい<code>getUri()</code>関数を使用すると、プラットフォーム固有のリソースURIを外部ライブラリに渡して、ファイルに直接アクセスできるようになります。 詳細については、<a href="./compose-multiplatform-resources-usage#accessing-multiplatform-resources-from-external-libraries">ドキュメント</a>を参照してください。</p><h4 id="文字列リソースの複数形" tabindex="-1">文字列リソースの複数形 <a class="header-anchor" href="#文字列リソースの複数形" aria-label="Permalink to &quot;文字列リソースの複数形&quot;">​</a></h4><p>他のマルチプラットフォーム文字列リソースとともに、複数形（数量文字列）を定義できるようになりました。 詳細については、<a href="./compose-multiplatform-resources-usage#plurals">ドキュメント</a>を参照してください。</p><h4 id="_3文字ロケールのサポート" tabindex="-1">3文字ロケールのサポート <a class="header-anchor" href="#_3文字ロケールのサポート" aria-label="Permalink to &quot;3文字ロケールのサポート&quot;">​</a></h4><p><a href="./compose-multiplatform-resources-setup#language-and-regional-qualifiers">言語修飾子</a>が、ロケール用のアルファ3 (ISO 639-2) コードをサポートするようになりました。</p><h4 id="画像とフォント用の実験的なバイト配列関数" tabindex="-1">画像とフォント用の実験的なバイト配列関数 <a class="header-anchor" href="#画像とフォント用の実験的なバイト配列関数" aria-label="Permalink to &quot;画像とフォント用の実験的なバイト配列関数&quot;">​</a></h4><p>フォントと画像をバイト配列として取得できる2つの関数、<code>getDrawableResourceBytes()</code>と<code>getFontResourceBytes()</code>を試すことができます。 これらの関数は、サードパーティライブラリからマルチプラットフォームリソースにアクセスするのに役立つことを目的としています。</p><p>詳細は<a href="https://github.com/JetBrains/compose-multiplatform/pull/4651" target="_blank" rel="noreferrer">プルリクエスト</a>を参照してください。</p><h3 id="実験的なナビゲーションライブラリ" tabindex="-1">実験的なナビゲーションライブラリ <a class="header-anchor" href="#実験的なナビゲーションライブラリ" aria-label="Permalink to &quot;実験的なナビゲーションライブラリ&quot;">​</a></h3><p>Jetpack Composeに基づいた共通ナビゲーションライブラリが利用可能になりました。 詳細については、<a href="./compose-navigation-routing">ドキュメント</a>を参照してください。</p><p>このバージョンの主な制限事項:</p><ul><li><a href="https://developer.android.com/guide/navigation/design/deep-link" target="_blank" rel="noreferrer">ディープリンク</a>（処理または追跡）はまだサポートされていません。</li><li><a href="https://developer.android.com/develop/ui/compose/libraries#handling_the_system_back_button" target="_blank" rel="noreferrer">BackHandler</a>関数と<a href="https://developer.android.com/guide/navigation/custom-back/predictive-back-gesture" target="_blank" rel="noreferrer">予測型戻るジェスチャー</a>は、Androidでのみサポートされています。</li></ul><h3 id="ライフサイクルライブラリ" tabindex="-1">ライフサイクルライブラリ <a class="header-anchor" href="#ライフサイクルライブラリ" aria-label="Permalink to &quot;ライフサイクルライブラリ&quot;">​</a></h3><p>Jetpackライフサイクルに基づいた共通ライフサイクルライブラリが利用可能になりました。詳細は<a href="./compose-lifecycle">ドキュメント</a>を参照してください。</p><p>このライブラリは、主に共通ナビゲーション機能をサポートするために導入されましたが、実験的なクロスプラットフォーム<code>ViewModel</code>実装も提供し、プロジェクトで実装できる共通の<code>LifecycleOwner</code>インターフェースも含まれています。</p><p>Compose Multiplatformは、一般的な<code>ViewModelStoreOwner</code>実装も提供します。</p><h3 id="kotlin-2-0-0のサポート" tabindex="-1">Kotlin 2.0.0のサポート <a class="header-anchor" href="#kotlin-2-0-0のサポート" aria-label="Permalink to &quot;Kotlin 2.0.0のサポート&quot;">​</a></h3><p>Kotlin 2.0.0は、Composeコンパイラー用の新しいGradleプラグインとともにリリースされました。 最新のコンパイラーバージョンでCompose Multiplatformを使用するには、プロジェクトのモジュールにプラグインを適用してください（詳細については<a href="./compose-compiler#migrating-a-compose-multiplatform-project">移行ガイド</a>を参照してください）。</p><h2 id="デスクトップ" tabindex="-1">デスクトップ <a class="header-anchor" href="#デスクトップ" aria-label="Permalink to &quot;デスクトップ&quot;">​</a></h2><h3 id="basictextfield2の基本的なサポート" tabindex="-1">BasicTextField2の基本的なサポート <a class="header-anchor" href="#basictextfield2の基本的なサポート" aria-label="Permalink to &quot;BasicTextField2の基本的なサポート&quot;">​</a></h3><p><code>BasicTextField2</code> Composeコンポーネントは、デスクトップターゲットで基本的なレベルでサポートされるようになりました。 プロジェクトで絶対に必要とする場合、またはテストするために使用できますが、未対応のエッジケースが存在する可能性があることに注意してください。 たとえば、<code>BasicTextField2</code>は現時点ではIMEイベントをサポートしていないため、中国語、日本語、韓国語の仮想キーボードは使用できません。</p><p>このコンポーネントの完全なサポートと他のプラットフォームのサポートは、Compose Multiplatform 1.7.0リリースで計画されています。</p><h3 id="dialogwindowのalwaysontopフラグ" tabindex="-1">DialogWindowのalwaysOnTopフラグ <a class="header-anchor" href="#dialogwindowのalwaysontopフラグ" aria-label="Permalink to &quot;DialogWindowのalwaysOnTopフラグ&quot;">​</a></h3><p>ダイアログウィンドウが上書きされることを避けるため、<code>DialogWindow</code>コンポーザブルの<code>alwaysOnTop</code>フラグを使用できるようになりました。</p><p>詳細については、<a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1120" target="_blank" rel="noreferrer">プルリクエスト</a>を参照してください。</p><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="アクセシビリティサポートの改善" tabindex="-1">アクセシビリティサポートの改善 <a class="header-anchor" href="#アクセシビリティサポートの改善" aria-label="Permalink to &quot;アクセシビリティサポートの改善&quot;">​</a></h3><p>このリリースでは:</p><ul><li>ダイアログとポップアップがアクセシビリティ機能と適切に統合されました。</li><li><code>UIKitView</code>および<code>UIKitViewController</code>を使用して作成された相互運用ビューが、アクセシビリティサービスからアクセス可能になりました。</li><li><code>LiveRegion</code>セマンティクスがアクセシビリティAPIでサポートされました。</li><li><a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1169" target="_blank" rel="noreferrer">アクセシビリティスクロール</a>がサポートされました。</li><li><code>HapticFeedback</code>がサポートされました。</li></ul><h3 id="ios-17以降の選択コンテナ拡大鏡" tabindex="-1">iOS 17以降の選択コンテナ拡大鏡 <a class="header-anchor" href="#ios-17以降の選択コンテナ拡大鏡" aria-label="Permalink to &quot;iOS 17以降の選択コンテナ拡大鏡&quot;">​</a></h3><p>iOS上のCompose Multiplatform選択コンテナは、ネイティブの拡大ツールをエミュレートするようになりました。</p><p><img src="'+a+`" alt="iPhoneチャットアプリのスクリーンショット（テキスト拡大鏡が有効な状態）" width="390"></p><h3 id="ダイアログ中央寄せのためのソフトウェアキーボードインセット" tabindex="-1">ダイアログ中央寄せのためのソフトウェアキーボードインセット <a class="header-anchor" href="#ダイアログ中央寄せのためのソフトウェアキーボードインセット" aria-label="Permalink to &quot;ダイアログ中央寄せのためのソフトウェアキーボードインセット&quot;">​</a></h3><p><code>Dialog</code>コンポーザブルの動作がAndroidと揃いました。ソフトウェアキーボードが画面に表示されると、ダイアログはアプリケーションウィンドウの有効な高さを考慮して中央に配置されるようになりました。 <code>DialogProperties.useSoftwareKeyboardInset</code>プロパティを使用してこれを無効にするオプションがあります。</p><h2 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h2><h3 id="kotlin-wasmサポートがalphaに" tabindex="-1">Kotlin/WasmサポートがAlphaに <a class="header-anchor" href="#kotlin-wasmサポートがalphaに" aria-label="Permalink to &quot;Kotlin/WasmサポートがAlphaに&quot;">​</a></h3><p>Web向けの実験的Compose MultiplatformがAlphaになりました。</p><ul><li>ほとんどのWeb機能はデスクトップ向けCompose Multiplatformとほぼ同じです。</li><li>チームはWebプラットフォームをリリースに導くことに尽力しています。</li><li>次のステップは、ほとんどのコンポーネントの徹底的なブラウザ適応です。</li></ul><p>共有UIコードでWebアプリをセットアップして実行する方法については、<a href="./quickstart">最初のアプリチュートリアル</a>を参照してください。</p><h3 id="基本的なimeキーボードサポート" tabindex="-1">基本的なIMEキーボードサポート <a class="header-anchor" href="#基本的なimeキーボードサポート" aria-label="Permalink to &quot;基本的なIMEキーボードサポート&quot;">​</a></h3><p>Compose MultiplatformのWebターゲットで、仮想（IME）キーボードの基本的なサポートが追加されました。</p><h2 id="gradleプラグイン" tabindex="-1">Gradleプラグイン <a class="header-anchor" href="#gradleプラグイン" aria-label="Permalink to &quot;Gradleプラグイン&quot;">​</a></h2><h3 id="macosの最小バージョンを変更する可能性" tabindex="-1">macOSの最小バージョンを変更する可能性 <a class="header-anchor" href="#macosの最小バージョンを変更する可能性" aria-label="Permalink to &quot;macOSの最小バージョンを変更する可能性&quot;">​</a></h3><p>以前のバージョンでは、Intelバージョンを含めずにmacOSアプリをApp Storeにアップロードすることはできませんでした。 プラットフォーム固有のCompose Multiplatformオプションで、アプリのmacOSの最小バージョンを設定できるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                minimumSystemVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;12.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>詳細については、<a href="https://github.com/JetBrains/compose-multiplatform/pull/4271" target="_blank" rel="noreferrer">プルリクエスト</a>を参照してください。</p><h3 id="proguardサポート付きのuber-jarを作成するオプション" tabindex="-1">ProGuardサポート付きのuber JARを作成するオプション <a class="header-anchor" href="#proguardサポート付きのuber-jarを作成するオプション" aria-label="Permalink to &quot;ProGuardサポート付きのuber JARを作成するオプション&quot;">​</a></h3><p>ProGuard Gradleタスクを使用して、uber JAR（アプリケーションとすべての依存関係のJARを含む複雑なパッケージ）を作成できるようになりました。</p><p>詳細については、<a href="./compose-native-distribution#minification-and-obfuscation">ミニファイと難読化</a>ガイドを参照してください。</p><h3 id="既知の問題-missingresourceexception" tabindex="-1">既知の問題: MissingResourceException <a class="header-anchor" href="#既知の問題-missingresourceexception" aria-label="Permalink to &quot;既知の問題: MissingResourceException&quot;">​</a></h3><p>Kotlin 1.9.xから2.0.0に切り替えた後（またはその逆）、<code>org.jetbrains.compose.resources.MissingResourceException: Missing resource with path: ...</code>エラーが発生する場合があります。 これを解決するには、プロジェクト内のすべての<code>build</code>ディレクトリを削除してください。 これには、プロジェクトのルートディレクトリとモジュールディレクトリにあるディレクトリが含まれます。</p>`,70)]))}const k=o(t,[["render",s]]);export{f as __pageData,k as default};
