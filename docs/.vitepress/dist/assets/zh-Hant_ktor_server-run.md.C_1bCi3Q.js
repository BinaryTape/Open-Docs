import{_ as k,C as r,c,o as g,j as e,G as i,ag as l,a as t,w as s}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"執行","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/server-run.md","filePath":"zh-Hant/ktor/server-run.md","lastUpdated":1755457140000}'),u={name:"zh-Hant/ktor/server-run.md"};function E(v,a,m,y,f,b){const p=r("show-structure"),h=r("link-summary"),n=r("TabItem"),o=r("code-block"),d=r("Tabs");return g(),c("div",null,[a[4]||(a[4]=e("h1",{id:"執行",tabindex:"-1"},[t("執行 "),e("a",{class:"header-anchor",href:"#執行","aria-label":'Permalink to "執行"'},"​")],-1)),i(p,{for:"chapter",depth:"2"}),i(h,null,{default:s(()=>a[0]||(a[0]=[t(" 了解如何執行伺服器 Ktor 應用程式。 ")])),_:1}),a[5]||(a[5]=l('<p>執行 Ktor 伺服器應用程式時，請考慮以下特定事項：</p><ul><li>建立伺服器的方式 (<a href="./server-create-and-configure">建立並設定伺服器</a>) 會影響您是否能夠在執行 <a href="#package">打包好的 Ktor 應用程式</a> 時，透過傳遞命令列引數來覆寫伺服器參數。</li><li>Gradle/Maven 建置腳本在使用 <a href="./server-create-and-configure#engine-main">EngineMain</a> 啟動伺服器時，應指定 <code>main</code> 類別名稱。</li><li>在 <a href="./server-war">Servlet 容器</a> 內執行您的應用程式需要特定的 Servlet 設定。</li></ul><p>在本主題中，我們將探討這些配置細節，並向您展示如何在 IntelliJ IDEA 中以及作為打包應用程式來執行 Ktor 應用程式。</p><h2 id="specifics" tabindex="-1">配置細節 <a class="header-anchor" href="#specifics" aria-label="Permalink to &quot;配置細節 {id=&quot;specifics&quot;}&quot;">​</a></h2><h3 id="code-vs-config" tabindex="-1">配置：程式碼 vs 配置檔案 <a class="header-anchor" href="#code-vs-config" aria-label="Permalink to &quot;配置：程式碼 vs 配置檔案 {id=&quot;code-vs-config&quot;}&quot;">​</a></h3><p>執行 Ktor 應用程式取決於您用來 <a href="./server-create-and-configure">建立伺服器</a> 的方式 — <code>embeddedServer</code> 或 <code>EngineMain</code>：</p><ul><li>對於 <code>embeddedServer</code>，伺服器參數（例如 host address 和 port）是在程式碼中配置的，因此在執行應用程式時無法更改這些參數。</li><li>對於 <code>EngineMain</code>，Ktor 會從使用 <code>HOCON</code> 或 <code>YAML</code> 格式的外部檔案載入其配置。使用這種方法，您可以從命令列執行 <a href="#package">打包好的應用程式</a>，並透過傳遞相應的 <a href="./server-configuration-file#command-line">命令列引數</a> 來覆寫所需的伺服器參數。</li></ul><h3 id="gradle-maven" tabindex="-1">啟動 EngineMain：Gradle 和 Maven 特定事項 <a class="header-anchor" href="#gradle-maven" aria-label="Permalink to &quot;啟動 EngineMain：Gradle 和 Maven 特定事項 {id=&quot;gradle-maven&quot;}&quot;">​</a></h3><p>如果您使用 <code>EngineMain</code> 建立伺服器，您需要指定 <code>main</code> 函數，以便用所需的 <a href="./server-engines">engine</a> 啟動伺服器。 下面的 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">範例</a> 展示了用於使用 Netty engine 執行伺服器的 <code>main</code> 函數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.ktor.server.netty.EngineMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args)</span></span></code></pre></div><p>要使用 Gradle/Maven 執行 Ktor 伺服器，而不在 <code>main</code> 函數內部配置 engine，您需要在建置腳本中指定 main class name，如下所示：</p>',11)),i(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:s(()=>a[1]||(a[1]=[e("div",{class:"language-kotlin vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"kotlin"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"application"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),t(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mainClass."),e("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"io.ktor.server.netty.EngineMain"'),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),t(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),i(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:s(()=>a[2]||(a[2]=[e("div",{class:"language-groovy vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"groovy"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"mainClassName "),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),e("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "io.ktor.server.netty.EngineMain"')])])])],-1)])),_:1}),i(n,{title:"Maven","group-key":"maven"},{default:s(()=>a[3]||(a[3]=[e("div",{class:"language-xml vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"xml"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),e("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"properties"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),t(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    <"),e("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"main.class"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">io.ktor.server.netty.EngineMain</"),e("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"main.class"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),t(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"</"),e("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"properties"),e("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")])])])],-1)])),_:1}),a[6]||(a[6]=l('<h3 id="war-特定事項" tabindex="-1">WAR 特定事項 <a class="header-anchor" href="#war-特定事項" aria-label="Permalink to &quot;WAR 特定事項&quot;">​</a></h3><p>Ktor 允許您在應用程式中直接 <a href="./server-create-and-configure">建立並啟動伺服器</a>，使用所需的 engine（例如 Netty、Jetty 或 Tomcat）。在這種情況下，您的應用程式可以控制 engine 設定、連線和 SSL 選項。</p><p>與此方法相反，Servlet 容器應控制應用程式生命週期和連線設定。Ktor 提供了一個特殊的 <code>ServletApplicationEngine</code> engine，它將您的應用程式控制權委派給 Servlet 容器。您可以從 <a href="./server-war#configure-war">配置 WAR</a> 了解如何配置您的應用程式。</p><h2 id="run" tabindex="-1">執行應用程式 <a class="header-anchor" href="#run" aria-label="Permalink to &quot;執行應用程式 {id=&quot;run&quot;}&quot;">​</a></h2><blockquote><p>在開發過程中重新啟動伺服器可能需要一些時間。Ktor 允許您透過使用 <a href="./server-auto-reload">Auto-reload</a> 來克服此限制，它在程式碼變更時重新載入應用程式類別，並提供快速的回饋循環。</p></blockquote><h3 id="gradle-maven-run" tabindex="-1">使用 Gradle/Maven 執行應用程式 <a class="header-anchor" href="#gradle-maven-run" aria-label="Permalink to &quot;使用 Gradle/Maven 執行應用程式 {id=&quot;gradle-maven-run&quot;}&quot;">​</a></h3><p>要使用 Gradle 或 Maven 執行 Ktor 應用程式，請使用相應的 plugin：</p><ul><li>Gradle 的 <a href="./server-packaging">Application</a> plugin。對於 <a href="./server-native">Native 伺服器</a>，請使用 <a href="https://plugins.gradle.org/plugin/org.jetbrains.kotlin.multiplatform" target="_blank" rel="noreferrer">Kotlin Multiplatform</a> plugin。</li><li>Maven 的 <a href="https://www.mojohaus.org/exec-maven-plugin/" target="_blank" rel="noreferrer">Exec</a> plugin。</li></ul><blockquote><p>要了解如何在 IntelliJ IDEA 中執行 Ktor 應用程式，請參閱 IntelliJ IDEA 文件中的 <a href="https://www.jetbrains.com/help/idea/ktor.html#run_ktor_app" target="_blank" rel="noreferrer">執行 Ktor 應用程式</a> 部分。</p></blockquote><h3 id="package" tabindex="-1">執行打包好的應用程式 <a class="header-anchor" href="#package" aria-label="Permalink to &quot;執行打包好的應用程式 {id=&quot;package&quot;}&quot;">​</a></h3><p>在部署您的應用程式之前，您需要以 <a href="./server-deployment#packaging">打包</a> 部分中描述的其中一種方式將其打包。 從產生的 package 執行 Ktor 應用程式取決於 package 類型，可能如下所示：</p><ul><li>要執行打包在 fat JAR 中的 Ktor 伺服器並覆寫配置的 port，請執行以下命令：</li></ul><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sample-app.jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -port=8080</span></span></code></pre></div><ul><li>要執行使用 Gradle <a href="./server-packaging">Application</a> plugin 打包的應用程式，請執行相應的可執行檔：</li></ul>',14)),i(d,{group:"os"},{default:s(()=>[i(n,{title:"Linux/macOS","group-key":"unix"},{default:s(()=>[i(o,{code:"./ktor-sample"})]),_:1}),i(n,{title:"Windows","group-key":"windows"},{default:s(()=>[i(o,{code:"ktor-sample.bat"})]),_:1})]),_:1}),a[7]||(a[7]=l('<ul><li><p>要執行 Servlet Ktor 應用程式，請使用 <a href="./server-war#run">Gretty</a> plugin 的 <code>run</code> task。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div></li></ul>',1))])}const F=k(u,[["render",E]]);export{C as __pageData,F as default};
