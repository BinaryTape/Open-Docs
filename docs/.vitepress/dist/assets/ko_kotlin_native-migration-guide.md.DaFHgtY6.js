import{_ as b,C as l,c as y,o as v,ag as p,G as a,j as e,w as i,a as n}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/native-migration-guide.md","filePath":"ko/kotlin/native-migration-guide.md","lastUpdated":1755514048000}'),C={name:"ko/kotlin/native-migration-guide.md"};function x(q,t,E,F,_,T){const c=l("list"),u=l("def"),k=l("deflist"),g=l("show-structure"),o=l("include"),m=l("tldr"),f=l("link-summary"),s=l("tab"),r=l("emphasis"),d=l("snippet"),h=l("tabs");return v(),y("div",null,[t[34]||(t[34]=p('<h1 id="새로운-메모리-관리자로-마이그레이션" tabindex="-1">새로운 메모리 관리자로 마이그레이션 <a class="header-anchor" href="#새로운-메모리-관리자로-마이그레이션" aria-label="Permalink to &quot;새로운 메모리 관리자로 마이그레이션&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin 1.9.20부터 레거시 메모리 관리자 지원이 완전히 제거되었습니다. Kotlin 1.7.20부터 기본적으로 활성화된 현재 메모리 모델로 프로젝트를 마이그레이션하세요.</p></div><p>이 가이드는 새로운 <a href="/ko/kotlin/native-memory-manager">Kotlin/Native 메모리 관리자</a>를 레거시 관리자와 비교하고 프로젝트 마이그레이션 방법을 설명합니다.</p><p>새로운 메모리 관리자에서 가장 눈에 띄는 변경 사항은 객체 공유에 대한 제한이 해제되었다는 것입니다. 객체를 스레드 간에 공유하기 위해 더 이상 고정(freeze)할 필요가 없으며, 구체적으로 다음과 같습니다:</p><ul><li>최상위 프로퍼티는 <code>@SharedImmutable</code>을 사용하지 않고도 어떤 스레드에서든 접근하고 수정할 수 있습니다.</li><li>인터롭(interop)을 통해 전달되는 객체는 고정하지 않고도 어떤 스레드에서든 접근하고 수정할 수 있습니다.</li><li><code>Worker.executeAfter</code>는 더 이상 작업이 고정될 것을 요구하지 않습니다.</li><li><code>Worker.execute</code>는 더 이상 생산자가 격리된 객체 서브그래프를 반환할 것을 요구하지 않습니다.</li><li><code>AtomicReference</code> 및 <code>FreezableAtomicReference</code>를 포함하는 참조 주기는 메모리 누수를 유발하지 않습니다.</li></ul><p>손쉬운 객체 공유 외에도 새로운 메모리 관리자는 다른 주요 변경 사항도 제공합니다:</p><ul><li>전역 프로퍼티는 해당 파일에 처음 접근할 때 지연 초기화됩니다. 이전에는 전역 프로퍼티가 프로그램 시작 시 초기화되었습니다. 이 문제를 해결하기 위해, 프로그램 시작 시 초기화되어야 하는 프로퍼티를 <code>@EagerInitialization</code> 애노테이션으로 마크할 수 있습니다. 사용하기 전에 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-eager-initialization/" target="_blank" rel="noreferrer">문서</a>를 확인하세요.</li><li><code>by lazy {}</code> 프로퍼티는 스레드 안전 모드를 지원하며 무한 재귀를 처리하지 않습니다.</li><li><code>Worker.executeAfter</code>의 <code>operation</code>에서 탈출하는 예외는 다른 런타임 부분과 동일하게 처리됩니다. 사용자 정의 처리되지 않은 예외 훅을 실행하려고 시도하거나, 훅을 찾을 수 없거나 훅 자체가 예외를 발생시킨 경우 프로그램을 종료합니다.</li><li>고정(Freezing)은 더 이상 사용되지 않으며 항상 비활성화됩니다.</li></ul><p>레거시 메모리 관리자에서 프로젝트를 마이그레이션하려면 다음 지침을 따르세요:</p><h2 id="kotlin-업데이트" tabindex="-1">Kotlin 업데이트 <a class="header-anchor" href="#kotlin-업데이트" aria-label="Permalink to &quot;Kotlin 업데이트&quot;">​</a></h2><p>새로운 Kotlin/Native 메모리 관리자는 Kotlin 1.7.20부터 기본적으로 활성화되었습니다. Kotlin 버전을 확인하고 필요한 경우 <a href="/ko/kotlin/releases#update-to-a-new-kotlin-version">최신 버전으로 업데이트</a>하세요.</p><h2 id="의존성-업데이트" tabindex="-1">의존성 업데이트 <a class="header-anchor" href="#의존성-업데이트" aria-label="Permalink to &quot;의존성 업데이트&quot;">​</a></h2>',11)),a(k,{style:{}},{default:i(()=>[a(u,{title:"kotlinx.coroutines"},{default:i(()=>[t[1]||(t[1]=e("p",null,[n("버전 1.6.0 이상으로 업데이트하세요. "),e("code",null,"native-mt"),n(" 접미사가 있는 버전은 사용하지 마세요.")],-1)),t[2]||(t[2]=e("p",null,"새로운 메모리 관리자와 관련된 몇 가지 특이 사항도 염두에 두어야 합니다:",-1)),a(c,null,{default:i(()=>t[0]||(t[0]=[e("li",null,"고정이 필요하지 않으므로 모든 공통 프리미티브(채널, 플로우, 코루틴)는 Worker 경계를 통해 작동합니다.",-1),e("li",null,[e("code",null,"Dispatchers.Default"),n("는 Linux 및 Windows에서는 Worker 풀로 지원되고 Apple 대상에서는 전역 큐로 지원됩니다.")],-1),e("li",null,[n("Worker로 지원되는 코루틴 디스패처를 생성하려면 "),e("code",null,"newSingleThreadContext"),n("를 사용하세요.")],-1),e("li",null,[e("code",null,"N"),n("개의 Worker 풀로 지원되는 코루틴 디스패처를 생성하려면 "),e("code",null,"newFixedThreadPoolContext"),n("를 사용하세요.")],-1),e("li",null,[e("code",null,"Dispatchers.Main"),n("은 Darwin에서는 메인 큐로 지원되고 다른 플랫폼에서는 독립 Worker로 지원됩니다.")],-1)])),_:1})]),_:1}),a(u,{title:"Ktor"},{default:i(()=>t[3]||(t[3]=[n(" 버전 2.0 이상으로 업데이트하세요. ")])),_:1}),a(u,{title:"다른 의존성"},{default:i(()=>t[4]||(t[4]=[e("p",null,"대부분의 라이브러리는 변경 없이 작동해야 하지만, 예외가 있을 수 있습니다.",-1),e("p",null,"의존성을 최신 버전으로 업데이트하고, 레거시 및 새로운 메모리 관리자를 위한 라이브러리 버전 간에 차이가 없는지 확인하세요.",-1)])),_:1})]),_:1}),t[35]||(t[35]=p('<h2 id="코드-업데이트" tabindex="-1">코드 업데이트 <a class="header-anchor" href="#코드-업데이트" aria-label="Permalink to &quot;코드 업데이트&quot;">​</a></h2><p>새로운 메모리 관리자를 지원하려면 영향받는 API 사용을 제거하세요:</p><table tabindex="0"><thead><tr><th>이전 API</th><th>수행할 작업</th></tr></thead><tbody><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-shared-immutable/" target="_blank" rel="noreferrer"><code>@SharedImmutable</code></a></td><td>모든 사용을 제거할 수 있지만, 새로운 메모리 관리자에서 이 API를 사용해도 경고는 없습니다.</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-freezable-atomic-reference/" target="_blank" rel="noreferrer"><code>FreezableAtomicReference</code> 클래스</a></td><td>대신 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-atomic-reference/" target="_blank" rel="noreferrer"><code>AtomicReference</code></a>를 사용하세요.</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-freezing-exception/" target="_blank" rel="noreferrer"><code>FreezingException</code> 클래스</a></td><td>모든 사용을 제거하세요.</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-invalid-mutability-exception/" target="_blank" rel="noreferrer"><code>InvalidMutabilityException</code> 클래스</a></td><td>모든 사용을 제거하세요.</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-incorrect-dereference-exception/" target="_blank" rel="noreferrer"><code>IncorrectDereferenceException</code> 클래스</a></td><td>모든 사용을 제거하세요.</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/freeze.html" target="_blank" rel="noreferrer"><code>freeze()</code> 함수</a></td><td>모든 사용을 제거하세요.</td></tr><tr><td><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/is-frozen.html" target="_blank" rel="noreferrer"><code>isFrozen</code> 프로퍼티</a></td><td>모든 <a href="#" title="title: 새로운 메모리 관리자로 마이그레이션">//</a>: # (title: Custom client plugins)</td></tr></tbody></table>',3)),a(g,{for:"chapter",depth:"2"}),a(m,null,{default:i(()=>[a(o,{from:"lib.topic","element-id":"download_example"})]),_:1}),a(f,null,{default:i(()=>t[5]||(t[5]=[n(" Learn how to create your own custom client plugin. ")])),_:1}),t[36]||(t[36]=p(`<p>Starting with v2.2.0, Ktor provides a new API for creating custom client <a href="/ko/kotlin/client-plugins">plugins</a>. In general, this API doesn&#39;t require an understanding of internal Ktor concepts, such as pipelines, phases, and so on. Instead, you have access to different stages of <a href="#call-handling">handling requests and responses</a> using a set of handlers, such as <code>onRequest</code>, <code>onResponse</code>, and so on.</p><h2 id="first-plugin" tabindex="-1">Create and install your first plugin <a class="header-anchor" href="#first-plugin" aria-label="Permalink to &quot;Create and install your first plugin {id=&quot;first-plugin&quot;}&quot;">​</a></h2><p>In this section, we&#39;ll demonstrate how to create and install your first plugin that adds a custom header to each <a href="/ko/kotlin/client-requests">request</a>:</p><ol><li><p>To create a plugin, call the <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.api/create-client-plugin.html" target="_blank" rel="noreferrer">createClientPlugin</a> function and pass a plugin name as an argument:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.plugins</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.api.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CustomHeaderPlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createClientPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CustomHeaderPlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Configure the plugin ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This function returns the <code>ClientPlugin</code> instance that will be used to install the plugin.</p></li><li><p>To append a custom header to each request, you can use the <code>onRequest</code> handler, which provides access to request parameters:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div></li><li><p>To <a href="/ko/kotlin/client-plugins#install">install the plugin</a>, pass the created <code>ClientPlugin</code> instance to the <code>install</code> function inside the client&#39;s configuration block:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.plugins.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CustomHeaderPlugin)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>You can find the full example here: <a href="https://github.com/ktorio/ktor-documentation/blob/%25ktor_version%25/codeSnippets/snippets/client-custom-plugin/src/main/kotlin/com/example/plugins/CustomHeader.kt" target="_blank" rel="noreferrer">CustomHeader.kt</a>. In the following sections, we&#39;ll look at how to provide a plugin configuration and handle requests and responses.</p><h2 id="plugin-configuration" tabindex="-1">Provide plugin configuration <a class="header-anchor" href="#plugin-configuration" aria-label="Permalink to &quot;Provide plugin configuration {id=&quot;plugin-configuration&quot;}&quot;">​</a></h2><p>The <a href="#first-plugin">previous section</a> demonstrates how to create a plugin that appends a predefined custom header to each response. Let&#39;s make this plugin more useful and provide a configuration for passing any custom header name and value:</p><ol><li><p>First, you need to define a configuration class:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div></li><li><p>To use this configuration in a plugin, pass a configuration class reference to <code>createApplicationPlugin</code>:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p>Given that plugin configuration fields are mutable, saving them in local variables is recommended.</p></li><li><p>Finally, you can install and configure the plugin as follows:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div></li></ol><blockquote><p>You can find the full example here: <a href="https://github.com/ktorio/ktor-documentation/blob/%25ktor_version%25/codeSnippets/snippets/client-custom-plugin/src/main/kotlin/com/example/plugins/CustomHeaderConfigurable.kt" target="_blank" rel="noreferrer">CustomHeaderConfigurable.kt</a>.</p></blockquote><h2 id="call-handling" tabindex="-1">Handle requests and responses <a class="header-anchor" href="#call-handling" aria-label="Permalink to &quot;Handle requests and responses {id=&quot;call-handling&quot;}&quot;">​</a></h2><p>Custom plugins provide access to different stages of handling requests and responses using a set of dedicated handlers, for example:</p><ul><li><code>onRequest</code> and <code>onResponse</code> allow you to handle requests and responses, respectively.</li><li><code>transformRequestBody</code> and <code>transformResponseBody</code> can be used to apply necessary transformations to request and response bodies.</li></ul><p>There is also the <code>on(...)</code> handler that allows you to invoke specific hooks that might be useful to handle other stages of a call. The tables below list all handlers in the order they are executed:</p>`,13)),a(h,null,{default:i(()=>[a(s,{title:"Basic hooks"},{default:i(()=>[e("table",null,[t[6]||(t[6]=e("tr",null,[e("td",null," Handler "),e("td",null," Description ")],-1)),a(o,{from:"client-custom-plugins.md","element-id":"onRequest"}),a(o,{from:"client-custom-plugins.md","element-id":"transformRequestBody"}),a(o,{from:"client-custom-plugins.md","element-id":"onResponse"}),a(o,{from:"client-custom-plugins.md","element-id":"transformResponseBody"}),a(o,{from:"client-custom-plugins.md","element-id":"onClose"})])]),_:1}),a(s,{title:"All hooks"},{default:i(()=>[e("table",null,[t[27]||(t[27]=e("tr",null,[e("td",null," Handler "),e("td",null," Description ")],-1)),t[28]||(t[28]=e("tr",null,[e("td",null,[e("code",null,"on(SetupRequest)")]),e("td",null,[n(" The "),e("code",null,"SetupRequest"),n(" hook is executed first in request processing. ")])],-1)),a(d,{id:"onRequest"},{default:i(()=>[e("tr",null,[t[9]||(t[9]=e("td",null,[e("code",null,"onRequest")],-1)),e("td",null,[t[8]||(t[8]=e("p",null,[n(" This handler is executed for each HTTP "),e("a",{href:"/ko/kotlin/client-requests"},"request"),n(" and allows you to modify it. ")],-1)),e("p",null,[a(r,null,{default:i(()=>t[7]||(t[7]=[n(" Example: "),e("a",{anchor:"example-custom-header"},null,-1)])),_:1})])])])]),_:1}),a(d,{id:"transformRequestBody"},{default:i(()=>[e("tr",null,[t[12]||(t[12]=e("td",null,[e("code",null,"transformRequestBody")],-1)),e("td",null,[t[11]||(t[11]=e("p",null,[n(" Allows you to transform a "),e("a",{href:"/ko/kotlin/client-requests",anchor:"body"},"request body"),n(". In this handler, you need to serialize the body into "),e("a",{href:"https://api.ktor.io/ktor-http/io.ktor.http.content/-outgoing-content/index.html"},"OutgoingContent"),n(" (for example, "),e("code",null,"TextContent"),n(", "),e("code",null,"ByteArrayContent"),n(", or "),e("code",null,"FormDataContent"),n(") or return "),e("code",null,"null"),n(" if your transformation is not applicable. ")],-1)),e("p",null,[a(r,null,{default:i(()=>t[10]||(t[10]=[n(" Example: "),e("a",{anchor:"data-transformation"},null,-1)])),_:1})])])])]),_:1}),e("tr",null,[t[15]||(t[15]=e("td",null,[e("code",null,"on(Send)")],-1)),e("td",null,[t[14]||(t[14]=e("p",null,[n(" The "),e("code",null,"Send"),n(" hook provides the ability to inspect a response and initiate additional requests if needed. This might be useful for handling redirects, retrying requests, authentication, and so on. ")],-1)),e("p",null,[a(r,null,{default:i(()=>t[13]||(t[13]=[n(" Example: "),e("a",{anchor:"authentication"},null,-1)])),_:1})])])]),e("tr",null,[t[19]||(t[19]=e("td",null,[e("code",null,"on(SendingRequest)")],-1)),e("td",null,[t[17]||(t[17]=e("p",null,[n(" The "),e("code",null,"SendingRequest"),n(" hook is executed for every request, even if it's not initiated by a user. For example, if a request results in a redirect, the "),e("code",null,"onRequest"),n(" handler will be executed only for the original request, while "),e("code",null,"on(SendingRequest)"),n(" will be executed for both original and redirected requests. Similarly, if you used "),e("code",null,"on(Send)"),n(" to initiate an additional request, handlers will be ordered as follows: ")],-1)),t[18]||(t[18]=e("div",{class:"language-Console vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"Console"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"--> onRequest")]),n(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"--> on(Send)")]),n(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"--> on(SendingRequest)")]),n(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"<-- onResponse")]),n(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"--> on(SendingRequest)")]),n(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"<-- onResponse")])])])],-1)),e("p",null,[a(r,null,{default:i(()=>t[16]||(t[16]=[n(" Examples: "),e("a",{anchor:"example-log-headers"},null,-1),n(", "),e("a",{anchor:"example-response-time"},null,-1)])),_:1})])])]),a(d,{id:"onResponse"},{default:i(()=>[e("tr",null,[t[22]||(t[22]=e("td",null,[e("code",null,"onResponse")],-1)),e("td",null,[t[21]||(t[21]=e("p",null,[n(" This handler is executed for each incoming HTTP "),e("a",{href:"/ko/kotlin/client-requests"},"response"),n(" and allows you to inspect it in various ways: log a response, save cookies, and so on. ")],-1)),e("p",null,[a(r,null,{default:i(()=>t[20]||(t[20]=[n(" Examples: "),e("a",{anchor:"example-log-headers"},null,-1),n(", "),e("a",{anchor:"example-response-time"},null,-1)])),_:1})])])])]),_:1}),a(d,{id:"transformResponseBody"},{default:i(()=>[e("tr",null,[t[25]||(t[25]=e("td",null,[e("code",null,"transformResponseBody")],-1)),e("td",null,[t[24]||(t[24]=e("p",null,[n(" Allows you to transform a "),e("a",{href:"/ko/kotlin/client-responses",anchor:"body"},"response body"),n(". This handler is invoked for each "),e("code",null,"HttpResponse.body"),n(" call. You need to deserialize the body into an instance of "),e("code",null,"requestedType"),n(" or return "),e("code",null,"null"),n(" if your transformation is not applicable. ")],-1)),e("p",null,[a(r,null,{default:i(()=>t[23]||(t[23]=[n(" Example: "),e("a",{anchor:"data-transformation"},null,-1)])),_:1})])])])]),_:1}),a(d,{id:"onClose"},{default:i(()=>t[26]||(t[26]=[e("tr",null,[e("td",null,[e("code",null,"onClose")]),e("td",null,[n(" Allows you to clean resources allocated by this plugin. This handler is called when the client is "),e("a",{href:"/ko/kotlin/client-create-and-configure",anchor:"close-client"},"closed"),n(". ")])],-1)])),_:1})])]),_:1})]),_:1}),t[37]||(t[37]=p(`<h3 id="call-state" tabindex="-1">Share call state <a class="header-anchor" href="#call-state" aria-label="Permalink to &quot;Share call state {id=&quot;call-state&quot;}&quot;">​</a></h3><p>Custom plugins allow you to share any value related to a call so that you can access this value inside any handler processing this call. This value is stored as an attribute with a unique key in the <code>call.attributes</code> collection. The example below demonstrates how to use attributes to calculate the time between sending a request and receiving a response:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><p>You can find the full example here: <a href="https://github.com/ktorio/ktor-documentation/blob/%25ktor_version%25/codeSnippets/snippets/client-custom-plugin/src/main/kotlin/com/example/plugins/ResponseTime.kt" target="_blank" rel="noreferrer">ResponseTime.kt</a>.</p><h2 id="client-config" tabindex="-1">Access client configuration <a class="header-anchor" href="#client-config" aria-label="Permalink to &quot;Access client configuration {id=&quot;client-config&quot;}&quot;">​</a></h2><p>You can access your client configuration using the <code>client</code> property, which returns the <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client/-http-client/index.html" target="_blank" rel="noreferrer">HttpClient</a> instance. The example below shows how to get the <a href="/ko/kotlin/client-proxy">proxy address</a> used by the client:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.api.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SimplePlugin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createClientPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SimplePlugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> proxyAddress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.engineConfig.proxy?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Proxy address: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$proxyAddress</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples {id=&quot;examples&quot;}&quot;">​</a></h2><p>The code samples below demonstrate several examples of custom plugins. You can find the resulting project here: <a href="https://github.com/ktorio/ktor-documentation/blob/%25ktor_version%25/codeSnippets/snippets/client-custom-plugin/" target="_blank" rel="noreferrer">client-custom-plugin</a>.</p><h3 id="example-custom-header" tabindex="-1">Custom header <a class="header-anchor" href="#example-custom-header" aria-label="Permalink to &quot;Custom header {id=&quot;example-custom-header&quot;}&quot;">​</a></h3><p>Shows how to create a plugin that adds a custom header to each request:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h3 id="example-log-headers" tabindex="-1">Logging headers <a class="header-anchor" href="#example-log-headers" aria-label="Permalink to &quot;Logging headers {id=&quot;example-log-headers&quot;}&quot;">​</a></h3><p>Demonstrates how to create a plugin that logs request and response headers:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h3 id="example-response-time" tabindex="-1">Response time <a class="header-anchor" href="#example-response-time" aria-label="Permalink to &quot;Response time {id=&quot;example-response-time&quot;}&quot;">​</a></h3><p>Shows how to create a plugin that measures the time between sending a request and receiving a response:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h3 id="data-transformation" tabindex="-1">Data transformation <a class="header-anchor" href="#data-transformation" aria-label="Permalink to &quot;Data transformation {id=&quot;data-transformation&quot;}&quot;">​</a></h3><p>Shows how to transform request and response bodies using the <code>transformRequestBody</code> and <code>transformResponseBody</code> hooks:</p>`,20)),a(h,null,{default:i(()=>[a(s,{title:"DataTransformation.kt"},{default:i(()=>t[29]||(t[29]=[e("div",{class:"language-kotlin vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"kotlin"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"})])])],-1)])),_:1}),a(s,{title:"Application.kt"},{default:i(()=>t[30]||(t[30]=[e("div",{class:"language-kotlin vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"kotlin"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"})])])],-1)])),_:1}),a(s,{title:"User.kt"},{default:i(()=>t[31]||(t[31]=[e("div",{class:"language-kotlin vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"kotlin"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"})])])],-1)])),_:1})]),_:1}),t[38]||(t[38]=e("p",null,[n("You can find the full example here: "),e("a",{href:"https://github.com/ktorio/ktor-documentation/tree/%25ktor_version%25/codeSnippets/snippets/client-custom-plugin-data-transformation",target:"_blank",rel:"noreferrer"},"client-custom-plugin-data-transformation"),n(".")],-1)),t[39]||(t[39]=e("h3",{id:"authentication",tabindex:"-1"},[n("Authentication "),e("a",{class:"header-anchor",href:"#authentication","aria-label":'Permalink to "Authentication {id="authentication"}"'},"​")],-1)),t[40]||(t[40]=e("p",null,[n("A sample Ktor project showing how to use the "),e("code",null,"on(Send)"),n(" hook to add a bearer token to the "),e("code",null,"Authorization"),n(" header if an unauthorized response is received from the server:")],-1)),a(h,null,{default:i(()=>[a(s,{title:"Auth.kt"},{default:i(()=>t[32]||(t[32]=[e("div",{class:"language-kotlin vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"kotlin"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"})])])],-1)])),_:1}),a(s,{title:"Application.kt"},{default:i(()=>t[33]||(t[33]=[e("div",{class:"language-kotlin vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"kotlin"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[e("code",null,[e("span",{class:"line"})])])],-1)])),_:1})]),_:1}),t[41]||(t[41]=p('<p>You can find the full example here: <a href="https://github.com/ktorio/ktor-documentation/tree/%25ktor_version%25/codeSnippets/snippets/client-custom-plugin-auth" target="_blank" rel="noreferrer">client-custom-plugin-auth</a>.사용을 제거할 수 있습니다. 고정이 사용 중단되었으므로, 이 프로퍼티는 항상 <code>false</code>를 반환합니다. | | <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/ensure-never-frozen.html" target="_blank" rel="noreferrer"><code>ensureNeverFrozen()</code> 함수</a> | 모든 사용을 제거하세요. | | <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/atomic-lazy.html" target="_blank" rel="noreferrer"><code>atomicLazy()</code> 함수</a> | 대신 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/lazy.html" target="_blank" rel="noreferrer"><code>lazy()</code></a>를 사용하세요. | | <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-mutable-data/" target="_blank" rel="noreferrer"><code>MutableData</code> 클래스</a> | 대신 일반 컬렉션을 사용하세요. | | <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-worker-bound-reference/" target="_blank" rel="noreferrer"><code>WorkerBoundReference&lt;out T : Any&gt;</code> 클래스</a> | <code>T</code>를 직접 사용하세요. | | <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-detached-object-graph/" target="_blank" rel="noreferrer"><code>DetachedObjectGraph&lt;T&gt;</code> 클래스</a> | <code>T</code>를 직접 사용하세요. C 인터롭(interop)을 통해 값을 전달하려면 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlinx.cinterop/-stable-ref/" target="_blank" rel="noreferrer"><code>StableRef</code> 클래스</a>를 사용하세요. |</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><ul><li><a href="/ko/kotlin/native-memory-manager">새로운 메모리 관리자에 대해 자세히 알아보기</a></li><li><a href="/ko/kotlin/native-arc-integration">Swift/Objective-C ARC와의 통합 세부 정보 확인</a></li><li><a href="/ko/kotlin/native-faq#how-do-i-reference-objects-safely-from-different-coroutines">다른 코루틴에서 객체를 안전하게 참조하는 방법 알아보기</a></li></ul>',3))])}const P=b(C,[["render",x]]);export{A as __pageData,P as default};
