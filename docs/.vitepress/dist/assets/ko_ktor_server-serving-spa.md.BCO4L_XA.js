import{_ as r,C as i,c as k,o,j as a,G as n,ag as d,a as e,w as t}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-serving-spa.md","filePath":"ko/ktor/server-serving-spa.md","lastUpdated":1755457140000}'),c={name:"ko/ktor/server-serving-spa.md"};function g(u,s,E,F,y,m){const p=i("show-structure"),l=i("tldr"),h=i("link-summary");return o(),k("div",null,[s[2]||(s[2]=a("h1",{id:"단일-페이지-애플리케이션-제공",tabindex:"-1"},[e("단일 페이지 애플리케이션 제공 "),a("a",{class:"header-anchor",href:"#단일-페이지-애플리케이션-제공","aria-label":'Permalink to "단일 페이지 애플리케이션 제공"'},"​")],-1)),n(p,{for:"chapter",depth:"2"}),n(l,null,{default:t(()=>s[0]||(s[0]=[a("p",null,[a("b",null,"코드 예시"),e(": "),a("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/single-page-application"}," single-page-application ")],-1)])),_:1}),n(h,null,{default:t(()=>s[1]||(s[1]=[e(" Ktor는 React, Angular, Vue 등을 포함한 단일 페이지 애플리케이션을 제공하는 기능을 제공합니다. ")])),_:1}),s[3]||(s[3]=d(`<p>Ktor는 React, Angular, Vue를 포함한 단일 페이지 애플리케이션을 제공하는 기능을 제공합니다.</p><h2 id="add_dependencies" tabindex="-1">종속성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;종속성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>단일 페이지 애플리케이션을 제공하려면 <a href="./server-dependencies#add-ktor-dependencies">ktor-server-core</a> 종속성만 필요합니다. 특정 종속성은 필요하지 않습니다.</p><h2 id="configure" tabindex="-1">애플리케이션 제공 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;애플리케이션 제공 {id=&quot;configure&quot;}&quot;">​</a></h2><p>단일 페이지 애플리케이션을 제공하려면 콘텐츠를 제공할 위치(로컬 파일 시스템 또는 클래스패스)를 정의해야 합니다. 단일 페이지 애플리케이션이 포함된 폴더/리소스 패키지를 최소한 지정해야 합니다.</p><h3 id="serve-framework" tabindex="-1">프레임워크별 애플리케이션 제공 <a class="header-anchor" href="#serve-framework" aria-label="Permalink to &quot;프레임워크별 애플리케이션 제공 {id=&quot;serve-framework&quot;}&quot;">​</a></h3><p>React, Angular, Vue 등 특정 프레임워크를 사용하여 생성된 단일 페이지 애플리케이션의 빌드를 제공할 수 있습니다. <code>react-app</code> 폴더가 프로젝트 루트에 React 애플리케이션을 포함하고 있다고 가정해 봅시다. 애플리케이션은 다음 구조를 가지며, <code>index.html</code> 파일이 메인 페이지입니다:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>react-app</span></span>
<span class="line"><span>├── index.html</span></span>
<span class="line"><span>├── ...</span></span>
<span class="line"><span>└── static</span></span>
<span class="line"><span>    └── ...</span></span></code></pre></div><p>이 애플리케이션을 제공하려면 <a href="./server-routing">routing</a> 블록 내에서 <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.http.content/single-page-application.html" target="_blank" rel="noreferrer">singlePageApplication</a>을 호출하고 폴더 이름을 <code>react</code> 함수에 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.http.content.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        singlePageApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            react</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;react-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Ktor는 <code>index.html</code>을 자동으로 찾습니다. 기본 페이지를 사용자 정의하는 방법을 알아보려면 <a href="#serve-customize">제공 설정 사용자 정의</a>를 참조하세요.</p><blockquote><p>다른 프레임워크의 경우 <code>angular</code>, <code>vue</code>, <code>ember</code> 등 해당하는 함수를 사용하세요.</p></blockquote><h3 id="serve-customize" tabindex="-1">제공 설정 사용자 정의 <a class="header-anchor" href="#serve-customize" aria-label="Permalink to &quot;제공 설정 사용자 정의 {id=&quot;serve-customize&quot;}&quot;">​</a></h3><p>리소스에서 단일 페이지 애플리케이션을 제공하는 방법을 설명하기 위해, 애플리케이션이 <code>sample-web-app</code> 리소스 패키지 내에 위치하며 다음 구조를 가진다고 가정해 봅시다:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sample-web-app</span></span>
<span class="line"><span>├── main.html</span></span>
<span class="line"><span>├── ktor_logo.png</span></span>
<span class="line"><span>├── css</span></span>
<span class="line"><span>│   └──styles.css</span></span>
<span class="line"><span>└── js</span></span>
<span class="line"><span>    └── script.js</span></span></code></pre></div><p>이 애플리케이션을 제공하려면 다음 설정이 사용됩니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.http.content.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        singlePageApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            useResources </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            filesPath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sample-web-app&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            defaultPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main.html&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            ignoreFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">endsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>useResources</code>: 리소스 패키지에서 애플리케이션 제공을 활성화합니다.</li><li><code>filesPath</code>: 애플리케이션이 위치한 경로를 지정합니다.</li><li><code>defaultPage</code>: <code>main.html</code>을 제공할 기본 리소스로 지정합니다.</li><li><code>ignoreFiles</code>: <code>.txt</code>로 끝나는 경로를 무시합니다.</li></ul><p>전체 예시는 여기에서 찾을 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/single-page-application" target="_blank" rel="noreferrer">single-page-application</a>.</p>`,19))])}const b=r(c,[["render",g]]);export{C as __pageData,b as default};
