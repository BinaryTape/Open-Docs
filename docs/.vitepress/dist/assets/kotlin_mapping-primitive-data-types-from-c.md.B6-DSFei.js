import{_ as d}from"./chunks/icon-1.K8qzZaho.js";import{_ as E}from"./chunks/icon-2-todo.CF_tKCD9.js";import{_ as o}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as g}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as y,C as l,c,o as F,j as i,G as n,ag as h,a as s,w as t}from"./chunks/framework.Bksy39di.js";const K=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/mapping-primitive-data-types-from-c.md","filePath":"kotlin/mapping-primitive-data-types-from-c.md","lastUpdated":1754307826000}'),u={name:"kotlin/mapping-primitive-data-types-from-c.md"};function C(A,a,m,b,D,v){const p=l("tldr"),k=l("tab"),r=l("tabs"),e=l("shortcut");return F(),c("div",null,[a[13]||(a[13]=i("h1",{id:"从-c-语言映射原生数据类型-–-教程",tabindex:"-1"},[s("从 C 语言映射原生数据类型 – 教程 "),i("a",{class:"header-anchor",href:"#从-c-语言映射原生数据类型-–-教程","aria-label":'Permalink to "从 C 语言映射原生数据类型 – 教程"'},"​")],-1)),n(p,null,{default:t(()=>a[0]||(a[0]=[i("p",null,[s("这是"),i("strong",null,"Kotlin 与 C 映射"),s("教程系列的第一个部分。")],-1),i("p",null,[i("img",{src:d,width:"20",alt:"第一步"}),s(),i("strong",null,"从 C 语言映射原生数据类型"),i("br"),i("img",{src:E,width:"20",alt:"第二步"}),s(),i("a",{href:"/kotlin/mapping-struct-union-types-from-c"},"从 C 语言映射结构体与联合体类型"),i("br"),i("img",{src:o,width:"20",alt:"第三步"}),s(),i("a",{href:"/kotlin/mapping-function-pointers-from-c"},"映射函数指针"),i("br"),i("img",{src:g,width:"20",alt:"第四步"}),s(),i("a",{href:"/kotlin/mapping-strings-from-c"},"从 C 语言映射字符串"),i("br")],-1)])),_:1}),a[14]||(a[14]=h(`<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>C 库导入处于 <a href="/kotlin/native-c-interop-stability">Beta</a> 阶段。所有由 cinterop 工具从 C 库生成的 Kotlin 声明都应带有 <code>@ExperimentalForeignApi</code> 注解。 随 Kotlin/Native 附带的原生平台库（例如 Foundation、UIKit 和 POSIX）只对部分 API 要求选择启用。</p></div><p>让我们探究哪些 C 数据类型在 Kotlin/Native 中可见，反之亦然，并研究 Kotlin/Native 以及<a href="/kotlin/gradle-configure-project#targeting-multiple-platforms">多平台</a> Gradle 构建中与 C 互操作相关的高级用例。</p><p>在本教程中，你将：</p><ul><li><a href="#types-in-c-language">了解 C 语言中的数据类型</a></li><li><a href="#create-a-c-library">创建一个在其导出中使用了这些类型的 C 库</a></li><li><a href="#inspect-generated-kotlin-apis-for-a-library">探查从 C 库生成的 Kotlin API</a></li></ul><p>你可以使用命令行直接或通过脚本文件（例如 <code>.sh</code> 或 <code>.bat</code> 文件）生成 Kotlin 库。然而，对于拥有数百个文件和库的大型项目而言，这种方法无法很好地伸缩。使用构建系统可以通过下载和缓存 Kotlin/Native 编译器二进制文件和带有传递性依赖项的库，以及运行编译器和测试来简化此过程。Kotlin/Native 可以通过 <a href="/kotlin/gradle-configure-project#targeting-multiple-platforms">Kotlin 多平台插件</a>使用 <a href="https://gradle.org" target="_blank" rel="noreferrer">Gradle</a> 构建系统。</p><h2 id="c-语言中的类型" tabindex="-1">C 语言中的类型 <a class="header-anchor" href="#c-语言中的类型" aria-label="Permalink to &quot;C 语言中的类型&quot;">​</a></h2><p>C 编程语言具有以下<a href="https://en.wikipedia.org/wiki/C_data_types" target="_blank" rel="noreferrer">数据类型</a>：</p><ul><li>基本类型：<code>char, int, float, double</code>，带有修饰符 <code>signed, unsigned, short, long</code></li><li>结构体、联合体、数组</li><li>指针</li><li>函数指针</li></ul><p>还有更多特定类型：</p><ul><li>布尔类型（来自 <a href="https://en.wikipedia.org/wiki/C99" target="_blank" rel="noreferrer">C99</a>）</li><li><code>size_t</code> 和 <code>ptrdiff_t</code>（以及 <code>ssize_t</code>）</li><li>固定宽度整型，例如 <code>int32_t</code> 或 <code>uint64_t</code>（来自 <a href="https://en.wikipedia.org/wiki/C99" target="_blank" rel="noreferrer">C99</a>）</li></ul><p>C 语言中还有以下类型限定符：<code>const</code>、<code>volatile</code>、<code>restrict</code>、<code>atomic</code>。</p><p>让我们看看哪些 C 数据类型在 Kotlin 中可见。</p><h2 id="创建-c-库" tabindex="-1">创建 C 库 <a class="header-anchor" href="#创建-c-库" aria-label="Permalink to &quot;创建 C 库&quot;">​</a></h2><p>在本教程中，你不会创建 <code>lib.c</code> 源文件，只有当你想要编译和运行 C 库时才需要该文件。对于此设置，你只需要运行 <a href="/kotlin/native-c-interop">cinterop 工具</a>所需的 <code>.h</code> 头文件。</p><p>cinterop 工具会为每组 <code>.h</code> 文件生成一个 Kotlin/Native 库（一个 <code>.klib</code> 文件）。生成的库有助于桥接从 Kotlin/Native 到 C 的调用。它包含与 <code>.h</code> 文件中的定义相对应的 Kotlin 声明。</p><p>要创建 C 库：</p><ol><li><p>为你未来的项目创建一个空文件夹。</p></li><li><p>在其中创建一个 <code>lib.h</code> 文件，其内容如下，以了解 C 函数如何映射到 Kotlin：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifndef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LIB2_H_INCLUDED</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LIB2_H_INCLUDED</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> short</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doubles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span></code></pre></div><p>该文件没有 <code>extern &quot;C&quot;</code> 代码块，本示例不需要它，但如果你使用 C++ 和重载函数，则可能需要。关于更多细节，请参见此 <a href="https://stackoverflow.com/questions/1041866/what-is-the-effect-of-extern-c-in-c" target="_blank" rel="noreferrer">Stackoverflow 帖子</a>。</p></li><li><p>创建 <code>lib.def</code> <a href="/kotlin/native-definition-file">定义文件</a>，其内容如下：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib.h</span></span></code></pre></div></li><li><p>将宏或其他 C 定义包含在 cinterop 工具生成的代码中可能会有所帮助。这样，方法体也会被编译并完全包含在二进制文件中。通过此特性，你可以创建可运行的示例，而无需 C 编译器。</p><p>为此，请将 <code>lib.h</code> 文件中的 C 函数实现添加到新的 <code>interop.def</code> 文件中，放在 <code>---</code> 分隔符之后：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> short</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doubles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span></code></pre></div></li></ol><p><code>interop.def</code> 文件提供了在 IDE 中编译、运行或打开应用程序所需的一切。</p><h2 id="创建-kotlin-native-项目" tabindex="-1">创建 Kotlin/Native 项目 <a class="header-anchor" href="#创建-kotlin-native-项目" aria-label="Permalink to &quot;创建 Kotlin/Native 项目&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于详细的入门步骤以及如何创建新的 Kotlin/Native 项目并在 IntelliJ IDEA 中打开它，请参见 <a href="/kotlin/native-get-started#using-gradle">Kotlin/Native 入门</a>教程。</p></div><p>要创建项目文件：</p>`,21)),i("ol",null,[i("li",null,[a[3]||(a[3]=i("p",null,[s("在你的项目文件夹中，创建一个 "),i("code",null,"build.gradle(.kts)"),s(" Gradle 构建文件，其内容如下：")],-1)),n(r,{group:"build-script"},{default:t(()=>[n(k,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[1]||(a[1]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"repositories"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    mavenCentral"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    macosArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {    "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// Apple Silicon 上的 macOS")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // macosX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // x86_64 平台上的 macOS")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxArm64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // ARM64 平台上的 Linux ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // x86_64 平台上的 Linux")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // mingwX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // 在 Windows 上")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," main "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," compilations.getting")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," interop "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," main.cinterops.creating")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        binaries"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            executable"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"wrapper"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "8.14"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Wrapper.DistributionType.BIN")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(k,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[2]||(a[2]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.multiplatform'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"repositories {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mavenCentral()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    macosArm64("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {    "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// Apple Silicon macOS")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // macosX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // x86_64 平台上的 macOS")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxArm64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // ARM64 平台上的 Linux")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // x86_64 平台上的 Linux")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // mingwX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilations"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"main"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"cinterops {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            interop ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            executable()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"wrapper {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '8.14'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'BIN'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[4]||(a[4]=i("p",null,[s("该项目文件将 C 互操作配置为额外的构建步骤。查看 "),i("a",{href:"https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html",target:"_blank",rel:"noreferrer"},"多平台 Gradle DSL 参考"),s("以了解你可以配置它的不同方式。")],-1))]),a[5]||(a[5]=h(`<li><p>将你的 <code>interop.def</code>、<code>lib.h</code> 和 <code>lib.def</code> 文件移动到 <code>src/nativeInterop/cinterop</code> 目录。</p></li><li><p>创建 <code>src/nativeMain/kotlin</code> 目录。这是你应该放置所有源文件的地方，遵循 Gradle 关于使用约定而非配置的建议。</p><p>默认情况下，所有来自 C 的符号都被导入到 <code>interop</code> 包。</p></li><li><p>在 <code>src/nativeMain/kotlin</code> 中，创建一个 <code>hello.kt</code> 存根文件，其内容如下：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.ExperimentalForeignApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* fix me*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* fix me*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    doubles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* fix me*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,3))]),a[15]||(a[15]=i("p",null,"你将在稍后了解 C 原生类型声明从 Kotlin 端看起来如何时完成代码。",-1)),a[16]||(a[16]=i("h2",{id:"探查-c-库生成的-kotlin-api",tabindex:"-1"},[s("探查 C 库生成的 Kotlin API "),i("a",{class:"header-anchor",href:"#探查-c-库生成的-kotlin-api","aria-label":'Permalink to "探查 C 库生成的 Kotlin API"'},"​")],-1)),a[17]||(a[17]=i("p",null,"让我们看看 C 原生类型如何映射到 Kotlin/Native，并相应地更新示例项目。",-1)),i("p",null,[a[8]||(a[8]=s("使用 IntelliJ IDEA 的")),a[9]||(a[9]=i("a",{href:"https://www.jetbrains.com/help/rider/Navigation_and_Search__Go_to_Declaration.html",target:"_blank",rel:"noreferrer"},"转到声明",-1)),a[10]||(a[10]=s("命令（")),n(e,null,{default:t(()=>a[6]||(a[6]=[s("Cmd + B")])),_:1}),a[11]||(a[11]=s("/")),n(e,null,{default:t(()=>a[7]||(a[7]=[s("Ctrl + B")])),_:1}),a[12]||(a[12]=s("）导航到 C 函数的以下生成的 API："))]),a[18]||(a[18]=h(`<div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Byte, d: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Short, e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Int, f: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Long)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.UByte, d: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.UShort, e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.UInt, f: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ULong)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doubles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Float, b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Double)</span></span></code></pre></div><p>C 类型被直接映射，除了 <code>char</code> 类型，它被映射到 <code>kotlin.Byte</code>，因为它通常是 8 位有符号值：</p><table tabindex="0"><thead><tr><th>C</th><th>Kotlin</th></tr></thead><tbody><tr><td>char</td><td>kotlin.Byte</td></tr><tr><td>unsigned char</td><td>kotlin.UByte</td></tr><tr><td>short</td><td>kotlin.Short</td></tr><tr><td>unsigned short</td><td>kotlin.UShort</td></tr><tr><td>int</td><td>kotlin.Int</td></tr><tr><td>unsigned int</td><td>kotlin.UInt</td></tr><tr><td>long long</td><td>kotlin.Long</td></tr><tr><td>unsigned long long</td><td>kotlin.ULong</td></tr><tr><td>float</td><td>kotlin.Float</td></tr><tr><td>double</td><td>kotlin.Double</td></tr></tbody></table><h2 id="更新-kotlin-代码" tabindex="-1">更新 Kotlin 代码 <a class="header-anchor" href="#更新-kotlin-代码" aria-label="Permalink to &quot;更新 Kotlin 代码&quot;">​</a></h2><p>既然你已经看到了 C 定义，你就可以更新你的 Kotlin 代码了。<code>hello.kt</code> 文件中的最终代码可能如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.ExperimentalForeignApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    doubles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9.0f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要验证一切是否按预期工作，请<a href="/kotlin/native-get-started#build-and-run-the-application">在你的 IDE 中</a>运行 <code>runDebugExecutableNative</code> Gradle 任务，或使用以下命令运行代码：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runDebugExecutableNative</span></span></code></pre></div><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在本系列的下一部分中，你将了解结构体和联合体类型如何在 Kotlin 和 C 之间映射：</p><p><strong><a href="/kotlin/mapping-struct-union-types-from-c">继续到下一部分</a></strong></p><h3 id="另请参见" tabindex="-1">另请参见 <a class="header-anchor" href="#另请参见" aria-label="Permalink to &quot;另请参见&quot;">​</a></h3><p>在 <a href="/kotlin/native-c-interop">C 互操作</a>文档中了解更多，其中涵盖了更高级的场景。</p>`,13))])}const N=y(u,[["render",C]]);export{K as __pageData,N as default};
