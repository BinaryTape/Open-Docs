import{_ as e,c as i,o,ag as t}from"./chunks/framework.Bksy39di.js";const p=JSON.parse('{"title":"자바와 코틀린 비교","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/comparison-to-java.md","filePath":"ko/kotlin/comparison-to-java.md","lastUpdated":1754307826000}'),l={name:"ko/kotlin/comparison-to-java.md"};function r(n,a,s,k,f,h){return o(),i("div",null,a[0]||(a[0]=[t('<h1 id="자바와-코틀린-비교" tabindex="-1">자바와 코틀린 비교 <a class="header-anchor" href="#자바와-코틀린-비교" aria-label="Permalink to &quot;자바와 코틀린 비교&quot;">​</a></h1><h2 id="코틀린에서-해결된-자바의-일부-문제점" tabindex="-1">코틀린에서 해결된 자바의 일부 문제점 <a class="header-anchor" href="#코틀린에서-해결된-자바의-일부-문제점" aria-label="Permalink to &quot;코틀린에서 해결된 자바의 일부 문제점&quot;">​</a></h2><p>코틀린은 자바가 겪는 여러 문제점을 해결합니다:</p><ul><li>널 참조는 <a href="/ko/kotlin/null-safety">타입 시스템으로 제어</a>됩니다.</li><li><a href="/ko/kotlin/java-interop#java-generics-in-kotlin">원시 타입 없음</a></li><li>코틀린의 배열은 <a href="/ko/kotlin/arrays">불변</a>입니다.</li><li>코틀린은 자바의 SAM 변환과 달리 제대로 된 <a href="/ko/kotlin/lambdas#function-types">함수 타입</a>을 가집니다.</li><li>와일드카드 없이 <a href="/ko/kotlin/generics#use-site-variance-type-projections">사용-지점 변성</a>을 지원합니다.</li><li>코틀린은 검사 <a href="/ko/kotlin/exceptions">예외</a>를 지원하지 않습니다.</li><li><a href="/ko/kotlin/collections-overview">읽기 전용 및 가변 컬렉션을 위한 별도의 인터페이스</a>를 제공합니다.</li></ul><h2 id="자바에-있지만-코틀린에-없는-기능" tabindex="-1">자바에 있지만 코틀린에 없는 기능 <a class="header-anchor" href="#자바에-있지만-코틀린에-없는-기능" aria-label="Permalink to &quot;자바에 있지만 코틀린에 없는 기능&quot;">​</a></h2><ul><li><a href="/ko/kotlin/exceptions">검사 예외</a></li><li>클래스가 아닌 <a href="/ko/kotlin/basic-types">원시 타입</a>. 바이트코드는 가능한 경우 원시 타입을 사용하지만, 명시적으로 사용할 수는 없습니다.</li><li><a href="/ko/kotlin/classes">정적 멤버</a>는 <a href="/ko/kotlin/object-declarations#companion-objects">동반 객체</a>, <a href="/ko/kotlin/functions">최상위 함수</a>, <a href="/ko/kotlin/extensions#extension-functions">확장 함수</a> 또는 <a href="/ko/kotlin/java-to-kotlin-interop#static-methods"><code>@JvmStatic</code></a>로 대체됩니다.</li><li><a href="/ko/kotlin/generics">와일드카드 타입</a>은 <a href="/ko/kotlin/generics#declaration-site-variance">선언-지점 변성</a> 및 <a href="/ko/kotlin/generics#type-projections">타입 프로젝션</a>으로 대체됩니다.</li><li><a href="/ko/kotlin/control-flow#if-expression">삼항 연산자 <code>a ? b : c</code></a>는 <a href="/ko/kotlin/control-flow#if-expression">if 표현식</a>으로 대체됩니다.</li><li><a href="https://openjdk.org/jeps/395" target="_blank" rel="noreferrer">레코드</a></li><li><a href="https://openjdk.org/projects/amber/design-notes/patterns/pattern-matching-for-java" target="_blank" rel="noreferrer">패턴 매칭</a></li><li>패키지 전용 <a href="/ko/kotlin/visibility-modifiers">가시성 한정자</a></li></ul><h2 id="코틀린에-있지만-자바에-없는-기능" tabindex="-1">코틀린에 있지만 자바에 없는 기능 <a class="header-anchor" href="#코틀린에-있지만-자바에-없는-기능" aria-label="Permalink to &quot;코틀린에 있지만 자바에 없는 기능&quot;">​</a></h2><ul><li><a href="/ko/kotlin/lambdas">람다 식</a> + <a href="/ko/kotlin/inline-functions">인라인 함수</a> = 고성능 사용자 정의 제어 구조</li><li><a href="/ko/kotlin/extensions">확장 함수</a></li><li><a href="/ko/kotlin/null-safety">널 안정성</a></li><li><a href="/ko/kotlin/typecasts">스마트 캐스트</a> (<strong>자바 16</strong>: <a href="https://openjdk.org/jeps/394" target="_blank" rel="noreferrer">Pattern Matching for instanceof</a>)</li><li><a href="/ko/kotlin/strings">문자열 템플릿</a> (<strong>자바 21</strong>: <a href="https://openjdk.org/jeps/430" target="_blank" rel="noreferrer">String Templates (Preview)</a>)</li><li><a href="/ko/kotlin/properties">프로퍼티</a></li><li><a href="/ko/kotlin/classes">주 생성자</a></li><li><a href="/ko/kotlin/delegation">일급 위임</a></li><li><a href="/ko/kotlin/basic-types">변수 및 프로퍼티 타입 추론</a> (<strong>자바 10</strong>: <a href="https://openjdk.org/jeps/286" target="_blank" rel="noreferrer">Local-Variable Type Inference</a>)</li><li><a href="/ko/kotlin/object-declarations">싱글톤</a></li><li><a href="/ko/kotlin/generics">선언-지점 변성 및 타입 프로젝션</a></li><li><a href="/ko/kotlin/ranges">범위 표현식</a></li><li><a href="/ko/kotlin/operator-overloading">연산자 오버로딩</a></li><li><a href="/ko/kotlin/classes#companion-objects">동반 객체</a></li><li><a href="/ko/kotlin/data-classes">데이터 클래스</a></li><li><a href="/ko/kotlin/coroutines-overview">코루틴</a></li><li><a href="/ko/kotlin/functions">최상위 함수</a></li><li><a href="/ko/kotlin/functions#parameters-with-default-values">기본값이 있는 파라미터</a></li><li><a href="/ko/kotlin/functions#named-arguments">이름이 있는 파라미터</a></li><li><a href="/ko/kotlin/functions#infix-notation">중위 함수</a></li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">expect 및 actual 선언</a></li><li><a href="/ko/kotlin/whatsnew14#explicit-api-mode-for-library-authors">명시적 API 모드</a> 및 <a href="/ko/kotlin/opt-in-requirements">API 표면에 대한 더 나은 제어</a></li></ul><h2 id="다음-단계는" tabindex="-1">다음 단계는? <a class="header-anchor" href="#다음-단계는" aria-label="Permalink to &quot;다음 단계는?&quot;">​</a></h2><p>다음 방법을 알아보세요:</p><ul><li><a href="/ko/kotlin/java-to-kotlin-idioms-strings">자바 및 코틀린에서 문자열을 사용하여 일반적인 작업 수행</a>.</li><li><a href="/ko/kotlin/java-to-kotlin-collections-guide">자바 및 코틀린에서 컬렉션을 사용하여 일반적인 작업 수행</a>.</li><li><a href="/ko/kotlin/java-to-kotlin-nullability-guide">자바 및 코틀린에서 널러블 처리</a>.</li></ul>',11)]))}const d=e(l,[["render",r]]);export{p as __pageData,d as default};
