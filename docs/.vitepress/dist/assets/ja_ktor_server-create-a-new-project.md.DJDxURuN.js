import{_ as x,a as P,b as C,c as R,d as L,e as D,f as H,g as J,h as O,i as N,j as G,k as M,l as W,m as U,n as $,o as q,p as B,q as Y,r as F,s as z,t as V,u as X,v as Z}from"./chunks/server_get_started_register_error_handler_output.Dqrb0DZY.js";import{_ as v}from"./chunks/server_get_started_ktor_sample_app_output.BqyRKElU.js";import{_ as Q}from"./chunks/intellij_idea_gradle_icon.dCXxPOpm.js";import{_ as y}from"./chunks/intellij_idea_rerun_icon.tlG8QH6A.js";import{_,C as p,c as h,o as c,G as u,w as o,j as n,a as t}from"./chunks/framework.Bksy39di.js";const ml=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-create-a-new-project.md","filePath":"ja/ktor/server-create-a-new-project.md","lastUpdated":1755457140000}'),ll={name:"ja/ktor/server-create-a-new-project.md"};function tl(nl,l,ul,ol,rl,il){const A=p("show-structure"),j=p("tldr"),I=p("link-summary"),T=p("web-summary"),s=p("Links"),a=p("list"),r=p("step"),i=p("control"),d=p("Path"),b=p("emphasis"),m=p("procedure"),f=p("chapter"),k=p("ui-path"),e=p("code-block"),g=p("tab"),K=p("tabs"),w=p("shortcut"),E=p("tip"),S=p("topic");return c(),h("div",null,[u(S,{"xsi:noNamespaceSchemaLocation":"https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance",title:"新しいKtorプロジェクトの作成、オープン、実行",id:"server-create-a-new-project","help-id":"server_create_a_new_project"},{default:o(()=>[u(A,{for:"chapter",depth:"2"}),u(j,null,{default:o(()=>l[0]||(l[0]=[n("p",null,[n("b",null,"コード例"),t(": "),n("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/tutorial-server-get-started"}," tutorial-server-get-started ")],-1)])),_:1}),u(I,null,{default:o(()=>l[1]||(l[1]=[t(" Ktorでサーバーアプリケーションを開き、実行し、テストする方法を学びます。 ")])),_:1}),u(T,null,{default:o(()=>l[2]||(l[2]=[t(" 初めてのKtorサーバーアプリケーションの構築を始めましょう。このチュートリアルでは、新しいKtorプロジェクトを作成、オープン、実行する方法を学びます。 ")])),_:1}),l[358]||(l[358]=n("p",null," このチュートリアルでは、初めてのKtorサーバープロジェクトを作成、オープン、実行する方法を学びます。一度実行できるようになれば、Ktorに慣れるための一連のタスクを試すことができます。 ",-1)),l[359]||(l[359]=n("p",null," これは、Ktorでサーバーアプリケーションの構築を開始するためのチュートリアルシリーズの最初のものです。各チュートリアルは独立して行うこともできますが、推奨される順序に従うことを強くお勧めします。 ",-1)),u(a,{type:"decimal"},{default:o(()=>[l[13]||(l[13]=n("li",null,"新しいKtorプロジェクトを作成、オープン、実行します。",-1)),n("li",null,[u(s,{href:"/ktor/server-requests-and-responses",summary:"タスクマネージャーアプリケーションを構築することで、KtorとKotlinにおけるルーティング、リクエスト処理、およびパラメーターの基本を学びます。"},{default:o(()=>l[3]||(l[3]=[t("リクエストを処理し、レスポンスを生成する")])),_:1}),l[4]||(l[4]=t("。"))]),n("li",null,[u(s,{href:"/ktor/server-create-restful-apis",summary:"KotlinとKtorを使用してバックエンドサービスを構築する方法を、JSONファイルを生成するRESTful APIの例を交えて学びます。"},{default:o(()=>l[5]||(l[5]=[t("JSONを生成するRESTful APIを作成する")])),_:1}),l[6]||(l[6]=t("。"))]),n("li",null,[u(s,{href:"/ktor/server-create-website",summary:"KtorとThymeleafテンプレートを使用してKotlinでウェブサイトを構築する方法を学びます。"},{default:o(()=>l[7]||(l[7]=[t("Thymeleafテンプレートを使用してウェブサイトを作成する")])),_:1}),l[8]||(l[8]=t("。"))]),n("li",null,[u(s,{href:"/ktor/server-create-websocket-application",summary:"WebSocketの機能を活用してコンテンツを送受信する方法を学びます。"},{default:o(()=>l[9]||(l[9]=[t("WebSocketアプリケーションを作成する")])),_:1}),l[10]||(l[10]=t("。"))]),n("li",null,[u(s,{href:"/ktor/server-integrate-database",summary:"Exposed SQLライブラリを使用してKtorサービスをデータベースリポジトリに接続するプロセスを学びます。"},{default:o(()=>l[11]||(l[11]=[t("Exposedとデータベースを統合する")])),_:1}),l[12]||(l[12]=t("。"))])]),_:1}),u(f,{id:"create-project",title:"新しいKtorプロジェクトを作成する"},{default:o(()=>[l[147]||(l[147]=n("p",null,[t(" 新しいKtorプロジェクトを作成する最も迅速な方法の1つは、"),n("a",{href:"#create-project-with-the-ktor-project-generator"},"ウェブベースのKtorプロジェクトジェネレーターを使用すること"),t("です。 ")],-1)),l[148]||(l[148]=n("p",null,[t(" または、"),n("a",{href:"#create_project_with_intellij"},"IntelliJ IDEA Ultimate専用のKtorプラグイン"),t("、または"),n("a",{href:"#create_project_with_ktor_cli_tool"},"Ktor CLIツール"),t("を使用してプロジェクトを生成することもできます。 ")],-1)),u(f,{title:"Ktorプロジェクトジェネレーターを使用する",id:"create-project-with-the-ktor-project-generator"},{default:o(()=>[l[57]||(l[57]=n("p",null," Ktorプロジェクトジェネレーターで新しいプロジェクトを作成するには、以下の手順に従います。 ",-1)),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>l[14]||(l[14]=[n("p",null,[n("a",{href:"https://start.ktor.io/"},"Ktorプロジェクトジェネレーター"),t("に移動します。")],-1)])),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[15]||(l[15]=[t("Project artifact")])),_:1}),l[17]||(l[17]=t("フィールドに、プロジェクトアーティファクト名として")),u(d,null,{default:o(()=>l[16]||(l[16]=[t("com.example.ktor-sample-app")])),_:1}),l[18]||(l[18]=t("を入力します。 ")),l[19]||(l[19]=n("img",{src:x,alt:"Ktor Project Generator with Project Artifact Name org.example.ktor-sample-app","border-effect":"line",style:{},width:"706"},null,-1))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[20]||(l[20]=[t("Configure")])),_:1}),l[21]||(l[21]=t("をクリックして、設定ドロップダウンメニューを開きます: ")),l[22]||(l[22]=n("img",{src:P,style:{},alt:"expanded view of Ktor project settings","border-effect":"line",width:"706"},null,-1))]),l[45]||(l[45]=n("p",null," 以下の設定が利用可能です: ",-1)),u(a,null,{default:o(()=>[n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[23]||(l[23]=[t("Build System")])),_:1}),l[27]||(l[27]=t(" : 希望する")),u(s,{href:"/ktor/server-dependencies",summary:"既存のGradle/MavenプロジェクトにKtor Serverの依存関係を追加する方法を学びます。"},{default:o(()=>l[24]||(l[24]=[t("ビルドシステム")])),_:1}),l[28]||(l[28]=t("を選択します。これは、 KotlinまたはGroovy DSLを使用した")),u(b,null,{default:o(()=>l[25]||(l[25]=[t("Gradle")])),_:1}),l[29]||(l[29]=t("、または")),u(b,null,{default:o(()=>l[26]||(l[26]=[t("Maven")])),_:1}),l[30]||(l[30]=t("のいずれかです。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[31]||(l[31]=[t("Ktor version")])),_:1}),l[32]||(l[32]=t(" : 必要なKtorのバージョンを選択します。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[33]||(l[33]=[t("Engine")])),_:1}),l[35]||(l[35]=t(" : サーバーを実行するために使用する")),u(s,{href:"/ktor/server-engines",summary:"ネットワークリクエストを処理するエンジンについて学びます。"},{default:o(()=>l[34]||(l[34]=[t("エンジン")])),_:1}),l[36]||(l[36]=t("を選択します。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[37]||(l[37]=[t("Configuration")])),_:1}),l[40]||(l[40]=t(" : サーバーパラメーターを")),u(s,{href:"/ktor/server-configuration-file",summary:"設定ファイルでさまざまなサーバーパラメーターを設定する方法を学びます。"},{default:o(()=>l[38]||(l[38]=[t("YAMLまたはHOCONファイルで")])),_:1}),l[41]||(l[41]=t("指定するか、")),u(s,{href:"/ktor/server-configuration-code",summary:"コードでさまざまなサーバーパラメーターを設定する方法を学びます。"},{default:o(()=>l[39]||(l[39]=[t("コードで")])),_:1}),l[42]||(l[42]=t("指定するかを選択します。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[43]||(l[43]=[t("Include samples")])),_:1}),l[44]||(l[44]=t(" : このオプションを有効にしたままにして、プラグインのサンプルコードを追加します。 "))])])]),_:1}),l[46]||(l[46]=n("p",null,"このチュートリアルでは、これらの設定をデフォルト値のままにしておくことができます。",-1))]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[47]||(l[47]=[t("Done")])),_:1}),l[48]||(l[48]=t("をクリックして、設定を保存し、メニューを閉じます。"))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[50]||(l[50]=t("以下に、プロジェクトに追加できる")),u(s,{href:"/ktor/server-plugins",summary:"プラグインは、シリアル化、コンテンツエンコーディング、圧縮などの一般的な機能を提供します。"},{default:o(()=>l[49]||(l[49]=[t("プラグイン")])),_:1}),l[51]||(l[51]=t("のセットがあります。プラグインは、Ktorアプリケーションで認証、シリアル化とコンテンツエンコーディング、圧縮、Cookieサポートなどの一般的な機能を提供するビルディングブロックです。"))]),l[52]||(l[52]=n("p",null,"このチュートリアルでは、この段階でプラグインを追加する必要はありません。",-1))]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[53]||(l[53]=[t("Download")])),_:1}),l[54]||(l[54]=t("ボタンをクリックして、Ktorプロジェクトを生成し、ダウンロードします。 ")),l[55]||(l[55]=n("img",{src:C,alt:"Ktor Project Generator download button","border-effect":"line",style:{},width:"706"},null,-1))])]),_:1}),l[56]||(l[56]=n("p",null,"ダウンロードが自動的に開始されます。",-1))]),_:1}),l[58]||(l[58]=n("p",null,[t("新しいプロジェクトを生成したので、次に"),n("a",{href:"#unpacking"},"Ktorプロジェクトの解凍と実行"),t("に進みます。")],-1))]),_:1}),u(f,{title:"IntelliJ IDEA Ultimate用Ktorプラグインを使用する",id:"create_project_with_intellij",collapsible:"true"},{default:o(()=>[l[117]||(l[117]=n("p",null,[t(" このセクションでは、IntelliJ IDEA Ultimate用の"),n("a",{href:"https://plugins.jetbrains.com/plugin/16008-ktor"},"Ktorプラグイン"),t("を使用したプロジェクトのセットアップについて説明します。 ")],-1)),l[118]||(l[118]=n("p",null,[t(" 新しいKtorプロジェクトを作成するには、"),n("a",{href:"https://www.jetbrains.com/help/idea/run-for-the-first-time.html"},"IntelliJ IDEAを開き"),t("、以下の手順に従います: ")],-1)),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[n("p",null,[l[60]||(l[60]=t(" ウェルカム画面で、")),u(i,null,{default:o(()=>l[59]||(l[59]=[t("New Project")])),_:1}),l[61]||(l[61]=t("をクリックします。 "))]),n("p",null,[l[63]||(l[63]=t(" それ以外の場合は、メインメニューから")),u(k,null,{default:o(()=>l[62]||(l[62]=[t("File | New | Project")])),_:1}),l[64]||(l[64]=t("を選択します。 "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[65]||(l[65]=[t("New Project")])),_:1}),l[67]||(l[67]=t("ウィザードで、左側のリストから")),u(i,null,{default:o(()=>l[66]||(l[66]=[t("Ktor")])),_:1}),l[68]||(l[68]=t("を選択します。 "))])]),_:1}),u(r,null,{default:o(()=>[l[85]||(l[85]=n("p",null," 右側のペインで、以下の設定を指定できます: ",-1)),l[86]||(l[86]=n("img",{src:R,alt:"Ktor Project Settings",width:"706","border-effect":"rounded"},null,-1)),u(a,null,{default:o(()=>[n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[69]||(l[69]=[t("Name")])),_:1}),l[71]||(l[71]=t(" : プロジェクト名を指定します。")),u(d,null,{default:o(()=>l[70]||(l[70]=[t("ktor-sample-app")])),_:1}),l[72]||(l[72]=t("をプロジェクト名として入力します。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[73]||(l[73]=[t("Location")])),_:1}),l[74]||(l[74]=t(" : プロジェクトのディレクトリを指定します。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[75]||(l[75]=[t("Website")])),_:1}),l[76]||(l[76]=t(" : パッケージ名を生成するために使用するドメインを指定します。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[77]||(l[77]=[t("Artifact")])),_:1}),l[78]||(l[78]=t(" : このフィールドには、生成されたアーティファクト名が表示されます。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[79]||(l[79]=[t("Engine")])),_:1}),l[81]||(l[81]=t(" : サーバーを実行するために使用する")),u(s,{href:"/ktor/server-engines",summary:"ネットワークリクエストを処理するエンジンについて学びます。"},{default:o(()=>l[80]||(l[80]=[t("エンジン")])),_:1}),l[82]||(l[82]=t("を選択します。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[83]||(l[83]=[t("Include samples")])),_:1}),l[84]||(l[84]=t(" : このオプションを有効にしたままにして、プラグインのサンプルコードを追加します。 "))])])]),_:1})]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[87]||(l[87]=[t("Advanced Settings")])),_:1}),l[88]||(l[88]=t("をクリックして、追加設定メニューを展開します: "))]),l[105]||(l[105]=n("img",{src:L,alt:"Ktor Project Advanced Settings",width:"706","border-effect":"rounded"},null,-1)),l[106]||(l[106]=n("p",null," 以下の設定が利用可能です: ",-1)),u(a,null,{default:o(()=>[n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[89]||(l[89]=[t("Build System")])),_:1}),l[93]||(l[93]=t(" : 希望する")),u(s,{href:"/ktor/server-dependencies",summary:"既存のGradle/MavenプロジェクトにKtor Serverの依存関係を追加する方法を学びます。"},{default:o(()=>l[90]||(l[90]=[t("ビルドシステム")])),_:1}),l[94]||(l[94]=t("を選択します。これは、 KotlinまたはGroovy DSLを使用した")),u(b,null,{default:o(()=>l[91]||(l[91]=[t("Gradle")])),_:1}),l[95]||(l[95]=t("、または")),u(b,null,{default:o(()=>l[92]||(l[92]=[t("Maven")])),_:1}),l[96]||(l[96]=t("のいずれかです。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[97]||(l[97]=[t("Ktor version")])),_:1}),l[98]||(l[98]=t(" : 必要なKtorのバージョンを選択します。 "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[99]||(l[99]=[t("Configuration")])),_:1}),l[102]||(l[102]=t(" : サーバーパラメーターを")),u(s,{href:"/ktor/server-configuration-file",summary:"設定ファイルでさまざまなサーバーパラメーターを設定する方法を学びます。"},{default:o(()=>l[100]||(l[100]=[t("YAMLまたはHOCONファイルで")])),_:1}),l[103]||(l[103]=t("指定するか、")),u(s,{href:"/ktor/server-configuration-code",summary:"コードでさまざまなサーバーパラメーターを設定する方法を学びます。"},{default:o(()=>l[101]||(l[101]=[t("コードで")])),_:1}),l[104]||(l[104]=t("指定するかを選択します。 "))])])]),_:1}),l[107]||(l[107]=n("p",null,"このチュートリアルでは、これらの設定をデフォルト値のままにしておくことができます。",-1))]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[108]||(l[108]=[t("Next")])),_:1}),l[109]||(l[109]=t("をクリックして、次のページに進みます。 "))]),l[113]||(l[113]=n("img",{src:D,alt:"Ktor plugins",width:"706","border-effect":"rounded"},null,-1)),n("p",null,[l[111]||(l[111]=t(" このページでは、")),u(s,{href:"/ktor/server-plugins",summary:"プラグインは、シリアル化、コンテンツエンコーディング、圧縮などの一般的な機能を提供します。"},{default:o(()=>l[110]||(l[110]=[t("プラグイン")])),_:1}),l[112]||(l[112]=t("のセットを選択できます。これらは、認証、シリアル化とコンテンツエンコーディング、圧縮、Cookieサポートなど、Ktorアプリケーションの一般的な機能を提供するビルディングブロックです。 "))]),l[114]||(l[114]=n("p",null,"このチュートリアルでは、この段階でプラグインを追加する必要はありません。",-1))]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[115]||(l[115]=[t("Create")])),_:1}),l[116]||(l[116]=t("をクリックし、IntelliJ IDEAがプロジェクトを生成し、依存関係をインストールするまで待ちます。 "))])]),_:1})]),_:1}),l[119]||(l[119]=n("p",null,[t(" 新しいプロジェクトを作成したので、次にアプリケーションを"),n("a",{href:"#open-explore-run"},"オープンし、探索し、実行する"),t("方法を学びます。 ")],-1))]),_:1}),u(f,{title:"Ktor CLIツールを使用する",id:"create_project_with_ktor_cli_tool",collapsible:"true"},{default:o(()=>[l[145]||(l[145]=n("p",null,[t(" このセクションでは、"),n("a",{href:"https://github.com/ktorio/ktor-cli"},"Ktor CLIツール"),t("を使用したプロジェクトのセットアップについて説明します。 ")],-1)),l[146]||(l[146]=n("p",null," 新しいKtorプロジェクトを作成するには、任意のターミナルを開き、以下の手順に従います: ",-1)),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[l[120]||(l[120]=t(" 以下のいずれかのコマンドを使用してKtor CLIツールをインストールします: ")),u(K,null,{default:o(()=>[u(g,{title:"macOS/Linux",id:"macos-linux"},{default:o(()=>[u(e,{lang:"console",code:"                                brew install ktor"})]),_:1}),u(g,{title:"Windows",id:"windows"},{default:o(()=>[u(e,{lang:"console",code:"                                winget install JetBrains.KtorCLI"})]),_:1})]),_:1})]),_:1}),u(r,null,{default:o(()=>[l[121]||(l[121]=t(" インタラクティブモードで新しいプロジェクトを生成するには、以下のコマンドを使用します: ")),u(e,{lang:"console",code:"                      ktor new"})]),_:1}),u(r,null,{default:o(()=>[l[126]||(l[126]=t(" プロジェクト名として")),u(d,null,{default:o(()=>l[122]||(l[122]=[t("ktor-sample-app")])),_:1}),l[127]||(l[127]=t("を入力します: ")),l[128]||(l[128]=n("img",{src:H,alt:"Using the Ktor CLI tool in interactive mode","border-effect":"rounded",style:{},width:"706"},null,-1)),n("p",null,[l[124]||(l[124]=t(" (オプション) プロジェクト名を下にある")),u(k,null,{default:o(()=>l[123]||(l[123]=[t("Location")])),_:1}),l[125]||(l[125]=t("パスを編集することで、プロジェクトが保存される場所を変更することもできます。 "))])]),_:1}),u(r,null,{default:o(()=>[l[130]||(l[130]=t(" 続行するには")),u(w,null,{default:o(()=>l[129]||(l[129]=[t("Enter")])),_:1}),l[131]||(l[131]=t("を押します。 "))]),_:1}),u(r,null,{default:o(()=>[l[133]||(l[133]=t(" 次のステップでは、プロジェクトに")),u(s,{href:"/ktor/server-plugins",summary:"プラグインは、シリアル化、コンテンツエンコーディング、圧縮などの一般的な機能を提供します。"},{default:o(()=>l[132]||(l[132]=[t("プラグイン")])),_:1}),l[134]||(l[134]=t("を検索して追加できます。プラグインは、認証、シリアル化とコンテンツエンコーディング、圧縮、Cookieサポートなど、Ktorアプリケーションの一般的な機能を提供するビルディングブロックです。 ")),l[135]||(l[135]=n("img",{src:J,alt:"Add plugins to a project using the Ktor CLI tool","border-effect":"rounded",style:{},width:"706"},null,-1)),l[136]||(l[136]=n("p",null,"このチュートリアルでは、この段階でプラグインを追加する必要はありません。",-1))]),_:1}),u(r,null,{default:o(()=>[l[143]||(l[143]=t(" プロジェクトを生成するには")),u(w,null,{default:o(()=>l[137]||(l[137]=[t("CTRL+G")])),_:1}),l[144]||(l[144]=t("を押します。 ")),n("p",null,[l[140]||(l[140]=t(" または、")),u(i,null,{default:o(()=>l[138]||(l[138]=[t("CREATE PROJECT (CTRL+G)")])),_:1}),l[141]||(l[141]=t("を選択して")),u(w,null,{default:o(()=>l[139]||(l[139]=[t("Enter")])),_:1}),l[142]||(l[142]=t("を押すことでプロジェクトを生成することもできます。 "))])]),_:1})]),_:1})]),_:1})]),_:1}),u(f,{title:"Ktorプロジェクトを解凍して実行する",id:"unpacking"},{default:o(()=>[l[166]||(l[166]=n("p",null," このセクションでは、コマンドラインからプロジェクトを解凍、ビルド、実行する方法を学びます。以下の説明では、以下を前提としています: ",-1)),u(a,{type:"bullet"},{default:o(()=>[n("li",null,[u(d,null,{default:o(()=>l[149]||(l[149]=[t("ktor-sample-app")])),_:1}),l[150]||(l[150]=t("というプロジェクトを作成し、ダウンロードしていること。 "))]),n("li",null,[l[152]||(l[152]=t("これがホームディレクトリの")),u(d,null,{default:o(()=>l[151]||(l[151]=[t("myprojects")])),_:1}),l[153]||(l[153]=t("というフォルダに配置されていること。 "))])]),_:1}),l[167]||(l[167]=n("p",null,"必要に応じて、ご自身のセットアップに合わせて名前とパスを変更してください。",-1)),l[168]||(l[168]=n("p",null,"任意のコマンドラインツールを開き、以下の手順に従います:",-1)),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[l[154]||(l[154]=n("p",null,"ターミナルで、プロジェクトをダウンロードしたフォルダに移動します:",-1)),u(e,{lang:"console",code:"                    cd ~/myprojects"})]),_:1}),u(r,null,{default:o(()=>[l[155]||(l[155]=n("p",null,"ZIPアーカイブを同名のフォルダに解凍します:",-1)),u(K,null,{default:o(()=>[u(g,{title:"macOS","group-key":"macOS"},{default:o(()=>[u(e,{lang:"console",code:"                            unzip ktor-sample-app.zip -d ktor-sample-app"})]),_:1}),u(g,{title:"Windows","group-key":"windows"},{default:o(()=>[u(e,{lang:"console",code:"                            tar -xf ktor-sample-app.zip"})]),_:1})]),_:1}),l[156]||(l[156]=n("p",null,"これで、ディレクトリにはZIPアーカイブと解凍されたフォルダが含まれます。",-1))]),_:1}),u(r,null,{default:o(()=>[l[157]||(l[157]=n("p",null,"そのディレクトリから、新しく作成されたフォルダに移動します:",-1)),u(e,{lang:"console",code:"                    cd ktor-sample-app"})]),_:1}),u(r,null,{default:o(()=>[l[158]||(l[158]=n("p",null,[t("macOS/UNIXシステムでは、gradlew Gradleヘルパースクリプトを実行可能にする必要があります。それには、"),n("code",null,"chmod"),t("コマンドを使用します:")],-1)),u(K,null,{default:o(()=>[u(g,{title:"macOS","group-key":"macOS"},{default:o(()=>[u(e,{lang:"console",code:"                            chmod +x ./gradlew"})]),_:1})]),_:1})]),_:1}),u(r,null,{default:o(()=>[l[159]||(l[159]=n("p",null,"プロジェクトをビルドするには、以下のコマンドを使用します:",-1)),u(K,null,{default:o(()=>[u(g,{title:"macOS","group-key":"macOS"},{default:o(()=>[u(e,{lang:"console",code:"                            ./gradlew build"})]),_:1}),u(g,{title:"Windows","group-key":"windows"},{default:o(()=>[u(e,{lang:"console",code:"                            gradlew build"})]),_:1})]),_:1}),l[160]||(l[160]=n("p",null,"ビルドが成功したことを確認したら、再度Gradle経由でプロジェクトを実行できます。",-1))]),_:1}),u(r,null,{default:o(()=>[l[161]||(l[161]=n("p",null,"プロジェクトを実行するには、以下のコマンドを使用します:",-1)),u(K,null,{default:o(()=>[u(g,{title:"macOS","group-key":"macOS"},{default:o(()=>[u(e,{lang:"console",code:"                            ./gradlew run"})]),_:1}),u(g,{title:"Windows","group-key":"windows"},{default:o(()=>[u(e,{lang:"console",code:"                            gradlew run"})]),_:1})]),_:1})]),_:1}),u(r,null,{default:o(()=>l[162]||(l[162]=[n("p",null,[t("プロジェクトが実行されていることを確認するには、出力に記載されているURL ("),n("a",{href:"http://0.0.0.0:8080"},[n("a",{href:"http://0.0.0.0:8080",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:8080")]),t(") でブラウザを開きます。「Hello World!」というメッセージが画面に表示されるはずです:")],-1),n("img",{src:v,alt:"Output of generated ktor project","border-effect":"line",width:"706"},null,-1)])),_:1})]),_:1}),l[169]||(l[169]=n("p",null,"おめでとうございます！Ktorプロジェクトの起動に成功しました。",-1)),n("p",null,[l[164]||(l[164]=t("Ktorアプリケーションを実行している基盤プロセスがビジー状態のため、コマンドラインは応答しなくなります。アプリケーションを終了するには")),u(w,null,{default:o(()=>l[163]||(l[163]=[t("CTRL+C")])),_:1}),l[165]||(l[165]=t("を押すことができます。"))])]),_:1}),u(f,{title:"IntelliJ IDEAでKtorプロジェクトを開き、探索し、実行する",id:"open-explore-run"},{default:o(()=>[u(f,{title:"プロジェクトを開く",id:"open"},{default:o(()=>[l[178]||(l[178]=n("p",null,[n("a",{href:"https://www.jetbrains.com/idea/"},"IntelliJ IDEA"),t("がインストールされている場合、コマンドラインから簡単にプロジェクトを開くことができます。 ")],-1)),l[179]||(l[179]=n("p",null,[t(" プロジェクトフォルダにいることを確認してから、現在のフォルダを表すピリオドに続けて"),n("code",null,"idea"),t("コマンドを入力します: ")],-1)),u(e,{lang:"Bash",code:"                idea ."}),l[180]||(l[180]=n("p",null," または、プロジェクトを手動で開くにはIntelliJ IDEAを起動します。 ",-1)),n("p",null,[l[173]||(l[173]=t(" ウェルカム画面が開いた場合は、")),u(i,null,{default:o(()=>l[170]||(l[170]=[t("Open")])),_:1}),l[174]||(l[174]=t("をクリックします。それ以外の場合は、メインメニューの")),u(k,null,{default:o(()=>l[171]||(l[171]=[t("File | New | Project")])),_:1}),l[175]||(l[175]=t("に移動し、")),u(d,null,{default:o(()=>l[172]||(l[172]=[t("ktor-sample-app")])),_:1}),l[176]||(l[176]=t("フォルダを選択して開きます。 "))]),u(E,null,{default:o(()=>l[177]||(l[177]=[t(" プロジェクトの管理に関する詳細については、"),n("a",{href:"https://www.jetbrains.com/help/idea/creating-and-managing-projects.html"},"IntelliJ IDEAドキュメント",-1),t("を参照してください。 ")])),_:1})]),_:1}),u(f,{title:"プロジェクトを探索する",id:"explore"},{default:o(()=>[l[206]||(l[206]=n("p",null,"どちらのオプションを選択しても、プロジェクトは以下のように開くはずです:",-1)),l[207]||(l[207]=n("img",{src:O,alt:"Generated Ktor project view in IDE",width:"706"},null,-1)),n("p",null,[l[183]||(l[183]=t(" プロジェクトのレイアウトを説明するために、")),u(i,null,{default:o(()=>l[181]||(l[181]=[t("Project")])),_:1}),l[184]||(l[184]=t("ビューで構造を展開し、ファイル")),u(d,null,{default:o(()=>l[182]||(l[182]=[t("settings-gradle.kts")])),_:1}),l[185]||(l[185]=t("を選択しました。 "))]),n("p",null,[l[191]||(l[191]=t(" アプリケーションを実行するコードは")),u(d,null,{default:o(()=>l[186]||(l[186]=[t("src/main/kotlin")])),_:1}),l[192]||(l[192]=t("の下のパッケージに存在することがわかります。デフォルトのパッケージは")),u(d,null,{default:o(()=>l[187]||(l[187]=[t("com.example")])),_:1}),l[193]||(l[193]=t("という名前で、")),u(d,null,{default:o(()=>l[188]||(l[188]=[t("plugins")])),_:1}),l[194]||(l[194]=t("というサブパッケージを含んでいます。 これらのパッケージ内に")),u(d,null,{default:o(()=>l[189]||(l[189]=[t("Application.kt")])),_:1}),l[195]||(l[195]=t("と")),u(d,null,{default:o(()=>l[190]||(l[190]=[t("Routing.kt")])),_:1}),l[196]||(l[196]=t("という2つのファイルが作成されています。 "))]),l[208]||(l[208]=n("img",{src:N,alt:"Ktor project src folder structure",width:"400"},null,-1)),n("p",null,[l[198]||(l[198]=t("プロジェクト名は")),u(d,null,{default:o(()=>l[197]||(l[197]=[t("settings-gradle.kts")])),_:1}),l[199]||(l[199]=t("で設定されます。 "))]),l[209]||(l[209]=n("img",{src:G,alt:"Contents of settings.gradle.kt",width:"706"},null,-1)),n("p",null,[l[201]||(l[201]=t(" 設定ファイルやその他の種類のコンテンツは、")),u(d,null,{default:o(()=>l[200]||(l[200]=[t("src/main/resources")])),_:1}),l[202]||(l[202]=t("フォルダ内にあります。 "))]),l[210]||(l[210]=n("img",{src:M,alt:"Ktor project resources folder structure",width:"400"},null,-1)),n("p",null,[l[204]||(l[204]=t(" スケルトンテストは、")),u(d,null,{default:o(()=>l[203]||(l[203]=[t("src/test/kotlin")])),_:1}),l[205]||(l[205]=t("の下のパッケージに作成されています。 "))]),l[211]||(l[211]=n("img",{src:W,alt:"Ktor project test folder structure",width:"400"},null,-1))]),_:1}),u(f,{title:"プロジェクトを実行する",id:"run"},{default:o(()=>[u(m,null,{default:o(()=>[l[225]||(l[225]=n("p",null,"IntelliJ IDEA内でプロジェクトを実行するには:",-1)),u(r,null,{default:o(()=>l[212]||(l[212]=[n("p",null,[t("右側のサイドバーにあるGradleアイコン ("),n("img",{alt:"intelliJ IDEA gradle icon",src:Q,width:"16",height:"26"}),t(") をクリックして、"),n("a",{href:"https://www.jetbrains.com/help/idea/jetgradle-tool-window.html"},"Gradleツールウィンドウ"),t("を開きます。")],-1),n("img",{src:U,alt:"Gradle tab in IntelliJ IDEA","border-effect":"line",width:"706"},null,-1)])),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[215]||(l[215]=t("このツールウィンドウ内で")),u(k,null,{default:o(()=>l[213]||(l[213]=[t("Tasks | application")])),_:1}),l[216]||(l[216]=t("に移動し、")),u(i,null,{default:o(()=>l[214]||(l[214]=[t("run")])),_:1}),l[217]||(l[217]=t("タスクをダブルクリックします。 "))]),l[218]||(l[218]=n("img",{src:$,alt:"Gradle tab in IntelliJ IDEA","border-effect":"line",width:"450"},null,-1))]),_:1}),u(r,null,{default:o(()=>[l[222]||(l[222]=n("p",null,[t("Ktorアプリケーションは、IDEの下部にある"),n("a",{href:"https://www.jetbrains.com/help/idea/run-tool-window.html"},"Runツールウィンドウ"),t("で起動します:")],-1)),l[223]||(l[223]=n("img",{src:q,alt:"Project running in terminal",width:"706"},null,-1)),n("p",null,[l[220]||(l[220]=t("以前にコマンドラインで表示されていたのと同じメッセージが、")),u(k,null,{default:o(()=>l[219]||(l[219]=[t("Run")])),_:1}),l[221]||(l[221]=t("ツールウィンドウに表示されるようになります。 "))])]),_:1}),u(r,null,{default:o(()=>l[224]||(l[224]=[n("p",null,[t("プロジェクトが実行されていることを確認するには、指定されたURL ("),n("a",{href:"http://0.0.0.0:8080"},[n("a",{href:"http://0.0.0.0:8080",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:8080")]),t(") でブラウザを開きます。")],-1),n("p",null,"再度、「Hello World!」というメッセージが画面に表示されるはずです:",-1),n("img",{src:v,alt:"Hello World in Browser Screen",width:"706"},null,-1)])),_:1})]),_:1}),n("p",null,[u(k,null,{default:o(()=>l[226]||(l[226]=[t("Run")])),_:1}),l[227]||(l[227]=t("ツールウィンドウを介してアプリケーションを管理できます。 "))]),u(a,{type:"bullet"},{default:o(()=>l[228]||(l[228]=[n("li",null,[t(" アプリケーションを終了するには、停止ボタン "),n("img",{src:B,style:{},height:"16",width:"16",alt:"intelliJ IDEA terminate icon"}),t(" をクリックします。 ")],-1),n("li",null,[t(" プロセスを再起動するには、再実行ボタン "),n("img",{src:y,style:{},height:"16",width:"16",alt:"intelliJ IDEA rerun icon"}),t(" をクリックします。 ")],-1)])),_:1}),l[229]||(l[229]=n("p",null,[t(" これらのオプションについては、"),n("a",{href:"https://www.jetbrains.com/help/idea/run-tool-window.html#run-toolbar"},"IntelliJ IDEA Runツールウィンドウのドキュメント"),t("でさらに詳しく説明されています。 ")],-1))]),_:1})]),_:1}),u(f,{title:"追加で試すタスク",id:"additional-tasks"},{default:o(()=>[l[351]||(l[351]=n("p",null,"以下に、試してみたい追加のタスクをいくつか示します:",-1)),u(a,{type:"decimal"},{default:o(()=>l[230]||(l[230]=[n("li",null,[n("a",{href:"#change-the-default-port"},"デフォルトポートを変更する。")],-1),n("li",null,[n("a",{href:"#change-the-port-via-yaml"},"YAML経由でポートを変更する。")],-1),n("li",null,[n("a",{href:"#add-a-new-http-endpoint"},"新しいHTTPエンドポイントを追加する。")],-1),n("li",null,[n("a",{href:"#configure-static-content"},"静的コンテンツを設定する。")],-1),n("li",null,[n("a",{href:"#write-an-integration-test"},"統合テストを記述する。")],-1),n("li",null,[n("a",{href:"#register-error-handlers"},"エラーハンドラーを登録する。")],-1)])),_:1}),l[352]||(l[352]=n("p",null," これらのタスクは互いに依存していませんが、徐々に複雑さが増します。宣言された順序で試すことが、段階的に学習する最も簡単な方法です。簡略化のため、および重複を避けるために、以下の説明では、タスクを順番に試していることを前提としています。 ",-1)),l[353]||(l[353]=n("p",null," コーディングが必要な場合は、コードと対応するインポートの両方を指定しています。IDEはこれらのインポートを自動的に追加する場合があります。 ",-1)),u(f,{title:"デフォルトポートを変更する",id:"change-the-default-port"},{default:o(()=>[n("p",null,[u(k,null,{default:o(()=>l[231]||(l[231]=[t("Project")])),_:1}),l[233]||(l[233]=t("ビューで、")),u(d,null,{default:o(()=>l[232]||(l[232]=[t("src/main/kotlin")])),_:1}),l[234]||(l[234]=t("フォルダに移動し、作成された単一のパッケージに入って、以下の手順に従います: "))]),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[n("p",null,[u(d,null,{default:o(()=>l[235]||(l[235]=[t("Application.kt")])),_:1}),l[236]||(l[236]=t("ファイルを開きます。以下のコードと同様のコードが見つかるはずです: "))]),u(e,{lang:"kotlin",code:`                        fun main() {
                            embeddedServer(
                                Netty,
                                port = 8080, // Ktorがリッスンしているポートです
                                host = "0.0.0.0",
                                module = Application::module
                            ).start(wait = true)
                        }

                        fun Application.module() {
                            configureRouting()
                        }`})]),_:1}),u(r,null,{default:o(()=>[l[237]||(l[237]=n("p",null,[n("code",null,"embeddedServer()"),t("関数で、"),n("code",null,"port"),t("パラメーターを「9292」など、選択した別の番号に変更します。")],-1)),u(e,{lang:"kotlin",code:`                        fun main() {
                            embeddedServer(
                                Netty,
                                port = 9292,
                                host = "0.0.0.0",
                                module = Application::module
                            ).start(wait = true)
                        }`})]),_:1}),u(r,null,{default:o(()=>l[238]||(l[238]=[n("p",null,[t("再実行ボタン ("),n("img",{alt:"intelliJ IDEA rerun button icon",src:y,height:"16",width:"16"}),t(") をクリックして、アプリケーションを再起動します。")],-1)])),_:1}),u(r,null,{default:o(()=>l[239]||(l[239]=[n("p",null,[t("アプリケーションが新しいポート番号で実行されていることを確認するには、新しいURL ("),n("a",{href:"http://0.0.0.0:9292"},[n("a",{href:"http://0.0.0.0:9292",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:9292")]),t(") でブラウザを開くか、"),n("a",{href:"https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html#creating-http-request-files"},"IntelliJ IDEAで新しいHTTPリクエストファイルを作成"),t("します: ")],-1),n("img",{src:Y,alt:"Testing port change with an HTTP request file in IntelliJ IDEA",width:"706"},null,-1)])),_:1})]),_:1})]),_:1}),u(f,{title:"YAML経由でポートを変更する",id:"change-the-port-via-yaml"},{default:o(()=>[l[246]||(l[246]=n("p",null," 新しいKtorプロジェクトを作成する際、設定をYAMLまたはHOCONファイルのいずれかで外部に保存するオプションがあります: ",-1)),l[247]||(l[247]=n("img",{src:F,width:"400",alt:"Ktor project generator configuration options"},null,-1)),n("p",null,[l[241]||(l[241]=t(" 設定を外部に保存することを選択した場合、")),u(d,null,{default:o(()=>l[240]||(l[240]=[t("Application.kt")])),_:1}),l[242]||(l[242]=t("のコードは次のようになります: "))]),u(e,{lang:"kotlin",code:`                fun main(args: Array<String>): Unit =
                    io.ktor.server.netty.EngineMain.main(args)

                @Suppress("unused")
                fun Application.module() {
                    configureRouting()
                }`}),n("p",null,[l[244]||(l[244]=t(" これらは、")),u(d,null,{default:o(()=>l[243]||(l[243]=[t("src/main/resources/")])),_:1}),l[245]||(l[245]=t("内の設定ファイルに保存される値です: "))]),u(K,null,{default:o(()=>[u(g,{title:"application.yaml (YAML)","group-key":"yaml"},{default:o(()=>[u(e,{lang:"yaml",code:`                        ktor:
                            application:
                                modules:
                                    - com.example.ApplicationKt.module
                            deployment:
                                port: 8080`})]),_:1}),u(g,{title:"application.conf (HOCON)","group-key":"hocon"},{default:o(()=>[u(e,{lang:"json",code:`                        ktor {
                            deployment {
                                port = 8080
                                port = \${?PORT}
                            }
                            application {
                                modules = [ com.example.ApplicationKt.module ]
                            }
                        }`})]),_:1})]),_:1}),l[248]||(l[248]=n("p",null,[t(" この場合、ポート番号を変更するためにコードを修正する必要はありません。YAMLまたはHOCONファイル内の値を変更し、アプリケーションを再起動するだけです。変更は、上記の"),n("a",{href:"#change-the-default-port"},"デフォルトポート"),t("の場合と同じ方法で確認できます。 ")],-1))]),_:1}),u(f,{title:"新しいHTTPエンドポイントを追加する",id:"add-a-new-http-endpoint"},{default:o(()=>[l[269]||(l[269]=n("p",null,"次に、GETリクエストに応答する新しいHTTPエンドポイントを作成します。",-1)),n("p",null,[u(k,null,{default:o(()=>l[249]||(l[249]=[t("Project")])),_:1}),l[251]||(l[251]=t("ツールウィンドウで、")),u(d,null,{default:o(()=>l[250]||(l[250]=[t("src/main/kotlin/com/example")])),_:1}),l[252]||(l[252]=t("フォルダに移動し、以下の手順に従います: "))]),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[n("p",null,[u(d,null,{default:o(()=>l[253]||(l[253]=[t("Application.kt")])),_:1}),l[254]||(l[254]=t("ファイルを開き、")),l[255]||(l[255]=n("code",null,"configureRouting()",-1)),l[256]||(l[256]=t("関数を見つけます。 "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[258]||(l[258]=t("IntelliJ IDEAで、関数名にキャレットを置いて")),u(w,null,{default:o(()=>l[257]||(l[257]=[t("⌘Cmd+B")])),_:1}),l[259]||(l[259]=t("を押すことで、")),l[260]||(l[260]=n("code",null,"configureRouting()",-1)),l[261]||(l[261]=t("関数に移動します。 "))]),l[262]||(l[262]=n("p",null,[t("または、"),n("code",null,"Routing.kt"),t("ファイルを開くことで関数に移動することもできます。")],-1)),l[263]||(l[263]=n("p",null,"表示されるコードは次のとおりです:",-1)),u(e,{lang:"Kotlin",validate:"true",code:`                        fun Application.configureRouting() {
                            routing {
                                get("/") {
                                    call.respondText("Hello World!")
                                }
                            }
                        }`})]),_:1}),u(r,null,{default:o(()=>[l[264]||(l[264]=n("p",null,"新しいエンドポイントを作成するには、以下の5行のコードを追加します:",-1)),u(e,{lang:"kotlin",code:`fun Application.configureRouting() {
    routing {
        get("/") {
            call.respondText("Hello World!")
        }

        get("/test1") {
            val text = "<h1>Hello From Ktor</h1>"
            val type = ContentType.parse("text/html")
            call.respondText(text, type)
        }
    }
}`}),l[265]||(l[265]=n("p",null,[n("code",null,"/test1"),t("のURLは自由に変更できることに注意してください。")],-1))]),_:1}),u(r,null,{default:o(()=>[l[266]||(l[266]=n("p",null,[n("code",null,"ContentType"),t("を使用するために、以下のインポートを追加します:")],-1)),u(e,{lang:"kotlin",code:"                        import io.ktor.http.*"})]),_:1}),u(r,null,{default:o(()=>l[267]||(l[267]=[n("p",null,[t("再実行ボタン ("),n("img",{alt:"intelliJ IDEA rerun button icon",src:y,height:"16",width:"16"}),t(") をクリックして、アプリケーションを再起動します。")],-1)])),_:1}),u(r,null,{default:o(()=>l[268]||(l[268]=[n("p",null,[t("ブラウザで新しいURL ("),n("a",{href:"http://0.0.0.0:9292/test1"},[n("a",{href:"http://0.0.0.0:9292/test1",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:9292/test1")]),t(") をリクエストします。使用するポート番号は、最初のタスク("),n("a",{href:"#change-the-default-port"},"デフォルトポートの変更"),t(")を試したかどうかによって異なります。以下に表示される出力が表示されるはずです:")],-1),n("img",{src:z,alt:"A browser screen displaying Hello from Ktor",width:"706"},null,-1),n("p",null,"HTTPリクエストファイルを作成した場合は、そこでも新しいエンドポイントを確認できます:",-1),n("img",{src:V,alt:"An HTTP request file in intelliJ IDEA",width:"450"},null,-1),n("p",null,"3つのハッシュ (###) を含む行は、異なるリクエストを区切るために必要であることに注意してください。",-1)])),_:1})]),_:1})]),_:1}),u(f,{title:"静的コンテンツを設定する",id:"configure-static-content"},{default:o(()=>[n("p",null,[u(k,null,{default:o(()=>l[270]||(l[270]=[t("Project")])),_:1}),l[272]||(l[272]=t("ツールウィンドウで、")),u(d,null,{default:o(()=>l[271]||(l[271]=[t("src/main/kotlin/com/example/plugins")])),_:1}),l[273]||(l[273]=t("フォルダに移動し、以下の手順に従います: "))]),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[l[274]||(l[274]=n("p",null,[n("code",null,"Routing.kt"),t("ファイルを開きます。")],-1)),l[275]||(l[275]=n("p",null,"これもデフォルトのコンテンツであるはずです:",-1)),u(e,{lang:"kotlin",code:`                        fun Application.configureRouting() {
                            routing {
                                get("/") {
                                    call.respondText("Hello World!")
                                }
                            }
                        }`}),l[276]||(l[276]=n("p",null,[t("このタスクでは、"),n("a",{href:"#add-a-new-http-endpoint"},"新しいHTTPエンドポイントの追加"),t("で指定された追加エンドポイントのコンテンツを挿入したかどうかは関係ありません。")],-1))]),_:1}),u(r,null,{default:o(()=>[l[278]||(l[278]=n("p",null,"ルーティングセクションに以下の行を追加します:",-1)),u(e,{lang:"kotlin",code:`                        fun Application.configureRouting() {
                            routing {
                                // 以下の行を追加
                                staticResources("/content", "mycontent")

                                get("/") {
                                    call.respondText("Hello World!")
                                }
                            }
                        }`}),l[279]||(l[279]=n("p",null,"この行の意味は以下のとおりです:",-1)),u(a,{type:"bullet"},{default:o(()=>l[277]||(l[277]=[n("li",null,[n("code",null,"staticResources()"),t("を呼び出すと、Ktorは、アプリケーションがHTMLやJavaScriptファイルなどの標準的なウェブサイトコンテンツを提供できるようにしたいことを伝えます。このコンテンツはブラウザ内で実行される場合がありますが、サーバーの観点からは静的であると見なされます。 ")],-1),n("li",null,[t("URL "),n("code",null,"/content"),t("は、このコンテンツを取得するために使用すべきパスを指定します。 ")],-1),n("li",null,[t("パス "),n("code",null,"mycontent"),t("は、静的コンテンツが配置されるフォルダの名前です。Ktorは"),n("code",null,"resources"),t("ディレクトリ内でこのフォルダを探します。 ")],-1)])),_:1})]),_:1}),u(r,null,{default:o(()=>[l[280]||(l[280]=n("p",null,"以下のインポートを追加します:",-1)),u(e,{lang:"kotlin",code:"                        import io.ktor.server.http.content.*"})]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[281]||(l[281]=[t("Project")])),_:1}),l[283]||(l[283]=t("ツールウィンドウで、")),l[284]||(l[284]=n("code",null,"src/main/resources",-1)),l[285]||(l[285]=t("フォルダを右クリックし、")),u(i,null,{default:o(()=>l[282]||(l[282]=[t("New | Directory")])),_:1}),l[286]||(l[286]=t("を選択します。 "))]),n("p",null,[l[289]||(l[289]=t("または、")),l[290]||(l[290]=n("code",null,"src/main/resources",-1)),l[291]||(l[291]=t("フォルダを選択し、")),u(w,null,{default:o(()=>l[287]||(l[287]=[t("⌘Сmd+N")])),_:1}),l[292]||(l[292]=t("を押して")),u(i,null,{default:o(()=>l[288]||(l[288]=[t("Directory")])),_:1}),l[293]||(l[293]=t("をクリックします。"))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[295]||(l[295]=t("新しいディレクトリに")),l[296]||(l[296]=n("code",null,"mycontent",-1)),l[297]||(l[297]=t("という名前を付け、")),u(w,null,{default:o(()=>l[294]||(l[294]=[t("↩Enter")])),_:1}),l[298]||(l[298]=t("を押します。"))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[300]||(l[300]=t("新しく作成したフォルダを右クリックし、")),u(i,null,{default:o(()=>l[299]||(l[299]=[t("New | File")])),_:1}),l[301]||(l[301]=t("をクリックします。 "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[303]||(l[303]=t("新しいファイルに「sample.html」という名前を付け、")),u(w,null,{default:o(()=>l[302]||(l[302]=[t("↩Enter")])),_:1}),l[304]||(l[304]=t("を押します。"))])]),_:1}),u(r,null,{default:o(()=>[l[305]||(l[305]=n("p",null,"新しく作成したファイルページに、例えば次のような有効なHTMLを入力します:",-1)),u(e,{lang:"html",code:`<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <title>My sample</title>
    </head>
    <body>
        <h1>This page is built with:</h1>
    <ol>
        <li>Ktor</li>
        <li>Kotlin</li>
        <li>HTML</li>
    </ol>
    </body>
</html>`})]),_:1}),u(r,null,{default:o(()=>l[306]||(l[306]=[n("p",null,[t("再実行ボタン ("),n("img",{alt:"intelliJ IDEA rerun button icon",src:y,height:"16",width:"16"}),t(") をクリックして、アプリケーションを再起動します。")],-1)])),_:1}),u(r,null,{default:o(()=>l[307]||(l[307]=[n("p",null,[n("a",{href:"http://0.0.0.0:9292/content/sample.html"},[n("a",{href:"http://0.0.0.0:9292/content/sample.html",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:9292/content/sample.html")]),t("でブラウザを開くと、サンプルページの内容が表示されるはずです:")],-1),n("img",{src:X,alt:"Output of a static page in browser",width:"706"},null,-1)])),_:1})]),_:1})]),_:1}),u(f,{title:"統合テストを記述する",id:"write-an-integration-test"},{default:o(()=>[n("p",null,[l[309]||(l[309]=t(" Ktorは")),u(s,{href:"/ktor/server-testing",summary:"%plugin_name%は、Ktorアプリケーションがスローされた例外やステータスコードに基づいて、あらゆる失敗状態に適切に応答できるようにします。"},{default:o(()=>l[308]||(l[308]=[t("統合テストの作成")])),_:1}),l[310]||(l[310]=t("をサポートしており、生成されたプロジェクトにはこの機能がバンドルされています。 "))]),l[322]||(l[322]=n("p",null,"これを利用するには、以下の手順に従います:",-1)),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[n("p",null,[u(d,null,{default:o(()=>l[311]||(l[311]=[t("src")])),_:1}),l[312]||(l[312]=t("の下に「test」という新しいディレクトリを作成し、その中に「kotlin」というサブディレクトリを作成します。 "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(d,null,{default:o(()=>l[313]||(l[313]=[t("src/test/kotlin")])),_:1}),l[314]||(l[314]=t("内に「com.example」という新しいパッケージを作成します。 "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(d,null,{default:o(()=>l[315]||(l[315]=[t("src/test/kotlin/com.example")])),_:1}),l[316]||(l[316]=t("内に「ApplicationTest.kt」という新しいファイルを作成します。 "))])]),_:1}),u(r,null,{default:o(()=>[l[317]||(l[317]=n("p",null,[n("code",null,"ApplicationTest.kt"),t("ファイルを開き、以下のコードを追加します:")],-1)),u(e,{lang:"kotlin",code:`                        class ApplicationTest {

                            @Test
                            fun testRoot() = testApplication {
                                application {
                                    module()
                                }
                                val response = client.get("/")

                                assertEquals(HttpStatusCode.OK, response.status)
                                assertEquals("Hello World!", response.bodyAsText())
                            }
                        }`}),l[318]||(l[318]=n("p",null,[n("code",null,"testApplication()"),t("メソッドは、Ktorの新しいインスタンスを作成します。このインスタンスは、Nettyなどのサーバーとは異なり、テスト環境内で実行されます。")],-1)),l[319]||(l[319]=n("p",null,[t("次に、"),n("code",null,"application()"),t("メソッドを使用して、"),n("code",null,"embeddedServer()"),t("から呼び出されるのと同じセットアップを呼び出すことができます。")],-1)),l[320]||(l[320]=n("p",null,[t("最後に、組み込みの"),n("code",null,"client"),t("オブジェクトとJUnitアサーションを使用して、サンプルリクエストを送信し、レスポンスを確認できます。")],-1))]),_:1}),u(r,null,{default:o(()=>[l[321]||(l[321]=n("p",null,"以下の必要なインポートを追加します:",-1)),u(e,{lang:"kotlin",code:`                        import io.ktor.client.request.*
                        import io.ktor.client.statement.*
                        import io.ktor.http.*
                        import io.ktor.server.testing.*
                        import org.junit.Assert.assertEquals
                        import org.junit.Test`})]),_:1})]),_:1}),l[323]||(l[323]=n("p",null," テストは、IntelliJ IDEAでテストを実行する標準的な方法のいずれかで実行できます。Ktorの新しいインスタンスを実行しているため、テストの成功または失敗は、アプリケーションが0.0.0.0で実行されているかどうかには依存しないことに注意してください。 ",-1)),l[324]||(l[324]=n("p",null,[n("a",{href:"#add-a-new-http-endpoint"},"新しいHTTPエンドポイントの追加"),t("を正常に完了した場合、この追加テストを追加できるはずです: ")],-1)),u(e,{lang:"Kotlin",code:`                @Test
                fun testNewEndpoint() = testApplication {
                    application {
                        module()
                    }

                    val response = client.get("/test1")

                    assertEquals(HttpStatusCode.OK, response.status)
                    assertEquals("html", response.contentType()?.contentSubtype)
                    assertContains(response.bodyAsText(), "Hello From Ktor")
                }`}),l[325]||(l[325]=n("p",null,"以下の追加インポートが必要です:",-1)),u(e,{lang:"Kotlin",code:"                import kotlin.test.assertContains"})]),_:1}),u(f,{title:"エラーハンドラーを登録する",id:"register-error-handlers"},{default:o(()=>[n("p",null,[u(s,{href:"/ktor/server-status-pages",summary:"%plugin_name%は、Ktorアプリケーションがスローされた例外やステータスコードに基づいて、あらゆる失敗状態に適切に応答できるようにします。"},{default:o(()=>l[326]||(l[326]=[t("StatusPagesプラグイン")])),_:1}),l[327]||(l[327]=t("を使用して、Ktorアプリケーションでエラーを処理できます。 "))]),n("p",null,[l[329]||(l[329]=t(" このプラグインは、デフォルトではプロジェクトに含まれていません。Ktorプロジェクトジェネレーターの")),u(k,null,{default:o(()=>l[328]||(l[328]=[t("Plugins")])),_:1}),l[330]||(l[330]=t("セクション、またはIntelliJ IDEAのプロジェクトウィザードを介してプロジェクトに追加することもできました。すでにプロジェクトを作成しているため、次のステップでは、プラグインを手動で追加および設定する方法を学びます。 "))]),l[349]||(l[349]=n("p",null," これを行うには4つのステップがあります: ",-1)),u(a,{type:"decimal"},{default:o(()=>l[331]||(l[331]=[n("li",null,[n("a",{href:"#add-dependency"},"Gradleビルドファイルに新しい依存関係を追加する。")],-1),n("li",null,[n("a",{href:"#install-plugin-and-specify-handler"},"プラグインをインストールし、例外ハンドラーを指定する。")],-1),n("li",null,[n("a",{href:"#write-sample-code"},"ハンドラーをトリガーするサンプルコードを記述する。")],-1),n("li",null,[n("a",{href:"#restart-and-invoke"},"サンプルコードを再起動して呼び出す。")],-1)])),_:1}),u(m,{title:"新しい依存関係を追加する",id:"add-dependency"},{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[332]||(l[332]=[t("Project")])),_:1}),l[333]||(l[333]=t("ツールウィンドウで、プロジェクトのルートフォルダに移動し、以下の手順に従います: "))]),u(r,null,{default:o(()=>l[334]||(l[334]=[n("p",null,[n("code",null,"build.gradle.kts"),t("ファイルを開きます。")],-1)])),_:1}),u(r,null,{default:o(()=>[l[335]||(l[335]=n("p",null,"依存関係セクションに、以下に示す追加の依存関係を追加します:",-1)),u(e,{lang:"kotlin",code:`                        dependencies {
                            // 追加する新しい依存関係
                            implementation("io.ktor:ktor-server-status-pages:$ktor_version")
                            // 既存の依存関係
                            implementation("io.ktor:ktor-server-core-jvm:$ktor_version")
                            implementation("io.ktor:ktor-server-netty-jvm:$ktor_version")
                            implementation("ch.qos.logback:logback-classic:$logback_version")
                            testImplementation("io.ktor:ktor-server-test-host-jvm:$ktor_version")
                            testImplementation("org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version")
                        }`}),l[336]||(l[336]=n("p",null,"これを行った後、新しい依存関係を認識させるためにプロジェクトをリロードする必要があります。",-1))]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[339]||(l[339]=t("macOSでは")),u(w,null,{default:o(()=>l[337]||(l[337]=[t("Shift+⌘Cmd+I")])),_:1}),l[340]||(l[340]=t("、Windowsでは")),u(w,null,{default:o(()=>l[338]||(l[338]=[t("Ctrl+Shift+O")])),_:1}),l[341]||(l[341]=t("を押してプロジェクトをリロードします。 "))])]),_:1})]),_:1}),u(m,{title:"プラグインをインストールし、例外ハンドラーを指定する",id:"install-plugin-and-specify-handler"},{default:o(()=>[u(r,null,{default:o(()=>[l[342]||(l[342]=n("p",null,[n("code",null,"Routing.kt"),t("の"),n("code",null,"configureRouting()"),t("メソッドに移動し、以下のコード行を追加します:")],-1)),u(e,{lang:"kotlin",code:`fun Application.configureRouting() {
    install(StatusPages) {
        exception<IllegalStateException> { call, cause ->
            call.respondText("App in illegal state as \${cause.message}")
        }
    }
    routing {
        get("/") {
            call.respondText("Hello World!")
        }
    }
}`}),l[343]||(l[343]=n("p",null,[t("これらの行は、"),n("code",null,"StatusPages"),t("プラグインをインストールし、"),n("code",null,"IllegalStateException"),t("タイプの例外がスローされた場合に実行するアクションを指定します。")],-1))]),_:1}),u(r,null,{default:o(()=>[l[344]||(l[344]=n("p",null,"以下のインポートを追加します:",-1)),u(e,{lang:"kotlin",code:"                        import io.ktor.server.plugins.statuspages.*"})]),_:1})]),_:1}),l[350]||(l[350]=n("p",null," HTTPエラーコードは通常レスポンスで設定されますが、このタスクの目的のため、出力はブラウザに直接表示されます。 ",-1)),u(m,{title:"ハンドラーをトリガーするサンプルコードを記述する",id:"write-sample-code"},{default:o(()=>[u(r,null,{default:o(()=>[l[345]||(l[345]=n("p",null,[n("code",null,"configureRouting()"),t("メソッド内に留まり、以下に示す追加の行を追加します:")],-1)),u(e,{lang:"kotlin",code:`fun Application.configureRouting() {
    install(StatusPages) {
        exception<IllegalStateException> { call, cause ->
            call.respondText("App in illegal state as \${cause.message}")
        }
    }
    routing {
        get("/") {
            call.respondText("Hello World!")
        }
        get("/error-test") {
            throw IllegalStateException("Too Busy")
        }
    }
}`}),l[346]||(l[346]=n("p",null,[t("これで、URL "),n("code",null,"/error-test"),t("のエンドポイントが追加されました。このエンドポイントがトリガーされると、ハンドラーで使用されているタイプのエラーがスローされます。")],-1))]),_:1})]),_:1}),u(m,{title:"サンプルコードを再起動して呼び出す",id:"restart-and-invoke"},{default:o(()=>[u(r,null,{default:o(()=>l[347]||(l[347]=[n("p",null,[t("再実行ボタン ("),n("img",{alt:"intelliJ IDEA rerun button icon",src:y,height:"16",width:"16"}),t(") をクリックして、アプリケーションを再起動します。")],-1)])),_:1}),u(r,null,{default:o(()=>l[348]||(l[348]=[n("p",null,[t("ブラウザでURL "),n("a",{href:"http://0.0.0.0:9292/error-test"},[n("a",{href:"http://0.0.0.0:9292/error-test",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:9292/error-test")]),t("に移動します。以下に示すエラーメッセージが表示されるはずです:")],-1),n("img",{src:Z,alt:"A browser screen with message `App in illegal state as Too Busy`",width:"706"},null,-1)])),_:1})]),_:1})]),_:1})]),_:1}),u(f,{title:"次のステップ",id:"next_steps"},{default:o(()=>[l[357]||(l[357]=n("p",null," 追加タスクの最後まで進んだのであれば、Ktorサーバーの設定、Ktorプラグインの統合、新しいルートの実装を理解していることでしょう。しかし、これは始まりにすぎません。Ktorの基本的な概念をさらに深く掘り下げるには、このガイドの次のチュートリアルに進んでください。 ",-1)),n("p",null,[l[355]||(l[355]=t(" 次に、")),u(s,{href:"/ktor/server-requests-and-responses",summary:"タスクマネージャーアプリケーションを構築することで、KtorとKotlinにおけるルーティング、リクエスト処理、およびパラメーターの基本を学びます。"},{default:o(()=>l[354]||(l[354]=[t("Task Managerアプリケーションを作成してリクエストを処理し、レスポンスを生成する")])),_:1}),l[356]||(l[356]=t("方法を学びます。 "))])]),_:1})]),_:1})])}const gl=_(ll,[["render",tl]]);export{ml as __pageData,gl as default};
