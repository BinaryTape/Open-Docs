import{_ as i}from"./chunks/rendering-example.DjBbBMnn.js";import{_ as a,c as n,o as t,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"타입 안전 HTML DSL","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/typesafe-html-dsl.md","filePath":"ko/kotlin/typesafe-html-dsl.md","lastUpdated":1754307826000}'),p={name:"ko/kotlin/typesafe-html-dsl.md"};function h(e,s,k,r,o,d){return t(),n("div",null,s[0]||(s[0]=[l(`<h1 id="타입-안전-html-dsl" tabindex="-1">타입 안전 HTML DSL <a class="header-anchor" href="#타입-안전-html-dsl" aria-label="Permalink to &quot;타입 안전 HTML DSL&quot;">​</a></h1><p><a href="https://www.github.com/kotlin/kotlinx.html" target="_blank" rel="noreferrer">kotlinx.html 라이브러리</a>는 정적으로 타입이 지정된 HTML 빌더를 사용하여 DOM 요소를 생성하는 기능을 제공합니다(그리고 JavaScript 외에도 JVM 타겟에서도 사용할 수 있습니다!). 이 라이브러리를 사용하려면 해당 레포지토리와 의존성을 <code>build.gradle.kts</code> 파일에 포함해야 합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stdlib-js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlinx:kotlinx-html-js:0.8.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>의존성이 포함되면, DOM을 생성하는 데 제공되는 다양한 인터페이스에 접근할 수 있습니다. 제목, 일부 텍스트, 그리고 링크를 렌더링하려면 예를 들어 다음 스니펫만으로도 충분합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.browser.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.html.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.html.dom.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    document.body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.append.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome to Kotlin/JS!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Fancy joining this year&#39;s &quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://kotlinconf.com/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;KotlinConf&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;?&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 예제를 브라우저에서 실행하면, DOM이 간단한 방식으로 구성됩니다. 이는 브라우저의 개발자 도구를 사용하여 웹사이트의 &#39;Elements&#39;를 확인하면 쉽게 알 수 있습니다:</p><p><img src="`+i+'" alt="kotlinx.html로 웹사이트 렌더링" width="700"></p><p><code>kotlinx.html</code> 라이브러리에 대해 더 자세히 알아보려면, <a href="https://github.com/Kotlin/kotlinx.html/wiki/Getting-started" target="_blank" rel="noreferrer">GitHub Wiki</a>를 확인해 보세요. 여기에서 DOM에 추가하지 않고 <a href="https://github.com/Kotlin/kotlinx.html/wiki/DOM-trees" target="_blank" rel="noreferrer">요소를 생성하는 방법</a>, <code>onClick</code>과 같은 <a href="https://github.com/Kotlin/kotlinx.html/wiki/Events" target="_blank" rel="noreferrer">이벤트에 바인딩하는 방법</a>, 그리고 HTML 요소에 <a href="https://github.com/Kotlin/kotlinx.html/wiki/Elements-CSS-classes" target="_blank" rel="noreferrer">CSS 클래스를 적용하는 방법</a>에 대한 예시 등 다양한 정보를 찾을 수 있습니다.</p>',8)]))}const y=a(p,[["render",h]]);export{c as __pageData,y as default};
