import{_ as k}from"./chunks/icon-1-done.B5D6C9SU.js";import{_ as h}from"./chunks/icon-2.D_3lm1kb.js";import{_ as o}from"./chunks/icon-3-todo.aEuKIG4W.js";import{_ as d}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as E}from"./chunks/icon-5-todo.DJgVODZv.js";import{_ as g,a as y}from"./chunks/first-multiplatform-project-on-ios-2.CLUQ81d4.js";import{_ as m,C as t,c,o as u,j as i,G as n,ag as F,a,w as e}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-update-ui.md","filePath":"kmp/multiplatform-update-ui.md","lastUpdated":1755516278000}'),f={name:"kmp/multiplatform-update-ui.md"};function C(b,s,A,B,w,v){const l=t("secondary-label"),p=t("Links"),r=t("tldr");return u(),c("div",null,[s[21]||(s[21]=i("h1",{id:"更新用户界面",tabindex:"-1"},[a("更新用户界面 "),i("a",{class:"header-anchor",href:"#更新用户界面","aria-label":'Permalink to "更新用户界面"'},"​")],-1)),n(l,{ref:"IntelliJ IDEA"},null,512),n(l,{ref:"Android Studio"},null,512),n(r,null,{default:e(()=>[s[18]||(s[18]=i("p",null,"本教程使用 IntelliJ IDEA，但你也可以在 Android Studio 中进行操作 —— 这两个 IDE 共享相同的核心功能和 Kotlin Multiplatform 支持。",-1)),s[19]||(s[19]=i("br",null,null,-1)),s[20]||(s[20]=i("p",null,[a("这是 "),i("strong",null,"使用共享逻辑和原生 UI 创建 Kotlin Multiplatform 应用程序"),a(" 教程的第二部分。在继续之前，请确保你已完成之前的步骤。")],-1)),i("p",null,[s[1]||(s[1]=i("img",{src:k,width:"20",alt:"第一步"},null,-1)),s[2]||(s[2]=a()),n(p,{href:"/kmp/multiplatform-create-first-app",summary:"本教程使用 IntelliJ IDEA，但你也可以在 Android Studio 中进行操作 —— 这两个 IDE 共享相同的核心功能和 Kotlin Multiplatform 支持。这是使用共享逻辑和原生 UI 创建 Kotlin Multiplatform 应用程序教程的第一部分。创建你的 Kotlin Multiplatform 应用程序 更新用户界面 添加依赖项 共享更多逻辑 完善你的项目"},{default:e(()=>s[0]||(s[0]=[a("创建你的 Kotlin Multiplatform 应用程序")])),_:1}),s[3]||(s[3]=i("br",null,null,-1)),s[4]||(s[4]=i("img",{src:h,width:"20",alt:"第二步"},null,-1)),s[5]||(s[5]=a()),s[6]||(s[6]=i("strong",null,"更新用户界面",-1)),s[7]||(s[7]=i("br",null,null,-1)),s[8]||(s[8]=i("img",{src:o,width:"20",alt:"第三步"},null,-1)),s[9]||(s[9]=a(" 添加依赖项")),s[10]||(s[10]=i("br",null,null,-1)),s[11]||(s[11]=i("br",null,null,-1)),s[12]||(s[12]=i("img",{src:d,width:"20",alt:"第四步"},null,-1)),s[13]||(s[13]=a(" 共享更多逻辑")),s[14]||(s[14]=i("br",null,null,-1)),s[15]||(s[15]=i("img",{src:E,width:"20",alt:"第五步"},null,-1)),s[16]||(s[16]=a(" 完善你的项目")),s[17]||(s[17]=i("br",null,null,-1))])]),_:1}),s[22]||(s[22]=F(`<p>要构建用户界面，你将使用 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 工具包来完成项目的 Android 部分，并使用 <a href="https://developer.apple.com/xcode/swiftui/" target="_blank" rel="noreferrer">SwiftUI</a> 来完成 iOS 部分。 它们都是声明式 UI 框架，你将看到 UI 实现中的相似之处。在这两种情况下， 你都将数据存储在 <code>phrases</code> 变量中，然后遍历它以生成一个 <code>Text</code> 项的 list。</p><h2 id="更新-android-部分" tabindex="-1">更新 Android 部分 <a class="header-anchor" href="#更新-android-部分" aria-label="Permalink to &quot;更新 Android 部分&quot;">​</a></h2><p><code>composeApp</code> 模块包含一个 Android 应用程序，定义其主 activity 和 UI 视图，并将 <code>shared</code> 模块作为常规的 Android 库使用。该应用程序的 UI 使用 Compose Multiplatform 框架。</p><p>进行一些更改，并查看它们如何在 UI 中反映出来：</p><ol><li><p>导航到 <code>composeApp/src/androidMain/kotlin</code> 中的 <code>App.kt</code> 文件。</p></li><li><p>找到 <code>Greeting</code> 类的调用。选择 <code>greet()</code> 函数，右键点击它，然后选择 <strong>Go To</strong> | <strong>Declaration or Usages</strong>。 你将看到它与你在上一步中编辑的 <code>shared</code> 模块中的类是同一个。</p></li><li><p>在 <code>Greeting.kt</code> 文件中，更新 <code>greet()</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.random.Random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hi!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Guess what this is! &gt; \${platform.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reversed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>现在它返回一个字符串的 list。</p></li><li><p>回到 <code>App.kt</code> 文件并更新 <code>App()</code> 实现：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(all </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">safeContentPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            verticalArrangement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Arrangement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spacedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            greeting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(greeting)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                HorizontalDivider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这里的 <code>Column</code> 可组合项显示了每个 <code>Text</code> 项，在它们周围添加了 padding 并在它们之间留出空间。</p></li><li><p>按照 IntelliJ IDEA 的建议导入缺失的依赖项。</p></li><li><p>现在你可以运行 Android 应用程序，看看它是如何显示字符串 list 的：</p><p><img src="`+g+`" alt="Updated UI of Android multiplatform app" width="300"></p></li></ol><h2 id="使用-ios-模块" tabindex="-1">使用 iOS 模块 <a class="header-anchor" href="#使用-ios-模块" aria-label="Permalink to &quot;使用 iOS 模块&quot;">​</a></h2><p><code>iosApp</code> 目录构建为一个 iOS 应用程序。它依赖并使用 <code>shared</code> 模块作为一个 iOS framework。该应用程序的 UI 是用 Swift 编写的。</p><p>实现与 Android 应用程序相同的更改：</p><ol><li><p>在 IntelliJ IDEA 中，在 <strong>Project</strong> 工具窗口的项目根目录下找到 <code>iosApp</code> 文件夹。</p></li><li><p>打开 <code>ContentView.swift</code> 文件，右键点击 <code>Greeting().greet()</code> 调用，然后选择 <strong>Go To</strong> | <strong>Definition</strong>。</p><p>你将看到 <code>shared</code> 模块中定义的 Kotlin 函数的 Objective-C 声明。当从 Objective-C/Swift 中使用时，Kotlin 类型会表示为 Objective-C 类型。这里 <code>greet()</code> 函数在 Kotlin 中返回 <code>List&lt;String&gt;</code>，在 Swift 中则被视为返回 <code>NSArray&lt;NSString&gt;</code>。有关类型映射的更多信息，请参见 <a href="https://kotlinlang.org/docs/native-objc-interop.html" target="_blank" rel="noreferrer">Interoperability with Swift/Objective-C</a>。</p></li><li><p>更新 SwiftUI 代码以与 Android 应用程序相同的方式显示一个 item list：</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> phrases </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(phrases, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: \\.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>greet()</code> 调用的结果存储在 <code>phrases</code> 变量中（Swift 中的 <code>let</code> 类似于 Kotlin 的 <code>val</code>）。</li><li><code>List</code> 函数生成一个 <code>Text</code> 项的 list。</li></ul></li><li><p>启动 iOS 运行配置以查看更改：</p><p><img src="`+y+'" alt="Updated UI of your iOS multiplatform app" width="300"></p></li></ol><h2 id="可能的问题和解决方案" tabindex="-1">可能的问题和解决方案 <a class="header-anchor" href="#可能的问题和解决方案" aria-label="Permalink to &quot;可能的问题和解决方案&quot;">​</a></h2><h3 id="xcode-报告调用共享-framework-的代码中存在错误" tabindex="-1">Xcode 报告调用共享 framework 的代码中存在错误 <a class="header-anchor" href="#xcode-报告调用共享-framework-的代码中存在错误" aria-label="Permalink to &quot;Xcode 报告调用共享 framework 的代码中存在错误&quot;">​</a></h3><p>如果你正在使用 Xcode，你的 Xcode 项目可能仍在使用旧版本的 framework。 要解决此问题，请返回 IntelliJ IDEA 并重新构建项目或启动 iOS 运行配置。</p><h3 id="xcode-报告导入共享-framework-时出错" tabindex="-1">Xcode 报告导入共享 framework 时出错 <a class="header-anchor" href="#xcode-报告导入共享-framework-时出错" aria-label="Permalink to &quot;Xcode 报告导入共享 framework 时出错&quot;">​</a></h3><p>如果你正在使用 Xcode，它可能需要清除缓存的二进制文件：尝试通过选择主菜单中的 <strong>Product | Clean Build Folder</strong> 来重置环境。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在本教程的下一部分，你将学习依赖项，并添加一个第三方库来扩展项目的功能。</p><p><strong><a href="./multiplatform-dependencies">前往下一部分</a></strong></p><h2 id="获取帮助" tabindex="-1">获取帮助 <a class="header-anchor" href="#获取帮助" aria-label="Permalink to &quot;获取帮助&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>。获取<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">邀请</a>并加入 <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 频道。</li><li><strong>Kotlin issue tracker</strong>。 <a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">报告新问题</a>。</li></ul>',19))])}const K=m(f,[["render",C]]);export{T as __pageData,K as default};
