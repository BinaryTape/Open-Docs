import{_ as o,a as k,b as d}from"./chunks/published_on_maven_central.BgjvbPaZ.js";import{_ as c,C as t,c as g,o as E,ag as n,G as e,j as s,w as l,a as i}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"Maven Central에 라이브러리 게시하기 – 튜토리얼","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/multiplatform-publish-libraries.md","filePath":"ko/kmp/multiplatform-publish-libraries.md","lastUpdated":1755516278000}'),u={name:"ko/kmp/multiplatform-publish-libraries.md"};function y(b,a,m,F,C,v){const p=t("TabItem"),h=t("Tabs"),r=t("shortcut");return E(),g("div",null,[a[8]||(a[8]=n('<h1 id="maven-central에-라이브러리-게시하기-–-튜토리얼" tabindex="-1">Maven Central에 라이브러리 게시하기 – 튜토리얼 <a class="header-anchor" href="#maven-central에-라이브러리-게시하기-–-튜토리얼" aria-label="Permalink to &quot;Maven Central에 라이브러리 게시하기 – 튜토리얼&quot;">​</a></h1><p>이 튜토리얼에서는 Kotlin Multiplatform 라이브러리를 <a href="https://central.sonatype.com/" target="_blank" rel="noreferrer">Maven Central</a> 저장소에 게시하는 방법을 배웁니다.</p><p>라이브러리를 게시하려면 다음을 수행해야 합니다.</p><ol><li>Maven Central 계정 및 서명에 사용할 PGP 키를 포함한 자격 증명을 설정합니다.</li><li>라이브러리 프로젝트에서 게시 플러그인을 구성합니다.</li><li>게시 플러그인이 아티팩트에 서명하고 업로드할 수 있도록 자격 증명을 제공합니다.</li><li>로컬 또는 지속적 통합을 사용하여 게시 작업을 실행합니다.</li></ol><p>이 튜토리얼은 다음을 가정합니다:</p><ul><li>오픈소스 라이브러리를 생성하고 있습니다.</li><li>라이브러리 코드를 GitHub 저장소에 저장하고 있습니다.</li><li>macOS 또는 Linux를 사용 중입니다. Windows 사용자라면 <a href="https://gnupg.org/download" target="_blank" rel="noreferrer">GnuPG 또는 Gpg4win</a>을 사용하여 키 쌍을 생성하세요.</li><li>아직 Maven Central에 등록하지 않았거나, <a href="https://central.sonatype.org/publish-ea/publish-ea-guide/" target="_blank" rel="noreferrer">Central Portal에 게시</a>하기에 적합한 기존 계정(2024년 3월 12일 이후에 생성되었거나 지원팀을 통해 Central Portal로 마이그레이션된 계정)을 가지고 있습니다.</li><li>지속적 통합을 위해 GitHub Actions를 사용하고 있습니다.</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>여기 있는 대부분의 단계는 다른 설정을 사용하는 경우에도 여전히 적용되지만, 고려해야 할 몇 가지 차이점이 있을 수 있습니다. <a href="./multiplatform-publish-lib-setup#host-requirements">중요한 제한 사항</a>은 Apple 타겟이 macOS가 설치된 머신에서 빌드되어야 한다는 것입니다.</p></div><h2 id="샘플-라이브러리" tabindex="-1">샘플 라이브러리 <a class="header-anchor" href="#샘플-라이브러리" aria-label="Permalink to &quot;샘플 라이브러리&quot;">​</a></h2><p>이 튜토리얼에서는 <a href="https://github.com/Kotlin/multiplatform-library-template/" target="_blank" rel="noreferrer">fibonacci</a> 라이브러리를 예시로 사용합니다. 해당 저장소의 코드를 참조하여 게시 설정이 어떻게 작동하는지 확인할 수 있습니다.</p><p>코드를 재사용하고 싶다면, <strong>모든 예시 값을 프로젝트에 맞는 값으로 바꿔야 합니다</strong>.</p><h2 id="계정-및-자격-증명-준비" tabindex="-1">계정 및 자격 증명 준비 <a class="header-anchor" href="#계정-및-자격-증명-준비" aria-label="Permalink to &quot;계정 및 자격 증명 준비&quot;">​</a></h2><p>Maven Central에 게시를 시작하려면 <a href="https://central.sonatype.com/" target="_blank" rel="noreferrer">Maven Central</a> 포털에 로그인(또는 새 계정 생성)하세요.</p><h3 id="네임스페이스-선택-및-확인" tabindex="-1">네임스페이스 선택 및 확인 <a class="header-anchor" href="#네임스페이스-선택-및-확인" aria-label="Permalink to &quot;네임스페이스 선택 및 확인&quot;">​</a></h3><p>Maven Central에서 라이브러리 아티팩트를 고유하게 식별하려면 확인된 네임스페이스가 필요합니다.</p><p>Maven 아티팩트는 <a href="https://central.sonatype.org/publish/requirements/#correct-coordinates" target="_blank" rel="noreferrer">좌표</a>로 식별됩니다. 예를 들어, <code>com.example:fibonacci-library:1.0.0</code>과 같습니다. 이러한 좌표는 콜론으로 구분된 세 부분으로 구성됩니다.</p><ul><li><code>groupId</code>: 역 DNS 형식으로, 예를 들어 <code>com.example</code></li><li><code>artifactId</code>: 라이브러리 자체의 고유 이름으로, 예를 들어 <code>fibonacci-library</code></li><li><code>version</code>: 버전 문자열로, 예를 들어 <code>1.0.0</code>. 버전은 어떤 문자열이든 될 수 있지만 <code>-SNAPSHOT</code>으로 끝날 수 없습니다.</li></ul><p>등록된 네임스페이스는 Maven Central에서 <code>groupId</code>의 형식을 설정할 수 있도록 합니다. 예를 들어, <code>com.example</code> 네임스페이스를 등록하면 <code>groupId</code>를 <code>com.example</code>, <code>com.example.libraryname</code>, <code>com.example.module.feature</code> 등으로 설정하여 아티팩트를 게시할 수 있습니다.</p><p>Maven Central에 로그인한 후 <a href="https://central.sonatype.com/publishing/namespaces" target="_blank" rel="noreferrer">네임스페이스</a> 페이지로 이동합니다. 그런 다음, <strong>Add Namespace</strong> 버튼을 클릭하고 네임스페이스를 등록합니다.</p>',18)),e(h,null,{default:l(()=>[e(p,{id:"github",title:"GitHub 저장소 사용"},{default:l(()=>a[0]||(a[0]=[s("p",null,"GitHub 계정을 사용하여 네임스페이스를 생성하는 것은 도메인 이름을 소유하고 있지 않을 때 좋은 옵션입니다.",-1),s("ol",null,[s("li",null,[i("네임스페이스로 "),s("code",null,"io.github.<your username>"),i("을 입력합니다. 예를 들어 "),s("code",null,"io.github.kotlinhandson"),i("을 입력하고 "),s("strong",null,"Submit"),i("을 클릭합니다.")]),s("li",null,[i("새로 생성된 네임스페이스 아래에 표시된 "),s("strong",null,"Verification Key"),i("를 복사합니다.")]),s("li",null,[i("GitHub에서 사용한 사용자 이름으로 로그인하고, 인증 키를 저장소 이름으로 사용하여 새 공개 저장소를 생성합니다. 예를 들어 "),s("code",null,"http://github.com/kotlin-hands-on/ex4mpl3c0d"),i("와 같습니다.")]),s("li",null,[i("Maven Central로 돌아가서 "),s("strong",null,"Verify Namespace"),i(" 버튼을 클릭합니다. 확인에 성공하면 생성했던 저장소를 삭제할 수 있습니다.")])],-1)])),_:1}),e(p,{id:"domain",title:"도메인 이름 사용"},{default:l(()=>a[1]||(a[1]=[s("p",null,"소유한 도메인 이름을 네임스페이스로 사용하려면 다음을 수행합니다.",-1),s("ol",null,[s("li",null,[s("p",null,[i("역 DNS 형식으로 도메인을 네임스페이스로 입력합니다. 도메인이 "),s("code",null,"example.com"),i("이라면 "),s("code",null,"com.example"),i("을 입력합니다.")])]),s("li",null,[s("p",null,[i("표시된 "),s("strong",null,"Verification Key"),i("를 복사합니다.")])]),s("li",null,[s("p",null,"인증 키를 내용으로 하는 새 TXT DNS 레코드를 생성합니다."),s("p",null,[i("다양한 도메인 등록기관에서 이 작업을 수행하는 방법에 대한 자세한 내용은 "),s("a",{href:"https://central.sonatype.org/faq/how-to-set-txt-record/",target:"_blank",rel:"noreferrer"},"Maven Central의 FAQ"),i("를 참조하세요.")])]),s("li",null,[s("p",null,[i("Maven Central로 돌아가서 "),s("strong",null,"Verify Namespace"),i(" 버튼을 클릭합니다. 확인에 성공하면 생성했던 TXT 레코드를 삭제할 수 있습니다.")])])],-1)])),_:1})]),_:1}),a[9]||(a[9]=n('<h4 id="키-쌍-생성" tabindex="-1">키 쌍 생성 <a class="header-anchor" href="#키-쌍-생성" aria-label="Permalink to &quot;키 쌍 생성&quot;">​</a></h4><p>Maven Central에 무언가를 게시하기 전에 아티팩트에 <a href="https://central.sonatype.org/publish/requirements/gpg/" target="_blank" rel="noreferrer">PGP 서명</a>을 해야 합니다. 이는 사용자가 아티팩트의 출처를 확인할 수 있도록 합니다.</p><p>서명을 시작하려면 키 쌍을 생성해야 합니다.</p><ul><li>_개인 키_는 아티팩트에 서명하는 데 사용되며 다른 사람과 공유해서는 안 됩니다.</li><li>_공개 키_는 다른 사람과 공유하여 아티팩트의 서명을 확인할 수 있도록 합니다.</li></ul><p>서명을 관리할 수 있는 <code>gpg</code> 도구는 <a href="https://gnupg.org/download/index.html" target="_blank" rel="noreferrer">GnuPG 웹사이트</a>에서 사용할 수 있습니다. <a href="https://brew.sh/" target="_blank" rel="noreferrer">Homebrew</a>와 같은 패키지 관리자를 사용하여 설치할 수도 있습니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gpg</span></span></code></pre></div>',6)),s("ol",null,[a[6]||(a[6]=n('<li><p>다음 명령어를 사용하여 키 쌍 생성을 시작하고 프롬프트가 나타나면 필요한 세부 정보를 제공합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --full-generate-key</span></span></code></pre></div></li>',1)),s("li",null,[s("p",null,[a[3]||(a[3]=i("생성할 키 유형에 대해 권장되는 기본값을 선택합니다. 선택 사항을 비워두고 ")),e(r,null,{default:l(()=>a[2]||(a[2]=[i("Enter")])),_:1}),a[4]||(a[4]=i("를 눌러 기본값을 수락할 수 있습니다."))]),a[5]||(a[5]=n(`<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Please select what kind of key you want:</span></span>
<span class="line"><span>    (1) RSA and RSA</span></span>
<span class="line"><span>    (2) DSA and Elgamal</span></span>
<span class="line"><span>    (3) DSA (sign only)</span></span>
<span class="line"><span>    (4) RSA (sign only)</span></span>
<span class="line"><span>    (9) ECC (sign and encrypt) *default*</span></span>
<span class="line"><span>    (10) ECC (sign only)</span></span>
<span class="line"><span>    (14) Existing key from card</span></span>
<span class="line"><span>Your selection? 9</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Please select which elliptic curve you want:</span></span>
<span class="line"><span>    (1) Curve 25519 *default*</span></span>
<span class="line"><span>    (4) NIST P-384</span></span>
<span class="line"><span>    (6) Brainpool P-256</span></span>
<span class="line"><span>Your selection? 1</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>이 글을 쓰는 시점에는 <code>Curve 25519</code>와 함께 <code>ECC (sign and encrypt)</code>가 사용됩니다. <code>gpg</code>의 이전 버전은 <code>3072</code>비트 키 크기의 <code>RSA</code>가 기본값일 수 있습니다.</p></div>`,2))]),a[7]||(a[7]=n(`<li><p>키가 유효한 기간을 지정하라는 메시지가 나타나면 만료일이 없는 기본 옵션을 선택할 수 있습니다.</p><p>특정 기간 후에 자동으로 만료되는 키를 생성하도록 선택하면, 만료 시 <a href="https://central.sonatype.org/publish/requirements/gpg/#dealing-with-expired-keys" target="_blank" rel="noreferrer">유효 기간을 연장</a>해야 합니다.</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Please specify how long the key should be valid.</span></span>
<span class="line"><span>    0 = key does not expire</span></span>
<span class="line"><span>    &lt;n&gt;  = key expires in n days</span></span>
<span class="line"><span>    &lt;n&gt;w = key expires in n weeks</span></span>
<span class="line"><span>    &lt;n&gt;m = key expires in n months</span></span>
<span class="line"><span>    &lt;n&gt;y = key expires in n years</span></span>
<span class="line"><span>Key is valid for? (0) 0</span></span>
<span class="line"><span>Key does not expire at all</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Is this correct? (y/N) y</span></span></code></pre></div></li><li><p>키를 ID와 연결할 이름, 이메일, 선택 사항인 주석을 입력합니다(주석 필드는 비워둘 수 있습니다).</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GnuPG needs to construct a user ID to identify your key.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Real name: Jane Doe</span></span>
<span class="line"><span>Email address: janedoe@example.com</span></span>
<span class="line"><span>Comment:</span></span>
<span class="line"><span>You selected this USER-ID:</span></span>
<span class="line"><span>    &quot;Jane Doe &lt;janedoe@example.com&gt;&quot;</span></span></code></pre></div></li><li><p>키를 암호화할 암호를 입력하고 프롬프트가 나타나면 다시 반복합니다.</p><p>이 암호는 안전하고 비공개적으로 보관하세요. 나중에 아티팩트에 서명할 때 개인 키에 접근하는 데 필요합니다.</p></li><li><p>다음 명령어를 사용하여 생성한 키를 확인합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list-keys</span></span></code></pre></div></li>`,4))]),a[10]||(a[10]=n(`<p>출력은 다음과 유사하게 표시됩니다.</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pub   ed25519 2024-10-06 [SC]</span></span>
<span class="line"><span>      F175482952A225BFD4A07A713EE6B5F76620B385CE</span></span>
<span class="line"><span>uid   [ultimate] Jane Doe &lt;janedoe@example.com&gt;</span></span>
<span class="line"><span>      sub   cv25519 2024-10-06 [E]</span></span></code></pre></div><p>다음 단계에서는 출력에 나타나는 키의 긴 영숫자 식별자를 사용해야 합니다.</p><h4 id="공개-키-업로드" tabindex="-1">공개 키 업로드 <a class="header-anchor" href="#공개-키-업로드" aria-label="Permalink to &quot;공개 키 업로드&quot;">​</a></h4><p>Maven Central에서 공개 키를 수락하려면 <a href="https://central.sonatype.org/publish/requirements/gpg/#distributing-your-public-key" target="_blank" rel="noreferrer">키 서버에 공개 키를 업로드</a>해야 합니다. 여러 키 서버가 있으며, <code>keyserver.ubuntu.com</code>을 기본 선택으로 사용하겠습니다.</p><p><code>gpg</code>를 사용하여 공개 키를 업로드하려면 다음 명령어를 실행하고, 매개변수에 <strong>자신의 키 ID를 대체</strong>하세요.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --keyserver</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keyserver.ubuntu.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --send-keys</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> F175482952A225BFC4A07A715EE6B5F76620B385CE</span></span></code></pre></div><h4 id="개인-키-내보내기" tabindex="-1">개인 키 내보내기 <a class="header-anchor" href="#개인-키-내보내기" aria-label="Permalink to &quot;개인 키 내보내기&quot;">​</a></h4><p>Gradle 프로젝트가 개인 키에 접근할 수 있도록 하려면, 개인 키를 바이너리 파일로 내보내야 합니다. 키를 생성할 때 사용한 암호를 입력하라는 메시지가 나타날 것입니다.</p><p>다음 명령어를 사용하고, 매개변수로 <strong>자신의 키 ID를 전달</strong>하세요.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-armor</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --export-secret-keys</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> F175482952A225BFC4A07A715EE6B5F76620B385CE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key.gpg</span></span></code></pre></div><p>이 명령어는 개인 키가 포함된 <code>key.gpg</code> 바이너리 파일을 생성합니다(<code>--armor</code> 플래그는 키의 일반 텍스트 버전만 생성하므로 사용하지 않도록 주의하세요).</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>개인 키 파일은 절대로 누구와도 공유하지 마세요. 개인 키는 여러분의 자격 증명으로 파일에 서명할 수 있도록 하므로, 오직 여러분만 접근할 수 있어야 합니다.</p></div><h2 id="프로젝트-구성" tabindex="-1">프로젝트 구성 <a class="header-anchor" href="#프로젝트-구성" aria-label="Permalink to &quot;프로젝트 구성&quot;">​</a></h2><h3 id="라이브러리-프로젝트-준비" tabindex="-1">라이브러리 프로젝트 준비 <a class="header-anchor" href="#라이브러리-프로젝트-준비" aria-label="Permalink to &quot;라이브러리 프로젝트 준비&quot;">​</a></h3><p>템플릿 프로젝트에서 라이브러리 개발을 시작했다면, 이제 프로젝트의 기본 이름을 라이브러리 자체의 이름과 일치하도록 변경하는 것이 좋습니다. 여기에는 라이브러리 모듈의 이름과 최상위 <code>build.gradle.kts</code> 파일의 루트 프로젝트 이름이 포함됩니다.</p><p>프로젝트에 Android 타겟이 있는 경우, <a href="https://developer.android.com/build/publish-library/prep-lib-release" target="_blank" rel="noreferrer">Android 라이브러리 릴리스 준비 단계</a>를 따라야 합니다. 최소한 이 과정에서는 라이브러리의 리소스가 컴파일될 때 고유한 <code>R</code> 클래스가 생성되도록 <a href="https://developer.android.com/build/publish-library/prep-lib-release#choose-namespace" target="_blank" rel="noreferrer">적절한 네임스페이스를 지정</a>해야 합니다. 이 네임스페이스는 이전에 <a href="#choose-and-verify-a-namespace">생성한</a> Maven 네임스페이스와 다르다는 점에 유의하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    namespace </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;io.github.kotlinhandson.fibonacci&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="게시-플러그인-설정" tabindex="-1">게시 플러그인 설정 <a class="header-anchor" href="#게시-플러그인-설정" aria-label="Permalink to &quot;게시 플러그인 설정&quot;">​</a></h3><p>이 튜토리얼에서는 <a href="https://github.com/vanniktech/gradle-maven-publish-plugin" target="_blank" rel="noreferrer">vanniktech/gradle-maven-publish-plugin</a>을 사용하여 Maven Central에 게시를 지원합니다. 플러그인의 장점에 대해 <a href="https://vanniktech.github.io/gradle-maven-publish-plugin/#advantages-over-maven-publish" target="_blank" rel="noreferrer">여기</a>에서 자세히 읽을 수 있습니다. 플러그인의 사용법 및 사용 가능한 구성 옵션에 대한 자세한 내용은 <a href="https://vanniktech.github.io/gradle-maven-publish-plugin/central/" target="_blank" rel="noreferrer">플러그인 문서</a>를 참조하세요.</p><p>프로젝트에 플러그인을 추가하려면 라이브러리 모듈의 <code>build.gradle.kts</code> 파일에 있는 <code>plugins {}</code> 블록에 다음 줄을 추가합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;module directory&gt;/build.gradle.kts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.vanniktech.maven.publish&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.30.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>플러그인의 최신 버전을 확인하려면 <a href="https://github.com/vanniktech/gradle-maven-publish-plugin/releases" target="_blank" rel="noreferrer">릴리스 페이지</a>를 참조하세요.</p></div><p>같은 파일에 다음 구성을 추가하고, 라이브러리에 대한 모든 값을 사용자 지정했는지 확인하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;module directory&gt;/build.gradle.kts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavenPublishing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    publishToMavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SonatypeHost.CENTRAL_PORTAL)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    signAllPublications</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(group.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fibonacci&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Fibonacci library&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A mathematics calculation library.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        inceptionYear </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2024&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/kotlin-hands-on/fibonacci/&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        licenses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            license</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;The Apache License, Version 2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://www.apache.org/licenses/LICENSE-2.0.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                distribution </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://www.apache.org/licenses/LICENSE-2.0.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        developers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            developer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kotlin-hands-on&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin Developer Advocate&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/kotlin-hands-on/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        scm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/kotlin-hands-on/fibonacci/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;scm:git:git://github.com/kotlin-hands-on/fibonacci.git&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            developerConnection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;scm:git:ssh://git@github.com/kotlin-hands-on/fibonacci.git&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>이를 구성하려면 <a href="https://docs.gradle.org/current/userguide/build_environment.html" target="_blank" rel="noreferrer">Gradle 속성</a>을 사용할 수도 있습니다.</p></div><p>여기서 가장 중요한 설정은 다음과 같습니다.</p><ul><li><code>coordinates</code>: 라이브러리의 <code>groupId</code>, <code>artifactId</code>, <code>version</code>을 지정합니다.</li><li><a href="https://central.sonatype.org/publish/requirements/#license-information" target="_blank" rel="noreferrer">license</a>: 라이브러리가 게시되는 라이선스입니다.</li><li><a href="https://central.sonatype.org/publish/requirements/#developer-information" target="_blank" rel="noreferrer">developer information</a>: 라이브러리 저자를 나열합니다.</li><li><a href="https://central.sonatype.org/publish/requirements/#scm-information" target="_blank" rel="noreferrer">SCM (Source Code Management) information</a>: 라이브러리의 소스 코드가 호스팅되는 위치를 지정합니다.</li></ul><h2 id="지속적-통합을-사용하여-maven-central에-게시" tabindex="-1">지속적 통합을 사용하여 Maven Central에 게시 <a class="header-anchor" href="#지속적-통합을-사용하여-maven-central에-게시" aria-label="Permalink to &quot;지속적 통합을 사용하여 Maven Central에 게시&quot;">​</a></h2><h3 id="사용자-토큰-생성" tabindex="-1">사용자 토큰 생성 <a class="header-anchor" href="#사용자-토큰-생성" aria-label="Permalink to &quot;사용자 토큰 생성&quot;">​</a></h3><p>Maven Central에 게시 요청을 승인하려면 Maven 액세스 토큰이 필요합니다. <a href="https://central.sonatype.com/account" target="_blank" rel="noreferrer">토큰 기반 인증 설정</a> 페이지를 열고 <strong>Generate User Token</strong> 버튼을 클릭합니다.</p><p>출력은 아래 예시와 같이 사용자 이름과 암호를 포함합니다. 이 자격 증명을 분실하면 Maven Central에 저장되지 않으므로 나중에 새 자격 증명을 생성해야 합니다.</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\${server}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;l2nfaPmz&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;gh9jT9XfnGtUngWTZwTu/8141keYdmQpipqLPRKeDLTh&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="github에-시크릿-추가" tabindex="-1">GitHub에 시크릿 추가 <a class="header-anchor" href="#github에-시크릿-추가" aria-label="Permalink to &quot;GitHub에 시크릿 추가&quot;">​</a></h3><p>GitHub Actions 워크플로에서 게시하는 데 필요한 키와 자격 증명을 비공개로 유지하면서 사용하려면 이 값들을 시크릿으로 저장해야 합니다.</p><ol><li><p>GitHub 저장소 <strong>Settings</strong> 페이지에서 <strong>Security</strong> | <strong>Secrets and variables</strong> | <strong>Actions</strong>를 클릭합니다.</p></li><li><p><code>New repository secret</code> 버튼을 클릭하고 다음 시크릿을 추가합니다.</p><ul><li><code>MAVEN_CENTRAL_USERNAME</code> 및 <code>MAVEN_CENTRAL_PASSWORD</code>는 Central Portal 웹사이트에서 <a href="#generate-the-user-token">사용자 토큰을 생성</a>하여 얻은 값입니다.</li><li><code>SIGNING_KEY_ID</code>는 서명 키 식별자의 <strong>마지막 8자리 문자</strong>입니다. 예를 들어 <code>F175482952A225BFC4A07A715EE6B5F76620B385CE</code>의 경우 <code>20B385CE</code>입니다.</li><li><code>SIGNING_PASSWORD</code>는 GPG 키를 생성할 때 제공한 암호입니다.</li><li><code>GPG_KEY_CONTENTS</code>에는 <a href="#export-your-private-key">사용자의 <code>key.gpg</code> 파일</a>의 전체 내용이 포함되어야 합니다.</li></ul><p><img src="`+o+`" alt="Add secrets to GitHub" width="700"></p></li></ol><p>다음 단계에서 CI 구성에 이러한 시크릿의 이름을 사용할 것입니다.</p><h3 id="프로젝트에-github-actions-워크플로-추가" tabindex="-1">프로젝트에 GitHub Actions 워크플로 추가 <a class="header-anchor" href="#프로젝트에-github-actions-워크플로-추가" aria-label="Permalink to &quot;프로젝트에 GitHub Actions 워크플로 추가&quot;">​</a></h3><p>라이브러리를 자동으로 빌드하고 게시하도록 지속적 통합을 설정할 수 있습니다. <a href="https://docs.github.com/en/actions" target="_blank" rel="noreferrer">GitHub Actions</a>를 예시로 사용하겠습니다.</p><p>시작하려면 저장소의 <code>.github/workflows/publish.yml</code> 파일에 다음 워크플로를 추가합니다.</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .github/workflows/publish.yml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Publish</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  release</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">released</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">prereleased</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Release build and publish</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">macOS-latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Check out code</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Set up JDK 21</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/setup-java@v4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zulu&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          java-version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Publish to MavenCentral</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./gradlew publishToMavenCentral --no-configuration-cache</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ORG_GRADLE_PROJECT_mavenCentralUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.MAVEN_CENTRAL_USERNAME }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ORG_GRADLE_PROJECT_mavenCentralPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.MAVEN_CENTRAL_PASSWORD }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ORG_GRADLE_PROJECT_signingInMemoryKeyId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.SIGNING_KEY_ID }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.SIGNING_PASSWORD }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ORG_GRADLE_PROJECT_signingInMemoryKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.GPG_KEY_CONTENTS }}</span></span></code></pre></div><p>이 파일을 커밋하고 푸시하면 프로젝트를 호스팅하는 GitHub 저장소에서 릴리스(사전 릴리스 포함)를 생성할 때마다 워크플로가 자동으로 실행됩니다. 워크플로는 현재 코드 버전을 체크아웃하고, JDK를 설정한 다음, <code>publishToMavenCentral</code> Gradle 작업을 실행합니다.</p><p><code>publishToMavenCentral</code> 작업을 사용할 때에도 Maven Central 웹사이트에서 배포를 수동으로 확인하고 <a href="#create-a-release-on-github">릴리스</a>해야 합니다. 또는 <code>publishAndReleaseToMavenCentral</code> 작업을 사용하여 릴리스 프로세스를 완전히 자동화할 수 있습니다.</p><p>저장소에 <a href="https://stackoverflow.com/a/61892639" target="_blank" rel="noreferrer">태그가 푸시될 때 워크플로가 트리거되도록</a> 구성할 수도 있습니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>위의 스크립트는 게시 플러그인이 지원하지 않으므로(<code>열린 이슈</code>를 참조하세요) Gradle <a href="https://docs.gradle.org/current/userguide/configuration_cache.html" target="_blank" rel="noreferrer">구성 캐시</a>를 <code>—no-configuration-cache</code>를 Gradle 명령에 추가하여 게시 작업에 대해 비활성화합니다.</p></div><p>이 작업에는 서명 정보와 <a href="#add-secrets-to-github">저장소 시크릿으로</a> 생성한 Maven Central 자격 증명이 필요합니다.</p><p>워크플로 구성은 이러한 시크릿을 환경 변수로 자동으로 전송하여 Gradle 빌드 프로세스에서 사용할 수 있도록 합니다.</p><h3 id="github에서-릴리스-생성" tabindex="-1">GitHub에서 릴리스 생성 <a class="header-anchor" href="#github에서-릴리스-생성" aria-label="Permalink to &quot;GitHub에서 릴리스 생성&quot;">​</a></h3><p>워크플로와 시크릿이 설정되었으므로 이제 라이브러리 게시를 트리거할 <a href="https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository#creating-a-release" target="_blank" rel="noreferrer">릴리스를 생성</a>할 준비가 되었습니다.</p><ol><li><p>라이브러리의 <code>build.gradle.kts</code> 파일에 지정된 버전 번호가 게시하려는 버전인지 확인합니다.</p></li><li><p>GitHub 저장소의 기본 페이지로 이동합니다.</p></li><li><p>오른쪽 사이드바에서 <strong>Releases</strong>를 클릭합니다.</p></li><li><p><strong>Draft a new release</strong> 버튼(이 저장소에 이전에 릴리스를 생성한 적이 없는 경우 <strong>Create a new release</strong> 버튼)을 클릭합니다.</p></li><li><p>각 릴리스에는 태그가 있습니다. 태그 드롭다운에서 새 태그를 생성하고 릴리스 제목을 설정합니다(태그 이름과 제목은 동일할 수 있습니다).</p><p>이 값들은 <code>build.gradle.kts</code> 파일에 지정한 라이브러리 버전 번호와 동일하게 하는 것이 좋습니다.</p><p><img src="`+k+'" alt="Create a release on GitHub" width="700"></p></li><li><p>릴리스 대상으로 지정하려는 브랜치(특히 기본 브랜치가 아닌 경우)를 다시 확인하고 새 버전에 대한 적절한 릴리스 노트를 추가합니다.</p></li><li><p>설명 아래의 체크박스를 사용하여 릴리스를 사전 릴리스(알파, 베타 또는 RC와 같은 초기 접근 버전에 유용)로 표시합니다.</p><p>이 저장소에 이전에 릴리스를 만들었다면 릴리스를 최신 릴리스로 표시할 수도 있습니다.</p></li><li><p><strong>Publish release</strong> 버튼을 클릭하여 새 릴리스를 생성합니다.</p></li><li><p>GitHub 저장소 페이지 상단의 <strong>Actions</strong> 탭을 클릭합니다. 여기에서 새 릴리스가 게시 워크플로를 트리거했음을 볼 수 있습니다.</p><p>워크플로를 클릭하여 게시 작업의 출력을 볼 수 있습니다.</p></li><li><p>워크플로 실행이 완료되면 Maven Central의 <a href="https://central.sonatype.com/publishing/deployments" target="_blank" rel="noreferrer">배포</a> 대시보드로 이동합니다. 여기에 새 배포가 표시되어야 합니다.</p><p>이 배포는 Maven Central이 검사를 수행하는 동안 한동안 <em>pending</em> 또는 <em>validating</em> 상태로 유지될 수 있습니다.</p></li><li><p>배포가 <em>validated</em> 상태가 되면 업로드한 모든 아티팩트가 포함되어 있는지 확인합니다. 모든 것이 올바르다면 <strong>Publish</strong> 버튼을 클릭하여 이러한 아티팩트를 릴리스합니다.</p><p><img src="'+d+'" alt="Publishing settings" width="700"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>아티팩트가 Maven Central 저장소에 공개적으로 사용 가능하게 되려면 릴리스 후 시간이 걸립니다(일반적으로 15-30분). <a href="https://central.sonatype.com/" target="_blank" rel="noreferrer">Maven Central 웹사이트</a>에서 색인화되어 검색 가능하게 되는 데는 더 오래 걸릴 수 있습니다.</p></div></li></ol><p>배포가 확인되면 아티팩트를 자동으로 릴리스하려면 워크플로에서 <code>publishToMavenCentral</code> 작업을 <code>publishAndReleaseToMavenCentral</code>로 바꿉니다.</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><ul><li><a href="./multiplatform-publish-lib-setup">멀티플랫폼 라이브러리 게시 설정 및 요구 사항에 대해 자세히 알아보기</a></li><li><a href="https://shields.io/badges/maven-central-version" target="_blank" rel="noreferrer">README에 shield.io 배지 추가하기</a></li><li><a href="https://kotl.in/dokka" target="_blank" rel="noreferrer">Dokka를 사용하여 프로젝트 API 문서 공유하기</a></li><li><a href="https://docs.renovatebot.com/" target="_blank" rel="noreferrer">종속성을 자동으로 업데이트하도록 Renovate 추가하기</a></li><li><a href="https://klibs.io/" target="_blank" rel="noreferrer">JetBrains의 검색 플랫폼에서 라이브러리 홍보하기</a></li><li><a href="https://kotlinlang.slack.com/" target="_blank" rel="noreferrer">Kotlin Slack 채널 <code>#feed</code>에서 커뮤니티와 라이브러리 공유하기</a> (가입하려면 <a href="https://kotl.in/slack" target="_blank" rel="noreferrer">https://kotl.in/slack</a> 방문)</li></ul>',53))])}const D=c(u,[["render",y]]);export{A as __pageData,D as default};
