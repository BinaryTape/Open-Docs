import{_ as a,c as s,o,ag as i}from"./chunks/framework.Bksy39di.js";const h=JSON.parse('{"title":"Compose コンパイラの移行ガイド","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/compose-compiler-migration-guide.md","filePath":"ja/kotlin/compose-compiler-migration-guide.md","lastUpdated":1754307826000}'),l={name:"ja/kotlin/compose-compiler-migration-guide.md"};function p(n,e,t,r,c,d){return o(),s("div",null,e[0]||(e[0]=[i(`<h1 id="compose-コンパイラの移行ガイド" tabindex="-1">Compose コンパイラの移行ガイド <a class="header-anchor" href="#compose-コンパイラの移行ガイド" aria-label="Permalink to &quot;Compose コンパイラの移行ガイド&quot;">​</a></h1><p>Compose コンパイラは Gradle プラグインによって補完され、セットアップを簡素化し、コンパイラオプションへのアクセスを容易にします。 この Compose コンパイラプラグインが Android Gradle プラグイン (AGP) とともに適用されると、AGP によって自動的に提供される Compose コンパイラの座標を上書きします。</p><p>Compose コンパイラは Kotlin 2.0.0 から Kotlin リポジトリにマージされました。 これにより、Compose コンパイラが Kotlin と同時に提供され、常に同バージョンの Kotlin と互換性があるため、プロジェクトの Kotlin 2.0.0 以降への移行がスムーズになります。</p><p>プロジェクトで新しい Compose コンパイラプラグインを使用するには、Compose を使用するモジュールごとに適用します。 Jetpack Compose プロジェクトを移行する方法の詳細については、<a href="#migrating-a-jetpack-compose-project">こちら</a>をお読みください。Compose Multiplatform プロジェクトについては、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-compiler.html#migrating-a-compose-multiplatform-project" target="_blank" rel="noreferrer">Multiplatform 移行ガイド</a>を参照してください。</p><h2 id="jetpack-compose-プロジェクトの移行" tabindex="-1">Jetpack Compose プロジェクトの移行 <a class="header-anchor" href="#jetpack-compose-プロジェクトの移行" aria-label="Permalink to &quot;Jetpack Compose プロジェクトの移行&quot;">​</a></h2><p>Kotlin 1.9 から Kotlin 2.0.0 以降に移行する場合、Compose コンパイラの扱い方に応じてプロジェクト設定を調整する必要があります。 設定管理を自動化するために、Kotlin Gradle プラグインと Compose コンパイラ Gradle プラグインを使用することをお勧めします。</p><h3 id="gradle-プラグインによる-compose-コンパイラの管理" tabindex="-1">Gradle プラグインによる Compose コンパイラの管理 <a class="header-anchor" href="#gradle-プラグインによる-compose-コンパイラの管理" aria-label="Permalink to &quot;Gradle プラグインによる Compose コンパイラの管理&quot;">​</a></h3><p>Android モジュールの場合：</p><ol><li><p>Compose コンパイラ Gradle プラグインを <a href="https://docs.gradle.org/current/userguide/platforms.html#sub:conventional-dependencies-toml" target="_blank" rel="noreferrer">Gradle バージョンカタログ</a>に追加します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[versions]</span></span>
<span class="line"><span># ...</span></span>
<span class="line"><span>kotlin = &quot;2.2.10&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[plugins]</span></span>
<span class="line"><span># ...</span></span>
<span class="line"><span>org-jetbrains-kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }</span></span>
<span class="line"><span>compose-compiler = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }</span></span></code></pre></div></li><li><p>Gradle プラグインをルートの <code>build.gradle.kts</code> ファイルに追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.compose.compiler) apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Jetpack Compose を使用するすべてのモジュールにプラグインを適用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.compose.compiler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Jetpack Compose コンパイラのコンパイラオプションを使用している場合は、<code>composeCompiler {}</code> ブロックで設定します。 詳細については、<a href="/ja/kotlin/compose-compiler-options">コンパイラオプションのリスト</a>を参照してください。</p></li><li><p>Compose コンパイラのアーティファクトを直接参照している場合は、これらの参照を削除し、Gradle プラグインに任せることができます。</p></li></ol><h3 id="gradle-プラグインを使用せずに-compose-コンパイラを使用する" tabindex="-1">Gradle プラグインを使用せずに Compose コンパイラを使用する <a class="header-anchor" href="#gradle-プラグインを使用せずに-compose-コンパイラを使用する" aria-label="Permalink to &quot;Gradle プラグインを使用せずに Compose コンパイラを使用する&quot;">​</a></h3><p>Gradle プラグインを使用して Compose コンパイラを管理していない場合は、プロジェクト内の古い Maven アーティファクトへの直接参照を更新します。</p><ul><li><code>androidx.compose.compiler:compiler</code> を <code>org.jetbrains.kotlin:kotlin-compose-compiler-plugin-embeddable</code> に変更します。</li><li><code>androidx.compose.compiler:compiler-hosted</code> を <code>org.jetbrains.kotlin:kotlin-compose-compiler-plugin</code> に変更します。</li></ul><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li>Compose コンパイラが Kotlin リポジトリに移行することに関する <a href="https://android-developers.googleblog.com/2024/04/jetpack-compose-compiler-moving-to-kotlin-repository.html" target="_blank" rel="noreferrer">Google のアナウンス</a>を参照してください。</li><li>Jetpack Compose を使用して Android アプリを構築している場合は、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-integrate-in-existing-app.html" target="_blank" rel="noreferrer">Multiplatform 化する方法に関するガイド</a>を確認してください。</li></ul>`,14)]))}const k=a(l,[["render",p]]);export{h as __pageData,k as default};
