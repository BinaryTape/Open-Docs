import{_ as d,C as k,c as o,o as E,j as s,G as a,ag as t,a as n,w as l}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/whatsnew1720.md","filePath":"ko/kotlin/whatsnew1720.md","lastUpdated":1754307826000}'),g={name:"ko/kotlin/whatsnew1720.md"};function c(y,i,F,u,b,C){const r=k("tldr"),e=k("YouTubeVideo"),h=k("tab"),p=k("tabs");return E(),o("div",null,[i[5]||(i[5]=s("h1",{id:"kotlin-1-7-20의-새로운-기능",tabindex:"-1"},[n("Kotlin 1.7.20의 새로운 기능 "),s("a",{class:"header-anchor",href:"#kotlin-1-7-20의-새로운-기능","aria-label":'Permalink to "Kotlin 1.7.20의 새로운 기능"'},"​")],-1)),a(r,null,{default:l(()=>i[0]||(i[0]=[s("p",null,"Kotlin 1.7.20용 IDE 지원은 IntelliJ IDEA 2021.3, 2022.1 및 2022.2에서 사용할 수 있습니다.",-1)])),_:1}),i[6]||(i[6]=t('<p><em><a href="/ko/kotlin/releases#release-details">릴리스 날짜: 2022년 9월 29일</a></em></p><p>Kotlin 1.7.20 릴리스가 출시되었습니다! 다음은 이번 릴리스의 주요 내용입니다.</p><ul><li><a href="#support-for-kotlin-k2-compiler-plugins">새로운 Kotlin K2 컴파일러가 <code>all-open</code>, 수신자 있는 SAM, Lombok 및 기타 컴파일러 플러그인을 지원합니다.</a></li><li><a href="#preview-of-the-operator-for-creating-open-ended-ranges">개방형 범위(<code>open-ended ranges</code>) 생성을 위한 <code>..&lt;</code> 연산자 미리보기를 도입했습니다.</a></li><li><a href="#the-new-kotlin-native-memory-manager-enabled-by-default">새로운 Kotlin/Native 메모리 관리자가 이제 기본적으로 활성화됩니다.</a></li><li><a href="#generic-inline-classes">JVM을 위한 새로운 실험적 기능: 제네릭 기본 타입이 있는 인라인 클래스를 도입했습니다.</a></li></ul><p>다음 동영상에서 변경 사항에 대한 간략한 개요를 확인할 수도 있습니다.</p>',4)),a(e,{src:"https://www.youtube.com/v/OG9npowJgE8",title:"Kotlin 1.7.20의 새로운 기능"}),i[7]||(i[7]=t('<h2 id="kotlin-k2-컴파일러-플러그인-지원" tabindex="-1">Kotlin K2 컴파일러 플러그인 지원 <a class="header-anchor" href="#kotlin-k2-컴파일러-플러그인-지원" aria-label="Permalink to &quot;Kotlin K2 컴파일러 플러그인 지원&quot;">​</a></h2><p>Kotlin 팀은 K2 컴파일러를 계속 안정화하고 있습니다. K2는 아직 <strong>알파</strong> 버전이지만(<a href="/ko/kotlin/whatsnew17#new-kotlin-k2-compiler-for-the-jvm-in-alpha">Kotlin 1.7.0 릴리스</a>에서 발표된 대로) 이제 여러 컴파일러 플러그인을 지원합니다. 새로운 컴파일러에 대한 Kotlin 팀의 업데이트를 확인하려면 <a href="https://youtrack.jetbrains.com/issue/KT-52604" target="_blank" rel="noreferrer">이 YouTrack 이슈</a>를 팔로우하세요.</p><p>이 1.7.20 릴리스부터 Kotlin K2 컴파일러는 다음 플러그인을 지원합니다.</p><ul><li><a href="/ko/kotlin/all-open-plugin"><code>all-open</code></a></li><li><a href="/ko/kotlin/no-arg-plugin"><code>no-arg</code></a></li><li><a href="/ko/kotlin/sam-with-receiver-plugin">수신자 있는 SAM</a></li><li><a href="/ko/kotlin/lombok">Lombok</a></li><li>AtomicFU</li><li><code>jvm-abi-gen</code></li></ul><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>새로운 K2 컴파일러의 알파 버전은 JVM 프로젝트에서만 작동합니다. Kotlin/JS, Kotlin/Native 또는 다른 멀티플랫폼 프로젝트는 지원하지 않습니다.</p></div><p>다음 동영상에서 새로운 컴파일러와 그 이점에 대해 자세히 알아보세요.</p><ul><li><a href="https://www.youtube.com/watch?v=iTdJJq_LyoY" target="_blank" rel="noreferrer">새로운 Kotlin 컴파일러를 향한 길</a></li><li><a href="https://www.youtube.com/watch?v=db19VFLZqJM" target="_blank" rel="noreferrer">K2 컴파일러: 탑다운 뷰</a></li></ul><h3 id="kotlin-k2-컴파일러-활성화-방법" tabindex="-1">Kotlin K2 컴파일러 활성화 방법 <a class="header-anchor" href="#kotlin-k2-컴파일러-활성화-방법" aria-label="Permalink to &quot;Kotlin K2 컴파일러 활성화 방법&quot;">​</a></h3><p>Kotlin K2 컴파일러를 활성화하고 테스트하려면 다음 컴파일러 옵션을 사용하세요.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xuse-k2</span></span></code></pre></div><p><code>build.gradle(.kts)</code> 파일에 다음과 같이 지정할 수 있습니다.</p>',11)),a(p,{group:"build-script"},{default:l(()=>[a(h,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>i[1]||(i[1]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompile"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions.useK2 "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),a(h,{title:"Groovy","group-key":"groovy"},{default:l(()=>i[2]||(i[2]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"compileKotlin {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"useK2 "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[8]||(i[8]=t('<p>JVM 프로젝트에서 성능 향상을 확인하고 이전 컴파일러의 결과와 비교해 보세요.</p><h3 id="새로운-k2-컴파일러에-대한-피드백-남기기" tabindex="-1">새로운 K2 컴파일러에 대한 피드백 남기기 <a class="header-anchor" href="#새로운-k2-컴파일러에-대한-피드백-남기기" aria-label="Permalink to &quot;새로운 K2 컴파일러에 대한 피드백 남기기&quot;">​</a></h3><p>어떤 형태의 피드백이든 정말 감사합니다.</p><ul><li>Kotlin Slack의 K2 개발자에게 직접 피드백을 제공하세요: <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*ju6cbn*_ga*MTA3MTk5NDkzMC4xNjQ2MDY3MDU4*_ga_9J976DJZ68*MTY1ODMzNzA3OS4xMDAuMS4xNjU4MzQwODEwLjYw" target="_blank" rel="noreferrer">초대받기</a> 및 <a href="https://kotlinlang.slack.com/archives/C03PK0PE257" target="_blank" rel="noreferrer">#k2-early-adopters</a> 채널에 참여하세요.</li><li>새로운 K2 컴파일러 사용 중 발생한 모든 문제를 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">이슈 트래커</a>에 보고해 주세요.</li><li>JetBrains가 K2 사용에 대한 익명 데이터를 수집할 수 있도록 <a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer"><strong>사용 통계 보내기</strong> 옵션</a>을 활성화하세요.</li></ul><h2 id="언어" tabindex="-1">언어 <a class="header-anchor" href="#언어" aria-label="Permalink to &quot;언어&quot;">​</a></h2><p>Kotlin 1.7.20은 새로운 언어 기능에 대한 미리보기 버전을 도입하고, 빌더 타입 추론에 제한을 둡니다.</p><ul><li><a href="#preview-of-the-operator-for-creating-open-ended-ranges">개방형 범위 생성을 위한 <code>..&lt;</code> 연산자 미리보기</a></li><li><a href="#improved-string-representations-for-singletons-and-sealed-class-hierarchies-with-data-objects">새로운 데이터 객체 선언</a></li><li><a href="#new-builder-type-inference-restrictions">빌더 타입 추론 제한</a></li></ul><h3 id="개방형-범위-생성을-위한-연산자-미리보기" tabindex="-1">개방형 범위 생성을 위한 <code>..&lt;</code> 연산자 미리보기 <a class="header-anchor" href="#개방형-범위-생성을-위한-연산자-미리보기" aria-label="Permalink to &quot;개방형 범위 생성을 위한 `..&lt;` 연산자 미리보기&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>새로운 연산자는 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>이며, IDE에서 제한적인 지원을 제공합니다.</p></div><p>이번 릴리스에서는 새로운 <code>..&lt;</code> 연산자를 도입합니다. Kotlin에는 값의 범위를 표현하기 위한 <code>..</code> 연산자가 있습니다. 새로운 <code>..&lt;</code> 연산자는 <code>until</code> 함수처럼 작동하며 개방형 범위를 정의하는 데 도움이 됩니다.</p>',10)),a(e,{src:"https://www.youtube.com/watch?v=v0AHdAIBnbs",title:"개방형 범위를 위한 새로운 연산자"}),i[9]||(i[9]=t(`<p>저희 연구에 따르면 이 새로운 연산자는 개방형 범위를 더 잘 표현하고 상한(upper bound)이 포함되지 않는다는 것을 명확히 하는 데 더 효과적입니다.</p><p>다음은 <code>when</code> 표현식에서 <code>..&lt;</code> 연산자를 사용하는 예시입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.25</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 첫 번째 사분면</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.25</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 두 번째 사분면</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.75</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 세 번째 사분면</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.75</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 마지막 사분면  &lt;- 여기는 닫힌 범위에 주목</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="표준-라이브러리-api-변경-사항" tabindex="-1">표준 라이브러리 API 변경 사항 <a class="header-anchor" href="#표준-라이브러리-api-변경-사항" aria-label="Permalink to &quot;표준 라이브러리 API 변경 사항&quot;">​</a></h4><p>다음 새로운 타입과 연산이 공통 Kotlin 표준 라이브러리의 <code>kotlin.ranges</code> 패키지에 도입될 예정입니다.</p><h5 id="새로운-openendrange-lt-t-gt-인터페이스" tabindex="-1">새로운 OpenEndRange&lt;T&gt; 인터페이스 <a class="header-anchor" href="#새로운-openendrange-lt-t-gt-인터페이스" aria-label="Permalink to &quot;새로운 OpenEndRange&amp;lt;T&amp;gt; 인터페이스&quot;">​</a></h5><p>개방형 범위를 나타내는 새로운 인터페이스는 기존 <code>ClosedRange&lt;T&gt;</code> 인터페이스와 매우 유사합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenEndRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Comparable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 하한</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 상한, 범위에 포함되지 않음</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endExclusive: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endExclusive</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endExclusive</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="기존-반복-가능한-범위에-openendrange-구현" tabindex="-1">기존 반복 가능한 범위에 OpenEndRange 구현 <a class="header-anchor" href="#기존-반복-가능한-범위에-openendrange-구현" aria-label="Permalink to &quot;기존 반복 가능한 범위에 OpenEndRange 구현&quot;">​</a></h5><p>개발자가 상한이 제외된 범위를 얻어야 할 때, 현재는 <code>until</code> 함수를 사용하여 동일한 값을 가진 닫힌 반복 가능한 범위를 효과적으로 생성합니다. <code>OpenEndRange&lt;T&gt;</code>를 사용하는 새로운 API에서 이러한 범위를 허용하기 위해, 기존 반복 가능한 범위인 <code>IntRange</code>, <code>LongRange</code>, <code>CharRange</code>, <code>UIntRange</code>, <code>ULongRange</code>에 해당 인터페이스를 구현하고자 합니다. 따라서 이들은 <code>ClosedRange&lt;T&gt;</code>와 <code>OpenEndRange&lt;T&gt;</code> 인터페이스를 동시에 구현하게 됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntProgression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...), ClosedRange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpenEndRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endInclusive: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endExclusive: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="표준-타입을-위한-rangeuntil-연산자" tabindex="-1">표준 타입을 위한 rangeUntil 연산자 <a class="header-anchor" href="#표준-타입을-위한-rangeuntil-연산자" aria-label="Permalink to &quot;표준 타입을 위한 rangeUntil 연산자&quot;">​</a></h5><p><code>rangeUntil</code> 연산자는 현재 <code>rangeTo</code> 연산자에 의해 정의된 것과 동일한 타입 및 조합에 대해 제공될 것입니다. 우리는 프로토타입 목적을 위해 이를 확장 함수로 제공하지만, 일관성을 위해 개방형 범위 API를 안정화하기 전에 나중에 멤버로 만들 계획입니다.</p><h4 id="연산자-활성화-방법" tabindex="-1"><code>..&lt;</code> 연산자 활성화 방법 <a class="header-anchor" href="#연산자-활성화-방법" aria-label="Permalink to &quot;\`..&lt;\` 연산자 활성화 방법&quot;">​</a></h4><p><code>..&lt;</code> 연산자를 사용하거나 사용자 정의 타입에 해당 연산자 컨벤션을 구현하려면 <code>-language-version 1.8</code> 컴파일러 옵션을 활성화하세요.</p><p>표준 타입의 개방형 범위를 지원하기 위해 도입된 새로운 API 요소는 실험적 <code>stdlib</code> API에 대해 일반적으로 요구되는 것처럼 옵트인(<code>opt-in</code>)이 필요합니다: <code>@OptIn(ExperimentalStdlibApi::class)</code>. 또는 <code>-opt-in=kotlin.ExperimentalStdlibApi</code> 컴파일러 옵션을 사용할 수도 있습니다.</p><p><a href="https://github.com/kotlin/KEEP/blob/open-ended-ranges/proposals/open-ended-ranges.md" target="_blank" rel="noreferrer">이 KEEP 문서</a>에서 새로운 연산자에 대해 자세히 알아보세요.</p><h3 id="데이터-객체를-사용한-싱글톤-및-봉인된-클래스-계층의-향상된-문자열-표현" tabindex="-1">데이터 객체를 사용한 싱글톤 및 봉인된 클래스 계층의 향상된 문자열 표현 <a class="header-anchor" href="#데이터-객체를-사용한-싱글톤-및-봉인된-클래스-계층의-향상된-문자열-표현" aria-label="Permalink to &quot;데이터 객체를 사용한 싱글톤 및 봉인된 클래스 계층의 향상된 문자열 표현&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>데이터 객체는 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a>이며 현재 IDE에서 제한적인 지원을 제공합니다.</p></div><p>이번 릴리스에서는 새로운 종류의 <code>object</code> 선언인 <code>data object</code>를 도입합니다. <a href="https://youtrack.jetbrains.com/issue/KT-4107" target="_blank" rel="noreferrer">데이터 객체</a>는 개념적으로 일반적인 <code>object</code> 선언과 동일하게 동작하지만, 기본적으로 깔끔한 <code>toString</code> 표현을 제공합니다.</p>`,20)),a(e,{src:"https://www.youtube.com/v/ovAqcwFhEGc",title:"Kotlin 1.7.20의 데이터 객체"}),i[10]||(i[10]=t(`<div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyDataObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// org.example.MyObject@1f32e575</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyDataObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyDataObject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이로 인해 <code>data object</code> 선언은 봉인된 클래스 계층에서 <code>data class</code> 선언과 함께 사용하기에 완벽합니다. 이 스니펫에서 <code>EndOfFile</code>을 일반 <code>object</code> 대신 <code>data object</code>로 선언하는 것은 수동으로 <code>toString</code>을 오버라이드할 필요 없이 깔끔한 <code>toString</code>을 얻게 되어, 동반되는 <code>data class</code> 정의와의 대칭성을 유지한다는 의미입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EndOfFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReadResult.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number(value=1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReadResult.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Text(value=Foo)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReadResult.EndOfFile) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EndOfFile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="데이터-객체-활성화-방법" tabindex="-1">데이터 객체 활성화 방법 <a class="header-anchor" href="#데이터-객체-활성화-방법" aria-label="Permalink to &quot;데이터 객체 활성화 방법&quot;">​</a></h4><p>코드에서 데이터 객체 선언을 사용하려면 <code>-language-version 1.9</code> 컴파일러 옵션을 활성화하세요. Gradle 프로젝트에서는 <code>build.gradle(.kts)</code>에 다음을 추가하여 활성화할 수 있습니다.</p>`,5)),a(p,{group:"build-script"},{default:l(()=>[a(h,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>i[3]||(i[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompile"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // ...")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions.languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "1.9"')]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),a(h,{title:"Groovy","group-key":"groovy"},{default:l(()=>i[4]||(i[4]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"compileKotlin {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // ...")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '1.9'")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[11]||(i[11]=t(`<p><a href="https://github.com/Kotlin/KEEP/pull/316" target="_blank" rel="noreferrer">해당 KEEP 문서</a>에서 데이터 객체에 대해 자세히 알아보고 구현에 대한 피드백을 공유해 주세요.</p><h3 id="새로운-빌더-타입-추론-제한-사항" tabindex="-1">새로운 빌더 타입 추론 제한 사항 <a class="header-anchor" href="#새로운-빌더-타입-추론-제한-사항" aria-label="Permalink to &quot;새로운 빌더 타입 추론 제한 사항&quot;">​</a></h3><p>Kotlin 1.7.20은 코드에 영향을 미칠 수 있는 <a href="/ko/kotlin/using-builders-with-builder-inference">빌더 타입 추론</a> 사용에 몇 가지 주요 제한 사항을 적용합니다. 이러한 제한은 빌더 람다 함수를 포함하는 코드에 적용되며, 람다 자체를 분석하지 않고는 파라미터를 유추할 수 없는 경우입니다. 파라미터는 인수로 사용됩니다. 이제 컴파일러는 이러한 코드에 대해 항상 오류를 표시하고 타입을 명시적으로 지정하도록 요청할 것입니다.</p><p>이는 호환성을 깨는 변경 사항이지만, 저희 연구에 따르면 이러한 경우는 매우 드물며 제한 사항이 코드에 영향을 미치지 않아야 합니다. 만약 영향을 받는다면 다음 경우를 고려해 보세요.</p><ul><li><p>멤버를 숨기는 확장 함수가 있는 빌더 추론.</p><p>코드에 빌더 추론 중에 사용될 동일한 이름을 가진 확장 함수가 포함되어 있으면 컴파일러가 오류를 표시할 것입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2로 해결되어 오류 발생</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>코드를 수정하려면 타입을 명시적으로 지정해야 합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 타입 인수!</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1로 해결</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>여러 람다가 있고 타입 인수가 명시적으로 지정되지 않은 빌더 추론.</p><p>빌더 추론에 두 개 이상의 람다 블록이 있는 경우, 이들은 타입에 영향을 미칩니다. 오류를 방지하기 위해 컴파일러는 타입을 지정하도록 요구합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    first: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MutableList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    second: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MutableList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">second</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: MutableList&lt;String&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: MutableList&lt;Int&gt; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>오류를 수정하려면 타입을 명시적으로 지정하고 타입 불일치를 해결해야 합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: MutableList&lt;Int&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: MutableList&lt;Int&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>위에 언급된 사례를 찾지 못했다면 저희 팀에 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">이슈를 제기</a>해 주세요.</p><p>이 빌더 추론 업데이트에 대한 자세한 내용은 <a href="https://youtrack.jetbrains.com/issue/KT-53797" target="_blank" rel="noreferrer">이 YouTrack 이슈</a>를 참조하세요.</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.7.20은 제네릭 인라인 클래스를 도입하고, 위임된 프로퍼티에 대한 더 많은 바이트코드 최적화를 추가하며, <code>kapt</code> 스텁 생성 작업에서 IR을 지원하여 <code>kapt</code>와 함께 최신 Kotlin 기능을 모두 사용할 수 있도록 합니다.</p><ul><li><a href="#generic-inline-classes">제네릭 인라인 클래스</a></li><li><a href="#more-optimized-cases-of-delegated-properties">위임된 프로퍼티의 더 많은 최적화 사례</a></li><li><a href="#support-for-the-jvm-ir-backend-in-kapt-stub-generating-task"><code>kapt</code> 스텁 생성 작업에서 JVM IR 백엔드 지원</a></li></ul><h3 id="제네릭-인라인-클래스" tabindex="-1">제네릭 인라인 클래스 <a class="header-anchor" href="#제네릭-인라인-클래스" aria-label="Permalink to &quot;제네릭 인라인 클래스&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>제네릭 인라인 클래스는 <a href="/ko/kotlin/components-stability#stability-levels-explained">실험적</a> 기능입니다. 이 기능은 언제든지 제거되거나 변경될 수 있습니다. 옵트인(<code>opt-in</code>)이 필요하며(자세한 내용은 아래 참조), 평가 목적으로만 사용해야 합니다. <a href="https://youtrack.jetbrains.com/issue/KT-52994" target="_blank" rel="noreferrer">YouTrack</a>에서 이 기능에 대한 피드백을 주시면 감사하겠습니다.</p></div><p>Kotlin 1.7.20에서는 JVM 인라인 클래스의 기본 타입이 타입 파라미터가 될 수 있도록 허용합니다. 컴파일러는 이를 <code>Any?</code> 또는 일반적으로 타입 파라미터의 상한으로 매핑합니다.</p>`,13)),a(e,{src:"https://www.youtube.com/v/0JRPA0tt9og",title:"Kotlin 1.7.20의 제네릭 인라인 클래스"}),i[12]||(i[12]=t(`<p>다음 예시를 고려해 보세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 컴파일러는 fun compute-&lt;hashcode&gt;(s: Any?)를 생성합니다.</span></span></code></pre></div><p>이 함수는 인라인 클래스를 파라미터로 받습니다. 파라미터는 타입 인수가 아닌 상한으로 매핑됩니다.</p><p>이 기능을 활성화하려면 <code>-language-version 1.8</code> 컴파일러 옵션을 사용하세요.</p><p><a href="https://youtrack.jetbrains.com/issue/KT-52994" target="_blank" rel="noreferrer">YouTrack</a>에서 이 기능에 대한 피드백을 주시면 감사하겠습니다.</p><h3 id="위임된-프로퍼티의-더-많은-최적화-사례" tabindex="-1">위임된 프로퍼티의 더 많은 최적화 사례 <a class="header-anchor" href="#위임된-프로퍼티의-더-많은-최적화-사례" aria-label="Permalink to &quot;위임된 프로퍼티의 더 많은 최적화 사례&quot;">​</a></h3><p>Kotlin 1.6.0에서는 <code>$delegate</code> 필드를 생략하고 <a href="/ko/kotlin/whatsnew16#optimize-delegated-properties-which-call-get-set-on-the-given-kproperty-instance">참조된 프로퍼티에 즉시 접근을 생성</a>함으로써 프로퍼티에 위임하는 경우를 최적화했습니다. 1.7.20에서는 더 많은 경우에 이 최적화를 구현했습니다. 이제 위임자가 다음 중 하나인 경우 <code>$delegate</code> 필드가 생략됩니다.</p><ul><li><p>이름이 지정된 객체인 경우:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NamedObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(thisRef: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, property: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NamedObject</span></span></code></pre></div></li><li><p>백킹 필드와 동일한 모듈에 기본 getter가 있는 최종 <code>val</code> 프로퍼티인 경우:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> impl: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadOnlyProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> impl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>상수 표현식, enum 엔트리, <code>this</code> 또는 <code>null</code>인 경우. <code>this</code>의 예시는 다음과 같습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(thisRef: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, property: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p><a href="/ko/kotlin/delegated-properties">위임된 프로퍼티</a>에 대해 자세히 알아보세요.</p><p><a href="https://youtrack.jetbrains.com/issue/KT-23397" target="_blank" rel="noreferrer">YouTrack</a>에서 이 기능에 대한 피드백을 주시면 감사하겠습니다.</p><h3 id="kapt-스텁-생성-작업에서-jvm-ir-백엔드-지원" tabindex="-1">kapt 스텁 생성 작업에서 JVM IR 백엔드 지원 <a class="header-anchor" href="#kapt-스텁-생성-작업에서-jvm-ir-백엔드-지원" aria-label="Permalink to &quot;kapt 스텁 생성 작업에서 JVM IR 백엔드 지원&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>kapt</code> 스텁 생성 작업에서 JVM IR 백엔드 지원은 <a href="/ko/kotlin/components-stability">실험적</a> 기능입니다. 이 기능은 언제든지 변경될 수 있습니다. 옵트인(<code>opt-in</code>)이 필요하며(자세한 내용은 아래 참조), 평가 목적으로만 사용해야 합니다.</p></div><p>1.7.20 이전에는 <code>kapt</code> 스텁 생성 작업이 이전 백엔드를 사용했고, <a href="/ko/kotlin/annotations#repeatable-annotations">반복 가능 어노테이션</a>은 <a href="/ko/kotlin/kapt">kapt</a>에서 작동하지 않았습니다. Kotlin 1.7.20에서는 <code>kapt</code> 스텁 생성 작업에서 <a href="/ko/kotlin/whatsnew15#stable-jvm-ir-backend">JVM IR 백엔드</a>에 대한 지원을 추가했습니다. 이를 통해 반복 가능 어노테이션을 포함한 모든 최신 Kotlin 기능을 <code>kapt</code>와 함께 사용할 수 있게 됩니다.</p><p><code>kapt</code>에서 IR 백엔드를 사용하려면 <code>gradle.properties</code> 파일에 다음 옵션을 추가하세요.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kapt.use.jvm.ir=true</span></span></code></pre></div><p><a href="https://youtrack.jetbrains.com/issue/KT-49682" target="_blank" rel="noreferrer">YouTrack</a>에서 이 기능에 대한 피드백을 주시면 감사하겠습니다.</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.7.20은 새로운 Kotlin/Native 메모리 관리자가 기본적으로 활성화되어 제공되며, <code>Info.plist</code> 파일을 사용자 지정할 수 있는 옵션을 제공합니다.</p><ul><li><a href="#the-new-kotlin-native-memory-manager-enabled-by-default">새로운 기본 메모리 관리자</a></li><li><a href="#customizing-the-info-plist-file"><code>Info.plist</code> 파일 사용자 지정</a></li></ul><h3 id="새로운-kotlin-native-메모리-관리자가-기본적으로-활성화됨" tabindex="-1">새로운 Kotlin/Native 메모리 관리자가 기본적으로 활성화됨 <a class="header-anchor" href="#새로운-kotlin-native-메모리-관리자가-기본적으로-활성화됨" aria-label="Permalink to &quot;새로운 Kotlin/Native 메모리 관리자가 기본적으로 활성화됨&quot;">​</a></h3><p>이번 릴리스는 새로운 메모리 관리자의 안정성과 성능을 더욱 향상시켜, 새로운 메모리 관리자를 <a href="/ko/kotlin/components-stability">베타</a> 버전으로 승격할 수 있게 되었습니다.</p><p>이전 메모리 관리자는 <code>kotlinx.coroutines</code> 라이브러리 구현 문제를 포함하여 동시성 및 비동기 코드를 작성하는 것을 복잡하게 만들었습니다. 이는 동시성 제한이 iOS와 Android 플랫폼 간에 Kotlin 코드를 공유하는 데 문제를 야기하여 Kotlin Multiplatform Mobile의 채택을 막았습니다. 새로운 메모리 관리자는 마침내 <a href="https://blog.jetbrains.com/kotlin/2022/05/kotlin-multiplatform-mobile-beta-roadmap-update/" target="_blank" rel="noreferrer">Kotlin Multiplatform Mobile을 베타로 승격</a>하는 길을 열었습니다.</p><p>새로운 메모리 관리자는 또한 컴파일 시간을 이전 릴리스와 비슷하게 만드는 컴파일러 캐시를 지원합니다. 새로운 메모리 관리자의 이점에 대한 자세한 내용은 미리보기 버전에 대한 <a href="https://blog.jetbrains.com/kotlin/2021/08/try-the-new-kotlin-native-memory-manager-development-preview/" target="_blank" rel="noreferrer">원래 블로그 게시물</a>을 참조하세요. <a href="/ko/kotlin/native-memory-manager">문서</a>에서 더 많은 기술적 세부 정보를 확인할 수 있습니다.</p><h4 id="구성-및-설정" tabindex="-1">구성 및 설정 <a class="header-anchor" href="#구성-및-설정" aria-label="Permalink to &quot;구성 및 설정&quot;">​</a></h4><p>Kotlin 1.7.20부터 새로운 메모리 관리자가 기본값으로 설정됩니다. 추가 설정은 거의 필요하지 않습니다.</p><p>이미 수동으로 활성화한 경우, <code>gradle.properties</code> 파일에서 <code>kotlin.native.binary.memoryModel=experimental</code> 옵션을 제거하거나 <code>build.gradle(.kts)</code> 파일에서 <code>binaryOptions[&quot;memoryModel&quot;] = &quot;experimental&quot;</code>을 제거할 수 있습니다.</p><p>필요한 경우 <code>gradle.properties</code> 파일에 <code>kotlin.native.binary.memoryModel=strict</code> 옵션을 사용하여 레거시 메모리 관리자로 다시 전환할 수 있습니다. 하지만 레거시 메모리 관리자에서는 컴파일러 캐시 지원이 더 이상 제공되지 않으므로 컴파일 시간이 길어질 수 있습니다.</p><h4 id="동결-freezing" tabindex="-1">동결(Freezing) <a class="header-anchor" href="#동결-freezing" aria-label="Permalink to &quot;동결(Freezing)&quot;">​</a></h4><p>새로운 메모리 관리자에서는 동결(freezing)이 더 이상 사용되지 않습니다. (동결이 여전히 필요한) 레거시 관리자에서 코드가 작동해야 하는 경우가 아니라면 사용하지 마십시오. 이는 레거시 메모리 관리자를 계속 지원해야 하는 라이브러리 작성자나 새로운 메모리 관리자에서 문제가 발생했을 때 대체 수단이 필요한 개발자에게 유용할 수 있습니다.</p><p>이러한 경우, 새로운 메모리 관리자와 레거시 메모리 관리자 모두에 대한 코드를 일시적으로 지원할 수 있습니다. 더 이상 사용되지 않는 경고를 무시하려면 다음 중 하나를 수행하세요.</p><ul><li>더 이상 사용되지 않는 API 사용에 <code>@OptIn(FreezingIsDeprecated::class)</code> 어노테이션을 붙이세요.</li><li>Gradle의 모든 Kotlin 소스 세트에 <code>languageSettings.optIn(&quot;kotlin.native.FreezingIsDeprecated&quot;)</code>를 적용하세요.</li><li>컴파일러 플래그 <code>-opt-in=kotlin.native.FreezingIsDeprecated</code>를 전달하세요.</li></ul><h4 id="swift-objective-c에서-kotlin-suspend-함수-호출" tabindex="-1">Swift/Objective-C에서 Kotlin suspend 함수 호출 <a class="header-anchor" href="#swift-objective-c에서-kotlin-suspend-함수-호출" aria-label="Permalink to &quot;Swift/Objective-C에서 Kotlin suspend 함수 호출&quot;">​</a></h4><p>새로운 메모리 관리자는 여전히 Swift 및 Objective-C에서 메인 스레드 외의 스레드에서 Kotlin <code>suspend</code> 함수를 호출하는 것을 제한하지만, 새로운 Gradle 옵션으로 이 제한을 해제할 수 있습니다.</p><p>이 제한은 코드가 원래 스레드에서 재개될 코루틴(continuation)을 디스패치하는 경우 때문에 레거시 메모리 관리자에서 처음 도입되었습니다. 이 스레드에 지원되는 이벤트 루프가 없으면 작업이 실행되지 않아 코루틴이 재개되지 않습니다.</p><p>특정 경우에는 이 제한이 더 이상 필요 없지만, 필요한 모든 조건을 쉽게 구현할 수는 없습니다. 이 때문에 새로운 메모리 관리자에서는 이 제한을 유지하되, 비활성화할 수 있는 옵션을 도입하기로 결정했습니다. 이를 위해 <code>gradle.properties</code>에 다음 옵션을 추가하세요.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.objcExportSuspendFunctionLaunchThreadRestriction=none</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>kotlinx.coroutines</code>의 <code>native-mt</code> 버전 또는 동일한 &quot;원본 스레드로 디스패치&quot; 접근 방식을 사용하는 다른 라이브러리를 사용하는 경우 이 옵션을 추가하지 마십시오.</p></div><p>Kotlin 팀은 이 옵션을 구현해준 <a href="https://github.com/ahmedre" target="_blank" rel="noreferrer">Ahmed El-Helw</a>에게 매우 감사합니다.</p><h4 id="피드백-남기기" tabindex="-1">피드백 남기기 <a class="header-anchor" href="#피드백-남기기" aria-label="Permalink to &quot;피드백 남기기&quot;">​</a></h4><p>이는 저희 생태계에 중요한 변화입니다. 더 나은 개선을 위해 여러분의 피드백을 주시면 감사하겠습니다.</p><p>프로젝트에서 새로운 메모리 관리자를 사용해보고 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">이슈 트래커인 YouTrack</a>에 피드백을 공유해 주세요.</p><h3 id="info-plist-파일-사용자-지정" tabindex="-1">Info.plist 파일 사용자 지정 <a class="header-anchor" href="#info-plist-파일-사용자-지정" aria-label="Permalink to &quot;Info.plist 파일 사용자 지정&quot;">​</a></h3><p>프레임워크를 생성할 때 Kotlin/Native 컴파일러는 정보 속성 목록 파일인 <code>Info.plist</code>를 생성합니다. 이전에는 그 내용을 사용자 지정하기가 번거로웠습니다. Kotlin 1.7.20부터는 다음 속성들을 직접 설정할 수 있습니다.</p><table tabindex="0"><thead><tr><th>속성</th><th>이진 옵션</th></tr></thead><tbody><tr><td><code>CFBundleIdentifier</code></td><td><code>bundleId</code></td></tr><tr><td><code>CFBundleShortVersionString</code></td><td><code>bundleShortVersionString</code></td></tr><tr><td><code>CFBundleVersion</code></td><td><code>bundleVersion</code></td></tr></tbody></table><p>이를 위해 해당 이진 옵션을 사용하세요. 필요한 프레임워크에 <code>-Xbinary=$option=$value</code> 컴파일러 플래그를 전달하거나 <code>binaryOption(option, value)</code> Gradle DSL을 설정하세요.</p><p>Kotlin 팀은 이 기능을 구현해준 Mads Ager에게 매우 감사합니다.</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS는 개발자 경험을 개선하고 성능을 향상시키는 몇 가지 개선 사항을 받았습니다.</p><ul><li>의존성 로딩 효율성 개선 덕분에 Klib 생성이 증분 빌드와 클린 빌드 모두에서 더 빨라졌습니다.</li><li><a href="/ko/kotlin/js-ir-compiler#incremental-compilation-for-development-binaries">개발 바이너리에 대한 증분 컴파일</a>이 재작업되어 클린 빌드 시나리오에서 주요 개선, 더 빠른 증분 빌드, 안정성 수정 사항이 적용되었습니다.</li><li>중첩 객체, 봉인된 클래스, 생성자에서 기본값이 있는 파라미터에 대한 <code>.d.ts</code> 생성을 개선했습니다.</li></ul><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin Gradle 플러그인에 대한 업데이트는 새로운 Gradle 기능 및 최신 Gradle 버전과의 호환성에 중점을 둡니다.</p><p>Kotlin 1.7.20은 Gradle 7.1 지원을 위한 변경 사항을 포함합니다. 더 이상 사용되지 않는 메서드 및 프로퍼티가 제거되거나 대체되어 Kotlin Gradle 플러그인에서 발생하는 사용 중단 경고 수를 줄이고 Gradle 8.0의 향후 지원을 해제합니다.</p><p>하지만 주의가 필요할 수 있는 잠재적으로 호환성을 깨는 변경 사항도 있습니다.</p><h3 id="타겟-구성" tabindex="-1">타겟 구성 <a class="header-anchor" href="#타겟-구성" aria-label="Permalink to &quot;타겟 구성&quot;">​</a></h3><ul><li><p><code>org.jetbrains.kotlin.gradle.dsl.SingleTargetExtension</code>은 이제 제네릭 파라미터인 <code>SingleTargetExtension&lt;T : KotlinTarget&gt;</code>를 가집니다.</p></li><li><p><code>kotlin.targets.fromPreset()</code> 컨벤션은 더 이상 사용되지 않습니다. 대신 여전히 <code>kotlin.targets { fromPreset() }</code>을 사용할 수 있지만, <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-discover-project.html#targets" target="_blank" rel="noreferrer">명시적으로 타겟을 설정하는 것</a>을 권장합니다.</p></li><li><p>Gradle에 의해 자동 생성된 타겟 접근자는 더 이상 <code>kotlin.targets { }</code> 블록 내에서 사용할 수 없습니다. 대신 <code>findByName(&quot;targetName&quot;)</code> 메서드를 사용하십시오.</p><p><code>kotlin.targets</code>의 경우 (예: <code>kotlin.targets.linuxX64</code>), 이러한 접근자는 여전히 사용할 수 있습니다.</p></li></ul><h3 id="소스-디렉터리-구성" tabindex="-1">소스 디렉터리 구성 <a class="header-anchor" href="#소스-디렉터리-구성" aria-label="Permalink to &quot;소스 디렉터리 구성&quot;">​</a></h3><p>Kotlin Gradle 플러그인은 이제 Java의 <code>SourceSet</code> 그룹에 Kotlin <code>SourceDirectorySet</code>을 <code>kotlin</code> 확장으로 추가합니다. 이를 통해 <a href="https://docs.gradle.org/7.1/release-notes.html#easier-source-set-configuration-in-kotlin-dsl" target="_blank" rel="noreferrer">Java, Groovy, Scala</a>에서 구성하는 방식과 유사하게 <code>build.gradle.kts</code> 파일에서 소스 디렉터리를 구성할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            java.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSrcDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            kotlin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSrcDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>더 이상 사용되지 않는 Gradle 컨벤션을 사용하고 Kotlin에 대한 소스 디렉터리를 지정할 필요가 없습니다.</p><p><code>kotlin</code> 확장을 사용하여 <code>KotlinSourceSet</code>에 접근할 수도 있다는 점을 기억하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="jvm-툴체인-구성을-위한-새로운-메서드" tabindex="-1">JVM 툴체인 구성을 위한 새로운 메서드 <a class="header-anchor" href="#jvm-툴체인-구성을-위한-새로운-메서드" aria-label="Permalink to &quot;JVM 툴체인 구성을 위한 새로운 메서드&quot;">​</a></h3><p>이번 릴리스에서는 <a href="/ko/kotlin/gradle-configure-project#gradle-java-toolchains-support">JVM 툴체인 기능</a>을 활성화하기 위한 새로운 <code>jvmToolchain()</code> 메서드를 제공합니다. <code>implementation</code> 또는 <code>vendor</code>와 같은 추가 <a href="https://docs.gradle.org/current/javadoc/org/gradle/jvm/toolchain/JavaToolchainSpec.html" target="_blank" rel="noreferrer">구성 필드</a>가 필요하지 않은 경우, Kotlin 확장에서 이 메서드를 사용할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이는 추가 구성 없이 Kotlin 프로젝트 설정 프로세스를 간소화합니다. 이번 릴리스 이전에는 다음 방식으로만 JDK 버전을 지정할 수 있었습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="표준-라이브러리" tabindex="-1">표준 라이브러리 <a class="header-anchor" href="#표준-라이브러리" aria-label="Permalink to &quot;표준 라이브러리&quot;">​</a></h2><p>Kotlin 1.7.20은 <code>java.nio.file.Path</code> 클래스에 대한 새로운 <a href="/ko/kotlin/extensions#extension-functions">확장 함수</a>를 제공하여 파일 트리를 탐색할 수 있도록 합니다.</p><ul><li><code>walk()</code>는 지정된 경로를 루트로 하는 파일 트리를 지연 로드(lazily) 탐색합니다.</li><li><code>fileVisitor()</code>는 <code>FileVisitor</code>를 별도로 생성할 수 있도록 합니다. <code>FileVisitor</code>는 디렉터리와 파일을 탐색할 때의 동작을 정의합니다.</li><li><code>visitFileTree(fileVisitor: FileVisitor, ...)</code>는 준비된 <code>FileVisitor</code>를 소비하고 내부적으로 <code>java.nio.file.Files.walkFileTree()</code>를 사용합니다.</li><li><code>visitFileTree(..., builderAction: FileVisitorBuilder.() -&gt; Unit)</code>는 <code>builderAction</code>으로 <code>FileVisitor</code>를 생성하고 <code>visitFileTree(fileVisitor, ...)</code> 함수를 호출합니다.</li><li><code>FileVisitor</code>의 반환 타입인 <code>FileVisitResult</code>는 파일 처리를 계속하는 <code>CONTINUE</code> 기본값을 가집니다.</li></ul><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>java.nio.file.Path</code>의 새로운 확장 함수는 <a href="/ko/kotlin/components-stability">실험적</a>입니다. 이 함수들은 언제든지 변경될 수 있습니다. 옵트인(<code>opt-in</code>)이 필요하며(자세한 내용은 아래 참조), 평가 목적으로만 사용해야 합니다.</p></div><p>새로운 확장 함수로 할 수 있는 몇 가지 작업은 다음과 같습니다.</p><ul><li><p><code>FileVisitor</code>를 명시적으로 생성한 다음 사용:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cleanVisitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fileVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onPreVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { directory, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 디렉터리 방문 시 일부 로직</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onVisitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 파일 방문 시 일부 로직</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 여기에 일부 로직이 올 수 있습니다</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cleanVisitor)</span></span></code></pre></div></li><li><p><code>builderAction</code>으로 <code>FileVisitor</code>를 생성하고 즉시 사용:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// builderAction의 정의:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onPreVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { directory, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 디렉터리 방문 시 일부 로직</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onVisitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 파일 방문 시 일부 로직</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>walk()</code> 함수를 사용하여 지정된 경로를 루트로 하는 파일 트리를 탐색:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlin.io.path.ExperimentalPathApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> traverseFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cleanVisitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fileVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onPreVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { directory, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (directory.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                directory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                FileVisitResult.SKIP_SUBTREE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onVisitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (file.extension </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteExisting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTempDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { srcDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        srcDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        srcDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A.kt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        srcDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A.class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { buildDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Project.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// walk 함수 사용:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> directoryStructure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PathWalkOption.INCLUDE_DIRECTORIES)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">relativeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rootDirectory).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertPrints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(directoryStructure, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[, build, build/Project.jar, src, src/A.class, src/A.kt]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cleanVisitor)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> directoryStructureAfterClean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PathWalkOption.INCLUDE_DIRECTORIES)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">relativeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rootDirectory).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertPrints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(directoryStructureAfterClean, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[, src, src/A.kt]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>실험적 API에 대한 일반적인 경우와 같이, 새로운 확장 함수에는 옵트인(<code>opt-in</code>)이 필요합니다: <code>@OptIn(kotlin.io.path.ExperimentalPathApi::class)</code> 또는 <code>@kotlin.io.path.ExperimentalPathApi</code>. 또는 컴파일러 옵션 <code>-opt-in=kotlin.io.path.ExperimentalPathApi</code>를 사용할 수 있습니다.</p><p><a href="https://youtrack.jetbrains.com/issue/KT-52909" target="_blank" rel="noreferrer">YouTrack</a>의 <a href="https://youtrack.jetbrains.com/issue/KT-52909" target="_blank" rel="noreferrer"><code>walk()</code> 함수</a>와 <a href="https://youtrack.jetbrains.com/issue/KT-52910" target="_blank" rel="noreferrer">방문 확장 함수</a>에 대한 피드백을 주시면 감사하겠습니다.</p><h2 id="문서-업데이트" tabindex="-1">문서 업데이트 <a class="header-anchor" href="#문서-업데이트" aria-label="Permalink to &quot;문서 업데이트&quot;">​</a></h2><p>이전 릴리스 이후, Kotlin 문서에 몇 가지 주목할 만한 변경 사항이 있었습니다.</p><h3 id="개편-및-개선된-페이지" tabindex="-1">개편 및 개선된 페이지 <a class="header-anchor" href="#개편-및-개선된-페이지" aria-label="Permalink to &quot;개편 및 개선된 페이지&quot;">​</a></h3><ul><li><a href="/ko/kotlin/basic-types">기본 타입 개요</a> – Kotlin에서 사용되는 기본 타입(숫자, 부울, 문자, 문자열, 배열, 부호 없는 정수)에 대해 알아보세요.</li><li><a href="/ko/kotlin/kotlin-ide">Kotlin 개발용 IDE</a> – 공식 Kotlin 지원이 제공되는 IDE 및 커뮤니티 지원 플러그인이 있는 도구 목록을 확인하세요.</li></ul><h3 id="kotlin-멀티플랫폼-저널의-새로운-글" tabindex="-1">Kotlin 멀티플랫폼 저널의 새로운 글 <a class="header-anchor" href="#kotlin-멀티플랫폼-저널의-새로운-글" aria-label="Permalink to &quot;Kotlin 멀티플랫폼 저널의 새로운 글&quot;">​</a></h3><ul><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/native-and-cross-platform.html" target="_blank" rel="noreferrer">네이티브 및 크로스 플랫폼 앱 개발: 어떻게 선택할까?</a> – 크로스 플랫폼 앱 개발과 네이티브 접근 방식의 개요 및 장점을 확인해 보세요.</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/cross-platform-frameworks.html" target="_blank" rel="noreferrer">최고의 크로스 플랫폼 앱 개발 프레임워크 6가지</a> – 크로스 플랫폼 프로젝트에 적합한 프레임워크를 선택하는 데 도움이 되는 주요 측면에 대해 알아보세요.</li></ul><h3 id="새롭고-업데이트된-튜토리얼" tabindex="-1">새롭고 업데이트된 튜토리얼 <a class="header-anchor" href="#새롭고-업데이트된-튜토리얼" aria-label="Permalink to &quot;새롭고 업데이트된 튜토리얼&quot;">​</a></h3><ul><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-create-first-app.html" target="_blank" rel="noreferrer">Kotlin 멀티플랫폼 시작하기</a> – Kotlin을 사용한 크로스 플랫폼 모바일 개발에 대해 알아보고 Android 및 iOS에서 모두 작동하는 앱을 만드세요.</li><li><a href="/ko/kotlin/js-react">React 및 Kotlin/JS로 웹 애플리케이션 구축</a> – Kotlin의 DSL과 일반적인 React 프로그램의 기능을 탐색하는 브라우저 앱을 만드세요.</li></ul><h3 id="릴리스-문서의-변경-사항" tabindex="-1">릴리스 문서의 변경 사항 <a class="header-anchor" href="#릴리스-문서의-변경-사항" aria-label="Permalink to &quot;릴리스 문서의 변경 사항&quot;">​</a></h3><p>각 릴리스에 대한 권장 <code>kotlinx</code> 라이브러리 목록은 더 이상 제공하지 않습니다. 이 목록에는 Kotlin 자체와 함께 권장되고 테스트된 버전만 포함되었습니다. 일부 라이브러리는 서로 의존하며 권장되는 Kotlin 버전과 다를 수 있는 특별한 <code>kotlinx</code> 버전을 필요로 한다는 점은 고려되지 않았습니다.</p><p>라이브러리가 서로 어떻게 연관되고 의존하는지에 대한 정보를 제공하여 프로젝트에서 Kotlin 버전을 업그레이드할 때 어떤 <code>kotlinx</code> 라이브러리 버전을 사용해야 하는지 명확히 알 수 있도록 방법을 모색 중입니다.</p><h2 id="kotlin-1-7-20-설치" tabindex="-1">Kotlin 1.7.20 설치 <a class="header-anchor" href="#kotlin-1-7-20-설치" aria-label="Permalink to &quot;Kotlin 1.7.20 설치&quot;">​</a></h2><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2021.3, 2022.1, 2022.2는 Kotlin 플러그인을 1.7.20으로 자동 업데이트할 것을 제안합니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Android Studio Dolphin (213), Electric Eel (221), Flamingo (222)의 경우, Kotlin 플러그인 1.7.20은 예정된 Android Studio 업데이트와 함께 제공될 예정입니다.</p></div><p>새로운 명령줄 컴파일러는 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.7.20" target="_blank" rel="noreferrer">GitHub 릴리스 페이지</a>에서 다운로드할 수 있습니다.</p><h3 id="kotlin-1-7-20-호환성-가이드" tabindex="-1">Kotlin 1.7.20 호환성 가이드 <a class="header-anchor" href="#kotlin-1-7-20-호환성-가이드" aria-label="Permalink to &quot;Kotlin 1.7.20 호환성 가이드&quot;">​</a></h3><p>Kotlin 1.7.20은 증분 릴리스이지만, Kotlin 1.7.0에서 도입된 문제의 확산을 제한하기 위해 호환되지 않는 변경 사항이 여전히 존재합니다.</p><p>이러한 변경 사항에 대한 자세한 목록은 <a href="/ko/kotlin/compatibility-guide-1720">Kotlin 1.7.20 호환성 가이드</a>에서 확인할 수 있습니다.</p>`,92))])}const A=d(g,[["render",c]]);export{m as __pageData,A as default};
