import{_ as a}from"./chunks/kmp-use-cases-1.D7ku5ORt.js";import{_ as r,a as e,b as p,c as n,d as m}from"./chunks/kmp-get-started-action.BrrUQxdz.js";import{_ as u}from"./chunks/explore-compose.CnswIadv.js";import{_ as s}from"./chunks/kmp-libs-over-years.BFrjxBnI.js";import{_ as f,C as h,c as d,o as c,j as l,G as K,ag as k,a as i,w as M}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin Multiplatform を採用してプロジェクトを強化する10の理由","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-reasons-to-try.md","filePath":"ja/kmp/multiplatform-reasons-to-try.md","lastUpdated":1755516278000}'),b={name:"ja/kmp/multiplatform-reasons-to-try.md"};function _(g,t,w,A,S,P){const o=h("web-summary");return c(),d("div",null,[t[1]||(t[1]=l("h1",{id:"kotlin-multiplatform-を採用してプロジェクトを強化する10の理由",tabindex:"-1"},[i("Kotlin Multiplatform を採用してプロジェクトを強化する10の理由 "),l("a",{class:"header-anchor",href:"#kotlin-multiplatform-を採用してプロジェクトを強化する10の理由","aria-label":'Permalink to "Kotlin Multiplatform を採用してプロジェクトを強化する10の理由"'},"​")],-1)),K(o,null,{default:M(()=>t[0]||(t[0]=[i("Kotlin Multiplatformをプロジェクトで利用すべき10の理由を探ります。企業の実例から学び、この技術をマルチプラットフォーム開発に活用し始めましょう。")])),_:1}),t[2]||(t[2]=k('<p>今日の多様なテクノロジーランドスケープにおいて、 開発者は、様々なプラットフォーム間でシームレスに動作するアプリケーションを構築し、 開発時間を最適化し、ユーザーの生産性を向上させるという課題に直面しています。 Kotlin Multiplatform (KMP) は、複数のプラットフォーム向けにアプリを作成し、 プラットフォーム間でコードの再利用を促進しつつ、ネイティブプログラミングの利点を維持できるソリューションを提供します。</p><p>本記事では、開発者が既存または新規プロジェクトでKotlin Multiplatformの使用を検討すべき10の理由と、KMPがなぜ引き続き大きな注目を集めているのかを探ります。</p><h2 id="プロジェクトでkotlin-multiplatformを試すべき理由" tabindex="-1">プロジェクトでKotlin Multiplatformを試すべき理由 <a class="header-anchor" href="#プロジェクトでkotlin-multiplatformを試すべき理由" aria-label="Permalink to &quot;プロジェクトでKotlin Multiplatformを試すべき理由&quot;">​</a></h2><p>効率性の向上を求める場合でも、新しいテクノロジーを試してみたい場合でも、 本記事ではKotlin Multiplatformがもたらす実践的な利点について説明します。 開発作業の合理化から広範なプラットフォームサポート、そして堅牢なツールエコシステムに至るまで、実際の企業による事例研究とともに紹介します。</p><ul><li><a href="#1-kotlin-multiplatform-allows-you-to-avoid-code-duplication">Kotlin Multiplatformによりコードの重複を回避できる</a></li><li><a href="#2-kotlin-multiplatform-supports-an-extensive-list-of-platforms">Kotlin Multiplatformは広範なプラットフォームをサポートしている</a></li><li><a href="#3-kotlin-provides-simplified-code-sharing-mechanisms">Kotlinは簡素化されたコード共有メカニズムを提供している</a></li><li><a href="#4-kotlin-multiplatform-allows-for-flexible-multiplatform-development">Kotlin Multiplatformは柔軟なマルチプラットフォーム開発を可能にする</a></li><li><a href="#5-with-the-kotlin-multiplatform-solution-you-can-share-ui-code">Kotlin MultiplatformソリューションでUIコードを共有できる</a></li><li><a href="#6-you-can-use-kotlin-multiplatform-in-existing-and-new-projects">Kotlin Multiplatformは既存および新規プロジェクトで使用できる</a></li><li><a href="#7-with-kotlin-multiplatform-you-can-start-sharing-your-code-gradually">Kotlin Multiplatformを使えば、コードの共有を段階的に開始できる</a></li><li><a href="#8-kotlin-multiplatform-is-already-used-by-global-companies">Kotlin Multiplatformはすでに世界中の企業で採用されている</a></li><li><a href="#9-kotlin-multiplatform-provides-powerful-tooling-support">Kotlin Multiplatformは強力なツールサポートを提供している</a></li><li><a href="#10-kotlin-multiplatform-boasts-a-large-and-supportive-community">Kotlin Multiplatformは大規模で協力的なコミュニティを誇っている</a></li></ul><h3 id="_1-kotlin-multiplatformによりコードの重複を回避できる" tabindex="-1">1. Kotlin Multiplatformによりコードの重複を回避できる <a class="header-anchor" href="#_1-kotlin-multiplatformによりコードの重複を回避できる" aria-label="Permalink to &quot;1. Kotlin Multiplatformによりコードの重複を回避できる&quot;">​</a></h3><p>中国最大の中国語検索エンジンであるBaiduは、若年層をターゲットにしたアプリケーションである <em>Wonder App</em> をリリースしました。 従来のアプリ開発で彼らが直面した問題の一部を以下に示します。</p><ul><li>アプリ体験の一貫性の欠如: AndroidアプリとiOSアプリで動作が異なっていました。</li><li>ビジネスロジック検証の高コスト: 同じビジネスロジックを使用しているiOS開発者とAndroid開発者の作業は個別に確認する必要があり、高コストにつながっていました。</li><li>アップグレードとメンテナンスの高コスト: ビジネスロジックの重複は複雑で時間もかかり、アプリのアップグレードとメンテナンスコストを増加させていました。</li></ul><p>Baiduチームは、データ層（データモデル、RESTful APIリクエスト、JSONデータ解析、キャッシュロジック）の統一から始めて、Kotlin Multiplatformの実験を行うことを決定しました。</p><p>次に彼らは、Kotlin Multiplatformでインターフェースロジックを統一できるModel-View-Intent (MVI) ユーザーインターフェースパターンを採用することを決定しました。彼らはまた、低レベルのデータ、処理ロジック、およびUI処理ロジックも共有しました。</p><p>この実験は非常に成功し、以下の結果をもたらしました。</p><ul><li>AndroidおよびiOSアプリ全体での一貫した体験。</li><li>メンテナンスおよびテストコストの削減。</li><li>チーム内の生産性の著しい向上。</li></ul><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/case-studies.html" target="_blank" rel="noreferrer"><img src="'+a+'" alt="実際のKotlin Multiplatformユースケースを探る" width="700"></a></p><h3 id="_2-kotlin-multiplatformは広範なプラットフォームをサポートしている" tabindex="-1">2. Kotlin Multiplatformは広範なプラットフォームをサポートしている <a class="header-anchor" href="#_2-kotlin-multiplatformは広範なプラットフォームをサポートしている" aria-label="Permalink to &quot;2. Kotlin Multiplatformは広範なプラットフォームをサポートしている&quot;">​</a></h3><p>Kotlin Multiplatformの主要な利点の1つは、様々なプラットフォームを広範囲にサポートしていることであり、開発者にとって多用途な選択肢となっています。 これらのプラットフォームには、Android、iOS、デスクトップ、Web（JavaScriptとWebAssembly）、およびサーバー（Java Virtual Machine）が含まれます。</p><p>クイズを通じて学習と練習を支援する人気の教育プラットフォームである <em>Quizlet</em> は、Kotlin Multiplatformの利点を強調するもう1つの事例です。 このプラットフォームには月間約5,000万人のアクティブユーザーがおり、そのうち1,000万人はAndroidユーザーです。このアプリはAppleのApp Storeの教育カテゴリでトップ10に入っています。</p><p>QuizletチームはJavaScript、React Native、C++、Rust、Goなどのテクノロジーを試しましたが、パフォーマンス、安定性、プラットフォーム間の実装の違いなど、様々な課題に直面しました。 最終的に、彼らはAndroid、iOS、Web向けにKotlin Multiplatformを選択しました。KMPの使用がQuizletチームにどのように役立ったかを以下に示します。</p><ul><li>オブジェクトをマーシャリングする際の型安全なAPIが増加しました。</li><li>iOSでの採点アルゴリズムがJavaScriptと比較して25%高速化しました。</li><li>Androidアプリのサイズが18 MBから10 MBに削減されました。</li><li>開発者エクスペリエンスが向上しました。</li><li>Android、iOS、バックエンド、Web開発者を含むチームメンバーの間で、共有コードの記述への関心が高まりました。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="https://www.jetbrains.com/kotlin-multiplatform/" target="_blank" rel="noreferrer">Kotlin Multiplatformが提供する機能の全範囲を発見する</a></p></div><h3 id="_3-kotlinは簡素化されたコード共有メカニズムを提供している" tabindex="-1">3. Kotlinは簡素化されたコード共有メカニズムを提供している <a class="header-anchor" href="#_3-kotlinは簡素化されたコード共有メカニズムを提供している" aria-label="Permalink to &quot;3. Kotlinは簡素化されたコード共有メカニズムを提供している&quot;">​</a></h3><p>プログラミング言語の世界において、Kotlinはその実用的なアプローチで際立っており、以下の機能を優先しています。</p><ul><li><p><strong>簡潔さよりも可読性</strong>。簡潔なコードは魅力的ですが、Kotlinは明確さが最も重要であると理解しています。目標はコードを短縮するだけでなく、不要なボイラープレートを排除することであり、これにより可読性と保守性が向上します。</p></li><li><p><strong>表現力よりもコードの再利用性</strong>。多くの問題を解決するだけでなく、パターンを特定し、再利用可能なライブラリを作成することに重点を置いています。既存のソリューションを活用し、共通点を抽出することで、Kotlinは開発者がコードの効率を最大化できるようにします。</p></li><li><p><strong>独自性よりも相互運用性</strong>。車輪の再発明をするのではなく、KotlinはJavaのような確立された言語との互換性を重視しています。この相互運用性により、広大なJavaエコシステムとのシームレスな統合が可能になるだけでなく、実績のあるプラクティスや過去の経験から得られた教訓の採用も容易になります。</p></li><li><p><strong>堅牢性よりも安全性とツール</strong>。Kotlinは開発者が早期にエラーをキャッチできるようにし、プログラムが無効な状態に陥らないようにします。コンパイル時やIDEでコードを記述中に問題を検出することで、Kotlinはソフトウェアの信頼性を高め、ランタイムエラーのリスクを最小限に抑えます。</p></li></ul><p>私たちは毎年Kotlinに関する調査を実施し、ユーザーの言語体験について把握しています。今年は回答者の92%が肯定的な経験をしたと報告しており、1年前の86%から著しく増加しました。</p><p><img src="'+r+'" alt="2023年と2024年のKotlin満足度" width="700"></p><p>重要な点は、Kotlinが可読性、再利用性、相互運用性、そして安全性を重視しているため、開発者にとって魅力的な選択肢となり、生産性を向上させるということです。</p><h3 id="_4-kotlin-multiplatformは柔軟なマルチプラットフォーム開発を可能にする" tabindex="-1">4. Kotlin Multiplatformは柔軟なマルチプラットフォーム開発を可能にする <a class="header-anchor" href="#_4-kotlin-multiplatformは柔軟なマルチプラットフォーム開発を可能にする" aria-label="Permalink to &quot;4. Kotlin Multiplatformは柔軟なマルチプラットフォーム開発を可能にする&quot;">​</a></h3><p>Kotlin Multiplatformを使えば、開発者はネイティブ開発とクロスプラットフォーム開発のどちらを選ぶかについて決断する必要がなくなります。何を共有し、何をネイティブで書くかを選択できます。</p><p>Kotlin Multiplatform以前は、開発者はすべてをネイティブで記述する必要がありました。</p><p><img src="'+e+'" alt="Kotlin Multiplatform以前: すべてのコードをネイティブで記述" width="700"></p><p>Kotlin Multiplatformは、<a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> のおかげで、ビジネスロジック、プレゼンテーションロジック、あるいはUIロジックまで共有することを可能にします。</p><p><img src="'+p+'" alt="Kotlin MultiplatformとCompose Multiplatformを使用: 開発者はビジネスロジック、プレゼンテーションロジック、あるいはUIロジックまで共有できる" width="700"></p><p>これで、プラットフォーム固有のコードを除いて、ほぼすべてを共有できます。</p><h3 id="_5-kotlin-multiplatformソリューションでuiコードを共有できる" tabindex="-1">5. Kotlin MultiplatformソリューションでUIコードを共有できる <a class="header-anchor" href="#_5-kotlin-multiplatformソリューションでuiコードを共有できる" aria-label="Permalink to &quot;5. Kotlin MultiplatformソリューションでUIコードを共有できる&quot;">​</a></h3><p>JetBrainsは、KotlinとJetpack Composeをベースにした、Android（Jetpack Compose経由）、iOS、デスクトップ、Web（Alpha）を含む複数のプラットフォーム間でユーザーインターフェースを共有するための宣言型フレームワークである<a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>を提供しています。</p><p>Eコマースビジネスに特化したラストマイルロジスティクスプラットフォームである <em>Instabee</em> は、このテクノロジーがまだアルファ版の段階であったにもかかわらず、AndroidおよびiOSアプリケーションでCompose Multiplatformを使用し始め、UIロジックを共有しました。</p><p>Compose Multiplatformの公式サンプルには、Android、iOS、デスクトップ、Webで動作し、マップやカメラなどのネイティブコンポーネントと統合されている<a href="https://github.com/JetBrains/compose-multiplatform/tree/master/examples/imageviewer" target="_blank" rel="noreferrer">ImageViewer App</a>があります。また、スマートウォッチ用オペレーティングシステムであるWear OSでも動作するコミュニティサンプル、<a href="https://github.com/xxfast/NYTimes-KMP" target="_blank" rel="noreferrer">New York Times App</a>のクローンもあります。より多くの例を見るには、この<a href="./multiplatform-samples">Kotlin MultiplatformおよびCompose Multiplatformサンプル</a>のリストを確認してください。</p><p><a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer"><img src="'+u+'" alt="Compose Multiplatformを探る" width="700"></a></p><h3 id="_6-kotlin-multiplatformは既存および新規プロジェクトで使用できる" tabindex="-1">6. Kotlin Multiplatformは既存および新規プロジェクトで使用できる <a class="header-anchor" href="#_6-kotlin-multiplatformは既存および新規プロジェクトで使用できる" aria-label="Permalink to &quot;6. Kotlin Multiplatformは既存および新規プロジェクトで使用できる&quot;">​</a></h3><p>以下の2つのシナリオを見てみましょう。</p><ul><li><p><strong>既存プロジェクトでのKMPの使用</strong></p><p>再度、BaiduのWonder Appの例があります。チームはすでにAndroidアプリとiOSアプリを持っており、ロジックを統合しただけでした。彼らは徐々により多くのライブラリとロジックを統合し始め、最終的にプラットフォーム間で共有される統一されたコードベースを達成しました。</p></li><li><p><strong>新規プロジェクトでのKMPの使用</strong></p><p>オンラインプラットフォームおよびソーシャルメディアウェブサイトである <em>9GAG</em> は、FlutterやReact Nativeなど様々なテクノロジーを試しましたが、最終的にKotlin Multiplatformを選択しました。これにより、両プラットフォーム間でアプリの動作を一致させることができました。彼らはまずAndroidアプリを作成することから始め、その後、Kotlin MultiplatformプロジェクトをiOSでの依存関係として使用しました。</p></li></ul><h3 id="_7-kotlin-multiplatformを使えば、コードの共有を段階的に開始できる" tabindex="-1">7. Kotlin Multiplatformを使えば、コードの共有を段階的に開始できる <a class="header-anchor" href="#_7-kotlin-multiplatformを使えば、コードの共有を段階的に開始できる" aria-label="Permalink to &quot;7. Kotlin Multiplatformを使えば、コードの共有を段階的に開始できる&quot;">​</a></h3><p>定数のような単純な要素から段階的に開始し、メールアドレスの検証のような一般的なユーティリティに徐々に移行することができます。また、例えばトランザクション処理やユーザー認証のようなビジネスロジックを記述または移行することも可能です。</p><p>JetBrainsでは、Kotlin Multiplatformに関する調査を頻繁に実施し、コミュニティに異なるプラットフォーム間でどのコードを共有しているかを尋ねています。これらの調査により、データモデル、データシリアライズ、ネットワーキング、アナリティクス、そして内部ユーティリティが、このテクノロジーが大きな影響を与える主要な領域であることが明らかになりました。</p><p><img src="'+n+'" alt="Kotlin Multiplatformでユーザーがプラットフォーム間で共有できるコード部分: 調査結果" width="700"></p><h3 id="_8-kotlin-multiplatformはすでに世界中の企業で採用されている" tabindex="-1">8. Kotlin Multiplatformはすでに世界中の企業で採用されている <a class="header-anchor" href="#_8-kotlin-multiplatformはすでに世界中の企業で採用されている" aria-label="Permalink to &quot;8. Kotlin Multiplatformはすでに世界中の企業で採用されている&quot;">​</a></h3><p>KMPは、Forbes、Philips、Cash App、Meetup、Autodeskなど、世界中の多くの大企業ですでに使用されています。彼らのすべての事例は、<a href="./case-studies">事例紹介ページ</a>で読むことができます。</p><p>2023年11月、JetBrainsはKotlin Multiplatformが<a href="https://blog.jetbrains.com/kotlin/2023/11/kotlin-multiplatform-stable/" target="_blank" rel="noreferrer">Stable</a>になったことを発表し、より多くの企業やチームがこのテクノロジーに関心を持つようになりました。</p><h3 id="_9-kotlin-multiplatformは強力なツールサポートを提供している" tabindex="-1">9. Kotlin Multiplatformは強力なツールサポートを提供している <a class="header-anchor" href="#_9-kotlin-multiplatformは強力なツールサポートを提供している" aria-label="Permalink to &quot;9. Kotlin Multiplatformは強力なツールサポートを提供している&quot;">​</a></h3><p>Kotlin Multiplatformプロジェクトで作業する際、手元には強力なツールがあります。</p><ul><li><strong>Android Studio</strong>。この統合開発環境（IDE）はIntelliJ Community Editionをベースに構築されており、Android開発の業界標準として広く認知されています。Android Studioは、コーディング、デバッグ、パフォーマンス監視のための包括的な機能スイートを提供します。</li><li><strong>Xcode</strong>。AppleのIDEは、Kotlin MultiplatformアプリのiOS部分を作成するために使用できます。XcodeはiOSアプリ開発の標準であり、コーディング、デバッグ、構成のための豊富なツールを提供します。ただし、XcodeはMac専用です。</li></ul><h3 id="_10-kotlin-multiplatformは大規模で協力的なコミュニティを誇っている" tabindex="-1">10. Kotlin Multiplatformは大規模で協力的なコミュニティを誇っている <a class="header-anchor" href="#_10-kotlin-multiplatformは大規模で協力的なコミュニティを誇っている" aria-label="Permalink to &quot;10. Kotlin Multiplatformは大規模で協力的なコミュニティを誇っている&quot;">​</a></h3><p>KotlinおよびKotlin Multiplatformには、非常に協力的なコミュニティがあります。何か質問がある場合に答えを見つけられる場所をいくつか紹介します。</p><ul><li><a href="https://slack-chats.kotlinlang.org/" target="_blank" rel="noreferrer">Kotlinlang Slackワークスペース</a>。このワークスペースには約60,000人のメンバーがおり、クロスプラットフォーム開発専用の関連チャンネルがいくつかあります。たとえば、<a href="https://slack-chats.kotlinlang.org/c/multiplatform" target="_blank" rel="noreferrer">#multiplatform</a>、<a href="https://slack-chats.kotlinlang.org/c/compose" target="_blank" rel="noreferrer">#compose</a>、<a href="https://slack-chats.kotlinlang.org/c/compose-ios" target="_blank" rel="noreferrer">#compose-ios</a>などです。</li><li><a href="https://twitter.com/kotlin" target="_blank" rel="noreferrer">Kotlin X</a>。ここでは、素早い専門家の知見や最新ニュース、そして数えきれないほどのマルチプラットフォームのヒントが見つかります。</li><li><a href="https://www.youtube.com/channel/UCP7uiEZIqci43m22KDl0sNw" target="_blank" rel="noreferrer">Kotlin YouTube</a>。私たちのYouTubeチャンネルでは、実践的なチュートリアル、専門家とのライブストリーム、そして視覚的な学習者向けの他の優れた教育コンテンツを提供しています。</li><li><a href="https://lp.jetbrains.com/subscribe-to-kotlin-news/" target="_blank" rel="noreferrer">Kotlin Roundup</a>。ダイナミックなKotlinおよびKotlin Multiplatformエコシステム全体での最新情報を見逃したくない場合は、定期ニュースレターを購読してください！</li></ul><p>Kotlin Multiplatformエコシステムは発展し続けています。世界中の数多くのKotlin開発者によって熱心に育てられています。 年間作成されたKotlin Multiplatformライブラリの数を示す図を以下に示します。</p><p><img src="'+s+'" alt="長年にわたるKotlin Multiplatformライブラリの数。" width="700"></p><p>ご覧の通り、2021年には明確な増加が見られ、それ以来ライブラリの数は増え続けています。</p><h2 id="他のクロスプラットフォーム技術と比較してkotlin-multiplatformを選ぶ理由" tabindex="-1">他のクロスプラットフォーム技術と比較してKotlin Multiplatformを選ぶ理由 <a class="header-anchor" href="#他のクロスプラットフォーム技術と比較してkotlin-multiplatformを選ぶ理由" aria-label="Permalink to &quot;他のクロスプラットフォーム技術と比較してKotlin Multiplatformを選ぶ理由&quot;">​</a></h2><p><a href="./cross-platform-frameworks">異なるクロスプラットフォームソリューション</a>の中から選択する際には、それらの長所と短所の両方を比較検討することが重要です。Kotlin Multiplatformがあなたにとって最適な選択肢である主要な理由を以下に示します。</p><ul><li><strong>優れたツール、使いやすさ</strong>。Kotlin MultiplatformはKotlinを活用しており、開発者にとって優れたツールと使いやすさを提供します。</li><li><strong>ネイティブプログラミング</strong>。ネイティブで記述するのは簡単です。<a href="./multiplatform-expect-actual">expectedおよびactual宣言</a>のおかげで、マルチプラットフォームアプリがプラットフォーム固有のAPIにアクセスできるようにすることができます。</li><li><strong>優れたクロスプラットフォームパフォーマンス</strong>。Kotlinで記述された共有コードは、異なるターゲット向けに異なる出力形式にコンパイルされます。Android向けにはJavaバイトコード、iOS向けにはネイティブバイナリとなり、すべてのプラットフォームで優れたパフォーマンスを保証します。</li></ul><p>すでにKotlin Multiplatformを試すことを決めている場合は、始めるのに役立ついくつかのヒントを以下に示します。</p><ul><li><strong>小さく始める</strong>。小さな共有コンポーネントや定数から始め、チームにKotlin Multiplatformのワークフローと利点に慣れさせます。</li><li><strong>計画を立てる</strong>。期待される成果と実装および分析の方法を仮説として立て、明確な実験計画を策定します。共有コードへの貢献の役割を定義し、変更を効果的に配布するためのワークフローを確立します。</li><li><strong>評価し、振り返りを実施する</strong>。チームと振り返り会議を実施し、実験の成功を評価し、課題や改善すべき点を特定します。もしうまくいったなら、範囲を広げてさらに多くのコードを共有することを検討してもよいでしょう。もしそうでないなら、この実験がうまくいかなかった理由を理解する必要があります。</li></ul><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer"><img src="'+m+'" alt="Kotlin Multiplatformの動作を見る！今すぐ始めよう" width="700"></a></p><p>チームがKotlin Multiplatformを始めるのを支援したい方のために、実践的なヒントを盛り込んだ<a href="./multiplatform-introduce-your-team">詳細なガイド</a>を用意しました。</p><p>ご覧の通り、Kotlin Multiplatformはすでに多くの巨大企業によって、ネイティブのようなUIを持つ高性能なクロスプラットフォームアプリケーションを構築するために成功裏に使用されており、ネイティブプログラミングの利点を維持しながら、コードを効果的に再利用しています。</p>',64))])}const O=f(b,[["render",_]]);export{C as __pageData,O as default};
