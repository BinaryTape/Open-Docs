import{_ as C,C as t,c as y,o as m,G as s,ag as p,j as l,w as e,a}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/client-call-id.md","filePath":"ja/ktor/client-call-id.md","lastUpdated":1755457140000}'),I={name:"ja/ktor/client-call-id.md"};function b(v,i,f,_,F,D){const r=t("TopicTitle"),k=t("show-structure"),h=t("primary-label"),c=t("tldr"),u=t("link-summary"),n=t("code-block"),o=t("TabItem"),d=t("Tabs"),g=t("Links"),E=t("list");return m(),y("div",null,[s(r,{labelRef:"client-plugin",title:"Ktor Clientでのリクエストのトレース"}),s(k,{for:"chapter",depth:"2"}),s(h,{ref:"client-plugin"},null,512),s(c,null,{default:e(()=>i[0]||(i[0]=[l("p",null,[l("b",null,"必須の依存関係"),a(": "),l("code",null,"io.ktor:ktor-client-call-id")],-1),l("p",null,[l("b",null,"コード例"),a(": "),l("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-call-id"}," client-call-id ")],-1)])),_:1}),s(u,null,{default:e(()=>i[1]||(i[1]=[a(" CallIdクライアントプラグインを使用すると、一意のコールIDを使用してクライアントリクエストをトレースできます。 ")])),_:1}),i[14]||(i[14]=p('<p>CallIdプラグインを使用すると、一意のコールIDを使用してクライアントリクエストをエンドツーエンドでトレースできます。これは、マイクロサービスアーキテクチャにおいて、リクエストがいくつのサービスを経由しても、コールを追跡するために特に役立ちます。</p><p>呼び出しスコープには、コルーチンコンテキストにすでにコールIDが含まれている場合があります。デフォルトでは、プラグインは現在のコンテキストを使用してコールIDを取得し、それを<code>HttpHeaders.XRequestId</code>ヘッダーを使用して特定のコールのコンテキストに追加します。</p><p>さらに、スコープにコールIDがない場合、<a href="#configure">プラグインを構成</a>して新しいコールIDを生成し、適用することができます。</p><blockquote><p>サーバー側では、Ktorはクライアントリクエストのトレースに<a href="./server-call-id">CallId</a>プラグインを提供します。</p></blockquote><h2 id="add_dependencies" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係の追加 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>CallId</code>を使用するには、ビルドスクリプトに<code>ktor-client-call-id</code>アーティファクトを含める必要があります: </p>',6)),s(d,{group:"languages"},{default:e(()=>[s(o,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[s(n,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-call-id:$ktor_version")'})]),_:1}),s(o,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[s(n,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-call-id:$ktor_version"'})]),_:1}),s(o,{title:"Maven","group-key":"maven"},{default:e(()=>[s(n,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-call-id-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),i[15]||(i[15]=l("h2",{id:"install_plugin",tabindex:"-1"},[a("CallIdのインストール "),l("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "CallIdのインストール {id="install_plugin"}"'},"​")],-1)),l("p",null,[i[3]||(i[3]=a(" アプリケーションに")),i[4]||(i[4]=l("code",null,"CallId",-1)),i[5]||(i[5]=a("プラグインを")),i[6]||(i[6]=l("a",{href:"#install"},"インストール",-1)),i[7]||(i[7]=a("するには、指定された")),s(g,{href:"/ktor/server-modules",summary:"モジュールを使用すると、ルートをグループ化してアプリケーションを構造化できます。"},{default:e(()=>i[2]||(i[2]=[a("モジュール")])),_:1}),i[8]||(i[8]=a("の")),i[9]||(i[9]=l("code",null,"install",-1)),i[10]||(i[10]=a("関数に渡します。 以下のコードスニペットは、")),i[11]||(i[11]=l("code",null,"CallId",-1)),i[12]||(i[12]=a("をインストールする方法を示しています... "))]),s(E,null,{default:e(()=>i[13]||(i[13]=[l("li",null,[a(" ... "),l("code",null,"embeddedServer"),a("関数呼び出し内で。 ")],-1),l("li",null,[a(" ... "),l("code",null,"Application"),a("クラスの拡張関数である、明示的に定義された"),l("code",null,"module"),a("内で。 ")],-1)])),_:1}),s(d,null,{default:e(()=>[s(o,{title:"embeddedServer"},{default:e(()=>[s(n,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.client.plugins.callid.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(CallId)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),s(o,{title:"module"},{default:e(()=>[s(n,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.client.plugins.callid.*
            // ...
            fun Application.module() {
                install(CallId)
                // ...
            }`})]),_:1})]),_:1}),i[16]||(i[16]=p(`<h2 id="configure" tabindex="-1">CallIdの構成 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;CallIdの構成 {id=&quot;configure&quot;}&quot;">​</a></h2><p>CallIdプラグインの構成は、<a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-call-id/io.ktor.client.plugins.callid/-call-id-config/index.html" target="_blank" rel="noreferrer">CallIdConfig</a>クラスによって提供され、コールIDを生成してコールコンテキストに追加できます。</p><h3 id="コールidの生成" tabindex="-1">コールIDの生成 <a class="header-anchor" href="#コールidの生成" aria-label="Permalink to &quot;コールIDの生成&quot;">​</a></h3><p>特定の目的のコールIDを以下のいずれかの方法で生成します:</p><ul><li><code>useCoroutineContext</code>プロパティは、デフォルトで有効になっており、現在の<code>CoroutineContext</code>を使用してコールIDを取得するジェネレーターを追加します。この機能を無効にするには、<code>useCoroutineContext</code>を<code>false</code>に設定します:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    useCoroutineContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>Ktorサーバーでは、<a href="./server-call-id">CallIdプラグイン</a>を使用して<code>CoroutineContext</code>にコールIDを追加します。</p></blockquote><ul><li><code>generate()</code>関数は、送信リクエストのコールIDを生成できます。コールIDの生成に失敗した場合、<code>null</code>を返します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;call-id-client-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>コールIDを生成するために複数のメソッドを使用できます。この方法では、最初の非null値が適用されます。</p><h3 id="コールidの追加" tabindex="-1">コールIDの追加 <a class="header-anchor" href="#コールidの追加" aria-label="Permalink to &quot;コールIDの追加&quot;">​</a></h3><p>コールIDを取得した後、リクエストに追加するための以下のオプションが利用可能です:</p><ul><li><code>intercept()</code>関数は、<code>CallIdInterceptor</code>を使用してリクエストにコールIDを追加できます。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ClientCallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    intercept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { request, callId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId, callId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>addToHeader()</code>関数は、コールIDを指定されたヘッダーに追加します。ヘッダーをパラメータとして受け取り、デフォルトは<code>HttpHeaders.XRequestId</code>です。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addToHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="例" tabindex="-1">例 <a class="header-anchor" href="#例" aria-label="Permalink to &quot;例&quot;">​</a></h2><p>以下の例では、KtorクライアントのCallIdプラグインが、新しいコールIDを生成してヘッダーに追加するように構成されています:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;call-id-client&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addToHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>プラグインはコルーチンコンテキストを使用してコールIDを取得し、<code>generate()</code>関数を利用して新しいコールIDを生成します。最初の非nullのコールIDは、<code>addToHeader()</code>関数を使用してリクエストヘッダーに適用されます。</p><p>Ktorサーバーでは、<a href="./server-call-id">CallIdサーバープラグイン</a>の<a href="./server-call-id#retrieve"><code>retrieve</code></a>関数を使用して、ヘッダーからコールIDを取得できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    retrieveFromHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このようにして、Ktorサーバーはリクエストの指定されたヘッダーからIDを取得し、それをコールの<code>callId</code>プロパティに適用します。</p><p>完全な例については、<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-call-id" target="_blank" rel="noreferrer">client-call-id</a>を参照してください。</p>`,24))])}const x=C(I,[["render",b]]);export{T as __pageData,x as default};
