import{_ as i}from"./chunks/github.BrA_NiFJ.js";import{_ as p,C as n,c as u,o as h,G as e,w as r,j as t,a as l}from"./chunks/framework.Bksy39di.js";const w=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/api-references.md","filePath":"ko/kotlin/api-references.md","lastUpdated":1754307826000}'),c={name:"ko/kotlin/api-references.md"};function k(b,o,m,d,g,f){const a=n("list"),s=n("topic");return h(),u("div",null,[e(s,{"xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance","xsi:noNamespaceSchemaLocation":"https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd",id:"api-references",title:"API 참조"},{default:r(()=>[o[1]||(o[1]=t("p",null,"Kotlin API 참조 페이지에 오신 것을 환영합니다. 여기에서는 공식 Kotlin 라이브러리 및 도구의 API 문서 링크를 찾을 수 있습니다.",-1)),e(a,{columns:"2"},{default:r(()=>o[0]||(o[0]=[t("li",null,[t("a",{href:"https://kotlinlang.org/api/core/kotlin-stdlib/"},[t("b",null,"표준 라이브러리 (stdlib)")]),t("br"),t("p",null,"Kotlin 표준 라이브러리(stdlib)는 컬렉션, 텍스트 및 문자열 처리, 범위, 시퀀스 등 필수 API를 포함하여 Kotlin 프로그래밍을 위한 핵심 기능을 제공합니다. 이 라이브러리는 플랫폼별 API를 확장하고, 해당 API를 사용할 수 있는 Kotlin 우선 API를 제공합니다."),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/JetBrains/kotlin"},"kotlin"),t("br")],-1),t("li",null,[t("a",{href:"https://kotlinlang.org/api/core/kotlin-test/"},[t("b",null,"테스트 라이브러리 (kotlin.test)")]),t("br"),t("p",null,"공통 테스트 어노테이션 및 유틸리티 함수를 제공하는 멀티플랫폼 테스트 라이브러리입니다. 각 플랫폼의 인기 테스트 프레임워크와의 통합을 지원하며, Kotlin 생태계 전반에서 통일된 테스트 환경을 제공합니다."),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/JetBrains/kotlin"},"kotlin"),t("br")],-1),t("li",null,[t("a",{href:"https://kotlinlang.org/api/kotlinx.coroutines/"},[t("b",null,"코루틴 (kotlinx.coroutines)")]),t("br"),t("p",null,"Kotlin 코루틴을 사용하여 비동기 프로그래밍을 위한 강력한 라이브러리입니다. 구조화된 동시성, 비동기 스트림, 뮤텍스 및 세마포어와 같은 동기화 프리미티브, 테스트 등을 지원하는 도구를 제공합니다."),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/Kotlin/kotlinx.coroutines"},"kotlinx.coroutines"),t("br")],-1),t("li",null,[t("a",{href:"https://kotlinlang.org/api/kotlinx.serialization/"},[t("b",null,"직렬화 (kotlinx.serialization)")]),t("br"),t("p",null,"멀티플랫폼 직렬화 라이브러리입니다. Kotlin 객체를 JSON, CBOR, Protocol Buffers와 같은 다양한 형식으로 변환하는 타입 안정적이고 컴파일 시점 메커니즘을 제공합니다."),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/Kotlin/kotlinx.serialization"},"kotlinx.serialization"),t("br")],-1),t("li",null,[t("a",{href:"https://kotlinlang.org/api/kotlinx-io/"},[t("b",null,"Kotlin I/O 라이브러리 (kotlinx-io)")]),t("br"),t("p",null,"저수준 I/O 작업을 위한 멀티플랫폼 라이브러리입니다. 모든 Kotlin 플랫폼에서 효율적이고 이식 가능하도록 설계된 바이너리 스트림 및 버퍼에서 읽고 쓰는 추상화를 정의합니다."),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/Kotlin/kotlinx-io"},"kotlinx-io"),t("br")],-1),t("li",null,[t("a",{href:"https://kotlinlang.org/api/kotlinx-datetime/"},[t("b",null,"날짜 및 시간 (kotlinx-datetime)")]),t("br"),t("p",null,"달력 기반 계산을 위한 멀티플랫폼 라이브러리입니다. 날짜 값의 표현을 제공하며 시간대별 작업을 지원합니다."),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/Kotlin/kotlinx-datetime"},"kotlinx-datetime"),t("br")],-1),t("li",null,[t("a",{href:"https://kotlinlang.org/api/kotlinx-metadata-jvm/"},[t("b",null,"JVM 메타데이터 (kotlin-metadata-jvm)")]),t("br"),t("p",null,"JVM 클래스 파일에 저장된 Kotlin 메타데이터를 읽고 쓰는 라이브러리입니다. 주로 어노테이션 프로세서, 정적 분석기, 컴파일러 플러그인과 같은 도구에서 사용됩니다."),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/JetBrains/kotlin/tree/master/libraries/kotlinx-metadata"},"kotlinx-metadata"),t("br")],-1),t("li",null,[t("a",{href:"https://kotlinlang.org/api/kotlin-gradle-plugin/"},[t("b",null,"Kotlin Gradle 플러그인 (kotlin-gradle-plugin)")]),t("br"),t("p",null,"Kotlin 코드 컴파일, 테스트 및 패키징을 위한 Kotlin Gradle 플러그인입니다. 이 플러그인은 JVM 및 멀티플랫폼 빌드를 간소화하고, 종속성을 관리하며, IDE 및 CI 시스템과 통합됩니다."),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/JetBrains/kotlin/tree/master/libraries/tools/kotlin-gradle-plugin"},"kotlin-gradle-plugin"),t("br")],-1),t("li",null,[t("a",{href:"https://api.ktor.io/"},[t("b",null,"Ktor")]),t("br"),t("p",null,"Kotlin을 사용하여 연결된 시스템에서 비동기 클라이언트 및 서버를 구축하기 위한 프레임워크입니다. Ktor는 확장성과 유연성을 위해 설계되었으며, 논블로킹 I/O 및 구조화된 동시성을 위해 코루틴과 깊이 통합되어 있습니다."),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/ktorio/ktor"},"ktor"),t("br")],-1)])),_:1})]),_:1})])}const _=p(c,[["render",k]]);export{w as __pageData,_ as default};
