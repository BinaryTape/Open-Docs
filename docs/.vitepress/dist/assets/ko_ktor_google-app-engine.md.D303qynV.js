import{_ as d,C as n,c as k,o as g,j as a,G as e,ag as c,a as i,w as p}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/google-app-engine.md","filePath":"ko/ktor/google-app-engine.md","lastUpdated":1755457140000}'),E={name:"ko/ktor/google-app-engine.md"};function u(y,s,m,F,b,C){const l=n("show-structure"),t=n("control"),o=n("tldr"),h=n("web-summary"),r=n("link-summary");return g(),k("div",null,[s[8]||(s[8]=a("h1",{id:"google-app-engine",tabindex:"-1"},[i("Google App Engine "),a("a",{class:"header-anchor",href:"#google-app-engine","aria-label":'Permalink to "Google App Engine"'},"​")],-1)),e(l,{for:"chapter",depth:"2"}),e(o,null,{default:p(()=>[a("p",null,[e(t,null,{default:p(()=>s[0]||(s[0]=[i("초기 프로젝트")])),_:1}),s[1]||(s[1]=i(": ")),s[2]||(s[2]=a("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main"},"engine-main",-1))]),a("p",null,[e(t,null,{default:p(()=>s[3]||(s[3]=[i("최종 프로젝트")])),_:1}),s[4]||(s[4]=i(": ")),s[5]||(s[5]=a("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/google-appengine-standard"},"google-appengine-standard",-1))])]),_:1}),e(h,null,{default:p(()=>s[6]||(s[6]=[i(" 이 튜토리얼에서는 Ktor 프로젝트를 Google App Engine 표준 환경에 준비하고 배포하는 방법을 보여줍니다. ")])),_:1}),e(r,null,{default:p(()=>s[7]||(s[7]=[i(" Google App Engine 표준 환경에 프로젝트를 배포하는 방법을 알아보세요. ")])),_:1}),s[9]||(s[9]=c(`<p>이 튜토리얼에서는 Ktor 프로젝트를 Google App Engine 표준 환경에 준비하고 배포하는 방법을 보여줍니다. 이 튜토리얼은 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">engine-main</a> 샘플 프로젝트를 시작 프로젝트로 사용합니다.</p><h2 id="prerequisites" tabindex="-1">사전 준비 <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;사전 준비 {id=&quot;prerequisites&quot;}&quot;">​</a></h2><p>이 튜토리얼을 시작하기 전에 다음 단계를 수행해야 합니다:</p><ul><li><a href="https://console.cloud.google.com/" target="_blank" rel="noreferrer">Google Cloud Platform</a>에 등록합니다.</li><li><a href="https://cloud.google.com/sdk/docs/install" target="_blank" rel="noreferrer">Google Cloud SDK</a>를 설치하고 초기화합니다.</li><li>다음 명령어를 사용하여 Java용 App Engine 확장을 설치합니다:<div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcloud</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> components</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app-engine-java</span></span></code></pre></div></li></ul><h2 id="clone" tabindex="-1">샘플 애플리케이션 클론 <a class="header-anchor" href="#clone" aria-label="Permalink to &quot;샘플 애플리케이션 클론 {id=&quot;clone&quot;}&quot;">​</a></h2><p>샘플 애플리케이션을 열려면 다음 단계를 따르세요:</p><ol><li>Ktor 문서 저장소를 클론하고 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets" target="_blank" rel="noreferrer">codeSnippets</a> 프로젝트를 엽니다.</li><li><a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">engine-main</a> 모듈을 엽니다. <blockquote><p>Ktor는 <a href="./server-create-and-configure">서버를 생성하고 구성하는</a> 두 가지 접근 방식을 제공합니다: 코드 내에서 또는 구성 파일을 사용하여. 이 튜토리얼에서는 두 접근 방식 모두 배포 프로세스가 동일합니다.</p></blockquote></li></ol><h2 id="prepare-app" tabindex="-1">애플리케이션 준비 <a class="header-anchor" href="#prepare-app" aria-label="Permalink to &quot;애플리케이션 준비 {id=&quot;prepare-app&quot;}&quot;">​</a></h2><h3 id="configure-shadow-plugin" tabindex="-1">1단계: Shadow 플러그인 적용 <a class="header-anchor" href="#configure-shadow-plugin" aria-label="Permalink to &quot;1단계: Shadow 플러그인 적용 {id=&quot;configure-shadow-plugin&quot;}&quot;">​</a></h3><p>이 튜토리얼은 <a href="./server-fatjar">fat JAR</a>를 사용하여 애플리케이션을 Google App Engine에 배포하는 방법을 보여줍니다. fat JAR를 생성하려면 Shadow 플러그인을 적용해야 합니다. <code>build.gradle.kts</code> 파일을 열고 <code>plugins</code> 블록에 플러그인을 추가하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.gradleup.shadow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8.3.9&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="configure-app-engine-plugin" tabindex="-1">2단계: App Engine 플러그인 구성 <a class="header-anchor" href="#configure-app-engine-plugin" aria-label="Permalink to &quot;2단계: App Engine 플러그인 구성 {id=&quot;configure-app-engine-plugin&quot;}&quot;">​</a></h3><p><a href="https://github.com/GoogleCloudPlatform/app-gradle-plugin" target="_blank" rel="noreferrer">Google App Engine Gradle 플러그인</a>은 Google App Engine 애플리케이션을 빌드하고 배포하는 태스크를 제공합니다. 이 플러그인을 사용하려면 다음 단계를 따르세요:</p><ol><li><p><code>settings.gradle.kts</code> 파일을 열고 중앙 Maven 저장소에서 플러그인을 참조하기 위해 다음 코드를 삽입합니다:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pluginManagement {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    repositories {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gradlePluginPortal()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mavenCentral()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        maven(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://maven.pkg.jetbrains.space/public/p/ktor/eap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    resolutionStrategy {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        eachPlugin {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (requested</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">startsWith(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.cloud.tools.appengine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                useModule(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.cloud.tools:appengine-gradle-plugin:\${requested.version}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>build.gradle.kts</code>를 열고 <code>plugins</code> 블록에 플러그인을 적용합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.cloud.tools.appengine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.8.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>build.gradle.kts</code> 파일에 다음 설정과 함께 <code>appengine</code> 블록을 추가합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.google.cloud.tools.gradle.appengine.appyaml.AppEngineAppYamlExtension</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AppEngineAppYamlExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setArtifact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build/libs/\${project.name}-all.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;GCLOUD_CONFIG&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        projectId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;GCLOUD_CONFIG&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h3 id="configure-app-engine-settings" tabindex="-1">3단계: App Engine 설정 구성 <a class="header-anchor" href="#configure-app-engine-settings" aria-label="Permalink to &quot;3단계: App Engine 설정 구성 {id=&quot;configure-app-engine-settings&quot;}&quot;">​</a></h3><p><a href="https://cloud.google.com/appengine/docs/standard/python/config/appref" target="_blank" rel="noreferrer">app.yaml</a> 파일에서 애플리케이션의 App Engine 설정을 구성합니다:</p><ol><li><p><code>src/main</code> 내부에 <code>appengine</code> 디렉터리를 생성합니다.</p></li><li><p>이 디렉터리 안에 <code>app.yaml</code> 파일을 생성하고 다음 내용을 추가합니다 (<code>google-appengine-standard</code>를 프로젝트 이름으로 바꾸세요):</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">runtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">java21</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">entrypoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;java -jar google-appengine-standard-all.jar&#39;</span></span></code></pre></div><p><code>entrypoint</code> 옵션에는 애플리케이션용으로 생성된 fat JAR를 실행하는 데 사용되는 명령어가 포함되어 있습니다.</p><p>지원되는 구성 옵션에 대한 추가 문서는 <a href="https://cloud.google.com/appengine/docs/standard/reference/app-yaml?tab=java" target="_blank" rel="noreferrer">Google App Engine 문서</a>에서 찾을 수 있습니다.</p></li></ol><h2 id="deploy-app" tabindex="-1">애플리케이션 배포 <a class="header-anchor" href="#deploy-app" aria-label="Permalink to &quot;애플리케이션 배포 {id=&quot;deploy-app&quot;}&quot;">​</a></h2><p>애플리케이션을 배포하려면 터미널을 열고 다음 단계를 따르세요:</p><ol><li><p>먼저 애플리케이션 리소스를 담는 최상위 컨테이너인 Google Cloud 프로젝트를 생성합니다. 예를 들어, 아래 명령은 <code>ktor-sample-app-engine</code> 이름을 가진 프로젝트를 생성합니다:</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcloud</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> projects</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ktor-sample-app-engine</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set-as-default</span></span></code></pre></div></li><li><p>Cloud 프로젝트용 App Engine 애플리케이션을 생성합니다:</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcloud</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span></span></code></pre></div></li><li><p>애플리케이션을 배포하려면 <code>appengineDeploy</code> Gradle 태스크를 실행하고...</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> appengineDeploy</span></span></code></pre></div><p>... Google Cloud가 애플리케이션을 빌드하고 게시할 때까지 기다립니다:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>...done.</span></span>
<span class="line"><span>Deployed service [default] to [https://ktor-sample-app-engine.ew.r.appspot.com]</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>빌드 중 <code>Cloud Build has not been used in project</code> 오류가 발생하면, 오류 보고서의 지침을 사용하여 활성화하세요.</p></div></li></ol><p>완성된 예시는 다음에서 찾을 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/google-appengine-standard" target="_blank" rel="noreferrer">google-appengine-standard</a>.</p>`,21))])}const q=d(E,[["render",u]]);export{f as __pageData,q as default};
