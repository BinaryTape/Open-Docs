import{_ as e,C as n,c as l,o as p,j as s,G as h,ag as o,a,w as r}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-basic-auth.md","filePath":"ko/ktor/client-basic-auth.md","lastUpdated":1755457140000}'),k={name:"ko/ktor/client-basic-auth.md"};function c(d,i,u,E,g,b){const t=n("tldr");return p(),l("div",null,[i[1]||(i[1]=s("h1",{id:"ktor-클라이언트의-기본-인증",tabindex:"-1"},[a("Ktor 클라이언트의 기본 인증 "),s("a",{class:"header-anchor",href:"#ktor-클라이언트의-기본-인증","aria-label":'Permalink to "Ktor 클라이언트의 기본 인증"'},"​")],-1)),h(t,null,{default:r(()=>i[0]||(i[0]=[s("p",null,[s("b",null,"필수 의존성"),a(": "),s("code",null,"io.ktor:ktor-client-auth")],-1),s("p",null,[s("b",null,"코드 예시"),a(": "),s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-auth-basic"}," client-auth-basic ")],-1)])),_:1}),i[2]||(i[2]=o(`<p>기본 <a href="./client-auth">인증 체계</a>는 사용자 로그인에 사용될 수 있습니다. 이 체계에서 사용자 자격 증명은 Base64로 인코딩된 사용자 이름/비밀번호 쌍으로 전송됩니다.</p><blockquote><p>서버 측에서 Ktor는 기본 인증 처리를 위한 <a href="./server-basic-auth">Authentication</a> 플러그인을 제공합니다.</p></blockquote><h2 id="flow" tabindex="-1">기본 인증 흐름 <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;기본 인증 흐름 {id=&quot;flow&quot;}&quot;">​</a></h2><p>기본 인증 흐름은 다음과 같습니다:</p><ol><li><p>클라이언트는 서버 애플리케이션의 특정 리소스에 <code>Authorization</code> 헤더 없이 요청을 보냅니다.</p></li><li><p>서버는 클라이언트에 <code>401</code> (Unauthorized) 응답 상태로 응답하고, <code>WWW-Authenticate</code> 응답 헤더를 사용하여 기본 인증 체계가 경로를 보호하는 데 사용됨을 알려줍니다. 일반적인 <code>WWW-Authenticate</code> 헤더는 다음과 같습니다:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>WWW-Authenticate: Basic realm=&quot;Access to the &#39;/&#39; path&quot;, charset=&quot;UTF-8&quot;</span></span></code></pre></div><p>Ktor 클라이언트는 <code>sendWithoutRequest</code> <a href="#configure">함수</a>를 사용하여 <code>WWW-Authenticate</code> 헤더를 기다리지 않고 자격 증명을 보낼 수 있도록 합니다.</p></li><li><p>일반적으로 클라이언트는 사용자가 자격 증명을 입력할 수 있는 로그인 대화 상자를 표시합니다. 그런 다음 클라이언트는 Base64로 인코딩된 사용자 이름과 비밀번호 쌍을 포함하는 <code>Authorization</code> 헤더와 함께 요청을 보냅니다. 예시:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Authorization: Basic amV0YnJhaW5zOmZvb2Jhcg</span></span></code></pre></div></li><li><p>서버는 클라이언트가 보낸 자격 증명을 검증하고 요청된 콘텐츠로 응답합니다.</p></li></ol><h2 id="configure" tabindex="-1">기본 인증 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;기본 인증 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><p><code>Basic</code> 체계를 사용하여 <code>Authorization</code> 헤더에 사용자 자격 증명을 보내려면 <code>basic</code> 인증 공급자를 다음과 같이 구성해야 합니다:</p><ol><li><p><code>install</code> 블록 내에서 <a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/basic.html" target="_blank" rel="noreferrer">basic</a> 함수를 호출합니다.</p></li><li><p><a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/-basic-auth-credentials/index.html" target="_blank" rel="noreferrer">BasicAuthCredentials</a>를 사용하여 필요한 자격 증명을 제공하고 이 객체를 <a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/-basic-auth-config/credentials.html" target="_blank" rel="noreferrer">credentials</a> 함수에 전달합니다.</p></li><li><p><code>realm</code> 속성을 사용하여 렐름(realm)을 구성합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            credentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                BasicAuthCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jetbrains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>선택적으로 <code>WWW-Authenticate</code> 헤더와 함께 <code>401</code> (Unauthorized) 응답을 기다리지 않고 초기 요청에서 자격 증명을 보내도록 설정할 수 있습니다. <code>sendWithoutRequest</code> 함수(boolean 반환)를 호출하고 요청 매개변수를 확인해야 합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        sendWithoutRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            request.url.host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0.0.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><blockquote><p>전체 예시는 여기에서 찾을 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-auth-basic" target="_blank" rel="noreferrer">client-auth-basic</a>.</p></blockquote>`,9))])}const F=e(k,[["render",c]]);export{m as __pageData,F as default};
