import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"等価性","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/equality.md","filePath":"ja/kotlin/equality.md","lastUpdated":1754307826000}'),e={name:"ja/kotlin/equality.md"};function t(h,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="等価性" tabindex="-1">等価性 <a class="header-anchor" href="#等価性" aria-label="Permalink to &quot;等価性&quot;">​</a></h1><p>Kotlinには、2種類の等価性があります:</p><ul><li>_構造的_等価性 (<code>==</code>) - <code>equals()</code>関数のチェック</li><li>_参照_等価性 (<code>===</code>) - 2つの参照が同じオブジェクトを指しているかどうかのチェック</li></ul><h2 id="構造的等価性" tabindex="-1">構造的等価性 <a class="header-anchor" href="#構造的等価性" aria-label="Permalink to &quot;構造的等価性&quot;">​</a></h2><p>構造的等価性は、2つのオブジェクトが同じ内容または構造を持っているかどうかを検証します。構造的等価性は、<code>==</code>演算子とその否定の<code>!=</code>によってチェックされます。 慣例として、<code>a == b</code>のような式は次のように翻訳されます:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b) ?: (b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>a</code>が<code>null</code>でない場合、<code>equals(Any?)</code>関数を呼び出します。それ以外の場合（<code>a</code>が<code>null</code>の場合）は、<code>b</code>が参照的に<code>null</code>と等しいかどうかをチェックします:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>null</code>と比較する場合、コードを明示的に最適化する意味がないことに注意してください: <code>a == null</code>は自動的に<code>a === null</code>に変換されます。</p><p>Kotlinでは、<code>equals()</code>関数はすべてのクラスが<code>Any</code>クラスから継承します。デフォルトでは、<code>equals()</code>関数は<a href="#referential-equality">参照等価性</a>を実装します。しかし、Kotlinのクラスは<code>equals()</code>関数をオーバーライドしてカスタムの等価性ロジックを提供し、このようにして構造的等価性を実装できます。</p><p>値クラス (Value classes) とデータクラス (data classes) は、<code>equals()</code>関数を自動的にオーバーライドする2つの特定のKotlin型です。そのため、デフォルトで構造的等価性を実装します。</p><p>ただし、データクラスの場合、親クラスで<code>equals()</code>関数が<code>final</code>とマークされている場合、その動作は変更されません。</p><p>明確に、非データクラス（<code>data</code>修飾子で宣言されていないクラス）は、デフォルトでは<code>equals()</code>関数をオーバーライドしません。代わりに、非データクラスは<code>Any</code>クラスから継承された参照等価性の動作を実装します。構造的等価性を実装するには、非データクラスは<code>equals()</code>関数をオーバーライドするためのカスタム等価性ロジックを必要とします。</p><p>カスタムの等価性チェック実装を提供するには、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/equals.html" target="_blank" rel="noreferrer"><code>equals(other: Any?): Boolean</code></a>関数をオーバーライドします:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(other: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> other) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (other </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Point) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 構造的等価性のためにプロパティを比較</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> other.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> other.y</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>equals()</code>関数をオーバーライドする際は、等価性とハッシュ化の整合性を保ち、これらの関数の適切な動作を保証するために、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/hash-code.html" target="_blank" rel="noreferrer">hashCode()関数</a>もオーバーライドする必要があります。</p></div><p>同じ名前で異なるシグネチャ（例: <code>equals(other: Foo)</code>) を持つ関数は、<code>==</code>および<code>!=</code>演算子による等価性チェックには影響しません。</p><p>構造的等価性は、<code>Comparable&lt;...&gt;</code>インターフェースによって定義される比較とは関係ないため、カスタムの<code>equals(Any?)</code>実装のみが演算子の動作に影響を与える可能性があります。</p><h2 id="参照等価性" tabindex="-1">参照等価性 <a class="header-anchor" href="#参照等価性" aria-label="Permalink to &quot;参照等価性&quot;">​</a></h2><p>参照等価性は、2つのオブジェクトのメモリ上のアドレスを検証し、それらが同じインスタンスであるかどうかを判断します。</p><p>参照等価性は、<code>===</code>演算子とその否定の<code>!==</code>によってチェックされます。<code>a === b</code>は、<code>a</code>と<code>b</code>が同じオブジェクトを指している場合にのみtrueと評価されます:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;world&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;world&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ランタイムでプリミティブ型（例: <code>Int</code>）によって表現される値の場合、<code>===</code>等価性チェックは<code>==</code>チェックと同等です。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin/JSでは、参照等価性の実装が異なります。等価性に関する詳細については、<a href="/ja/kotlin/js-interop#equality">Kotlin/JS</a>ドキュメントを参照してください。</p></div><h2 id="浮動小数点数の等価性" tabindex="-1">浮動小数点数の等価性 <a class="header-anchor" href="#浮動小数点数の等価性" aria-label="Permalink to &quot;浮動小数点数の等価性&quot;">​</a></h2><p>等価性チェックのオペランドが静的に<code>Float</code>または<code>Double</code>（null許容かどうかにかかわらず）であることが判明している場合、そのチェックは<a href="https://en.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noreferrer">IEEE 754 浮動小数点算術標準</a>に従います。</p><p>オペランドが静的に浮動小数点数として型付けされていない場合、動作は異なります。これらのケースでは、構造的等価性が実装されます。結果として、静的に浮動小数点数として型付けされていないオペランドでのチェックは、IEEE標準とは異なります。このシナリオでは:</p><ul><li><code>NaN</code>はそれ自身と等しい</li><li><code>NaN</code>は他のどの要素（<code>POSITIVE_INFINITY</code>を含む）よりも大きい</li><li><code>-0.0</code>は<code>0.0</code>と等しくない</li></ul><p>詳細については、<a href="/ja/kotlin/numbers#floating-point-numbers-comparison">浮動小数点数の比較</a>を参照してください。</p><h2 id="配列の等価性" tabindex="-1">配列の等価性 <a class="header-anchor" href="#配列の等価性" aria-label="Permalink to &quot;配列の等価性&quot;">​</a></h2><p>2つの配列が同じ要素を同じ順序で持っているかどうかを比較するには、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/content-equals.html" target="_blank" rel="noreferrer"><code>contentEquals()</code></a>を使用します。</p><p>詳細については、<a href="/ja/kotlin/arrays#compare-arrays">配列の比較</a>を参照してください。</p>`,32)]))}const E=i(e,[["render",t]]);export{c as __pageData,E as default};
