import{_ as y,C as n,c,o as u,G as t,j as i,ag as F,w as l,a}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-velocity.md","filePath":"ko/ktor/server-velocity.md","lastUpdated":1755457140000}'),v={name:"ko/ktor/server-velocity.md"};function m(C,s,b,f,B,q){const h=n("TopicTitle"),r=n("show-structure"),d=n("primary-label"),k=n("Links"),E=n("tldr"),e=n("code-block"),p=n("TabItem"),o=n("Tabs"),g=n("list");return u(),c("div",null,[t(h,{labelRef:"server-plugin",title:"Velocity"}),t(r,{for:"chapter",depth:"2"}),t(d,{ref:"server-plugin"},null,512),t(E,null,{default:l(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"필수 의존성"),a(": "),i("code",null,"io.ktor:ktor-server-velocity")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"코드 예시"),a(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/velocity"}," velocity ")],-1)),i("p",null,[i("b",null,[t(k,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임 또는 가상 머신 없이 서버를 실행할 수 있습니다."},{default:l(()=>s[0]||(s[0]=[a("네이티브 서버")])),_:1}),s[1]||(s[1]=a(" 지원"))]),s[2]||(s[2]=a(": ✖️ "))])]),_:1}),s[17]||(s[17]=i("p",null,[a("Ktor를 사용하면 "),i("a",{href:"https://velocity.apache.org/engine/",target:"_blank",rel:"noreferrer"},"Velocity 템플릿"),a("을 애플리케이션 내에서 뷰로 사용할 수 있습니다. 이를 위해 "),i("a",{href:"https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-velocity/io.ktor.server.velocity/-velocity",target:"_blank",rel:"noreferrer"},"Velocity"),a(" 플러그인을 설치하면 됩니다.")],-1)),s[18]||(s[18]=i("h2",{id:"add_dependencies",tabindex:"-1"},[a("의존성 추가 "),i("a",{class:"header-anchor",href:"#add_dependencies","aria-label":'Permalink to "의존성 추가 {id="add_dependencies"}"'},"​")],-1)),s[19]||(s[19]=i("p",null,[i("code",null,"Velocity"),a("을(를) 사용하려면 빌드 스크립트에 "),i("code",null,"ktor-server-velocity"),a(" 아티팩트를 포함해야 합니다: ")],-1)),t(o,{group:"languages"},{default:l(()=>[t(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:l(()=>[t(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-velocity:$ktor_version")'})]),_:1}),t(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:l(()=>[t(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-velocity:$ktor_version"'})]),_:1}),t(p,{title:"Maven","group-key":"maven"},{default:l(()=>[t(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-velocity-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[20]||(s[20]=i("h2",{id:"install_plugin",tabindex:"-1"},[a("Velocity 설치 "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "Velocity 설치 {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[6]||(s[6]=a(" 애플리케이션에 ")),s[7]||(s[7]=i("code",null,"Velocity",-1)),s[8]||(s[8]=a(" 플러그인을 ")),s[9]||(s[9]=i("a",{href:"#install"},"설치",-1)),s[10]||(s[10]=a("하려면, 지정된 ")),t(k,{href:"/ktor/server-modules",summary:"모듈을 사용하면 경로를 그룹화하여 애플리케이션을 구조화할 수 있습니다."},{default:l(()=>s[5]||(s[5]=[a("모듈")])),_:1}),s[11]||(s[11]=a("에서 ")),s[12]||(s[12]=i("code",null,"install",-1)),s[13]||(s[13]=a(" 함수에 전달합니다. 아래 코드 스니펫은 ")),s[14]||(s[14]=i("code",null,"Velocity",-1)),s[15]||(s[15]=a("을(를) 설치하는 방법을 보여줍니다... "))]),t(g,null,{default:l(()=>s[16]||(s[16]=[i("li",null,[a(" ... "),i("code",null,"embeddedServer"),a(" 함수 호출 내에서. ")],-1),i("li",null,[a(" ... "),i("code",null,"Application"),a(" 클래스의 확장 함수인 명시적으로 정의된 "),i("code",null,"module"),a(" 내에서. ")],-1)])),_:1}),t(o,null,{default:l(()=>[t(p,{title:"embeddedServer"},{default:l(()=>[t(e,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.velocity.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(Velocity)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),t(p,{title:"module"},{default:l(()=>[t(e,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.velocity.*
            // ...
            fun Application.module() {
                install(Velocity)
                // ...
            }`})]),_:1})]),_:1}),s[21]||(s[21]=F(`<p>선택적으로, 표준 및 커스텀 <a href="#velocity_tools">Velocity 도구</a>를 추가하는 기능을 사용하려면 <code>VelocityTools</code> 플러그인을 설치할 수 있습니다.</p><h2 id="configure" tabindex="-1">Velocity 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;Velocity 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><h3 id="template_loading" tabindex="-1">템플릿 로드 구성 <a class="header-anchor" href="#template_loading" aria-label="Permalink to &quot;템플릿 로드 구성 {id=&quot;template_loading&quot;}&quot;">​</a></h3><p><code>install</code> 블록 내에서 <a href="https://velocity.apache.org/engine/devel/apidocs/org/apache/velocity/app/VelocityEngine.html" target="_blank" rel="noreferrer">VelocityEngine</a>을(를) 구성할 수 있습니다. 예를 들어, 클래스패스에서 템플릿을 사용하려면 <code>classpath</code>용 리소스 로더를 사용하십시오:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.velocity.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.apache.velocity.runtime.RuntimeConstants</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Velocity) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RuntimeConstants.RESOURCE_LOADER, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;classpath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;classpath.resource.loader.class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ClasspathResourceLoader::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="use_template" tabindex="-1">응답으로 템플릿 전송 <a class="header-anchor" href="#use_template" aria-label="Permalink to &quot;응답으로 템플릿 전송 {id=&quot;use_template&quot;}&quot;">​</a></h3><p><code>resources/templates</code>에 <code>index.vl</code> 템플릿이 있다고 가정해 봅시다:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, $user.name&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>사용자 데이터 모델은 다음과 같습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>지정된 <a href="./server-routing">경로</a>에 템플릿을 사용하려면, <code>call.respond</code> 메서드에 <code>VelocityContent</code>를 다음과 같이 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampleUser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VelocityContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;templates/index.vl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to sampleUser)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="velocity_tools" tabindex="-1">Velocity 도구 추가 <a class="header-anchor" href="#velocity_tools" aria-label="Permalink to &quot;Velocity 도구 추가 {id=&quot;velocity_tools&quot;}&quot;">​</a></h3><p><code>VelocityTools</code> 플러그인을 <a href="#install_plugin">설치</a>했다면, <code>install</code> 블록 내에서 <code>EasyFactoryConfiguration</code> 인스턴스에 접근하여 표준 및 커스텀 Velocity 도구를 추가할 수 있습니다. 예를 들면 다음과 같습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(VelocityTools) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Engine configuration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resource.loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resource.loader.string.name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myRepo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resource.loader.string.class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, StringResourceLoader::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java.name)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resource.loader.string.repository.name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myRepo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addDefaultTools</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Add a default tool</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MyCustomTool::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Add a custom tool</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,15))])}const V=y(v,[["render",m]]);export{A as __pageData,V as default};
