import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"可見性修飾符","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/visibility-modifiers.md","filePath":"zh-Hant/kotlin/visibility-modifiers.md","lastUpdated":1754307826000}'),t={name:"zh-Hant/kotlin/visibility-modifiers.md"};function p(e,s,h,k,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="可見性修飾符" tabindex="-1">可見性修飾符 <a class="header-anchor" href="#可見性修飾符" aria-label="Permalink to &quot;可見性修飾符&quot;">​</a></h1><p>類別、物件、介面、建構函式和函式，以及屬性及其設定器，都可以擁有<em>可見性修飾符</em>。 取得器的可見性始終與其屬性相同。</p><p>Kotlin 中有四種可見性修飾符：<code>private</code>、<code>protected</code>、<code>internal</code> 和 <code>public</code>。 預設可見性為 <code>public</code>。</p><p>在本頁中，您將了解這些修飾符如何應用於不同類型的宣告範圍。</p><h2 id="套件" tabindex="-1">套件 <a class="header-anchor" href="#套件" aria-label="Permalink to &quot;套件&quot;">​</a></h2><p>函式、屬性、類別、物件和介面可以直接在套件內部「頂層」宣告：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file name: example.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span></code></pre></div><ul><li>如果您不使用可見性修飾符，則預設使用 <code>public</code>，這表示您的宣告將隨處可見。</li><li>如果您將宣告標記為 <code>private</code>，則它僅在包含該宣告的檔案內部可見。</li><li>如果您將其標記為 <code>internal</code>，則它將在同一個 <a href="#modules">模組</a> 內隨處可見。</li><li><code>protected</code> 修飾符不適用於頂層宣告。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>若要從其他套件使用可見的頂層宣告，您應該 <a href="/zh-Hant/kotlin/packages#imports">匯入</a> 它。</p></div><p>範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file name: example.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 僅在 example.kt 內部可見</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 屬性隨處可見</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 設定器僅在 example.kt 內部可見</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在同一個模組內部可見</span></span></code></pre></div><h2 id="類別成員" tabindex="-1">類別成員 <a class="header-anchor" href="#類別成員" aria-label="Permalink to &quot;類別成員&quot;">​</a></h2><p>對於在類別內部宣告的成員：</p><ul><li><code>private</code> 表示該成員僅在此類別內部可見（包括其所有成員）。</li><li><code>protected</code> 表示該成員與標記為 <code>private</code> 的成員具有相同的可見性，但它在子類別中也具可見性。</li><li><code>internal</code> 表示<em>該模組內部</em>的任何看到宣告類別的用戶端都能看到其 <code>internal</code> 成員。</li><li><code>public</code> 表示任何看到宣告類別的用戶端都能看到其 <code>public</code> 成員。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在 Kotlin 中，外部類別無法看到其內部類別的私有成員。</p></div><p>如果您覆寫 <code>protected</code> 或 <code>internal</code> 成員且未明確指定可見性，則覆寫成員也將具有與原始成員相同的可見性。</p><p>範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 預設為 public</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Nested</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Subclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // a 不可見</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // b、c 和 d 可見</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Nested 和 e 可見</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // &#39;b&#39; 是 protected</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // &#39;c&#39; 是 internal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Unrelated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // o.a、o.b 不可見</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // o.c 和 o.d 可見 (同一個模組)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Outer.Nested 不可見，Nested::e 也不可見</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="建構函式" tabindex="-1">建構函式 <a class="header-anchor" href="#建構函式" aria-label="Permalink to &quot;建構函式&quot;">​</a></h3><p>使用以下語法指定類別主要建構函式的可見性：</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您需要新增一個明確的 <code>constructor</code> 關鍵字。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span></code></pre></div><p>此處建構函式為 <code>private</code>。預設情況下，所有建構函式都是 <code>public</code>，這實際上意味著它們在類別可見的任何地方都可見（這表示 <code>internal</code> 類別的建構函式僅在同一個模組內部可見）。</p><p>對於密封類別，建構函式預設為 <code>protected</code>。更多資訊請參閱 <a href="/zh-Hant/kotlin/sealed-classes#constructors">密封類別</a>。</p><h3 id="局部宣告" tabindex="-1">局部宣告 <a class="header-anchor" href="#局部宣告" aria-label="Permalink to &quot;局部宣告&quot;">​</a></h3><p>局部變數、函式和類別不能擁有可見性修飾符。</p><h2 id="模組" tabindex="-1">模組 <a class="header-anchor" href="#模組" aria-label="Permalink to &quot;模組&quot;">​</a></h2><p><code>internal</code> 可見性修飾符表示成員在同一個模組內部可見。更具體地說，模組是一組一起編譯的 Kotlin 檔案，例如：</p><ul><li>一個 IntelliJ IDEA 模組。</li><li>一個 Maven 專案。</li><li>一個 Gradle 來源集（例外是 <code>test</code> 來源集可以存取 <code>main</code> 的內部宣告）。</li><li>一組使用一次 <code>&lt;kotlinc&gt;</code> Ant 任務呼叫編譯的檔案。</li></ul>`,29)]))}const g=i(t,[["render",p]]);export{o as __pageData,g as default};
