import{_ as d,C as r,c as p,o as g,j as t,G as o,ag as u,a as e,w as l}from"./chunks/framework.Bksy39di.js";const G=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/graalvm.md","filePath":"ko/ktor/graalvm.md","lastUpdated":1755457140000}'),h={name:"ko/ktor/graalvm.md"};function c(f,a,k,b,v,_){const n=r("control"),i=r("tldr"),s=r("web-summary"),m=r("link-summary");return g(),p("div",null,[a[5]||(a[5]=t("h1",{id:"graalvm",tabindex:"-1"},[e("GraalVM "),t("a",{class:"header-anchor",href:"#graalvm","aria-label":'Permalink to "GraalVM"'},"​")],-1)),o(i,null,{default:l(()=>[t("p",null,[o(n,null,{default:l(()=>a[0]||(a[0]=[e("샘플 프로젝트")])),_:1}),a[1]||(a[1]=e(": ")),a[2]||(a[2]=t("a",{href:"https://github.com/ktorio/ktor-samples/tree/main/graalvm"},"graalvm",-1))])]),_:1}),o(s,null,{default:l(()=>a[3]||(a[3]=[e(" Ktor 서버 애플리케이션은 다양한 플랫폼을 위한 네이티브 이미지를 만들기 위해 GraalVM을 활용할 수 있습니다. ")])),_:1}),o(m,null,{default:l(()=>a[4]||(a[4]=[e(" 다양한 플랫폼에서 네이티브 이미지를 위해 GraalVM을 사용하는 방법을 알아보세요. ")])),_:1}),a[6]||(a[6]=u('<p>Ktor 서버 애플리케이션은 다양한 플랫폼을 위한 네이티브 이미지를 만들기 위해 <a href="https://graalvm.org" target="_blank" rel="noreferrer">GraalVM</a>을 활용할 수 있으며, 물론 GraalVM이 제공하는 더 빠른 시작 시간과 기타 이점을 활용할 수 있습니다.</p><p>현재 GraalVM을 활용하려는 Ktor 서버 애플리케이션은 <a href="./server-engines">애플리케이션 엔진</a>으로 CIO를 사용해야 합니다.</p><h2 id="graalvm-준비" tabindex="-1">GraalVM 준비 <a class="header-anchor" href="#graalvm-준비" aria-label="Permalink to &quot;GraalVM 준비&quot;">​</a></h2><p>GraalVM을 설치하고 설치 디렉터리를 시스템 경로에 추가하는 것 외에도, 모든 의존성이 번들되도록 애플리케이션을 준비해야 합니다. 즉, 팻 JAR를 생성해야 합니다.</p><h3 id="리플렉션-구성" tabindex="-1">리플렉션 구성 <a class="header-anchor" href="#리플렉션-구성" aria-label="Permalink to &quot;리플렉션 구성&quot;">​</a></h3><p>GraalVM은 리플렉션을 사용하는 애플리케이션과 관련하여 <a href="https://www.graalvm.org/22.1/reference-manual/native-image/Reflection/" target="_blank" rel="noreferrer">일부 요구 사항</a>을 가집니다. 이는 Ktor의 경우에도 마찬가지입니다. 특정 타입 정보를 포함하는 <a href="https://github.com/ktorio/ktor-samples/blob/main/graalvm/src/main/resources/META-INF/native-image/reflect-config.json" target="_blank" rel="noreferrer">JSON 파일</a>을 제공해야 합니다. 이 구성 파일은 그 후 <code>native-image</code> 도구에 인수로 전달됩니다.</p><h2 id="native-image-도구-실행" tabindex="-1"><code>native-image</code> 도구 실행 <a class="header-anchor" href="#native-image-도구-실행" aria-label="Permalink to &quot;`native-image` 도구 실행&quot;">​</a></h2><p>팻 JAR가 준비되면, 유일하게 필요한 단계는 <code>native-image</code> CLI 도구를 사용하여 네이티브 이미지를 생성하는 것입니다. 이는 <a href="https://graalvm.github.io/native-build-tools/0.9.8/gradle-plugin.html" target="_blank" rel="noreferrer">Gradle 플러그인</a>을 통해서도 수행될 수 있습니다. <code>build.gradle.kts</code> 파일의 예시는 <a href="https://github.com/ktorio/ktor-samples/blob/main/graalvm/build.gradle.kts" target="_blank" rel="noreferrer">여기</a>에서 볼 수 있습니다. 하지만 사용되는 의존성, 프로젝트의 패키지 이름 등에 따라 일부 옵션이 다를 수 있음에 유의하십시오.</p><h2 id="결과-바이너리-실행" tabindex="-1">결과 바이너리 실행 <a class="header-anchor" href="#결과-바이너리-실행" aria-label="Permalink to &quot;결과 바이너리 실행&quot;">​</a></h2><p>셸 스크립트가 오류 없이 실행되면 네이티브 애플리케이션을 얻게 되는데, 샘플의 경우 <code>graal-server</code>라고 불립니다. 이를 실행하면 Ktor 서버가 시작되고 <code>https://0.0.0.0:8080</code>에서 응답합니다.</p><p><a href="#" title="title: GraalVM">//</a>: # (<p><b>Code example</b>: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/deployment-ktor-plugin"> deployment-ktor-plugin </a></p></p>) ',12))])}const M=d(h,[["render",c]]);export{G as __pageData,M as default};
