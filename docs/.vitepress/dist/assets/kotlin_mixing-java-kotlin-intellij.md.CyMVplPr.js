import{_ as i,a,b as n,c as t}from"./chunks/convert-java-to-kotlin.BPRm1iLF.js";import{_ as l,c as p,o as h,ag as e}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"在同一个项目中混合使用 Java 和 Kotlin – 教程","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/mixing-java-kotlin-intellij.md","filePath":"kotlin/mixing-java-kotlin-intellij.md","lastUpdated":1754307826000}'),k={name:"kotlin/mixing-java-kotlin-intellij.md"};function r(o,s,E,d,g,c){return h(),p("div",null,s[0]||(s[0]=[e('<h1 id="在同一个项目中混合使用-java-和-kotlin-–-教程" tabindex="-1">在同一个项目中混合使用 Java 和 Kotlin – 教程 <a class="header-anchor" href="#在同一个项目中混合使用-java-和-kotlin-–-教程" aria-label="Permalink to &quot;在同一个项目中混合使用 Java 和 Kotlin – 教程&quot;">​</a></h1><p>Kotlin 提供了与 Java 的一流互操作性，现代 IDE 使其变得更好。在本教程中，你将学习如何在 IntelliJ IDEA 的同一个项目中同时使用 Kotlin 和 Java 源代码。关于在 IntelliJ IDEA 中启动新的 Kotlin 项目，请参见 <a href="/kotlin/jvm-get-started">Getting started with IntelliJ IDEA</a>。</p><h2 id="添加-java-源代码到现有-kotlin-项目" tabindex="-1">添加 Java 源代码到现有 Kotlin 项目 <a class="header-anchor" href="#添加-java-源代码到现有-kotlin-项目" aria-label="Permalink to &quot;添加 Java 源代码到现有 Kotlin 项目&quot;">​</a></h2><p>向 Kotlin 项目添加 Java 类非常简单直观。你只需创建一个新的 Java 文件。在你的项目内选择一个目录或包，然后转到 <strong>File</strong> | <strong>New</strong> | <strong>Java Class</strong> 或使用 <strong>Alt + Insert</strong>/<strong>Cmd + N</strong> 快捷键。</p><p><img src="'+i+`" alt="添加新的 Java 类" width="400"></p><p>如果你已经有 Java 类，你可以直接将它们复制到项目目录中。</p><p>你现在可以在 Kotlin 中使用 Java 类，反之亦然，无需任何进一步操作。</p><p>例如，添加以下 Java 类：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> placeOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A new order is placed by &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>让你可以像 Kotlin 中的任何其他类型一样从 Kotlin 调用它。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Phase&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customer.name)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">placeOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><h2 id="添加-kotlin-源代码到现有-java-项目" tabindex="-1">添加 Kotlin 源代码到现有 Java 项目 <a class="header-anchor" href="#添加-kotlin-源代码到现有-java-项目" aria-label="Permalink to &quot;添加 Kotlin 源代码到现有 Java 项目&quot;">​</a></h2><p>向现有 Java 项目添加 Kotlin 文件几乎相同。</p><p><img src="`+a+'" alt="添加新的 Kotlin 文件类" width="400"></p><p>如果你是第一次向此项目添加 Kotlin 文件，IntelliJ IDEA 将自动添加所需的 Kotlin 运行时。</p><p><img src="'+n+'" alt="捆绑 Kotlin 运行时" width="350"></p><p>你也可以从 <strong>Tools</strong> | <strong>Kotlin</strong> | <strong>Configure Kotlin in Project</strong> 手动打开 Kotlin 运行时配置。</p><h2 id="使用-j2k-将现有-java-文件转换为-kotlin" tabindex="-1">使用 J2K 将现有 Java 文件转换为 Kotlin <a class="header-anchor" href="#使用-j2k-将现有-java-文件转换为-kotlin" aria-label="Permalink to &quot;使用 J2K 将现有 Java 文件转换为 Kotlin&quot;">​</a></h2><p>Kotlin 插件还捆绑了一个 Java 到 Kotlin 的转换器 (<em>J2K</em>)，它可以自动将 Java 文件转换为 Kotlin。要在一个文件上使用 J2K，请在其上下文菜单或 IntelliJ IDEA 的 <strong>Code</strong> 菜单中点击 <strong>Convert Java File to Kotlin File</strong>。</p><p><img src="'+t+'" alt="将 Java 转换为 Kotlin" width="500"></p><p>虽然这个转换器并非万无一失，但它在将大多数 Java 样板代码转换为 Kotlin 方面做得相当不错。但是，有时仍需要一些手动调整。</p>',21)]))}const F=l(k,[["render",r]]);export{m as __pageData,F as default};
