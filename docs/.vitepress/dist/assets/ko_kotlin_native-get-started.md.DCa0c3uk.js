import{_ as r,a as o,b as d,c as E,d as g,e as c}from"./chunks/native-output-gutter-3.D2hCv83U.js";import{_ as u,C as p,c as y,o as F,ag as n,j as i,G as l,a as s,w as t}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"Kotlin/Native 시작하기","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/native-get-started.md","filePath":"ko/kotlin/native-get-started.md","lastUpdated":1754307826000}'),b={name:"ko/kotlin/native-get-started.md"};function m(v,a,C,f,A,D){const h=p("shortcut"),e=p("tab"),k=p("tabs");return F(),y("div",null,[a[13]||(a[13]=n(`<h1 id="kotlin-native-시작하기" tabindex="-1">Kotlin/Native 시작하기 <a class="header-anchor" href="#kotlin-native-시작하기" aria-label="Permalink to &quot;Kotlin/Native 시작하기&quot;">​</a></h1><p>이 튜토리얼에서는 Kotlin/Native 애플리케이션을 만드는 방법을 배웁니다. 자신에게 가장 적합한 도구를 선택하여 다음 방법을 사용하여 앱을 만들 수 있습니다.</p><ul><li><p><strong><a href="#in-ide">IDE</a></strong>. 여기서는 버전 관리 시스템에서 프로젝트 템플릿을 복제하여 IntelliJ IDEA에서 사용할 수 있습니다.</p></li><li><p><strong><a href="#using-gradle">Gradle 빌드 시스템</a></strong>. 내부 동작 방식을 더 잘 이해하기 위해 프로젝트 빌드 파일을 수동으로 만들 수 있습니다.</p></li><li><p><strong><a href="#using-the-command-line-compiler">명령줄 도구</a></strong>. 표준 Kotlin 배포판의 일부로 제공되는 Kotlin/Native 컴파일러를 사용하여 명령줄 도구에서 직접 앱을 만들 수 있습니다.</p><p>콘솔 컴파일은 쉽고 간단해 보일 수 있지만, 수백 개의 파일과 라이브러리가 있는 대규모 프로젝트에는 잘 확장되지 않습니다. 이러한 프로젝트에는 IDE 또는 빌드 시스템을 사용하는 것이 좋습니다.</p></li></ul><p>Kotlin/Native를 사용하면 Linux, macOS, Windows를 포함한 <a href="/ko/kotlin/native-target-support">다양한 타겟</a>용으로 컴파일할 수 있습니다. 한 플랫폼에서 다른 플랫폼용으로 컴파일하는 교차 플랫폼 컴파일이 가능하지만, 이 튜토리얼에서는 컴파일하는 플랫폼과 동일한 플랫폼을 타겟으로 할 것입니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Mac을 사용하고 macOS 또는 다른 Apple 타겟용 애플리케이션을 만들고 실행하려면 먼저 <a href="https://developer.apple.com/download/" target="_blank" rel="noreferrer">Xcode Command Line Tools</a>를 설치하고 실행한 다음 라이선스 약관에 동의해야 합니다.</p></div><h2 id="ide에서" tabindex="-1">IDE에서 <a class="header-anchor" href="#ide에서" aria-label="Permalink to &quot;IDE에서&quot;">​</a></h2><p>이 섹션에서는 IntelliJ IDEA를 사용하여 Kotlin/Native 애플리케이션을 만드는 방법을 배웁니다. Community Edition과 Ultimate Edition 모두 사용할 수 있습니다.</p><h3 id="프로젝트-생성" tabindex="-1">프로젝트 생성 <a class="header-anchor" href="#프로젝트-생성" aria-label="Permalink to &quot;프로젝트 생성&quot;">​</a></h3><ol><li><p><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a>의 최신 버전을 다운로드하여 설치합니다.</p></li><li><p>IntelliJ IDEA에서 <strong>File</strong> | <strong>New</strong> | <strong>Project from Version Control</strong>을 선택하고 다음 URL을 사용하여 <a href="https://github.com/Kotlin/kmp-native-wizard" target="_blank" rel="noreferrer">프로젝트 템플릿</a>을 복제합니다.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/kmp-native-wizard</span></span></code></pre></div></li><li><p>프로젝트 종속성(dependencies)에 대한 버전 카탈로그인 <code>gradle/libs.versions.toml</code> 파일을 엽니다. Kotlin/Native 애플리케이션을 만들려면 Kotlin과 동일한 버전을 가진 Kotlin Multiplatform Gradle 플러그인이 필요합니다. 최신 Kotlin 버전을 사용하고 있는지 확인합니다.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[versions]</span></span>
<span class="line"><span>kotlin = &quot;2.2.10&quot;</span></span></code></pre></div></li><li><p>Gradle 파일 다시 로드 제안을 따릅니다.</p><p><img src="`+r+'" alt="Load Gradle changes button" width="295"></p></li></ol><p>이 설정에 대한 자세한 내용은 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html" target="_blank" rel="noreferrer">Multiplatform Gradle DSL 참조</a>를 참조하십시오.</p><h3 id="애플리케이션-빌드-및-실행" tabindex="-1">애플리케이션 빌드 및 실행 <a class="header-anchor" href="#애플리케이션-빌드-및-실행" aria-label="Permalink to &quot;애플리케이션 빌드 및 실행&quot;">​</a></h3><p><code>src/nativeMain/kotlin/</code> 디렉터리에 있는 <code>Main.kt</code> 파일을 엽니다.</p><ul><li><code>src</code> 디렉터리에는 Kotlin 소스 파일이 포함되어 있습니다.</li><li><code>Main.kt</code> 파일에는 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html" target="_blank" rel="noreferrer"><code>println()</code></a> 함수를 사용하여 &quot;Hello, Kotlin/Native!&quot;를 출력하는 코드가 포함되어 있습니다.</li></ul><p>코드를 실행하려면 거터(gutter)의 녹색 아이콘을 누릅니다.</p><p><img src="'+o+'" alt="Run the application" width="478"></p><p>IntelliJ IDEA는 Gradle 작업을 사용하여 코드를 실행하고 <strong>Run</strong> 탭에 결과를 출력합니다.</p><p><img src="'+d+'" alt="Application output" width="331"></p><p>첫 실행 후, IDE는 상단에 해당 실행 구성(run configuration)을 생성합니다.</p><p><img src="'+E+'" alt="Gradle run configuration" width="503"></p><blockquote><p>IntelliJ IDEA Ultimate 사용자는 컴파일된 네이티브 실행 파일(executables)을 디버깅하고 가져온 Kotlin/Native 프로젝트에 대한 실행 구성을 자동으로 생성하는 <a href="https://plugins.jetbrains.com/plugin/12775-native-debugging-support" target="_blank" rel="noreferrer">Native Debugging Support</a> 플러그인을 설치할 수 있습니다.</p></blockquote><p>프로젝트를 자동으로 빌드하도록 <a href="https://www.jetbrains.com/help/idea/compiling-applications.html#auto-build" target="_blank" rel="noreferrer">IntelliJ IDEA를 구성</a>할 수 있습니다.</p><ol><li><strong>Settings | Build, Execution, Deployment | Compiler</strong>로 이동합니다.</li><li><strong>Compiler</strong> 페이지에서 <strong>Build project automatically</strong>를 선택합니다.</li><li>변경 사항을 적용합니다.</li></ol>',22)),i("p",null,[a[2]||(a[2]=s("이제 클래스 파일을 변경하거나 파일을 저장할 때 (")),l(h,null,{default:t(()=>a[0]||(a[0]=[s("Ctrl + S")])),_:1}),a[3]||(a[3]=s("/")),l(h,null,{default:t(()=>a[1]||(a[1]=[s("Cmd + S")])),_:1}),a[4]||(a[4]=s("), IntelliJ IDEA는 프로젝트를 자동으로 증분 빌드(incremental build)합니다."))]),a[14]||(a[14]=n(`<h3 id="애플리케이션-업데이트" tabindex="-1">애플리케이션 업데이트 <a class="header-anchor" href="#애플리케이션-업데이트" aria-label="Permalink to &quot;애플리케이션 업데이트&quot;">​</a></h3><p>애플리케이션에 이름의 글자 수를 세는 기능을 추가해 봅시다.</p><ol><li><p><code>Main.kt</code> 파일에 입력을 읽는 코드를 추가합니다. <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/readln.html" target="_blank" rel="noreferrer"><code>readln()</code></a> 함수를 사용하여 입력 값을 읽고 <code>name</code> 변수에 할당합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 입력 값을 읽습니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, enter your name:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Gradle을 사용하여 이 앱을 실행하려면 <code>build.gradle.kts</code> 파일에 사용할 입력으로 <code>System.in</code>을 지정하고 Gradle 변경 사항을 로드합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nativeTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                entryPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                runTask?.standardInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>공백을 제거하고 글자 수를 셉니다.</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/replace.html" target="_blank" rel="noreferrer"><code>replace()</code></a> 함수를 사용하여 이름에서 공백을 제거합니다.</li><li>객체 컨텍스트 내에서 함수를 실행하려면 스코프 함수(scope function) <a href="/ko/kotlin/scope-functions#let"><code>let</code></a>을 사용합니다.</li><li><a href="/ko/kotlin/strings#string-templates">문자열 템플릿(string template)</a>을 사용하여 달러 기호 <code>$</code>를 추가하고 중괄호 (<code>\${it.length}</code>)로 묶어 이름 길이를 문자열에 삽입합니다. <code>it</code>은 <a href="/ko/kotlin/coding-conventions#lambda-parameters">람다 매개변수(lambda parameter)</a>의 기본 이름입니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 입력 값을 읽습니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, enter your name:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 이름의 글자 수를 셉니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Your name contains \${it.length} letters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>애플리케이션을 실행합니다.</p></li><li><p>이름을 입력하고 결과를 확인합니다.</p><p><img src="`+g+`" alt="Application output" width="422"></p></li></ol><p>이제 이름에 있는 고유한 글자만 세어 봅시다.</p><ol><li><p><code>Main.kt</code> 파일에 <code>String</code>에 대한 새로운 <a href="/ko/kotlin/extensions#extension-functions">확장 함수(extension function)</a> <code>.countDistinctCharacters()</code>를 선언합니다.</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/lowercase.html" target="_blank" rel="noreferrer"><code>lowercase()</code></a> 함수를 사용하여 이름을 소문자로 변환합니다.</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-list.html" target="_blank" rel="noreferrer"><code>toList()</code></a> 함수를 사용하여 입력 문자열을 문자 목록으로 변환합니다.</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/distinct.html" target="_blank" rel="noreferrer"><code>distinct()</code></a> 함수를 사용하여 이름에서 고유한 문자만 선택합니다.</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/count.html" target="_blank" rel="noreferrer"><code>count()</code></a> 함수를 사용하여 고유한 문자 수를 셉니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countDistinctCharacters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lowercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li><li><p><code>.countDistinctCharacters()</code> 함수를 사용하여 이름에 있는 고유한 글자 수를 셉니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countDistinctCharacters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lowercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 입력 값을 읽습니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, enter your name:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 이름의 글자 수를 셉니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Your name contains \${it.length} letters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 고유한 글자 수를 출력합니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Your name contains \${it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countDistinctCharacters</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()} unique letters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>애플리케이션을 실행합니다.</p></li><li><p>이름을 입력하고 결과를 확인합니다.</p><p><img src="`+c+'" alt="Application output" width="422"></p></li></ol><h2 id="gradle-사용하기" tabindex="-1">Gradle 사용하기 <a class="header-anchor" href="#gradle-사용하기" aria-label="Permalink to &quot;Gradle 사용하기&quot;">​</a></h2><p>이 섹션에서는 <a href="https://gradle.org" target="_blank" rel="noreferrer">Gradle</a>을 사용하여 Kotlin/Native 애플리케이션을 수동으로 만드는 방법을 배웁니다. Gradle은 Kotlin/Native 및 Kotlin Multiplatform 프로젝트의 기본 빌드 시스템이며, Java, Android 및 기타 생태계에서도 일반적으로 사용됩니다.</p><h3 id="프로젝트-파일-생성" tabindex="-1">프로젝트 파일 생성 <a class="header-anchor" href="#프로젝트-파일-생성" aria-label="Permalink to &quot;프로젝트 파일 생성&quot;">​</a></h3>',8)),i("ol",null,[a[9]||(a[9]=i("li",null,[i("p",null,[s("시작하려면 호환되는 버전의 "),i("a",{href:"https://gradle.org/install/",target:"_blank",rel:"noreferrer"},"Gradle"),s("을 설치합니다. "),i("a",{href:"/ko/kotlin/gradle-configure-project#apply-the-plugin"},"호환성 표"),s("를 참조하여 Kotlin Gradle 플러그인(KGP)과 사용 가능한 Gradle 버전 간의 호환성을 확인하십시오.")])],-1)),i("li",null,[a[7]||(a[7]=i("p",null,[s("빈 프로젝트 디렉터리를 만듭니다. 그 안에 다음 내용을 가진 "),i("code",null,"build.gradle(.kts)"),s(" 파일을 생성합니다.")],-1)),l(k,{group:"build-script"},{default:t(()=>[l(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[5]||(a[5]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle.kts")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"repositories"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    mavenCentral"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    macosArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {  "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// on macOS")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxArm64("native")'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // on Linux")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // mingwX64("native")'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // on Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        binaries"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            executable"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Wrapper"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "8.14"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Wrapper.DistributionType.BIN")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[6]||(a[6]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.multiplatform'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"repositories {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mavenCentral()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    macosArm64("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'native'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {  "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// on macOS")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // linuxArm64('native')"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // on Linux")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // mingwX64('native')"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // on Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            executable()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"wrapper {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '8.14'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'BIN'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[8]||(a[8]=i("p",null,[i("code",null,"macosArm64"),s(", "),i("code",null,"iosArm64"),s(", "),i("code",null,"linuxArm64"),s(", "),i("code",null,"mingwX64"),s("와 같은 "),i("a",{href:"/ko/kotlin/native-target-support"},"타겟 이름"),s("을 사용하여 코드를 컴파일할 타겟을 정의할 수 있습니다. 이러한 타겟 이름은 선택적으로 플랫폼 이름을 매개변수로 취할 수 있으며, 이 경우 "),i("code",null,"native"),s("입니다. 플랫폼 이름은 프로젝트에서 소스 경로와 태스크 이름을 생성하는 데 사용됩니다.")],-1))]),a[10]||(a[10]=n(`<li><p>프로젝트 디렉터리에 빈 <code>settings.gradle(.kts)</code> 파일을 만듭니다.</p></li><li><p><code>src/nativeMain/kotlin</code> 디렉터리를 만들고 그 안에 다음 내용을 가진 <code>hello.kt</code> 파일을 배치합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,2))]),a[15]||(a[15]=n(`<p>관례상 모든 소스는 <code>src/&lt;target name&gt;[Main|Test]/kotlin</code> 디렉터리에 위치하며, <code>Main</code>은 소스 코드용이고 <code>Test</code>는 테스트용입니다. <code>&lt;target name&gt;</code>은 빌드 파일에 지정된 타겟 플랫폼(이 경우 <code>native</code>)에 해당합니다.</p><h3 id="프로젝트-빌드-및-실행" tabindex="-1">프로젝트 빌드 및 실행 <a class="header-anchor" href="#프로젝트-빌드-및-실행" aria-label="Permalink to &quot;프로젝트 빌드 및 실행&quot;">​</a></h3><ol><li><p>프로젝트 루트 디렉터리에서 빌드 명령을 실행합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nativeBinaries</span></span></code></pre></div><p>이 명령은 <code>build/bin/native</code> 디렉터리를 생성하며, 그 안에 <code>debugExecutable</code>과 <code>releaseExecutable</code>이라는 두 개의 디렉터리가 있습니다. 이 디렉터리에는 해당 바이너리 파일이 포함되어 있습니다.</p><p>기본적으로 바이너리 파일의 이름은 프로젝트 디렉터리의 이름과 동일합니다.</p></li><li><p>프로젝트를 실행하려면 다음 명령을 실행합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build/bin/native/debugExecutable/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;project_name&gt;.kexe</span></span></code></pre></div></li></ol><p>터미널에 &quot;Hello, Kotlin/Native!&quot;가 출력됩니다.</p><h3 id="ide에서-프로젝트-열기" tabindex="-1">IDE에서 프로젝트 열기 <a class="header-anchor" href="#ide에서-프로젝트-열기" aria-label="Permalink to &quot;IDE에서 프로젝트 열기&quot;">​</a></h3><p>이제 Gradle을 지원하는 모든 IDE에서 프로젝트를 열 수 있습니다. IntelliJ IDEA를 사용하는 경우:</p><ol><li><strong>File</strong> | <strong>Open</strong>을 선택합니다.</li><li>프로젝트 디렉터리를 선택하고 <strong>Open</strong>을 클릭합니다. IntelliJ IDEA는 해당 프로젝트가 Kotlin/Native 프로젝트인지 자동으로 감지합니다.</li></ol><p>프로젝트에 문제가 발생하면 IntelliJ IDEA는 <strong>Build</strong> 탭에 오류 메시지를 표시합니다.</p><h2 id="명령줄-컴파일러-사용하기" tabindex="-1">명령줄 컴파일러 사용하기 <a class="header-anchor" href="#명령줄-컴파일러-사용하기" aria-label="Permalink to &quot;명령줄 컴파일러 사용하기&quot;">​</a></h2><p>이 섹션에서는 명령줄 도구에서 Kotlin 컴파일러를 사용하여 Kotlin/Native 애플리케이션을 만드는 방법을 배웁니다.</p><h3 id="컴파일러-다운로드-및-설치" tabindex="-1">컴파일러 다운로드 및 설치 <a class="header-anchor" href="#컴파일러-다운로드-및-설치" aria-label="Permalink to &quot;컴파일러 다운로드 및 설치&quot;">​</a></h3><p>컴파일러를 설치하려면:</p><ol><li><p>Kotlin의 <a href="https://github.com/JetBrains/kotlin/releases/tag/v2.2.10" target="_blank" rel="noreferrer">GitHub 릴리스</a> 페이지로 이동하여 <strong>Assets</strong> 섹션으로 스크롤합니다.</p></li><li><p>이름에 <code>kotlin-native</code>가 포함된 파일을 찾아 운영 체제에 적합한 파일을 다운로드합니다. 예를 들어 <code>kotlin-native-prebuilt-linux-x86_64-2.2.10.tar.gz</code>와 같은 파일입니다.</p></li><li><p>아카이브를 원하는 디렉터리에 압축 해제합니다.</p></li><li><p>셸 프로필을 열고 컴파일러의 <code>/bin</code> 디렉터리 경로를 <code>PATH</code> 환경 변수에 추가합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&lt;path to the compiler&gt;/kotlin-native/bin:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>컴파일러 출력은 종속성이나 가상 머신 요구 사항이 없지만, 컴파일러 자체는 Java 1.8 이상의 런타임을 필요로 합니다. <a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noreferrer">JDK 8 (JAVA SE 8) 또는 이후 버전</a>에서 지원됩니다.</p></div><h3 id="프로그램-생성" tabindex="-1">프로그램 생성 <a class="header-anchor" href="#프로그램-생성" aria-label="Permalink to &quot;프로그램 생성&quot;">​</a></h3><p>작업 디렉터리를 선택하고 <code>hello.kt</code>라는 파일을 만듭니다. 다음 코드로 업데이트합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="콘솔에서-코드-컴파일" tabindex="-1">콘솔에서 코드 컴파일 <a class="header-anchor" href="#콘솔에서-코드-컴파일" aria-label="Permalink to &quot;콘솔에서 코드 컴파일&quot;">​</a></h3><p>애플리케이션을 컴파일하려면 다운로드한 컴파일러로 다음 명령을 실행합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc-native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span></span></code></pre></div><p><code>-o</code> 옵션의 값은 출력 파일의 이름을 지정하므로, 이 호출은 macOS 및 Linux에서는 <code>hello.kexe</code> 바이너리 파일을 생성하고 (Windows에서는 <code>hello.exe</code>를 생성합니다).</p><p>사용 가능한 옵션의 전체 목록은 <a href="/ko/kotlin/compiler-reference">Kotlin 컴파일러 옵션</a>을 참조하십시오.</p><h3 id="프로그램-실행" tabindex="-1">프로그램 실행 <a class="header-anchor" href="#프로그램-실행" aria-label="Permalink to &quot;프로그램 실행&quot;">​</a></h3><p>프로그램을 실행하려면 명령줄 도구에서 바이너리 파일이 포함된 디렉터리로 이동하여 다음 명령을 실행합니다.</p>`,24)),l(k,null,{default:t(()=>[l(e,{title:"macOS and Linux"},{default:t(()=>a[11]||(a[11]=[i("div",{class:"language-none vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"none"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",null,"./hello.kexe")])])])],-1)])),_:1}),l(e,{title:"Windows"},{default:t(()=>a[12]||(a[12]=[i("div",{class:"language-none vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"none"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",null,"./hello.exe")])])])],-1)])),_:1})]),_:1}),a[16]||(a[16]=n('<p>애플리케이션은 표준 출력에 &quot;Hello, Kotlin/Native&quot;를 출력합니다.</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><ul><li>네이티브 HTTP 클라이언트를 만들고 C 라이브러리와 상호 운용하는 방법을 설명하는 <a href="/ko/kotlin/native-app-with-c-and-libcurl">C interop 및 libcurl을 사용하여 앱 생성하기</a> 튜토리얼을 완료하십시오.</li><li>실제 Kotlin/Native 프로젝트를 위한 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html" target="_blank" rel="noreferrer">Gradle 빌드 스크립트를 작성하는 방법</a>을 배우십시오.</li><li><a href="/ko/kotlin/gradle">문서</a>에서 Gradle 빌드 시스템에 대해 더 자세히 읽어보십시오.</li></ul>',3))])}const x=u(b,[["render",m]]);export{q as __pageData,x as default};
