import{_ as l,C as r,c as p,o as h,ag as a,j as s,G as n,w as o,a as i}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Kotlin 1.5 兼容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/compatibility-guide-15.md","filePath":"kotlin/compatibility-guide-15.md","lastUpdated":1754307826000}'),k={name:"kotlin/compatibility-guide-15.md"};function g(d,t,c,u,E,b){const e=r("tabs");return h(),p("div",null,[t[6]||(t[6]=a('<h1 id="kotlin-1-5-兼容性指南" tabindex="-1">Kotlin 1.5 兼容性指南 <a class="header-anchor" href="#kotlin-1-5-兼容性指南" aria-label="Permalink to &quot;Kotlin 1.5 兼容性指南&quot;">​</a></h1><p><em><a href="/kotlin/kotlin-evolution-principles">保持语言的现代性</a></em> 和 <em><a href="/kotlin/kotlin-evolution-principles">舒适的更新</a></em> 是 Kotlin 语言设计的核心原则。前者指出应移除阻碍语言演进的构造，而后者则表示这种移除应提前充分沟通，以使代码迁移尽可能顺利。</p><p>虽然大多数语言变更已通过其他渠道（例如更新日志或编译器警告）发布，但本文档对其进行了汇总，为从 Kotlin 1.4 迁移到 Kotlin 1.5 提供了完整的参考。</p><h2 id="基本术语" tabindex="-1">基本术语 <a class="header-anchor" href="#基本术语" aria-label="Permalink to &quot;基本术语&quot;">​</a></h2><p>本文档中引入了几种兼容性：</p><ul><li><em>源兼容性</em>：源不兼容性变更是指曾经能够正常编译（无错误或警告）的代码不再编译通过。</li><li><em>二进制兼容性</em>：如果两个二进制 artifact 相互替换不会导致加载或链接错误，则称它们是二进制兼容的。</li><li><em>行为兼容性</em>：如果同一程序在应用变更前后表现出不同的行为，则称该变更是行为不兼容的。</li></ul><p>请记住，这些定义仅适用于纯 Kotlin。Kotlin 代码与其他语言（例如 Java）的兼容性不在本文档的讨论范围之内。</p><h2 id="语言与标准库-stdlib" tabindex="-1">语言与标准库 (stdlib) <a class="header-anchor" href="#语言与标准库-stdlib" aria-label="Permalink to &quot;语言与标准库 (stdlib)&quot;">​</a></h2><h3 id="禁止在签名多态调用中使用展开操作符" tabindex="-1">禁止在签名多态调用中使用展开操作符 <a class="header-anchor" href="#禁止在签名多态调用中使用展开操作符" aria-label="Permalink to &quot;禁止在签名多态调用中使用展开操作符&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-35226" target="_blank" rel="noreferrer">KT-35226</a></p><p><strong>Component</strong>：Core language</p><p><strong>不兼容变更类型</strong>：源兼容性</p><p><strong>简要概述</strong>：Kotlin 1.5 将禁止在签名多态调用中使用展开操作符（<code>*</code>）。</p><p><strong>弃用周期</strong>：</p><ul><li>&lt; 1.5：在调用点对问题操作符引入警告</li><li><code>&gt;=</code> 1.5：将此警告提升为错误， 可以使用 <code>-XXLanguage:-ProhibitSpreadOnSignaturePolymorphicCall</code> 暂时恢复到 1.5 之前的行为。</li></ul></blockquote><h3 id="禁止非抽象类包含从这些类中不可见的抽象成员-internal-package-private" tabindex="-1">禁止非抽象类包含从这些类中不可见的抽象成员（internal/package-private） <a class="header-anchor" href="#禁止非抽象类包含从这些类中不可见的抽象成员-internal-package-private" aria-label="Permalink to &quot;禁止非抽象类包含从这些类中不可见的抽象成员（internal/package-private）&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-27825" target="_blank" rel="noreferrer">KT-27825</a></p><p><strong>Component</strong>：Core language</p><p><strong>不兼容变更类型</strong>：源兼容性</p><p><strong>简要概述</strong>：Kotlin 1.5 将禁止非抽象类包含从这些类中不可见的抽象成员（internal/package-private）。</p><p><strong>弃用周期</strong>：</p><ul><li>&lt; 1.5：对问题类引入警告</li><li><code>&gt;=</code> 1.5：将此警告提升为错误， 可以使用 <code>-XXLanguage:-ProhibitInvisibleAbstractMethodsInSuperclasses</code> 暂时恢复到 1.5 之前的行为。</li></ul></blockquote><h3 id="禁止将基于非具体化类型形参的数组用作-jvm-上的具体化类型实参" tabindex="-1">禁止将基于非具体化类型形参的数组用作 JVM 上的具体化类型实参 <a class="header-anchor" href="#禁止将基于非具体化类型形参的数组用作-jvm-上的具体化类型实参" aria-label="Permalink to &quot;禁止将基于非具体化类型形参的数组用作 JVM 上的具体化类型实参&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-31227" target="_blank" rel="noreferrer">KT-31227</a></p><p><strong>Component</strong>：Core language</p><p><strong>不兼容变更类型</strong>：源兼容性</p><p><strong>简要概述</strong>：Kotlin 1.5 将禁止将基于非具体化类型形参的数组用作 JVM 上的具体化类型实参。</p><p><strong>弃用周期</strong>：</p><ul><li>&lt; 1.5：对问题调用引入警告</li><li><code>&gt;=</code> 1.5：将此警告提升为错误， 可以使用 <code>-XXLanguage:-ProhibitNonReifiedArraysAsReifiedTypeArguments</code> 暂时恢复到 1.5 之前的行为。</li></ul></blockquote><h3 id="禁止不委托给主构造函数的二级枚举类构造函数" tabindex="-1">禁止不委托给主构造函数的二级枚举类构造函数 <a class="header-anchor" href="#禁止不委托给主构造函数的二级枚举类构造函数" aria-label="Permalink to &quot;禁止不委托给主构造函数的二级枚举类构造函数&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-35870" target="_blank" rel="noreferrer">KT-35870</a></p><p><strong>Component</strong>：Core language</p><p><strong>不兼容变更类型</strong>：源兼容性</p><p><strong>简要概述</strong>：Kotlin 1.5 将禁止不委托给主构造函数的二级枚举类构造函数。</p><p><strong>弃用周期</strong>：</p><ul><li>&lt; 1.5：对问题构造函数引入警告</li><li><code>&gt;=</code> 1.5：将此警告提升为错误， 可以使用 <code>-XXLanguage:-RequiredPrimaryConstructorDelegationCallInEnums</code> 暂时恢复到 1.5 之前的行为。</li></ul></blockquote><h3 id="禁止私有-inline-函数暴露匿名类型" tabindex="-1">禁止私有 inline 函数暴露匿名类型 <a class="header-anchor" href="#禁止私有-inline-函数暴露匿名类型" aria-label="Permalink to &quot;禁止私有 inline 函数暴露匿名类型&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-33917" target="_blank" rel="noreferrer">KT-33917</a></p><p><strong>Component</strong>：Core language</p><p><strong>不兼容变更类型</strong>：源兼容性</p><p><strong>简要概述</strong>：Kotlin 1.5 将禁止私有 inline 函数暴露匿名类型。</p><p><strong>弃用周期</strong>：</p><ul><li>&lt; 1.5：对问题构造函数引入警告</li><li><code>&gt;=</code> 1.5：将此警告提升为错误， 可以使用 <code>-XXLanguage:-ApproximateAnonymousReturnTypesInPrivateInlineFunctions</code> 暂时恢复到 1.5 之前的行为。</li></ul></blockquote><h3 id="禁止在-sam-转换实参后传递非展开数组" tabindex="-1">禁止在 SAM 转换实参后传递非展开数组 <a class="header-anchor" href="#禁止在-sam-转换实参后传递非展开数组" aria-label="Permalink to &quot;禁止在 SAM 转换实参后传递非展开数组&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-35224" target="_blank" rel="noreferrer">KT-35224</a></p><p><strong>Component</strong>：Core language</p><p><strong>不兼容变更类型</strong>：源兼容性</p><p><strong>简要概述</strong>：Kotlin 1.5 将禁止在 SAM 转换实参后传递非展开数组。</p><p><strong>弃用周期</strong>：</p><ul><li>1.3.70：对问题调用引入警告</li><li><code>&gt;=</code> 1.5：将此警告提升为错误， 可以使用 <code>-XXLanguage:-ProhibitVarargAsArrayAfterSamArgument</code> 暂时恢复到 1.5 之前的行为。</li></ul></blockquote><h3 id="支持下划线命名的-catch-代码块形参的特殊语义" tabindex="-1">支持下划线命名的 catch 代码块形参的特殊语义 <a class="header-anchor" href="#支持下划线命名的-catch-代码块形参的特殊语义" aria-label="Permalink to &quot;支持下划线命名的 catch 代码块形参的特殊语义&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-31567" target="_blank" rel="noreferrer">KT-31567</a></p><p><strong>Component</strong>：Core language</p><p><strong>不兼容变更类型</strong>：源兼容性</p><p><strong>简要概述</strong>：Kotlin 1.5 将禁止引用用于省略 catch 代码块中异常形参名称的下划线符号（<code>_</code>）。</p><p><strong>弃用周期</strong>：</p><ul><li>1.4.20：对问题引用引入警告</li><li><code>&gt;=</code> 1.5：将此警告提升为错误， 可以使用 <code>-XXLanguage:-ForbidReferencingToUnderscoreNamedParameterOfCatchBlock</code> 暂时恢复到 1.5 之前的行为。</li></ul></blockquote><h3 id="将-sam-转换的实现策略从基于匿名类更改为-invokedynamic" tabindex="-1">将 SAM 转换的实现策略从基于匿名类更改为 invokedynamic <a class="header-anchor" href="#将-sam-转换的实现策略从基于匿名类更改为-invokedynamic" aria-label="Permalink to &quot;将 SAM 转换的实现策略从基于匿名类更改为 invokedynamic&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-44912" target="_blank" rel="noreferrer">KT-44912</a></p><p><strong>Component</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：行为兼容性</p><p><strong>简要概述</strong>：自 Kotlin 1.5 起，SAM（Single Abstract Method）转换的实现策略将从生成匿名类更改为使用 <code>invokedynamic</code> JVM 指令。</p><p><strong>弃用周期</strong>：</p><ul><li>1.5：更改 SAM 转换的实现策略， 可以使用 <code>-Xsam-conversions=class</code> 恢复实现方案到之前使用的方案。</li></ul></blockquote><h3 id="jvm-ir-后端的性能问题" tabindex="-1">JVM IR 后端的性能问题 <a class="header-anchor" href="#jvm-ir-后端的性能问题" aria-label="Permalink to &quot;JVM IR 后端的性能问题&quot;">​</a></h3>',25)),s("blockquote",null,[t[1]||(t[1]=a('<p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-48233" target="_blank" rel="noreferrer">KT-48233</a></p><p><strong>Component</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：行为兼容性</p><p><strong>简要概述</strong>：Kotlin 1.5 默认使用 <a href="https://blog.jetbrains.com/kotlin/2021/02/the-jvm-backend-is-in-beta-let-s-make-it-stable-together/" target="_blank" rel="noreferrer">基于 IR 的后端</a> 作为 Kotlin/JVM 编译器。旧后端仍然是早期语言版本的默认设置。</p><p>在 Kotlin 1.5 中使用新编译器时，你可能会遇到一些性能下降问题。我们正在努力解决这些情况。</p><p><strong>弃用周期</strong>：</p><ul><li>&lt; 1.5：默认使用旧的 JVM 后端</li><li><code>&gt;=</code> 1.5：默认使用基于 IR 的后端。如果你需要在 Kotlin 1.5 中使用旧后端， 将以下行添加到项目的配置文件中以暂时恢复到 1.5 之前的行为：</li></ul><p>在 Gradle 中：</p>',8)),n(e,null,{default:o(()=>t[0]||(t[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dsl"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinJvmCompile"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions.useOldBackend "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"useOldBackend "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t[2]||(t[2]=a(`<p>在 Maven 中：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-Xuse-old-backend&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>对此标志的支持将在未来的某个版本中移除。</p>`,3))]),t[7]||(t[7]=s("h3",{id:"jvm-ir-后端中的新字段排序",tabindex:"-1"},[i("JVM IR 后端中的新字段排序 "),s("a",{class:"header-anchor",href:"#jvm-ir-后端中的新字段排序","aria-label":'Permalink to "JVM IR 后端中的新字段排序"'},"​")],-1)),s("blockquote",null,[t[4]||(t[4]=a('<p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-46378" target="_blank" rel="noreferrer">KT-46378</a></p><p><strong>Component</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：行为兼容性</p><p><strong>简要概述</strong>：自 1.5 版本起，Kotlin 使用 <a href="https://blog.jetbrains.com/kotlin/2021/02/the-jvm-backend-is-in-beta-let-s-make-it-stable-together/" target="_blank" rel="noreferrer">基于 IR 的后端</a>，它对 JVM 字节码的排序方式不同：它在构造函数中声明的字段生成在在代码块中声明的字段之前，而旧后端则相反。新的排序可能会改变使用依赖于字段顺序的序列化框架（例如 Java 序列化）的程序的行为。</p><p><strong>弃用周期</strong>：</p><ul><li>&lt; 1.5：默认使用旧的 JVM 后端。它在代码块中声明的字段先于在构造函数中声明的字段。</li><li><code>&gt;=</code> 1.5：默认使用新的基于 IR 的后端。在构造函数中声明的字段生成在在代码块中声明的字段之前。作为一种临时解决方案，你可以暂时切换到 Kotlin 1.5 中的旧后端。为此， 将以下行添加到项目的配置文件中：</li></ul><p>在 Gradle 中：</p>',7)),n(e,null,{default:o(()=>t[3]||(t[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dsl"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinJvmCompile"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions.useOldBackend "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"useOldBackend "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t[5]||(t[5]=a(`<p>在 Maven 中：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-Xuse-old-backend&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>对此标志的支持将在未来的某个版本中移除。</p>`,3))]),t[8]||(t[8]=a(`<h3 id="为在委托表达式中包含泛型调用的委托属性生成空安全断言" tabindex="-1">为在委托表达式中包含泛型调用的委托属性生成空安全断言 <a class="header-anchor" href="#为在委托表达式中包含泛型调用的委托属性生成空安全断言" aria-label="Permalink to &quot;为在委托表达式中包含泛型调用的委托属性生成空安全断言&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-44304" target="_blank" rel="noreferrer">KT-44304</a></p><p><strong>Component</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：行为兼容性</p><p><strong>简要概述</strong>：自 Kotlin 1.5 起，Kotlin 编译器将为在委托表达式中包含泛型调用的委托属性发出空安全断言。</p><p><strong>弃用周期</strong>：</p><ul><li>1.5：为委托属性发出空安全断言（详情请参见 issue）， 可以使用 <code>-Xuse-old-backend</code> 或 <code>-language-version 1.4</code> 暂时恢复到 1.5 之前的行为。</li></ul></blockquote><h3 id="将使用-onlyinputtypes-注解的类型形参的调用的警告提升为错误" tabindex="-1">将使用 @OnlyInputTypes 注解的类型形参的调用的警告提升为错误 <a class="header-anchor" href="#将使用-onlyinputtypes-注解的类型形参的调用的警告提升为错误" aria-label="Permalink to &quot;将使用 @OnlyInputTypes 注解的类型形参的调用的警告提升为错误&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-45861" target="_blank" rel="noreferrer">KT-45861</a></p><p><strong>Component</strong>：Core language</p><p><strong>不兼容变更类型</strong>：源兼容性</p><p><strong>简要概述</strong>：Kotlin 1.5 将禁止 <code>contains</code>、<code>indexOf</code> 和 <code>assertEquals</code> 等具有无意义实参的调用，以提高类型安全。</p><p><strong>弃用周期</strong>：</p><ul><li>1.4.0：对问题构造函数引入警告</li><li><code>&gt;=</code> 1.5：将此警告提升为错误， 可以使用 <code>-XXLanguage:-StrictOnlyInputTypesChecks</code> 暂时恢复到 1.5 之前的行为。</li></ul></blockquote><h3 id="在带有命名-vararg-的调用中使用正确的实参执行顺序" tabindex="-1">在带有命名 vararg 的调用中使用正确的实参执行顺序 <a class="header-anchor" href="#在带有命名-vararg-的调用中使用正确的实参执行顺序" aria-label="Permalink to &quot;在带有命名 vararg 的调用中使用正确的实参执行顺序&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-17691" target="_blank" rel="noreferrer">KT-17691</a></p><p><strong>Component</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：行为兼容性</p><p><strong>简要概述</strong>：Kotlin 1.5 将更改带有命名 vararg 的调用中实参的执行顺序。</p><p><strong>弃用周期</strong>：</p><ul><li>&lt; 1.5：对问题构造函数引入警告</li><li><code>&gt;=</code> 1.5：将此警告提升为错误， 可以使用 <code>-XXLanguage:-UseCorrectExecutionOrderForVarargArguments</code> 暂时恢复到 1.5 之前的行为。</li></ul></blockquote><h3 id="在操作符函数式调用中使用形参的默认值" tabindex="-1">在操作符函数式调用中使用形参的默认值 <a class="header-anchor" href="#在操作符函数式调用中使用形参的默认值" aria-label="Permalink to &quot;在操作符函数式调用中使用形参的默认值&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-42064" target="_blank" rel="noreferrer">KT-42064</a></p><p><strong>Component</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：行为兼容性</p><p><strong>简要概述</strong>：Kotlin 1.5 将在操作符调用中使用形参的默认值。</p><p><strong>弃用周期</strong>：</p><ul><li>&lt; 1.5：旧行为（详情请参见 issue）</li><li><code>&gt;=</code> 1.5：行为已更改， 可以使用 <code>-XXLanguage:-JvmIrEnabledByDefault</code> 暂时恢复到 1.5 之前的行为。</li></ul></blockquote><h3 id="如果常规数列为空-则在-for-循环中生成空的逆序数列" tabindex="-1">如果常规数列为空，则在 for 循环中生成空的逆序数列 <a class="header-anchor" href="#如果常规数列为空-则在-for-循环中生成空的逆序数列" aria-label="Permalink to &quot;如果常规数列为空，则在 for 循环中生成空的逆序数列&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-42533" target="_blank" rel="noreferrer">KT-42533</a></p><p><strong>Component</strong>：Kotlin/JVM</p><p><strong>不兼容变更类型</strong>：行为兼容性</p><p><strong>简要概述</strong>：如果常规数列为空，Kotlin 1.5 将在 for 循环中生成空的逆序数列。</p><p><strong>弃用周期</strong>：</p><ul><li>&lt; 1.5：旧行为（详情请参见 issue）</li><li><code>&gt;=</code> 1.5：行为已更改， 可以使用 <code>-XXLanguage:-JvmIrEnabledByDefault</code> 暂时恢复到 1.5 之前的行为。</li></ul></blockquote><h3 id="理顺-char-到代码和-char-到数字的转换" tabindex="-1">理顺 Char 到代码和 Char 到数字的转换 <a class="header-anchor" href="#理顺-char-到代码和-char-到数字的转换" aria-label="Permalink to &quot;理顺 Char 到代码和 Char 到数字的转换&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-23451" target="_blank" rel="noreferrer">KT-23451</a></p><p><strong>Component</strong>：kotlin-stdlib</p><p><strong>不兼容变更类型</strong>：源兼容性</p><p><strong>简要概述</strong>：自 Kotlin 1.5 起，Char 到数字类型的转换将被弃用。</p><p><strong>弃用周期</strong>：</p><ul><li>1.5：弃用 <code>Char.toInt()/toShort()/toLong()/toByte()/toDouble()/toFloat()</code> 以及像 <code>Long.toChar()</code> 这样的逆向函数，并提出替换方案。</li></ul></blockquote><h3 id="kotlin-text-函数中字符不区分大小写的比较不一致" tabindex="-1">kotlin.text 函数中字符不区分大小写的比较不一致 <a class="header-anchor" href="#kotlin-text-函数中字符不区分大小写的比较不一致" aria-label="Permalink to &quot;kotlin.text 函数中字符不区分大小写的比较不一致&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-45496" target="_blank" rel="noreferrer">KT-45496</a></p><p><strong>Component</strong>：kotlin-stdlib</p><p><strong>不兼容变更类型</strong>：行为兼容性</p><p><strong>简要概述</strong>：自 Kotlin 1.5 起，<code>Char.equals</code> 在不区分大小写的情况下将得到改进，它将首先比较字符的大写变体是否相等，然后比较这些大写变体（而非字符本身）的小写变体是否相等。</p><p><strong>弃用周期</strong>：</p><ul><li>&lt; 1.5：旧行为（详情请参见 issue）</li><li>1.5：更改 <code>Char.equals</code> 函数的行为。</li></ul></blockquote><h3 id="移除默认的区分区域设置的大小写转换-api" tabindex="-1">移除默认的区分区域设置的大小写转换 API <a class="header-anchor" href="#移除默认的区分区域设置的大小写转换-api" aria-label="Permalink to &quot;移除默认的区分区域设置的大小写转换 API&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-43023" target="_blank" rel="noreferrer">KT-43023</a></p><p><strong>Component</strong>：kotlin-stdlib</p><p><strong>不兼容变更类型</strong>：源兼容性</p><p><strong>简要概述</strong>：自 Kotlin 1.5 起，默认的区分区域设置的大小写转换函数（例如 <code>String.toUpperCase()</code>）将被弃用。</p><p><strong>弃用周期</strong>：</p><ul><li>1.5：弃用使用默认区域设置的大小写转换函数（详情请参见 issue），并提出替换方案。</li></ul></blockquote><h3 id="逐步将集合-min-和-max-函数的返回类型更改为非可空类型" tabindex="-1">逐步将集合 min 和 max 函数的返回类型更改为非可空类型 <a class="header-anchor" href="#逐步将集合-min-和-max-函数的返回类型更改为非可空类型" aria-label="Permalink to &quot;逐步将集合 min 和 max 函数的返回类型更改为非可空类型&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-38854" target="_blank" rel="noreferrer">KT-38854</a></p><p><strong>Component</strong>：kotlin-stdlib (JVM)</p><p><strong>不兼容变更类型</strong>：源兼容性</p><p><strong>简要概述</strong>：集合 <code>min</code> 和 <code>max</code> 函数的返回类型将在 1.6 中更改为非可空类型。</p><p><strong>弃用周期</strong>：</p><ul><li>1.4：引入 <code>...OrNull</code> 函数作为同义词并弃用受影响的 API（详情请参见 issue）。</li><li>1.5.0：将受影响 API 的弃用级别提升为错误。</li><li><code>&gt;=</code>1.6：重新引入受影响的 API，但返回类型为非可空类型。</li></ul></blockquote><h3 id="提高浮点类型转换为-short-和-byte-的弃用级别" tabindex="-1">提高浮点类型转换为 Short 和 Byte 的弃用级别 <a class="header-anchor" href="#提高浮点类型转换为-short-和-byte-的弃用级别" aria-label="Permalink to &quot;提高浮点类型转换为 Short 和 Byte 的弃用级别&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-30360" target="_blank" rel="noreferrer">KT-30360</a></p><p><strong>Component</strong>：kotlin-stdlib (JVM)</p><p><strong>不兼容变更类型</strong>：源兼容性</p><p><strong>简要概述</strong>：在 Kotlin 1.4 中以 <code>WARNING</code> 级别弃用的浮点类型到 <code>Short</code> 和 <code>Byte</code> 的转换，自 Kotlin 1.5.0 起将导致错误。</p><p><strong>弃用周期</strong>：</p><ul><li>1.4：弃用 <code>Double.toShort()/toByte()</code> 和 <code>Float.toShort()/toByte()</code> 并提出替换方案。</li><li>1.5.0：将弃用级别提升为错误。</li></ul></blockquote><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="不在单个项目混用多个-jvm-变体的-kotlin-test" tabindex="-1">不在单个项目混用多个 JVM 变体的 kotlin-test <a class="header-anchor" href="#不在单个项目混用多个-jvm-变体的-kotlin-test" aria-label="Permalink to &quot;不在单个项目混用多个 JVM 变体的 kotlin-test&quot;">​</a></h3><blockquote><p><strong>Issue</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-40225" target="_blank" rel="noreferrer">KT-40225</a></p><p><strong>Component</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：行为兼容性</p><p><strong>简要概述</strong>：如果一个项目通过传递依赖项引入了多个互斥的 <code>kotlin-test</code> 变体（针对不同的测试框架），则在 1.5.0 之前是允许的。从 1.5.0 开始，Gradle 将不允许存在针对不同测试框架的互斥 <code>kotlin-test</code> 变体。</p><p><strong>弃用周期</strong>：</p><ul><li>&lt; 1.5：允许存在针对不同测试框架的多个互斥 <code>kotlin-test</code> 变体。</li><li><code>&gt;=</code> 1.5：行为已更改， Gradle 将抛出类似 &quot;Cannot select module with conflict on capability...&quot; 的异常。可能的解决方案： <ul><li>使用与传递依赖项引入的 <code>kotlin-test</code> 变体和对应的测试框架。</li><li>寻找不传递引入 <code>kotlin-test</code> 变体的其他依赖项变体，这样你就可以使用你想要的测试框架。</li><li>寻找传递引入了另一个 <code>kotlin-test</code> 变体的依赖项变体，该变体使用了你想要的测试框架。</li><li>排除传递引入的测试框架。以下示例用于排除 JUnit 4：<div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configurations {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    testImplementation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exclude(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kotlin-test-junit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>排除测试框架后，测试你的应用程序。如果它停止工作，回滚排除更改， 使用库使用的相同测试框架，并排除你自己的测试框架。</li></ul></li></ul></blockquote>`,23))])}const f=l(k,[["render",g]]);export{m as __pageData,f as default};
