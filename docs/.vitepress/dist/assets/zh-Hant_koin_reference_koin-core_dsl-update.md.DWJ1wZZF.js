import{_ as i,c as a,o as l,ag as n}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"建構函式 DSL","description":"","frontmatter":{"title":"建構函式 DSL"},"headers":[],"relativePath":"zh-Hant/koin/reference/koin-core/dsl-update.md","filePath":"zh-Hant/koin/reference/koin-core/dsl-update.md","lastUpdated":1750001831000}'),t={name:"zh-Hant/koin/reference/koin-core/dsl-update.md"};function e(p,s,h,k,d,o){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="建構函式-dsl" tabindex="-1">建構函式 DSL <a class="header-anchor" href="#建構函式-dsl" aria-label="Permalink to &quot;建構函式 DSL&quot;">​</a></h1><p>Koin 現在提供一種新型的 DSL 關鍵字，允許你直接指定類別建構函式，並避免在 Lambda 表達式中定義。</p><p>對於具有以下依賴項的 <code>ClassA</code> 類別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>你現在可以直接宣告這些元件，直接指定 <code>類別建構函式</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>不再需要在建構函式中透過 <code>get()</code> 函式指定依賴項！🎉</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>務必在你的類別名稱前使用 <code>::</code>，以指定你的類別建構函式</p></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>你的建構函式會自動以所有 <code>get()</code> 填充。避免使用任何預設值，因為 Koin 會嘗試在當前圖中尋找它。</p></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果你需要擷取「具名」定義，你需要使用標準 DSL 並搭配 lambda 和 <code>get()</code> 來指定限定符</p></div><h2 id="可用關鍵字" tabindex="-1">可用關鍵字 <a class="header-anchor" href="#可用關鍵字" aria-label="Permalink to &quot;可用關鍵字&quot;">​</a></h2><p>以下關鍵字可用於從建構函式建立你的定義：</p><ul><li><code>factoryOf</code> - 等同於 <code>factory { }</code> - factory 定義</li><li><code>singleOf</code> - 等同於 <code>single { }</code> - single 定義</li><li><code>scopedOf</code> - 等同於 <code>scoped { }</code> - scoped 定義</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>務必不要在你的建構函式中使用任何預設值，因為 Koin 會嘗試用它填充每個參數。</p></div><h2 id="dsl-選項" tabindex="-1">DSL 選項 <a class="header-anchor" href="#dsl-選項" aria-label="Permalink to &quot;DSL 選項&quot;">​</a></h2><p>任何建構函式 DSL 定義，也可以在 lambda 中啟用一些選項：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // definition options</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_qualifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InterfaceA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        createdAtStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此 lambda 中提供了常用選項和 DSL 關鍵字：</p><ul><li><code>named(&quot;a_qualifier&quot;)</code> - 為定義提供一個字串限定符</li><li><code>named&lt;MyType&gt;()</code> - 為定義提供一個類型限定符</li><li><code>bind&lt;MyInterface&gt;()</code> - 為給定的 bean 定義添加要綁定的類型</li><li><code>binds(listOf(...))</code> - 為給定的 bean 定義添加類型列表</li><li><code>createdAtStart()</code> - 在 Koin 啟動時建立單例實例</li></ul><p>你也可以使用 <code>bind</code> 或 <code>binds</code> 運算符，而無需任何 lambda：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) bind InterfaceA::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="注入參數" tabindex="-1">注入參數 <a class="header-anchor" href="#注入參數" aria-label="Permalink to &quot;注入參數&quot;">​</a></h2><p>透過這類宣告，你仍然可以使用注入參數。Koin 會在注入參數和當前依賴項中尋找，以嘗試注入你的建構函式。</p><p>如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>以建構函式 DSL 宣告：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    factoryOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>可以像這樣注入：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a_factory_id&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parametersOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)}</span></span></code></pre></div><h2 id="基於反射的-dsl-自-3-2-起已棄用" tabindex="-1">基於反射的 DSL (自 3.2 起已棄用) <a class="header-anchor" href="#基於反射的-dsl-自-3-2-起已棄用" aria-label="Permalink to &quot;基於反射的 DSL (自 3.2 起已棄用)&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><p>Koin 反射 DSL 現已棄用。請使用上方的 Koin 建構函式 DSL。</p></div>`,31)]))}const E=i(t,[["render",e]]);export{r as __pageData,E as default};
