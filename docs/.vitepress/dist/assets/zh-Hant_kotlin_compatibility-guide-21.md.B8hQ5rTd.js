import{_ as e,c as t,o as r,ag as a}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlin 2.1 相容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/compatibility-guide-21.md","filePath":"zh-Hant/kotlin/compatibility-guide-21.md","lastUpdated":1754307826000}'),n={name:"zh-Hant/kotlin/compatibility-guide-21.md"};function l(i,o,s,p,c,d){return r(),t("div",null,o[0]||(o[0]=[a('<h1 id="kotlin-2-1-相容性指南" tabindex="-1">Kotlin 2.1 相容性指南 <a class="header-anchor" href="#kotlin-2-1-相容性指南" aria-label="Permalink to &quot;Kotlin 2.1 相容性指南&quot;">​</a></h1><p><em><a href="/zh-Hant/kotlin/kotlin-evolution-principles">保持語言現代化</a></em> 和 <em><a href="/zh-Hant/kotlin/kotlin-evolution-principles">舒適的更新</a></em> 是 Kotlin 語言設計的根本原則。前者指出，阻礙語言演進的建構應予移除，後者則要求此類移除必須事先充分溝通，以使程式碼遷移盡可能順暢。</p><p>儘管大多數語言變更已透過其他管道發布，例如更新變更日誌或編譯器警告，本文檔將所有變更彙總，為從 Kotlin 2.0 遷移至 Kotlin 2.1 提供完整參考。</p><h2 id="基本術語" tabindex="-1">基本術語 <a class="header-anchor" href="#基本術語" aria-label="Permalink to &quot;基本術語&quot;">​</a></h2><p>本文檔介紹了幾種相容性：</p><ul><li><em>原始碼</em>：原始碼不相容變更會導致原本能順利編譯（無錯誤或警告）的程式碼無法再編譯。</li><li><em>二進位檔</em>：如果兩個二進位構件在互換後不會導致載入或連結錯誤，則稱它們為二進位檔相容。</li><li><em>行為</em>：如果同一程式在應用變更前後表現出不同行為，則稱該變更為行為不相容。</li></ul><p>請注意，這些定義僅適用於純 Kotlin。從其他語言（例如 Java）角度來看的 Kotlin 程式碼相容性不在本文檔的範圍內。</p><h2 id="語言" tabindex="-1">語言 <a class="header-anchor" href="#語言" aria-label="Permalink to &quot;語言&quot;">​</a></h2><h3 id="移除語言版本-1-4-和-1-5" tabindex="-1">移除語言版本 1.4 和 1.5 <a class="header-anchor" href="#移除語言版本-1-4-和-1-5" aria-label="Permalink to &quot;移除語言版本 1.4 和 1.5&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-60521" target="_blank" rel="noreferrer">KT-60521</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：Kotlin 2.1 引入語言版本 2.1，並移除對語言版本 1.4 和 1.5 的支援。語言版本 1.6 和 1.7 已棄用。</p><p><strong>棄用週期</strong>：</p><ul><li>1.6.0：針對語言版本 1.4 報告警告</li><li>1.9.0：針對語言版本 1.5 報告警告</li><li>2.1.0：針對語言版本 1.6 和 1.7 報告警告；將語言版本 1.4 和 1.5 的警告提升為錯誤</li></ul></blockquote><h3 id="變更-kotlin-native-上-typeof-函數的行為" tabindex="-1">變更 Kotlin/Native 上 <code>typeOf()</code> 函數的行為 <a class="header-anchor" href="#變更-kotlin-native-上-typeof-函數的行為" aria-label="Permalink to &quot;變更 Kotlin/Native 上 `typeOf()` 函數的行為&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-70754" target="_blank" rel="noreferrer">KT-70754</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：行為</p><p><strong>簡要摘要</strong>：Kotlin/Native 上 <code>typeOf()</code> 函數的行為與 Kotlin/JVM 對齊，以確保跨平台的一致性。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：對齊 Kotlin/Native 上 <code>typeOf()</code> 函數的行為</li></ul></blockquote><h3 id="禁止透過類型參數的約束暴露類型" tabindex="-1">禁止透過類型參數的約束暴露類型 <a class="header-anchor" href="#禁止透過類型參數的約束暴露類型" aria-label="Permalink to &quot;禁止透過類型參數的約束暴露類型&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-69653" target="_blank" rel="noreferrer">KT-69653</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：現在禁止透過類型參數約束暴露具有較低可見性的類型，以解決類型可見性規則中的不一致問題。此變更確保類型參數的約束遵循與類別相同的可見性規則，防止 JVM 中 IR 驗證錯誤等問題。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：針對透過類型參數約束暴露具有較低可見性的類型報告警告</li><li>2.2.0：將警告提升為錯誤</li></ul></blockquote><h3 id="禁止繼承具有相同名稱的抽象-var-屬性和-val-屬性" tabindex="-1">禁止繼承具有相同名稱的抽象 <code>var</code> 屬性和 <code>val</code> 屬性 <a class="header-anchor" href="#禁止繼承具有相同名稱的抽象-var-屬性和-val-屬性" aria-label="Permalink to &quot;禁止繼承具有相同名稱的抽象 `var` 屬性和 `val` 屬性&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-58659" target="_blank" rel="noreferrer">KT-58659</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：如果一個類別從介面繼承了一個抽象 <code>var</code> 屬性，同時從父類別繼承了一個具有相同名稱的 <code>val</code> 屬性，現在會觸發編譯錯誤。這解決了此類情況下因缺少 setter 引起的執行時崩潰。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：當一個類別從介面繼承抽象 <code>var</code> 屬性，同時從父類別繼承具有相同名稱的 <code>val</code> 屬性時，報告警告（或在漸進模式下報告錯誤）</li><li>2.2.0：將警告提升為錯誤</li></ul></blockquote><h3 id="報告存取未初始化的列舉項目時的錯誤" tabindex="-1">報告存取未初始化的列舉項目時的錯誤 <a class="header-anchor" href="#報告存取未初始化的列舉項目時的錯誤" aria-label="Permalink to &quot;報告存取未初始化的列舉項目時的錯誤&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-68451" target="_blank" rel="noreferrer">KT-68451</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：編譯器現在在列舉類別或項目初始化期間存取未初始化的列舉項目時會報告錯誤。這使行為與成員屬性初始化規則對齊，防止執行時異常並確保邏輯一致性。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：在存取未初始化的列舉項目時報告錯誤</li></ul></blockquote><h3 id="k2-智慧型轉型傳播的變更" tabindex="-1">K2 智慧型轉型傳播的變更 <a class="header-anchor" href="#k2-智慧型轉型傳播的變更" aria-label="Permalink to &quot;K2 智慧型轉型傳播的變更&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-34" target="_blank" rel="noreferrer">KTLC-34</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：行為</p><p><strong>簡要摘要</strong>：K2 編譯器透過引入推斷變數（例如 <code>val x = y</code>）的類型資訊雙向傳播，變更了其智慧型轉型傳播的行為。明確型別變數（例如 <code>val x: T = y</code>）不再傳播類型資訊，確保更嚴格地遵守聲明的類型。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：啟用新行為</li></ul></blockquote><h3 id="更正-java-子類別中成員擴充屬性覆寫的處理方式" tabindex="-1">更正 Java 子類別中成員擴充屬性覆寫的處理方式 <a class="header-anchor" href="#更正-java-子類別中成員擴充屬性覆寫的處理方式" aria-label="Permalink to &quot;更正 Java 子類別中成員擴充屬性覆寫的處理方式&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-35" target="_blank" rel="noreferrer">KTLC-35</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：行為</p><p><strong>簡要摘要</strong>：由 Java 子類別覆寫的成員擴充屬性的 getter 現在在子類別範圍內被隱藏，使其行為與常規 Kotlin 屬性對齊。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：啟用新行為</li></ul></blockquote><h3 id="更正覆寫-protected-val-的-var-屬性之-getter-和-setter-的可見性對齊" tabindex="-1">更正覆寫 <code>protected val</code> 的 <code>var</code> 屬性之 getter 和 setter 的可見性對齊 <a class="header-anchor" href="#更正覆寫-protected-val-的-var-屬性之-getter-和-setter-的可見性對齊" aria-label="Permalink to &quot;更正覆寫 `protected val` 的 `var` 屬性之 getter 和 setter 的可見性對齊&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-36" target="_blank" rel="noreferrer">KTLC-36</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：二進位檔</p><p><strong>簡要摘要</strong>：覆寫 <code>protected val</code> 屬性的 <code>var</code> 屬性之 getter 和 setter 的可見性現在一致，兩者都繼承了被覆寫 <code>val</code> 屬性的可見性。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：在 K2 中強制執行 getter 和 setter 的一致可見性；K1 不受影響</li></ul></blockquote><h3 id="將-jspecify-空值性不匹配診斷的嚴重程度提升為錯誤" tabindex="-1">將 JSpecify 空值性不匹配診斷的嚴重程度提升為錯誤 <a class="header-anchor" href="#將-jspecify-空值性不匹配診斷的嚴重程度提升為錯誤" aria-label="Permalink to &quot;將 JSpecify 空值性不匹配診斷的嚴重程度提升為錯誤&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-11" target="_blank" rel="noreferrer">KTLC-11</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：來自 <code>org.jspecify.annotations</code> 的空值性不匹配，例如 <code>@NonNull</code>、<code>@Nullable</code> 和 <code>@NullMarked</code>，現在被視為錯誤而非警告，強制執行更嚴格的 Java 互操作性類型安全。要調整這些診斷的嚴重程度，請使用 <code>-Xnullability-annotations</code> 編譯器選項。</p><p><strong>棄用週期</strong>：</p><ul><li>1.6.0：報告潛在空值性不匹配的警告</li><li>1.8.20：將警告擴展到特定的 JSpecify 註解，包括：<code>@Nullable</code>、<code>@NullnessUnspecified</code>、<code>@NullMarked</code>，以及 <code>org.jspecify.nullness</code> 中已棄用的註解（JSpecify 0.2 及更早版本）</li><li>2.0.0：增加對 <code>@NonNull</code> 註解的支援</li><li>2.1.0：將 JSpecify 註解的預設模式變更為 <code>strict</code>，將警告轉換為錯誤；使用 <code>-Xnullability-annotations=@org.jspecify.annotations:warning</code> 或 <code>-Xnullability-annotations=@org.jspecify.annotations:ignore</code> 以覆寫預設行為</li></ul></blockquote><h3 id="變更多載解析以在模糊情況下優先考慮擴充函數而非-invoke-呼叫" tabindex="-1">變更多載解析以在模糊情況下優先考慮擴充函數而非 <code>invoke</code> 呼叫 <a class="header-anchor" href="#變更多載解析以在模糊情況下優先考慮擴充函數而非-invoke-呼叫" aria-label="Permalink to &quot;變更多載解析以在模糊情況下優先考慮擴充函數而非 `invoke` 呼叫&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-37" target="_blank" rel="noreferrer">KTLC-37</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：行為</p><p><strong>簡要摘要</strong>：在模糊情況下，多載解析現在始終優先考慮擴充函數而非 <code>invoke</code> 呼叫。這解決了局部函數和屬性解析邏輯中的不一致問題。此變更僅在重新編譯後生效，不影響預編譯的二進位檔。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：變更多載解析以對於簽名匹配的擴充函數，始終優先考慮擴充函數而非 <code>invoke</code> 呼叫；此變更僅在重新編譯後生效，不影響預編譯的二進位檔</li></ul></blockquote><h3 id="禁止在-jdk-函數介面的-sam-建構函式中從-lambda-表達式返回可空值" tabindex="-1">禁止在 JDK 函數介面的 SAM 建構函式中從 Lambda 表達式返回可空值 <a class="header-anchor" href="#禁止在-jdk-函數介面的-sam-建構函式中從-lambda-表達式返回可空值" aria-label="Permalink to &quot;禁止在 JDK 函數介面的 SAM 建構函式中從 Lambda 表達式返回可空值&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-42" target="_blank" rel="noreferrer">KTLC-42</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：在 JDK 函數介面的 SAM 建構函式中從 Lambda 表達式返回可空值，如果指定的類型引數是不可空的，現在會觸發編譯錯誤。這解決了空值性不匹配可能導致執行時異常的問題，確保更嚴格的類型安全。</p><p><strong>棄用週期</strong>：</p><ul><li>2.0.0：針對 JDK 函數介面 SAM 建構函式中的可空返回值報告棄用警告</li><li>2.1.0：預設啟用新行為</li></ul></blockquote><h3 id="更正-kotlin-native-中私有成員與公有成員衝突的處理方式" tabindex="-1">更正 Kotlin/Native 中私有成員與公有成員衝突的處理方式 <a class="header-anchor" href="#更正-kotlin-native-中私有成員與公有成員衝突的處理方式" aria-label="Permalink to &quot;更正 Kotlin/Native 中私有成員與公有成員衝突的處理方式&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-43" target="_blank" rel="noreferrer">KTLC-43</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：行為</p><p><strong>簡要摘要</strong>：在 Kotlin/Native 中，私有成員不再覆寫或與父類別中的公有成員衝突，使其行為與 Kotlin/JVM 對齊。這解決了覆寫解析中的不一致性，並消除了單獨編譯引起的意外行為。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：Kotlin/Native 中的私有函數和屬性不再覆寫或影響父類別中的公有成員，與 JVM 行為對齊</li></ul></blockquote><h3 id="禁止在公有-inline-函數中存取私有運算子函數" tabindex="-1">禁止在公有 inline 函數中存取私有運算子函數 <a class="header-anchor" href="#禁止在公有-inline-函數中存取私有運算子函數" aria-label="Permalink to &quot;禁止在公有 inline 函數中存取私有運算子函數&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-71" target="_blank" rel="noreferrer">KTLC-71</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：私有運算子函數，例如 <code>getValue()</code>、<code>setValue()</code>、<code>provideDelegate()</code>、<code>hasNext()</code> 和 <code>next()</code>，不能再在公有 inline 函數中存取。</p><p><strong>棄用週期</strong>：</p><ul><li>2.0.0：針對在公有 inline 函數中存取私有運算子函數報告棄用警告</li><li>2.1.0：將警告提升為錯誤</li></ul></blockquote><h3 id="禁止向帶有-unsafevariance-註解的不變參數傳遞無效引數" tabindex="-1">禁止向帶有 <code>@UnsafeVariance</code> 註解的不變參數傳遞無效引數 <a class="header-anchor" href="#禁止向帶有-unsafevariance-註解的不變參數傳遞無效引數" aria-label="Permalink to &quot;禁止向帶有 `@UnsafeVariance` 註解的不變參數傳遞無效引數&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-72" target="_blank" rel="noreferrer">KTLC-72</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：編譯器現在在類型檢查期間會忽略 <code>@UnsafeVariance</code> 註解，對不變類型參數強制執行更嚴格的類型安全。這防止了依賴 <code>@UnsafeVariance</code> 繞過預期類型檢查的無效呼叫。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：啟用新行為</li></ul></blockquote><h3 id="報告警告級別-java-類型中錯誤級別可空引數的空值性錯誤" tabindex="-1">報告警告級別 Java 類型中錯誤級別可空引數的空值性錯誤 <a class="header-anchor" href="#報告警告級別-java-類型中錯誤級別可空引數的空值性錯誤" aria-label="Permalink to &quot;報告警告級別 Java 類型中錯誤級別可空引數的空值性錯誤&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-100" target="_blank" rel="noreferrer">KTLC-100</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：編譯器現在會檢測 Java 方法中的空值性不匹配，其中警告級別的可空類型包含具有更嚴格、錯誤級別空值性的類型引數。這確保了先前在類型引數中被忽略的錯誤能夠正確報告。</p><p><strong>棄用週期</strong>：</p><ul><li>2.0.0：針對 Java 方法中具有更嚴格類型引數的空值性不匹配報告棄用警告</li><li>2.1.0：將警告提升為錯誤</li></ul></blockquote><h3 id="報告不可存取類型的隱式使用" tabindex="-1">報告不可存取類型的隱式使用 <a class="header-anchor" href="#報告不可存取類型的隱式使用" aria-label="Permalink to &quot;報告不可存取類型的隱式使用&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-3" target="_blank" rel="noreferrer">KTLC-3</a></p><p><strong>組件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：編譯器現在會報告函數字面值和類型引數中不可存取類型的使用，防止因類型資訊不完整而導致的編譯和執行時失敗。</p><p><strong>棄用週期</strong>：</p><ul><li>2.0.0：針對參數或接收者為不可存取非泛型類型的函數字面值以及具有不可存取類型引數的類型報告警告；在特定情況下，針對參數或接收者為不可存取泛型類型的函數字面值以及具有不可存取泛型類型引數的類型報告錯誤</li><li>2.1.0：將參數和接收者為不可存取非泛型類型的函數字面值的警告提升為錯誤</li><li>2.2.0：將具有不可存取類型引數的類型的警告提升為錯誤</li></ul></blockquote><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><h3 id="棄用-char-和-string-的區域設定敏感大小寫轉換函數" tabindex="-1">棄用 Char 和 String 的區域設定敏感大小寫轉換函數 <a class="header-anchor" href="#棄用-char-和-string-的區域設定敏感大小寫轉換函數" aria-label="Permalink to &quot;棄用 Char 和 String 的區域設定敏感大小寫轉換函數&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-43023" target="_blank" rel="noreferrer">KT-43023</a></p><p><strong>組件</strong>：kotlin-stdlib</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：在其他 Kotlin 標準函式庫 API 中，針對 <code>Char</code> 和 <code>String</code> 的區域設定敏感大小寫轉換函數，例如 <code>Char.toUpperCase()</code> 和 <code>String.toLowerCase()</code>，已被棄用。請將它們替換為區域設定無關的替代方案，如 <code>String.lowercase()</code>，或明確指定區域設定以實現區域設定敏感行為，例如 <code>String.lowercase(Locale.getDefault())</code>。</p><p>有關 Kotlin 2.1.0 中已棄用的 Kotlin 標準函式庫 API 的完整列表，請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-71628" target="_blank" rel="noreferrer">KT-71628</a>。</p><p><strong>棄用週期</strong>：</p><ul><li>1.4.30：引入區域設定無關的替代方案作為實驗性 API</li><li>1.5.0：棄用區域設定敏感大小寫轉換函數並發出警告</li><li>2.1.0：將警告提升為錯誤</li></ul></blockquote><h3 id="移除-kotlin-stdlib-common-jar-構件" tabindex="-1">移除 <code>kotlin-stdlib-common.jar</code> 構件 <a class="header-anchor" href="#移除-kotlin-stdlib-common-jar-構件" aria-label="Permalink to &quot;移除 `kotlin-stdlib-common.jar` 構件&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-62159" target="_blank" rel="noreferrer">KT-62159</a></p><p><strong>組件</strong>：kotlin-stdlib</p><p><strong>不相容變更類型</strong>：二進位檔</p><p><strong>簡要摘要</strong>：先前用於遺留多平台聲明元數據的 <code>kotlin-stdlib-common.jar</code> 構件已棄用，並由 <code>.klib</code> 檔案取代，作為通用多平台聲明元數據的標準格式。此變更不影響主要的 <code>kotlin-stdlib.jar</code> 或 <code>kotlin-stdlib-all.jar</code> 構件。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：棄用並移除 <code>kotlin-stdlib-common.jar</code> 構件</li></ul></blockquote><h3 id="棄用-appendln-改用-appendline" tabindex="-1">棄用 <code>appendln()</code>，改用 <code>appendLine()</code> <a class="header-anchor" href="#棄用-appendln-改用-appendline" aria-label="Permalink to &quot;棄用 `appendln()`，改用 `appendLine()`&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-27" target="_blank" rel="noreferrer">KTLC-27</a></p><p><strong>組件</strong>：kotlin-stdlib</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：<code>StringBuilder.appendln()</code> 已棄用，改用 <code>StringBuilder.appendLine()</code>。</p><p><strong>棄用週期</strong>：</p><ul><li>1.4.0：<code>appendln()</code> 函數已棄用；使用時報告警告</li><li>2.1.0：將警告提升為錯誤</li></ul></blockquote><h3 id="棄用-kotlin-native-中的凍結相關-api" tabindex="-1">棄用 Kotlin/Native 中的凍結相關 API <a class="header-anchor" href="#棄用-kotlin-native-中的凍結相關-api" aria-label="Permalink to &quot;棄用 Kotlin/Native 中的凍結相關 API&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-69545" target="_blank" rel="noreferrer">KT-69545</a></p><p><strong>組件</strong>：kotlin-stdlib</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：Kotlin/Native 中先前標記為 <code>@FreezingIsDeprecated</code> 註解的凍結相關 API 現在已棄用。這與引入新記憶體管理器對齊，該管理器消除了執行緒共用時凍結物件的需要。有關遷移的詳細資訊，請參閱 <a href="/zh-Hant/kotlin/native-migration-guide#update-your-code">Kotlin/Native 遷移指南</a>。</p><p><strong>棄用週期</strong>：</p><ul><li>1.7.20：棄用凍結相關 API 並發出警告</li><li>2.1.0：將警告提升為錯誤</li></ul></blockquote><h3 id="變更-map-entry-行為以在結構修改時快速失敗" tabindex="-1">變更 <code>Map.Entry</code> 行為以在結構修改時快速失敗 <a class="header-anchor" href="#變更-map-entry-行為以在結構修改時快速失敗" aria-label="Permalink to &quot;變更 `Map.Entry` 行為以在結構修改時快速失敗&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-23" target="_blank" rel="noreferrer">KTLC-23</a></p><p><strong>組件</strong>：kotlin-stdlib</p><p><strong>不相容變更類型</strong>：行為</p><p><strong>簡要摘要</strong>：在其關聯映射被結構修改後，存取 <code>Map.Entry</code> 鍵值對現在會拋出 <code>ConcurrentModificationException</code>。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：當檢測到映射結構修改時拋出異常</li></ul></blockquote><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="棄用-kotlincompilationoutput-resourcesdirprovider" tabindex="-1">棄用 <code>KotlinCompilationOutput#resourcesDirProvider</code> <a class="header-anchor" href="#棄用-kotlincompilationoutput-resourcesdirprovider" aria-label="Permalink to &quot;棄用 `KotlinCompilationOutput#resourcesDirProvider`&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-69255" target="_blank" rel="noreferrer">KT-69255</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：<code>KotlinCompilationOutput#resourcesDirProvider</code> 欄位已棄用。請改用 Gradle 建置腳本中的 <code>KotlinSourceSet.resources</code> 來添加額外的資源目錄。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：<code>KotlinCompilationOutput#resourcesDirProvider</code> 已棄用</li></ul></blockquote><h3 id="棄用-registerkotlinjvmcompiletask-taskname-modulename-函數" tabindex="-1">棄用 <code>registerKotlinJvmCompileTask(taskName, moduleName)</code> 函數 <a class="header-anchor" href="#棄用-registerkotlinjvmcompiletask-taskname-modulename-函數" aria-label="Permalink to &quot;棄用 `registerKotlinJvmCompileTask(taskName, moduleName)` 函數&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-69927" target="_blank" rel="noreferrer">KT-69927</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：<code>registerKotlinJvmCompileTask(taskName, moduleName)</code> 函數已棄用，改用新的 <code>registerKotlinJvmCompileTask(taskName, compilerOptions, explicitApiMode)</code> 函數，該函數現在接受 <code>KotlinJvmCompilerOptions</code>。這允許您傳遞 <code>compilerOptions</code> 實例（通常來自擴充功能或目標），其值將用作任務選項的約定。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：<code>registerKotlinJvmCompileTask(taskName, moduleName)</code> 函數已棄用</li></ul></blockquote><h3 id="棄用-registerkaptgeneratestubstask-taskname-函數" tabindex="-1">棄用 <code>registerKaptGenerateStubsTask(taskName)</code> 函數 <a class="header-anchor" href="#棄用-registerkaptgeneratestubstask-taskname-函數" aria-label="Permalink to &quot;棄用 `registerKaptGenerateStubsTask(taskName)` 函數&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-70383" target="_blank" rel="noreferrer">KT-70383</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：<code>registerKaptGenerateStubsTask(taskName)</code> 函數已棄用。請改用新的 <code>registerKaptGenerateStubsTask(compileTask, kaptExtension, explicitApiMode)</code> 函數。這個新版本允許您將相關 <code>KotlinJvmCompile</code> 任務的值連結為約定，確保兩個任務使用相同的選項集。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：<code>registerKaptGenerateStubsTask(taskName)</code> 函數已棄用</li></ul></blockquote><h3 id="棄用-kotlintoplevelextension-和-kotlintoplevelextensionconfig-介面" tabindex="-1">棄用 <code>KotlinTopLevelExtension</code> 和 <code>KotlinTopLevelExtensionConfig</code> 介面 <a class="header-anchor" href="#棄用-kotlintoplevelextension-和-kotlintoplevelextensionconfig-介面" aria-label="Permalink to &quot;棄用 `KotlinTopLevelExtension` 和 `KotlinTopLevelExtensionConfig` 介面&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-71602" target="_blank" rel="noreferrer">KT-71602</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：行為</p><p><strong>簡要摘要</strong>：<code>KotlinTopLevelExtension</code> 和 <code>KotlinTopLevelExtensionConfig</code> 介面已棄用，改用新的 <code>KotlinTopLevelExtension</code> 介面。此介面合併了 <code>KotlinTopLevelExtensionConfig</code>、<code>KotlinTopLevelExtension</code> 和 <code>KotlinProjectExtension</code>，以簡化 API 階層，並提供對 JVM 工具鏈和編譯器屬性的官方存取。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：<code>KotlinTopLevelExtension</code> 和 <code>KotlinTopLevelExtensionConfig</code> 介面已棄用</li></ul></blockquote><h3 id="從建置執行時依賴項中移除-kotlin-compiler-embeddable" tabindex="-1">從建置執行時依賴項中移除 <code>kotlin-compiler-embeddable</code> <a class="header-anchor" href="#從建置執行時依賴項中移除-kotlin-compiler-embeddable" aria-label="Permalink to &quot;從建置執行時依賴項中移除 `kotlin-compiler-embeddable`&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-61706" target="_blank" rel="noreferrer">KT-61706</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：<code>kotlin-compiler-embeddable</code> 依賴項已從 Kotlin Gradle 外掛程式 (KGP) 的執行時中移除。所需的模組現在直接包含在 KGP 構件中，Kotlin 語言版本限制為 2.0，以支援與 8.2 以下版本 Gradle Kotlin 執行時的相容性。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：使用 <code>kotlin-compiler-embeddable</code> 時報告警告</li><li>2.2.0：將警告提升為錯誤</li></ul></blockquote><h3 id="從-kotlin-gradle-外掛程式-api-隱藏編譯器符號" tabindex="-1">從 Kotlin Gradle 外掛程式 API 隱藏編譯器符號 <a class="header-anchor" href="#從-kotlin-gradle-外掛程式-api-隱藏編譯器符號" aria-label="Permalink to &quot;從 Kotlin Gradle 外掛程式 API 隱藏編譯器符號&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-70251" target="_blank" rel="noreferrer">KT-70251</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：捆綁在 Kotlin Gradle 外掛程式 (KGP) 中的編譯器模組符號，例如 <code>KotlinCompilerVersion</code>，已從公共 API 中隱藏，以防止在建置腳本中意外存取。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：存取這些符號時報告警告</li><li>2.2.0：將警告提升為錯誤</li></ul></blockquote><h3 id="增加對多個穩定性設定檔的支援" tabindex="-1">增加對多個穩定性設定檔的支援 <a class="header-anchor" href="#增加對多個穩定性設定檔的支援" aria-label="Permalink to &quot;增加對多個穩定性設定檔的支援&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-68345" target="_blank" rel="noreferrer">KT-68345</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：Compose 擴充功能中的 <code>stabilityConfigurationFile</code> 屬性已棄用，改用新的 <code>stabilityConfigurationFiles</code> 屬性，該屬性允許指定多個設定檔。</p><p><strong>棄用週期</strong>：</p><ul><li>2.1.0：<code>stabilityConfigurationFile</code> 屬性已棄用</li></ul></blockquote><h3 id="移除已棄用的平台外掛程式-id" tabindex="-1">移除已棄用的平台外掛程式 ID <a class="header-anchor" href="#移除已棄用的平台外掛程式-id" aria-label="Permalink to &quot;移除已棄用的平台外掛程式 ID&quot;">​</a></h3><blockquote><p><strong>問題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-65565" target="_blank" rel="noreferrer">KT-65565</a></p><p><strong>組件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：原始碼</p><p><strong>簡要摘要</strong>：已移除對以下平台外掛程式 ID 的支援：</p><ul><li><code>kotlin-platform-common</code></li><li><code>org.jetbrains.kotlin.platform.common</code></li></ul><p><strong>棄用週期</strong>：</p><ul><li>1.3：平台外掛程式 ID 已棄用</li><li>2.1.0：平台外掛程式 ID 不再支援</li></ul></blockquote>',68)]))}const h=e(n,[["render",l]]);export{u as __pageData,h as default};
