import{_ as p,a as l,b as h,c as k,d as r}from"./chunks/publish-maven-local-gradle-task.BGdngNQl.js";import{_ as o,a as d,b as c,c as g}from"./chunks/youtube.DH2NfHCv.js";import{_ as E,C as t,c as y,o as m,j as i,G as a,ag as u,a as b,w as F}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/create-kotlin-multiplatform-library.md","filePath":"ko/kmp/create-kotlin-multiplatform-library.md","lastUpdated":1755516278000}'),f={name:"ko/kmp/create-kotlin-multiplatform-library.md"};function v(C,s,A,D,_,B){const n=t("secondary-label"),e=t("tldr");return m(),y("div",null,[s[1]||(s[1]=i("h1",{id:"kotlin-멀티플랫폼-라이브러리-생성하기-–-튜토리얼",tabindex:"-1"},[b("Kotlin 멀티플랫폼 라이브러리 생성하기 – 튜토리얼 "),i("a",{class:"header-anchor",href:"#kotlin-멀티플랫폼-라이브러리-생성하기-–-튜토리얼","aria-label":'Permalink to "Kotlin 멀티플랫폼 라이브러리 생성하기 – 튜토리얼"'},"​")],-1)),a(n,{ref:"IntelliJ IDEA"},null,512),a(n,{ref:"Android Studio"},null,512),a(e,null,{default:F(()=>s[0]||(s[0]=[i("p",null,"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE 모두 동일한 핵심 기능과 Kotlin Multiplatform 지원을 공유합니다.",-1)])),_:1}),s[2]||(s[2]=u('<p>이 튜토리얼에서는 IntelliJ IDEA에서 멀티플랫폼 라이브러리를 생성하고, 로컬 Maven 저장소에 라이브러리를 게시하고, 다른 프로젝트에 의존성으로 추가하는 방법을 알아봅니다.</p><p>이 튜토리얼은 피보나치 수열을 생성하는 함수를 포함하는 간단한 라이브러리인 저희 <a href="https://github.com/Kotlin/multiplatform-library-template" target="_blank" rel="noreferrer">멀티플랫폼 라이브러리 템플릿</a>을 기반으로 합니다.</p><h2 id="환경-설정" tabindex="-1">환경 설정 <a class="header-anchor" href="#환경-설정" aria-label="Permalink to &quot;환경 설정&quot;">​</a></h2><p><a href="./quickstart">필요한 모든 도구를 설치하고 최신 버전으로 업데이트하세요</a>.</p><h2 id="프로젝트-생성" tabindex="-1">프로젝트 생성 <a class="header-anchor" href="#프로젝트-생성" aria-label="Permalink to &quot;프로젝트 생성&quot;">​</a></h2><ol><li><p>IntelliJ IDEA에서 <strong>파일</strong> | <strong>새로 만들기</strong> | <strong>버전 제어에서 프로젝트 가져오기</strong>를 선택합니다.</p></li><li><p><a href="https://github.com/Kotlin/multiplatform-library-template" target="_blank" rel="noreferrer">멀티플랫폼 라이브러리 템플릿 프로젝트</a>의 URL을 입력합니다:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/multiplatform-library-template</span></span></code></pre></div></li><li><p><strong>클론</strong>을 클릭합니다.</p></li></ol><h2 id="프로젝트-구조-살펴보기" tabindex="-1">프로젝트 구조 살펴보기 <a class="header-anchor" href="#프로젝트-구조-살펴보기" aria-label="Permalink to &quot;프로젝트 구조 살펴보기&quot;">​</a></h2><p>Kotlin 멀티플랫폼 라이브러리 템플릿 프로젝트는 Kotlin 멀티플랫폼 라이브러리 개발을 위한 기본 구조를 제공합니다. 이 템플릿은 다양한 플랫폼에서 작동할 수 있는 라이브러리를 생성하는 데 도움이 됩니다.</p><p>템플릿 프로젝트에서 <code>library</code>는 핵심 모듈 역할을 하며, 멀티플랫폼 라이브러리의 주요 소스 코드와 빌드 리소스를 포함합니다.</p><p><img src="'+p+`" alt="Multiplatform library project structure" width="350"></p><p><code>library</code> 모듈은 공유 코드뿐만 아니라 플랫폼별 구현을 수용하도록 구성되어 있습니다. 다음은 주요 소스 코드(<code>src</code>)의 내용 분석입니다:</p><ul><li><strong><code>commonMain</code>:</strong> 모든 대상 플랫폼에서 공유되는 Kotlin 코드를 포함합니다. 이 디렉토리는 플랫폼별 API에 의존하지 않는 코드를 배치하는 곳입니다.</li><li><strong><code>androidMain</code>, <code>iosMain</code>, <code>jvmMain</code>, <code>linuxX64Main</code>:</strong> Android, iOS, JVM 및 Linux 플랫폼에 특화된 코드를 포함합니다. 이 디렉토리는 해당 플랫폼에 고유한 기능을 구현하는 곳입니다.</li><li><strong><code>commonTest</code>, <code>androidUnitTest</code>, <code>iosTest</code>, <code>jvmTest</code>, <code>linuxX64Test</code>:</strong> 공유 <code>commonMain</code> 코드에 대한 테스트와 Android, iOS, JVM 및 Linux 플랫폼에 특화된 테스트를 각각 포함합니다.</li></ul><p>이제 모든 플랫폼에서 공유되는 <code>library</code> 코드를 살펴보겠습니다. <code>src/commonMain/kotlin</code> 디렉토리 안에 피보나치 수열 생성기를 정의하는 Kotlin Multiplatform 코드가 포함된 <code>CustomFibi.kt</code> 파일을 찾을 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.github.kotlin.fibonacci</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Defines the function to generate the Fibonacci sequence</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateFibi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Declares the expected values for \`firstElement\` and \`secondElement\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span></code></pre></div><p><code>firstElement</code>와 <code>secondElement</code> 속성은 플랫폼별 코드가 구현할 수 있는 플레이스홀더입니다. 각 대상은 해당 소스 세트에서 <code>actual</code> 키워드를 사용하여 실제 값을 제공해야 합니다.</p><p><code>expect</code> 선언은 <code>actual</code> 구현과 <a href="./multiplatform-connect-to-apis#expected-and-actual-functions-and-properties">매칭됩니다</a>. 이 메커니즘은 플랫폼별 동작이 필요한 크로스 플랫폼 코드를 작성할 때 유용합니다.</p><p>이 경우, 멀티플랫폼 라이브러리 템플릿은 <code>firstElement</code> 및 <code>secondElement</code> 속성의 플랫폼별 구현을 포함합니다. <code>androidMain</code>, <code>iosMain</code>, <code>jvmMain</code>, <code>linuxX64Main</code> 디렉토리에는 이러한 속성에 대한 값을 제공하는 <code>actual</code> 선언이 포함되어 있습니다.</p><p>예를 들어, 다음은 <code>androidMain/kotlin/fibiprops.android.kt</code>에 포함된 Android 구현입니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.github.kotlin.fibonacci</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div><p>다른 플랫폼들도 <code>firstElement</code> 및 <code>secondElement</code> 속성의 값에 차이가 있을 뿐 동일한 패턴을 따릅니다.</p><h2 id="새-플랫폼-추가" tabindex="-1">새 플랫폼 추가 <a class="header-anchor" href="#새-플랫폼-추가" aria-label="Permalink to &quot;새 플랫폼 추가&quot;">​</a></h2><p>이제 템플릿에서 공유 코드와 플랫폼별 코드가 어떻게 작동하는지 익숙해졌으므로, 추가 플랫폼 지원을 추가하여 프로젝트를 확장해 보겠습니다.</p><p><a href="./multiplatform-connect-to-apis#expected-and-actual-functions-and-properties"><code>expect</code>/<code>actual</code> 메커니즘</a>을 사용하여 <a href="https://kotlinlang.org/docs/wasm-overview.html" target="_blank" rel="noreferrer">Kotlin/Wasm</a> 플랫폼에 대한 지원을 구성하세요. <code>firstElement</code> 및 <code>secondElement</code> 속성에 대한 플랫폼별 기능을 구현할 수 있습니다.</p><h3 id="프로젝트에-kotlin-wasm-대상-추가" tabindex="-1">프로젝트에 Kotlin/Wasm 대상 추가 <a class="header-anchor" href="#프로젝트에-kotlin-wasm-대상-추가" aria-label="Permalink to &quot;프로젝트에 Kotlin/Wasm 대상 추가&quot;">​</a></h3><ol><li><p><code>library/build.gradle.kts</code> 파일에 Kotlin/Wasm 대상(<code>wasmJs</code>)과 소스 세트를 추가합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.ExperimentalWasmDsl::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmJsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Wasm-specific dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>빌드 파일에 나타나는 <strong>Gradle 변경 사항 동기화</strong> 아이콘 (<img src="`+l+'" alt="Gradle sync icon" width="30" type="joined">)을 클릭하여 Gradle 파일을 동기화합니다. 또는 Gradle 도구 창에서 새로고침 버튼을 클릭합니다.</p></li></ol><h3 id="wasm용-플랫폼별-코드-생성" tabindex="-1">Wasm용 플랫폼별 코드 생성 <a class="header-anchor" href="#wasm용-플랫폼별-코드-생성" aria-label="Permalink to &quot;Wasm용 플랫폼별 코드 생성&quot;">​</a></h3><p>Wasm 대상을 추가한 후, <code>firstElement</code> 및 <code>secondElement</code>의 플랫폼별 구현을 담을 Wasm 디렉토리가 필요합니다:</p><ol><li><p><code>library/src</code> 디렉토리를 마우스 오른쪽 버튼으로 클릭하고 <strong>새로 만들기 | 디렉토리</strong>를 선택합니다.</p></li><li><p><strong>Gradle 소스 세트</strong> 목록에서 <strong>wasmJsMain/kotlin</strong>을 선택합니다.</p><p><img src="'+h+`" alt="Gradle source sets list" width="450"></p></li><li><p>새로 생성된 <code>wasmJsMain/kotlin</code> 디렉토리를 마우스 오른쪽 버튼으로 클릭하고 <strong>새로 만들기 | Kotlin 클래스/파일</strong>을 선택합니다.</p></li><li><p>파일 이름으로 <strong>fibiprops.wasm</strong>을 입력하고 <strong>파일</strong>을 선택합니다.</p></li><li><p><code>fibiprops.wasm.kt</code> 파일에 다음 코드를 추가합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.github.kotlin.fibonacci</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre></div><p>이 코드는 <code>firstElement</code>를 <code>3</code>, <code>secondElement</code>를 <code>5</code>로 <code>actual</code> 값을 정의하여 Wasm 전용 구현을 설정합니다.</p></li></ol><h3 id="프로젝트-빌드" tabindex="-1">프로젝트 빌드 <a class="header-anchor" href="#프로젝트-빌드" aria-label="Permalink to &quot;프로젝트 빌드&quot;">​</a></h3><p>새 플랫폼으로 프로젝트가 올바르게 컴파일되는지 확인하세요:</p><ol><li><p><strong>보기</strong> | <strong>도구 창</strong> | <strong>Gradle</strong>을 선택하여 Gradle 도구 창을 엽니다.</p></li><li><p><strong>multiplatform-library-template</strong> | <strong>library</strong> | <strong>Tasks</strong> | <strong>build</strong>에서 <strong>build</strong> 태스크를 실행합니다.</p><p><img src="`+k+`" alt="Gradle tool window" width="450"></p><p>또는 <code>multiplatform-library-template</code> 루트 디렉토리에서 터미널에 다음 명령을 실행합니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div></li></ol><p><strong>빌드</strong> 도구 창에서 성공적인 출력을 확인할 수 있습니다.</p><h2 id="로컬-maven-저장소에-라이브러리-게시" tabindex="-1">로컬 Maven 저장소에 라이브러리 게시 <a class="header-anchor" href="#로컬-maven-저장소에-라이브러리-게시" aria-label="Permalink to &quot;로컬 Maven 저장소에 라이브러리 게시&quot;">​</a></h2><p>멀티플랫폼 라이브러리가 로컬에 게시될 준비가 되어 동일한 머신의 다른 프로젝트에서 사용할 수 있습니다.</p><p>라이브러리를 게시하려면 <a href="https://docs.gradle.org/current/userguide/publishing_maven.html" target="_blank" rel="noreferrer"><code>maven-publish</code></a> Gradle 플러그인을 다음과 같이 사용합니다:</p><ol><li><p><code>library/build.gradle.kts</code> 파일에서 <code>plugins { }</code> 블록을 찾아 <code>maven-publish</code> 플러그인을 적용합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // Add the following line:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;maven-publish&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div></li><li><p><code>mavenPublishing { }</code> 블록을 찾아 <code>signAllPublications()</code> 메서드를 주석 처리하여 게시가 로컬 전용임을 나타냅니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavenPublishing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Comment out the following method:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // signAllPublications()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>빌드 파일에 나타나는 <strong>Gradle 변경 사항 동기화</strong> 아이콘 (<img src="`+l+'" alt="Gradle sync icon" width="30" type="joined">)을 클릭하여 Gradle 파일을 동기화합니다. 또는 Gradle 도구 창에서 새로고침 버튼을 클릭합니다.</p></li><li><p>Gradle 도구 창에서 <strong>multiplatform-library-template</strong> | <strong>Tasks</strong> | <strong>publishing</strong>으로 이동하여 <strong>publishToMavenLocal</strong> Gradle 태스크를 실행합니다.</p><p><img src="'+r+`" alt="Multiplatform library Gradle tool window" width="450"></p><p>또는 <code>multiplatform-library-template</code> 루트 디렉토리에서 터미널에 다음 명령을 실행합니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishToMavenLocal</span></span></code></pre></div></li></ol><p>라이브러리가 로컬 Maven 저장소에 게시되었습니다.</p><p>게시된 라이브러리를 찾으려면 파일 탐색기나 터미널을 사용하여 사용자 홈 디렉토리의 <code>.m2\\repository\\io\\github\\kotlin\\library\\1.0.0\\</code>으로 이동하세요.</p><h2 id="다른-프로젝트에-라이브러리를-의존성으로-추가" tabindex="-1">다른 프로젝트에 라이브러리를 의존성으로 추가 <a class="header-anchor" href="#다른-프로젝트에-라이브러리를-의존성으로-추가" aria-label="Permalink to &quot;다른 프로젝트에 라이브러리를 의존성으로 추가&quot;">​</a></h2><p>멀티플랫폼 라이브러리를 로컬 Maven 저장소에 게시한 후, 동일한 머신의 다른 Kotlin 프로젝트에서 이를 사용할 수 있습니다.</p><p>소비 프로젝트의 <code>build.gradle.kts</code> 파일에 게시된 라이브러리에 대한 의존성을 추가합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenLocal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.github.kotlin:library:1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>repositories{}</code> 블록은 Gradle에게 로컬 Maven 저장소에서 라이브러리를 해결하고 공유 코드에서 사용할 수 있도록 지시합니다.</p><p><code>implementation</code> 의존성은 <code>build.gradle.kts</code> 파일에 지정된 라이브러리의 그룹 및 버전으로 구성됩니다.</p><p>다른 멀티플랫폼 프로젝트에 추가하는 경우, 공유 또는 플랫폼별 소스 세트에 추가할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 모든 플랫폼용</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.github.kotlin:library:1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 또는 특정 플랫폼용</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmJsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.github.kotlin:library:1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>소비 프로젝트를 동기화하고 라이브러리를 사용하기 시작하세요!</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>멀티플랫폼 개발을 더 탐구해 보세요:</p><ul><li><a href="./multiplatform-publish-libraries">라이브러리를 Maven Central에 게시</a></li><li><a href="https://kotlinlang.org/docs/api-guidelines-introduction.html" target="_blank" rel="noreferrer">라이브러리 작성자 가이드라인 확인</a></li></ul><p>커뮤니티 참여:</p><ul><li><img src="`+o+'" alt="GitHub" width="25" type="joined"> <strong>Compose Multiplatform GitHub</strong>: <a href="https://github.com/JetBrains/compose-multiplatform" target="_blank" rel="noreferrer">저장소</a>에 별표를 누르고 기여하세요.</li><li><img src="'+d+'" alt="Slack" width="25" type="joined"> <strong>Kotlin Slack</strong>: <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">초대</a>를 받고 <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 채널에 참여하세요.</li><li><img src="'+c+'" alt="Stack Overflow" width="25" type="joined"> <strong>Stack Overflow</strong>: <a href="https://stackoverflow.com/questions/tagged/kotlin-multiplatform" target="_blank" rel="noreferrer">&quot;kotlin-multiplatform&quot; 태그</a>를 구독하세요.</li><li><img src="'+g+'" alt="YouTube" width="25" type="joined"> <strong>Kotlin YouTube 채널</strong>: 구독하고 <a href="https://www.youtube.com/playlist?list=PLlFc5cFwUnmy_oVc9YQzjasSNoAk4hk_C" target="_blank" rel="noreferrer">Kotlin Multiplatform</a>에 대한 비디오를 시청하세요.</li></ul>',52))])}const P=E(f,[["render",v]]);export{q as __pageData,P as default};
