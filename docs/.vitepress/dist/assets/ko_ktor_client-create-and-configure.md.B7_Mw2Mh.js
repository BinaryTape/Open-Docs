import{_ as p,C as s,c as h,o as k,j as a,G as n,ag as r,a as t,w as o}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"클라이언트 생성 및 구성","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-create-and-configure.md","filePath":"ko/ktor/client-create-and-configure.md","lastUpdated":1755457140000}'),d={name:"ko/ktor/client-create-and-configure.md"};function c(g,i,E,y,u,F){const e=s("show-structure"),l=s("link-summary");return k(),h("div",null,[i[1]||(i[1]=a("h1",{id:"클라이언트-생성-및-구성",tabindex:"-1"},[t("클라이언트 생성 및 구성 "),a("a",{class:"header-anchor",href:"#클라이언트-생성-및-구성","aria-label":'Permalink to "클라이언트 생성 및 구성"'},"​")],-1)),n(e,{for:"chapter",depth:"2"}),n(l,null,{default:o(()=>i[0]||(i[0]=[t("Ktor 클라이언트를 생성하고 구성하는 방법을 알아보세요.")])),_:1}),i[2]||(i[2]=r(`<p><a href="./client-dependencies">클라이언트 종속성</a>을 추가한 후, <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client/-http-client/index.html" target="_blank" rel="noreferrer">HttpClient</a> 클래스 인스턴스를 생성하고 <a href="./client-engines">엔진</a>을 파라미터로 전달하여 클라이언트를 인스턴스화할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO)</span></span></code></pre></div><p>이 예시에서는 <a href="https://api.ktor.io/ktor-client/ktor-client-cio/io.ktor.client.engine.cio/-c-i-o/index.html" target="_blank" rel="noreferrer">CIO</a> 엔진을 사용합니다. 엔진을 생략할 수도 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>이 경우, 클라이언트는 <a href="./client-dependencies#engine-dependency">빌드 스크립트에 추가된</a> 아티팩트에 따라 엔진을 자동으로 선택합니다. 클라이언트가 엔진을 선택하는 방법은 <a href="./client-engines#default">기본 엔진</a> 문서 섹션에서 확인할 수 있습니다.</p><h2 id="configure-client" tabindex="-1">클라이언트 구성 <a class="header-anchor" href="#configure-client" aria-label="Permalink to &quot;클라이언트 구성 {id=&quot;configure-client&quot;}&quot;">​</a></h2><h3 id="basic-config" tabindex="-1">기본 구성 <a class="header-anchor" href="#basic-config" aria-label="Permalink to &quot;기본 구성 {id=&quot;basic-config&quot;}&quot;">​</a></h3><p>클라이언트를 구성하려면 클라이언트 생성자에 추가 함수 파라미터를 전달할 수 있습니다. <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client/-http-client-config/index.html" target="_blank" rel="noreferrer">HttpClientConfig</a> 클래스는 클라이언트 구성의 기본 클래스입니다. 예를 들어, <code>expectSuccess</code> 속성을 사용하여 <a href="./client-response-validation">응답 유효성 검사</a>를 활성화할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    expectSuccess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="engine-config" tabindex="-1">엔진 구성 <a class="header-anchor" href="#engine-config" aria-label="Permalink to &quot;엔진 구성 {id=&quot;engine-config&quot;}&quot;">​</a></h3><p><code>engine</code> 함수를 사용하여 엔진을 구성할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure an engine</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>자세한 내용은 <a href="./client-engines">엔진</a> 섹션을 참조하세요.</p><h3 id="plugins" tabindex="-1">플러그인 <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;플러그인 {id=&quot;plugins&quot;}&quot;">​</a></h3><p>플러그인을 설치하려면 <a href="#configure-client">클라이언트 구성 블록</a> 내부의 <code>install</code> 함수에 플러그인을 전달해야 합니다. 예를 들어, <a href="./client-logging">로깅(<code>Logging</code>)</a> 플러그인을 설치하여 HTTP 호출을 기록할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.logging.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Logging)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>install</code> 블록 내에서 플러그인을 구성할 수도 있습니다. 예를 들어, <a href="./client-logging">로깅(<code>Logging</code>)</a> 플러그인의 경우 로거, 로깅 레벨, 그리고 로그 메시지 필터링 조건을 지정할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Logging) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Logger.DEFAULT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LogLevel.HEADERS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            request.url.host.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ktor.io&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        sanitizeHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { header </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> header </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpHeaders.Authorization }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>특정 플러그인은 별도의 <a href="./client-dependencies">종속성</a>을 필요로 할 수 있다는 점에 유의하세요.</p><h2 id="use-client" tabindex="-1">클라이언트 사용 <a class="header-anchor" href="#use-client" aria-label="Permalink to &quot;클라이언트 사용 {id=&quot;use-client&quot;}&quot;">​</a></h2><p>필요한 모든 종속성을 <a href="./client-dependencies">추가</a>하고 클라이언트를 생성한 후, 이를 사용하여 <a href="./client-requests">요청을 수행</a>하고 <a href="./client-responses">응답을 수신</a>할 수 있습니다.</p><h2 id="close-client" tabindex="-1">클라이언트 닫기 <a class="header-anchor" href="#close-client" aria-label="Permalink to &quot;클라이언트 닫기 {id=&quot;close-client&quot;}&quot;">​</a></h2><p>HTTP 클라이언트 작업을 마친 후에는 스레드, 연결, 코루틴용 <code>CoroutineScope</code>와 같은 리소스를 해제해야 합니다. 이를 위해 <code>HttpClient.close</code> 함수를 호출하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><code>close</code> 함수는 새 요청 생성을 금지하지만 현재 활성화된 요청을 종료하지는 않습니다. 모든 클라이언트 요청이 완료된 후에만 리소스가 해제됩니다.</p><p>단일 요청에 <code>HttpClient</code>를 사용해야 하는 경우, 코드 블록 실행 후 자동으로 <code>close</code>를 호출하는 <code>use</code> 함수를 호출하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><code>HttpClient</code>를 생성하는 것은 비용이 많이 드는 작업이므로, 여러 요청을 처리할 경우 해당 인스턴스를 재사용하는 것이 좋습니다.</p></blockquote>`,28))])}const f=p(d,[["render",c]]);export{b as __pageData,f as default};
