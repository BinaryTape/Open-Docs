import{_ as c,C as t,c as u,o as g,j as s,G as a,ag as p,a as i,w as n}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/elastic-beanstalk.md","filePath":"ktor/elastic-beanstalk.md","lastUpdated":1755457140000}'),m={name:"ktor/elastic-beanstalk.md"};function b(E,e,f,y,v,F){const d=t("show-structure"),o=t("control"),h=t("tldr"),l=t("code-block"),r=t("TabItem"),k=t("Tabs");return g(),u("div",null,[e[8]||(e[8]=s("h1",{id:"aws-elastic-beanstalk",tabindex:"-1"},[i("AWS Elastic Beanstalk "),s("a",{class:"header-anchor",href:"#aws-elastic-beanstalk","aria-label":'Permalink to "AWS Elastic Beanstalk"'},"​")],-1)),a(d,{for:"chapter",depth:"2"}),a(h,null,{default:n(()=>[s("p",null,[a(o,null,{default:n(()=>e[0]||(e[0]=[i("初始项目")])),_:1}),e[1]||(e[1]=i(": ")),e[2]||(e[2]=s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/embedded-server"},"embedded-server",-1)),e[3]||(e[3]=i(" 或 ")),e[4]||(e[4]=s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main"},"engine-main",-1))]),s("p",null,[a(o,null,{default:n(()=>e[5]||(e[5]=[i("最终项目")])),_:1}),e[6]||(e[6]=i(": ")),e[7]||(e[7]=s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/aws-elastic-beanstalk"},"aws-elastic-beanstalk",-1))])]),_:1}),e[9]||(e[9]=p(`<p>在本教程中，我们将向你展示如何准备 Ktor 应用程序并将其部署到 AWS Elastic Beanstalk。你可以根据<a href="./server-create-and-configure">创建 Ktor 服务器</a>的方式，使用以下初始项目之一：</p><ul><li><a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/embedded-server" target="_blank" rel="noreferrer">embedded-server</a></li><li><a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">engine-main</a></li></ul><blockquote><p>关于部署 Java 应用程序的更多信息，请参阅 <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Java.html" target="_blank" rel="noreferrer">Elastic Beanstalk 文档</a>。</p></blockquote><h2 id="prerequisites" tabindex="-1">先决条件 <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;先决条件 {id=&quot;prerequisites&quot;}&quot;">​</a></h2><p>在开始本教程之前，你需要创建一个 AWS 账户。</p><h2 id="clone" tabindex="-1">克隆示例应用程序 <a class="header-anchor" href="#clone" aria-label="Permalink to &quot;克隆示例应用程序 {id=&quot;clone&quot;}&quot;">​</a></h2><p>要打开示例应用程序，请按照以下步骤操作：</p><ol><li>克隆 Ktor 文档版本库，然后打开 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets" target="_blank" rel="noreferrer">codeSnippets</a> 项目。</li><li>打开 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/embedded-server" target="_blank" rel="noreferrer">embedded-server</a> 或 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">engine-main</a> 示例。这些示例演示了<a href="./server-create-and-configure">创建和配置 Ktor 服务器</a>的不同方法：在代码中配置或使用配置文件。部署这些项目的唯一区别在于如何<a href="#port">指定用于监听传入请求的端口</a>。</li></ol><h2 id="prepare-app" tabindex="-1">准备应用程序 <a class="header-anchor" href="#prepare-app" aria-label="Permalink to &quot;准备应用程序 {id=&quot;prepare-app&quot;}&quot;">​</a></h2><h3 id="port" tabindex="-1">步骤 1：配置端口 <a class="header-anchor" href="#port" aria-label="Permalink to &quot;步骤 1：配置端口 {id=&quot;port&quot;}&quot;">​</a></h3><p>首先，你需要指定一个用于监听传入请求的端口。Elastic Beanstalk 会将请求转发到你应用程序的 5000 端口。可选地，你可以通过设置 <code>PORT</code> 环境变量来覆盖默认端口。根据<a href="./server-create-and-configure">配置 Ktor 服务器</a>的方式，你可以通过以下方式之一配置端口：</p><ul><li><p>如果你选择了服务器配置在代码中指定的 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/embedded-server" target="_blank" rel="noreferrer">embedded-server</a> 示例，你可以使用 <code>System.getenv</code> 获取环境变量值，或者在未指定环境变量的情况下使用默认值 <em>5000</em>。打开位于 <code>src/main/kotlin/com/example</code> 文件夹中的 <code>Application.kt</code> 文件，并按如下所示更改 <code>embeddedServer</code> 函数的 <code>port</code> 参数值：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   embeddedServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Netty, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PORT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wait </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>如果你选择了服务器配置在 <code>application.conf</code> 文件中指定的 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">engine-main</a> 示例，你可以使用 <code>\${ENV}</code> 语法将环境变量赋值给 <code>port</code> 参数。打开位于 <code>src/main/resources</code> 中的 <code>application.conf</code> 文件，并按如下所示更新它：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ktor {</span></span>
<span class="line"><span>    deployment {</span></span>
<span class="line"><span>        port = 5000</span></span>
<span class="line"><span>        port = \${?PORT}</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div></li></ul><h3 id="configure-ktor-plugin" tabindex="-1">步骤 2：应用 Ktor 插件 <a class="header-anchor" href="#configure-ktor-plugin" aria-label="Permalink to &quot;步骤 2：应用 Ktor 插件 {id=&quot;configure-ktor-plugin&quot;}&quot;">​</a></h3><p>本教程演示了如何使用 <a href="./server-fatjar">fat JAR</a> 将应用程序部署到 Elastic Beanstalk。要生成 fat JAR，你需要应用 Ktor 插件。打开 <code>build.gradle.kts</code> 文件，并将该插件添加到 <code>plugins</code> 代码块中：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugins {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.ktor.plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后，确保已配置<a href="./server-dependencies#create-entry-point">主应用程序类</a>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mainClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.ktor.server.netty.EngineMain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="build" tabindex="-1">构建 Fat JAR <a class="header-anchor" href="#build" aria-label="Permalink to &quot;构建 Fat JAR {id=&quot;build&quot;}&quot;">​</a></h2><p>要构建 Fat JAR，请打开终端并执行由 <a href="#configure-ktor-plugin">Ktor 插件</a>提供的 <code>buildFatJar</code> 任务：</p>`,19)),a(k,{group:"os"},{default:n(()=>[a(r,{title:"Linux/macOS","group-key":"unix"},{default:n(()=>[a(l,{code:"./gradlew :aws-elastic-beanstalk:buildFatJar"})]),_:1}),a(r,{title:"Windows","group-key":"windows"},{default:n(()=>[a(l,{code:"gradlew.bat :aws-elastic-beanstalk:buildFatJar"})]),_:1})]),_:1}),e[10]||(e[10]=p(`<p>此构建完成后，你会在 <code>build/libs</code> 目录中看到 <code>aws-elastic-beanstalk-all.jar</code> 文件。</p><h2 id="deploy-app" tabindex="-1">部署应用程序 <a class="header-anchor" href="#deploy-app" aria-label="Permalink to &quot;部署应用程序 {id=&quot;deploy-app&quot;}&quot;">​</a></h2><p>要部署应用程序，请登录 <a href="https://aws.amazon.com/console/" target="_blank" rel="noreferrer">AWS Management Console</a> 并按照以下步骤操作：</p><ol><li>在 <strong>AWS 服务</strong>组中打开 <strong>Elastic Beanstalk</strong> 服务。</li><li>在打开的页面上，点击<strong>创建应用程序</strong>。</li><li>指定以下应用程序设置： <ul><li><strong>应用程序名称</strong>：指定应用程序名称（例如，<em>Sample Ktor app</em>）。</li><li><strong>平台</strong>：从列表中选择 <em>Java</em>。</li><li><strong>平台分支</strong>：选择 <em>Corretto 11 running on 64bit Amazon Linux 2</em>。</li><li><strong>应用程序代码</strong>：选择 <em>上传你的代码</em>。</li><li><strong>源代码来源</strong>：选择 <em>本地文件</em>。然后，点击<strong>选择文件</strong>按钮，选择在<a href="#build">上一步</a>中生成的 Fat JAR。等待文件上传完成。</li></ul></li><li>点击<strong>创建应用程序</strong>按钮，等待几分钟，直到 Beanstalk 创建环境并发布应用程序：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INFO    Instance deployment completed successfully.</span></span>
<span class="line"><span>INFO    Application available at Samplektorapp-env.eba-bnye2kpu.us-east-2.elasticbeanstalk.com.</span></span>
<span class="line"><span>INFO    Successfully launched environment: Samplektorapp-env</span></span></code></pre></div></li></ol>`,4))])}const C=c(m,[["render",b]]);export{q as __pageData,C as default};
