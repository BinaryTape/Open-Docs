import{_ as e,c as s,o as a,ag as n}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"Koin DSL","description":"","frontmatter":{"title":"Koin DSL"},"headers":[],"relativePath":"koin/reference/koin-core/dsl.md","filePath":"koin/reference/koin-core/dsl.md","lastUpdated":1748365453000}'),o={name:"koin/reference/koin-core/dsl.md"};function l(t,i,d,p,c,h){return a(),s("div",null,i[0]||(i[0]=[n(`<h1 id="koin-dsl" tabindex="-1">Koin DSL <a class="header-anchor" href="#koin-dsl" aria-label="Permalink to &quot;Koin DSL&quot;">​</a></h1><p>得益于 Kotlin 语言的强大，Koin 提供了一种 DSL（领域特定语言）来帮助你描述你的应用程序，而不是通过注解或生成代码。凭借其 Kotlin DSL，Koin 提供了一个智能的函数式 API 来帮助你准备依赖注入。</p><h2 id="应用程序与模块-dsl" tabindex="-1">应用程序与模块 DSL <a class="header-anchor" href="#应用程序与模块-dsl" aria-label="Permalink to &quot;应用程序与模块 DSL&quot;">​</a></h2><p>Koin 提供了几个关键字，让你能够描述 Koin 应用程序的各个元素：</p><ul><li>应用程序 DSL：用于描述 Koin 容器配置</li><li>模块 DSL：用于描述需要注入的组件</li></ul><h2 id="应用程序-dsl" tabindex="-1">应用程序 DSL <a class="header-anchor" href="#应用程序-dsl" aria-label="Permalink to &quot;应用程序 DSL&quot;">​</a></h2><p><code>KoinApplication</code> 实例是 Koin 容器实例的配置。这允许你配置日志记录、属性加载和模块。</p><p>要构建一个新的 <code>KoinApplication</code>，请使用以下函数：</p><ul><li><code>koinApplication { }</code> - 创建一个 <code>KoinApplication</code> 容器配置</li><li><code>startKoin { }</code> - 创建一个 <code>KoinApplication</code> 容器配置并将其注册到 <code>GlobalContext</code> 中，以允许使用 <code>GlobalContext</code> API</li></ul><p>要配置你的 <code>KoinApplication</code> 实例，你可以使用以下任何函数：</p><ul><li><code>logger( )</code> - 描述要使用的级别和 <code>Logger</code> 实现（默认使用 <code>EmptyLogger</code>）</li><li><code>modules( )</code> - 设置要在容器中加载的 Koin 模块列表（列表或可变参数列表）</li><li><code>properties()</code> - 将 <code>HashMap</code> 属性加载到 Koin 容器中</li><li><code>fileProperties( )</code> - 从给定文件加载属性到 Koin 容器中</li><li><code>environmentProperties( )</code> - 从操作系统环境加载属性到 Koin 容器中</li><li><code>createEagerInstances()</code> - 创建急切实例（标记为 <code>createdAtStart</code> 的 <code>Single</code> 定义）</li></ul><h2 id="koinapplication-实例-全局-vs-局部" tabindex="-1">KoinApplication 实例：全局 vs 局部 <a class="header-anchor" href="#koinapplication-实例-全局-vs-局部" aria-label="Permalink to &quot;KoinApplication 实例：全局 vs 局部&quot;">​</a></h2><p>如你所见，我们可以通过两种方式描述 Koin 容器配置：<code>koinApplication</code> 或 <code>startKoin</code> 函数。</p><ul><li><code>koinApplication</code> 描述一个 Koin 容器实例</li><li><code>startKoin</code> 描述一个 Koin 容器实例并将其注册到 Koin 的 <code>GlobalContext</code> 中</li></ul><p>通过将你的容器配置注册到 <code>GlobalContext</code> 中，全局 API 可以直接使用它。任何 <code>KoinComponent</code> 都指向一个 <code>Koin</code> 实例。默认情况下，我们使用 <code>GlobalContext</code> 中的实例。</p><p>有关更多信息，请查看有关自定义 Koin 实例的章节。</p><h2 id="启动-koin" tabindex="-1">启动 Koin <a class="header-anchor" href="#启动-koin" aria-label="Permalink to &quot;启动 Koin&quot;">​</a></h2><p>启动 Koin 意味着在 <code>GlobalContext</code> 中运行一个 <code>KoinApplication</code> 实例。</p><p>要使用模块启动 Koin 容器，我们只需像这样使用 <code>startKoin</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在全局上下文启动一个 KoinApplication</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 声明使用的日志记录器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 声明使用的模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coffeeAppModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="模块-dsl" tabindex="-1">模块 DSL <a class="header-anchor" href="#模块-dsl" aria-label="Permalink to &quot;模块 DSL&quot;">​</a></h2><p>Koin 模块收集你将为应用程序注入/组合的定义。要创建新模块，只需使用以下函数：</p><ul><li><code>module { // module content }</code> - 创建一个 Koin 模块</li></ul><p>要在模块中描述你的内容，你可以使用以下函数：</p><ul><li><code>factory { //definition }</code> - 提供一个 <code>factory</code> bean 定义</li><li><code>single { //definition }</code> - 提供一个 <code>singleton</code> bean 定义（也别名为 <code>bean</code>）</li><li><code>get()</code> - 解析组件依赖（也可以使用名称、作用域或参数）</li><li><code>bind()</code> - 为给定的 bean 定义添加要绑定的类型</li><li><code>binds()</code> - 为给定的 bean 定义添加类型数组</li><li><code>scope { // scope group }</code> - 为 <code>scoped</code> 定义指定一个逻辑组</li><li><code>scoped { //definition }</code> - 提供一个只存在于某个作用域的 <code>bean</code> 定义</li></ul><p>注意：<code>named()</code> 函数允许你通过字符串、枚举或类型提供一个限定符。它用于为你的定义命名。</p><h3 id="编写模块" tabindex="-1">编写模块 <a class="header-anchor" href="#编写模块" aria-label="Permalink to &quot;编写模块&quot;">​</a></h3><p>Koin 模块是<em>声明所有组件的空间</em>。使用 <code>module</code> 函数声明一个 Koin 模块：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 你的依赖项在此</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此模块中，你可以声明如下所述的组件。</p><h3 id="withoptions-dsl-选项-自-3-2-起" tabindex="-1">withOptions - DSL 选项（自 3.2 起） <a class="header-anchor" href="#withoptions-dsl-选项-自-3-2-起" aria-label="Permalink to &quot;withOptions - DSL 选项（自 3.2 起）&quot;">​</a></h3><p>与新的 <a href="/koin/reference/koin-core/dsl-update">构造函数 DSL</a> 定义一样，你可以使用 <code>withOptions</code> 操作符在“常规”定义上指定定义选项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) } </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;qualifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        createdAtStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此选项 <code>lambda</code> 中，你可以指定以下选项：</p><ul><li><code>named(&quot;a_qualifier&quot;)</code> - 为定义提供一个字符串限定符</li><li><code>named&lt;MyType&gt;()</code> - 为定义提供一个类型限定符</li><li><code>bind&lt;MyInterface&gt;()</code> - 为给定的 bean 定义添加要绑定的类型</li><li><code>binds(arrayOf(...))</code> - 为给定的 bean 定义添加类型数组</li><li><code>createdAtStart()</code> - 在 Koin 启动时创建 <code>single</code> 实例</li></ul>`,35)]))}const g=e(o,[["render",l]]);export{k as __pageData,g as default};
