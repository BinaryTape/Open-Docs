import{_ as r,C as l,c as o,o as d,ag as h,j as i,G as t,w as n,a}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin 1.6.0 的新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew16.md","filePath":"zh-Hant/kotlin/whatsnew16.md","lastUpdated":1754307826000}'),E={name:"zh-Hant/kotlin/whatsnew16.md"};function c(g,s,y,u,F,b){const e=l("tab"),k=l("tabs"),p=l("YouTubeVideo");return d(),o("div",null,[s[6]||(s[6]=h(`<h1 id="kotlin-1-6-0-的新功能" tabindex="-1">Kotlin 1.6.0 的新功能 <a class="header-anchor" href="#kotlin-1-6-0-的新功能" aria-label="Permalink to &quot;Kotlin 1.6.0 的新功能&quot;">​</a></h1><p><a href="/zh-Hant/kotlin/releases#release-details">發布日期：2021 年 11 月 16 日</a></p><p>Kotlin 1.6.0 引入了新的語言功能，對現有功能進行了優化和改進，並對 Kotlin 標準函式庫進行了許多改進。</p><p>您也可以在<a href="https://blog.jetbrains.com/kotlin/2021/11/kotlin-1-6-0-is-released/" target="_blank" rel="noreferrer">發布部落格文章</a>中找到這些變更的概述。</p><h2 id="語言" tabindex="-1">語言 <a class="header-anchor" href="#語言" aria-label="Permalink to &quot;語言&quot;">​</a></h2><p>Kotlin 1.6.0 穩定化了先前 1.5.30 版本中引入的幾項預覽語言功能：</p><ul><li><a href="#stable-exhaustive-when-statements-for-enum-sealed-and-boolean-subjects">針對列舉、密封類別和布林主題的穩定詳盡 <code>when</code> 陳述式</a></li><li><a href="#stable-suspending-functions-as-supertypes">作為超型別的穩定暫停函式</a></li><li><a href="#stable-suspend-conversions">穩定的暫停轉換</a></li><li><a href="#stable-instantiation-of-annotation-classes">註解類別的穩定實例化</a></li></ul><p>它還包括各種型別推斷改進和對類別型別參數上的註解支援：</p><ul><li><a href="#improved-type-inference-for-recursive-generic-types">遞迴泛型型別的改進型別推斷</a></li><li><a href="#changes-to-builder-inference">建造者推斷的變更</a></li><li><a href="#support-for-annotations-on-class-type-parameters">支援類別型別參數上的註解</a></li></ul><h3 id="針對列舉、密封類別和布林主題的穩定詳盡-when-陳述式" tabindex="-1">針對列舉、密封類別和布林主題的穩定詳盡 <code>when</code> 陳述式 <a class="header-anchor" href="#針對列舉、密封類別和布林主題的穩定詳盡-when-陳述式" aria-label="Permalink to &quot;針對列舉、密封類別和布林主題的穩定詳盡 \`when\` 陳述式&quot;">​</a></h3><p>一個<strong>詳盡的</strong> <a href="/zh-Hant/kotlin/control-flow#when-expressions-and-statements"><code>when</code></a> 陳述式包含其主題所有可能型別或值的分支，或者包含某些型別加上一個 <code>else</code> 分支。它涵蓋了所有可能的情況，讓您的程式碼更安全。</p><p>我們很快將禁止非詳盡的 <code>when</code> 陳述式，以使行為與 <code>when</code> 表達式保持一致。為了確保平順遷移，Kotlin 1.6.0 會針對以列舉、密封類別或布林值為主題的非詳盡 <code>when</code> 陳述式報告警告。這些警告將在未來版本中變成錯誤。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PhoneCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">messageCost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error: &#39;when&#39; expression must be exhaustive</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Contact.PhoneCall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sendMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contact: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Starting with 1.6.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Warning: Non exhaustive &#39;when&#39; statements on Boolean will be</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // prohibited in 1.7, add &#39;false&#39; branch or &#39;else&#39; branch instead </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Warning: Non exhaustive &#39;when&#39; statements on sealed class/interface will be</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // prohibited in 1.7, add &#39;is TextMessage&#39; branch or &#39;else&#39; branch instead</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contact) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Contact.PhoneCall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-47709" target="_blank" rel="noreferrer">此 YouTrack 問題</a> 以獲取有關此變更及其影響的更詳細解釋。</p><h3 id="作為超型別的穩定暫停函式" tabindex="-1">作為超型別的穩定暫停函式 <a class="header-anchor" href="#作為超型別的穩定暫停函式" aria-label="Permalink to &quot;作為超型別的穩定暫停函式&quot;">​</a></h3><p>在 Kotlin 1.6.0 中，暫停函式型別的實作已變得<a href="/zh-Hant/kotlin/components-stability">穩定</a>。<a href="/zh-Hant/kotlin/whatsnew1530#suspending-functions-as-supertypes">1.5.30 中提供了預覽版</a>。</p><p>此功能在使用 Kotlin 協程並接受暫停函式型別的 API 設計中非常有用。您現在可以透過將所需行為封裝在實作暫停函式型別的獨立類別中來簡化您的程式碼。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClickAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> launchOnClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(action: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) {}</span></span></code></pre></div><p>您可以在先前僅允許 lambda 表達式和暫停函式參考的地方使用此類別的實例：<code>launchOnClick(MyClickAction())</code>。</p><p>目前有兩個來自實作細節的限制：</p><ul><li>您不能在超型別列表中混合普通函式型別和暫停型別。</li><li>您不能使用多個暫停函式超型別。</li></ul><h3 id="穩定的暫停轉換" tabindex="-1">穩定的暫停轉換 <a class="header-anchor" href="#穩定的暫停轉換" aria-label="Permalink to &quot;穩定的暫停轉換&quot;">​</a></h3><p>Kotlin 1.6.0 引入了從普通函式型別到暫停函式型別的<a href="/zh-Hant/kotlin/components-stability">穩定</a>轉換。從 1.4.0 開始，此功能支援函式字面值和可呼叫參考。在 1.6.0 中，它適用於任何形式的表達式。作為呼叫引數，您現在可以在預期為暫停型別的地方傳遞任何合適的普通函式型別的表達式。編譯器將自動執行隱式轉換。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSuspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(suspending: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> suspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regular: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getSuspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getSuspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getSuspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regular)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="註解類別的穩定實例化" tabindex="-1">註解類別的穩定實例化 <a class="header-anchor" href="#註解類別的穩定實例化" aria-label="Permalink to &quot;註解類別的穩定實例化&quot;">​</a></h3><p>Kotlin 1.5.30 <a href="/zh-Hant/kotlin/whatsnew1530#instantiation-of-annotation-classes">引入了</a>對 JVM 平台上註解類別實例化的實驗性支援。在 1.6.0 中，此功能預設適用於 Kotlin/JVM 和 Kotlin/JS。</p><p>在<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/annotation-instantiation.md" target="_blank" rel="noreferrer">此 KEEP</a> 中了解有關註解類別實例化的更多資訊。</p><h3 id="遞迴泛型型別的改進型別推斷" tabindex="-1">遞迴泛型型別的改進型別推斷 <a class="header-anchor" href="#遞迴泛型型別的改進型別推斷" aria-label="Permalink to &quot;遞迴泛型型別的改進型別推斷&quot;">​</a></h3><p>Kotlin 1.5.30 引入了對遞迴泛型型別的型別推斷改進，這允許僅根據對應型別參數的上界來推斷其型別引數。此改進可透過編譯器選項獲得。在 1.6.0 及更高版本中，它預設啟用。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Before 1.5.30</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostgreSQLContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(DockerImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgres:13-alpine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  withDatabaseName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  withUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  withPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  withInitScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sql/schema.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// With compiler option in 1.5.30 or by default starting with 1.6.0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostgreSQLContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DockerImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgres:13-alpine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withDatabaseName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withInitScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sql/schema.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="建造者推斷的變更" tabindex="-1">建造者推斷的變更 <a class="header-anchor" href="#建造者推斷的變更" aria-label="Permalink to &quot;建造者推斷的變更&quot;">​</a></h3><p>建造者推斷是一種型別推斷風味，在呼叫泛型建造者函式時非常有用。它可以藉助其 lambda 引數內呼叫的型別資訊來推斷呼叫的型別引數。</p><p>我們正在進行多項變更，使我們更接近完全穩定的建造者推斷。從 1.6.0 開始：</p><ul><li><p>您可以在建造者 lambda 內呼叫返回尚未推斷型別的實例，而無需指定 <a href="/zh-Hant/kotlin/whatsnew1530#eliminating-builder-inference-restrictions">1.5.30 中引入的</a> <code>-Xunrestricted-builder-inference</code> 編譯器選項。</p></li><li><p>透過 <code>-Xenable-builder-inference</code>，您可以編寫自己的建造者而無需應用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-builder-inference/" target="_blank" rel="noreferrer"><code>@BuilderInference</code></a> 註解。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>請注意，這些建造者的客戶需要指定相同的 <code>-Xenable-builder-inference</code> 編譯器選項。</p></div></li><li><p>透過 <code>-Xenable-builder-inference</code>，如果普通型別推斷無法獲取足夠的型別資訊，建造者推斷會自動啟用。</p></li></ul><p><a href="/zh-Hant/kotlin/using-builders-with-builder-inference">了解如何編寫自訂泛型建造者</a>。</p><h3 id="支援類別型別參數上的註解" tabindex="-1">支援類別型別參數上的註解 <a class="header-anchor" href="#支援類別型別參數上的註解" aria-label="Permalink to &quot;支援類別型別參數上的註解&quot;">​</a></h3><p>支援類別型別參數上的註解看起來像這樣：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.TYPE_PARAMETER)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BoxContent</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BoxContent</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {}</span></span></code></pre></div><p>所有型別參數上的註解都會發出到 JVM 位元組碼中，以便註解處理器能夠使用它們。</p><p>有關主要用例，請閱讀<a href="https://youtrack.jetbrains.com/issue/KT-43714" target="_blank" rel="noreferrer">此 YouTrack 問題</a>。</p><p>了解有關<a href="/zh-Hant/kotlin/annotations">註解</a>的更多資訊。</p><h2 id="支援較長期間的舊版-api" tabindex="-1">支援較長期間的舊版 API <a class="header-anchor" href="#支援較長期間的舊版-api" aria-label="Permalink to &quot;支援較長期間的舊版 API&quot;">​</a></h2><p>從 Kotlin 1.6.0 開始，我們將支援三個先前 API 版本的開發，而不是兩個，以及目前的穩定版本。目前，我們支援 1.3、1.4、1.5 和 1.6 版本。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>對於 Kotlin/JVM，從 1.6.0 開始，編譯器可以產生對應於 JVM 17 的位元組碼版本的類別。新語言版本還包括優化委託屬性和可重複註解，這些都在我們的路線圖中：</p><ul><li><a href="#repeatable-annotations-with-runtime-retention-for-1-8-jvm-target">針對 1.8 JVM 目標的具有執行時保留的可重複註解</a></li><li><a href="#optimize-delegated-properties-which-call-get-set-on-the-given-kproperty-instance">優化在給定 KProperty 實例上呼叫 get/set 的委託屬性</a></li></ul><h3 id="針對-1-8-jvm-目標的具有執行時保留的可重複註解" tabindex="-1">針對 1.8 JVM 目標的具有執行時保留的可重複註解 <a class="header-anchor" href="#針對-1-8-jvm-目標的具有執行時保留的可重複註解" aria-label="Permalink to &quot;針對 1.8 JVM 目標的具有執行時保留的可重複註解&quot;">​</a></h3><p>Java 8 引入了<a href="https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html" target="_blank" rel="noreferrer">可重複註解</a>，它們可以多次應用於單一程式碼元素。此功能要求 Java 程式碼中存在兩個宣告：標記為 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Repeatable.html" target="_blank" rel="noreferrer"><code>@java.lang.annotation.Repeatable</code></a> 的可重複註解本身，以及用於保存其值的包含註解。</p><p>Kotlin 也有可重複註解，但僅要求在註解宣告中存在 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-repeatable/" target="_blank" rel="noreferrer"><code>@kotlin.annotation.Repeatable</code></a> 即可使其可重複。在 1.6.0 之前，此功能僅支援 <code>SOURCE</code> 保留，並且與 Java 的可重複註解不相容。Kotlin 1.6.0 移除了這些限制。<code>@kotlin.annotation.Repeatable</code> 現在接受任何保留策略，並使註解在 Kotlin 和 Java 中都可重複。Java 的可重複註解現在也從 Kotlin 側獲得支援。</p><p>雖然您可以宣告包含註解，但這並非必需。例如：</p><ul><li><p>如果註解 <code>@Tag</code> 標記為 <code>@kotlin.annotation.Repeatable</code>，Kotlin 編譯器會自動產生一個名為 <code>@Tag.Container</code> 的包含註解類別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Repeatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The compiler generates @Tag.Container containing annotation</span></span></code></pre></div></li><li><p>要為包含註解設定自訂名稱，請應用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvmrepeatable/" target="_blank" rel="noreferrer"><code>@kotlin.jvm.JvmRepeatable</code></a> 元註解，並將明確宣告的包含註解類別作為引數傳遞：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRepeatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tags::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span></span></code></pre></div></li></ul><p>Kotlin 反射現在透過新函數 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/find-annotations.html" target="_blank" rel="noreferrer"><code>KAnnotatedElement.findAnnotations()</code></a> 支援 Kotlin 和 Java 的可重複註解。</p><p>在 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/repeatable-annotations.md" target="_blank" rel="noreferrer">此 KEEP</a> 中了解有關 Kotlin 可重複註解的更多資訊。</p><h3 id="優化在給定-kproperty-實例上呼叫-get-set-的委託屬性" tabindex="-1">優化在給定 KProperty 實例上呼叫 get/set 的委託屬性 <a class="header-anchor" href="#優化在給定-kproperty-實例上呼叫-get-set-的委託屬性" aria-label="Permalink to &quot;優化在給定 KProperty 實例上呼叫 get/set 的委託屬性&quot;">​</a></h3><p>我們透過省略 <code>$delegate</code> 欄位並產生對所參考屬性的直接存取來優化產生的 JVM 位元組碼。</p><p>例如，在以下程式碼中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> impl: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">impl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin 不再產生 <code>content$delegate</code> 欄位。<code>content</code> 變數的屬性存取器直接呼叫 <code>impl</code> 變數，跳過委託屬性的 <code>getValue</code>/<code>setValue</code> 運算子，從而避免了對 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-property/index.html" target="_blank" rel="noreferrer"><code>KProperty</code></a> 型別的屬性參考物件的需求。</p><p>感謝我們的 Google 同事實作此功能！</p><p>了解有關<a href="/zh-Hant/kotlin/delegated-properties">委託屬性</a>的更多資訊。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native 正在獲得多項改進和元件更新，其中一些處於預覽狀態：</p><ul><li><a href="#preview-of-the-new-memory-manager">新記憶體管理器的預覽</a></li><li><a href="#support-for-xcode-13">支援 Xcode 13</a></li><li><a href="#compilation-of-windows-targets-on-any-host">支援在任何主機上編譯 Windows 目標</a></li><li><a href="#llvm-and-linker-updates">LLVM 和連結器更新</a></li><li><a href="#performance-improvements">性能改進</a></li><li><a href="#unified-compiler-plugin-abi-with-jvm-and-js-ir-backends">與 JVM 和 JS IR 後端統一的編譯器外掛程式 ABI</a></li><li><a href="#detailed-error-messages-for-klib-linkage-failures">Klib 連結失敗的詳細錯誤訊息</a></li><li><a href="#reworked-unhandled-exception-handling-api">重構未處理異常處理 API</a></li></ul><h3 id="新記憶體管理器的預覽" tabindex="-1">新記憶體管理器的預覽 <a class="header-anchor" href="#新記憶體管理器的預覽" aria-label="Permalink to &quot;新記憶體管理器的預覽&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新的 Kotlin/Native 記憶體管理器是<a href="/zh-Hant/kotlin/components-stability">實驗性</a>功能。它可能隨時被捨棄或更改。需要選擇啟用（參見以下詳細資訊），並且您應僅將其用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>透過 Kotlin 1.6.0，您可以試用新的 Kotlin/Native 記憶體管理器的開發預覽版。它使我們更接近於消除 JVM 和 Native 平台之間的差異，從而在多平台專案中提供一致的開發者體驗。</p><p>一個顯著的變更是非頂層屬性的惰性初始化，就像在 Kotlin/JVM 中一樣。當首次存取同一檔案中的頂層屬性或函數時，頂層屬性會被初始化。此模式還包括全域跨程序優化（僅適用於發布二進位檔案），它會移除冗餘初始化檢查。</p><p>我們最近發布了一篇關於<a href="https://blog.jetbrains.com/kotlin/2021/08/try-the-new-kotlin-native-memory-manager-development-preview/" target="_blank" rel="noreferrer">新記憶體管理器的部落格文章</a>。閱讀它以了解新記憶體管理器的當前狀態並找到一些示範專案，或者直接跳到<a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/NEW_MM.md" target="_blank" rel="noreferrer">遷移說明</a>親自嘗試。請檢查新的記憶體管理器在您的專案上的運作方式，並在我們的問題追蹤器 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a> 中分享回饋。</p><h3 id="支援-xcode-13" tabindex="-1">支援 Xcode 13 <a class="header-anchor" href="#支援-xcode-13" aria-label="Permalink to &quot;支援 Xcode 13&quot;">​</a></h3><p>Kotlin/Native 1.6.0 支援 Xcode 13 – Xcode 的最新版本。您可以自由更新您的 Xcode 並繼續為 Apple 作業系統開發您的 Kotlin 專案。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Xcode 13 中新增的函式庫在 Kotlin 1.6.0 中尚不可用，但我們將在即將發布的版本中增加對它們的支援。</p></div><h3 id="支援在任何主機上編譯-windows-目標" tabindex="-1">支援在任何主機上編譯 Windows 目標 <a class="header-anchor" href="#支援在任何主機上編譯-windows-目標" aria-label="Permalink to &quot;支援在任何主機上編譯 Windows 目標&quot;">​</a></h3><p>從 1.6.0 開始，您無需 Windows 主機即可編譯 <code>mingwX64</code> 和 <code>mingwX86</code> Windows 目標。它們可以在任何支援 Kotlin/Native 的主機上編譯。</p><h3 id="llvm-和連結器更新" tabindex="-1">LLVM 和連結器更新 <a class="header-anchor" href="#llvm-和連結器更新" aria-label="Permalink to &quot;LLVM 和連結器更新&quot;">​</a></h3><p>我們重構了 Kotlin/Native 底層使用的 LLVM 依賴項。這帶來了各種好處，包括：</p><ul><li>LLVM 版本更新到 11.1.0。</li><li>依賴項大小減小。例如，在 macOS 上，它現在約為 300 MB，而先前版本為 1200 MB。</li><li><a href="https://youtrack.jetbrains.com/issue/KT-42693" target="_blank" rel="noreferrer">排除對 <code>ncurses5</code> 函式庫的依賴</a>，該函式庫在現代 Linux 發行版中不可用。</li></ul><p>除了 LLVM 更新之外，Kotlin/Native 現在還為 MingGW 目標使用 <a href="https://lld.llvm.org/" target="_blank" rel="noreferrer">LLD</a> 連結器（一個來自 LLVM 專案的連結器）。它提供了比先前使用的 ld.bfd 連結器更多的優勢，並將允許我們提高產生二進位檔案的執行時性能，並支援 MinGW 目標的編譯器快取。請注意，LLD <a href="/zh-Hant/kotlin/whatsnew1530#deprecation-of-linkage-against-dlls-without-import-libraries-for-mingw-targets">需要 DLL 連結的導入函式庫</a>。在 <a href="https://stackoverflow.com/questions/3573475/how-does-the-import-library-work-details/3573527/#3573527" target="_blank" rel="noreferrer">此 Stack Overflow 討論串</a> 中了解更多資訊。</p><h3 id="性能改進" tabindex="-1">性能改進 <a class="header-anchor" href="#性能改進" aria-label="Permalink to &quot;性能改進&quot;">​</a></h3><p>Kotlin/Native 1.6.0 提供了以下性能改進：</p><ul><li>編譯時間：編譯器快取預設為 <code>linuxX64</code> 和 <code>iosArm64</code> 目標啟用。這加速了偵錯模式下的大多數編譯（首次編譯除外）。測量顯示，在我們的測試專案中，速度提高了約 200%。這些目標的編譯器快取自 Kotlin 1.5.0 起就已可用，並帶有<a href="/zh-Hant/kotlin/whatsnew15#performance-improvements">額外的 Gradle 屬性</a>；您現在可以移除它們。</li><li>執行時：由於產生 LLVM 程式碼中的優化，使用 <code>for</code> 迴圈迭代陣列的速度現在提高了多達 12%。</li></ul><h3 id="與-jvm-和-js-ir-後端統一的編譯器外掛程式-abi" tabindex="-1">與 JVM 和 JS IR 後端統一的編譯器外掛程式 ABI <a class="header-anchor" href="#與-jvm-和-js-ir-後端統一的編譯器外掛程式-abi" aria-label="Permalink to &quot;與 JVM 和 JS IR 後端統一的編譯器外掛程式 ABI&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>在 Kotlin/Native 中使用通用 IR 編譯器外掛程式 ABI 的選項是<a href="/zh-Hant/kotlin/components-stability">實驗性</a>功能。它可能隨時被捨棄或更改。需要選擇啟用（參見以下詳細資訊），並且您應僅將其用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-48595" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>在先前版本中，由於 ABI 中的差異，編譯器外掛程式的作者必須為 Kotlin/Native 提供單獨的構件。</p><p>從 1.6.0 開始，Kotlin 多平台 Gradle 外掛程式能夠將可嵌入編譯器 JAR（用於 JVM 和 JS IR 後端）用於 Kotlin/Native。這是邁向編譯器外掛程式開發體驗統一的一步，因為您現在可以將相同的編譯器外掛程式構件用於 Native 和其他支援的平台。</p><p>這是此類支援的預覽版本，需要選擇啟用。要開始為 Kotlin/Native 使用泛型編譯器外掛程式構件，請將以下行新增到 <code>gradle.properties</code>：<code>kotlin.native.useEmbeddableCompilerJar=true</code>。</p><p>我們計劃在未來預設為 Kotlin/Native 使用可嵌入編譯器 JAR，因此對我們來說，了解預覽版對您的運作情況至關重要。</p><p>如果您是編譯器外掛程式的作者，請嘗試此模式並檢查它是否適用於您的外掛程式。請注意，根據您的外掛程式結構，可能需要遷移步驟。有關遷移說明，請參閱<a href="https://youtrack.jetbrains.com/issue/KT-48595" target="_blank" rel="noreferrer">此 YouTrack 問題</a>，並在評論中留下您的回饋。</p><h3 id="klib-連結失敗的詳細錯誤訊息" tabindex="-1">Klib 連結失敗的詳細錯誤訊息 <a class="header-anchor" href="#klib-連結失敗的詳細錯誤訊息" aria-label="Permalink to &quot;Klib 連結失敗的詳細錯誤訊息&quot;">​</a></h3><p>Kotlin/Native 編譯器現在會為 klib 連結錯誤提供詳細的錯誤訊息。這些訊息現在具有清晰的錯誤描述，並且還包含有關可能原因和解決方法的資訊。</p><p>例如：</p><ul><li><p>1.5.30：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>e: java.lang.IllegalStateException: IrTypeAliasSymbol expected: Unbound public symbol for public kotlinx.coroutines/CancellationException|null[0]</span></span>
<span class="line"><span>&lt;stack trace&gt;</span></span></code></pre></div></li><li><p>1.6.0：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>e: The symbol of unexpected type encountered during IR deserialization: IrClassPublicSymbolImpl, kotlinx.coroutines/CancellationException|null[0].</span></span>
<span class="line"><span>IrTypeAliasSymbol is expected.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>This could happen if there are two libraries, where one library was compiled against the different version of the other library than the one currently used in the project.</span></span>
<span class="line"><span>Please check that the project configuration is correct and has consistent versions of dependencies.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>The list of libraries that depend on &quot;org.jetbrains.kotlinx:kotlinx-coroutines-core (org.jetbrains.kotlinx:kotlinx-coroutines-core-macosx64)&quot; and may lead to conflicts:</span></span>
<span class="line"><span>&lt;list of libraries and potential version mismatches&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Project dependencies:</span></span>
<span class="line"><span>&lt;dependencies tree&gt;</span></span></code></pre></div></li></ul><h3 id="重構未處理異常處理-api" tabindex="-1">重構未處理異常處理 API <a class="header-anchor" href="#重構未處理異常處理-api" aria-label="Permalink to &quot;重構未處理異常處理 API&quot;">​</a></h3><p>我們統一了 Kotlin/Native 執行時中未處理異常的處理方式，並將預設處理作為 <code>processUnhandledException(throwable: Throwable)</code> 函數公開，供自訂執行環境（如 <code>kotlinx.coroutines</code>）使用。此處理也適用於在 <code>Worker.executeAfter()</code> 操作中逸出的異常，但僅適用於新的<a href="#preview-of-the-new-memory-manager">記憶體管理器</a>。</p><p>API 改進也影響了由 <code>setUnhandledExceptionHook()</code> 設定的 Hook。先前，當 Kotlin/Native 執行時使用未處理的異常呼叫 Hook 後，此類 Hook 會被重置，並且程式將在此後立即終止。現在這些 Hook 可以多次使用，如果您希望程式在未處理異常時始終終止，要麼不設定未處理異常 Hook (<code>setUnhandledExceptionHook()</code>)，要麼確保在您的 Hook 結束時呼叫 <code>terminateWithUnhandledException()</code>。這將幫助您將異常發送到第三方崩潰報告服務（例如 Firebase Crashlytics），然後終止程式。逸出 <code>main()</code> 的異常和跨越互操作邊界的異常將始終終止程式，即使 Hook 沒有呼叫 <code>terminateWithUnhandledException()</code>。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>我們正在繼續努力穩定 Kotlin/JS 編譯器的 IR 後端。Kotlin/JS 現在有一個<a href="#option-to-use-pre-installed-node-js-and-yarn">選項可以禁用 Node.js 和 Yarn 的下載</a>。</p><h3 id="選項-使用預先安裝的-node-js-和-yarn" tabindex="-1">選項：使用預先安裝的 Node.js 和 Yarn <a class="header-anchor" href="#選項-使用預先安裝的-node-js-和-yarn" aria-label="Permalink to &quot;選項：使用預先安裝的 Node.js 和 Yarn&quot;">​</a></h3><p>您現在可以在建置 Kotlin/JS 專案時禁用 Node.js 和 Yarn 的下載，並使用主機上已安裝的實例。這對於在沒有網路連接的伺服器（例如 CI 伺服器）上建置非常有用。</p><p>要禁用下載外部元件，請將以下行新增到您的 <code>build.gradle(.kts)</code>：</p>`,99)),i("ul",null,[i("li",null,[s[2]||(s[2]=i("p",null,"Yarn：",-1)),t(k,{group:"build-script"},{default:n(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject.plugins."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"the"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">().download "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // or true for default behavior")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"extensions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"getByType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"download "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i("li",null,[s[5]||(s[5]=i("p",null,"Node.js：",-1)),t(k,{group:"build-script"},{default:n(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>s[3]||(s[3]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject.plugins."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"nodejs"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"NodeJsRootPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"the"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"nodejs"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"NodeJsRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">().download "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // or true for default behavior")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>s[4]||(s[4]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"extensions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"getByType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"download "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})])]),s[7]||(s[7]=h(`<h2 id="kotlin-gradle-外掛程式" tabindex="-1">Kotlin Gradle 外掛程式 <a class="header-anchor" href="#kotlin-gradle-外掛程式" aria-label="Permalink to &quot;Kotlin Gradle 外掛程式&quot;">​</a></h2><p>在 Kotlin 1.6.0 中，我們將 <code>KotlinGradleSubplugin</code> 類別的棄用級別更改為 &#39;ERROR&#39;。此類別用於編寫編譯器外掛程式。在後續版本中，我們將移除此類別。請改用 <code>KotlinCompilerPluginSupportPlugin</code> 類別。</p><p>我們移除了 <code>kotlin.useFallbackCompilerSearch</code> 建置選項和 <code>noReflect</code> 以及 <code>includeRuntime</code> 編譯器選項。<code>useIR</code> 編譯器選項已被隱藏，並將在即將發布的版本中移除。</p><p>在 Kotlin Gradle 外掛程式中了解有關<a href="/zh-Hant/kotlin/gradle-compiler-options">目前支援的編譯器選項</a>的更多資訊。</p><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><p>新的 1.6.0 版標準函式庫穩定化了實驗性功能，引入了新功能，並統一了其跨平台的行為：</p><ul><li><a href="#new-readline-functions">新的 <code>readline</code> 函數</a></li><li><a href="#stable-typeof">穩定的 <code>typeOf()</code></a></li><li><a href="#stable-collection-builders">穩定的集合建造者</a></li><li><a href="#stable-duration-api">穩定的 Duration API</a></li><li><a href="#splitting-regex-into-a-sequence">將 Regex 分割為序列</a></li><li><a href="#bit-rotation-operations-on-integers">整數的位元旋轉操作</a></li><li><a href="#changes-for-replace-and-replacefirst-in-js">JS 中 <code>replace()</code> 和 <code>replaceFirst()</code> 的變更</a></li><li><a href="#improvements-to-the-existing-api">現有 API 的改進</a></li><li><a href="#deprecations">棄用</a></li></ul><h3 id="新的-readline-函數" tabindex="-1">新的 <code>readline</code> 函數 <a class="header-anchor" href="#新的-readline-函數" aria-label="Permalink to &quot;新的 \`readline\` 函數&quot;">​</a></h3><p>Kotlin 1.6.0 提供了處理標準輸入的新函數：<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/readln.html" target="_blank" rel="noreferrer"><code>readln()</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/readln-or-null.html" target="_blank" rel="noreferrer"><code>readlnOrNull()</code></a>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>目前，新函數僅適用於 JVM 和 Native 目標平台。</p></div><table tabindex="0"><thead><tr><th><strong>早期版本</strong></th><th><strong>1.6.0 替代方案</strong></th><th><strong>用法</strong></th></tr></thead><tbody><tr><td><code>readLine()!!</code></td><td><code>readln()</code></td><td>從 stdin 讀取一行並返回，如果達到 EOF 則拋出 <code>RuntimeException</code>。</td></tr><tr><td><code>readLine()</code></td><td><code>readlnOrNull()</code></td><td>從 stdin 讀取一行並返回，如果達到 EOF 則返回 <code>null</code>。</td></tr></tbody></table><p>我們相信消除讀取行時使用 <code>!!</code> 的需要將改善新手的體驗並簡化 Kotlin 的教學。為了使讀取行操作名稱與其 <code>println()</code> 對應函數保持一致，我們決定將新函數的名稱縮短為「ln」。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;What is your nickname?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nickname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$nickname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nextLine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readlnOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">takeUnless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNullOrEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">break</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nextLine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>現有的 <code>readLine()</code> 函數在您的 IDE 程式碼補全中將獲得比 <code>readln()</code> 和 <code>readlnOrNull()</code> 更低的優先級。IDE 檢查也將建議使用新函數而不是舊版 <code>readLine()</code>。</p><p>我們計劃在未來版本中逐步棄用 <code>readLine()</code> 函數。</p><h3 id="穩定的-typeof" tabindex="-1">穩定的 <code>typeOf()</code> <a class="header-anchor" href="#穩定的-typeof" aria-label="Permalink to &quot;穩定的 \`typeOf()\`&quot;">​</a></h3><p>1.6.0 版帶來了<a href="/zh-Hant/kotlin/components-stability">穩定</a>的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/type-of.html" target="_blank" rel="noreferrer"><code>typeOf()</code></a> 函數，完成了<a href="https://youtrack.jetbrains.com/issue/KT-45396" target="_blank" rel="noreferrer">主要路線圖項目</a>之一。</p><p><a href="https://blog.jetbrains.com/kotlin/2019/06/kotlin-1-3-40-released/" target="_blank" rel="noreferrer">自 1.3.40 起</a>，<code>typeOf()</code> 在 JVM 平台上作為實驗性 API 可用。現在您可以在任何 Kotlin 平台中使用它，並獲取編譯器可以推斷的任何 Kotlin 型別的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-type/#kotlin.reflect.KType" target="_blank" rel="noreferrer"><code>KType</code></a> 表示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">renderType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> typeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromExplicitType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> typeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromReifiedType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="穩定的集合建造者" tabindex="-1">穩定的集合建造者 <a class="header-anchor" href="#穩定的集合建造者" aria-label="Permalink to &quot;穩定的集合建造者&quot;">​</a></h3><p>在 Kotlin 1.6.0 中，集合建造者函數已晉升為<a href="/zh-Hant/kotlin/components-stability">穩定</a>。由集合建造者返回的集合現在在其只讀狀態下可序列化。</p><p>您現在可以使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/build-map.html" target="_blank" rel="noreferrer"><code>buildMap()</code></a>、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/build-list.html" target="_blank" rel="noreferrer"><code>buildList()</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/build-set.html" target="_blank" rel="noreferrer"><code>buildSet()</code></a> 而無需選擇啟用註解：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [a, b, c, d]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="穩定的-duration-api" tabindex="-1">穩定的 Duration API <a class="header-anchor" href="#穩定的-duration-api" aria-label="Permalink to &quot;穩定的 Duration API&quot;">​</a></h3><p>用於表示不同時間單位持續時間量的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/" target="_blank" rel="noreferrer">Duration</a> 類別已晉升為<a href="/zh-Hant/kotlin/components-stability">穩定</a>。在 1.6.0 中，Duration API 獲得了以下變更：</p><ul><li><p>將持續時間分解為日、時、分、秒和奈秒的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-components.html" target="_blank" rel="noreferrer"><code>toComponents()</code></a> 函數的第一個組成部分現在是 <code>Long</code> 型別而不是 <code>Int</code>。 之前，如果值不符合 <code>Int</code> 範圍，它會被強制轉換到該範圍。使用 <code>Long</code> 型別，您可以分解持續時間範圍內的任何值，而不會截斷不符合 <code>Int</code> 的值。</p></li><li><p><code>DurationUnit</code> 列舉現在是獨立的，而不是 JVM 上 <code>java.util.concurrent.TimeUnit</code> 的型別別名。 我們沒有找到任何有說服力的案例說明 <code>typealias DurationUnit = TimeUnit</code> 可能有用。此外，透過型別別名暴露 <code>TimeUnit</code> API 可能會混淆 <code>DurationUnit</code> 使用者。</p></li><li><p>為了回應社群回饋，我們將擴展屬性（如 <code>Int.seconds</code>）帶回來。但我們希望限制其適用性，因此我們將它們放在 <code>Duration</code> 類別的伴生物件中。 雖然 IDE 仍然可以在補全中建議擴展並自動從伴生物件中插入導入，但未來我們計劃將此行為限制在預期 <code>Duration</code> 型別的情況。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.Duration.Companion.seconds</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;There are \${duration.seconds.inWholeMinutes} minutes in </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$duration</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seconds&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // There are 166 minutes in 10000 seconds</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>我們建議將先前引入的伴生函數（例如 <code>Duration.seconds(Int)</code>）和已棄用的頂層擴展（例如 <code>Int.seconds</code>）替換為 <code>Duration.Companion</code> 中的新擴展。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>此類替換可能會導致舊頂層擴展和新伴生擴展之間的歧義。 在執行自動遷移之前，請務必使用 <code>kotlin.time</code> 套件的萬用字元導入 – <code>import kotlin.time.*</code>。</p></div></li></ul><h3 id="將-regex-分割為序列" tabindex="-1">將 Regex 分割為序列 <a class="header-anchor" href="#將-regex-分割為序列" aria-label="Permalink to &quot;將 Regex 分割為序列&quot;">​</a></h3><p><code>Regex.splitToSequence(CharSequence)</code> 和 <code>CharSequence.splitToSequence(Regex)</code> 函數已晉升為<a href="/zh-Hant/kotlin/components-stability">穩定</a>。它們會圍繞給定正則表達式的匹配項分割字串，但將結果作為 <a href="/zh-Hant/kotlin/sequences">Sequence</a> 返回，以便對此結果的所有操作都惰性執行：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorsText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;green, red, brown&amp;blue, orange, pink&amp;green&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s]+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mixedColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splitToSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(colorsText)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // or</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // val mixedColor = colorsText.splitToSequence(regex)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mixedColor) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;brown&amp;blue&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="js-中-replace-和-replacefirst-的變更" tabindex="-1">JS 中 <code>replace()</code> 和 <code>replaceFirst()</code> 的變更 <a class="header-anchor" href="#js-中-replace-和-replacefirst-的變更" aria-label="Permalink to &quot;JS 中 \`replace()\` 和 \`replaceFirst()\` 的變更&quot;">​</a></h3><p>在 Kotlin 1.6.0 之前，當替換字串包含群組參考時，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/replace.html" target="_blank" rel="noreferrer"><code>replace()</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/replace-first.html" target="_blank" rel="noreferrer"><code>replaceFirst()</code></a> Regex 函數在 Java 和 JS 中的行為不同。為了使所有目標平台的行為保持一致，我們更改了它們在 JS 中的實作。</p><p>替換字串中 <code>\${name}</code> 或 <code>$index</code> 的出現會被替換為對應於具有指定索引或名稱的捕獲群組的子序列：</p><ul><li><p><code>$index</code> – <code></code> 之後的第一個數字始終被視為群組參考的一部分。後續數字僅在它們構成有效群組參考時才併入 <code>index</code>。只有數字 <code>0</code>–<code>9</code> 被視為群組參考的潛在組件。請注意，捕獲群組的索引從 <code>1</code> 開始。索引為 <code>0</code> 的群組代表整個匹配項。</p></li><li><p><code>\${name}</code> – <code>name</code> 可以由拉丁字母 <code>a</code>–<code>z</code>、<code>A</code>–<code>Z</code> 或數字 <code>0</code>–<code>9</code> 組成。第一個字元必須是字母。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>替換模式中的命名群組目前僅在 JVM 上支援。</p></div></li><li><p>要將後續字元作為字面值包含在替換字串中，請使用反斜線字元 <code>\\</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(.+)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// $ Kotlin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(.+)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.6.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \\ 1.6.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果替換字串必須被視為字面字串，您可以使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/escape-replacement.html" target="_blank" rel="noreferrer"><code>Regex.escapeReplacement()</code></a>。</p></li></ul><h3 id="現有-api-的改進" tabindex="-1">現有 API 的改進 <a class="header-anchor" href="#現有-api-的改進" aria-label="Permalink to &quot;現有 API 的改進&quot;">​</a></h3><ul><li><p>1.6.0 版為 <code>Comparable.compareTo()</code> 新增了中綴擴展函數。您現在可以使用中綴形式比較兩個物件的順序：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WrappedText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Comparable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WrappedText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(other: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WrappedText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.text compareTo other.text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>JS 中的 <code>Regex.replace()</code> 現在也不是內聯的，以統一其在所有平台上的實作。</p></li><li><p><code>compareTo()</code> 和 <code>equals()</code> 字串函數，以及 <code>isBlank()</code> CharSequence 函數現在在 JS 中的行為與在 JVM 中完全相同。先前在處理非 ASCII 字元時存在偏差。</p></li></ul><h3 id="棄用" tabindex="-1">棄用 <a class="header-anchor" href="#棄用" aria-label="Permalink to &quot;棄用&quot;">​</a></h3><p>在 Kotlin 1.6.0 中，我們正在開始棄用週期，並對某些僅限 JS 的標準函式庫 API 發出警告。</p><h4 id="concat-、match-和-matches-字串函數" tabindex="-1"><code>concat()</code>、<code>match()</code> 和 <code>matches()</code> 字串函數 <a class="header-anchor" href="#concat-、match-和-matches-字串函數" aria-label="Permalink to &quot;\`concat()\`、\`match()\` 和 \`matches()\` 字串函數&quot;">​</a></h4><ul><li>要將字串與給定其他物件的字串表示形式串聯，請使用 <code>plus()</code> 而不是 <code>concat()</code>。</li><li>要在輸入中查找正則表達式的所有出現次數，請使用 Regex 類別的 <code>findAll()</code> 而不是 <code>String.match(regex: String)</code>。</li><li>要檢查正則表達式是否匹配整個輸入，請使用 Regex 類別的 <code>matches()</code> 而不是 <code>String.matches(regex: String)</code>。</li></ul><h4 id="接受比較函數的陣列-sort" tabindex="-1">接受比較函數的陣列 <code>sort()</code> <a class="header-anchor" href="#接受比較函數的陣列-sort" aria-label="Permalink to &quot;接受比較函數的陣列 \`sort()\`&quot;">​</a></h4><p>我們已棄用 <code>Array&lt;out T&gt;.sort()</code> 函數和內聯函數 <code>ByteArray.sort()</code>、<code>ShortArray.sort()</code>、<code>IntArray.sort()</code>、<code>LongArray.sort()</code>、<code>FloatArray.sort()</code>、<code>DoubleArray.sort()</code> 和 <code>CharArray.sort()</code>，它們按照比較函數傳遞的順序對陣列進行排序。請使用其他標準函式庫函數進行陣列排序。</p><p>有關參考，請參閱<a href="/zh-Hant/kotlin/collection-ordering">集合排序</a>部分。</p><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="kover-–-一個-kotlin-程式碼覆蓋率工具" tabindex="-1">Kover – 一個 Kotlin 程式碼覆蓋率工具 <a class="header-anchor" href="#kover-–-一個-kotlin-程式碼覆蓋率工具" aria-label="Permalink to &quot;Kover – 一個 Kotlin 程式碼覆蓋率工具&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kover Gradle 外掛程式是實驗性功能。我們非常感謝您在 <a href="https://github.com/Kotlin/kotlinx-kover/issues" target="_blank" rel="noreferrer">GitHub</a> 上提供回饋。</p></div><p>透過 Kotlin 1.6.0，我們引入了 Kover – 一個適用於 <a href="https://github.com/JetBrains/intellij-coverage" target="_blank" rel="noreferrer">IntelliJ</a> 和 <a href="https://github.com/jacoco/jacoco" target="_blank" rel="noreferrer">JaCoCo</a> Kotlin 程式碼覆蓋率代理的 Gradle 外掛程式。它適用於所有語言建構，包括內聯函數。</p><p>在 Kover 的 <a href="https://github.com/Kotlin/kotlinx-kover" target="_blank" rel="noreferrer">GitHub 儲存庫</a> 或此影片中了解更多資訊：</p>`,48)),t(p,{src:"https://www.youtube.com/v/jNu5LY9HIbw",title:"Kover – The Code Coverage Plugin"}),s[8]||(s[8]=h('<h2 id="coroutines-1-6-0-rc" tabindex="-1">Coroutines 1.6.0-RC <a class="header-anchor" href="#coroutines-1-6-0-rc" aria-label="Permalink to &quot;Coroutines 1.6.0-RC&quot;">​</a></h2><p><code>kotlinx.coroutines</code> <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.6.0-RC" target="_blank" rel="noreferrer">1.6.0-RC</a> 已發布，並帶來了多項功能和改進：</p><ul><li>支援<a href="#preview-of-the-new-memory-manager">新的 Kotlin/Native 記憶體管理器</a></li><li>引入了調度器_視圖_ API，允許限制並行性而無需建立額外執行緒</li><li>從 Java 6 遷移到 Java 8 目標</li><li><code>kotlinx-coroutines-test</code> 具有新的重構 API 和多平台支援</li><li>引入了 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-copyable-thread-context-element/index.html" target="_blank" rel="noreferrer"><code>CopyableThreadContextElement</code></a>，它為協程提供了對 <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ThreadLocal.html" target="_blank" rel="noreferrer"><code>ThreadLocal</code></a> 變數的執行緒安全寫入存取</li></ul><p>在<a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.6.0-RC" target="_blank" rel="noreferrer">變更日誌</a>中了解更多資訊。</p><h2 id="遷移到-kotlin-1-6-0" tabindex="-1">遷移到 Kotlin 1.6.0 <a class="header-anchor" href="#遷移到-kotlin-1-6-0" aria-label="Permalink to &quot;遷移到 Kotlin 1.6.0&quot;">​</a></h2><p>IntelliJ IDEA 和 Android Studio 將在 Kotlin 外掛程式 1.6.0 可用後建議更新。</p><p>要將現有專案遷移到 Kotlin 1.6.0，請將 Kotlin 版本更改為 <code>1.6.0</code> 並重新導入您的 Gradle 或 Maven 專案。<a href="/zh-Hant/kotlin/releases#update-to-a-new-kotlin-version">了解如何更新到 Kotlin 1.6.0</a>。</p><p>要使用 Kotlin 1.6.0 啟動新專案，請更新 Kotlin 外掛程式並從 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong> 執行專案精靈。</p><p>新的命令列編譯器可在 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.6.0" target="_blank" rel="noreferrer">GitHub 發布頁面</a> 下載。</p><p>Kotlin 1.6.0 是一個<a href="/zh-Hant/kotlin/kotlin-evolution-principles#language-and-tooling-releases">功能版本</a>，因此可能會帶來與您為早期語言版本編寫的程式碼不相容的變更。在 <a href="/zh-Hant/kotlin/compatibility-guide-16">Kotlin 1.6 相容性指南</a>中查找此類變更的詳細清單。</p>',10))])}const f=r(E,[["render",c]]);export{C as __pageData,f as default};
