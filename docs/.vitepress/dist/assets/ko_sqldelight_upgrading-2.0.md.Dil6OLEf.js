import{_ as i,c as a,o as e,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"2.0으로 업그레이드","description":"","frontmatter":{},"headers":[],"relativePath":"ko/sqldelight/upgrading-2.0.md","filePath":"ko/sqldelight/upgrading-2.0.md","lastUpdated":1748435462000}'),t={name:"ko/sqldelight/upgrading-2.0.md"};function n(p,s,h,d,k,r){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="_2-0으로-업그레이드" tabindex="-1">2.0으로 업그레이드 <a class="header-anchor" href="#_2-0으로-업그레이드" aria-label="Permalink to &quot;2.0으로 업그레이드&quot;">​</a></h1><p>SQLDelight 2.0은 Gradle 플러그인 및 런타임 API에 일부 호환성(breaking) 변경 사항을 적용합니다.</p><p>이 페이지에서는 이러한 호환성 변경 사항과 새로운 2.0에서의 대응하는 내용들을 나열합니다. 새로운 기능 및 기타 변경 사항의 전체 목록은 <a href="/ko/sqldelight/changelog">변경 로그</a>를 참조하세요.</p><h2 id="새-패키지-이름-및-아티팩트-그룹" tabindex="-1">새 패키지 이름 및 아티팩트 그룹 <a class="header-anchor" href="#새-패키지-이름-및-아티팩트-그룹" aria-label="Permalink to &quot;새 패키지 이름 및 아티팩트 그룹&quot;">​</a></h2><p><code>com.squareup.sqldelight</code>의 모든 인스턴스는 <code>app.cash.sqldelight</code>로 교체해야 합니다.</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar">Gradle Dependencies</div><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugins {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-  id(&quot;com.squareup.sqldelight&quot;) version &quot;2.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+  id(&quot;app.cash.sqldelight&quot;) version &quot;2.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependencies {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-  implementation(&quot;com.squareup.sqldelight:sqlite-driver:2.1.0&quot;)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+  implementation(&quot;app.cash.sqldelight:sqlite-driver:2.1.0&quot;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">For pure-Android SqlDelight 1.x projects, use android-driver and coroutine-extensions-jvm:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependencies {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-  implementation(&quot;com.squareup.sqldelight:android-driver:2.1.0&quot;)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+  implementation(&quot;app.cash.sqldelight:android-driver:2.1.0&quot;)</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-  implementation(&quot;com.squareup.sqldelight:coroutines-extensions:2.1.0&quot;)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+  implementation(&quot;app.cash.sqldelight:coroutines-extensions-jvm:2.1.0&quot;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><div class="vp-code-block-title"><div class="vp-code-block-title-bar">In Code</div><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-import com.squareup.sqldelight.db.SqlDriver</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+import app.cash.sqldelight.db.SqlDriver</span></span></code></pre></div></div><h2 id="gradle-설정-변경-사항" tabindex="-1">Gradle 설정 변경 사항 <a class="header-anchor" href="#gradle-설정-변경-사항" aria-label="Permalink to &quot;Gradle 설정 변경 사항&quot;">​</a></h2><ul><li><p>SQLDelight 2.0은 빌드에 Java 11을, 런타임에 Java 8을 필요로 합니다.</p></li><li><p>SQLDelight 설정 API는 이제 데이터베이스에 대해 관리되는 프로퍼티(managed properties)와 <code>DomainObjectCollection</code>을 사용합니다.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-f_r08" id="tab-Kyp7qGD" checked><label data-title="Kotlin" for="tab-Kyp7qGD">Kotlin</label></div><div class="blocks"><div class="language-kotlin vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sqldelight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  databases</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (1)!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Database&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      packageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (2)!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><pre><code>  1. 새로운 \`DomainObjectCollection\` 래퍼.
  2. 이제 \`Property&lt;String&gt;\`입니다.
</code></pre><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-z3sN9" id="tab-tEU_zgT" checked><label data-title="Groovy" for="tab-tEU_zgT">Groovy</label></div><div class="blocks"><div class="language-kotlin vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sqldelight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  databases</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (1)!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      packageName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><pre><code>  1. 새로운 \`DomainObjectCollection\` 래퍼.
</code></pre></li><li><p><code>sourceFolders</code> 설정이 <code>srcDirs</code>로 이름이 변경되었습니다.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-kVFA-" id="tab-Fr2Nams" checked><label data-title="Kotlin" for="tab-Fr2Nams">Kotlin</label><input type="radio" name="group-kVFA-" id="tab-7cFciiG"><label data-title="Groovy" for="tab-7cFciiG">Groovy</label></div><div class="blocks"><div class="language-groovy vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sqldelight {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  databases {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    create(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyDatabase&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      packageName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      srcDirs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setFrom(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/main/sqldelight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sqldelight {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  databases {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    MyDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      packageName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      srcDirs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/main/sqldelight&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div></li><li><p>데이터베이스의 SQL 방언(dialect)은 이제 Gradle 종속성(dependency)을 사용하여 지정됩니다.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-8tBy2" id="tab-yVxZZn8" checked><label data-title="Kotlin" for="tab-yVxZZn8">Kotlin</label><input type="radio" name="group-8tBy2" id="tab-j2ydllN"><label data-title="Groovy" for="tab-j2ydllN">Groovy</label></div><div class="blocks"><div class="language-groovy vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sqldelight {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  databases {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    create(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyDatabase&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      packageName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">set(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      dialect(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.cash.sqldelight:mysql-dialect:2.1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Version catalogs also work!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      dialect(libs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sqldelight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dialects</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sqldelight {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  databases {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    MyDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      packageName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      dialect </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.cash.sqldelight:mysql-dialect:2.1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // Version catalogs also work!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      dialect libs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sqldelight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dialects</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><p>현재 지원되는 방언은 <code>mysql-dialect</code>, <code>postgresql-dialect</code>, <code>hsql-dialect</code>, <code>sqlite-3-18-dialect</code>, <code>sqlite-3-24-dialect</code>, <code>sqlite-3-25-dialect</code>, <code>sqlite-3-30-dialect</code>, <code>sqlite-3-35-dialect</code>, 및 <code>sqlite-3-38-dialect</code>입니다.</p></li></ul><h2 id="런타임-변경-사항" tabindex="-1">런타임 변경 사항 <a class="header-anchor" href="#런타임-변경-사항" aria-label="Permalink to &quot;런타임 변경 사항&quot;">​</a></h2><ul><li><p>이제 기본(primitive) 타입은 <code>.sq</code> 및 <code>.sqm</code> 파일로 임포트(import)되어야 합니다.</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+import kotlin.Boolean;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CREATE TABLE HockeyPlayer (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name TEXT NOT NULL,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  good INTEGER </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">AS Boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>이전에 지원되던 일부 타입은 이제 어댑터(adapter)를 필요로 합니다. 기본 타입용 어댑터는 <code>app.cash.sqldelight:primitive-adapters:2.1.0</code> 아티팩트(artifact)에서 사용할 수 있습니다. 예: <code>INTEGER As kotlin.Int</code> 변환을 위한 <code>IntColumnAdapter</code>.</p></li><li><p><code>AfterVersionWithDriver</code> 타입은 이제 항상 드라이버를 포함하는 <a href="https://sqldelight.github.io/sqldelight/latest/2.x/runtime/app.cash.sqldelight.db/-after-version" target="_blank" rel="noreferrer"><code>AfterVersion</code></a>으로 대체되었으며, <code>migrateWithCallbacks</code> 확장 함수는 이제 콜백(callback)을 허용하는 주 <a href="https://sqldelight.github.io/sqldelight/latest/2.x/runtime/app.cash.sqldelight.db/-sql-schema/#-775472427%2FFunctions%2F-2112917107" target="_blank" rel="noreferrer"><code>migrate</code></a> 메서드로 대체되었습니다.</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Database.Schema.</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">migrate</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">WithCallbacks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  driver = driver,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  oldVersion = 1,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  newVersion = Database.Schema.version,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-  AfterVersionWithDriver(3) { driver -&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-    driver.execute(null, &quot;INSERT INTO test (value) VALUES(&#39;hello&#39;)&quot;, 0)</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-  }</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+  AfterVersion(3) { driver -&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+    driver.execute(null, &quot;INSERT INTO test (value) VALUES(&#39;hello&#39;)&quot;, 0)</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p><code>Schema</code> 타입은 더 이상 <code>SqlDriver</code>의 중첩된(nested) 타입이 아니며, 이제 <a href="https://sqldelight.github.io/sqldelight/latest/2.x/runtime/app.cash.sqldelight.db/-sql-schema" target="_blank" rel="noreferrer"><code>SqlSchema</code></a>라고 불립니다.</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-val schema: SqlDriver.Schema</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+val schema: SqlSchema</span></span></code></pre></div></li><li><p><a href="https://sqldelight.github.io/sqldelight/latest/2.x/extensions/androidx-paging3/app.cash.sqldelight.paging3/" target="_blank" rel="noreferrer">paging3 확장 API</a>는 이제 개수에 대해 int 타입만 허용하도록 변경되었습니다.</p></li><li><p><a href="https://sqldelight.github.io/sqldelight/latest/2.x/extensions/coroutines-extensions/app.cash.sqldelight.coroutines/" target="_blank" rel="noreferrer">코루틴(coroutines) 확장 API</a>는 이제 디스패처(dispatcher)를 명시적으로 전달해야 합니다.</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">val players: Flow&lt;List&lt;HockeyPlayer&gt;&gt; =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  playerQueries.selectAll()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .asFlow()</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+   .mapToList(Dispatchers.IO)</span></span></code></pre></div></li><li><p><a href="https://sqldelight.github.io/sqldelight/latest/2.x/runtime/app.cash.sqldelight.db/-sql-driver/execute" target="_blank" rel="noreferrer"><code>execute()</code></a>, <a href="https://sqldelight.github.io/sqldelight/latest/2.x/runtime/app.cash.sqldelight.db/-sql-driver/execute-query" target="_blank" rel="noreferrer"><code>executeQuery()</code></a>, <code>newTransaction()</code>, <code>endTransaction()</code>와 같은 일부 드라이버 메서드는 이제 <a href="https://sqldelight.github.io/sqldelight/latest/2.x/runtime/app.cash.sqldelight.db/-query-result" target="_blank" rel="noreferrer"><code>QueryResult</code></a> 객체를 반환합니다. 반환된 값에 접근하려면 <a href="https://sqldelight.github.io/sqldelight/latest/2.x/runtime/app.cash.sqldelight.db/-query-result/value" target="_blank" rel="noreferrer"><code>QueryResult.value</code></a>를 사용하세요.</p><div class="language-diff vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;">-driver.executeQuery(null, &quot;PRAGMA user_version&quot;, { /*...*/ })</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">+driver.executeQuery(null, &quot;PRAGMA user_version&quot;, { /*...*/ }).value</span></span></code></pre></div><p>이 변경 사항을 통해 드라이버 구현은 반환된 값에 대해 서스펜딩(suspending) <a href="https://sqldelight.github.io/sqldelight/latest/2.x/runtime/app.cash.sqldelight.db/-query-result/await" target="_blank" rel="noreferrer"><code>QueryResult.await()</code></a> 메서드를 사용하여 접근할 수 있는 논블로킹(non-blocking) API를 기반으로 할 수 있게 됩니다.</p><ul><li><code>SqlCursor</code> 인터페이스의 <a href="https://sqldelight.github.io/sqldelight/latest/2.x/runtime/app.cash.sqldelight.db/-sql-cursor/next" target="_blank" rel="noreferrer"><code>next()</code></a> 메서드 또한 비동기 드라이버를 위한 더 나은 커서 지원을 가능하게 하기 위해 <code>QueryResult</code>를 반환하도록 변경되었습니다.</li></ul></li><li><p><a href="https://sqldelight.github.io/sqldelight/latest/2.x/runtime/app.cash.sqldelight.db/-sql-schema" target="_blank" rel="noreferrer"><code>SqlSchema</code></a> 인터페이스는 이제 제네릭(generic) <code>QueryResult</code> 타입 파라미터를 가집니다. 이는 비동기 드라이버와 함께 사용하도록 생성되었으며 동기 드라이버와 직접적으로 호환되지 않을 수 있는 스키마 런타임을 구별하는 데 사용됩니다. 이는 JS 타겟을 가진 멀티플랫폼(multiplatform) 프로젝트와 같이 동기 및 비동기 드라이버를 동시에 사용하는 프로젝트에만 해당됩니다. 자세한 내용은 &#39;<a href="/ko/sqldelight/js_sqlite/multiplatform.md">웹 워커 드라이버를 사용한 멀티플랫폼 설정</a>&#39;을 참조하세요.</p></li><li><p><code>SqlSchema.Version</code>의 타입이 Int에서 Long으로 변경되어 서버 환경에서 타임스탬프(timestamp)를 버전으로 활용할 수 있게 되었습니다. 기존 설정은 Int와 Long 간에 안전하게 캐스팅(cast)할 수 있으며, 버전에 대해 Int 범위를 요구하는 드라이버는 범위를 벗어난 버전의 경우 데이터베이스 생성 전에 충돌이 발생합니다.</p></li></ul>`,11)]))}const E=i(t,[["render",n]]);export{c as __pageData,E as default};
