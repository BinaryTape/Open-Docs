import{_ as p,C as r,c as d,o as h,ag as o,G as s,j as i,w as l,a}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"Kotlin Gradleプラグインにおけるコンパイルとキャッシュ","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/gradle-compilation-and-caches.md","filePath":"ja/kotlin/gradle-compilation-and-caches.md","lastUpdated":1754307826000}'),c={name:"ja/kotlin/gradle-compilation-and-caches.md"};function k(g,e,u,m,E,b){const t=r("tab"),n=r("tabs");return h(),d("div",null,[e[8]||(e[8]=o('<h1 id="kotlin-gradleプラグインにおけるコンパイルとキャッシュ" tabindex="-1">Kotlin Gradleプラグインにおけるコンパイルとキャッシュ <a class="header-anchor" href="#kotlin-gradleプラグインにおけるコンパイルとキャッシュ" aria-label="Permalink to &quot;Kotlin Gradleプラグインにおけるコンパイルとキャッシュ&quot;">​</a></h1><p>このページでは、以下のトピックについて学習できます。</p><ul><li><a href="#incremental-compilation">インクリメンタルコンパイル</a></li><li><a href="#gradle-build-cache-support">Gradleビルドキャッシュのサポート</a></li><li><a href="#gradle-configuration-cache-support">Gradleコンフィグレーションキャッシュのサポート</a></li><li><a href="#the-kotlin-daemon-and-how-to-use-it-with-gradle">KotlinデーモンとGradleでの使用方法</a></li><li><a href="#rolling-back-to-the-previous-compiler">以前のコンパイラへのロールバック</a></li><li><a href="#defining-kotlin-compiler-execution-strategy">Kotlinコンパイラ実行戦略の定義</a></li><li><a href="#kotlin-compiler-fallback-strategy">Kotlinコンパイラのフォールバック戦略</a></li><li><a href="#trying-the-latest-language-version">最新の言語バージョンの試用</a></li><li><a href="#build-reports">ビルドレポート</a></li></ul><h2 id="インクリメンタルコンパイル" tabindex="-1">インクリメンタルコンパイル <a class="header-anchor" href="#インクリメンタルコンパイル" aria-label="Permalink to &quot;インクリメンタルコンパイル&quot;">​</a></h2><p>Kotlin Gradleプラグインはインクリメンタルコンパイルをサポートしており、Kotlin/JVMおよびKotlin/JSプロジェクトではデフォルトで有効になっています。 インクリメンタルコンパイルは、ビルド間のクラスパス内のファイルの変更を追跡し、それらの変更によって影響を受けるファイルのみがコンパイルされるようにします。 このアプローチは<a href="#gradle-build-cache-support">Gradleのビルドキャッシュ</a>と連携し、<a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_compile_avoidance" target="_blank" rel="noreferrer">コンパイル回避</a>をサポートします。</p><p>Kotlin/JVMの場合、インクリメンタルコンパイルはクラスパススナップショットに依存しており、これはモジュールのAPI構造をキャプチャし、いつ再コンパイルが必要かを判断します。 全体的なパイプラインを最適化するため、Kotlinコンパイラは2種類のクラスパススナップショットを使用します。</p><ul><li><strong>詳細スナップショット (Fine-grained snapshots)</strong>: プロパティや関数などのクラスメンバーに関する詳細情報が含まれます。 メンバーレベルの変更が検出されると、Kotlinコンパイラは変更されたメンバーに依存するクラスのみを再コンパイルします。 パフォーマンスを維持するため、Kotlin GradleプラグインはGradleキャッシュ内の<code>.jar</code>ファイルに対して粗粒度スナップショットを作成します。</li><li><strong>粗粒度スナップショット (Coarse-grained snapshots)</strong>: クラスの<a href="https://en.wikipedia.org/wiki/Application_binary_interface" target="_blank" rel="noreferrer">ABI</a>ハッシュのみが含まれます。 ABIの一部が変更された場合、Kotlinコンパイラは変更されたクラスに依存するすべてのクラスを再コンパイルします。 これは、外部ライブラリのように頻繁に変更されないクラスに役立ちます。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/JSプロジェクトは、履歴ファイルに基づいた異なるインクリメンタルコンパイルアプローチを使用します。</p></div><p>インクリメンタルコンパイルを無効にする方法はいくつかあります。</p><ul><li><p>Kotlin/JVMの場合、<code>kotlin.incremental=false</code>を設定します。</p></li><li><p>Kotlin/JSプロジェクトの場合、<code>kotlin.incremental.js=false</code>を設定します。</p></li><li><p>コマンドラインパラメータとして<code>-Pkotlin.incremental=false</code>または<code>-Pkotlin.incremental.js=false</code>を使用します。</p><p>このパラメータは、それ以降の各ビルドに追加する必要があります。</p></li></ul><p>インクリメンタルコンパイルを無効にすると、ビルド後にインクリメンタルキャッシュは無効になります。最初のビルドは常にインクリメンタルではありません。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>インクリメンタルコンパイルに関する問題は、問題が発生してから数回の実行後に明らかになることがあります。<a href="#build-reports">ビルドレポート</a>を使用して、 変更履歴とコンパイル履歴を追跡してください。これにより、再現可能なバグレポートを提供できます。</p></div><p>現在のインクリメンタルコンパイルアプローチがどのように機能し、以前のものと比較してどう違うかについては、 <a href="https://blog.jetbrains.com/kotlin/2022/07/a-new-approach-to-incremental-compilation-in-kotlin/" target="_blank" rel="noreferrer">ブログ投稿</a>を参照してください。</p><h2 id="gradleビルドキャッシュのサポート" tabindex="-1">Gradleビルドキャッシュのサポート <a class="header-anchor" href="#gradleビルドキャッシュのサポート" aria-label="Permalink to &quot;Gradleビルドキャッシュのサポート&quot;">​</a></h2><p>Kotlinプラグインは<a href="https://docs.gradle.org/current/userguide/build_cache.html" target="_blank" rel="noreferrer">Gradleビルドキャッシュ</a>を使用しており、これは 将来のビルドでの再利用のためにビルド出力を保存します。</p><p>すべてのKotlinタスクのキャッシュを無効にするには、システムプロパティ<code>kotlin.caching.enabled</code>を<code>false</code>に設定します （引数<code>-Dkotlin.caching.enabled=false</code>を指定してビルドを実行します）。</p><h2 id="gradleコンフィグレーションキャッシュのサポート" tabindex="-1">Gradleコンフィグレーションキャッシュのサポート <a class="header-anchor" href="#gradleコンフィグレーションキャッシュのサポート" aria-label="Permalink to &quot;Gradleコンフィグレーションキャッシュのサポート&quot;">​</a></h2><p>Kotlinプラグインは<a href="https://docs.gradle.org/current/userguide/configuration_cache.html" target="_blank" rel="noreferrer">Gradleコンフィグレーションキャッシュ</a>を使用しており、 これは以降のビルドのために設定フェーズの結果を再利用することで、ビルドプロセスを高速化します。</p><p>コンフィグレーションキャッシュを有効にする方法については、<a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:usage" target="_blank" rel="noreferrer">Gradleのドキュメント</a>を参照してください。この機能を有効にすると、Kotlin Gradleプラグインは自動的に使用を開始します。</p><h2 id="kotlinデーモンとgradleでの使用方法" tabindex="-1">KotlinデーモンとGradleでの使用方法 <a class="header-anchor" href="#kotlinデーモンとgradleでの使用方法" aria-label="Permalink to &quot;KotlinデーモンとGradleでの使用方法&quot;">​</a></h2><p>Kotlinデーモン：</p><ul><li>プロジェクトをコンパイルするためにGradleデーモンとともに実行されます。</li><li>IntelliJ IDEA内蔵のビルドシステムでプロジェクトをコンパイルする場合、Gradleデーモンとは別に実行されます。</li></ul><p>Kotlinデーモンは、Kotlinコンパイルタスクのいずれかがソースのコンパイルを開始したときに、Gradleの<a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:build_phases" target="_blank" rel="noreferrer">実行ステージ</a>で開始します。 Kotlinデーモンは、Gradleデーモンとともに停止するか、Kotlinコンパイルがない2時間のアイドル時間の後に停止します。</p><p>Kotlinデーモンは、Gradleデーモンが使用するのと同じJDKを使用します。</p><h3 id="kotlinデーモンのjvm引数の設定" tabindex="-1">KotlinデーモンのJVM引数の設定 <a class="header-anchor" href="#kotlinデーモンのjvm引数の設定" aria-label="Permalink to &quot;KotlinデーモンのJVM引数の設定&quot;">​</a></h3><p>以下の各引数設定方法は、それ以前の設定を上書きします。</p><ul><li><a href="#gradle-daemon-arguments-inheritance">Gradleデーモン引数の継承</a></li><li><a href="#kotlin-daemon-jvm-options-system-property"><code>kotlin.daemon.jvm.options</code>システムプロパティ</a></li><li><a href="#kotlin-daemon-jvmargs-property"><code>kotlin.daemon.jvmargs</code>プロパティ</a></li><li><a href="#kotlin-extension"><code>kotlin</code>エクステンション</a></li><li><a href="#specific-task-definition">特定のタスク定義</a></li></ul><h4 id="gradleデーモン引数の継承" tabindex="-1">Gradleデーモン引数の継承 <a class="header-anchor" href="#gradleデーモン引数の継承" aria-label="Permalink to &quot;Gradleデーモン引数の継承&quot;">​</a></h4><p>デフォルトでは、KotlinデーモンはGradleデーモンから特定の引数セットを継承しますが、Kotlinデーモンに直接指定されたJVM引数でそれらを上書きします。例えば、<code>gradle.properties</code>ファイルに以下のJVM引数を追加した場合：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.gradle.jvmargs=-Xmx1500m -Xms500m -XX:MaxMetaspaceSize=1g</span></span></code></pre></div><p>これらの引数は、KotlinデーモンのJVM引数に追加されます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-Xmx1500m -XX:ReservedCodeCacheSize=320m -XX:MaxMetaspaceSize=1g -XX:UseParallelGC -ea -XX:+UseCodeCacheFlushing -XX:+HeapDumpOnOutOfMemoryError -Djava.awt.headless=true -Djava.rmi.server.hostname=127.0.0.1 --add-exports=java.base/sun.nio.ch=ALL-UNNAMED</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>KotlinデーモンのJVM引数に関するデフォルトの動作の詳細については、<a href="#kotlin-daemon-s-behavior-with-jvm-arguments">KotlinデーモンのJVM引数に関する動作</a>を参照してください。</p></div><h4 id="kotlin-daemon-jvm-optionsシステムプロパティ" tabindex="-1">kotlin.daemon.jvm.optionsシステムプロパティ <a class="header-anchor" href="#kotlin-daemon-jvm-optionsシステムプロパティ" aria-label="Permalink to &quot;kotlin.daemon.jvm.optionsシステムプロパティ&quot;">​</a></h4><p>GradleデーモンのJVM引数に<code>kotlin.daemon.jvm.options</code>システムプロパティがある場合、<code>gradle.properties</code>ファイルでそれを使用します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.gradle.jvmargs=-Dkotlin.daemon.jvm.options=-Xmx1500m,Xms500m</span></span></code></pre></div><p>引数を渡す際は、以下のルールに従ってください。</p><ul><li><code>Xmx</code>、<code>XX:MaxMetaspaceSize</code>、<code>XX:ReservedCodeCacheSize</code>の引数の前に<strong>のみ</strong>マイナス記号<code>-</code>を使用します。</li><li>引数はスペース<strong>なし</strong>でカンマ (<code>,</code>) で区切ります。スペースの後に続く引数はKotlinデーモンではなく、Gradleデーモンで使用されます。</li></ul><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>以下の条件がすべて満たされている場合、Gradleはこれらのプロパティを無視します。 * GradleがJDK 1.9以上を使用している。 * Gradleのバージョンが7.0以上7.1.1以下である。 * GradleがKotlin DSLスクリプトをコンパイルしている。 * Kotlinデーモンが実行されていない。 これを回避するには、Gradleをバージョン7.2（またはそれ以降）にアップグレードするか、<code>kotlin.daemon.jvmargs</code>プロパティを使用してください — 次のセクションを参照してください。</p></div><h4 id="kotlin-daemon-jvmargsプロパティ" tabindex="-1">kotlin.daemon.jvmargsプロパティ <a class="header-anchor" href="#kotlin-daemon-jvmargsプロパティ" aria-label="Permalink to &quot;kotlin.daemon.jvmargsプロパティ&quot;">​</a></h4><p><code>gradle.properties</code>ファイルに<code>kotlin.daemon.jvmargs</code>プロパティを追加できます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.daemon.jvmargs=-Xmx1500m -Xms500m</span></span></code></pre></div><p>ここでまたはGradleのJVM引数で<code>ReservedCodeCacheSize</code>引数を指定しない場合、Kotlin Gradleプラグインはデフォルト値の<code>320m</code>を適用することに注意してください。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-Xmx1500m -XX:ReservedCodeCacheSize=320m -Xms500m</span></span></code></pre></div><h4 id="kotlinエクステンション" tabindex="-1">kotlinエクステンション <a class="header-anchor" href="#kotlinエクステンション" aria-label="Permalink to &quot;kotlinエクステンション&quot;">​</a></h4><p><code>kotlin</code>エクステンションで引数を指定できます。</p>',46)),s(n,{group:"build-script"},{default:l(()=>[s(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>e[0]||(e[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinDaemonJvmArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," listOf"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>e[1]||(e[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinDaemonJvmArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),e[9]||(e[9]=i("h4",{id:"特定のタスク定義",tabindex:"-1"},[a("特定のタスク定義 "),i("a",{class:"header-anchor",href:"#特定のタスク定義","aria-label":'Permalink to "特定のタスク定義"'},"​")],-1)),e[10]||(e[10]=i("p",null,"特定のタスクの引数を指定できます。",-1)),s(n,{group:"build-script"},{default:l(()=>[s(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>e[2]||(e[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"CompileUsingKotlinDaemon"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinDaemonJvmArguments."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"listOf"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>e[3]||(e[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"CompileUsingKotlinDaemon"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"configureEach { "),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"task"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ->")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    task"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlinDaemonJvmArguments "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx1g"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms512m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),e[11]||(e[11]=o('<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>この場合、タスクの実行時に新しいKotlinデーモンインスタンスが開始される可能性があります。<a href="#kotlin-daemon-s-behavior-with-jvm-arguments">KotlinデーモンのJVM引数に関する動作</a>について詳しく学習してください。</p></div><h3 id="kotlinデーモンのjvm引数に関する動作" tabindex="-1">KotlinデーモンのJVM引数に関する動作 <a class="header-anchor" href="#kotlinデーモンのjvm引数に関する動作" aria-label="Permalink to &quot;KotlinデーモンのJVM引数に関する動作&quot;">​</a></h3><p>KotlinデーモンのJVM引数を設定する際、以下の点に注意してください。</p><ul><li>異なるサブプロジェクトやタスクが異なるJVM引数セットを持つ場合、複数のKotlinデーモンインスタンスが同時に実行されることが想定されます。</li><li>新しいKotlinデーモンインスタンスは、Gradleが関連するコンパイルタスクを実行し、既存のKotlinデーモンが同じJVM引数セットを持っていない場合にのみ開始されます。 プロジェクトに多くのサブプロジェクトがあると想像してください。それらのほとんどはKotlinデーモンに必要なヒープメモリを必要としますが、1つのモジュールは多くのヒープメモリを必要とします（ただし、滅多にコンパイルされません）。 この場合、そのようなモジュールには異なるJVM引数セットを提供すべきです。そうすれば、より大きなヒープサイズを持つKotlinデーモンは、この特定のモジュールに手を加える開発者のみに対して起動します。<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>コンパイルリクエストを処理するのに十分なヒープサイズを持つKotlinデーモンが既に実行されている場合、他のJVM引数が異なっていても、新しいデーモンを開始する代わりにこのデーモンが再利用されます。</p></div></li></ul><p>以下の引数が指定されていない場合、KotlinデーモンはGradleデーモンからそれらを継承します。</p><ul><li><code>-Xmx</code></li><li><code>-XX:MaxMetaspaceSize</code></li><li><code>-XX:ReservedCodeCacheSize</code>。指定または継承されていない場合、デフォルト値は<code>320m</code>です。</li></ul><p>Kotlinデーモンには以下のデフォルトJVM引数があります。</p><ul><li><code>-XX:UseParallelGC</code>。この引数は、他のガベージコレクタが指定されていない場合にのみ適用されます。</li><li><code>-ea</code></li><li><code>-XX:+UseCodeCacheFlushing</code></li><li><code>-Djava.awt.headless=true</code></li><li><code>-D{java.servername.property}={localhostip}</code></li><li><code>--add-exports=java.base/sun.nio.ch=ALL-UNNAMED</code>。この引数は、JDKバージョン16以降にのみ適用されます。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>KotlinデーモンのデフォルトJVM引数のリストは、バージョン間で異なる場合があります。<a href="https://visualvm.github.io/" target="_blank" rel="noreferrer">VisualVM</a>のようなツールを使用して、Kotlinデーモンなどの実行中のJVMプロセスの実際の`設定を確認できます。</p></div><h2 id="以前のコンパイラへのロールバック" tabindex="-1">以前のコンパイラへのロールバック <a class="header-anchor" href="#以前のコンパイラへのロールバック" aria-label="Permalink to &quot;以前のコンパイラへのロールバック&quot;">​</a></h2><p>Kotlin 2.0.0以降、K2コンパイラがデフォルトで使用されます。</p><p>Kotlin 2.0.0以降で以前のコンパイラを使用するには、以下のいずれかを実行します。</p><ul><li><p><code>build.gradle.kts</code>ファイルで、<a href="/ja/kotlin/gradle-compiler-options#example-of-setting-languageversion">言語バージョンを設定</a>して<code>1.9</code>にします。</p><p>または</p></li><li><p>以下のコンパイラオプションを使用します：<code>-language-version 1.9</code>。</p></li></ul><p>K2コンパイラの利点の詳細については、<a href="/ja/kotlin/k2-compiler-migration-guide">K2コンパイラの移行ガイド</a>を参照してください。</p><h2 id="kotlinコンパイラ実行戦略の定義" tabindex="-1">Kotlinコンパイラ実行戦略の定義 <a class="header-anchor" href="#kotlinコンパイラ実行戦略の定義" aria-label="Permalink to &quot;Kotlinコンパイラ実行戦略の定義&quot;">​</a></h2><p><em>Kotlinコンパイラ実行戦略</em>は、Kotlinコンパイラがどこで実行されるか、そして各ケースでインクリメンタルコンパイルがサポートされるかどうかを定義します。</p><p>コンパイラ実行戦略は3つあります。</p><table tabindex="0"><thead><tr><th>戦略</th><th>Kotlinコンパイラの実行場所</th><th>インクリメンタルコンパイル</th><th>その他の特性と注意点</th></tr></thead><tbody><tr><td>Daemon</td><td>独自のデーモンプロセス内</td><td>あり</td><td><em>デフォルトかつ最速の戦略</em>。異なるGradleデーモン間や複数の並行コンパイルで共有できます。</td></tr><tr><td>In process</td><td>Gradleデーモンプロセス内</td><td>なし</td><td>Gradleデーモンとヒープを共有する場合があります。「インプロセス」実行戦略は「デーモン」実行戦略よりも_低速_です。各<a href="https://docs.gradle.org/current/userguide/worker_api.html" target="_blank" rel="noreferrer">ワーカー</a>は、コンパイルごとに個別のKotlinコンパイラクラスローダーを作成します。</td></tr><tr><td>Out of process</td><td>コンパイルごとに別プロセス</td><td>なし</td><td>最も低速な実行戦略です。「インプロセス」に似ていますが、さらに各コンパイルごとにGradleワーカー内に個別のJavaプロセスを作成します。</td></tr></tbody></table><p>Kotlinコンパイラ実行戦略を定義するには、以下のいずれかのプロパティを使用できます。</p><ul><li><code>kotlin.compiler.execution.strategy</code> Gradleプロパティ。</li><li><code>compilerExecutionStrategy</code>コンパイルタスクプロパティ。</li></ul><p>タスクプロパティ<code>compilerExecutionStrategy</code>は、Gradleプロパティ<code>kotlin.compiler.execution.strategy</code>よりも優先されます。</p><p><code>kotlin.compiler.execution.strategy</code>プロパティに使用できる値は以下の通りです。</p><ol><li><code>daemon</code> (デフォルト)</li><li><code>in-process</code></li><li><code>out-of-process</code></li></ol><p><code>gradle.properties</code>でGradleプロパティ<code>kotlin.compiler.execution.strategy</code>を使用します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.compiler.execution.strategy=out-of-process</span></span></code></pre></div><p><code>compilerExecutionStrategy</code>タスクプロパティに使用できる値は以下の通りです。</p><ol><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.DAEMON</code> (デフォルト)</li><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.IN_PROCESS</code></li><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.OUT_OF_PROCESS</code></li></ol><p>ビルドスクリプトでタスクプロパティ<code>compilerExecutionStrategy</code>を使用します。</p>',28)),s(n,{group:"build-script"},{default:l(()=>[s(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>e[4]||(e[4]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," org.jetbrains.kotlin.gradle.tasks.CompileUsingKotlinDaemon")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// ...")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"CompileUsingKotlinDaemon"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    compilerExecutionStrategy."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(KotlinCompilerExecutionStrategy.IN_PROCESS)")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>e[5]||(e[5]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," org.jetbrains.kotlin.gradle.tasks.CompileUsingKotlinDaemon")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// ...")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"CompileUsingKotlinDaemon"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerExecutionStrategy "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," KotlinCompilerExecutionStrategy."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"IN_PROCESS")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),e[12]||(e[12]=o(`<h2 id="kotlinコンパイラのフォールバック戦略" tabindex="-1">Kotlinコンパイラのフォールバック戦略 <a class="header-anchor" href="#kotlinコンパイラのフォールバック戦略" aria-label="Permalink to &quot;Kotlinコンパイラのフォールバック戦略&quot;">​</a></h2><p>Kotlinコンパイラのフォールバック戦略は、デーモンが何らかの形で失敗した場合に、Kotlinデーモン外でコンパイルを実行することです。 Gradleデーモンがオンの場合、コンパイラは「インプロセス」戦略](#defining-kotlin-compiler-execution-strategy)を使用します。 Gradleデーモンがオフの場合、コンパイラは「アウトオブプロセス」戦略を使用します。</p><p>このフォールバックが発生した場合、Gradleのビルド出力に以下の警告行が表示されます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Failed to compile with Kotlin daemon: java.lang.RuntimeException: Could not connect to Kotlin compile daemon</span></span>
<span class="line"><span>[exception stacktrace]</span></span>
<span class="line"><span>Using fallback strategy: Compile without Kotlin daemon</span></span>
<span class="line"><span>Try ./gradlew --stop if this issue persists.</span></span></code></pre></div><p>しかし、別の戦略へのサイレントフォールバックは、多くのシステムリソースを消費したり、非決定的なビルドにつながる可能性があります。 これについては、この<a href="https://youtrack.jetbrains.com/issue/KT-48843/Add-ability-to-disable-Kotlin-daemon-fallback-strategy" target="_blank" rel="noreferrer">YouTrack issue</a>で詳しく読むことができます。 これを回避するため、Gradleプロパティ<code>kotlin.daemon.useFallbackStrategy</code>があり、そのデフォルト値は<code>true</code>です。 値が<code>false</code>の場合、デーモンの起動または通信に問題があるビルドは失敗します。このプロパティを<code>gradle.properties</code>で宣言します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.daemon.useFallbackStrategy=false</span></span></code></pre></div><p>Kotlinコンパイルタスクには<code>useDaemonFallbackStrategy</code>プロパティもあり、両方を使用する場合はGradleプロパティよりも優先されます。</p>`,7)),s(n,{group:"build-script"},{default:l(()=>[s(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>e[6]||(e[6]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    compileKotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        useDaemonFallbackStrategy."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"false"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>e[7]||(e[7]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"named("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"compileKotlin"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"configure {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    useDaemonFallbackStrategy "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),e[13]||(e[13]=o(`<p>コンパイルを実行するためのメモリが不足している場合、ログにその旨のメッセージが表示されます。</p><h2 id="最新の言語バージョンの試用" tabindex="-1">最新の言語バージョンの試用 <a class="header-anchor" href="#最新の言語バージョンの試用" aria-label="Permalink to &quot;最新の言語バージョンの試用&quot;">​</a></h2><p>Kotlin 2.0.0以降、最新の言語バージョンを試すには、<code>gradle.properties</code>ファイルで<code>kotlin.experimental.tryNext</code>プロパティを設定します。 このプロパティを使用すると、Kotlin Gradleプラグインは、使用しているKotlinバージョンのデフォルト値よりも1つ高い言語バージョンに引き上げます。 例えば、Kotlin 2.0.0ではデフォルトの言語バージョンは2.0ですが、このプロパティは言語バージョン2.1を設定します。</p><p>または、以下のコマンドを実行できます。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assemble</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Pkotlin.experimental.tryNext=true</span></span></code></pre></div><p><a href="#build-reports">ビルドレポート</a>では、各タスクのコンパイルに使用された言語バージョンを確認できます。</p><h2 id="ビルドレポート" tabindex="-1">ビルドレポート <a class="header-anchor" href="#ビルドレポート" aria-label="Permalink to &quot;ビルドレポート&quot;">​</a></h2><p>ビルドレポートには、異なるコンパイルフェーズの所要時間と、コンパイルがインクリメンタルでなかった理由が含まれています。 ビルドレポートを使用して、コンパイル時間が長すぎる場合や、同じプロジェクトでも時間が異なる場合に、パフォーマンスの問題を調査してください。</p><p>Kotlinビルドレポートは、単一のGradleタスクを粒度単位とする<a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">Gradleビルドスキャン</a>よりも効率的にビルドパフォーマンスの問題を調査するのに役立ちます。</p><p>ビルドレポートを分析することで解決できる、時間がかかるコンパイルに関する一般的なケースが2つあります。</p><ul><li>ビルドがインクリメンタルではなかった。原因を分析し、根本的な問題を修正してください。</li><li>ビルドはインクリメンタルだったが、時間がかかりすぎた。ソースファイルを再編成してみてください — 大きなファイルを分割する、別々のクラスを異なるファイルに保存する、大きなクラスをリファクタリングする、トップレベル関数を異なるファイルで宣言するなど。</li></ul><p>ビルドレポートには、プロジェクトで使用されているKotlinバージョンも表示されます。さらに、Kotlin 1.9.0以降では、 <a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">Gradleビルドスキャン</a>で、コードのコンパイルにどのコンパイラが使用されたかを確認できます。</p><p><a href="https://blog.jetbrains.com/kotlin/2022/06/introducing-kotlin-build-reports/#how_to_read_build_reports" target="_blank" rel="noreferrer">ビルドレポートの読み方</a>と、<a href="https://blog.jetbrains.com/kotlin/2022/06/introducing-kotlin-build-reports/#how_we_use_build_reports_in_jetbrains" target="_blank" rel="noreferrer">JetBrainsがビルドレポートをどのように使用しているか</a>について詳しく学習してください。</p><h3 id="ビルドレポートの有効化" tabindex="-1">ビルドレポートの有効化 <a class="header-anchor" href="#ビルドレポートの有効化" aria-label="Permalink to &quot;ビルドレポートの有効化&quot;">​</a></h3><p>ビルドレポートを有効にするには、<code>gradle.properties</code>でビルドレポートの出力先を宣言します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.output=file</span></span></code></pre></div><p>出力には、以下の値とその組み合わせが使用できます。</p><table tabindex="0"><thead><tr><th>オプション</th><th>説明</th></tr></thead><tbody><tr><td><code>file</code></td><td>ビルドレポートを人間が判読可能な形式でローカルファイルに保存します。デフォルトは<code>\${project_folder}/build/reports/kotlin-build/\${project_name}-timestamp.txt</code>です。</td></tr><tr><td><code>single_file</code></td><td>ビルドレポートをオブジェクト形式で指定されたローカルファイルに保存します。</td></tr><tr><td><code>build_scan</code></td><td>ビルドレポートを<a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">ビルドスキャン</a>の<code>custom values</code>セクションに保存します。Gradle Enterpriseプラグインはカスタム値の数とその長さを制限することに注意してください。大規模なプロジェクトでは、一部の値が失われる可能性があります。</td></tr><tr><td><code>http</code></td><td>HTTP(S)を使用してビルドレポートをPOSTします。POSTメソッドはJSON形式でメトリクスを送信します。送信されるデータの現在のバージョンは<a href="https://github.com/JetBrains/kotlin/blob/master/libraries/tools/kotlin-gradle-plugin/src/common/kotlin/org/jetbrains/kotlin/gradle/report/data/GradleCompileStatisticsData.kt" target="_blank" rel="noreferrer">Kotlinリポジトリ</a>で確認できます。HTTPエンドポイントのサンプルは<a href="https://blog.jetbrains.com/kotlin/2022/06/introducing-kotlin-build-reports/#enable_build_reports" target="_blank" rel="noreferrer">このブログ投稿</a>で確認できます。</td></tr><tr><td><code>json</code></td><td>ビルドレポートをJSON形式でローカルファイルに保存します。ビルドレポートの場所は<code>kotlin.build.report.json.directory</code>で設定します（以下参照）。デフォルトでは、名前は<code>\${project_name}-build-&lt;date-time&gt;-&lt;index&gt;.json</code>です。</td></tr></tbody></table><p><code>kotlin.build.report</code>で利用可能なオプションのリストを以下に示します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 必須の出力先。任意の組み合わせが可能です</span></span>
<span class="line"><span>kotlin.build.report.output=file,single_file,http,build_scan,json</span></span>
<span class="line"><span></span></span>
<span class="line"><span># single_file出力を使用する場合、必須です。レポートの保存先</span></span>
<span class="line"><span># 非推奨の\`kotlin.internal.single.build.metrics.file\`プロパティの代わりに使用してください</span></span>
<span class="line"><span>kotlin.build.report.single_file=some_filename</span></span>
<span class="line"><span></span></span>
<span class="line"><span># json出力を使用する場合、必須です。レポートの保存先</span></span>
<span class="line"><span>kotlin.build.report.json.directory=my/directory/path</span></span>
<span class="line"><span></span></span>
<span class="line"><span># オプション。ファイルベースレポートの出力ディレクトリ。デフォルト：build/reports/kotlin-build/</span></span>
<span class="line"><span>kotlin.build.report.file.output_dir=kotlin-reports</span></span>
<span class="line"><span></span></span>
<span class="line"><span># オプション。ビルドレポートにマークを付けるためのラベル（例：デバッグパラメータ）</span></span>
<span class="line"><span>kotlin.build.report.label=some_label</span></span></code></pre></div><p>HTTPにのみ適用されるオプション：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 必須。HTTP(S)ベースのレポートを投稿する場所</span></span>
<span class="line"><span>kotlin.build.report.http.url=http://127.0.0.1:8080</span></span>
<span class="line"><span></span></span>
<span class="line"><span># オプション。HTTPエンドポイントが認証を必要とする場合のユーザー名とパスワード</span></span>
<span class="line"><span>kotlin.build.report.http.user=someUser</span></span>
<span class="line"><span>kotlin.build.report.http.password=somePassword</span></span>
<span class="line"><span></span></span>
<span class="line"><span># オプション。ビルドのGitブランチ名をビルドレポートに追加します</span></span>
<span class="line"><span>kotlin.build.report.http.include_git_branch.name=true|false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># オプション。コンパイラ引数をビルドレポートに追加します</span></span>
<span class="line"><span># プロジェクトに多くのモジュールが含まれている場合、レポート内のコンパイラ引数は非常に重くなり、あまり役に立たない場合があります</span></span>
<span class="line"><span>kotlin.build.report.include_compiler_arguments=true|false</span></span></code></pre></div><h3 id="カスタム値の制限" tabindex="-1">カスタム値の制限 <a class="header-anchor" href="#カスタム値の制限" aria-label="Permalink to &quot;カスタム値の制限&quot;">​</a></h3><p>ビルドスキャンの統計を収集するために、Kotlinビルドレポートは<a href="https://docs.gradle.com/enterprise/tutorials/extending-build-scans/" target="_blank" rel="noreferrer">Gradleのカスタム値</a>を使用します。 あなたとさまざまなGradleプラグインはカスタム値にデータを書き込むことができます。カスタム値の数には制限があります。 現在の最大カスタム値数は、<a href="https://docs.gradle.com/enterprise/gradle-plugin/#adding_custom_values" target="_blank" rel="noreferrer">Build scan plugin docs</a>で確認してください。</p><p>大規模なプロジェクトでは、そのようなカスタム値の数が非常に多くなる場合があります。この数が制限を超えると、ログに以下のメッセージが表示されます。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Maximum number of custom values (1,000) exceeded</span></span></code></pre></div><p>Kotlinプラグインが生成するカスタム値の数を減らすには、<code>gradle.properties</code>で以下のプロパティを使用します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.build_scan.custom_values_limit=500</span></span></code></pre></div><h3 id="プロジェクトおよびシステムプロパティの収集をオフにする" tabindex="-1">プロジェクトおよびシステムプロパティの収集をオフにする <a class="header-anchor" href="#プロジェクトおよびシステムプロパティの収集をオフにする" aria-label="Permalink to &quot;プロジェクトおよびシステムプロパティの収集をオフにする&quot;">​</a></h3><p>HTTPビルド統計ログには、一部のプロジェクトおよびシステムプロパティが含まれる場合があります。これらのプロパティはビルドの動作を変更する可能性があるため、ビルド統計にログを記録することは有用です。 これらのプロパティは、パスワードやプロジェクトのフルパスなど、機密データを保存する可能性があります。</p><p>これらの統計の収集は、<code>kotlin.build.report.http.verbose_environment</code>プロパティを<code>gradle.properties</code>に追加することで無効にできます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JetBrainsはこれらの統計を収集しません。レポートの保存場所は<a href="#enabling-build-reports">こちら</a>で選択できます。</p></div><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>以下について詳しく学習してください。</p><ul><li><a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="noreferrer">Gradleの基本と詳細</a>。</li><li><a href="/ja/kotlin/gradle-plugin-variants">Gradleプラグインバリアントのサポート</a>。</li></ul>`,35))])}const f=p(c,[["render",k]]);export{v as __pageData,f as default};
