import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"字元","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/characters.md","filePath":"zh-Hant/kotlin/characters.md","lastUpdated":1754307826000}'),e={name:"zh-Hant/kotlin/characters.md"};function l(h,s,p,k,d,c){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="字元" tabindex="-1">字元 <a class="header-anchor" href="#字元" aria-label="Permalink to &quot;字元&quot;">​</a></h1><p>字元由 <code>Char</code> 型別表示。 字元字面值使用單引號：<code>&#39;1&#39;</code>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在 JVM 上，儲存為基本型別 <code>char</code> 的字元代表一個 16 位元的 Unicode 字元。</p></div><p>特殊字元以逸出反斜線 <code>\\</code> 開頭。 支援以下逸出序列：</p><ul><li><code>\\t</code> – 索引標籤</li><li><code>\\b</code> – 倒退鍵</li><li><code></code> – 換行 (LF)</li><li><code>\\r</code> – 歸位 (CR)</li><li><code>\\&#39;</code> – 單引號</li><li><code>\\&quot;</code> – 雙引號</li><li><code>\\\\</code> – 反斜線</li><li><code>\\#</code> – 錢號</li></ul><p>要編碼任何其他字元，請使用 Unicode 逸出序列語法：<code>&#39;\\uFF00&#39;</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aChar: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aChar)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints an extra newline character</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">FF00&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果字元變數的值是數字，您可以使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/digit-to-int.html" target="_blank" rel="noreferrer"><code>digitToInt()</code></a> 函數將其明確地轉換為 <code>Int</code> 數字。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在 JVM 上，當需要可為空（nullable）的參考時，字元會被裝箱（boxed）到 Java 類別中，就像數字一樣（請參閱<a href="/zh-Hant/kotlin/numbers#boxing-and-caching-numbers-on-the-java-virtual-machine">數字</a>中的裝箱和快取數字）。 身分不會透過裝箱操作保留。</p></div>`,9)]))}const E=i(e,[["render",l]]);export{r as __pageData,E as default};
