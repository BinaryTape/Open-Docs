import{_ as o,C as t,c as p,o as d,j as s,G as e,ag as k,a as i,w as l}from"./chunks/framework.Bksy39di.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-fatjar.md","filePath":"ko/ktor/server-fatjar.md","lastUpdated":1755457140000}'),h={name:"ko/ktor/server-fatjar.md"};function c(u,a,g,E,b,m){const n=t("tldr"),r=t("link-summary");return d(),p("div",null,[a[2]||(a[2]=s("h1",{id:"ktor-gradle-플러그인을-사용하여-fat-jar-생성하기",tabindex:"-1"},[i("Ktor Gradle 플러그인을 사용하여 Fat JAR 생성하기 "),s("a",{class:"header-anchor",href:"#ktor-gradle-플러그인을-사용하여-fat-jar-생성하기","aria-label":'Permalink to "Ktor Gradle 플러그인을 사용하여 Fat JAR 생성하기"'},"​")],-1)),e(n,null,{default:l(()=>a[0]||(a[0]=[s("p",null,[s("b",null,"코드 예시"),i(": "),s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/deployment-ktor-plugin"}," deployment-ktor-plugin ")],-1)])),_:1}),e(r,null,{default:l(()=>a[1]||(a[1]=[i("Ktor Gradle 플러그인을 사용하여 실행 가능한 Fat JAR를 생성하고 실행하는 방법을 알아봅니다.")])),_:1}),a[3]||(a[3]=k(`<p><a href="https://github.com/ktorio/ktor-build-plugins" target="_blank" rel="noreferrer">Ktor Gradle 플러그인</a>을 사용하면 모든 코드 의존성(Fat JAR)을 포함하는 실행 가능한 JAR를 생성하고 실행할 수 있습니다.</p><h2 id="configure-plugin" tabindex="-1">Ktor 플러그인 구성하기 <a class="header-anchor" href="#configure-plugin" aria-label="Permalink to &quot;Ktor 플러그인 구성하기 {id=&quot;configure-plugin&quot;}&quot;">​</a></h2><p>Fat JAR를 빌드하려면 먼저 Ktor 플러그인을 구성해야 합니다:</p><ol><li><p><code>build.gradle.kts</code> 파일을 열고 <code>plugins</code> 블록에 플러그인을 추가합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.ktor.plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><a href="./server-dependencies#create-entry-point">주 애플리케이션 클래스</a>가 구성되어 있는지 확인합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mainClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example.ApplicationKt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>선택적으로, <code>ktor.fatJar</code> 확장(extension)을 사용하여 생성될 Fat JAR의 이름을 구성할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fatJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        archiveFileName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fat.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Ktor Gradle 플러그인을 Kotlin Multiplatform Gradle 플러그인과 함께 적용하면 Fat JAR 생성 기능이 자동으로 비활성화됩니다. 두 플러그인을 함께 사용하려면: 1. 위에서 설명한 대로 Ktor Gradle 플러그인이 적용된 JVM 전용 프로젝트를 생성합니다. 2. 해당 JVM 전용 프로젝트에 Kotlin Multiplatform 프로젝트를 의존성으로 추가합니다. 이 임시 해결책(workaround)이 문제를 해결하지 못한다면, <a href="https://youtrack.jetbrains.com/issue/KTOR-8464" target="_blank" rel="noreferrer">KTOR-8464</a>에 댓글을 남겨 알려주세요.</p></div><h2 id="build" tabindex="-1">Fat JAR 빌드 및 실행 <a class="header-anchor" href="#build" aria-label="Permalink to &quot;Fat JAR 빌드 및 실행 {id=&quot;build&quot;}&quot;">​</a></h2><p>Ktor 플러그인은 Fat JAR를 생성하고 실행하기 위한 다음 작업을 제공합니다:</p><ul><li><code>buildFatJar</code>: 프로젝트와 런타임 의존성을 결합한 JAR를 빌드합니다. 이 빌드가 완료되면 <code>build/libs</code> 디렉터리에서 <code>***-all.jar</code> 파일을 볼 수 있습니다.</li><li><code>runFatJar</code>: 프로젝트의 Fat JAR를 빌드하고 실행합니다.</li></ul><blockquote><p>ProGuard를 사용하여 생성된 JAR를 최소화하는 방법을 알아보려면, <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/proguard" target="_blank" rel="noreferrer">proguard</a> 예시를 참조하세요.</p></blockquote>`,9))])}const f=o(h,[["render",c]]);export{y as __pageData,f as default};
