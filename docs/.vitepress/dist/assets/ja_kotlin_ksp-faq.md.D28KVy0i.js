import{_ as t,c as e,o as l,ag as i}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"KSP に関するよくある質問","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/ksp-faq.md","filePath":"ja/kotlin/ksp-faq.md","lastUpdated":1754307826000}'),o={name:"ja/kotlin/ksp-faq.md"};function r(n,a,s,p,k,h){return l(),e("div",null,a[0]||(a[0]=[i('<h1 id="ksp-に関するよくある質問" tabindex="-1">KSP に関するよくある質問 <a class="header-anchor" href="#ksp-に関するよくある質問" aria-label="Permalink to &quot;KSP に関するよくある質問&quot;">​</a></h1><h3 id="ksp-はなぜ必要なのか" tabindex="-1">KSP はなぜ必要なのか？ <a class="header-anchor" href="#ksp-はなぜ必要なのか" aria-label="Permalink to &quot;KSP はなぜ必要なのか？&quot;">​</a></h3><p>KSP には、<a href="/ja/kotlin/kapt">kapt</a> に比べていくつかの利点があります。</p><ul><li>高速です。</li><li>API が Kotlin ユーザーにとってより直感的です。</li><li>生成された Kotlin ソースに対する<a href="/ja/kotlin/ksp-multi-round">複数ラウンド処理</a>をサポートします。</li><li>マルチプラットフォーム互換性を考慮して設計されています。</li></ul><h3 id="ksp-はなぜ-kapt-よりも高速なのですか" tabindex="-1">KSP はなぜ kapt よりも高速なのですか？ <a class="header-anchor" href="#ksp-はなぜ-kapt-よりも高速なのですか" aria-label="Permalink to &quot;KSP はなぜ kapt よりも高速なのですか？&quot;">​</a></h3><p>kapt は Java スタブを生成するために、すべての型参照をパースして解決する必要がありますが、KSP は参照をオンデマンドで解決します。 また、javac への委譲にも時間がかかります。</p><p>さらに、KSP の<a href="/ja/kotlin/ksp-incremental">インクリメンタル処理モデル</a>は、単に分離・集約するよりもきめ細かくなっています。これにより、すべてを再処理するのを避ける機会が増えます。また、KSP はシンボル解決を動的に追跡するため、ファイルの変更が他のファイルを汚染する可能性が低くなり、結果として再処理されるファイルのセットが小さくなります。これは、kapt が処理を javac に委譲するため不可能です。</p><h3 id="ksp-は-kotlin-固有のものですか" tabindex="-1">KSP は Kotlin 固有のものですか？ <a class="header-anchor" href="#ksp-は-kotlin-固有のものですか" aria-label="Permalink to &quot;KSP は Kotlin 固有のものですか？&quot;">​</a></h3><p>KSP は Java ソースも処理できます。API は統一されており、Java クラスと Kotlin クラスをパースすると、KSP で統一されたデータ構造が得られます。</p><h3 id="ksp-をアップグレードするには" tabindex="-1">KSP をアップグレードするには？ <a class="header-anchor" href="#ksp-をアップグレードするには" aria-label="Permalink to &quot;KSP をアップグレードするには？&quot;">​</a></h3><p>KSP には API と実装があります。API はめったに変わらず、後方互換性があります。新しいインターフェースは登場しますが、古いインターフェースが変わることはありません。実装は特定のコンパイラバージョンに紐付けられています。新しいリリースでは、サポートされるコンパイラバージョンが変更される可能性があります。</p><p>プロセッサは API にのみ依存するため、コンパイラバージョンに紐付けられません。 ただし、プロセッサのユーザーは、プロジェクトのコンパイラバージョンを上げる際に KSP バージョンを上げる必要があります。 そうしないと、次のエラーが発生します。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ksp-a.b.c is too old for kotlin-x.y.z. Please upgrade ksp or downgrade kotlin-gradle-plugin</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>プロセッサは API にのみ依存するため、プロセッサのユーザーはプロセッサのバージョンを上げる必要はありません。</p></div><p>例えば、あるプロセッサが KSP 1.0.1 (Kotlin 1.6.0 に厳密に依存) でリリースされテストされたとします。 これを Kotlin 1.6.20 で動作させるには、KSP を Kotlin 1.6.20 用にビルドされたバージョン（例えば KSP 1.1.0）に上げるだけです。</p><h3 id="より新しい-ksp-実装を古い-kotlin-コンパイラで使用できますか" tabindex="-1">より新しい KSP 実装を古い Kotlin コンパイラで使用できますか？ <a class="header-anchor" href="#より新しい-ksp-実装を古い-kotlin-コンパイラで使用できますか" aria-label="Permalink to &quot;より新しい KSP 実装を古い Kotlin コンパイラで使用できますか？&quot;">​</a></h3><p>言語バージョンが同じであれば、Kotlin コンパイラは後方互換性があるとされています。 Kotlin コンパイラのバージョンアップはほとんどの場合、容易なはずです。より新しい KSP 実装が必要な場合は、Kotlin コンパイラをそれに合わせてアップグレードしてください。</p><h3 id="ksp-の更新頻度はどれくらいですか" tabindex="-1">KSP の更新頻度はどれくらいですか？ <a class="header-anchor" href="#ksp-の更新頻度はどれくらいですか" aria-label="Permalink to &quot;KSP の更新頻度はどれくらいですか？&quot;">​</a></h3><p>KSP は<a href="https://semver.org/" target="_blank" rel="noreferrer">セマンティックバージョニング</a>に可能な限り従うようにしています。 KSP のバージョンが <code>major.minor.patch</code> の場合、</p><ul><li><code>major</code> は非互換な API 変更のために予約されています。これに事前に定められたスケジュールはありません。</li><li><code>minor</code> は新機能のために予約されています。これはおよそ四半期ごとに更新されます。</li><li><code>patch</code> はバグ修正と新しい Kotlin リリースのために予約されています。これはおよそ毎月更新されます。</li></ul><p>通常、新しい Kotlin バージョンがリリースされてから数日以内に、対応する KSP リリースが利用可能になります。これには、<a href="/ja/kotlin/eap">プレリリース (ベータ版または RC 版)</a> も含まれます。</p><h3 id="kotlin-以外に、ライブラリのバージョン要件はありますか" tabindex="-1">Kotlin 以外に、ライブラリのバージョン要件はありますか？ <a class="header-anchor" href="#kotlin-以外に、ライブラリのバージョン要件はありますか" aria-label="Permalink to &quot;Kotlin 以外に、ライブラリのバージョン要件はありますか？&quot;">​</a></h3><p>以下は、ライブラリ/インフラストラクチャの要件リストです。</p><ul><li>Android Gradle Plugin 7.1.3+</li><li>Gradle 6.8.3+</li></ul><h3 id="ksp-の今後のロードマップは" tabindex="-1">KSP の今後のロードマップは？ <a class="header-anchor" href="#ksp-の今後のロードマップは" aria-label="Permalink to &quot;KSP の今後のロードマップは？&quot;">​</a></h3><p>以下の項目が計画されています。</p><ul><li><a href="/ja/kotlin/roadmap">新しい Kotlin コンパイラ</a>のサポート</li><li>マルチプラットフォームのサポートを改善します。例えば、ターゲットのサブセットで KSP を実行したり、ターゲット間で計算を共有したりします。</li><li>パフォーマンスを改善します。多くの最適化が必要です！</li><li>引き続きバグを修正します。</li></ul><p>ご意見がある場合は、お気軽に <a href="https://kotlinlang.slack.com/archives/C013BA8EQSE" target="_blank" rel="noreferrer">Kotlin Slack の #ksp チャンネル</a>（<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">招待状を入手する</a>）までご連絡ください。<a href="https://github.com/google/ksp/issues" target="_blank" rel="noreferrer">GitHub の issue/機能リクエスト</a> の提出やプルリクエストも歓迎します！</p>',28)]))}const P=t(o,[["render",r]]);export{c as __pageData,P as default};
