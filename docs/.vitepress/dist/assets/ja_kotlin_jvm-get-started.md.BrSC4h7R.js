import{_ as p,a as d,b as k,c as h,d as g}from"./chunks/jvm-output-2.g0xuV-An.js";import{_ as u,C as o,c,o as m,ag as a,j as i,a as s,G as l,w as n}from"./chunks/framework.Bksy39di.js";const D=JSON.parse('{"title":"Kotlin/JVMを使ってみる","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/jvm-get-started.md","filePath":"ja/kotlin/jvm-get-started.md","lastUpdated":1754307826000}'),_={name:"ja/kotlin/jvm-get-started.md"},E={class:"note custom-block"};function b(y,t,v,f,K,C){const e=o("tab"),r=o("tabs");return m(),c("div",null,[t[11]||(t[11]=a('<h1 id="kotlin-jvmを使ってみる" tabindex="-1">Kotlin/JVMを使ってみる <a class="header-anchor" href="#kotlin-jvmを使ってみる" aria-label="Permalink to &quot;Kotlin/JVMを使ってみる&quot;">​</a></h1><p>このチュートリアルでは、IntelliJ IDEAを使ってコンソールアプリケーションを作成する方法を説明します。</p><p>まず、始めるには、<a href="https://www.jetbrains.com/idea/download/index.html" target="_blank" rel="noreferrer">IntelliJ IDEA</a>の最新バージョンをダウンロードしてインストールしてください。</p><h2 id="プロジェクトを作成する" tabindex="-1">プロジェクトを作成する <a class="header-anchor" href="#プロジェクトを作成する" aria-label="Permalink to &quot;プロジェクトを作成する&quot;">​</a></h2>',4)),i("ol",null,[t[10]||(t[10]=a('<li><p>IntelliJ IDEAで、<strong>File</strong> | <strong>New</strong> | <strong>Project</strong> を選択します。</p></li><li><p>左側のリストで、<strong>Kotlin</strong> を選択します。</p></li><li><p>新しいプロジェクトに名前を付け、必要であればその場所を変更します。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>Create Git repository</strong> チェックボックスを選択して、新しいプロジェクトをバージョン管理下に置きます。これはいつでも後から行うことができます。</p></div><p><img src="'+p+'" alt="Create a console application" width="700"></p></li><li><p><strong>IntelliJ</strong> ビルドシステムを選択します。これは追加のアーティファクトのダウンロードを必要としないネイティブビルダーです。</p><p>さらに設定が必要な、より複雑なプロジェクトを作成したい場合は、MavenまたはGradleを選択します。Gradleの場合、ビルドスクリプトの言語としてKotlinまたはGroovyを選択します。</p></li><li><p><strong>JDK</strong> リストから、プロジェクトで使用したい<a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noreferrer">JDK</a>を選択します。</p><ul><li>JDKがコンピューターにインストールされているものの、IDEで定義されていない場合は、<strong>Add JDK</strong> を選択し、JDKホームディレクトリへのパスを指定します。</li><li>必要なJDKがコンピューターにない場合は、<strong>Download JDK</strong> を選択します。</li></ul></li><li><p><strong>Add sample code</strong> オプションを有効にして、サンプル「<code>Hello World!</code>」アプリケーションを含むファイルを作成します。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>また、<strong>Generate code with onboarding tips</strong> オプションを有効にすると、サンプルコードに役立つコメントを追加できます。</p></div></li>',6)),i("li",null,[t[9]||(t[9]=i("p",null,[i("strong",null,"Create"),s(" をクリックします。")],-1)),i("div",E,[t[8]||(t[8]=i("p",{class:"custom-block-title"},"NOTE",-1)),i("p",null,[t[3]||(t[3]=s("Gradleビルドシステムを選択した場合、プロジェクトにはビルドスクリプトファイル ")),t[4]||(t[4]=i("code",null,"build.gradle(.kts)",-1)),t[5]||(t[5]=s(" があります。 これには、コンソールアプリケーションに必要な")),t[6]||(t[6]=i("code",null,'kotlin("jvm")',-1)),t[7]||(t[7]=s("プラグインと依存関係が含まれています。プラグインの最新バージョンを使用していることを確認してください。 ")),l(r,{group:"build-script"},{default:n(()=>[l(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>t[0]||(t[0]=[i("code",null,'kotlin plugins { kotlin("jvm") version "2.2.10" application } ',-1)])),_:1}),t[2]||(t[2]=s()),l(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>t[1]||(t[1]=[i("code",null,"groovy plugins { id 'org.jetbrains.kotlin.jvm' version '2.2.10' id 'application' } ",-1)])),_:1})]),_:1})])])])]),t[12]||(t[12]=a('<h2 id="アプリケーションを作成する" tabindex="-1">アプリケーションを作成する <a class="header-anchor" href="#アプリケーションを作成する" aria-label="Permalink to &quot;アプリケーションを作成する&quot;">​</a></h2><ol><li><p><code>src/main/kotlin</code> 内の <code>Main.kt</code> ファイルを開きます。<br><code>src</code> ディレクトリにはKotlinのソースファイルとリソースが含まれています。<code>Main.kt</code> ファイルには、<code>Hello, Kotlin!</code> を出力するサンプルコードと、サイクルイテレータの値を含むいくつかの行が含まれています。</p><p><img src="'+d+`" alt="Main.kt with main fun" width="700"></p></li><li><p>コードを修正して、あなたの名前を尋ね、「Hello」と挨拶するようにします。</p><ul><li>入力プロンプトを作成し、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/readln.html" target="_blank" rel="noreferrer"><code>readln()</code></a>関数によって返される値を<code>name</code>変数に割り当てます。</li><li>文字列の連結の代わりに、テキスト出力で変数名の前にドル記号<code>$</code>を直接追加して、<code>$name</code> のように文字列テンプレートを使用しましょう。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;What&#39;s your name?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="アプリケーションを実行する" tabindex="-1">アプリケーションを実行する <a class="header-anchor" href="#アプリケーションを実行する" aria-label="Permalink to &quot;アプリケーションを実行する&quot;">​</a></h2><p>これでアプリケーションを実行する準備ができました。最も簡単な方法は、ガターにある緑色の<strong>Run</strong>アイコンをクリックし、<strong>Run &#39;MainKt&#39;</strong> を選択することです。</p><p><img src="`+k+'" alt="Running a console app" width="350"></p><p>結果は<strong>Run</strong>ツールウィンドウで確認できます。</p><p><img src="'+h+'" alt="Kotlin run output" width="600"></p><p>あなたの名前を入力し、アプリケーションからの挨拶を受け取ってください！</p><p><img src="'+g+'" alt="Kotlin run output" width="600"></p><p>おめでとうございます！初めてのKotlinアプリケーションを実行しましたね。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>このアプリケーションを作成したら、Kotlinの構文をさらに深く掘り下げることができます。</p><ul><li><a href="https://play.kotlinlang.org/byExample/overview" target="_blank" rel="noreferrer">Kotlin examples</a> からサンプルコードを追加する</li><li>IDEA 用の<a href="https://plugins.jetbrains.com/plugin/10081-jetbrains-academy" target="_blank" rel="noreferrer">JetBrains Academy プラグイン</a>をインストールし、<a href="https://plugins.jetbrains.com/plugin/10081-jetbrains-academy/docs/learner-start-guide.html?section=Kotlin%20Koans" target="_blank" rel="noreferrer">Kotlin Koans コース</a>の演習を完了する</li></ul>',13))])}const T=u(_,[["render",b]]);export{D as __pageData,T as default};
