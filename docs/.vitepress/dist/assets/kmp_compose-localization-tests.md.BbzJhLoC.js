import{_ as e,C as t,c as l,o as n,j as s,G as h,ag as p,a as o}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"本地化测试","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/compose-localization-tests.md","filePath":"kmp/compose-localization-tests.md","lastUpdated":1755516278000}'),r={name:"kmp/compose-localization-tests.md"};function d(k,a,c,g,u,E){const i=t("show-structure");return n(),l("div",null,[a[0]||(a[0]=s("h1",{id:"本地化测试",tabindex:"-1"},[o("本地化测试 "),s("a",{class:"header-anchor",href:"#本地化测试","aria-label":'Permalink to "本地化测试"'},"​")],-1)),h(i,{depth:"2"}),a[1]||(a[1]=p(`<p>为了测试本地化，请验证针对不同的区域设置是否显示了正确的翻译字符串，并确保格式和布局能适应区域设置的要求。</p><h2 id="在不同平台上测试区域设置" tabindex="-1">在不同平台上测试区域设置 <a class="header-anchor" href="#在不同平台上测试区域设置" aria-label="Permalink to &quot;在不同平台上测试区域设置&quot;">​</a></h2><h3 id="android" tabindex="-1">Android <a class="header-anchor" href="#android" aria-label="Permalink to &quot;Android&quot;">​</a></h3><p>在 Android 上，你可以通过 <strong>Settings | System | Languages &amp; input | Languages</strong> 更改设备的系统区域设置。对于自动化测试，你可以使用 <code>adb</code> shell 直接在模拟器上修改区域设置：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">adb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setprop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> persist.sys.locale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [BCP-47 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">language</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span></span></code></pre></div><p>此命令会重新启动模拟器，从而允许你使用新的区域设置重新启动应用程序。</p><p>此外，你可以在运行测试前使用 Espresso 等框架以编程方式配置区域设置。例如，你可以使用 <code>LocaleTestRule()</code> 在测试期间自动化区域设置切换。</p><h3 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h3><p>在 iOS 上，你可以通过 <strong>Settings | General | Language &amp; Region</strong> 更改设备的系统语言和区域。对于使用 XCUITest 框架的自动化 UI 测试，请使用启动参数来模拟区域设置更改：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.launchArguments </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;-AppleLanguages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(es)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;-AppleLocale&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es_ES&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="desktop" tabindex="-1">Desktop <a class="header-anchor" href="#desktop" aria-label="Permalink to &quot;Desktop&quot;">​</a></h3><p>在桌面端，JVM 区域设置通常默认为操作系统的区域设置。设置位置因不同的桌面平台而异。</p><p>你可以在 UI 初始化之前，在测试设置或应用程序入口点以编程方式设置 JVM 默认区域设置：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">java.util.Locale.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(java.util.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Locale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es_ES&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h3 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h3><p>为了快速检查，你可以在浏览器偏好设置中更改语言设置。对于自动化测试，Selenium 或 Puppeteer 等浏览器自动化工具可以模拟区域设置更改。</p><p>此外，你可以尝试绕过 <code>window.navigator.languages</code> 属性的只读限制来引入自定义区域设置。更多信息请参阅 <a href="./compose-resource-environment"></a> 教程。</p><h2 id="关键测试场景" tabindex="-1">关键测试场景 <a class="header-anchor" href="#关键测试场景" aria-label="Permalink to &quot;关键测试场景&quot;">​</a></h2><h3 id="自定义区域设置" tabindex="-1">自定义区域设置 <a class="header-anchor" href="#自定义区域设置" aria-label="Permalink to &quot;自定义区域设置&quot;">​</a></h3><ul><li>以编程方式覆盖区域设置。</li><li>断言 UI 元素、格式化字符串和布局能针对所选区域设置正确地进行调整，包括（如适用）处理从右到左的文本。</li></ul><h3 id="默认资源" tabindex="-1">默认资源 <a class="header-anchor" href="#默认资源" aria-label="Permalink to &quot;默认资源&quot;">​</a></h3><p>当指定区域设置没有可用翻译时，将使用默认资源。应用程序必须正确回退到这些默认值。</p><ul><li>使用上述平台特有的方法，将区域设置配置为不支持的值。</li><li>验证回退机制是否正确加载并显示了默认资源。</li></ul><h3 id="区域设置特有情况" tabindex="-1">区域设置特有情况 <a class="header-anchor" href="#区域设置特有情况" aria-label="Permalink to &quot;区域设置特有情况&quot;">​</a></h3><p>为了避免常见的本地化问题，请考虑以下区域设置特有的情况：</p><ul><li>测试 <a href="./compose-regional-format">区域设置特有的格式设置</a>，例如日期格式设置（<code>MM/dd/yyyy</code> vs. <code>dd/MM/yyyy</code>）和数字格式设置。</li><li>验证 <a href="./compose-rtl">RTL 和 LTR 行为</a>，确保阿拉伯语和希伯来语等从右到左的语言能正确显示字符串、布局和对齐方式。</li></ul>`,26))])}const m=e(r,[["render",d]]);export{F as __pageData,m as default};
