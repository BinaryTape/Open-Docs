import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"WebSocket Deflate 扩展","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-websocket-deflate.md","filePath":"ktor/server-websocket-deflate.md","lastUpdated":1755457140000}'),t={name:"ktor/server-websocket-deflate.md"};function l(p,s,h,k,r,o){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="websocket-deflate-扩展" tabindex="-1">WebSocket Deflate 扩展 <a class="header-anchor" href="#websocket-deflate-扩展" aria-label="Permalink to &quot;WebSocket Deflate 扩展&quot;">​</a></h1><p>Ktor 为客户端和服务器实现了 <code>Deflate</code> WebSocket 扩展 <a href="https://tools.ietf.org/html/rfc7692" target="_blank" rel="noreferrer">RFC-7692</a>。该扩展可以透明地在发送前压缩帧，并在接收后解压缩。如果你正在发送大量文本数据，启用此扩展会很有用。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>要使用该扩展，应首先安装它。为此，我们可以在 <code>extensions</code> 代码块中使用 <code>install</code> 方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 适用于客户端和服务器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebSockets) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    extensions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebSocketDeflateExtension) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             * 用于 [java.util.zip.Deflater] 的压缩级别。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compressionLevel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Deflater.DEFAULT_COMPRESSION</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             * 防止压缩小的传出帧。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            compressIfBiggerThan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="高级配置参数" tabindex="-1">高级配置参数 <a class="header-anchor" href="#高级配置参数" aria-label="Permalink to &quot;高级配置参数&quot;">​</a></h3><h4 id="上下文接管" tabindex="-1">上下文接管 <a class="header-anchor" href="#上下文接管" aria-label="Permalink to &quot;上下文接管&quot;">​</a></h4><p>指定客户端（和服务器）是否应使用压缩窗口。启用这些参数可减少每个单一会话分配的空间量。请注意，由于 <code>java.util.zip.Deflater</code> API 的限制，窗口大小无法配置。该值固定为 <code>15</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">clientNoContextTakeOver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">serverNoContextTakeOver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span></code></pre></div><p>这些参数在 <a href="https://tools.ietf.org/html/rfc7692#section-7.1.1" target="_blank" rel="noreferrer">RFC-7692 第 7.1.1 节</a>中有所描述。</p><h4 id="指定压缩条件" tabindex="-1">指定压缩条件 <a class="header-anchor" href="#指定压缩条件" aria-label="Permalink to &quot;指定压缩条件&quot;">​</a></h4><p>要显式指定压缩条件，你可以使用 <code>compressIf</code> 方法。例如，仅压缩文本内容：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compressIf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    frame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Frame.Text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>所有对 <code>compressIf</code> 的调用都会在压缩发生前求值。</p><h4 id="调整协议列表" tabindex="-1">调整协议列表 <a class="header-anchor" href="#调整协议列表" aria-label="Permalink to &quot;调整协议列表&quot;">​</a></h4><p>可以使用 <code>configureProtocols</code> 方法根据需要编辑要发送的协议列表：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureProtocols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { protocols </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    protocols.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    protocols.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,17)]))}const E=a(t,[["render",l]]);export{c as __pageData,E as default};
