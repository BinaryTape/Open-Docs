import{_ as d,c as e,o,ag as r}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Kotlin/Native 目标支持","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/native-target-support.md","filePath":"kotlin/native-target-support.md","lastUpdated":1754307826000}'),a={name:"kotlin/native-target-support.md"};function l(i,t,c,n,p,s){return o(),e("div",null,t[0]||(t[0]=[r('<h1 id="kotlin-native-目标支持" tabindex="-1">Kotlin/Native 目标支持 <a class="header-anchor" href="#kotlin-native-目标支持" aria-label="Permalink to &quot;Kotlin/Native 目标支持&quot;">​</a></h1><p>Kotlin/Native 编译器支持大量不同的目标，但很难为所有目标提供同等水平的支持。本文档描述了 Kotlin/Native 支持哪些目标，并根据编译器对它们的支持程度将它们分为几个等级。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>我们可以根据需要调整等级数量、支持目标列表及其特性。</p></div><p>请注意等级表格中使用的以下术语：</p><ul><li><p><strong>Gradle target name</strong> 是在 Kotlin Multiplatform Gradle 插件中用于启用目标的<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#targets" target="_blank" rel="noreferrer">目标名称</a>。</p></li><li><p><strong>Target triple</strong> 是遵循 <code>&lt;architecture&gt;-&lt;vendor&gt;-&lt;system&gt;-&lt;abi&gt;</code> 结构的<a href="https://clang.llvm.org/docs/CrossCompilation.html#target-triple" target="_blank" rel="noreferrer">目标名称</a>，编译器常用此结构。</p></li><li><p><strong>Running tests</strong> 表示在 Gradle 和 IDE 中开箱即用支持运行测试。</p><p>这仅适用于特定目标的原生主机。例如，你只能在 macOS x86-64 主机上运行 <code>macosX64</code> 和 <code>iosX64</code> 测试。</p></li></ul><h2 id="等级-1" tabindex="-1">等级 1 <a class="header-anchor" href="#等级-1" aria-label="Permalink to &quot;等级 1&quot;">​</a></h2><ul><li>该目标会在 CI 上定期测试，以确保能够编译和运行。</li><li>我们提供编译器版本之间的源代码和<a href="https://youtrack.jetbrains.com/issue/KT-42293" target="_blank" rel="noreferrer">二进制兼容性</a>。</li></ul><table tabindex="0"><thead><tr><th>Gradle target name</th><th>Target triple</th><th>Running tests</th><th>Description</th></tr></thead><tbody><tr><td>仅限 Apple macOS 主机:</td><td></td><td></td><td></td></tr><tr><td><code>macosX64</code></td><td><code>x86_64-apple-macos</code></td><td>✅</td><td>运行于 x86_64 平台上的 Apple macOS</td></tr><tr><td><code>macosArm64</code></td><td><code>aarch64-apple-macos</code></td><td>✅</td><td>运行于 Apple Silicon 平台上的 Apple macOS</td></tr><tr><td><code>iosSimulatorArm64</code></td><td><code>aarch64-apple-ios-simulator</code></td><td>✅</td><td>运行于 Apple Silicon 平台上的 Apple iOS 模拟器</td></tr><tr><td><code>iosX64</code></td><td><code>x86_64-apple-ios-simulator</code></td><td>✅</td><td>运行于 x86-64 平台上的 Apple iOS 模拟器</td></tr><tr><td><code>iosArm64</code></td><td><code>aarch64-apple-ios</code></td><td></td><td>运行于 ARM64 平台上的 Apple iOS 和 iPadOS</td></tr></tbody></table><h2 id="等级-2" tabindex="-1">等级 2 <a class="header-anchor" href="#等级-2" aria-label="Permalink to &quot;等级 2&quot;">​</a></h2><ul><li>该目标会在 CI 上定期测试以确保能够编译，但可能不会自动测试其运行能力。</li><li>我们正尽力在编译器版本之间提供源代码和<a href="https://youtrack.jetbrains.com/issue/KT-42293" target="_blank" rel="noreferrer">二进制兼容性</a>。</li></ul><table tabindex="0"><thead><tr><th>Gradle target name</th><th>Target triple</th><th>Running tests</th><th>Description</th></tr></thead><tbody><tr><td><code>linuxX64</code></td><td><code>x86_64-unknown-linux-gnu</code></td><td>✅</td><td>运行于 x86_64 平台上的 Linux</td></tr><tr><td><code>linuxArm64</code></td><td><code>aarch64-unknown-linux-gnu</code></td><td></td><td>运行于 ARM64 平台上的 Linux</td></tr><tr><td>仅限 Apple macOS 主机:</td><td></td><td></td><td></td></tr><tr><td><code>watchosSimulatorArm64</code></td><td><code>aarch64-apple-watchos-simulator</code></td><td>✅</td><td>运行于 Apple Silicon 平台上的 Apple watchOS 模拟器</td></tr><tr><td><code>watchosX64</code></td><td><code>x86_64-apple-watchos-simulator</code></td><td>✅</td><td>运行于 x86_64 平台上的 Apple watchOS 64 位模拟器</td></tr><tr><td><code>watchosArm32</code></td><td><code>armv7k-apple-watchos</code></td><td></td><td>运行于 ARM32 平台上的 Apple watchOS</td></tr><tr><td><code>watchosArm64</code></td><td><code>arm64_32-apple-watchos</code></td><td></td><td>运行于带有 ILP32 的 ARM64 平台上的 Apple watchOS</td></tr><tr><td><code>tvosSimulatorArm64</code></td><td><code>aarch64-apple-tvos-simulator</code></td><td>✅</td><td>运行于 Apple Silicon 平台上的 Apple tvOS 模拟器</td></tr><tr><td><code>tvosX64</code></td><td><code>x86_64-apple-tvos-simulator</code></td><td>✅</td><td>运行于 x86_64 平台上的 Apple tvOS 模拟器</td></tr><tr><td><code>tvosArm64</code></td><td><code>aarch64-apple-tvos</code></td><td></td><td>运行于 ARM64 平台上的 Apple tvOS</td></tr></tbody></table><h2 id="等级-3" tabindex="-1">等级 3 <a class="header-anchor" href="#等级-3" aria-label="Permalink to &quot;等级 3&quot;">​</a></h2><ul><li>不保证该目标会在 CI 上进行测试。</li><li>我们无法保证不同编译器版本之间的源代码和二进制兼容性，尽管这些目标的此类变更相当罕见。</li></ul><table tabindex="0"><thead><tr><th>Gradle target name</th><th>Target triple</th><th>Running tests</th><th>Description</th></tr></thead><tbody><tr><td><code>androidNativeArm32</code></td><td><code>arm-unknown-linux-androideabi</code></td><td></td><td>运行于 ARM32 平台上的 <a href="https://developer.android.com/ndk" target="_blank" rel="noreferrer">Android NDK</a></td></tr><tr><td><code>androidNativeArm64</code></td><td><code>aarch64-unknown-linux-android</code></td><td></td><td>运行于 ARM64 平台上的 <a href="https://developer.android.com/ndk" target="_blank" rel="noreferrer">Android NDK</a></td></tr><tr><td><code>androidNativeX86</code></td><td><code>i686-unknown-linux-android</code></td><td></td><td>运行于 x86 平台上的 <a href="https://developer.android.com/ndk" target="_blank" rel="noreferrer">Android NDK</a></td></tr><tr><td><code>androidNativeX64</code></td><td><code>x86_64-unknown-linux-android</code></td><td></td><td>运行于 x86_64 平台上的 <a href="https://developer.android.com/ndk" target="_blank" rel="noreferrer">Android NDK</a></td></tr><tr><td><code>mingwX64</code></td><td><code>x86_64-pc-windows-gnu</code></td><td>✅</td><td>使用 <a href="https://www.mingw-w64.org" target="_blank" rel="noreferrer">MinGW</a> 兼容层运行于 64 位 Windows 10 及更高版本</td></tr><tr><td>仅限 Apple macOS 主机:</td><td></td><td></td><td></td></tr><tr><td><code>watchosDeviceArm64</code></td><td><code>aarch64-apple-watchos</code></td><td></td><td>运行于 ARM64 平台上的 Apple watchOS</td></tr></tbody></table><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>linuxArm32Hfp</code> 目标已被弃用，并将在未来版本中移除。</p></div><h2 id="对于库作者" tabindex="-1">对于库作者 <a class="header-anchor" href="#对于库作者" aria-label="Permalink to &quot;对于库作者&quot;">​</a></h2><p>我们不建议库作者测试比 Kotlin/Native 编译器所支持的更多目标，或提供更严格的保证。考虑对原生目标提供支持时，可以采用以下方法：</p><ul><li>支持所有等级 1、2 和 3 中的目标。</li><li>定期测试等级 1 和 2 中支持开箱即用运行测试的目标。</li></ul><p>Kotlin 团队在官方 Kotlin 库中采用此方法，例如 <a href="/kotlin/coroutines-guide">kotlinx.coroutines</a> 和 <a href="/kotlin/serialization">kotlinx.serialization</a>。</p>',19)]))}const u=d(a,[["render",l]]);export{m as __pageData,u as default};
