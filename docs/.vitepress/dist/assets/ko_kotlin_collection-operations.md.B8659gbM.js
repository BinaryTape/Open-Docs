import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"컬렉션 작업 개요","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/collection-operations.md","filePath":"ko/kotlin/collection-operations.md","lastUpdated":1754307826000}'),n={name:"ko/kotlin/collection-operations.md"};function e(h,s,k,p,r,o){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="컬렉션-작업-개요" tabindex="-1">컬렉션 작업 개요 <a class="header-anchor" href="#컬렉션-작업-개요" aria-label="Permalink to &quot;컬렉션 작업 개요&quot;">​</a></h1><p>코틀린 표준 라이브러리는 컬렉션에 대한 작업을 수행하기 위한 다양한 함수를 제공합니다. 여기에는 요소를 가져오거나 추가하는 것과 같은 간단한 작업뿐만 아니라 검색, 정렬, 필터링, 변환 등과 같은 더 복잡한 작업도 포함됩니다.</p><h2 id="확장-함수와-멤버-함수" tabindex="-1">확장 함수와 멤버 함수 <a class="header-anchor" href="#확장-함수와-멤버-함수" aria-label="Permalink to &quot;확장 함수와 멤버 함수&quot;">​</a></h2><p>컬렉션 작업은 표준 라이브러리에서 두 가지 방식으로 선언됩니다. 바로 컬렉션 인터페이스의 <a href="/ko/kotlin/classes#class-members">멤버 함수</a>와 <a href="/ko/kotlin/extensions#extension-functions">확장 함수</a>입니다.</p><p>멤버 함수는 컬렉션 타입에 필수적인 작업을 정의합니다. 예를 들어, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html" target="_blank" rel="noreferrer"><code>Collection</code></a>에는 비어 있는지 확인하는 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/is-empty.html" target="_blank" rel="noreferrer"><code>isEmpty()</code></a> 함수가 포함되어 있으며, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html" target="_blank" rel="noreferrer"><code>List</code></a>에는 요소에 대한 인덱스 접근을 위한 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/get.html" target="_blank" rel="noreferrer"><code>get()</code></a>이 포함되어 있습니다.</p><p>컬렉션 인터페이스의 고유한 구현을 생성할 때 해당 멤버 함수를 구현해야 합니다. 새로운 구현 생성을 더 쉽게 하려면 표준 라이브러리의 스켈레톤(skeletal) 컬렉션 인터페이스 구현인 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-collection/index.html" target="_blank" rel="noreferrer"><code>AbstractCollection</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-list/index.html" target="_blank" rel="noreferrer"><code>AbstractList</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-set/index.html" target="_blank" rel="noreferrer"><code>AbstractSet</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-map/index.html" target="_blank" rel="noreferrer"><code>AbstractMap</code></a> 및 이들의 가변(mutable) 버전을 사용하세요.</p><p>다른 컬렉션 작업은 확장 함수로 선언됩니다. 이들은 필터링, 변환, 순서 지정 및 기타 컬렉션 처리 함수입니다.</p><h2 id="일반적인-작업" tabindex="-1">일반적인 작업 <a class="header-anchor" href="#일반적인-작업" aria-label="Permalink to &quot;일반적인 작업&quot;">​</a></h2><p>일반적인 작업은 <a href="/ko/kotlin/collections-overview#collection-types">읽기 전용 컬렉션과 가변(mutable) 컬렉션</a> 모두에서 사용 가능합니다. 일반적인 작업은 다음 그룹으로 분류됩니다.</p><ul><li><a href="/ko/kotlin/collection-transformations">변환</a></li><li><a href="/ko/kotlin/collection-filtering">필터링</a></li><li><a href="/ko/kotlin/collection-plus-minus"><code>plus</code> 및 <code>minus</code> 연산자</a></li><li><a href="/ko/kotlin/collection-grouping">그룹화</a></li><li><a href="/ko/kotlin/collection-parts">컬렉션 일부 검색</a></li><li><a href="/ko/kotlin/collection-elements">단일 요소 검색</a></li><li><a href="/ko/kotlin/collection-ordering">순서 지정</a></li><li><a href="/ko/kotlin/collection-aggregate">집계 작업</a></li></ul><p>이 페이지에 설명된 작업은 원본 컬렉션에 영향을 주지 않고 결과를 반환합니다. 예를 들어, 필터링 작업은 필터링 조건에 일치하는 모든 요소를 포함하는 _새로운 컬렉션_을 생성합니다. 이러한 작업의 결과는 변수에 저장되거나 다른 방식으로 사용되어야 합니다 (예: 다른 함수에 전달).</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// nothing happens with \`numbers\`, result is lost</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;numbers are still </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$numbers</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> longerThan3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// result is stored in \`longerThan3\`</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;numbers longer than 3 chars are </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$longerThan3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>특정 컬렉션 작업의 경우 <em>대상(destination)</em> 객체를 지정할 수 있는 옵션이 있습니다. 대상은 함수가 새로운 객체로 항목을 반환하는 대신 결과 항목을 추가하는 가변(mutable) 컬렉션입니다. 대상을 사용하는 작업을 수행하기 위해 이름에 <code>To</code> 접미사가 붙은 별도의 함수가 있습니다. 예를 들어, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter.html" target="_blank" rel="noreferrer"><code>filter()</code></a> 대신 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter-to.html" target="_blank" rel="noreferrer"><code>filterTo()</code></a> 또는 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/associate.html" target="_blank" rel="noreferrer"><code>associate()</code></a> 대신 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/associate-to.html" target="_blank" rel="noreferrer"><code>associateTo()</code></a>를 사용할 수 있습니다. 이 함수들은 대상 컬렉션을 추가 매개변수로 받습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filterResults </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//destination object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filterResults) { it.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterIndexedTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filterResults) { index, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filterResults) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// contains results of both operations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>편의를 위해, 이 함수들은 대상 컬렉션을 다시 반환하므로, 함수 호출의 해당 인자에서 바로 생성할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 숫자를 새 해시 세트로 바로 필터링하여, 결과에서 중복을 제거합니다.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HashSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) { it.length }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;distinct item lengths are </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>대상을 사용하는 함수는 필터링, 연관(association), 그룹화, 평탄화(flattening) 및 기타 작업에 사용 가능합니다. 전체 대상 작업 목록은 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index.html" target="_blank" rel="noreferrer">코틀린 컬렉션 참조</a>를 확인하세요.</p><h2 id="쓰기-작업" tabindex="-1">쓰기 작업 <a class="header-anchor" href="#쓰기-작업" aria-label="Permalink to &quot;쓰기 작업&quot;">​</a></h2><p>가변(mutable) 컬렉션의 경우 컬렉션 상태를 변경하는 _쓰기 작업_도 있습니다. 이러한 작업에는 요소 추가, 제거 및 업데이트가 포함됩니다. 쓰기 작업은 <a href="/ko/kotlin/collection-write">쓰기 작업</a>과 <a href="/ko/kotlin/list-operations#list-write-operations">리스트별 작업</a> 및 <a href="/ko/kotlin/map-operations#map-write-operations">맵별 작업</a>의 해당 섹션에 나열되어 있습니다.</p><p>특정 작업의 경우 동일한 작업을 수행하기 위한 함수 쌍이 있습니다. 하나는 해당 위치에서(in-place) 작업을 적용하여 컬렉션의 상태를 변경하고, 다른 하나는 결과를 별도의 컬렉션으로 반환합니다. 예를 들어, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sort.html" target="_blank" rel="noreferrer"><code>sort()</code></a>는 가변 컬렉션을 해당 위치에서 정렬하여 상태가 변경되지만, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sorted.html" target="_blank" rel="noreferrer"><code>sorted()</code></a>는 정렬된 순서로 동일한 요소를 포함하는 새 컬렉션을 생성합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortedNumbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortedNumbers)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortedNumbers)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,21)]))}const g=i(n,[["render",e]]);export{d as __pageData,g as default};
