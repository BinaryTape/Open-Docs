import{_ as p,C as h,c as d,o as r,ag as n,j as i,G as l,a as s,w as t}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlin/Native 作为动态库 – 教程","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/native-dynamic-libraries.md","filePath":"kotlin/native-dynamic-libraries.md","lastUpdated":1754307826000}'),E={name:"kotlin/native-dynamic-libraries.md"};function o(g,a,c,y,F,b){const e=h("tab"),k=h("tabs");return r(),d("div",null,[a[6]||(a[6]=n('<h1 id="kotlin-native-作为动态库-–-教程" tabindex="-1">Kotlin/Native 作为动态库 – 教程 <a class="header-anchor" href="#kotlin-native-作为动态库-–-教程" aria-label="Permalink to &quot;Kotlin/Native 作为动态库 – 教程&quot;">​</a></h1><p>您可以创建动态库，以便在现有程序中使用 Kotlin 代码。这使得代码能够在包括 JVM、Python、Android 等在内的多个平台或语言之间共享。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>对于 iOS 及其他 Apple 目标平台，我们建议生成 framework。关于 Kotlin/Native 作为 Apple framework 的教程，请参见<a href="/kotlin/apple-framework">Kotlin/Native as an Apple framework</a>。</p></div><p>您可以从现有的原生应用程序或库中使用 Kotlin/Native 代码。为此，您需要将 Kotlin 代码编译为 <code>.so</code>、<code>.dylib</code> 或 <code>.dll</code> 格式的动态库。</p><p>在本教程中，您将：</p><ul><li><a href="#create-a-kotlin-library">将 Kotlin 代码编译为动态库</a></li><li><a href="#generated-header-file">探查生成的 C 头文件</a></li><li><a href="#use-generated-headers-from-c">在 C 中使用 Kotlin 动态库</a></li><li><a href="#compile-and-run-the-project">编译并运行项目</a></li></ul><p>您可以使用命令行直接或通过脚本文件（例如 <code>.sh</code> 或 <code>.bat</code> 文件）生成 Kotlin 库。然而，对于拥有数百个文件和库的更大项目来说，这种方法的可伸缩性不佳。使用构建系统可以简化流程，它能够下载并缓存 Kotlin/Native 编译器二进制文件和带有传递性依赖项的库，并运行编译器和测试。Kotlin/Native 可以通过 <a href="/kotlin/gradle-configure-project#targeting-multiple-platforms">Kotlin Multiplatform 插件</a>使用 <a href="https://gradle.org" target="_blank" rel="noreferrer">Gradle</a> 构建系统。</p><p>让我们探查 Kotlin/Native 以及带有 Gradle 的 <a href="/kotlin/gradle-configure-project#targeting-multiple-platforms">Kotlin Multiplatform</a> 构建中与 C 互操作相关的进阶用法。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您使用 Mac 并希望为 macOS 或其他 Apple 目标平台创建并运行应用程序，您还需要先安装 <a href="https://developer.apple.com/download/" target="_blank" rel="noreferrer">Xcode Command Line Tools</a>，启动它并接受许可条款。</p></div><h2 id="创建-kotlin-库" tabindex="-1">创建 Kotlin 库 <a class="header-anchor" href="#创建-kotlin-库" aria-label="Permalink to &quot;创建 Kotlin 库&quot;">​</a></h2><p>Kotlin/Native 编译器可以从 Kotlin 代码生成动态库。动态库通常附带一个 <code>.h</code> 头文件，您可以使用它从 C 调用已编译的代码。</p><p>让我们创建一个 Kotlin 库，并在 C 程序中使用它。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于如何创建新的 Kotlin/Native 项目并在 IntelliJ IDEA 中打开的详细初始步骤和说明，请参见 <a href="/kotlin/native-get-started#using-gradle">Get started with Kotlin/Native</a> 教程。</p></div>',13)),i("ol",null,[a[4]||(a[4]=n(`<li><p>导航到 <code>src/nativeMain/kotlin</code> 目录，并创建 <code>lib.kt</code> 文件，其库内容如下：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> field</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> memberFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ULong</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42UL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> forIntegers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> forFloats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, d: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;That is &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$str</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; from C&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A global String&quot;</span></span></code></pre></div></li>`,1)),i("li",null,[a[2]||(a[2]=i("p",null,[s("使用以下内容更新您的 "),i("code",null,"build.gradle(.kts)"),s(" Gradle 构建文件：")],-1)),l(k,{group:"build-script"},{default:t(()=>[l(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"repositories"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    mavenCentral"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    macosArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {    "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// macOS on Apple Silicon")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // macosX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // macOS on x86_64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxArm64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // Linux on ARM64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // Linux on x86_64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // mingwX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        binaries"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            sharedLib"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "native"'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"       // macOS and Linux ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'                // baseName = "libnative"'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"wrapper"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "8.14"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Wrapper.DistributionType.ALL")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.multiplatform'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"repositories {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mavenCentral()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    macosArm64("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {    "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// Apple Silicon macOS")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // macosX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // macOS on x86_64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxArm64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // Linux on ARM64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // Linux on x86_64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // mingwX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            sharedLib {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "native"'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"       // macOS and Linux ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'                // baseName = "libnative"'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"wrapper {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "8.14"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "ALL"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[3]||(a[3]=i("ul",null,[i("li",null,[i("code",null,"binaries {}"),s(" 代码块配置项目以生成动态库或共享库。")]),i("li",null,[i("code",null,"libnative"),s(" 用作库名称，也是生成的头文件名称的前缀。它还会为头文件中的所有声明添加前缀。")])],-1))]),a[5]||(a[5]=n('<li><p>在 IDE 中运行 <code>linkDebugSharedNative</code> Gradle 任务，或在终端中使用以下控制台命令构建库：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkDebugSharedNative</span></span></code></pre></div></li>',1))]),a[7]||(a[7]=n(`<p>构建会将库生成到 <code>build/bin/native/debugShared</code> 目录中，并包含以下文件：</p><ul><li>macOS: <code>libnative_api.h</code> and <code>libnative.dylib</code></li><li>Linux: <code>libnative_api.h</code> and <code>libnative.so</code></li><li>Windows: <code>libnative_api.h</code>, <code>libnative.def</code>, and <code>libnative.dll</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>您也可以使用 <code>linkNative</code> Gradle 任务来生成库的 <code>debug</code> 和 <code>release</code> 变体。</p></div><p>Kotlin/Native 编译器使用相同的规则为所有平台生成 <code>.h</code> 文件。让我们查看 Kotlin 库的 C API。</p><h2 id="生成的头文件" tabindex="-1">生成的头文件 <a class="header-anchor" href="#生成的头文件" aria-label="Permalink to &quot;生成的头文件&quot;">​</a></h2><p>让我们探查 Kotlin/Native 声明如何映射到 C 函数。</p><p>在 <code>build/bin/native/debugShared</code> 目录中，打开 <code>libnative_api.h</code> 头文件。文件的最开始部分包含标准的 C/C++ 头和尾：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifndef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KONAN_LIBNATIVE_H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KONAN_LIBNATIVE_H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __cplusplus</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// The rest of the generated code</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __cplusplus</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* extern &quot;C&quot; */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* KONAN_LIBNATIVE_H */</span></span></code></pre></div><p>紧随其后，<code>libnative_api.h</code> 包含一个包含通用类型定义的代码块：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __cplusplus</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            libnative_KBoolean;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> _Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           libnative_KBoolean;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     libnative_KChar;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> signed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        libnative_KByte;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              libnative_KShort;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                libnative_KInt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          libnative_KLong;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      libnative_KUByte;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     libnative_KUShort;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       libnative_KUInt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_KULong;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              libnative_KFloat;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             libnative_KDouble;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __attribute__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__vector_size__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))) libnative_KVector128;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              libnative_KNativePtr;</span></span></code></pre></div><p>Kotlin 在创建的 <code>libnative_api.h</code> 文件中，为所有声明使用 <code>libnative_</code> 前缀。以下是完整的类型映射列表：</p><table tabindex="0"><thead><tr><th>Kotlin definition</th><th>C type</th></tr></thead><tbody><tr><td><code>libnative_KBoolean</code></td><td><code>bool</code> or <code>_Bool</code></td></tr><tr><td><code>libnative_KChar</code></td><td><code>unsigned short</code></td></tr><tr><td><code>libnative_KByte</code></td><td><code>signed char</code></td></tr><tr><td><code>libnative_KShort</code></td><td><code>short</code></td></tr><tr><td><code>libnative_KInt</code></td><td><code>int</code></td></tr><tr><td><code>libnative_KLong</code></td><td><code>long long</code></td></tr><tr><td><code>libnative_KUByte</code></td><td><code>unsigned char</code></td></tr><tr><td><code>libnative_KUShort</code></td><td><code>unsigned short</code></td></tr><tr><td><code>libnative_KUInt</code></td><td><code>unsigned int</code></td></tr><tr><td><code>libnative_KULong</code></td><td><code>unsigned long long</code></td></tr><tr><td><code>libnative_KFloat</code></td><td><code>float</code></td></tr><tr><td><code>libnative_KDouble</code></td><td><code>double</code></td></tr><tr><td><code>libnative_KVector128</code></td><td><code>float __attribute__ ((__vector_size__ (16))</code></td></tr><tr><td><code>libnative_KNativePtr</code></td><td><code>void*</code></td></tr></tbody></table><p><code>libnative_api.h</code> 文件的定义部分展示了 Kotlin 原生类型如何映射到 C 原生类型。Kotlin/Native 编译器为每个库自动生成这些条目。反向映射在<a href="/kotlin/mapping-primitive-data-types-from-c">从 C 映射原生数据类型</a>教程中进行了描述。</p><p>在自动生成的类型定义之后，您会找到库中使用的单独类型定义：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_KType;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_KType libnative_KType;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// Automatically generated type definitions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  libnative_KNativePtr pinned;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} libnative_kref_example_Object;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  libnative_KNativePtr pinned;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} libnative_kref_example_Clazz;</span></span></code></pre></div><p>在 C 中，<code>typedef struct { ... } TYPE_NAME</code> 语法声明结构体。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于这种模式的更多解释，请参见 <a href="https://stackoverflow.com/questions/1675351/typedef-struct-vs-struct-definitions" target="_blank" rel="noreferrer">此 StackOverflow 帖子</a>。</p></div><p>从这些定义中可以看出，Kotlin 类型使用相同的模式进行映射：<code>Object</code> 映射到 <code>libnative_kref_example_Object</code>，<code>Clazz</code> 映射到 <code>libnative_kref_example_Clazz</code>。所有结构体仅包含一个带有指针的 <code>pinned</code> 字段。该字段类型 <code>libnative_KNativePtr</code> 早在文件中被定义为 <code>void*</code>。</p><p>由于 C 不支持命名空间，Kotlin/Native 编译器会生成长名称，以避免与现有原生项目中的其他符号可能发生的冲突。</p><h3 id="服务运行时函数" tabindex="-1">服务运行时函数 <a class="header-anchor" href="#服务运行时函数" aria-label="Permalink to &quot;服务运行时函数&quot;">​</a></h3><p><code>libnative_ExportedSymbols</code> 结构体定义了 Kotlin/Native 和您的库提供的所有函数。它大量使用嵌套匿名结构体来模仿包。<code>libnative_</code> 前缀来源于库名称。</p><p><code>libnative_ExportedSymbols</code> 在头文件中包含多个辅助函数：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* Service functions. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DisposeStablePointer)(libnative_KNativePtr ptr);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DisposeString)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string);</span></span></code></pre></div><p>这些函数处理 Kotlin/Native 对象。调用 <code>DisposeStablePointer</code> 来释放对 Kotlin 对象的引用，调用 <code>DisposeString</code> 来释放 Kotlin 字符串（在 C 中其类型为 <code>char*</code>）。</p><p><code>libnative_api.h</code> 文件的下一部分包含运行时函数的结构体声明：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">IsInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KNativePtr ref, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_KType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">IsInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KNativePtr ref, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_KType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KByte);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Byte);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KShort);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Short);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KInt);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Int);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KLong);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Long);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KFloat);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Float);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KDouble);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Double);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KChar);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Char);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KBoolean);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Boolean);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_UByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableUByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KUByte);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KUByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfUByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_UByte);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_UShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableUShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KUShort);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KUShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfUShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KUShort);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_UInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableUInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KUInt);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KUInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfUInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KUInt);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_ULong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableULong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KULong);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KULong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfULong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_ULong);</span></span></code></pre></div><p>您可以使用 <code>IsInstance</code> 函数来检测 Kotlin 对象（通过其 <code>.pinned</code> 指针引用）是否是某个类型的实例。实际生成的运算集合取决于实际用法。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin/Native 拥有自己的垃圾回收器，但它不管理从 C 访问的 Kotlin 对象。然而，Kotlin/Native 提供了与 Swift/Objective-C 的<a href="/kotlin/native-objc-interop">互操作性</a>，并且垃圾回收器已<a href="/kotlin/native-arc-integration">与 Swift/Objective-C ARC 集成</a>。</p></div><h3 id="您的库函数" tabindex="-1">您的库函数 <a class="header-anchor" href="#您的库函数" aria-label="Permalink to &quot;您的库函数&quot;">​</a></h3><p>让我们看看库中使用的单独结构体声明。<code>libnative_kref_example</code> 字段带有 <code>libnative_kref.</code> 前缀，模仿您的 Kotlin 代码的包结构：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* User functions. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          libnative_KType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_type)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          libnative_kref_example_Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_instance)();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get_field)(libnative_kref_example_Object thiz);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } Object;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          libnative_KType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_type)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          libnative_kref_example_Clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Clazz)();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          libnative_KULong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">memberFunction)(libnative_kref_example_Clazz thiz, libnative_KInt p);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } Clazz;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get_globalString)();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">forFloats)(libnative_KFloat f, libnative_KDouble d);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">forIntegers)(libnative_KByte b, libnative_KShort s, libnative_KUInt i, libnative_KLong l);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strings)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } example;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } root;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } kotlin;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} libnative_ExportedSymbols;</span></span></code></pre></div><p>代码使用了匿名结构体声明。此处，<code>struct { ... } foo</code> 在匿名结构体类型的外部结构体中声明了一个字段，该匿名结构体没有名称。</p><p>由于 C 也不支持对象，因此使用函数指针来模仿对象语义。函数指针声明为 <code>RETURN_TYPE (* FIELD_NAME)(PARAMETERS)</code>。</p><p><code>libnative_kref_example_Clazz</code> 字段表示 Kotlin 中的 <code>Clazz</code>。<code>libnative_KULong</code> 可通过 <code>memberFunction</code> 字段访问。唯一的区别是 <code>memberFunction</code> 将 <code>thiz</code> 引用作为第一个形参。由于 C 不支持对象，因此 <code>thiz</code> 指针被显式传递。</p><p><code>Clazz</code> 字段中有一个构造函数（亦称 <code>libnative_kref_example_Clazz_Clazz</code>），它作为构造函数来创建 <code>Clazz</code> 的实例。</p><p>属性被转换为函数。<code>get_</code> 和 <code>set_</code> 前缀分别命名 getter 和 setter 函数。例如，Kotlin 中的只读属性 <code>globalString</code> 在 C 中会变为 <code>get_globalString</code> 函数。</p><p>全局函数 <code>forFloats</code>、<code>forIntegers</code> 和 <code>strings</code> 在 <code>libnative_kref_example</code> 匿名结构体中转换为函数指针。</p><h3 id="入口点" tabindex="-1">入口点 <a class="header-anchor" href="#入口点" aria-label="Permalink to &quot;入口点&quot;">​</a></h3><p>既然您已经了解 API 是如何创建的，那么 <code>libnative_ExportedSymbols</code> 结构体的初始化就是起点。接下来让我们看看 <code>libnative_api.h</code> 的最后一部分：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_ExportedSymbols</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> libnative_symbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>libnative_symbols</code> 函数允许您从原生代码打开通往 Kotlin/Native 库的网关。这是访问库的入口点。库名称用作函数名称的前缀。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>可能需要按线程托管返回的 <code>libnative_ExportedSymbols*</code> 指针。</p></div><h2 id="在-c-中使用生成的头文件" tabindex="-1">在 C 中使用生成的头文件 <a class="header-anchor" href="#在-c-中使用生成的头文件" aria-label="Permalink to &quot;在 C 中使用生成的头文件&quot;">​</a></h2><p>在 C 中使用生成的头文件非常简单。在库目录中，创建 <code>main.c</code> 文件，其代码如下：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;libnative_api.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;stdio.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Obtain reference for calling Kotlin/Native functions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  libnative_ExportedSymbols</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> libnative_symbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lib-&gt;kotlin.root.example.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forIntegers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lib-&gt;kotlin.root.example.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forFloats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Use C and Kotlin/Native strings</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello from Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib-&gt;kotlin.root.example.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;in: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">out:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lib-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisposeString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Create Kotlin object instance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  libnative_kref_example_Clazz newInstance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib-&gt;kotlin.root.example.Clazz.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib-&gt;kotlin.root.example.Clazz.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memberFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newInstance, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lib-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisposeStablePointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newInstance.pinned);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DemoClazz returned </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%ld</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="编译并运行项目" tabindex="-1">编译并运行项目 <a class="header-anchor" href="#编译并运行项目" aria-label="Permalink to &quot;编译并运行项目&quot;">​</a></h2><h3 id="在-macos-上" tabindex="-1">在 macOS 上 <a class="header-anchor" href="#在-macos-上" aria-label="Permalink to &quot;在 macOS 上&quot;">​</a></h3><p>要编译 C 代码并将其与动态库链接，请导航到库目录并运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clang</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libnative.dylib</span></span></code></pre></div><p>编译器会生成一个名为 <code>a.out</code> 的可执行文件。运行它以执行 C 库中的 Kotlin 代码。</p><h3 id="在-linux-上" tabindex="-1">在 Linux 上 <a class="header-anchor" href="#在-linux-上" aria-label="Permalink to &quot;在 Linux 上&quot;">​</a></h3><p>要编译 C 代码并将其与动态库链接，请导航到库目录并运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libnative.so</span></span></code></pre></div><p>编译器会生成一个名为 <code>a.out</code> 的可执行文件。运行它以执行 C 库中的 Kotlin 代码。在 Linux 上，您需要将 <code>.</code> 包含到 <code>LD_LIBRARY_PATH</code> 中，以便应用程序知道从当前文件夹加载 <code>libnative.so</code> 库。</p><h3 id="在-windows-上" tabindex="-1">在 Windows 上 <a class="header-anchor" href="#在-windows-上" aria-label="Permalink to &quot;在 Windows 上&quot;">​</a></h3><p>首先，您需要安装支持 x64_64 目标平台的 Microsoft Visual C++ 编译器。</p><p>最简单的方法是在 Windows 机器上安装 Microsoft Visual Studio。安装过程中，请选择必要组件以使用 C++，例如 <strong>Desktop development with C++</strong>。</p><p>在 Windows 上，您可以通过生成静态库包装器或使用 <a href="https://learn.microsoft.com/en-gb/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya" target="_blank" rel="noreferrer">LoadLibrary</a> 或类似的 Win32API 函数手动包含动态库。</p><p>让我们使用第一个选项，为 <code>libnative.dll</code> 生成静态包装器库：</p><ol><li><p>从工具链调用 <code>lib.exe</code> 来生成静态库包装器 <code>libnative.lib</code>，它能自动化代码中 DLL 的使用：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /def:libnative.def</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /out:libnative.lib</span></span></code></pre></div></li><li><p>将 <code>main.c</code> 编译为可执行文件。将生成的 <code>libnative.lib</code> 包含到构建命令中并开始：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cl.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libnative.lib</span></span></code></pre></div><p>该命令会生成 <code>main.exe</code> 文件，您可以运行它。</p></li></ol><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><ul><li><a href="/kotlin/native-objc-interop">关于与 Swift/Objective-C 的互操作性，了解更多</a></li><li><a href="/kotlin/apple-framework">查看 Kotlin/Native 作为 Apple framework 的教程</a></li></ul>`,62))])}const _=p(E,[["render",o]]);export{u as __pageData,_ as default};
