import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"Amperでのプロジェクト設定","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/amper.md","filePath":"ja/kmp/amper.md","lastUpdated":1755516278000}'),t={name:"ja/kmp/amper.md"};function p(l,s,r,h,k,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="amperでのプロジェクト設定" tabindex="-1">Amperでのプロジェクト設定 <a class="header-anchor" href="#amperでのプロジェクト設定" aria-label="Permalink to &quot;Amperでのプロジェクト設定&quot;">​</a></h1><p><a href="https://github.com/JetBrains/amper/tree/HEAD" target="_blank" rel="noreferrer">Amper</a>は、JetBrainsが開発した新しいツールで、プロジェクトのビルド、パッケージング、公開などの設定に役立ちます。Amperを使用すると、ビルドシステムの扱いに費やす時間を削減し、代わりに実際のビジネス課題の解決に集中できます。</p><p>Amperを使用すると、JVM、Android、iOS、macOS、Linuxで動作するKotlin Multiplatformアプリケーション、およびこれらすべてのサポートされているターゲットで動作するマルチプラットフォームライブラリの構成ファイルを作成できます。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Amperは現在<a href="./supported-platforms#general-kotlin-stability-levels">実験的 (Experimental)</a>です。 Kotlin Multiplatformプロジェクトでお試しいただけます。 <a href="https://youtrack.jetbrains.com/issues/AMPER" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをお待ちしております。</p></div><h2 id="amperの仕組み" tabindex="-1">Amperの仕組み <a class="header-anchor" href="#amperの仕組み" aria-label="Permalink to &quot;Amperの仕組み&quot;">​</a></h2><p>Amperは現在、バックエンドとしてGradleを、プロジェクト構成を定義するフロントエンドとしてYAMLを使用しています。カスタムタスク、CocoaPods、Mavenへのライブラリ公開、およびGradleの相互運用を介したデスクトップアプリケーションのパッケージングをサポートしています。</p><p>Amperを使用すると、プラットフォーム固有のアプリケーションと共有Kotlinライブラリの構成を設定できます。これらは、特別な宣言型DSLを使用して、<code>.yaml</code>モジュールマニフェストファイル内でモジュールとして宣言されます。</p><p>このDSLの核となるコンセプトはKotlin Multiplatformです。Amperを使用すると、複雑なGradleの概念に深く踏み込むことなく、Kotlin Multiplatformプロジェクトを迅速かつ簡単に構成できます。Amper DSLは、依存関係や設定など、マルチプラットフォーム構成を扱うための特別な構文を提供します。</p><p>以下は、JVM、Android、iOSアプリケーションで使用できるKotlin Multiplatform共有ライブラリのAmperマニフェストファイルの例です。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">lib</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  platforms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Shared Compose Multiplatform dependencies:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">org.jetbrains.compose.foundation:foundation:1.5.0-rc01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exported</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">org.jetbrains.compose.material3:material3:1.5.0-rc01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exported</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Android-only dependencies  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies@android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Integration compose with activities</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">androidx.activity:activity-compose:1.7.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exported</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">androidx.appcompat:appcompat:1.6.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">exported</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># iOS-only dependencies with a dependency on a CocoaPod</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Note that CocoaPods dependencies are not yet implemented in the prototype</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies@ios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">pod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;FirebaseCore&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;~&gt; 6.6&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Enable Kotlin serialization</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    serialization</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Enable Compose Multiplatform framework</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  compose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled</span></span></code></pre></div><ul><li><code>product</code>セクションは、プロジェクトの種類とターゲットプラットフォームのリストを定義します。</li><li><code>dependencies</code>セクションは、KotlinおよびMavenの依存関係だけでなく、CocoaPodsやSwift Package Managerなどのプラットフォーム固有のパッケージマネージャーも追加します。</li><li><code>@platform</code>修飾子は、依存関係や設定を含むプラットフォーム固有のセクションを示します。</li></ul><h2 id="amperを試す" tabindex="-1">Amperを試す <a class="header-anchor" href="#amperを試す" aria-label="Permalink to &quot;Amperを試す&quot;">​</a></h2><p>Amperは以下のいずれかの方法で試すことができます。</p><ul><li>JVMおよびAndroidプロジェクトでは、<a href="https://www.jetbrains.com/idea/nextversion/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2023.3以降（ビルド233.11555以降）を使用する。</li><li>コマンドラインまたはCI/CDツールからAmperプロジェクトをビルドするには、<a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="noreferrer">Gradle</a>を使用する。</li></ul><p><a href="./https://github.com/JetBrains/amper/tree/HEAD/docs/Tutorial">このチュートリアル</a>に従って、Amperで最初のKotlin Multiplatformプロジェクトを作成してください。Amperの機能と設計についてさらに学ぶには、<a href="./https://github.com/JetBrains/amper/tree/HEAD/docs/Documentation">ドキュメント</a>を参照してください。</p><p>ご意見がございましたら、お気軽に<a href="https://youtrack.jetbrains.com/issues/AMPER" target="_blank" rel="noreferrer">課題トラッカー</a>にご提出ください。皆様からのご意見は、Amperの将来を形作る上で役立ちます。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li>Amper開発の動機、ユースケース、プロジェクトの現状、将来についてさらに詳しく知るには、<a href="https://blog.jetbrains.com/blog/2023/11/09/amper-improving-the-build-tooling-user-experience" target="_blank" rel="noreferrer">JetBrainsブログ</a>をご覧ください。</li><li>よくある質問への回答を見つけるには、<a href="./https://github.com/JetBrains/amper/tree/HEAD/docs/FAQ">Amper FAQ</a>を参照してください。</li><li>Amperの機能と設計のさまざまな側面をカバーする<a href="./https://github.com/JetBrains/amper/tree/HEAD/docs/Documentation">Amperドキュメント</a>をお読みください。</li></ul>`,18)]))}const c=i(t,[["render",p]]);export{E as __pageData,c as default};
