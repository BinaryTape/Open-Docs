import{_ as n,C as r,c as s,o as d,ag as e,G as i,j as o,a as l}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Kotlin 编译器选项","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/compiler-reference.md","filePath":"kotlin/compiler-reference.md","lastUpdated":1754307826000}'),p={name:"kotlin/compiler-reference.md"};function h(c,a,m,u,b,k){const t=r("TopicTitle");return d(),s("div",null,[a[0]||(a[0]=e('<h1 id="kotlin-编译器选项" tabindex="-1">Kotlin 编译器选项 <a class="header-anchor" href="#kotlin-编译器选项" aria-label="Permalink to &quot;Kotlin 编译器选项&quot;">​</a></h1><p>每个 Kotlin 发布版本都包含适用于所支持目标的编译器：JVM、JavaScript 以及适用于<a href="/kotlin/native-overview#target-platforms">支持平台</a>的原生二进制文件。</p><p>这些编译器由以下工具使用：</p><ul><li>IDE，当您为 Kotlin 项目点击“<strong>编译</strong>”或“<strong>运行</strong>”按钮时。</li><li>Gradle，当您在控制台或 IDE 中调用 <code>gradle build</code> 时。</li><li>Maven，当您在控制台或 IDE 中调用 <code>mvn compile</code> 或 <code>mvn test-compile</code> 时。</li></ul><p>您也可以按照<a href="/kotlin/command-line">使用命令行编译器</a>教程中的说明，从命令行手动运行 Kotlin 编译器。</p><h2 id="编译器选项" tabindex="-1">编译器选项 <a class="header-anchor" href="#编译器选项" aria-label="Permalink to &quot;编译器选项&quot;">​</a></h2><p>Kotlin 编译器提供了多种选项，用于定制编译过程。针对不同目标的编译器选项及其描述都列在本页中。</p><p>有几种方式可以设置编译器选项及其值（<em>编译器实参</em>）：</p><ul><li><p>在 IntelliJ IDEA 中，将编译器实参写入“<strong>设置/偏好设置</strong> | <strong>构建、执行、部署</strong> | <strong>编译器</strong> | <strong>Kotlin 编译器</strong>”中的“<strong>附加命令行参数</strong>”文本框内。</p></li><li><p>如果您正在使用 Gradle，请在 Kotlin 编译任务的 <code>compilerOptions</code> 属性中指定编译器实参。关于详情，请参见<a href="/kotlin/gradle-compiler-options#how-to-define-options">Gradle 编译器选项</a>。</p></li><li><p>如果您正在使用 Maven，请在 Maven 插件节点的 <code>&lt;configuration&gt;</code> 元素中指定编译器实参。关于详情，请参见<a href="/kotlin/maven#specify-compiler-options">Maven</a>。</p></li><li><p>如果您运行命令行编译器，请将编译器实参直接添加到实用工具调用中，或者将它们写入一个 <a href="#argfile">argfile</a> 中。</p><p>例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -include-runtime</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在 Windows 上，当您传递包含分隔符（空白字符、<code>=</code>、<code>;</code>、<code>,</code>）的编译器实参时，请用双引号 (<code>&quot;</code>) 将这些实参括起来。 <code>$ kotlinc.bat hello.kt -include-runtime -d &quot;My Folder\\hello.jar&quot;</code></p></div></li></ul><h2 id="通用选项" tabindex="-1">通用选项 <a class="header-anchor" href="#通用选项" aria-label="Permalink to &quot;通用选项&quot;">​</a></h2><p>以下选项适用于所有 Kotlin 编译器。</p><h3 id="version" tabindex="-1">-version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;-version&quot;">​</a></h3><p>显示编译器版本。</p><h3 id="verbose" tabindex="-1">-verbose <a class="header-anchor" href="#verbose" aria-label="Permalink to &quot;-verbose&quot;">​</a></h3><p>启用详细日志输出，其中包含编译过程的详细信息。</p><h3 id="script" tabindex="-1">-script <a class="header-anchor" href="#script" aria-label="Permalink to &quot;-script&quot;">​</a></h3><p>求值一个 Kotlin 脚本文件。当使用此选项调用时，编译器会执行给定实参中的第一个 Kotlin 脚本 (<code>*.kts</code>) 文件。</p><h3 id="help-h" tabindex="-1">-help (-h) <a class="header-anchor" href="#help-h" aria-label="Permalink to &quot;-help (-h)&quot;">​</a></h3><p>显示用法信息并退出。仅显示标准选项。要显示高级选项，请使用 <code>-X</code>。</p>',19)),i(t,{id:"x",level:"3",title:"-X",labelRef:"experimental-general"}),a[1]||(a[1]=e('<p>显示有关高级选项的信息并退出。这些选项目前不稳定：其名称和行为可能会在不另行通知的情况下更改。</p><h3 id="kotlin-home-path" tabindex="-1">-kotlin-home <em>path</em> <a class="header-anchor" href="#kotlin-home-path" aria-label="Permalink to &quot;-kotlin-home _path_&quot;">​</a></h3><p>指定 Kotlin 编译器的自定义路径，用于发现运行时库。</p><h3 id="p-plugin-pluginid-optionname-value" tabindex="-1">-P plugin:pluginId:optionName=value <a class="header-anchor" href="#p-plugin-pluginid-optionname-value" aria-label="Permalink to &quot;-P plugin:pluginId:optionName=value&quot;">​</a></h3><p>将选项传递给 Kotlin 编译器插件。核心插件及其选项列在文档的<a href="/kotlin/components-stability#core-compiler-plugins">核心编译器插件</a>章节中。</p><h3 id="language-version-version" tabindex="-1">-language-version <em>version</em> <a class="header-anchor" href="#language-version-version" aria-label="Permalink to &quot;-language-version _version_&quot;">​</a></h3><p>提供与指定 Kotlin 版本的源码兼容性。</p><h3 id="api-version-version" tabindex="-1">-api-version <em>version</em> <a class="header-anchor" href="#api-version-version" aria-label="Permalink to &quot;-api-version _version_&quot;">​</a></h3><p>只允许使用来自指定 Kotlin 捆绑库版本的声明。</p><h3 id="progressive" tabindex="-1">-progressive <a class="header-anchor" href="#progressive" aria-label="Permalink to &quot;-progressive&quot;">​</a></h3><p>为编译器启用<a href="/kotlin/whatsnew13#progressive-mode">渐进模式</a>。</p><p>在渐进模式下，不稳定代码的弃用和错误修复会立即生效，而无需经过一个优雅的迁移周期。以渐进模式编写的代码向后兼容；然而，以非渐进模式编写的代码可能会在渐进模式下导致编译错误。</p><h3 id="argfile" tabindex="-1">@argfile <a class="header-anchor" href="#argfile" aria-label="Permalink to &quot;@argfile&quot;">​</a></h3><p>从给定文件中读取编译器选项。此类文件可以包含带有值和源文件路径的编译器选项。选项和路径应以空白字符分隔。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-include-runtime -d hello.jar hello.kt</span></span></code></pre></div><p>要传递包含空白字符的值，请用单引号（<strong>&#39;</strong>）或双引号（<strong>&quot;</strong>）将其括起来。如果值中包含引号，请用反斜杠（<strong>\\</strong>）转义它们。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-include-runtime -d &#39;My folder&#39;</span></span></code></pre></div><p>您也可以传递多个实参文件，例如，将编译器选项与源文件分开。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @compiler.options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @classes</span></span></code></pre></div><p>如果文件位于与当前目录不同的位置，请使用相对路径。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @options/compiler.options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span></span></code></pre></div><h3 id="opt-in-annotation" tabindex="-1">-opt-in <em>annotation</em> <a class="header-anchor" href="#opt-in-annotation" aria-label="Permalink to &quot;-opt-in _annotation_&quot;">​</a></h3><p>启用对需要 <a href="/kotlin/opt-in-requirements">opt-in</a> 的 API 的使用，并使用给定全限定名的要求注解。</p>',23)),i(t,{id:"xrepl",level:"3",title:"-Xrepl",labelRef:"experimental-general"}),a[2]||(a[2]=e('<p>激活 Kotlin REPL。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xrepl</span></span></code></pre></div>',2)),i(t,{id:"xannotation-target-all",level:"3",title:"-Xannotation-target-all",labelRef:"experimental-general"}),a[3]||(a[3]=e('<p>启用实验性的<a href="/kotlin/annotations#all-meta-target"><code>all</code> 注解使用点目标</a>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xannotation-target-all</span></span></code></pre></div>',2)),i(t,{id:"xannotation-default-target-param-property",level:"3",title:"-Xannotation-default-target=param-property",labelRef:"experimental-general"}),a[4]||(a[4]=e('<p>启用新的实验性<a href="/kotlin/annotations#defaults-when-no-use-site-targets-are-specified">注解使用点目标的默认规则</a>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xannotation-default-target=param-property</span></span></code></pre></div><h3 id="警告管理" tabindex="-1">警告管理 <a class="header-anchor" href="#警告管理" aria-label="Permalink to &quot;警告管理&quot;">​</a></h3><h4 id="nowarn" tabindex="-1">-nowarn <a class="header-anchor" href="#nowarn" aria-label="Permalink to &quot;-nowarn&quot;">​</a></h4><p>在编译期间抑制所有警告。</p><h4 id="werror" tabindex="-1">-Werror <a class="header-anchor" href="#werror" aria-label="Permalink to &quot;-Werror&quot;">​</a></h4><p>将所有警告视为编译错误。</p><h4 id="wextra" tabindex="-1">-Wextra <a class="header-anchor" href="#wextra" aria-label="Permalink to &quot;-Wextra&quot;">​</a></h4><p>启用<a href="/kotlin/whatsnew21#extra-compiler-checks">额外的声明、表达式和类型编译器检测</a>，如果为 true 则会发出警告。</p>',9)),i(t,{id:"xwarning-level",level:"4",title:"-Xwarning-level",labelRef:"experimental-general"}),a[5]||(a[5]=e('<p>配置特定编译器警告的严重级别：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xwarning-level=DIAGNOSTIC_NAME:(error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warning</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><code>error</code>：仅将指定警告提升为错误。</li><li><code>warning</code>：为指定诊断发出警告，并默认启用。</li><li><code>disabled</code>：仅抑制指定警告在模块范围内的显示。</li></ul><p>您可以通过将模块范围内的规则与特定规则结合来调整项目中的警告报告：</p><table tabindex="0"><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>-nowarn -Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>抑制除指定警告外的所有警告。</td></tr><tr><td><code>-Werror -Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>将除指定警告外的所有警告提升为错误。</td></tr><tr><td><code>-Wextra -Xwarning-level=DIAGNOSTIC_NAME:disabled</code></td><td>启用除指定检测外的所有额外检测。</td></tr></tbody></table><p>如果您有许多警告需要从通用规则中排除，可以使用 <a href="#argfile"><code>@argfile</code></a> 将它们列在单独的文件中。</p><h2 id="kotlin-jvm-编译器选项" tabindex="-1">Kotlin/JVM 编译器选项 <a class="header-anchor" href="#kotlin-jvm-编译器选项" aria-label="Permalink to &quot;Kotlin/JVM 编译器选项&quot;">​</a></h2><p>用于 JVM 的 Kotlin 编译器将 Kotlin 源文件编译成 Java 类文件。Kotlin 到 JVM 编译的命令行工具是 <code>kotlinc</code> 和 <code>kotlinc-jvm</code>。您也可以使用它们来执行 Kotlin 脚本文件。</p><p>除了<a href="#common-options">通用选项</a>外，Kotlin/JVM 编译器还具有以下列出的选项。</p><h3 id="classpath-path-cp-path" tabindex="-1">-classpath <em>path</em> (-cp <em>path</em>) <a class="header-anchor" href="#classpath-path-cp-path" aria-label="Permalink to &quot;-classpath _path_ (-cp _path_)&quot;">​</a></h3><p>在指定路径中搜索类文件。使用系统路径分隔符（Windows 上为 <strong>;</strong>，macOS/Linux 上为 <strong>:</strong>）分隔 classpath 的元素。classpath 可以包含文件和目录路径、ZIP 或 JAR 文件。</p><h3 id="d-path" tabindex="-1">-d <em>path</em> <a class="header-anchor" href="#d-path" aria-label="Permalink to &quot;-d _path_&quot;">​</a></h3><p>将生成的类文件放置到指定位置。该位置可以是目录、ZIP 或 JAR 文件。</p><h3 id="include-runtime" tabindex="-1">-include-runtime <a class="header-anchor" href="#include-runtime" aria-label="Permalink to &quot;-include-runtime&quot;">​</a></h3><p>将 Kotlin 运行时包含到生成的 JAR 文件中。使生成的归档文件可在任何启用 Java 的环境中运行。</p><h3 id="jdk-home-path" tabindex="-1">-jdk-home <em>path</em> <a class="header-anchor" href="#jdk-home-path" aria-label="Permalink to &quot;-jdk-home _path_&quot;">​</a></h3><p>如果与默认的 <code>JAVA_HOME</code> 不同，则使用自定义 JDK 主目录包含到 classpath 中。</p>',17)),i(t,{id:"xjdk-release-version",level:"3",title:"-Xjdk-release=version",labelRef:"experimental-general"}),a[6]||(a[6]=e('<p>指定生成的 JVM 字节码的目标版本。将 classpath 中 JDK 的 API 限制为指定的 Java 版本。自动设置 <a href="#jvm-target-version"><code>-jvm-target version</code></a>。可能的值为 <code>1.8</code>、<code>9</code>、<code>10</code>、...、<code>24</code>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>此选项<a href="https://youtrack.jetbrains.com/issue/KT-29974" target="_blank" rel="noreferrer">不保证</a>对每个 JDK 发行版都有效。</p></div><h3 id="jvm-target-version" tabindex="-1">-jvm-target <em>version</em> <a class="header-anchor" href="#jvm-target-version" aria-label="Permalink to &quot;-jvm-target _version_&quot;">​</a></h3><p>指定生成的 JVM 字节码的目标版本。可能的值为 <code>1.8</code>、<code>9</code>、<code>10</code>、...、<code>24</code>。默认值为 <code>1.8</code>。</p><h3 id="java-parameters" tabindex="-1">-java-parameters <a class="header-anchor" href="#java-parameters" aria-label="Permalink to &quot;-java-parameters&quot;">​</a></h3><p>为 Java 1.8 中关于方法形参的反射生成元数据。</p><h3 id="module-name-name-jvm" tabindex="-1">-module-name <em>name</em> (JVM) <a class="header-anchor" href="#module-name-name-jvm" aria-label="Permalink to &quot;-module-name _name_ (JVM)&quot;">​</a></h3><p>为生成的 <code>.kotlin_module</code> 文件设置自定义名称。</p><h3 id="no-jdk" tabindex="-1">-no-jdk <a class="header-anchor" href="#no-jdk" aria-label="Permalink to &quot;-no-jdk&quot;">​</a></h3><p>不要自动将 Java 运行时包含到 classpath 中。</p><h3 id="no-reflect" tabindex="-1">-no-reflect <a class="header-anchor" href="#no-reflect" aria-label="Permalink to &quot;-no-reflect&quot;">​</a></h3><p>不要自动将 Kotlin 反射 (<code>kotlin-reflect.jar</code>) 包含到 classpath 中。</p><h3 id="no-stdlib-jvm" tabindex="-1">-no-stdlib (JVM) <a class="header-anchor" href="#no-stdlib-jvm" aria-label="Permalink to &quot;-no-stdlib (JVM)&quot;">​</a></h3><p>不要自动将 Kotlin/JVM 标准库 (<code>kotlin-stdlib.jar</code>) 和 Kotlin 反射 (<code>kotlin-reflect.jar</code>) 包含到 classpath 中。</p><h3 id="script-templates-classnames" tabindex="-1">-script-templates _classnames[,] <a class="header-anchor" href="#script-templates-classnames" aria-label="Permalink to &quot;-script-templates _classnames[,]&quot;">​</a></h3><p>脚本定义模板类。使用全限定类名，并用逗号（<strong>，</strong>）分隔它们。</p>',16)),i(t,{id:"xjvm-expose-boxed",level:"3",title:"-Xjvm-expose-boxed",labelRef:"experimental-general"}),a[7]||(a[7]=e('<p>生成模块中所有内联值类的装箱版本，以及使用它们的函数的装箱变体，使两者都可以从 Java 访问。关于更多信息，请参见调用 Kotlin 从 Java 指南中的<a href="/kotlin/java-to-kotlin-interop#inline-value-classes">内联值类</a>。</p><h3 id="jvm-default-mode" tabindex="-1">-jvm-default <em>mode</em> <a class="header-anchor" href="#jvm-default-mode" aria-label="Permalink to &quot;-jvm-default _mode_&quot;">​</a></h3><p>控制接口中声明的函数如何在 JVM 上编译为默认方法。</p><table tabindex="0"><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td><code>enable</code></td><td>在接口中生成默认实现，并在子类和 <code>DefaultImpls</code> 类中包含桥接函数。（默认）</td></tr><tr><td><code>no-compatibility</code></td><td>仅在接口中生成默认实现，跳过兼容性桥接和 <code>DefaultImpls</code> 类。</td></tr><tr><td><code>disable</code></td><td>仅生成兼容性桥接和 <code>DefaultImpls</code> 类，跳过默认方法。</td></tr></tbody></table><h2 id="kotlin-js-编译器选项" tabindex="-1">Kotlin/JS 编译器选项 <a class="header-anchor" href="#kotlin-js-编译器选项" aria-label="Permalink to &quot;Kotlin/JS 编译器选项&quot;">​</a></h2><p>用于 JS 的 Kotlin 编译器将 Kotlin 源文件编译成 JavaScript 代码。Kotlin 到 JS 编译的命令行工具是 <code>kotlinc-js</code>。</p><p>除了<a href="#common-options">通用选项</a>外，Kotlin/JS 编译器还具有以下列出的选项。</p>',7)),a[8]||(a[8]=o("h3",{"es5|es2015":"",id:"target",tabindex:"-1"},[l("-target "),o("a",{class:"header-anchor",href:"#target","aria-label":'Permalink to "-target {es5|es2015}"'},"​")],-1)),a[9]||(a[9]=e('<p>为指定的 ECMA 版本生成 JS 文件。</p><h3 id="libraries-path" tabindex="-1">-libraries <em>path</em> <a class="header-anchor" href="#libraries-path" aria-label="Permalink to &quot;-libraries _path_&quot;">​</a></h3><p>Kotlin 库 <code>.meta.js</code> 和 <code>.kjsm</code> 文件的路径，由系统路径分隔符分隔。</p><h3 id="main-call-nocall" tabindex="-1">-main <em>{call|noCall}</em> <a class="header-anchor" href="#main-call-nocall" aria-label="Permalink to &quot;-main _{call|noCall}_&quot;">​</a></h3><p>定义 <code>main</code> 函数是否应在执行时被调用。</p><h3 id="meta-info" tabindex="-1">-meta-info <a class="header-anchor" href="#meta-info" aria-label="Permalink to &quot;-meta-info&quot;">​</a></h3><p>生成包含元数据的 <code>.meta.js</code> 和 <code>.kjsm</code> 文件。创建 JS 库时使用此选项。</p>',7)),a[10]||(a[10]=o("h3",{"umd|commonjs|amd|plain":"",id:"module-kind",tabindex:"-1"},[l("-module-kind "),o("a",{class:"header-anchor",href:"#module-kind","aria-label":'Permalink to "-module-kind {umd|commonjs|amd|plain}"'},"​")],-1)),a[11]||(a[11]=e('<p>编译器生成的 JS 模块种类：</p><ul><li><code>umd</code> - 一个 <a href="https://github.com/umdjs/umd" target="_blank" rel="noreferrer">Universal Module Definition</a> 模块</li><li><code>commonjs</code> - 一个 <a href="http://www.commonjs.org/" target="_blank" rel="noreferrer">CommonJS</a> 模块</li><li><code>amd</code> - 一个 <a href="https://en.wikipedia.org/wiki/Asynchronous_module_definition" target="_blank" rel="noreferrer">Asynchronous Module Definition</a> 模块</li><li><code>plain</code> - 一个 plain JS 模块</li></ul><p>关于不同种类 JS 模块及其区别的更多信息，请参见<a href="https://www.davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/" target="_blank" rel="noreferrer">这篇文章</a>。</p><h3 id="no-stdlib-js" tabindex="-1">-no-stdlib (JS) <a class="header-anchor" href="#no-stdlib-js" aria-label="Permalink to &quot;-no-stdlib (JS)&quot;">​</a></h3><p>不要自动将默认的 Kotlin/JS 标准库包含到编译依赖项中。</p><h3 id="output-filepath" tabindex="-1">-output <em>filepath</em> <a class="header-anchor" href="#output-filepath" aria-label="Permalink to &quot;-output _filepath_&quot;">​</a></h3><p>设置编译结果的目标文件。该值必须是 <code>.js</code> 文件的路径，包括其名称。</p><h3 id="output-postfix-filepath" tabindex="-1">-output-postfix <em>filepath</em> <a class="header-anchor" href="#output-postfix-filepath" aria-label="Permalink to &quot;-output-postfix _filepath_&quot;">​</a></h3><p>将指定文件的内容添加到输出文件的末尾。</p><h3 id="output-prefix-filepath" tabindex="-1">-output-prefix <em>filepath</em> <a class="header-anchor" href="#output-prefix-filepath" aria-label="Permalink to &quot;-output-prefix _filepath_&quot;">​</a></h3><p>将指定文件的内容添加到输出文件的开头。</p><h3 id="source-map" tabindex="-1">-source-map <a class="header-anchor" href="#source-map" aria-label="Permalink to &quot;-source-map&quot;">​</a></h3><p>生成源码映射。</p><h3 id="source-map-base-dirs-path" tabindex="-1">-source-map-base-dirs <em>path</em> <a class="header-anchor" href="#source-map-base-dirs-path" aria-label="Permalink to &quot;-source-map-base-dirs _path_&quot;">​</a></h3><p>使用指定路径作为基目录。基目录用于计算源码映射中的相对路径。</p><h3 id="source-map-embed-sources-always-never-inlining" tabindex="-1">-source-map-embed-sources <em>{always|never|inlining}</em> <a class="header-anchor" href="#source-map-embed-sources-always-never-inlining" aria-label="Permalink to &quot;-source-map-embed-sources _{always|never|inlining}_&quot;">​</a></h3><p>将源文件嵌入到源码映射中。</p><h3 id="source-map-names-policy-simple-names-fully-qualified-names-no" tabindex="-1">-source-map-names-policy <em>{simple-names|fully-qualified-names|no}</em> <a class="header-anchor" href="#source-map-names-policy-simple-names-fully-qualified-names-no" aria-label="Permalink to &quot;-source-map-names-policy _{simple-names|fully-qualified-names|no}_&quot;">​</a></h3><p>将您在 Kotlin 代码中声明的变量和函数名添加到源码映射中。</p><table tabindex="0"><thead><tr><th>设置</th><th>描述</th><th>示例输出</th></tr></thead><tbody><tr><td><code>simple-names</code></td><td>添加变量名和简单函数名。（默认）</td><td><code>main</code></td></tr><tr><td><code>fully-qualified-names</code></td><td>添加变量名和全限定函数名。</td><td><code>com.example.kjs.playground.main</code></td></tr><tr><td><code>no</code></td><td>不添加任何变量或函数名。</td><td>不适用</td></tr></tbody></table><h3 id="source-map-prefix" tabindex="-1">-source-map-prefix <a class="header-anchor" href="#source-map-prefix" aria-label="Permalink to &quot;-source-map-prefix&quot;">​</a></h3><p>将指定前缀添加到源码映射中的路径。</p><h2 id="kotlin-native-编译器选项" tabindex="-1">Kotlin/Native 编译器选项 <a class="header-anchor" href="#kotlin-native-编译器选项" aria-label="Permalink to &quot;Kotlin/Native 编译器选项&quot;">​</a></h2><p>Kotlin/Native 编译器将 Kotlin 源文件编译成适用于<a href="/kotlin/native-overview#target-platforms">支持平台</a>的原生二进制文件。Kotlin/Native 编译的命令行工具是 <code>kotlinc-native</code>。</p><p>除了<a href="#common-options">通用选项</a>外，Kotlin/Native 编译器还具有以下列出的选项。</p><h3 id="enable-assertions-ea" tabindex="-1">-enable-assertions (-ea) <a class="header-anchor" href="#enable-assertions-ea" aria-label="Permalink to &quot;-enable-assertions (-ea)&quot;">​</a></h3><p>在生成的代码中启用运行时断言。</p><h3 id="g" tabindex="-1">-g <a class="header-anchor" href="#g" aria-label="Permalink to &quot;-g&quot;">​</a></h3><p>启用发出调试信息。此选项会降低优化级别，不应与 <a href="#opt"><code>-opt</code></a> 选项结合使用。</p><h3 id="generate-test-runner-tr" tabindex="-1">-generate-test-runner (-tr) <a class="header-anchor" href="#generate-test-runner-tr" aria-label="Permalink to &quot;-generate-test-runner (-tr)&quot;">​</a></h3><p>生成一个用于从项目运行单元测试的应用程序。</p><h3 id="generate-no-exit-test-runner-trn" tabindex="-1">-generate-no-exit-test-runner (-trn) <a class="header-anchor" href="#generate-no-exit-test-runner-trn" aria-label="Permalink to &quot;-generate-no-exit-test-runner (-trn)&quot;">​</a></h3><p>生成一个用于运行单元测试而无需显式进程退出的应用程序。</p><h3 id="include-binary-path-ib-path" tabindex="-1">-include-binary <em>path</em> (-ib <em>path</em>) <a class="header-anchor" href="#include-binary-path-ib-path" aria-label="Permalink to &quot;-include-binary _path_ (-ib _path_)&quot;">​</a></h3><p>将外部二进制文件打包到生成的 klib 文件中。</p><h3 id="library-path-l-path" tabindex="-1">-library <em>path</em> (-l <em>path</em>) <a class="header-anchor" href="#library-path-l-path" aria-label="Permalink to &quot;-library _path_ (-l _path_)&quot;">​</a></h3><p>链接到库。关于在 Kotlin/Native 项目中使用库的更多信息，请参见<a href="/kotlin/native-libraries">Kotlin/Native 库</a>。</p><h3 id="library-version-version-lv-version" tabindex="-1">-library-version <em>version</em> (-lv <em>version</em>) <a class="header-anchor" href="#library-version-version-lv-version" aria-label="Permalink to &quot;-library-version _version_ (-lv _version_)&quot;">​</a></h3><p>设置库版本。</p><h3 id="list-targets" tabindex="-1">-list-targets <a class="header-anchor" href="#list-targets" aria-label="Permalink to &quot;-list-targets&quot;">​</a></h3><p>列出可用的硬件目标。</p><h3 id="manifest-path" tabindex="-1">-manifest <em>path</em> <a class="header-anchor" href="#manifest-path" aria-label="Permalink to &quot;-manifest _path_&quot;">​</a></h3><p>提供一个清单附加文件。</p><h3 id="module-name-name-native" tabindex="-1">-module-name <em>name</em> (Native) <a class="header-anchor" href="#module-name-name-native" aria-label="Permalink to &quot;-module-name _name_ (Native)&quot;">​</a></h3><p>指定编译模块的名称。此选项也可用于指定导出到 Objective-C 的声明的名称前缀：<a href="/kotlin/native-faq#how-do-i-specify-a-custom-objective-c-prefix-name-for-my-kotlin-framework">如何为我的 Kotlin framework 指定自定义 Objective-C 前缀/名称？</a></p><h3 id="native-library-path-nl-path" tabindex="-1">-native-library <em>path</em> (-nl <em>path</em>) <a class="header-anchor" href="#native-library-path-nl-path" aria-label="Permalink to &quot;-native-library _path_ (-nl _path_)&quot;">​</a></h3><p>包含原生位码库。</p><h3 id="no-default-libs" tabindex="-1">-no-default-libs <a class="header-anchor" href="#no-default-libs" aria-label="Permalink to &quot;-no-default-libs&quot;">​</a></h3><p>禁用将用户代码与随编译器分发的预构建<a href="/kotlin/native-platform-libs">平台库</a>链接。</p><h3 id="nomain" tabindex="-1">-nomain <a class="header-anchor" href="#nomain" aria-label="Permalink to &quot;-nomain&quot;">​</a></h3><p>假定 <code>main</code> 入口点由外部库提供。</p><h3 id="nopack" tabindex="-1">-nopack <a class="header-anchor" href="#nopack" aria-label="Permalink to &quot;-nopack&quot;">​</a></h3><p>不要将库打包到 klib 文件中。</p><h3 id="linker-option" tabindex="-1">-linker-option <a class="header-anchor" href="#linker-option" aria-label="Permalink to &quot;-linker-option&quot;">​</a></h3><p>在二进制构建期间将实参传递给链接器。这可用于链接到某个原生库。</p><h3 id="linker-options-args" tabindex="-1">-linker-options <em>args</em> <a class="header-anchor" href="#linker-options-args" aria-label="Permalink to &quot;-linker-options _args_&quot;">​</a></h3><p>在二进制构建期间将多个实参传递给链接器。用空白字符分隔实参。</p><h3 id="nostdlib" tabindex="-1">-nostdlib <a class="header-anchor" href="#nostdlib" aria-label="Permalink to &quot;-nostdlib&quot;">​</a></h3><p>不要链接标准库。</p><h3 id="opt" tabindex="-1">-opt <a class="header-anchor" href="#opt" aria-label="Permalink to &quot;-opt&quot;">​</a></h3><p>启用编译优化并生成具有更好运行时性能的二进制文件。不建议将其与降低优化级别的 <a href="#g"><code>-g</code></a> 选项结合使用。</p><h3 id="output-name-o-name" tabindex="-1">-output <em>name</em> (-o <em>name</em>) <a class="header-anchor" href="#output-name-o-name" aria-label="Permalink to &quot;-output _name_ (-o _name_)&quot;">​</a></h3><p>设置输出文件的名称。</p><h3 id="entry-name-e-name" tabindex="-1">-entry <em>name</em> (-e <em>name</em>) <a class="header-anchor" href="#entry-name-e-name" aria-label="Permalink to &quot;-entry _name_ (-e _name_)&quot;">​</a></h3><p>指定全限定入口点名称。</p><h3 id="produce-output-p-output" tabindex="-1">-produce <em>output</em> (-p <em>output</em>) <a class="header-anchor" href="#produce-output-p-output" aria-label="Permalink to &quot;-produce _output_ (-p _output_)&quot;">​</a></h3><p>指定输出文件种类：</p><ul><li><code>program</code></li><li><code>static</code></li><li><code>dynamic</code></li><li><code>framework</code></li><li><code>library</code></li><li><code>bitcode</code></li></ul><h3 id="repo-path-r-path" tabindex="-1">-repo <em>path</em> (-r <em>path</em>) <a class="header-anchor" href="#repo-path-r-path" aria-label="Permalink to &quot;-repo _path_ (-r _path_)&quot;">​</a></h3><p>库搜索路径。关于更多信息，请参见<a href="/kotlin/native-libraries#library-search-sequence">库搜索序列</a>。</p><h3 id="target-target" tabindex="-1">-target <em>target</em> <a class="header-anchor" href="#target-target" aria-label="Permalink to &quot;-target _target_&quot;">​</a></h3><p>设置硬件目标。要查看可用目标的列表，请使用 <a href="#list-targets"><code>-list-targets</code></a> 选项。</p>',72))])}const _=n(p,[["render",h]]);export{f as __pageData,_ as default};
