import{_ as t,c as i,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const p=JSON.parse('{"title":"與 Java 的比較","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/comparison-to-java.md","filePath":"zh-Hant/kotlin/comparison-to-java.md","lastUpdated":1754307826000}'),l={name:"zh-Hant/kotlin/comparison-to-java.md"};function o(r,a,s,h,c,f){return n(),i("div",null,a[0]||(a[0]=[e('<h1 id="與-java-的比較" tabindex="-1">與 Java 的比較 <a class="header-anchor" href="#與-java-的比較" aria-label="Permalink to &quot;與 Java 的比較&quot;">​</a></h1><h2 id="kotlin-解決了-java-的一些問題" tabindex="-1">Kotlin 解決了 Java 的一些問題 <a class="header-anchor" href="#kotlin-解決了-java-的一些問題" aria-label="Permalink to &quot;Kotlin 解決了 Java 的一些問題&quot;">​</a></h2><p>Kotlin 解決了 Java 遇到的一系列問題：</p><ul><li>空值參考由<a href="/zh-Hant/kotlin/null-safety">類型系統控制</a>。</li><li><a href="/zh-Hant/kotlin/java-interop#java-generics-in-kotlin">無裸類型</a></li><li>Kotlin 中的陣列是<a href="/zh-Hant/kotlin/arrays">不變的</a></li><li>Kotlin 具有適當的<a href="/zh-Hant/kotlin/lambdas#function-types">函式類型</a>，而非 Java 的 SAM 轉換。</li><li><a href="/zh-Hant/kotlin/generics#use-site-variance-type-projections">使用處變數 (Use-site variance)</a> 而無萬用字元 (wildcards)。</li><li>Kotlin 沒有受檢查的<a href="/zh-Hant/kotlin/exceptions">例外</a>。</li><li><a href="/zh-Hant/kotlin/collections-overview">讀取專用與可變集合的獨立介面</a>。</li></ul><h2 id="java-擁有但-kotlin-沒有的功能" tabindex="-1">Java 擁有但 Kotlin 沒有的功能 <a class="header-anchor" href="#java-擁有但-kotlin-沒有的功能" aria-label="Permalink to &quot;Java 擁有但 Kotlin 沒有的功能&quot;">​</a></h2><ul><li><a href="/zh-Hant/kotlin/exceptions">受檢查例外 (Checked exceptions)</a></li><li>非類別的<a href="/zh-Hant/kotlin/basic-types">基本類型</a>。位元組碼會盡可能使用基本類型，但它們並非明確可用。</li><li><a href="/zh-Hant/kotlin/classes">靜態成員</a>已被<a href="/zh-Hant/kotlin/object-declarations#companion-objects">伴動物件</a>、<a href="/zh-Hant/kotlin/functions">頂層函式</a>、<a href="/zh-Hant/kotlin/extensions#extension-functions">擴充函式</a>或 <a href="/zh-Hant/kotlin/java-to-kotlin-interop#static-methods"><code>@JvmStatic</code></a> 取代。</li><li><a href="/zh-Hant/kotlin/generics">萬用字元類型 (Wildcard-types)</a> 已被<a href="/zh-Hant/kotlin/generics#declaration-site-variance">宣告處變數 (declaration-site variance)</a> 和<a href="/zh-Hant/kotlin/generics#type-projections">類型投影 (type projections)</a> 取代。</li><li><a href="/zh-Hant/kotlin/control-flow#if-expression">三元運算子 <code>a ? b : c</code></a> 已被 <a href="/zh-Hant/kotlin/control-flow#if-expression">if 表達式</a>取代。</li><li><a href="https://openjdk.org/jeps/395" target="_blank" rel="noreferrer">記錄 (Records)</a></li><li><a href="https://openjdk.org/projects/amber/design-notes/patterns/pattern-matching-for-java" target="_blank" rel="noreferrer">模式比對 (Pattern Matching)</a></li><li><code>package-private</code> <a href="/zh-Hant/kotlin/visibility-modifiers">可見性修飾符</a></li></ul><h2 id="kotlin-擁有但-java-沒有的功能" tabindex="-1">Kotlin 擁有但 Java 沒有的功能 <a class="header-anchor" href="#kotlin-擁有但-java-沒有的功能" aria-label="Permalink to &quot;Kotlin 擁有但 Java 沒有的功能&quot;">​</a></h2><ul><li><a href="/zh-Hant/kotlin/lambdas">Lambda 表達式</a> + <a href="/zh-Hant/kotlin/inline-functions">行內函式</a> = 高效能的自訂控制結構</li><li><a href="/zh-Hant/kotlin/extensions">擴充函式</a></li><li><a href="/zh-Hant/kotlin/null-safety">空值安全</a></li><li><a href="/zh-Hant/kotlin/typecasts">智慧型轉型 (Smart casts)</a> (<strong>Java 16</strong>: <code>instanceof</code> 的模式比對)</li><li><a href="/zh-Hant/kotlin/strings">字串模板 (String templates)</a> (<strong>Java 21</strong>: 字串模板 (預覽))</li><li><a href="/zh-Hant/kotlin/properties">屬性</a></li><li><a href="/zh-Hant/kotlin/classes">主要建構函式</a></li><li><a href="/zh-Hant/kotlin/delegation">一級委託</a></li><li><a href="/zh-Hant/kotlin/basic-types">變數和屬性類型的類型推斷 (Type inference)</a> (<strong>Java 10</strong>: 局部變數類型推斷)</li><li><a href="/zh-Hant/kotlin/object-declarations">單例</a></li><li><a href="/zh-Hant/kotlin/generics">宣告處變數 (Declaration-site variance) &amp; 類型投影 (Type projections)</a></li><li><a href="/zh-Hant/kotlin/ranges">範圍表達式</a></li><li><a href="/zh-Hant/kotlin/operator-overloading">運算子重載</a></li><li><a href="/zh-Hant/kotlin/classes#companion-objects">伴動物件</a></li><li><a href="/zh-Hant/kotlin/data-classes">資料類別</a></li><li><a href="/zh-Hant/kotlin/coroutines-overview">協程</a></li><li><a href="/zh-Hant/kotlin/functions">頂層函式</a></li><li><a href="/zh-Hant/kotlin/functions#parameters-with-default-values">帶有預設值的參數</a></li><li><a href="/zh-Hant/kotlin/functions#named-arguments">命名參數</a></li><li><a href="/zh-Hant/kotlin/functions#infix-notation">中綴函式</a></li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">期望與實際宣告</a></li><li><a href="/zh-Hant/kotlin/whatsnew14#explicit-api-mode-for-library-authors">顯式 API 模式</a> 和<a href="/zh-Hant/kotlin/opt-in-requirements">對 API 介面的更好控制</a></li></ul><h2 id="下一步是什麼" tabindex="-1">下一步是什麼？ <a class="header-anchor" href="#下一步是什麼" aria-label="Permalink to &quot;下一步是什麼？&quot;">​</a></h2><p>學習如何：</p><ul><li>在 Java 和 Kotlin 中執行<a href="/zh-Hant/kotlin/java-to-kotlin-idioms-strings">字串的典型任務</a>。</li><li>在 Java 和 Kotlin 中執行<a href="/zh-Hant/kotlin/java-to-kotlin-collections-guide">集合的典型任務</a>。</li><li><a href="/zh-Hant/kotlin/java-to-kotlin-nullability-guide">處理 Java 和 Kotlin 中的空值性</a>。</li></ul>',11)]))}const d=t(l,[["render",o]]);export{p as __pageData,d as default};
